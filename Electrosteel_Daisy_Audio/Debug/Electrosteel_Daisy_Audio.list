
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0002d470  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  2402d708  2402d708  00058a40  2**0
                  CONTENTS
  3 .exidx        00000000  2402d708  2402d708  00058a40  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  2402d708  2402d708  00058a40  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  2402d708  2402d708  0003d708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  2402d70c  2402d70c  0003d70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    0003f7a0  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 000011c0  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00031f80  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000034  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         00000758  20000000  2402d710  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d3ac  20000758  2402de68  00060758  2**3
                  ALLOC
 14 .itcmram      00008640  00000400  2402de68  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    04000000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  00058a6e  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  00058a6e  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  00058a6e  2**0
                  CONTENTS
 19 .heap         00000000  2001db04  2001db04  00058a6e  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001db04  2001db04  00058a6e  2**0
                  CONTENTS
 21 .debug_info   0008b1d7  00000000  00000000  00058a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000a943  00000000  00000000  000e3c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0007da2c  00000000  00000000  000ee588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00003ac8  00000000  00000000  0016bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 0000fe90  00000000  00000000  0016fa7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00044011  00000000  00000000  0017f90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   00076ff0  00000000  00000000  001c391d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    00173ab6  00000000  00000000  0023a90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .comment      000000c5  00000000  00000000  003ae3c3  2**0
                  CONTENTS, READONLY
 30 .debug_frame  0000d150  00000000  00000000  003ae488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000758 	.word	0x20000758
240002b4:	00000000 	.word	0x00000000
240002b8:	00008a40 	.word	0x00008a40

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000075c 	.word	0x2000075c
240002d4:	00008a40 	.word	0x00008a40

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit()
{
24000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000664:	4ceb      	ldr	r4, [pc, #940]	; (24000a14 <audioInit+0x3b4>)
24000666:	f64e 2260 	movw	r2, #60000	; 0xea60
2400066a:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 24000a18 <audioInit+0x3b8>
2400066e:	4620      	mov	r0, r4
24000670:	49ea      	ldr	r1, [pc, #936]	; (24000a1c <audioInit+0x3bc>)
24000672:	4beb      	ldr	r3, [pc, #940]	; (24000a20 <audioInit+0x3c0>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000674:	4deb      	ldr	r5, [pc, #940]	; (24000a24 <audioInit+0x3c4>)
{
24000676:	ed2d 8b10 	vpush	{d8-d15}
2400067a:	b089      	sub	sp, #36	; 0x24
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400067c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000680:	f014 fa1a 	bl	24014ab8 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000684:	4623      	mov	r3, r4
24000686:	4ae8      	ldr	r2, [pc, #928]	; (24000a28 <audioInit+0x3c8>)
24000688:	49e8      	ldr	r1, [pc, #928]	; (24000a2c <audioInit+0x3cc>)
2400068a:	48e9      	ldr	r0, [pc, #932]	; (24000a30 <audioInit+0x3d0>)
2400068c:	f012 fcae 	bl	24012fec <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000690:	4623      	mov	r3, r4
24000692:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
24000696:	49e7      	ldr	r1, [pc, #924]	; (24000a34 <audioInit+0x3d4>)
24000698:	48e7      	ldr	r0, [pc, #924]	; (24000a38 <audioInit+0x3d8>)
2400069a:	f012 fca7 	bl	24012fec <tMempool_init>
	leaf.clearOnAllocation = 1;
2400069e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006a4:	eddf 1ae5 	vldr	s3, [pc, #916]	; 24000a3c <audioInit+0x3dc>
240006a8:	eddf 0ae5 	vldr	s1, [pc, #916]	; 24000a40 <audioInit+0x3e0>
240006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006b0:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 24000a44 <audioInit+0x3e4>
240006b4:	48e4      	ldr	r0, [pc, #912]	; (24000a48 <audioInit+0x3e8>)
	leaf.clearOnAllocation = 1;
240006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b8:	f012 f918 	bl	240128ec <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006bc:	48e3      	ldr	r0, [pc, #908]	; (24000a4c <audioInit+0x3ec>)
		previousStringInputs[i]	= 0;
240006be:	2200      	movs	r2, #0
240006c0:	4be3      	ldr	r3, [pc, #908]	; (24000a50 <audioInit+0x3f0>)
	tCycle_init(&testSine, &leaf);
240006c2:	4621      	mov	r1, r4
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006c4:	6005      	str	r5, [r0, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c6:	4ce3      	ldr	r4, [pc, #908]	; (24000a54 <audioInit+0x3f4>)
240006c8:	48e3      	ldr	r0, [pc, #908]	; (24000a58 <audioInit+0x3f8>)
		previousStringInputs[i]	= 0;
240006ca:	601a      	str	r2, [r3, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006cc:	6004      	str	r4, [r0, #0]
		previousStringInputs[i]	= 0;
240006ce:	605a      	str	r2, [r3, #4]
	tCycle_init(&testSine, &leaf);
240006d0:	48e2      	ldr	r0, [pc, #904]	; (24000a5c <audioInit+0x3fc>)
		previousStringInputs[i]	= 0;
240006d2:	609a      	str	r2, [r3, #8]
240006d4:	60da      	str	r2, [r3, #12]
240006d6:	611a      	str	r2, [r3, #16]
240006d8:	615a      	str	r2, [r3, #20]
240006da:	619a      	str	r2, [r3, #24]
240006dc:	61da      	str	r2, [r3, #28]
240006de:	621a      	str	r2, [r3, #32]
240006e0:	625a      	str	r2, [r3, #36]	; 0x24
240006e2:	629a      	str	r2, [r3, #40]	; 0x28
240006e4:	62da      	str	r2, [r3, #44]	; 0x2c
	tCycle_init(&testSine, &leaf);
240006e6:	f012 fd01 	bl	240130ec <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006ea:	ed9f 0add 	vldr	s0, [pc, #884]	; 24000a60 <audioInit+0x400>
240006ee:	48db      	ldr	r0, [pc, #876]	; (24000a5c <audioInit+0x3fc>)
240006f0:	f012 fd3e 	bl	24013170 <tCycle_setFreq>
		totalGain[0] += partials[i];
240006f4:	4cdb      	ldr	r4, [pc, #876]	; (24000a64 <audioInit+0x404>)
240006f6:	4adc      	ldr	r2, [pc, #880]	; (24000a68 <audioInit+0x408>)
		totalGain[1] += partialsHigh[i];
240006f8:	49dc      	ldr	r1, [pc, #880]	; (24000a6c <audioInit+0x40c>)
		totalGain[0] += partials[i];
240006fa:	ed92 0a00 	vldr	s0, [r2]
240006fe:	edd4 6a00 	vldr	s13, [r4]
		totalGain[1] += partialsHigh[i];
24000702:	ed94 7a01 	vldr	s14, [r4, #4]
24000706:	ed91 1a00 	vldr	s2, [r1]
		totalGain[0] += partials[i];
2400070a:	ee76 6a80 	vadd.f32	s13, s13, s0
2400070e:	ed92 2a01 	vldr	s4, [r2, #4]
		totalGain[1] += partialsHigh[i];
24000712:	ee37 7a01 	vadd.f32	s14, s14, s2
24000716:	edd1 2a01 	vldr	s5, [r1, #4]
		totalGain[0] += partials[i];
2400071a:	ee76 6a82 	vadd.f32	s13, s13, s4
2400071e:	ed92 4a02 	vldr	s8, [r2, #8]
		totalGain[1] += partialsHigh[i];
24000722:	ed91 1a02 	vldr	s2, [r1, #8]
24000726:	ee37 7a22 	vadd.f32	s14, s14, s5
		totalGain[0] += partials[i];
2400072a:	edd2 3a03 	vldr	s7, [r2, #12]
2400072e:	ee76 6a84 	vadd.f32	s13, s13, s8
		totalGain[1] += partialsHigh[i];
24000732:	ed91 0a03 	vldr	s0, [r1, #12]
		totalGain[0] += partials[i];
24000736:	ed92 3a04 	vldr	s6, [r2, #16]
		totalGain[1] += partialsHigh[i];
2400073a:	ee37 7a01 	vadd.f32	s14, s14, s2
2400073e:	ed91 4a04 	vldr	s8, [r1, #16]
		totalGain[0] += partials[i];
24000742:	ee76 6aa3 	vadd.f32	s13, s13, s7
24000746:	edd2 1a05 	vldr	s3, [r2, #20]
		totalGain[1] += partialsHigh[i];
2400074a:	edd1 2a05 	vldr	s5, [r1, #20]
2400074e:	ee37 7a00 	vadd.f32	s14, s14, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000752:	4bc7      	ldr	r3, [pc, #796]	; (24000a70 <audioInit+0x410>)
		totalGain[0] += partials[i];
24000754:	ee76 6a83 	vadd.f32	s13, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000758:	48c6      	ldr	r0, [pc, #792]	; (24000a74 <audioInit+0x414>)
		totalGain[0] += partials[i];
2400075a:	ed92 5a06 	vldr	s10, [r2, #24]
		totalGain[1] += partialsHigh[i];
2400075e:	ee37 7a04 	vadd.f32	s14, s14, s8
24000762:	ed91 2a06 	vldr	s4, [r1, #24]
		totalGain[0] += partials[i];
24000766:	ee76 6aa1 	vadd.f32	s13, s13, s3
2400076a:	edd2 0a07 	vldr	s1, [r2, #28]
		totalGain[1] += partialsHigh[i];
2400076e:	ed91 1a07 	vldr	s2, [r1, #28]
24000772:	ee37 7a22 	vadd.f32	s14, s14, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000776:	edd0 2a00 	vldr	s5, [r0]
		totalGain[0] += partials[i];
2400077a:	ee76 6a85 	vadd.f32	s13, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400077e:	ed93 5a00 	vldr	s10, [r3]
24000782:	edd3 1a01 	vldr	s3, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000786:	ee37 7a02 	vadd.f32	s14, s14, s4
		totalGain[0] += partials[i];
2400078a:	edd2 4a08 	vldr	s9, [r2, #32]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400078e:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
24000792:	edd1 3a08 	vldr	s7, [r1, #32]
		totalGain[0] += partials[i];
24000796:	ee76 6aa0 	vadd.f32	s13, s13, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400079a:	ed93 5a02 	vldr	s10, [r3, #8]
		totalGain[1] += partialsHigh[i];
2400079e:	ee37 7a01 	vadd.f32	s14, s14, s2
		totalGain[0] += partials[i];
240007a2:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007a6:	ee72 2aa1 	vadd.f32	s5, s5, s3
		totalGain[1] += partialsHigh[i];
240007aa:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
		totalGain[0] += partials[i];
240007ae:	ee76 6aa4 	vadd.f32	s13, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007b2:	ed93 2a03 	vldr	s4, [r3, #12]
		totalGain[1] += partialsHigh[i];
240007b6:	ee37 7a23 	vadd.f32	s14, s14, s7
		totalGain[0] += partials[i];
240007ba:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007be:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
240007c2:	ed91 3a0a 	vldr	s6, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
240007c6:	ee76 6a86 	vadd.f32	s13, s13, s12
240007ca:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
		totalGain[1] += partialsHigh[i];
240007ce:	ee37 7a00 	vadd.f32	s14, s14, s0
240007d2:	ed91 4a0b 	vldr	s8, [r1, #44]	; 0x2c
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007d6:	ee72 2a82 	vadd.f32	s5, s5, s4
240007da:	edd3 0a04 	vldr	s1, [r3, #16]
		totalGain[0] += partials[i];
240007de:	ee76 6aa5 	vadd.f32	s13, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007e2:	ed93 1a05 	vldr	s2, [r3, #20]
		totalGain[1] += partialsHigh[i];
240007e6:	ee37 7a03 	vadd.f32	s14, s14, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ea:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
240007ee:	ed90 3a01 	vldr	s6, [r0, #4]
240007f2:	ee72 2aa0 	vadd.f32	s5, s5, s1
240007f6:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
240007fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007fe:	ee33 3a25 	vadd.f32	s6, s6, s11
24000802:	ed93 8a06 	vldr	s16, [r3, #24]
24000806:	ee72 2a81 	vadd.f32	s5, s5, s2
2400080a:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
2400080e:	edd3 1a07 	vldr	s3, [r3, #28]
		totalGain[1] += partialsHigh[i];
24000812:	ee37 7a04 	vadd.f32	s14, s14, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000816:	ee33 3a02 	vadd.f32	s6, s6, s4
2400081a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
2400081e:	ee72 2a88 	vadd.f32	s5, s5, s16
24000822:	edd3 3a08 	vldr	s7, [r3, #32]
24000826:	edd3 0a10 	vldr	s1, [r3, #64]	; 0x40
2400082a:	ee33 3a25 	vadd.f32	s6, s6, s11
2400082e:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
24000832:	ee72 2aa1 	vadd.f32	s5, s5, s3
24000836:	ed93 1a11 	vldr	s2, [r3, #68]	; 0x44
2400083a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
2400083e:	ee33 3a27 	vadd.f32	s6, s6, s15
24000842:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24000846:	ee72 2aa3 	vadd.f32	s5, s5, s7
2400084a:	edd0 3a02 	vldr	s7, [r0, #8]
2400084e:	ed93 2a13 	vldr	s4, [r3, #76]	; 0x4c
24000852:	ee33 3a20 	vadd.f32	s6, s6, s1
24000856:	edd3 0a18 	vldr	s1, [r3, #96]	; 0x60
2400085a:	ee72 2aa4 	vadd.f32	s5, s5, s9
2400085e:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
24000862:	ee73 3aa0 	vadd.f32	s7, s7, s1
24000866:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
2400086a:	ee33 3a01 	vadd.f32	s6, s6, s2
2400086e:	ed93 1a1a 	vldr	s2, [r3, #104]	; 0x68
24000872:	ee72 2a85 	vadd.f32	s5, s5, s10
24000876:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
2400087a:	ee73 3aa4 	vadd.f32	s7, s7, s9
2400087e:	edd3 4a1b 	vldr	s9, [r3, #108]	; 0x6c
24000882:	ee33 3a00 	vadd.f32	s6, s6, s0
24000886:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
2400088a:	ed93 4a14 	vldr	s8, [r3, #80]	; 0x50
2400088e:	ee73 3a81 	vadd.f32	s7, s7, s2
24000892:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
24000896:	ee33 3a02 	vadd.f32	s6, s6, s4
2400089a:	edd3 1a16 	vldr	s3, [r3, #88]	; 0x58
2400089e:	ee72 2a86 	vadd.f32	s5, s5, s12
240008a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
240008a6:	ee73 3aa4 	vadd.f32	s7, s7, s9
240008aa:	ed93 1a1e 	vldr	s2, [r3, #120]	; 0x78
240008ae:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
240008b2:	ee33 3a04 	vadd.f32	s6, s6, s8
240008b6:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240008ba:	ee8a aaa2 	vdiv.f32	s20, s21, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240008be:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
240008c2:	edd3 4a22 	vldr	s9, [r3, #136]	; 0x88
240008c6:	ee73 3aa0 	vadd.f32	s7, s7, s1
240008ca:	edd3 0a23 	vldr	s1, [r3, #140]	; 0x8c
240008ce:	ed90 4a03 	vldr	s8, [r0, #12]
240008d2:	ee33 3a25 	vadd.f32	s6, s6, s11
240008d6:	edd3 5a25 	vldr	s11, [r3, #148]	; 0x94
240008da:	ee73 3a85 	vadd.f32	s7, s7, s10
240008de:	ed93 5a24 	vldr	s10, [r3, #144]	; 0x90
240008e2:	ee33 3a21 	vadd.f32	s6, s6, s3
240008e6:	edd3 1a27 	vldr	s3, [r3, #156]	; 0x9c
240008ea:	ee34 4a05 	vadd.f32	s8, s8, s10
240008ee:	ed93 5a26 	vldr	s10, [r3, #152]	; 0x98
240008f2:	ee73 3a81 	vadd.f32	s7, s7, s2
240008f6:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
240008fa:	ee33 3a27 	vadd.f32	s6, s6, s15
240008fe:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
24000902:	ee34 4a25 	vadd.f32	s8, s8, s11
24000906:	edd3 5a29 	vldr	s11, [r3, #164]	; 0xa4
2400090a:	ee73 3a80 	vadd.f32	s7, s7, s0
2400090e:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000912:	eeca 9a83 	vdiv.f32	s19, s21, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000916:	ee34 4a05 	vadd.f32	s8, s8, s10
2400091a:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
2400091e:	ee73 3a86 	vadd.f32	s7, s7, s12
24000922:	ed93 6a2a 	vldr	s12, [r3, #168]	; 0xa8
24000926:	ee34 4a21 	vadd.f32	s8, s8, s3
2400092a:	edd3 1a2e 	vldr	s3, [r3, #184]	; 0xb8
2400092e:	ee73 3a82 	vadd.f32	s7, s7, s4
24000932:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
24000936:	ee34 4a01 	vadd.f32	s8, s8, s2
2400093a:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
2400093e:	ee73 3aa4 	vadd.f32	s7, s7, s9
24000942:	edd0 4a04 	vldr	s9, [r0, #16]
24000946:	ee74 4a81 	vadd.f32	s9, s9, s2
2400094a:	ed93 1a32 	vldr	s2, [r3, #200]	; 0xc8
2400094e:	ee34 4a25 	vadd.f32	s8, s8, s11
24000952:	edd3 5a31 	vldr	s11, [r3, #196]	; 0xc4
24000956:	ee73 3aa0 	vadd.f32	s7, s7, s1
2400095a:	edd3 0a34 	vldr	s1, [r3, #208]	; 0xd0
2400095e:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000962:	edd3 5a35 	vldr	s11, [r3, #212]	; 0xd4
24000966:	ee34 4a06 	vadd.f32	s8, s8, s12
2400096a:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400096e:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000972:	ee74 4a81 	vadd.f32	s9, s9, s2
24000976:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
2400097a:	ee34 4a27 	vadd.f32	s8, s8, s15
2400097e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
24000982:	ee74 4a86 	vadd.f32	s9, s9, s12
24000986:	ed93 6a39 	vldr	s12, [r3, #228]	; 0xe4
2400098a:	ee34 4a05 	vadd.f32	s8, s8, s10
2400098e:	ed93 5a37 	vldr	s10, [r3, #220]	; 0xdc
24000992:	ee74 4aa0 	vadd.f32	s9, s9, s1
24000996:	edd3 0a3c 	vldr	s1, [r3, #240]	; 0xf0
2400099a:	ee34 4a00 	vadd.f32	s8, s8, s0
2400099e:	ed93 0a3a 	vldr	s0, [r3, #232]	; 0xe8
240009a2:	ee74 4aa5 	vadd.f32	s9, s9, s11
240009a6:	edd0 5a05 	vldr	s11, [r0, #20]
240009aa:	ee34 4a21 	vadd.f32	s8, s8, s3
240009ae:	edd3 1a3b 	vldr	s3, [r3, #236]	; 0xec
240009b2:	ee75 5aa0 	vadd.f32	s11, s11, s1
240009b6:	ee74 4aa7 	vadd.f32	s9, s9, s15
240009ba:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
240009be:	ee34 4a02 	vadd.f32	s8, s8, s4
240009c2:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
240009c6:	ee75 5aa7 	vadd.f32	s11, s11, s15
240009ca:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
240009ce:	ee74 4a85 	vadd.f32	s9, s9, s10
240009d2:	edd3 0a40 	vldr	s1, [r3, #256]	; 0x100
240009d6:	ed93 5a41 	vldr	s10, [r3, #260]	; 0x104
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240009da:	eeca 8a84 	vdiv.f32	s17, s21, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240009de:	ee74 4a81 	vadd.f32	s9, s9, s2
240009e2:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
240009e6:	ee75 5a82 	vadd.f32	s11, s11, s4
240009ea:	ed93 2a43 	vldr	s4, [r3, #268]	; 0x10c
240009ee:	ee74 4a86 	vadd.f32	s9, s9, s12
240009f2:	ed93 6a45 	vldr	s12, [r3, #276]	; 0x114
240009f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
240009fa:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
240009fe:	ee74 4a80 	vadd.f32	s9, s9, s0
24000a02:	ed93 0a46 	vldr	s0, [r3, #280]	; 0x118
24000a06:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000a0a:	edd3 0a47 	vldr	s1, [r3, #284]	; 0x11c
24000a0e:	ee74 4aa1 	vadd.f32	s9, s9, s3
24000a12:	e031      	b.n	24000a78 <audioInit+0x418>
24000a14:	200052c0 	.word	0x200052c0
24000a18:	473b8000 	.word	0x473b8000
24000a1c:	20005c50 	.word	0x20005c50
24000a20:	00005121 	.word	0x00005121
24000a24:	457ff000 	.word	0x457ff000
24000a28:	0003f7a0 	.word	0x0003f7a0
24000a2c:	24040000 	.word	0x24040000
24000a30:	20005500 	.word	0x20005500
24000a34:	c0000000 	.word	0xc0000000
24000a38:	200052bc 	.word	0x200052bc
24000a3c:	ba51b717 	.word	0xba51b717
24000a40:	00000000 	.word	0x00000000
24000a44:	3a83126f 	.word	0x3a83126f
24000a48:	20001004 	.word	0x20001004
24000a4c:	20005004 	.word	0x20005004
24000a50:	30000000 	.word	0x30000000
24000a54:	3daaaaab 	.word	0x3daaaaab
24000a58:	20005214 	.word	0x20005214
24000a5c:	2001486c 	.word	0x2001486c
24000a60:	43dc0000 	.word	0x43dc0000
24000a64:	200148a0 	.word	0x200148a0
24000a68:	200000b8 	.word	0x200000b8
24000a6c:	20000100 	.word	0x20000100
24000a70:	20000324 	.word	0x20000324
24000a74:	200148a8 	.word	0x200148a8
24000a78:	edd3 1a48 	vldr	s3, [r3, #288]	; 0x120
24000a7c:	ee75 5a85 	vadd.f32	s11, s11, s10
24000a80:	ed90 5a06 	vldr	s10, [r0, #24]
24000a84:	ee35 5a21 	vadd.f32	s10, s10, s3
24000a88:	edd3 1a4a 	vldr	s3, [r3, #296]	; 0x128
24000a8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
24000a90:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000a94:	ee8a 8aa4 	vdiv.f32	s16, s21, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a98:	ee35 5a27 	vadd.f32	s10, s10, s15
24000a9c:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000aa0:	ee75 5a82 	vadd.f32	s11, s11, s4
24000aa4:	ed93 2a4c 	vldr	s4, [r3, #304]	; 0x130
24000aa8:	ee35 5a21 	vadd.f32	s10, s10, s3
24000aac:	edd3 1a50 	vldr	s3, [r3, #320]	; 0x140
24000ab0:	ee75 5a81 	vadd.f32	s11, s11, s2
24000ab4:	ed93 1a4f 	vldr	s2, [r3, #316]	; 0x13c
24000ab8:	ee35 5a27 	vadd.f32	s10, s10, s15
24000abc:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
24000ac0:	ee75 5a86 	vadd.f32	s11, s11, s12
24000ac4:	ed93 6a4d 	vldr	s12, [r3, #308]	; 0x134
24000ac8:	ee35 5a02 	vadd.f32	s10, s10, s4
24000acc:	ed93 2a52 	vldr	s4, [r3, #328]	; 0x148
24000ad0:	ee75 5a80 	vadd.f32	s11, s11, s0
24000ad4:	ed93 0a51 	vldr	s0, [r3, #324]	; 0x144
24000ad8:	ee35 5a06 	vadd.f32	s10, s10, s12
24000adc:	ed90 6a07 	vldr	s12, [r0, #28]
24000ae0:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000ae4:	edd3 0a53 	vldr	s1, [r3, #332]	; 0x14c
24000ae8:	ee35 5a27 	vadd.f32	s10, s10, s15
24000aec:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
24000af0:	ee36 6a27 	vadd.f32	s12, s12, s15
24000af4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
24000af8:	ee35 5a01 	vadd.f32	s10, s10, s2
24000afc:	ed93 1a57 	vldr	s2, [r3, #348]	; 0x15c
24000b00:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b04:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
24000b08:	ee35 5a21 	vadd.f32	s10, s10, s3
24000b0c:	edd3 1a59 	vldr	s3, [r3, #356]	; 0x164
24000b10:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b14:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
24000b18:	ee35 5a00 	vadd.f32	s10, s10, s0
24000b1c:	ed93 0a5d 	vldr	s0, [r3, #372]	; 0x174
24000b20:	ee36 6a01 	vadd.f32	s12, s12, s2
24000b24:	ed93 1a5c 	vldr	s2, [r3, #368]	; 0x170
24000b28:	ee35 5a02 	vadd.f32	s10, s10, s4
24000b2c:	ed93 2a5a 	vldr	s4, [r3, #360]	; 0x168
24000b30:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b34:	edd3 7a5b 	vldr	s15, [r3, #364]	; 0x16c
24000b38:	ee35 5a20 	vadd.f32	s10, s10, s1
24000b3c:	edd3 0a5e 	vldr	s1, [r3, #376]	; 0x178
24000b40:	ed93 ba6b 	vldr	s22, [r3, #428]	; 0x1ac
24000b44:	ee36 6a21 	vadd.f32	s12, s12, s3
24000b48:	edd3 1a5f 	vldr	s3, [r3, #380]	; 0x17c
24000b4c:	edc0 2a00 	vstr	s5, [r0]
24000b50:	edc4 6a00 	vstr	s13, [r4]
24000b54:	ee36 6a02 	vadd.f32	s12, s12, s4
24000b58:	ed93 2a60 	vldr	s4, [r3, #384]	; 0x180
24000b5c:	ed84 7a01 	vstr	s14, [r4, #4]
24000b60:	ed80 3a01 	vstr	s6, [r0, #4]
24000b64:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b68:	edd0 7a08 	vldr	s15, [r0, #32]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b6c:	4ce6      	ldr	r4, [pc, #920]	; (24000f08 <audioInit+0x8a8>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b6e:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b72:	ed93 2a61 	vldr	s4, [r3, #388]	; 0x184
24000b76:	ee36 6a01 	vadd.f32	s12, s12, s2
24000b7a:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000b7e:	edc0 3a02 	vstr	s7, [r0, #8]
24000b82:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b86:	ed93 2a62 	vldr	s4, [r3, #392]	; 0x188
24000b8a:	ee36 6a00 	vadd.f32	s12, s12, s0
24000b8e:	ed93 0a65 	vldr	s0, [r3, #404]	; 0x194
24000b92:	ed80 4a03 	vstr	s8, [r0, #12]
24000b96:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b9a:	ed93 2a64 	vldr	s4, [r3, #400]	; 0x190
24000b9e:	ee36 6a20 	vadd.f32	s12, s12, s1
24000ba2:	edd3 0a67 	vldr	s1, [r3, #412]	; 0x19c
24000ba6:	edc0 4a04 	vstr	s9, [r0, #16]
24000baa:	ee77 7a81 	vadd.f32	s15, s15, s2
24000bae:	ed93 1a68 	vldr	s2, [r3, #416]	; 0x1a0
24000bb2:	ee36 6a21 	vadd.f32	s12, s12, s3
24000bb6:	edd3 1a69 	vldr	s3, [r3, #420]	; 0x1a4
24000bba:	edc0 5a05 	vstr	s11, [r0, #20]
24000bbe:	ee77 7a82 	vadd.f32	s15, s15, s4
24000bc2:	ed93 2a66 	vldr	s4, [r3, #408]	; 0x198
24000bc6:	ed80 5a06 	vstr	s10, [r0, #24]
24000bca:	ed80 6a07 	vstr	s12, [r0, #28]
24000bce:	ee77 7a80 	vadd.f32	s15, s15, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bd2:	ed84 aa00 	vstr	s20, [r4]
24000bd6:	ee8a 0aa5 	vdiv.f32	s0, s21, s11
24000bda:	edc4 9a01 	vstr	s19, [r4, #4]
24000bde:	ed84 9a02 	vstr	s18, [r4, #8]
24000be2:	edc4 8a03 	vstr	s17, [r4, #12]
24000be6:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000bea:	ee77 7a82 	vadd.f32	s15, s15, s4
24000bee:	ed93 2a6a 	vldr	s4, [r3, #424]	; 0x1a8
24000bf2:	ee77 7aa0 	vadd.f32	s15, s15, s1
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bf6:	eeca 0a85 	vdiv.f32	s1, s21, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000bfa:	ee77 7a81 	vadd.f32	s15, s15, s2
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bfe:	ee8a 1a86 	vdiv.f32	s2, s21, s12
24000c02:	ed84 0a05 	vstr	s0, [r4, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c06:	ee77 7aa1 	vadd.f32	s15, s15, s3
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c0a:	eeca 1aa6 	vdiv.f32	s3, s21, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c0e:	ee77 7a82 	vadd.f32	s15, s15, s4
	gainNormalizers[1] = 1.0f / totalGain[1];
24000c12:	ee8a 2a87 	vdiv.f32	s4, s21, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c16:	ee77 7a8b 	vadd.f32	s15, s15, s22
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c1a:	eeca 2aa7 	vdiv.f32	s5, s21, s15
24000c1e:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c22:	48ba      	ldr	r0, [pc, #744]	; (24000f0c <audioInit+0x8ac>)
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c24:	edc4 0a06 	vstr	s1, [r4, #24]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c28:	edc0 1a00 	vstr	s3, [r0]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c2c:	ed84 1a07 	vstr	s2, [r4, #28]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000c30:	ed80 2a01 	vstr	s4, [r0, #4]
24000c34:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c38:	edc4 2a08 	vstr	s5, [r4, #32]
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c3c:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
24000c40:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c44:	ee6a 7a27 	vmul.f32	s15, s20, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c48:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
24000c4c:	ee21 3a83 	vmul.f32	s6, s3, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c50:	ee62 3a23 	vmul.f32	s7, s4, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c54:	ece3 7a01 	vstmia	r3!, {s15}
24000c58:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000c5c:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000c60:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000c64:	ee24 4a29 	vmul.f32	s8, s8, s19
24000c68:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000c6c:	ee64 4a89 	vmul.f32	s9, s9, s18
24000c70:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000c74:	ee25 5a28 	vmul.f32	s10, s10, s17
24000c78:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000c7c:	ee65 5a88 	vmul.f32	s11, s11, s16
24000c80:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000c84:	ee26 6a00 	vmul.f32	s12, s12, s0
24000c88:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000c8c:	ee66 6aa0 	vmul.f32	s13, s13, s1
24000c90:	ee27 7a01 	vmul.f32	s14, s14, s2
			partials[i] = partials[i] * gainNormalizers[0];
24000c94:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c98:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c9c:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c9e:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000ca2:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000ca6:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000caa:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000cae:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000cb2:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000cb6:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000cba:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000cbe:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000cc2:	d1bb      	bne.n	24000c3c <audioInit+0x5dc>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000cc4:	4b92      	ldr	r3, [pc, #584]	; (24000f10 <audioInit+0x8b0>)
24000cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000cca:	4c92      	ldr	r4, [pc, #584]	; (24000f14 <audioInit+0x8b4>)
24000ccc:	ed93 8a01 	vldr	s16, [r3, #4]
24000cd0:	ed93 0a04 	vldr	s0, [r3, #16]
24000cd4:	f104 0830 	add.w	r8, r4, #48	; 0x30
24000cd8:	edd3 0a07 	vldr	s1, [r3, #28]
24000cdc:	edd3 9a00 	vldr	s19, [r3]
24000ce0:	ed93 6a02 	vldr	s12, [r3, #8]
24000ce4:	ed93 9a03 	vldr	s18, [r3, #12]
24000ce8:	ee78 4a69 	vsub.f32	s9, s16, s19
24000cec:	edd3 6a05 	vldr	s13, [r3, #20]
24000cf0:	ee36 6a48 	vsub.f32	s12, s12, s16
24000cf4:	edd3 8a06 	vldr	s17, [r3, #24]
24000cf8:	ee30 5a49 	vsub.f32	s10, s0, s18
24000cfc:	ed93 7a08 	vldr	s14, [r3, #32]
24000d00:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000d04:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000d08:	f8df c274 	ldr.w	ip, [pc, #628]	; 24000f80 <audioInit+0x920>
24000d0c:	ee37 7a60 	vsub.f32	s14, s14, s1
24000d10:	4f81      	ldr	r7, [pc, #516]	; (24000f18 <audioInit+0x8b8>)
24000d12:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000d16:	4e81      	ldr	r6, [pc, #516]	; (24000f1c <audioInit+0x8bc>)
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d18:	eddf aa81 	vldr	s21, [pc, #516]	; 24000f20 <audioInit+0x8c0>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d1c:	ed9f aa81 	vldr	s20, [pc, #516]	; 24000f24 <audioInit+0x8c4>
24000d20:	4b81      	ldr	r3, [pc, #516]	; (24000f28 <audioInit+0x8c8>)
24000d22:	4882      	ldr	r0, [pc, #520]	; (24000f2c <audioInit+0x8cc>)
24000d24:	ee87 da86 	vdiv.f32	s26, s15, s12
24000d28:	4981      	ldr	r1, [pc, #516]	; (24000f30 <audioInit+0x8d0>)
24000d2a:	4a82      	ldr	r2, [pc, #520]	; (24000f34 <audioInit+0x8d4>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000d2c:	4d82      	ldr	r5, [pc, #520]	; (24000f38 <audioInit+0x8d8>)
24000d2e:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000d32:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000d36:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000d3a:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d3e:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000d42:	3304      	adds	r3, #4
24000d44:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d48:	ecb5 2a01 	vldmia	r5!, {s4}
24000d4c:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d50:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000d54:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000d58:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
24000d5c:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d5e:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000d62:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000d66:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d6a:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d6e:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24000d72:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24000d76:	ee87 2aa2 	vdiv.f32	s4, s15, s5
24000d7a:	eec7 4a85 	vdiv.f32	s9, s15, s10
24000d7e:	eec7 faa3 	vdiv.f32	s31, s15, s7
24000d82:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24000d86:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d8a:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d8e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24000d92:	eec7 6a87 	vdiv.f32	s13, s15, s14
24000d96:	ee87 7a83 	vdiv.f32	s14, s15, s6
24000d9a:	ee74 1a42 	vsub.f32	s3, s8, s4
24000d9e:	ee35 3a63 	vsub.f32	s6, s10, s7
24000da2:	ee74 2aef 	vsub.f32	s5, s9, s31
24000da6:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000daa:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dae:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000db2:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000db6:	ece0 1a01 	vstmia	r0!, {s3}
24000dba:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000dbe:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dc2:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dc6:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dca:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dce:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000dd2:	ecec 5a01 	vstmia	ip!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dd6:	ee62 2aac 	vmul.f32	s5, s5, s25
24000dda:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
24000dde:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000de2:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000de6:	ee27 7a0b 	vmul.f32	s14, s14, s22
24000dea:	ee23 3a2b 	vmul.f32	s6, s6, s23
24000dee:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000df2:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000df6:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dfa:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dfe:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e02:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000e06:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e0a:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000e0e:	eca7 fa01 	vstmia	r7!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e12:	ee28 2a83 	vmul.f32	s4, s17, s6
24000e16:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
24000e1a:	ee20 6a87 	vmul.f32	s12, s1, s14
24000e1e:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000e22:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e26:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e2a:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e2e:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e32:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e36:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e3a:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000e3e:	ece6 ea01 	vstmia	r6!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e42:	ee73 3ac2 	vsub.f32	s7, s7, s4
24000e46:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
24000e4a:	ee35 5a46 	vsub.f32	s10, s10, s12
24000e4e:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
24000e52:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
24000e56:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
24000e5a:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
24000e5e:	f47f af6e 	bne.w	24000d3e <audioInit+0x6de>
24000e62:	4c36      	ldr	r4, [pc, #216]	; (24000f3c <audioInit+0x8dc>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = (randomNumber() * 0.5f) + 0.5f;
24000e64:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24000e68:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24000e6c:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24000e70:	f02c fc36 	bl	2402d6e0 <__randomNumber_veneer>
24000e74:	ee30 0a28 	vadd.f32	s0, s0, s17
24000e78:	ee20 0a08 	vmul.f32	s0, s0, s16
24000e7c:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
24000e80:	42ac      	cmp	r4, r5
24000e82:	d1f5      	bne.n	24000e70 <audioInit+0x810>
		}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000e88:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 24000f40 <audioInit+0x8e0>
24000e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e90:	482c      	ldr	r0, [pc, #176]	; (24000f44 <audioInit+0x8e4>)
24000e92:	f011 fd8f 	bl	240129b4 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);
24000e96:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24000e9a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24000f48 <audioInit+0x8e8>
24000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000ea2:	482a      	ldr	r0, [pc, #168]	; (24000f4c <audioInit+0x8ec>)
24000ea4:	f011 fdaa 	bl	240129fc <LEAF_generate_dbtoa>

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000eac:	eddf 0a28 	vldr	s1, [pc, #160]	; 24000f50 <audioInit+0x8f0>
24000eb0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 24000f54 <audioInit+0x8f4>
24000eb4:	4828      	ldr	r0, [pc, #160]	; (24000f58 <audioInit+0x8f8>)
24000eb6:	f011 fdcb 	bl	24012a50 <LEAF_generate_mtof>





	if (numStrings == 6)
24000eba:	4b28      	ldr	r3, [pc, #160]	; (24000f5c <audioInit+0x8fc>)
24000ebc:	781b      	ldrb	r3, [r3, #0]
24000ebe:	2b06      	cmp	r3, #6
24000ec0:	f000 83e3 	beq.w	2400168a <audioInit+0x102a>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000ec4:	2b0a      	cmp	r3, #10
	{
		// first two strings are one board each, other 8 are two strings each.
		if (boardNumber == 0)
24000ec6:	4b26      	ldr	r3, [pc, #152]	; (24000f60 <audioInit+0x900>)
	else if (numStrings == 10)
24000ec8:	f000 83c6 	beq.w	24001658 <audioInit+0xff8>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ecc:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
24000ece:	2002      	movs	r0, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ed0:	4a24      	ldr	r2, [pc, #144]	; (24000f64 <audioInit+0x904>)
		numStringsThisBoard = 2;
24000ed2:	4925      	ldr	r1, [pc, #148]	; (24000f68 <audioInit+0x908>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ed4:	005b      	lsls	r3, r3, #1
		numStringsThisBoard = 2;
24000ed6:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ed8:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
24000eda:	4b24      	ldr	r3, [pc, #144]	; (24000f6c <audioInit+0x90c>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000edc:	f04f 0900 	mov.w	r9, #0
24000ee0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 24000f84 <audioInit+0x924>
24000ee4:	9303      	str	r3, [sp, #12]
24000ee6:	4b14      	ldr	r3, [pc, #80]	; (24000f38 <audioInit+0x8d8>)
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000ee8:	ed9f 9a21 	vldr	s18, [pc, #132]	; 24000f70 <audioInit+0x910>
24000eec:	f103 0830 	add.w	r8, r3, #48	; 0x30
24000ef0:	eddf 8a20 	vldr	s17, [pc, #128]	; 24000f74 <audioInit+0x914>
24000ef4:	ed9f 8a20 	vldr	s16, [pc, #128]	; 24000f78 <audioInit+0x918>
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000ef8:	9e03      	ldr	r6, [sp, #12]
24000efa:	465c      	mov	r4, fp
24000efc:	4d0e      	ldr	r5, [pc, #56]	; (24000f38 <audioInit+0x8d8>)
			tCycle_init(&additive[i][j], &leaf);
24000efe:	f8df a088 	ldr.w	sl, [pc, #136]	; 24000f88 <audioInit+0x928>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f02:	4f1e      	ldr	r7, [pc, #120]	; (24000f7c <audioInit+0x91c>)
24000f04:	e042      	b.n	24000f8c <audioInit+0x92c>
24000f06:	bf00      	nop
24000f08:	2000513c 	.word	0x2000513c
24000f0c:	20005134 	.word	0x20005134
24000f10:	20000300 	.word	0x20000300
24000f14:	20000070 	.word	0x20000070
24000f18:	20000f2c 	.word	0x20000f2c
24000f1c:	20000fbc 	.word	0x20000fbc
24000f20:	3b84a9fa 	.word	0x3b84a9fa
24000f24:	42f60000 	.word	0x42f60000
24000f28:	20000150 	.word	0x20000150
24000f2c:	20000ba4 	.word	0x20000ba4
24000f30:	20000a84 	.word	0x20000a84
24000f34:	20000cc4 	.word	0x20000cc4
24000f38:	20000028 	.word	0x20000028
24000f3c:	20005760 	.word	0x20005760
24000f40:	3727c5ac 	.word	0x3727c5ac
24000f44:	3000a000 	.word	0x3000a000
24000f48:	c2b40000 	.word	0xc2b40000
24000f4c:	30002000 	.word	0x30002000
24000f50:	4323d666 	.word	0x4323d666
24000f54:	c323d666 	.word	0xc323d666
24000f58:	30012000 	.word	0x30012000
24000f5c:	2000000c 	.word	0x2000000c
24000f60:	20014af5 	.word	0x20014af5
24000f64:	200050d4 	.word	0x200050d4
24000f68:	2000000d 	.word	0x2000000d
24000f6c:	20000974 	.word	0x20000974
24000f70:	447a0000 	.word	0x447a0000
24000f74:	43160000 	.word	0x43160000
24000f78:	00000000 	.word	0x00000000
24000f7c:	20001004 	.word	0x20001004
24000f80:	20000f74 	.word	0x20000f74
24000f84:	200008e4 	.word	0x200008e4
24000f88:	200052c0 	.word	0x200052c0
			tCycle_init(&additive[i][j], &leaf);
24000f8c:	4620      	mov	r0, r4
24000f8e:	4651      	mov	r1, sl
24000f90:	f012 f8ac 	bl	240130ec <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f94:	ecf5 0a01 	vldmia	r5!, {s1}
24000f98:	4630      	mov	r0, r6
24000f9a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f9e:	ee60 0a89 	vmul.f32	s1, s1, s18
24000fa2:	4653      	mov	r3, sl
24000fa4:	eef0 1a68 	vmov.f32	s3, s17
24000fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000fac:	eeb0 1a48 	vmov.f32	s2, s16
24000fb0:	4639      	mov	r1, r7
24000fb2:	f00f fadb 	bl	2401056c <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000fb6:	4545      	cmp	r5, r8
24000fb8:	f104 0404 	add.w	r4, r4, #4
24000fbc:	f106 0604 	add.w	r6, r6, #4
24000fc0:	d1e4      	bne.n	24000f8c <audioInit+0x92c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000fc2:	9b03      	ldr	r3, [sp, #12]
24000fc4:	f109 0912 	add.w	r9, r9, #18
24000fc8:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
24000fcc:	3348      	adds	r3, #72	; 0x48
24000fce:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
24000fd2:	9303      	str	r3, [sp, #12]
24000fd4:	d190      	bne.n	24000ef8 <audioInit+0x898>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fd6:	4ee0      	ldr	r6, [pc, #896]	; (24001358 <audioInit+0xcf8>)
24000fd8:	eddf 8ae0 	vldr	s17, [pc, #896]	; 2400135c <audioInit+0xcfc>
24000fdc:	ed9f 8ae0 	vldr	s16, [pc, #896]	; 24001360 <audioInit+0xd00>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000fe0:	4631      	mov	r1, r6
24000fe2:	4ce0      	ldr	r4, [pc, #896]	; (24001364 <audioInit+0xd04>)
24000fe4:	eef0 0a68 	vmov.f32	s1, s17
24000fe8:	eeb0 0a48 	vmov.f32	s0, s16
24000fec:	48de      	ldr	r0, [pc, #888]	; (24001368 <audioInit+0xd08>)
24000fee:	f104 0530 	add.w	r5, r4, #48	; 0x30
24000ff2:	f00f fdd1 	bl	24010b98 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000ff6:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
24000ff8:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000ffa:	eef0 0a68 	vmov.f32	s1, s17
24000ffe:	4631      	mov	r1, r6
24001000:	eeb0 0a48 	vmov.f32	s0, s16
24001004:	f00f fdc8 	bl	24010b98 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24001008:	42ac      	cmp	r4, r5
2400100a:	d1f4      	bne.n	24000ff6 <audioInit+0x996>
2400100c:	4cd7      	ldr	r4, [pc, #860]	; (2400136c <audioInit+0xd0c>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
2400100e:	4ed2      	ldr	r6, [pc, #840]	; (24001358 <audioInit+0xcf8>)
24001010:	eddf 8ad2 	vldr	s17, [pc, #840]	; 2400135c <audioInit+0xcfc>
24001014:	f104 0528 	add.w	r5, r4, #40	; 0x28
24001018:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 24001360 <audioInit+0xd00>
2400101c:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
2400101e:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001020:	eef0 0a68 	vmov.f32	s1, s17
24001024:	4631      	mov	r1, r6
24001026:	eeb0 0a48 	vmov.f32	s0, s16
2400102a:	f00f fdb5 	bl	24010b98 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
2400102e:	42ac      	cmp	r4, r5
24001030:	d1f4      	bne.n	2400101c <audioInit+0x9bc>
24001032:	2600      	movs	r6, #0
24001034:	4bce      	ldr	r3, [pc, #824]	; (24001370 <audioInit+0xd10>)
24001036:	f8df b42c 	ldr.w	fp, [pc, #1068]	; 24001464 <audioInit+0xe04>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{

		for(int i = 0; i < NUM_OSC; i++)
		{
			tPBSaw_init(&saw[i][v], &leaf);
2400103a:	4cc7      	ldr	r4, [pc, #796]	; (24001358 <audioInit+0xcf8>)

			tPBSawSquare_init(&sawPaired[i][v], &leaf);

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400103c:	eddf bacd 	vldr	s23, [pc, #820]	; 24001374 <audioInit+0xd14>

		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001040:	ed9f cacd 	vldr	s24, [pc, #820]	; 24001378 <audioInit+0xd18>
24001044:	eddf 8ac6 	vldr	s17, [pc, #792]	; 24001360 <audioInit+0xd00>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001048:	ed9f aacc 	vldr	s20, [pc, #816]	; 2400137c <audioInit+0xd1c>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400104c:	e9cd 3604 	strd	r3, r6, [sp, #16]
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24001050:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001052:	ed9f 8acb 	vldr	s16, [pc, #812]	; 24001380 <audioInit+0xd20>
			tPBSaw_init(&saw[i][v], &leaf);
24001056:	4bcb      	ldr	r3, [pc, #812]	; (24001384 <audioInit+0xd24>)
24001058:	4621      	mov	r1, r4
2400105a:	1998      	adds	r0, r3, r6
2400105c:	4428      	add	r0, r5
2400105e:	f012 f933 	bl	240132c8 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
24001062:	4bc9      	ldr	r3, [pc, #804]	; (24001388 <audioInit+0xd28>)
24001064:	4621      	mov	r1, r4
24001066:	1998      	adds	r0, r3, r6
24001068:	4428      	add	r0, r5
2400106a:	f012 f915 	bl	24013298 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
2400106e:	4bc7      	ldr	r3, [pc, #796]	; (2400138c <audioInit+0xd2c>)
24001070:	4621      	mov	r1, r4
24001072:	1998      	adds	r0, r3, r6
24001074:	4428      	add	r0, r5
24001076:	f012 f839 	bl	240130ec <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
2400107a:	4bc5      	ldr	r3, [pc, #788]	; (24001390 <audioInit+0xd30>)
2400107c:	4621      	mov	r1, r4
2400107e:	1998      	adds	r0, r3, r6
24001080:	4428      	add	r0, r5
24001082:	f012 f893 	bl	240131ac <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
24001086:	4bc3      	ldr	r3, [pc, #780]	; (24001394 <audioInit+0xd34>)
24001088:	4621      	mov	r1, r4
2400108a:	1998      	adds	r0, r3, r6
2400108c:	4428      	add	r0, r5
2400108e:	f012 f92b 	bl	240132e8 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
24001092:	4bc1      	ldr	r3, [pc, #772]	; (24001398 <audioInit+0xd38>)
24001094:	4621      	mov	r1, r4
24001096:	1998      	adds	r0, r3, r6
24001098:	4428      	add	r0, r5
2400109a:	f012 f8bd 	bl	24013218 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400109e:	4bbf      	ldr	r3, [pc, #764]	; (2400139c <audioInit+0xd3c>)
240010a0:	eef0 0a48 	vmov.f32	s1, s16
240010a4:	4621      	mov	r1, r4
240010a6:	1998      	adds	r0, r3, r6
240010a8:	eeb0 0a6b 	vmov.f32	s0, s23
240010ac:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
240010ae:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
240010b0:	f00f fd72 	bl	24010b98 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
240010b4:	2d18      	cmp	r5, #24
240010b6:	d1ce      	bne.n	24001056 <audioInit+0x9f6>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010b8:	4bb9      	ldr	r3, [pc, #740]	; (240013a0 <audioInit+0xd40>)
240010ba:	eef0 2a4c 	vmov.f32	s5, s24
240010be:	ed9f 2aae 	vldr	s4, [pc, #696]	; 24001378 <audioInit+0xd18>
240010c2:	eef0 1a68 	vmov.f32	s3, s17
240010c6:	1998      	adds	r0, r3, r6
240010c8:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 240013a4 <audioInit+0xd44>
240010cc:	eddf 0ab6 	vldr	s1, [pc, #728]	; 240013a8 <audioInit+0xd48>
240010d0:	2200      	movs	r2, #0
240010d2:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 240013ac <audioInit+0xd4c>
240010d6:	2104      	movs	r1, #4
240010d8:	4bb5      	ldr	r3, [pc, #724]	; (240013b0 <audioInit+0xd50>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240010da:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010dc:	f012 fcd0 	bl	24013a80 <tSimpleLivingString3_initToPool>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240010e0:	4ab4      	ldr	r2, [pc, #720]	; (240013b4 <audioInit+0xd54>)
240010e2:	eeb0 1a68 	vmov.f32	s2, s17
240010e6:	4623      	mov	r3, r4
240010e8:	eddf 1ab3 	vldr	s3, [pc, #716]	; 240013b8 <audioInit+0xd58>
240010ec:	1990      	adds	r0, r2, r6
240010ee:	eddf 0ab3 	vldr	s1, [pc, #716]	; 240013bc <audioInit+0xd5c>
240010f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240010f6:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 24001360 <audioInit+0xd00>
240010fa:	f106 0710 	add.w	r7, r6, #16
240010fe:	49b0      	ldr	r1, [pc, #704]	; (240013c0 <audioInit+0xd60>)
24001100:	f00f fa34 	bl	2401056c <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24001104:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24001108:	4622      	mov	r2, r4
2400110a:	ed9f 0aae 	vldr	s0, [pc, #696]	; 240013c4 <audioInit+0xd64>
2400110e:	2103      	movs	r1, #3
24001110:	48ad      	ldr	r0, [pc, #692]	; (240013c8 <audioInit+0xd68>)
24001112:	f010 fa27 	bl	24011564 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24001116:	4622      	mov	r2, r4
24001118:	2101      	movs	r1, #1
2400111a:	48ac      	ldr	r0, [pc, #688]	; (240013cc <audioInit+0xd6c>)
2400111c:	eddf 0aac 	vldr	s1, [pc, #688]	; 240013d0 <audioInit+0xd70>
24001120:	ed9f 0aac 	vldr	s0, [pc, #688]	; 240013d4 <audioInit+0xd74>
24001124:	f010 fa1e 	bl	24011564 <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001128:	4622      	mov	r2, r4
2400112a:	2100      	movs	r1, #0
2400112c:	48aa      	ldr	r0, [pc, #680]	; (240013d8 <audioInit+0xd78>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400112e:	ed9f 9aab 	vldr	s18, [pc, #684]	; 240013dc <audioInit+0xd7c>
24001132:	ed9f 8aab 	vldr	s16, [pc, #684]	; 240013e0 <audioInit+0xd80>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001136:	f012 f8eb 	bl	24013310 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400113a:	4baa      	ldr	r3, [pc, #680]	; (240013e4 <audioInit+0xd84>)
2400113c:	eef0 0a49 	vmov.f32	s1, s18
24001140:	eeb0 0a48 	vmov.f32	s0, s16
24001144:	2101      	movs	r1, #1
24001146:	1958      	adds	r0, r3, r5
24001148:	4622      	mov	r2, r4
2400114a:	f00f fe9d 	bl	24010e88 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
2400114e:	4ba6      	ldr	r3, [pc, #664]	; (240013e8 <audioInit+0xd88>)
24001150:	eef0 0a49 	vmov.f32	s1, s18
24001154:	4622      	mov	r2, r4
24001156:	1958      	adds	r0, r3, r5
24001158:	eeb0 0a48 	vmov.f32	s0, s16
2400115c:	2100      	movs	r1, #0
2400115e:	f00f fe93 	bl	24010e88 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001162:	4ba2      	ldr	r3, [pc, #648]	; (240013ec <audioInit+0xd8c>)
24001164:	4622      	mov	r2, r4
24001166:	eef0 0a49 	vmov.f32	s1, s18
2400116a:	1958      	adds	r0, r3, r5
2400116c:	eeb0 0a48 	vmov.f32	s0, s16
24001170:	2102      	movs	r1, #2
24001172:	f00f fe89 	bl	24010e88 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
24001176:	4b9e      	ldr	r3, [pc, #632]	; (240013f0 <audioInit+0xd90>)
24001178:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
2400117c:	4621      	mov	r1, r4
2400117e:	1958      	adds	r0, r3, r5
24001180:	eeb0 0a48 	vmov.f32	s0, s16
24001184:	f010 fce2 	bl	24011b4c <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
24001188:	4b9a      	ldr	r3, [pc, #616]	; (240013f4 <audioInit+0xd94>)
2400118a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400118e:	4622      	mov	r2, r4
24001190:	1958      	adds	r0, r3, r5
24001192:	eeb0 0a48 	vmov.f32	s0, s16
24001196:	2105      	movs	r1, #5
24001198:	f010 f9e4 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
2400119c:	4b96      	ldr	r3, [pc, #600]	; (240013f8 <audioInit+0xd98>)
2400119e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011a2:	4622      	mov	r2, r4
240011a4:	1958      	adds	r0, r3, r5
240011a6:	eeb0 0a48 	vmov.f32	s0, s16
240011aa:	2106      	movs	r1, #6
240011ac:	f010 f9da 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240011b0:	4b92      	ldr	r3, [pc, #584]	; (240013fc <audioInit+0xd9c>)
240011b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011b6:	4622      	mov	r2, r4
240011b8:	1958      	adds	r0, r3, r5
240011ba:	eeb0 0a48 	vmov.f32	s0, s16
240011be:	2107      	movs	r1, #7
240011c0:	f010 f9d0 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240011c4:	4b8e      	ldr	r3, [pc, #568]	; (24001400 <audioInit+0xda0>)
240011c6:	4622      	mov	r2, r4
240011c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011cc:	1958      	adds	r0, r3, r5
240011ce:	eeb0 0a48 	vmov.f32	s0, s16
240011d2:	2104      	movs	r1, #4
240011d4:	f010 f9c6 	bl	24011564 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
240011d8:	4b8a      	ldr	r3, [pc, #552]	; (24001404 <audioInit+0xda4>)
240011da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011de:	4621      	mov	r1, r4
240011e0:	1958      	adds	r0, r3, r5
240011e2:	eeb0 0a48 	vmov.f32	s0, s16
240011e6:	f011 f8ed 	bl	240123c4 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
240011ea:	4b87      	ldr	r3, [pc, #540]	; (24001408 <audioInit+0xda8>)
240011ec:	eef0 0a4c 	vmov.f32	s1, s24
240011f0:	4621      	mov	r1, r4
240011f2:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
240011f4:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
240011f6:	eeb0 0a6b 	vmov.f32	s0, s23
240011fa:	f00f fccd 	bl	24010b98 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
240011fe:	42af      	cmp	r7, r5
24001200:	d19b      	bne.n	2400113a <audioInit+0xada>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001202:	4b82      	ldr	r3, [pc, #520]	; (2400140c <audioInit+0xdac>)
24001204:	2500      	movs	r5, #0
24001206:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400120a:	4b81      	ldr	r3, [pc, #516]	; (24001410 <audioInit+0xdb0>)
2400120c:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
2400120e:	eb08 0005 	add.w	r0, r8, r5
24001212:	4621      	mov	r1, r4
24001214:	f012 f8dc 	bl	240133d0 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24001218:	1978      	adds	r0, r7, r5
2400121a:	4621      	mov	r1, r4
2400121c:	f012 f91e 	bl	2401345c <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24001220:	4b7c      	ldr	r3, [pc, #496]	; (24001414 <audioInit+0xdb4>)
24001222:	4621      	mov	r1, r4
24001224:	1998      	adds	r0, r3, r6
24001226:	4428      	add	r0, r5
24001228:	f011 ff60 	bl	240130ec <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
2400122c:	4b7a      	ldr	r3, [pc, #488]	; (24001418 <audioInit+0xdb8>)
2400122e:	4621      	mov	r1, r4
24001230:	1998      	adds	r0, r3, r6
24001232:	4428      	add	r0, r5
24001234:	f012 fafe 	bl	24013834 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
24001238:	4b78      	ldr	r3, [pc, #480]	; (2400141c <audioInit+0xdbc>)
2400123a:	4621      	mov	r1, r4
2400123c:	1998      	adds	r0, r3, r6
2400123e:	4428      	add	r0, r5
24001240:	f012 fb54 	bl	240138ec <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24001244:	4b76      	ldr	r3, [pc, #472]	; (24001420 <audioInit+0xdc0>)
24001246:	4621      	mov	r1, r4
24001248:	1998      	adds	r0, r3, r6
2400124a:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
2400124c:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
2400124e:	f012 fa2f 	bl	240136b0 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24001252:	2d20      	cmp	r5, #32
24001254:	d1db      	bne.n	2400120e <audioInit+0xbae>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
24001256:	4b73      	ldr	r3, [pc, #460]	; (24001424 <audioInit+0xdc4>)
24001258:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
2400125c:	ed9f 0a72 	vldr	s0, [pc, #456]	; 24001428 <audioInit+0xdc8>
24001260:	2106      	movs	r1, #6
24001262:	1998      	adds	r0, r3, r6
24001264:	4622      	mov	r2, r4
24001266:	f010 f97d 	bl	24011564 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
2400126a:	4b70      	ldr	r3, [pc, #448]	; (2400142c <audioInit+0xdcc>)
2400126c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
24001270:	4622      	mov	r2, r4
24001272:	1998      	adds	r0, r3, r6
24001274:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 24001430 <audioInit+0xdd0>
24001278:	2107      	movs	r1, #7


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
2400127a:	ed9f 9a6e 	vldr	s18, [pc, #440]	; 24001434 <audioInit+0xdd4>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
2400127e:	f010 f971 	bl	24011564 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001282:	4b6d      	ldr	r3, [pc, #436]	; (24001438 <audioInit+0xdd8>)
24001284:	9f04      	ldr	r7, [sp, #16]
24001286:	eeb0 0a4a 	vmov.f32	s0, s20
2400128a:	4622      	mov	r2, r4
2400128c:	eddf 0a76 	vldr	s1, [pc, #472]	; 24001468 <audioInit+0xe08>
24001290:	2105      	movs	r1, #5
24001292:	1998      	adds	r0, r3, r6
24001294:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001298:	ed9f 8a68 	vldr	s16, [pc, #416]	; 2400143c <audioInit+0xddc>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
2400129c:	f010 f962 	bl	24011564 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012a0:	4628      	mov	r0, r5
240012a2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240012a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240012aa:	4623      	mov	r3, r4
240012ac:	eef0 0a4a 	vmov.f32	s1, s20
240012b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240012b4:	eeb0 0a49 	vmov.f32	s0, s18
240012b8:	4941      	ldr	r1, [pc, #260]	; (240013c0 <audioInit+0xd60>)
240012ba:	f00f f957 	bl	2401056c <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012be:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
240012c0:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012c2:	eeb0 0a48 	vmov.f32	s0, s16
240012c6:	f00f fa07 	bl	240106d8 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
240012ca:	42af      	cmp	r7, r5
240012cc:	d1e8      	bne.n	240012a0 <audioInit+0xc40>
240012ce:	4b5c      	ldr	r3, [pc, #368]	; (24001440 <audioInit+0xde0>)
240012d0:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
240012d2:	ed9f ba5c 	vldr	s22, [pc, #368]	; 24001444 <audioInit+0xde4>
240012d6:	eb03 0806 	add.w	r8, r3, r6
240012da:	4b5b      	ldr	r3, [pc, #364]	; (24001448 <audioInit+0xde8>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240012dc:	eddf 9a5b 	vldr	s19, [pc, #364]	; 2400144c <audioInit+0xdec>
240012e0:	199f      	adds	r7, r3, r6
240012e2:	f106 0320 	add.w	r3, r6, #32
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
240012e6:	eddf aa5a 	vldr	s21, [pc, #360]	; 24001450 <audioInit+0xdf0>
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240012ea:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 240013dc <audioInit+0xd7c>
240012ee:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 240013e0 <audioInit+0xd80>
240012f2:	e9cd b606 	strd	fp, r6, [sp, #24]
240012f6:	461e      	mov	r6, r3
			tCrusher_init(&bc[i][v],&leaf);
240012f8:	4640      	mov	r0, r8
240012fa:	4621      	mov	r1, r4
240012fc:	f00e ff40 	bl	24010180 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24001300:	4638      	mov	r0, r7
24001302:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001306:	4621      	mov	r1, r4
24001308:	f00f feb8 	bl	2401107c <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
2400130c:	4b51      	ldr	r3, [pc, #324]	; (24001454 <audioInit+0xdf4>)
2400130e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001312:	4621      	mov	r1, r4
24001314:	eb03 0b05 	add.w	fp, r3, r5
24001318:	4b4f      	ldr	r3, [pc, #316]	; (24001458 <audioInit+0xdf8>)
		for (int i = 0; i < NUM_EFFECT; i++)
2400131a:	f108 0808 	add.w	r8, r8, #8
2400131e:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001320:	1958      	adds	r0, r3, r5
24001322:	f00f feab 	bl	2401107c <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24001326:	4b4d      	ldr	r3, [pc, #308]	; (2400145c <audioInit+0xdfc>)
24001328:	eef0 0a4b 	vmov.f32	s1, s22
2400132c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 24001428 <audioInit+0xdc8>
24001330:	eb03 0a05 	add.w	sl, r3, r5
24001334:	4b4a      	ldr	r3, [pc, #296]	; (24001460 <audioInit+0xe00>)
24001336:	4622      	mov	r2, r4
24001338:	2106      	movs	r1, #6
2400133a:	eb03 0905 	add.w	r9, r3, r5
2400133e:	4658      	mov	r0, fp
24001340:	f010 f910 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
24001344:	4650      	mov	r0, sl
24001346:	eef0 0a4b 	vmov.f32	s1, s22
2400134a:	ed9f 0a39 	vldr	s0, [pc, #228]	; 24001430 <audioInit+0xdd0>
2400134e:	4622      	mov	r2, r4
24001350:	2107      	movs	r1, #7
24001352:	f010 f907 	bl	24011564 <tVZFilter_init>
24001356:	e089      	b.n	2400146c <audioInit+0xe0c>
24001358:	200052c0 	.word	0x200052c0
2400135c:	3a03126f 	.word	0x3a03126f
24001360:	00000000 	.word	0x00000000
24001364:	2000528c 	.word	0x2000528c
24001368:	200148fc 	.word	0x200148fc
2400136c:	20005704 	.word	0x20005704
24001370:	20005094 	.word	0x20005094
24001374:	42800000 	.word	0x42800000
24001378:	3c23d70a 	.word	0x3c23d70a
2400137c:	447a0000 	.word	0x447a0000
24001380:	3ca3d70a 	.word	0x3ca3d70a
24001384:	20005b64 	.word	0x20005b64
24001388:	20005748 	.word	0x20005748
2400138c:	20005c20 	.word	0x20005c20
24001390:	200148d4 	.word	0x200148d4
24001394:	20005b7c 	.word	0x20005b7c
24001398:	20005c38 	.word	0x20005c38
2400139c:	2000572c 	.word	0x2000572c
240013a0:	200053e4 	.word	0x200053e4
240013a4:	3f7fff58 	.word	0x3f7fff58
240013a8:	4684d000 	.word	0x4684d000
240013ac:	435c0000 	.word	0x435c0000
240013b0:	20005500 	.word	0x20005500
240013b4:	20005094 	.word	0x20005094
240013b8:	43480000 	.word	0x43480000
240013bc:	42480000 	.word	0x42480000
240013c0:	20001004 	.word	0x20001004
240013c4:	44bb8000 	.word	0x44bb8000
240013c8:	2000555c 	.word	0x2000555c
240013cc:	20005560 	.word	0x20005560
240013d0:	3f666666 	.word	0x3f666666
240013d4:	44480000 	.word	0x44480000
240013d8:	20005544 	.word	0x20005544
240013dc:	3f333333 	.word	0x3f333333
240013e0:	44fa0000 	.word	0x44fa0000
240013e4:	200053ec 	.word	0x200053ec
240013e8:	20005160 	.word	0x20005160
240013ec:	20000a0c 	.word	0x20000a0c
240013f0:	20005048 	.word	0x20005048
240013f4:	200008d4 	.word	0x200008d4
240013f8:	200008c4 	.word	0x200008c4
240013fc:	200008b4 	.word	0x200008b4
24001400:	200008a4 	.word	0x200008a4
24001404:	20000894 	.word	0x20000894
24001408:	2000509c 	.word	0x2000509c
2400140c:	20005334 	.word	0x20005334
24001410:	20005314 	.word	0x20005314
24001414:	20005384 	.word	0x20005384
24001418:	200053c4 	.word	0x200053c4
2400141c:	200053a4 	.word	0x200053a4
24001420:	20005354 	.word	0x20005354
24001424:	20005574 	.word	0x20005574
24001428:	42a00000 	.word	0x42a00000
2400142c:	2000557c 	.word	0x2000557c
24001430:	463b8000 	.word	0x463b8000
24001434:	3dcccccd 	.word	0x3dcccccd
24001438:	20005554 	.word	0x20005554
2400143c:	3f7fffac 	.word	0x3f7fffac
24001440:	20000a24 	.word	0x20000a24
24001444:	42000000 	.word	0x42000000
24001448:	20000de4 	.word	0x20000de4
2400144c:	47bb8000 	.word	0x47bb8000
24001450:	457a0000 	.word	0x457a0000
24001454:	20005be0 	.word	0x20005be0
24001458:	20000e04 	.word	0x20000e04
2400145c:	20005c00 	.word	0x20005c00
24001460:	20000a44 	.word	0x20000a44
24001464:	20005500 	.word	0x20005500
24001468:	3ff33333 	.word	0x3ff33333
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
2400146c:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 24001468 <audioInit+0xe08>
24001470:	4622      	mov	r2, r4
24001472:	2105      	movs	r1, #5
24001474:	4648      	mov	r0, r9
24001476:	eeb0 0a4a 	vmov.f32	s0, s20
2400147a:	f010 f873 	bl	24011564 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400147e:	eeb0 0a69 	vmov.f32	s0, s19
24001482:	4658      	mov	r0, fp
24001484:	f010 fa20 	bl	240118c8 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
24001488:	4650      	mov	r0, sl
2400148a:	eeb0 0a69 	vmov.f32	s0, s19
2400148e:	f010 fa1b 	bl	240118c8 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
24001492:	eeb0 0a69 	vmov.f32	s0, s19
24001496:	4648      	mov	r0, r9
24001498:	f010 fa16 	bl	240118c8 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
2400149c:	4b84      	ldr	r3, [pc, #528]	; (240016b0 <audioInit+0x1050>)
2400149e:	4621      	mov	r1, r4
240014a0:	1958      	adds	r0, r3, r5
240014a2:	4b84      	ldr	r3, [pc, #528]	; (240016b4 <audioInit+0x1054>)
240014a4:	9003      	str	r0, [sp, #12]
240014a6:	eb03 0905 	add.w	r9, r3, r5
240014aa:	f00e ff25 	bl	240102f8 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
240014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240014b2:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
240014b6:	ed9f 1a80 	vldr	s2, [pc, #512]	; 240016b8 <audioInit+0x1058>
240014ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
240014be:	9803      	ldr	r0, [sp, #12]
240014c0:	4a7e      	ldr	r2, [pc, #504]	; (240016bc <audioInit+0x105c>)
240014c2:	497f      	ldr	r1, [pc, #508]	; (240016c0 <audioInit+0x1060>)
240014c4:	9300      	str	r3, [sp, #0]
240014c6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 240016c4 <audioInit+0x1064>
240014ca:	f00e ffbf 	bl	2401044c <tCompressor_setTables>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
240014ce:	4b7e      	ldr	r3, [pc, #504]	; (240016c8 <audioInit+0x1068>)
240014d0:	eeb0 0a6a 	vmov.f32	s0, s21
240014d4:	4a7d      	ldr	r2, [pc, #500]	; (240016cc <audioInit+0x106c>)
240014d6:	1958      	adds	r0, r3, r5
240014d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240014dc:	f00e fbe8 	bl	2400fcb0 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
240014e0:	4b7b      	ldr	r3, [pc, #492]	; (240016d0 <audioInit+0x1070>)
240014e2:	4a7a      	ldr	r2, [pc, #488]	; (240016cc <audioInit+0x106c>)
240014e4:	eeb0 0a6a 	vmov.f32	s0, s21
240014e8:	1958      	adds	r0, r3, r5
240014ea:	4b7a      	ldr	r3, [pc, #488]	; (240016d4 <audioInit+0x1074>)
240014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240014f0:	eb03 0a05 	add.w	sl, r3, r5
240014f4:	f00e fbdc 	bl	2400fcb0 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
240014f8:	4621      	mov	r1, r4
240014fa:	4648      	mov	r0, r9
240014fc:	f011 fdf6 	bl	240130ec <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001500:	4621      	mov	r1, r4
24001502:	4650      	mov	r0, sl
24001504:	f011 fdf2 	bl	240130ec <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24001508:	ed9f 0a73 	vldr	s0, [pc, #460]	; 240016d8 <audioInit+0x1078>
2400150c:	4648      	mov	r0, r9
2400150e:	f011 fe2f 	bl	24013170 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24001512:	4650      	mov	r0, sl
24001514:	ed9f 0a71 	vldr	s0, [pc, #452]	; 240016dc <audioInit+0x107c>
24001518:	f011 fe2a 	bl	24013170 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400151c:	4b70      	ldr	r3, [pc, #448]	; (240016e0 <audioInit+0x1080>)
2400151e:	eef0 0a49 	vmov.f32	s1, s18
24001522:	4622      	mov	r2, r4
24001524:	1958      	adds	r0, r3, r5
24001526:	eeb0 0a48 	vmov.f32	s0, s16
2400152a:	2101      	movs	r1, #1
2400152c:	f00f fcac 	bl	24010e88 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001530:	4b6c      	ldr	r3, [pc, #432]	; (240016e4 <audioInit+0x1084>)
24001532:	eef0 0a49 	vmov.f32	s1, s18
24001536:	4622      	mov	r2, r4
24001538:	1958      	adds	r0, r3, r5
2400153a:	eeb0 0a48 	vmov.f32	s0, s16
2400153e:	2100      	movs	r1, #0
24001540:	f00f fca2 	bl	24010e88 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001544:	4b68      	ldr	r3, [pc, #416]	; (240016e8 <audioInit+0x1088>)
24001546:	4622      	mov	r2, r4
24001548:	eef0 0a49 	vmov.f32	s1, s18
2400154c:	1958      	adds	r0, r3, r5
2400154e:	eeb0 0a48 	vmov.f32	s0, s16
24001552:	2102      	movs	r1, #2
24001554:	f00f fc98 	bl	24010e88 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
24001558:	4b64      	ldr	r3, [pc, #400]	; (240016ec <audioInit+0x108c>)
2400155a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400155e:	4621      	mov	r1, r4
24001560:	1958      	adds	r0, r3, r5
24001562:	eeb0 0a48 	vmov.f32	s0, s16
24001566:	f010 faf1 	bl	24011b4c <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
2400156a:	4b61      	ldr	r3, [pc, #388]	; (240016f0 <audioInit+0x1090>)
2400156c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001570:	4622      	mov	r2, r4
24001572:	1958      	adds	r0, r3, r5
24001574:	eeb0 0a48 	vmov.f32	s0, s16
24001578:	2105      	movs	r1, #5
2400157a:	f00f fff3 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
2400157e:	4b5d      	ldr	r3, [pc, #372]	; (240016f4 <audioInit+0x1094>)
24001580:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001584:	4622      	mov	r2, r4
24001586:	1958      	adds	r0, r3, r5
24001588:	eeb0 0a48 	vmov.f32	s0, s16
2400158c:	2106      	movs	r1, #6
2400158e:	f00f ffe9 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
24001592:	4b59      	ldr	r3, [pc, #356]	; (240016f8 <audioInit+0x1098>)
24001594:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001598:	4622      	mov	r2, r4
2400159a:	1958      	adds	r0, r3, r5
2400159c:	eeb0 0a48 	vmov.f32	s0, s16
240015a0:	2107      	movs	r1, #7
240015a2:	f00f ffdf 	bl	24011564 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240015a6:	4b55      	ldr	r3, [pc, #340]	; (240016fc <audioInit+0x109c>)
240015a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015ac:	4622      	mov	r2, r4
240015ae:	1958      	adds	r0, r3, r5
240015b0:	eeb0 0a48 	vmov.f32	s0, s16
240015b4:	2104      	movs	r1, #4
240015b6:	f00f ffd5 	bl	24011564 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240015ba:	4b51      	ldr	r3, [pc, #324]	; (24001700 <audioInit+0x10a0>)
240015bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015c0:	4621      	mov	r1, r4
240015c2:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
240015c4:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240015c6:	eeb0 0a48 	vmov.f32	s0, s16
240015ca:	f010 fefb 	bl	240123c4 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
240015ce:	42ae      	cmp	r6, r5
240015d0:	f47f ae92 	bne.w	240012f8 <audioInit+0xc98>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
240015d4:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 24001704 <audioInit+0x10a4>
240015d8:	e9dd b606 	ldrd	fp, r6, [sp, #24]
240015dc:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
240015e0:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
240015e2:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
240015e4:	eef0 0a48 	vmov.f32	s1, s16
240015e8:	4621      	mov	r1, r4
240015ea:	eeb0 0a68 	vmov.f32	s0, s17
240015ee:	f00f fad3 	bl	24010b98 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
240015f2:	45ab      	cmp	fp, r5
240015f4:	d1f4      	bne.n	240015e0 <audioInit+0xf80>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240015f6:	9b04      	ldr	r3, [sp, #16]
240015f8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}


		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
240015fc:	4a42      	ldr	r2, [pc, #264]	; (24001708 <audioInit+0x10a8>)
240015fe:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001600:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001602:	4842      	ldr	r0, [pc, #264]	; (2400170c <audioInit+0x10ac>)
24001604:	2102      	movs	r1, #2
24001606:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001608:	9304      	str	r3, [sp, #16]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
2400160a:	4438      	add	r0, r7
2400160c:	9b05      	ldr	r3, [sp, #20]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400160e:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001612:	eb02 1383 	add.w	r3, r2, r3, lsl #6
24001616:	2220      	movs	r2, #32
24001618:	9300      	str	r3, [sp, #0]
2400161a:	4b3d      	ldr	r3, [pc, #244]	; (24001710 <audioInit+0x10b0>)
2400161c:	f013 fa80 	bl	24014b20 <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
24001620:	4a3c      	ldr	r2, [pc, #240]	; (24001714 <audioInit+0x10b4>)
24001622:	eb06 1346 	add.w	r3, r6, r6, lsl #5
24001626:	2120      	movs	r1, #32
24001628:	19d0      	adds	r0, r2, r7
2400162a:	4a3b      	ldr	r2, [pc, #236]	; (24001718 <audioInit+0x10b8>)
2400162c:	4413      	add	r3, r2
2400162e:	2202      	movs	r2, #2
24001630:	9300      	str	r3, [sp, #0]
24001632:	9201      	str	r2, [sp, #4]
24001634:	4b36      	ldr	r3, [pc, #216]	; (24001710 <audioInit+0x10b0>)
24001636:	f013 fcaf 	bl	24014f98 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
2400163a:	4938      	ldr	r1, [pc, #224]	; (2400171c <audioInit+0x10bc>)
2400163c:	4622      	mov	r2, r4
2400163e:	eddf 0a38 	vldr	s1, [pc, #224]	; 24001720 <audioInit+0x10c0>
24001642:	1988      	adds	r0, r1, r6
24001644:	ed9f 0a37 	vldr	s0, [pc, #220]	; 24001724 <audioInit+0x10c4>
24001648:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400164a:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
2400164c:	f00f fc1c 	bl	24010e88 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001650:	9b05      	ldr	r3, [sp, #20]
24001652:	b96b      	cbnz	r3, 24001670 <audioInit+0x1010>
24001654:	9505      	str	r5, [sp, #20]
24001656:	e4fb      	b.n	24001050 <audioInit+0x9f0>
		if (boardNumber == 0)
24001658:	781b      	ldrb	r3, [r3, #0]
2400165a:	b1f3      	cbz	r3, 2400169a <audioInit+0x103a>
		else if (boardNumber == 1)
2400165c:	2b01      	cmp	r3, #1
2400165e:	d022      	beq.n	240016a6 <audioInit+0x1046>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001660:	3b01      	subs	r3, #1
24001662:	4a31      	ldr	r2, [pc, #196]	; (24001728 <audioInit+0x10c8>)
			numStringsThisBoard = 2;
24001664:	4931      	ldr	r1, [pc, #196]	; (2400172c <audioInit+0x10cc>)
24001666:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001668:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
2400166a:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
2400166c:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
2400166e:	e434      	b.n	24000eda <audioInit+0x87a>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
24001670:	2280      	movs	r2, #128	; 0x80
24001672:	2100      	movs	r1, #0
24001674:	482e      	ldr	r0, [pc, #184]	; (24001730 <audioInit+0x10d0>)
24001676:	f013 feff 	bl	24015478 <memset>
	}
	HAL_Delay(1);
2400167a:	9805      	ldr	r0, [sp, #20]

}
2400167c:	b009      	add	sp, #36	; 0x24
2400167e:	ecbd 8b10 	vpop	{d8-d15}
24001682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
24001686:	f003 b821 	b.w	240046cc <HAL_Delay>
		firstString = boardNumber;
2400168a:	4a2a      	ldr	r2, [pc, #168]	; (24001734 <audioInit+0x10d4>)
		numStringsThisBoard = 1;
2400168c:	2001      	movs	r0, #1
		firstString = boardNumber;
2400168e:	4b26      	ldr	r3, [pc, #152]	; (24001728 <audioInit+0x10c8>)
		numStringsThisBoard = 1;
24001690:	4926      	ldr	r1, [pc, #152]	; (2400172c <audioInit+0x10cc>)
		firstString = boardNumber;
24001692:	7812      	ldrb	r2, [r2, #0]
		numStringsThisBoard = 1;
24001694:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber;
24001696:	601a      	str	r2, [r3, #0]
		numStringsThisBoard = 1;
24001698:	e41f      	b.n	24000eda <audioInit+0x87a>
			firstString = 0;
2400169a:	4823      	ldr	r0, [pc, #140]	; (24001728 <audioInit+0x10c8>)
			numStringsThisBoard = 1;
2400169c:	2101      	movs	r1, #1
2400169e:	4a23      	ldr	r2, [pc, #140]	; (2400172c <audioInit+0x10cc>)
			firstString = 0;
240016a0:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
240016a2:	7011      	strb	r1, [r2, #0]
240016a4:	e419      	b.n	24000eda <audioInit+0x87a>
			firstString = 1;
240016a6:	4920      	ldr	r1, [pc, #128]	; (24001728 <audioInit+0x10c8>)
			numStringsThisBoard = 1;
240016a8:	4a20      	ldr	r2, [pc, #128]	; (2400172c <audioInit+0x10cc>)
			firstString = 1;
240016aa:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
240016ac:	7013      	strb	r3, [r2, #0]
240016ae:	e414      	b.n	24000eda <audioInit+0x87a>
240016b0:	20000a64 	.word	0x20000a64
240016b4:	20005504 	.word	0x20005504
240016b8:	c2b40000 	.word	0xc2b40000
240016bc:	30002000 	.word	0x30002000
240016c0:	3000a000 	.word	0x3000a000
240016c4:	3727c5ac 	.word	0x3727c5ac
240016c8:	20005008 	.word	0x20005008
240016cc:	200052bc 	.word	0x200052bc
240016d0:	20005028 	.word	0x20005028
240016d4:	20005524 	.word	0x20005524
240016d8:	3e4ccccd 	.word	0x3e4ccccd
240016dc:	3e638e39 	.word	0x3e638e39
240016e0:	20000874 	.word	0x20000874
240016e4:	20000854 	.word	0x20000854
240016e8:	20000814 	.word	0x20000814
240016ec:	20000834 	.word	0x20000834
240016f0:	200007f4 	.word	0x200007f4
240016f4:	200007d4 	.word	0x200007d4
240016f8:	200007b4 	.word	0x200007b4
240016fc:	20000794 	.word	0x20000794
24001700:	20000774 	.word	0x20000774
24001704:	3d4ccccd 	.word	0x3d4ccccd
24001708:	20005170 	.word	0x20005170
2400170c:	200055a0 	.word	0x200055a0
24001710:	2401c3c0 	.word	0x2401c3c0
24001714:	20005588 	.word	0x20005588
24001718:	20000e24 	.word	0x20000e24
2400171c:	200050c4 	.word	0x200050c4
24001720:	3e99999a 	.word	0x3e99999a
24001724:	46947000 	.word	0x46947000
24001728:	200050d4 	.word	0x200050d4
2400172c:	2000000d 	.word	0x2000000d
24001730:	30000040 	.word	0x30000040
24001734:	20014af5 	.word	0x20014af5

24001738 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24001738:	b570      	push	{r4, r5, r6, lr}
2400173a:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400173c:	4e0b      	ldr	r6, [pc, #44]	; (2400176c <audioStart+0x34>)
	HAL_Delay(1);
2400173e:	2001      	movs	r0, #1
{
24001740:	460c      	mov	r4, r1
	HAL_Delay(1);
24001742:	f002 ffc3 	bl	240046cc <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001746:	2220      	movs	r2, #32
24001748:	f106 0140 	add.w	r1, r6, #64	; 0x40
2400174c:	4628      	mov	r0, r5
2400174e:	f008 f8c5 	bl	240098dc <HAL_SAI_Transmit_DMA>
24001752:	4b07      	ldr	r3, [pc, #28]	; (24001770 <audioStart+0x38>)
24001754:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001756:	2220      	movs	r2, #32
24001758:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
2400175c:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400175e:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001760:	f008 f958 	bl	24009a14 <HAL_SAI_Receive_DMA>
24001764:	4b03      	ldr	r3, [pc, #12]	; (24001774 <audioStart+0x3c>)
24001766:	7018      	strb	r0, [r3, #0]
}
24001768:	bd70      	pop	{r4, r5, r6, pc}
2400176a:	bf00      	nop
2400176c:	30000000 	.word	0x30000000
24001770:	200148cc 	.word	0x200148cc
24001774:	20005b61 	.word	0x20005b61

24001778 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24001778:	4b0c      	ldr	r3, [pc, #48]	; (240017ac <MX_BDMA_Init+0x34>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
2400177a:	2081      	movs	r0, #129	; 0x81
2400177c:	2200      	movs	r2, #0
2400177e:	2109      	movs	r1, #9
{
24001780:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
24001782:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24001786:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24001788:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
2400178c:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24001798:	9301      	str	r3, [sp, #4]
2400179a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
2400179c:	f002 ffc0 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
240017a0:	2081      	movs	r0, #129	; 0x81

}
240017a2:	b002      	add	sp, #8
240017a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
240017a8:	f002 bff8 	b.w	2400479c <HAL_NVIC_EnableIRQ>
240017ac:	58024400 	.word	0x58024400

240017b0 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
240017b0:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
240017b2:	231e      	movs	r3, #30
{
240017b4:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017b6:	25fa      	movs	r5, #250	; 0xfa
240017b8:	2134      	movs	r1, #52	; 0x34
240017ba:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
240017bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017c0:	9500      	str	r5, [sp, #0]
240017c2:	2302      	movs	r3, #2
{
240017c4:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017c6:	f004 fee7 	bl	24006598 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
240017ca:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
240017cc:	260a      	movs	r6, #10
    HAL_Delay(10);
240017ce:	f002 ff7d 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240017d2:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017d6:	2302      	movs	r3, #2
240017d8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240017da:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017de:	4620      	mov	r0, r4
240017e0:	aa03      	add	r2, sp, #12
240017e2:	9500      	str	r5, [sp, #0]
240017e4:	f004 fed8 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240017e8:	200a      	movs	r0, #10
240017ea:	f002 ff6f 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240017ee:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017f2:	2302      	movs	r3, #2
240017f4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240017f6:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017fa:	4620      	mov	r0, r4
240017fc:	aa03      	add	r2, sp, #12
240017fe:	9500      	str	r5, [sp, #0]
24001800:	f004 feca 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001804:	200a      	movs	r0, #10
24001806:	f002 ff61 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400180a:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400180c:	2302      	movs	r3, #2
2400180e:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001810:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001814:	4620      	mov	r0, r4
24001816:	aa03      	add	r2, sp, #12
24001818:	9500      	str	r5, [sp, #0]
2400181a:	f004 febd 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400181e:	200a      	movs	r0, #10
24001820:	f002 ff54 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001824:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001826:	2302      	movs	r3, #2
24001828:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400182a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400182e:	4620      	mov	r0, r4
24001830:	aa03      	add	r2, sp, #12
24001832:	9500      	str	r5, [sp, #0]
24001834:	f004 feb0 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001838:	200a      	movs	r0, #10
2400183a:	f002 ff47 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400183e:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001842:	2302      	movs	r3, #2
24001844:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001846:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400184a:	4620      	mov	r0, r4
2400184c:	aa03      	add	r2, sp, #12
2400184e:	9500      	str	r5, [sp, #0]
24001850:	f004 fea2 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001854:	4630      	mov	r0, r6
24001856:	f002 ff39 	bl	240046cc <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400185a:	aa03      	add	r2, sp, #12
2400185c:	2302      	movs	r3, #2
2400185e:	2134      	movs	r1, #52	; 0x34
24001860:	4620      	mov	r0, r4
24001862:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24001864:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001868:	f004 fe96 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400186c:	4630      	mov	r0, r6
2400186e:	f002 ff2d 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001872:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001876:	aa03      	add	r2, sp, #12
24001878:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400187a:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400187e:	4620      	mov	r0, r4
24001880:	2302      	movs	r3, #2
24001882:	9500      	str	r5, [sp, #0]
24001884:	f004 fe88 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001888:	4630      	mov	r0, r6
2400188a:	f002 ff1f 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400188e:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001892:	aa03      	add	r2, sp, #12
24001894:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001896:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400189a:	4620      	mov	r0, r4
2400189c:	2302      	movs	r3, #2
2400189e:	9500      	str	r5, [sp, #0]
240018a0:	f004 fe7a 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018a4:	4630      	mov	r0, r6
240018a6:	f002 ff11 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018aa:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018ac:	aa03      	add	r2, sp, #12
240018ae:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018b4:	4620      	mov	r0, r4
240018b6:	2302      	movs	r3, #2
240018b8:	9500      	str	r5, [sp, #0]
240018ba:	f004 fe6d 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018be:	4630      	mov	r0, r6
240018c0:	f002 ff04 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018c4:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018c6:	aa03      	add	r2, sp, #12
240018c8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018ce:	4620      	mov	r0, r4
240018d0:	2302      	movs	r3, #2
240018d2:	9500      	str	r5, [sp, #0]
240018d4:	f004 fe60 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018d8:	4630      	mov	r0, r6
240018da:	f002 fef7 	bl	240046cc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018de:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018e2:	aa03      	add	r2, sp, #12
240018e4:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
240018e6:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018ea:	4620      	mov	r0, r4
240018ec:	2134      	movs	r1, #52	; 0x34
240018ee:	9500      	str	r5, [sp, #0]
240018f0:	f004 fe52 	bl	24006598 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018f4:	4630      	mov	r0, r6
240018f6:	f002 fee9 	bl	240046cc <HAL_Delay>
}
240018fa:	b004      	add	sp, #16
240018fc:	bd70      	pop	{r4, r5, r6, pc}
240018fe:	bf00      	nop

24001900 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24001900:	4b24      	ldr	r3, [pc, #144]	; (24001994 <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001902:	2200      	movs	r2, #0
24001904:	2102      	movs	r1, #2
24001906:	200b      	movs	r0, #11
{
24001908:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
2400190a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
2400190e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24001910:	f044 0401 	orr.w	r4, r4, #1
24001914:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24001918:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
2400191c:	f003 0301 	and.w	r3, r3, #1
24001920:	9301      	str	r3, [sp, #4]
24001922:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001924:	f002 fefc 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24001928:	200b      	movs	r0, #11
2400192a:	f002 ff37 	bl	2400479c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
2400192e:	2200      	movs	r2, #0
24001930:	2105      	movs	r1, #5
24001932:	200c      	movs	r0, #12
24001934:	f002 fef4 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24001938:	200c      	movs	r0, #12
2400193a:	f002 ff2f 	bl	2400479c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
2400193e:	2200      	movs	r2, #0
24001940:	2106      	movs	r1, #6
24001942:	200d      	movs	r0, #13
24001944:	f002 feec 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24001948:	200d      	movs	r0, #13
2400194a:	f002 ff27 	bl	2400479c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
2400194e:	2200      	movs	r2, #0
24001950:	2104      	movs	r1, #4
24001952:	200e      	movs	r0, #14
24001954:	f002 fee4 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24001958:	200e      	movs	r0, #14
2400195a:	f002 ff1f 	bl	2400479c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
2400195e:	2200      	movs	r2, #0
24001960:	2103      	movs	r1, #3
24001962:	200f      	movs	r0, #15
24001964:	f002 fedc 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24001968:	200f      	movs	r0, #15
2400196a:	f002 ff17 	bl	2400479c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
2400196e:	2200      	movs	r2, #0
24001970:	2101      	movs	r1, #1
24001972:	2011      	movs	r0, #17
24001974:	f002 fed4 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24001978:	2011      	movs	r0, #17
2400197a:	f002 ff0f 	bl	2400479c <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
2400197e:	2066      	movs	r0, #102	; 0x66
24001980:	2200      	movs	r2, #0
24001982:	2108      	movs	r1, #8
24001984:	f002 fecc 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001988:	2066      	movs	r0, #102	; 0x66

}
2400198a:	b002      	add	sp, #8
2400198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001990:	f002 bf04 	b.w	2400479c <HAL_NVIC_EnableIRQ>
24001994:	58024400 	.word	0x58024400

24001998 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001998:	481b      	ldr	r0, [pc, #108]	; (24001a08 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
2400199a:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
2400199c:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
2400199e:	2108      	movs	r1, #8
{
240019a0:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240019a2:	4c1a      	ldr	r4, [pc, #104]	; (24001a0c <MX_FMC_Init+0x74>)
{
240019a4:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
240019a6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240019a8:	2220      	movs	r2, #32
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
240019aa:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
240019ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240019b0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
240019b2:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
240019b6:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
240019b8:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240019ba:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
240019be:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
240019c0:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
240019c2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240019c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 8;
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
240019ca:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240019cc:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
240019d0:	2205      	movs	r2, #5

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
240019d2:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
240019d4:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
240019d6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24001a00 <MX_FMC_Init+0x68>
240019da:	e9cd 2302 	strd	r2, r3, [sp, #8]
240019de:	2203      	movs	r2, #3
240019e0:	2302      	movs	r3, #2
240019e2:	ed8d 7b00 	vstr	d7, [sp]
240019e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
240019ea:	f008 fff5 	bl	2400a9d8 <HAL_SDRAM_Init>
240019ee:	b908      	cbnz	r0, 240019f4 <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
240019f0:	b008      	add	sp, #32
240019f2:	bd10      	pop	{r4, pc}
    Error_Handler( );
240019f4:	f002 f968 	bl	24003cc8 <Error_Handler>
}
240019f8:	b008      	add	sp, #32
240019fa:	bd10      	pop	{r4, pc}
240019fc:	f3af 8000 	nop.w
24001a00:	00000002 	.word	0x00000002
24001a04:	00000008 	.word	0x00000008
24001a08:	20014928 	.word	0x20014928
24001a0c:	52004140 	.word	0x52004140

24001a10 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24001a10:	4b31      	ldr	r3, [pc, #196]	; (24001ad8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a12:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24001a14:	b5d0      	push	{r4, r6, r7, lr}
24001a16:	b088      	sub	sp, #32
  if (FMC_Initialized) {
24001a18:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a1a:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
24001a1c:	2a00      	cmp	r2, #0
24001a1e:	d159      	bne.n	24001ad4 <HAL_SDRAM_MspInit+0xc4>
  __HAL_RCC_FMC_CLK_ENABLE();
24001a20:	4a2e      	ldr	r2, [pc, #184]	; (24001adc <HAL_SDRAM_MspInit+0xcc>)
  FMC_Initialized = 1;
24001a22:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001a24:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a28:	240c      	movs	r4, #12
  FMC_Initialized = 1;
24001a2a:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001a2c:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001a2e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001a32:	2600      	movs	r6, #0
24001a34:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24001a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24001a3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24001a3e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a42:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24001a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24001a48:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001a4a:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24001a4c:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001a4e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001a54:	a902      	add	r1, sp, #8
24001a56:	4822      	ldr	r0, [pc, #136]	; (24001ae0 <HAL_SDRAM_MspInit+0xd0>)
24001a58:	f004 fb20 	bl	2400609c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001a5c:	f248 1237 	movw	r2, #33079	; 0x8137
24001a60:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001a62:	a902      	add	r1, sp, #8
24001a64:	481f      	ldr	r0, [pc, #124]	; (24001ae4 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a66:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001a68:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001a6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001a70:	f004 fb14 	bl	2400609c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001a74:	f24c 7203 	movw	r2, #50947	; 0xc703
24001a78:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001a7a:	a902      	add	r1, sp, #8
24001a7c:	481a      	ldr	r0, [pc, #104]	; (24001ae8 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a7e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001a84:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001a88:	f004 fb08 	bl	2400609c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001a8c:	f240 62ff 	movw	r2, #1791	; 0x6ff
24001a90:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001a92:	a902      	add	r1, sp, #8
24001a94:	4815      	ldr	r0, [pc, #84]	; (24001aec <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a96:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001a9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001aa0:	f004 fafc 	bl	2400609c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001aa4:	f64f 722c 	movw	r2, #65324	; 0xff2c
24001aa8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001aaa:	a902      	add	r1, sp, #8
24001aac:	4810      	ldr	r0, [pc, #64]	; (24001af0 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001aae:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001ab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001ab4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001ab8:	f004 faf0 	bl	2400609c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001abc:	f64f 023f 	movw	r2, #63551	; 0xf83f
24001ac0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001ac2:	a902      	add	r1, sp, #8
24001ac4:	480b      	ldr	r0, [pc, #44]	; (24001af4 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001ac6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001ac8:	e9cd 6704 	strd	r6, r7, [sp, #16]
24001acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001ad0:	f004 fae4 	bl	2400609c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24001ad4:	b008      	add	sp, #32
24001ad6:	bdd0      	pop	{r4, r6, r7, pc}
24001ad8:	20014924 	.word	0x20014924
24001adc:	58024400 	.word	0x58024400
24001ae0:	58021000 	.word	0x58021000
24001ae4:	58021800 	.word	0x58021800
24001ae8:	58020c00 	.word	0x58020c00
24001aec:	58022000 	.word	0x58022000
24001af0:	58021c00 	.word	0x58021c00
24001af4:	58021400 	.word	0x58021400

24001af8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24001af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001afc:	4bbc      	ldr	r3, [pc, #752]	; (24001df0 <MX_GPIO_Init+0x2f8>)
{
24001afe:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b00:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b02:	4dbc      	ldr	r5, [pc, #752]	; (24001df4 <MX_GPIO_Init+0x2fc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001b04:	4fbc      	ldr	r7, [pc, #752]	; (24001df8 <MX_GPIO_Init+0x300>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b06:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b08:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b0a:	4628      	mov	r0, r5

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001b0c:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 24001e0c <MX_GPIO_Init+0x314>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG14 PG13 PG12 PG7
                           PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001b10:	f247 08c0 	movw	r8, #28864	; 0x70c0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24001b14:	4eb9      	ldr	r6, [pc, #740]	; (24001dfc <MX_GPIO_Init+0x304>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001b16:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001b1a:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 24001e10 <MX_GPIO_Init+0x318>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b1e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24001b22:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001b26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b2a:	f042 0210 	orr.w	r2, r2, #16
24001b2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b36:	f002 0210 	and.w	r2, r2, #16
24001b3a:	9201      	str	r2, [sp, #4]
24001b3c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001b3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b42:	f042 0202 	orr.w	r2, r2, #2
24001b46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b4e:	f002 0202 	and.w	r2, r2, #2
24001b52:	9202      	str	r2, [sp, #8]
24001b54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24001b56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24001b5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b66:	f002 0240 	and.w	r2, r2, #64	; 0x40
24001b6a:	9203      	str	r2, [sp, #12]
24001b6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24001b6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b72:	f042 0208 	orr.w	r2, r2, #8
24001b76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b7e:	f002 0208 	and.w	r2, r2, #8
24001b82:	9204      	str	r2, [sp, #16]
24001b84:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24001b86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b8a:	f042 0204 	orr.w	r2, r2, #4
24001b8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b96:	f002 0204 	and.w	r2, r2, #4
24001b9a:	9205      	str	r2, [sp, #20]
24001b9c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24001b9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001ba2:	f042 0201 	orr.w	r2, r2, #1
24001ba6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001baa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bae:	f002 0201 	and.w	r2, r2, #1
24001bb2:	9206      	str	r2, [sp, #24]
24001bb4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24001bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24001bbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bc6:	f402 7280 	and.w	r2, r2, #256	; 0x100
24001bca:	9207      	str	r2, [sp, #28]
24001bcc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24001bce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24001bd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bde:	f002 0280 	and.w	r2, r2, #128	; 0x80
24001be2:	9208      	str	r2, [sp, #32]
24001be4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bea:	f042 0220 	orr.w	r2, r2, #32
24001bee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001bf2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001bf8:	f003 0320 	and.w	r3, r3, #32
24001bfc:	9309      	str	r3, [sp, #36]	; 0x24
24001bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001c00:	f004 fb9c 	bl	2400633c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001c04:	4622      	mov	r2, r4
24001c06:	4638      	mov	r0, r7
24001c08:	f44f 7100 	mov.w	r1, #512	; 0x200
24001c0c:	f004 fb96 	bl	2400633c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001c10:	4622      	mov	r2, r4
24001c12:	4650      	mov	r0, sl
24001c14:	2193      	movs	r1, #147	; 0x93
24001c16:	f004 fb91 	bl	2400633c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24001c1a:	4622      	mov	r2, r4
24001c1c:	4630      	mov	r0, r6
24001c1e:	2149      	movs	r1, #73	; 0x49
24001c20:	f004 fb8c 	bl	2400633c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001c24:	4622      	mov	r2, r4
24001c26:	4658      	mov	r0, fp
24001c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001c2c:	f004 fb86 	bl	2400633c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c30:	a90a      	add	r1, sp, #40	; 0x28
24001c32:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c34:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001c36:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001c3a:	f243 08f8 	movw	r8, #12536	; 0x30f8
24001c3e:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c42:	f004 fa2b 	bl	2400609c <HAL_GPIO_Init>
                          |GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001c46:	a90a      	add	r1, sp, #40	; 0x28
24001c48:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c4a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001c4c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001c50:	f44f 481f 	mov.w	r8, #40704	; 0x9f00
24001c54:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001c58:	f004 fa20 	bl	2400609c <HAL_GPIO_Init>
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001c5c:	a90a      	add	r1, sp, #40	; 0x28
24001c5e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c60:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001c62:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001c66:	f004 fa19 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001c6a:	f04f 0800 	mov.w	r8, #0
24001c6e:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c72:	a90a      	add	r1, sp, #40	; 0x28
24001c74:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001c76:	ed9f 7b54 	vldr	d7, [pc, #336]	; 24001dc8 <MX_GPIO_Init+0x2d0>
24001c7a:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24001c7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c82:	f004 fa0b 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001c86:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c88:	a90a      	add	r1, sp, #40	; 0x28
24001c8a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001c8c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
24001c8e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 24001dd0 <MX_GPIO_Init+0x2d8>
24001c92:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c96:	f004 fa01 	bl	2400609c <HAL_GPIO_Init>
  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c9a:	a90a      	add	r1, sp, #40	; 0x28
24001c9c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24001c9e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 24001dd8 <MX_GPIO_Init+0x2e0>
24001ca2:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24001ca6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001caa:	f004 f9f7 	bl	2400609c <HAL_GPIO_Init>
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001cae:	a90a      	add	r1, sp, #40	; 0x28
24001cb0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cb2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24001cb4:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 24001de0 <MX_GPIO_Init+0x2e8>
24001cb8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001cbc:	f004 f9ee 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001cc0:	a90a      	add	r1, sp, #40	; 0x28
24001cc2:	484f      	ldr	r0, [pc, #316]	; (24001e00 <MX_GPIO_Init+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cc4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001cc6:	ed9f 7b48 	vldr	d7, [pc, #288]	; 24001de8 <MX_GPIO_Init+0x2f0>
24001cca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001cce:	f004 f9e5 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001cd2:	2293      	movs	r2, #147	; 0x93
24001cd4:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001cd6:	4650      	mov	r0, sl
24001cd8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001cda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001cde:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001ce2:	f004 f9db 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001ce6:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24001cea:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001cec:	a90a      	add	r1, sp, #40	; 0x28
24001cee:	4845      	ldr	r0, [pc, #276]	; (24001e04 <MX_GPIO_Init+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cf0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001cf2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001cf6:	f004 f9d1 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001cfa:	2208      	movs	r2, #8
24001cfc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d00:	4638      	mov	r0, r7
24001d02:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d04:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001d06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d0a:	f004 f9c7 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001d0e:	f242 4205 	movw	r2, #9221	; 0x2405
24001d12:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d14:	a90a      	add	r1, sp, #40	; 0x28
24001d16:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d18:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001d1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d1e:	f004 f9bd 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001d22:	22c0      	movs	r2, #192	; 0xc0
24001d24:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001d26:	a90a      	add	r1, sp, #40	; 0x28
24001d28:	4837      	ldr	r0, [pc, #220]	; (24001e08 <MX_GPIO_Init+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d2a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001d2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001d30:	f004 f9b4 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001d34:	2202      	movs	r2, #2
24001d36:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d38:	a90a      	add	r1, sp, #40	; 0x28
24001d3a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d3c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001d3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d42:	f004 f9ab 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24001d46:	2249      	movs	r2, #73	; 0x49
24001d48:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d4a:	a90a      	add	r1, sp, #40	; 0x28
24001d4c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24001d4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001d52:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d56:	f004 f9a1 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
24001d5e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001d60:	4658      	mov	r0, fp
24001d62:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001d64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001d68:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001d6c:	f004 f996 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d70:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001d72:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d74:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d76:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001d78:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d7a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001d7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d80:	f004 f98c 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001d88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d8c:	a90a      	add	r1, sp, #40	; 0x28
24001d8e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d90:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001d92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d96:	f004 f981 	bl	2400609c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d9a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001d9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001da0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001da2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001da4:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001da6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001da8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001dac:	f004 f976 	bl	2400609c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24001db0:	4622      	mov	r2, r4
24001db2:	4621      	mov	r1, r4
24001db4:	2017      	movs	r0, #23
24001db6:	f002 fcb3 	bl	24004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24001dba:	2017      	movs	r0, #23
24001dbc:	f002 fcee 	bl	2400479c <HAL_NVIC_EnableIRQ>

}
24001dc0:	b011      	add	sp, #68	; 0x44
24001dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24001dc6:	bf00      	nop
24001dc8:	00000082 	.word	0x00000082
24001dcc:	00000001 	.word	0x00000001
24001dd0:	00000040 	.word	0x00000040
24001dd4:	00210000 	.word	0x00210000
24001dd8:	00000200 	.word	0x00000200
24001ddc:	00000001 	.word	0x00000001
24001de0:	0000e06c 	.word	0x0000e06c
24001de4:	00000003 	.word	0x00000003
24001de8:	00000900 	.word	0x00000900
24001dec:	00000003 	.word	0x00000003
24001df0:	58024400 	.word	0x58024400
24001df4:	58020400 	.word	0x58020400
24001df8:	58021800 	.word	0x58021800
24001dfc:	58020000 	.word	0x58020000
24001e00:	58022000 	.word	0x58022000
24001e04:	58021400 	.word	0x58021400
24001e08:	58021c00 	.word	0x58021c00
24001e0c:	58020800 	.word	0x58020800
24001e10:	58020c00 	.word	0x58020c00

24001e14 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24001e14:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24001e16:	4818      	ldr	r0, [pc, #96]	; (24001e78 <MX_I2C1_Init+0x64>)
  hi2c1.Init.Timing = 0x00B03FDB;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001e18:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x00B03FDB;
24001e1a:	4a18      	ldr	r2, [pc, #96]	; (24001e7c <MX_I2C1_Init+0x68>)
  hi2c1.Init.OwnAddress1 = 68;
24001e1c:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
24001e1e:	4c18      	ldr	r4, [pc, #96]	; (24001e80 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001e20:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
24001e22:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
24001e24:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001e26:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x00B03FDB;
24001e28:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e2c:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001e2e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e32:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24001e34:	f004 fb52 	bl	240064dc <HAL_I2C_Init>
24001e38:	b950      	cbnz	r0, 24001e50 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001e3a:	2100      	movs	r1, #0
24001e3c:	480e      	ldr	r0, [pc, #56]	; (24001e78 <MX_I2C1_Init+0x64>)
24001e3e:	f005 f90b 	bl	24007058 <HAL_I2CEx_ConfigAnalogFilter>
24001e42:	b968      	cbnz	r0, 24001e60 <MX_I2C1_Init+0x4c>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001e44:	2100      	movs	r1, #0
24001e46:	480c      	ldr	r0, [pc, #48]	; (24001e78 <MX_I2C1_Init+0x64>)
24001e48:	f005 f93a 	bl	240070c0 <HAL_I2CEx_ConfigDigitalFilter>
24001e4c:	b980      	cbnz	r0, 24001e70 <MX_I2C1_Init+0x5c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24001e4e:	bd10      	pop	{r4, pc}
    Error_Handler();
24001e50:	f001 ff3a 	bl	24003cc8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001e54:	2100      	movs	r1, #0
24001e56:	4808      	ldr	r0, [pc, #32]	; (24001e78 <MX_I2C1_Init+0x64>)
24001e58:	f005 f8fe 	bl	24007058 <HAL_I2CEx_ConfigAnalogFilter>
24001e5c:	2800      	cmp	r0, #0
24001e5e:	d0f1      	beq.n	24001e44 <MX_I2C1_Init+0x30>
    Error_Handler();
24001e60:	f001 ff32 	bl	24003cc8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001e64:	2100      	movs	r1, #0
24001e66:	4804      	ldr	r0, [pc, #16]	; (24001e78 <MX_I2C1_Init+0x64>)
24001e68:	f005 f92a 	bl	240070c0 <HAL_I2CEx_ConfigDigitalFilter>
24001e6c:	2800      	cmp	r0, #0
24001e6e:	d0ee      	beq.n	24001e4e <MX_I2C1_Init+0x3a>
}
24001e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001e74:	f001 bf28 	b.w	24003cc8 <Error_Handler>
24001e78:	20014a4c 	.word	0x20014a4c
24001e7c:	00b03fdb 	.word	0x00b03fdb
24001e80:	40005400 	.word	0x40005400

24001e84 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24001e84:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24001e86:	4817      	ldr	r0, [pc, #92]	; (24001ee4 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e88:	2300      	movs	r3, #0
24001e8a:	4917      	ldr	r1, [pc, #92]	; (24001ee8 <MX_I2C2_Init+0x64>)
24001e8c:	2401      	movs	r4, #1
24001e8e:	4a17      	ldr	r2, [pc, #92]	; (24001eec <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001e90:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e92:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24001e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001e9a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24001e9e:	f004 fb1d 	bl	240064dc <HAL_I2C_Init>
24001ea2:	b950      	cbnz	r0, 24001eba <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001ea4:	2100      	movs	r1, #0
24001ea6:	480f      	ldr	r0, [pc, #60]	; (24001ee4 <MX_I2C2_Init+0x60>)
24001ea8:	f005 f8d6 	bl	24007058 <HAL_I2CEx_ConfigAnalogFilter>
24001eac:	b968      	cbnz	r0, 24001eca <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001eae:	2100      	movs	r1, #0
24001eb0:	480c      	ldr	r0, [pc, #48]	; (24001ee4 <MX_I2C2_Init+0x60>)
24001eb2:	f005 f905 	bl	240070c0 <HAL_I2CEx_ConfigDigitalFilter>
24001eb6:	b980      	cbnz	r0, 24001eda <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24001eb8:	bd10      	pop	{r4, pc}
    Error_Handler();
24001eba:	f001 ff05 	bl	24003cc8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001ebe:	2100      	movs	r1, #0
24001ec0:	4808      	ldr	r0, [pc, #32]	; (24001ee4 <MX_I2C2_Init+0x60>)
24001ec2:	f005 f8c9 	bl	24007058 <HAL_I2CEx_ConfigAnalogFilter>
24001ec6:	2800      	cmp	r0, #0
24001ec8:	d0f1      	beq.n	24001eae <MX_I2C2_Init+0x2a>
    Error_Handler();
24001eca:	f001 fefd 	bl	24003cc8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001ece:	2100      	movs	r1, #0
24001ed0:	4804      	ldr	r0, [pc, #16]	; (24001ee4 <MX_I2C2_Init+0x60>)
24001ed2:	f005 f8f5 	bl	240070c0 <HAL_I2CEx_ConfigDigitalFilter>
24001ed6:	2800      	cmp	r0, #0
24001ed8:	d0ee      	beq.n	24001eb8 <MX_I2C2_Init+0x34>
}
24001eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001ede:	f001 bef3 	b.w	24003cc8 <Error_Handler>
24001ee2:	bf00      	nop
24001ee4:	20014aa0 	.word	0x20014aa0
24001ee8:	40005800 	.word	0x40005800
24001eec:	00b03fdb 	.word	0x00b03fdb

24001ef0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
24001ef2:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001ef4:	2100      	movs	r1, #0
{
24001ef6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001ef8:	22c0      	movs	r2, #192	; 0xc0
24001efa:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001efc:	910a      	str	r1, [sp, #40]	; 0x28
24001efe:	e9cd 1106 	strd	r1, r1, [sp, #24]
24001f02:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001f06:	f013 fab7 	bl	24015478 <memset>
  if(i2cHandle->Instance==I2C1)
24001f0a:	6823      	ldr	r3, [r4, #0]
24001f0c:	4a79      	ldr	r2, [pc, #484]	; (240020f4 <HAL_I2C_MspInit+0x204>)
24001f0e:	4293      	cmp	r3, r2
24001f10:	d005      	beq.n	24001f1e <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24001f12:	4a79      	ldr	r2, [pc, #484]	; (240020f8 <HAL_I2C_MspInit+0x208>)
24001f14:	4293      	cmp	r3, r2
24001f16:	f000 8087 	beq.w	24002028 <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001f1a:	b03d      	add	sp, #244	; 0xf4
24001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001f1e:	2208      	movs	r2, #8
24001f20:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f22:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001f24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f28:	f005 ffe6 	bl	24007ef8 <HAL_RCCEx_PeriphCLKConfig>
24001f2c:	2800      	cmp	r0, #0
24001f2e:	f040 80db 	bne.w	240020e8 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f32:	4d72      	ldr	r5, [pc, #456]	; (240020fc <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f34:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001f38:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001f3a:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f3c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001f40:	4e6f      	ldr	r6, [pc, #444]	; (24002100 <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f42:	f043 0302 	orr.w	r3, r3, #2
24001f46:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24001f4a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001f4e:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f50:	f003 0302 	and.w	r3, r3, #2
24001f54:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f56:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f58:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001f5a:	486a      	ldr	r0, [pc, #424]	; (24002104 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001f60:	2200      	movs	r2, #0
24001f62:	2302      	movs	r3, #2
24001f64:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001f68:	f004 f898 	bl	2400609c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f6c:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001f70:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001f72:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001f78:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f7a:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
24001f7e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001f82:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001f84:	4a60      	ldr	r2, [pc, #384]	; (24002108 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001f8a:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001f8c:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f8e:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24001f90:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001f92:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f98:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001f9a:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24001fa0:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001fa4:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001fa8:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001fac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24001fb0:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001fb4:	f002 fd4a 	bl	24004a4c <HAL_DMA_Init>
24001fb8:	2800      	cmp	r0, #0
24001fba:	f040 8092 	bne.w	240020e2 <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001fbe:	4d53      	ldr	r5, [pc, #332]	; (2400210c <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001fc0:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001fc2:	4953      	ldr	r1, [pc, #332]	; (24002110 <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001fc4:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001fc6:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001fcc:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001fce:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001fd0:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001fd2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001fd6:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001fd8:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24001fda:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001fdc:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001fe2:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24001fe4:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001fe6:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001fe8:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001fea:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001fec:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
24001fee:	63e6      	str	r6, [r4, #60]	; 0x3c
24001ff0:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001ff2:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001ff4:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001ff8:	f002 fd28 	bl	24004a4c <HAL_DMA_Init>
24001ffc:	2800      	cmp	r0, #0
24001ffe:	d16d      	bne.n	240020dc <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002000:	2200      	movs	r2, #0
24002002:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24002004:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002006:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24002008:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
2400200a:	f002 fb89 	bl	24004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
2400200e:	201f      	movs	r0, #31
24002010:	f002 fbc4 	bl	2400479c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
24002014:	2200      	movs	r2, #0
24002016:	2101      	movs	r1, #1
24002018:	2020      	movs	r0, #32
2400201a:	f002 fb81 	bl	24004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
2400201e:	2020      	movs	r0, #32
24002020:	f002 fbbc 	bl	2400479c <HAL_NVIC_EnableIRQ>
}
24002024:	b03d      	add	sp, #244	; 0xf4
24002026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24002028:	2208      	movs	r2, #8
2400202a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400202c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
2400202e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002032:	f005 ff61 	bl	24007ef8 <HAL_RCCEx_PeriphCLKConfig>
24002036:	2800      	cmp	r0, #0
24002038:	d159      	bne.n	240020ee <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400203a:	4c30      	ldr	r4, [pc, #192]	; (240020fc <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400203c:	2010      	movs	r0, #16
2400203e:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24002040:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
24002042:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24002046:	2600      	movs	r6, #0
24002048:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400204a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400204e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24002052:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400205a:	9303      	str	r3, [sp, #12]
2400205c:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400205e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24002062:	f043 0302 	orr.w	r3, r3, #2
24002066:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
2400206a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400206e:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002070:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24002074:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002078:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400207a:	a906      	add	r1, sp, #24
2400207c:	4825      	ldr	r0, [pc, #148]	; (24002114 <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400207e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24002080:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24002084:	f004 f80a 	bl	2400609c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24002088:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400208c:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400208e:	a906      	add	r1, sp, #24
24002090:	481c      	ldr	r0, [pc, #112]	; (24002104 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24002092:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24002094:	e9cd 2306 	strd	r2, r3, [sp, #24]
24002098:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400209c:	f003 fffe 	bl	2400609c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
240020a0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240020a4:	2200      	movs	r2, #0
240020a6:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
240020a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240020ac:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
240020ae:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
240020b2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240020b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240020ba:	9305      	str	r3, [sp, #20]
240020bc:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240020be:	f002 fb2f 	bl	24004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
240020c2:	2021      	movs	r0, #33	; 0x21
240020c4:	f002 fb6a 	bl	2400479c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
240020c8:	2200      	movs	r2, #0
240020ca:	2101      	movs	r1, #1
240020cc:	2022      	movs	r0, #34	; 0x22
240020ce:	f002 fb27 	bl	24004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
240020d2:	2022      	movs	r0, #34	; 0x22
240020d4:	f002 fb62 	bl	2400479c <HAL_NVIC_EnableIRQ>
}
240020d8:	b03d      	add	sp, #244	; 0xf4
240020da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240020dc:	f001 fdf4 	bl	24003cc8 <Error_Handler>
240020e0:	e78e      	b.n	24002000 <HAL_I2C_MspInit+0x110>
      Error_Handler();
240020e2:	f001 fdf1 	bl	24003cc8 <Error_Handler>
240020e6:	e76a      	b.n	24001fbe <HAL_I2C_MspInit+0xce>
      Error_Handler();
240020e8:	f001 fdee 	bl	24003cc8 <Error_Handler>
240020ec:	e721      	b.n	24001f32 <HAL_I2C_MspInit+0x42>
      Error_Handler();
240020ee:	f001 fdeb 	bl	24003cc8 <Error_Handler>
240020f2:	e7a2      	b.n	2400203a <HAL_I2C_MspInit+0x14a>
240020f4:	40005400 	.word	0x40005400
240020f8:	40005800 	.word	0x40005800
240020fc:	58024400 	.word	0x58024400
24002100:	2001495c 	.word	0x2001495c
24002104:	58020400 	.word	0x58020400
24002108:	40020058 	.word	0x40020058
2400210c:	200149d4 	.word	0x200149d4
24002110:	40020070 	.word	0x40020070
24002114:	58021c00 	.word	0x58021c00

24002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24002118:	b500      	push	{lr}
2400211a:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2400211c:	224c      	movs	r2, #76	; 0x4c
2400211e:	2100      	movs	r1, #0
24002120:	a80c      	add	r0, sp, #48	; 0x30
24002122:	f013 f9a9 	bl	24015478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24002126:	2220      	movs	r2, #32
24002128:	2100      	movs	r1, #0
2400212a:	a804      	add	r0, sp, #16
2400212c:	f013 f9a4 	bl	24015478 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24002130:	2002      	movs	r0, #2
24002132:	f004 fff7 	bl	24007124 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24002136:	4b3e      	ldr	r3, [pc, #248]	; (24002230 <SystemClock_Config+0x118>)
24002138:	2100      	movs	r1, #0
2400213a:	4a3e      	ldr	r2, [pc, #248]	; (24002234 <SystemClock_Config+0x11c>)
2400213c:	9101      	str	r1, [sp, #4]
2400213e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24002140:	f021 0101 	bic.w	r1, r1, #1
24002144:	62d9      	str	r1, [r3, #44]	; 0x2c
24002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002148:	f003 0301 	and.w	r3, r3, #1
2400214c:	9301      	str	r3, [sp, #4]
2400214e:	6993      	ldr	r3, [r2, #24]
24002150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24002154:	6193      	str	r3, [r2, #24]
24002156:	6993      	ldr	r3, [r2, #24]
24002158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2400215c:	9301      	str	r3, [sp, #4]
2400215e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002160:	6993      	ldr	r3, [r2, #24]
24002162:	0499      	lsls	r1, r3, #18
24002164:	d5fc      	bpl.n	24002160 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002166:	4b34      	ldr	r3, [pc, #208]	; (24002238 <SystemClock_Config+0x120>)
24002168:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
2400216c:	f041 0102 	orr.w	r1, r1, #2
24002170:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24002174:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400217a:	f003 0302 	and.w	r3, r3, #2
2400217e:	9302      	str	r3, [sp, #8]
24002180:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24002182:	9103      	str	r1, [sp, #12]
24002184:	6991      	ldr	r1, [r2, #24]
24002186:	4b2a      	ldr	r3, [pc, #168]	; (24002230 <SystemClock_Config+0x118>)
24002188:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
2400218c:	6191      	str	r1, [r2, #24]
2400218e:	6992      	ldr	r2, [r2, #24]
24002190:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
24002194:	9203      	str	r2, [sp, #12]
24002196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002198:	4a26      	ldr	r2, [pc, #152]	; (24002234 <SystemClock_Config+0x11c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400219a:	f041 0101 	orr.w	r1, r1, #1
2400219e:	62d9      	str	r1, [r3, #44]	; 0x2c
240021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240021a2:	f003 0301 	and.w	r3, r3, #1
240021a6:	9303      	str	r3, [sp, #12]
240021a8:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240021aa:	6993      	ldr	r3, [r2, #24]
240021ac:	049b      	lsls	r3, r3, #18
240021ae:	d5fc      	bpl.n	240021aa <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240021b0:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240021b2:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240021b4:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240021b6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 2;
240021b8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240021ba:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
240021bc:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
240021be:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240021c0:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
240021c2:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
240021c4:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240021c6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
240021ca:	2306      	movs	r3, #6
240021cc:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
240021ce:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240021d0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 24002218 <SystemClock_Config+0x100>
  RCC_OscInitStruct.PLL.PLLR = 8;
240021d4:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240021d6:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240021d8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240021dc:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240021de:	f005 f849 	bl	24007274 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240021e2:	2200      	movs	r2, #0
240021e4:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240021e6:	2104      	movs	r1, #4
240021e8:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240021ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 24002220 <SystemClock_Config+0x108>
240021ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
240021f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
240021f6:	2340      	movs	r3, #64	; 0x40
240021f8:	ed8d 7b04 	vstr	d7, [sp, #16]
240021fc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24002228 <SystemClock_Config+0x110>
24002200:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24002204:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002208:	f005 fbc6 	bl	24007998 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
2400220c:	b021      	add	sp, #132	; 0x84
2400220e:	f85d fb04 	ldr.w	pc, [sp], #4
24002212:	bf00      	nop
24002214:	f3af 8000 	nop.w
24002218:	00000021 	.word	0x00000021
2400221c:	00010000 	.word	0x00010000
24002220:	0000003f 	.word	0x0000003f
24002224:	00000003 	.word	0x00000003
24002228:	00000040 	.word	0x00000040
2400222c:	00000040 	.word	0x00000040
24002230:	58000400 	.word	0x58000400
24002234:	58024800 	.word	0x58024800
24002238:	58024400 	.word	0x58024400
2400223c:	00000000 	.word	0x00000000

24002240 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24002240:	b510      	push	{r4, lr}
24002242:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002244:	22a0      	movs	r2, #160	; 0xa0
24002246:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2P = 8;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
24002248:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400224c:	a808      	add	r0, sp, #32
2400224e:	f013 f913 	bl	24015478 <memset>
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24002252:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002254:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24002256:	210c      	movs	r1, #12
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24002258:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400225a:	4668      	mov	r0, sp
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
2400225c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400225e:	23c0      	movs	r3, #192	; 0xc0
24002260:	ed9f 7b13 	vldr	d7, [pc, #76]	; 240022b0 <PeriphCommonClock_Config+0x70>
24002264:	e9cd 2306 	strd	r2, r3, [sp, #24]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
24002268:	2301      	movs	r3, #1
  PeriphClkInitStruct.PLL3.PLL3P = 4;
2400226a:	2204      	movs	r2, #4
  PeriphClkInitStruct.PLL3.PLL3M = 1;
2400226c:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
24002270:	2408      	movs	r4, #8
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24002272:	2310      	movs	r3, #16
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24002274:	ed9f 6b10 	vldr	d6, [pc, #64]	; 240022b8 <PeriphCommonClock_Config+0x78>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002278:	ed8d 7b02 	vstr	d7, [sp, #8]
2400227c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240022c0 <PeriphCommonClock_Config+0x80>
  PeriphClkInitStruct.PLL3.PLL3P = 4;
24002280:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24002284:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24002288:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
2400228c:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24002290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24002294:	910f      	str	r1, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24002296:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24002298:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
2400229a:	ed8d 6b00 	vstr	d6, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400229e:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240022a2:	f005 fe29 	bl	24007ef8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
240022a6:	b030      	add	sp, #192	; 0xc0
240022a8:	bd10      	pop	{r4, pc}
240022aa:	bf00      	nop
240022ac:	f3af 8000 	nop.w
240022b0:	00000001 	.word	0x00000001
240022b4:	00000025 	.word	0x00000025
240022b8:	01010100 	.word	0x01010100
240022bc:	00000000 	.word	0x00000000
240022c0:	00000008 	.word	0x00000008
240022c4:	00000002 	.word	0x00000002

240022c8 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
240022c8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240022ca:	2301      	movs	r3, #1
240022cc:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
240022d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
240022d4:	b002      	add	sp, #8
240022d6:	4770      	bx	lr

240022d8 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
240022d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240022dc:	2301      	movs	r3, #1
{
240022de:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
240022e0:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
240022e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
240022e8:	b93b      	cbnz	r3, 240022fa <getPresetNamesFromSDCard+0x22>
240022ea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 24002398 <getPresetNamesFromSDCard+0xc0>
			}

		}

	}
	diskBusy = 0;
240022ee:	2300      	movs	r3, #0
240022f0:	f88a 3000 	strb.w	r3, [sl]
	return;
}
240022f4:	b009      	add	sp, #36	; 0x24
240022f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240022fa:	4b21      	ldr	r3, [pc, #132]	; (24002380 <getPresetNamesFromSDCard+0xa8>)
		loadFailed = 0;
240022fc:	2400      	movs	r4, #0
		diskBusy = 1;
240022fe:	2501      	movs	r5, #1
24002300:	f8df a094 	ldr.w	sl, [pc, #148]	; 24002398 <getPresetNamesFromSDCard+0xc0>
24002304:	f013 0207 	ands.w	r2, r3, #7
		disk_initialize(0);
24002308:	4620      	mov	r0, r4
			audioOutBuffer[i] = 0;
2400230a:	bf18      	it	ne
2400230c:	2200      	movne	r2, #0
			audioOutBuffer[i + 1] = 0;
2400230e:	e9c3 2200 	strd	r2, r2, [r3]
24002312:	e9c3 2202 	strd	r2, r2, [r3, #8]
24002316:	e9c3 2204 	strd	r2, r2, [r3, #16]
2400231a:	e9c3 2206 	strd	r2, r2, [r3, #24]
2400231e:	e9c3 2208 	strd	r2, r2, [r3, #32]
24002322:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
24002326:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
2400232a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
2400232e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
24002332:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
24002336:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
2400233a:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
2400233e:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
24002342:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
24002346:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
2400234a:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
		loadFailed = 0;
2400234e:	4b0d      	ldr	r3, [pc, #52]	; (24002384 <getPresetNamesFromSDCard+0xac>)
		diskBusy = 1;
24002350:	f88a 5000 	strb.w	r5, [sl]
		loadFailed = 0;
24002354:	701c      	strb	r4, [r3, #0]
		disk_initialize(0);
24002356:	f00a fc57 	bl	2400cc08 <disk_initialize>
	    disk_status(0);
2400235a:	4620      	mov	r0, r4
2400235c:	f00a fc4a 	bl	2400cbf4 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24002360:	462a      	mov	r2, r5
24002362:	4909      	ldr	r1, [pc, #36]	; (24002388 <getPresetNamesFromSDCard+0xb0>)
24002364:	4809      	ldr	r0, [pc, #36]	; (2400238c <getPresetNamesFromSDCard+0xb4>)
24002366:	f00c fe47 	bl	2400eff8 <f_mount>
2400236a:	2800      	cmp	r0, #0
2400236c:	d1bf      	bne.n	240022ee <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400236e:	4605      	mov	r5, r0
24002370:	4e07      	ldr	r6, [pc, #28]	; (24002390 <getPresetNamesFromSDCard+0xb8>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002372:	f8df 9014 	ldr.w	r9, [pc, #20]	; 24002388 <getPresetNamesFromSDCard+0xb0>
24002376:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2400239c <getPresetNamesFromSDCard+0xc4>
2400237a:	4f06      	ldr	r7, [pc, #24]	; (24002394 <getPresetNamesFromSDCard+0xbc>)
2400237c:	e028      	b.n	240023d0 <getPresetNamesFromSDCard+0xf8>
2400237e:	bf00      	nop
24002380:	30000040 	.word	0x30000040
24002384:	20018cfc 	.word	0x20018cfc
24002388:	2001d8c8 	.word	0x2001d8c8
2400238c:	2001d468 	.word	0x2001d468
24002390:	24017de8 	.word	0x24017de8
24002394:	20014b08 	.word	0x20014b08
24002398:	20014b40 	.word	0x20014b40
2400239c:	20016bac 	.word	0x20016bac
					strcat(charBuf, "*.ebp");
240023a0:	aa02      	add	r2, sp, #8
240023a2:	6830      	ldr	r0, [r6, #0]
240023a4:	88b1      	ldrh	r1, [r6, #4]
240023a6:	f10d 0c08 	add.w	ip, sp, #8
240023aa:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
240023ac:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
240023ae:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
240023b2:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
240023b4:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
240023b6:	4661      	mov	r1, ip
240023b8:	f013 f850 	bl	2401545c <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240023bc:	ab05      	add	r3, sp, #20
240023be:	464a      	mov	r2, r9
240023c0:	4641      	mov	r1, r8
240023c2:	4638      	mov	r0, r7
240023c4:	f00d fb5a 	bl	2400fa7c <f_findfirst>
				if(res == FR_OK)
240023c8:	b358      	cbz	r0, 24002422 <getPresetNamesFromSDCard+0x14a>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240023ca:	3501      	adds	r5, #1
240023cc:	2d40      	cmp	r5, #64	; 0x40
240023ce:	d08e      	beq.n	240022ee <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
240023d0:	220a      	movs	r2, #10
240023d2:	a902      	add	r1, sp, #8
240023d4:	4628      	mov	r0, r5
240023d6:	f013 f83f 	bl	24015458 <itoa>
				int len = ((strlen(charBuf)));
240023da:	a802      	add	r0, sp, #8
240023dc:	f7fd ff7c 	bl	240002d8 <strlen>
				if (len == 1)
240023e0:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240023e2:	4603      	mov	r3, r0
				if (len == 1)
240023e4:	d1dc      	bne.n	240023a0 <getPresetNamesFromSDCard+0xc8>
					finalString[2] = charBuf[1];
240023e6:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
240023ea:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
240023ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
240023f0:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
240023f2:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
240023f6:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
240023f8:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
240023fc:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
24002400:	f7fd ff6a 	bl	240002d8 <strlen>
24002404:	a905      	add	r1, sp, #20
24002406:	4603      	mov	r3, r0
24002408:	88b2      	ldrh	r2, [r6, #4]
2400240a:	4419      	add	r1, r3
2400240c:	6830      	ldr	r0, [r6, #0]
2400240e:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002410:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
24002412:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002414:	4638      	mov	r0, r7
24002416:	464a      	mov	r2, r9
24002418:	4641      	mov	r1, r8
2400241a:	f00d fb2f 	bl	2400fa7c <f_findfirst>
				if(res == FR_OK)
2400241e:	2800      	cmp	r0, #0
24002420:	d1d3      	bne.n	240023ca <getPresetNamesFromSDCard+0xf2>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24002422:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 240027f8 <getPresetNamesFromSDCard+0x520>
24002426:	2211      	movs	r2, #17
24002428:	49ef      	ldr	r1, [pc, #956]	; (240027e8 <getPresetNamesFromSDCard+0x510>)
2400242a:	4658      	mov	r0, fp
2400242c:	f00c fe36 	bl	2400f09c <f_open>
24002430:	2800      	cmp	r0, #0
24002432:	d1ca      	bne.n	240023ca <getPresetNamesFromSDCard+0xf2>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24002434:	4ced      	ldr	r4, [pc, #948]	; (240027ec <getPresetNamesFromSDCard+0x514>)
24002436:	ab01      	add	r3, sp, #4
24002438:	f8db 200c 	ldr.w	r2, [fp, #12]
2400243c:	4658      	mov	r0, fp
2400243e:	4621      	mov	r1, r4
24002440:	f00c ffaa 	bl	2400f398 <f_read>
						f_close(&SDFile);
24002444:	4658      	mov	r0, fp
24002446:	f00d fa0f 	bl	2400f868 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
2400244a:	7823      	ldrb	r3, [r4, #0]
2400244c:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
24002450:	4ae7      	ldr	r2, [pc, #924]	; (240027f0 <getPresetNamesFromSDCard+0x518>)
24002452:	f894 c001 	ldrb.w	ip, [r4, #1]
24002456:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
2400245a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400245e:	48e5      	ldr	r0, [pc, #916]	; (240027f4 <getPresetNamesFromSDCard+0x51c>)
							presetNamesArray[i][j] = buffer[bufferIndex];
24002460:	f882 c001 	strb.w	ip, [r2, #1]
24002464:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24002468:	eb00 1301 	add.w	r3, r0, r1, lsl #4
2400246c:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
2400246e:	f882 c002 	strb.w	ip, [r2, #2]
24002472:	f894 c003 	ldrb.w	ip, [r4, #3]
24002476:	f882 c003 	strb.w	ip, [r2, #3]
2400247a:	f894 c004 	ldrb.w	ip, [r4, #4]
2400247e:	f882 c004 	strb.w	ip, [r2, #4]
24002482:	f894 c005 	ldrb.w	ip, [r4, #5]
24002486:	f882 c005 	strb.w	ip, [r2, #5]
2400248a:	f894 c006 	ldrb.w	ip, [r4, #6]
2400248e:	f882 c006 	strb.w	ip, [r2, #6]
24002492:	f894 c007 	ldrb.w	ip, [r4, #7]
24002496:	f882 c007 	strb.w	ip, [r2, #7]
2400249a:	f894 c008 	ldrb.w	ip, [r4, #8]
2400249e:	f882 c008 	strb.w	ip, [r2, #8]
240024a2:	f894 c009 	ldrb.w	ip, [r4, #9]
240024a6:	f882 c009 	strb.w	ip, [r2, #9]
240024aa:	f894 c00a 	ldrb.w	ip, [r4, #10]
240024ae:	f882 c00a 	strb.w	ip, [r2, #10]
240024b2:	f894 c00b 	ldrb.w	ip, [r4, #11]
240024b6:	f882 c00b 	strb.w	ip, [r2, #11]
240024ba:	f894 c00c 	ldrb.w	ip, [r4, #12]
240024be:	f882 c00c 	strb.w	ip, [r2, #12]
240024c2:	f894 c00d 	ldrb.w	ip, [r4, #13]
240024c6:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240024ca:	7ba2      	ldrb	r2, [r4, #14]
240024cc:	5442      	strb	r2, [r0, r1]
240024ce:	7be2      	ldrb	r2, [r4, #15]
240024d0:	705a      	strb	r2, [r3, #1]
240024d2:	7c22      	ldrb	r2, [r4, #16]
240024d4:	709a      	strb	r2, [r3, #2]
240024d6:	7c62      	ldrb	r2, [r4, #17]
240024d8:	70da      	strb	r2, [r3, #3]
240024da:	7ca2      	ldrb	r2, [r4, #18]
240024dc:	711a      	strb	r2, [r3, #4]
240024de:	7ce2      	ldrb	r2, [r4, #19]
240024e0:	715a      	strb	r2, [r3, #5]
240024e2:	7d22      	ldrb	r2, [r4, #20]
240024e4:	719a      	strb	r2, [r3, #6]
240024e6:	7d62      	ldrb	r2, [r4, #21]
240024e8:	71da      	strb	r2, [r3, #7]
240024ea:	7da2      	ldrb	r2, [r4, #22]
240024ec:	721a      	strb	r2, [r3, #8]
240024ee:	7de2      	ldrb	r2, [r4, #23]
240024f0:	725a      	strb	r2, [r3, #9]
240024f2:	7e22      	ldrb	r2, [r4, #24]
240024f4:	729a      	strb	r2, [r3, #10]
240024f6:	7e62      	ldrb	r2, [r4, #25]
240024f8:	72da      	strb	r2, [r3, #11]
240024fa:	7ea2      	ldrb	r2, [r4, #26]
240024fc:	731a      	strb	r2, [r3, #12]
240024fe:	7ee2      	ldrb	r2, [r4, #27]
24002500:	735a      	strb	r2, [r3, #13]
24002502:	7f22      	ldrb	r2, [r4, #28]
24002504:	739a      	strb	r2, [r3, #14]
24002506:	7f62      	ldrb	r2, [r4, #29]
24002508:	73da      	strb	r2, [r3, #15]
2400250a:	7fa2      	ldrb	r2, [r4, #30]
2400250c:	741a      	strb	r2, [r3, #16]
2400250e:	7fe2      	ldrb	r2, [r4, #31]
24002510:	745a      	strb	r2, [r3, #17]
24002512:	f894 2020 	ldrb.w	r2, [r4, #32]
24002516:	749a      	strb	r2, [r3, #18]
24002518:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
2400251c:	74da      	strb	r2, [r3, #19]
2400251e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
24002522:	751a      	strb	r2, [r3, #20]
24002524:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
24002528:	755a      	strb	r2, [r3, #21]
2400252a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400252e:	759a      	strb	r2, [r3, #22]
24002530:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24002534:	75da      	strb	r2, [r3, #23]
24002536:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400253a:	761a      	strb	r2, [r3, #24]
2400253c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
24002540:	765a      	strb	r2, [r3, #25]
24002542:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
24002546:	769a      	strb	r2, [r3, #26]
24002548:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400254c:	76da      	strb	r2, [r3, #27]
2400254e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
24002552:	771a      	strb	r2, [r3, #28]
24002554:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
24002558:	775a      	strb	r2, [r3, #29]
2400255a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400255e:	779a      	strb	r2, [r3, #30]
24002560:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
24002564:	77da      	strb	r2, [r3, #31]
24002566:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400256a:	f883 2020 	strb.w	r2, [r3, #32]
2400256e:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
24002572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
24002576:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
2400257a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
2400257e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
24002582:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
24002586:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
2400258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
2400258e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
24002592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
24002596:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
2400259a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
2400259e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
240025a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
240025a6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
240025aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
240025ae:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
240025b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
240025b6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
240025ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
240025be:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
240025c2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
240025c6:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
240025ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
240025ce:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
240025d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
240025d6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
240025da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
240025de:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
240025e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
240025e6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
240025ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
240025ee:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
240025f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
240025f6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
240025fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
240025fe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24002602:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
24002606:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
2400260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2400260e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
24002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24002616:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
2400261a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
2400261e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
24002622:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
24002626:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
2400262a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
2400262e:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
24002632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
24002636:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
2400263a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
2400263e:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
24002642:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
24002646:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
2400264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
2400264e:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
24002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24002656:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
2400265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
2400265e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
24002662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
24002666:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
2400266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2400266e:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
24002672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24002676:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
2400267a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
2400267e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
24002682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
24002686:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
2400268a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2400268e:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
24002692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
24002696:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
2400269a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
2400269e:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
240026a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
240026a6:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
240026aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
240026ae:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
240026b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
240026b6:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
240026ba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
240026be:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
240026c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
240026c6:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
240026ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
240026ce:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
240026d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
240026d6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
240026da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
240026de:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
240026e2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
240026e6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
240026ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
240026ee:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
240026f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
240026f6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
240026fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
240026fe:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
24002702:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
24002706:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
2400270a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2400270e:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
24002712:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
24002716:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
2400271a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
2400271e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
24002722:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
24002726:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
2400272a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
2400272e:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
24002732:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
24002736:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
2400273a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
2400273e:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
24002742:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
24002746:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
2400274a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
2400274e:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
24002752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
24002756:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
2400275a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
2400275e:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
24002762:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
24002766:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
2400276a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
2400276e:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
24002772:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
24002776:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
2400277a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
2400277e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
24002782:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
24002786:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
2400278a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
2400278e:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
24002792:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
24002796:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
2400279a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
2400279e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
240027a2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
240027a6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
240027aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
240027ae:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
240027b2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
240027b6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
240027ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
240027be:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
240027c2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
240027c6:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
240027ca:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
240027ce:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
240027d2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
240027d6:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
240027da:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
240027de:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
240027e2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
240027e6:	e5f0      	b.n	240023ca <getPresetNamesFromSDCard+0xf2>
240027e8:	20016bc2 	.word	0x20016bc2
240027ec:	300001c0 	.word	0x300001c0
240027f0:	30032000 	.word	0x30032000
240027f4:	30032380 	.word	0x30032380
240027f8:	2001d69c 	.word	0x2001d69c

240027fc <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
240027fc:	b5d0      	push	{r4, r6, r7, lr}
	    	FMC_SDRAM_CommandTypeDef Command;

	        __IO uint32_t tmpmrd = 0;
240027fe:	2300      	movs	r3, #0
{
24002800:	b086      	sub	sp, #24
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002802:	4c22      	ldr	r4, [pc, #136]	; (2400288c <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002804:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
24002806:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002808:	2310      	movs	r3, #16
2400280a:	2601      	movs	r6, #1
2400280c:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400280e:	a902      	add	r1, sp, #8
24002810:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002812:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
2400281a:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400281e:	f008 f905 	bl	2400aa2c <HAL_SDRAM_SendCommand>

	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);
24002822:	2001      	movs	r0, #1
24002824:	f001 ff52 	bl	240046cc <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002828:	a902      	add	r1, sp, #8
2400282a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400282e:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002830:	e9cd 6704 	strd	r6, r7, [sp, #16]
24002834:	2602      	movs	r6, #2
24002836:	2710      	movs	r7, #16
24002838:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400283c:	f008 f8f6 	bl	2400aa2c <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002840:	2003      	movs	r0, #3
24002842:	2110      	movs	r1, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002848:	e9cd 0102 	strd	r0, r1, [sp, #8]
2400284c:	2002      	movs	r0, #2
2400284e:	2100      	movs	r1, #0
24002850:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002854:	a902      	add	r1, sp, #8
24002856:	4620      	mov	r0, r4
24002858:	f008 f8e8 	bl	2400aa2c <HAL_SDRAM_SendCommand>

	        /* Step 7: Program the external memory mode register */
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
2400285c:	f240 2022 	movw	r0, #546	; 0x222
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002860:	2204      	movs	r2, #4
24002862:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002864:	9001      	str	r0, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
24002866:	2001      	movs	r0, #1
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002868:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
2400286a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
2400286e:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
24002874:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002878:	4620      	mov	r0, r4
2400287a:	f008 f8d7 	bl	2400aa2c <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
2400287e:	f240 21fa 	movw	r1, #762	; 0x2fa
24002882:	4620      	mov	r0, r4
24002884:	f008 f8f2 	bl	2400aa6c <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
24002888:	b006      	add	sp, #24
2400288a:	bdd0      	pop	{r4, r6, r7, pc}
2400288c:	20014928 	.word	0x20014928

24002890 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
24002890:	4ba4      	ldr	r3, [pc, #656]	; (24002b24 <setEffectsFunctions+0x294>)
24002892:	2201      	movs	r2, #1
{
24002894:	b410      	push	{r4}
	effectsActive[i] = 1;
24002896:	545a      	strb	r2, [r3, r1]
	switch (effectType)
24002898:	2813      	cmp	r0, #19
2400289a:	d829      	bhi.n	240028f0 <setEffectsFunctions+0x60>
2400289c:	e8df f010 	tbh	[pc, r0, lsl #1]
240028a0:	01d301e2 	.word	0x01d301e2
240028a4:	013c01c4 	.word	0x013c01c4
240028a8:	01260136 	.word	0x01260136
240028ac:	00140111 	.word	0x00140111
240028b0:	00f10101 	.word	0x00f10101
240028b4:	00c700da 	.word	0x00c700da
240028b8:	00a100b4 	.word	0x00a100b4
240028bc:	007a008e 	.word	0x007a008e
240028c0:	00520066 	.word	0x00520066
240028c4:	002b003e 	.word	0x002b003e
			  effectSetters[i].setParam3 = &compressorParam3;
			  effectSetters[i].setParam4 = &compressorParam4;
			  effectSetters[i].setParam5 = &compressorParam5;
			  break;
		  case Chorus:
			  effectTick[i] = &chorusTick;
240028c8:	4b97      	ldr	r3, [pc, #604]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &chorusParam1;
240028ca:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
240028ce:	4c97      	ldr	r4, [pc, #604]	; (24002b2c <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &chorusParam1;
240028d0:	4a97      	ldr	r2, [pc, #604]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &chorusTick;
240028d2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
240028d6:	4997      	ldr	r1, [pc, #604]	; (24002b34 <setEffectsFunctions+0x2a4>)
240028d8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
240028dc:	4c96      	ldr	r4, [pc, #600]	; (24002b38 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &chorusParam1;
240028de:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
240028e2:	4896      	ldr	r0, [pc, #600]	; (24002b3c <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam4 = &chorusParam4;
240028e4:	4996      	ldr	r1, [pc, #600]	; (24002b40 <setEffectsFunctions+0x2b0>)
			  effectSetters[i].setParam5 = &blankFunction;
240028e6:	4a97      	ldr	r2, [pc, #604]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &param3Hard;
240028e8:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
240028ec:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
240028f0:	f85d 4b04 	ldr.w	r4, [sp], #4
240028f4:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
240028f6:	4b8c      	ldr	r3, [pc, #560]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
240028f8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
240028fc:	4a92      	ldr	r2, [pc, #584]	; (24002b48 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
240028fe:	488c      	ldr	r0, [pc, #560]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXLadderLowpassTick;
24002900:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002904:	4991      	ldr	r1, [pc, #580]	; (24002b4c <setEffectsFunctions+0x2bc>)
24002906:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
2400290a:	4a8e      	ldr	r2, [pc, #568]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
2400290c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002910:	498f      	ldr	r1, [pc, #572]	; (24002b50 <setEffectsFunctions+0x2c0>)
			  effectSetters[i].setParam2 = &blankFunction;;
24002912:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002914:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002916:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
2400291a:	e7e9      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = FXVZbandrejectTick;
2400291c:	4b82      	ldr	r3, [pc, #520]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
2400291e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
24002922:	4a8c      	ldr	r2, [pc, #560]	; (24002b54 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002924:	4882      	ldr	r0, [pc, #520]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = FXVZbandrejectTick;
24002926:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
2400292a:	498b      	ldr	r1, [pc, #556]	; (24002b58 <setEffectsFunctions+0x2c8>)
2400292c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002930:	4a84      	ldr	r2, [pc, #528]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002932:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24002936:	4889      	ldr	r0, [pc, #548]	; (24002b5c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002938:	4989      	ldr	r1, [pc, #548]	; (24002b60 <setEffectsFunctions+0x2d0>)
			  effectSetters[i].setParam4 = &blankFunction;;
2400293a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
2400293c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
2400293e:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002942:	e7d5      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = FXVZhighshelfTick;
24002944:	4b78      	ldr	r3, [pc, #480]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002946:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
2400294a:	4a86      	ldr	r2, [pc, #536]	; (24002b64 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
2400294c:	4878      	ldr	r0, [pc, #480]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = FXVZhighshelfTick;
2400294e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002952:	4985      	ldr	r1, [pc, #532]	; (24002b68 <setEffectsFunctions+0x2d8>)
24002954:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002958:	4a7a      	ldr	r2, [pc, #488]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
2400295a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
2400295e:	4883      	ldr	r0, [pc, #524]	; (24002b6c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002960:	4983      	ldr	r1, [pc, #524]	; (24002b70 <setEffectsFunctions+0x2e0>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002962:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002964:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002966:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
2400296a:	e7c1      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXVZlowshelfTick;
2400296c:	4b6e      	ldr	r3, [pc, #440]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
2400296e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
24002972:	4a80      	ldr	r2, [pc, #512]	; (24002b74 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002974:	486e      	ldr	r0, [pc, #440]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXVZlowshelfTick;
24002976:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
2400297a:	497f      	ldr	r1, [pc, #508]	; (24002b78 <setEffectsFunctions+0x2e8>)
2400297c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002980:	4a70      	ldr	r2, [pc, #448]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002982:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
24002986:	487d      	ldr	r0, [pc, #500]	; (24002b7c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002988:	497d      	ldr	r1, [pc, #500]	; (24002b80 <setEffectsFunctions+0x2f0>)
			  effectSetters[i].setParam4 = &blankFunction;
2400298a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
2400298c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
2400298e:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002992:	e7ad      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXVZpeakTick;
24002994:	4b64      	ldr	r3, [pc, #400]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002996:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
2400299a:	4a7a      	ldr	r2, [pc, #488]	; (24002b84 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
2400299c:	4864      	ldr	r0, [pc, #400]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXVZpeakTick;
2400299e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029a2:	4979      	ldr	r1, [pc, #484]	; (24002b88 <setEffectsFunctions+0x2f8>)
240029a4:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240029a8:	4a66      	ldr	r2, [pc, #408]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029aa:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
240029ae:	4877      	ldr	r0, [pc, #476]	; (24002b8c <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
240029b0:	4977      	ldr	r1, [pc, #476]	; (24002b90 <setEffectsFunctions+0x300>)
			  effectSetters[i].setParam4 = &blankFunction;
240029b2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240029b4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
240029b6:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240029ba:	e799      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXdiodeLowpassTick;
240029bc:	4b5a      	ldr	r3, [pc, #360]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029be:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
240029c2:	4a74      	ldr	r2, [pc, #464]	; (24002b94 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029c4:	485a      	ldr	r0, [pc, #360]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXdiodeLowpassTick;
240029c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029ca:	4973      	ldr	r1, [pc, #460]	; (24002b98 <setEffectsFunctions+0x308>)
240029cc:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
240029d0:	4a5c      	ldr	r2, [pc, #368]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029d2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240029d6:	4971      	ldr	r1, [pc, #452]	; (24002b9c <setEffectsFunctions+0x30c>)
			  effectSetters[i].setParam2 = &blankFunction;
240029d8:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240029da:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
240029dc:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
240029e0:	e786      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXbandpassTick;
240029e2:	4b51      	ldr	r3, [pc, #324]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240029e4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
240029e8:	4a6d      	ldr	r2, [pc, #436]	; (24002ba0 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240029ea:	4851      	ldr	r0, [pc, #324]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXbandpassTick;
240029ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240029f0:	496c      	ldr	r1, [pc, #432]	; (24002ba4 <setEffectsFunctions+0x314>)
240029f2:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
240029f6:	4a53      	ldr	r2, [pc, #332]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240029f8:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
240029fc:	496a      	ldr	r1, [pc, #424]	; (24002ba8 <setEffectsFunctions+0x318>)
			  effectSetters[i].setParam2 = &blankFunction;
240029fe:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002a00:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002a02:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a06:	e773      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXhighpassTick;
24002a08:	4b47      	ldr	r3, [pc, #284]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a0a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24002a0e:	4a67      	ldr	r2, [pc, #412]	; (24002bac <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a10:	4847      	ldr	r0, [pc, #284]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXhighpassTick;
24002a12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a16:	4966      	ldr	r1, [pc, #408]	; (24002bb0 <setEffectsFunctions+0x320>)
24002a18:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a1c:	4a49      	ldr	r2, [pc, #292]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a1e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002a22:	4964      	ldr	r1, [pc, #400]	; (24002bb4 <setEffectsFunctions+0x324>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a24:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002a26:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002a28:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a2c:	e760      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXlowpassTick;
24002a2e:	4b3e      	ldr	r3, [pc, #248]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a30:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
24002a34:	4a60      	ldr	r2, [pc, #384]	; (24002bb8 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a36:	483e      	ldr	r0, [pc, #248]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXlowpassTick;
24002a38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a3c:	495f      	ldr	r1, [pc, #380]	; (24002bbc <setEffectsFunctions+0x32c>)
24002a3e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a42:	4a40      	ldr	r2, [pc, #256]	; (24002b44 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a44:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002a48:	495d      	ldr	r1, [pc, #372]	; (24002bc0 <setEffectsFunctions+0x330>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a4a:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002a4c:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002a4e:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a52:	e74d      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectTick[i] = &wavefolderTick;
24002a54:	4b34      	ldr	r3, [pc, #208]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a56:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
24002a5a:	4c5a      	ldr	r4, [pc, #360]	; (24002bc4 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a5c:	4a34      	ldr	r2, [pc, #208]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &wavefolderTick;
24002a5e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a62:	4959      	ldr	r1, [pc, #356]	; (24002bc8 <setEffectsFunctions+0x338>)
24002a64:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002a68:	4c58      	ldr	r4, [pc, #352]	; (24002bcc <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a6a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
24002a6e:	4858      	ldr	r0, [pc, #352]	; (24002bd0 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam4 = &param4Linear;
24002a70:	4958      	ldr	r1, [pc, #352]	; (24002bd4 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam5 = &param5Linear;
24002a72:	4a59      	ldr	r2, [pc, #356]	; (24002bd8 <setEffectsFunctions+0x348>)
			  effectSetters[i].setParam3 = &tiltParam3;
24002a74:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
24002a78:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
24002a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002a80:	4770      	bx	lr
			  effectTick[i] = &tiltFilterTick;
24002a82:	4b29      	ldr	r3, [pc, #164]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002a84:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
24002a88:	4c54      	ldr	r4, [pc, #336]	; (24002bdc <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002a8a:	4a29      	ldr	r2, [pc, #164]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &tiltFilterTick;
24002a8c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
24002a90:	4953      	ldr	r1, [pc, #332]	; (24002be0 <setEffectsFunctions+0x350>)
24002a92:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
24002a96:	4c53      	ldr	r4, [pc, #332]	; (24002be4 <setEffectsFunctions+0x354>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002a98:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
24002a9c:	4852      	ldr	r0, [pc, #328]	; (24002be8 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam4 = &tiltParam4;
24002a9e:	4953      	ldr	r1, [pc, #332]	; (24002bec <setEffectsFunctions+0x35c>)
24002aa0:	e7e7      	b.n	24002a72 <setEffectsFunctions+0x1e2>
			  effectTick[i] = &bcTick;
24002aa2:	4b21      	ldr	r3, [pc, #132]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002aa4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
24002aa8:	4c51      	ldr	r4, [pc, #324]	; (24002bf0 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002aaa:	4a21      	ldr	r2, [pc, #132]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &bcTick;
24002aac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ab0:	4950      	ldr	r1, [pc, #320]	; (24002bf4 <setEffectsFunctions+0x364>)
24002ab2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
24002ab6:	4c50      	ldr	r4, [pc, #320]	; (24002bf8 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ab8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
24002abc:	484f      	ldr	r0, [pc, #316]	; (24002bfc <setEffectsFunctions+0x36c>)
			  effectSetters[i].setParam4 = &param4Linear;
24002abe:	4945      	ldr	r1, [pc, #276]	; (24002bd4 <setEffectsFunctions+0x344>)
24002ac0:	e7d7      	b.n	24002a72 <setEffectsFunctions+0x1e2>
			  effectTick[i] = &compressorTick;
24002ac2:	4b19      	ldr	r3, [pc, #100]	; (24002b28 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002ac4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
24002ac8:	4c4d      	ldr	r4, [pc, #308]	; (24002c00 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002aca:	4a19      	ldr	r2, [pc, #100]	; (24002b30 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &compressorTick;
24002acc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
24002ad0:	494c      	ldr	r1, [pc, #304]	; (24002c04 <setEffectsFunctions+0x374>)
24002ad2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
24002ad6:	4c4c      	ldr	r4, [pc, #304]	; (24002c08 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002ad8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
24002adc:	484b      	ldr	r0, [pc, #300]	; (24002c0c <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam4 = &compressorParam4;
24002ade:	494c      	ldr	r1, [pc, #304]	; (24002c10 <setEffectsFunctions+0x380>)
			  effectSetters[i].setParam5 = &compressorParam5;
24002ae0:	4a4c      	ldr	r2, [pc, #304]	; (24002c14 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam3 = &compressorParam3;
24002ae2:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
24002ae6:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24002aea:	e701      	b.n	240028f0 <setEffectsFunctions+0x60>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002aec:	4a10      	ldr	r2, [pc, #64]	; (24002b30 <setEffectsFunctions+0x2a0>)
24002aee:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
24002af2:	4b0d      	ldr	r3, [pc, #52]	; (24002b28 <setEffectsFunctions+0x298>)
24002af4:	4c48      	ldr	r4, [pc, #288]	; (24002c18 <setEffectsFunctions+0x388>)
			  effectTick[i] = &tanhTick;
24002af6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002afa:	eb02 0380 	add.w	r3, r2, r0, lsl #2
24002afe:	493d      	ldr	r1, [pc, #244]	; (24002bf4 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam2 = &offsetParam2;
24002b00:	4c32      	ldr	r4, [pc, #200]	; (24002bcc <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b02:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Linear;
24002b06:	4845      	ldr	r0, [pc, #276]	; (24002c1c <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam4 = &param4Linear;
24002b08:	4932      	ldr	r1, [pc, #200]	; (24002bd4 <setEffectsFunctions+0x344>)
24002b0a:	e6ec      	b.n	240028e6 <setEffectsFunctions+0x56>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b0c:	4a08      	ldr	r2, [pc, #32]	; (24002b30 <setEffectsFunctions+0x2a0>)
24002b0e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
24002b12:	4b05      	ldr	r3, [pc, #20]	; (24002b28 <setEffectsFunctions+0x298>)
24002b14:	4c42      	ldr	r4, [pc, #264]	; (24002c20 <setEffectsFunctions+0x390>)
24002b16:	e7ee      	b.n	24002af6 <setEffectsFunctions+0x266>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b18:	4a05      	ldr	r2, [pc, #20]	; (24002b30 <setEffectsFunctions+0x2a0>)
24002b1a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &satTick;
24002b1e:	4b02      	ldr	r3, [pc, #8]	; (24002b28 <setEffectsFunctions+0x298>)
24002b20:	4c40      	ldr	r4, [pc, #256]	; (24002c24 <setEffectsFunctions+0x394>)
24002b22:	e7e8      	b.n	24002af6 <setEffectsFunctions+0x266>
24002b24:	20014b94 	.word	0x20014b94
24002b28:	20005060 	.word	0x20005060
24002b2c:	000027e1 	.word	0x000027e1
24002b30:	20014b44 	.word	0x20014b44
24002b34:	00002701 	.word	0x00002701
24002b38:	00002741 	.word	0x00002741
24002b3c:	00002761 	.word	0x00002761
24002b40:	000027a1 	.word	0x000027a1
24002b44:	00004ea1 	.word	0x00004ea1
24002b48:	00002d01 	.word	0x00002d01
24002b4c:	00003021 	.word	0x00003021
24002b50:	00003281 	.word	0x00003281
24002b54:	00002ce1 	.word	0x00002ce1
24002b58:	00002fc1 	.word	0x00002fc1
24002b5c:	00003141 	.word	0x00003141
24002b60:	00003261 	.word	0x00003261
24002b64:	00002cc1 	.word	0x00002cc1
24002b68:	00002f61 	.word	0x00002f61
24002b6c:	00003101 	.word	0x00003101
24002b70:	00003241 	.word	0x00003241
24002b74:	00002ca1 	.word	0x00002ca1
24002b78:	00002f01 	.word	0x00002f01
24002b7c:	000030c1 	.word	0x000030c1
24002b80:	00003221 	.word	0x00003221
24002b84:	00002c81 	.word	0x00002c81
24002b88:	00002ea1 	.word	0x00002ea1
24002b8c:	00003081 	.word	0x00003081
24002b90:	00003201 	.word	0x00003201
24002b94:	00002c61 	.word	0x00002c61
24002b98:	00002e41 	.word	0x00002e41
24002b9c:	000031e1 	.word	0x000031e1
24002ba0:	00002c41 	.word	0x00002c41
24002ba4:	00002de1 	.word	0x00002de1
24002ba8:	000031c1 	.word	0x000031c1
24002bac:	00002c21 	.word	0x00002c21
24002bb0:	00002d81 	.word	0x00002d81
24002bb4:	000031a1 	.word	0x000031a1
24002bb8:	00002c01 	.word	0x00002c01
24002bbc:	00002d21 	.word	0x00002d21
24002bc0:	00003181 	.word	0x00003181
24002bc4:	000025e1 	.word	0x000025e1
24002bc8:	000020a1 	.word	0x000020a1
24002bcc:	00002361 	.word	0x00002361
24002bd0:	000020e1 	.word	0x000020e1
24002bd4:	000024a1 	.word	0x000024a1
24002bd8:	000024c1 	.word	0x000024c1
24002bdc:	00002941 	.word	0x00002941
24002be0:	00002121 	.word	0x00002121
24002be4:	00002181 	.word	0x00002181
24002be8:	000021e1 	.word	0x000021e1
24002bec:	00002221 	.word	0x00002221
24002bf0:	00002ba1 	.word	0x00002ba1
24002bf4:	00002061 	.word	0x00002061
24002bf8:	00002381 	.word	0x00002381
24002bfc:	00002501 	.word	0x00002501
24002c00:	00002be1 	.word	0x00002be1
24002c04:	00002261 	.word	0x00002261
24002c08:	00002281 	.word	0x00002281
24002c0c:	000022c1 	.word	0x000022c1
24002c10:	000022e1 	.word	0x000022e1
24002c14:	00002321 	.word	0x00002321
24002c18:	000028c1 	.word	0x000028c1
24002c1c:	000023a1 	.word	0x000023a1
24002c20:	00002981 	.word	0x00002981
24002c24:	00002b21 	.word	0x00002b21
			  effectTick[i] = &hardClipTick;
24002c28:	4b18      	ldr	r3, [pc, #96]	; (24002c8c <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c2a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
24002c2e:	4c18      	ldr	r4, [pc, #96]	; (24002c90 <setEffectsFunctions+0x400>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c30:	4a18      	ldr	r2, [pc, #96]	; (24002c94 <setEffectsFunctions+0x404>)
			  effectTick[i] = &hardClipTick;
24002c32:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c36:	4918      	ldr	r1, [pc, #96]	; (24002c98 <setEffectsFunctions+0x408>)
24002c38:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002c3c:	4c17      	ldr	r4, [pc, #92]	; (24002c9c <setEffectsFunctions+0x40c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c3e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Hard;
24002c42:	4817      	ldr	r0, [pc, #92]	; (24002ca0 <setEffectsFunctions+0x410>)
24002c44:	e760      	b.n	24002b08 <setEffectsFunctions+0x278>
			  effectTick[i] = &softClipTick;
24002c46:	4b11      	ldr	r3, [pc, #68]	; (24002c8c <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c48:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
24002c4c:	4c15      	ldr	r4, [pc, #84]	; (24002ca4 <setEffectsFunctions+0x414>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c4e:	4a11      	ldr	r2, [pc, #68]	; (24002c94 <setEffectsFunctions+0x404>)
			  effectTick[i] = &softClipTick;
24002c50:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c54:	4910      	ldr	r1, [pc, #64]	; (24002c98 <setEffectsFunctions+0x408>)
24002c56:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002c5a:	4c10      	ldr	r4, [pc, #64]	; (24002c9c <setEffectsFunctions+0x40c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c5c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Soft;
24002c60:	4811      	ldr	r0, [pc, #68]	; (24002ca8 <setEffectsFunctions+0x418>)
24002c62:	e751      	b.n	24002b08 <setEffectsFunctions+0x278>
			  effectSetters[i].setParam1 = &blankFunction;
24002c64:	4811      	ldr	r0, [pc, #68]	; (24002cac <setEffectsFunctions+0x41c>)
24002c66:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
24002c6a:	4a0a      	ldr	r2, [pc, #40]	; (24002c94 <setEffectsFunctions+0x404>)
			  effectTick[i] = &blankTick;
24002c6c:	4c07      	ldr	r4, [pc, #28]	; (24002c8c <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &blankFunction;
24002c6e:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
24002c72:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
24002c76:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002c7a:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
24002c7e:	2200      	movs	r2, #0
24002c80:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
24002c82:	4b0b      	ldr	r3, [pc, #44]	; (24002cb0 <setEffectsFunctions+0x420>)
24002c84:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
24002c88:	e632      	b.n	240028f0 <setEffectsFunctions+0x60>
24002c8a:	bf00      	nop
24002c8c:	20005060 	.word	0x20005060
24002c90:	00002a81 	.word	0x00002a81
24002c94:	20014b44 	.word	0x20014b44
24002c98:	00002061 	.word	0x00002061
24002c9c:	00002361 	.word	0x00002361
24002ca0:	00002421 	.word	0x00002421
24002ca4:	000029e1 	.word	0x000029e1
24002ca8:	000023c1 	.word	0x000023c1
24002cac:	00004ea1 	.word	0x00004ea1
24002cb0:	00002921 	.word	0x00002921

24002cb4 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
24002cb4:	b410      	push	{r4}
	switch (filterType)
24002cb6:	2808      	cmp	r0, #8
24002cb8:	d812      	bhi.n	24002ce0 <setFilterTypes+0x2c>
24002cba:	e8df f000 	tbb	[pc, r0]
24002cbe:	2314      	.short	0x2314
24002cc0:	5f504132 	.word	0x5f504132
24002cc4:	7d6e      	.short	0x7d6e
24002cc6:	05          	.byte	0x05
24002cc7:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZbandrejectSetQ;
				  filterSetters[i].setGain = &VZbandrejectSetGain;
				  break;
			  case 8:
				  filterTick[i] = &LadderLowpassTick;
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002cc8:	4b43      	ldr	r3, [pc, #268]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
24002cca:	4a44      	ldr	r2, [pc, #272]	; (24002ddc <setFilterTypes+0x128>)
24002ccc:	4844      	ldr	r0, [pc, #272]	; (24002de0 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002cce:	4c45      	ldr	r4, [pc, #276]	; (24002de4 <setFilterTypes+0x130>)
				  filterTick[i] = &LadderLowpassTick;
24002cd0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002cd4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002cd8:	4843      	ldr	r0, [pc, #268]	; (24002de8 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002cda:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002cde:	6050      	str	r0, [r2, #4]
				  break;
			  default:
				  break;
		}
}
24002ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ce4:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
24002ce6:	4b3c      	ldr	r3, [pc, #240]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
24002ce8:	4a3c      	ldr	r2, [pc, #240]	; (24002ddc <setFilterTypes+0x128>)
24002cea:	4840      	ldr	r0, [pc, #256]	; (24002dec <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002cec:	4c40      	ldr	r4, [pc, #256]	; (24002df0 <setFilterTypes+0x13c>)
				  filterTick[i] = &lowpassTick;
24002cee:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
24002cf2:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002cf6:	483f      	ldr	r0, [pc, #252]	; (24002df4 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002cf8:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
24002cfc:	6050      	str	r0, [r2, #4]
}
24002cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d02:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
24002d04:	4b34      	ldr	r3, [pc, #208]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
24002d06:	4a35      	ldr	r2, [pc, #212]	; (24002ddc <setFilterTypes+0x128>)
24002d08:	483b      	ldr	r0, [pc, #236]	; (24002df8 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &highpassSetQ;
24002d0a:	4c3c      	ldr	r4, [pc, #240]	; (24002dfc <setFilterTypes+0x148>)
				  filterTick[i] = &highpassTick;
24002d0c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
24002d10:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d14:	483a      	ldr	r0, [pc, #232]	; (24002e00 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &highpassSetQ;
24002d16:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24002d1a:	6050      	str	r0, [r2, #4]
}
24002d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d20:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
24002d22:	4b2d      	ldr	r3, [pc, #180]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
24002d24:	4a2d      	ldr	r2, [pc, #180]	; (24002ddc <setFilterTypes+0x128>)
24002d26:	4837      	ldr	r0, [pc, #220]	; (24002e04 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002d28:	4c37      	ldr	r4, [pc, #220]	; (24002e08 <setFilterTypes+0x154>)
				  filterTick[i] = &bandpassTick;
24002d2a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
24002d2e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d32:	4836      	ldr	r0, [pc, #216]	; (24002e0c <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002d34:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
24002d38:	6050      	str	r0, [r2, #4]
}
24002d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d3e:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002d40:	4b25      	ldr	r3, [pc, #148]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
24002d42:	4a26      	ldr	r2, [pc, #152]	; (24002ddc <setFilterTypes+0x128>)
24002d44:	4832      	ldr	r0, [pc, #200]	; (24002e10 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002d46:	4c33      	ldr	r4, [pc, #204]	; (24002e14 <setFilterTypes+0x160>)
				  filterTick[i] = &diodeLowpassTick;
24002d48:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002d4c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d50:	4831      	ldr	r0, [pc, #196]	; (24002e18 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002d52:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002d56:	6050      	str	r0, [r2, #4]
}
24002d58:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d5c:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
24002d5e:	4b1e      	ldr	r3, [pc, #120]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
24002d60:	4a1e      	ldr	r2, [pc, #120]	; (24002ddc <setFilterTypes+0x128>)
24002d62:	482e      	ldr	r0, [pc, #184]	; (24002e1c <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002d64:	4c2e      	ldr	r4, [pc, #184]	; (24002e20 <setFilterTypes+0x16c>)
				  filterTick[i] = &VZpeakTick;
24002d66:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002d6a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d6e:	482d      	ldr	r0, [pc, #180]	; (24002e24 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002d70:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002d74:	6050      	str	r0, [r2, #4]
}
24002d76:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d7a:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002d7c:	4b16      	ldr	r3, [pc, #88]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
24002d7e:	4a17      	ldr	r2, [pc, #92]	; (24002ddc <setFilterTypes+0x128>)
24002d80:	4829      	ldr	r0, [pc, #164]	; (24002e28 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002d82:	4c2a      	ldr	r4, [pc, #168]	; (24002e2c <setFilterTypes+0x178>)
				  filterTick[i] = &VZlowshelfTick;
24002d84:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002d88:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d8c:	4828      	ldr	r0, [pc, #160]	; (24002e30 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002d8e:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002d92:	6050      	str	r0, [r2, #4]
}
24002d94:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d98:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002d9a:	4b0f      	ldr	r3, [pc, #60]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
24002d9c:	4a0f      	ldr	r2, [pc, #60]	; (24002ddc <setFilterTypes+0x128>)
24002d9e:	4825      	ldr	r0, [pc, #148]	; (24002e34 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002da0:	4c25      	ldr	r4, [pc, #148]	; (24002e38 <setFilterTypes+0x184>)
				  filterTick[i] = &VZhighshelfTick;
24002da2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002da6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002daa:	4824      	ldr	r0, [pc, #144]	; (24002e3c <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002dac:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002db0:	6050      	str	r0, [r2, #4]
}
24002db2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002db6:	4770      	bx	lr
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002db8:	4b07      	ldr	r3, [pc, #28]	; (24002dd8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
24002dba:	4a08      	ldr	r2, [pc, #32]	; (24002ddc <setFilterTypes+0x128>)
24002dbc:	4820      	ldr	r0, [pc, #128]	; (24002e40 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dbe:	4c21      	ldr	r4, [pc, #132]	; (24002e44 <setFilterTypes+0x190>)
				  filterTick[i] = &VZbandrejectTick;
24002dc0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002dc4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002dc8:	481f      	ldr	r0, [pc, #124]	; (24002e48 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dca:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002dce:	6050      	str	r0, [r2, #4]
}
24002dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
24002dd4:	4770      	bx	lr
24002dd6:	bf00      	nop
24002dd8:	20016b98 	.word	0x20016b98
24002ddc:	200050bc 	.word	0x200050bc
24002de0:	00000f41 	.word	0x00000f41
24002de4:	00001181 	.word	0x00001181
24002de8:	000013a1 	.word	0x000013a1
24002dec:	00000ca1 	.word	0x00000ca1
24002df0:	00001081 	.word	0x00001081
24002df4:	000011a1 	.word	0x000011a1
24002df8:	00000d01 	.word	0x00000d01
24002dfc:	000010a1 	.word	0x000010a1
24002e00:	000011e1 	.word	0x000011e1
24002e04:	00000d61 	.word	0x00000d61
24002e08:	000010c1 	.word	0x000010c1
24002e0c:	00001221 	.word	0x00001221
24002e10:	00000dc1 	.word	0x00000dc1
24002e14:	000010e1 	.word	0x000010e1
24002e18:	00001261 	.word	0x00001261
24002e1c:	00000e21 	.word	0x00000e21
24002e20:	00001101 	.word	0x00001101
24002e24:	000012a1 	.word	0x000012a1
24002e28:	00000e61 	.word	0x00000e61
24002e2c:	00001121 	.word	0x00001121
24002e30:	000012e1 	.word	0x000012e1
24002e34:	00000ea1 	.word	0x00000ea1
24002e38:	00001141 	.word	0x00001141
24002e3c:	00001321 	.word	0x00001321
24002e40:	00000ee1 	.word	0x00000ee1
24002e44:	00001161 	.word	0x00001161
24002e48:	00001361 	.word	0x00001361

24002e4c <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
24002e4c:	b410      	push	{r4}
	switch(LFOShape)
24002e4e:	2805      	cmp	r0, #5
24002e50:	d814      	bhi.n	24002e7c <setLFOShapes+0x30>
24002e52:	e8df f000 	tbb	[pc, r0]
24002e56:	2916      	.short	0x2916
24002e58:	03624f3c 	.word	0x03624f3c
			lfoSetters[i].setRate = &lfoSawSetRate;
			lfoSetters[i].setShape = &lfoSawSetShape;
			lfoSetters[i].setPhase = &lfoSawSetPhase;
			break;
		case PulseLFOShapeSet:
			lfoShapeTick[i] = &lfoPulseTick;
24002e5c:	4b38      	ldr	r3, [pc, #224]	; (24002f40 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e5e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
24002e62:	4c38      	ldr	r4, [pc, #224]	; (24002f44 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e64:	4a38      	ldr	r2, [pc, #224]	; (24002f48 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
24002e66:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e6a:	4c38      	ldr	r4, [pc, #224]	; (24002f4c <setLFOShapes+0x100>)
24002e6c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002e70:	4937      	ldr	r1, [pc, #220]	; (24002f50 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e72:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002e76:	4a37      	ldr	r2, [pc, #220]	; (24002f54 <setLFOShapes+0x108>)
24002e78:	e9c3 1201 	strd	r1, r2, [r3, #4]
			break;
	}
}
24002e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e80:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
24002e82:	4b2f      	ldr	r3, [pc, #188]	; (24002f40 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002e84:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24002e88:	4c33      	ldr	r4, [pc, #204]	; (24002f58 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002e8a:	4a2f      	ldr	r2, [pc, #188]	; (24002f48 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
24002e8c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002e90:	4c32      	ldr	r4, [pc, #200]	; (24002f5c <setLFOShapes+0x110>)
24002e92:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002e96:	4932      	ldr	r1, [pc, #200]	; (24002f60 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002e98:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002e9c:	4a31      	ldr	r2, [pc, #196]	; (24002f64 <setLFOShapes+0x118>)
24002e9e:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ea6:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24002ea8:	4b25      	ldr	r3, [pc, #148]	; (24002f40 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002eaa:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
24002eae:	4c2e      	ldr	r4, [pc, #184]	; (24002f68 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002eb0:	4a25      	ldr	r2, [pc, #148]	; (24002f48 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
24002eb2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002eb6:	4c2d      	ldr	r4, [pc, #180]	; (24002f6c <setLFOShapes+0x120>)
24002eb8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24002ebc:	492c      	ldr	r1, [pc, #176]	; (24002f70 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ebe:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24002ec2:	4a2c      	ldr	r2, [pc, #176]	; (24002f74 <setLFOShapes+0x128>)
24002ec4:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ecc:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
24002ece:	4b1c      	ldr	r3, [pc, #112]	; (24002f40 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002ed0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
24002ed4:	4c28      	ldr	r4, [pc, #160]	; (24002f78 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002ed6:	4a1c      	ldr	r2, [pc, #112]	; (24002f48 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
24002ed8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
24002edc:	4c27      	ldr	r4, [pc, #156]	; (24002f7c <setLFOShapes+0x130>)
24002ede:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
24002ee2:	4927      	ldr	r1, [pc, #156]	; (24002f80 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002ee4:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002ee8:	4a26      	ldr	r2, [pc, #152]	; (24002f84 <setLFOShapes+0x138>)
24002eea:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002eee:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ef2:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
24002ef4:	4b12      	ldr	r3, [pc, #72]	; (24002f40 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002ef6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
24002efa:	4c23      	ldr	r4, [pc, #140]	; (24002f88 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002efc:	4a12      	ldr	r2, [pc, #72]	; (24002f48 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
24002efe:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
24002f02:	4c22      	ldr	r4, [pc, #136]	; (24002f8c <setLFOShapes+0x140>)
24002f04:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
24002f08:	4921      	ldr	r1, [pc, #132]	; (24002f90 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002f0a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24002f0e:	4a21      	ldr	r2, [pc, #132]	; (24002f94 <setLFOShapes+0x148>)
24002f10:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f14:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f18:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawTick;
24002f1a:	4b09      	ldr	r3, [pc, #36]	; (24002f40 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f1c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
24002f20:	4c1d      	ldr	r4, [pc, #116]	; (24002f98 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f22:	4a09      	ldr	r2, [pc, #36]	; (24002f48 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
24002f24:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f28:	4c1c      	ldr	r4, [pc, #112]	; (24002f9c <setLFOShapes+0x150>)
24002f2a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
24002f2e:	491c      	ldr	r1, [pc, #112]	; (24002fa0 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f30:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002f34:	4a1b      	ldr	r2, [pc, #108]	; (24002fa4 <setLFOShapes+0x158>)
24002f36:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f3e:	4770      	bx	lr
24002f40:	20005374 	.word	0x20005374
24002f44:	00001e01 	.word	0x00001e01
24002f48:	20018ccc 	.word	0x20018ccc
24002f4c:	00001ec1 	.word	0x00001ec1
24002f50:	00002041 	.word	0x00002041
24002f54:	00001f81 	.word	0x00001f81
24002f58:	00001d61 	.word	0x00001d61
24002f5c:	00001e41 	.word	0x00001e41
24002f60:	00001fc1 	.word	0x00001fc1
24002f64:	00001f01 	.word	0x00001f01
24002f68:	00001d41 	.word	0x00001d41
24002f6c:	00001e21 	.word	0x00001e21
24002f70:	00001fa1 	.word	0x00001fa1
24002f74:	00001ee1 	.word	0x00001ee1
24002f78:	00001d81 	.word	0x00001d81
24002f7c:	00001e61 	.word	0x00001e61
24002f80:	00001fe1 	.word	0x00001fe1
24002f84:	00001f21 	.word	0x00001f21
24002f88:	00001da1 	.word	0x00001da1
24002f8c:	00001e81 	.word	0x00001e81
24002f90:	00002001 	.word	0x00002001
24002f94:	00001f41 	.word	0x00001f41
24002f98:	00001dc1 	.word	0x00001dc1
24002f9c:	00001ea1 	.word	0x00001ea1
24002fa0:	00002021 	.word	0x00002021
24002fa4:	00001f61 	.word	0x00001f61

24002fa8 <main>:
{
24002fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002fac:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24002fae:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24002fb0:	2604      	movs	r6, #4
{
24002fb2:	ed2d 8b02 	vpush	{d8}
24002fb6:	b091      	sub	sp, #68	; 0x44
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002fb8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24002fbc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_MPU_Disable();
24002fc0:	f001 fc10 	bl	240047e4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24002fc4:	f248 731f 	movw	r3, #34591	; 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002fc8:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24002fca:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24002fce:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
24002fd2:	f240 1301 	movw	r3, #257	; 0x101
24002fd6:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002fd8:	f001 fc22 	bl	24004820 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
24002fdc:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24002fe0:	f8df c3c8 	ldr.w	ip, [pc, #968]	; 240033ac <main+0x404>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002fe4:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24002fe6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x024000000;
24002fea:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24002fec:	4bca      	ldr	r3, [pc, #808]	; (24003318 <main+0x370>)
24002fee:	e9cd c30c 	strd	ip, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002ff2:	f001 fc15 	bl	24004820 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24002ff6:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002ff8:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
24002ffa:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24002ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x24040000;
24003002:	4bc6      	ldr	r3, [pc, #792]	; (2400331c <main+0x374>)
24003004:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003006:	f001 fc0b 	bl	24004820 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
2400300a:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400300c:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
2400300e:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24003012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x30000000;
24003016:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
2400301a:	f8ad 5035 	strh.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.BaseAddress = 0x30000000;
2400301e:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24003020:	230c      	movs	r3, #12
24003022:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003026:	f001 fbfb 	bl	24004820 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30002000;
2400302a:	4bbd      	ldr	r3, [pc, #756]	; (24003320 <main+0x378>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400302c:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
2400302e:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x30002000;
24003032:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003034:	2311      	movs	r3, #17
24003036:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
2400303a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400303e:	f8ad 3035 	strh.w	r3, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003042:	f001 fbed 	bl	24004820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24003046:	2305      	movs	r3, #5
  MPU_InitStruct.BaseAddress = 0x38000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003048:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
2400304a:	f8ad 5035 	strh.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
2400304e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x38000000;
24003052:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
24003056:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24003058:	230f      	movs	r3, #15
2400305a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400305e:	f001 fbdf 	bl	24004820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress = 0x38800000;
24003062:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24003066:	2206      	movs	r2, #6
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003068:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
2400306a:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0x38800000;
2400306e:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24003070:	230b      	movs	r3, #11
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24003072:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24003076:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400307a:	f001 fbd1 	bl	24004820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
2400307e:	2107      	movs	r1, #7
  MPU_InitStruct.BaseAddress = 0xc0000000;
24003080:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24003084:	2319      	movs	r3, #25

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003086:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24003088:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0xc0000000;
2400308c:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
2400308e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003092:	f001 fbc5 	bl	24004820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24003096:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
24003098:	4ba2      	ldr	r3, [pc, #648]	; (24003324 <main+0x37c>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400309a:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
2400309c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x90040000;
240030a0:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240030a2:	f001 fbbd 	bl	24004820 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
240030a6:	4630      	mov	r0, r6
240030a8:	f001 fbaa 	bl	24004800 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
240030ac:	4a9e      	ldr	r2, [pc, #632]	; (24003328 <main+0x380>)
240030ae:	6953      	ldr	r3, [r2, #20]
240030b0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
240030b4:	d111      	bne.n	240030da <main+0x132>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
240030b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030ba:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
240030be:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
240030c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
240030ca:	6953      	ldr	r3, [r2, #20]
240030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240030d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
240030d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030d6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
240030da:	4893      	ldr	r0, [pc, #588]	; (24003328 <main+0x380>)
240030dc:	6943      	ldr	r3, [r0, #20]
240030de:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
240030e2:	d124      	bne.n	2400312e <main+0x186>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
240030e4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
240030e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
240030ec:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240030f0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
240030f4:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
240030f8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
240030fc:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240030fe:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24003102:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003104:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24003108:	3b01      	subs	r3, #1
2400310a:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400310c:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
24003110:	d1f8      	bne.n	24003104 <main+0x15c>
    } while(sets-- != 0U);
24003112:	3c20      	subs	r4, #32
24003114:	f114 0f20 	cmn.w	r4, #32
24003118:	d1f1      	bne.n	240030fe <main+0x156>
2400311a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
2400311e:	6943      	ldr	r3, [r0, #20]
24003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24003124:	6143      	str	r3, [r0, #20]
24003126:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
2400312a:	f3bf 8f6f 	isb	sy
  HAL_Init();
2400312e:	f001 fa8b 	bl	24004648 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
24003132:	b662      	cpsie	i
  SystemClock_Config();
24003134:	f7fe fff0 	bl	24002118 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003138:	f8df a274 	ldr.w	sl, [pc, #628]	; 240033b0 <main+0x408>
  PeriphCommonClock_Config();
2400313c:	f7ff f880 	bl	24002240 <PeriphCommonClock_Config>
  MX_GPIO_Init();
24003140:	f7fe fcda 	bl	24001af8 <MX_GPIO_Init>
  MX_DMA_Init();
24003144:	f7fe fbdc 	bl	24001900 <MX_DMA_Init>
  MX_BDMA_Init();
24003148:	f7fe fb16 	bl	24001778 <MX_BDMA_Init>
  MX_I2C2_Init();
2400314c:	f7fe fe9a 	bl	24001e84 <MX_I2C2_Init>
  MX_SAI1_Init();
24003150:	f000 fdfc 	bl	24003d4c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24003154:	f000 ff06 	bl	24003f64 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24003158:	f000 ff72 	bl	24004040 <MX_SPI1_Init>
  MX_I2C1_Init();
2400315c:	f7fe fe5a 	bl	24001e14 <MX_I2C1_Init>
  MX_FMC_Init();
24003160:	f7fe fc1a 	bl	24001998 <MX_FMC_Init>
  MX_FATFS_Init();
24003164:	f009 fc66 	bl	2400ca34 <MX_FATFS_Init>
  MX_SPI6_Init();
24003168:	f000 ff96 	bl	24004098 <MX_SPI6_Init>
  MX_RNG_Init();
2400316c:	f000 fdae 	bl	24003ccc <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24003174:	486d      	ldr	r0, [pc, #436]	; (2400332c <main+0x384>)
24003176:	f003 f8db 	bl	24006330 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
2400317a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
2400317e:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003180:	486a      	ldr	r0, [pc, #424]	; (2400332c <main+0x384>)
24003182:	f003 f8d5 	bl	24006330 <HAL_GPIO_ReadPin>
24003186:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24003188:	2104      	movs	r1, #4
2400318a:	4869      	ldr	r0, [pc, #420]	; (24003330 <main+0x388>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
2400318c:	00a4      	lsls	r4, r4, #2
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
2400318e:	f003 f8cf 	bl	24006330 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003192:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24003196:	4420      	add	r0, r4
24003198:	b2c4      	uxtb	r4, r0
2400319a:	f88a 4000 	strb.w	r4, [sl]
	if (boardNumber == 0)
2400319e:	2c00      	cmp	r4, #0
240031a0:	f000 853c 	beq.w	24003c1c <main+0xc74>
	HAL_Delay(500);
240031a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
240031a8:	f001 fa90 	bl	240046cc <HAL_Delay>
    if (boardNumber !=0)
240031ac:	f89a 3000 	ldrb.w	r3, [sl]
240031b0:	2b00      	cmp	r3, #0
240031b2:	f040 852b 	bne.w	24003c0c <main+0xc64>
   PWR->CR1 |= PWR_CR1_DBP;
240031b6:	4a5f      	ldr	r2, [pc, #380]	; (24003334 <main+0x38c>)
240031b8:	6813      	ldr	r3, [r2, #0]
240031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240031be:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
240031c0:	6813      	ldr	r3, [r2, #0]
240031c2:	05d9      	lsls	r1, r3, #23
240031c4:	d5fc      	bpl.n	240031c0 <main+0x218>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240031c6:	4b5c      	ldr	r3, [pc, #368]	; (24003338 <main+0x390>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240031c8:	2200      	movs	r2, #0
240031ca:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240031cc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
240031d0:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
240031d4:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
240031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240031dc:	4857      	ldr	r0, [pc, #348]	; (2400333c <main+0x394>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
240031e2:	9305      	str	r3, [sp, #20]
240031e4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240031e6:	f003 f8a9 	bl	2400633c <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
240031ea:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
240031ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
240031f2:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
240031f6:	4a4c      	ldr	r2, [pc, #304]	; (24003328 <main+0x380>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
240031f8:	4951      	ldr	r1, [pc, #324]	; (24003340 <main+0x398>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
240031fa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
240031fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24003202:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003206:	f8d1 3fb4 	ldr.w	r3, [r1, #4020]	; 0xfb4
2400320a:	07db      	lsls	r3, r3, #31
2400320c:	d502      	bpl.n	24003214 <main+0x26c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
2400320e:	4b4d      	ldr	r3, [pc, #308]	; (24003344 <main+0x39c>)
24003210:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24003214:	4b4a      	ldr	r3, [pc, #296]	; (24003340 <main+0x398>)
24003216:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
24003218:	4a4b      	ldr	r2, [pc, #300]	; (24003348 <main+0x3a0>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
2400321a:	2403      	movs	r4, #3
  DWT->CYCCNT = 0;
2400321c:	6059      	str	r1, [r3, #4]
  DWT->CTRL = 0x40000001;
2400321e:	601a      	str	r2, [r3, #0]
	  buffer[i] = 0;
24003220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003224:	4b49      	ldr	r3, [pc, #292]	; (2400334c <main+0x3a4>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003226:	4d42      	ldr	r5, [pc, #264]	; (24003330 <main+0x388>)
	  buffer[i] = 0;
24003228:	4618      	mov	r0, r3
2400322a:	f012 f925 	bl	24015478 <memset>
  buffer[15+112] = NUM_PARAMS;
2400322e:	229c      	movs	r2, #156	; 0x9c
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003230:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24003234:	ed9f 0a46 	vldr	s0, [pc, #280]	; 24003350 <main+0x3a8>
  buffer[15+112] = NUM_PARAMS;
24003238:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
2400323c:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003240:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
24003244:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003248:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+19+112] = 1;
2400324c:	2201      	movs	r2, #1
2400324e:	f880 21bb 	strb.w	r2, [r0, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24003252:	f64f 62fe 	movw	r2, #65278	; 0xfefe
24003256:	f8a0 21c1 	strh.w	r2, [r0, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
2400325a:	483e      	ldr	r0, [pc, #248]	; (24003354 <main+0x3ac>)
2400325c:	f00f fb6e 	bl	2401293c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24003260:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003264:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 24003358 <main+0x3b0>
24003268:	eddf 0a3c 	vldr	s1, [pc, #240]	; 2400335c <main+0x3b4>
2400326c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 24003360 <main+0x3b8>
24003270:	483c      	ldr	r0, [pc, #240]	; (24003364 <main+0x3bc>)
24003272:	f00f fb63 	bl	2401293c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003276:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
2400327a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
2400327e:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003282:	ed9f 0a37 	vldr	s0, [pc, #220]	; 24003360 <main+0x3b8>
24003286:	4838      	ldr	r0, [pc, #224]	; (24003368 <main+0x3c0>)
24003288:	f00f fb58 	bl	2401293c <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
2400328c:	2201      	movs	r2, #1
2400328e:	4628      	mov	r0, r5
24003290:	4611      	mov	r1, r2
24003292:	f003 f853 	bl	2400633c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003296:	200a      	movs	r0, #10
24003298:	f001 fa18 	bl	240046cc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
2400329c:	4628      	mov	r0, r5
2400329e:	2200      	movs	r2, #0
240032a0:	2101      	movs	r1, #1
240032a2:	f003 f84b 	bl	2400633c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
240032a6:	200a      	movs	r0, #10
240032a8:	f001 fa10 	bl	240046cc <HAL_Delay>
  for (int i = 0; i < 3; i++)
240032ac:	3c01      	subs	r4, #1
240032ae:	d1ed      	bne.n	2400328c <main+0x2e4>
  if (boardNumber == 0)
240032b0:	f89a 3000 	ldrb.w	r3, [sl]
240032b4:	2b00      	cmp	r3, #0
240032b6:	f000 84a5 	beq.w	24003c04 <main+0xc5c>
	  diskBusy = 1;
240032ba:	4b2c      	ldr	r3, [pc, #176]	; (2400336c <main+0x3c4>)
  specialModeMacroNames[2][7] = "NoiseVol      ";
240032bc:	243f      	movs	r4, #63	; 0x3f
  specialModeNames[0] = "PHYS STR1     ";
240032be:	4d2c      	ldr	r5, [pc, #176]	; (24003370 <main+0x3c8>)
	  diskBusy = 1;
240032c0:	461a      	mov	r2, r3
240032c2:	9302      	str	r3, [sp, #8]
240032c4:	2301      	movs	r3, #1
240032c6:	4f2b      	ldr	r7, [pc, #172]	; (24003374 <main+0x3cc>)
240032c8:	4e2b      	ldr	r6, [pc, #172]	; (24003378 <main+0x3d0>)
240032ca:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
240032cc:	f7ff fa96 	bl	240027fc <SDRAM_init>
  codec_init(&hi2c2);
240032d0:	482a      	ldr	r0, [pc, #168]	; (2400337c <main+0x3d4>)
240032d2:	f7fe fa6d 	bl	240017b0 <codec_init>
  audioInit();
240032d6:	f7fd f9c3 	bl	24000660 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
240032da:	4b29      	ldr	r3, [pc, #164]	; (24003380 <main+0x3d8>)
  specialModeMacroNames[0][0] = "TargetLev     ";
240032dc:	4a29      	ldr	r2, [pc, #164]	; (24003384 <main+0x3dc>)
  specialModeMacroNames[2][7] = "NoiseVol      ";
240032de:	2150      	movs	r1, #80	; 0x50
  specialModeNames[0] = "PHYS STR1     ";
240032e0:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][4] = "              ";
240032e2:	4b29      	ldr	r3, [pc, #164]	; (24003388 <main+0x3e0>)
  specialModeMacroNames[0][5] = "              ";
240032e4:	e9c2 3304 	strd	r3, r3, [r2, #16]
  specialModeMacroNames[0][7] = "              ";
240032e8:	e9c2 3306 	strd	r3, r3, [r2, #24]
  specialModeMacroNames[0][0] = "TargetLev     ";
240032ec:	4b27      	ldr	r3, [pc, #156]	; (2400338c <main+0x3e4>)
240032ee:	6013      	str	r3, [r2, #0]
  specialModeMacroNames[1][1] = "TargetLev     ";
240032f0:	6253      	str	r3, [r2, #36]	; 0x24
  specialModeMacroNames[0][1] = "LevSmooth     ";
240032f2:	4b27      	ldr	r3, [pc, #156]	; (24003390 <main+0x3e8>)
240032f4:	6053      	str	r3, [r2, #4]
  specialModeMacroNames[1][7] = "LevSmooth     ";
240032f6:	63d3      	str	r3, [r2, #60]	; 0x3c
  specialModeMacroNames[1][3] = "Decay         ";
240032f8:	4b26      	ldr	r3, [pc, #152]	; (24003394 <main+0x3ec>)
240032fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  specialModeMacroNames[2][3] = "Decay         ";
240032fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  specialModeMacroNames[1][5] = "Noise1        ";
240032fe:	4b26      	ldr	r3, [pc, #152]	; (24003398 <main+0x3f0>)
24003300:	6353      	str	r3, [r2, #52]	; 0x34
  specialModeMacroNames[2][0] = "Noise1        ";
24003302:	6413      	str	r3, [r2, #64]	; 0x40
  specialModeMacroNames[1][6] = "Noise2        ";
24003304:	4b25      	ldr	r3, [pc, #148]	; (2400339c <main+0x3f4>)
24003306:	6393      	str	r3, [r2, #56]	; 0x38
  specialModeMacroNames[2][1] = "Noise2        ";
24003308:	6453      	str	r3, [r2, #68]	; 0x44
  specialModeMacroNames[0][2] = "LevStrengt    ";
2400330a:	4b25      	ldr	r3, [pc, #148]	; (240033a0 <main+0x3f8>)
2400330c:	6093      	str	r3, [r2, #8]
  specialModeMacroNames[0][3] = "LevMode       ";
2400330e:	4b25      	ldr	r3, [pc, #148]	; (240033a4 <main+0x3fc>)
24003310:	60d3      	str	r3, [r2, #12]
  specialModeNames[1] = "PHYS STR2     ";
24003312:	4b25      	ldr	r3, [pc, #148]	; (240033a8 <main+0x400>)
24003314:	606b      	str	r3, [r5, #4]
24003316:	e04d      	b.n	240033b4 <main+0x40c>
24003318:	01010000 	.word	0x01010000
2400331c:	24040000 	.word	0x24040000
24003320:	30002000 	.word	0x30002000
24003324:	90040000 	.word	0x90040000
24003328:	e000ed00 	.word	0xe000ed00
2400332c:	58020400 	.word	0x58020400
24003330:	58020000 	.word	0x58020000
24003334:	58024800 	.word	0x58024800
24003338:	58024400 	.word	0x58024400
2400333c:	58020800 	.word	0x58020800
24003340:	e0001000 	.word	0xe0001000
24003344:	c5acce55 	.word	0xc5acce55
24003348:	40000001 	.word	0x40000001
2400334c:	300001c0 	.word	0x300001c0
24003350:	3c23d70a 	.word	0x3c23d70a
24003354:	2001ae98 	.word	0x2001ae98
24003358:	457a0000 	.word	0x457a0000
2400335c:	469c4000 	.word	0x469c4000
24003360:	00000000 	.word	0x00000000
24003364:	20014b98 	.word	0x20014b98
24003368:	20016ccc 	.word	0x20016ccc
2400336c:	20014b40 	.word	0x20014b40
24003370:	2001cef8 	.word	0x2001cef8
24003374:	30032000 	.word	0x30032000
24003378:	30032380 	.word	0x30032380
2400337c:	20014aa0 	.word	0x20014aa0
24003380:	24017df0 	.word	0x24017df0
24003384:	2001ce98 	.word	0x2001ce98
24003388:	24017e40 	.word	0x24017e40
2400338c:	24017e00 	.word	0x24017e00
24003390:	24017e10 	.word	0x24017e10
24003394:	24017e80 	.word	0x24017e80
24003398:	24017ea0 	.word	0x24017ea0
2400339c:	24017eb0 	.word	0x24017eb0
240033a0:	24017e20 	.word	0x24017e20
240033a4:	24017e30 	.word	0x24017e30
240033a8:	24017e50 	.word	0x24017e50
240033ac:	03010011 	.word	0x03010011
240033b0:	20014af5 	.word	0x20014af5
  specialModeMacroNames[1][0] = "FBLev On      ";
240033b4:	4b09      	ldr	r3, [pc, #36]	; (240033dc <main+0x434>)
240033b6:	6213      	str	r3, [r2, #32]
  specialModeMacroNames[1][2] = "PickPos       ";
240033b8:	4b09      	ldr	r3, [pc, #36]	; (240033e0 <main+0x438>)
240033ba:	6293      	str	r3, [r2, #40]	; 0x28
  specialModeMacroNames[1][4] = "Touch         ";
240033bc:	4b09      	ldr	r3, [pc, #36]	; (240033e4 <main+0x43c>)
240033be:	6313      	str	r3, [r2, #48]	; 0x30
  specialModeNames[2] = "ADDITIVE      ";
240033c0:	4b09      	ldr	r3, [pc, #36]	; (240033e8 <main+0x440>)
240033c2:	60ab      	str	r3, [r5, #8]
  specialModeMacroNames[2][2] = "Tone          ";
240033c4:	4b09      	ldr	r3, [pc, #36]	; (240033ec <main+0x444>)
240033c6:	6493      	str	r3, [r2, #72]	; 0x48
  specialModeMacroNames[2][4] = "Stretch       ";
240033c8:	4b09      	ldr	r3, [pc, #36]	; (240033f0 <main+0x448>)
240033ca:	6513      	str	r3, [r2, #80]	; 0x50
  specialModeMacroNames[2][5] = "RandDecy      ";
240033cc:	4b09      	ldr	r3, [pc, #36]	; (240033f4 <main+0x44c>)
240033ce:	6553      	str	r3, [r2, #84]	; 0x54
  specialModeMacroNames[2][6] = "RandGain      ";
240033d0:	4b09      	ldr	r3, [pc, #36]	; (240033f8 <main+0x450>)
240033d2:	6593      	str	r3, [r2, #88]	; 0x58
  specialModeMacroNames[2][7] = "NoiseVol      ";
240033d4:	4b09      	ldr	r3, [pc, #36]	; (240033fc <main+0x454>)
240033d6:	65d3      	str	r3, [r2, #92]	; 0x5c
240033d8:	e012      	b.n	24003400 <main+0x458>
240033da:	bf00      	nop
240033dc:	24017e60 	.word	0x24017e60
240033e0:	24017e70 	.word	0x24017e70
240033e4:	24017e90 	.word	0x24017e90
240033e8:	24017ec0 	.word	0x24017ec0
240033ec:	24017ed0 	.word	0x24017ed0
240033f0:	24017ee0 	.word	0x24017ee0
240033f4:	24017ef0 	.word	0x24017ef0
240033f8:	24017f00 	.word	0x24017f00
240033fc:	24017f10 	.word	0x24017f10
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003400:	f855 0b04 	ldr.w	r0, [r5], #4
24003404:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (int i = 0; i < 3; i++)
24003408:	3c01      	subs	r4, #1
2400340a:	3220      	adds	r2, #32
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400340c:	f807 1013 	strb.w	r1, [r7, r3, lsl #1]
24003410:	eb07 0143 	add.w	r1, r7, r3, lsl #1
24003414:	f890 c001 	ldrb.w	ip, [r0, #1]
  for (int i = 0; i < 3; i++)
24003418:	2c3c      	cmp	r4, #60	; 0x3c
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400341a:	f881 c001 	strb.w	ip, [r1, #1]
2400341e:	f890 c002 	ldrb.w	ip, [r0, #2]
24003422:	f881 c002 	strb.w	ip, [r1, #2]
24003426:	f890 c003 	ldrb.w	ip, [r0, #3]
2400342a:	f881 c003 	strb.w	ip, [r1, #3]
2400342e:	f890 c004 	ldrb.w	ip, [r0, #4]
24003432:	f881 c004 	strb.w	ip, [r1, #4]
24003436:	f890 c005 	ldrb.w	ip, [r0, #5]
2400343a:	f881 c005 	strb.w	ip, [r1, #5]
2400343e:	f890 c006 	ldrb.w	ip, [r0, #6]
24003442:	f881 c006 	strb.w	ip, [r1, #6]
24003446:	f890 c007 	ldrb.w	ip, [r0, #7]
2400344a:	f881 c007 	strb.w	ip, [r1, #7]
2400344e:	f890 c008 	ldrb.w	ip, [r0, #8]
24003452:	f881 c008 	strb.w	ip, [r1, #8]
24003456:	f890 c009 	ldrb.w	ip, [r0, #9]
2400345a:	f881 c009 	strb.w	ip, [r1, #9]
2400345e:	f890 c00a 	ldrb.w	ip, [r0, #10]
24003462:	f881 c00a 	strb.w	ip, [r1, #10]
24003466:	f890 c00b 	ldrb.w	ip, [r0, #11]
2400346a:	f881 c00b 	strb.w	ip, [r1, #11]
2400346e:	f890 c00c 	ldrb.w	ip, [r0, #12]
24003472:	f881 c00c 	strb.w	ip, [r1, #12]
24003476:	7b40      	ldrb	r0, [r0, #13]
24003478:	7348      	strb	r0, [r1, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
2400347a:	ea4f 1003 	mov.w	r0, r3, lsl #4
2400347e:	f852 1c20 	ldr.w	r1, [r2, #-32]
24003482:	eb06 1303 	add.w	r3, r6, r3, lsl #4
24003486:	f891 c000 	ldrb.w	ip, [r1]
2400348a:	f806 c000 	strb.w	ip, [r6, r0]
2400348e:	7848      	ldrb	r0, [r1, #1]
24003490:	7058      	strb	r0, [r3, #1]
24003492:	7888      	ldrb	r0, [r1, #2]
24003494:	7098      	strb	r0, [r3, #2]
24003496:	78c8      	ldrb	r0, [r1, #3]
24003498:	70d8      	strb	r0, [r3, #3]
2400349a:	7908      	ldrb	r0, [r1, #4]
2400349c:	7118      	strb	r0, [r3, #4]
2400349e:	7948      	ldrb	r0, [r1, #5]
240034a0:	7158      	strb	r0, [r3, #5]
240034a2:	7988      	ldrb	r0, [r1, #6]
240034a4:	7198      	strb	r0, [r3, #6]
240034a6:	79c8      	ldrb	r0, [r1, #7]
240034a8:	71d8      	strb	r0, [r3, #7]
240034aa:	7a08      	ldrb	r0, [r1, #8]
240034ac:	7218      	strb	r0, [r3, #8]
240034ae:	7a48      	ldrb	r0, [r1, #9]
240034b0:	7258      	strb	r0, [r3, #9]
240034b2:	7a88      	ldrb	r0, [r1, #10]
240034b4:	7298      	strb	r0, [r3, #10]
240034b6:	7ac8      	ldrb	r0, [r1, #11]
240034b8:	72d8      	strb	r0, [r3, #11]
240034ba:	7b08      	ldrb	r0, [r1, #12]
240034bc:	7318      	strb	r0, [r3, #12]
240034be:	f852 0c1c 	ldr.w	r0, [r2, #-28]
240034c2:	7b49      	ldrb	r1, [r1, #13]
240034c4:	7359      	strb	r1, [r3, #13]
240034c6:	7801      	ldrb	r1, [r0, #0]
240034c8:	7399      	strb	r1, [r3, #14]
240034ca:	7841      	ldrb	r1, [r0, #1]
240034cc:	73d9      	strb	r1, [r3, #15]
240034ce:	7881      	ldrb	r1, [r0, #2]
240034d0:	7419      	strb	r1, [r3, #16]
240034d2:	78c1      	ldrb	r1, [r0, #3]
240034d4:	7459      	strb	r1, [r3, #17]
240034d6:	7901      	ldrb	r1, [r0, #4]
240034d8:	7499      	strb	r1, [r3, #18]
240034da:	7941      	ldrb	r1, [r0, #5]
240034dc:	74d9      	strb	r1, [r3, #19]
240034de:	7981      	ldrb	r1, [r0, #6]
240034e0:	7519      	strb	r1, [r3, #20]
240034e2:	79c1      	ldrb	r1, [r0, #7]
240034e4:	7559      	strb	r1, [r3, #21]
240034e6:	7a01      	ldrb	r1, [r0, #8]
240034e8:	7599      	strb	r1, [r3, #22]
240034ea:	7a41      	ldrb	r1, [r0, #9]
240034ec:	75d9      	strb	r1, [r3, #23]
240034ee:	7a81      	ldrb	r1, [r0, #10]
240034f0:	7619      	strb	r1, [r3, #24]
240034f2:	7ac1      	ldrb	r1, [r0, #11]
240034f4:	7659      	strb	r1, [r3, #25]
240034f6:	7b01      	ldrb	r1, [r0, #12]
240034f8:	7699      	strb	r1, [r3, #26]
240034fa:	f852 1c18 	ldr.w	r1, [r2, #-24]
240034fe:	7b40      	ldrb	r0, [r0, #13]
24003500:	76d8      	strb	r0, [r3, #27]
24003502:	7808      	ldrb	r0, [r1, #0]
24003504:	7718      	strb	r0, [r3, #28]
24003506:	7848      	ldrb	r0, [r1, #1]
24003508:	7758      	strb	r0, [r3, #29]
2400350a:	7888      	ldrb	r0, [r1, #2]
2400350c:	7798      	strb	r0, [r3, #30]
2400350e:	78c8      	ldrb	r0, [r1, #3]
24003510:	77d8      	strb	r0, [r3, #31]
24003512:	7908      	ldrb	r0, [r1, #4]
24003514:	f883 0020 	strb.w	r0, [r3, #32]
24003518:	7948      	ldrb	r0, [r1, #5]
2400351a:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
2400351e:	7988      	ldrb	r0, [r1, #6]
24003520:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
24003524:	79c8      	ldrb	r0, [r1, #7]
24003526:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
2400352a:	7a08      	ldrb	r0, [r1, #8]
2400352c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
24003530:	7a48      	ldrb	r0, [r1, #9]
24003532:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
24003536:	7a88      	ldrb	r0, [r1, #10]
24003538:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
2400353c:	7ac8      	ldrb	r0, [r1, #11]
2400353e:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
24003542:	7b08      	ldrb	r0, [r1, #12]
24003544:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
24003548:	f852 0c14 	ldr.w	r0, [r2, #-20]
2400354c:	7b49      	ldrb	r1, [r1, #13]
2400354e:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
24003552:	7801      	ldrb	r1, [r0, #0]
24003554:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
24003558:	7841      	ldrb	r1, [r0, #1]
2400355a:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
2400355e:	7881      	ldrb	r1, [r0, #2]
24003560:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
24003564:	78c1      	ldrb	r1, [r0, #3]
24003566:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
2400356a:	7901      	ldrb	r1, [r0, #4]
2400356c:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
24003570:	7941      	ldrb	r1, [r0, #5]
24003572:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
24003576:	7981      	ldrb	r1, [r0, #6]
24003578:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
2400357c:	79c1      	ldrb	r1, [r0, #7]
2400357e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
24003582:	7a01      	ldrb	r1, [r0, #8]
24003584:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
24003588:	7a41      	ldrb	r1, [r0, #9]
2400358a:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
2400358e:	7a81      	ldrb	r1, [r0, #10]
24003590:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
24003594:	7ac1      	ldrb	r1, [r0, #11]
24003596:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
2400359a:	7b01      	ldrb	r1, [r0, #12]
2400359c:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
240035a0:	f852 1c10 	ldr.w	r1, [r2, #-16]
240035a4:	7b40      	ldrb	r0, [r0, #13]
240035a6:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
240035aa:	7808      	ldrb	r0, [r1, #0]
240035ac:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
240035b0:	7848      	ldrb	r0, [r1, #1]
240035b2:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
240035b6:	7888      	ldrb	r0, [r1, #2]
240035b8:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
240035bc:	78c8      	ldrb	r0, [r1, #3]
240035be:	f883 003b 	strb.w	r0, [r3, #59]	; 0x3b
240035c2:	7908      	ldrb	r0, [r1, #4]
240035c4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
240035c8:	7948      	ldrb	r0, [r1, #5]
240035ca:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
240035ce:	7988      	ldrb	r0, [r1, #6]
240035d0:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
240035d4:	79c8      	ldrb	r0, [r1, #7]
240035d6:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
240035da:	7a08      	ldrb	r0, [r1, #8]
240035dc:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
240035e0:	7a48      	ldrb	r0, [r1, #9]
240035e2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
240035e6:	7a88      	ldrb	r0, [r1, #10]
240035e8:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
240035ec:	7ac8      	ldrb	r0, [r1, #11]
240035ee:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
240035f2:	7b08      	ldrb	r0, [r1, #12]
240035f4:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
240035f8:	f852 0c0c 	ldr.w	r0, [r2, #-12]
240035fc:	7b49      	ldrb	r1, [r1, #13]
240035fe:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
24003602:	7801      	ldrb	r1, [r0, #0]
24003604:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
24003608:	7841      	ldrb	r1, [r0, #1]
2400360a:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
2400360e:	7881      	ldrb	r1, [r0, #2]
24003610:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
24003614:	78c1      	ldrb	r1, [r0, #3]
24003616:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
2400361a:	7901      	ldrb	r1, [r0, #4]
2400361c:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
24003620:	7941      	ldrb	r1, [r0, #5]
24003622:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
24003626:	7981      	ldrb	r1, [r0, #6]
24003628:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
2400362c:	79c1      	ldrb	r1, [r0, #7]
2400362e:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
24003632:	7a01      	ldrb	r1, [r0, #8]
24003634:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
24003638:	7a41      	ldrb	r1, [r0, #9]
2400363a:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
2400363e:	7a81      	ldrb	r1, [r0, #10]
24003640:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
24003644:	7ac1      	ldrb	r1, [r0, #11]
24003646:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
2400364a:	7b01      	ldrb	r1, [r0, #12]
2400364c:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
24003650:	f852 1c08 	ldr.w	r1, [r2, #-8]
24003654:	7b40      	ldrb	r0, [r0, #13]
24003656:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
2400365a:	7808      	ldrb	r0, [r1, #0]
2400365c:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
24003660:	7848      	ldrb	r0, [r1, #1]
24003662:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
24003666:	7888      	ldrb	r0, [r1, #2]
24003668:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
2400366c:	78c8      	ldrb	r0, [r1, #3]
2400366e:	f883 0057 	strb.w	r0, [r3, #87]	; 0x57
24003672:	7908      	ldrb	r0, [r1, #4]
24003674:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
24003678:	7948      	ldrb	r0, [r1, #5]
2400367a:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
2400367e:	7988      	ldrb	r0, [r1, #6]
24003680:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
24003684:	79c8      	ldrb	r0, [r1, #7]
24003686:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
2400368a:	7a08      	ldrb	r0, [r1, #8]
2400368c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
24003690:	7a48      	ldrb	r0, [r1, #9]
24003692:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
24003696:	7a88      	ldrb	r0, [r1, #10]
24003698:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
2400369c:	7ac8      	ldrb	r0, [r1, #11]
2400369e:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
240036a2:	7b08      	ldrb	r0, [r1, #12]
240036a4:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
240036a8:	7b49      	ldrb	r1, [r1, #13]
240036aa:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
240036ae:	f852 1c04 	ldr.w	r1, [r2, #-4]
240036b2:	7808      	ldrb	r0, [r1, #0]
240036b4:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
240036b8:	7848      	ldrb	r0, [r1, #1]
240036ba:	f883 0063 	strb.w	r0, [r3, #99]	; 0x63
240036be:	7888      	ldrb	r0, [r1, #2]
240036c0:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
240036c4:	78c8      	ldrb	r0, [r1, #3]
240036c6:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
240036ca:	7908      	ldrb	r0, [r1, #4]
240036cc:	f883 0066 	strb.w	r0, [r3, #102]	; 0x66
240036d0:	7948      	ldrb	r0, [r1, #5]
240036d2:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
240036d6:	7988      	ldrb	r0, [r1, #6]
240036d8:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
240036dc:	79c8      	ldrb	r0, [r1, #7]
240036de:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
240036e2:	7a08      	ldrb	r0, [r1, #8]
240036e4:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
240036e8:	7a48      	ldrb	r0, [r1, #9]
240036ea:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
240036ee:	7a88      	ldrb	r0, [r1, #10]
240036f0:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
240036f4:	7ac8      	ldrb	r0, [r1, #11]
240036f6:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
240036fa:	7b08      	ldrb	r0, [r1, #12]
240036fc:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
24003700:	7b49      	ldrb	r1, [r1, #13]
24003702:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  for (int i = 0; i < 3; i++)
24003706:	d002      	beq.n	2400370e <main+0x766>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003708:	682b      	ldr	r3, [r5, #0]
2400370a:	7819      	ldrb	r1, [r3, #0]
2400370c:	e678      	b.n	24003400 <main+0x458>
    HAL_SPI_Receive_DMA(&hspi6, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
2400370e:	2234      	movs	r2, #52	; 0x34
24003710:	49a2      	ldr	r1, [pc, #648]	; (2400399c <main+0x9f4>)
24003712:	48a3      	ldr	r0, [pc, #652]	; (240039a0 <main+0x9f8>)
24003714:	f007 faf2 	bl	2400acfc <HAL_SPI_Receive_DMA>
    HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24003718:	4aa2      	ldr	r2, [pc, #648]	; (240039a4 <main+0x9fc>)
2400371a:	2340      	movs	r3, #64	; 0x40
2400371c:	48a2      	ldr	r0, [pc, #648]	; (240039a8 <main+0xa00>)
	  if (rand > TWO_TO_31)
2400371e:	eddf 8aa3 	vldr	s17, [pc, #652]	; 240039ac <main+0xa04>
    HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24003722:	18d1      	adds	r1, r2, r3
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003724:	ed9f 8aa2 	vldr	s16, [pc, #648]	; 240039b0 <main+0xa08>
    HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24003728:	f007 fbc8 	bl	2400aebc <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
2400372c:	49a1      	ldr	r1, [pc, #644]	; (240039b4 <main+0xa0c>)
2400372e:	48a2      	ldr	r0, [pc, #648]	; (240039b8 <main+0xa10>)
24003730:	4ca2      	ldr	r4, [pc, #648]	; (240039bc <main+0xa14>)
24003732:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 24003a08 <main+0xa60>
24003736:	4ea2      	ldr	r6, [pc, #648]	; (240039c0 <main+0xa18>)
24003738:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 24003a0c <main+0xa64>
2400373c:	4da1      	ldr	r5, [pc, #644]	; (240039c4 <main+0xa1c>)
2400373e:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 24003a10 <main+0xa68>
24003742:	f7fd fff9 	bl	24001738 <audioStart>
24003746:	e028      	b.n	2400379a <main+0x7f2>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24003748:	e9d6 2300 	ldrd	r2, r3, [r6]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
2400374c:	2180      	movs	r1, #128	; 0x80
2400374e:	489e      	ldr	r0, [pc, #632]	; (240039c8 <main+0xa20>)
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24003750:	431a      	orrs	r2, r3
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
24003752:	bf18      	it	ne
24003754:	2201      	movne	r2, #1
24003756:	f002 fdf1 	bl	2400633c <HAL_GPIO_WritePin>
	  if (firmwareUpdateRequested)
2400375a:	f899 3000 	ldrb.w	r3, [r9]
2400375e:	2b00      	cmp	r3, #0
24003760:	d13e      	bne.n	240037e0 <main+0x838>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24003762:	a90a      	add	r1, sp, #40	; 0x28
24003764:	4899      	ldr	r0, [pc, #612]	; (240039cc <main+0xa24>)
24003766:	f005 fdef 	bl	24009348 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
2400376a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
2400376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24003772:	eef4 7ae8 	vcmpe.f32	s15, s17
24003776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400377a:	dd03      	ble.n	24003784 <main+0x7dc>
		  myTestInt++;
2400377c:	4a94      	ldr	r2, [pc, #592]	; (240039d0 <main+0xa28>)
2400377e:	6813      	ldr	r3, [r2, #0]
24003780:	3301      	adds	r3, #1
24003782:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003784:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24003788:	782b      	ldrb	r3, [r5, #0]
2400378a:	1c5a      	adds	r2, r3, #1
2400378c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
24003790:	eea7 7a88 	vfma.f32	s14, s15, s16
24003794:	702a      	strb	r2, [r5, #0]
24003796:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
2400379a:	f89a 3000 	ldrb.w	r3, [sl]
2400379e:	b953      	cbnz	r3, 240037b6 <main+0x80e>
		  if (presetWaitingToLoad > 0)
240037a0:	4b8c      	ldr	r3, [pc, #560]	; (240039d4 <main+0xa2c>)
240037a2:	6819      	ldr	r1, [r3, #0]
240037a4:	2900      	cmp	r1, #0
240037a6:	d064      	beq.n	24003872 <main+0x8ca>
			  if (!i2cSending)
240037a8:	4b8b      	ldr	r3, [pc, #556]	; (240039d8 <main+0xa30>)
240037aa:	781b      	ldrb	r3, [r3, #0]
240037ac:	f003 07ff 	and.w	r7, r3, #255	; 0xff
240037b0:	2b00      	cmp	r3, #0
240037b2:	f000 809f 	beq.w	240038f4 <main+0x94c>
	  if (presetWaitingToParse > 0)
240037b6:	f8d8 3000 	ldr.w	r3, [r8]
240037ba:	2b00      	cmp	r3, #0
240037bc:	d0c4      	beq.n	24003748 <main+0x7a0>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
240037be:	2201      	movs	r2, #1
240037c0:	2180      	movs	r1, #128	; 0x80
240037c2:	4886      	ldr	r0, [pc, #536]	; (240039dc <main+0xa34>)
240037c4:	f002 fdba 	bl	2400633c <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
240037c8:	4b85      	ldr	r3, [pc, #532]	; (240039e0 <main+0xa38>)
240037ca:	f8d8 0000 	ldr.w	r0, [r8]
240037ce:	7819      	ldrb	r1, [r3, #0]
240037d0:	f029 ff7e 	bl	2402d6d0 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
240037d4:	2200      	movs	r2, #0
240037d6:	2180      	movs	r1, #128	; 0x80
240037d8:	4880      	ldr	r0, [pc, #512]	; (240039dc <main+0xa34>)
240037da:	f002 fdaf 	bl	2400633c <HAL_GPIO_WritePin>
240037de:	e7b3      	b.n	24003748 <main+0x7a0>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240037e0:	2201      	movs	r2, #1
240037e2:	4879      	ldr	r0, [pc, #484]	; (240039c8 <main+0xa20>)
  __IO uint8_t status = SD_PRESENT;
240037e4:	4617      	mov	r7, r2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240037e6:	4611      	mov	r1, r2
240037e8:	f002 fda8 	bl	2400633c <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
240037ec:	f88d 7013 	strb.w	r7, [sp, #19]
  return status;
240037f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	if(BSP_SD_IsDetected())
240037f4:	b39b      	cbz	r3, 2400385e <main+0x8b6>
			audioOutBuffer[i] = 0;
240037f6:	2300      	movs	r3, #0
			audioOutBuffer[i + 1] = 0;
240037f8:	e9c4 3300 	strd	r3, r3, [r4]
240037fc:	e9c4 3302 	strd	r3, r3, [r4, #8]
24003800:	e9c4 3304 	strd	r3, r3, [r4, #16]
24003804:	e9c4 3306 	strd	r3, r3, [r4, #24]
24003808:	e9c4 3308 	strd	r3, r3, [r4, #32]
2400380c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
24003810:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
24003814:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
24003818:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
2400381c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
24003820:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
24003824:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
24003828:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
2400382c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
24003830:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
24003834:	e9c4 331e 	strd	r3, r3, [r4, #120]	; 0x78
		diskBusy = 1;
24003838:	9a02      	ldr	r2, [sp, #8]
		disk_initialize(0);
2400383a:	4618      	mov	r0, r3
		diskBusy = 1;
2400383c:	7017      	strb	r7, [r2, #0]
		loadFailed = 0;
2400383e:	4a69      	ldr	r2, [pc, #420]	; (240039e4 <main+0xa3c>)
24003840:	7013      	strb	r3, [r2, #0]
		disk_initialize(0);
24003842:	f009 f9e1 	bl	2400cc08 <disk_initialize>
	    disk_status(0);
24003846:	2300      	movs	r3, #0
24003848:	4618      	mov	r0, r3
2400384a:	f009 f9d3 	bl	2400cbf4 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400384e:	463a      	mov	r2, r7
24003850:	4965      	ldr	r1, [pc, #404]	; (240039e8 <main+0xa40>)
24003852:	4866      	ldr	r0, [pc, #408]	; (240039ec <main+0xa44>)
24003854:	f00b fbd0 	bl	2400eff8 <f_mount>
24003858:	2800      	cmp	r0, #0
2400385a:	f000 80db 	beq.w	24003a14 <main+0xa6c>
	firmwareUpdateRequested = 0;
2400385e:	2200      	movs	r2, #0
	diskBusy = 0;
24003860:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003862:	2101      	movs	r1, #1
24003864:	4858      	ldr	r0, [pc, #352]	; (240039c8 <main+0xa20>)
	firmwareUpdateRequested = 0;
24003866:	f889 2000 	strb.w	r2, [r9]
	diskBusy = 0;
2400386a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
2400386c:	f002 fd66 	bl	2400633c <HAL_GPIO_WritePin>
}
24003870:	e777      	b.n	24003762 <main+0x7ba>
		  else if (presetWaitingToWrite > 0)
24003872:	4b5f      	ldr	r3, [pc, #380]	; (240039f0 <main+0xa48>)
24003874:	681b      	ldr	r3, [r3, #0]
24003876:	2b00      	cmp	r3, #0
24003878:	d09d      	beq.n	240037b6 <main+0x80e>
				  writePresetToSDCard(presetWaitingToWrite);
2400387a:	4b5d      	ldr	r3, [pc, #372]	; (240039f0 <main+0xa48>)
2400387c:	681f      	ldr	r7, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
2400387e:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
24003880:	2280      	movs	r2, #128	; 0x80
24003882:	4620      	mov	r0, r4
24003884:	f011 fdf8 	bl	24015478 <memset>
  __IO uint8_t status = SD_PRESENT;
24003888:	2301      	movs	r3, #1
2400388a:	f88d 3012 	strb.w	r3, [sp, #18]
  return status;
2400388e:	f89d 2012 	ldrb.w	r2, [sp, #18]
	if(BSP_SD_IsDetected())
24003892:	b342      	cbz	r2, 240038e6 <main+0x93e>
				diskBusy = 1;
24003894:	9a02      	ldr	r2, [sp, #8]
24003896:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24003898:	4a56      	ldr	r2, [pc, #344]	; (240039f4 <main+0xa4c>)
2400389a:	7813      	ldrb	r3, [r2, #0]
2400389c:	2b63      	cmp	r3, #99	; 0x63
2400389e:	d901      	bls.n	240038a4 <main+0x8fc>
			        presetNumberToSave = 99;
240038a0:	2363      	movs	r3, #99	; 0x63
240038a2:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
240038a4:	4b53      	ldr	r3, [pc, #332]	; (240039f4 <main+0xa4c>)
240038a6:	220a      	movs	r2, #10
240038a8:	a907      	add	r1, sp, #28
240038aa:	7818      	ldrb	r0, [r3, #0]
240038ac:	f011 fdd4 	bl	24015458 <itoa>
				int len = ((strlen(charBuf)));
240038b0:	a807      	add	r0, sp, #28
240038b2:	f7fc fd11 	bl	240002d8 <strlen>
				if (len == 1)
240038b6:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240038b8:	4602      	mov	r2, r0
				if (len == 1)
240038ba:	f000 8123 	beq.w	24003b04 <main+0xb5c>
					strcat(charBuf, ".ebp");
240038be:	494e      	ldr	r1, [pc, #312]	; (240039f8 <main+0xa50>)
240038c0:	ab07      	add	r3, sp, #28
240038c2:	6808      	ldr	r0, [r1, #0]
240038c4:	7909      	ldrb	r1, [r1, #4]
240038c6:	5098      	str	r0, [r3, r2]
240038c8:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
240038ca:	a80a      	add	r0, sp, #40	; 0x28
240038cc:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
240038ce:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
240038d0:	a907      	add	r1, sp, #28
240038d2:	f011 fdc3 	bl	2401545c <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
240038d6:	220a      	movs	r2, #10
240038d8:	a90a      	add	r1, sp, #40	; 0x28
240038da:	4848      	ldr	r0, [pc, #288]	; (240039fc <main+0xa54>)
240038dc:	f00b fbde 	bl	2400f09c <f_open>
240038e0:	2800      	cmp	r0, #0
240038e2:	f000 816e 	beq.w	24003bc2 <main+0xc1a>
	presetWaitingToWrite = 0;
240038e6:	2300      	movs	r3, #0
240038e8:	4a41      	ldr	r2, [pc, #260]	; (240039f0 <main+0xa48>)
240038ea:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
240038ec:	9a02      	ldr	r2, [sp, #8]
240038ee:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
240038f0:	b662      	cpsie	i
}
240038f2:	e760      	b.n	240037b6 <main+0x80e>
				  checkForSDCardPreset(presetNumberToLoad);
240038f4:	4b3a      	ldr	r3, [pc, #232]	; (240039e0 <main+0xa38>)
	prevVoice = numberToLoad;
240038f6:	4a42      	ldr	r2, [pc, #264]	; (24003a00 <main+0xa58>)
				  checkForSDCardPreset(presetNumberToLoad);
240038f8:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
240038fa:	4833      	ldr	r0, [pc, #204]	; (240039c8 <main+0xa20>)
				  checkForSDCardPreset(presetNumberToLoad);
240038fc:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
240038fe:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
24003900:	4a40      	ldr	r2, [pc, #256]	; (24003a04 <main+0xa5c>)
				  checkForSDCardPreset(presetNumberToLoad);
24003902:	9303      	str	r3, [sp, #12]
	voice = numberToLoad;
24003904:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003906:	2201      	movs	r2, #1
24003908:	4611      	mov	r1, r2
2400390a:	f002 fd17 	bl	2400633c <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
2400390e:	2301      	movs	r3, #1
24003910:	f88d 3011 	strb.w	r3, [sp, #17]
  return status;
24003914:	f89d 2011 	ldrb.w	r2, [sp, #17]
	if(BSP_SD_IsDetected())
24003918:	b3a2      	cbz	r2, 24003984 <main+0x9dc>
		disk_initialize(0);
2400391a:	4638      	mov	r0, r7
			audioOutBuffer[i + 1] = 0;
2400391c:	e9c4 7700 	strd	r7, r7, [r4]
24003920:	e9c4 7702 	strd	r7, r7, [r4, #8]
24003924:	e9c4 7704 	strd	r7, r7, [r4, #16]
24003928:	e9c4 7706 	strd	r7, r7, [r4, #24]
2400392c:	e9c4 7708 	strd	r7, r7, [r4, #32]
24003930:	e9c4 770a 	strd	r7, r7, [r4, #40]	; 0x28
24003934:	e9c4 770c 	strd	r7, r7, [r4, #48]	; 0x30
24003938:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
2400393c:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
24003940:	e9c4 7712 	strd	r7, r7, [r4, #72]	; 0x48
24003944:	e9c4 7714 	strd	r7, r7, [r4, #80]	; 0x50
24003948:	e9c4 7716 	strd	r7, r7, [r4, #88]	; 0x58
2400394c:	e9c4 7718 	strd	r7, r7, [r4, #96]	; 0x60
24003950:	e9c4 771a 	strd	r7, r7, [r4, #104]	; 0x68
24003954:	e9c4 771c 	strd	r7, r7, [r4, #112]	; 0x70
24003958:	e9c4 771e 	strd	r7, r7, [r4, #120]	; 0x78
		diskBusy = 1;
2400395c:	9a02      	ldr	r2, [sp, #8]
2400395e:	7013      	strb	r3, [r2, #0]
		loadFailed = 0;
24003960:	4b20      	ldr	r3, [pc, #128]	; (240039e4 <main+0xa3c>)
24003962:	701f      	strb	r7, [r3, #0]
		presetWaitingToLoad = 0;
24003964:	4b1b      	ldr	r3, [pc, #108]	; (240039d4 <main+0xa2c>)
24003966:	601f      	str	r7, [r3, #0]
		disk_initialize(0);
24003968:	f009 f94e 	bl	2400cc08 <disk_initialize>
	    disk_status(0);
2400396c:	4638      	mov	r0, r7
2400396e:	f009 f941 	bl	2400cbf4 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24003972:	2301      	movs	r3, #1
24003974:	491c      	ldr	r1, [pc, #112]	; (240039e8 <main+0xa40>)
24003976:	461a      	mov	r2, r3
24003978:	481c      	ldr	r0, [pc, #112]	; (240039ec <main+0xa44>)
2400397a:	f00b fb3d 	bl	2400eff8 <f_mount>
2400397e:	2800      	cmp	r0, #0
24003980:	f000 80d7 	beq.w	24003b32 <main+0xb8a>
		loadFailed = 1;
24003984:	2301      	movs	r3, #1
24003986:	4a17      	ldr	r2, [pc, #92]	; (240039e4 <main+0xa3c>)
24003988:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
2400398a:	2200      	movs	r2, #0
2400398c:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
2400398e:	2101      	movs	r1, #1
24003990:	480d      	ldr	r0, [pc, #52]	; (240039c8 <main+0xa20>)
	diskBusy = 0;
24003992:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003994:	f002 fcd2 	bl	2400633c <HAL_GPIO_WritePin>
	return found;
24003998:	e70d      	b.n	240037b6 <main+0x80e>
2400399a:	bf00      	nop
2400399c:	38000000 	.word	0x38000000
240039a0:	2001d3c8 	.word	0x2001d3c8
240039a4:	30000140 	.word	0x30000140
240039a8:	2001d328 	.word	0x2001d328
240039ac:	4f000000 	.word	0x4f000000
240039b0:	3000000d 	.word	0x3000000d
240039b4:	2001d010 	.word	0x2001d010
240039b8:	2001d0a8 	.word	0x2001d0a8
240039bc:	30000040 	.word	0x30000040
240039c0:	20014810 	.word	0x20014810
240039c4:	20014b06 	.word	0x20014b06
240039c8:	58020800 	.word	0x58020800
240039cc:	2001cf08 	.word	0x2001cf08
240039d0:	20019944 	.word	0x20019944
240039d4:	2001aa88 	.word	0x2001aa88
240039d8:	20016cc7 	.word	0x20016cc7
240039dc:	58020400 	.word	0x58020400
240039e0:	2001aa86 	.word	0x2001aa86
240039e4:	20018cfc 	.word	0x20018cfc
240039e8:	2001d8c8 	.word	0x2001d8c8
240039ec:	2001d468 	.word	0x2001d468
240039f0:	2001aa90 	.word	0x2001aa90
240039f4:	2001aa87 	.word	0x2001aa87
240039f8:	24017f20 	.word	0x24017f20
240039fc:	2001d69c 	.word	0x2001d69c
24003a00:	2000014c 	.word	0x2000014c
24003a04:	200148ec 	.word	0x200148ec
24003a08:	2001aa8c 	.word	0x2001aa8c
24003a0c:	20016ba8 	.word	0x20016ba8
24003a10:	2001aa94 	.word	0x2001aa94
			strcat(finalString, "brain.bin");
24003a14:	a807      	add	r0, sp, #28
24003a16:	f7fc fc5f 	bl	240002d8 <strlen>
24003a1a:	4684      	mov	ip, r0
24003a1c:	4889      	ldr	r0, [pc, #548]	; (24003c44 <main+0xc9c>)
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003a1e:	ab07      	add	r3, sp, #28
24003a20:	4a89      	ldr	r2, [pc, #548]	; (24003c48 <main+0xca0>)
			strcat(finalString, "brain.bin");
24003a22:	4607      	mov	r7, r0
24003a24:	eb03 0e0c 	add.w	lr, r3, ip
24003a28:	cf03      	ldmia	r7!, {r0, r1}
24003a2a:	9703      	str	r7, [sp, #12]
24003a2c:	f843 000c 	str.w	r0, [r3, ip]
24003a30:	9803      	ldr	r0, [sp, #12]
24003a32:	f8ce 1004 	str.w	r1, [lr, #4]
24003a36:	8801      	ldrh	r1, [r0, #0]
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003a38:	4884      	ldr	r0, [pc, #528]	; (24003c4c <main+0xca4>)
			strcat(finalString, "brain.bin");
24003a3a:	f8ae 1008 	strh.w	r1, [lr, #8]
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003a3e:	4984      	ldr	r1, [pc, #528]	; (24003c50 <main+0xca8>)
24003a40:	f00c f81c 	bl	2400fa7c <f_findfirst>
			if(res == FR_OK)
24003a44:	2800      	cmp	r0, #0
24003a46:	d037      	beq.n	24003ab8 <main+0xb10>
			strcat(finalString2, "pluck.bin");
24003a48:	a80a      	add	r0, sp, #40	; 0x28
24003a4a:	f7fc fc45 	bl	240002d8 <strlen>
24003a4e:	4684      	mov	ip, r0
24003a50:	4880      	ldr	r0, [pc, #512]	; (24003c54 <main+0xcac>)
			res = f_findfirst(&dir, &fno, SDPath, finalString2);
24003a52:	ab0a      	add	r3, sp, #40	; 0x28
24003a54:	4a7c      	ldr	r2, [pc, #496]	; (24003c48 <main+0xca0>)
			strcat(finalString2, "pluck.bin");
24003a56:	4607      	mov	r7, r0
24003a58:	eb03 0e0c 	add.w	lr, r3, ip
24003a5c:	cf03      	ldmia	r7!, {r0, r1}
24003a5e:	9703      	str	r7, [sp, #12]
24003a60:	f843 000c 	str.w	r0, [r3, ip]
24003a64:	9803      	ldr	r0, [sp, #12]
24003a66:	f8ce 1004 	str.w	r1, [lr, #4]
24003a6a:	8801      	ldrh	r1, [r0, #0]
			res = f_findfirst(&dir, &fno, SDPath, finalString2);
24003a6c:	4877      	ldr	r0, [pc, #476]	; (24003c4c <main+0xca4>)
			strcat(finalString2, "pluck.bin");
24003a6e:	f8ae 1008 	strh.w	r1, [lr, #8]
			res = f_findfirst(&dir, &fno, SDPath, finalString2);
24003a72:	4977      	ldr	r1, [pc, #476]	; (24003c50 <main+0xca8>)
24003a74:	f00c f802 	bl	2400fa7c <f_findfirst>
			if(res == FR_OK)
24003a78:	2800      	cmp	r0, #0
24003a7a:	f47f aef0 	bne.w	2400385e <main+0x8b6>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003a7e:	2211      	movs	r2, #17
24003a80:	4975      	ldr	r1, [pc, #468]	; (24003c58 <main+0xcb0>)
24003a82:	4876      	ldr	r0, [pc, #472]	; (24003c5c <main+0xcb4>)
24003a84:	f00b fb0a 	bl	2400f09c <f_open>
24003a88:	4607      	mov	r7, r0
24003a8a:	2800      	cmp	r0, #0
24003a8c:	f47f aee7 	bne.w	2400385e <main+0x8b6>
					brainFirmwareSize = f_size(&SDFile);
24003a90:	4b72      	ldr	r3, [pc, #456]	; (24003c5c <main+0xcb4>)
24003a92:	4a73      	ldr	r2, [pc, #460]	; (24003c60 <main+0xcb8>)
24003a94:	68db      	ldr	r3, [r3, #12]
					f_read(&SDFile, &pluckFirmwareBuffer, pluckFirmwareSize, &bytesRead);
24003a96:	4973      	ldr	r1, [pc, #460]	; (24003c64 <main+0xcbc>)
					brainFirmwareSize = f_size(&SDFile);
24003a98:	6013      	str	r3, [r2, #0]
					f_read(&SDFile, &pluckFirmwareBuffer, pluckFirmwareSize, &bytesRead);
24003a9a:	ab06      	add	r3, sp, #24
24003a9c:	4a72      	ldr	r2, [pc, #456]	; (24003c68 <main+0xcc0>)
24003a9e:	486f      	ldr	r0, [pc, #444]	; (24003c5c <main+0xcb4>)
24003aa0:	6812      	ldr	r2, [r2, #0]
24003aa2:	f00b fc79 	bl	2400f398 <f_read>
					f_close(&SDFile);
24003aa6:	486d      	ldr	r0, [pc, #436]	; (24003c5c <main+0xcb4>)
24003aa8:	f00b fede 	bl	2400f868 <f_close>
					pluckFirmwareBufferIndex = 0;
24003aac:	4b6f      	ldr	r3, [pc, #444]	; (24003c6c <main+0xcc4>)
					foundPluckFirmware = 1;
24003aae:	4a70      	ldr	r2, [pc, #448]	; (24003c70 <main+0xcc8>)
					pluckFirmwareBufferIndex = 0;
24003ab0:	601f      	str	r7, [r3, #0]
					foundPluckFirmware = 1;
24003ab2:	2301      	movs	r3, #1
24003ab4:	7013      	strb	r3, [r2, #0]
					pluckFirmwareBufferIndex = 0;
24003ab6:	e6d2      	b.n	2400385e <main+0x8b6>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003ab8:	2211      	movs	r2, #17
24003aba:	4967      	ldr	r1, [pc, #412]	; (24003c58 <main+0xcb0>)
24003abc:	4867      	ldr	r0, [pc, #412]	; (24003c5c <main+0xcb4>)
24003abe:	f00b faed 	bl	2400f09c <f_open>
24003ac2:	2800      	cmp	r0, #0
24003ac4:	d1c0      	bne.n	24003a48 <main+0xaa0>
				    brainFirmwareSize = f_size(&SDFile);
24003ac6:	4b65      	ldr	r3, [pc, #404]	; (24003c5c <main+0xcb4>)
					f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003ac8:	496a      	ldr	r1, [pc, #424]	; (24003c74 <main+0xccc>)
				    brainFirmwareSize = f_size(&SDFile);
24003aca:	68da      	ldr	r2, [r3, #12]
24003acc:	4b64      	ldr	r3, [pc, #400]	; (24003c60 <main+0xcb8>)
					f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003ace:	4863      	ldr	r0, [pc, #396]	; (24003c5c <main+0xcb4>)
				    brainFirmwareSize = f_size(&SDFile);
24003ad0:	601a      	str	r2, [r3, #0]
					f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003ad2:	ab06      	add	r3, sp, #24
24003ad4:	f00b fc60 	bl	2400f398 <f_read>
					f_close(&SDFile);
24003ad8:	4860      	ldr	r0, [pc, #384]	; (24003c5c <main+0xcb4>)
24003ada:	f00b fec5 	bl	2400f868 <f_close>
					for (int i = 0; i< 700; i++)
24003ade:	4b66      	ldr	r3, [pc, #408]	; (24003c78 <main+0xcd0>)
24003ae0:	1c5a      	adds	r2, r3, #1
24003ae2:	f1c2 0001 	rsb	r0, r2, #1
24003ae6:	18c2      	adds	r2, r0, r3
						memoryTest[i] = brainFirmwareBuffer[i];
24003ae8:	4f64      	ldr	r7, [pc, #400]	; (24003c7c <main+0xcd4>)
24003aea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
24003aee:	54b9      	strb	r1, [r7, r2]
					for (int i = 0; i< 700; i++)
24003af0:	4a63      	ldr	r2, [pc, #396]	; (24003c80 <main+0xcd8>)
24003af2:	4293      	cmp	r3, r2
24003af4:	d1f7      	bne.n	24003ae6 <main+0xb3e>
					foundBrainFirmware = 1;
24003af6:	2301      	movs	r3, #1
24003af8:	4a62      	ldr	r2, [pc, #392]	; (24003c84 <main+0xcdc>)
24003afa:	7013      	strb	r3, [r2, #0]
					brainFirmwareBufferIndex = 0;
24003afc:	2300      	movs	r3, #0
24003afe:	4a62      	ldr	r2, [pc, #392]	; (24003c88 <main+0xce0>)
24003b00:	6013      	str	r3, [r2, #0]
24003b02:	e7a1      	b.n	24003a48 <main+0xaa0>
					finalString[2] = charBuf[1];
24003b04:	f89d 301d 	ldrb.w	r3, [sp, #29]
					strcat(finalString, ".ebp");
24003b08:	a80a      	add	r0, sp, #40	; 0x28
					finalString[2] = charBuf[1];
24003b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
					finalString[1] = charBuf[0];
24003b0e:	f89d 301c 	ldrb.w	r3, [sp, #28]
24003b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
					finalString[0] = '0';
24003b16:	2330      	movs	r3, #48	; 0x30
24003b18:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					strcat(finalString, ".ebp");
24003b1c:	f7fc fbdc 	bl	240002d8 <strlen>
24003b20:	4a5a      	ldr	r2, [pc, #360]	; (24003c8c <main+0xce4>)
24003b22:	4603      	mov	r3, r0
24003b24:	a90a      	add	r1, sp, #40	; 0x28
24003b26:	6810      	ldr	r0, [r2, #0]
24003b28:	7912      	ldrb	r2, [r2, #4]
24003b2a:	50c8      	str	r0, [r1, r3]
24003b2c:	440b      	add	r3, r1
24003b2e:	711a      	strb	r2, [r3, #4]
24003b30:	e6d1      	b.n	240038d6 <main+0x92e>
			itoa(numberToLoad, charBuf, 10);
24003b32:	220a      	movs	r2, #10
24003b34:	a907      	add	r1, sp, #28
24003b36:	9803      	ldr	r0, [sp, #12]
24003b38:	f011 fc8e 	bl	24015458 <itoa>
			int len = ((strlen(charBuf)));
24003b3c:	a807      	add	r0, sp, #28
24003b3e:	f7fc fbcb 	bl	240002d8 <strlen>
			if (len == 1)
24003b42:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24003b44:	4602      	mov	r2, r0
			if (len == 1)
24003b46:	d046      	beq.n	24003bd6 <main+0xc2e>
				strcat(charBuf, "*.ebp");
24003b48:	4951      	ldr	r1, [pc, #324]	; (24003c90 <main+0xce8>)
24003b4a:	ab07      	add	r3, sp, #28
24003b4c:	6808      	ldr	r0, [r1, #0]
24003b4e:	8889      	ldrh	r1, [r1, #4]
24003b50:	5098      	str	r0, [r3, r2]
24003b52:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24003b54:	a80a      	add	r0, sp, #40	; 0x28
24003b56:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
24003b58:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
24003b5a:	a907      	add	r1, sp, #28
24003b5c:	f011 fc7e 	bl	2401545c <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003b60:	ab0a      	add	r3, sp, #40	; 0x28
24003b62:	4a39      	ldr	r2, [pc, #228]	; (24003c48 <main+0xca0>)
24003b64:	493a      	ldr	r1, [pc, #232]	; (24003c50 <main+0xca8>)
24003b66:	4839      	ldr	r0, [pc, #228]	; (24003c4c <main+0xca4>)
24003b68:	f00b ff88 	bl	2400fa7c <f_findfirst>
			if(res == FR_OK)
24003b6c:	2800      	cmp	r0, #0
24003b6e:	f47f af09 	bne.w	24003984 <main+0x9dc>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003b72:	2211      	movs	r2, #17
24003b74:	4938      	ldr	r1, [pc, #224]	; (24003c58 <main+0xcb0>)
24003b76:	4839      	ldr	r0, [pc, #228]	; (24003c5c <main+0xcb4>)
24003b78:	f00b fa90 	bl	2400f09c <f_open>
24003b7c:	4607      	mov	r7, r0
24003b7e:	2800      	cmp	r0, #0
24003b80:	f47f af00 	bne.w	24003984 <main+0x9dc>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003b84:	4a35      	ldr	r2, [pc, #212]	; (24003c5c <main+0xcb4>)
24003b86:	ab06      	add	r3, sp, #24
24003b88:	4942      	ldr	r1, [pc, #264]	; (24003c94 <main+0xcec>)
24003b8a:	68d2      	ldr	r2, [r2, #12]
24003b8c:	4833      	ldr	r0, [pc, #204]	; (24003c5c <main+0xcb4>)
24003b8e:	f00b fc03 	bl	2400f398 <f_read>
					presetWaitingToParse = bytesRead;
24003b92:	9b06      	ldr	r3, [sp, #24]
					f_close(&SDFile);
24003b94:	4831      	ldr	r0, [pc, #196]	; (24003c5c <main+0xcb4>)
					presetWaitingToParse = bytesRead;
24003b96:	f8c8 3000 	str.w	r3, [r8]
					f_close(&SDFile);
24003b9a:	f00b fe65 	bl	2400f868 <f_close>
	  	  i2cSending = 1;
24003b9e:	2301      	movs	r3, #1
24003ba0:	4a3d      	ldr	r2, [pc, #244]	; (24003c98 <main+0xcf0>)
24003ba2:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003ba4:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24003ba6:	f242 7310 	movw	r3, #10000	; 0x2710
24003baa:	4a3a      	ldr	r2, [pc, #232]	; (24003c94 <main+0xcec>)
24003bac:	2144      	movs	r1, #68	; 0x44
24003bae:	483b      	ldr	r0, [pc, #236]	; (24003c9c <main+0xcf4>)
24003bb0:	9300      	str	r3, [sp, #0]
24003bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003bb6:	f002 fcef 	bl	24006598 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24003bba:	b662      	cpsie	i
	  	i2cSending = 0;
24003bbc:	4a36      	ldr	r2, [pc, #216]	; (24003c98 <main+0xcf0>)
24003bbe:	7017      	strb	r7, [r2, #0]
24003bc0:	e6e3      	b.n	2400398a <main+0x9e2>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24003bc2:	463a      	mov	r2, r7
24003bc4:	ab06      	add	r3, sp, #24
24003bc6:	4933      	ldr	r1, [pc, #204]	; (24003c94 <main+0xcec>)
24003bc8:	4824      	ldr	r0, [pc, #144]	; (24003c5c <main+0xcb4>)
24003bca:	f00b fd0b 	bl	2400f5e4 <f_write>
					f_close(&SDFile);
24003bce:	4823      	ldr	r0, [pc, #140]	; (24003c5c <main+0xcb4>)
24003bd0:	f00b fe4a 	bl	2400f868 <f_close>
24003bd4:	e687      	b.n	240038e6 <main+0x93e>
				finalString[2] = charBuf[1];
24003bd6:	f89d 301d 	ldrb.w	r3, [sp, #29]
				strcat(finalString, "*.ebp");
24003bda:	a80a      	add	r0, sp, #40	; 0x28
				finalString[2] = charBuf[1];
24003bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				finalString[1] = charBuf[0];
24003be0:	f89d 301c 	ldrb.w	r3, [sp, #28]
24003be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				finalString[0] = '0';
24003be8:	2330      	movs	r3, #48	; 0x30
24003bea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				strcat(finalString, "*.ebp");
24003bee:	f7fc fb73 	bl	240002d8 <strlen>
24003bf2:	4a27      	ldr	r2, [pc, #156]	; (24003c90 <main+0xce8>)
24003bf4:	4603      	mov	r3, r0
24003bf6:	a90a      	add	r1, sp, #40	; 0x28
24003bf8:	6810      	ldr	r0, [r2, #0]
24003bfa:	8892      	ldrh	r2, [r2, #4]
24003bfc:	50c8      	str	r0, [r1, r3]
24003bfe:	440b      	add	r3, r1
24003c00:	809a      	strh	r2, [r3, #4]
24003c02:	e7ad      	b.n	24003b60 <main+0xbb8>
	  getPresetNamesFromSDCard();
24003c04:	f7fe fb68 	bl	240022d8 <getPresetNamesFromSDCard>
	  diskBusy = 1;
24003c08:	f7ff bb57 	b.w	240032ba <main+0x312>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24003c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003c10:	4920      	ldr	r1, [pc, #128]	; (24003c94 <main+0xcec>)
24003c12:	4822      	ldr	r0, [pc, #136]	; (24003c9c <main+0xcf4>)
24003c14:	f002 fe8c 	bl	24006930 <HAL_I2C_Slave_Receive_IT>
24003c18:	f7ff bacd 	b.w	240031b6 <main+0x20e>
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003c20:	2301      	movs	r3, #1
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003c22:	a90a      	add	r1, sp, #40	; 0x28
24003c24:	481e      	ldr	r0, [pc, #120]	; (24003ca0 <main+0xcf8>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003c26:	940e      	str	r4, [sp, #56]	; 0x38
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003c28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003c2c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003c30:	f002 fa34 	bl	2400609c <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003c34:	4622      	mov	r2, r4
24003c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24003c3a:	4819      	ldr	r0, [pc, #100]	; (24003ca0 <main+0xcf8>)
24003c3c:	f002 fb7e 	bl	2400633c <HAL_GPIO_WritePin>
24003c40:	f7ff bab0 	b.w	240031a4 <main+0x1fc>
24003c44:	24017f28 	.word	0x24017f28
24003c48:	2001d8c8 	.word	0x2001d8c8
24003c4c:	20014b08 	.word	0x20014b08
24003c50:	20016bac 	.word	0x20016bac
24003c54:	24017f34 	.word	0x24017f34
24003c58:	20016bc2 	.word	0x20016bc2
24003c5c:	2001d69c 	.word	0x2001d69c
24003c60:	20014b00 	.word	0x20014b00
24003c64:	c3c00000 	.word	0xc3c00000
24003c68:	2001aa70 	.word	0x2001aa70
24003c6c:	2001aa6c 	.word	0x2001aa6c
24003c70:	20016cc5 	.word	0x20016cc5
24003c74:	c3e00000 	.word	0xc3e00000
24003c78:	c3dfffff 	.word	0xc3dfffff
24003c7c:	20019680 	.word	0x20019680
24003c80:	c3e002bb 	.word	0xc3e002bb
24003c84:	20016cc4 	.word	0x20016cc4
24003c88:	20014af8 	.word	0x20014af8
24003c8c:	24017f20 	.word	0x24017f20
24003c90:	24017de8 	.word	0x24017de8
24003c94:	300001c0 	.word	0x300001c0
24003c98:	20016cc7 	.word	0x20016cc7
24003c9c:	20014a4c 	.word	0x20014a4c
24003ca0:	58020400 	.word	0x58020400

24003ca4 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24003ca4:	2840      	cmp	r0, #64	; 0x40
24003ca6:	d000      	beq.n	24003caa <HAL_GPIO_EXTI_Callback+0x6>
24003ca8:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003caa:	4601      	mov	r1, r0
24003cac:	4804      	ldr	r0, [pc, #16]	; (24003cc0 <HAL_GPIO_EXTI_Callback+0x1c>)
{
24003cae:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003cb0:	f002 fb3e 	bl	24006330 <HAL_GPIO_ReadPin>
24003cb4:	b910      	cbnz	r0, 24003cbc <HAL_GPIO_EXTI_Callback+0x18>
    	firmwareUpdateRequested = 1;
24003cb6:	4b03      	ldr	r3, [pc, #12]	; (24003cc4 <HAL_GPIO_EXTI_Callback+0x20>)
24003cb8:	2201      	movs	r2, #1
24003cba:	701a      	strb	r2, [r3, #0]
}
24003cbc:	bd08      	pop	{r3, pc}
24003cbe:	bf00      	nop
24003cc0:	58020400 	.word	0x58020400
24003cc4:	20016ba8 	.word	0x20016ba8

24003cc8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24003cc8:	4770      	bx	lr
24003cca:	bf00      	nop

24003ccc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24003ccc:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24003cce:	4806      	ldr	r0, [pc, #24]	; (24003ce8 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003cd0:	2300      	movs	r3, #0
24003cd2:	4a06      	ldr	r2, [pc, #24]	; (24003cec <MX_RNG_Init+0x20>)
24003cd4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
24003cd8:	f005 faf4 	bl	240092c4 <HAL_RNG_Init>
24003cdc:	b900      	cbnz	r0, 24003ce0 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24003cde:	bd08      	pop	{r3, pc}
24003ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003ce4:	f7ff bff0 	b.w	24003cc8 <Error_Handler>
24003ce8:	2001cf08 	.word	0x2001cf08
24003cec:	48021800 	.word	0x48021800

24003cf0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24003cf0:	b510      	push	{r4, lr}
24003cf2:	b0b2      	sub	sp, #200	; 0xc8
24003cf4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003cf6:	22c0      	movs	r2, #192	; 0xc0
24003cf8:	2100      	movs	r1, #0
24003cfa:	a802      	add	r0, sp, #8
24003cfc:	f011 fbbc 	bl	24015478 <memset>
  if(rngHandle->Instance==RNG)
24003d00:	4b10      	ldr	r3, [pc, #64]	; (24003d44 <HAL_RNG_MspInit+0x54>)
24003d02:	6822      	ldr	r2, [r4, #0]
24003d04:	429a      	cmp	r2, r3
24003d06:	d001      	beq.n	24003d0c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24003d08:	b032      	add	sp, #200	; 0xc8
24003d0a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24003d10:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003d12:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003d18:	f004 f8ee 	bl	24007ef8 <HAL_RCCEx_PeriphCLKConfig>
24003d1c:	b970      	cbnz	r0, 24003d3c <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
24003d1e:	4b0a      	ldr	r3, [pc, #40]	; (24003d48 <HAL_RNG_MspInit+0x58>)
24003d20:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24003d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003d28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24003d2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003d34:	9301      	str	r3, [sp, #4]
24003d36:	9b01      	ldr	r3, [sp, #4]
}
24003d38:	b032      	add	sp, #200	; 0xc8
24003d3a:	bd10      	pop	{r4, pc}
      Error_Handler();
24003d3c:	f7ff ffc4 	bl	24003cc8 <Error_Handler>
24003d40:	e7ed      	b.n	24003d1e <HAL_RNG_MspInit+0x2e>
24003d42:	bf00      	nop
24003d44:	48021800 	.word	0x48021800
24003d48:	58024400 	.word	0x58024400

24003d4c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24003d4c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24003d4e:	4817      	ldr	r0, [pc, #92]	; (24003dac <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003d50:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24003d52:	4c17      	ldr	r4, [pc, #92]	; (24003db0 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24003d54:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003d56:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003d58:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
24003d5a:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003d5c:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003d60:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003d62:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003d64:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24003d68:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003d6c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003d70:	461a      	mov	r2, r3
24003d72:	f005 fcf9 	bl	24009768 <HAL_SAI_InitProtocol>
24003d76:	b990      	cbnz	r0, 24003d9e <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24003d78:	480e      	ldr	r0, [pc, #56]	; (24003db4 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003d7a:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003d7c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003d7e:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24003d80:	4c0d      	ldr	r4, [pc, #52]	; (24003db8 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003d82:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003d84:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003d86:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24003d88:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24003d8a:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24003d8c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003d90:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003d92:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003d96:	f005 fce7 	bl	24009768 <HAL_SAI_InitProtocol>
24003d9a:	b918      	cbnz	r0, 24003da4 <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24003d9c:	bd10      	pop	{r4, pc}
    Error_Handler();
24003d9e:	f7ff ff93 	bl	24003cc8 <Error_Handler>
24003da2:	e7e9      	b.n	24003d78 <MX_SAI1_Init+0x2c>
}
24003da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003da8:	f7ff bf8e 	b.w	24003cc8 <Error_Handler>
24003dac:	2001d010 	.word	0x2001d010
24003db0:	40015804 	.word	0x40015804
24003db4:	2001d0a8 	.word	0x2001d0a8
24003db8:	40015824 	.word	0x40015824
24003dbc:	00000000 	.word	0x00000000

24003dc0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
24003dc0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24003dc2:	4a5f      	ldr	r2, [pc, #380]	; (24003f40 <HAL_SAI_MspInit+0x180>)
{
24003dc4:	b08d      	sub	sp, #52	; 0x34
    if(saiHandle->Instance==SAI1_Block_A)
24003dc6:	6803      	ldr	r3, [r0, #0]
{
24003dc8:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
24003dca:	4293      	cmp	r3, r2
24003dcc:	d004      	beq.n	24003dd8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
24003dce:	4a5d      	ldr	r2, [pc, #372]	; (24003f44 <HAL_SAI_MspInit+0x184>)
24003dd0:	4293      	cmp	r3, r2
24003dd2:	d04f      	beq.n	24003e74 <HAL_SAI_MspInit+0xb4>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24003dd4:	b00d      	add	sp, #52	; 0x34
24003dd6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
24003dd8:	4b5b      	ldr	r3, [pc, #364]	; (24003f48 <HAL_SAI_MspInit+0x188>)
24003dda:	681a      	ldr	r2, [r3, #0]
24003ddc:	2a00      	cmp	r2, #0
24003dde:	f000 8093 	beq.w	24003f08 <HAL_SAI_MspInit+0x148>
    SAI1_client ++;
24003de2:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003de4:	2074      	movs	r0, #116	; 0x74
24003de6:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
24003de8:	4d58      	ldr	r5, [pc, #352]	; (24003f4c <HAL_SAI_MspInit+0x18c>)
    SAI1_client ++;
24003dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003dec:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003dee:	ed9f 7b52 	vldr	d7, [pc, #328]	; 24003f38 <HAL_SAI_MspInit+0x178>
24003df2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003df6:	a906      	add	r1, sp, #24
24003df8:	4855      	ldr	r0, [pc, #340]	; (24003f50 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003dfa:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003dfc:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003e00:	f002 f94c 	bl	2400609c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24003e04:	4953      	ldr	r1, [pc, #332]	; (24003f54 <HAL_SAI_MspInit+0x194>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003e06:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003e08:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003e0a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003e0c:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003e0e:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003e1a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24003e26:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24003e2a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003e2e:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003e32:	2304      	movs	r3, #4
24003e34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24003e38:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003e3c:	f000 fe06 	bl	24004a4c <HAL_DMA_Init>
24003e40:	2800      	cmp	r0, #0
24003e42:	d175      	bne.n	24003f30 <HAL_SAI_MspInit+0x170>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003e44:	2006      	movs	r0, #6
24003e46:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
24003e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
24003e4e:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003e54:	a902      	add	r1, sp, #8
24003e56:	483d      	ldr	r0, [pc, #244]	; (24003f4c <HAL_SAI_MspInit+0x18c>)
    pSyncConfig.SyncEnable = DISABLE;
24003e58:	f8ad 2010 	strh.w	r2, [sp, #16]
    pSyncConfig.RequestNumber = 1;
24003e5c:	9305      	str	r3, [sp, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003e5e:	f002 f8b3 	bl	24005fc8 <HAL_DMAEx_ConfigMuxSync>
24003e62:	2800      	cmp	r0, #0
24003e64:	d161      	bne.n	24003f2a <HAL_SAI_MspInit+0x16a>
    if(saiHandle->Instance==SAI1_Block_B)
24003e66:	4a37      	ldr	r2, [pc, #220]	; (24003f44 <HAL_SAI_MspInit+0x184>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24003e68:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24003e6a:	6823      	ldr	r3, [r4, #0]
24003e6c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24003e6e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24003e72:	d1af      	bne.n	24003dd4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24003e74:	4b34      	ldr	r3, [pc, #208]	; (24003f48 <HAL_SAI_MspInit+0x188>)
24003e76:	681a      	ldr	r2, [r3, #0]
24003e78:	2a00      	cmp	r2, #0
24003e7a:	d037      	beq.n	24003eec <HAL_SAI_MspInit+0x12c>
    SAI1_client ++;
24003e7c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003e7e:	2008      	movs	r0, #8
24003e80:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
24003e82:	4d35      	ldr	r5, [pc, #212]	; (24003f58 <HAL_SAI_MspInit+0x198>)
    SAI1_client ++;
24003e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003e86:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003e88:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24003f38 <HAL_SAI_MspInit+0x178>
24003e8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003e90:	a906      	add	r1, sp, #24
24003e92:	482f      	ldr	r0, [pc, #188]	; (24003f50 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003e94:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003e96:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003e9a:	f002 f8ff 	bl	2400609c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
24003e9e:	492f      	ldr	r1, [pc, #188]	; (24003f5c <HAL_SAI_MspInit+0x19c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003ea0:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003ea2:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003ea4:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003ea6:	60eb      	str	r3, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003ea8:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003eaa:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003eb2:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003eb4:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003eb8:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24003ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003ec2:	60a9      	str	r1, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003ec4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003ec8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
24003ed0:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003ed4:	2304      	movs	r3, #4
24003ed6:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003ed8:	f000 fdb8 	bl	24004a4c <HAL_DMA_Init>
24003edc:	bb10      	cbnz	r0, 24003f24 <HAL_SAI_MspInit+0x164>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003ede:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
24003ee2:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
24003ee4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24003ee8:	b00d      	add	sp, #52	; 0x34
24003eea:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
24003eec:	491c      	ldr	r1, [pc, #112]	; (24003f60 <HAL_SAI_MspInit+0x1a0>)
24003eee:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003ef2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003ef6:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003efa:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003efe:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003f02:	9101      	str	r1, [sp, #4]
24003f04:	9901      	ldr	r1, [sp, #4]
24003f06:	e7b9      	b.n	24003e7c <HAL_SAI_MspInit+0xbc>
       __HAL_RCC_SAI1_CLK_ENABLE();
24003f08:	4915      	ldr	r1, [pc, #84]	; (24003f60 <HAL_SAI_MspInit+0x1a0>)
24003f0a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003f0e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003f12:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003f16:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003f1a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003f1e:	9100      	str	r1, [sp, #0]
24003f20:	9900      	ldr	r1, [sp, #0]
24003f22:	e75e      	b.n	24003de2 <HAL_SAI_MspInit+0x22>
      Error_Handler();
24003f24:	f7ff fed0 	bl	24003cc8 <Error_Handler>
24003f28:	e7d9      	b.n	24003ede <HAL_SAI_MspInit+0x11e>
      Error_Handler();
24003f2a:	f7ff fecd 	bl	24003cc8 <Error_Handler>
24003f2e:	e79a      	b.n	24003e66 <HAL_SAI_MspInit+0xa6>
      Error_Handler();
24003f30:	f7ff feca 	bl	24003cc8 <Error_Handler>
24003f34:	e786      	b.n	24003e44 <HAL_SAI_MspInit+0x84>
24003f36:	bf00      	nop
24003f38:	00000000 	.word	0x00000000
24003f3c:	00000002 	.word	0x00000002
24003f40:	40015804 	.word	0x40015804
24003f44:	40015824 	.word	0x40015824
24003f48:	2001cf1c 	.word	0x2001cf1c
24003f4c:	2001cf20 	.word	0x2001cf20
24003f50:	58021000 	.word	0x58021000
24003f54:	40020028 	.word	0x40020028
24003f58:	2001cf98 	.word	0x2001cf98
24003f5c:	40020040 	.word	0x40020040
24003f60:	58024400 	.word	0x58024400

24003f64 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
24003f64:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
24003f66:	4b07      	ldr	r3, [pc, #28]	; (24003f84 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24003f68:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
24003f6a:	4c07      	ldr	r4, [pc, #28]	; (24003f88 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003f6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24003f70:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
24003f72:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003f76:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
24003f7a:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24003f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
24003f82:	4770      	bx	lr
24003f84:	2001d140 	.word	0x2001d140
24003f88:	52007000 	.word	0x52007000

24003f8c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
24003f8c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
24003f8e:	4a27      	ldr	r2, [pc, #156]	; (2400402c <HAL_SD_MspInit+0xa0>)
{
24003f90:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
24003f92:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003f94:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
24003f96:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003f98:	9308      	str	r3, [sp, #32]
24003f9a:	e9cd 3304 	strd	r3, r3, [sp, #16]
24003f9e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
24003fa2:	d001      	beq.n	24003fa8 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24003fa4:	b00a      	add	sp, #40	; 0x28
24003fa6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003fa8:	4b21      	ldr	r3, [pc, #132]	; (24004030 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24003faa:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
24003fae:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24003fb0:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003fb2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24003fb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24003fba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
24003fbe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24003fc2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
24003fc6:	9201      	str	r2, [sp, #4]
24003fc8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24003fca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fce:	f042 0204 	orr.w	r2, r2, #4
24003fd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003fd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fda:	f002 0204 	and.w	r2, r2, #4
24003fde:	9202      	str	r2, [sp, #8]
24003fe0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003fe2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003fe6:	f042 0208 	orr.w	r2, r2, #8
24003fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003fee:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003ff4:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003ff6:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24003ffa:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24003ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004000:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004002:	a904      	add	r1, sp, #16
24004004:	480b      	ldr	r0, [pc, #44]	; (24004034 <HAL_SD_MspInit+0xa8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004006:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004008:	f002 f848 	bl	2400609c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400400c:	2204      	movs	r2, #4
2400400e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004010:	a904      	add	r1, sp, #16
24004012:	4809      	ldr	r0, [pc, #36]	; (24004038 <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24004014:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24004016:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400401a:	2200      	movs	r2, #0
2400401c:	2302      	movs	r3, #2
2400401e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004022:	f002 f83b 	bl	2400609c <HAL_GPIO_Init>
}
24004026:	b00a      	add	sp, #40	; 0x28
24004028:	bd10      	pop	{r4, pc}
2400402a:	bf00      	nop
2400402c:	52007000 	.word	0x52007000
24004030:	58024400 	.word	0x58024400
24004034:	58020800 	.word	0x58020800
24004038:	58020c00 	.word	0x58020c00
2400403c:	00000000 	.word	0x00000000

24004040 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24004040:	4813      	ldr	r0, [pc, #76]	; (24004090 <MX_SPI1_Init+0x50>)
24004042:	4a14      	ldr	r2, [pc, #80]	; (24004094 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004044:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004088 <MX_SPI1_Init+0x48>
{
24004048:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
2400404a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
2400404c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400404e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24004050:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24004052:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004054:	ed80 7b08 	vstr	d7, [r0, #32]
24004058:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
2400405c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24004060:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24004064:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004068:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400406c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004070:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24004074:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24004078:	f006 fd74 	bl	2400ab64 <HAL_SPI_Init>
2400407c:	b900      	cbnz	r0, 24004080 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
2400407e:	bd08      	pop	{r3, pc}
24004080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004084:	f7ff be20 	b.w	24003cc8 <Error_Handler>
	...
24004090:	2001d328 	.word	0x2001d328
24004094:	40013000 	.word	0x40013000

24004098 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
24004098:	4815      	ldr	r0, [pc, #84]	; (240040f0 <MX_SPI6_Init+0x58>)
2400409a:	4a16      	ldr	r2, [pc, #88]	; (240040f4 <MX_SPI6_Init+0x5c>)
{
2400409c:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
2400409e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 240040e8 <MX_SPI6_Init+0x50>
  hspi6.Instance = SPI6;
240040a2:	6002      	str	r2, [r0, #0]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
240040a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240040a8:	2300      	movs	r3, #0
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
240040aa:	6082      	str	r2, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240040ac:	2207      	movs	r2, #7
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240040ae:	6043      	str	r3, [r0, #4]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
240040b0:	6103      	str	r3, [r0, #16]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240040b2:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240040b4:	ed80 7b08 	vstr	d7, [r0, #32]
240040b8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
240040bc:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240040c0:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240040c4:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240040c8:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240040cc:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240040d0:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
240040d4:	f006 fd46 	bl	2400ab64 <HAL_SPI_Init>
240040d8:	b900      	cbnz	r0, 240040dc <MX_SPI6_Init+0x44>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
240040da:	bd08      	pop	{r3, pc}
240040dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240040e0:	f7ff bdf2 	b.w	24003cc8 <Error_Handler>
240040e4:	f3af 8000 	nop.w
	...
240040f0:	2001d3c8 	.word	0x2001d3c8
240040f4:	58001400 	.word	0x58001400

240040f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
240040f8:	b5f0      	push	{r4, r5, r6, r7, lr}
240040fa:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240040fc:	2100      	movs	r1, #0
{
240040fe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004100:	22c0      	movs	r2, #192	; 0xc0
24004102:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004104:	910a      	str	r1, [sp, #40]	; 0x28
24004106:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400410a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400410e:	f011 f9b3 	bl	24015478 <memset>
  if(spiHandle->Instance==SPI1)
24004112:	6823      	ldr	r3, [r4, #0]
24004114:	4a80      	ldr	r2, [pc, #512]	; (24004318 <HAL_SPI_MspInit+0x220>)
24004116:	4293      	cmp	r3, r2
24004118:	d005      	beq.n	24004126 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
2400411a:	4a80      	ldr	r2, [pc, #512]	; (2400431c <HAL_SPI_MspInit+0x224>)
2400411c:	4293      	cmp	r3, r2
2400411e:	f000 8097 	beq.w	24004250 <HAL_SPI_MspInit+0x158>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
24004122:	b03d      	add	sp, #244	; 0xf4
24004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24004126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400412a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400412c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
2400412e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004132:	f003 fee1 	bl	24007ef8 <HAL_RCCEx_PeriphCLKConfig>
24004136:	2800      	cmp	r0, #0
24004138:	f040 80e4 	bne.w	24004304 <HAL_SPI_MspInit+0x20c>
    __HAL_RCC_SPI1_CLK_ENABLE();
2400413c:	4b78      	ldr	r3, [pc, #480]	; (24004320 <HAL_SPI_MspInit+0x228>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400413e:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004140:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004142:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
24004144:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004148:	4876      	ldr	r0, [pc, #472]	; (24004324 <HAL_SPI_MspInit+0x22c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
2400414a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2400414e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
24004152:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24004156:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
2400415a:	9201      	str	r2, [sp, #4]
2400415c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400415e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004162:	f042 0202 	orr.w	r2, r2, #2
24004166:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400416a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400416e:	f002 0202 	and.w	r2, r2, #2
24004172:	9202      	str	r2, [sp, #8]
24004174:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004176:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400417a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400417e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004182:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004188:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400418e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004190:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004192:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004194:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004196:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400419a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400419e:	f001 ff7d 	bl	2400609c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240041a2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
240041a6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240041a8:	a906      	add	r1, sp, #24
240041aa:	485f      	ldr	r0, [pc, #380]	; (24004328 <HAL_SPI_MspInit+0x230>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240041ac:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240041ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
240041b2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240041b6:	f001 ff71 	bl	2400609c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
240041ba:	4e5c      	ldr	r6, [pc, #368]	; (2400432c <HAL_SPI_MspInit+0x234>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240041bc:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
240041be:	495c      	ldr	r1, [pc, #368]	; (24004330 <HAL_SPI_MspInit+0x238>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240041c0:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240041c2:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240041c4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240041c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240041cc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240041d0:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240041d4:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240041d8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240041dc:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240041de:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240041e0:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240041e4:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240041e6:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240041ea:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240041ec:	f000 fc2e 	bl	24004a4c <HAL_DMA_Init>
240041f0:	2800      	cmp	r0, #0
240041f2:	f040 8084 	bne.w	240042fe <HAL_SPI_MspInit+0x206>
    hdma_spi1_tx.Instance = DMA1_Stream0;
240041f6:	4d4f      	ldr	r5, [pc, #316]	; (24004334 <HAL_SPI_MspInit+0x23c>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240041f8:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
240041fa:	494f      	ldr	r1, [pc, #316]	; (24004338 <HAL_SPI_MspInit+0x240>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240041fc:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240041fe:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004200:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004204:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004206:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004208:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400420a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400420e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004210:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24004212:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004214:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24004216:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400421a:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
2400421c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400421e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004220:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004222:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004224:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
24004226:	67e6      	str	r6, [r4, #124]	; 0x7c
24004228:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
2400422a:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400422c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004230:	f000 fc0c 	bl	24004a4c <HAL_DMA_Init>
24004234:	2800      	cmp	r0, #0
24004236:	d15f      	bne.n	240042f8 <HAL_SPI_MspInit+0x200>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24004238:	2200      	movs	r2, #0
2400423a:	2101      	movs	r1, #1
2400423c:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
2400423e:	67a5      	str	r5, [r4, #120]	; 0x78
24004240:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24004242:	f000 fa6d 	bl	24004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
24004246:	2023      	movs	r0, #35	; 0x23
24004248:	f000 faa8 	bl	2400479c <HAL_NVIC_EnableIRQ>
}
2400424c:	b03d      	add	sp, #244	; 0xf4
2400424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24004254:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004256:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004258:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400425c:	f003 fe4c 	bl	24007ef8 <HAL_RCCEx_PeriphCLKConfig>
24004260:	2800      	cmp	r0, #0
24004262:	d152      	bne.n	2400430a <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI6_CLK_ENABLE();
24004264:	4b2e      	ldr	r3, [pc, #184]	; (24004320 <HAL_SPI_MspInit+0x228>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24004266:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004268:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI6_CLK_ENABLE();
2400426a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400426e:	f042 0220 	orr.w	r2, r2, #32
24004272:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004276:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400427a:	f002 0220 	and.w	r2, r2, #32
2400427e:	9204      	str	r2, [sp, #16]
24004280:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004282:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004286:	f042 0201 	orr.w	r2, r2, #1
2400428a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
2400428e:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24004294:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004296:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400429a:	4828      	ldr	r0, [pc, #160]	; (2400433c <HAL_SPI_MspInit+0x244>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400429c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
2400429e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
240042a0:	9d05      	ldr	r5, [sp, #20]
    hdma_spi6_rx.Instance = BDMA_Channel0;
240042a2:	4d27      	ldr	r5, [pc, #156]	; (24004340 <HAL_SPI_MspInit+0x248>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240042a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
240042a8:	2200      	movs	r2, #0
240042aa:	2302      	movs	r3, #2
240042ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240042b0:	f001 fef4 	bl	2400609c <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240042b4:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
240042b6:	4923      	ldr	r1, [pc, #140]	; (24004344 <HAL_SPI_MspInit+0x24c>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240042b8:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240042ba:	4628      	mov	r0, r5
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240042bc:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240042c0:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240042c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240042c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240042cc:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240042d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240042d4:	6129      	str	r1, [r5, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240042d6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240042da:	f000 fbb7 	bl	24004a4c <HAL_DMA_Init>
240042de:	b9b8      	cbnz	r0, 24004310 <HAL_SPI_MspInit+0x218>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240042e0:	2200      	movs	r2, #0
240042e2:	2107      	movs	r1, #7
240042e4:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
240042e6:	67e5      	str	r5, [r4, #124]	; 0x7c
240042e8:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240042ea:	f000 fa19 	bl	24004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
240042ee:	2056      	movs	r0, #86	; 0x56
240042f0:	f000 fa54 	bl	2400479c <HAL_NVIC_EnableIRQ>
}
240042f4:	b03d      	add	sp, #244	; 0xf4
240042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240042f8:	f7ff fce6 	bl	24003cc8 <Error_Handler>
240042fc:	e79c      	b.n	24004238 <HAL_SPI_MspInit+0x140>
      Error_Handler();
240042fe:	f7ff fce3 	bl	24003cc8 <Error_Handler>
24004302:	e778      	b.n	240041f6 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
24004304:	f7ff fce0 	bl	24003cc8 <Error_Handler>
24004308:	e718      	b.n	2400413c <HAL_SPI_MspInit+0x44>
      Error_Handler();
2400430a:	f7ff fcdd 	bl	24003cc8 <Error_Handler>
2400430e:	e7a9      	b.n	24004264 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
24004310:	f7ff fcda 	bl	24003cc8 <Error_Handler>
24004314:	e7e4      	b.n	240042e0 <HAL_SPI_MspInit+0x1e8>
24004316:	bf00      	nop
24004318:	40013000 	.word	0x40013000
2400431c:	58001400 	.word	0x58001400
24004320:	58024400 	.word	0x58024400
24004324:	58020400 	.word	0x58020400
24004328:	58021800 	.word	0x58021800
2400432c:	2001d1bc 	.word	0x2001d1bc
24004330:	400200a0 	.word	0x400200a0
24004334:	2001d234 	.word	0x2001d234
24004338:	40020010 	.word	0x40020010
2400433c:	58020000 	.word	0x58020000
24004340:	2001d2ac 	.word	0x2001d2ac
24004344:	58025408 	.word	0x58025408

24004348 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24004348:	e7fe      	b.n	24004348 <Default_Handler>
2400434a:	bf00      	nop

2400434c <Reset_Handler>:
	asm ("ldr sp, =_estack");
2400434c:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 24004410 <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24004350:	481f      	ldr	r0, [pc, #124]	; (240043d0 <Reset_Handler+0x84>)
24004352:	4a20      	ldr	r2, [pc, #128]	; (240043d4 <Reset_Handler+0x88>)
24004354:	4290      	cmp	r0, r2
24004356:	d003      	beq.n	24004360 <Reset_Handler+0x14>
		*pDest = *pSource;
24004358:	1a12      	subs	r2, r2, r0
2400435a:	491f      	ldr	r1, [pc, #124]	; (240043d8 <Reset_Handler+0x8c>)
2400435c:	f011 f87e 	bl	2401545c <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24004360:	481e      	ldr	r0, [pc, #120]	; (240043dc <Reset_Handler+0x90>)
24004362:	4a1f      	ldr	r2, [pc, #124]	; (240043e0 <Reset_Handler+0x94>)
24004364:	4290      	cmp	r0, r2
24004366:	d003      	beq.n	24004370 <Reset_Handler+0x24>
		*pDest = 0;
24004368:	1a12      	subs	r2, r2, r0
2400436a:	2100      	movs	r1, #0
2400436c:	f011 f884 	bl	24015478 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
24004370:	481c      	ldr	r0, [pc, #112]	; (240043e4 <Reset_Handler+0x98>)
24004372:	4a1d      	ldr	r2, [pc, #116]	; (240043e8 <Reset_Handler+0x9c>)
24004374:	4290      	cmp	r0, r2
24004376:	d003      	beq.n	24004380 <Reset_Handler+0x34>
		*pDest = 0;
24004378:	1a12      	subs	r2, r2, r0
2400437a:	2100      	movs	r1, #0
2400437c:	f011 f87c 	bl	24015478 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
24004380:	481a      	ldr	r0, [pc, #104]	; (240043ec <Reset_Handler+0xa0>)
24004382:	4a1b      	ldr	r2, [pc, #108]	; (240043f0 <Reset_Handler+0xa4>)
24004384:	4290      	cmp	r0, r2
24004386:	d003      	beq.n	24004390 <Reset_Handler+0x44>
		*pDest = 0;
24004388:	1a12      	subs	r2, r2, r0
2400438a:	2100      	movs	r1, #0
2400438c:	f011 f874 	bl	24015478 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
24004390:	4818      	ldr	r0, [pc, #96]	; (240043f4 <Reset_Handler+0xa8>)
24004392:	4a19      	ldr	r2, [pc, #100]	; (240043f8 <Reset_Handler+0xac>)
24004394:	4290      	cmp	r0, r2
24004396:	d003      	beq.n	240043a0 <Reset_Handler+0x54>
		*pDest = 0;
24004398:	1a12      	subs	r2, r2, r0
2400439a:	2100      	movs	r1, #0
2400439c:	f011 f86c 	bl	24015478 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
240043a0:	4816      	ldr	r0, [pc, #88]	; (240043fc <Reset_Handler+0xb0>)
240043a2:	4a17      	ldr	r2, [pc, #92]	; (24004400 <Reset_Handler+0xb4>)
240043a4:	4290      	cmp	r0, r2
240043a6:	d003      	beq.n	240043b0 <Reset_Handler+0x64>
		*pDest = 0;
240043a8:	1a12      	subs	r2, r2, r0
240043aa:	2100      	movs	r1, #0
240043ac:	f011 f864 	bl	24015478 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
240043b0:	4814      	ldr	r0, [pc, #80]	; (24004404 <Reset_Handler+0xb8>)
240043b2:	4a15      	ldr	r2, [pc, #84]	; (24004408 <Reset_Handler+0xbc>)
240043b4:	4290      	cmp	r0, r2
240043b6:	d003      	beq.n	240043c0 <Reset_Handler+0x74>
		*pDest = *pSource;
240043b8:	1a12      	subs	r2, r2, r0
240043ba:	4914      	ldr	r1, [pc, #80]	; (2400440c <Reset_Handler+0xc0>)
240043bc:	f011 f84e 	bl	2401545c <memcpy>
	SystemInit();
240043c0:	f000 f8a4 	bl	2400450c <SystemInit>
	__libc_init_array();
240043c4:	f011 f80c 	bl	240153e0 <__libc_init_array>
	(void)main();
240043c8:	f7fe fdee 	bl	24002fa8 <main>
	for (;;) ;
240043cc:	e7fe      	b.n	240043cc <Reset_Handler+0x80>
240043ce:	bf00      	nop
240043d0:	20000000 	.word	0x20000000
240043d4:	20000758 	.word	0x20000758
240043d8:	2402d710 	.word	0x2402d710
240043dc:	20000758 	.word	0x20000758
240043e0:	2001db04 	.word	0x2001db04
240043e4:	24040000 	.word	0x24040000
240043e8:	2407f7a0 	.word	0x2407f7a0
240043ec:	30000000 	.word	0x30000000
240043f0:	300011c0 	.word	0x300011c0
240043f4:	30002000 	.word	0x30002000
240043f8:	30033f80 	.word	0x30033f80
240043fc:	38000000 	.word	0x38000000
24004400:	38000034 	.word	0x38000034
24004404:	00000400 	.word	0x00000400
24004408:	00008a40 	.word	0x00008a40
2400440c:	2402de68 	.word	0x2402de68
24004410:	20020000 	.word	0x20020000

24004414 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004414:	4b07      	ldr	r3, [pc, #28]	; (24004434 <HAL_MspInit+0x20>)
{
24004416:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004418:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400441c:	f042 0202 	orr.w	r2, r2, #2
24004420:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24004428:	f003 0302 	and.w	r3, r3, #2
2400442c:	9301      	str	r3, [sp, #4]
2400442e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24004430:	b002      	add	sp, #8
24004432:	4770      	bx	lr
24004434:	58024400 	.word	0x58024400

24004438 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24004438:	e7fe      	b.n	24004438 <NMI_Handler>
2400443a:	bf00      	nop

2400443c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2400443c:	e7fe      	b.n	2400443c <HardFault_Handler>
2400443e:	bf00      	nop

24004440 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24004440:	e7fe      	b.n	24004440 <MemManage_Handler>
24004442:	bf00      	nop

24004444 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24004444:	e7fe      	b.n	24004444 <BusFault_Handler>
24004446:	bf00      	nop

24004448 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24004448:	e7fe      	b.n	24004448 <UsageFault_Handler>
2400444a:	bf00      	nop

2400444c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2400444c:	4770      	bx	lr
2400444e:	bf00      	nop

24004450 <DebugMon_Handler>:
24004450:	4770      	bx	lr
24004452:	bf00      	nop

24004454 <PendSV_Handler>:
24004454:	4770      	bx	lr
24004456:	bf00      	nop

24004458 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24004458:	f000 b926 	b.w	240046a8 <HAL_IncTick>

2400445c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
2400445c:	4801      	ldr	r0, [pc, #4]	; (24004464 <DMA1_Stream0_IRQHandler+0x8>)
2400445e:	f001 b949 	b.w	240056f4 <HAL_DMA_IRQHandler>
24004462:	bf00      	nop
24004464:	2001d234 	.word	0x2001d234

24004468 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24004468:	4801      	ldr	r0, [pc, #4]	; (24004470 <DMA1_Stream1_IRQHandler+0x8>)
2400446a:	f001 b943 	b.w	240056f4 <HAL_DMA_IRQHandler>
2400446e:	bf00      	nop
24004470:	2001cf20 	.word	0x2001cf20

24004474 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24004474:	4801      	ldr	r0, [pc, #4]	; (2400447c <DMA1_Stream2_IRQHandler+0x8>)
24004476:	f001 b93d 	b.w	240056f4 <HAL_DMA_IRQHandler>
2400447a:	bf00      	nop
2400447c:	2001cf98 	.word	0x2001cf98

24004480 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
24004480:	4801      	ldr	r0, [pc, #4]	; (24004488 <DMA1_Stream3_IRQHandler+0x8>)
24004482:	f001 b937 	b.w	240056f4 <HAL_DMA_IRQHandler>
24004486:	bf00      	nop
24004488:	2001495c 	.word	0x2001495c

2400448c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
2400448c:	4801      	ldr	r0, [pc, #4]	; (24004494 <DMA1_Stream4_IRQHandler+0x8>)
2400448e:	f001 b931 	b.w	240056f4 <HAL_DMA_IRQHandler>
24004492:	bf00      	nop
24004494:	200149d4 	.word	0x200149d4

24004498 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
24004498:	4801      	ldr	r0, [pc, #4]	; (240044a0 <DMA1_Stream6_IRQHandler+0x8>)
2400449a:	f001 b92b 	b.w	240056f4 <HAL_DMA_IRQHandler>
2400449e:	bf00      	nop
240044a0:	2001d1bc 	.word	0x2001d1bc

240044a4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
240044a4:	2040      	movs	r0, #64	; 0x40
240044a6:	f001 bf4d 	b.w	24006344 <HAL_GPIO_EXTI_IRQHandler>
240044aa:	bf00      	nop

240044ac <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
240044ac:	4801      	ldr	r0, [pc, #4]	; (240044b4 <I2C1_EV_IRQHandler+0x8>)
240044ae:	f002 ba73 	b.w	24006998 <HAL_I2C_EV_IRQHandler>
240044b2:	bf00      	nop
240044b4:	20014a4c 	.word	0x20014a4c

240044b8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
240044b8:	4801      	ldr	r0, [pc, #4]	; (240044c0 <I2C1_ER_IRQHandler+0x8>)
240044ba:	f002 bd8b 	b.w	24006fd4 <HAL_I2C_ER_IRQHandler>
240044be:	bf00      	nop
240044c0:	20014a4c 	.word	0x20014a4c

240044c4 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
240044c4:	4801      	ldr	r0, [pc, #4]	; (240044cc <I2C2_EV_IRQHandler+0x8>)
240044c6:	f002 ba67 	b.w	24006998 <HAL_I2C_EV_IRQHandler>
240044ca:	bf00      	nop
240044cc:	20014aa0 	.word	0x20014aa0

240044d0 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
240044d0:	4801      	ldr	r0, [pc, #4]	; (240044d8 <I2C2_ER_IRQHandler+0x8>)
240044d2:	f002 bd7f 	b.w	24006fd4 <HAL_I2C_ER_IRQHandler>
240044d6:	bf00      	nop
240044d8:	20014aa0 	.word	0x20014aa0

240044dc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
240044dc:	4801      	ldr	r0, [pc, #4]	; (240044e4 <SPI1_IRQHandler+0x8>)
240044de:	f006 bec7 	b.w	2400b270 <HAL_SPI_IRQHandler>
240044e2:	bf00      	nop
240044e4:	2001d328 	.word	0x2001d328

240044e8 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
240044e8:	4801      	ldr	r0, [pc, #4]	; (240044f0 <SPI6_IRQHandler+0x8>)
240044ea:	f006 bec1 	b.w	2400b270 <HAL_SPI_IRQHandler>
240044ee:	bf00      	nop
240044f0:	2001d3c8 	.word	0x2001d3c8

240044f4 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
240044f4:	4801      	ldr	r0, [pc, #4]	; (240044fc <DMAMUX1_OVR_IRQHandler+0x8>)
240044f6:	f001 bda1 	b.w	2400603c <HAL_DMAEx_MUX_IRQHandler>
240044fa:	bf00      	nop
240044fc:	2001cf20 	.word	0x2001cf20

24004500 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24004500:	4801      	ldr	r0, [pc, #4]	; (24004508 <BDMA_Channel0_IRQHandler+0x8>)
24004502:	f001 b8f7 	b.w	240056f4 <HAL_DMA_IRQHandler>
24004506:	bf00      	nop
24004508:	2001d2ac 	.word	0x2001d2ac

2400450c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2400450c:	4930      	ldr	r1, [pc, #192]	; (240045d0 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400450e:	4a31      	ldr	r2, [pc, #196]	; (240045d4 <SystemInit+0xc8>)
{
24004510:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004512:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
24004516:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2400451c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004520:	6813      	ldr	r3, [r2, #0]
24004522:	f003 030f 	and.w	r3, r3, #15
24004526:	2b06      	cmp	r3, #6
24004528:	d805      	bhi.n	24004536 <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400452a:	6813      	ldr	r3, [r2, #0]
2400452c:	f023 030f 	bic.w	r3, r3, #15
24004530:	f043 0307 	orr.w	r3, r3, #7
24004534:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24004536:	4b28      	ldr	r3, [pc, #160]	; (240045d8 <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24004538:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2400453a:	4a28      	ldr	r2, [pc, #160]	; (240045dc <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
2400453c:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400453e:	4825      	ldr	r0, [pc, #148]	; (240045d4 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
24004540:	f041 0101 	orr.w	r1, r1, #1
24004544:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
24004546:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
24004548:	6819      	ldr	r1, [r3, #0]
2400454a:	400a      	ands	r2, r1
2400454c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400454e:	6803      	ldr	r3, [r0, #0]
24004550:	071b      	lsls	r3, r3, #28
24004552:	d505      	bpl.n	24004560 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24004554:	6803      	ldr	r3, [r0, #0]
24004556:	f023 030f 	bic.w	r3, r3, #15
2400455a:	f043 0307 	orr.w	r3, r3, #7
2400455e:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24004560:	4b1d      	ldr	r3, [pc, #116]	; (240045d8 <SystemInit+0xcc>)
24004562:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24004564:	491e      	ldr	r1, [pc, #120]	; (240045e0 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
24004566:	4c1f      	ldr	r4, [pc, #124]	; (240045e4 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
24004568:	481f      	ldr	r0, [pc, #124]	; (240045e8 <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
2400456a:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
2400456c:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
2400456e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24004570:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24004572:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24004574:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24004576:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24004578:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
2400457a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
2400457c:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
2400457e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24004580:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004582:	4c1a      	ldr	r4, [pc, #104]	; (240045ec <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24004584:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004588:	4919      	ldr	r1, [pc, #100]	; (240045f0 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
2400458a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
2400458c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400458e:	6823      	ldr	r3, [r4, #0]
24004590:	4019      	ands	r1, r3
24004592:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004596:	d203      	bcs.n	240045a0 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24004598:	4b16      	ldr	r3, [pc, #88]	; (240045f4 <SystemInit+0xe8>)
2400459a:	2201      	movs	r2, #1
2400459c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240045a0:	4b0d      	ldr	r3, [pc, #52]	; (240045d8 <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240045a2:	f243 04d2 	movw	r4, #12498	; 0x30d2
240045a6:	4814      	ldr	r0, [pc, #80]	; (240045f8 <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240045a8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240045ac:	4908      	ldr	r1, [pc, #32]	; (240045d0 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240045ae:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
240045b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
240045b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240045ba:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240045bc:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
240045c0:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240045c2:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240045c4:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
240045c6:	b003      	add	sp, #12
240045c8:	f85d 4b04 	ldr.w	r4, [sp], #4
240045cc:	4770      	bx	lr
240045ce:	bf00      	nop
240045d0:	e000ed00 	.word	0xe000ed00
240045d4:	52002000 	.word	0x52002000
240045d8:	58024400 	.word	0x58024400
240045dc:	eaf6ed7f 	.word	0xeaf6ed7f
240045e0:	01010280 	.word	0x01010280
240045e4:	02020200 	.word	0x02020200
240045e8:	01ff0000 	.word	0x01ff0000
240045ec:	5c001000 	.word	0x5c001000
240045f0:	ffff0000 	.word	0xffff0000
240045f4:	51008000 	.word	0x51008000
240045f8:	52004000 	.word	0x52004000

240045fc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240045fc:	4b0f      	ldr	r3, [pc, #60]	; (2400463c <HAL_InitTick+0x40>)
240045fe:	781b      	ldrb	r3, [r3, #0]
24004600:	b90b      	cbnz	r3, 24004606 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24004602:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24004604:	4770      	bx	lr
{
24004606:	b510      	push	{r4, lr}
24004608:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400460a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2400460e:	4a0c      	ldr	r2, [pc, #48]	; (24004640 <HAL_InitTick+0x44>)
24004610:	fbb0 f3f3 	udiv	r3, r0, r3
24004614:	6810      	ldr	r0, [r2, #0]
24004616:	fbb0 f0f3 	udiv	r0, r0, r3
2400461a:	f000 f8cd 	bl	240047b8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2400461e:	2c0f      	cmp	r4, #15
24004620:	d800      	bhi.n	24004624 <HAL_InitTick+0x28>
24004622:	b108      	cbz	r0, 24004628 <HAL_InitTick+0x2c>
    return HAL_ERROR;
24004624:	2001      	movs	r0, #1
}
24004626:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24004628:	2200      	movs	r2, #0
2400462a:	4621      	mov	r1, r4
2400462c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24004630:	f000 f876 	bl	24004720 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24004634:	4b03      	ldr	r3, [pc, #12]	; (24004644 <HAL_InitTick+0x48>)
24004636:	2000      	movs	r0, #0
24004638:	601c      	str	r4, [r3, #0]
}
2400463a:	bd10      	pop	{r4, pc}
2400463c:	200006e8 	.word	0x200006e8
24004640:	200006e0 	.word	0x200006e0
24004644:	200006ec 	.word	0x200006ec

24004648 <HAL_Init>:
{
24004648:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400464a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400464c:	4c12      	ldr	r4, [pc, #72]	; (24004698 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400464e:	f000 f855 	bl	240046fc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004652:	f003 f901 	bl	24007858 <HAL_RCC_GetSysClockFreq>
24004656:	4b11      	ldr	r3, [pc, #68]	; (2400469c <HAL_Init+0x54>)
24004658:	4911      	ldr	r1, [pc, #68]	; (240046a0 <HAL_Init+0x58>)
2400465a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400465c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400465e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004662:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004666:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004668:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400466a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
2400466e:	490d      	ldr	r1, [pc, #52]	; (240046a4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004670:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004674:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004676:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
2400467a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400467c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400467e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004680:	f7ff ffbc 	bl	240045fc <HAL_InitTick>
24004684:	b110      	cbz	r0, 2400468c <HAL_Init+0x44>
    return HAL_ERROR;
24004686:	2401      	movs	r4, #1
}
24004688:	4620      	mov	r0, r4
2400468a:	bd10      	pop	{r4, pc}
2400468c:	4604      	mov	r4, r0
  HAL_MspInit();
2400468e:	f7ff fec1 	bl	24004414 <HAL_MspInit>
}
24004692:	4620      	mov	r0, r4
24004694:	bd10      	pop	{r4, pc}
24004696:	bf00      	nop
24004698:	200006e4 	.word	0x200006e4
2400469c:	58024400 	.word	0x58024400
240046a0:	24017f40 	.word	0x24017f40
240046a4:	200006e0 	.word	0x200006e0

240046a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
240046a8:	4a03      	ldr	r2, [pc, #12]	; (240046b8 <HAL_IncTick+0x10>)
240046aa:	4b04      	ldr	r3, [pc, #16]	; (240046bc <HAL_IncTick+0x14>)
240046ac:	6811      	ldr	r1, [r2, #0]
240046ae:	781b      	ldrb	r3, [r3, #0]
240046b0:	440b      	add	r3, r1
240046b2:	6013      	str	r3, [r2, #0]
}
240046b4:	4770      	bx	lr
240046b6:	bf00      	nop
240046b8:	2001d464 	.word	0x2001d464
240046bc:	200006e8 	.word	0x200006e8

240046c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
240046c0:	4b01      	ldr	r3, [pc, #4]	; (240046c8 <HAL_GetTick+0x8>)
240046c2:	6818      	ldr	r0, [r3, #0]
}
240046c4:	4770      	bx	lr
240046c6:	bf00      	nop
240046c8:	2001d464 	.word	0x2001d464

240046cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240046cc:	b538      	push	{r3, r4, r5, lr}
240046ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240046d0:	f7ff fff6 	bl	240046c0 <HAL_GetTick>
240046d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240046d6:	1c63      	adds	r3, r4, #1
240046d8:	d002      	beq.n	240046e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
240046da:	4b04      	ldr	r3, [pc, #16]	; (240046ec <HAL_Delay+0x20>)
240046dc:	781b      	ldrb	r3, [r3, #0]
240046de:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
240046e0:	f7ff ffee 	bl	240046c0 <HAL_GetTick>
240046e4:	1b43      	subs	r3, r0, r5
240046e6:	42a3      	cmp	r3, r4
240046e8:	d3fa      	bcc.n	240046e0 <HAL_Delay+0x14>
  {
  }
}
240046ea:	bd38      	pop	{r3, r4, r5, pc}
240046ec:	200006e8 	.word	0x200006e8

240046f0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
240046f0:	4b01      	ldr	r3, [pc, #4]	; (240046f8 <HAL_GetREVID+0x8>)
240046f2:	6818      	ldr	r0, [r3, #0]
}
240046f4:	0c00      	lsrs	r0, r0, #16
240046f6:	4770      	bx	lr
240046f8:	5c001000 	.word	0x5c001000

240046fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240046fc:	4906      	ldr	r1, [pc, #24]	; (24004718 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240046fe:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004702:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24004704:	4b05      	ldr	r3, [pc, #20]	; (2400471c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004706:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004708:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2400470c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24004710:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24004712:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24004714:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24004716:	4770      	bx	lr
24004718:	e000ed00 	.word	0xe000ed00
2400471c:	05fa0000 	.word	0x05fa0000

24004720 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24004720:	4b1b      	ldr	r3, [pc, #108]	; (24004790 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24004722:	b500      	push	{lr}
24004724:	68db      	ldr	r3, [r3, #12]
24004726:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2400472a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400472e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004732:	f1be 0f04 	cmp.w	lr, #4
24004736:	bf28      	it	cs
24004738:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400473c:	f1bc 0f06 	cmp.w	ip, #6
24004740:	d91a      	bls.n	24004778 <HAL_NVIC_SetPriority+0x58>
24004742:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24004744:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
24004748:	fa0c fc03 	lsl.w	ip, ip, r3
2400474c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004750:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24004754:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004756:	fa0c fc0e 	lsl.w	ip, ip, lr
2400475a:	ea21 010c 	bic.w	r1, r1, ip
2400475e:	fa01 f103 	lsl.w	r1, r1, r3
24004762:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24004766:	db0a      	blt.n	2400477e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004768:	0109      	lsls	r1, r1, #4
2400476a:	4b0a      	ldr	r3, [pc, #40]	; (24004794 <HAL_NVIC_SetPriority+0x74>)
2400476c:	b2c9      	uxtb	r1, r1
2400476e:	4403      	add	r3, r0
24004770:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24004774:	f85d fb04 	ldr.w	pc, [sp], #4
24004778:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400477a:	4613      	mov	r3, r2
2400477c:	e7e8      	b.n	24004750 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400477e:	f000 000f 	and.w	r0, r0, #15
24004782:	0109      	lsls	r1, r1, #4
24004784:	4b04      	ldr	r3, [pc, #16]	; (24004798 <HAL_NVIC_SetPriority+0x78>)
24004786:	b2c9      	uxtb	r1, r1
24004788:	4403      	add	r3, r0
2400478a:	7619      	strb	r1, [r3, #24]
2400478c:	f85d fb04 	ldr.w	pc, [sp], #4
24004790:	e000ed00 	.word	0xe000ed00
24004794:	e000e100 	.word	0xe000e100
24004798:	e000ecfc 	.word	0xe000ecfc

2400479c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
2400479c:	2800      	cmp	r0, #0
2400479e:	db07      	blt.n	240047b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240047a0:	2301      	movs	r3, #1
240047a2:	f000 011f 	and.w	r1, r0, #31
240047a6:	4a03      	ldr	r2, [pc, #12]	; (240047b4 <HAL_NVIC_EnableIRQ+0x18>)
240047a8:	0940      	lsrs	r0, r0, #5
240047aa:	408b      	lsls	r3, r1
240047ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
240047b0:	4770      	bx	lr
240047b2:	bf00      	nop
240047b4:	e000e100 	.word	0xe000e100

240047b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
240047b8:	1e43      	subs	r3, r0, #1
240047ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240047be:	d20c      	bcs.n	240047da <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240047c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240047c4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240047c6:	4906      	ldr	r1, [pc, #24]	; (240047e0 <HAL_SYSTICK_Config+0x28>)
240047c8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240047cc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240047ce:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240047d0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240047d4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240047d6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240047d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
240047da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
240047dc:	4770      	bx	lr
240047de:	bf00      	nop
240047e0:	e000ed00 	.word	0xe000ed00

240047e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
240047e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240047e8:	4b04      	ldr	r3, [pc, #16]	; (240047fc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
240047ea:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240047ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240047ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240047f2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
240047f4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
240047f8:	4770      	bx	lr
240047fa:	bf00      	nop
240047fc:	e000ed00 	.word	0xe000ed00

24004800 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24004800:	4b06      	ldr	r3, [pc, #24]	; (2400481c <HAL_MPU_Enable+0x1c>)
24004802:	f040 0001 	orr.w	r0, r0, #1
24004806:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
2400480a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400480c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24004810:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24004812:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004816:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2400481a:	4770      	bx	lr
2400481c:	e000ed00 	.word	0xe000ed00

24004820 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24004820:	7843      	ldrb	r3, [r0, #1]
24004822:	4a16      	ldr	r2, [pc, #88]	; (2400487c <HAL_MPU_ConfigRegion+0x5c>)
24004824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24004828:	7803      	ldrb	r3, [r0, #0]
2400482a:	b313      	cbz	r3, 24004872 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
2400482c:	6843      	ldr	r3, [r0, #4]
2400482e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004832:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004834:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004838:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
2400483a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400483c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24004840:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004844:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24004846:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004848:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
2400484c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004850:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24004854:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004856:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
2400485a:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400485e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24004862:	7a01      	ldrb	r1, [r0, #8]
24004864:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24004868:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400486c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24004870:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24004872:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24004876:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
2400487a:	4770      	bx	lr
2400487c:	e000ed00 	.word	0xe000ed00

24004880 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004880:	4b34      	ldr	r3, [pc, #208]	; (24004954 <DMA_CalcBaseAndBitshift+0xd4>)
24004882:	4935      	ldr	r1, [pc, #212]	; (24004958 <DMA_CalcBaseAndBitshift+0xd8>)
{
24004884:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004886:	4d35      	ldr	r5, [pc, #212]	; (2400495c <DMA_CalcBaseAndBitshift+0xdc>)
24004888:	6802      	ldr	r2, [r0, #0]
2400488a:	4c35      	ldr	r4, [pc, #212]	; (24004960 <DMA_CalcBaseAndBitshift+0xe0>)
2400488c:	42aa      	cmp	r2, r5
2400488e:	bf18      	it	ne
24004890:	429a      	cmpne	r2, r3
24004892:	bf0c      	ite	eq
24004894:	2301      	moveq	r3, #1
24004896:	2300      	movne	r3, #0
24004898:	428a      	cmp	r2, r1
2400489a:	bf08      	it	eq
2400489c:	f043 0301 	orreq.w	r3, r3, #1
240048a0:	3130      	adds	r1, #48	; 0x30
240048a2:	42a2      	cmp	r2, r4
240048a4:	bf08      	it	eq
240048a6:	f043 0301 	orreq.w	r3, r3, #1
240048aa:	3430      	adds	r4, #48	; 0x30
240048ac:	428a      	cmp	r2, r1
240048ae:	bf08      	it	eq
240048b0:	f043 0301 	orreq.w	r3, r3, #1
240048b4:	3130      	adds	r1, #48	; 0x30
240048b6:	42a2      	cmp	r2, r4
240048b8:	bf08      	it	eq
240048ba:	f043 0301 	orreq.w	r3, r3, #1
240048be:	3430      	adds	r4, #48	; 0x30
240048c0:	428a      	cmp	r2, r1
240048c2:	bf08      	it	eq
240048c4:	f043 0301 	orreq.w	r3, r3, #1
240048c8:	f501 715c 	add.w	r1, r1, #880	; 0x370
240048cc:	42a2      	cmp	r2, r4
240048ce:	bf08      	it	eq
240048d0:	f043 0301 	orreq.w	r3, r3, #1
240048d4:	f504 745c 	add.w	r4, r4, #880	; 0x370
240048d8:	428a      	cmp	r2, r1
240048da:	bf08      	it	eq
240048dc:	f043 0301 	orreq.w	r3, r3, #1
240048e0:	3130      	adds	r1, #48	; 0x30
240048e2:	42a2      	cmp	r2, r4
240048e4:	bf08      	it	eq
240048e6:	f043 0301 	orreq.w	r3, r3, #1
240048ea:	3430      	adds	r4, #48	; 0x30
240048ec:	428a      	cmp	r2, r1
240048ee:	bf08      	it	eq
240048f0:	f043 0301 	orreq.w	r3, r3, #1
240048f4:	3130      	adds	r1, #48	; 0x30
240048f6:	42a2      	cmp	r2, r4
240048f8:	bf08      	it	eq
240048fa:	f043 0301 	orreq.w	r3, r3, #1
240048fe:	3430      	adds	r4, #48	; 0x30
24004900:	428a      	cmp	r2, r1
24004902:	bf08      	it	eq
24004904:	f043 0301 	orreq.w	r3, r3, #1
24004908:	3130      	adds	r1, #48	; 0x30
2400490a:	42a2      	cmp	r2, r4
2400490c:	bf08      	it	eq
2400490e:	f043 0301 	orreq.w	r3, r3, #1
24004912:	428a      	cmp	r2, r1
24004914:	bf08      	it	eq
24004916:	f043 0301 	orreq.w	r3, r3, #1
2400491a:	b913      	cbnz	r3, 24004922 <DMA_CalcBaseAndBitshift+0xa2>
2400491c:	4b11      	ldr	r3, [pc, #68]	; (24004964 <DMA_CalcBaseAndBitshift+0xe4>)
2400491e:	429a      	cmp	r2, r3
24004920:	d113      	bne.n	2400494a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004922:	b2d3      	uxtb	r3, r2
24004924:	4910      	ldr	r1, [pc, #64]	; (24004968 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004926:	4c11      	ldr	r4, [pc, #68]	; (2400496c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004928:	3b10      	subs	r3, #16
2400492a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
2400492e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004930:	4b0f      	ldr	r3, [pc, #60]	; (24004970 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004932:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004936:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2400493a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2400493c:	bf88      	it	hi
2400493e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004940:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24004942:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24004944:	4618      	mov	r0, r3
24004946:	bc30      	pop	{r4, r5}
24004948:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
2400494a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
2400494e:	6583      	str	r3, [r0, #88]	; 0x58
24004950:	e7f8      	b.n	24004944 <DMA_CalcBaseAndBitshift+0xc4>
24004952:	bf00      	nop
24004954:	40020010 	.word	0x40020010
24004958:	40020040 	.word	0x40020040
2400495c:	40020028 	.word	0x40020028
24004960:	40020058 	.word	0x40020058
24004964:	400204b8 	.word	0x400204b8
24004968:	aaaaaaab 	.word	0xaaaaaaab
2400496c:	24017f50 	.word	0x24017f50
24004970:	fffffc00 	.word	0xfffffc00

24004974 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24004974:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004976:	4a29      	ldr	r2, [pc, #164]	; (24004a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24004978:	4929      	ldr	r1, [pc, #164]	; (24004a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
2400497a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400497c:	4d29      	ldr	r5, [pc, #164]	; (24004a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
2400497e:	4c2a      	ldr	r4, [pc, #168]	; (24004a28 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
24004980:	42ab      	cmp	r3, r5
24004982:	bf18      	it	ne
24004984:	4293      	cmpne	r3, r2
24004986:	bf0c      	ite	eq
24004988:	2201      	moveq	r2, #1
2400498a:	2200      	movne	r2, #0
2400498c:	428b      	cmp	r3, r1
2400498e:	bf08      	it	eq
24004990:	f042 0201 	orreq.w	r2, r2, #1
24004994:	3128      	adds	r1, #40	; 0x28
24004996:	42a3      	cmp	r3, r4
24004998:	bf08      	it	eq
2400499a:	f042 0201 	orreq.w	r2, r2, #1
2400499e:	3428      	adds	r4, #40	; 0x28
240049a0:	428b      	cmp	r3, r1
240049a2:	bf08      	it	eq
240049a4:	f042 0201 	orreq.w	r2, r2, #1
240049a8:	3128      	adds	r1, #40	; 0x28
240049aa:	42a3      	cmp	r3, r4
240049ac:	bf08      	it	eq
240049ae:	f042 0201 	orreq.w	r2, r2, #1
240049b2:	428b      	cmp	r3, r1
240049b4:	bf08      	it	eq
240049b6:	f042 0201 	orreq.w	r2, r2, #1
240049ba:	b912      	cbnz	r2, 240049c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
240049bc:	4a1b      	ldr	r2, [pc, #108]	; (24004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
240049be:	4293      	cmp	r3, r2
240049c0:	d113      	bne.n	240049ea <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240049c2:	b2db      	uxtb	r3, r3
240049c4:	4c1a      	ldr	r4, [pc, #104]	; (24004a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240049c6:	4a1b      	ldr	r2, [pc, #108]	; (24004a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240049c8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240049ca:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
240049cc:	4d1a      	ldr	r5, [pc, #104]	; (24004a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240049ce:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
240049d2:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240049d4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240049d8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240049dc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240049de:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240049e2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240049e4:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
240049e6:	bc30      	pop	{r4, r5}
240049e8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240049ea:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240049ec:	4913      	ldr	r1, [pc, #76]	; (24004a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240049ee:	4c14      	ldr	r4, [pc, #80]	; (24004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240049f0:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240049f2:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240049f4:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240049f6:	fba4 2302 	umull	r2, r3, r4, r2
240049fa:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240049fe:	d800      	bhi.n	24004a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24004a00:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a02:	4a10      	ldr	r2, [pc, #64]	; (24004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a04:	f003 051f 	and.w	r5, r3, #31
24004a08:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24004a0a:	4c0f      	ldr	r4, [pc, #60]	; (24004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a0c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a0e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24004a10:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a12:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a14:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a16:	6602      	str	r2, [r0, #96]	; 0x60
}
24004a18:	e7e5      	b.n	240049e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
24004a1a:	bf00      	nop
24004a1c:	58025408 	.word	0x58025408
24004a20:	58025430 	.word	0x58025430
24004a24:	5802541c 	.word	0x5802541c
24004a28:	58025444 	.word	0x58025444
24004a2c:	58025494 	.word	0x58025494
24004a30:	cccccccd 	.word	0xcccccccd
24004a34:	16009600 	.word	0x16009600
24004a38:	58025880 	.word	0x58025880
24004a3c:	bffdfbf0 	.word	0xbffdfbf0
24004a40:	aaaaaaab 	.word	0xaaaaaaab
24004a44:	10008200 	.word	0x10008200
24004a48:	40020880 	.word	0x40020880

24004a4c <HAL_DMA_Init>:
{
24004a4c:	b538      	push	{r3, r4, r5, lr}
24004a4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004a50:	f7ff fe36 	bl	240046c0 <HAL_GetTick>
  if(hdma == NULL)
24004a54:	2c00      	cmp	r4, #0
24004a56:	f000 816b 	beq.w	24004d30 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004a5a:	6822      	ldr	r2, [r4, #0]
24004a5c:	4605      	mov	r5, r0
24004a5e:	4ba3      	ldr	r3, [pc, #652]	; (24004cec <HAL_DMA_Init+0x2a0>)
24004a60:	429a      	cmp	r2, r3
24004a62:	d048      	beq.n	24004af6 <HAL_DMA_Init+0xaa>
24004a64:	3318      	adds	r3, #24
24004a66:	429a      	cmp	r2, r3
24004a68:	d045      	beq.n	24004af6 <HAL_DMA_Init+0xaa>
24004a6a:	3330      	adds	r3, #48	; 0x30
24004a6c:	49a0      	ldr	r1, [pc, #640]	; (24004cf0 <HAL_DMA_Init+0x2a4>)
24004a6e:	428a      	cmp	r2, r1
24004a70:	bf18      	it	ne
24004a72:	429a      	cmpne	r2, r3
24004a74:	f101 0130 	add.w	r1, r1, #48	; 0x30
24004a78:	bf0c      	ite	eq
24004a7a:	2301      	moveq	r3, #1
24004a7c:	2300      	movne	r3, #0
24004a7e:	428a      	cmp	r2, r1
24004a80:	bf08      	it	eq
24004a82:	f043 0301 	orreq.w	r3, r3, #1
24004a86:	3118      	adds	r1, #24
24004a88:	428a      	cmp	r2, r1
24004a8a:	bf08      	it	eq
24004a8c:	f043 0301 	orreq.w	r3, r3, #1
24004a90:	3118      	adds	r1, #24
24004a92:	428a      	cmp	r2, r1
24004a94:	bf08      	it	eq
24004a96:	f043 0301 	orreq.w	r3, r3, #1
24004a9a:	3118      	adds	r1, #24
24004a9c:	428a      	cmp	r2, r1
24004a9e:	bf08      	it	eq
24004aa0:	f043 0301 	orreq.w	r3, r3, #1
24004aa4:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004aa8:	428a      	cmp	r2, r1
24004aaa:	bf08      	it	eq
24004aac:	f043 0301 	orreq.w	r3, r3, #1
24004ab0:	3118      	adds	r1, #24
24004ab2:	428a      	cmp	r2, r1
24004ab4:	bf08      	it	eq
24004ab6:	f043 0301 	orreq.w	r3, r3, #1
24004aba:	3118      	adds	r1, #24
24004abc:	428a      	cmp	r2, r1
24004abe:	bf08      	it	eq
24004ac0:	f043 0301 	orreq.w	r3, r3, #1
24004ac4:	3118      	adds	r1, #24
24004ac6:	428a      	cmp	r2, r1
24004ac8:	bf08      	it	eq
24004aca:	f043 0301 	orreq.w	r3, r3, #1
24004ace:	3118      	adds	r1, #24
24004ad0:	428a      	cmp	r2, r1
24004ad2:	bf08      	it	eq
24004ad4:	f043 0301 	orreq.w	r3, r3, #1
24004ad8:	3118      	adds	r1, #24
24004ada:	428a      	cmp	r2, r1
24004adc:	bf08      	it	eq
24004ade:	f043 0301 	orreq.w	r3, r3, #1
24004ae2:	3118      	adds	r1, #24
24004ae4:	428a      	cmp	r2, r1
24004ae6:	bf08      	it	eq
24004ae8:	f043 0301 	orreq.w	r3, r3, #1
24004aec:	b91b      	cbnz	r3, 24004af6 <HAL_DMA_Init+0xaa>
24004aee:	4b81      	ldr	r3, [pc, #516]	; (24004cf4 <HAL_DMA_Init+0x2a8>)
24004af0:	429a      	cmp	r2, r3
24004af2:	f040 8184 	bne.w	24004dfe <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
24004af6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004af8:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
24004afa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
24004afe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
24004b02:	6813      	ldr	r3, [r2, #0]
24004b04:	f023 0301 	bic.w	r3, r3, #1
24004b08:	6013      	str	r3, [r2, #0]
24004b0a:	e005      	b.n	24004b18 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24004b0c:	f7ff fdd8 	bl	240046c0 <HAL_GetTick>
24004b10:	1b43      	subs	r3, r0, r5
24004b12:	2b05      	cmp	r3, #5
24004b14:	f200 80fe 	bhi.w	24004d14 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24004b18:	6823      	ldr	r3, [r4, #0]
24004b1a:	681a      	ldr	r2, [r3, #0]
24004b1c:	07d0      	lsls	r0, r2, #31
24004b1e:	d4f5      	bmi.n	24004b0c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24004b20:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004b24:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24004b26:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24004b28:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004b2c:	430a      	orrs	r2, r1
24004b2e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b30:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004b32:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004b36:	69a1      	ldr	r1, [r4, #24]
24004b38:	ea42 0201 	orr.w	r2, r2, r1
24004b3c:	69e1      	ldr	r1, [r4, #28]
24004b3e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004b42:	6a21      	ldr	r1, [r4, #32]
24004b44:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24004b48:	496b      	ldr	r1, [pc, #428]	; (24004cf8 <HAL_DMA_Init+0x2ac>)
24004b4a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24004b4e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b52:	d103      	bne.n	24004b5c <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24004b54:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
24004b58:	4301      	orrs	r1, r0
24004b5a:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24004b5c:	4867      	ldr	r0, [pc, #412]	; (24004cfc <HAL_DMA_Init+0x2b0>)
24004b5e:	4968      	ldr	r1, [pc, #416]	; (24004d00 <HAL_DMA_Init+0x2b4>)
24004b60:	6800      	ldr	r0, [r0, #0]
24004b62:	4001      	ands	r1, r0
24004b64:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004b68:	d30a      	bcc.n	24004b80 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004b6a:	6861      	ldr	r1, [r4, #4]
24004b6c:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24004b70:	281f      	cmp	r0, #31
24004b72:	f240 80d6 	bls.w	24004d22 <HAL_DMA_Init+0x2d6>
24004b76:	394f      	subs	r1, #79	; 0x4f
24004b78:	2903      	cmp	r1, #3
24004b7a:	d801      	bhi.n	24004b80 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24004b7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004b80:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004b82:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24004b84:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004b86:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b88:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24004b8a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24004b8e:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b92:	d10e      	bne.n	24004bb2 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004b94:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
24004b98:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004b9a:	b150      	cbz	r0, 24004bb2 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24004b9c:	69a5      	ldr	r5, [r4, #24]
24004b9e:	2d00      	cmp	r5, #0
24004ba0:	f040 8108 	bne.w	24004db4 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
24004ba4:	2a01      	cmp	r2, #1
24004ba6:	f000 8125 	beq.w	24004df4 <HAL_DMA_Init+0x3a8>
24004baa:	f032 0202 	bics.w	r2, r2, #2
24004bae:	f000 8109 	beq.w	24004dc4 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24004bb2:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004bb4:	4620      	mov	r0, r4
24004bb6:	f7ff fe63 	bl	24004880 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004bba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004bbc:	233f      	movs	r3, #63	; 0x3f
24004bbe:	f002 021f 	and.w	r2, r2, #31
24004bc2:	4093      	lsls	r3, r2
24004bc4:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004bc6:	6822      	ldr	r2, [r4, #0]
24004bc8:	4b48      	ldr	r3, [pc, #288]	; (24004cec <HAL_DMA_Init+0x2a0>)
24004bca:	484e      	ldr	r0, [pc, #312]	; (24004d04 <HAL_DMA_Init+0x2b8>)
24004bcc:	4948      	ldr	r1, [pc, #288]	; (24004cf0 <HAL_DMA_Init+0x2a4>)
24004bce:	4282      	cmp	r2, r0
24004bd0:	bf18      	it	ne
24004bd2:	429a      	cmpne	r2, r3
24004bd4:	f100 0030 	add.w	r0, r0, #48	; 0x30
24004bd8:	bf0c      	ite	eq
24004bda:	2301      	moveq	r3, #1
24004bdc:	2300      	movne	r3, #0
24004bde:	428a      	cmp	r2, r1
24004be0:	bf08      	it	eq
24004be2:	f043 0301 	orreq.w	r3, r3, #1
24004be6:	3130      	adds	r1, #48	; 0x30
24004be8:	4282      	cmp	r2, r0
24004bea:	bf08      	it	eq
24004bec:	f043 0301 	orreq.w	r3, r3, #1
24004bf0:	3030      	adds	r0, #48	; 0x30
24004bf2:	428a      	cmp	r2, r1
24004bf4:	bf08      	it	eq
24004bf6:	f043 0301 	orreq.w	r3, r3, #1
24004bfa:	3130      	adds	r1, #48	; 0x30
24004bfc:	4282      	cmp	r2, r0
24004bfe:	bf08      	it	eq
24004c00:	f043 0301 	orreq.w	r3, r3, #1
24004c04:	3030      	adds	r0, #48	; 0x30
24004c06:	428a      	cmp	r2, r1
24004c08:	bf08      	it	eq
24004c0a:	f043 0301 	orreq.w	r3, r3, #1
24004c0e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24004c12:	4282      	cmp	r2, r0
24004c14:	bf08      	it	eq
24004c16:	f043 0301 	orreq.w	r3, r3, #1
24004c1a:	f500 705c 	add.w	r0, r0, #880	; 0x370
24004c1e:	428a      	cmp	r2, r1
24004c20:	bf08      	it	eq
24004c22:	f043 0301 	orreq.w	r3, r3, #1
24004c26:	3130      	adds	r1, #48	; 0x30
24004c28:	4282      	cmp	r2, r0
24004c2a:	bf08      	it	eq
24004c2c:	f043 0301 	orreq.w	r3, r3, #1
24004c30:	3030      	adds	r0, #48	; 0x30
24004c32:	428a      	cmp	r2, r1
24004c34:	bf08      	it	eq
24004c36:	f043 0301 	orreq.w	r3, r3, #1
24004c3a:	3130      	adds	r1, #48	; 0x30
24004c3c:	4282      	cmp	r2, r0
24004c3e:	bf08      	it	eq
24004c40:	f043 0301 	orreq.w	r3, r3, #1
24004c44:	3030      	adds	r0, #48	; 0x30
24004c46:	428a      	cmp	r2, r1
24004c48:	bf08      	it	eq
24004c4a:	f043 0301 	orreq.w	r3, r3, #1
24004c4e:	3130      	adds	r1, #48	; 0x30
24004c50:	4282      	cmp	r2, r0
24004c52:	bf08      	it	eq
24004c54:	f043 0301 	orreq.w	r3, r3, #1
24004c58:	3030      	adds	r0, #48	; 0x30
24004c5a:	428a      	cmp	r2, r1
24004c5c:	bf08      	it	eq
24004c5e:	f043 0301 	orreq.w	r3, r3, #1
24004c62:	4929      	ldr	r1, [pc, #164]	; (24004d08 <HAL_DMA_Init+0x2bc>)
24004c64:	4282      	cmp	r2, r0
24004c66:	bf08      	it	eq
24004c68:	f043 0301 	orreq.w	r3, r3, #1
24004c6c:	4827      	ldr	r0, [pc, #156]	; (24004d0c <HAL_DMA_Init+0x2c0>)
24004c6e:	428a      	cmp	r2, r1
24004c70:	bf08      	it	eq
24004c72:	f043 0301 	orreq.w	r3, r3, #1
24004c76:	3128      	adds	r1, #40	; 0x28
24004c78:	4282      	cmp	r2, r0
24004c7a:	bf08      	it	eq
24004c7c:	f043 0301 	orreq.w	r3, r3, #1
24004c80:	3028      	adds	r0, #40	; 0x28
24004c82:	428a      	cmp	r2, r1
24004c84:	bf08      	it	eq
24004c86:	f043 0301 	orreq.w	r3, r3, #1
24004c8a:	3128      	adds	r1, #40	; 0x28
24004c8c:	4282      	cmp	r2, r0
24004c8e:	bf08      	it	eq
24004c90:	f043 0301 	orreq.w	r3, r3, #1
24004c94:	3028      	adds	r0, #40	; 0x28
24004c96:	428a      	cmp	r2, r1
24004c98:	bf08      	it	eq
24004c9a:	f043 0301 	orreq.w	r3, r3, #1
24004c9e:	3128      	adds	r1, #40	; 0x28
24004ca0:	4282      	cmp	r2, r0
24004ca2:	bf08      	it	eq
24004ca4:	f043 0301 	orreq.w	r3, r3, #1
24004ca8:	428a      	cmp	r2, r1
24004caa:	bf08      	it	eq
24004cac:	f043 0301 	orreq.w	r3, r3, #1
24004cb0:	b913      	cbnz	r3, 24004cb8 <HAL_DMA_Init+0x26c>
24004cb2:	4b17      	ldr	r3, [pc, #92]	; (24004d10 <HAL_DMA_Init+0x2c4>)
24004cb4:	429a      	cmp	r2, r3
24004cb6:	d113      	bne.n	24004ce0 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24004cb8:	4620      	mov	r0, r4
24004cba:	f7ff fe5b 	bl	24004974 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24004cbe:	68a3      	ldr	r3, [r4, #8]
24004cc0:	2b80      	cmp	r3, #128	; 0x80
24004cc2:	d037      	beq.n	24004d34 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24004cc4:	7922      	ldrb	r2, [r4, #4]
24004cc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
24004cc8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004cca:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
24004cce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24004cd0:	6861      	ldr	r1, [r4, #4]
24004cd2:	1e4b      	subs	r3, r1, #1
24004cd4:	2b07      	cmp	r3, #7
24004cd6:	d931      	bls.n	24004d3c <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
24004cd8:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24004cda:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24004cde:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004ce0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24004ce2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004ce4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24004ce6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004cea:	bd38      	pop	{r3, r4, r5, pc}
24004cec:	40020010 	.word	0x40020010
24004cf0:	40020040 	.word	0x40020040
24004cf4:	400204b8 	.word	0x400204b8
24004cf8:	fe10803f 	.word	0xfe10803f
24004cfc:	5c001000 	.word	0x5c001000
24004d00:	ffff0000 	.word	0xffff0000
24004d04:	40020028 	.word	0x40020028
24004d08:	58025408 	.word	0x58025408
24004d0c:	5802541c 	.word	0x5802541c
24004d10:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004d14:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24004d16:	2303      	movs	r3, #3
        return HAL_ERROR;
24004d18:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004d1a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
24004d1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004d20:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004d22:	496a      	ldr	r1, [pc, #424]	; (24004ecc <HAL_DMA_Init+0x480>)
24004d24:	fa21 f000 	lsr.w	r0, r1, r0
24004d28:	07c1      	lsls	r1, r0, #31
24004d2a:	f57f af29 	bpl.w	24004b80 <HAL_DMA_Init+0x134>
24004d2e:	e725      	b.n	24004b7c <HAL_DMA_Init+0x130>
    return HAL_ERROR;
24004d30:	2001      	movs	r0, #1
}
24004d32:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24004d34:	2300      	movs	r3, #0
24004d36:	461a      	mov	r2, r3
24004d38:	6063      	str	r3, [r4, #4]
24004d3a:	e7c4      	b.n	24004cc6 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004d3c:	6820      	ldr	r0, [r4, #0]
24004d3e:	4a64      	ldr	r2, [pc, #400]	; (24004ed0 <HAL_DMA_Init+0x484>)
24004d40:	4d64      	ldr	r5, [pc, #400]	; (24004ed4 <HAL_DMA_Init+0x488>)
24004d42:	42a8      	cmp	r0, r5
24004d44:	bf18      	it	ne
24004d46:	4290      	cmpne	r0, r2
24004d48:	f105 0514 	add.w	r5, r5, #20
24004d4c:	bf0c      	ite	eq
24004d4e:	2201      	moveq	r2, #1
24004d50:	2200      	movne	r2, #0
24004d52:	42a8      	cmp	r0, r5
24004d54:	bf08      	it	eq
24004d56:	f042 0201 	orreq.w	r2, r2, #1
24004d5a:	3514      	adds	r5, #20
24004d5c:	42a8      	cmp	r0, r5
24004d5e:	bf08      	it	eq
24004d60:	f042 0201 	orreq.w	r2, r2, #1
24004d64:	3514      	adds	r5, #20
24004d66:	42a8      	cmp	r0, r5
24004d68:	bf08      	it	eq
24004d6a:	f042 0201 	orreq.w	r2, r2, #1
24004d6e:	3514      	adds	r5, #20
24004d70:	42a8      	cmp	r0, r5
24004d72:	bf08      	it	eq
24004d74:	f042 0201 	orreq.w	r2, r2, #1
24004d78:	3514      	adds	r5, #20
24004d7a:	42a8      	cmp	r0, r5
24004d7c:	bf08      	it	eq
24004d7e:	f042 0201 	orreq.w	r2, r2, #1
24004d82:	b93a      	cbnz	r2, 24004d94 <HAL_DMA_Init+0x348>
24004d84:	4a54      	ldr	r2, [pc, #336]	; (24004ed8 <HAL_DMA_Init+0x48c>)
24004d86:	4290      	cmp	r0, r2
24004d88:	d004      	beq.n	24004d94 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004d8a:	4a54      	ldr	r2, [pc, #336]	; (24004edc <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004d8c:	4854      	ldr	r0, [pc, #336]	; (24004ee0 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004d8e:	440a      	add	r2, r1
24004d90:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004d92:	e003      	b.n	24004d9c <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004d94:	4a53      	ldr	r2, [pc, #332]	; (24004ee4 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24004d96:	4854      	ldr	r0, [pc, #336]	; (24004ee8 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004d98:	440a      	add	r2, r1
24004d9a:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004d9c:	2101      	movs	r1, #1
24004d9e:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004da2:	2100      	movs	r1, #0
24004da4:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004da8:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004daa:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004dac:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24004db0:	605a      	str	r2, [r3, #4]
24004db2:	e795      	b.n	24004ce0 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24004db4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
24004db8:	d00e      	beq.n	24004dd8 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
24004dba:	2a02      	cmp	r2, #2
24004dbc:	d905      	bls.n	24004dca <HAL_DMA_Init+0x37e>
24004dbe:	2a03      	cmp	r2, #3
24004dc0:	f47f aef7 	bne.w	24004bb2 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24004dc4:	01c2      	lsls	r2, r0, #7
24004dc6:	f57f aef4 	bpl.w	24004bb2 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
24004dca:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004dcc:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
24004dce:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004dd0:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24004dd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004dd6:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24004dd8:	2a03      	cmp	r2, #3
24004dda:	f63f aeea 	bhi.w	24004bb2 <HAL_DMA_Init+0x166>
24004dde:	a501      	add	r5, pc, #4	; (adr r5, 24004de4 <HAL_DMA_Init+0x398>)
24004de0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24004de4:	24004dcb 	.word	0x24004dcb
24004de8:	24004dc5 	.word	0x24004dc5
24004dec:	24004dcb 	.word	0x24004dcb
24004df0:	24004df5 	.word	0x24004df5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24004df4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24004df8:	f47f aedb 	bne.w	24004bb2 <HAL_DMA_Init+0x166>
24004dfc:	e7e5      	b.n	24004dca <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24004dfe:	4b34      	ldr	r3, [pc, #208]	; (24004ed0 <HAL_DMA_Init+0x484>)
24004e00:	4834      	ldr	r0, [pc, #208]	; (24004ed4 <HAL_DMA_Init+0x488>)
24004e02:	493a      	ldr	r1, [pc, #232]	; (24004eec <HAL_DMA_Init+0x4a0>)
24004e04:	4282      	cmp	r2, r0
24004e06:	bf18      	it	ne
24004e08:	429a      	cmpne	r2, r3
24004e0a:	f100 0028 	add.w	r0, r0, #40	; 0x28
24004e0e:	bf0c      	ite	eq
24004e10:	2301      	moveq	r3, #1
24004e12:	2300      	movne	r3, #0
24004e14:	428a      	cmp	r2, r1
24004e16:	bf08      	it	eq
24004e18:	f043 0301 	orreq.w	r3, r3, #1
24004e1c:	3128      	adds	r1, #40	; 0x28
24004e1e:	4282      	cmp	r2, r0
24004e20:	bf08      	it	eq
24004e22:	f043 0301 	orreq.w	r3, r3, #1
24004e26:	3028      	adds	r0, #40	; 0x28
24004e28:	428a      	cmp	r2, r1
24004e2a:	bf08      	it	eq
24004e2c:	f043 0301 	orreq.w	r3, r3, #1
24004e30:	3128      	adds	r1, #40	; 0x28
24004e32:	4282      	cmp	r2, r0
24004e34:	bf08      	it	eq
24004e36:	f043 0301 	orreq.w	r3, r3, #1
24004e3a:	428a      	cmp	r2, r1
24004e3c:	bf08      	it	eq
24004e3e:	f043 0301 	orreq.w	r3, r3, #1
24004e42:	b913      	cbnz	r3, 24004e4a <HAL_DMA_Init+0x3fe>
24004e44:	4b24      	ldr	r3, [pc, #144]	; (24004ed8 <HAL_DMA_Init+0x48c>)
24004e46:	429a      	cmp	r2, r3
24004e48:	d139      	bne.n	24004ebe <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
24004e4a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004e4c:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004e4e:	4928      	ldr	r1, [pc, #160]	; (24004ef0 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24004e50:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004e54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24004e58:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004e5a:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004e5c:	68a3      	ldr	r3, [r4, #8]
24004e5e:	2b40      	cmp	r3, #64	; 0x40
24004e60:	d02b      	beq.n	24004eba <HAL_DMA_Init+0x46e>
24004e62:	2b80      	cmp	r3, #128	; 0x80
24004e64:	bf0c      	ite	eq
24004e66:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
24004e6a:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24004e6c:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
24004e70:	08db      	lsrs	r3, r3, #3
24004e72:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24004e76:	6965      	ldr	r5, [r4, #20]
24004e78:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24004e7c:	69a5      	ldr	r5, [r4, #24]
24004e7e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24004e82:	69e5      	ldr	r5, [r4, #28]
24004e84:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24004e88:	6a25      	ldr	r5, [r4, #32]
24004e8a:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24004e8e:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004e90:	4918      	ldr	r1, [pc, #96]	; (24004ef4 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004e92:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004e94:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24004e96:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004e98:	6822      	ldr	r2, [r4, #0]
24004e9a:	4b17      	ldr	r3, [pc, #92]	; (24004ef8 <HAL_DMA_Init+0x4ac>)
24004e9c:	4411      	add	r1, r2
24004e9e:	fba3 2301 	umull	r2, r3, r3, r1
24004ea2:	091b      	lsrs	r3, r3, #4
24004ea4:	009b      	lsls	r3, r3, #2
24004ea6:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004ea8:	f7ff fcea 	bl	24004880 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004eac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004eae:	2301      	movs	r3, #1
24004eb0:	f002 021f 	and.w	r2, r2, #31
24004eb4:	4093      	lsls	r3, r2
24004eb6:	6043      	str	r3, [r0, #4]
24004eb8:	e685      	b.n	24004bc6 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004eba:	2010      	movs	r0, #16
24004ebc:	e7d6      	b.n	24004e6c <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004ebe:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24004ec0:	2303      	movs	r3, #3
    return HAL_ERROR;
24004ec2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004ec4:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24004ec6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004eca:	bd38      	pop	{r3, r4, r5, pc}
24004ecc:	c3c0003f 	.word	0xc3c0003f
24004ed0:	58025408 	.word	0x58025408
24004ed4:	5802541c 	.word	0x5802541c
24004ed8:	58025494 	.word	0x58025494
24004edc:	1000823f 	.word	0x1000823f
24004ee0:	40020940 	.word	0x40020940
24004ee4:	1600963f 	.word	0x1600963f
24004ee8:	58025940 	.word	0x58025940
24004eec:	58025430 	.word	0x58025430
24004ef0:	fffe000f 	.word	0xfffe000f
24004ef4:	a7fdabf8 	.word	0xa7fdabf8
24004ef8:	cccccccd 	.word	0xcccccccd

24004efc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24004efc:	2800      	cmp	r0, #0
24004efe:	f000 8270 	beq.w	240053e2 <HAL_DMA_Start_IT+0x4e6>
24004f02:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24004f04:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24004f08:	2801      	cmp	r0, #1
24004f0a:	f000 826c 	beq.w	240053e6 <HAL_DMA_Start_IT+0x4ea>
24004f0e:	2001      	movs	r0, #1
{
24004f10:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
24004f12:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24004f16:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24004f1a:	4284      	cmp	r4, r0
24004f1c:	d008      	beq.n	24004f30 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
24004f22:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004f24:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24004f28:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24004f2c:	bc70      	pop	{r4, r5, r6}
24004f2e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
24004f30:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
24004f32:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004f36:	4ea2      	ldr	r6, [pc, #648]	; (240051c0 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24004f38:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004f3c:	2000      	movs	r0, #0
24004f3e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24004f42:	6820      	ldr	r0, [r4, #0]
24004f44:	f020 0001 	bic.w	r0, r0, #1
24004f48:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004f4a:	489e      	ldr	r0, [pc, #632]	; (240051c4 <HAL_DMA_Start_IT+0x2c8>)
24004f4c:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24004f50:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004f54:	42b4      	cmp	r4, r6
24004f56:	bf18      	it	ne
24004f58:	4284      	cmpne	r4, r0
24004f5a:	f106 0618 	add.w	r6, r6, #24
24004f5e:	bf0c      	ite	eq
24004f60:	2001      	moveq	r0, #1
24004f62:	2000      	movne	r0, #0
24004f64:	42b4      	cmp	r4, r6
24004f66:	bf08      	it	eq
24004f68:	f040 0001 	orreq.w	r0, r0, #1
24004f6c:	3618      	adds	r6, #24
24004f6e:	42b4      	cmp	r4, r6
24004f70:	bf08      	it	eq
24004f72:	f040 0001 	orreq.w	r0, r0, #1
24004f76:	3618      	adds	r6, #24
24004f78:	42b4      	cmp	r4, r6
24004f7a:	bf08      	it	eq
24004f7c:	f040 0001 	orreq.w	r0, r0, #1
24004f80:	3618      	adds	r6, #24
24004f82:	42b4      	cmp	r4, r6
24004f84:	bf08      	it	eq
24004f86:	f040 0001 	orreq.w	r0, r0, #1
24004f8a:	3618      	adds	r6, #24
24004f8c:	42b4      	cmp	r4, r6
24004f8e:	bf08      	it	eq
24004f90:	f040 0001 	orreq.w	r0, r0, #1
24004f94:	3618      	adds	r6, #24
24004f96:	42b4      	cmp	r4, r6
24004f98:	bf08      	it	eq
24004f9a:	f040 0001 	orreq.w	r0, r0, #1
24004f9e:	f506 7656 	add.w	r6, r6, #856	; 0x358
24004fa2:	42b4      	cmp	r4, r6
24004fa4:	bf08      	it	eq
24004fa6:	f040 0001 	orreq.w	r0, r0, #1
24004faa:	3618      	adds	r6, #24
24004fac:	42b4      	cmp	r4, r6
24004fae:	bf08      	it	eq
24004fb0:	f040 0001 	orreq.w	r0, r0, #1
24004fb4:	3618      	adds	r6, #24
24004fb6:	42b4      	cmp	r4, r6
24004fb8:	bf08      	it	eq
24004fba:	f040 0001 	orreq.w	r0, r0, #1
24004fbe:	3618      	adds	r6, #24
24004fc0:	42b4      	cmp	r4, r6
24004fc2:	bf08      	it	eq
24004fc4:	f040 0001 	orreq.w	r0, r0, #1
24004fc8:	3618      	adds	r6, #24
24004fca:	42b4      	cmp	r4, r6
24004fcc:	bf08      	it	eq
24004fce:	f040 0001 	orreq.w	r0, r0, #1
24004fd2:	3618      	adds	r6, #24
24004fd4:	42b4      	cmp	r4, r6
24004fd6:	bf08      	it	eq
24004fd8:	f040 0001 	orreq.w	r0, r0, #1
24004fdc:	3618      	adds	r6, #24
24004fde:	42b4      	cmp	r4, r6
24004fe0:	bf08      	it	eq
24004fe2:	f040 0001 	orreq.w	r0, r0, #1
24004fe6:	3618      	adds	r6, #24
24004fe8:	42b4      	cmp	r4, r6
24004fea:	bf08      	it	eq
24004fec:	f040 0001 	orreq.w	r0, r0, #1
24004ff0:	4e75      	ldr	r6, [pc, #468]	; (240051c8 <HAL_DMA_Start_IT+0x2cc>)
24004ff2:	42b4      	cmp	r4, r6
24004ff4:	bf08      	it	eq
24004ff6:	f040 0001 	orreq.w	r0, r0, #1
24004ffa:	3614      	adds	r6, #20
24004ffc:	42b4      	cmp	r4, r6
24004ffe:	bf08      	it	eq
24005000:	f040 0001 	orreq.w	r0, r0, #1
24005004:	3614      	adds	r6, #20
24005006:	42b4      	cmp	r4, r6
24005008:	bf08      	it	eq
2400500a:	f040 0001 	orreq.w	r0, r0, #1
2400500e:	3614      	adds	r6, #20
24005010:	42b4      	cmp	r4, r6
24005012:	bf08      	it	eq
24005014:	f040 0001 	orreq.w	r0, r0, #1
24005018:	3614      	adds	r6, #20
2400501a:	42b4      	cmp	r4, r6
2400501c:	bf08      	it	eq
2400501e:	f040 0001 	orreq.w	r0, r0, #1
24005022:	3614      	adds	r6, #20
24005024:	42b4      	cmp	r4, r6
24005026:	bf08      	it	eq
24005028:	f040 0001 	orreq.w	r0, r0, #1
2400502c:	3614      	adds	r6, #20
2400502e:	42b4      	cmp	r4, r6
24005030:	bf08      	it	eq
24005032:	f040 0001 	orreq.w	r0, r0, #1
24005036:	b910      	cbnz	r0, 2400503e <HAL_DMA_Start_IT+0x142>
24005038:	4864      	ldr	r0, [pc, #400]	; (240051cc <HAL_DMA_Start_IT+0x2d0>)
2400503a:	4284      	cmp	r4, r0
2400503c:	d10a      	bne.n	24005054 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400503e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
24005042:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24005044:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24005048:	b110      	cbz	r0, 24005050 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400504a:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
2400504e:	6044      	str	r4, [r0, #4]
24005050:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005054:	485b      	ldr	r0, [pc, #364]	; (240051c4 <HAL_DMA_Start_IT+0x2c8>)
24005056:	4e5a      	ldr	r6, [pc, #360]	; (240051c0 <HAL_DMA_Start_IT+0x2c4>)
24005058:	42b4      	cmp	r4, r6
2400505a:	bf18      	it	ne
2400505c:	4284      	cmpne	r4, r0
2400505e:	f106 0618 	add.w	r6, r6, #24
24005062:	bf0c      	ite	eq
24005064:	2001      	moveq	r0, #1
24005066:	2000      	movne	r0, #0
24005068:	42b4      	cmp	r4, r6
2400506a:	bf08      	it	eq
2400506c:	f040 0001 	orreq.w	r0, r0, #1
24005070:	3618      	adds	r6, #24
24005072:	42b4      	cmp	r4, r6
24005074:	bf08      	it	eq
24005076:	f040 0001 	orreq.w	r0, r0, #1
2400507a:	3618      	adds	r6, #24
2400507c:	42b4      	cmp	r4, r6
2400507e:	bf08      	it	eq
24005080:	f040 0001 	orreq.w	r0, r0, #1
24005084:	3618      	adds	r6, #24
24005086:	42b4      	cmp	r4, r6
24005088:	bf08      	it	eq
2400508a:	f040 0001 	orreq.w	r0, r0, #1
2400508e:	3618      	adds	r6, #24
24005090:	42b4      	cmp	r4, r6
24005092:	bf08      	it	eq
24005094:	f040 0001 	orreq.w	r0, r0, #1
24005098:	3618      	adds	r6, #24
2400509a:	42b4      	cmp	r4, r6
2400509c:	bf08      	it	eq
2400509e:	f040 0001 	orreq.w	r0, r0, #1
240050a2:	f506 7656 	add.w	r6, r6, #856	; 0x358
240050a6:	42b4      	cmp	r4, r6
240050a8:	bf08      	it	eq
240050aa:	f040 0001 	orreq.w	r0, r0, #1
240050ae:	3618      	adds	r6, #24
240050b0:	42b4      	cmp	r4, r6
240050b2:	bf08      	it	eq
240050b4:	f040 0001 	orreq.w	r0, r0, #1
240050b8:	3618      	adds	r6, #24
240050ba:	42b4      	cmp	r4, r6
240050bc:	bf08      	it	eq
240050be:	f040 0001 	orreq.w	r0, r0, #1
240050c2:	3618      	adds	r6, #24
240050c4:	42b4      	cmp	r4, r6
240050c6:	bf08      	it	eq
240050c8:	f040 0001 	orreq.w	r0, r0, #1
240050cc:	3618      	adds	r6, #24
240050ce:	42b4      	cmp	r4, r6
240050d0:	bf08      	it	eq
240050d2:	f040 0001 	orreq.w	r0, r0, #1
240050d6:	3618      	adds	r6, #24
240050d8:	42b4      	cmp	r4, r6
240050da:	bf08      	it	eq
240050dc:	f040 0001 	orreq.w	r0, r0, #1
240050e0:	3618      	adds	r6, #24
240050e2:	42b4      	cmp	r4, r6
240050e4:	bf08      	it	eq
240050e6:	f040 0001 	orreq.w	r0, r0, #1
240050ea:	b918      	cbnz	r0, 240050f4 <HAL_DMA_Start_IT+0x1f8>
240050ec:	4838      	ldr	r0, [pc, #224]	; (240051d0 <HAL_DMA_Start_IT+0x2d4>)
240050ee:	4284      	cmp	r4, r0
240050f0:	f040 817b 	bne.w	240053ea <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240050f4:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
240050f8:	f000 041f 	and.w	r4, r0, #31
240050fc:	203f      	movs	r0, #63	; 0x3f
240050fe:	40a0      	lsls	r0, r4
24005100:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24005102:	f8dc 4000 	ldr.w	r4, [ip]
24005106:	6820      	ldr	r0, [r4, #0]
24005108:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
2400510c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2400510e:	f8dc 0000 	ldr.w	r0, [ip]
24005112:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24005114:	f8dc 3008 	ldr.w	r3, [ip, #8]
24005118:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
2400511a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400511e:	f000 815b 	beq.w	240053d8 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24005122:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24005124:	f8dc 3000 	ldr.w	r3, [ip]
24005128:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400512a:	f8dc 4000 	ldr.w	r4, [ip]
2400512e:	4b25      	ldr	r3, [pc, #148]	; (240051c4 <HAL_DMA_Start_IT+0x2c8>)
24005130:	4923      	ldr	r1, [pc, #140]	; (240051c0 <HAL_DMA_Start_IT+0x2c4>)
24005132:	4a28      	ldr	r2, [pc, #160]	; (240051d4 <HAL_DMA_Start_IT+0x2d8>)
24005134:	428c      	cmp	r4, r1
24005136:	bf18      	it	ne
24005138:	429c      	cmpne	r4, r3
2400513a:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400513e:	bf0c      	ite	eq
24005140:	2301      	moveq	r3, #1
24005142:	2300      	movne	r3, #0
24005144:	4294      	cmp	r4, r2
24005146:	bf08      	it	eq
24005148:	f043 0301 	orreq.w	r3, r3, #1
2400514c:	3230      	adds	r2, #48	; 0x30
2400514e:	428c      	cmp	r4, r1
24005150:	bf08      	it	eq
24005152:	f043 0301 	orreq.w	r3, r3, #1
24005156:	3130      	adds	r1, #48	; 0x30
24005158:	4294      	cmp	r4, r2
2400515a:	bf08      	it	eq
2400515c:	f043 0301 	orreq.w	r3, r3, #1
24005160:	3230      	adds	r2, #48	; 0x30
24005162:	428c      	cmp	r4, r1
24005164:	bf08      	it	eq
24005166:	f043 0301 	orreq.w	r3, r3, #1
2400516a:	3130      	adds	r1, #48	; 0x30
2400516c:	4294      	cmp	r4, r2
2400516e:	bf08      	it	eq
24005170:	f043 0301 	orreq.w	r3, r3, #1
24005174:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005178:	428c      	cmp	r4, r1
2400517a:	bf08      	it	eq
2400517c:	f043 0301 	orreq.w	r3, r3, #1
24005180:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005184:	4294      	cmp	r4, r2
24005186:	bf08      	it	eq
24005188:	f043 0301 	orreq.w	r3, r3, #1
2400518c:	3230      	adds	r2, #48	; 0x30
2400518e:	428c      	cmp	r4, r1
24005190:	bf08      	it	eq
24005192:	f043 0301 	orreq.w	r3, r3, #1
24005196:	3130      	adds	r1, #48	; 0x30
24005198:	4294      	cmp	r4, r2
2400519a:	bf08      	it	eq
2400519c:	f043 0301 	orreq.w	r3, r3, #1
240051a0:	3230      	adds	r2, #48	; 0x30
240051a2:	428c      	cmp	r4, r1
240051a4:	bf08      	it	eq
240051a6:	f043 0301 	orreq.w	r3, r3, #1
240051aa:	3130      	adds	r1, #48	; 0x30
240051ac:	4294      	cmp	r4, r2
240051ae:	bf08      	it	eq
240051b0:	f043 0301 	orreq.w	r3, r3, #1
240051b4:	3230      	adds	r2, #48	; 0x30
240051b6:	428c      	cmp	r4, r1
240051b8:	bf08      	it	eq
240051ba:	f043 0301 	orreq.w	r3, r3, #1
240051be:	e00b      	b.n	240051d8 <HAL_DMA_Start_IT+0x2dc>
240051c0:	40020028 	.word	0x40020028
240051c4:	40020010 	.word	0x40020010
240051c8:	58025408 	.word	0x58025408
240051cc:	58025494 	.word	0x58025494
240051d0:	400204b8 	.word	0x400204b8
240051d4:	40020040 	.word	0x40020040
240051d8:	4294      	cmp	r4, r2
240051da:	bf08      	it	eq
240051dc:	f043 0301 	orreq.w	r3, r3, #1
240051e0:	b91b      	cbnz	r3, 240051ea <HAL_DMA_Start_IT+0x2ee>
240051e2:	4b9b      	ldr	r3, [pc, #620]	; (24005450 <HAL_DMA_Start_IT+0x554>)
240051e4:	429c      	cmp	r4, r3
240051e6:	f040 8143 	bne.w	24005470 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240051ea:	6823      	ldr	r3, [r4, #0]
240051ec:	f023 031e 	bic.w	r3, r3, #30
240051f0:	f043 0316 	orr.w	r3, r3, #22
240051f4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
240051f6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
240051fa:	b12b      	cbz	r3, 24005208 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
240051fc:	f8dc 2000 	ldr.w	r2, [ip]
24005200:	6813      	ldr	r3, [r2, #0]
24005202:	f043 0308 	orr.w	r3, r3, #8
24005206:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005208:	f8dc 4000 	ldr.w	r4, [ip]
2400520c:	4b91      	ldr	r3, [pc, #580]	; (24005454 <HAL_DMA_Start_IT+0x558>)
2400520e:	4992      	ldr	r1, [pc, #584]	; (24005458 <HAL_DMA_Start_IT+0x55c>)
24005210:	4a92      	ldr	r2, [pc, #584]	; (2400545c <HAL_DMA_Start_IT+0x560>)
24005212:	428c      	cmp	r4, r1
24005214:	bf18      	it	ne
24005216:	429c      	cmpne	r4, r3
24005218:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400521c:	bf0c      	ite	eq
2400521e:	2301      	moveq	r3, #1
24005220:	2300      	movne	r3, #0
24005222:	4294      	cmp	r4, r2
24005224:	bf08      	it	eq
24005226:	f043 0301 	orreq.w	r3, r3, #1
2400522a:	3230      	adds	r2, #48	; 0x30
2400522c:	428c      	cmp	r4, r1
2400522e:	bf08      	it	eq
24005230:	f043 0301 	orreq.w	r3, r3, #1
24005234:	3130      	adds	r1, #48	; 0x30
24005236:	4294      	cmp	r4, r2
24005238:	bf08      	it	eq
2400523a:	f043 0301 	orreq.w	r3, r3, #1
2400523e:	3230      	adds	r2, #48	; 0x30
24005240:	428c      	cmp	r4, r1
24005242:	bf08      	it	eq
24005244:	f043 0301 	orreq.w	r3, r3, #1
24005248:	3130      	adds	r1, #48	; 0x30
2400524a:	4294      	cmp	r4, r2
2400524c:	bf08      	it	eq
2400524e:	f043 0301 	orreq.w	r3, r3, #1
24005252:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005256:	428c      	cmp	r4, r1
24005258:	bf08      	it	eq
2400525a:	f043 0301 	orreq.w	r3, r3, #1
2400525e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005262:	4294      	cmp	r4, r2
24005264:	bf08      	it	eq
24005266:	f043 0301 	orreq.w	r3, r3, #1
2400526a:	3230      	adds	r2, #48	; 0x30
2400526c:	428c      	cmp	r4, r1
2400526e:	bf08      	it	eq
24005270:	f043 0301 	orreq.w	r3, r3, #1
24005274:	3130      	adds	r1, #48	; 0x30
24005276:	4294      	cmp	r4, r2
24005278:	bf08      	it	eq
2400527a:	f043 0301 	orreq.w	r3, r3, #1
2400527e:	3230      	adds	r2, #48	; 0x30
24005280:	428c      	cmp	r4, r1
24005282:	bf08      	it	eq
24005284:	f043 0301 	orreq.w	r3, r3, #1
24005288:	3130      	adds	r1, #48	; 0x30
2400528a:	4294      	cmp	r4, r2
2400528c:	bf08      	it	eq
2400528e:	f043 0301 	orreq.w	r3, r3, #1
24005292:	3230      	adds	r2, #48	; 0x30
24005294:	428c      	cmp	r4, r1
24005296:	bf08      	it	eq
24005298:	f043 0301 	orreq.w	r3, r3, #1
2400529c:	3130      	adds	r1, #48	; 0x30
2400529e:	4294      	cmp	r4, r2
240052a0:	bf08      	it	eq
240052a2:	f043 0301 	orreq.w	r3, r3, #1
240052a6:	4a6e      	ldr	r2, [pc, #440]	; (24005460 <HAL_DMA_Start_IT+0x564>)
240052a8:	428c      	cmp	r4, r1
240052aa:	bf08      	it	eq
240052ac:	f043 0301 	orreq.w	r3, r3, #1
240052b0:	496c      	ldr	r1, [pc, #432]	; (24005464 <HAL_DMA_Start_IT+0x568>)
240052b2:	4294      	cmp	r4, r2
240052b4:	bf08      	it	eq
240052b6:	f043 0301 	orreq.w	r3, r3, #1
240052ba:	3228      	adds	r2, #40	; 0x28
240052bc:	428c      	cmp	r4, r1
240052be:	bf08      	it	eq
240052c0:	f043 0301 	orreq.w	r3, r3, #1
240052c4:	3128      	adds	r1, #40	; 0x28
240052c6:	4294      	cmp	r4, r2
240052c8:	bf08      	it	eq
240052ca:	f043 0301 	orreq.w	r3, r3, #1
240052ce:	3228      	adds	r2, #40	; 0x28
240052d0:	428c      	cmp	r4, r1
240052d2:	bf08      	it	eq
240052d4:	f043 0301 	orreq.w	r3, r3, #1
240052d8:	3128      	adds	r1, #40	; 0x28
240052da:	4294      	cmp	r4, r2
240052dc:	bf08      	it	eq
240052de:	f043 0301 	orreq.w	r3, r3, #1
240052e2:	3228      	adds	r2, #40	; 0x28
240052e4:	428c      	cmp	r4, r1
240052e6:	bf08      	it	eq
240052e8:	f043 0301 	orreq.w	r3, r3, #1
240052ec:	4294      	cmp	r4, r2
240052ee:	bf08      	it	eq
240052f0:	f043 0301 	orreq.w	r3, r3, #1
240052f4:	b913      	cbnz	r3, 240052fc <HAL_DMA_Start_IT+0x400>
240052f6:	4b5c      	ldr	r3, [pc, #368]	; (24005468 <HAL_DMA_Start_IT+0x56c>)
240052f8:	429c      	cmp	r4, r3
240052fa:	d111      	bne.n	24005320 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240052fc:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
24005300:	681a      	ldr	r2, [r3, #0]
24005302:	03d2      	lsls	r2, r2, #15
24005304:	d503      	bpl.n	2400530e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24005306:	681a      	ldr	r2, [r3, #0]
24005308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400530c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
2400530e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
24005312:	b11b      	cbz	r3, 2400531c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24005314:	681a      	ldr	r2, [r3, #0]
24005316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400531a:	601a      	str	r2, [r3, #0]
2400531c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
24005320:	4b4c      	ldr	r3, [pc, #304]	; (24005454 <HAL_DMA_Start_IT+0x558>)
24005322:	494d      	ldr	r1, [pc, #308]	; (24005458 <HAL_DMA_Start_IT+0x55c>)
24005324:	4a4d      	ldr	r2, [pc, #308]	; (2400545c <HAL_DMA_Start_IT+0x560>)
24005326:	428c      	cmp	r4, r1
24005328:	bf18      	it	ne
2400532a:	429c      	cmpne	r4, r3
2400532c:	484f      	ldr	r0, [pc, #316]	; (2400546c <HAL_DMA_Start_IT+0x570>)
2400532e:	f101 0160 	add.w	r1, r1, #96	; 0x60
24005332:	bf0c      	ite	eq
24005334:	2301      	moveq	r3, #1
24005336:	2300      	movne	r3, #0
24005338:	4294      	cmp	r4, r2
2400533a:	bf08      	it	eq
2400533c:	f043 0301 	orreq.w	r3, r3, #1
24005340:	3230      	adds	r2, #48	; 0x30
24005342:	4284      	cmp	r4, r0
24005344:	bf08      	it	eq
24005346:	f043 0301 	orreq.w	r3, r3, #1
2400534a:	3060      	adds	r0, #96	; 0x60
2400534c:	4294      	cmp	r4, r2
2400534e:	bf08      	it	eq
24005350:	f043 0301 	orreq.w	r3, r3, #1
24005354:	3230      	adds	r2, #48	; 0x30
24005356:	428c      	cmp	r4, r1
24005358:	bf08      	it	eq
2400535a:	f043 0301 	orreq.w	r3, r3, #1
2400535e:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
24005362:	4294      	cmp	r4, r2
24005364:	bf08      	it	eq
24005366:	f043 0301 	orreq.w	r3, r3, #1
2400536a:	f502 725c 	add.w	r2, r2, #880	; 0x370
2400536e:	4284      	cmp	r4, r0
24005370:	bf08      	it	eq
24005372:	f043 0301 	orreq.w	r3, r3, #1
24005376:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
2400537a:	4294      	cmp	r4, r2
2400537c:	bf08      	it	eq
2400537e:	f043 0301 	orreq.w	r3, r3, #1
24005382:	3230      	adds	r2, #48	; 0x30
24005384:	428c      	cmp	r4, r1
24005386:	bf08      	it	eq
24005388:	f043 0301 	orreq.w	r3, r3, #1
2400538c:	3160      	adds	r1, #96	; 0x60
2400538e:	4294      	cmp	r4, r2
24005390:	bf08      	it	eq
24005392:	f043 0301 	orreq.w	r3, r3, #1
24005396:	3230      	adds	r2, #48	; 0x30
24005398:	4284      	cmp	r4, r0
2400539a:	bf08      	it	eq
2400539c:	f043 0301 	orreq.w	r3, r3, #1
240053a0:	4294      	cmp	r4, r2
240053a2:	bf08      	it	eq
240053a4:	f043 0301 	orreq.w	r3, r3, #1
240053a8:	3230      	adds	r2, #48	; 0x30
240053aa:	428c      	cmp	r4, r1
240053ac:	bf08      	it	eq
240053ae:	f043 0301 	orreq.w	r3, r3, #1
240053b2:	4294      	cmp	r4, r2
240053b4:	bf08      	it	eq
240053b6:	f043 0301 	orreq.w	r3, r3, #1
240053ba:	b933      	cbnz	r3, 240053ca <HAL_DMA_Start_IT+0x4ce>
240053bc:	3060      	adds	r0, #96	; 0x60
240053be:	1a20      	subs	r0, r4, r0
240053c0:	fab0 f080 	clz	r0, r0
240053c4:	0940      	lsrs	r0, r0, #5
240053c6:	2800      	cmp	r0, #0
240053c8:	d03d      	beq.n	24005446 <HAL_DMA_Start_IT+0x54a>
240053ca:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
240053cc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
240053ce:	f043 0301 	orr.w	r3, r3, #1
240053d2:	6023      	str	r3, [r4, #0]
}
240053d4:	bc70      	pop	{r4, r5, r6}
240053d6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240053d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
240053da:	f8dc 3000 	ldr.w	r3, [ip]
240053de:	60d9      	str	r1, [r3, #12]
240053e0:	e6a3      	b.n	2400512a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
240053e2:	2001      	movs	r0, #1
240053e4:	4770      	bx	lr
  __HAL_LOCK(hdma);
240053e6:	2002      	movs	r0, #2
}
240053e8:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240053ea:	481d      	ldr	r0, [pc, #116]	; (24005460 <HAL_DMA_Start_IT+0x564>)
240053ec:	4e1d      	ldr	r6, [pc, #116]	; (24005464 <HAL_DMA_Start_IT+0x568>)
240053ee:	42b4      	cmp	r4, r6
240053f0:	bf18      	it	ne
240053f2:	4284      	cmpne	r4, r0
240053f4:	f106 0614 	add.w	r6, r6, #20
240053f8:	bf0c      	ite	eq
240053fa:	2001      	moveq	r0, #1
240053fc:	2000      	movne	r0, #0
240053fe:	42b4      	cmp	r4, r6
24005400:	bf08      	it	eq
24005402:	f040 0001 	orreq.w	r0, r0, #1
24005406:	3614      	adds	r6, #20
24005408:	42b4      	cmp	r4, r6
2400540a:	bf08      	it	eq
2400540c:	f040 0001 	orreq.w	r0, r0, #1
24005410:	3614      	adds	r6, #20
24005412:	42b4      	cmp	r4, r6
24005414:	bf08      	it	eq
24005416:	f040 0001 	orreq.w	r0, r0, #1
2400541a:	3614      	adds	r6, #20
2400541c:	42b4      	cmp	r4, r6
2400541e:	bf08      	it	eq
24005420:	f040 0001 	orreq.w	r0, r0, #1
24005424:	3614      	adds	r6, #20
24005426:	42b4      	cmp	r4, r6
24005428:	bf08      	it	eq
2400542a:	f040 0001 	orreq.w	r0, r0, #1
2400542e:	b910      	cbnz	r0, 24005436 <HAL_DMA_Start_IT+0x53a>
24005430:	480d      	ldr	r0, [pc, #52]	; (24005468 <HAL_DMA_Start_IT+0x56c>)
24005432:	4284      	cmp	r4, r0
24005434:	d11c      	bne.n	24005470 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005436:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
2400543a:	f000 041f 	and.w	r4, r0, #31
2400543e:	2001      	movs	r0, #1
24005440:	40a0      	lsls	r0, r4
24005442:	6068      	str	r0, [r5, #4]
24005444:	e663      	b.n	2400510e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
24005446:	6823      	ldr	r3, [r4, #0]
24005448:	f043 0301 	orr.w	r3, r3, #1
2400544c:	6023      	str	r3, [r4, #0]
2400544e:	e56d      	b.n	24004f2c <HAL_DMA_Start_IT+0x30>
24005450:	400204b8 	.word	0x400204b8
24005454:	40020010 	.word	0x40020010
24005458:	40020028 	.word	0x40020028
2400545c:	40020040 	.word	0x40020040
24005460:	58025408 	.word	0x58025408
24005464:	5802541c 	.word	0x5802541c
24005468:	58025494 	.word	0x58025494
2400546c:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24005470:	6823      	ldr	r3, [r4, #0]
24005472:	f023 030e 	bic.w	r3, r3, #14
24005476:	f043 030a 	orr.w	r3, r3, #10
2400547a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400547c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24005480:	2b00      	cmp	r3, #0
24005482:	f43f aec1 	beq.w	24005208 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24005486:	f8dc 2000 	ldr.w	r2, [ip]
2400548a:	6813      	ldr	r3, [r2, #0]
2400548c:	f043 0304 	orr.w	r3, r3, #4
24005490:	6013      	str	r3, [r2, #0]
24005492:	e6b9      	b.n	24005208 <HAL_DMA_Start_IT+0x30c>

24005494 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24005494:	2800      	cmp	r0, #0
24005496:	d065      	beq.n	24005564 <HAL_DMA_Abort_IT+0xd0>
{
24005498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
2400549c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
240054a0:	4603      	mov	r3, r0
240054a2:	2a02      	cmp	r2, #2
240054a4:	d159      	bne.n	2400555a <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240054a6:	6801      	ldr	r1, [r0, #0]
240054a8:	4883      	ldr	r0, [pc, #524]	; (240056b8 <HAL_DMA_Abort_IT+0x224>)
240054aa:	4281      	cmp	r1, r0
240054ac:	d04b      	beq.n	24005546 <HAL_DMA_Abort_IT+0xb2>
240054ae:	4c83      	ldr	r4, [pc, #524]	; (240056bc <HAL_DMA_Abort_IT+0x228>)
240054b0:	42a1      	cmp	r1, r4
240054b2:	d048      	beq.n	24005546 <HAL_DMA_Abort_IT+0xb2>
240054b4:	f8df a228 	ldr.w	sl, [pc, #552]	; 240056e0 <HAL_DMA_Abort_IT+0x24c>
240054b8:	f8df b214 	ldr.w	fp, [pc, #532]	; 240056d0 <HAL_DMA_Abort_IT+0x23c>
240054bc:	f8df 9224 	ldr.w	r9, [pc, #548]	; 240056e4 <HAL_DMA_Abort_IT+0x250>
240054c0:	4559      	cmp	r1, fp
240054c2:	bf18      	it	ne
240054c4:	4551      	cmpne	r1, sl
240054c6:	f8df 8220 	ldr.w	r8, [pc, #544]	; 240056e8 <HAL_DMA_Abort_IT+0x254>
240054ca:	f8df e220 	ldr.w	lr, [pc, #544]	; 240056ec <HAL_DMA_Abort_IT+0x258>
240054ce:	bf0c      	ite	eq
240054d0:	2201      	moveq	r2, #1
240054d2:	2200      	movne	r2, #0
240054d4:	f8df c218 	ldr.w	ip, [pc, #536]	; 240056f0 <HAL_DMA_Abort_IT+0x25c>
240054d8:	4549      	cmp	r1, r9
240054da:	bf08      	it	eq
240054dc:	f042 0201 	orreq.w	r2, r2, #1
240054e0:	4d77      	ldr	r5, [pc, #476]	; (240056c0 <HAL_DMA_Abort_IT+0x22c>)
240054e2:	4f78      	ldr	r7, [pc, #480]	; (240056c4 <HAL_DMA_Abort_IT+0x230>)
240054e4:	4541      	cmp	r1, r8
240054e6:	bf08      	it	eq
240054e8:	f042 0201 	orreq.w	r2, r2, #1
240054ec:	4e76      	ldr	r6, [pc, #472]	; (240056c8 <HAL_DMA_Abort_IT+0x234>)
240054ee:	4571      	cmp	r1, lr
240054f0:	bf08      	it	eq
240054f2:	f042 0201 	orreq.w	r2, r2, #1
240054f6:	4561      	cmp	r1, ip
240054f8:	bf08      	it	eq
240054fa:	f042 0201 	orreq.w	r2, r2, #1
240054fe:	42a9      	cmp	r1, r5
24005500:	bf08      	it	eq
24005502:	f042 0201 	orreq.w	r2, r2, #1
24005506:	3518      	adds	r5, #24
24005508:	42a9      	cmp	r1, r5
2400550a:	bf08      	it	eq
2400550c:	f042 0201 	orreq.w	r2, r2, #1
24005510:	3518      	adds	r5, #24
24005512:	42a9      	cmp	r1, r5
24005514:	bf08      	it	eq
24005516:	f042 0201 	orreq.w	r2, r2, #1
2400551a:	3518      	adds	r5, #24
2400551c:	42a9      	cmp	r1, r5
2400551e:	bf08      	it	eq
24005520:	f042 0201 	orreq.w	r2, r2, #1
24005524:	3548      	adds	r5, #72	; 0x48
24005526:	42b9      	cmp	r1, r7
24005528:	bf08      	it	eq
2400552a:	f042 0201 	orreq.w	r2, r2, #1
2400552e:	42b1      	cmp	r1, r6
24005530:	bf08      	it	eq
24005532:	f042 0201 	orreq.w	r2, r2, #1
24005536:	42a9      	cmp	r1, r5
24005538:	bf08      	it	eq
2400553a:	f042 0201 	orreq.w	r2, r2, #1
2400553e:	b912      	cbnz	r2, 24005546 <HAL_DMA_Abort_IT+0xb2>
24005540:	4a62      	ldr	r2, [pc, #392]	; (240056cc <HAL_DMA_Abort_IT+0x238>)
24005542:	4291      	cmp	r1, r2
24005544:	d110      	bne.n	24005568 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
24005546:	2204      	movs	r2, #4
  return HAL_OK;
24005548:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
2400554a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
2400554e:	680b      	ldr	r3, [r1, #0]
24005550:	f023 0301 	bic.w	r3, r3, #1
24005554:	600b      	str	r3, [r1, #0]
}
24005556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400555a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
2400555c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400555e:	655a      	str	r2, [r3, #84]	; 0x54
}
24005560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
24005564:	2001      	movs	r0, #1
}
24005566:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005568:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400556a:	4c54      	ldr	r4, [pc, #336]	; (240056bc <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400556c:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005570:	4857      	ldr	r0, [pc, #348]	; (240056d0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005572:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
24005574:	6819      	ldr	r1, [r3, #0]
24005576:	680a      	ldr	r2, [r1, #0]
24005578:	f022 0201 	bic.w	r2, r2, #1
2400557c:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400557e:	4a4e      	ldr	r2, [pc, #312]	; (240056b8 <HAL_DMA_Abort_IT+0x224>)
24005580:	6819      	ldr	r1, [r3, #0]
24005582:	42a1      	cmp	r1, r4
24005584:	bf18      	it	ne
24005586:	4291      	cmpne	r1, r2
24005588:	f104 0430 	add.w	r4, r4, #48	; 0x30
2400558c:	bf0c      	ite	eq
2400558e:	2201      	moveq	r2, #1
24005590:	2200      	movne	r2, #0
24005592:	4281      	cmp	r1, r0
24005594:	bf08      	it	eq
24005596:	f042 0201 	orreq.w	r2, r2, #1
2400559a:	3030      	adds	r0, #48	; 0x30
2400559c:	42a1      	cmp	r1, r4
2400559e:	bf08      	it	eq
240055a0:	f042 0201 	orreq.w	r2, r2, #1
240055a4:	3430      	adds	r4, #48	; 0x30
240055a6:	4281      	cmp	r1, r0
240055a8:	bf08      	it	eq
240055aa:	f042 0201 	orreq.w	r2, r2, #1
240055ae:	3030      	adds	r0, #48	; 0x30
240055b0:	42a1      	cmp	r1, r4
240055b2:	bf08      	it	eq
240055b4:	f042 0201 	orreq.w	r2, r2, #1
240055b8:	3430      	adds	r4, #48	; 0x30
240055ba:	4281      	cmp	r1, r0
240055bc:	bf08      	it	eq
240055be:	f042 0201 	orreq.w	r2, r2, #1
240055c2:	f500 705c 	add.w	r0, r0, #880	; 0x370
240055c6:	42a1      	cmp	r1, r4
240055c8:	bf08      	it	eq
240055ca:	f042 0201 	orreq.w	r2, r2, #1
240055ce:	f504 745c 	add.w	r4, r4, #880	; 0x370
240055d2:	4281      	cmp	r1, r0
240055d4:	bf08      	it	eq
240055d6:	f042 0201 	orreq.w	r2, r2, #1
240055da:	3030      	adds	r0, #48	; 0x30
240055dc:	42a1      	cmp	r1, r4
240055de:	bf08      	it	eq
240055e0:	f042 0201 	orreq.w	r2, r2, #1
240055e4:	3430      	adds	r4, #48	; 0x30
240055e6:	4281      	cmp	r1, r0
240055e8:	bf08      	it	eq
240055ea:	f042 0201 	orreq.w	r2, r2, #1
240055ee:	3030      	adds	r0, #48	; 0x30
240055f0:	42a1      	cmp	r1, r4
240055f2:	bf08      	it	eq
240055f4:	f042 0201 	orreq.w	r2, r2, #1
240055f8:	3430      	adds	r4, #48	; 0x30
240055fa:	4281      	cmp	r1, r0
240055fc:	bf08      	it	eq
240055fe:	f042 0201 	orreq.w	r2, r2, #1
24005602:	3030      	adds	r0, #48	; 0x30
24005604:	42a1      	cmp	r1, r4
24005606:	bf08      	it	eq
24005608:	f042 0201 	orreq.w	r2, r2, #1
2400560c:	3430      	adds	r4, #48	; 0x30
2400560e:	4281      	cmp	r1, r0
24005610:	bf08      	it	eq
24005612:	f042 0201 	orreq.w	r2, r2, #1
24005616:	482f      	ldr	r0, [pc, #188]	; (240056d4 <HAL_DMA_Abort_IT+0x240>)
24005618:	42a1      	cmp	r1, r4
2400561a:	bf08      	it	eq
2400561c:	f042 0201 	orreq.w	r2, r2, #1
24005620:	4c2d      	ldr	r4, [pc, #180]	; (240056d8 <HAL_DMA_Abort_IT+0x244>)
24005622:	4281      	cmp	r1, r0
24005624:	bf08      	it	eq
24005626:	f042 0201 	orreq.w	r2, r2, #1
2400562a:	3028      	adds	r0, #40	; 0x28
2400562c:	42a1      	cmp	r1, r4
2400562e:	bf08      	it	eq
24005630:	f042 0201 	orreq.w	r2, r2, #1
24005634:	3428      	adds	r4, #40	; 0x28
24005636:	4281      	cmp	r1, r0
24005638:	bf08      	it	eq
2400563a:	f042 0201 	orreq.w	r2, r2, #1
2400563e:	3028      	adds	r0, #40	; 0x28
24005640:	42a1      	cmp	r1, r4
24005642:	bf08      	it	eq
24005644:	f042 0201 	orreq.w	r2, r2, #1
24005648:	3428      	adds	r4, #40	; 0x28
2400564a:	4281      	cmp	r1, r0
2400564c:	bf08      	it	eq
2400564e:	f042 0201 	orreq.w	r2, r2, #1
24005652:	3028      	adds	r0, #40	; 0x28
24005654:	42a1      	cmp	r1, r4
24005656:	bf08      	it	eq
24005658:	f042 0201 	orreq.w	r2, r2, #1
2400565c:	4281      	cmp	r1, r0
2400565e:	bf08      	it	eq
24005660:	f042 0201 	orreq.w	r2, r2, #1
24005664:	b912      	cbnz	r2, 2400566c <HAL_DMA_Abort_IT+0x1d8>
24005666:	4a1d      	ldr	r2, [pc, #116]	; (240056dc <HAL_DMA_Abort_IT+0x248>)
24005668:	4291      	cmp	r1, r2
2400566a:	d117      	bne.n	2400569c <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400566c:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400566e:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005670:	6801      	ldr	r1, [r0, #0]
24005672:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005676:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005678:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400567c:	f001 011f 	and.w	r1, r1, #31
24005680:	408a      	lsls	r2, r1
24005682:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005684:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24005688:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
2400568a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
2400568c:	b132      	cbz	r2, 2400569c <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2400568e:	6811      	ldr	r1, [r2, #0]
24005690:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005694:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005696:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
2400569a:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
2400569c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
2400569e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
240056a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
240056a2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
240056a6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
240056aa:	b11a      	cbz	r2, 240056b4 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
240056ac:	4618      	mov	r0, r3
240056ae:	4790      	blx	r2
  return HAL_OK;
240056b0:	4620      	mov	r0, r4
240056b2:	e755      	b.n	24005560 <HAL_DMA_Abort_IT+0xcc>
240056b4:	4610      	mov	r0, r2
240056b6:	e753      	b.n	24005560 <HAL_DMA_Abort_IT+0xcc>
240056b8:	40020010 	.word	0x40020010
240056bc:	40020028 	.word	0x40020028
240056c0:	40020410 	.word	0x40020410
240056c4:	40020470 	.word	0x40020470
240056c8:	40020488 	.word	0x40020488
240056cc:	400204b8 	.word	0x400204b8
240056d0:	40020040 	.word	0x40020040
240056d4:	58025408 	.word	0x58025408
240056d8:	5802541c 	.word	0x5802541c
240056dc:	58025494 	.word	0x58025494
240056e0:	40020058 	.word	0x40020058
240056e4:	40020070 	.word	0x40020070
240056e8:	40020088 	.word	0x40020088
240056ec:	400200a0 	.word	0x400200a0
240056f0:	400200b8 	.word	0x400200b8

240056f4 <HAL_DMA_IRQHandler>:
{
240056f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
240056f8:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
240056fa:	4b9e      	ldr	r3, [pc, #632]	; (24005974 <HAL_DMA_IRQHandler+0x280>)
{
240056fc:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240056fe:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
24005700:	681e      	ldr	r6, [r3, #0]
{
24005702:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
24005704:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005706:	6803      	ldr	r3, [r0, #0]
24005708:	4a9b      	ldr	r2, [pc, #620]	; (24005978 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
2400570a:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400570c:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
2400570e:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005710:	d048      	beq.n	240057a4 <HAL_DMA_IRQHandler+0xb0>
24005712:	3218      	adds	r2, #24
24005714:	4293      	cmp	r3, r2
24005716:	d045      	beq.n	240057a4 <HAL_DMA_IRQHandler+0xb0>
24005718:	3218      	adds	r2, #24
2400571a:	4f98      	ldr	r7, [pc, #608]	; (2400597c <HAL_DMA_IRQHandler+0x288>)
2400571c:	42bb      	cmp	r3, r7
2400571e:	bf18      	it	ne
24005720:	4293      	cmpne	r3, r2
24005722:	f107 0718 	add.w	r7, r7, #24
24005726:	bf0c      	ite	eq
24005728:	2201      	moveq	r2, #1
2400572a:	2200      	movne	r2, #0
2400572c:	42bb      	cmp	r3, r7
2400572e:	bf08      	it	eq
24005730:	f042 0201 	orreq.w	r2, r2, #1
24005734:	3718      	adds	r7, #24
24005736:	42bb      	cmp	r3, r7
24005738:	bf08      	it	eq
2400573a:	f042 0201 	orreq.w	r2, r2, #1
2400573e:	3718      	adds	r7, #24
24005740:	42bb      	cmp	r3, r7
24005742:	bf08      	it	eq
24005744:	f042 0201 	orreq.w	r2, r2, #1
24005748:	3718      	adds	r7, #24
2400574a:	42bb      	cmp	r3, r7
2400574c:	bf08      	it	eq
2400574e:	f042 0201 	orreq.w	r2, r2, #1
24005752:	f507 7756 	add.w	r7, r7, #856	; 0x358
24005756:	42bb      	cmp	r3, r7
24005758:	bf08      	it	eq
2400575a:	f042 0201 	orreq.w	r2, r2, #1
2400575e:	3718      	adds	r7, #24
24005760:	42bb      	cmp	r3, r7
24005762:	bf08      	it	eq
24005764:	f042 0201 	orreq.w	r2, r2, #1
24005768:	3718      	adds	r7, #24
2400576a:	42bb      	cmp	r3, r7
2400576c:	bf08      	it	eq
2400576e:	f042 0201 	orreq.w	r2, r2, #1
24005772:	3718      	adds	r7, #24
24005774:	42bb      	cmp	r3, r7
24005776:	bf08      	it	eq
24005778:	f042 0201 	orreq.w	r2, r2, #1
2400577c:	3718      	adds	r7, #24
2400577e:	42bb      	cmp	r3, r7
24005780:	bf08      	it	eq
24005782:	f042 0201 	orreq.w	r2, r2, #1
24005786:	3718      	adds	r7, #24
24005788:	42bb      	cmp	r3, r7
2400578a:	bf08      	it	eq
2400578c:	f042 0201 	orreq.w	r2, r2, #1
24005790:	3718      	adds	r7, #24
24005792:	42bb      	cmp	r3, r7
24005794:	bf08      	it	eq
24005796:	f042 0201 	orreq.w	r2, r2, #1
2400579a:	b91a      	cbnz	r2, 240057a4 <HAL_DMA_IRQHandler+0xb0>
2400579c:	4a78      	ldr	r2, [pc, #480]	; (24005980 <HAL_DMA_IRQHandler+0x28c>)
2400579e:	4293      	cmp	r3, r2
240057a0:	f040 82b3 	bne.w	24005d0a <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240057a4:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
240057a8:	2208      	movs	r2, #8
240057aa:	f000 011f 	and.w	r1, r0, #31
240057ae:	408a      	lsls	r2, r1
240057b0:	4222      	tst	r2, r4
240057b2:	f040 81a5 	bne.w	24005b00 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240057b6:	fa24 f201 	lsr.w	r2, r4, r1
240057ba:	07d2      	lsls	r2, r2, #31
240057bc:	d511      	bpl.n	240057e2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240057be:	695a      	ldr	r2, [r3, #20]
240057c0:	0612      	lsls	r2, r2, #24
240057c2:	f140 8269 	bpl.w	24005c98 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240057c6:	2301      	movs	r3, #1
240057c8:	fa03 f101 	lsl.w	r1, r3, r1
240057cc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240057ce:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240057d2:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240057d6:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240057da:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240057de:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240057e2:	f04f 0c04 	mov.w	ip, #4
240057e6:	fa0c fc01 	lsl.w	ip, ip, r1
240057ea:	ea1c 0f04 	tst.w	ip, r4
240057ee:	d062      	beq.n	240058b6 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240057f0:	f8d8 2000 	ldr.w	r2, [r8]
240057f4:	4f60      	ldr	r7, [pc, #384]	; (24005978 <HAL_DMA_IRQHandler+0x284>)
240057f6:	4b63      	ldr	r3, [pc, #396]	; (24005984 <HAL_DMA_IRQHandler+0x290>)
240057f8:	429a      	cmp	r2, r3
240057fa:	bf18      	it	ne
240057fc:	42ba      	cmpne	r2, r7
240057fe:	f103 0318 	add.w	r3, r3, #24
24005802:	bf0c      	ite	eq
24005804:	2701      	moveq	r7, #1
24005806:	2700      	movne	r7, #0
24005808:	429a      	cmp	r2, r3
2400580a:	bf08      	it	eq
2400580c:	f047 0701 	orreq.w	r7, r7, #1
24005810:	3318      	adds	r3, #24
24005812:	429a      	cmp	r2, r3
24005814:	bf08      	it	eq
24005816:	f047 0701 	orreq.w	r7, r7, #1
2400581a:	3318      	adds	r3, #24
2400581c:	429a      	cmp	r2, r3
2400581e:	bf08      	it	eq
24005820:	f047 0701 	orreq.w	r7, r7, #1
24005824:	3318      	adds	r3, #24
24005826:	429a      	cmp	r2, r3
24005828:	bf08      	it	eq
2400582a:	f047 0701 	orreq.w	r7, r7, #1
2400582e:	3318      	adds	r3, #24
24005830:	429a      	cmp	r2, r3
24005832:	bf08      	it	eq
24005834:	f047 0701 	orreq.w	r7, r7, #1
24005838:	3318      	adds	r3, #24
2400583a:	429a      	cmp	r2, r3
2400583c:	bf08      	it	eq
2400583e:	f047 0701 	orreq.w	r7, r7, #1
24005842:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005846:	429a      	cmp	r2, r3
24005848:	bf08      	it	eq
2400584a:	f047 0701 	orreq.w	r7, r7, #1
2400584e:	3318      	adds	r3, #24
24005850:	429a      	cmp	r2, r3
24005852:	bf08      	it	eq
24005854:	f047 0701 	orreq.w	r7, r7, #1
24005858:	3318      	adds	r3, #24
2400585a:	429a      	cmp	r2, r3
2400585c:	bf08      	it	eq
2400585e:	f047 0701 	orreq.w	r7, r7, #1
24005862:	3318      	adds	r3, #24
24005864:	429a      	cmp	r2, r3
24005866:	bf08      	it	eq
24005868:	f047 0701 	orreq.w	r7, r7, #1
2400586c:	3318      	adds	r3, #24
2400586e:	429a      	cmp	r2, r3
24005870:	bf08      	it	eq
24005872:	f047 0701 	orreq.w	r7, r7, #1
24005876:	3318      	adds	r3, #24
24005878:	429a      	cmp	r2, r3
2400587a:	bf08      	it	eq
2400587c:	f047 0701 	orreq.w	r7, r7, #1
24005880:	3318      	adds	r3, #24
24005882:	429a      	cmp	r2, r3
24005884:	bf08      	it	eq
24005886:	f047 0701 	orreq.w	r7, r7, #1
2400588a:	4613      	mov	r3, r2
2400588c:	b91f      	cbnz	r7, 24005896 <HAL_DMA_IRQHandler+0x1a2>
2400588e:	4f3c      	ldr	r7, [pc, #240]	; (24005980 <HAL_DMA_IRQHandler+0x28c>)
24005890:	42ba      	cmp	r2, r7
24005892:	f040 8277 	bne.w	24005d84 <HAL_DMA_IRQHandler+0x690>
24005896:	681a      	ldr	r2, [r3, #0]
24005898:	0797      	lsls	r7, r2, #30
2400589a:	f140 8209 	bpl.w	24005cb0 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400589e:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240058a2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058a6:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240058aa:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058ae:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240058b2:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058b6:	f04f 0c10 	mov.w	ip, #16
240058ba:	fa0c fc01 	lsl.w	ip, ip, r1
240058be:	ea1c 0f04 	tst.w	ip, r4
240058c2:	d079      	beq.n	240059b8 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240058c4:	f8d8 2000 	ldr.w	r2, [r8]
240058c8:	4f2b      	ldr	r7, [pc, #172]	; (24005978 <HAL_DMA_IRQHandler+0x284>)
240058ca:	4b2e      	ldr	r3, [pc, #184]	; (24005984 <HAL_DMA_IRQHandler+0x290>)
240058cc:	429a      	cmp	r2, r3
240058ce:	bf18      	it	ne
240058d0:	42ba      	cmpne	r2, r7
240058d2:	f103 0318 	add.w	r3, r3, #24
240058d6:	bf0c      	ite	eq
240058d8:	2701      	moveq	r7, #1
240058da:	2700      	movne	r7, #0
240058dc:	429a      	cmp	r2, r3
240058de:	bf08      	it	eq
240058e0:	f047 0701 	orreq.w	r7, r7, #1
240058e4:	3318      	adds	r3, #24
240058e6:	429a      	cmp	r2, r3
240058e8:	bf08      	it	eq
240058ea:	f047 0701 	orreq.w	r7, r7, #1
240058ee:	3318      	adds	r3, #24
240058f0:	429a      	cmp	r2, r3
240058f2:	bf08      	it	eq
240058f4:	f047 0701 	orreq.w	r7, r7, #1
240058f8:	3318      	adds	r3, #24
240058fa:	429a      	cmp	r2, r3
240058fc:	bf08      	it	eq
240058fe:	f047 0701 	orreq.w	r7, r7, #1
24005902:	3318      	adds	r3, #24
24005904:	429a      	cmp	r2, r3
24005906:	bf08      	it	eq
24005908:	f047 0701 	orreq.w	r7, r7, #1
2400590c:	3318      	adds	r3, #24
2400590e:	429a      	cmp	r2, r3
24005910:	bf08      	it	eq
24005912:	f047 0701 	orreq.w	r7, r7, #1
24005916:	f503 7356 	add.w	r3, r3, #856	; 0x358
2400591a:	429a      	cmp	r2, r3
2400591c:	bf08      	it	eq
2400591e:	f047 0701 	orreq.w	r7, r7, #1
24005922:	3318      	adds	r3, #24
24005924:	429a      	cmp	r2, r3
24005926:	bf08      	it	eq
24005928:	f047 0701 	orreq.w	r7, r7, #1
2400592c:	3318      	adds	r3, #24
2400592e:	429a      	cmp	r2, r3
24005930:	bf08      	it	eq
24005932:	f047 0701 	orreq.w	r7, r7, #1
24005936:	3318      	adds	r3, #24
24005938:	429a      	cmp	r2, r3
2400593a:	bf08      	it	eq
2400593c:	f047 0701 	orreq.w	r7, r7, #1
24005940:	3318      	adds	r3, #24
24005942:	429a      	cmp	r2, r3
24005944:	bf08      	it	eq
24005946:	f047 0701 	orreq.w	r7, r7, #1
2400594a:	3318      	adds	r3, #24
2400594c:	429a      	cmp	r2, r3
2400594e:	bf08      	it	eq
24005950:	f047 0701 	orreq.w	r7, r7, #1
24005954:	3318      	adds	r3, #24
24005956:	429a      	cmp	r2, r3
24005958:	bf08      	it	eq
2400595a:	f047 0701 	orreq.w	r7, r7, #1
2400595e:	4613      	mov	r3, r2
24005960:	b91f      	cbnz	r7, 2400596a <HAL_DMA_IRQHandler+0x276>
24005962:	4f07      	ldr	r7, [pc, #28]	; (24005980 <HAL_DMA_IRQHandler+0x28c>)
24005964:	42ba      	cmp	r2, r7
24005966:	f040 814b 	bne.w	24005c00 <HAL_DMA_IRQHandler+0x50c>
2400596a:	681a      	ldr	r2, [r3, #0]
2400596c:	0710      	lsls	r0, r2, #28
2400596e:	f140 818c 	bpl.w	24005c8a <HAL_DMA_IRQHandler+0x596>
24005972:	e009      	b.n	24005988 <HAL_DMA_IRQHandler+0x294>
24005974:	200006e0 	.word	0x200006e0
24005978:	40020010 	.word	0x40020010
2400597c:	40020058 	.word	0x40020058
24005980:	400204b8 	.word	0x400204b8
24005984:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24005988:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
2400598c:	f8d8 3000 	ldr.w	r3, [r8]
24005990:	681a      	ldr	r2, [r3, #0]
24005992:	0352      	lsls	r2, r2, #13
24005994:	f100 8195 	bmi.w	24005cc2 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005998:	681a      	ldr	r2, [r3, #0]
2400599a:	05d7      	lsls	r7, r2, #23
2400599c:	d403      	bmi.n	240059a6 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2400599e:	681a      	ldr	r2, [r3, #0]
240059a0:	f022 0208 	bic.w	r2, r2, #8
240059a4:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
240059a6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
240059aa:	b10b      	cbz	r3, 240059b0 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
240059ac:	4640      	mov	r0, r8
240059ae:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240059b0:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
240059b4:	f001 011f 	and.w	r1, r1, #31
240059b8:	2320      	movs	r3, #32
240059ba:	fa03 f101 	lsl.w	r1, r3, r1
240059be:	4221      	tst	r1, r4
240059c0:	d069      	beq.n	24005a96 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240059c2:	f8d8 3000 	ldr.w	r3, [r8]
240059c6:	4a97      	ldr	r2, [pc, #604]	; (24005c24 <HAL_DMA_IRQHandler+0x530>)
240059c8:	4c97      	ldr	r4, [pc, #604]	; (24005c28 <HAL_DMA_IRQHandler+0x534>)
240059ca:	42a3      	cmp	r3, r4
240059cc:	bf18      	it	ne
240059ce:	4293      	cmpne	r3, r2
240059d0:	f104 0418 	add.w	r4, r4, #24
240059d4:	bf0c      	ite	eq
240059d6:	2201      	moveq	r2, #1
240059d8:	2200      	movne	r2, #0
240059da:	42a3      	cmp	r3, r4
240059dc:	bf08      	it	eq
240059de:	f042 0201 	orreq.w	r2, r2, #1
240059e2:	3418      	adds	r4, #24
240059e4:	42a3      	cmp	r3, r4
240059e6:	bf08      	it	eq
240059e8:	f042 0201 	orreq.w	r2, r2, #1
240059ec:	3418      	adds	r4, #24
240059ee:	42a3      	cmp	r3, r4
240059f0:	bf08      	it	eq
240059f2:	f042 0201 	orreq.w	r2, r2, #1
240059f6:	3418      	adds	r4, #24
240059f8:	42a3      	cmp	r3, r4
240059fa:	bf08      	it	eq
240059fc:	f042 0201 	orreq.w	r2, r2, #1
24005a00:	3418      	adds	r4, #24
24005a02:	42a3      	cmp	r3, r4
24005a04:	bf08      	it	eq
24005a06:	f042 0201 	orreq.w	r2, r2, #1
24005a0a:	3418      	adds	r4, #24
24005a0c:	42a3      	cmp	r3, r4
24005a0e:	bf08      	it	eq
24005a10:	f042 0201 	orreq.w	r2, r2, #1
24005a14:	f504 7456 	add.w	r4, r4, #856	; 0x358
24005a18:	42a3      	cmp	r3, r4
24005a1a:	bf08      	it	eq
24005a1c:	f042 0201 	orreq.w	r2, r2, #1
24005a20:	3418      	adds	r4, #24
24005a22:	42a3      	cmp	r3, r4
24005a24:	bf08      	it	eq
24005a26:	f042 0201 	orreq.w	r2, r2, #1
24005a2a:	3418      	adds	r4, #24
24005a2c:	42a3      	cmp	r3, r4
24005a2e:	bf08      	it	eq
24005a30:	f042 0201 	orreq.w	r2, r2, #1
24005a34:	3418      	adds	r4, #24
24005a36:	42a3      	cmp	r3, r4
24005a38:	bf08      	it	eq
24005a3a:	f042 0201 	orreq.w	r2, r2, #1
24005a3e:	3418      	adds	r4, #24
24005a40:	42a3      	cmp	r3, r4
24005a42:	bf08      	it	eq
24005a44:	f042 0201 	orreq.w	r2, r2, #1
24005a48:	3418      	adds	r4, #24
24005a4a:	42a3      	cmp	r3, r4
24005a4c:	bf08      	it	eq
24005a4e:	f042 0201 	orreq.w	r2, r2, #1
24005a52:	3418      	adds	r4, #24
24005a54:	42a3      	cmp	r3, r4
24005a56:	bf08      	it	eq
24005a58:	f042 0201 	orreq.w	r2, r2, #1
24005a5c:	b91a      	cbnz	r2, 24005a66 <HAL_DMA_IRQHandler+0x372>
24005a5e:	4a73      	ldr	r2, [pc, #460]	; (24005c2c <HAL_DMA_IRQHandler+0x538>)
24005a60:	4293      	cmp	r3, r2
24005a62:	f040 80da 	bne.w	24005c1a <HAL_DMA_IRQHandler+0x526>
24005a66:	681b      	ldr	r3, [r3, #0]
24005a68:	06dc      	lsls	r4, r3, #27
24005a6a:	d514      	bpl.n	24005a96 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005a6c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24005a6e:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
24005a72:	2b04      	cmp	r3, #4
24005a74:	f000 80de 	beq.w	24005c34 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005a78:	f8d8 3000 	ldr.w	r3, [r8]
24005a7c:	681a      	ldr	r2, [r3, #0]
24005a7e:	0352      	lsls	r2, r2, #13
24005a80:	f140 8129 	bpl.w	24005cd6 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005a84:	681b      	ldr	r3, [r3, #0]
24005a86:	031b      	lsls	r3, r3, #12
24005a88:	f140 8134 	bpl.w	24005cf4 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
24005a8c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
24005a90:	b10b      	cbz	r3, 24005a96 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
24005a92:	4640      	mov	r0, r8
24005a94:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005a96:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24005a9a:	2b00      	cmp	r3, #0
24005a9c:	f000 80f2 	beq.w	24005c84 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005aa0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24005aa4:	07df      	lsls	r7, r3, #31
24005aa6:	d521      	bpl.n	24005aec <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
24005aa8:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
24005aac:	2104      	movs	r1, #4
24005aae:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24005ab2:	6813      	ldr	r3, [r2, #0]
24005ab4:	f023 0301 	bic.w	r3, r3, #1
24005ab8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24005aba:	4b5d      	ldr	r3, [pc, #372]	; (24005c30 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005abc:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
24005ac0:	fba3 3606 	umull	r3, r6, r3, r6
24005ac4:	0ab6      	lsrs	r6, r6, #10
24005ac6:	e002      	b.n	24005ace <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005ac8:	6813      	ldr	r3, [r2, #0]
24005aca:	07dd      	lsls	r5, r3, #31
24005acc:	d504      	bpl.n	24005ad8 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
24005ace:	9b01      	ldr	r3, [sp, #4]
24005ad0:	3301      	adds	r3, #1
24005ad2:	42b3      	cmp	r3, r6
24005ad4:	9301      	str	r3, [sp, #4]
24005ad6:	d9f7      	bls.n	24005ac8 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005ad8:	6813      	ldr	r3, [r2, #0]
24005ada:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24005adc:	bf4c      	ite	mi
24005ade:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24005ae0:	2301      	movpl	r3, #1
24005ae2:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24005ae6:	2300      	movs	r3, #0
24005ae8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24005aec:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
24005af0:	2b00      	cmp	r3, #0
24005af2:	f000 80c7 	beq.w	24005c84 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
24005af6:	4640      	mov	r0, r8
}
24005af8:	b002      	add	sp, #8
24005afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
24005afe:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24005b00:	681a      	ldr	r2, [r3, #0]
24005b02:	0752      	lsls	r2, r2, #29
24005b04:	d514      	bpl.n	24005b30 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24005b06:	681a      	ldr	r2, [r3, #0]
24005b08:	f022 0204 	bic.w	r2, r2, #4
24005b0c:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005b0e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24005b12:	f003 021f 	and.w	r2, r3, #31
24005b16:	2308      	movs	r3, #8
24005b18:	4093      	lsls	r3, r2
24005b1a:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005b1c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b20:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005b24:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b28:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005b2c:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b30:	fa24 f301 	lsr.w	r3, r4, r1
24005b34:	07df      	lsls	r7, r3, #31
24005b36:	f57f ae54 	bpl.w	240057e2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005b3a:	f8d8 2000 	ldr.w	r2, [r8]
24005b3e:	4f39      	ldr	r7, [pc, #228]	; (24005c24 <HAL_DMA_IRQHandler+0x530>)
24005b40:	4b39      	ldr	r3, [pc, #228]	; (24005c28 <HAL_DMA_IRQHandler+0x534>)
24005b42:	429a      	cmp	r2, r3
24005b44:	bf18      	it	ne
24005b46:	42ba      	cmpne	r2, r7
24005b48:	f103 0318 	add.w	r3, r3, #24
24005b4c:	bf0c      	ite	eq
24005b4e:	2701      	moveq	r7, #1
24005b50:	2700      	movne	r7, #0
24005b52:	429a      	cmp	r2, r3
24005b54:	bf08      	it	eq
24005b56:	f047 0701 	orreq.w	r7, r7, #1
24005b5a:	3318      	adds	r3, #24
24005b5c:	429a      	cmp	r2, r3
24005b5e:	bf08      	it	eq
24005b60:	f047 0701 	orreq.w	r7, r7, #1
24005b64:	3318      	adds	r3, #24
24005b66:	429a      	cmp	r2, r3
24005b68:	bf08      	it	eq
24005b6a:	f047 0701 	orreq.w	r7, r7, #1
24005b6e:	3318      	adds	r3, #24
24005b70:	429a      	cmp	r2, r3
24005b72:	bf08      	it	eq
24005b74:	f047 0701 	orreq.w	r7, r7, #1
24005b78:	3318      	adds	r3, #24
24005b7a:	429a      	cmp	r2, r3
24005b7c:	bf08      	it	eq
24005b7e:	f047 0701 	orreq.w	r7, r7, #1
24005b82:	3318      	adds	r3, #24
24005b84:	429a      	cmp	r2, r3
24005b86:	bf08      	it	eq
24005b88:	f047 0701 	orreq.w	r7, r7, #1
24005b8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005b90:	429a      	cmp	r2, r3
24005b92:	bf08      	it	eq
24005b94:	f047 0701 	orreq.w	r7, r7, #1
24005b98:	3318      	adds	r3, #24
24005b9a:	429a      	cmp	r2, r3
24005b9c:	bf08      	it	eq
24005b9e:	f047 0701 	orreq.w	r7, r7, #1
24005ba2:	3318      	adds	r3, #24
24005ba4:	429a      	cmp	r2, r3
24005ba6:	bf08      	it	eq
24005ba8:	f047 0701 	orreq.w	r7, r7, #1
24005bac:	3318      	adds	r3, #24
24005bae:	429a      	cmp	r2, r3
24005bb0:	bf08      	it	eq
24005bb2:	f047 0701 	orreq.w	r7, r7, #1
24005bb6:	3318      	adds	r3, #24
24005bb8:	429a      	cmp	r2, r3
24005bba:	bf08      	it	eq
24005bbc:	f047 0701 	orreq.w	r7, r7, #1
24005bc0:	3318      	adds	r3, #24
24005bc2:	429a      	cmp	r2, r3
24005bc4:	bf08      	it	eq
24005bc6:	f047 0701 	orreq.w	r7, r7, #1
24005bca:	3318      	adds	r3, #24
24005bcc:	429a      	cmp	r2, r3
24005bce:	bf08      	it	eq
24005bd0:	f047 0701 	orreq.w	r7, r7, #1
24005bd4:	4613      	mov	r3, r2
24005bd6:	2f00      	cmp	r7, #0
24005bd8:	f47f adf1 	bne.w	240057be <HAL_DMA_IRQHandler+0xca>
24005bdc:	4f13      	ldr	r7, [pc, #76]	; (24005c2c <HAL_DMA_IRQHandler+0x538>)
24005bde:	42ba      	cmp	r2, r7
24005be0:	f43f aded 	beq.w	240057be <HAL_DMA_IRQHandler+0xca>
24005be4:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005be6:	2304      	movs	r3, #4
24005be8:	408b      	lsls	r3, r1
24005bea:	4223      	tst	r3, r4
24005bec:	f040 80ca 	bne.w	24005d84 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005bf0:	f04f 0c10 	mov.w	ip, #16
24005bf4:	fa0c fc01 	lsl.w	ip, ip, r1
24005bf8:	ea14 0f0c 	tst.w	r4, ip
24005bfc:	f43f aedc 	beq.w	240059b8 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005c00:	6813      	ldr	r3, [r2, #0]
24005c02:	0759      	lsls	r1, r3, #29
24005c04:	f53f aec0 	bmi.w	24005988 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c08:	f000 0e1f 	and.w	lr, r0, #31
24005c0c:	2120      	movs	r1, #32
24005c0e:	fa01 f10e 	lsl.w	r1, r1, lr
24005c12:	420c      	tst	r4, r1
24005c14:	f43f af3f 	beq.w	24005a96 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005c18:	4613      	mov	r3, r2
24005c1a:	681b      	ldr	r3, [r3, #0]
24005c1c:	0798      	lsls	r0, r3, #30
24005c1e:	f57f af3a 	bpl.w	24005a96 <HAL_DMA_IRQHandler+0x3a2>
24005c22:	e723      	b.n	24005a6c <HAL_DMA_IRQHandler+0x378>
24005c24:	40020010 	.word	0x40020010
24005c28:	40020028 	.word	0x40020028
24005c2c:	400204b8 	.word	0x400204b8
24005c30:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24005c34:	f8d8 2000 	ldr.w	r2, [r8]
24005c38:	6813      	ldr	r3, [r2, #0]
24005c3a:	f023 0316 	bic.w	r3, r3, #22
24005c3e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005c40:	f8d8 2000 	ldr.w	r2, [r8]
24005c44:	6953      	ldr	r3, [r2, #20]
24005c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005c4a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005c4c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24005c50:	2b00      	cmp	r3, #0
24005c52:	d055      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005c54:	f8d8 2000 	ldr.w	r2, [r8]
24005c58:	6813      	ldr	r3, [r2, #0]
24005c5a:	f023 0308 	bic.w	r3, r3, #8
24005c5e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005c60:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
24005c64:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24005c66:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005c68:	f002 021f 	and.w	r2, r2, #31
24005c6c:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24005c6e:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005c70:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
24005c72:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
24005c76:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24005c7a:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24005c7e:	2b00      	cmp	r3, #0
24005c80:	f47f af39 	bne.w	24005af6 <HAL_DMA_IRQHandler+0x402>
}
24005c84:	b002      	add	sp, #8
24005c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c8a:	2220      	movs	r2, #32
24005c8c:	fa02 f101 	lsl.w	r1, r2, r1
24005c90:	420c      	tst	r4, r1
24005c92:	f47f aee8 	bne.w	24005a66 <HAL_DMA_IRQHandler+0x372>
24005c96:	e6fe      	b.n	24005a96 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c98:	f04f 0c04 	mov.w	ip, #4
24005c9c:	fa0c fc01 	lsl.w	ip, ip, r1
24005ca0:	ea14 0f0c 	tst.w	r4, ip
24005ca4:	f43f ae07 	beq.w	240058b6 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005ca8:	681a      	ldr	r2, [r3, #0]
24005caa:	0797      	lsls	r7, r2, #30
24005cac:	f53f adf7 	bmi.w	2400589e <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cb0:	f04f 0c10 	mov.w	ip, #16
24005cb4:	fa0c fc01 	lsl.w	ip, ip, r1
24005cb8:	ea14 0f0c 	tst.w	r4, ip
24005cbc:	f47f ae55 	bne.w	2400596a <HAL_DMA_IRQHandler+0x276>
24005cc0:	e67a      	b.n	240059b8 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005cc2:	681b      	ldr	r3, [r3, #0]
24005cc4:	031b      	lsls	r3, r3, #12
24005cc6:	f57f ae6e 	bpl.w	240059a6 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
24005cca:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24005cce:	2b00      	cmp	r3, #0
24005cd0:	f47f ae6c 	bne.w	240059ac <HAL_DMA_IRQHandler+0x2b8>
24005cd4:	e66c      	b.n	240059b0 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005cd6:	681a      	ldr	r2, [r3, #0]
24005cd8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24005cdc:	f47f aed6 	bne.w	24005a8c <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24005ce0:	6819      	ldr	r1, [r3, #0]
24005ce2:	f021 0110 	bic.w	r1, r1, #16
24005ce6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24005ce8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
24005cea:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24005cee:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24005cf2:	e6cb      	b.n	24005a8c <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
24005cf4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24005cf8:	2b00      	cmp	r3, #0
24005cfa:	f47f aeca 	bne.w	24005a92 <HAL_DMA_IRQHandler+0x39e>
24005cfe:	e6ca      	b.n	24005a96 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005d00:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24005d04:	2b00      	cmp	r3, #0
24005d06:	d1a5      	bne.n	24005c54 <HAL_DMA_IRQHandler+0x560>
24005d08:	e7aa      	b.n	24005c60 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24005d0a:	4aa0      	ldr	r2, [pc, #640]	; (24005f8c <HAL_DMA_IRQHandler+0x898>)
24005d0c:	4ca0      	ldr	r4, [pc, #640]	; (24005f90 <HAL_DMA_IRQHandler+0x89c>)
24005d0e:	42a3      	cmp	r3, r4
24005d10:	bf18      	it	ne
24005d12:	4293      	cmpne	r3, r2
24005d14:	f104 0414 	add.w	r4, r4, #20
24005d18:	bf0c      	ite	eq
24005d1a:	2201      	moveq	r2, #1
24005d1c:	2200      	movne	r2, #0
24005d1e:	42a3      	cmp	r3, r4
24005d20:	bf08      	it	eq
24005d22:	f042 0201 	orreq.w	r2, r2, #1
24005d26:	3414      	adds	r4, #20
24005d28:	42a3      	cmp	r3, r4
24005d2a:	bf08      	it	eq
24005d2c:	f042 0201 	orreq.w	r2, r2, #1
24005d30:	3414      	adds	r4, #20
24005d32:	42a3      	cmp	r3, r4
24005d34:	bf08      	it	eq
24005d36:	f042 0201 	orreq.w	r2, r2, #1
24005d3a:	3414      	adds	r4, #20
24005d3c:	42a3      	cmp	r3, r4
24005d3e:	bf08      	it	eq
24005d40:	f042 0201 	orreq.w	r2, r2, #1
24005d44:	3414      	adds	r4, #20
24005d46:	42a3      	cmp	r3, r4
24005d48:	bf08      	it	eq
24005d4a:	f042 0201 	orreq.w	r2, r2, #1
24005d4e:	b912      	cbnz	r2, 24005d56 <HAL_DMA_IRQHandler+0x662>
24005d50:	4a90      	ldr	r2, [pc, #576]	; (24005f94 <HAL_DMA_IRQHandler+0x8a0>)
24005d52:	4293      	cmp	r3, r2
24005d54:	d196      	bne.n	24005c84 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005d56:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
24005d5a:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24005d5c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005d5e:	f004 041f 	and.w	r4, r4, #31
24005d62:	40a6      	lsls	r6, r4
24005d64:	420e      	tst	r6, r1
24005d66:	d019      	beq.n	24005d9c <HAL_DMA_IRQHandler+0x6a8>
24005d68:	0750      	lsls	r0, r2, #29
24005d6a:	d517      	bpl.n	24005d9c <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005d6c:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24005d6e:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005d70:	d549      	bpl.n	24005e06 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005d72:	03d2      	lsls	r2, r2, #15
24005d74:	f100 809f 	bmi.w	24005eb6 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
24005d78:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24005d7c:	2b00      	cmp	r3, #0
24005d7e:	f47f aeba 	bne.w	24005af6 <HAL_DMA_IRQHandler+0x402>
24005d82:	e77f      	b.n	24005c84 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d84:	f000 011f 	and.w	r1, r0, #31
24005d88:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005d8c:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d8e:	fa0c fc01 	lsl.w	ip, ip, r1
24005d92:	ea14 0f0c 	tst.w	r4, ip
24005d96:	f47f af33 	bne.w	24005c00 <HAL_DMA_IRQHandler+0x50c>
24005d9a:	e60d      	b.n	240059b8 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24005d9c:	2602      	movs	r6, #2
24005d9e:	40a6      	lsls	r6, r4
24005da0:	420e      	tst	r6, r1
24005da2:	d00e      	beq.n	24005dc2 <HAL_DMA_IRQHandler+0x6ce>
24005da4:	0797      	lsls	r7, r2, #30
24005da6:	d50c      	bpl.n	24005dc2 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24005da8:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005daa:	0415      	lsls	r5, r2, #16
24005dac:	f140 8089 	bpl.w	24005ec2 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005db0:	03d4      	lsls	r4, r2, #15
24005db2:	f100 80e4 	bmi.w	24005f7e <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
24005db6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24005dba:	2b00      	cmp	r3, #0
24005dbc:	f47f ae9b 	bne.w	24005af6 <HAL_DMA_IRQHandler+0x402>
24005dc0:	e760      	b.n	24005c84 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24005dc2:	2608      	movs	r6, #8
24005dc4:	fa06 f404 	lsl.w	r4, r6, r4
24005dc8:	420c      	tst	r4, r1
24005dca:	f43f af5b 	beq.w	24005c84 <HAL_DMA_IRQHandler+0x590>
24005dce:	0711      	lsls	r1, r2, #28
24005dd0:	f57f af58 	bpl.w	24005c84 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24005dd4:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005dd6:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24005dd8:	f021 010e 	bic.w	r1, r1, #14
24005ddc:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
24005dde:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005de0:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24005de4:	f003 031f 	and.w	r3, r3, #31
24005de8:	fa02 f303 	lsl.w	r3, r2, r3
24005dec:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
24005dee:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24005df2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
24005df6:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
24005dfa:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
24005dfe:	2b00      	cmp	r3, #0
24005e00:	f47f ae79 	bne.w	24005af6 <HAL_DMA_IRQHandler+0x402>
24005e04:	e73e      	b.n	24005c84 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005e06:	0693      	lsls	r3, r2, #26
24005e08:	d455      	bmi.n	24005eb6 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005e0a:	f8d8 2000 	ldr.w	r2, [r8]
24005e0e:	4b62      	ldr	r3, [pc, #392]	; (24005f98 <HAL_DMA_IRQHandler+0x8a4>)
24005e10:	4c62      	ldr	r4, [pc, #392]	; (24005f9c <HAL_DMA_IRQHandler+0x8a8>)
24005e12:	4963      	ldr	r1, [pc, #396]	; (24005fa0 <HAL_DMA_IRQHandler+0x8ac>)
24005e14:	42a2      	cmp	r2, r4
24005e16:	bf18      	it	ne
24005e18:	429a      	cmpne	r2, r3
24005e1a:	f104 0430 	add.w	r4, r4, #48	; 0x30
24005e1e:	bf0c      	ite	eq
24005e20:	2301      	moveq	r3, #1
24005e22:	2300      	movne	r3, #0
24005e24:	428a      	cmp	r2, r1
24005e26:	bf08      	it	eq
24005e28:	f043 0301 	orreq.w	r3, r3, #1
24005e2c:	3130      	adds	r1, #48	; 0x30
24005e2e:	42a2      	cmp	r2, r4
24005e30:	bf08      	it	eq
24005e32:	f043 0301 	orreq.w	r3, r3, #1
24005e36:	3430      	adds	r4, #48	; 0x30
24005e38:	428a      	cmp	r2, r1
24005e3a:	bf08      	it	eq
24005e3c:	f043 0301 	orreq.w	r3, r3, #1
24005e40:	3130      	adds	r1, #48	; 0x30
24005e42:	42a2      	cmp	r2, r4
24005e44:	bf08      	it	eq
24005e46:	f043 0301 	orreq.w	r3, r3, #1
24005e4a:	3430      	adds	r4, #48	; 0x30
24005e4c:	428a      	cmp	r2, r1
24005e4e:	bf08      	it	eq
24005e50:	f043 0301 	orreq.w	r3, r3, #1
24005e54:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005e58:	42a2      	cmp	r2, r4
24005e5a:	bf08      	it	eq
24005e5c:	f043 0301 	orreq.w	r3, r3, #1
24005e60:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005e64:	428a      	cmp	r2, r1
24005e66:	bf08      	it	eq
24005e68:	f043 0301 	orreq.w	r3, r3, #1
24005e6c:	3130      	adds	r1, #48	; 0x30
24005e6e:	42a2      	cmp	r2, r4
24005e70:	bf08      	it	eq
24005e72:	f043 0301 	orreq.w	r3, r3, #1
24005e76:	3430      	adds	r4, #48	; 0x30
24005e78:	428a      	cmp	r2, r1
24005e7a:	bf08      	it	eq
24005e7c:	f043 0301 	orreq.w	r3, r3, #1
24005e80:	3130      	adds	r1, #48	; 0x30
24005e82:	42a2      	cmp	r2, r4
24005e84:	bf08      	it	eq
24005e86:	f043 0301 	orreq.w	r3, r3, #1
24005e8a:	3430      	adds	r4, #48	; 0x30
24005e8c:	428a      	cmp	r2, r1
24005e8e:	bf08      	it	eq
24005e90:	f043 0301 	orreq.w	r3, r3, #1
24005e94:	3130      	adds	r1, #48	; 0x30
24005e96:	42a2      	cmp	r2, r4
24005e98:	bf08      	it	eq
24005e9a:	f043 0301 	orreq.w	r3, r3, #1
24005e9e:	428a      	cmp	r2, r1
24005ea0:	bf08      	it	eq
24005ea2:	f043 0301 	orreq.w	r3, r3, #1
24005ea6:	b913      	cbnz	r3, 24005eae <HAL_DMA_IRQHandler+0x7ba>
24005ea8:	4b3e      	ldr	r3, [pc, #248]	; (24005fa4 <HAL_DMA_IRQHandler+0x8b0>)
24005eaa:	429a      	cmp	r2, r3
24005eac:	d17c      	bne.n	24005fa8 <HAL_DMA_IRQHandler+0x8b4>
24005eae:	6813      	ldr	r3, [r2, #0]
24005eb0:	f023 0308 	bic.w	r3, r3, #8
24005eb4:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24005eb6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24005eba:	2b00      	cmp	r3, #0
24005ebc:	f47f ae1b 	bne.w	24005af6 <HAL_DMA_IRQHandler+0x402>
24005ec0:	e6e0      	b.n	24005c84 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005ec2:	0690      	lsls	r0, r2, #26
24005ec4:	d45b      	bmi.n	24005f7e <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24005ec6:	f8d8 2000 	ldr.w	r2, [r8]
24005eca:	4b33      	ldr	r3, [pc, #204]	; (24005f98 <HAL_DMA_IRQHandler+0x8a4>)
24005ecc:	4c33      	ldr	r4, [pc, #204]	; (24005f9c <HAL_DMA_IRQHandler+0x8a8>)
24005ece:	4934      	ldr	r1, [pc, #208]	; (24005fa0 <HAL_DMA_IRQHandler+0x8ac>)
24005ed0:	42a2      	cmp	r2, r4
24005ed2:	bf18      	it	ne
24005ed4:	429a      	cmpne	r2, r3
24005ed6:	f104 0430 	add.w	r4, r4, #48	; 0x30
24005eda:	bf0c      	ite	eq
24005edc:	2301      	moveq	r3, #1
24005ede:	2300      	movne	r3, #0
24005ee0:	428a      	cmp	r2, r1
24005ee2:	bf08      	it	eq
24005ee4:	f043 0301 	orreq.w	r3, r3, #1
24005ee8:	3130      	adds	r1, #48	; 0x30
24005eea:	42a2      	cmp	r2, r4
24005eec:	bf08      	it	eq
24005eee:	f043 0301 	orreq.w	r3, r3, #1
24005ef2:	3430      	adds	r4, #48	; 0x30
24005ef4:	428a      	cmp	r2, r1
24005ef6:	bf08      	it	eq
24005ef8:	f043 0301 	orreq.w	r3, r3, #1
24005efc:	3130      	adds	r1, #48	; 0x30
24005efe:	42a2      	cmp	r2, r4
24005f00:	bf08      	it	eq
24005f02:	f043 0301 	orreq.w	r3, r3, #1
24005f06:	3430      	adds	r4, #48	; 0x30
24005f08:	428a      	cmp	r2, r1
24005f0a:	bf08      	it	eq
24005f0c:	f043 0301 	orreq.w	r3, r3, #1
24005f10:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005f14:	42a2      	cmp	r2, r4
24005f16:	bf08      	it	eq
24005f18:	f043 0301 	orreq.w	r3, r3, #1
24005f1c:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005f20:	428a      	cmp	r2, r1
24005f22:	bf08      	it	eq
24005f24:	f043 0301 	orreq.w	r3, r3, #1
24005f28:	3130      	adds	r1, #48	; 0x30
24005f2a:	42a2      	cmp	r2, r4
24005f2c:	bf08      	it	eq
24005f2e:	f043 0301 	orreq.w	r3, r3, #1
24005f32:	3430      	adds	r4, #48	; 0x30
24005f34:	428a      	cmp	r2, r1
24005f36:	bf08      	it	eq
24005f38:	f043 0301 	orreq.w	r3, r3, #1
24005f3c:	3130      	adds	r1, #48	; 0x30
24005f3e:	42a2      	cmp	r2, r4
24005f40:	bf08      	it	eq
24005f42:	f043 0301 	orreq.w	r3, r3, #1
24005f46:	3430      	adds	r4, #48	; 0x30
24005f48:	428a      	cmp	r2, r1
24005f4a:	bf08      	it	eq
24005f4c:	f043 0301 	orreq.w	r3, r3, #1
24005f50:	3130      	adds	r1, #48	; 0x30
24005f52:	42a2      	cmp	r2, r4
24005f54:	bf08      	it	eq
24005f56:	f043 0301 	orreq.w	r3, r3, #1
24005f5a:	428a      	cmp	r2, r1
24005f5c:	bf08      	it	eq
24005f5e:	f043 0301 	orreq.w	r3, r3, #1
24005f62:	b913      	cbnz	r3, 24005f6a <HAL_DMA_IRQHandler+0x876>
24005f64:	4b0f      	ldr	r3, [pc, #60]	; (24005fa4 <HAL_DMA_IRQHandler+0x8b0>)
24005f66:	429a      	cmp	r2, r3
24005f68:	d123      	bne.n	24005fb2 <HAL_DMA_IRQHandler+0x8be>
24005f6a:	6813      	ldr	r3, [r2, #0]
24005f6c:	f023 0314 	bic.w	r3, r3, #20
24005f70:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
24005f72:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
24005f74:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
24005f76:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24005f7a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24005f7e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
24005f82:	2b00      	cmp	r3, #0
24005f84:	f47f adb7 	bne.w	24005af6 <HAL_DMA_IRQHandler+0x402>
24005f88:	e67c      	b.n	24005c84 <HAL_DMA_IRQHandler+0x590>
24005f8a:	bf00      	nop
24005f8c:	58025408 	.word	0x58025408
24005f90:	5802541c 	.word	0x5802541c
24005f94:	58025494 	.word	0x58025494
24005f98:	40020010 	.word	0x40020010
24005f9c:	40020028 	.word	0x40020028
24005fa0:	40020040 	.word	0x40020040
24005fa4:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005fa8:	6813      	ldr	r3, [r2, #0]
24005faa:	f023 0304 	bic.w	r3, r3, #4
24005fae:	6013      	str	r3, [r2, #0]
24005fb0:	e781      	b.n	24005eb6 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24005fb2:	6813      	ldr	r3, [r2, #0]
24005fb4:	f023 030a 	bic.w	r3, r3, #10
24005fb8:	6013      	str	r3, [r2, #0]
24005fba:	e7da      	b.n	24005f72 <HAL_DMA_IRQHandler+0x87e>

24005fbc <HAL_DMA_GetState>:
  return hdma->State;
24005fbc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24005fc0:	4770      	bx	lr
24005fc2:	bf00      	nop

24005fc4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24005fc4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24005fc6:	4770      	bx	lr

24005fc8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24005fc8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24005fca:	7a0a      	ldrb	r2, [r1, #8]
{
24005fcc:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24005fce:	2a01      	cmp	r2, #1
24005fd0:	d02e      	beq.n	24006030 <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
24005fd2:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24005fd4:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24005fd6:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
24005fda:	2801      	cmp	r0, #1
24005fdc:	b2c2      	uxtb	r2, r0
24005fde:	d122      	bne.n	24006026 <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24005fe0:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
24005fe4:	2801      	cmp	r0, #1
24005fe6:	d026      	beq.n	24006036 <HAL_DMAEx_ConfigMuxSync+0x6e>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24005fe8:	6e18      	ldr	r0, [r3, #96]	; 0x60
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24005fea:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hdma);
24005fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24005ff2:	6802      	ldr	r2, [r0, #0]
24005ff4:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24005ff8:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24005ffa:	68ca      	ldr	r2, [r1, #12]
24005ffc:	6e1e      	ldr	r6, [r3, #96]	; 0x60
24005ffe:	1e50      	subs	r0, r2, #1
24006000:	7a0a      	ldrb	r2, [r1, #8]
24006002:	f891 e009 	ldrb.w	lr, [r1, #9]
24006006:	0412      	lsls	r2, r2, #16
24006008:	6831      	ldr	r1, [r6, #0]
2400600a:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
2400600e:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006010:	b2c9      	uxtb	r1, r1
24006012:	430a      	orrs	r2, r1
24006014:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24006018:	4322      	orrs	r2, r4
2400601a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
2400601e:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
24006020:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24006024:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006026:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
2400602a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400602c:	655a      	str	r2, [r3, #84]	; 0x54
}
2400602e:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
24006030:	e9d1 5400 	ldrd	r5, r4, [r1]
24006034:	e7cf      	b.n	24005fd6 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
24006036:	2002      	movs	r0, #2
}
24006038:	bd70      	pop	{r4, r5, r6, pc}
2400603a:	bf00      	nop

2400603c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
2400603c:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
2400603e:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
24006042:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006044:	6812      	ldr	r2, [r2, #0]
24006046:	421a      	tst	r2, r3
24006048:	d00e      	beq.n	24006068 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400604a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400604c:	6813      	ldr	r3, [r2, #0]
2400604e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24006052:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006054:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24006058:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
2400605a:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
2400605c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
2400605e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24006062:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
24006064:	b102      	cbz	r2, 24006068 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24006066:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24006068:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
2400606a:	b1ab      	cbz	r3, 24006098 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
2400606c:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
24006070:	6809      	ldr	r1, [r1, #0]
24006072:	4211      	tst	r1, r2
24006074:	d010      	beq.n	24006098 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006076:	681a      	ldr	r2, [r3, #0]
24006078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400607c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400607e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24006082:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006084:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24006086:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400608c:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
2400608e:	b11a      	cbz	r2, 24006098 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006090:	4620      	mov	r0, r4
      }
    }
  }
}
24006092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
24006096:	4710      	bx	r2
}
24006098:	bd10      	pop	{r4, pc}
2400609a:	bf00      	nop

2400609c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400609c:	680b      	ldr	r3, [r1, #0]
2400609e:	2b00      	cmp	r3, #0
240060a0:	f000 811a 	beq.w	240062d8 <HAL_GPIO_Init+0x23c>
240060a4:	f04f 0c00 	mov.w	ip, #0
{
240060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
240060ac:	4662      	mov	r2, ip
{
240060ae:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240060b0:	4d94      	ldr	r5, [pc, #592]	; (24006304 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240060b2:	4f95      	ldr	r7, [pc, #596]	; (24006308 <HAL_GPIO_Init+0x26c>)
240060b4:	f8df 8268 	ldr.w	r8, [pc, #616]	; 24006320 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
240060b8:	f04f 0901 	mov.w	r9, #1
240060bc:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
240060c0:	ea19 0e03 	ands.w	lr, r9, r3
240060c4:	f000 80c2 	beq.w	2400624c <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
240060c8:	684b      	ldr	r3, [r1, #4]
240060ca:	f003 0303 	and.w	r3, r3, #3
240060ce:	1e5c      	subs	r4, r3, #1
240060d0:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240060d2:	f04f 0403 	mov.w	r4, #3
240060d6:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
240060da:	f240 80c1 	bls.w	24006260 <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240060de:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
240060e0:	2b03      	cmp	r3, #3
240060e2:	d026      	beq.n	24006132 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
240060e4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240060e6:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240060ea:	688b      	ldr	r3, [r1, #8]
240060ec:	fa03 f30c 	lsl.w	r3, r3, ip
240060f0:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
240060f4:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240060f6:	684b      	ldr	r3, [r1, #4]
240060f8:	f003 0303 	and.w	r3, r3, #3
240060fc:	2b02      	cmp	r3, #2
240060fe:	d118      	bne.n	24006132 <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006100:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
24006104:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006108:	ea4f 0b83 	mov.w	fp, r3, lsl #2
2400610c:	230f      	movs	r3, #15
2400610e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
24006112:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
24006116:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2400611a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400611e:	690b      	ldr	r3, [r1, #16]
24006120:	fa03 f30b 	lsl.w	r3, r3, fp
24006124:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
24006128:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400612c:	684b      	ldr	r3, [r1, #4]
2400612e:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
24006132:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006136:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2400613a:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400613e:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
24006140:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24006142:	684b      	ldr	r3, [r1, #4]
24006144:	f413 3f40 	tst.w	r3, #196608	; 0x30000
24006148:	d07f      	beq.n	2400624a <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400614a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
2400614e:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006152:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006156:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006158:	f043 0302 	orr.w	r3, r3, #2
2400615c:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006160:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006164:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
24006168:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2400616c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
24006170:	f003 0302 	and.w	r3, r3, #2
24006174:	9301      	str	r3, [sp, #4]
24006176:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006178:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
2400617c:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24006180:	fa03 f309 	lsl.w	r3, r3, r9
24006184:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006188:	d02b      	beq.n	240061e2 <HAL_GPIO_Init+0x146>
2400618a:	4540      	cmp	r0, r8
2400618c:	f000 8088 	beq.w	240062a0 <HAL_GPIO_Init+0x204>
24006190:	4e5e      	ldr	r6, [pc, #376]	; (2400630c <HAL_GPIO_Init+0x270>)
24006192:	42b0      	cmp	r0, r6
24006194:	f000 808b 	beq.w	240062ae <HAL_GPIO_Init+0x212>
24006198:	4e5d      	ldr	r6, [pc, #372]	; (24006310 <HAL_GPIO_Init+0x274>)
2400619a:	42b0      	cmp	r0, r6
2400619c:	d079      	beq.n	24006292 <HAL_GPIO_Init+0x1f6>
2400619e:	4e5d      	ldr	r6, [pc, #372]	; (24006314 <HAL_GPIO_Init+0x278>)
240061a0:	42b0      	cmp	r0, r6
240061a2:	f000 8092 	beq.w	240062ca <HAL_GPIO_Init+0x22e>
240061a6:	4e5c      	ldr	r6, [pc, #368]	; (24006318 <HAL_GPIO_Init+0x27c>)
240061a8:	42b0      	cmp	r0, r6
240061aa:	f000 8096 	beq.w	240062da <HAL_GPIO_Init+0x23e>
240061ae:	4e5b      	ldr	r6, [pc, #364]	; (2400631c <HAL_GPIO_Init+0x280>)
240061b0:	42b0      	cmp	r0, r6
240061b2:	f000 8083 	beq.w	240062bc <HAL_GPIO_Init+0x220>
240061b6:	f8df a16c 	ldr.w	sl, [pc, #364]	; 24006324 <HAL_GPIO_Init+0x288>
240061ba:	4550      	cmp	r0, sl
240061bc:	f000 8094 	beq.w	240062e8 <HAL_GPIO_Init+0x24c>
240061c0:	f8df a164 	ldr.w	sl, [pc, #356]	; 24006328 <HAL_GPIO_Init+0x28c>
240061c4:	4550      	cmp	r0, sl
240061c6:	f000 8096 	beq.w	240062f6 <HAL_GPIO_Init+0x25a>
240061ca:	f8df a160 	ldr.w	sl, [pc, #352]	; 2400632c <HAL_GPIO_Init+0x290>
240061ce:	4550      	cmp	r0, sl
240061d0:	bf0c      	ite	eq
240061d2:	f04f 0a09 	moveq.w	sl, #9
240061d6:	f04f 0a0a 	movne.w	sl, #10
240061da:	fa0a f909 	lsl.w	r9, sl, r9
240061de:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
240061e2:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240061e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
240061e8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
240061ea:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
240061ee:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
240061f0:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
240061f4:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
240061f6:	bf54      	ite	pl
240061f8:	4023      	andpl	r3, r4
          temp |= iocurrent;
240061fa:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
240061fe:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24006202:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
24006204:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24006208:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400620c:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
2400620e:	bf54      	ite	pl
24006210:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006212:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
24006216:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400621a:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
2400621c:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
24006220:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006224:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
24006226:	bf54      	ite	pl
24006228:	4023      	andpl	r3, r4
          temp |= iocurrent;
2400622a:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
2400622e:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006232:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
24006234:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006238:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
2400623a:	bf54      	ite	pl
2400623c:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
2400623e:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
24006242:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
24006246:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400624a:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
2400624c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400624e:	f10c 0c02 	add.w	ip, ip, #2
24006252:	fa33 f402 	lsrs.w	r4, r3, r2
24006256:	f47f af2f 	bne.w	240060b8 <HAL_GPIO_Init+0x1c>
  }
}
2400625a:	b003      	add	sp, #12
2400625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
24006260:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006262:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24006266:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006268:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
2400626a:	fa03 f30c 	lsl.w	r3, r3, ip
2400626e:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
24006272:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006274:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
24006276:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400627a:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2400627e:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006282:	4093      	lsls	r3, r2
24006284:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
24006288:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400628a:	684b      	ldr	r3, [r1, #4]
2400628c:	f003 0303 	and.w	r3, r3, #3
24006290:	e726      	b.n	240060e0 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006292:	f04f 0a03 	mov.w	sl, #3
24006296:	fa0a f909 	lsl.w	r9, sl, r9
2400629a:	ea43 0309 	orr.w	r3, r3, r9
2400629e:	e7a0      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062a0:	f04f 0a01 	mov.w	sl, #1
240062a4:	fa0a f909 	lsl.w	r9, sl, r9
240062a8:	ea43 0309 	orr.w	r3, r3, r9
240062ac:	e799      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062ae:	f04f 0a02 	mov.w	sl, #2
240062b2:	fa0a f909 	lsl.w	r9, sl, r9
240062b6:	ea43 0309 	orr.w	r3, r3, r9
240062ba:	e792      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062bc:	f04f 0a06 	mov.w	sl, #6
240062c0:	fa0a f909 	lsl.w	r9, sl, r9
240062c4:	ea43 0309 	orr.w	r3, r3, r9
240062c8:	e78b      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062ca:	f04f 0a04 	mov.w	sl, #4
240062ce:	fa0a f909 	lsl.w	r9, sl, r9
240062d2:	ea43 0309 	orr.w	r3, r3, r9
240062d6:	e784      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062d8:	4770      	bx	lr
240062da:	f04f 0a05 	mov.w	sl, #5
240062de:	fa0a f909 	lsl.w	r9, sl, r9
240062e2:	ea43 0309 	orr.w	r3, r3, r9
240062e6:	e77c      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062e8:	f04f 0a07 	mov.w	sl, #7
240062ec:	fa0a f909 	lsl.w	r9, sl, r9
240062f0:	ea43 0309 	orr.w	r3, r3, r9
240062f4:	e775      	b.n	240061e2 <HAL_GPIO_Init+0x146>
240062f6:	f04f 0a08 	mov.w	sl, #8
240062fa:	fa0a f909 	lsl.w	r9, sl, r9
240062fe:	ea43 0309 	orr.w	r3, r3, r9
24006302:	e76e      	b.n	240061e2 <HAL_GPIO_Init+0x146>
24006304:	58024400 	.word	0x58024400
24006308:	58020000 	.word	0x58020000
2400630c:	58020800 	.word	0x58020800
24006310:	58020c00 	.word	0x58020c00
24006314:	58021000 	.word	0x58021000
24006318:	58021400 	.word	0x58021400
2400631c:	58021800 	.word	0x58021800
24006320:	58020400 	.word	0x58020400
24006324:	58021c00 	.word	0x58021c00
24006328:	58022000 	.word	0x58022000
2400632c:	58022400 	.word	0x58022400

24006330 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24006330:	6903      	ldr	r3, [r0, #16]
24006332:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24006334:	bf14      	ite	ne
24006336:	2001      	movne	r0, #1
24006338:	2000      	moveq	r0, #0
2400633a:	4770      	bx	lr

2400633c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
2400633c:	b902      	cbnz	r2, 24006340 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400633e:	0409      	lsls	r1, r1, #16
24006340:	6181      	str	r1, [r0, #24]
  }
}
24006342:	4770      	bx	lr

24006344 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
24006344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24006348:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
2400634c:	4201      	tst	r1, r0
2400634e:	d100      	bne.n	24006352 <HAL_GPIO_EXTI_IRQHandler+0xe>
24006350:	4770      	bx	lr
{
24006352:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
24006354:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24006358:	f7fd fca4 	bl	24003ca4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
2400635c:	bd08      	pop	{r3, pc}
2400635e:	bf00      	nop

24006360 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006364:	6803      	ldr	r3, [r0, #0]
{
24006366:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006368:	699a      	ldr	r2, [r3, #24]
2400636a:	0694      	lsls	r4, r2, #26
2400636c:	d46d      	bmi.n	2400644a <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
2400636e:	4605      	mov	r5, r0
24006370:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006372:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
24006376:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24006378:	f014 0410 	ands.w	r4, r4, #16
2400637c:	d068      	beq.n	24006450 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
2400637e:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006380:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
24006384:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006386:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006388:	46b2      	mov	sl, r6
2400638a:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400638c:	699a      	ldr	r2, [r3, #24]
2400638e:	d161      	bne.n	24006454 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
24006390:	0690      	lsls	r0, r2, #26
24006392:	f100 8085 	bmi.w	240064a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24006396:	f1ba 0f00 	cmp.w	sl, #0
2400639a:	d105      	bne.n	240063a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
2400639c:	699c      	ldr	r4, [r3, #24]
2400639e:	06a1      	lsls	r1, r4, #26
240063a0:	d5fc      	bpl.n	2400639c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240063a2:	2220      	movs	r2, #32
240063a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
240063a6:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
240063a8:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
240063ac:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
240063ae:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240063b0:	05d0      	lsls	r0, r2, #23
240063b2:	d535      	bpl.n	24006420 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240063b4:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240063b8:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
240063ba:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240063be:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240063c0:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240063c2:	d505      	bpl.n	240063d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240063c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
240063c8:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240063cc:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240063ce:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240063d0:	0597      	lsls	r7, r2, #22
240063d2:	d505      	bpl.n	240063e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240063d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
240063d8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240063dc:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240063de:	682b      	ldr	r3, [r5, #0]
240063e0:	699a      	ldr	r2, [r3, #24]
240063e2:	0790      	lsls	r0, r2, #30
240063e4:	d502      	bpl.n	240063ec <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
240063e6:	2200      	movs	r2, #0
240063e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240063ea:	682b      	ldr	r3, [r5, #0]
240063ec:	699a      	ldr	r2, [r3, #24]
240063ee:	07d1      	lsls	r1, r2, #31
240063f0:	d404      	bmi.n	240063fc <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240063f2:	699a      	ldr	r2, [r3, #24]
240063f4:	f042 0201 	orr.w	r2, r2, #1
240063f8:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
240063fa:	682b      	ldr	r3, [r5, #0]
240063fc:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
240063fe:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
24006400:	4835      	ldr	r0, [pc, #212]	; (240064d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
24006402:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24006404:	4002      	ands	r2, r0
      return HAL_ERROR;
24006406:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006408:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
2400640a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400640c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24006410:	431c      	orrs	r4, r3
24006412:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006414:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006418:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
2400641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006420:	0550      	lsls	r0, r2, #21
24006422:	d4cf      	bmi.n	240063c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006424:	0596      	lsls	r6, r2, #22
24006426:	d4d5      	bmi.n	240063d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
24006428:	2900      	cmp	r1, #0
2400642a:	d1d9      	bne.n	240063e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400642c:	f7fe f948 	bl	240046c0 <HAL_GetTick>
24006430:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24006434:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006436:	42b8      	cmp	r0, r7
24006438:	d800      	bhi.n	2400643c <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
2400643a:	b91f      	cbnz	r7, 24006444 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
2400643c:	699a      	ldr	r2, [r3, #24]
2400643e:	f012 0220 	ands.w	r2, r2, #32
24006442:	d032      	beq.n	240064aa <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006444:	699a      	ldr	r2, [r3, #24]
24006446:	0692      	lsls	r2, r2, #26
24006448:	d595      	bpl.n	24006376 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
2400644a:	2000      	movs	r0, #0
}
2400644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
24006450:	4621      	mov	r1, r4
24006452:	e7ac      	b.n	240063ae <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006454:	0692      	lsls	r2, r2, #26
24006456:	d423      	bmi.n	240064a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24006458:	f1ba 0f00 	cmp.w	sl, #0
2400645c:	d1a4      	bne.n	240063a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400645e:	f7fe f92f 	bl	240046c0 <HAL_GetTick>
24006462:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006464:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006466:	4287      	cmp	r7, r0
24006468:	d301      	bcc.n	2400646e <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
2400646a:	2f00      	cmp	r7, #0
2400646c:	d18d      	bne.n	2400638a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400646e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24006470:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006474:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24006476:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006478:	0409      	lsls	r1, r1, #16
2400647a:	d503      	bpl.n	24006484 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
2400647c:	0441      	lsls	r1, r0, #17
2400647e:	d401      	bmi.n	24006484 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24006480:	2a20      	cmp	r2, #32
24006482:	d11f      	bne.n	240064c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006484:	699a      	ldr	r2, [r3, #24]
24006486:	0690      	lsls	r0, r2, #26
24006488:	f53f af7f 	bmi.w	2400638a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400648c:	f7fe f918 	bl	240046c0 <HAL_GetTick>
24006490:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006492:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006494:	2819      	cmp	r0, #25
24006496:	d9f5      	bls.n	24006484 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006498:	2620      	movs	r6, #32
              status = HAL_ERROR;
2400649a:	f04f 0a01 	mov.w	sl, #1
2400649e:	e774      	b.n	2400638a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
240064a0:	f1ba 0f00 	cmp.w	sl, #0
240064a4:	f43f af7d 	beq.w	240063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
240064a8:	e77e      	b.n	240063a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240064aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240064ac:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
240064ae:	2001      	movs	r0, #1
240064b0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240064b4:	430b      	orrs	r3, r1
240064b6:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240064b8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240064bc:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
240064c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
240064c4:	685a      	ldr	r2, [r3, #4]
240064c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
240064ca:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
240064cc:	f7fe f8f8 	bl	240046c0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240064d0:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
240064d2:	4604      	mov	r4, r0
240064d4:	e7d6      	b.n	24006484 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
240064d6:	bf00      	nop
240064d8:	fe00e800 	.word	0xfe00e800

240064dc <HAL_I2C_Init>:
  if (hi2c == NULL)
240064dc:	2800      	cmp	r0, #0
240064de:	d056      	beq.n	2400658e <HAL_I2C_Init+0xb2>
{
240064e0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
240064e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240064e6:	4604      	mov	r4, r0
240064e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
240064ec:	2b00      	cmp	r3, #0
240064ee:	d049      	beq.n	24006584 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
240064f0:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
240064f2:	2324      	movs	r3, #36	; 0x24
240064f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
240064f8:	6813      	ldr	r3, [r2, #0]
240064fa:	f023 0301 	bic.w	r3, r3, #1
240064fe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24006500:	e9d4 2300 	ldrd	r2, r3, [r4]
24006504:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
24006508:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400650a:	6822      	ldr	r2, [r4, #0]
2400650c:	6893      	ldr	r3, [r2, #8]
2400650e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006512:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006514:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24006516:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006518:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400651a:	68a3      	ldr	r3, [r4, #8]
2400651c:	bf0c      	ite	eq
2400651e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24006522:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
24006526:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006528:	68e3      	ldr	r3, [r4, #12]
2400652a:	2b02      	cmp	r3, #2
2400652c:	d103      	bne.n	24006536 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
2400652e:	6823      	ldr	r3, [r4, #0]
24006530:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006534:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006536:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
24006538:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400653c:	4b15      	ldr	r3, [pc, #84]	; (24006594 <HAL_I2C_Init+0xb8>)
2400653e:	6851      	ldr	r1, [r2, #4]
24006540:	430b      	orrs	r3, r1
24006542:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24006544:	6822      	ldr	r2, [r4, #0]
24006546:	68d3      	ldr	r3, [r2, #12]
24006548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400654c:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
2400654e:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24006550:	6821      	ldr	r1, [r4, #0]
24006552:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
24006556:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006558:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400655a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
2400655e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24006560:	6821      	ldr	r1, [r4, #0]
24006562:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
24006566:	4303      	orrs	r3, r0
  return HAL_OK;
24006568:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400656a:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
2400656c:	6821      	ldr	r1, [r4, #0]
2400656e:	680b      	ldr	r3, [r1, #0]
24006570:	f043 0301 	orr.w	r3, r3, #1
24006574:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006576:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24006578:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400657c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400657e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
24006582:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
24006584:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
24006588:	f7fb fcb2 	bl	24001ef0 <HAL_I2C_MspInit>
2400658c:	e7b0      	b.n	240064f0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
2400658e:	2001      	movs	r0, #1
}
24006590:	4770      	bx	lr
24006592:	bf00      	nop
24006594:	02008000 	.word	0x02008000

24006598 <HAL_I2C_Master_Transmit>:
{
24006598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400659c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
2400659e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
240065a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
240065a4:	2b20      	cmp	r3, #32
240065a6:	d12c      	bne.n	24006602 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
240065a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240065ac:	4683      	mov	fp, r0
240065ae:	2b01      	cmp	r3, #1
240065b0:	d027      	beq.n	24006602 <HAL_I2C_Master_Transmit+0x6a>
240065b2:	2301      	movs	r3, #1
240065b4:	468a      	mov	sl, r1
240065b6:	4616      	mov	r6, r2
240065b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
240065bc:	f7fe f880 	bl	240046c0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240065c0:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
240065c4:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240065c6:	699a      	ldr	r2, [r3, #24]
240065c8:	0417      	lsls	r7, r2, #16
240065ca:	d51d      	bpl.n	24006608 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240065cc:	f7fe f878 	bl	240046c0 <HAL_GetTick>
240065d0:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240065d4:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240065d8:	2819      	cmp	r0, #25
240065da:	d9f4      	bls.n	240065c6 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240065dc:	699a      	ldr	r2, [r3, #24]
240065de:	0410      	lsls	r0, r2, #16
240065e0:	d5f1      	bpl.n	240065c6 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240065e2:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240065e6:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
240065e8:	2200      	movs	r2, #0
      return HAL_ERROR;
240065ea:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240065ec:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
240065ee:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240065f2:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240065f6:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240065fa:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
240065fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24006602:	2002      	movs	r0, #2
}
24006604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006608:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400660a:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
2400660c:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006610:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24006614:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
24006616:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400661a:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400661e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
24006622:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006626:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
2400662a:	b292      	uxth	r2, r2
2400662c:	2aff      	cmp	r2, #255	; 0xff
2400662e:	d87e      	bhi.n	2400672e <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
24006630:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24006634:	48ad      	ldr	r0, [pc, #692]	; (240068ec <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
24006636:	b292      	uxth	r2, r2
24006638:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400663c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
2400663e:	6859      	ldr	r1, [r3, #4]
24006640:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24006642:	f3ca 0109 	ubfx	r1, sl, #0, #10
24006646:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
2400664a:	4301      	orrs	r1, r0
2400664c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24006650:	49a7      	ldr	r1, [pc, #668]	; (240068f0 <HAL_I2C_Master_Transmit+0x358>)
24006652:	4311      	orrs	r1, r2
24006654:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006656:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
2400665a:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
2400665e:	b29b      	uxth	r3, r3
24006660:	2b00      	cmp	r3, #0
24006662:	f000 8107 	beq.w	24006874 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24006666:	f8db 3000 	ldr.w	r3, [fp]
2400666a:	699c      	ldr	r4, [r3, #24]
2400666c:	f014 0402 	ands.w	r4, r4, #2
24006670:	f040 80c5 	bne.w	240067fe <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
24006674:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24006676:	f012 0210 	ands.w	r2, r2, #16
2400667a:	f000 808d 	beq.w	24006798 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400667e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24006680:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24006682:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006684:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006686:	f8db 3000 	ldr.w	r3, [fp]
2400668a:	1c69      	adds	r1, r5, #1
2400668c:	699a      	ldr	r2, [r3, #24]
2400668e:	f040 8085 	bne.w	2400679c <HAL_I2C_Master_Transmit+0x204>
24006692:	0690      	lsls	r0, r2, #26
24006694:	f100 8106 	bmi.w	240068a4 <HAL_I2C_Master_Transmit+0x30c>
24006698:	b937      	cbnz	r7, 240066a8 <HAL_I2C_Master_Transmit+0x110>
2400669a:	699a      	ldr	r2, [r3, #24]
2400669c:	0691      	lsls	r1, r2, #26
2400669e:	d5fc      	bpl.n	2400669a <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240066a0:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
240066a4:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
240066a8:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
240066ac:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
240066ae:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240066b0:	05ce      	lsls	r6, r1, #23
240066b2:	d54b      	bpl.n	2400674c <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240066b4:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240066b8:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
240066ba:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240066be:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240066c0:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240066c4:	d506      	bpl.n	240066d4 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240066c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
240066ca:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240066ce:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240066d0:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240066d4:	0589      	lsls	r1, r1, #22
240066d6:	d506      	bpl.n	240066e6 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240066d8:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
240066dc:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240066e0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240066e2:	f8db 3000 	ldr.w	r3, [fp]
240066e6:	6999      	ldr	r1, [r3, #24]
240066e8:	078e      	lsls	r6, r1, #30
240066ea:	d503      	bpl.n	240066f4 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
240066ec:	2100      	movs	r1, #0
240066ee:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240066f0:	f8db 3000 	ldr.w	r3, [fp]
240066f4:	6999      	ldr	r1, [r3, #24]
240066f6:	07cd      	lsls	r5, r1, #31
240066f8:	d405      	bmi.n	24006706 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240066fa:	6999      	ldr	r1, [r3, #24]
240066fc:	f041 0101 	orr.w	r1, r1, #1
24006700:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24006702:	f8db 3000 	ldr.w	r3, [fp]
24006706:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006708:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
2400670a:	487a      	ldr	r0, [pc, #488]	; (240068f4 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
2400670c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
2400670e:	4001      	ands	r1, r0
        return HAL_ERROR;
24006710:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006712:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24006714:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
24006718:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
2400671c:	431a      	orrs	r2, r3
2400671e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006722:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006726:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
2400672a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400672e:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006730:	496e      	ldr	r1, [pc, #440]	; (240068ec <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
24006732:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006736:	685a      	ldr	r2, [r3, #4]
24006738:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400673a:	f3ca 0109 	ubfx	r1, sl, #0, #10
2400673e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24006742:	4311      	orrs	r1, r2
24006744:	4a6c      	ldr	r2, [pc, #432]	; (240068f8 <HAL_I2C_Master_Transmit+0x360>)
24006746:	430a      	orrs	r2, r1
24006748:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2400674a:	e784      	b.n	24006656 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400674c:	054c      	lsls	r4, r1, #21
2400674e:	d4ba      	bmi.n	240066c6 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006750:	058f      	lsls	r7, r1, #22
24006752:	d4c1      	bmi.n	240066d8 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
24006754:	2800      	cmp	r0, #0
24006756:	d1c6      	bne.n	240066e6 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
24006758:	1c6a      	adds	r2, r5, #1
2400675a:	d086      	beq.n	2400666a <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400675c:	f7fd ffb0 	bl	240046c0 <HAL_GetTick>
24006760:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24006764:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006768:	4285      	cmp	r5, r0
2400676a:	d302      	bcc.n	24006772 <HAL_I2C_Master_Transmit+0x1da>
2400676c:	2d00      	cmp	r5, #0
2400676e:	f47f af7c 	bne.w	2400666a <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24006772:	699a      	ldr	r2, [r3, #24]
24006774:	f012 0202 	ands.w	r2, r2, #2
24006778:	f47f af77 	bne.w	2400666a <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400677c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006780:	2120      	movs	r1, #32
        return HAL_ERROR;
24006782:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24006784:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006788:	430b      	orrs	r3, r1
2400678a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400678e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006792:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
24006796:	e735      	b.n	24006604 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
24006798:	4610      	mov	r0, r2
2400679a:	e788      	b.n	240066ae <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400679c:	0692      	lsls	r2, r2, #26
2400679e:	f100 8081 	bmi.w	240068a4 <HAL_I2C_Master_Transmit+0x30c>
240067a2:	2f00      	cmp	r7, #0
240067a4:	d180      	bne.n	240066a8 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240067a6:	f7fd ff8b 	bl	240046c0 <HAL_GetTick>
240067aa:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240067ac:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240067b0:	4285      	cmp	r5, r0
240067b2:	d302      	bcc.n	240067ba <HAL_I2C_Master_Transmit+0x222>
240067b4:	2d00      	cmp	r5, #0
240067b6:	f47f af68 	bne.w	2400668a <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240067ba:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240067bc:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240067c0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240067c2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240067c4:	0409      	lsls	r1, r1, #16
240067c6:	d50c      	bpl.n	240067e2 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
240067c8:	0441      	lsls	r1, r0, #17
240067ca:	d40a      	bmi.n	240067e2 <HAL_I2C_Master_Transmit+0x24a>
240067cc:	2a20      	cmp	r2, #32
240067ce:	d008      	beq.n	240067e2 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
240067d0:	685a      	ldr	r2, [r3, #4]
240067d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
240067d6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
240067d8:	f7fd ff72 	bl	240046c0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240067dc:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
240067e0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240067e2:	699a      	ldr	r2, [r3, #24]
240067e4:	0690      	lsls	r0, r2, #26
240067e6:	f53f af50 	bmi.w	2400668a <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240067ea:	f7fd ff69 	bl	240046c0 <HAL_GetTick>
240067ee:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240067f0:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240067f4:	2819      	cmp	r0, #25
240067f6:	d9f4      	bls.n	240067e2 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240067f8:	2420      	movs	r4, #32
              status = HAL_ERROR;
240067fa:	2701      	movs	r7, #1
240067fc:	e745      	b.n	2400668a <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
240067fe:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
24006802:	7812      	ldrb	r2, [r2, #0]
24006804:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24006806:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
2400680a:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
2400680e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
24006810:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
24006814:	3b01      	subs	r3, #1
      hi2c->XferCount--;
24006816:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
24006818:	3101      	adds	r1, #1
      hi2c->XferSize--;
2400681a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
2400681c:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006820:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006824:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006828:	b292      	uxth	r2, r2
      hi2c->XferSize--;
2400682a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400682e:	2a00      	cmp	r2, #0
24006830:	f43f af13 	beq.w	2400665a <HAL_I2C_Master_Transmit+0xc2>
24006834:	2b00      	cmp	r3, #0
24006836:	f47f af10 	bne.w	2400665a <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400683a:	f8db 2000 	ldr.w	r2, [fp]
2400683e:	1c6c      	adds	r4, r5, #1
24006840:	d134      	bne.n	240068ac <HAL_I2C_Master_Transmit+0x314>
24006842:	6993      	ldr	r3, [r2, #24]
24006844:	0618      	lsls	r0, r3, #24
24006846:	d5fc      	bpl.n	24006842 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006848:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
2400684c:	b29b      	uxth	r3, r3
2400684e:	2bff      	cmp	r3, #255	; 0xff
24006850:	d958      	bls.n	24006904 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
24006852:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006854:	4929      	ldr	r1, [pc, #164]	; (240068fc <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
24006856:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
2400685a:	6853      	ldr	r3, [r2, #4]
2400685c:	400b      	ands	r3, r1
2400685e:	4928      	ldr	r1, [pc, #160]	; (24006900 <HAL_I2C_Master_Transmit+0x368>)
24006860:	ea4a 0303 	orr.w	r3, sl, r3
24006864:	4319      	orrs	r1, r3
24006866:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
24006868:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
2400686c:	b29b      	uxth	r3, r3
2400686e:	2b00      	cmp	r3, #0
24006870:	f47f aef9 	bne.w	24006666 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24006874:	4642      	mov	r2, r8
24006876:	4629      	mov	r1, r5
24006878:	4658      	mov	r0, fp
2400687a:	f7ff fd71 	bl	24006360 <I2C_WaitOnSTOPFlagUntilTimeout>
2400687e:	2800      	cmp	r0, #0
24006880:	d151      	bne.n	24006926 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006882:	f8db 3000 	ldr.w	r3, [fp]
24006886:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
24006888:	4c1a      	ldr	r4, [pc, #104]	; (240068f4 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400688a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
2400688c:	f8db 1000 	ldr.w	r1, [fp]
24006890:	684b      	ldr	r3, [r1, #4]
24006892:	4023      	ands	r3, r4
24006894:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
24006896:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400689a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400689e:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
240068a2:	e6af      	b.n	24006604 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
240068a4:	2f00      	cmp	r7, #0
240068a6:	f43f aefb 	beq.w	240066a0 <HAL_I2C_Master_Transmit+0x108>
240068aa:	e6fd      	b.n	240066a8 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240068ac:	6993      	ldr	r3, [r2, #24]
240068ae:	0619      	lsls	r1, r3, #24
240068b0:	d4ca      	bmi.n	24006848 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240068b2:	f7fd ff05 	bl	240046c0 <HAL_GetTick>
240068b6:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240068ba:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240068be:	4285      	cmp	r5, r0
240068c0:	d301      	bcc.n	240068c6 <HAL_I2C_Master_Transmit+0x32e>
240068c2:	2d00      	cmp	r5, #0
240068c4:	d1bb      	bne.n	2400683e <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240068c6:	6993      	ldr	r3, [r2, #24]
240068c8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
240068cc:	d1b7      	bne.n	2400683e <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240068ce:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240068d2:	2120      	movs	r1, #32
          return HAL_ERROR;
240068d4:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
240068d6:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240068da:	430a      	orrs	r2, r1
240068dc:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240068e0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240068e4:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
240068e8:	e68c      	b.n	24006604 <HAL_I2C_Master_Transmit+0x6c>
240068ea:	bf00      	nop
240068ec:	fc009800 	.word	0xfc009800
240068f0:	02002000 	.word	0x02002000
240068f4:	fe00e800 	.word	0xfe00e800
240068f8:	01ff2000 	.word	0x01ff2000
240068fc:	fc009c00 	.word	0xfc009c00
24006900:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
24006904:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
24006908:	4808      	ldr	r0, [pc, #32]	; (2400692c <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
2400690a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400690c:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
2400690e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006912:	6853      	ldr	r3, [r2, #4]
24006914:	4003      	ands	r3, r0
24006916:	ea4a 0303 	orr.w	r3, sl, r3
2400691a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400691e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24006922:	6053      	str	r3, [r2, #4]
}
24006924:	e699      	b.n	2400665a <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
24006926:	2001      	movs	r0, #1
24006928:	e66c      	b.n	24006604 <HAL_I2C_Master_Transmit+0x6c>
2400692a:	bf00      	nop
2400692c:	fc009c00 	.word	0xfc009c00

24006930 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
24006930:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006934:	2b20      	cmp	r3, #32
24006936:	d126      	bne.n	24006986 <HAL_I2C_Slave_Receive_IT+0x56>
{
24006938:	b4f0      	push	{r4, r5, r6, r7}
2400693a:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
2400693c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24006940:	2b01      	cmp	r3, #1
24006942:	d022      	beq.n	2400698a <HAL_I2C_Slave_Receive_IT+0x5a>
24006944:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24006946:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006948:	4e11      	ldr	r6, [pc, #68]	; (24006990 <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
2400694a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400694e:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006950:	4f10      	ldr	r7, [pc, #64]	; (24006994 <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006952:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006956:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
24006958:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400695c:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400695e:	686c      	ldr	r4, [r5, #4]
24006960:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
24006964:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
24006966:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
24006968:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
2400696a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400696c:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400696e:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
24006970:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006972:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
24006974:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
24006978:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400697a:	680a      	ldr	r2, [r1, #0]
2400697c:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
24006980:	600a      	str	r2, [r1, #0]
}
24006982:	bcf0      	pop	{r4, r5, r6, r7}
24006984:	4770      	bx	lr
    return HAL_BUSY;
24006986:	2002      	movs	r0, #2
}
24006988:	4770      	bx	lr
    return HAL_BUSY;
2400698a:	2002      	movs	r0, #2
}
2400698c:	bcf0      	pop	{r4, r5, r6, r7}
2400698e:	4770      	bx	lr
24006990:	ffff0000 	.word	0xffff0000
24006994:	24006e31 	.word	0x24006e31

24006998 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006998:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
2400699a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400699c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400699e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
240069a0:	b103      	cbz	r3, 240069a4 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
240069a2:	4718      	bx	r3
}
240069a4:	4770      	bx	lr
240069a6:	bf00      	nop

240069a8 <HAL_I2C_SlaveTxCpltCallback>:
240069a8:	4770      	bx	lr
240069aa:	bf00      	nop

240069ac <I2C_ITSlaveSeqCplt>:
{
240069ac:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
240069ae:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
240069b0:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
240069b2:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
240069b4:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
240069b8:	0451      	lsls	r1, r2, #17
240069ba:	d50c      	bpl.n	240069d6 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
240069bc:	681a      	ldr	r2, [r3, #0]
240069be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
240069c2:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
240069c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240069c8:	2b29      	cmp	r3, #41	; 0x29
240069ca:	d00e      	beq.n	240069ea <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
240069cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240069d0:	2b2a      	cmp	r3, #42	; 0x2a
240069d2:	d024      	beq.n	24006a1e <I2C_ITSlaveSeqCplt+0x72>
}
240069d4:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
240069d6:	0412      	lsls	r2, r2, #16
240069d8:	d5f4      	bpl.n	240069c4 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240069da:	681a      	ldr	r2, [r3, #0]
240069dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
240069e0:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
240069e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240069e6:	2b29      	cmp	r3, #41	; 0x29
240069e8:	d1f0      	bne.n	240069cc <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240069ea:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240069ec:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240069ee:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
240069f0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240069f4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240069f8:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240069fa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240069fe:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a00:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006a04:	2a28      	cmp	r2, #40	; 0x28
24006a06:	bf0c      	ite	eq
24006a08:	f06f 0242 	mvneq.w	r2, #66	; 0x42
24006a0c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a10:	4013      	ands	r3, r2
24006a12:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006a14:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006a18:	f7ff ffc6 	bl	240069a8 <HAL_I2C_SlaveTxCpltCallback>
}
24006a1c:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a1e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006a20:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a22:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006a24:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a28:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006a2c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a2e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a32:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a34:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006a38:	2a28      	cmp	r2, #40	; 0x28
24006a3a:	bf0c      	ite	eq
24006a3c:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24006a40:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a44:	4013      	ands	r3, r2
24006a46:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006a48:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006a4c:	f026 fe3c 	bl	2402d6c8 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006a50:	bd08      	pop	{r3, pc}
24006a52:	bf00      	nop

24006a54 <HAL_I2C_AddrCallback>:
}
24006a54:	4770      	bx	lr
24006a56:	bf00      	nop

24006a58 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006a58:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
24006a5a:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006a5c:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006a5e:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24006a60:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006a62:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006a64:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006a66:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24006a68:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006a6c:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24006a70:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006a72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006a76:	d10f      	bne.n	24006a98 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006a78:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006a7c:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006a80:	f013 0306 	ands.w	r3, r3, #6
24006a84:	d106      	bne.n	24006a94 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24006a86:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006a88:	3501      	adds	r5, #1
24006a8a:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24006a8c:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006a8e:	2d02      	cmp	r5, #2
24006a90:	d00c      	beq.n	24006aac <I2C_ITAddrCplt.part.0+0x54>
}
24006a92:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006a94:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a98:	6823      	ldr	r3, [r4, #0]
24006a9a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24006a9e:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24006aa0:	2300      	movs	r3, #0
24006aa2:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006aa6:	f7ff ffd5 	bl	24006a54 <HAL_I2C_AddrCallback>
}
24006aaa:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006aac:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24006aae:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006ab0:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24006ab2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006ab6:	f7ff ffcd 	bl	24006a54 <HAL_I2C_AddrCallback>
}
24006aba:	bd70      	pop	{r4, r5, r6, pc}

24006abc <HAL_I2C_ListenCpltCallback>:
24006abc:	4770      	bx	lr
24006abe:	bf00      	nop

24006ac0 <HAL_I2C_AbortCpltCallback>:
24006ac0:	4770      	bx	lr
24006ac2:	bf00      	nop

24006ac4 <I2C_DMAAbort>:
{
24006ac4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24006ac6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24006ac8:	6b83      	ldr	r3, [r0, #56]	; 0x38
24006aca:	b10b      	cbz	r3, 24006ad0 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24006acc:	2200      	movs	r2, #0
24006ace:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24006ad0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24006ad2:	b10b      	cbz	r3, 24006ad8 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24006ad4:	2200      	movs	r2, #0
24006ad6:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006ad8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006adc:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006ade:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006ae2:	d005      	beq.n	24006af0 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24006ae4:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006ae6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006aea:	f026 fdd9 	bl	2402d6a0 <__HAL_I2C_ErrorCallback_veneer>
}
24006aee:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006af0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24006af2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006af6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006afa:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006afc:	f7ff ffe0 	bl	24006ac0 <HAL_I2C_AbortCpltCallback>
}
24006b00:	bd08      	pop	{r3, pc}
24006b02:	bf00      	nop

24006b04 <I2C_ITError>:
{
24006b04:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006b06:	4a5d      	ldr	r2, [pc, #372]	; (24006c7c <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006b08:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24006b0e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006b10:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006b14:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006b16:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24006b18:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24006b1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006b1c:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24006b1e:	ea41 0102 	orr.w	r1, r1, r2
24006b22:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006b24:	d874      	bhi.n	24006c10 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b26:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b2a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b2e:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006b32:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b34:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b38:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006b3a:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b3c:	bf14      	ite	ne
24006b3e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
24006b42:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b46:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006b48:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b4c:	bf18      	it	ne
24006b4e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006b52:	4013      	ands	r3, r2
24006b54:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006b56:	4b4a      	ldr	r3, [pc, #296]	; (24006c80 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006b58:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006b5c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006b5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24006b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006b62:	b118      	cbz	r0, 24006b6c <I2C_ITError+0x68>
24006b64:	2b11      	cmp	r3, #17
24006b66:	d01e      	beq.n	24006ba6 <I2C_ITError+0xa2>
24006b68:	2b21      	cmp	r3, #33	; 0x21
24006b6a:	d01c      	beq.n	24006ba6 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24006b6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006b6e:	b118      	cbz	r0, 24006b78 <I2C_ITError+0x74>
24006b70:	2b12      	cmp	r3, #18
24006b72:	d030      	beq.n	24006bd6 <I2C_ITError+0xd2>
24006b74:	2b22      	cmp	r3, #34	; 0x22
24006b76:	d02e      	beq.n	24006bd6 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006b78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006b7c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006b7e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006b82:	d006      	beq.n	24006b92 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24006b84:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24006b86:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006b88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006b8c:	f026 fd88 	bl	2402d6a0 <__HAL_I2C_ErrorCallback_veneer>
}
24006b90:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006b92:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24006b94:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006b96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006b9a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006b9e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006ba0:	f7ff ff8e 	bl	24006ac0 <HAL_I2C_AbortCpltCallback>
}
24006ba4:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24006ba6:	6823      	ldr	r3, [r4, #0]
24006ba8:	681a      	ldr	r2, [r3, #0]
24006baa:	0451      	lsls	r1, r2, #17
24006bac:	d460      	bmi.n	24006c70 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006bae:	f7ff fa05 	bl	24005fbc <HAL_DMA_GetState>
24006bb2:	2801      	cmp	r0, #1
24006bb4:	d0e0      	beq.n	24006b78 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006bb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24006bb8:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006bba:	4932      	ldr	r1, [pc, #200]	; (24006c84 <I2C_ITError+0x180>)
24006bbc:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006bbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24006bc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006bc4:	f7fe fc66 	bl	24005494 <HAL_DMA_Abort_IT>
24006bc8:	2800      	cmp	r0, #0
24006bca:	d0e1      	beq.n	24006b90 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24006bcc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24006bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24006bd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
24006bd4:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24006bd6:	6823      	ldr	r3, [r4, #0]
24006bd8:	681a      	ldr	r2, [r3, #0]
24006bda:	0412      	lsls	r2, r2, #16
24006bdc:	d504      	bpl.n	24006be8 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006bde:	681a      	ldr	r2, [r3, #0]
24006be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006be4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24006be6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006be8:	f7ff f9e8 	bl	24005fbc <HAL_DMA_GetState>
24006bec:	2801      	cmp	r0, #1
24006bee:	d0c3      	beq.n	24006b78 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24006bf0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
24006bf2:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24006bf4:	4923      	ldr	r1, [pc, #140]	; (24006c84 <I2C_ITError+0x180>)
24006bf6:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006bf8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24006bfc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006bfe:	f7fe fc49 	bl	24005494 <HAL_DMA_Abort_IT>
24006c02:	2800      	cmp	r0, #0
24006c04:	d0c4      	beq.n	24006b90 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24006c06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24006c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24006c0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
24006c0e:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006c10:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006c12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006c16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006c1a:	6813      	ldr	r3, [r2, #0]
24006c1c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006c20:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006c22:	6803      	ldr	r3, [r0, #0]
24006c24:	699a      	ldr	r2, [r3, #24]
24006c26:	0792      	lsls	r2, r2, #30
24006c28:	d501      	bpl.n	24006c2e <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24006c2a:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006c2c:	6803      	ldr	r3, [r0, #0]
24006c2e:	699a      	ldr	r2, [r3, #24]
24006c30:	07d6      	lsls	r6, r2, #31
24006c32:	d403      	bmi.n	24006c3c <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006c34:	699a      	ldr	r2, [r3, #24]
24006c36:	f042 0201 	orr.w	r2, r2, #1
24006c3a:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24006c3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006c40:	2b60      	cmp	r3, #96	; 0x60
24006c42:	d012      	beq.n	24006c6a <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
24006c44:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24006c46:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
24006c48:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24006c4c:	699a      	ldr	r2, [r3, #24]
24006c4e:	0695      	lsls	r5, r2, #26
24006c50:	d50b      	bpl.n	24006c6a <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24006c52:	699a      	ldr	r2, [r3, #24]
24006c54:	06d0      	lsls	r0, r2, #27
24006c56:	d506      	bpl.n	24006c66 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006c58:	2210      	movs	r2, #16
24006c5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006c5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006c5e:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006c60:	f042 0204 	orr.w	r2, r2, #4
24006c64:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006c66:	2220      	movs	r2, #32
24006c68:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
24006c6a:	2300      	movs	r3, #0
24006c6c:	6363      	str	r3, [r4, #52]	; 0x34
24006c6e:	e776      	b.n	24006b5e <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006c70:	681a      	ldr	r2, [r3, #0]
24006c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006c76:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006c78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006c7a:	e798      	b.n	24006bae <I2C_ITError+0xaa>
24006c7c:	ffff0000 	.word	0xffff0000
24006c80:	24006e31 	.word	0x24006e31
24006c84:	24006ac5 	.word	0x24006ac5

24006c88 <I2C_ITSlaveCplt>:
{
24006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006c8a:	6802      	ldr	r2, [r0, #0]
{
24006c8c:	460d      	mov	r5, r1
24006c8e:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006c90:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006c92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006c96:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24006c98:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006c9c:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24006c9e:	2b21      	cmp	r3, #33	; 0x21
24006ca0:	d16f      	bne.n	24006d82 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ca2:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006ca4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ca8:	6802      	ldr	r2, [r0, #0]
24006caa:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
24006cae:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006cb0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24006cb2:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
24006cb4:	485c      	ldr	r0, [pc, #368]	; (24006e28 <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24006cb6:	6853      	ldr	r3, [r2, #4]
24006cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24006cbc:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
24006cbe:	6822      	ldr	r2, [r4, #0]
24006cc0:	6853      	ldr	r3, [r2, #4]
24006cc2:	4003      	ands	r3, r0
24006cc4:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006cc6:	6823      	ldr	r3, [r4, #0]
24006cc8:	699a      	ldr	r2, [r3, #24]
24006cca:	0797      	lsls	r7, r2, #30
24006ccc:	d502      	bpl.n	24006cd4 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
24006cce:	2200      	movs	r2, #0
24006cd0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006cd2:	6823      	ldr	r3, [r4, #0]
24006cd4:	699a      	ldr	r2, [r3, #24]
24006cd6:	07d6      	lsls	r6, r2, #31
24006cd8:	d403      	bmi.n	24006ce2 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006cda:	699a      	ldr	r2, [r3, #24]
24006cdc:	f042 0201 	orr.w	r2, r2, #1
24006ce0:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006ce2:	0448      	lsls	r0, r1, #17
24006ce4:	d558      	bpl.n	24006d98 <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006ce6:	6822      	ldr	r2, [r4, #0]
24006ce8:	6813      	ldr	r3, [r2, #0]
24006cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24006cee:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24006cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24006cf2:	b11b      	cbz	r3, 24006cfc <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24006cf4:	681a      	ldr	r2, [r3, #0]
24006cf6:	6853      	ldr	r3, [r2, #4]
24006cf8:	b29b      	uxth	r3, r3
24006cfa:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24006cfc:	076a      	lsls	r2, r5, #29
24006cfe:	d50a      	bpl.n	24006d16 <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006d00:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
24006d02:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006d0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006d0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006d10:	3301      	adds	r3, #1
24006d12:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006d14:	bb72      	cbnz	r2, 24006d74 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
24006d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006d18:	b29b      	uxth	r3, r3
24006d1a:	b11b      	cbz	r3, 24006d24 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006d1e:	f043 0304 	orr.w	r3, r3, #4
24006d22:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006d24:	2700      	movs	r7, #0
24006d26:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24006d2a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24006d2c:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24006d2e:	2e00      	cmp	r6, #0
24006d30:	d13d      	bne.n	24006dae <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24006d32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24006d34:	4d3d      	ldr	r5, [pc, #244]	; (24006e2c <I2C_ITSlaveCplt+0x1a4>)
24006d36:	42ab      	cmp	r3, r5
24006d38:	d10e      	bne.n	24006d58 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006d3a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006d3e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006d40:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006d44:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24006d46:	f04f 0320 	mov.w	r3, #32
24006d4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006d4e:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006d50:	d066      	beq.n	24006e20 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006d52:	f7ff fe29 	bl	240069a8 <HAL_I2C_SlaveTxCpltCallback>
}
24006d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
24006d58:	4620      	mov	r0, r4
24006d5a:	f7ff fe27 	bl	240069ac <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24006d5e:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006d60:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24006d62:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24006d64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24006d68:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24006d6c:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24006d6e:	f7ff fea5 	bl	24006abc <HAL_I2C_ListenCpltCallback>
}
24006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
24006d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006d76:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006d78:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006d7a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006d7c:	b29b      	uxth	r3, r3
24006d7e:	8563      	strh	r3, [r4, #42]	; 0x2a
24006d80:	e7c9      	b.n	24006d16 <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24006d82:	2b22      	cmp	r3, #34	; 0x22
24006d84:	d195      	bne.n	24006cb2 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006d86:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006d88:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006d8c:	6802      	ldr	r2, [r0, #0]
24006d8e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
24006d92:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006d94:	6323      	str	r3, [r4, #48]	; 0x30
24006d96:	e78c      	b.n	24006cb2 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006d98:	0409      	lsls	r1, r1, #16
24006d9a:	d5af      	bpl.n	24006cfc <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006d9c:	6822      	ldr	r2, [r4, #0]
24006d9e:	6813      	ldr	r3, [r2, #0]
24006da0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006da4:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
24006da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006da8:	2b00      	cmp	r3, #0
24006daa:	d1a3      	bne.n	24006cf4 <I2C_ITSlaveCplt+0x6c>
24006dac:	e7a6      	b.n	24006cfc <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24006dae:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006db0:	4620      	mov	r0, r4
24006db2:	f7ff fea7 	bl	24006b04 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
24006db6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006dba:	2b28      	cmp	r3, #40	; 0x28
24006dbc:	d1cb      	bne.n	24006d56 <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
24006dbe:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006dc0:	4a1a      	ldr	r2, [pc, #104]	; (24006e2c <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
24006dc2:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006dc4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24006dc6:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24006dc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006dcc:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006dce:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006dd2:	d512      	bpl.n	24006dfa <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006dd4:	6822      	ldr	r2, [r4, #0]
24006dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006dda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006dde:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006de0:	3301      	adds	r3, #1
24006de2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006de4:	b14a      	cbz	r2, 24006dfa <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
24006de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006de8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006dea:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006dec:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006dee:	b29b      	uxth	r3, r3
24006df0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006df4:	f043 0304 	orr.w	r3, r3, #4
24006df8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006dfa:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006dfc:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006dfe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24006e02:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e08:	6813      	ldr	r3, [r2, #0]
24006e0a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006e0e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e10:	6823      	ldr	r3, [r4, #0]
24006e12:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24006e14:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24006e16:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24006e1a:	f7ff fe4f 	bl	24006abc <HAL_I2C_ListenCpltCallback>
}
24006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006e20:	f026 fc52 	bl	2402d6c8 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24006e26:	bf00      	nop
24006e28:	fe00e800 	.word	0xfe00e800
24006e2c:	ffff0000 	.word	0xffff0000

24006e30 <I2C_Slave_ISR_IT>:
{
24006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24006e32:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
24006e36:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24006e38:	2b01      	cmp	r3, #1
24006e3a:	d07f      	beq.n	24006f3c <I2C_Slave_ISR_IT+0x10c>
24006e3c:	4617      	mov	r7, r2
24006e3e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24006e40:	068a      	lsls	r2, r1, #26
24006e42:	4604      	mov	r4, r0
24006e44:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
24006e46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24006e4a:	d501      	bpl.n	24006e50 <I2C_Slave_ISR_IT+0x20>
24006e4c:	06bb      	lsls	r3, r7, #26
24006e4e:	d461      	bmi.n	24006f14 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24006e50:	06ea      	lsls	r2, r5, #27
24006e52:	d51b      	bpl.n	24006e8c <I2C_Slave_ISR_IT+0x5c>
24006e54:	06fb      	lsls	r3, r7, #27
24006e56:	d519      	bpl.n	24006e8c <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
24006e58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006e5a:	b29b      	uxth	r3, r3
24006e5c:	2b00      	cmp	r3, #0
24006e5e:	d15e      	bne.n	24006f1e <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24006e60:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24006e64:	2a28      	cmp	r2, #40	; 0x28
24006e66:	d102      	bne.n	24006e6e <I2C_Slave_ISR_IT+0x3e>
24006e68:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24006e6c:	d07f      	beq.n	24006f6e <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006e6e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e72:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006e74:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e76:	6823      	ldr	r3, [r4, #0]
24006e78:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006e7a:	d102      	bne.n	24006e82 <I2C_Slave_ISR_IT+0x52>
24006e7c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24006e80:	d162      	bne.n	24006f48 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
24006e82:	2300      	movs	r3, #0
  return HAL_OK;
24006e84:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24006e86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24006e8c:	076a      	lsls	r2, r5, #29
24006e8e:	d40d      	bmi.n	24006eac <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24006e90:	0728      	lsls	r0, r5, #28
24006e92:	d529      	bpl.n	24006ee8 <I2C_Slave_ISR_IT+0xb8>
24006e94:	0739      	lsls	r1, r7, #28
24006e96:	d527      	bpl.n	24006ee8 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24006e98:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006e9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
24006ea0:	2b28      	cmp	r3, #40	; 0x28
24006ea2:	d060      	beq.n	24006f66 <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006ea4:	6823      	ldr	r3, [r4, #0]
24006ea6:	2208      	movs	r2, #8
24006ea8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
24006eaa:	e7ea      	b.n	24006e82 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24006eac:	077b      	lsls	r3, r7, #29
24006eae:	d5ef      	bpl.n	24006e90 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
24006eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006eb2:	b29b      	uxth	r3, r3
24006eb4:	b16b      	cbz	r3, 24006ed2 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006eb6:	6822      	ldr	r2, [r4, #0]
24006eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006ebc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
24006ebe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006ec2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006ec4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24006ec6:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006ec8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006eca:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24006ecc:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006ece:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006ed0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24006ed2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006ed4:	b29b      	uxth	r3, r3
24006ed6:	2b00      	cmp	r3, #0
24006ed8:	d1d3      	bne.n	24006e82 <I2C_Slave_ISR_IT+0x52>
24006eda:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24006ede:	d0d0      	beq.n	24006e82 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
24006ee0:	4620      	mov	r0, r4
24006ee2:	f7ff fd63 	bl	240069ac <I2C_ITSlaveSeqCplt>
24006ee6:	e7cc      	b.n	24006e82 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24006ee8:	07aa      	lsls	r2, r5, #30
24006eea:	d5ca      	bpl.n	24006e82 <I2C_Slave_ISR_IT+0x52>
24006eec:	07bb      	lsls	r3, r7, #30
24006eee:	d5c8      	bpl.n	24006e82 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
24006ef0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006ef2:	b29b      	uxth	r3, r3
24006ef4:	b323      	cbz	r3, 24006f40 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24006ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
24006ef8:	6823      	ldr	r3, [r4, #0]
24006efa:	7812      	ldrb	r2, [r2, #0]
24006efc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24006efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006f00:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006f02:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f04:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24006f06:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006f08:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006f0a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24006f0c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006f0e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f10:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006f12:	e7b6      	b.n	24006e82 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24006f14:	f7ff feb8 	bl	24006c88 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24006f18:	06ea      	lsls	r2, r5, #27
24006f1a:	d5b7      	bpl.n	24006e8c <I2C_Slave_ISR_IT+0x5c>
24006f1c:	e79a      	b.n	24006e54 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006f1e:	6823      	ldr	r3, [r4, #0]
24006f20:	2210      	movs	r2, #16
24006f22:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006f26:	f043 0304 	orr.w	r3, r3, #4
24006f2a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24006f2c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24006f30:	d1a7      	bne.n	24006e82 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24006f32:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006f34:	4620      	mov	r0, r4
24006f36:	f7ff fde5 	bl	24006b04 <I2C_ITError>
24006f3a:	e7a2      	b.n	24006e82 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
24006f3c:	2002      	movs	r0, #2
}
24006f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24006f40:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24006f44:	d19d      	bne.n	24006e82 <I2C_Slave_ISR_IT+0x52>
24006f46:	e7cb      	b.n	24006ee0 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006f48:	6823      	ldr	r3, [r4, #0]
24006f4a:	699a      	ldr	r2, [r3, #24]
24006f4c:	0790      	lsls	r0, r2, #30
24006f4e:	d502      	bpl.n	24006f56 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
24006f50:	2200      	movs	r2, #0
24006f52:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006f54:	6823      	ldr	r3, [r4, #0]
24006f56:	699a      	ldr	r2, [r3, #24]
24006f58:	07d1      	lsls	r1, r2, #31
24006f5a:	d4c1      	bmi.n	24006ee0 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006f5c:	699a      	ldr	r2, [r3, #24]
24006f5e:	f042 0201 	orr.w	r2, r2, #1
24006f62:	619a      	str	r2, [r3, #24]
24006f64:	e7bc      	b.n	24006ee0 <I2C_Slave_ISR_IT+0xb0>
24006f66:	4620      	mov	r0, r4
24006f68:	f7ff fd76 	bl	24006a58 <I2C_ITAddrCplt.part.0>
24006f6c:	e789      	b.n	24006e82 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006f6e:	4918      	ldr	r1, [pc, #96]	; (24006fd0 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
24006f70:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006f72:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24006f74:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006f76:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24006f78:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24006f7a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006f7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006f82:	d512      	bpl.n	24006faa <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006f84:	6822      	ldr	r2, [r4, #0]
24006f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006f8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006f8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006f90:	3301      	adds	r3, #1
24006f92:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006f94:	b14a      	cbz	r2, 24006faa <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
24006f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006f98:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006f9a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006f9c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f9e:	b29b      	uxth	r3, r3
24006fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006fa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006fa4:	f043 0304 	orr.w	r3, r3, #4
24006fa8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006faa:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006fac:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006fae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24006fb2:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006fb4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006fb8:	6813      	ldr	r3, [r2, #0]
24006fba:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006fbe:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006fc0:	6823      	ldr	r3, [r4, #0]
24006fc2:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24006fc4:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24006fc6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24006fca:	f7ff fd77 	bl	24006abc <HAL_I2C_ListenCpltCallback>
}
24006fce:	e758      	b.n	24006e82 <I2C_Slave_ISR_IT+0x52>
24006fd0:	ffff0000 	.word	0xffff0000

24006fd4 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006fd4:	6803      	ldr	r3, [r0, #0]
{
24006fd6:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006fd8:	699a      	ldr	r2, [r3, #24]
24006fda:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24006fdc:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
24006fde:	f412 7f80 	tst.w	r2, #256	; 0x100
24006fe2:	d032      	beq.n	2400704a <HAL_I2C_ER_IRQHandler+0x76>
24006fe4:	f011 0f80 	tst.w	r1, #128	; 0x80
24006fe8:	d021      	beq.n	2400702e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24006fea:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006fec:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24006ff0:	f041 0101 	orr.w	r1, r1, #1
24006ff4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006ff6:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24006ff8:	0553      	lsls	r3, r2, #21
24006ffa:	d507      	bpl.n	2400700c <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006ffc:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24006ffe:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007000:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007004:	f041 0108 	orr.w	r1, r1, #8
24007008:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400700a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400700c:	0592      	lsls	r2, r2, #22
2400700e:	d507      	bpl.n	24007020 <HAL_I2C_ER_IRQHandler+0x4c>
24007010:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007012:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007014:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007018:	f043 0302 	orr.w	r3, r3, #2
2400701c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400701e:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24007020:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007022:	f011 0f0b 	tst.w	r1, #11
24007026:	d10c      	bne.n	24007042 <HAL_I2C_ER_IRQHandler+0x6e>
}
24007028:	f85d 4b04 	ldr.w	r4, [sp], #4
2400702c:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400702e:	0553      	lsls	r3, r2, #21
24007030:	d4f6      	bmi.n	24007020 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007032:	0593      	lsls	r3, r2, #22
24007034:	d5f4      	bpl.n	24007020 <HAL_I2C_ER_IRQHandler+0x4c>
24007036:	060a      	lsls	r2, r1, #24
24007038:	d4eb      	bmi.n	24007012 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
2400703a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400703c:	f011 0f0b 	tst.w	r1, #11
24007040:	d0f2      	beq.n	24007028 <HAL_I2C_ER_IRQHandler+0x54>
}
24007042:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
24007046:	f7ff bd5d 	b.w	24006b04 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400704a:	f412 6f80 	tst.w	r2, #1024	; 0x400
2400704e:	d0f0      	beq.n	24007032 <HAL_I2C_ER_IRQHandler+0x5e>
24007050:	0609      	lsls	r1, r1, #24
24007052:	d5e5      	bpl.n	24007020 <HAL_I2C_ER_IRQHandler+0x4c>
24007054:	e7d3      	b.n	24006ffe <HAL_I2C_ER_IRQHandler+0x2a>
24007056:	bf00      	nop

24007058 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007058:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
2400705c:	2a20      	cmp	r2, #32
2400705e:	d129      	bne.n	240070b4 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
24007060:	4603      	mov	r3, r0
{
24007062:	b500      	push	{lr}
24007064:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007068:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
2400706c:	2a01      	cmp	r2, #1
2400706e:	d023      	beq.n	240070b8 <HAL_I2CEx_ConfigAnalogFilter+0x60>
24007070:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007072:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007074:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24007078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
2400707c:	2224      	movs	r2, #36	; 0x24
2400707e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24007082:	6802      	ldr	r2, [r0, #0]
24007084:	f022 0201 	bic.w	r2, r2, #1
24007088:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2400708a:	6818      	ldr	r0, [r3, #0]
2400708c:	6802      	ldr	r2, [r0, #0]
2400708e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
24007092:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
24007094:	6818      	ldr	r0, [r3, #0]
24007096:	6802      	ldr	r2, [r0, #0]
24007098:	4311      	orrs	r1, r2
2400709a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
2400709c:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
2400709e:	6819      	ldr	r1, [r3, #0]
240070a0:	680a      	ldr	r2, [r1, #0]
240070a2:	f042 0201 	orr.w	r2, r2, #1
240070a6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
240070a8:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
240070ac:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
240070b0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
240070b4:	2002      	movs	r0, #2
}
240070b6:	4770      	bx	lr
    return HAL_BUSY;
240070b8:	2002      	movs	r0, #2
}
240070ba:	f85d fb04 	ldr.w	pc, [sp], #4
240070be:	bf00      	nop

240070c0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240070c0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240070c4:	2a20      	cmp	r2, #32
240070c6:	d127      	bne.n	24007118 <HAL_I2CEx_ConfigDigitalFilter+0x58>
240070c8:	4603      	mov	r3, r0
{
240070ca:	b500      	push	{lr}
240070cc:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240070d0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240070d4:	2a01      	cmp	r2, #1
240070d6:	d021      	beq.n	2400711c <HAL_I2CEx_ConfigDigitalFilter+0x5c>
240070d8:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240070da:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240070dc:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
240070e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
240070e4:	2224      	movs	r2, #36	; 0x24
240070e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
240070ea:	6802      	ldr	r2, [r0, #0]
240070ec:	f022 0201 	bic.w	r2, r2, #1
240070f0:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
240070f2:	6818      	ldr	r0, [r3, #0]
240070f4:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
240070f6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
240070fa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
240070fe:	6001      	str	r1, [r0, #0]

    return HAL_OK;
24007100:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
24007102:	6819      	ldr	r1, [r3, #0]
24007104:	680a      	ldr	r2, [r1, #0]
24007106:	f042 0201 	orr.w	r2, r2, #1
2400710a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
2400710c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007110:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007114:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007118:	2002      	movs	r0, #2
}
2400711a:	4770      	bx	lr
    return HAL_BUSY;
2400711c:	2002      	movs	r0, #2
}
2400711e:	f85d fb04 	ldr.w	pc, [sp], #4
24007122:	bf00      	nop

24007124 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24007124:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007126:	4c10      	ldr	r4, [pc, #64]	; (24007168 <HAL_PWREx_ConfigSupply+0x44>)
24007128:	68e3      	ldr	r3, [r4, #12]
2400712a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2400712e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007130:	d105      	bne.n	2400713e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007132:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24007136:	1a18      	subs	r0, r3, r0
24007138:	bf18      	it	ne
2400713a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
2400713c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
2400713e:	f023 0307 	bic.w	r3, r3, #7
24007142:	4318      	orrs	r0, r3
24007144:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
24007146:	f7fd fabb 	bl	240046c0 <HAL_GetTick>
2400714a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2400714c:	e005      	b.n	2400715a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2400714e:	f7fd fab7 	bl	240046c0 <HAL_GetTick>
24007152:	1b40      	subs	r0, r0, r5
24007154:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24007158:	d804      	bhi.n	24007164 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2400715a:	6863      	ldr	r3, [r4, #4]
2400715c:	049b      	lsls	r3, r3, #18
2400715e:	d5f6      	bpl.n	2400714e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
24007160:	2000      	movs	r0, #0
}
24007162:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
24007164:	2001      	movs	r0, #1
}
24007166:	bd38      	pop	{r3, r4, r5, pc}
24007168:	58024800 	.word	0x58024800

2400716c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400716c:	4b3b      	ldr	r3, [pc, #236]	; (2400725c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
2400716e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007172:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007174:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
24007176:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400717a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400717c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007180:	d038      	beq.n	240071f4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007182:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007186:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400718a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400718e:	fb05 f101 	mul.w	r1, r5, r1
24007192:	2a01      	cmp	r2, #1
24007194:	ee07 1a90 	vmov	s15, r1
24007198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
2400719c:	d002      	beq.n	240071a4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
2400719e:	2a02      	cmp	r2, #2
240071a0:	d04e      	beq.n	24007240 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
240071a2:	b34a      	cbz	r2, 240071f8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240071a4:	ee07 0a90 	vmov	s15, r0
240071a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 24007260 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
240071ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240071b2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
240071b6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24007264 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
240071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
240071be:	ee06 3a90 	vmov	s13, r3
240071c2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
240071c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240071ca:	ee76 6a85 	vadd.f32	s13, s13, s10
240071ce:	eee7 6a25 	vfma.f32	s13, s14, s11
240071d2:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
240071d6:	4b21      	ldr	r3, [pc, #132]	; (2400725c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
240071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240071da:	f3c3 2346 	ubfx	r3, r3, #9, #7
240071de:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
240071e0:	ee07 3a90 	vmov	s15, r3
240071e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240071e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
240071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240071f0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
240071f4:	bc30      	pop	{r4, r5}
240071f6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240071f8:	681a      	ldr	r2, [r3, #0]
240071fa:	0692      	lsls	r2, r2, #26
240071fc:	d527      	bpl.n	2400724e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240071fe:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007200:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007204:	4a18      	ldr	r2, [pc, #96]	; (24007268 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007206:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400720c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007214:	ed9f 5a13 	vldr	s10, [pc, #76]	; 24007264 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400721c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400721e:	ee06 3a90 	vmov	s13, r3
24007222:	ee05 2a90 	vmov	s11, r2
24007226:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400722a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400722e:	ee76 6a86 	vadd.f32	s13, s13, s12
24007232:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24007236:	eee7 6a05 	vfma.f32	s13, s14, s10
2400723a:	ee66 6a26 	vmul.f32	s13, s12, s13
2400723e:	e7ca      	b.n	240071d6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007240:	ee07 0a90 	vmov	s15, r0
24007244:	eddf 6a09 	vldr	s13, [pc, #36]	; 2400726c <HAL_RCC_GetSysClockFreq.part.0+0x100>
24007248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400724c:	e7b0      	b.n	240071b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400724e:	ee07 0a90 	vmov	s15, r0
24007252:	eddf 6a07 	vldr	s13, [pc, #28]	; 24007270 <HAL_RCC_GetSysClockFreq.part.0+0x104>
24007256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400725a:	e7a9      	b.n	240071b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
2400725c:	58024400 	.word	0x58024400
24007260:	4a742400 	.word	0x4a742400
24007264:	39000000 	.word	0x39000000
24007268:	03d09000 	.word	0x03d09000
2400726c:	4b742400 	.word	0x4b742400
24007270:	4c742400 	.word	0x4c742400

24007274 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24007274:	2800      	cmp	r0, #0
24007276:	f000 81ef 	beq.w	24007658 <HAL_RCC_OscConfig+0x3e4>
{
2400727a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2400727c:	6803      	ldr	r3, [r0, #0]
2400727e:	4604      	mov	r4, r0
24007280:	07d9      	lsls	r1, r3, #31
24007282:	d52e      	bpl.n	240072e2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007284:	49a4      	ldr	r1, [pc, #656]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
24007286:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007288:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400728a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2400728e:	2a10      	cmp	r2, #16
24007290:	f000 8107 	beq.w	240074a2 <HAL_RCC_OscConfig+0x22e>
24007294:	2a18      	cmp	r2, #24
24007296:	f000 80ff 	beq.w	24007498 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400729a:	6863      	ldr	r3, [r4, #4]
2400729c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240072a0:	f000 812a 	beq.w	240074f8 <HAL_RCC_OscConfig+0x284>
240072a4:	2b00      	cmp	r3, #0
240072a6:	f040 8188 	bne.w	240075ba <HAL_RCC_OscConfig+0x346>
240072aa:	4b9b      	ldr	r3, [pc, #620]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240072ac:	681a      	ldr	r2, [r3, #0]
240072ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240072b2:	601a      	str	r2, [r3, #0]
240072b4:	681a      	ldr	r2, [r3, #0]
240072b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240072ba:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
240072bc:	6863      	ldr	r3, [r4, #4]
240072be:	2b00      	cmp	r3, #0
240072c0:	f000 815c 	beq.w	2400757c <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
240072c4:	f7fd f9fc 	bl	240046c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240072c8:	4e93      	ldr	r6, [pc, #588]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
240072ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240072cc:	e005      	b.n	240072da <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240072ce:	f7fd f9f7 	bl	240046c0 <HAL_GetTick>
240072d2:	1b40      	subs	r0, r0, r5
240072d4:	2864      	cmp	r0, #100	; 0x64
240072d6:	f200 814f 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240072da:	6833      	ldr	r3, [r6, #0]
240072dc:	039b      	lsls	r3, r3, #14
240072de:	d5f6      	bpl.n	240072ce <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
240072e0:	6823      	ldr	r3, [r4, #0]
240072e2:	079d      	lsls	r5, r3, #30
240072e4:	f100 808a 	bmi.w	240073fc <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240072e8:	06d9      	lsls	r1, r3, #27
240072ea:	d533      	bpl.n	24007354 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240072ec:	4a8a      	ldr	r2, [pc, #552]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240072ee:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240072f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240072f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240072f6:	2b08      	cmp	r3, #8
240072f8:	f000 80e3 	beq.w	240074c2 <HAL_RCC_OscConfig+0x24e>
240072fc:	2b18      	cmp	r3, #24
240072fe:	f000 80db 	beq.w	240074b8 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007302:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24007304:	4d84      	ldr	r5, [pc, #528]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007306:	2b00      	cmp	r3, #0
24007308:	f000 8176 	beq.w	240075f8 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
2400730c:	682b      	ldr	r3, [r5, #0]
2400730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007312:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007314:	f7fd f9d4 	bl	240046c0 <HAL_GetTick>
24007318:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400731a:	e005      	b.n	24007328 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2400731c:	f7fd f9d0 	bl	240046c0 <HAL_GetTick>
24007320:	1b80      	subs	r0, r0, r6
24007322:	2802      	cmp	r0, #2
24007324:	f200 8128 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007328:	682b      	ldr	r3, [r5, #0]
2400732a:	05db      	lsls	r3, r3, #23
2400732c:	d5f6      	bpl.n	2400731c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400732e:	f7fd f9df 	bl	240046f0 <HAL_GetREVID>
24007332:	f241 0303 	movw	r3, #4099	; 0x1003
24007336:	4298      	cmp	r0, r3
24007338:	f200 8266 	bhi.w	24007808 <HAL_RCC_OscConfig+0x594>
2400733c:	6a22      	ldr	r2, [r4, #32]
2400733e:	686b      	ldr	r3, [r5, #4]
24007340:	2a20      	cmp	r2, #32
24007342:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007346:	bf0c      	ite	eq
24007348:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
2400734c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24007350:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007352:	6823      	ldr	r3, [r4, #0]
24007354:	071d      	lsls	r5, r3, #28
24007356:	d516      	bpl.n	24007386 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007358:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
2400735a:	4d6f      	ldr	r5, [pc, #444]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2400735c:	2b00      	cmp	r3, #0
2400735e:	f000 811b 	beq.w	24007598 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
24007362:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007364:	f043 0301 	orr.w	r3, r3, #1
24007368:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
2400736a:	f7fd f9a9 	bl	240046c0 <HAL_GetTick>
2400736e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007370:	e005      	b.n	2400737e <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007372:	f7fd f9a5 	bl	240046c0 <HAL_GetTick>
24007376:	1b80      	subs	r0, r0, r6
24007378:	2802      	cmp	r0, #2
2400737a:	f200 80fd 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2400737e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007380:	0798      	lsls	r0, r3, #30
24007382:	d5f6      	bpl.n	24007372 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24007384:	6823      	ldr	r3, [r4, #0]
24007386:	069a      	lsls	r2, r3, #26
24007388:	d516      	bpl.n	240073b8 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2400738a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
2400738c:	4d62      	ldr	r5, [pc, #392]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2400738e:	2b00      	cmp	r3, #0
24007390:	f000 8121 	beq.w	240075d6 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
24007394:	682b      	ldr	r3, [r5, #0]
24007396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400739a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
2400739c:	f7fd f990 	bl	240046c0 <HAL_GetTick>
240073a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240073a2:	e005      	b.n	240073b0 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240073a4:	f7fd f98c 	bl	240046c0 <HAL_GetTick>
240073a8:	1b80      	subs	r0, r0, r6
240073aa:	2802      	cmp	r0, #2
240073ac:	f200 80e4 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240073b0:	682b      	ldr	r3, [r5, #0]
240073b2:	049f      	lsls	r7, r3, #18
240073b4:	d5f6      	bpl.n	240073a4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
240073b6:	6823      	ldr	r3, [r4, #0]
240073b8:	0759      	lsls	r1, r3, #29
240073ba:	f100 80a3 	bmi.w	24007504 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
240073be:	6a60      	ldr	r0, [r4, #36]	; 0x24
240073c0:	b1d0      	cbz	r0, 240073f8 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
240073c2:	4d55      	ldr	r5, [pc, #340]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240073c4:	692b      	ldr	r3, [r5, #16]
240073c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
240073ca:	2b18      	cmp	r3, #24
240073cc:	f000 81b6 	beq.w	2400773c <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
240073d0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240073d2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
240073d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240073d8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240073da:	f000 8149 	beq.w	24007670 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
240073de:	f7fd f96f 	bl	240046c0 <HAL_GetTick>
240073e2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240073e4:	e005      	b.n	240073f2 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240073e6:	f7fd f96b 	bl	240046c0 <HAL_GetTick>
240073ea:	1b00      	subs	r0, r0, r4
240073ec:	2802      	cmp	r0, #2
240073ee:	f200 80c3 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240073f2:	682b      	ldr	r3, [r5, #0]
240073f4:	019b      	lsls	r3, r3, #6
240073f6:	d4f6      	bmi.n	240073e6 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
240073f8:	2000      	movs	r0, #0
}
240073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240073fc:	4a46      	ldr	r2, [pc, #280]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240073fe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007400:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007402:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24007406:	d12d      	bne.n	24007464 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24007408:	4b43      	ldr	r3, [pc, #268]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
2400740a:	68e2      	ldr	r2, [r4, #12]
2400740c:	681b      	ldr	r3, [r3, #0]
2400740e:	0759      	lsls	r1, r3, #29
24007410:	d501      	bpl.n	24007416 <HAL_RCC_OscConfig+0x1a2>
24007412:	2a00      	cmp	r2, #0
24007414:	d04e      	beq.n	240074b4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007416:	4d40      	ldr	r5, [pc, #256]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
24007418:	682b      	ldr	r3, [r5, #0]
2400741a:	f023 0319 	bic.w	r3, r3, #25
2400741e:	4313      	orrs	r3, r2
24007420:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007422:	f7fd f94d 	bl	240046c0 <HAL_GetTick>
24007426:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007428:	e005      	b.n	24007436 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400742a:	f7fd f949 	bl	240046c0 <HAL_GetTick>
2400742e:	1b80      	subs	r0, r0, r6
24007430:	2802      	cmp	r0, #2
24007432:	f200 80a1 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007436:	682b      	ldr	r3, [r5, #0]
24007438:	075b      	lsls	r3, r3, #29
2400743a:	d5f6      	bpl.n	2400742a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2400743c:	f7fd f958 	bl	240046f0 <HAL_GetREVID>
24007440:	f241 0303 	movw	r3, #4099	; 0x1003
24007444:	4298      	cmp	r0, r3
24007446:	f200 80fe 	bhi.w	24007646 <HAL_RCC_OscConfig+0x3d2>
2400744a:	6922      	ldr	r2, [r4, #16]
2400744c:	686b      	ldr	r3, [r5, #4]
2400744e:	2a40      	cmp	r2, #64	; 0x40
24007450:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007454:	bf0c      	ite	eq
24007456:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
2400745a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
2400745e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007460:	6823      	ldr	r3, [r4, #0]
24007462:	e741      	b.n	240072e8 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007464:	2b18      	cmp	r3, #24
24007466:	f000 80ea 	beq.w	2400763e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400746a:	4d2b      	ldr	r5, [pc, #172]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2400746c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400746e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24007470:	2a00      	cmp	r2, #0
24007472:	f000 80d3 	beq.w	2400761c <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007476:	f023 0319 	bic.w	r3, r3, #25
2400747a:	4313      	orrs	r3, r2
2400747c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400747e:	f7fd f91f 	bl	240046c0 <HAL_GetTick>
24007482:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007484:	e004      	b.n	24007490 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007486:	f7fd f91b 	bl	240046c0 <HAL_GetTick>
2400748a:	1b80      	subs	r0, r0, r6
2400748c:	2802      	cmp	r0, #2
2400748e:	d873      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007490:	682b      	ldr	r3, [r5, #0]
24007492:	075f      	lsls	r7, r3, #29
24007494:	d5f7      	bpl.n	24007486 <HAL_RCC_OscConfig+0x212>
24007496:	e7d1      	b.n	2400743c <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007498:	f001 0103 	and.w	r1, r1, #3
2400749c:	2902      	cmp	r1, #2
2400749e:	f47f aefc 	bne.w	2400729a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240074a2:	4a1d      	ldr	r2, [pc, #116]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240074a4:	6812      	ldr	r2, [r2, #0]
240074a6:	0392      	lsls	r2, r2, #14
240074a8:	f57f af1b 	bpl.w	240072e2 <HAL_RCC_OscConfig+0x6e>
240074ac:	6862      	ldr	r2, [r4, #4]
240074ae:	2a00      	cmp	r2, #0
240074b0:	f47f af17 	bne.w	240072e2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
240074b4:	2001      	movs	r0, #1
}
240074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240074b8:	f002 0203 	and.w	r2, r2, #3
240074bc:	2a01      	cmp	r2, #1
240074be:	f47f af20 	bne.w	24007302 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240074c2:	4b15      	ldr	r3, [pc, #84]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240074c4:	681b      	ldr	r3, [r3, #0]
240074c6:	05da      	lsls	r2, r3, #23
240074c8:	d502      	bpl.n	240074d0 <HAL_RCC_OscConfig+0x25c>
240074ca:	69e3      	ldr	r3, [r4, #28]
240074cc:	2b80      	cmp	r3, #128	; 0x80
240074ce:	d1f1      	bne.n	240074b4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240074d0:	f7fd f90e 	bl	240046f0 <HAL_GetREVID>
240074d4:	f241 0303 	movw	r3, #4099	; 0x1003
240074d8:	4298      	cmp	r0, r3
240074da:	f200 80bf 	bhi.w	2400765c <HAL_RCC_OscConfig+0x3e8>
240074de:	6a22      	ldr	r2, [r4, #32]
240074e0:	2a20      	cmp	r2, #32
240074e2:	f000 81ad 	beq.w	24007840 <HAL_RCC_OscConfig+0x5cc>
240074e6:	490c      	ldr	r1, [pc, #48]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240074e8:	684b      	ldr	r3, [r1, #4]
240074ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240074ee:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
240074f2:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240074f4:	6823      	ldr	r3, [r4, #0]
240074f6:	e72d      	b.n	24007354 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240074f8:	4a07      	ldr	r2, [pc, #28]	; (24007518 <HAL_RCC_OscConfig+0x2a4>)
240074fa:	6813      	ldr	r3, [r2, #0]
240074fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007500:	6013      	str	r3, [r2, #0]
24007502:	e6db      	b.n	240072bc <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
24007504:	4d05      	ldr	r5, [pc, #20]	; (2400751c <HAL_RCC_OscConfig+0x2a8>)
24007506:	682b      	ldr	r3, [r5, #0]
24007508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400750c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
2400750e:	f7fd f8d7 	bl	240046c0 <HAL_GetTick>
24007512:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007514:	e009      	b.n	2400752a <HAL_RCC_OscConfig+0x2b6>
24007516:	bf00      	nop
24007518:	58024400 	.word	0x58024400
2400751c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24007520:	f7fd f8ce 	bl	240046c0 <HAL_GetTick>
24007524:	1b80      	subs	r0, r0, r6
24007526:	2864      	cmp	r0, #100	; 0x64
24007528:	d826      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400752a:	682b      	ldr	r3, [r5, #0]
2400752c:	05da      	lsls	r2, r3, #23
2400752e:	d5f7      	bpl.n	24007520 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007530:	68a3      	ldr	r3, [r4, #8]
24007532:	2b01      	cmp	r3, #1
24007534:	f000 8171 	beq.w	2400781a <HAL_RCC_OscConfig+0x5a6>
24007538:	2b00      	cmp	r3, #0
2400753a:	f040 8174 	bne.w	24007826 <HAL_RCC_OscConfig+0x5b2>
2400753e:	4baa      	ldr	r3, [pc, #680]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
24007540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007542:	f022 0201 	bic.w	r2, r2, #1
24007546:	671a      	str	r2, [r3, #112]	; 0x70
24007548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400754a:	f022 0204 	bic.w	r2, r2, #4
2400754e:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24007550:	68a3      	ldr	r3, [r4, #8]
24007552:	2b00      	cmp	r3, #0
24007554:	f000 8140 	beq.w	240077d8 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
24007558:	f7fd f8b2 	bl	240046c0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400755c:	4ea2      	ldr	r6, [pc, #648]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400755e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007562:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007564:	e004      	b.n	24007570 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007566:	f7fd f8ab 	bl	240046c0 <HAL_GetTick>
2400756a:	1b40      	subs	r0, r0, r5
2400756c:	42b8      	cmp	r0, r7
2400756e:	d803      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007570:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007572:	079b      	lsls	r3, r3, #30
24007574:	d5f7      	bpl.n	24007566 <HAL_RCC_OscConfig+0x2f2>
24007576:	e722      	b.n	240073be <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24007578:	2003      	movs	r0, #3
}
2400757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
2400757c:	f7fd f8a0 	bl	240046c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007580:	4e99      	ldr	r6, [pc, #612]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
24007582:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007584:	e004      	b.n	24007590 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007586:	f7fd f89b 	bl	240046c0 <HAL_GetTick>
2400758a:	1b40      	subs	r0, r0, r5
2400758c:	2864      	cmp	r0, #100	; 0x64
2400758e:	d8f3      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007590:	6833      	ldr	r3, [r6, #0]
24007592:	039f      	lsls	r7, r3, #14
24007594:	d4f7      	bmi.n	24007586 <HAL_RCC_OscConfig+0x312>
24007596:	e6a3      	b.n	240072e0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24007598:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400759a:	f023 0301 	bic.w	r3, r3, #1
2400759e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
240075a0:	f7fd f88e 	bl	240046c0 <HAL_GetTick>
240075a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240075a6:	e004      	b.n	240075b2 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240075a8:	f7fd f88a 	bl	240046c0 <HAL_GetTick>
240075ac:	1b80      	subs	r0, r0, r6
240075ae:	2802      	cmp	r0, #2
240075b0:	d8e2      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240075b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240075b4:	0799      	lsls	r1, r3, #30
240075b6:	d4f7      	bmi.n	240075a8 <HAL_RCC_OscConfig+0x334>
240075b8:	e6e4      	b.n	24007384 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240075ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240075be:	4b8a      	ldr	r3, [pc, #552]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
240075c0:	681a      	ldr	r2, [r3, #0]
240075c2:	f47f ae74 	bne.w	240072ae <HAL_RCC_OscConfig+0x3a>
240075c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
240075ca:	601a      	str	r2, [r3, #0]
240075cc:	681a      	ldr	r2, [r3, #0]
240075ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240075d2:	601a      	str	r2, [r3, #0]
240075d4:	e672      	b.n	240072bc <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
240075d6:	682b      	ldr	r3, [r5, #0]
240075d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240075dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240075de:	f7fd f86f 	bl	240046c0 <HAL_GetTick>
240075e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240075e4:	e004      	b.n	240075f0 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240075e6:	f7fd f86b 	bl	240046c0 <HAL_GetTick>
240075ea:	1b80      	subs	r0, r0, r6
240075ec:	2802      	cmp	r0, #2
240075ee:	d8c3      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240075f0:	682b      	ldr	r3, [r5, #0]
240075f2:	0498      	lsls	r0, r3, #18
240075f4:	d4f7      	bmi.n	240075e6 <HAL_RCC_OscConfig+0x372>
240075f6:	e6de      	b.n	240073b6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
240075f8:	682b      	ldr	r3, [r5, #0]
240075fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240075fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007600:	f7fd f85e 	bl	240046c0 <HAL_GetTick>
24007604:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007606:	e004      	b.n	24007612 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007608:	f7fd f85a 	bl	240046c0 <HAL_GetTick>
2400760c:	1b80      	subs	r0, r0, r6
2400760e:	2802      	cmp	r0, #2
24007610:	d8b2      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007612:	682b      	ldr	r3, [r5, #0]
24007614:	05df      	lsls	r7, r3, #23
24007616:	d4f7      	bmi.n	24007608 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007618:	6823      	ldr	r3, [r4, #0]
2400761a:	e69b      	b.n	24007354 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
2400761c:	f023 0301 	bic.w	r3, r3, #1
24007620:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007622:	f7fd f84d 	bl	240046c0 <HAL_GetTick>
24007626:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007628:	e004      	b.n	24007634 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400762a:	f7fd f849 	bl	240046c0 <HAL_GetTick>
2400762e:	1b80      	subs	r0, r0, r6
24007630:	2802      	cmp	r0, #2
24007632:	d8a1      	bhi.n	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007634:	682b      	ldr	r3, [r5, #0]
24007636:	0758      	lsls	r0, r3, #29
24007638:	d4f7      	bmi.n	2400762a <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2400763a:	6823      	ldr	r3, [r4, #0]
2400763c:	e654      	b.n	240072e8 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400763e:	0790      	lsls	r0, r2, #30
24007640:	f47f af13 	bne.w	2400746a <HAL_RCC_OscConfig+0x1f6>
24007644:	e6e0      	b.n	24007408 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007646:	686b      	ldr	r3, [r5, #4]
24007648:	6922      	ldr	r2, [r4, #16]
2400764a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
2400764e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007652:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007654:	6823      	ldr	r3, [r4, #0]
24007656:	e647      	b.n	240072e8 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
24007658:	2001      	movs	r0, #1
}
2400765a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400765c:	4a62      	ldr	r2, [pc, #392]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
2400765e:	6a21      	ldr	r1, [r4, #32]
24007660:	68d3      	ldr	r3, [r2, #12]
24007662:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007666:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400766a:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400766c:	6823      	ldr	r3, [r4, #0]
2400766e:	e671      	b.n	24007354 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
24007670:	f7fd f826 	bl	240046c0 <HAL_GetTick>
24007674:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007676:	e005      	b.n	24007684 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007678:	f7fd f822 	bl	240046c0 <HAL_GetTick>
2400767c:	1b80      	subs	r0, r0, r6
2400767e:	2802      	cmp	r0, #2
24007680:	f63f af7a 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007684:	682b      	ldr	r3, [r5, #0]
24007686:	0199      	lsls	r1, r3, #6
24007688:	d4f6      	bmi.n	24007678 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2400768a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400768c:	4b57      	ldr	r3, [pc, #348]	; (240077ec <HAL_RCC_OscConfig+0x578>)
2400768e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24007690:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007692:	4957      	ldr	r1, [pc, #348]	; (240077f0 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007694:	4e54      	ldr	r6, [pc, #336]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007696:	4313      	orrs	r3, r2
24007698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400769a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400769e:	62ab      	str	r3, [r5, #40]	; 0x28
240076a0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
240076a4:	3b01      	subs	r3, #1
240076a6:	3a01      	subs	r2, #1
240076a8:	025b      	lsls	r3, r3, #9
240076aa:	0412      	lsls	r2, r2, #16
240076ac:	b29b      	uxth	r3, r3
240076ae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240076b2:	4313      	orrs	r3, r2
240076b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
240076b6:	3a01      	subs	r2, #1
240076b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
240076bc:	4313      	orrs	r3, r2
240076be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
240076c0:	3a01      	subs	r2, #1
240076c2:	0612      	lsls	r2, r2, #24
240076c4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240076c8:	4313      	orrs	r3, r2
240076ca:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
240076cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240076ce:	f023 0301 	bic.w	r3, r3, #1
240076d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240076d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
240076d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
240076d8:	4011      	ands	r1, r2
240076da:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
240076de:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
240076e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240076e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
240076e4:	f023 030c 	bic.w	r3, r3, #12
240076e8:	4313      	orrs	r3, r2
240076ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
240076ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240076ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
240076f0:	f023 0302 	bic.w	r3, r3, #2
240076f4:	4313      	orrs	r3, r2
240076f6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
240076f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240076fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240076fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007700:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007706:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24007708:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400770a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400770e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24007710:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007712:	f043 0301 	orr.w	r3, r3, #1
24007716:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24007718:	682b      	ldr	r3, [r5, #0]
2400771a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400771e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007720:	f7fc ffce 	bl	240046c0 <HAL_GetTick>
24007724:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007726:	e005      	b.n	24007734 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007728:	f7fc ffca 	bl	240046c0 <HAL_GetTick>
2400772c:	1b00      	subs	r0, r0, r4
2400772e:	2802      	cmp	r0, #2
24007730:	f63f af22 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007734:	6833      	ldr	r3, [r6, #0]
24007736:	019a      	lsls	r2, r3, #6
24007738:	d5f6      	bpl.n	24007728 <HAL_RCC_OscConfig+0x4b4>
2400773a:	e65d      	b.n	240073f8 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400773c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
2400773e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24007740:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007742:	f43f ae5a 	beq.w	240073fa <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007746:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400774a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2400774c:	428b      	cmp	r3, r1
2400774e:	f47f aeb1 	bne.w	240074b4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007752:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007758:	429a      	cmp	r2, r3
2400775a:	f47f aeab 	bne.w	240074b4 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400775e:	6b23      	ldr	r3, [r4, #48]	; 0x30
24007760:	f3c6 0208 	ubfx	r2, r6, #0, #9
24007764:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007766:	429a      	cmp	r2, r3
24007768:	f47f aea4 	bne.w	240074b4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2400776c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400776e:	f3c6 2246 	ubfx	r2, r6, #9, #7
24007772:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007774:	429a      	cmp	r2, r3
24007776:	f47f ae9d 	bne.w	240074b4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2400777a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400777c:	f3c6 4206 	ubfx	r2, r6, #16, #7
24007780:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007782:	429a      	cmp	r2, r3
24007784:	f47f ae96 	bne.w	240074b4 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24007788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400778a:	f3c6 6606 	ubfx	r6, r6, #24, #7
2400778e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007790:	429e      	cmp	r6, r3
24007792:	f47f ae8f 	bne.w	240074b4 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24007796:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24007798:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2400779a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2400779e:	429a      	cmp	r2, r3
240077a0:	f43f ae2a 	beq.w	240073f8 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
240077a4:	4a10      	ldr	r2, [pc, #64]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
240077a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240077a8:	f023 0301 	bic.w	r3, r3, #1
240077ac:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
240077ae:	f7fc ff87 	bl	240046c0 <HAL_GetTick>
240077b2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
240077b4:	f7fc ff84 	bl	240046c0 <HAL_GetTick>
240077b8:	42a8      	cmp	r0, r5
240077ba:	d0fb      	beq.n	240077b4 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240077bc:	4a0a      	ldr	r2, [pc, #40]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
240077be:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240077c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240077c2:	4b0b      	ldr	r3, [pc, #44]	; (240077f0 <HAL_RCC_OscConfig+0x57c>)
240077c4:	6b54      	ldr	r4, [r2, #52]	; 0x34
240077c6:	4023      	ands	r3, r4
240077c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
240077cc:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
240077ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240077d0:	f043 0301 	orr.w	r3, r3, #1
240077d4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
240077d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
240077d8:	f7fc ff72 	bl	240046c0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240077dc:	4e02      	ldr	r6, [pc, #8]	; (240077e8 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240077de:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
240077e2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240077e4:	e00c      	b.n	24007800 <HAL_RCC_OscConfig+0x58c>
240077e6:	bf00      	nop
240077e8:	58024400 	.word	0x58024400
240077ec:	fffffc0c 	.word	0xfffffc0c
240077f0:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240077f4:	f7fc ff64 	bl	240046c0 <HAL_GetTick>
240077f8:	1b40      	subs	r0, r0, r5
240077fa:	42b8      	cmp	r0, r7
240077fc:	f63f aebc 	bhi.w	24007578 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007800:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007802:	0798      	lsls	r0, r3, #30
24007804:	d4f6      	bmi.n	240077f4 <HAL_RCC_OscConfig+0x580>
24007806:	e5da      	b.n	240073be <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007808:	68eb      	ldr	r3, [r5, #12]
2400780a:	6a22      	ldr	r2, [r4, #32]
2400780c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007810:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007814:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007816:	6823      	ldr	r3, [r4, #0]
24007818:	e59c      	b.n	24007354 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400781a:	4a0e      	ldr	r2, [pc, #56]	; (24007854 <HAL_RCC_OscConfig+0x5e0>)
2400781c:	6f13      	ldr	r3, [r2, #112]	; 0x70
2400781e:	f043 0301 	orr.w	r3, r3, #1
24007822:	6713      	str	r3, [r2, #112]	; 0x70
24007824:	e694      	b.n	24007550 <HAL_RCC_OscConfig+0x2dc>
24007826:	2b05      	cmp	r3, #5
24007828:	4b0a      	ldr	r3, [pc, #40]	; (24007854 <HAL_RCC_OscConfig+0x5e0>)
2400782a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400782c:	f47f ae89 	bne.w	24007542 <HAL_RCC_OscConfig+0x2ce>
24007830:	f042 0204 	orr.w	r2, r2, #4
24007834:	671a      	str	r2, [r3, #112]	; 0x70
24007836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007838:	f042 0201 	orr.w	r2, r2, #1
2400783c:	671a      	str	r2, [r3, #112]	; 0x70
2400783e:	e687      	b.n	24007550 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007840:	4a04      	ldr	r2, [pc, #16]	; (24007854 <HAL_RCC_OscConfig+0x5e0>)
24007842:	6853      	ldr	r3, [r2, #4]
24007844:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
2400784c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400784e:	6823      	ldr	r3, [r4, #0]
24007850:	e580      	b.n	24007354 <HAL_RCC_OscConfig+0xe0>
24007852:	bf00      	nop
24007854:	58024400 	.word	0x58024400

24007858 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007858:	4a47      	ldr	r2, [pc, #284]	; (24007978 <HAL_RCC_GetSysClockFreq+0x120>)
2400785a:	6913      	ldr	r3, [r2, #16]
2400785c:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007860:	2b10      	cmp	r3, #16
24007862:	d004      	beq.n	2400786e <HAL_RCC_GetSysClockFreq+0x16>
24007864:	2b18      	cmp	r3, #24
24007866:	d00d      	beq.n	24007884 <HAL_RCC_GetSysClockFreq+0x2c>
24007868:	b11b      	cbz	r3, 24007872 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
2400786a:	4844      	ldr	r0, [pc, #272]	; (2400797c <HAL_RCC_GetSysClockFreq+0x124>)
2400786c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400786e:	4844      	ldr	r0, [pc, #272]	; (24007980 <HAL_RCC_GetSysClockFreq+0x128>)
24007870:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007872:	6813      	ldr	r3, [r2, #0]
24007874:	0699      	lsls	r1, r3, #26
24007876:	d54a      	bpl.n	2400790e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007878:	6813      	ldr	r3, [r2, #0]
2400787a:	4842      	ldr	r0, [pc, #264]	; (24007984 <HAL_RCC_GetSysClockFreq+0x12c>)
2400787c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24007880:	40d8      	lsrs	r0, r3
24007882:	4770      	bx	lr
{
24007884:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007886:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007888:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400788a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
2400788c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007890:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007892:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007896:	d038      	beq.n	2400790a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007898:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400789c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240078a0:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240078a4:	fb05 f101 	mul.w	r1, r5, r1
240078a8:	2b01      	cmp	r3, #1
240078aa:	ee07 1a90 	vmov	s15, r1
240078ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
240078b2:	d002      	beq.n	240078ba <HAL_RCC_GetSysClockFreq+0x62>
240078b4:	2b02      	cmp	r3, #2
240078b6:	d02c      	beq.n	24007912 <HAL_RCC_GetSysClockFreq+0xba>
240078b8:	b393      	cbz	r3, 24007920 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240078ba:	ee07 0a90 	vmov	s15, r0
240078be:	eddf 6a32 	vldr	s13, [pc, #200]	; 24007988 <HAL_RCC_GetSysClockFreq+0x130>
240078c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240078c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
240078c8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
240078cc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 2400798c <HAL_RCC_GetSysClockFreq+0x134>
240078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
240078d4:	ee06 3a90 	vmov	s13, r3
240078d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
240078dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240078e0:	ee76 6a85 	vadd.f32	s13, s13, s10
240078e4:	eee7 6a25 	vfma.f32	s13, s14, s11
240078e8:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
240078ec:	4b22      	ldr	r3, [pc, #136]	; (24007978 <HAL_RCC_GetSysClockFreq+0x120>)
240078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240078f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
240078f4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
240078f6:	ee07 3a90 	vmov	s15, r3
240078fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240078fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007906:	ee17 0a90 	vmov	r0, s15
}
2400790a:	bc30      	pop	{r4, r5}
2400790c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
2400790e:	481d      	ldr	r0, [pc, #116]	; (24007984 <HAL_RCC_GetSysClockFreq+0x12c>)
}
24007910:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007912:	ee07 0a90 	vmov	s15, r0
24007916:	eddf 6a1e 	vldr	s13, [pc, #120]	; 24007990 <HAL_RCC_GetSysClockFreq+0x138>
2400791a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400791e:	e7d2      	b.n	240078c6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007920:	6813      	ldr	r3, [r2, #0]
24007922:	069b      	lsls	r3, r3, #26
24007924:	d520      	bpl.n	24007968 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007926:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007928:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400792c:	4915      	ldr	r1, [pc, #84]	; (24007984 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400792e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24007932:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007934:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400793c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 2400798c <HAL_RCC_GetSysClockFreq+0x134>
24007940:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007944:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007946:	ee06 3a90 	vmov	s13, r3
2400794a:	ee05 1a90 	vmov	s11, r1
2400794e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24007952:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007956:	ee76 6a86 	vadd.f32	s13, s13, s12
2400795a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400795e:	eee7 6a05 	vfma.f32	s13, s14, s10
24007962:	ee66 6a26 	vmul.f32	s13, s12, s13
24007966:	e7c1      	b.n	240078ec <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007968:	ee07 0a90 	vmov	s15, r0
2400796c:	eddf 6a09 	vldr	s13, [pc, #36]	; 24007994 <HAL_RCC_GetSysClockFreq+0x13c>
24007970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007974:	e7a7      	b.n	240078c6 <HAL_RCC_GetSysClockFreq+0x6e>
24007976:	bf00      	nop
24007978:	58024400 	.word	0x58024400
2400797c:	003d0900 	.word	0x003d0900
24007980:	00f42400 	.word	0x00f42400
24007984:	03d09000 	.word	0x03d09000
24007988:	4a742400 	.word	0x4a742400
2400798c:	39000000 	.word	0x39000000
24007990:	4b742400 	.word	0x4b742400
24007994:	4c742400 	.word	0x4c742400

24007998 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24007998:	2800      	cmp	r0, #0
2400799a:	f000 811a 	beq.w	24007bd2 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2400799e:	4a92      	ldr	r2, [pc, #584]	; (24007be8 <HAL_RCC_ClockConfig+0x250>)
{
240079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
240079a4:	6813      	ldr	r3, [r2, #0]
240079a6:	4604      	mov	r4, r0
240079a8:	460d      	mov	r5, r1
240079aa:	f003 030f 	and.w	r3, r3, #15
240079ae:	428b      	cmp	r3, r1
240079b0:	d20c      	bcs.n	240079cc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
240079b2:	6813      	ldr	r3, [r2, #0]
240079b4:	f023 030f 	bic.w	r3, r3, #15
240079b8:	430b      	orrs	r3, r1
240079ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
240079bc:	6813      	ldr	r3, [r2, #0]
240079be:	f003 030f 	and.w	r3, r3, #15
240079c2:	428b      	cmp	r3, r1
240079c4:	d002      	beq.n	240079cc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
240079c6:	2001      	movs	r0, #1
}
240079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
240079cc:	6823      	ldr	r3, [r4, #0]
240079ce:	075f      	lsls	r7, r3, #29
240079d0:	d50c      	bpl.n	240079ec <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
240079d2:	4986      	ldr	r1, [pc, #536]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
240079d4:	6920      	ldr	r0, [r4, #16]
240079d6:	698a      	ldr	r2, [r1, #24]
240079d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
240079dc:	4290      	cmp	r0, r2
240079de:	d905      	bls.n	240079ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
240079e0:	698b      	ldr	r3, [r1, #24]
240079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240079e6:	4303      	orrs	r3, r0
240079e8:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
240079ea:	6823      	ldr	r3, [r4, #0]
240079ec:	071e      	lsls	r6, r3, #28
240079ee:	d50c      	bpl.n	24007a0a <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240079f0:	497e      	ldr	r1, [pc, #504]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
240079f2:	6960      	ldr	r0, [r4, #20]
240079f4:	69ca      	ldr	r2, [r1, #28]
240079f6:	f002 0270 	and.w	r2, r2, #112	; 0x70
240079fa:	4290      	cmp	r0, r2
240079fc:	d905      	bls.n	24007a0a <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240079fe:	69cb      	ldr	r3, [r1, #28]
24007a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007a04:	4303      	orrs	r3, r0
24007a06:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007a08:	6823      	ldr	r3, [r4, #0]
24007a0a:	06d8      	lsls	r0, r3, #27
24007a0c:	d50c      	bpl.n	24007a28 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007a0e:	4977      	ldr	r1, [pc, #476]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007a10:	69a0      	ldr	r0, [r4, #24]
24007a12:	69ca      	ldr	r2, [r1, #28]
24007a14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007a18:	4290      	cmp	r0, r2
24007a1a:	d905      	bls.n	24007a28 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007a1c:	69cb      	ldr	r3, [r1, #28]
24007a1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007a22:	4303      	orrs	r3, r0
24007a24:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007a26:	6823      	ldr	r3, [r4, #0]
24007a28:	0699      	lsls	r1, r3, #26
24007a2a:	d50c      	bpl.n	24007a46 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007a2c:	496f      	ldr	r1, [pc, #444]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007a2e:	69e0      	ldr	r0, [r4, #28]
24007a30:	6a0a      	ldr	r2, [r1, #32]
24007a32:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007a36:	4290      	cmp	r0, r2
24007a38:	d905      	bls.n	24007a46 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007a3a:	6a0b      	ldr	r3, [r1, #32]
24007a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007a40:	4303      	orrs	r3, r0
24007a42:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007a44:	6823      	ldr	r3, [r4, #0]
24007a46:	079a      	lsls	r2, r3, #30
24007a48:	f140 8083 	bpl.w	24007b52 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007a4c:	4867      	ldr	r0, [pc, #412]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007a4e:	68e1      	ldr	r1, [r4, #12]
24007a50:	6982      	ldr	r2, [r0, #24]
24007a52:	f002 020f 	and.w	r2, r2, #15
24007a56:	4291      	cmp	r1, r2
24007a58:	f240 80a9 	bls.w	24007bae <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007a5c:	6983      	ldr	r3, [r0, #24]
24007a5e:	f023 030f 	bic.w	r3, r3, #15
24007a62:	4319      	orrs	r1, r3
24007a64:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007a66:	6823      	ldr	r3, [r4, #0]
24007a68:	07df      	lsls	r7, r3, #31
24007a6a:	d474      	bmi.n	24007b56 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007a6c:	079f      	lsls	r7, r3, #30
24007a6e:	d507      	bpl.n	24007a80 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007a70:	4a5e      	ldr	r2, [pc, #376]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007a72:	68e1      	ldr	r1, [r4, #12]
24007a74:	6993      	ldr	r3, [r2, #24]
24007a76:	f003 030f 	and.w	r3, r3, #15
24007a7a:	428b      	cmp	r3, r1
24007a7c:	f200 80a0 	bhi.w	24007bc0 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24007a80:	4a59      	ldr	r2, [pc, #356]	; (24007be8 <HAL_RCC_ClockConfig+0x250>)
24007a82:	6813      	ldr	r3, [r2, #0]
24007a84:	f003 030f 	and.w	r3, r3, #15
24007a88:	42ab      	cmp	r3, r5
24007a8a:	d909      	bls.n	24007aa0 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007a8c:	6813      	ldr	r3, [r2, #0]
24007a8e:	f023 030f 	bic.w	r3, r3, #15
24007a92:	432b      	orrs	r3, r5
24007a94:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007a96:	6813      	ldr	r3, [r2, #0]
24007a98:	f003 030f 	and.w	r3, r3, #15
24007a9c:	42ab      	cmp	r3, r5
24007a9e:	d192      	bne.n	240079c6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007aa0:	6823      	ldr	r3, [r4, #0]
24007aa2:	075e      	lsls	r6, r3, #29
24007aa4:	d50c      	bpl.n	24007ac0 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007aa6:	4951      	ldr	r1, [pc, #324]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007aa8:	6920      	ldr	r0, [r4, #16]
24007aaa:	698a      	ldr	r2, [r1, #24]
24007aac:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007ab0:	4290      	cmp	r0, r2
24007ab2:	d205      	bcs.n	24007ac0 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007ab4:	698b      	ldr	r3, [r1, #24]
24007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007aba:	4303      	orrs	r3, r0
24007abc:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007abe:	6823      	ldr	r3, [r4, #0]
24007ac0:	071d      	lsls	r5, r3, #28
24007ac2:	d50c      	bpl.n	24007ade <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007ac4:	4949      	ldr	r1, [pc, #292]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007ac6:	6960      	ldr	r0, [r4, #20]
24007ac8:	69ca      	ldr	r2, [r1, #28]
24007aca:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007ace:	4290      	cmp	r0, r2
24007ad0:	d205      	bcs.n	24007ade <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007ad2:	69cb      	ldr	r3, [r1, #28]
24007ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007ad8:	4303      	orrs	r3, r0
24007ada:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007adc:	6823      	ldr	r3, [r4, #0]
24007ade:	06d8      	lsls	r0, r3, #27
24007ae0:	d50c      	bpl.n	24007afc <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007ae2:	4942      	ldr	r1, [pc, #264]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007ae4:	69a0      	ldr	r0, [r4, #24]
24007ae6:	69ca      	ldr	r2, [r1, #28]
24007ae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007aec:	4290      	cmp	r0, r2
24007aee:	d205      	bcs.n	24007afc <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007af0:	69cb      	ldr	r3, [r1, #28]
24007af2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007af6:	4303      	orrs	r3, r0
24007af8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007afa:	6823      	ldr	r3, [r4, #0]
24007afc:	0699      	lsls	r1, r3, #26
24007afe:	d50b      	bpl.n	24007b18 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007b00:	4a3a      	ldr	r2, [pc, #232]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007b02:	69e1      	ldr	r1, [r4, #28]
24007b04:	6a13      	ldr	r3, [r2, #32]
24007b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007b0a:	4299      	cmp	r1, r3
24007b0c:	d204      	bcs.n	24007b18 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007b0e:	6a13      	ldr	r3, [r2, #32]
24007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007b14:	430b      	orrs	r3, r1
24007b16:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b18:	f7ff fe9e 	bl	24007858 <HAL_RCC_GetSysClockFreq>
24007b1c:	4a33      	ldr	r2, [pc, #204]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007b1e:	4603      	mov	r3, r0
24007b20:	4833      	ldr	r0, [pc, #204]	; (24007bf0 <HAL_RCC_ClockConfig+0x258>)
24007b22:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b24:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b26:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
24007b2a:	4d32      	ldr	r5, [pc, #200]	; (24007bf4 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b2c:	f002 020f 	and.w	r2, r2, #15
24007b30:	4c31      	ldr	r4, [pc, #196]	; (24007bf8 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b32:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b34:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b36:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
24007b3a:	4830      	ldr	r0, [pc, #192]	; (24007bfc <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b3c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b40:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
24007b42:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
24007b44:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b46:	40d3      	lsrs	r3, r2
24007b48:	6023      	str	r3, [r4, #0]
}
24007b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
24007b4e:	f7fc bd55 	b.w	240045fc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007b52:	07db      	lsls	r3, r3, #31
24007b54:	d594      	bpl.n	24007a80 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24007b56:	4a25      	ldr	r2, [pc, #148]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007b58:	68a1      	ldr	r1, [r4, #8]
24007b5a:	6993      	ldr	r3, [r2, #24]
24007b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24007b60:	430b      	orrs	r3, r1
24007b62:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007b64:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007b66:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007b68:	2902      	cmp	r1, #2
24007b6a:	d034      	beq.n	24007bd6 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24007b6c:	2903      	cmp	r1, #3
24007b6e:	d02d      	beq.n	24007bcc <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24007b70:	2901      	cmp	r1, #1
24007b72:	d035      	beq.n	24007be0 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007b74:	075b      	lsls	r3, r3, #29
24007b76:	f57f af26 	bpl.w	240079c6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007b7a:	4e1c      	ldr	r6, [pc, #112]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007b7c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007b80:	6933      	ldr	r3, [r6, #16]
24007b82:	f023 0307 	bic.w	r3, r3, #7
24007b86:	430b      	orrs	r3, r1
24007b88:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24007b8a:	f7fc fd99 	bl	240046c0 <HAL_GetTick>
24007b8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007b90:	e004      	b.n	24007b9c <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007b92:	f7fc fd95 	bl	240046c0 <HAL_GetTick>
24007b96:	1bc0      	subs	r0, r0, r7
24007b98:	4540      	cmp	r0, r8
24007b9a:	d81f      	bhi.n	24007bdc <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007b9c:	6933      	ldr	r3, [r6, #16]
24007b9e:	6862      	ldr	r2, [r4, #4]
24007ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007ba4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24007ba8:	d1f3      	bne.n	24007b92 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007baa:	6823      	ldr	r3, [r4, #0]
24007bac:	e75e      	b.n	24007a6c <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007bae:	07da      	lsls	r2, r3, #31
24007bb0:	d4d1      	bmi.n	24007b56 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007bb2:	4a0e      	ldr	r2, [pc, #56]	; (24007bec <HAL_RCC_ClockConfig+0x254>)
24007bb4:	6993      	ldr	r3, [r2, #24]
24007bb6:	f003 030f 	and.w	r3, r3, #15
24007bba:	428b      	cmp	r3, r1
24007bbc:	f67f af60 	bls.w	24007a80 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007bc0:	6993      	ldr	r3, [r2, #24]
24007bc2:	f023 030f 	bic.w	r3, r3, #15
24007bc6:	4319      	orrs	r1, r3
24007bc8:	6191      	str	r1, [r2, #24]
24007bca:	e759      	b.n	24007a80 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007bcc:	0198      	lsls	r0, r3, #6
24007bce:	d4d4      	bmi.n	24007b7a <HAL_RCC_ClockConfig+0x1e2>
24007bd0:	e6f9      	b.n	240079c6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24007bd2:	2001      	movs	r0, #1
}
24007bd4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007bd6:	039e      	lsls	r6, r3, #14
24007bd8:	d4cf      	bmi.n	24007b7a <HAL_RCC_ClockConfig+0x1e2>
24007bda:	e6f4      	b.n	240079c6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24007bdc:	2003      	movs	r0, #3
24007bde:	e6f3      	b.n	240079c8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007be0:	05da      	lsls	r2, r3, #23
24007be2:	d4ca      	bmi.n	24007b7a <HAL_RCC_ClockConfig+0x1e2>
24007be4:	e6ef      	b.n	240079c6 <HAL_RCC_ClockConfig+0x2e>
24007be6:	bf00      	nop
24007be8:	52002000 	.word	0x52002000
24007bec:	58024400 	.word	0x58024400
24007bf0:	24017f40 	.word	0x24017f40
24007bf4:	200006e0 	.word	0x200006e0
24007bf8:	200006e4 	.word	0x200006e4
24007bfc:	200006ec 	.word	0x200006ec

24007c00 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c00:	4a18      	ldr	r2, [pc, #96]	; (24007c64 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24007c02:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c04:	6913      	ldr	r3, [r2, #16]
24007c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007c0a:	2b10      	cmp	r3, #16
24007c0c:	d01a      	beq.n	24007c44 <HAL_RCC_GetHCLKFreq+0x44>
24007c0e:	2b18      	cmp	r3, #24
24007c10:	d023      	beq.n	24007c5a <HAL_RCC_GetHCLKFreq+0x5a>
24007c12:	b1cb      	cbz	r3, 24007c48 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
24007c14:	4814      	ldr	r0, [pc, #80]	; (24007c68 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c16:	4b13      	ldr	r3, [pc, #76]	; (24007c64 <HAL_RCC_GetHCLKFreq+0x64>)
24007c18:	4914      	ldr	r1, [pc, #80]	; (24007c6c <HAL_RCC_GetHCLKFreq+0x6c>)
24007c1a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c1c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c1e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c22:	4c13      	ldr	r4, [pc, #76]	; (24007c70 <HAL_RCC_GetHCLKFreq+0x70>)
24007c24:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24007c28:	4d12      	ldr	r5, [pc, #72]	; (24007c74 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c2a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c2c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c2e:	f002 021f 	and.w	r2, r2, #31
24007c32:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c36:	f003 001f 	and.w	r0, r3, #31
24007c3a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
24007c3e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c40:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
24007c42:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c44:	480c      	ldr	r0, [pc, #48]	; (24007c78 <HAL_RCC_GetHCLKFreq+0x78>)
24007c46:	e7e6      	b.n	24007c16 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007c48:	6813      	ldr	r3, [r2, #0]
24007c4a:	069b      	lsls	r3, r3, #26
24007c4c:	d508      	bpl.n	24007c60 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007c4e:	6812      	ldr	r2, [r2, #0]
24007c50:	480a      	ldr	r0, [pc, #40]	; (24007c7c <HAL_RCC_GetHCLKFreq+0x7c>)
24007c52:	f3c2 02c1 	ubfx	r2, r2, #3, #2
24007c56:	40d0      	lsrs	r0, r2
24007c58:	e7dd      	b.n	24007c16 <HAL_RCC_GetHCLKFreq+0x16>
24007c5a:	f7ff fa87 	bl	2400716c <HAL_RCC_GetSysClockFreq.part.0>
24007c5e:	e7da      	b.n	24007c16 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24007c60:	4806      	ldr	r0, [pc, #24]	; (24007c7c <HAL_RCC_GetHCLKFreq+0x7c>)
24007c62:	e7d8      	b.n	24007c16 <HAL_RCC_GetHCLKFreq+0x16>
24007c64:	58024400 	.word	0x58024400
24007c68:	003d0900 	.word	0x003d0900
24007c6c:	24017f40 	.word	0x24017f40
24007c70:	200006e4 	.word	0x200006e4
24007c74:	200006e0 	.word	0x200006e0
24007c78:	00f42400 	.word	0x00f42400
24007c7c:	03d09000 	.word	0x03d09000

24007c80 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c80:	4a1c      	ldr	r2, [pc, #112]	; (24007cf4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24007c82:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c84:	6913      	ldr	r3, [r2, #16]
24007c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007c8a:	2b10      	cmp	r3, #16
24007c8c:	d021      	beq.n	24007cd2 <HAL_RCC_GetPCLK1Freq+0x52>
24007c8e:	2b18      	cmp	r3, #24
24007c90:	d02b      	beq.n	24007cea <HAL_RCC_GetPCLK1Freq+0x6a>
24007c92:	b303      	cbz	r3, 24007cd6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
24007c94:	4818      	ldr	r0, [pc, #96]	; (24007cf8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c96:	4a17      	ldr	r2, [pc, #92]	; (24007cf4 <HAL_RCC_GetPCLK1Freq+0x74>)
24007c98:	4918      	ldr	r1, [pc, #96]	; (24007cfc <HAL_RCC_GetPCLK1Freq+0x7c>)
24007c9a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
24007c9c:	4d18      	ldr	r5, [pc, #96]	; (24007d00 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c9e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007ca2:	4c18      	ldr	r4, [pc, #96]	; (24007d04 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007ca4:	5ccb      	ldrb	r3, [r1, r3]
24007ca6:	f003 031f 	and.w	r3, r3, #31
24007caa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007cae:	6990      	ldr	r0, [r2, #24]
24007cb0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
24007cb4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007cb6:	5c08      	ldrb	r0, [r1, r0]
24007cb8:	f000 001f 	and.w	r0, r0, #31
24007cbc:	40c3      	lsrs	r3, r0
24007cbe:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24007cc0:	69d2      	ldr	r2, [r2, #28]
24007cc2:	f3c2 1202 	ubfx	r2, r2, #4, #3
24007cc6:	5c88      	ldrb	r0, [r1, r2]
24007cc8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24007ccc:	fa23 f000 	lsr.w	r0, r3, r0
24007cd0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007cd2:	480d      	ldr	r0, [pc, #52]	; (24007d08 <HAL_RCC_GetPCLK1Freq+0x88>)
24007cd4:	e7df      	b.n	24007c96 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007cd6:	6813      	ldr	r3, [r2, #0]
24007cd8:	069b      	lsls	r3, r3, #26
24007cda:	d509      	bpl.n	24007cf0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007cdc:	6810      	ldr	r0, [r2, #0]
24007cde:	4b0b      	ldr	r3, [pc, #44]	; (24007d0c <HAL_RCC_GetPCLK1Freq+0x8c>)
24007ce0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
24007ce4:	fa23 f000 	lsr.w	r0, r3, r0
24007ce8:	e7d5      	b.n	24007c96 <HAL_RCC_GetPCLK1Freq+0x16>
24007cea:	f7ff fa3f 	bl	2400716c <HAL_RCC_GetSysClockFreq.part.0>
24007cee:	e7d2      	b.n	24007c96 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24007cf0:	4806      	ldr	r0, [pc, #24]	; (24007d0c <HAL_RCC_GetPCLK1Freq+0x8c>)
24007cf2:	e7d0      	b.n	24007c96 <HAL_RCC_GetPCLK1Freq+0x16>
24007cf4:	58024400 	.word	0x58024400
24007cf8:	003d0900 	.word	0x003d0900
24007cfc:	24017f40 	.word	0x24017f40
24007d00:	200006e0 	.word	0x200006e0
24007d04:	200006e4 	.word	0x200006e4
24007d08:	00f42400 	.word	0x00f42400
24007d0c:	03d09000 	.word	0x03d09000

24007d10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007d12:	4c3a      	ldr	r4, [pc, #232]	; (24007dfc <RCCEx_PLL2_Config+0xec>)
24007d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007d16:	f003 0303 	and.w	r3, r3, #3
24007d1a:	2b03      	cmp	r3, #3
24007d1c:	d067      	beq.n	24007dee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24007d1e:	6823      	ldr	r3, [r4, #0]
24007d20:	4606      	mov	r6, r0
24007d22:	460f      	mov	r7, r1
24007d24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24007d28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007d2a:	f7fc fcc9 	bl	240046c0 <HAL_GetTick>
24007d2e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24007d30:	e004      	b.n	24007d3c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007d32:	f7fc fcc5 	bl	240046c0 <HAL_GetTick>
24007d36:	1b43      	subs	r3, r0, r5
24007d38:	2b02      	cmp	r3, #2
24007d3a:	d856      	bhi.n	24007dea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24007d3c:	6823      	ldr	r3, [r4, #0]
24007d3e:	011a      	lsls	r2, r3, #4
24007d40:	d4f7      	bmi.n	24007d32 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24007d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007d44:	6832      	ldr	r2, [r6, #0]
24007d46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007d4a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24007d4e:	62a3      	str	r3, [r4, #40]	; 0x28
24007d50:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24007d54:	3b01      	subs	r3, #1
24007d56:	3a01      	subs	r2, #1
24007d58:	025b      	lsls	r3, r3, #9
24007d5a:	0412      	lsls	r2, r2, #16
24007d5c:	b29b      	uxth	r3, r3
24007d5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007d62:	4313      	orrs	r3, r2
24007d64:	6872      	ldr	r2, [r6, #4]
24007d66:	3a01      	subs	r2, #1
24007d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007d6c:	4313      	orrs	r3, r2
24007d6e:	6932      	ldr	r2, [r6, #16]
24007d70:	3a01      	subs	r2, #1
24007d72:	0612      	lsls	r2, r2, #24
24007d74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007d78:	4313      	orrs	r3, r2
24007d7a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24007d7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007d7e:	6972      	ldr	r2, [r6, #20]
24007d80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
24007d84:	4313      	orrs	r3, r2
24007d86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007d88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007d8a:	69b3      	ldr	r3, [r6, #24]
24007d8c:	f022 0220 	bic.w	r2, r2, #32
24007d90:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24007d92:	4b1b      	ldr	r3, [pc, #108]	; (24007e00 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007d94:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
24007d96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007d98:	f022 0210 	bic.w	r2, r2, #16
24007d9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24007d9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24007da0:	69f2      	ldr	r2, [r6, #28]
24007da2:	400b      	ands	r3, r1
24007da4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24007da8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24007daa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007dac:	f043 0310 	orr.w	r3, r3, #16
24007db0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007db4:	b1ef      	cbz	r7, 24007df2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24007db6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24007db8:	bf0c      	ite	eq
24007dba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24007dbe:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
24007dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24007dc4:	4c0d      	ldr	r4, [pc, #52]	; (24007dfc <RCCEx_PLL2_Config+0xec>)
24007dc6:	6823      	ldr	r3, [r4, #0]
24007dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24007dcc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007dce:	f7fc fc77 	bl	240046c0 <HAL_GetTick>
24007dd2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24007dd4:	e004      	b.n	24007de0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007dd6:	f7fc fc73 	bl	240046c0 <HAL_GetTick>
24007dda:	1b40      	subs	r0, r0, r5
24007ddc:	2802      	cmp	r0, #2
24007dde:	d804      	bhi.n	24007dea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24007de0:	6823      	ldr	r3, [r4, #0]
24007de2:	011b      	lsls	r3, r3, #4
24007de4:	d5f7      	bpl.n	24007dd6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
24007de6:	2000      	movs	r0, #0
}
24007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24007dea:	2003      	movs	r0, #3
}
24007dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24007dee:	2001      	movs	r0, #1
}
24007df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24007df6:	62e3      	str	r3, [r4, #44]	; 0x2c
24007df8:	e7e4      	b.n	24007dc4 <RCCEx_PLL2_Config+0xb4>
24007dfa:	bf00      	nop
24007dfc:	58024400 	.word	0x58024400
24007e00:	ffff0007 	.word	0xffff0007

24007e04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007e06:	4c3a      	ldr	r4, [pc, #232]	; (24007ef0 <RCCEx_PLL3_Config+0xec>)
24007e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007e0a:	f003 0303 	and.w	r3, r3, #3
24007e0e:	2b03      	cmp	r3, #3
24007e10:	d067      	beq.n	24007ee2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24007e12:	6823      	ldr	r3, [r4, #0]
24007e14:	4606      	mov	r6, r0
24007e16:	460f      	mov	r7, r1
24007e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24007e1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007e1e:	f7fc fc4f 	bl	240046c0 <HAL_GetTick>
24007e22:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24007e24:	e004      	b.n	24007e30 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007e26:	f7fc fc4b 	bl	240046c0 <HAL_GetTick>
24007e2a:	1b43      	subs	r3, r0, r5
24007e2c:	2b02      	cmp	r3, #2
24007e2e:	d856      	bhi.n	24007ede <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24007e30:	6823      	ldr	r3, [r4, #0]
24007e32:	009a      	lsls	r2, r3, #2
24007e34:	d4f7      	bmi.n	24007e26 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24007e36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007e38:	6832      	ldr	r2, [r6, #0]
24007e3a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24007e3e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24007e42:	62a3      	str	r3, [r4, #40]	; 0x28
24007e44:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24007e48:	3b01      	subs	r3, #1
24007e4a:	3a01      	subs	r2, #1
24007e4c:	025b      	lsls	r3, r3, #9
24007e4e:	0412      	lsls	r2, r2, #16
24007e50:	b29b      	uxth	r3, r3
24007e52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007e56:	4313      	orrs	r3, r2
24007e58:	6872      	ldr	r2, [r6, #4]
24007e5a:	3a01      	subs	r2, #1
24007e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007e60:	4313      	orrs	r3, r2
24007e62:	6932      	ldr	r2, [r6, #16]
24007e64:	3a01      	subs	r2, #1
24007e66:	0612      	lsls	r2, r2, #24
24007e68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007e6c:	4313      	orrs	r3, r2
24007e6e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24007e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007e72:	6972      	ldr	r2, [r6, #20]
24007e74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
24007e78:	4313      	orrs	r3, r2
24007e7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007e7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007e7e:	69b3      	ldr	r3, [r6, #24]
24007e80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
24007e84:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007e86:	4b1b      	ldr	r3, [pc, #108]	; (24007ef4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007e88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
24007e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007e90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007e92:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007e94:	69f2      	ldr	r2, [r6, #28]
24007e96:	400b      	ands	r3, r1
24007e98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24007e9c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24007e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007ea4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24007ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007ea8:	b1ef      	cbz	r7, 24007ee6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24007eaa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24007eac:	bf0c      	ite	eq
24007eae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24007eb2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
24007eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24007eb8:	4c0d      	ldr	r4, [pc, #52]	; (24007ef0 <RCCEx_PLL3_Config+0xec>)
24007eba:	6823      	ldr	r3, [r4, #0]
24007ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24007ec0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007ec2:	f7fc fbfd 	bl	240046c0 <HAL_GetTick>
24007ec6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007ec8:	e004      	b.n	24007ed4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007eca:	f7fc fbf9 	bl	240046c0 <HAL_GetTick>
24007ece:	1b40      	subs	r0, r0, r5
24007ed0:	2802      	cmp	r0, #2
24007ed2:	d804      	bhi.n	24007ede <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007ed4:	6823      	ldr	r3, [r4, #0]
24007ed6:	009b      	lsls	r3, r3, #2
24007ed8:	d5f7      	bpl.n	24007eca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24007eda:	2000      	movs	r0, #0
}
24007edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24007ede:	2003      	movs	r0, #3
}
24007ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24007ee2:	2001      	movs	r0, #1
}
24007ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24007ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24007eea:	62e3      	str	r3, [r4, #44]	; 0x2c
24007eec:	e7e4      	b.n	24007eb8 <RCCEx_PLL3_Config+0xb4>
24007eee:	bf00      	nop
24007ef0:	58024400 	.word	0x58024400
24007ef4:	ffff0007 	.word	0xffff0007

24007ef8 <HAL_RCCEx_PeriphCLKConfig>:
{
24007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24007efc:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24007f00:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24007f02:	011d      	lsls	r5, r3, #4
24007f04:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24007f08:	d521      	bpl.n	24007f4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
24007f0a:	6e81      	ldr	r1, [r0, #104]	; 0x68
24007f0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24007f10:	f000 8572 	beq.w	240089f8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
24007f14:	d80e      	bhi.n	24007f34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
24007f16:	2900      	cmp	r1, #0
24007f18:	f000 85cd 	beq.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
24007f1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24007f20:	f040 85c6 	bne.w	24008ab0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007f24:	2102      	movs	r1, #2
24007f26:	3008      	adds	r0, #8
24007f28:	f7ff fef2 	bl	24007d10 <RCCEx_PLL2_Config>
24007f2c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24007f2e:	b966      	cbnz	r6, 24007f4a <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24007f30:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24007f32:	e003      	b.n	24007f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
24007f34:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24007f38:	f040 85ba 	bne.w	24008ab0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24007f3c:	4aa3      	ldr	r2, [pc, #652]	; (240081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24007f3e:	2600      	movs	r6, #0
24007f40:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007f42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24007f46:	4319      	orrs	r1, r3
24007f48:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24007f4a:	e9d4 3200 	ldrd	r3, r2, [r4]
24007f4e:	05d8      	lsls	r0, r3, #23
24007f50:	d50a      	bpl.n	24007f68 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
24007f52:	6da1      	ldr	r1, [r4, #88]	; 0x58
24007f54:	2904      	cmp	r1, #4
24007f56:	d806      	bhi.n	24007f66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
24007f58:	e8df f011 	tbh	[pc, r1, lsl #1]
24007f5c:	055f0558 	.word	0x055f0558
24007f60:	030e0576 	.word	0x030e0576
24007f64:	030e      	.short	0x030e
24007f66:	2601      	movs	r6, #1
24007f68:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24007f6a:	0599      	lsls	r1, r3, #22
24007f6c:	d517      	bpl.n	24007f9e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
24007f6e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24007f70:	2980      	cmp	r1, #128	; 0x80
24007f72:	f000 8570 	beq.w	24008a56 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
24007f76:	f200 80e1 	bhi.w	2400813c <HAL_RCCEx_PeriphCLKConfig+0x244>
24007f7a:	2900      	cmp	r1, #0
24007f7c:	f000 8442 	beq.w	24008804 <HAL_RCCEx_PeriphCLKConfig+0x90c>
24007f80:	2940      	cmp	r1, #64	; 0x40
24007f82:	f040 80e2 	bne.w	2400814a <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007f86:	2100      	movs	r1, #0
24007f88:	f104 0008 	add.w	r0, r4, #8
24007f8c:	f7ff fec0 	bl	24007d10 <RCCEx_PLL2_Config>
24007f90:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007f92:	2d00      	cmp	r5, #0
24007f94:	f000 83f4 	beq.w	24008780 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24007f98:	462e      	mov	r6, r5
24007f9a:	e9d4 3200 	ldrd	r3, r2, [r4]
24007f9e:	055f      	lsls	r7, r3, #21
24007fa0:	d51a      	bpl.n	24007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
24007fa2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24007fa6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24007faa:	f000 851d 	beq.w	240089e8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
24007fae:	f200 80cf 	bhi.w	24008150 <HAL_RCCEx_PeriphCLKConfig+0x258>
24007fb2:	2900      	cmp	r1, #0
24007fb4:	f000 842d 	beq.w	24008812 <HAL_RCCEx_PeriphCLKConfig+0x91a>
24007fb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24007fbc:	f040 80d0 	bne.w	24008160 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007fc0:	2100      	movs	r1, #0
24007fc2:	f104 0008 	add.w	r0, r4, #8
24007fc6:	f7ff fea3 	bl	24007d10 <RCCEx_PLL2_Config>
24007fca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007fcc:	2d00      	cmp	r5, #0
24007fce:	f000 83f6 	beq.w	240087be <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24007fd2:	462e      	mov	r6, r5
24007fd4:	e9d4 3200 	ldrd	r3, r2, [r4]
24007fd8:	0518      	lsls	r0, r3, #20
24007fda:	d51a      	bpl.n	24008012 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
24007fdc:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24007fe0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24007fe4:	f000 8528 	beq.w	24008a38 <HAL_RCCEx_PeriphCLKConfig+0xb40>
24007fe8:	f200 80bd 	bhi.w	24008166 <HAL_RCCEx_PeriphCLKConfig+0x26e>
24007fec:	2900      	cmp	r1, #0
24007fee:	f000 8403 	beq.w	240087f8 <HAL_RCCEx_PeriphCLKConfig+0x900>
24007ff2:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24007ff6:	f040 80be 	bne.w	24008176 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007ffa:	2100      	movs	r1, #0
24007ffc:	f104 0008 	add.w	r0, r4, #8
24008000:	f7ff fe86 	bl	24007d10 <RCCEx_PLL2_Config>
24008004:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008006:	2d00      	cmp	r5, #0
24008008:	f000 83af 	beq.w	2400876a <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400800c:	462e      	mov	r6, r5
2400800e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008012:	0199      	lsls	r1, r3, #6
24008014:	d51a      	bpl.n	2400804c <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
24008016:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008018:	2920      	cmp	r1, #32
2400801a:	f000 84b0 	beq.w	2400897e <HAL_RCCEx_PeriphCLKConfig+0xa86>
2400801e:	f200 80ad 	bhi.w	2400817c <HAL_RCCEx_PeriphCLKConfig+0x284>
24008022:	b139      	cbz	r1, 24008034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008024:	2910      	cmp	r1, #16
24008026:	f040 80ac 	bne.w	24008182 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400802a:	4a68      	ldr	r2, [pc, #416]	; (240081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400802c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400802e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008032:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008034:	2d00      	cmp	r5, #0
24008036:	f040 8414 	bne.w	24008862 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
2400803a:	4a64      	ldr	r2, [pc, #400]	; (240081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400803c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400803e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008040:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24008044:	430b      	orrs	r3, r1
24008046:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008048:	e9d4 3200 	ldrd	r3, r2, [r4]
2400804c:	04df      	lsls	r7, r3, #19
2400804e:	d519      	bpl.n	24008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
24008050:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008052:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008056:	f000 84e7 	beq.w	24008a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
2400805a:	f200 8095 	bhi.w	24008188 <HAL_RCCEx_PeriphCLKConfig+0x290>
2400805e:	2900      	cmp	r1, #0
24008060:	f000 83c4 	beq.w	240087ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
24008064:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24008068:	f040 8096 	bne.w	24008198 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400806c:	2100      	movs	r1, #0
2400806e:	f104 0008 	add.w	r0, r4, #8
24008072:	f7ff fe4d 	bl	24007d10 <RCCEx_PLL2_Config>
24008076:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008078:	2d00      	cmp	r5, #0
2400807a:	f000 838b 	beq.w	24008794 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400807e:	462e      	mov	r6, r5
24008080:	e9d4 3200 	ldrd	r3, r2, [r4]
24008084:	0498      	lsls	r0, r3, #18
24008086:	d51d      	bpl.n	240080c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
24008088:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400808a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
2400808e:	f000 8462 	beq.w	24008956 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
24008092:	f200 8084 	bhi.w	2400819e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
24008096:	b149      	cbz	r1, 240080ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008098:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400809c:	f040 8088 	bne.w	240081b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240080a0:	2101      	movs	r1, #1
240080a2:	f104 0008 	add.w	r0, r4, #8
240080a6:	f7ff fe33 	bl	24007d10 <RCCEx_PLL2_Config>
240080aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240080ac:	2d00      	cmp	r5, #0
240080ae:	f040 83e7 	bne.w	24008880 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
240080b2:	4a46      	ldr	r2, [pc, #280]	; (240081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240080b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
240080b6:	6d13      	ldr	r3, [r2, #80]	; 0x50
240080b8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
240080bc:	430b      	orrs	r3, r1
240080be:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240080c0:	e9d4 3200 	ldrd	r3, r2, [r4]
240080c4:	0459      	lsls	r1, r3, #17
240080c6:	d51d      	bpl.n	24008104 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
240080c8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
240080cc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240080d0:	f000 844b 	beq.w	2400896a <HAL_RCCEx_PeriphCLKConfig+0xa72>
240080d4:	d86f      	bhi.n	240081b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
240080d6:	b141      	cbz	r1, 240080ea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
240080d8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
240080dc:	d173      	bne.n	240081c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240080de:	2101      	movs	r1, #1
240080e0:	f104 0008 	add.w	r0, r4, #8
240080e4:	f7ff fe14 	bl	24007d10 <RCCEx_PLL2_Config>
240080e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240080ea:	2d00      	cmp	r5, #0
240080ec:	f040 83d0 	bne.w	24008890 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
240080f0:	4a36      	ldr	r2, [pc, #216]	; (240081cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240080f2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
240080f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240080f8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
240080fc:	430b      	orrs	r3, r1
240080fe:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008100:	e9d4 3200 	ldrd	r3, r2, [r4]
24008104:	041f      	lsls	r7, r3, #16
24008106:	d50d      	bpl.n	24008124 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
24008108:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400810a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400810e:	f000 8419 	beq.w	24008944 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
24008112:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008116:	f000 8237 	beq.w	24008588 <HAL_RCCEx_PeriphCLKConfig+0x690>
2400811a:	2900      	cmp	r1, #0
2400811c:	f000 823a 	beq.w	24008594 <HAL_RCCEx_PeriphCLKConfig+0x69c>
24008120:	2601      	movs	r6, #1
24008122:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008124:	01d8      	lsls	r0, r3, #7
24008126:	d55f      	bpl.n	240081e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
24008128:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400812a:	2903      	cmp	r1, #3
2400812c:	f200 84ee 	bhi.w	24008b0c <HAL_RCCEx_PeriphCLKConfig+0xc14>
24008130:	e8df f011 	tbh	[pc, r1, lsl #1]
24008134:	04390054 	.word	0x04390054
24008138:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
2400813c:	29c0      	cmp	r1, #192	; 0xc0
2400813e:	f43f af28 	beq.w	24007f92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
24008142:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008146:	f43f af24 	beq.w	24007f92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
2400814a:	2601      	movs	r6, #1
2400814c:	4635      	mov	r5, r6
2400814e:	e726      	b.n	24007f9e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
24008150:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24008154:	f43f af3a 	beq.w	24007fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
24008158:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
2400815c:	f43f af36 	beq.w	24007fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
24008160:	2601      	movs	r6, #1
24008162:	4635      	mov	r5, r6
24008164:	e738      	b.n	24007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
24008166:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
2400816a:	f43f af4c 	beq.w	24008006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
2400816e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
24008172:	f43f af48 	beq.w	24008006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
24008176:	2601      	movs	r6, #1
24008178:	4635      	mov	r5, r6
2400817a:	e74a      	b.n	24008012 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
2400817c:	2930      	cmp	r1, #48	; 0x30
2400817e:	f43f af59 	beq.w	24008034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008182:	2601      	movs	r6, #1
24008184:	4635      	mov	r5, r6
24008186:	e761      	b.n	2400804c <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
24008188:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
2400818c:	f43f af74 	beq.w	24008078 <HAL_RCCEx_PeriphCLKConfig+0x180>
24008190:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008194:	f43f af70 	beq.w	24008078 <HAL_RCCEx_PeriphCLKConfig+0x180>
24008198:	2601      	movs	r6, #1
2400819a:	4635      	mov	r5, r6
2400819c:	e772      	b.n	24008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
2400819e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
240081a2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
240081a6:	d081      	beq.n	240080ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
240081a8:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
240081ac:	f43f af7e 	beq.w	240080ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
240081b0:	2601      	movs	r6, #1
240081b2:	4635      	mov	r5, r6
240081b4:	e786      	b.n	240080c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
240081b6:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
240081ba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
240081be:	d094      	beq.n	240080ea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
240081c0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
240081c4:	d091      	beq.n	240080ea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
240081c6:	2601      	movs	r6, #1
240081c8:	4635      	mov	r5, r6
240081ca:	e79b      	b.n	24008104 <HAL_RCCEx_PeriphCLKConfig+0x20c>
240081cc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240081d0:	2102      	movs	r1, #2
240081d2:	f104 0008 	add.w	r0, r4, #8
240081d6:	f7ff fd9b 	bl	24007d10 <RCCEx_PLL2_Config>
240081da:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240081dc:	2d00      	cmp	r5, #0
240081de:	f000 8345 	beq.w	2400886c <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240081e2:	462e      	mov	r6, r5
240081e4:	e9d4 3200 	ldrd	r3, r2, [r4]
240081e8:	0259      	lsls	r1, r3, #9
240081ea:	f100 826c 	bmi.w	240086c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240081ee:	07d8      	lsls	r0, r3, #31
240081f0:	d52f      	bpl.n	24008252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
240081f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
240081f4:	2928      	cmp	r1, #40	; 0x28
240081f6:	d82a      	bhi.n	2400824e <HAL_RCCEx_PeriphCLKConfig+0x356>
240081f8:	e8df f011 	tbh	[pc, r1, lsl #1]
240081fc:	0029020a 	.word	0x0029020a
24008200:	00290029 	.word	0x00290029
24008204:	00290029 	.word	0x00290029
24008208:	00290029 	.word	0x00290029
2400820c:	0029044a 	.word	0x0029044a
24008210:	00290029 	.word	0x00290029
24008214:	00290029 	.word	0x00290029
24008218:	00290029 	.word	0x00290029
2400821c:	00290204 	.word	0x00290204
24008220:	00290029 	.word	0x00290029
24008224:	00290029 	.word	0x00290029
24008228:	00290029 	.word	0x00290029
2400822c:	0029020a 	.word	0x0029020a
24008230:	00290029 	.word	0x00290029
24008234:	00290029 	.word	0x00290029
24008238:	00290029 	.word	0x00290029
2400823c:	0029020a 	.word	0x0029020a
24008240:	00290029 	.word	0x00290029
24008244:	00290029 	.word	0x00290029
24008248:	00290029 	.word	0x00290029
2400824c:	020a      	.short	0x020a
2400824e:	2601      	movs	r6, #1
24008250:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008252:	0799      	lsls	r1, r3, #30
24008254:	d517      	bpl.n	24008286 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008256:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008258:	2905      	cmp	r1, #5
2400825a:	f200 845f 	bhi.w	24008b1c <HAL_RCCEx_PeriphCLKConfig+0xc24>
2400825e:	e8df f011 	tbh	[pc, r1, lsl #1]
24008262:	000c      	.short	0x000c
24008264:	0006040c 	.word	0x0006040c
24008268:	000c000c 	.word	0x000c000c
2400826c:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400826e:	2101      	movs	r1, #1
24008270:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008274:	f7ff fdc6 	bl	24007e04 <RCCEx_PLL3_Config>
24008278:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400827a:	2d00      	cmp	r5, #0
2400827c:	f000 82d8 	beq.w	24008830 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008280:	462e      	mov	r6, r5
24008282:	e9d4 3200 	ldrd	r3, r2, [r4]
24008286:	075f      	lsls	r7, r3, #29
24008288:	d518      	bpl.n	240082bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400828a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
2400828e:	2905      	cmp	r1, #5
24008290:	f200 8440 	bhi.w	24008b14 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
24008294:	e8df f011 	tbh	[pc, r1, lsl #1]
24008298:	03e7000c 	.word	0x03e7000c
2400829c:	000c0006 	.word	0x000c0006
240082a0:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240082a4:	2101      	movs	r1, #1
240082a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240082aa:	f7ff fdab 	bl	24007e04 <RCCEx_PLL3_Config>
240082ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240082b0:	2d00      	cmp	r5, #0
240082b2:	f000 82c7 	beq.w	24008844 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240082b6:	462e      	mov	r6, r5
240082b8:	e9d4 3200 	ldrd	r3, r2, [r4]
240082bc:	0698      	lsls	r0, r3, #26
240082be:	d51f      	bpl.n	24008300 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
240082c0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
240082c4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240082c8:	f000 8363 	beq.w	24008992 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
240082cc:	f200 811c 	bhi.w	24008508 <HAL_RCCEx_PeriphCLKConfig+0x610>
240082d0:	b149      	cbz	r1, 240082e6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
240082d2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
240082d6:	f040 8121 	bne.w	2400851c <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240082da:	2100      	movs	r1, #0
240082dc:	f104 0008 	add.w	r0, r4, #8
240082e0:	f7ff fd16 	bl	24007d10 <RCCEx_PLL2_Config>
240082e4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240082e6:	2d00      	cmp	r5, #0
240082e8:	f040 82b7 	bne.w	2400885a <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
240082ec:	4ab0      	ldr	r2, [pc, #704]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240082ee:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
240082f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
240082f4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
240082f8:	430b      	orrs	r3, r1
240082fa:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
240082fc:	e9d4 3200 	ldrd	r3, r2, [r4]
24008300:	0659      	lsls	r1, r3, #25
24008302:	d51f      	bpl.n	24008344 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008304:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008308:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
2400830c:	f000 8306 	beq.w	2400891c <HAL_RCCEx_PeriphCLKConfig+0xa24>
24008310:	f200 8107 	bhi.w	24008522 <HAL_RCCEx_PeriphCLKConfig+0x62a>
24008314:	b149      	cbz	r1, 2400832a <HAL_RCCEx_PeriphCLKConfig+0x432>
24008316:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
2400831a:	f040 810c 	bne.w	24008536 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400831e:	2100      	movs	r1, #0
24008320:	f104 0008 	add.w	r0, r4, #8
24008324:	f7ff fcf4 	bl	24007d10 <RCCEx_PLL2_Config>
24008328:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400832a:	2d00      	cmp	r5, #0
2400832c:	f040 82b4 	bne.w	24008898 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24008330:	4a9f      	ldr	r2, [pc, #636]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008332:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008336:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008338:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
2400833c:	430b      	orrs	r3, r1
2400833e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008340:	e9d4 3200 	ldrd	r3, r2, [r4]
24008344:	061f      	lsls	r7, r3, #24
24008346:	d51f      	bpl.n	24008388 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008348:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
2400834c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008350:	f000 82ee 	beq.w	24008930 <HAL_RCCEx_PeriphCLKConfig+0xa38>
24008354:	f200 80f2 	bhi.w	2400853c <HAL_RCCEx_PeriphCLKConfig+0x644>
24008358:	b149      	cbz	r1, 2400836e <HAL_RCCEx_PeriphCLKConfig+0x476>
2400835a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
2400835e:	f040 80f7 	bne.w	24008550 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008362:	2100      	movs	r1, #0
24008364:	f104 0008 	add.w	r0, r4, #8
24008368:	f7ff fcd2 	bl	24007d10 <RCCEx_PLL2_Config>
2400836c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400836e:	2d00      	cmp	r5, #0
24008370:	f040 828a 	bne.w	24008888 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24008374:	4a8e      	ldr	r2, [pc, #568]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008376:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
2400837a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400837c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24008380:	430b      	orrs	r3, r1
24008382:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008384:	e9d4 3200 	ldrd	r3, r2, [r4]
24008388:	0718      	lsls	r0, r3, #28
2400838a:	d50d      	bpl.n	240083a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2400838c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24008390:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
24008394:	f000 8310 	beq.w	240089b8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008398:	4985      	ldr	r1, [pc, #532]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400839a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
2400839c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
240083a0:	4313      	orrs	r3, r2
240083a2:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
240083a4:	e9d4 3200 	ldrd	r3, r2, [r4]
240083a8:	06d9      	lsls	r1, r3, #27
240083aa:	d50d      	bpl.n	240083c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
240083ac:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
240083b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240083b4:	f000 830c 	beq.w	240089d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240083b8:	497d      	ldr	r1, [pc, #500]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240083ba:	6d8b      	ldr	r3, [r1, #88]	; 0x58
240083bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
240083c0:	4313      	orrs	r3, r2
240083c2:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240083c4:	e9d4 3200 	ldrd	r3, r2, [r4]
240083c8:	031f      	lsls	r7, r3, #12
240083ca:	d50e      	bpl.n	240083ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
240083cc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
240083d0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
240083d4:	f000 8102 	beq.w	240085dc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
240083d8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
240083dc:	f000 8104 	beq.w	240085e8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
240083e0:	2900      	cmp	r1, #0
240083e2:	f000 8290 	beq.w	24008906 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
240083e6:	2601      	movs	r6, #1
240083e8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240083ea:	0358      	lsls	r0, r3, #13
240083ec:	d50f      	bpl.n	2400840e <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
240083ee:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
240083f2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240083f6:	f000 80dd 	beq.w	240085b4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
240083fa:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
240083fe:	f000 80df 	beq.w	240085c0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
24008402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008406:	f000 8275 	beq.w	240088f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
2400840a:	2601      	movs	r6, #1
2400840c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400840e:	03d9      	lsls	r1, r3, #15
24008410:	d509      	bpl.n	24008426 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
24008412:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008414:	2900      	cmp	r1, #0
24008416:	f000 8258 	beq.w	240088ca <HAL_RCCEx_PeriphCLKConfig+0x9d2>
2400841a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400841e:	f000 81d9 	beq.w	240087d4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
24008422:	2601      	movs	r6, #1
24008424:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008426:	009f      	lsls	r7, r3, #2
24008428:	f100 80ff 	bmi.w	2400862a <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400842c:	0398      	lsls	r0, r3, #14
2400842e:	d50e      	bpl.n	2400844e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
24008430:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008434:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008438:	f000 823e 	beq.w	240088b8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
2400843c:	f240 808b 	bls.w	24008556 <HAL_RCCEx_PeriphCLKConfig+0x65e>
24008440:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24008444:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
24008448:	f000 8088 	beq.w	2400855c <HAL_RCCEx_PeriphCLKConfig+0x664>
2400844c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400844e:	02d9      	lsls	r1, r3, #11
24008450:	d508      	bpl.n	24008464 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24008452:	4a57      	ldr	r2, [pc, #348]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008454:	6f61      	ldr	r1, [r4, #116]	; 0x74
24008456:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400845c:	430b      	orrs	r3, r1
2400845e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24008460:	e9d4 3200 	ldrd	r3, r2, [r4]
24008464:	00df      	lsls	r7, r3, #3
24008466:	d509      	bpl.n	2400847c <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24008468:	4a51      	ldr	r2, [pc, #324]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400846a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
2400846e:	6913      	ldr	r3, [r2, #16]
24008470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24008474:	430b      	orrs	r3, r1
24008476:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24008478:	e9d4 3200 	ldrd	r3, r2, [r4]
2400847c:	029d      	lsls	r5, r3, #10
2400847e:	d508      	bpl.n	24008492 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24008480:	4a4b      	ldr	r2, [pc, #300]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008482:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24008484:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400848a:	430b      	orrs	r3, r1
2400848c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2400848e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008492:	0058      	lsls	r0, r3, #1
24008494:	d50b      	bpl.n	240084ae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24008496:	4b46      	ldr	r3, [pc, #280]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008498:	691a      	ldr	r2, [r3, #16]
2400849a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400849e:	611a      	str	r2, [r3, #16]
240084a0:	691a      	ldr	r2, [r3, #16]
240084a2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
240084a6:	430a      	orrs	r2, r1
240084a8:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
240084aa:	e9d4 3200 	ldrd	r3, r2, [r4]
240084ae:	2b00      	cmp	r3, #0
240084b0:	da08      	bge.n	240084c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
240084b2:	4a3f      	ldr	r2, [pc, #252]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240084b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
240084b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240084b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
240084bc:	430b      	orrs	r3, r1
240084be:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
240084c0:	e9d4 3200 	ldrd	r3, r2, [r4]
240084c4:	0219      	lsls	r1, r3, #8
240084c6:	d508      	bpl.n	240084da <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
240084c8:	4a39      	ldr	r2, [pc, #228]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240084ca:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
240084ce:	6d53      	ldr	r3, [r2, #84]	; 0x54
240084d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
240084d4:	430b      	orrs	r3, r1
240084d6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
240084d8:	6862      	ldr	r2, [r4, #4]
240084da:	07d3      	lsls	r3, r2, #31
240084dc:	f100 80b1 	bmi.w	24008642 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240084e0:	0797      	lsls	r7, r2, #30
240084e2:	f100 80bb 	bmi.w	2400865c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240084e6:	0755      	lsls	r5, r2, #29
240084e8:	f100 80c5 	bmi.w	24008676 <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240084ec:	0710      	lsls	r0, r2, #28
240084ee:	f100 80cf 	bmi.w	24008690 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240084f2:	06d1      	lsls	r1, r2, #27
240084f4:	f100 80d9 	bmi.w	240086aa <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240084f8:	0692      	lsls	r2, r2, #26
240084fa:	f100 812a 	bmi.w	24008752 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
240084fe:	1e30      	subs	r0, r6, #0
24008500:	bf18      	it	ne
24008502:	2001      	movne	r0, #1
}
24008504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24008508:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
2400850c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008510:	f43f aee9 	beq.w	240082e6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
24008514:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008518:	f43f aee5 	beq.w	240082e6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
2400851c:	2601      	movs	r6, #1
2400851e:	4635      	mov	r5, r6
24008520:	e6ee      	b.n	24008300 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008522:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24008526:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400852a:	f43f aefe 	beq.w	2400832a <HAL_RCCEx_PeriphCLKConfig+0x432>
2400852e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24008532:	f43f aefa 	beq.w	2400832a <HAL_RCCEx_PeriphCLKConfig+0x432>
24008536:	2601      	movs	r6, #1
24008538:	4635      	mov	r5, r6
2400853a:	e703      	b.n	24008344 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
2400853c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24008540:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24008544:	f43f af13 	beq.w	2400836e <HAL_RCCEx_PeriphCLKConfig+0x476>
24008548:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
2400854c:	f43f af0f 	beq.w	2400836e <HAL_RCCEx_PeriphCLKConfig+0x476>
24008550:	2601      	movs	r6, #1
24008552:	4635      	mov	r5, r6
24008554:	e718      	b.n	24008388 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
24008556:	2900      	cmp	r1, #0
24008558:	f47f af78 	bne.w	2400844c <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
2400855c:	2d00      	cmp	r5, #0
2400855e:	f040 81c5 	bne.w	240088ec <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24008562:	4a13      	ldr	r2, [pc, #76]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008564:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008568:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400856a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400856e:	430b      	orrs	r3, r1
24008570:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008572:	e9d4 3200 	ldrd	r3, r2, [r4]
24008576:	e76a      	b.n	2400844e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
24008578:	4635      	mov	r5, r6
    if (ret == HAL_OK)
2400857a:	2d00      	cmp	r5, #0
2400857c:	f000 8114 	beq.w	240087a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008580:	462e      	mov	r6, r5
24008582:	e9d4 3200 	ldrd	r3, r2, [r4]
24008586:	e4f0      	b.n	24007f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008588:	2101      	movs	r1, #1
2400858a:	f104 0008 	add.w	r0, r4, #8
2400858e:	f7ff fbbf 	bl	24007d10 <RCCEx_PLL2_Config>
24008592:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008594:	2d00      	cmp	r5, #0
24008596:	f040 8147 	bne.w	24008828 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2400859a:	4a05      	ldr	r2, [pc, #20]	; (240085b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400859c:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400859e:	6d13      	ldr	r3, [r2, #80]	; 0x50
240085a0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
240085a4:	430b      	orrs	r3, r1
240085a6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240085a8:	e9d4 3200 	ldrd	r3, r2, [r4]
240085ac:	e5ba      	b.n	24008124 <HAL_RCCEx_PeriphCLKConfig+0x22c>
240085ae:	bf00      	nop
240085b0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240085b4:	2101      	movs	r1, #1
240085b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240085ba:	f7ff fc23 	bl	24007e04 <RCCEx_PLL3_Config>
240085be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240085c0:	2d00      	cmp	r5, #0
240085c2:	f040 8171 	bne.w	240088a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
240085c6:	4aba      	ldr	r2, [pc, #744]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240085c8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
240085cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
240085ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
240085d2:	430b      	orrs	r3, r1
240085d4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
240085d6:	e9d4 3200 	ldrd	r3, r2, [r4]
240085da:	e718      	b.n	2400840e <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240085dc:	2102      	movs	r1, #2
240085de:	f104 0028 	add.w	r0, r4, #40	; 0x28
240085e2:	f7ff fc0f 	bl	24007e04 <RCCEx_PLL3_Config>
240085e6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240085e8:	2d00      	cmp	r5, #0
240085ea:	f040 8159 	bne.w	240088a0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
240085ee:	4ab0      	ldr	r2, [pc, #704]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240085f0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
240085f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
240085f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
240085fa:	430b      	orrs	r3, r1
240085fc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240085fe:	e9d4 3200 	ldrd	r3, r2, [r4]
24008602:	e6f2      	b.n	240083ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008604:	2101      	movs	r1, #1
24008606:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400860a:	f7ff fbfb 	bl	24007e04 <RCCEx_PLL3_Config>
2400860e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008610:	2d00      	cmp	r5, #0
24008612:	f040 8105 	bne.w	24008820 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24008616:	4aa6      	ldr	r2, [pc, #664]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008618:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400861a:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400861c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
24008620:	430b      	orrs	r3, r1
24008622:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008624:	e9d4 3200 	ldrd	r3, r2, [r4]
24008628:	e613      	b.n	24008252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400862a:	2102      	movs	r1, #2
2400862c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008630:	f7ff fbe8 	bl	24007e04 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008634:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008638:	2800      	cmp	r0, #0
2400863a:	f43f aef7 	beq.w	2400842c <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
2400863e:	2601      	movs	r6, #1
24008640:	e6f4      	b.n	2400842c <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008642:	2100      	movs	r1, #0
24008644:	f104 0008 	add.w	r0, r4, #8
24008648:	f7ff fb62 	bl	24007d10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400864c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400864e:	2800      	cmp	r0, #0
24008650:	f43f af46 	beq.w	240084e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008654:	0797      	lsls	r7, r2, #30
24008656:	4606      	mov	r6, r0
24008658:	f57f af45 	bpl.w	240084e6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400865c:	2101      	movs	r1, #1
2400865e:	f104 0008 	add.w	r0, r4, #8
24008662:	f7ff fb55 	bl	24007d10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008666:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008668:	2800      	cmp	r0, #0
2400866a:	f43f af3c 	beq.w	240084e6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400866e:	0755      	lsls	r5, r2, #29
24008670:	4606      	mov	r6, r0
24008672:	f57f af3b 	bpl.w	240084ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008676:	2102      	movs	r1, #2
24008678:	f104 0008 	add.w	r0, r4, #8
2400867c:	f7ff fb48 	bl	24007d10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008680:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008682:	2800      	cmp	r0, #0
24008684:	f43f af32 	beq.w	240084ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008688:	4606      	mov	r6, r0
2400868a:	0710      	lsls	r0, r2, #28
2400868c:	f57f af31 	bpl.w	240084f2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008690:	2100      	movs	r1, #0
24008692:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008696:	f7ff fbb5 	bl	24007e04 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400869a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400869c:	2800      	cmp	r0, #0
2400869e:	f43f af28 	beq.w	240084f2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240086a2:	06d1      	lsls	r1, r2, #27
240086a4:	4606      	mov	r6, r0
240086a6:	f57f af27 	bpl.w	240084f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240086aa:	f104 0528 	add.w	r5, r4, #40	; 0x28
240086ae:	2101      	movs	r1, #1
240086b0:	4628      	mov	r0, r5
240086b2:	f7ff fba7 	bl	24007e04 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
240086b6:	2800      	cmp	r0, #0
240086b8:	f000 812e 	beq.w	24008918 <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240086bc:	6863      	ldr	r3, [r4, #4]
240086be:	069b      	lsls	r3, r3, #26
240086c0:	d550      	bpl.n	24008764 <HAL_RCCEx_PeriphCLKConfig+0x86c>
240086c2:	4606      	mov	r6, r0
240086c4:	e047      	b.n	24008756 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
240086c6:	4f7b      	ldr	r7, [pc, #492]	; (240088b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
240086c8:	683b      	ldr	r3, [r7, #0]
240086ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240086ce:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
240086d0:	f7fb fff6 	bl	240046c0 <HAL_GetTick>
240086d4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240086d6:	e006      	b.n	240086e6 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240086d8:	f7fb fff2 	bl	240046c0 <HAL_GetTick>
240086dc:	eba0 0008 	sub.w	r0, r0, r8
240086e0:	2864      	cmp	r0, #100	; 0x64
240086e2:	f200 81df 	bhi.w	24008aa4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240086e6:	683b      	ldr	r3, [r7, #0]
240086e8:	05da      	lsls	r2, r3, #23
240086ea:	d5f5      	bpl.n	240086d8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
240086ec:	2d00      	cmp	r5, #0
240086ee:	f040 8208 	bne.w	24008b02 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
240086f2:	4b6f      	ldr	r3, [pc, #444]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240086f4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240086f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
240086fa:	4051      	eors	r1, r2
240086fc:	f411 7f40 	tst.w	r1, #768	; 0x300
24008700:	d00d      	beq.n	2400871e <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24008704:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008706:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
2400870a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
2400870e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24008710:	6f19      	ldr	r1, [r3, #112]	; 0x70
24008712:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24008716:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
24008718:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2400871a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400871e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008722:	f000 81d0 	beq.w	24008ac6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008726:	f402 7340 	and.w	r3, r2, #768	; 0x300
2400872a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2400872e:	f000 81de 	beq.w	24008aee <HAL_RCCEx_PeriphCLKConfig+0xbf6>
24008732:	4a5f      	ldr	r2, [pc, #380]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008734:	6913      	ldr	r3, [r2, #16]
24008736:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2400873a:	6113      	str	r3, [r2, #16]
2400873c:	4a5c      	ldr	r2, [pc, #368]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400873e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
24008742:	6f11      	ldr	r1, [r2, #112]	; 0x70
24008744:	f3c3 030b 	ubfx	r3, r3, #0, #12
24008748:	430b      	orrs	r3, r1
2400874a:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400874c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008750:	e54d      	b.n	240081ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008752:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008756:	2102      	movs	r1, #2
24008758:	4628      	mov	r0, r5
2400875a:	f7ff fb53 	bl	24007e04 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400875e:	2800      	cmp	r0, #0
24008760:	f43f aecd 	beq.w	240084fe <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
24008764:	2001      	movs	r0, #1
}
24008766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
2400876a:	4a51      	ldr	r2, [pc, #324]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400876c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008770:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
24008776:	430b      	orrs	r3, r1
24008778:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400877a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400877e:	e448      	b.n	24008012 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24008780:	4a4b      	ldr	r2, [pc, #300]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008782:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24008784:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008786:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
2400878a:	430b      	orrs	r3, r1
2400878c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400878e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008792:	e404      	b.n	24007f9e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24008794:	4a46      	ldr	r2, [pc, #280]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008796:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008798:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400879a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
2400879e:	430b      	orrs	r3, r1
240087a0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
240087a2:	e9d4 3200 	ldrd	r3, r2, [r4]
240087a6:	e46d      	b.n	24008084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
240087a8:	4a41      	ldr	r2, [pc, #260]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
240087ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
240087ae:	f023 0307 	bic.w	r3, r3, #7
240087b2:	430b      	orrs	r3, r1
240087b4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240087b6:	e9d4 3200 	ldrd	r3, r2, [r4]
240087ba:	f7ff bbd6 	b.w	24007f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
240087be:	4a3c      	ldr	r2, [pc, #240]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087c0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
240087c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
240087c6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
240087ca:	430b      	orrs	r3, r1
240087cc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
240087ce:	e9d4 3200 	ldrd	r3, r2, [r4]
240087d2:	e401      	b.n	24007fd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240087d4:	2102      	movs	r1, #2
240087d6:	f104 0008 	add.w	r0, r4, #8
240087da:	f7ff fa99 	bl	24007d10 <RCCEx_PLL2_Config>
240087de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240087e0:	2d00      	cmp	r5, #0
240087e2:	d079      	beq.n	240088d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240087e4:	462e      	mov	r6, r5
240087e6:	e9d4 3200 	ldrd	r3, r2, [r4]
240087ea:	e61c      	b.n	24008426 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240087ec:	4a30      	ldr	r2, [pc, #192]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240087f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240087f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240087f6:	e43f      	b.n	24008078 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240087f8:	4a2d      	ldr	r2, [pc, #180]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240087fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008800:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008802:	e400      	b.n	24008006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008804:	4a2a      	ldr	r2, [pc, #168]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008806:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400880c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400880e:	f7ff bbc0 	b.w	24007f92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008812:	4a27      	ldr	r2, [pc, #156]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008814:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400881a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400881c:	f7ff bbd6 	b.w	24007fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008820:	e9d4 3200 	ldrd	r3, r2, [r4]
24008824:	462e      	mov	r6, r5
24008826:	e514      	b.n	24008252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008828:	e9d4 3200 	ldrd	r3, r2, [r4]
2400882c:	462e      	mov	r6, r5
2400882e:	e479      	b.n	24008124 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24008830:	4a1f      	ldr	r2, [pc, #124]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008832:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008834:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008836:	f023 0307 	bic.w	r3, r3, #7
2400883a:	430b      	orrs	r3, r1
2400883c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2400883e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008842:	e520      	b.n	24008286 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24008844:	4a1a      	ldr	r2, [pc, #104]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008846:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
2400884a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400884c:	f023 0307 	bic.w	r3, r3, #7
24008850:	430b      	orrs	r3, r1
24008852:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008854:	e9d4 3200 	ldrd	r3, r2, [r4]
24008858:	e530      	b.n	240082bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400885a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400885e:	462e      	mov	r6, r5
24008860:	e54e      	b.n	24008300 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008862:	e9d4 3200 	ldrd	r3, r2, [r4]
24008866:	462e      	mov	r6, r5
24008868:	f7ff bbf0 	b.w	2400804c <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2400886c:	4a10      	ldr	r2, [pc, #64]	; (240088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400886e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24008870:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008872:	f023 0303 	bic.w	r3, r3, #3
24008876:	430b      	orrs	r3, r1
24008878:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2400887a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400887e:	e4b3      	b.n	240081e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008880:	e9d4 3200 	ldrd	r3, r2, [r4]
24008884:	462e      	mov	r6, r5
24008886:	e41d      	b.n	240080c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008888:	e9d4 3200 	ldrd	r3, r2, [r4]
2400888c:	462e      	mov	r6, r5
2400888e:	e57b      	b.n	24008388 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008890:	e9d4 3200 	ldrd	r3, r2, [r4]
24008894:	462e      	mov	r6, r5
24008896:	e435      	b.n	24008104 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008898:	e9d4 3200 	ldrd	r3, r2, [r4]
2400889c:	462e      	mov	r6, r5
2400889e:	e551      	b.n	24008344 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240088a0:	e9d4 3200 	ldrd	r3, r2, [r4]
240088a4:	462e      	mov	r6, r5
240088a6:	e5a0      	b.n	240083ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
240088a8:	e9d4 3200 	ldrd	r3, r2, [r4]
240088ac:	462e      	mov	r6, r5
240088ae:	e5ae      	b.n	2400840e <HAL_RCCEx_PeriphCLKConfig+0x516>
240088b0:	58024400 	.word	0x58024400
240088b4:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088b8:	4a9a      	ldr	r2, [pc, #616]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
240088ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240088c2:	2d00      	cmp	r5, #0
240088c4:	f43f ae4d 	beq.w	24008562 <HAL_RCCEx_PeriphCLKConfig+0x66a>
240088c8:	e010      	b.n	240088ec <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088ca:	4a96      	ldr	r2, [pc, #600]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
240088cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240088d4:	2d00      	cmp	r5, #0
240088d6:	d185      	bne.n	240087e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
240088d8:	4a92      	ldr	r2, [pc, #584]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
240088da:	6d21      	ldr	r1, [r4, #80]	; 0x50
240088dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240088de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240088e2:	430b      	orrs	r3, r1
240088e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240088e6:	e9d4 3200 	ldrd	r3, r2, [r4]
240088ea:	e59c      	b.n	24008426 <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240088ec:	e9d4 3200 	ldrd	r3, r2, [r4]
240088f0:	462e      	mov	r6, r5
240088f2:	e5ac      	b.n	2400844e <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088f4:	4a8b      	ldr	r2, [pc, #556]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
240088f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240088fe:	2d00      	cmp	r5, #0
24008900:	f43f ae61 	beq.w	240085c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
24008904:	e7d0      	b.n	240088a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008906:	f104 0008 	add.w	r0, r4, #8
2400890a:	f7ff fa01 	bl	24007d10 <RCCEx_PLL2_Config>
2400890e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008910:	2d00      	cmp	r5, #0
24008912:	f43f ae6c 	beq.w	240085ee <HAL_RCCEx_PeriphCLKConfig+0x6f6>
24008916:	e7c3      	b.n	240088a0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008918:	6862      	ldr	r2, [r4, #4]
2400891a:	e5ed      	b.n	240084f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400891c:	2102      	movs	r1, #2
2400891e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008922:	f7ff fa6f 	bl	24007e04 <RCCEx_PLL3_Config>
24008926:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008928:	2d00      	cmp	r5, #0
2400892a:	f43f ad01 	beq.w	24008330 <HAL_RCCEx_PeriphCLKConfig+0x438>
2400892e:	e7b3      	b.n	24008898 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008930:	2102      	movs	r1, #2
24008932:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008936:	f7ff fa65 	bl	24007e04 <RCCEx_PLL3_Config>
2400893a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400893c:	2d00      	cmp	r5, #0
2400893e:	f43f ad19 	beq.w	24008374 <HAL_RCCEx_PeriphCLKConfig+0x47c>
24008942:	e7a1      	b.n	24008888 <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008944:	4a77      	ldr	r2, [pc, #476]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008946:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400894c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400894e:	2d00      	cmp	r5, #0
24008950:	f43f ae23 	beq.w	2400859a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
24008954:	e768      	b.n	24008828 <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008956:	2101      	movs	r1, #1
24008958:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400895c:	f7ff fa52 	bl	24007e04 <RCCEx_PLL3_Config>
24008960:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008962:	2d00      	cmp	r5, #0
24008964:	f43f aba5 	beq.w	240080b2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
24008968:	e78a      	b.n	24008880 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400896a:	2101      	movs	r1, #1
2400896c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008970:	f7ff fa48 	bl	24007e04 <RCCEx_PLL3_Config>
24008974:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008976:	2d00      	cmp	r5, #0
24008978:	f43f abba 	beq.w	240080f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
2400897c:	e788      	b.n	24008890 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400897e:	2102      	movs	r1, #2
24008980:	f104 0008 	add.w	r0, r4, #8
24008984:	f7ff f9c4 	bl	24007d10 <RCCEx_PLL2_Config>
24008988:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400898a:	2d00      	cmp	r5, #0
2400898c:	f43f ab55 	beq.w	2400803a <HAL_RCCEx_PeriphCLKConfig+0x142>
24008990:	e767      	b.n	24008862 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008992:	2102      	movs	r1, #2
24008994:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008998:	f7ff fa34 	bl	24007e04 <RCCEx_PLL3_Config>
2400899c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400899e:	2d00      	cmp	r5, #0
240089a0:	f43f aca4 	beq.w	240082ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
240089a4:	e759      	b.n	2400885a <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240089a6:	4a5f      	ldr	r2, [pc, #380]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
240089a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240089aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240089ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240089b0:	2d00      	cmp	r5, #0
240089b2:	f43f af5b 	beq.w	2400886c <HAL_RCCEx_PeriphCLKConfig+0x974>
240089b6:	e414      	b.n	240081e2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240089b8:	2102      	movs	r1, #2
240089ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089be:	f7ff fa21 	bl	24007e04 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
240089c2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240089c6:	2800      	cmp	r0, #0
240089c8:	f43f ace6 	beq.w	24008398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
240089cc:	2601      	movs	r6, #1
240089ce:	e4e3      	b.n	24008398 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240089d0:	2102      	movs	r1, #2
240089d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089d6:	f7ff fa15 	bl	24007e04 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240089da:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240089de:	2800      	cmp	r0, #0
240089e0:	f43f acea 	beq.w	240083b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
240089e4:	2601      	movs	r6, #1
240089e6:	e4e7      	b.n	240083b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240089e8:	2100      	movs	r1, #0
240089ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089ee:	f7ff fa09 	bl	24007e04 <RCCEx_PLL3_Config>
240089f2:	4605      	mov	r5, r0
        break;
240089f4:	f7ff baea 	b.w	24007fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240089f8:	2102      	movs	r1, #2
240089fa:	3028      	adds	r0, #40	; 0x28
240089fc:	f7ff fa02 	bl	24007e04 <RCCEx_PLL3_Config>
24008a00:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008a02:	2e00      	cmp	r6, #0
24008a04:	f43f aa94 	beq.w	24007f30 <HAL_RCCEx_PeriphCLKConfig+0x38>
24008a08:	f7ff ba9f 	b.w	24007f4a <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a0c:	4a45      	ldr	r2, [pc, #276]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
24008a0e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008a16:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008a18:	e5af      	b.n	2400857a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a1a:	2100      	movs	r1, #0
24008a1c:	f104 0008 	add.w	r0, r4, #8
24008a20:	f7ff f976 	bl	24007d10 <RCCEx_PLL2_Config>
24008a24:	4605      	mov	r5, r0
        break;
24008a26:	e5a8      	b.n	2400857a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a28:	2100      	movs	r1, #0
24008a2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a2e:	f7ff f9e9 	bl	24007e04 <RCCEx_PLL3_Config>
24008a32:	4605      	mov	r5, r0
        break;
24008a34:	f7ff bb20 	b.w	24008078 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a38:	2100      	movs	r1, #0
24008a3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a3e:	f7ff f9e1 	bl	24007e04 <RCCEx_PLL3_Config>
24008a42:	4605      	mov	r5, r0
        break;
24008a44:	f7ff badf 	b.w	24008006 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a48:	2100      	movs	r1, #0
24008a4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a4e:	f7ff f9d9 	bl	24007e04 <RCCEx_PLL3_Config>
24008a52:	4605      	mov	r5, r0
        break;
24008a54:	e591      	b.n	2400857a <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a56:	2100      	movs	r1, #0
24008a58:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a5c:	f7ff f9d2 	bl	24007e04 <RCCEx_PLL3_Config>
24008a60:	4605      	mov	r5, r0
        break;
24008a62:	f7ff ba96 	b.w	24007f92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008a66:	2101      	movs	r1, #1
24008a68:	f104 0008 	add.w	r0, r4, #8
24008a6c:	f7ff f950 	bl	24007d10 <RCCEx_PLL2_Config>
24008a70:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a72:	2d00      	cmp	r5, #0
24008a74:	f43f aee6 	beq.w	24008844 <HAL_RCCEx_PeriphCLKConfig+0x94c>
24008a78:	e41d      	b.n	240082b6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008a7a:	2101      	movs	r1, #1
24008a7c:	f104 0008 	add.w	r0, r4, #8
24008a80:	f7ff f946 	bl	24007d10 <RCCEx_PLL2_Config>
24008a84:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a86:	2d00      	cmp	r5, #0
24008a88:	f43f aed2 	beq.w	24008830 <HAL_RCCEx_PeriphCLKConfig+0x938>
24008a8c:	f7ff bbf8 	b.w	24008280 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008a90:	2101      	movs	r1, #1
24008a92:	f104 0008 	add.w	r0, r4, #8
24008a96:	f7ff f93b 	bl	24007d10 <RCCEx_PLL2_Config>
24008a9a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a9c:	2d00      	cmp	r5, #0
24008a9e:	f43f adba 	beq.w	24008616 <HAL_RCCEx_PeriphCLKConfig+0x71e>
24008aa2:	e6bd      	b.n	24008820 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
24008aa4:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008aa6:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
24008aaa:	4635      	mov	r5, r6
24008aac:	f7ff bb9f 	b.w	240081ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008ab0:	2601      	movs	r6, #1
24008ab2:	f7ff ba4c 	b.w	24007f4e <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008ab6:	4a1b      	ldr	r2, [pc, #108]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008ab8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008abe:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008ac0:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008ac2:	f7ff ba3b 	b.w	24007f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24008ac6:	f7fb fdfb 	bl	240046c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008aca:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
24008ace:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008ad0:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008ad4:	e004      	b.n	24008ae0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008ad6:	f7fb fdf3 	bl	240046c0 <HAL_GetTick>
24008ada:	1bc0      	subs	r0, r0, r7
24008adc:	4548      	cmp	r0, r9
24008ade:	d8e1      	bhi.n	24008aa4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008ae0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24008ae4:	079b      	lsls	r3, r3, #30
24008ae6:	d5f6      	bpl.n	24008ad6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008ae8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008aec:	e61b      	b.n	24008726 <HAL_RCCEx_PeriphCLKConfig+0x82e>
24008aee:	490d      	ldr	r1, [pc, #52]	; (24008b24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008af0:	4b0d      	ldr	r3, [pc, #52]	; (24008b28 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
24008af2:	ea03 1312 	and.w	r3, r3, r2, lsr #4
24008af6:	690a      	ldr	r2, [r1, #16]
24008af8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24008afc:	4313      	orrs	r3, r2
24008afe:	610b      	str	r3, [r1, #16]
24008b00:	e61c      	b.n	2400873c <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008b02:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b06:	462e      	mov	r6, r5
24008b08:	f7ff bb71 	b.w	240081ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
24008b0c:	2601      	movs	r6, #1
24008b0e:	4635      	mov	r5, r6
24008b10:	f7ff bb6a 	b.w	240081e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008b14:	2601      	movs	r6, #1
24008b16:	4635      	mov	r5, r6
24008b18:	f7ff bbd0 	b.w	240082bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008b1c:	2601      	movs	r6, #1
24008b1e:	4635      	mov	r5, r6
24008b20:	f7ff bbb1 	b.w	24008286 <HAL_RCCEx_PeriphCLKConfig+0x38e>
24008b24:	58024400 	.word	0x58024400
24008b28:	00ffffcf 	.word	0x00ffffcf

24008b2c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008b2c:	4b4f      	ldr	r3, [pc, #316]	; (24008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
24008b2e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008b30:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008b32:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008b34:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
24008b36:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008b3a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008b3e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
24008b40:	d05c      	beq.n	24008bfc <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008b42:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008b46:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008b4a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008b4e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008b52:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008b54:	ee07 4a90 	vmov	s15, r4
24008b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008b5c:	d003      	beq.n	24008b66 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
24008b5e:	2902      	cmp	r1, #2
24008b60:	d075      	beq.n	24008c4e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
24008b62:	2900      	cmp	r1, #0
24008b64:	d04f      	beq.n	24008c06 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008b66:	ee07 2a90 	vmov	s15, r2
24008b6a:	eddf 6a41 	vldr	s13, [pc, #260]	; 24008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
24008b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24008b74:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008b78:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008b80:	ee06 3a90 	vmov	s13, r3
24008b84:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008b88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008b8c:	ee76 6a85 	vadd.f32	s13, s13, s10
24008b90:	eee7 6a25 	vfma.f32	s13, s14, s11
24008b94:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008b98:	4a34      	ldr	r2, [pc, #208]	; (24008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
24008b9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008b9e:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008ba0:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008ba4:	ee07 3a10 	vmov	s14, r3
24008ba8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008bac:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008bae:	ee37 7a06 	vadd.f32	s14, s14, s12
24008bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008bba:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24008bbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008bc0:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008bc4:	ee07 3a10 	vmov	s14, r3
24008bc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008bcc:	ee37 7a06 	vadd.f32	s14, s14, s12
24008bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008bd8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24008bdc:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008bde:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008be2:	ee07 3a90 	vmov	s15, r3
24008be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008bea:	ee77 7a86 	vadd.f32	s15, s15, s12
24008bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008bf2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008bf6:	ed80 7a02 	vstr	s14, [r0, #8]
}
24008bfa:	4770      	bx	lr
24008bfc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24008bfe:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24008c02:	6082      	str	r2, [r0, #8]
}
24008c04:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008c06:	6819      	ldr	r1, [r3, #0]
24008c08:	0689      	lsls	r1, r1, #26
24008c0a:	d527      	bpl.n	24008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c0c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c0e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c12:	4919      	ldr	r1, [pc, #100]	; (24008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c1a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c22:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24008c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c2a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c2c:	ee06 3a90 	vmov	s13, r3
24008c30:	ee05 1a90 	vmov	s11, r1
24008c34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008c38:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008c3c:	ee76 6a86 	vadd.f32	s13, s13, s12
24008c40:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24008c44:	eee7 6a05 	vfma.f32	s13, s14, s10
24008c48:	ee66 6a26 	vmul.f32	s13, s12, s13
24008c4c:	e7a4      	b.n	24008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c4e:	ee07 2a90 	vmov	s15, r2
24008c52:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
24008c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c5a:	e78a      	b.n	24008b72 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c5c:	ee07 2a90 	vmov	s15, r2
24008c60:	eddf 6a07 	vldr	s13, [pc, #28]	; 24008c80 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24008c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c68:	e783      	b.n	24008b72 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
24008c6a:	bf00      	nop
24008c6c:	58024400 	.word	0x58024400
24008c70:	4a742400 	.word	0x4a742400
24008c74:	39000000 	.word	0x39000000
24008c78:	03d09000 	.word	0x03d09000
24008c7c:	4b742400 	.word	0x4b742400
24008c80:	4c742400 	.word	0x4c742400

24008c84 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008c84:	4b4f      	ldr	r3, [pc, #316]	; (24008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
24008c86:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008c88:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24008c8a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008c8c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
24008c8e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24008c92:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008c96:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
24008c98:	d05c      	beq.n	24008d54 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008c9a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008c9e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ca2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008ca6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008caa:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008cac:	ee07 4a90 	vmov	s15, r4
24008cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008cb4:	d003      	beq.n	24008cbe <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
24008cb6:	2902      	cmp	r1, #2
24008cb8:	d075      	beq.n	24008da6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
24008cba:	2900      	cmp	r1, #0
24008cbc:	d04f      	beq.n	24008d5e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008cbe:	ee07 2a90 	vmov	s15, r2
24008cc2:	eddf 6a41 	vldr	s13, [pc, #260]	; 24008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
24008cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24008ccc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008cd0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24008dcc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24008cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008cd8:	ee06 3a90 	vmov	s13, r3
24008cdc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008ce0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008ce4:	ee76 6a85 	vadd.f32	s13, s13, s10
24008ce8:	eee7 6a25 	vfma.f32	s13, s14, s11
24008cec:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24008cf0:	4a34      	ldr	r2, [pc, #208]	; (24008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
24008cf2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008cf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008cf8:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008cfc:	ee07 3a10 	vmov	s14, r3
24008d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008d04:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24008d06:	ee37 7a06 	vadd.f32	s14, s14, s12
24008d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008d12:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24008d16:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008d18:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008d1c:	ee07 3a10 	vmov	s14, r3
24008d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008d24:	ee37 7a06 	vadd.f32	s14, s14, s12
24008d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008d30:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24008d34:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008d36:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008d3a:	ee07 3a90 	vmov	s15, r3
24008d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008d42:	ee77 7a86 	vadd.f32	s15, s15, s12
24008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008d4a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008d4e:	ed80 7a02 	vstr	s14, [r0, #8]
}
24008d52:	4770      	bx	lr
24008d54:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24008d56:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
24008d5a:	6082      	str	r2, [r0, #8]
}
24008d5c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008d5e:	6819      	ldr	r1, [r3, #0]
24008d60:	0689      	lsls	r1, r1, #26
24008d62:	d527      	bpl.n	24008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008d64:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008d66:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008d6a:	4919      	ldr	r1, [pc, #100]	; (24008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008d6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008d72:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008d7a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008dcc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008d82:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008d84:	ee06 3a90 	vmov	s13, r3
24008d88:	ee05 1a90 	vmov	s11, r1
24008d8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008d90:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008d94:	ee76 6a86 	vadd.f32	s13, s13, s12
24008d98:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24008d9c:	eee7 6a05 	vfma.f32	s13, s14, s10
24008da0:	ee66 6a26 	vmul.f32	s13, s12, s13
24008da4:	e7a4      	b.n	24008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008da6:	ee07 2a90 	vmov	s15, r2
24008daa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24008dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
24008dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008db2:	e78a      	b.n	24008cca <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008db4:	ee07 2a90 	vmov	s15, r2
24008db8:	eddf 6a07 	vldr	s13, [pc, #28]	; 24008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
24008dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008dc0:	e783      	b.n	24008cca <HAL_RCCEx_GetPLL3ClockFreq+0x46>
24008dc2:	bf00      	nop
24008dc4:	58024400 	.word	0x58024400
24008dc8:	4a742400 	.word	0x4a742400
24008dcc:	39000000 	.word	0x39000000
24008dd0:	03d09000 	.word	0x03d09000
24008dd4:	4b742400 	.word	0x4b742400
24008dd8:	4c742400 	.word	0x4c742400

24008ddc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ddc:	4b4f      	ldr	r3, [pc, #316]	; (24008f1c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
24008dde:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008de0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008de2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008de4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
24008de6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008dea:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008dee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
24008df0:	d05c      	beq.n	24008eac <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008df2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008df6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008dfa:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008dfe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008e02:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008e04:	ee07 4a90 	vmov	s15, r4
24008e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008e0c:	d07e      	beq.n	24008f0c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
24008e0e:	2902      	cmp	r1, #2
24008e10:	d075      	beq.n	24008efe <HAL_RCCEx_GetPLL1ClockFreq+0x122>
24008e12:	2900      	cmp	r1, #0
24008e14:	d04f      	beq.n	24008eb6 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008e16:	ee07 2a90 	vmov	s15, r2
24008e1a:	eddf 6a41 	vldr	s13, [pc, #260]	; 24008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
24008e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008e24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008e28:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24008e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008e30:	ee06 3a90 	vmov	s13, r3
24008e34:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008e38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008e3c:	ee76 6a85 	vadd.f32	s13, s13, s10
24008e40:	eee7 6a25 	vfma.f32	s13, s14, s11
24008e44:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008e48:	4a34      	ldr	r2, [pc, #208]	; (24008f1c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
24008e4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008e4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008e50:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008e54:	ee07 3a10 	vmov	s14, r3
24008e58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008e5c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008e5e:	ee37 7a06 	vadd.f32	s14, s14, s12
24008e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008e6a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24008e6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008e70:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008e74:	ee07 3a10 	vmov	s14, r3
24008e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008e7c:	ee37 7a06 	vadd.f32	s14, s14, s12
24008e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008e88:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24008e8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008e8e:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008e92:	ee07 3a90 	vmov	s15, r3
24008e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e9a:	ee77 7a86 	vadd.f32	s15, s15, s12
24008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008ea2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008ea6:	ed80 7a02 	vstr	s14, [r0, #8]
}
24008eaa:	4770      	bx	lr
24008eac:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24008eae:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
24008eb2:	6082      	str	r2, [r0, #8]
}
24008eb4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008eb6:	6819      	ldr	r1, [r3, #0]
24008eb8:	0689      	lsls	r1, r1, #26
24008eba:	d5ac      	bpl.n	24008e16 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008ebc:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008ebe:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008ec2:	4919      	ldr	r1, [pc, #100]	; (24008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008ec4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008eca:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008ed2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008eda:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008edc:	ee06 3a90 	vmov	s13, r3
24008ee0:	ee05 1a90 	vmov	s11, r1
24008ee4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008ee8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008eec:	ee76 6a86 	vadd.f32	s13, s13, s12
24008ef0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24008ef4:	eee7 6a05 	vfma.f32	s13, s14, s10
24008ef8:	ee66 6a26 	vmul.f32	s13, s12, s13
24008efc:	e7a4      	b.n	24008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008efe:	ee07 2a90 	vmov	s15, r2
24008f02:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24008f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f0a:	e78a      	b.n	24008e22 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f0c:	ee07 2a90 	vmov	s15, r2
24008f10:	eddf 6a07 	vldr	s13, [pc, #28]	; 24008f30 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
24008f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f18:	e783      	b.n	24008e22 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
24008f1a:	bf00      	nop
24008f1c:	58024400 	.word	0x58024400
24008f20:	4c742400 	.word	0x4c742400
24008f24:	39000000 	.word	0x39000000
24008f28:	03d09000 	.word	0x03d09000
24008f2c:	4b742400 	.word	0x4b742400
24008f30:	4a742400 	.word	0x4a742400

24008f34 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24008f34:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24008f38:	430b      	orrs	r3, r1
{
24008f3a:	b500      	push	{lr}
24008f3c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24008f3e:	f000 8084 	beq.w	2400904a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24008f42:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24008f46:	430b      	orrs	r3, r1
24008f48:	d039      	beq.n	24008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24008f4a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
24008f4e:	430b      	orrs	r3, r1
24008f50:	f000 80e6 	beq.w	24009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24008f54:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24008f58:	430b      	orrs	r3, r1
24008f5a:	f000 8089 	beq.w	24009070 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24008f5e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24008f62:	430b      	orrs	r3, r1
24008f64:	d061      	beq.n	2400902a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24008f66:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
24008f6a:	430b      	orrs	r3, r1
24008f6c:	f000 8112 	beq.w	24009194 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24008f70:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24008f74:	430b      	orrs	r3, r1
24008f76:	f000 80a3 	beq.w	240090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24008f7a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
24008f7e:	430b      	orrs	r3, r1
24008f80:	f000 80fa 	beq.w	24009178 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24008f84:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24008f88:	430b      	orrs	r3, r1
24008f8a:	f000 8143 	beq.w	24009214 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24008f8e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24008f92:	ea50 0301 	orrs.w	r3, r0, r1
24008f96:	d137      	bne.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24008f98:	4a99      	ldr	r2, [pc, #612]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24008f9a:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008f9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24008fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008fa4:	f000 8083 	beq.w	240090ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008fac:	f000 8156 	beq.w	2400925c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24008fb0:	bb53      	cbnz	r3, 24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24008fb2:	6810      	ldr	r0, [r2, #0]
24008fb4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24008fb8:	d044      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
24008fba:	4892      	ldr	r0, [pc, #584]	; (24009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
24008fbc:	e042      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
24008fbe:	4a90      	ldr	r2, [pc, #576]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24008fc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008fc2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
24008fc6:	2b80      	cmp	r3, #128	; 0x80
24008fc8:	f000 80a5 	beq.w	24009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24008fcc:	d920      	bls.n	24009010 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
24008fce:	2bc0      	cmp	r3, #192	; 0xc0
24008fd0:	d037      	beq.n	24009042 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24008fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24008fd6:	d117      	bne.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24008fd8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24008fda:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24008fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24008fe0:	0749      	lsls	r1, r1, #29
24008fe2:	d502      	bpl.n	24008fea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
24008fe4:	2b00      	cmp	r3, #0
24008fe6:	f000 80c1 	beq.w	2400916c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24008fea:	4a85      	ldr	r2, [pc, #532]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24008fec:	6812      	ldr	r2, [r2, #0]
24008fee:	05d0      	lsls	r0, r2, #23
24008ff0:	d503      	bpl.n	24008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
24008ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008ff6:	f000 8101 	beq.w	240091fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24008ffa:	4a81      	ldr	r2, [pc, #516]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24008ffc:	6812      	ldr	r2, [r2, #0]
24008ffe:	0391      	lsls	r1, r2, #14
24009000:	d502      	bpl.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009006:	d0d8      	beq.n	24008fba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24009008:	2000      	movs	r0, #0
}
2400900a:	b005      	add	sp, #20
2400900c:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24009010:	2b00      	cmp	r3, #0
24009012:	d04c      	beq.n	240090ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009014:	2b40      	cmp	r3, #64	; 0x40
24009016:	d1f7      	bne.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009018:	6810      	ldr	r0, [r2, #0]
2400901a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400901e:	d011      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009020:	a801      	add	r0, sp, #4
24009022:	f7ff fd83 	bl	24008b2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009026:	9801      	ldr	r0, [sp, #4]
24009028:	e00c      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2400902a:	4a75      	ldr	r2, [pc, #468]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400902c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400902e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009036:	d06e      	beq.n	24009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009038:	d937      	bls.n	240090aa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
2400903a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2400903e:	f040 8087 	bne.w	24009150 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24009042:	4871      	ldr	r0, [pc, #452]	; (24009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24009044:	b005      	add	sp, #20
24009046:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2400904a:	4b6d      	ldr	r3, [pc, #436]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400904c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400904e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
24009052:	2b04      	cmp	r3, #4
24009054:	d8d8      	bhi.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009056:	a201      	add	r2, pc, #4	; (adr r2, 2400905c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
24009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400905c:	240090ff 	.word	0x240090ff
24009060:	240090db 	.word	0x240090db
24009064:	240090eb 	.word	0x240090eb
24009068:	24009043 	.word	0x24009043
2400906c:	240090e7 	.word	0x240090e7
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24009070:	4a63      	ldr	r2, [pc, #396]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009072:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009074:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
24009078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400907c:	d04b      	beq.n	24009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400907e:	d944      	bls.n	2400910a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
24009080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24009084:	d0dd      	beq.n	24009042 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400908a:	d1bd      	bne.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400908c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400908e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009094:	0752      	lsls	r2, r2, #29
24009096:	d5a8      	bpl.n	24008fea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
24009098:	2b00      	cmp	r3, #0
2400909a:	d1a6      	bne.n	24008fea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400909c:	4b58      	ldr	r3, [pc, #352]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400909e:	485b      	ldr	r0, [pc, #364]	; (2400920c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
240090a0:	681b      	ldr	r3, [r3, #0]
240090a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240090a6:	40d8      	lsrs	r0, r3
240090a8:	e7cc      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
240090aa:	2b00      	cmp	r3, #0
240090ac:	d154      	bne.n	24009158 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240090ae:	6810      	ldr	r0, [r2, #0]
240090b0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
240090b4:	d0c6      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240090b6:	a801      	add	r0, sp, #4
240090b8:	f7ff fe90 	bl	24008ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240090bc:	9802      	ldr	r0, [sp, #8]
240090be:	e7c1      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
240090c0:	4a4f      	ldr	r2, [pc, #316]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
240090c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
240090c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240090cc:	f000 80d0 	beq.w	24009270 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
240090d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240090d4:	d0da      	beq.n	2400908c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
240090d6:	2b00      	cmp	r3, #0
240090d8:	d196      	bne.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240090da:	4b49      	ldr	r3, [pc, #292]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090dc:	6818      	ldr	r0, [r3, #0]
240090de:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240090e2:	d0af      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
240090e4:	e79c      	b.n	24009020 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240090e6:	4a46      	ldr	r2, [pc, #280]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090e8:	e776      	b.n	24008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240090ea:	4b45      	ldr	r3, [pc, #276]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090ec:	6818      	ldr	r0, [r3, #0]
240090ee:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240090f2:	d0a7      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240090f4:	a801      	add	r0, sp, #4
240090f6:	f7ff fdc5 	bl	24008c84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240090fa:	9801      	ldr	r0, [sp, #4]
240090fc:	e7a2      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240090fe:	4b40      	ldr	r3, [pc, #256]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009100:	6818      	ldr	r0, [r3, #0]
24009102:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009106:	d09d      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009108:	e7d5      	b.n	240090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
2400910a:	2b00      	cmp	r3, #0
2400910c:	d0cf      	beq.n	240090ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400910e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24009112:	d081      	beq.n	24009018 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009114:	e778      	b.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009116:	6810      	ldr	r0, [r2, #0]
24009118:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400911c:	d092      	beq.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400911e:	e7e9      	b.n	240090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24009120:	4a37      	ldr	r2, [pc, #220]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009122:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009124:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
24009128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400912c:	d0f3      	beq.n	24009116 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400912e:	d806      	bhi.n	2400913e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24009130:	2b00      	cmp	r3, #0
24009132:	d0bc      	beq.n	240090ae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24009138:	f43f af6e 	beq.w	24009018 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
2400913c:	e764      	b.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400913e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24009142:	f43f af7e 	beq.w	24009042 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400914a:	f43f af45 	beq.w	24008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
2400914e:	e75b      	b.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
24009150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009154:	d09a      	beq.n	2400908c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009156:	e757      	b.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400915c:	f43f af5c 	beq.w	24009018 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009160:	e752      	b.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009162:	6810      	ldr	r0, [r2, #0]
24009164:	f010 0004 	ands.w	r0, r0, #4
24009168:	f43f af6c 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400916c:	6813      	ldr	r3, [r2, #0]
2400916e:	4827      	ldr	r0, [pc, #156]	; (2400920c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009170:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009174:	40d8      	lsrs	r0, r3
24009176:	e765      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24009178:	4b21      	ldr	r3, [pc, #132]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400917a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
2400917c:	03d2      	lsls	r2, r2, #15
2400917e:	d5bf      	bpl.n	24009100 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009180:	6818      	ldr	r0, [r3, #0]
24009182:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009186:	f43f af5d 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400918a:	a801      	add	r0, sp, #4
2400918c:	f7ff fcce 	bl	24008b2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24009190:	9803      	ldr	r0, [sp, #12]
24009192:	e757      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24009194:	4a1a      	ldr	r2, [pc, #104]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009196:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009198:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
2400919c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240091a0:	d0df      	beq.n	24009162 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
240091a2:	d810      	bhi.n	240091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
240091a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240091a8:	d058      	beq.n	2400925c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
240091aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240091ae:	d118      	bne.n	240091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240091b0:	4b13      	ldr	r3, [pc, #76]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091b2:	6818      	ldr	r0, [r3, #0]
240091b4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240091b8:	f43f af44 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240091bc:	a801      	add	r0, sp, #4
240091be:	f7ff fd61 	bl	24008c84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
240091c2:	9802      	ldr	r0, [sp, #8]
240091c4:	e73e      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
240091c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240091ca:	d012      	beq.n	240091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
240091cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240091d0:	f47f af1a 	bne.w	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240091d4:	4b0a      	ldr	r3, [pc, #40]	; (24009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091d6:	6818      	ldr	r0, [r3, #0]
240091d8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
240091dc:	f43f af32 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
240091e0:	e6eb      	b.n	24008fba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
240091e2:	2b00      	cmp	r3, #0
240091e4:	f47f af10 	bne.w	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
240091e8:	b005      	add	sp, #20
240091ea:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
240091ee:	f7fe bd47 	b.w	24007c80 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
240091f2:	6810      	ldr	r0, [r2, #0]
240091f4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
240091f8:	f43f af24 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
240091fc:	4804      	ldr	r0, [pc, #16]	; (24009210 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
240091fe:	e721      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009200:	58024400 	.word	0x58024400
24009204:	00f42400 	.word	0x00f42400
24009208:	00bb8000 	.word	0x00bb8000
2400920c:	03d09000 	.word	0x03d09000
24009210:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24009214:	4b28      	ldr	r3, [pc, #160]	; (240092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009218:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
2400921c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24009220:	d037      	beq.n	24009292 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
24009222:	d814      	bhi.n	2400924e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
24009224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009228:	d03f      	beq.n	240092aa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
2400922a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400922e:	d0bf      	beq.n	240091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24009230:	2b00      	cmp	r3, #0
24009232:	f47f aee9 	bne.w	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24009236:	f7fe fce3 	bl	24007c00 <HAL_RCC_GetHCLKFreq>
2400923a:	4b1f      	ldr	r3, [pc, #124]	; (240092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400923c:	4a1f      	ldr	r2, [pc, #124]	; (240092bc <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
2400923e:	6a1b      	ldr	r3, [r3, #32]
24009240:	f3c3 1302 	ubfx	r3, r3, #4, #3
24009244:	5cd3      	ldrb	r3, [r2, r3]
24009246:	f003 031f 	and.w	r3, r3, #31
2400924a:	40d8      	lsrs	r0, r3
        break;
2400924c:	e6fa      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
2400924e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24009252:	d017      	beq.n	24009284 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
24009254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24009258:	d0bc      	beq.n	240091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2400925a:	e6d5      	b.n	24009008 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400925c:	6810      	ldr	r0, [r2, #0]
2400925e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009262:	f43f aeef 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009266:	a801      	add	r0, sp, #4
24009268:	f7ff fc60 	bl	24008b2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2400926c:	9802      	ldr	r0, [sp, #8]
2400926e:	e6e9      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009270:	6810      	ldr	r0, [r2, #0]
24009272:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009276:	f43f aee5 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400927a:	a801      	add	r0, sp, #4
2400927c:	f7ff fd02 	bl	24008c84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24009280:	9803      	ldr	r0, [sp, #12]
24009282:	e6df      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009284:	4b0c      	ldr	r3, [pc, #48]	; (240092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009286:	6818      	ldr	r0, [r3, #0]
24009288:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400928c:	f43f aeda 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009290:	e7b4      	b.n	240091fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009292:	4b09      	ldr	r3, [pc, #36]	; (240092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009294:	6818      	ldr	r0, [r3, #0]
24009296:	f010 0004 	ands.w	r0, r0, #4
2400929a:	f43f aed3 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400929e:	681b      	ldr	r3, [r3, #0]
240092a0:	4807      	ldr	r0, [pc, #28]	; (240092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
240092a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240092a6:	40d8      	lsrs	r0, r3
240092a8:	e6cc      	b.n	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240092aa:	4b03      	ldr	r3, [pc, #12]	; (240092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240092ac:	6818      	ldr	r0, [r3, #0]
240092ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240092b2:	f43f aec7 	beq.w	24009044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
240092b6:	e7d6      	b.n	24009266 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
240092b8:	58024400 	.word	0x58024400
240092bc:	24017f40 	.word	0x24017f40
240092c0:	03d09000 	.word	0x03d09000

240092c4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
240092c4:	2800      	cmp	r0, #0
240092c6:	d03c      	beq.n	24009342 <HAL_RNG_Init+0x7e>
{
240092c8:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
240092ca:	7a43      	ldrb	r3, [r0, #9]
240092cc:	4604      	mov	r4, r0
240092ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
240092d2:	2b00      	cmp	r3, #0
240092d4:	d031      	beq.n	2400933a <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
240092d6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
240092d8:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
240092da:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
240092dc:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
240092de:	6813      	ldr	r3, [r2, #0]
240092e0:	f023 0320 	bic.w	r3, r3, #32
240092e4:	430b      	orrs	r3, r1
240092e6:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
240092e8:	6822      	ldr	r2, [r4, #0]
240092ea:	6813      	ldr	r3, [r2, #0]
240092ec:	f043 0304 	orr.w	r3, r3, #4
240092f0:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
240092f2:	6823      	ldr	r3, [r4, #0]
240092f4:	685b      	ldr	r3, [r3, #4]
240092f6:	0658      	lsls	r0, r3, #25
240092f8:	d503      	bpl.n	24009302 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
240092fa:	2304      	movs	r3, #4
    return HAL_ERROR;
240092fc:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
240092fe:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24009300:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24009302:	f7fb f9dd 	bl	240046c0 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009306:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
24009308:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400930a:	685b      	ldr	r3, [r3, #4]
2400930c:	0759      	lsls	r1, r3, #29
2400930e:	d50e      	bpl.n	2400932e <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009310:	f7fb f9d6 	bl	240046c0 <HAL_GetTick>
24009314:	1b43      	subs	r3, r0, r5
24009316:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009318:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400931a:	d9f6      	bls.n	2400930a <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400931c:	685a      	ldr	r2, [r3, #4]
2400931e:	0752      	lsls	r2, r2, #29
24009320:	d5f3      	bpl.n	2400930a <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
24009322:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009324:	2302      	movs	r3, #2
        return HAL_ERROR;
24009326:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
24009328:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400932a:	60e3      	str	r3, [r4, #12]
}
2400932c:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400932e:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24009330:	2201      	movs	r2, #1
  return HAL_OK;
24009332:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24009334:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009336:	60e3      	str	r3, [r4, #12]
}
24009338:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400933a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
2400933c:	f7fa fcd8 	bl	24003cf0 <HAL_RNG_MspInit>
24009340:	e7c9      	b.n	240092d6 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
24009342:	2001      	movs	r0, #1
}
24009344:	4770      	bx	lr
24009346:	bf00      	nop

24009348 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
24009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
2400934a:	7a03      	ldrb	r3, [r0, #8]
2400934c:	2b01      	cmp	r3, #1
2400934e:	d027      	beq.n	240093a0 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24009350:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
24009352:	2201      	movs	r2, #1
24009354:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
24009356:	4293      	cmp	r3, r2
24009358:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
2400935a:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
2400935c:	d006      	beq.n	2400936c <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400935e:	2304      	movs	r3, #4
    status = HAL_ERROR;
24009360:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009362:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24009364:	2300      	movs	r3, #0
24009366:	7223      	strb	r3, [r4, #8]

  return status;
}
24009368:	4630      	mov	r0, r6
2400936a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
2400936c:	2302      	movs	r3, #2
2400936e:	460d      	mov	r5, r1
24009370:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24009372:	f7fb f9a5 	bl	240046c0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009376:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
24009378:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400937a:	685a      	ldr	r2, [r3, #4]
2400937c:	07d2      	lsls	r2, r2, #31
2400937e:	d412      	bmi.n	240093a6 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009380:	f7fb f99e 	bl	240046c0 <HAL_GetTick>
24009384:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009386:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009388:	2802      	cmp	r0, #2
2400938a:	d9f6      	bls.n	2400937a <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400938c:	685a      	ldr	r2, [r3, #4]
2400938e:	f012 0201 	ands.w	r2, r2, #1
24009392:	d1f2      	bne.n	2400937a <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
24009394:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009396:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
24009398:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
2400939a:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400939c:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
2400939e:	e7e3      	b.n	24009368 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
240093a0:	2602      	movs	r6, #2
}
240093a2:	4630      	mov	r0, r6
240093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
240093a6:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
240093a8:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
240093aa:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
240093ac:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
240093ae:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
240093b0:	7262      	strb	r2, [r4, #9]
240093b2:	e7d7      	b.n	24009364 <HAL_RNG_GenerateRandomNumber+0x1c>

240093b4 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
240093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
240093b6:	4ba6      	ldr	r3, [pc, #664]	; (24009650 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
240093b8:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
240093ba:	6802      	ldr	r2, [r0, #0]
240093bc:	429a      	cmp	r2, r3
240093be:	d01c      	beq.n	240093fa <HAL_SAI_Init.part.0+0x46>
240093c0:	3320      	adds	r3, #32
240093c2:	429a      	cmp	r2, r3
240093c4:	d019      	beq.n	240093fa <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
240093c6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
240093ca:	429a      	cmp	r2, r3
240093cc:	d04d      	beq.n	2400946a <HAL_SAI_Init.part.0+0xb6>
240093ce:	3320      	adds	r3, #32
240093d0:	429a      	cmp	r2, r3
240093d2:	d04a      	beq.n	2400946a <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
240093d4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
240093d8:	429a      	cmp	r2, r3
240093da:	f000 8134 	beq.w	24009646 <HAL_SAI_Init.part.0+0x292>
240093de:	3320      	adds	r3, #32
240093e0:	429a      	cmp	r2, r3
240093e2:	f000 8130 	beq.w	24009646 <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
240093e6:	4b9b      	ldr	r3, [pc, #620]	; (24009654 <HAL_SAI_Init.part.0+0x2a0>)
240093e8:	429a      	cmp	r2, r3
240093ea:	f000 812e 	beq.w	2400964a <HAL_SAI_Init.part.0+0x296>
240093ee:	3320      	adds	r3, #32
240093f0:	429a      	cmp	r2, r3
240093f2:	f000 812a 	beq.w	2400964a <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
240093f6:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
240093f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
240093fa:	4e97      	ldr	r6, [pc, #604]	; (24009658 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
240093fc:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
24009400:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009404:	2b00      	cmp	r3, #0
24009406:	d037      	beq.n	24009478 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009408:	4b94      	ldr	r3, [pc, #592]	; (2400965c <HAL_SAI_Init.part.0+0x2a8>)
2400940a:	4995      	ldr	r1, [pc, #596]	; (24009660 <HAL_SAI_Init.part.0+0x2ac>)
2400940c:	681b      	ldr	r3, [r3, #0]
2400940e:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24009412:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009414:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009416:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400941a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400941c:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2400941e:	2b00      	cmp	r3, #0
24009420:	d031      	beq.n	24009486 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009422:	6822      	ldr	r2, [r4, #0]
    count--;
24009424:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009426:	6815      	ldr	r5, [r2, #0]
24009428:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
2400942c:	d1f7      	bne.n	2400941e <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
2400942e:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
24009430:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
24009432:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
24009434:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24009438:	f000 8156 	beq.w	240096e8 <HAL_SAI_Init.part.0+0x334>
2400943c:	4293      	cmp	r3, r2
2400943e:	bf19      	ittee	ne
24009440:	4610      	movne	r0, r2
24009442:	2103      	movne	r1, #3
24009444:	2123      	moveq	r1, #35	; 0x23
24009446:	2022      	moveq	r0, #34	; 0x22
24009448:	bf15      	itete	ne
2400944a:	2701      	movne	r7, #1
2400944c:	2721      	moveq	r7, #33	; 0x21
2400944e:	2200      	movne	r2, #0
24009450:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
24009452:	68a3      	ldr	r3, [r4, #8]
24009454:	3b01      	subs	r3, #1
24009456:	2b04      	cmp	r3, #4
24009458:	f200 8181 	bhi.w	2400975e <HAL_SAI_Init.part.0+0x3aa>
2400945c:	e8df f013 	tbh	[pc, r3, lsl #1]
24009460:	001c00e8 	.word	0x001c00e8
24009464:	001b00ef 	.word	0x001b00ef
24009468:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
2400946a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
2400946e:	4e7d      	ldr	r6, [pc, #500]	; (24009664 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009470:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009474:	2b00      	cmp	r3, #0
24009476:	d1c7      	bne.n	24009408 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
24009478:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
2400947a:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
2400947e:	f7fa fc9f 	bl	24003dc0 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
24009482:	6822      	ldr	r2, [r4, #0]
24009484:	e7c0      	b.n	24009408 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009486:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
2400948a:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400948c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009490:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
24009494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24009496:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009498:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
2400949c:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2400949e:	6a23      	ldr	r3, [r4, #32]
240094a0:	2b00      	cmp	r3, #0
240094a2:	d04a      	beq.n	2400953a <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
240094a4:	6823      	ldr	r3, [r4, #0]
240094a6:	4a6a      	ldr	r2, [pc, #424]	; (24009650 <HAL_SAI_Init.part.0+0x29c>)
240094a8:	4293      	cmp	r3, r2
240094aa:	f000 8131 	beq.w	24009710 <HAL_SAI_Init.part.0+0x35c>
240094ae:	486e      	ldr	r0, [pc, #440]	; (24009668 <HAL_SAI_Init.part.0+0x2b4>)
240094b0:	1a18      	subs	r0, r3, r0
240094b2:	fab0 f080 	clz	r0, r0
240094b6:	0940      	lsrs	r0, r0, #5
240094b8:	2800      	cmp	r0, #0
240094ba:	f040 8129 	bne.w	24009710 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
240094be:	4a6b      	ldr	r2, [pc, #428]	; (2400966c <HAL_SAI_Init.part.0+0x2b8>)
240094c0:	4293      	cmp	r3, r2
240094c2:	f000 8133 	beq.w	2400972c <HAL_SAI_Init.part.0+0x378>
240094c6:	3220      	adds	r2, #32
240094c8:	4293      	cmp	r3, r2
240094ca:	f000 812f 	beq.w	2400972c <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
240094ce:	4a68      	ldr	r2, [pc, #416]	; (24009670 <HAL_SAI_Init.part.0+0x2bc>)
240094d0:	4293      	cmp	r3, r2
240094d2:	f000 8124 	beq.w	2400971e <HAL_SAI_Init.part.0+0x36a>
240094d6:	3220      	adds	r2, #32
240094d8:	4293      	cmp	r3, r2
240094da:	f000 8120 	beq.w	2400971e <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
240094de:	4a5d      	ldr	r2, [pc, #372]	; (24009654 <HAL_SAI_Init.part.0+0x2a0>)
240094e0:	4293      	cmp	r3, r2
240094e2:	f000 8133 	beq.w	2400974c <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
240094e6:	4a63      	ldr	r2, [pc, #396]	; (24009674 <HAL_SAI_Init.part.0+0x2c0>)
240094e8:	4293      	cmp	r3, r2
240094ea:	f000 8129 	beq.w	24009740 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
240094ee:	69a3      	ldr	r3, [r4, #24]
240094f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
240094f4:	f000 80fd 	beq.w	240096f2 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
240094f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
240094fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240094fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009500:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009504:	ea4f 0340 	mov.w	r3, r0, lsl #1
24009508:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400950a:	bf0c      	ite	eq
2400950c:	2202      	moveq	r2, #2
2400950e:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009510:	fb00 f202 	mul.w	r2, r0, r2
24009514:	0212      	lsls	r2, r2, #8
24009516:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
2400951a:	4a57      	ldr	r2, [pc, #348]	; (24009678 <HAL_SAI_Init.part.0+0x2c4>)
2400951c:	fba2 0203 	umull	r0, r2, r2, r3
24009520:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24009522:	eb02 0082 	add.w	r0, r2, r2, lsl #2
24009526:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
2400952a:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
2400952c:	bf08      	it	eq
2400952e:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009530:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24009532:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009534:	d101      	bne.n	2400953a <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24009536:	0852      	lsrs	r2, r2, #1
24009538:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400953a:	6863      	ldr	r3, [r4, #4]
2400953c:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009540:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009542:	f040 80cc 	bne.w	240096de <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009546:	2b01      	cmp	r3, #1
24009548:	bf14      	ite	ne
2400954a:	f44f 7500 	movne.w	r5, #512	; 0x200
2400954e:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009550:	f7fb f8ce 	bl	240046f0 <HAL_GetREVID>
24009554:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009558:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400955a:	f0c0 80ac 	bcc.w	240096b6 <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400955e:	6811      	ldr	r1, [r2, #0]
24009560:	4b46      	ldr	r3, [pc, #280]	; (2400967c <HAL_SAI_Init.part.0+0x2c8>)
24009562:	400b      	ands	r3, r1
24009564:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009566:	6c62      	ldr	r2, [r4, #68]	; 0x44
24009568:	e9d4 1300 	ldrd	r1, r3, [r4]
2400956c:	431a      	orrs	r2, r3
2400956e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24009570:	431a      	orrs	r2, r3
24009572:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24009574:	431a      	orrs	r2, r3
24009576:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24009578:	431a      	orrs	r2, r3
2400957a:	6963      	ldr	r3, [r4, #20]
2400957c:	431a      	orrs	r2, r3
2400957e:	69a3      	ldr	r3, [r4, #24]
24009580:	431a      	orrs	r2, r3
24009582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24009584:	431a      	orrs	r2, r3
24009586:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009588:	431a      	orrs	r2, r3
2400958a:	680b      	ldr	r3, [r1, #0]
2400958c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2400958e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009590:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009594:	4b3a      	ldr	r3, [pc, #232]	; (24009680 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009596:	433a      	orrs	r2, r7
24009598:	432a      	orrs	r2, r5
2400959a:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400959c:	6822      	ldr	r2, [r4, #0]
2400959e:	6851      	ldr	r1, [r2, #4]
240095a0:	400b      	ands	r3, r1
240095a2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
240095a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
240095a6:	69e3      	ldr	r3, [r4, #28]
240095a8:	6822      	ldr	r2, [r4, #0]
240095aa:	430b      	orrs	r3, r1
240095ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
240095ae:	430b      	orrs	r3, r1
240095b0:	6851      	ldr	r1, [r2, #4]
240095b2:	430b      	orrs	r3, r1
240095b4:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
240095b6:	6822      	ldr	r2, [r4, #0]
240095b8:	4b32      	ldr	r3, [pc, #200]	; (24009684 <HAL_SAI_Init.part.0+0x2d0>)
240095ba:	6891      	ldr	r1, [r2, #8]
240095bc:	400b      	ands	r3, r1
240095be:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
240095c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240095c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
240095c4:	6821      	ldr	r1, [r4, #0]
240095c6:	4313      	orrs	r3, r2
240095c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
240095ca:	6888      	ldr	r0, [r1, #8]
240095cc:	4313      	orrs	r3, r2
240095ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
240095d0:	4303      	orrs	r3, r0
240095d2:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
240095d4:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
240095d8:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
240095da:	6da2      	ldr	r2, [r4, #88]	; 0x58
240095dc:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
240095de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
240095e2:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
240095e4:	6822      	ldr	r2, [r4, #0]
240095e6:	68d3      	ldr	r3, [r2, #12]
240095e8:	4003      	ands	r3, r0
240095ea:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240095ec:	6821      	ldr	r1, [r4, #0]
240095ee:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
240095f2:	68ca      	ldr	r2, [r1, #12]
240095f4:	4303      	orrs	r3, r0
240095f6:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240095f8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240095fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240095fe:	6f22      	ldr	r2, [r4, #112]	; 0x70
24009600:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009602:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24009606:	4a12      	ldr	r2, [pc, #72]	; (24009650 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009608:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400960a:	6823      	ldr	r3, [r4, #0]
2400960c:	4293      	cmp	r3, r2
2400960e:	d03f      	beq.n	24009690 <HAL_SAI_Init.part.0+0x2dc>
24009610:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009614:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009618:	4293      	cmp	r3, r2
2400961a:	d039      	beq.n	24009690 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400961c:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400961e:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009620:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
24009624:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
24009626:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400962a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400962e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
24009630:	f44f 6780 	mov.w	r7, #1024	; 0x400
24009634:	e732      	b.n	2400949c <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
24009636:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009638:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
2400963c:	e72e      	b.n	2400949c <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400963e:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009640:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24009644:	e72a      	b.n	2400949c <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
24009646:	4e10      	ldr	r6, [pc, #64]	; (24009688 <HAL_SAI_Init.part.0+0x2d4>)
24009648:	e6d8      	b.n	240093fc <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
2400964a:	4e10      	ldr	r6, [pc, #64]	; (2400968c <HAL_SAI_Init.part.0+0x2d8>)
2400964c:	e6d6      	b.n	240093fc <HAL_SAI_Init.part.0+0x48>
2400964e:	bf00      	nop
24009650:	40015804 	.word	0x40015804
24009654:	58005404 	.word	0x58005404
24009658:	40015800 	.word	0x40015800
2400965c:	200006e0 	.word	0x200006e0
24009660:	95cbec1b 	.word	0x95cbec1b
24009664:	40015c00 	.word	0x40015c00
24009668:	40015824 	.word	0x40015824
2400966c:	40015c04 	.word	0x40015c04
24009670:	40016004 	.word	0x40016004
24009674:	58005424 	.word	0x58005424
24009678:	cccccccd 	.word	0xcccccccd
2400967c:	f005c010 	.word	0xf005c010
24009680:	ffff1ff0 	.word	0xffff1ff0
24009684:	fff88000 	.word	0xfff88000
24009688:	40016000 	.word	0x40016000
2400968c:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
24009690:	6c73      	ldr	r3, [r6, #68]	; 0x44
24009692:	f023 0301 	bic.w	r3, r3, #1
24009696:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
24009698:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400969c:	2b01      	cmp	r3, #1
2400969e:	d1bd      	bne.n	2400961c <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
240096a0:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
240096a4:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
240096a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
240096aa:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
240096ac:	6c73      	ldr	r3, [r6, #68]	; 0x44
240096ae:	f043 0301 	orr.w	r3, r3, #1
240096b2:	6473      	str	r3, [r6, #68]	; 0x44
240096b4:	e7b2      	b.n	2400961c <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240096b6:	6811      	ldr	r1, [r2, #0]
240096b8:	4b2a      	ldr	r3, [pc, #168]	; (24009764 <HAL_SAI_Init.part.0+0x3b0>)
240096ba:	400b      	ands	r3, r1
240096bc:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240096be:	6c62      	ldr	r2, [r4, #68]	; 0x44
240096c0:	e9d4 1300 	ldrd	r1, r3, [r4]
240096c4:	431a      	orrs	r2, r3
240096c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
240096c8:	431a      	orrs	r2, r3
240096ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
240096cc:	431a      	orrs	r2, r3
240096ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240096d0:	431a      	orrs	r2, r3
240096d2:	6963      	ldr	r3, [r4, #20]
240096d4:	431a      	orrs	r2, r3
240096d6:	69a3      	ldr	r3, [r4, #24]
240096d8:	431a      	orrs	r2, r3
240096da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240096dc:	e754      	b.n	24009588 <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
240096de:	2b01      	cmp	r3, #1
240096e0:	bf08      	it	eq
240096e2:	f44f 7500 	moveq.w	r5, #512	; 0x200
240096e6:	e733      	b.n	24009550 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
240096e8:	2113      	movs	r1, #19
240096ea:	2012      	movs	r0, #18
240096ec:	2711      	movs	r7, #17
240096ee:	2210      	movs	r2, #16
240096f0:	e6af      	b.n	24009452 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240096f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
240096f4:	2904      	cmp	r1, #4
240096f6:	d030      	beq.n	2400975a <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
240096f8:	2908      	cmp	r1, #8
240096fa:	d01e      	beq.n	2400973a <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
240096fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
240096fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24009702:	0043      	lsls	r3, r0, #1
24009704:	6a20      	ldr	r0, [r4, #32]
24009706:	fb00 f202 	mul.w	r2, r0, r2
2400970a:	fbb3 f3f2 	udiv	r3, r3, r2
2400970e:	e704      	b.n	2400951a <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
24009710:	f44f 7080 	mov.w	r0, #256	; 0x100
24009714:	2100      	movs	r1, #0
24009716:	f7ff fc0d 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400971a:	6823      	ldr	r3, [r4, #0]
2400971c:	e6cf      	b.n	240094be <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400971e:	f44f 7000 	mov.w	r0, #512	; 0x200
24009722:	2100      	movs	r1, #0
24009724:	f7ff fc06 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
24009728:	6823      	ldr	r3, [r4, #0]
2400972a:	e6d8      	b.n	240094de <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400972c:	f44f 7000 	mov.w	r0, #512	; 0x200
24009730:	2100      	movs	r1, #0
24009732:	f7ff fbff 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009736:	6823      	ldr	r3, [r4, #0]
24009738:	e6c9      	b.n	240094ce <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400973a:	f44f 7280 	mov.w	r2, #256	; 0x100
2400973e:	e7de      	b.n	240096fe <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
24009740:	2100      	movs	r1, #0
24009742:	f44f 6000 	mov.w	r0, #2048	; 0x800
24009746:	f7ff fbf5 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
2400974a:	e6d0      	b.n	240094ee <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400974c:	f44f 6080 	mov.w	r0, #1024	; 0x400
24009750:	2100      	movs	r1, #0
24009752:	f7ff fbef 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
24009756:	6823      	ldr	r3, [r4, #0]
24009758:	e6c5      	b.n	240094e6 <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400975a:	2240      	movs	r2, #64	; 0x40
2400975c:	e7cf      	b.n	240096fe <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
2400975e:	2700      	movs	r7, #0
24009760:	e69c      	b.n	2400949c <HAL_SAI_Init.part.0+0xe8>
24009762:	bf00      	nop
24009764:	f805c010 	.word	0xf805c010

24009768 <HAL_SAI_InitProtocol>:
  switch (protocol)
24009768:	2902      	cmp	r1, #2
{
2400976a:	b538      	push	{r3, r4, r5, lr}
2400976c:	4604      	mov	r4, r0
  switch (protocol)
2400976e:	d935      	bls.n	240097dc <HAL_SAI_InitProtocol+0x74>
24009770:	1ec8      	subs	r0, r1, #3
24009772:	2801      	cmp	r0, #1
24009774:	d830      	bhi.n	240097d8 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009776:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
24009778:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400977a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400977c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400977e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
24009780:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24009782:	f64f 70ff 	movw	r0, #65535	; 0xffff
24009786:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009788:	6860      	ldr	r0, [r4, #4]
2400978a:	f030 0002 	bics.w	r0, r0, #2
2400978e:	bf0c      	ite	eq
24009790:	2501      	moveq	r5, #1
24009792:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
24009794:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009796:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400979a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
2400979c:	bf0c      	ite	eq
2400979e:	2001      	moveq	r0, #1
240097a0:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
240097a2:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
240097a4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
240097a8:	65a0      	str	r0, [r4, #88]	; 0x58
240097aa:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
240097ac:	2a03      	cmp	r2, #3
240097ae:	d813      	bhi.n	240097d8 <HAL_SAI_InitProtocol+0x70>
240097b0:	e8df f002 	tbb	[pc, r2]
240097b4:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
240097b8:	6823      	ldr	r3, [r4, #0]
240097ba:	4a47      	ldr	r2, [pc, #284]	; (240098d8 <HAL_SAI_InitProtocol+0x170>)
240097bc:	4293      	cmp	r3, r2
240097be:	d005      	beq.n	240097cc <HAL_SAI_InitProtocol+0x64>
240097c0:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
240097c4:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
240097c8:	4293      	cmp	r3, r2
240097ca:	d105      	bne.n	240097d8 <HAL_SAI_InitProtocol+0x70>
240097cc:	6863      	ldr	r3, [r4, #4]
240097ce:	2b01      	cmp	r3, #1
240097d0:	d102      	bne.n	240097d8 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
240097d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
240097d4:	2b00      	cmp	r3, #0
240097d6:	d037      	beq.n	24009848 <HAL_SAI_InitProtocol+0xe0>
}
240097d8:	2001      	movs	r0, #1
240097da:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240097dc:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
240097de:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240097e0:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
240097e2:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
240097e4:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240097e6:	6860      	ldr	r0, [r4, #4]
240097e8:	f030 0002 	bics.w	r0, r0, #2
240097ec:	bf14      	ite	ne
240097ee:	2001      	movne	r0, #1
240097f0:	2000      	moveq	r0, #0
240097f2:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
240097f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
240097f8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
240097fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
240097fe:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
24009800:	f013 0001 	ands.w	r0, r3, #1
24009804:	d1e8      	bne.n	240097d8 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
24009806:	b949      	cbnz	r1, 2400981c <HAL_SAI_InitProtocol+0xb4>
24009808:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400980c:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
24009810:	2a03      	cmp	r2, #3
24009812:	d8e1      	bhi.n	240097d8 <HAL_SAI_InitProtocol+0x70>
24009814:	e8df f002 	tbb	[pc, r2]
24009818:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400981c:	6660      	str	r0, [r4, #100]	; 0x64
2400981e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
24009822:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
24009824:	2a03      	cmp	r2, #3
24009826:	d8d7      	bhi.n	240097d8 <HAL_SAI_InitProtocol+0x70>
24009828:	e8df f002 	tbb	[pc, r2]
2400982c:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009830:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009832:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009834:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009836:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009838:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400983a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400983c:	f7fa ff58 	bl	240046f0 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
24009840:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
24009844:	2b01      	cmp	r3, #1
24009846:	d0b7      	beq.n	240097b8 <HAL_SAI_InitProtocol+0x50>
24009848:	4620      	mov	r0, r4
}
2400984a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400984e:	f7ff bdb1 	b.w	240093b4 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009852:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009854:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009856:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009858:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400985a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400985c:	e7ee      	b.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400985e:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009860:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009862:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009864:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009866:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009868:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400986a:	e7e7      	b.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400986c:	21e0      	movs	r1, #224	; 0xe0
2400986e:	e7f7      	b.n	24009860 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009870:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009872:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009874:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009876:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009878:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400987a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400987c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400987e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009882:	e7db      	b.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009884:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009886:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009888:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400988a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400988c:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009890:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009892:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009896:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009898:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400989a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400989c:	d1ce      	bne.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
2400989e:	2308      	movs	r3, #8
240098a0:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
240098a2:	e7cb      	b.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098a4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098a6:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240098a8:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098aa:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098ae:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
240098b0:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098b4:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
240098b6:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240098ba:	d1bf      	bne.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
240098bc:	2310      	movs	r3, #16
240098be:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
240098c0:	e7bc      	b.n	2400983c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
240098c2:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098c4:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
240098c6:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
240098c8:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098ca:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
240098cc:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
240098ce:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
240098d0:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240098d4:	e7b2      	b.n	2400983c <HAL_SAI_InitProtocol+0xd4>
240098d6:	bf00      	nop
240098d8:	40015804 	.word	0x40015804

240098dc <HAL_SAI_Transmit_DMA>:
{
240098dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
240098e0:	460f      	mov	r7, r1
240098e2:	4604      	mov	r4, r0
240098e4:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
240098e6:	f7fa feeb 	bl	240046c0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
240098ea:	2f00      	cmp	r7, #0
240098ec:	d06b      	beq.n	240099c6 <HAL_SAI_Transmit_DMA+0xea>
240098ee:	fab5 f885 	clz	r8, r5
240098f2:	ea4f 1858 	mov.w	r8, r8, lsr #5
240098f6:	2d00      	cmp	r5, #0
240098f8:	d065      	beq.n	240099c6 <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
240098fa:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
240098fe:	2b01      	cmp	r3, #1
24009900:	fa5f f983 	uxtb.w	r9, r3
24009904:	d15a      	bne.n	240099bc <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
24009906:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400990a:	2b01      	cmp	r3, #1
2400990c:	d056      	beq.n	240099bc <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
2400990e:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009910:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009914:	4a3c      	ldr	r2, [pc, #240]	; (24009a08 <HAL_SAI_Transmit_DMA+0x12c>)
24009916:	4606      	mov	r6, r0
    hsai->XferSize = Size;
24009918:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
2400991c:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
2400991e:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
24009922:	f365 431f 	bfi	r3, r5, #16, #16
24009926:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
24009928:	2312      	movs	r3, #18
2400992a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400992e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009932:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24009934:	4a35      	ldr	r2, [pc, #212]	; (24009a0c <HAL_SAI_Transmit_DMA+0x130>)
24009936:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400993a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400993c:	4a34      	ldr	r2, [pc, #208]	; (24009a10 <HAL_SAI_Transmit_DMA+0x134>)
2400993e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009942:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
24009944:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009948:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400994c:	6822      	ldr	r2, [r4, #0]
2400994e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
24009952:	321c      	adds	r2, #28
24009954:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24009956:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400995a:	f7fb facf 	bl	24004efc <HAL_DMA_Start_IT>
2400995e:	2800      	cmp	r0, #0
24009960:	d13f      	bne.n	240099e2 <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009962:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009964:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009966:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009968:	d032      	beq.n	240099d0 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400996a:	2205      	movs	r2, #5
2400996c:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400996e:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009970:	2b01      	cmp	r3, #1
24009972:	bf98      	it	ls
24009974:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009976:	6821      	ldr	r1, [r4, #0]
24009978:	690b      	ldr	r3, [r1, #16]
2400997a:	4313      	orrs	r3, r2
2400997c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400997e:	6822      	ldr	r2, [r4, #0]
24009980:	6813      	ldr	r3, [r2, #0]
24009982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009986:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009988:	e005      	b.n	24009996 <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400998a:	f7fa fe99 	bl	240046c0 <HAL_GetTick>
2400998e:	1b83      	subs	r3, r0, r6
24009990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24009994:	d82a      	bhi.n	240099ec <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009996:	6822      	ldr	r2, [r4, #0]
24009998:	6955      	ldr	r5, [r2, #20]
2400999a:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400999e:	d0f4      	beq.n	2400998a <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
240099a0:	6813      	ldr	r3, [r2, #0]
240099a2:	03db      	lsls	r3, r3, #15
240099a4:	d403      	bmi.n	240099ae <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
240099a6:	6813      	ldr	r3, [r2, #0]
240099a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240099ac:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
240099ae:	2300      	movs	r3, #0
    return HAL_OK;
240099b0:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
240099b2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
240099b6:	4648      	mov	r0, r9
240099b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
240099bc:	f04f 0902 	mov.w	r9, #2
}
240099c0:	4648      	mov	r0, r9
240099c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
240099c6:	f04f 0901 	mov.w	r9, #1
}
240099ca:	4648      	mov	r0, r9
240099cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
240099d0:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240099d4:	2a01      	cmp	r2, #1
240099d6:	bf0b      	itete	eq
240099d8:	2215      	moveq	r2, #21
240099da:	2205      	movne	r2, #5
240099dc:	2171      	moveq	r1, #113	; 0x71
240099de:	2161      	movne	r1, #97	; 0x61
240099e0:	e7c5      	b.n	2400996e <HAL_SAI_Transmit_DMA+0x92>
}
240099e2:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
240099e4:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
240099e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240099ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
240099f0:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
240099f4:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240099f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
240099fc:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240099fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
24009a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24009a06:	bf00      	nop
24009a08:	24009b61 	.word	0x24009b61
24009a0c:	24009afd 	.word	0x24009afd
24009a10:	24009be5 	.word	0x24009be5

24009a14 <HAL_SAI_Receive_DMA>:
{
24009a14:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
24009a16:	2900      	cmp	r1, #0
24009a18:	d059      	beq.n	24009ace <HAL_SAI_Receive_DMA+0xba>
24009a1a:	fab2 f582 	clz	r5, r2
24009a1e:	096d      	lsrs	r5, r5, #5
24009a20:	2a00      	cmp	r2, #0
24009a22:	d054      	beq.n	24009ace <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
24009a24:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
24009a28:	4604      	mov	r4, r0
24009a2a:	2b01      	cmp	r3, #1
24009a2c:	b2de      	uxtb	r6, r3
24009a2e:	d14b      	bne.n	24009ac8 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
24009a30:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
24009a34:	2b01      	cmp	r3, #1
24009a36:	d047      	beq.n	24009ac8 <HAL_SAI_Receive_DMA+0xb4>
    hsai->XferSize = Size;
24009a38:	462b      	mov	r3, r5
    hsai->pBuffPtr = pData;
24009a3a:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009a3c:	2122      	movs	r1, #34	; 0x22
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009a3e:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
24009a42:	f362 030f 	bfi	r3, r2, #0, #16
    __HAL_LOCK(hsai);
24009a46:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009a4a:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
24009a4e:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009a52:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    hsai->XferSize = Size;
24009a56:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009a58:	4b25      	ldr	r3, [pc, #148]	; (24009af0 <HAL_SAI_Receive_DMA+0xdc>)
24009a5a:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24009a5c:	4a25      	ldr	r2, [pc, #148]	; (24009af4 <HAL_SAI_Receive_DMA+0xe0>)
24009a5e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009a62:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
24009a64:	4a24      	ldr	r2, [pc, #144]	; (24009af8 <HAL_SAI_Receive_DMA+0xe4>)
24009a66:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009a6a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
24009a6c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009a70:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
24009a72:	6801      	ldr	r1, [r0, #0]
24009a74:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
24009a78:	6f82      	ldr	r2, [r0, #120]	; 0x78
24009a7a:	311c      	adds	r1, #28
24009a7c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
24009a80:	f7fb fa3c 	bl	24004efc <HAL_DMA_Start_IT>
24009a84:	bb30      	cbnz	r0, 24009ad4 <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009a88:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009a8a:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009a8c:	d026      	beq.n	24009adc <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009a8e:	2205      	movs	r2, #5
24009a90:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009a92:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009a94:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009a96:	2b01      	cmp	r3, #1
24009a98:	bf98      	it	ls
24009a9a:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009a9c:	690b      	ldr	r3, [r1, #16]
24009a9e:	4313      	orrs	r3, r2
24009aa0:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009aa2:	6822      	ldr	r2, [r4, #0]
24009aa4:	6813      	ldr	r3, [r2, #0]
24009aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009aaa:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009aac:	6823      	ldr	r3, [r4, #0]
24009aae:	681a      	ldr	r2, [r3, #0]
24009ab0:	03d2      	lsls	r2, r2, #15
24009ab2:	d403      	bmi.n	24009abc <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
24009ab4:	681a      	ldr	r2, [r3, #0]
24009ab6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24009aba:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
24009abc:	2300      	movs	r3, #0
    return HAL_OK;
24009abe:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
24009ac0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009ac4:	4630      	mov	r0, r6
24009ac6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
24009ac8:	2602      	movs	r6, #2
}
24009aca:	4630      	mov	r0, r6
24009acc:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
24009ace:	2601      	movs	r6, #1
}
24009ad0:	4630      	mov	r0, r6
24009ad2:	bd70      	pop	{r4, r5, r6, pc}
24009ad4:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
24009ad6:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
24009ada:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009adc:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009ae0:	2a01      	cmp	r2, #1
24009ae2:	bf0b      	itete	eq
24009ae4:	2215      	moveq	r2, #21
24009ae6:	2205      	movne	r2, #5
24009ae8:	2071      	moveq	r0, #113	; 0x71
24009aea:	2061      	movne	r0, #97	; 0x61
24009aec:	e7d1      	b.n	24009a92 <HAL_SAI_Receive_DMA+0x7e>
24009aee:	bf00      	nop
24009af0:	24009bd9 	.word	0x24009bd9
24009af4:	24009b71 	.word	0x24009b71
24009af8:	24009be5 	.word	0x24009be5

24009afc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24009afc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009afe:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009b00:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009b06:	d01b      	beq.n	24009b40 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009b08:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009b0a:	2300      	movs	r3, #0
24009b0c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009b10:	6813      	ldr	r3, [r2, #0]
24009b12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009b16:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b18:	6c43      	ldr	r3, [r0, #68]	; 0x44
24009b1a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b1c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b1e:	d012      	beq.n	24009b46 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b20:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009b24:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b28:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009b2a:	3b02      	subs	r3, #2
24009b2c:	2b01      	cmp	r3, #1
24009b2e:	bf98      	it	ls
24009b30:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b32:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009b34:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b38:	4013      	ands	r3, r2
24009b3a:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009b3c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
24009b40:	f023 fdaa 	bl	2402d698 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
24009b44:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b46:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b4a:	2a01      	cmp	r2, #1
24009b4c:	bf0b      	itete	eq
24009b4e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009b52:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009b56:	f06f 0215 	mvneq.w	r2, #21
24009b5a:	f06f 0205 	mvnne.w	r2, #5
24009b5e:	e7e3      	b.n	24009b28 <SAI_DMATxCplt+0x2c>

24009b60 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009b60:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24009b62:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009b64:	f023 fdac 	bl	2402d6c0 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
24009b68:	bd08      	pop	{r3, pc}
24009b6a:	bf00      	nop

24009b6c <HAL_SAI_RxCpltCallback>:
24009b6c:	4770      	bx	lr
24009b6e:	bf00      	nop

24009b70 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
24009b70:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009b72:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009b74:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009b7a:	d01b      	beq.n	24009bb4 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009b7c:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009b7e:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009b80:	6813      	ldr	r3, [r2, #0]
24009b82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009b86:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b88:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
24009b8a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b8e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b90:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b92:	d012      	beq.n	24009bba <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b94:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009b98:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b9c:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009b9e:	3b02      	subs	r3, #2
24009ba0:	2b01      	cmp	r3, #1
24009ba2:	bf98      	it	ls
24009ba4:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009ba6:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009ba8:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009bac:	4013      	ands	r3, r2
24009bae:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009bb0:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
24009bb4:	f7ff ffda 	bl	24009b6c <HAL_SAI_RxCpltCallback>
#endif
}
24009bb8:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009bba:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009bbe:	2a01      	cmp	r2, #1
24009bc0:	bf0b      	itete	eq
24009bc2:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009bc6:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009bca:	f06f 0215 	mvneq.w	r2, #21
24009bce:	f06f 0205 	mvnne.w	r2, #5
24009bd2:	e7e3      	b.n	24009b9c <SAI_DMARxCplt+0x2c>

24009bd4 <HAL_SAI_RxHalfCpltCallback>:
24009bd4:	4770      	bx	lr
24009bd6:	bf00      	nop

24009bd8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009bd8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
24009bda:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009bdc:	f7ff fffa 	bl	24009bd4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
24009be0:	bd08      	pop	{r3, pc}
24009be2:	bf00      	nop

24009be4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24009be4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009be6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24009be8:	f7fc f9ec 	bl	24005fc4 <HAL_DMA_GetError>
24009bec:	2802      	cmp	r0, #2
24009bee:	d025      	beq.n	24009c3c <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009bf0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24009bf4:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009bf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009bfa:	4b14      	ldr	r3, [pc, #80]	; (24009c4c <SAI_DMAError+0x68>)
24009bfc:	4814      	ldr	r0, [pc, #80]	; (24009c50 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009bfe:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24009c02:	680a      	ldr	r2, [r1, #0]
24009c04:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
24009c08:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c0a:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
24009c0c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c0e:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
24009c12:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c14:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c1a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24009c1c:	600a      	str	r2, [r1, #0]
    if (count == 0U)
24009c1e:	b173      	cbz	r3, 24009c3e <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009c20:	6822      	ldr	r2, [r4, #0]
    count--;
24009c22:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009c24:	6812      	ldr	r2, [r2, #0]
24009c26:	03d2      	lsls	r2, r2, #15
24009c28:	d4f9      	bmi.n	24009c1e <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
24009c2a:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
24009c2c:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
24009c2e:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
24009c30:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
24009c34:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
24009c38:	f023 fd5a 	bl	2402d6f0 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
24009c3c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009c3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
24009c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009c46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
24009c4a:	e7ee      	b.n	24009c2a <SAI_DMAError+0x46>
24009c4c:	200006e0 	.word	0x200006e0
24009c50:	95cbec1b 	.word	0x95cbec1b

24009c54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
24009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24009c58:	4605      	mov	r5, r0
24009c5a:	b086      	sub	sp, #24
24009c5c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
24009c5e:	f7fa fd2f 	bl	240046c0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
24009c62:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
24009c64:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
24009c66:	6828      	ldr	r0, [r5, #0]
24009c68:	f001 fd38 	bl	2400b6dc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009c6c:	4604      	mov	r4, r0
24009c6e:	b118      	cbz	r0, 24009c78 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
24009c70:	4620      	mov	r0, r4
24009c72:	b006      	add	sp, #24
24009c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
24009c78:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009c7a:	6828      	ldr	r0, [r5, #0]
24009c7c:	0409      	lsls	r1, r1, #16
24009c7e:	f002 fa87 	bl	2400c190 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24009c82:	4604      	mov	r4, r0
24009c84:	2800      	cmp	r0, #0
24009c86:	d1f3      	bne.n	24009c70 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24009c8c:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009c8e:	4669      	mov	r1, sp
24009c90:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009c92:	e9cd 2300 	strd	r2, r3, [sp]
24009c96:	2230      	movs	r2, #48	; 0x30
24009c98:	2302      	movs	r3, #2
24009c9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
24009c9e:	2200      	movs	r2, #0
24009ca0:	2301      	movs	r3, #1
24009ca2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009ca6:	f001 fd03 	bl	2400b6b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
24009caa:	6828      	ldr	r0, [r5, #0]
24009cac:	f002 fbf6 	bl	2400c49c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
24009cb0:	4604      	mov	r4, r0
24009cb2:	2800      	cmp	r0, #0
24009cb4:	d1dc      	bne.n	24009c70 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
24009cb6:	4682      	mov	sl, r0
24009cb8:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009cba:	f240 582a 	movw	r8, #1322	; 0x52a
24009cbe:	e004      	b.n	24009cca <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009cc0:	f7fa fcfe 	bl	240046c0 <HAL_GetTick>
24009cc4:	1b83      	subs	r3, r0, r6
24009cc6:	3301      	adds	r3, #1
24009cc8:	d024      	beq.n	24009d14 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009cca:	6828      	ldr	r0, [r5, #0]
24009ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009cce:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009cd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009cd4:	d10c      	bne.n	24009cf0 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009cd6:	0319      	lsls	r1, r3, #12
24009cd8:	d4f2      	bmi.n	24009cc0 <SD_FindSCR+0x6c>
24009cda:	2c00      	cmp	r4, #0
24009cdc:	d1f0      	bne.n	24009cc0 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
24009cde:	f001 fccd 	bl	2400b67c <SDMMC_ReadFIFO>
24009ce2:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009ce4:	6828      	ldr	r0, [r5, #0]
      index++;
24009ce6:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009ce8:	f001 fcc8 	bl	2400b67c <SDMMC_ReadFIFO>
24009cec:	4682      	mov	sl, r0
      index++;
24009cee:	e7e7      	b.n	24009cc0 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009cf0:	071a      	lsls	r2, r3, #28
24009cf2:	d416      	bmi.n	24009d22 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009cf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009cf6:	079b      	lsls	r3, r3, #30
24009cf8:	d40f      	bmi.n	24009d1a <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009cfa:	6b44      	ldr	r4, [r0, #52]	; 0x34
24009cfc:	f014 0420 	ands.w	r4, r4, #32
24009d00:	d113      	bne.n	24009d2a <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009d02:	fa9a f28a 	rev.w	r2, sl
24009d06:	fa99 f389 	rev.w	r3, r9
24009d0a:	490a      	ldr	r1, [pc, #40]	; (24009d34 <SD_FindSCR+0xe0>)
24009d0c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
24009d0e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
24009d12:	e7ad      	b.n	24009c70 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
24009d14:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
24009d18:	e7aa      	b.n	24009c70 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009d1a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009d1c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009d1e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009d20:	e7a6      	b.n	24009c70 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009d22:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009d24:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009d26:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009d28:	e7a2      	b.n	24009c70 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
24009d2a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
24009d2c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
24009d2e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
24009d30:	e79e      	b.n	24009c70 <SD_FindSCR+0x1c>
24009d32:	bf00      	nop
24009d34:	18000f3a 	.word	0x18000f3a

24009d38 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
24009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24009d3c:	4604      	mov	r4, r0
24009d3e:	b096      	sub	sp, #88	; 0x58
24009d40:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
24009d42:	f7fa fcbd 	bl	240046c0 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009d46:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
24009d48:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009d4a:	6820      	ldr	r0, [r4, #0]
24009d4c:	f001 fcac 	bl	2400b6a8 <SDMMC_GetResponse>
24009d50:	0182      	lsls	r2, r0, #6
24009d52:	d45c      	bmi.n	24009e0e <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
24009d54:	2140      	movs	r1, #64	; 0x40
24009d56:	6820      	ldr	r0, [r4, #0]
24009d58:	f001 fcc0 	bl	2400b6dc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009d5c:	4603      	mov	r3, r0
24009d5e:	b1e8      	cbz	r0, 24009d9c <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
24009d60:	6b62      	ldr	r2, [r4, #52]	; 0x34
24009d62:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d64:	6820      	ldr	r0, [r4, #0]
24009d66:	4956      	ldr	r1, [pc, #344]	; (24009ec0 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
24009d68:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d6a:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
24009d6c:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
24009d6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
24009d70:	4303      	orrs	r3, r0
24009d72:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009d74:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24009d78:	f44f 7100 	mov.w	r1, #512	; 0x200
24009d7c:	6820      	ldr	r0, [r4, #0]
24009d7e:	f001 fcad 	bl	2400b6dc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009d82:	b138      	cbz	r0, 24009d94 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
24009d84:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d86:	6822      	ldr	r2, [r4, #0]
24009d88:	494d      	ldr	r1, [pc, #308]	; (24009ec0 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
24009d8a:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d8c:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
24009d8e:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009d90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
24009d94:	4630      	mov	r0, r6
24009d96:	b016      	add	sp, #88	; 0x58
24009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24009d9c:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009d9e:	6820      	ldr	r0, [r4, #0]
24009da0:	0409      	lsls	r1, r1, #16
24009da2:	f002 f9f5 	bl	2400c190 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24009da6:	4603      	mov	r3, r0
24009da8:	2800      	cmp	r0, #0
24009daa:	d1d9      	bne.n	24009d60 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24009db0:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009db2:	4669      	mov	r1, sp
24009db4:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009db6:	e9cd 2300 	strd	r2, r3, [sp]
24009dba:	2260      	movs	r2, #96	; 0x60
24009dbc:	2302      	movs	r3, #2
24009dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
24009dc2:	2301      	movs	r3, #1
24009dc4:	2200      	movs	r2, #0
24009dc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009dca:	f001 fc71 	bl	2400b6b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
24009dce:	6820      	ldr	r0, [r4, #0]
24009dd0:	f002 fd88 	bl	2400c8e4 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
24009dd4:	4603      	mov	r3, r0
24009dd6:	2800      	cmp	r0, #0
24009dd8:	d1c2      	bne.n	24009d60 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
24009dda:	ae06      	add	r6, sp, #24
24009ddc:	e004      	b.n	24009de8 <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009dde:	f7fa fc6f 	bl	240046c0 <HAL_GetTick>
24009de2:	1bc0      	subs	r0, r0, r7
24009de4:	3001      	adds	r0, #1
24009de6:	d016      	beq.n	24009e16 <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009de8:	6820      	ldr	r0, [r4, #0]
24009dea:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009dec:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009df0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009df2:	d113      	bne.n	24009e1c <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009df4:	041b      	lsls	r3, r3, #16
24009df6:	d5f2      	bpl.n	24009dde <HAL_SD_GetCardStatus.part.0+0xa6>
24009df8:	f106 0820 	add.w	r8, r6, #32
24009dfc:	e000      	b.n	24009e00 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
24009dfe:	6820      	ldr	r0, [r4, #0]
24009e00:	f001 fc3c 	bl	2400b67c <SDMMC_ReadFIFO>
24009e04:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
24009e08:	4546      	cmp	r6, r8
24009e0a:	d1f8      	bne.n	24009dfe <HAL_SD_GetCardStatus.part.0+0xc6>
24009e0c:	e7e7      	b.n	24009dde <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009e0e:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
24009e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
24009e14:	e7a7      	b.n	24009d66 <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
24009e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24009e1a:	e7a3      	b.n	24009d64 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009e1c:	0719      	lsls	r1, r3, #28
24009e1e:	d448      	bmi.n	24009eb2 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009e20:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e22:	079a      	lsls	r2, r3, #30
24009e24:	d447      	bmi.n	24009eb6 <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e28:	069b      	lsls	r3, r3, #26
24009e2a:	d50a      	bpl.n	24009e42 <HAL_SD_GetCardStatus.part.0+0x10a>
24009e2c:	e045      	b.n	24009eba <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
24009e2e:	f001 fc25 	bl	2400b67c <SDMMC_ReadFIFO>
24009e32:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009e36:	f7fa fc43 	bl	240046c0 <HAL_GetTick>
24009e3a:	1bc0      	subs	r0, r0, r7
24009e3c:	3001      	adds	r0, #1
24009e3e:	d0ea      	beq.n	24009e16 <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
24009e40:	6820      	ldr	r0, [r4, #0]
24009e42:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e44:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
24009e48:	d1f1      	bne.n	24009e2e <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009e4a:	4a1e      	ldr	r2, [pc, #120]	; (24009ec4 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
24009e4c:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24009e4e:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009e50:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24009e52:	f3c3 1281 	ubfx	r2, r3, #6, #2
24009e56:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
24009e58:	f3c3 1240 	ubfx	r2, r3, #5, #1
24009e5c:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24009e5e:	0a1a      	lsrs	r2, r3, #8
24009e60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
24009e64:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
24009e68:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
24009e6c:	b292      	uxth	r2, r2
24009e6e:	ba09      	rev	r1, r1
24009e70:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24009e72:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
24009e74:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24009e76:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24009e78:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24009e7c:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24009e80:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24009e82:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24009e86:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24009e88:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24009e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
24009e8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24009e90:	b2d0      	uxtb	r0, r2
24009e92:	4303      	orrs	r3, r0
24009e94:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
24009e96:	f3c2 2385 	ubfx	r3, r2, #10, #6
24009e9a:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
24009e9c:	f3c2 2301 	ubfx	r3, r2, #8, #2
24009ea0:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24009ea2:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24009ea6:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24009eaa:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24009eac:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24009eae:	74a9      	strb	r1, [r5, #18]
24009eb0:	e762      	b.n	24009d78 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009eb2:	2308      	movs	r3, #8
24009eb4:	e757      	b.n	24009d66 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009eb6:	2302      	movs	r3, #2
24009eb8:	e755      	b.n	24009d66 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
24009eba:	2320      	movs	r3, #32
24009ebc:	e753      	b.n	24009d66 <HAL_SD_GetCardStatus.part.0+0x2e>
24009ebe:	bf00      	nop
24009ec0:	1fe00fff 	.word	0x1fe00fff
24009ec4:	18000f3a 	.word	0x18000f3a

24009ec8 <HAL_SD_ReadBlocks>:
{
24009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24009ecc:	460d      	mov	r5, r1
24009ece:	b087      	sub	sp, #28
24009ed0:	4604      	mov	r4, r0
24009ed2:	4692      	mov	sl, r2
24009ed4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
24009ed6:	f7fa fbf3 	bl	240046c0 <HAL_GetTick>
  if (NULL == pData)
24009eda:	2d00      	cmp	r5, #0
24009edc:	f000 8093 	beq.w	2400a006 <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
24009ee0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
24009ee4:	2b01      	cmp	r3, #1
24009ee6:	fa5f f983 	uxtb.w	r9, r3
24009eea:	d17b      	bne.n	24009fe4 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009eec:	eb0a 0307 	add.w	r3, sl, r7
24009ef0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009ef2:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009ef4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009ef6:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009ef8:	f200 808f 	bhi.w	2400a01a <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
24009efc:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009efe:	f04f 0b02 	mov.w	fp, #2
24009f02:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
24009f04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
24009f08:	6823      	ldr	r3, [r4, #0]
24009f0a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009f0c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009f10:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009f12:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24009f14:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
24009f18:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
24009f20:	bf18      	it	ne
24009f22:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009f26:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
24009f28:	027b      	lsls	r3, r7, #9
24009f2a:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009f2c:	2390      	movs	r3, #144	; 0x90
24009f2e:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009f32:	f001 fbbd 	bl	2400b6b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24009f36:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
24009f38:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24009f3a:	68d3      	ldr	r3, [r2, #12]
24009f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009f40:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
24009f42:	d959      	bls.n	24009ff8 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
24009f44:	4651      	mov	r1, sl
24009f46:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
24009f48:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
24009f4c:	f001 fd12 	bl	2400b974 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
24009f50:	2800      	cmp	r0, #0
24009f52:	d16a      	bne.n	2400a02a <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
24009f54:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009f58:	e005      	b.n	24009f66 <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24009f5a:	f7fa fbb1 	bl	240046c0 <HAL_GetTick>
24009f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
24009f60:	1b80      	subs	r0, r0, r6
24009f62:	4298      	cmp	r0, r3
24009f64:	d22c      	bcs.n	24009fc0 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009f66:	6820      	ldr	r0, [r4, #0]
24009f68:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f6a:	f413 7f95 	tst.w	r3, #298	; 0x12a
24009f6e:	d168      	bne.n	2400a042 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
24009f70:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f72:	041a      	lsls	r2, r3, #16
24009f74:	d5f1      	bpl.n	24009f5a <HAL_SD_ReadBlocks+0x92>
24009f76:	f1bb 0f1f 	cmp.w	fp, #31
24009f7a:	d9ee      	bls.n	24009f5a <HAL_SD_ReadBlocks+0x92>
24009f7c:	f105 0804 	add.w	r8, r5, #4
24009f80:	f105 0a24 	add.w	sl, r5, #36	; 0x24
24009f84:	e000      	b.n	24009f88 <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
24009f86:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
24009f88:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
24009f8c:	f001 fb76 	bl	2400b67c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
24009f90:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
24009f94:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
24009f96:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
24009f98:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
24009f9c:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
24009fa0:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
24009fa4:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
24009fa8:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
24009fac:	d1eb      	bne.n	24009f86 <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24009fae:	f7fa fb87 	bl	240046c0 <HAL_GetTick>
24009fb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
24009fb4:	1b80      	subs	r0, r0, r6
          tempbuff++;
24009fb6:	3520      	adds	r5, #32
        dataremaining -= 32U;
24009fb8:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24009fbc:	4298      	cmp	r0, r3
24009fbe:	d3d2      	bcc.n	24009f66 <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009fc0:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
24009fc2:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009fc6:	4842      	ldr	r0, [pc, #264]	; (2400a0d0 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
24009fc8:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
24009fca:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009fcc:	6398      	str	r0, [r3, #56]	; 0x38
}
24009fce:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
24009fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
24009fd6:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
24009fd8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
24009fdc:	62e2      	str	r2, [r4, #44]	; 0x2c
}
24009fde:	b007      	add	sp, #28
24009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24009fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
24009fe6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24009fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24009fee:	6363      	str	r3, [r4, #52]	; 0x34
}
24009ff0:	4648      	mov	r0, r9
24009ff2:	b007      	add	sp, #28
24009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
24009ff8:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
24009ffa:	4651      	mov	r1, sl
24009ffc:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
24009ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a000:	f001 fc12 	bl	2400b828 <SDMMC_CmdReadSingleBlock>
2400a004:	e7a4      	b.n	24009f50 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a006:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a008:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a00c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a010:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a012:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a014:	b007      	add	sp, #28
2400a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a01a:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a01c:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a01e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a022:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a024:	b007      	add	sp, #28
2400a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a02a:	6823      	ldr	r3, [r4, #0]
2400a02c:	4a28      	ldr	r2, [pc, #160]	; (2400a0d0 <HAL_SD_ReadBlocks+0x208>)
2400a02e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a030:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a032:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a034:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400a036:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400a038:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400a03a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a03e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a040:	e7d6      	b.n	24009ff0 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a042:	68c3      	ldr	r3, [r0, #12]
2400a044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a048:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a04a:	6820      	ldr	r0, [r4, #0]
2400a04c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a04e:	05db      	lsls	r3, r3, #23
2400a050:	d509      	bpl.n	2400a066 <HAL_SD_ReadBlocks+0x19e>
2400a052:	2f01      	cmp	r7, #1
2400a054:	d907      	bls.n	2400a066 <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a058:	2b03      	cmp	r3, #3
2400a05a:	d004      	beq.n	2400a066 <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a05c:	f001 fe7c 	bl	2400bd58 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a060:	2800      	cmp	r0, #0
2400a062:	d1e2      	bne.n	2400a02a <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a064:	6820      	ldr	r0, [r4, #0]
2400a066:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a068:	f013 0308 	ands.w	r3, r3, #8
2400a06c:	d112      	bne.n	2400a094 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a06e:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a070:	f012 0202 	ands.w	r2, r2, #2
2400a074:	d11a      	bne.n	2400a0ac <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a076:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a078:	f013 0320 	ands.w	r3, r3, #32
2400a07c:	d021      	beq.n	2400a0c2 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a07e:	4b14      	ldr	r3, [pc, #80]	; (2400a0d0 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a080:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a082:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400a084:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a086:	f043 0320 	orr.w	r3, r3, #32
2400a08a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a08c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a090:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a092:	e7ad      	b.n	24009ff0 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a094:	4b0e      	ldr	r3, [pc, #56]	; (2400a0d0 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a096:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a098:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a09a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a09c:	f043 0308 	orr.w	r3, r3, #8
2400a0a0:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a0a2:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a0a4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a0a8:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a0aa:	e7a1      	b.n	24009ff0 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0ac:	4a08      	ldr	r2, [pc, #32]	; (2400a0d0 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a0ae:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0b0:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a0b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a0b4:	f042 0202 	orr.w	r2, r2, #2
2400a0b8:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a0ba:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a0be:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a0c0:	e796      	b.n	24009ff0 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a0c2:	4904      	ldr	r1, [pc, #16]	; (2400a0d4 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
2400a0c4:	2201      	movs	r2, #1
    return HAL_OK;
2400a0c6:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a0c8:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a0ca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a0ce:	e78f      	b.n	24009ff0 <HAL_SD_ReadBlocks+0x128>
2400a0d0:	1fe00fff 	.word	0x1fe00fff
2400a0d4:	18000f3a 	.word	0x18000f3a

2400a0d8 <HAL_SD_WriteBlocks>:
{
2400a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a0dc:	460d      	mov	r5, r1
2400a0de:	b089      	sub	sp, #36	; 0x24
2400a0e0:	4604      	mov	r4, r0
2400a0e2:	4692      	mov	sl, r2
2400a0e4:	461f      	mov	r7, r3
2400a0e6:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400a0ea:	f7fa fae9 	bl	240046c0 <HAL_GetTick>
  if (NULL == pData)
2400a0ee:	2d00      	cmp	r5, #0
2400a0f0:	d07c      	beq.n	2400a1ec <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
2400a0f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a0f6:	2b01      	cmp	r3, #1
2400a0f8:	fa5f f983 	uxtb.w	r9, r3
2400a0fc:	d166      	bne.n	2400a1cc <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a0fe:	eb0a 0307 	add.w	r3, sl, r7
2400a102:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a104:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a106:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a108:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a10a:	d879      	bhi.n	2400a200 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
2400a10c:	2303      	movs	r3, #3
2400a10e:	4606      	mov	r6, r0
2400a110:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a114:	6823      	ldr	r3, [r4, #0]
2400a116:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a118:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a11a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a11c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a11e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400a120:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a124:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a128:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a12a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a12e:	bf18      	it	ne
2400a130:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a134:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a136:	027b      	lsls	r3, r7, #9
2400a138:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400a13a:	2390      	movs	r3, #144	; 0x90
2400a13c:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a13e:	f001 fab7 	bl	2400b6b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a142:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a144:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a146:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a148:	68d3      	ldr	r3, [r2, #12]
2400a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a14e:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a150:	d946      	bls.n	2400a1e0 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a152:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a154:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a156:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a158:	f001 fd58 	bl	2400bc0c <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a15c:	2800      	cmp	r0, #0
2400a15e:	d157      	bne.n	2400a210 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
2400a160:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a164:	e004      	b.n	2400a170 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a166:	f7fa faab 	bl	240046c0 <HAL_GetTick>
2400a16a:	1b80      	subs	r0, r0, r6
2400a16c:	4540      	cmp	r0, r8
2400a16e:	d21d      	bcs.n	2400a1ac <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a170:	6820      	ldr	r0, [r4, #0]
2400a172:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a174:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400a178:	d156      	bne.n	2400a228 <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400a17a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a17c:	045a      	lsls	r2, r3, #17
2400a17e:	d5f2      	bpl.n	2400a166 <HAL_SD_WriteBlocks+0x8e>
2400a180:	f1bb 0f1f 	cmp.w	fp, #31
2400a184:	d9ef      	bls.n	2400a166 <HAL_SD_WriteBlocks+0x8e>
2400a186:	f105 0a20 	add.w	sl, r5, #32
2400a18a:	e000      	b.n	2400a18e <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a18c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a18e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a192:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a194:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a196:	f001 fa75 	bl	2400b684 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400a19a:	4555      	cmp	r5, sl
2400a19c:	d1f6      	bne.n	2400a18c <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a19e:	f7fa fa8f 	bl	240046c0 <HAL_GetTick>
2400a1a2:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
2400a1a4:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a1a8:	4540      	cmp	r0, r8
2400a1aa:	d3e1      	bcc.n	2400a170 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a1ac:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
2400a1ae:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a1b2:	4841      	ldr	r0, [pc, #260]	; (2400a2b8 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
2400a1b4:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
2400a1b6:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a1b8:	6388      	str	r0, [r1, #56]	; 0x38
}
2400a1ba:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
2400a1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400a1be:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a1c0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a1c4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
2400a1c6:	b009      	add	sp, #36	; 0x24
2400a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a1ce:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a1d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a1d6:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a1d8:	4648      	mov	r0, r9
2400a1da:	b009      	add	sp, #36	; 0x24
2400a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a1e0:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a1e2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a1e6:	f001 fc6b 	bl	2400bac0 <SDMMC_CmdWriteSingleBlock>
2400a1ea:	e7b7      	b.n	2400a15c <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a1ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a1ee:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a1f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a1f6:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a1f8:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a1fa:	b009      	add	sp, #36	; 0x24
2400a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a200:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a202:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a208:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a20a:	b009      	add	sp, #36	; 0x24
2400a20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a210:	6823      	ldr	r3, [r4, #0]
2400a212:	4a29      	ldr	r2, [pc, #164]	; (2400a2b8 <HAL_SD_WriteBlocks+0x1e0>)
2400a214:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a216:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a218:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a21a:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400a21c:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400a21e:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400a220:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a224:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a226:	e7d7      	b.n	2400a1d8 <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a228:	68c3      	ldr	r3, [r0, #12]
2400a22a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a22e:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a230:	6820      	ldr	r0, [r4, #0]
2400a232:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a234:	05db      	lsls	r3, r3, #23
2400a236:	d509      	bpl.n	2400a24c <HAL_SD_WriteBlocks+0x174>
2400a238:	2f01      	cmp	r7, #1
2400a23a:	d907      	bls.n	2400a24c <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a23c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a23e:	2b03      	cmp	r3, #3
2400a240:	d004      	beq.n	2400a24c <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a242:	f001 fd89 	bl	2400bd58 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a246:	2800      	cmp	r0, #0
2400a248:	d1e2      	bne.n	2400a210 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a24a:	6820      	ldr	r0, [r4, #0]
2400a24c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a24e:	f013 0308 	ands.w	r3, r3, #8
2400a252:	d112      	bne.n	2400a27a <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a254:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a256:	f012 0202 	ands.w	r2, r2, #2
2400a25a:	d11a      	bne.n	2400a292 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400a25c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a25e:	f013 0310 	ands.w	r3, r3, #16
2400a262:	d021      	beq.n	2400a2a8 <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a264:	4b14      	ldr	r3, [pc, #80]	; (2400a2b8 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a266:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a268:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400a26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a26c:	f043 0310 	orr.w	r3, r3, #16
2400a270:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a272:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a276:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a278:	e7ae      	b.n	2400a1d8 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a27a:	4b0f      	ldr	r3, [pc, #60]	; (2400a2b8 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a27c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a27e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a280:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a282:	f043 0308 	orr.w	r3, r3, #8
2400a286:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a288:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a28a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a28e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a290:	e7a2      	b.n	2400a1d8 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a292:	4a09      	ldr	r2, [pc, #36]	; (2400a2b8 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a294:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a296:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a298:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a29a:	f042 0202 	orr.w	r2, r2, #2
2400a29e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a2a0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a2a6:	e797      	b.n	2400a1d8 <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a2a8:	4904      	ldr	r1, [pc, #16]	; (2400a2bc <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
2400a2aa:	2201      	movs	r2, #1
    return HAL_OK;
2400a2ac:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a2ae:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a2b0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a2b4:	e790      	b.n	2400a1d8 <HAL_SD_WriteBlocks+0x100>
2400a2b6:	bf00      	nop
2400a2b8:	1fe00fff 	.word	0x1fe00fff
2400a2bc:	18000f3a 	.word	0x18000f3a

2400a2c0 <HAL_SD_GetCardCSD>:
{
2400a2c0:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a2c2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a2c4:	f04f 0c00 	mov.w	ip, #0
{
2400a2c8:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a2ca:	0f92      	lsrs	r2, r2, #30
2400a2cc:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400a2ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400a2d0:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400a2d4:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400a2d6:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400a2da:	f002 0203 	and.w	r2, r2, #3
2400a2de:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400a2e0:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400a2e4:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400a2e6:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400a2ea:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400a2ec:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400a2f0:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400a2f2:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a2f4:	0d12      	lsrs	r2, r2, #20
2400a2f6:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400a2f8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400a2fc:	f002 020f 	and.w	r2, r2, #15
2400a300:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400a302:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a304:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a308:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400a30a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a30c:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a310:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400a312:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a314:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a318:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400a31a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a31c:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a320:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a322:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400a326:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400a328:	2a00      	cmp	r2, #0
2400a32a:	f040 808a 	bne.w	2400a442 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400a32e:	f640 72fc 	movw	r2, #4092	; 0xffc
2400a332:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
2400a336:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400a33a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400a33e:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400a340:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a342:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400a346:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400a348:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400a34c:	f002 0207 	and.w	r2, r2, #7
2400a350:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400a352:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a354:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400a358:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400a35a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a35c:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400a360:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400a362:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a364:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400a368:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400a36a:	690a      	ldr	r2, [r1, #16]
2400a36c:	3201      	adds	r2, #1
2400a36e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a370:	7e08      	ldrb	r0, [r1, #24]
2400a372:	f000 0007 	and.w	r0, r0, #7
2400a376:	3002      	adds	r0, #2
2400a378:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a37a:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a37c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a37e:	f891 c008 	ldrb.w	ip, [r1, #8]
2400a382:	f00c 0c0f 	and.w	ip, ip, #15
2400a386:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a38a:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a38e:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
2400a390:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a394:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
2400a398:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a39c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
2400a39e:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400a3a0:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a3a4:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a3a8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400a3aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3ac:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400a3b0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400a3b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400a3b8:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400a3ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3bc:	0fd2      	lsrs	r2, r2, #31
2400a3be:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400a3c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3c2:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400a3c6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400a3c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3ca:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400a3ce:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400a3d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3d2:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400a3d6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400a3d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3da:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400a3de:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400a3e2:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400a3e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400a3ea:	ea02 020c 	and.w	r2, r2, ip
2400a3ee:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400a3f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3f4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a3f8:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400a3fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a3fe:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a402:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400a406:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a408:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a40c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400a410:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a412:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a416:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400a41a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a41c:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400a420:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400a424:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a426:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400a42a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400a42e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400a430:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400a434:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400a438:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400a43c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a440:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400a442:	2a01      	cmp	r2, #1
2400a444:	d112      	bne.n	2400a46c <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a446:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a448:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400a44c:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a450:	0412      	lsls	r2, r2, #16
2400a452:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400a456:	ea42 020c 	orr.w	r2, r2, ip
2400a45a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a45c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400a45e:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a460:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a462:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a464:	0292      	lsls	r2, r2, #10
2400a466:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400a468:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a46a:	e797      	b.n	2400a39c <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a46c:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a46e:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a470:	4805      	ldr	r0, [pc, #20]	; (2400a488 <HAL_SD_GetCardCSD+0x1c8>)
2400a472:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400a474:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400a47c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a47e:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400a482:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a486:	4770      	bx	lr
2400a488:	1fe00fff 	.word	0x1fe00fff

2400a48c <HAL_SD_InitCard>:
{
2400a48c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a48e:	2200      	movs	r2, #0
{
2400a490:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a492:	2300      	movs	r3, #0
{
2400a494:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a496:	2100      	movs	r1, #0
2400a498:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a49c:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400a4a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a4a4:	f7fe fd46 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400a4a8:	b940      	cbnz	r0, 2400a4bc <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400a4aa:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a4ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400a4b0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a4b4:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a4b6:	4630      	mov	r0, r6
2400a4b8:	b015      	add	sp, #84	; 0x54
2400a4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a4bc:	0a06      	lsrs	r6, r0, #8
2400a4be:	4b8f      	ldr	r3, [pc, #572]	; (2400a6fc <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400a4c0:	aa07      	add	r2, sp, #28
2400a4c2:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a4c4:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400a4c8:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a4ca:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400a4cc:	9608      	str	r6, [sp, #32]
2400a4ce:	e892 0003 	ldmia.w	r2, {r0, r1}
2400a4d2:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a4d6:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a4d8:	6820      	ldr	r0, [r4, #0]
2400a4da:	f001 f8b3 	bl	2400b644 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400a4de:	6820      	ldr	r0, [r4, #0]
2400a4e0:	f001 f8d6 	bl	2400b690 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400a4e4:	4b86      	ldr	r3, [pc, #536]	; (2400a700 <HAL_SD_InitCard+0x274>)
2400a4e6:	429d      	cmp	r5, r3
2400a4e8:	d902      	bls.n	2400a4f0 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400a4ea:	0076      	lsls	r6, r6, #1
2400a4ec:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400a4f0:	4884      	ldr	r0, [pc, #528]	; (2400a704 <HAL_SD_InitCard+0x278>)
2400a4f2:	fbb0 f0f5 	udiv	r0, r0, r5
2400a4f6:	3001      	adds	r0, #1
2400a4f8:	f7fa f8e8 	bl	240046cc <HAL_Delay>
  __IO uint32_t count = 0U;
2400a4fc:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a4fe:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400a500:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a502:	f001 fdd9 	bl	2400c0b8 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a506:	4605      	mov	r5, r0
2400a508:	b140      	cbz	r0, 2400a51c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400a50a:	2601      	movs	r6, #1
2400a50c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400a510:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400a512:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a514:	431d      	orrs	r5, r3
2400a516:	6365      	str	r5, [r4, #52]	; 0x34
}
2400a518:	b015      	add	sp, #84	; 0x54
2400a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400a51c:	6820      	ldr	r0, [r4, #0]
2400a51e:	f001 fdf7 	bl	2400c110 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400a522:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400a526:	d06c      	beq.n	2400a602 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400a528:	2301      	movs	r3, #1
2400a52a:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a52c:	2100      	movs	r1, #0
2400a52e:	6820      	ldr	r0, [r4, #0]
2400a530:	f001 fe2e 	bl	2400c190 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a534:	bb08      	cbnz	r0, 2400a57a <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a536:	9b03      	ldr	r3, [sp, #12]
2400a538:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400a53c:	42b3      	cmp	r3, r6
2400a53e:	f200 80d6 	bhi.w	2400a6ee <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a542:	4f71      	ldr	r7, [pc, #452]	; (2400a708 <HAL_SD_InitCard+0x27c>)
2400a544:	e00b      	b.n	2400a55e <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a546:	6820      	ldr	r0, [r4, #0]
2400a548:	f001 f8ae 	bl	2400b6a8 <SDMMC_GetResponse>
    count++;
2400a54c:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a54e:	2800      	cmp	r0, #0
    count++;
2400a550:	f103 0301 	add.w	r3, r3, #1
2400a554:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a556:	9b03      	ldr	r3, [sp, #12]
2400a558:	db12      	blt.n	2400a580 <HAL_SD_InitCard+0xf4>
2400a55a:	42b3      	cmp	r3, r6
2400a55c:	d810      	bhi.n	2400a580 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a55e:	2100      	movs	r1, #0
2400a560:	6820      	ldr	r0, [r4, #0]
2400a562:	f001 fe15 	bl	2400c190 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a566:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400a568:	4605      	mov	r5, r0
2400a56a:	2800      	cmp	r0, #0
2400a56c:	d1cd      	bne.n	2400a50a <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a56e:	6820      	ldr	r0, [r4, #0]
2400a570:	f001 feb4 	bl	2400c2dc <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a574:	4601      	mov	r1, r0
2400a576:	2800      	cmp	r0, #0
2400a578:	d0e5      	beq.n	2400a546 <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a57a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400a57e:	e7c4      	b.n	2400a50a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a580:	9a03      	ldr	r2, [sp, #12]
2400a582:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400a586:	429a      	cmp	r2, r3
2400a588:	f200 80ab 	bhi.w	2400a6e2 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400a58c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
2400a590:	d043      	beq.n	2400a61a <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400a592:	2301      	movs	r3, #1
2400a594:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400a596:	2300      	movs	r3, #0
2400a598:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400a59c:	f7fa f890 	bl	240046c0 <HAL_GetTick>
2400a5a0:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400a5a2:	6820      	ldr	r0, [r4, #0]
2400a5a4:	f001 f87c 	bl	2400b6a0 <SDMMC_GetPowerState>
2400a5a8:	2800      	cmp	r0, #0
2400a5aa:	d038      	beq.n	2400a61e <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a5ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a5ae:	2b03      	cmp	r3, #3
2400a5b0:	d140      	bne.n	2400a634 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a5b2:	2104      	movs	r1, #4
2400a5b4:	6820      	ldr	r0, [r4, #0]
2400a5b6:	f001 f877 	bl	2400b6a8 <SDMMC_GetResponse>
2400a5ba:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a5bc:	a909      	add	r1, sp, #36	; 0x24
2400a5be:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a5c0:	0d1b      	lsrs	r3, r3, #20
2400a5c2:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a5c4:	f7ff fe7c 	bl	2400a2c0 <HAL_SD_GetCardCSD>
2400a5c8:	4606      	mov	r6, r0
2400a5ca:	2800      	cmp	r0, #0
2400a5cc:	f040 808c 	bne.w	2400a6e8 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400a5d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a5d2:	6820      	ldr	r0, [r4, #0]
2400a5d4:	0409      	lsls	r1, r1, #16
2400a5d6:	f001 fcc9 	bl	2400bf6c <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a5da:	bb10      	cbnz	r0, 2400a622 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a5dc:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a5e0:	6820      	ldr	r0, [r4, #0]
2400a5e2:	f001 f87b 	bl	2400b6dc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a5e6:	2800      	cmp	r0, #0
2400a5e8:	f43f af65 	beq.w	2400a4b6 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5ec:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a5ee:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5f0:	4946      	ldr	r1, [pc, #280]	; (2400a70c <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
2400a5f2:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5f4:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a5f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a5f8:	4310      	orrs	r0, r2
2400a5fa:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a5fc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400a600:	e759      	b.n	2400a4b6 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400a602:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a604:	6820      	ldr	r0, [r4, #0]
2400a606:	f001 fd57 	bl	2400c0b8 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a60a:	4605      	mov	r5, r0
2400a60c:	2800      	cmp	r0, #0
2400a60e:	f47f af7c 	bne.w	2400a50a <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400a612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400a614:	2b01      	cmp	r3, #1
2400a616:	d18e      	bne.n	2400a536 <HAL_SD_InitCard+0xaa>
2400a618:	e788      	b.n	2400a52c <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
2400a61a:	63a0      	str	r0, [r4, #56]	; 0x38
2400a61c:	e7bb      	b.n	2400a596 <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400a61e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400a622:	2601      	movs	r6, #1
2400a624:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400a628:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a62a:	4318      	orrs	r0, r3
2400a62c:	6360      	str	r0, [r4, #52]	; 0x34
}
2400a62e:	4630      	mov	r0, r6
2400a630:	b015      	add	sp, #84	; 0x54
2400a632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400a634:	6820      	ldr	r0, [r4, #0]
2400a636:	f001 ffd9 	bl	2400c5ec <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a63a:	2800      	cmp	r0, #0
2400a63c:	d1f1      	bne.n	2400a622 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a63e:	4601      	mov	r1, r0
2400a640:	6820      	ldr	r0, [r4, #0]
2400a642:	f001 f831 	bl	2400b6a8 <SDMMC_GetResponse>
2400a646:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a648:	2104      	movs	r1, #4
2400a64a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a64c:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a64e:	f001 f82b 	bl	2400b6a8 <SDMMC_GetResponse>
2400a652:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a654:	2108      	movs	r1, #8
2400a656:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a658:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a65a:	f001 f825 	bl	2400b6a8 <SDMMC_GetResponse>
2400a65e:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a660:	210c      	movs	r1, #12
2400a662:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a664:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a666:	f001 f81f 	bl	2400b6a8 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a66a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a66c:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a66e:	2b03      	cmp	r3, #3
2400a670:	d09f      	beq.n	2400a5b2 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400a672:	f241 3687 	movw	r6, #4999	; 0x1387
2400a676:	e009      	b.n	2400a68c <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400a678:	6820      	ldr	r0, [r4, #0]
2400a67a:	f002 f835 	bl	2400c6e8 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400a67e:	2800      	cmp	r0, #0
2400a680:	d1cf      	bne.n	2400a622 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400a682:	f7fa f81d 	bl	240046c0 <HAL_GetTick>
2400a686:	1b43      	subs	r3, r0, r5
2400a688:	42b3      	cmp	r3, r6
2400a68a:	d827      	bhi.n	2400a6dc <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
2400a68c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400a690:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400a694:	2b00      	cmp	r3, #0
2400a696:	d0ef      	beq.n	2400a678 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a698:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400a69a:	2a03      	cmp	r2, #3
2400a69c:	d089      	beq.n	2400a5b2 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a69e:	0419      	lsls	r1, r3, #16
2400a6a0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400a6a2:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a6a4:	f001 ffe0 	bl	2400c668 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a6a8:	2800      	cmp	r0, #0
2400a6aa:	d1ba      	bne.n	2400a622 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a6ac:	4601      	mov	r1, r0
2400a6ae:	6820      	ldr	r0, [r4, #0]
2400a6b0:	f000 fffa 	bl	2400b6a8 <SDMMC_GetResponse>
2400a6b4:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6b6:	2104      	movs	r1, #4
2400a6b8:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a6ba:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6bc:	f000 fff4 	bl	2400b6a8 <SDMMC_GetResponse>
2400a6c0:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6c2:	2108      	movs	r1, #8
2400a6c4:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6c6:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6c8:	f000 ffee 	bl	2400b6a8 <SDMMC_GetResponse>
2400a6cc:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6ce:	210c      	movs	r1, #12
2400a6d0:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6d2:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6d4:	f000 ffe8 	bl	2400b6a8 <SDMMC_GetResponse>
2400a6d8:	66a0      	str	r0, [r4, #104]	; 0x68
2400a6da:	e76a      	b.n	2400a5b2 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
2400a6dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400a6e0:	e79f      	b.n	2400a622 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400a6e2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400a6e6:	e710      	b.n	2400a50a <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a6e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400a6ec:	e799      	b.n	2400a622 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a6ee:	9b03      	ldr	r3, [sp, #12]
2400a6f0:	42b3      	cmp	r3, r6
2400a6f2:	d8f6      	bhi.n	2400a6e2 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
2400a6f4:	2300      	movs	r3, #0
2400a6f6:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400a6f8:	e74d      	b.n	2400a596 <HAL_SD_InitCard+0x10a>
2400a6fa:	bf00      	nop
2400a6fc:	014f8b59 	.word	0x014f8b59
2400a700:	000c34ff 	.word	0x000c34ff
2400a704:	00012110 	.word	0x00012110
2400a708:	c1100000 	.word	0xc1100000
2400a70c:	1fe00fff 	.word	0x1fe00fff

2400a710 <HAL_SD_GetCardInfo>:
{
2400a710:	4603      	mov	r3, r0
}
2400a712:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400a714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400a716:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400a718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400a71a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400a71c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400a71e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400a720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400a722:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400a724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400a726:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400a728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400a72a:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400a72c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400a72e:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400a730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400a732:	61cb      	str	r3, [r1, #28]
}
2400a734:	4770      	bx	lr
2400a736:	bf00      	nop

2400a738 <HAL_SD_ConfigWideBusOperation>:
{
2400a738:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400a73a:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a73c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400a73e:	b089      	sub	sp, #36	; 0x24
2400a740:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a742:	4293      	cmp	r3, r2
{
2400a744:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400a746:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a74a:	d033      	beq.n	2400a7b4 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400a74c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400a750:	d030      	beq.n	2400a7b4 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400a752:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400a756:	f000 8084 	beq.w	2400a862 <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400a75a:	2900      	cmp	r1, #0
2400a75c:	d062      	beq.n	2400a824 <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a75e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a764:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a766:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a768:	bb5b      	cbnz	r3, 2400a7c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a76a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a76e:	2100      	movs	r1, #0
2400a770:	f7fe fbe0 	bl	24008f34 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400a774:	2800      	cmp	r0, #0
2400a776:	d03b      	beq.n	2400a7f0 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a778:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a77a:	4b55      	ldr	r3, [pc, #340]	; (2400a8d0 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a77c:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400a77e:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a780:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a782:	fba3 5300 	umull	r5, r3, r3, r0
2400a786:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a788:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a78a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a78e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a790:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a794:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a796:	d238      	bcs.n	2400a80a <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400a798:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400a79a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400a79e:	d034      	beq.n	2400a80a <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400a7a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400a7a4:	d07f      	beq.n	2400a8a6 <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
2400a7a6:	bb4a      	cbnz	r2, 2400a7fc <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
2400a7a8:	4b4a      	ldr	r3, [pc, #296]	; (2400a8d4 <HAL_SD_ConfigWideBusOperation+0x19c>)
2400a7aa:	4298      	cmp	r0, r3
2400a7ac:	f240 8085 	bls.w	2400a8ba <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400a7b0:	9506      	str	r5, [sp, #24]
2400a7b2:	e02b      	b.n	2400a80c <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a7b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a7b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400a7ba:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a7bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a7be:	2b00      	cmp	r3, #0
2400a7c0:	d0d3      	beq.n	2400a76a <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7c2:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400a7c4:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7c6:	4a44      	ldr	r2, [pc, #272]	; (2400a8d8 <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400a7c8:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a7ca:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a7ce:	6820      	ldr	r0, [r4, #0]
2400a7d0:	f000 ff84 	bl	2400b6dc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a7d4:	b130      	cbz	r0, 2400a7e4 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7d6:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400a7d8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7da:	4a3f      	ldr	r2, [pc, #252]	; (2400a8d8 <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400a7dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a7e0:	4318      	orrs	r0, r3
2400a7e2:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400a7e4:	2301      	movs	r3, #1
}
2400a7e6:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400a7e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a7ec:	b009      	add	sp, #36	; 0x24
2400a7ee:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a7f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a7f2:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a7f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a7f8:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a7fa:	e7e6      	b.n	2400a7ca <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400a7fc:	0053      	lsls	r3, r2, #1
2400a7fe:	fbb0 f0f3 	udiv	r0, r0, r3
2400a802:	4b34      	ldr	r3, [pc, #208]	; (2400a8d4 <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400a804:	4298      	cmp	r0, r3
2400a806:	bf88      	it	hi
2400a808:	462a      	movhi	r2, r5
2400a80a:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400a80c:	aa05      	add	r2, sp, #20
2400a80e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400a810:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400a812:	e892 0003 	ldmia.w	r2, {r0, r1}
2400a816:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a81a:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a81c:	6820      	ldr	r0, [r4, #0]
2400a81e:	f000 ff11 	bl	2400b644 <SDMMC_Init>
2400a822:	e7d2      	b.n	2400a7ca <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
2400a824:	2200      	movs	r2, #0
2400a826:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a828:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400a82a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a82e:	f000 ff3b 	bl	2400b6a8 <SDMMC_GetResponse>
2400a832:	0182      	lsls	r2, r0, #6
2400a834:	d434      	bmi.n	2400a8a0 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400a836:	a902      	add	r1, sp, #8
2400a838:	4620      	mov	r0, r4
2400a83a:	f7ff fa0b 	bl	24009c54 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a83e:	b960      	cbnz	r0, 2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400a840:	9b03      	ldr	r3, [sp, #12]
2400a842:	03db      	lsls	r3, r3, #15
2400a844:	d536      	bpl.n	2400a8b4 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a846:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a848:	6820      	ldr	r0, [r4, #0]
2400a84a:	0409      	lsls	r1, r1, #16
2400a84c:	f001 fca0 	bl	2400c190 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a850:	b918      	cbnz	r0, 2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400a852:	4601      	mov	r1, r0
2400a854:	6820      	ldr	r0, [r4, #0]
2400a856:	f001 fd7b 	bl	2400c350 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400a85a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a85c:	4318      	orrs	r0, r3
2400a85e:	6360      	str	r0, [r4, #52]	; 0x34
2400a860:	e7ac      	b.n	2400a7bc <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
2400a862:	2200      	movs	r2, #0
2400a864:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a866:	2100      	movs	r1, #0
2400a868:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400a86a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a86e:	f000 ff1b 	bl	2400b6a8 <SDMMC_GetResponse>
2400a872:	0180      	lsls	r0, r0, #6
2400a874:	d414      	bmi.n	2400a8a0 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400a876:	a902      	add	r1, sp, #8
2400a878:	4620      	mov	r0, r4
2400a87a:	f7ff f9eb 	bl	24009c54 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a87e:	2800      	cmp	r0, #0
2400a880:	d1eb      	bne.n	2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400a882:	9b03      	ldr	r3, [sp, #12]
2400a884:	0359      	lsls	r1, r3, #13
2400a886:	d515      	bpl.n	2400a8b4 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a888:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a88a:	6820      	ldr	r0, [r4, #0]
2400a88c:	0409      	lsls	r1, r1, #16
2400a88e:	f001 fc7f 	bl	2400c190 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a892:	2800      	cmp	r0, #0
2400a894:	d1e1      	bne.n	2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400a896:	2102      	movs	r1, #2
2400a898:	6820      	ldr	r0, [r4, #0]
2400a89a:	f001 fd59 	bl	2400c350 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a89e:	e7dc      	b.n	2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400a8a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a8a4:	e7d9      	b.n	2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
2400a8a6:	b95a      	cbnz	r2, 2400a8c0 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400a8a8:	4a0c      	ldr	r2, [pc, #48]	; (2400a8dc <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400a8aa:	4290      	cmp	r0, r2
2400a8ac:	d905      	bls.n	2400a8ba <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400a8ae:	0e5b      	lsrs	r3, r3, #25
2400a8b0:	9306      	str	r3, [sp, #24]
2400a8b2:	e7ab      	b.n	2400a80c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400a8b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400a8b8:	e7cf      	b.n	2400a85a <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400a8ba:	2300      	movs	r3, #0
2400a8bc:	9306      	str	r3, [sp, #24]
2400a8be:	e7a5      	b.n	2400a80c <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400a8c0:	0051      	lsls	r1, r2, #1
2400a8c2:	fbb0 f0f1 	udiv	r0, r0, r1
2400a8c6:	4905      	ldr	r1, [pc, #20]	; (2400a8dc <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400a8c8:	4288      	cmp	r0, r1
2400a8ca:	d99e      	bls.n	2400a80a <HAL_SD_ConfigWideBusOperation+0xd2>
2400a8cc:	e7ef      	b.n	2400a8ae <HAL_SD_ConfigWideBusOperation+0x176>
2400a8ce:	bf00      	nop
2400a8d0:	55e63b89 	.word	0x55e63b89
2400a8d4:	017d7840 	.word	0x017d7840
2400a8d8:	1fe00fff 	.word	0x1fe00fff
2400a8dc:	02faf080 	.word	0x02faf080

2400a8e0 <HAL_SD_Init>:
{
2400a8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
2400a8e2:	b087      	sub	sp, #28
  if (hsd == NULL)
2400a8e4:	2800      	cmp	r0, #0
2400a8e6:	d044      	beq.n	2400a972 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
2400a8e8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400a8ec:	4604      	mov	r4, r0
2400a8ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400a8f2:	2b00      	cmp	r3, #0
2400a8f4:	d041      	beq.n	2400a97a <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a8f6:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a8f8:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a8fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a8fe:	f7ff fdc5 	bl	2400a48c <HAL_SD_InitCard>
2400a902:	2800      	cmp	r0, #0
2400a904:	d135      	bne.n	2400a972 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400a906:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a90a:	2b03      	cmp	r3, #3
2400a90c:	d031      	beq.n	2400a972 <HAL_SD_Init+0x92>
2400a90e:	a901      	add	r1, sp, #4
2400a910:	4620      	mov	r0, r4
2400a912:	f7ff fa11 	bl	24009d38 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400a916:	bb60      	cbnz	r0, 2400a972 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a918:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400a91a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a91e:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a920:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400a924:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a926:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a928:	d02b      	beq.n	2400a982 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400a92a:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400a92c:	68e1      	ldr	r1, [r4, #12]
2400a92e:	4620      	mov	r0, r4
2400a930:	f7ff ff02 	bl	2400a738 <HAL_SD_ConfigWideBusOperation>
2400a934:	4606      	mov	r6, r0
2400a936:	b9e0      	cbnz	r0, 2400a972 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
2400a938:	f7f9 fec2 	bl	240046c0 <HAL_GetTick>
2400a93c:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a93e:	e00c      	b.n	2400a95a <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a940:	6820      	ldr	r0, [r4, #0]
2400a942:	4629      	mov	r1, r5
2400a944:	f000 feb0 	bl	2400b6a8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400a948:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a94c:	2804      	cmp	r0, #4
2400a94e:	d020      	beq.n	2400a992 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a950:	f7f9 feb6 	bl	240046c0 <HAL_GetTick>
2400a954:	1bc3      	subs	r3, r0, r7
2400a956:	3301      	adds	r3, #1
2400a958:	d021      	beq.n	2400a99e <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a95a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a95c:	6820      	ldr	r0, [r4, #0]
2400a95e:	0409      	lsls	r1, r1, #16
2400a960:	f001 ff1a 	bl	2400c798 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a964:	4605      	mov	r5, r0
2400a966:	2800      	cmp	r0, #0
2400a968:	d0ea      	beq.n	2400a940 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
2400a96a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a96c:	4303      	orrs	r3, r0
2400a96e:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400a970:	e7ee      	b.n	2400a950 <HAL_SD_Init+0x70>
    return HAL_ERROR;
2400a972:	2601      	movs	r6, #1
}
2400a974:	4630      	mov	r0, r6
2400a976:	b007      	add	sp, #28
2400a978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400a97a:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400a97c:	f7f9 fb06 	bl	24003f8c <HAL_SD_MspInit>
2400a980:	e7b9      	b.n	2400a8f6 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a982:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400a984:	bf14      	ite	ne
2400a986:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
2400a98a:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400a98e:	65a3      	str	r3, [r4, #88]	; 0x58
2400a990:	e7cc      	b.n	2400a92c <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400a992:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a994:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400a996:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400a998:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400a99c:	e7ea      	b.n	2400a974 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400a99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400a9a2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400a9a4:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400a9a6:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a9a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400a9ac:	e7e2      	b.n	2400a974 <HAL_SD_Init+0x94>
2400a9ae:	bf00      	nop

2400a9b0 <HAL_SD_GetCardState>:
{
2400a9b0:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a9b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400a9b4:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a9b6:	6800      	ldr	r0, [r0, #0]
2400a9b8:	0409      	lsls	r1, r1, #16
2400a9ba:	f001 feed 	bl	2400c798 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a9be:	4601      	mov	r1, r0
2400a9c0:	b120      	cbz	r0, 2400a9cc <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400a9c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a9c4:	2000      	movs	r0, #0
2400a9c6:	4319      	orrs	r1, r3
2400a9c8:	6361      	str	r1, [r4, #52]	; 0x34
}
2400a9ca:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a9cc:	6820      	ldr	r0, [r4, #0]
2400a9ce:	f000 fe6b 	bl	2400b6a8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400a9d2:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400a9d6:	bd10      	pop	{r4, pc}

2400a9d8 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400a9d8:	b318      	cbz	r0, 2400aa22 <HAL_SDRAM_Init+0x4a>
{
2400a9da:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400a9dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400a9e0:	4604      	mov	r4, r0
2400a9e2:	460d      	mov	r5, r1
2400a9e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400a9e8:	b1b3      	cbz	r3, 2400aa18 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400a9ea:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400a9ec:	2302      	movs	r3, #2
2400a9ee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400a9f2:	f851 0b04 	ldr.w	r0, [r1], #4
2400a9f6:	f000 fd73 	bl	2400b4e0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400a9fa:	6862      	ldr	r2, [r4, #4]
2400a9fc:	4629      	mov	r1, r5
2400a9fe:	6820      	ldr	r0, [r4, #0]
2400aa00:	f000 fdac 	bl	2400b55c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400aa04:	4a08      	ldr	r2, [pc, #32]	; (2400aa28 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400aa06:	2101      	movs	r1, #1

  return HAL_OK;
2400aa08:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400aa0a:	6813      	ldr	r3, [r2, #0]
2400aa0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400aa10:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400aa12:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400aa16:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400aa18:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400aa1c:	f7f6 fff8 	bl	24001a10 <HAL_SDRAM_MspInit>
2400aa20:	e7e3      	b.n	2400a9ea <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400aa22:	2001      	movs	r0, #1
}
2400aa24:	4770      	bx	lr
2400aa26:	bf00      	nop
2400aa28:	52004000 	.word	0x52004000

2400aa2c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400aa2c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400aa2e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aa32:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400aa34:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400aa36:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400aa38:	d004      	beq.n	2400aa44 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400aa3a:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400aa3e:	2e01      	cmp	r6, #1
2400aa40:	d001      	beq.n	2400aa46 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400aa42:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aa44:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aa46:	2302      	movs	r3, #2
2400aa48:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400aa4a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aa4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400aa50:	f000 fdd2 	bl	2400b5f8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400aa54:	682b      	ldr	r3, [r5, #0]
2400aa56:	2b02      	cmp	r3, #2
2400aa58:	d003      	beq.n	2400aa62 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400aa5a:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400aa5c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400aa60:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400aa62:	2305      	movs	r3, #5
  return HAL_OK;
2400aa64:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400aa66:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400aa6a:	bd70      	pop	{r4, r5, r6, pc}

2400aa6c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400aa6c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aa6e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aa72:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aa74:	2b02      	cmp	r3, #2
2400aa76:	b2d8      	uxtb	r0, r3
2400aa78:	d005      	beq.n	2400aa86 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400aa7a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400aa7e:	2b01      	cmp	r3, #1
2400aa80:	b2dd      	uxtb	r5, r3
2400aa82:	d001      	beq.n	2400aa88 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400aa84:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aa86:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aa88:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aa8a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aa8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aa90:	f000 fdca 	bl	2400b628 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400aa94:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400aa96:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400aa9a:	bd38      	pop	{r3, r4, r5, pc}

2400aa9c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400aa9c:	6802      	ldr	r2, [r0, #0]
{
2400aa9e:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400aaa0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400aaa2:	6991      	ldr	r1, [r2, #24]
2400aaa4:	f041 0108 	orr.w	r1, r1, #8
2400aaa8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400aaaa:	6801      	ldr	r1, [r0, #0]
2400aaac:	698a      	ldr	r2, [r1, #24]
2400aaae:	f042 0210 	orr.w	r2, r2, #16
2400aab2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400aab4:	6801      	ldr	r1, [r0, #0]
2400aab6:	680a      	ldr	r2, [r1, #0]
2400aab8:	f022 0201 	bic.w	r2, r2, #1
2400aabc:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400aabe:	6801      	ldr	r1, [r0, #0]
2400aac0:	4a27      	ldr	r2, [pc, #156]	; (2400ab60 <SPI_CloseTransfer+0xc4>)
2400aac2:	690c      	ldr	r4, [r1, #16]
2400aac4:	4022      	ands	r2, r4
2400aac6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400aac8:	6801      	ldr	r1, [r0, #0]
2400aaca:	688a      	ldr	r2, [r1, #8]
2400aacc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400aad0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400aad2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400aad6:	2a04      	cmp	r2, #4
2400aad8:	d001      	beq.n	2400aade <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400aada:	069c      	lsls	r4, r3, #26
2400aadc:	d433      	bmi.n	2400ab46 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400aade:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400aae2:	2a03      	cmp	r2, #3
2400aae4:	d001      	beq.n	2400aaea <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400aae6:	0659      	lsls	r1, r3, #25
2400aae8:	d421      	bmi.n	2400ab2e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400aaea:	059a      	lsls	r2, r3, #22
2400aaec:	d50a      	bpl.n	2400ab04 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400aaee:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400aaf2:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400aaf4:	f042 0201 	orr.w	r2, r2, #1
2400aaf8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400aafc:	698a      	ldr	r2, [r1, #24]
2400aafe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400ab02:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400ab04:	05db      	lsls	r3, r3, #23
2400ab06:	d50a      	bpl.n	2400ab1e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ab08:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ab0c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ab0e:	f043 0308 	orr.w	r3, r3, #8
2400ab12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ab16:	6993      	ldr	r3, [r2, #24]
2400ab18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400ab1c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400ab1e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400ab20:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400ab24:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400ab28:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400ab2c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ab2e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ab32:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ab34:	f042 0204 	orr.w	r2, r2, #4
2400ab38:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ab3c:	698a      	ldr	r2, [r1, #24]
2400ab3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400ab42:	618a      	str	r2, [r1, #24]
2400ab44:	e7d1      	b.n	2400aaea <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400ab46:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400ab4a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400ab4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400ab50:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400ab54:	698a      	ldr	r2, [r1, #24]
2400ab56:	f042 0220 	orr.w	r2, r2, #32
2400ab5a:	618a      	str	r2, [r1, #24]
2400ab5c:	e7bf      	b.n	2400aade <SPI_CloseTransfer+0x42>
2400ab5e:	bf00      	nop
2400ab60:	fffffc90 	.word	0xfffffc90

2400ab64 <HAL_SPI_Init>:
  if (hspi == NULL)
2400ab64:	2800      	cmp	r0, #0
2400ab66:	f000 80be 	beq.w	2400ace6 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400ab6a:	4a62      	ldr	r2, [pc, #392]	; (2400acf4 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400ab6c:	2100      	movs	r1, #0
{
2400ab6e:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400ab70:	6803      	ldr	r3, [r0, #0]
2400ab72:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400ab74:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400ab76:	4293      	cmp	r3, r2
2400ab78:	d015      	beq.n	2400aba6 <HAL_SPI_Init+0x42>
2400ab7a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400ab7e:	4293      	cmp	r3, r2
2400ab80:	d011      	beq.n	2400aba6 <HAL_SPI_Init+0x42>
2400ab82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400ab86:	4293      	cmp	r3, r2
2400ab88:	68c2      	ldr	r2, [r0, #12]
2400ab8a:	f000 80a5 	beq.w	2400acd8 <HAL_SPI_Init+0x174>
2400ab8e:	2a0f      	cmp	r2, #15
2400ab90:	d807      	bhi.n	2400aba2 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ab92:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400ab94:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ab96:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400ab98:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400ab9a:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ab9e:	2a08      	cmp	r2, #8
2400aba0:	d914      	bls.n	2400abcc <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400aba2:	2001      	movs	r0, #1
}
2400aba4:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400aba6:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400aba8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400abaa:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400abac:	4d51      	ldr	r5, [pc, #324]	; (2400acf4 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400abae:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
2400abb0:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400abb2:	4951      	ldr	r1, [pc, #324]	; (2400acf8 <HAL_SPI_Init+0x194>)
2400abb4:	428b      	cmp	r3, r1
2400abb6:	bf18      	it	ne
2400abb8:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
2400abba:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400abbe:	d003      	beq.n	2400abc8 <HAL_SPI_Init+0x64>
2400abc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400abc4:	428b      	cmp	r3, r1
2400abc6:	d101      	bne.n	2400abcc <HAL_SPI_Init+0x68>
2400abc8:	2a10      	cmp	r2, #16
2400abca:	d8ea      	bhi.n	2400aba2 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400abcc:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400abd0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400abd4:	2a00      	cmp	r2, #0
2400abd6:	d078      	beq.n	2400acca <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400abd8:	2202      	movs	r2, #2
2400abda:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400abde:	681a      	ldr	r2, [r3, #0]
2400abe0:	f022 0201 	bic.w	r2, r2, #1
2400abe4:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400abe6:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400abe8:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400abea:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400abec:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
2400abf0:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400abf2:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400abf6:	d058      	beq.n	2400acaa <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400abf8:	0258      	lsls	r0, r3, #9
2400abfa:	d502      	bpl.n	2400ac02 <HAL_SPI_Init+0x9e>
2400abfc:	68e3      	ldr	r3, [r4, #12]
2400abfe:	2b06      	cmp	r3, #6
2400ac00:	d84c      	bhi.n	2400ac9c <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400ac02:	6813      	ldr	r3, [r2, #0]
2400ac04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400ac08:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400ac0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400ac0c:	69e3      	ldr	r3, [r4, #28]
2400ac0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400ac10:	432b      	orrs	r3, r5
2400ac12:	6822      	ldr	r2, [r4, #0]
2400ac14:	4303      	orrs	r3, r0
2400ac16:	68e0      	ldr	r0, [r4, #12]
2400ac18:	4303      	orrs	r3, r0
2400ac1a:	430b      	orrs	r3, r1
2400ac1c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400ac1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400ac20:	69a0      	ldr	r0, [r4, #24]
2400ac22:	6822      	ldr	r2, [r4, #0]
2400ac24:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400ac28:	432b      	orrs	r3, r5
2400ac2a:	430b      	orrs	r3, r1
2400ac2c:	6921      	ldr	r1, [r4, #16]
2400ac2e:	4303      	orrs	r3, r0
2400ac30:	6960      	ldr	r0, [r4, #20]
2400ac32:	430b      	orrs	r3, r1
2400ac34:	6a21      	ldr	r1, [r4, #32]
2400ac36:	4303      	orrs	r3, r0
2400ac38:	6860      	ldr	r0, [r4, #4]
2400ac3a:	430b      	orrs	r3, r1
2400ac3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400ac3e:	4303      	orrs	r3, r0
2400ac40:	68a0      	ldr	r0, [r4, #8]
2400ac42:	430b      	orrs	r3, r1
2400ac44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400ac46:	4303      	orrs	r3, r0
2400ac48:	430b      	orrs	r3, r1
2400ac4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400ac4c:	430b      	orrs	r3, r1
2400ac4e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400ac50:	6863      	ldr	r3, [r4, #4]
2400ac52:	b96b      	cbnz	r3, 2400ac70 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400ac54:	6822      	ldr	r2, [r4, #0]
2400ac56:	6893      	ldr	r3, [r2, #8]
2400ac58:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400ac5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400ac60:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400ac62:	6822      	ldr	r2, [r4, #0]
2400ac64:	6893      	ldr	r3, [r2, #8]
2400ac66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400ac6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400ac6e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400ac70:	6822      	ldr	r2, [r4, #0]
2400ac72:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ac74:	f023 0301 	bic.w	r3, r3, #1
2400ac78:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400ac7a:	6863      	ldr	r3, [r4, #4]
2400ac7c:	025b      	lsls	r3, r3, #9
2400ac7e:	d506      	bpl.n	2400ac8e <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400ac80:	6822      	ldr	r2, [r4, #0]
2400ac82:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400ac84:	68d3      	ldr	r3, [r2, #12]
2400ac86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400ac8a:	430b      	orrs	r3, r1
2400ac8c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400ac8e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400ac90:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400ac92:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400ac96:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400ac9a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400ac9c:	6813      	ldr	r3, [r2, #0]
2400ac9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400aca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400aca4:	4303      	orrs	r3, r0
2400aca6:	6013      	str	r3, [r2, #0]
2400aca8:	e7af      	b.n	2400ac0a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400acaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400acae:	d01c      	beq.n	2400acea <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400acb0:	2b00      	cmp	r3, #0
2400acb2:	d1a1      	bne.n	2400abf8 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400acb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400acb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400acba:	d1a2      	bne.n	2400ac02 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400acbc:	6813      	ldr	r3, [r2, #0]
2400acbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400acc2:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400acc4:	e9d4 2300 	ldrd	r2, r3, [r4]
2400acc8:	e796      	b.n	2400abf8 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400acca:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400accc:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400acd0:	f7f9 fa12 	bl	240040f8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400acd4:	6823      	ldr	r3, [r4, #0]
2400acd6:	e77f      	b.n	2400abd8 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400acd8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400acda:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400acdc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400acde:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400ace0:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ace4:	e770      	b.n	2400abc8 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400ace6:	2001      	movs	r0, #1
}
2400ace8:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400acea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400acec:	2b00      	cmp	r3, #0
2400acee:	d0e5      	beq.n	2400acbc <HAL_SPI_Init+0x158>
2400acf0:	e784      	b.n	2400abfc <HAL_SPI_Init+0x98>
2400acf2:	bf00      	nop
2400acf4:	40013000 	.word	0x40013000
2400acf8:	40003800 	.word	0x40003800

2400acfc <HAL_SPI_Receive_DMA>:
{
2400acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
2400acfe:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400ad02:	2b01      	cmp	r3, #1
2400ad04:	f000 80a9 	beq.w	2400ae5a <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad08:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400ad0c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
2400ad0e:	2201      	movs	r2, #1
2400ad10:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad12:	b2de      	uxtb	r6, r3
2400ad14:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
2400ad16:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad1a:	f040 8093 	bne.w	2400ae44 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
2400ad1e:	2900      	cmp	r1, #0
2400ad20:	f000 808b 	beq.w	2400ae3a <HAL_SPI_Receive_DMA+0x13e>
2400ad24:	fab5 f385 	clz	r3, r5
2400ad28:	095b      	lsrs	r3, r3, #5
2400ad2a:	2d00      	cmp	r5, #0
2400ad2c:	f000 8085 	beq.w	2400ae3a <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400ad30:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2400ad32:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400ad34:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400ad36:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
2400ad3a:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400ad3e:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
2400ad42:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400ad44:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
2400ad48:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
2400ad4c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400ad50:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
2400ad54:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400ad58:	d07a      	beq.n	2400ae50 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
2400ad5a:	68d3      	ldr	r3, [r2, #12]
2400ad5c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400ad60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400ad64:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400ad66:	68e3      	ldr	r3, [r4, #12]
2400ad68:	2b0f      	cmp	r3, #15
2400ad6a:	d861      	bhi.n	2400ae30 <HAL_SPI_Receive_DMA+0x134>
2400ad6c:	2b07      	cmp	r3, #7
2400ad6e:	f200 8092 	bhi.w	2400ae96 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400ad72:	6822      	ldr	r2, [r4, #0]
2400ad74:	6893      	ldr	r3, [r2, #8]
2400ad76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400ad7a:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2400ad7c:	68e3      	ldr	r3, [r4, #12]
2400ad7e:	2b07      	cmp	r3, #7
2400ad80:	d86e      	bhi.n	2400ae60 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400ad82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ad84:	699a      	ldr	r2, [r3, #24]
2400ad86:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400ad8a:	d107      	bne.n	2400ad9c <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400ad8c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400ad90:	b292      	uxth	r2, r2
2400ad92:	3201      	adds	r2, #1
2400ad94:	0852      	lsrs	r2, r2, #1
2400ad96:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400ad9a:	699a      	ldr	r2, [r3, #24]
2400ad9c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400ada0:	d106      	bne.n	2400adb0 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400ada2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400ada6:	b292      	uxth	r2, r2
2400ada8:	3203      	adds	r2, #3
2400adaa:	0892      	lsrs	r2, r2, #2
2400adac:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400adb0:	4a3e      	ldr	r2, [pc, #248]	; (2400aeac <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400adb2:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400adb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400adb6:	4a3e      	ldr	r2, [pc, #248]	; (2400aeb0 <HAL_SPI_Receive_DMA+0x1b4>)
2400adb8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400adba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400adbc:	4a3d      	ldr	r2, [pc, #244]	; (2400aeb4 <HAL_SPI_Receive_DMA+0x1b8>)
2400adbe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400adc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400adc2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400adc4:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400adc6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400adca:	6821      	ldr	r1, [r4, #0]
2400adcc:	b29b      	uxth	r3, r3
2400adce:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400add0:	3130      	adds	r1, #48	; 0x30
2400add2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400add4:	f7fa f892 	bl	24004efc <HAL_DMA_Start_IT>
2400add8:	2800      	cmp	r0, #0
2400adda:	d150      	bne.n	2400ae7e <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400addc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400adde:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400ade0:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400ade2:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400ade4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400ade8:	4b33      	ldr	r3, [pc, #204]	; (2400aeb8 <HAL_SPI_Receive_DMA+0x1bc>)
2400adea:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400adee:	bf18      	it	ne
2400adf0:	432b      	orrne	r3, r5
2400adf2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400adf4:	6822      	ldr	r2, [r4, #0]
2400adf6:	6893      	ldr	r3, [r2, #8]
2400adf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400adfc:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
2400adfe:	6822      	ldr	r2, [r4, #0]
2400ae00:	6913      	ldr	r3, [r2, #16]
2400ae02:	f443 7350 	orr.w	r3, r3, #832	; 0x340
2400ae06:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400ae08:	6822      	ldr	r2, [r4, #0]
2400ae0a:	6813      	ldr	r3, [r2, #0]
2400ae0c:	f043 0301 	orr.w	r3, r3, #1
2400ae10:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400ae12:	6863      	ldr	r3, [r4, #4]
2400ae14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400ae18:	d104      	bne.n	2400ae24 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400ae1a:	6822      	ldr	r2, [r4, #0]
2400ae1c:	6813      	ldr	r3, [r2, #0]
2400ae1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400ae22:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400ae24:	2300      	movs	r3, #0
  return errorcode;
2400ae26:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400ae28:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400ae2c:	4630      	mov	r0, r6
2400ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400ae30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae32:	699b      	ldr	r3, [r3, #24]
2400ae34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ae38:	d09b      	beq.n	2400ad72 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
2400ae3a:	2300      	movs	r3, #0
2400ae3c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400ae40:	4630      	mov	r0, r6
2400ae42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
2400ae44:	2300      	movs	r3, #0
    return errorcode;
2400ae46:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400ae48:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400ae4c:	4630      	mov	r0, r6
2400ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
2400ae50:	6813      	ldr	r3, [r2, #0]
2400ae52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2400ae56:	6013      	str	r3, [r2, #0]
2400ae58:	e785      	b.n	2400ad66 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
2400ae5a:	2602      	movs	r6, #2
}
2400ae5c:	4630      	mov	r0, r6
2400ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400ae60:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400ae62:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400ae64:	d8a4      	bhi.n	2400adb0 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400ae66:	699a      	ldr	r2, [r3, #24]
2400ae68:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400ae6c:	d1a0      	bne.n	2400adb0 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400ae6e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400ae72:	b292      	uxth	r2, r2
2400ae74:	3201      	adds	r2, #1
2400ae76:	0852      	lsrs	r2, r2, #1
2400ae78:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400ae7c:	e798      	b.n	2400adb0 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ae7e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ae82:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400ae84:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ae88:	f043 0310 	orr.w	r3, r3, #16
2400ae8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ae90:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400ae94:	e7d4      	b.n	2400ae40 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400ae96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae98:	699b      	ldr	r3, [r3, #24]
2400ae9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400ae9e:	f43f af68 	beq.w	2400ad72 <HAL_SPI_Receive_DMA+0x76>
2400aea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400aea6:	d1c8      	bne.n	2400ae3a <HAL_SPI_Receive_DMA+0x13e>
2400aea8:	e763      	b.n	2400ad72 <HAL_SPI_Receive_DMA+0x76>
2400aeaa:	bf00      	nop
2400aeac:	2400b14d 	.word	0x2400b14d
2400aeb0:	2400b0fd 	.word	0x2400b0fd
2400aeb4:	2400b169 	.word	0x2400b169
2400aeb8:	ffff0000 	.word	0xffff0000

2400aebc <HAL_SPI_TransmitReceive_DMA>:
{
2400aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400aec0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400aec2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400aec6:	2b01      	cmp	r3, #1
2400aec8:	f000 809a 	beq.w	2400b000 <HAL_SPI_TransmitReceive_DMA+0x144>
2400aecc:	2301      	movs	r3, #1
2400aece:	4604      	mov	r4, r0
2400aed0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400aed4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400aed8:	2b01      	cmp	r3, #1
2400aeda:	b2de      	uxtb	r6, r3
2400aedc:	d158      	bne.n	2400af90 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400aede:	2d00      	cmp	r5, #0
2400aee0:	bf18      	it	ne
2400aee2:	2a00      	cmpne	r2, #0
2400aee4:	d04e      	beq.n	2400af84 <HAL_SPI_TransmitReceive_DMA+0xc8>
2400aee6:	fab1 f381 	clz	r3, r1
2400aeea:	095b      	lsrs	r3, r3, #5
2400aeec:	2900      	cmp	r1, #0
2400aeee:	d049      	beq.n	2400af84 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400aef0:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400aef2:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400aef4:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400aef6:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400aef8:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400aefc:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400af00:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400af04:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400af08:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400af0c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400af10:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400af14:	68d3      	ldr	r3, [r2, #12]
2400af16:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400af1a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400af1c:	6802      	ldr	r2, [r0, #0]
2400af1e:	6893      	ldr	r3, [r2, #8]
2400af20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400af24:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400af26:	68c3      	ldr	r3, [r0, #12]
2400af28:	2b0f      	cmp	r3, #15
2400af2a:	d938      	bls.n	2400af9e <HAL_SPI_TransmitReceive_DMA+0xe2>
2400af2c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400af2e:	699a      	ldr	r2, [r3, #24]
2400af30:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400af34:	d126      	bne.n	2400af84 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400af36:	4a6c      	ldr	r2, [pc, #432]	; (2400b0e8 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400af38:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400af3c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400b0f4 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400af40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400af42:	4a6a      	ldr	r2, [pc, #424]	; (2400b0ec <HAL_SPI_TransmitReceive_DMA+0x230>)
2400af44:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400af46:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400af48:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400af4a:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400af4e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400af50:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400af54:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400af58:	6821      	ldr	r1, [r4, #0]
2400af5a:	b29b      	uxth	r3, r3
2400af5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400af5e:	3130      	adds	r1, #48	; 0x30
2400af60:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400af62:	f7f9 ffcb 	bl	24004efc <HAL_DMA_Start_IT>
2400af66:	4607      	mov	r7, r0
2400af68:	2800      	cmp	r0, #0
2400af6a:	d04d      	beq.n	2400b008 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400af6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400af70:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400af72:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400af76:	f043 0310 	orr.w	r3, r3, #16
2400af7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400af7e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400af82:	e002      	b.n	2400af8a <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400af84:	2300      	movs	r3, #0
2400af86:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400af8a:	4630      	mov	r0, r6
2400af8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400af90:	2300      	movs	r3, #0
    return errorcode;
2400af92:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400af94:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400af98:	4630      	mov	r0, r6
2400af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400af9e:	2b07      	cmp	r3, #7
2400afa0:	d87f      	bhi.n	2400b0a2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400afa2:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400afa4:	6993      	ldr	r3, [r2, #24]
2400afa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400afaa:	d107      	bne.n	2400afbc <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400afac:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400afb0:	b29b      	uxth	r3, r3
2400afb2:	3301      	adds	r3, #1
2400afb4:	085b      	lsrs	r3, r3, #1
2400afb6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400afba:	6993      	ldr	r3, [r2, #24]
2400afbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400afc0:	d106      	bne.n	2400afd0 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400afc2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400afc6:	b29b      	uxth	r3, r3
2400afc8:	3303      	adds	r3, #3
2400afca:	089b      	lsrs	r3, r3, #2
2400afcc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400afd0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400afd2:	699a      	ldr	r2, [r3, #24]
2400afd4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400afd8:	d107      	bne.n	2400afea <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400afda:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400afde:	b292      	uxth	r2, r2
2400afe0:	3201      	adds	r2, #1
2400afe2:	0852      	lsrs	r2, r2, #1
2400afe4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400afe8:	699a      	ldr	r2, [r3, #24]
2400afea:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400afee:	d1a2      	bne.n	2400af36 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400aff0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400aff4:	b292      	uxth	r2, r2
2400aff6:	3203      	adds	r2, #3
2400aff8:	0892      	lsrs	r2, r2, #2
2400affa:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400affe:	e79a      	b.n	2400af36 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400b000:	2602      	movs	r6, #2
}
2400b002:	4630      	mov	r0, r6
2400b004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b008:	6822      	ldr	r2, [r4, #0]
2400b00a:	6893      	ldr	r3, [r2, #8]
2400b00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400b010:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400b012:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b014:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400b016:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b018:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400b01a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b01c:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400b01e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b020:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400b024:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400b028:	6822      	ldr	r2, [r4, #0]
2400b02a:	b29b      	uxth	r3, r3
2400b02c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400b02e:	3220      	adds	r2, #32
2400b030:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b032:	f7f9 ff63 	bl	24004efc <HAL_DMA_Start_IT>
2400b036:	bb40      	cbnz	r0, 2400b08a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b038:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b03a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b03c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b03e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b044:	4b2a      	ldr	r3, [pc, #168]	; (2400b0f0 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400b046:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400b04a:	bf18      	it	ne
2400b04c:	432b      	orrne	r3, r5
2400b04e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400b050:	6822      	ldr	r2, [r4, #0]
2400b052:	6893      	ldr	r3, [r2, #8]
2400b054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400b058:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400b05a:	6822      	ldr	r2, [r4, #0]
2400b05c:	6913      	ldr	r3, [r2, #16]
2400b05e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400b062:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400b064:	6822      	ldr	r2, [r4, #0]
2400b066:	6813      	ldr	r3, [r2, #0]
2400b068:	f043 0301 	orr.w	r3, r3, #1
2400b06c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400b06e:	6863      	ldr	r3, [r4, #4]
2400b070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b074:	d104      	bne.n	2400b080 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400b076:	6822      	ldr	r2, [r4, #0]
2400b078:	6813      	ldr	r3, [r2, #0]
2400b07a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b07e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400b080:	2300      	movs	r3, #0
  return errorcode;
2400b082:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400b084:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400b088:	e77f      	b.n	2400af8a <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b08a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b08e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b090:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b094:	f043 0310 	orr.w	r3, r3, #16
2400b098:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b09c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b0a0:	e773      	b.n	2400af8a <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400b0a2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b0a4:	699a      	ldr	r2, [r3, #24]
2400b0a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b0aa:	d003      	beq.n	2400b0b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400b0ac:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b0b0:	f47f af68 	bne.w	2400af84 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b0b4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b0b6:	6989      	ldr	r1, [r1, #24]
2400b0b8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b0bc:	d107      	bne.n	2400b0ce <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b0be:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400b0c2:	b292      	uxth	r2, r2
2400b0c4:	3201      	adds	r2, #1
2400b0c6:	0852      	lsrs	r2, r2, #1
2400b0c8:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b0cc:	699a      	ldr	r2, [r3, #24]
2400b0ce:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b0d2:	f47f af30 	bne.w	2400af36 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b0d6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b0da:	b292      	uxth	r2, r2
2400b0dc:	3201      	adds	r2, #1
2400b0de:	0852      	lsrs	r2, r2, #1
2400b0e0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b0e4:	e727      	b.n	2400af36 <HAL_SPI_TransmitReceive_DMA+0x7a>
2400b0e6:	bf00      	nop
2400b0e8:	2400b159 	.word	0x2400b159
2400b0ec:	2400b125 	.word	0x2400b125
2400b0f0:	ffff0000 	.word	0xffff0000
2400b0f4:	2400b169 	.word	0x2400b169

2400b0f8 <HAL_SPI_TxCpltCallback>:
2400b0f8:	4770      	bx	lr
2400b0fa:	bf00      	nop

2400b0fc <SPI_DMAReceiveCplt>:
{
2400b0fc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b0fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b100:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b104:	2b07      	cmp	r3, #7
2400b106:	d009      	beq.n	2400b11c <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400b108:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b10a:	69db      	ldr	r3, [r3, #28]
2400b10c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b110:	d005      	beq.n	2400b11e <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b112:	6802      	ldr	r2, [r0, #0]
2400b114:	6913      	ldr	r3, [r2, #16]
2400b116:	f043 0308 	orr.w	r3, r3, #8
2400b11a:	6113      	str	r3, [r2, #16]
}
2400b11c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
2400b11e:	f022 fac3 	bl	2402d6a8 <__HAL_SPI_RxCpltCallback_veneer>
}
2400b122:	bd08      	pop	{r3, pc}

2400b124 <SPI_DMATransmitReceiveCplt>:
{
2400b124:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b126:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b128:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b12c:	2b07      	cmp	r3, #7
2400b12e:	d009      	beq.n	2400b144 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b130:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400b132:	69db      	ldr	r3, [r3, #28]
2400b134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b138:	d005      	beq.n	2400b146 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b13a:	6802      	ldr	r2, [r0, #0]
2400b13c:	6913      	ldr	r3, [r2, #16]
2400b13e:	f043 0308 	orr.w	r3, r3, #8
2400b142:	6113      	str	r3, [r2, #16]
}
2400b144:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400b146:	f022 facf 	bl	2402d6e8 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400b14a:	bd08      	pop	{r3, pc}

2400b14c <SPI_DMAHalfReceiveCplt>:
{
2400b14c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
2400b14e:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b150:	f022 fad2 	bl	2402d6f8 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
2400b154:	bd08      	pop	{r3, pc}
2400b156:	bf00      	nop

2400b158 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400b158:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400b15a:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b15c:	f022 faa8 	bl	2402d6b0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400b160:	bd08      	pop	{r3, pc}
2400b162:	bf00      	nop

2400b164 <HAL_SPI_ErrorCallback>:
2400b164:	4770      	bx	lr
2400b166:	bf00      	nop

2400b168 <SPI_DMAError>:
{
2400b168:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b16a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400b16c:	f7fa ff2a 	bl	24005fc4 <HAL_DMA_GetError>
2400b170:	2802      	cmp	r0, #2
2400b172:	d100      	bne.n	2400b176 <SPI_DMAError+0xe>
}
2400b174:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400b176:	6822      	ldr	r2, [r4, #0]
2400b178:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b17a:	6991      	ldr	r1, [r2, #24]
2400b17c:	f041 0108 	orr.w	r1, r1, #8
2400b180:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b182:	6821      	ldr	r1, [r4, #0]
2400b184:	698a      	ldr	r2, [r1, #24]
2400b186:	f042 0210 	orr.w	r2, r2, #16
2400b18a:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400b18c:	6821      	ldr	r1, [r4, #0]
2400b18e:	680a      	ldr	r2, [r1, #0]
2400b190:	f022 0201 	bic.w	r2, r2, #1
2400b194:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b196:	6821      	ldr	r1, [r4, #0]
2400b198:	4a2c      	ldr	r2, [pc, #176]	; (2400b24c <SPI_DMAError+0xe4>)
2400b19a:	6908      	ldr	r0, [r1, #16]
2400b19c:	4002      	ands	r2, r0
2400b19e:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b1a0:	6821      	ldr	r1, [r4, #0]
2400b1a2:	688a      	ldr	r2, [r1, #8]
2400b1a4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b1a8:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b1aa:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b1ae:	2a04      	cmp	r2, #4
2400b1b0:	d001      	beq.n	2400b1b6 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b1b2:	0698      	lsls	r0, r3, #26
2400b1b4:	d43d      	bmi.n	2400b232 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b1b6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b1ba:	2a03      	cmp	r2, #3
2400b1bc:	d001      	beq.n	2400b1c2 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b1be:	0659      	lsls	r1, r3, #25
2400b1c0:	d42b      	bmi.n	2400b21a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b1c2:	059a      	lsls	r2, r3, #22
2400b1c4:	d50a      	bpl.n	2400b1dc <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b1c6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b1ca:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b1cc:	f042 0201 	orr.w	r2, r2, #1
2400b1d0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b1d4:	698a      	ldr	r2, [r1, #24]
2400b1d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b1da:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b1dc:	05db      	lsls	r3, r3, #23
2400b1de:	d50a      	bpl.n	2400b1f6 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b1e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b1e4:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b1e6:	f043 0308 	orr.w	r3, r3, #8
2400b1ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b1ee:	6993      	ldr	r3, [r2, #24]
2400b1f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b1f4:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b1f6:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400b1f8:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400b1fa:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400b1fc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b200:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b204:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b208:	f043 0310 	orr.w	r3, r3, #16
2400b20c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b210:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400b214:	f7ff ffa6 	bl	2400b164 <HAL_SPI_ErrorCallback>
}
2400b218:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b21a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b21e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b220:	f042 0204 	orr.w	r2, r2, #4
2400b224:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b228:	698a      	ldr	r2, [r1, #24]
2400b22a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b22e:	618a      	str	r2, [r1, #24]
2400b230:	e7c7      	b.n	2400b1c2 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b232:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b236:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b23c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b240:	698a      	ldr	r2, [r1, #24]
2400b242:	f042 0220 	orr.w	r2, r2, #32
2400b246:	618a      	str	r2, [r1, #24]
2400b248:	e7b5      	b.n	2400b1b6 <SPI_DMAError+0x4e>
2400b24a:	bf00      	nop
2400b24c:	fffffc90 	.word	0xfffffc90

2400b250 <SPI_DMAAbortOnError>:
{
2400b250:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400b252:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b254:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400b256:	2300      	movs	r3, #0
2400b258:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400b25c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400b260:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400b264:	f7ff ff7e 	bl	2400b164 <HAL_SPI_ErrorCallback>
}
2400b268:	bd08      	pop	{r3, pc}
2400b26a:	bf00      	nop

2400b26c <HAL_SPI_SuspendCallback>:
2400b26c:	4770      	bx	lr
2400b26e:	bf00      	nop

2400b270 <HAL_SPI_IRQHandler>:
{
2400b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itsource = hspi->Instance->IER;
2400b274:	6806      	ldr	r6, [r0, #0]
{
2400b276:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400b278:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400b27a:	6973      	ldr	r3, [r6, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400b27c:	f8d6 8008 	ldr.w	r8, [r6, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b280:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400b282:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400b286:	ea02 0903 	and.w	r9, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400b28a:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b28c:	d502      	bpl.n	2400b294 <HAL_SPI_IRQHandler+0x24>
2400b28e:	0713      	lsls	r3, r2, #28
2400b290:	f100 8091 	bmi.w	2400b3b6 <HAL_SPI_IRQHandler+0x146>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400b294:	f009 0364 	and.w	r3, r9, #100	; 0x64
2400b298:	2b04      	cmp	r3, #4
2400b29a:	f000 8084 	beq.w	2400b3a6 <HAL_SPI_IRQHandler+0x136>
  uint32_t handled  = 0UL;
2400b29e:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400b2a0:	f009 0745 	and.w	r7, r9, #69	; 0x45
2400b2a4:	2f01      	cmp	r7, #1
2400b2a6:	d103      	bne.n	2400b2b0 <HAL_SPI_IRQHandler+0x40>
    hspi->RxISR(hspi);
2400b2a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b2aa:	4620      	mov	r0, r4
2400b2ac:	4798      	blx	r3
    handled = 1UL;
2400b2ae:	463b      	mov	r3, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b2b0:	f009 0226 	and.w	r2, r9, #38	; 0x26
2400b2b4:	2a02      	cmp	r2, #2
2400b2b6:	d066      	beq.n	2400b386 <HAL_SPI_IRQHandler+0x116>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b2b8:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400b2bc:	d144      	bne.n	2400b348 <HAL_SPI_IRQHandler+0xd8>
  if (handled != 0UL)
2400b2be:	2b00      	cmp	r3, #0
2400b2c0:	d140      	bne.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400b2c2:	f019 0f08 	tst.w	r9, #8
2400b2c6:	d03a      	beq.n	2400b33e <HAL_SPI_IRQHandler+0xce>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b2c8:	6822      	ldr	r2, [r4, #0]
2400b2ca:	6993      	ldr	r3, [r2, #24]
2400b2cc:	f043 0308 	orr.w	r3, r3, #8
2400b2d0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b2d2:	6822      	ldr	r2, [r4, #0]
2400b2d4:	6993      	ldr	r3, [r2, #24]
2400b2d6:	f043 0310 	orr.w	r3, r3, #16
2400b2da:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b2dc:	6822      	ldr	r2, [r4, #0]
2400b2de:	6993      	ldr	r3, [r2, #24]
2400b2e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b2e4:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400b2e6:	6822      	ldr	r2, [r4, #0]
2400b2e8:	6913      	ldr	r3, [r2, #16]
2400b2ea:	f023 0308 	bic.w	r3, r3, #8
2400b2ee:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b2f0:	6823      	ldr	r3, [r4, #0]
2400b2f2:	689b      	ldr	r3, [r3, #8]
2400b2f4:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400b2f8:	d12f      	bne.n	2400b35a <HAL_SPI_IRQHandler+0xea>
      while (hspi->RxXferCount != 0UL)
2400b2fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b2fe:	b29b      	uxth	r3, r3
2400b300:	b35b      	cbz	r3, 2400b35a <HAL_SPI_IRQHandler+0xea>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400b302:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b304:	e00f      	b.n	2400b326 <HAL_SPI_IRQHandler+0xb6>
2400b306:	6823      	ldr	r3, [r4, #0]
2400b308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400b30a:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b30c:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b30e:	3204      	adds	r2, #4
2400b310:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400b312:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b316:	3b01      	subs	r3, #1
2400b318:	b29b      	uxth	r3, r3
2400b31a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400b31e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b322:	b29b      	uxth	r3, r3
2400b324:	b1cb      	cbz	r3, 2400b35a <HAL_SPI_IRQHandler+0xea>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400b326:	68e3      	ldr	r3, [r4, #12]
2400b328:	2b0f      	cmp	r3, #15
2400b32a:	d8ec      	bhi.n	2400b306 <HAL_SPI_IRQHandler+0x96>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400b32c:	2b07      	cmp	r3, #7
2400b32e:	f240 80c4 	bls.w	2400b4ba <HAL_SPI_IRQHandler+0x24a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400b332:	8e33      	ldrh	r3, [r6, #48]	; 0x30
2400b334:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400b336:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b338:	3202      	adds	r2, #2
2400b33a:	6662      	str	r2, [r4, #100]	; 0x64
2400b33c:	e7e9      	b.n	2400b312 <HAL_SPI_IRQHandler+0xa2>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400b33e:	f419 7f58 	tst.w	r9, #864	; 0x360
2400b342:	d140      	bne.n	2400b3c6 <HAL_SPI_IRQHandler+0x156>
}
2400b344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b348:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b34a:	2200      	movs	r2, #0
2400b34c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b350:	698a      	ldr	r2, [r1, #24]
2400b352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400b356:	618a      	str	r2, [r1, #24]
2400b358:	e7b1      	b.n	2400b2be <HAL_SPI_IRQHandler+0x4e>
    SPI_CloseTransfer(hspi);
2400b35a:	4620      	mov	r0, r4
2400b35c:	f7ff fb9e 	bl	2400aa9c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400b360:	2301      	movs	r3, #1
2400b362:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b366:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b36a:	2b00      	cmp	r3, #0
2400b36c:	f040 80a1 	bne.w	2400b4b2 <HAL_SPI_IRQHandler+0x242>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400b370:	2d05      	cmp	r5, #5
2400b372:	f000 80aa 	beq.w	2400b4ca <HAL_SPI_IRQHandler+0x25a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400b376:	2d04      	cmp	r5, #4
2400b378:	f000 80aa 	beq.w	2400b4d0 <HAL_SPI_IRQHandler+0x260>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400b37c:	2d03      	cmp	r5, #3
2400b37e:	d1e1      	bne.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
2400b380:	f7ff feba 	bl	2400b0f8 <HAL_SPI_TxCpltCallback>
2400b384:	e7de      	b.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
2400b386:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b388:	4620      	mov	r0, r4
2400b38a:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b38c:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400b390:	d0d8      	beq.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b392:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b394:	2300      	movs	r3, #0
2400b396:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b39a:	6993      	ldr	r3, [r2, #24]
2400b39c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b3a0:	6193      	str	r3, [r2, #24]
}
2400b3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->TxISR(hspi);
2400b3a6:	4620      	mov	r0, r4
2400b3a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b3aa:	4798      	blx	r3
    hspi->RxISR(hspi);
2400b3ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b3ae:	4620      	mov	r0, r4
2400b3b0:	4798      	blx	r3
    handled = 1UL;
2400b3b2:	2301      	movs	r3, #1
2400b3b4:	e774      	b.n	2400b2a0 <HAL_SPI_IRQHandler+0x30>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b3b6:	69b3      	ldr	r3, [r6, #24]
2400b3b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b3bc:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
2400b3be:	f7ff ff55 	bl	2400b26c <HAL_SPI_SuspendCallback>
}
2400b3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400b3c6:	f019 0f40 	tst.w	r9, #64	; 0x40
2400b3ca:	d00a      	beq.n	2400b3e2 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b3cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b3d0:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b3d2:	f043 0304 	orr.w	r3, r3, #4
2400b3d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b3da:	6993      	ldr	r3, [r2, #24]
2400b3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b3e0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400b3e2:	f419 7f00 	tst.w	r9, #512	; 0x200
2400b3e6:	d00a      	beq.n	2400b3fe <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b3e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b3ec:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b3ee:	f043 0301 	orr.w	r3, r3, #1
2400b3f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b3f6:	6993      	ldr	r3, [r2, #24]
2400b3f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b3fc:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400b3fe:	f419 7f80 	tst.w	r9, #256	; 0x100
2400b402:	d00a      	beq.n	2400b41a <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b404:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b408:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b40a:	f043 0308 	orr.w	r3, r3, #8
2400b40e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b412:	6993      	ldr	r3, [r2, #24]
2400b414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b418:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400b41a:	f019 0f20 	tst.w	r9, #32
2400b41e:	d00a      	beq.n	2400b436 <HAL_SPI_IRQHandler+0x1c6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b420:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b424:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b42a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b42e:	6993      	ldr	r3, [r2, #24]
2400b430:	f043 0320 	orr.w	r3, r3, #32
2400b434:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b436:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b43a:	2b00      	cmp	r3, #0
2400b43c:	d082      	beq.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
2400b43e:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b440:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b444:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b446:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b44a:	f023 0301 	bic.w	r3, r3, #1
2400b44e:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400b450:	6822      	ldr	r2, [r4, #0]
2400b452:	4b21      	ldr	r3, [pc, #132]	; (2400b4d8 <HAL_SPI_IRQHandler+0x268>)
2400b454:	6911      	ldr	r1, [r2, #16]
2400b456:	ea03 0301 	and.w	r3, r3, r1
2400b45a:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b45c:	d125      	bne.n	2400b4aa <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b45e:	6822      	ldr	r2, [r4, #0]
2400b460:	6893      	ldr	r3, [r2, #8]
2400b462:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b466:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400b468:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b46a:	b15b      	cbz	r3, 2400b484 <HAL_SPI_IRQHandler+0x214>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400b46c:	4a1b      	ldr	r2, [pc, #108]	; (2400b4dc <HAL_SPI_IRQHandler+0x26c>)
2400b46e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400b470:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b472:	f7fa f80f 	bl	24005494 <HAL_DMA_Abort_IT>
2400b476:	b128      	cbz	r0, 2400b484 <HAL_SPI_IRQHandler+0x214>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b478:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b480:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400b484:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b486:	2b00      	cmp	r3, #0
2400b488:	f43f af5c 	beq.w	2400b344 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400b48c:	4a13      	ldr	r2, [pc, #76]	; (2400b4dc <HAL_SPI_IRQHandler+0x26c>)
2400b48e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400b490:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b492:	f7f9 ffff 	bl	24005494 <HAL_DMA_Abort_IT>
2400b496:	2800      	cmp	r0, #0
2400b498:	f43f af54 	beq.w	2400b344 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b49c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b4a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b4a8:	e74c      	b.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
2400b4aa:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400b4ac:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400b4ae:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400b4b2:	f7ff fe57 	bl	2400b164 <HAL_SPI_ErrorCallback>
}
2400b4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400b4ba:	6823      	ldr	r3, [r4, #0]
2400b4bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400b4c0:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400b4c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b4c4:	3201      	adds	r2, #1
2400b4c6:	6662      	str	r2, [r4, #100]	; 0x64
2400b4c8:	e723      	b.n	2400b312 <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
2400b4ca:	f022 f90d 	bl	2402d6e8 <__HAL_SPI_TxRxCpltCallback_veneer>
2400b4ce:	e739      	b.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
2400b4d0:	f022 f8ea 	bl	2402d6a8 <__HAL_SPI_RxCpltCallback_veneer>
2400b4d4:	e736      	b.n	2400b344 <HAL_SPI_IRQHandler+0xd4>
2400b4d6:	bf00      	nop
2400b4d8:	fffffc94 	.word	0xfffffc94
2400b4dc:	2400b251 	.word	0x2400b251

2400b4e0 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b4e0:	680b      	ldr	r3, [r1, #0]
{
2400b4e2:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b4e4:	b9d3      	cbnz	r3, 2400b51c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b4e6:	6804      	ldr	r4, [r0, #0]
2400b4e8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400b4ec:	684a      	ldr	r2, [r1, #4]
2400b4ee:	4023      	ands	r3, r4
2400b4f0:	4313      	orrs	r3, r2
2400b4f2:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400b4f6:	4323      	orrs	r3, r4
2400b4f8:	4313      	orrs	r3, r2
2400b4fa:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400b4fe:	4323      	orrs	r3, r4
2400b500:	4313      	orrs	r3, r2
2400b502:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400b506:	4323      	orrs	r3, r4
2400b508:	4313      	orrs	r3, r2
2400b50a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400b50e:	4323      	orrs	r3, r4
2400b510:	4313      	orrs	r3, r2
2400b512:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400b514:	2000      	movs	r0, #0
2400b516:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b51a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b51c:	6802      	ldr	r2, [r0, #0]
2400b51e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400b522:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400b526:	4322      	orrs	r2, r4
2400b528:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400b52a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b52c:	4b0a      	ldr	r3, [pc, #40]	; (2400b558 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b52e:	4322      	orrs	r2, r4
2400b530:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b532:	6842      	ldr	r2, [r0, #4]
2400b534:	4013      	ands	r3, r2
2400b536:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400b53a:	4323      	orrs	r3, r4
2400b53c:	4313      	orrs	r3, r2
2400b53e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400b542:	4323      	orrs	r3, r4
2400b544:	4313      	orrs	r3, r2
2400b546:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400b54a:	4323      	orrs	r3, r4
2400b54c:	4313      	orrs	r3, r2
2400b54e:	6043      	str	r3, [r0, #4]
}
2400b550:	2000      	movs	r0, #0
2400b552:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b556:	4770      	bx	lr
2400b558:	ffff8000 	.word	0xffff8000

2400b55c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400b55c:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400b55e:	bb02      	cbnz	r2, 2400b5a2 <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b560:	6883      	ldr	r3, [r0, #8]
2400b562:	e9d1 2400 	ldrd	r2, r4, [r1]
2400b566:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b56a:	3c01      	subs	r4, #1
2400b56c:	3a01      	subs	r2, #1
2400b56e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400b572:	4313      	orrs	r3, r2
2400b574:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
2400b578:	3a01      	subs	r2, #1
2400b57a:	3c01      	subs	r4, #1
2400b57c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400b580:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
2400b584:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
2400b588:	6989      	ldr	r1, [r1, #24]
2400b58a:	3b01      	subs	r3, #1
2400b58c:	3c01      	subs	r4, #1
2400b58e:	3901      	subs	r1, #1
2400b590:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
2400b594:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
2400b598:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400b59c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400b59e:	2000      	movs	r0, #0
2400b5a0:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b5a2:	6885      	ldr	r5, [r0, #8]
2400b5a4:	68ca      	ldr	r2, [r1, #12]
2400b5a6:	4b13      	ldr	r3, [pc, #76]	; (2400b5f4 <FMC_SDRAM_Timing_Init+0x98>)
2400b5a8:	1e54      	subs	r4, r2, #1
2400b5aa:	694a      	ldr	r2, [r1, #20]
2400b5ac:	402b      	ands	r3, r5
2400b5ae:	3a01      	subs	r2, #1
2400b5b0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400b5b4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400b5b8:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400b5ba:	68c3      	ldr	r3, [r0, #12]
2400b5bc:	e9d1 4200 	ldrd	r4, r2, [r1]
2400b5c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b5c4:	3a01      	subs	r2, #1
2400b5c6:	3c01      	subs	r4, #1
2400b5c8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400b5cc:	ea43 0204 	orr.w	r2, r3, r4
2400b5d0:	688c      	ldr	r4, [r1, #8]
2400b5d2:	690b      	ldr	r3, [r1, #16]
2400b5d4:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
2400b5d8:	6989      	ldr	r1, [r1, #24]
2400b5da:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400b5de:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
2400b5e2:	3901      	subs	r1, #1
2400b5e4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
2400b5e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400b5ec:	60c3      	str	r3, [r0, #12]
}
2400b5ee:	2000      	movs	r0, #0
2400b5f0:	bd30      	pop	{r4, r5, pc}
2400b5f2:	bf00      	nop
2400b5f4:	ff0f0fff 	.word	0xff0f0fff

2400b5f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400b5f8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b5fa:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400b5fe:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b600:	6900      	ldr	r0, [r0, #16]
2400b602:	4323      	orrs	r3, r4
2400b604:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400b608:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400b60c:	4c05      	ldr	r4, [pc, #20]	; (2400b624 <FMC_SDRAM_SendCommand+0x2c>)
2400b60e:	3901      	subs	r1, #1
2400b610:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400b612:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b614:	4323      	orrs	r3, r4
2400b616:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400b61a:	6113      	str	r3, [r2, #16]
}
2400b61c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b620:	4770      	bx	lr
2400b622:	bf00      	nop
2400b624:	ffc00000 	.word	0xffc00000

2400b628 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400b628:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400b62a:	4b05      	ldr	r3, [pc, #20]	; (2400b640 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400b62c:	2000      	movs	r0, #0
{
2400b62e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400b630:	6954      	ldr	r4, [r2, #20]
2400b632:	4023      	ands	r3, r4
2400b634:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400b638:	6151      	str	r1, [r2, #20]
}
2400b63a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b63e:	4770      	bx	lr
2400b640:	ffffc001 	.word	0xffffc001

2400b644 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400b644:	b084      	sub	sp, #16
2400b646:	b410      	push	{r4}
2400b648:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400b64c:	4614      	mov	r4, r2
{
2400b64e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400b652:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400b654:	9904      	ldr	r1, [sp, #16]
{
2400b656:	4602      	mov	r2, r0
             Init.BusWide             | \
2400b658:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400b65a:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400b65c:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400b65e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400b660:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400b662:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400b664:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400b666:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400b668:	4903      	ldr	r1, [pc, #12]	; (2400b678 <SDMMC_Init+0x34>)
2400b66a:	4021      	ands	r1, r4
2400b66c:	430b      	orrs	r3, r1
2400b66e:	6053      	str	r3, [r2, #4]
}
2400b670:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b674:	b004      	add	sp, #16
2400b676:	4770      	bx	lr
2400b678:	ffc02c00 	.word	0xffc02c00

2400b67c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400b67c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400b680:	4770      	bx	lr
2400b682:	bf00      	nop

2400b684 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400b684:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400b686:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400b688:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400b68a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400b68e:	4770      	bx	lr

2400b690 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400b690:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400b692:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400b694:	681a      	ldr	r2, [r3, #0]
2400b696:	f042 0203 	orr.w	r2, r2, #3
2400b69a:	601a      	str	r2, [r3, #0]
}
2400b69c:	4770      	bx	lr
2400b69e:	bf00      	nop

2400b6a0 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400b6a0:	6800      	ldr	r0, [r0, #0]
}
2400b6a2:	f000 0003 	and.w	r0, r0, #3
2400b6a6:	4770      	bx	lr

2400b6a8 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400b6a8:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400b6aa:	5840      	ldr	r0, [r0, r1]
}
2400b6ac:	4770      	bx	lr
2400b6ae:	bf00      	nop

2400b6b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400b6b0:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400b6b2:	680b      	ldr	r3, [r1, #0]
{
2400b6b4:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400b6b6:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400b6b8:	684b      	ldr	r3, [r1, #4]
2400b6ba:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400b6bc:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b6be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400b6c0:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400b6c4:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400b6c6:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b6c8:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400b6cc:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400b6ce:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400b6d0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b6d2:	430b      	orrs	r3, r1
2400b6d4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400b6d6:	bc30      	pop	{r4, r5}
2400b6d8:	4770      	bx	lr
2400b6da:	bf00      	nop

2400b6dc <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6dc:	4a4c      	ldr	r2, [pc, #304]	; (2400b810 <SDMMC_CmdBlockLength+0x134>)
2400b6de:	4b4d      	ldr	r3, [pc, #308]	; (2400b814 <SDMMC_CmdBlockLength+0x138>)
{
2400b6e0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6e2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b6e4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6e6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6ea:	68c1      	ldr	r1, [r0, #12]
2400b6ec:	4c4a      	ldr	r4, [pc, #296]	; (2400b818 <SDMMC_CmdBlockLength+0x13c>)
2400b6ee:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6f4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6f6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6fa:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6fc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b700:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
2400b702:	b14a      	cbz	r2, 2400b718 <SDMMC_CmdBlockLength+0x3c>
2400b704:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b706:	4945      	ldr	r1, [pc, #276]	; (2400b81c <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
2400b708:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400b70a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b70c:	420a      	tst	r2, r1
2400b70e:	d001      	beq.n	2400b714 <SDMMC_CmdBlockLength+0x38>
2400b710:	0492      	lsls	r2, r2, #18
2400b712:	d507      	bpl.n	2400b724 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
2400b714:	1c5c      	adds	r4, r3, #1
2400b716:	d1f7      	bne.n	2400b708 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400b718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400b71c:	4618      	mov	r0, r3
2400b71e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b722:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b724:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b726:	075c      	lsls	r4, r3, #29
2400b728:	d43d      	bmi.n	2400b7a6 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b72a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b72c:	f013 0301 	ands.w	r3, r3, #1
2400b730:	d134      	bne.n	2400b79c <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b732:	4b3b      	ldr	r3, [pc, #236]	; (2400b820 <SDMMC_CmdBlockLength+0x144>)
2400b734:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b736:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b738:	b2db      	uxtb	r3, r3
2400b73a:	2b10      	cmp	r3, #16
2400b73c:	d131      	bne.n	2400b7a2 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
2400b73e:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b740:	4b38      	ldr	r3, [pc, #224]	; (2400b824 <SDMMC_CmdBlockLength+0x148>)
2400b742:	4013      	ands	r3, r2
2400b744:	2b00      	cmp	r3, #0
2400b746:	d0e9      	beq.n	2400b71c <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b748:	2a00      	cmp	r2, #0
2400b74a:	db30      	blt.n	2400b7ae <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b74c:	0051      	lsls	r1, r2, #1
2400b74e:	d431      	bmi.n	2400b7b4 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b750:	0094      	lsls	r4, r2, #2
2400b752:	d431      	bmi.n	2400b7b8 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b754:	00d0      	lsls	r0, r2, #3
2400b756:	d431      	bmi.n	2400b7bc <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b758:	0111      	lsls	r1, r2, #4
2400b75a:	d432      	bmi.n	2400b7c2 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b75c:	0154      	lsls	r4, r2, #5
2400b75e:	d433      	bmi.n	2400b7c8 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b760:	01d0      	lsls	r0, r2, #7
2400b762:	d434      	bmi.n	2400b7ce <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b764:	0211      	lsls	r1, r2, #8
2400b766:	d435      	bmi.n	2400b7d4 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b768:	0254      	lsls	r4, r2, #9
2400b76a:	d436      	bmi.n	2400b7da <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b76c:	0290      	lsls	r0, r2, #10
2400b76e:	d440      	bmi.n	2400b7f2 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b770:	02d1      	lsls	r1, r2, #11
2400b772:	d43b      	bmi.n	2400b7ec <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b774:	0354      	lsls	r4, r2, #13
2400b776:	d436      	bmi.n	2400b7e6 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b778:	0390      	lsls	r0, r2, #14
2400b77a:	d431      	bmi.n	2400b7e0 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b77c:	03d1      	lsls	r1, r2, #15
2400b77e:	d444      	bmi.n	2400b80a <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b780:	0414      	lsls	r4, r2, #16
2400b782:	d43f      	bmi.n	2400b804 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b784:	0450      	lsls	r0, r2, #17
2400b786:	d43a      	bmi.n	2400b7fe <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b788:	0491      	lsls	r1, r2, #18
2400b78a:	d435      	bmi.n	2400b7f8 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b78c:	f012 0f08 	tst.w	r2, #8
2400b790:	bf14      	ite	ne
2400b792:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400b796:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400b79a:	e7bf      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b79c:	2201      	movs	r2, #1
2400b79e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b7a0:	e7bc      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b7a2:	2301      	movs	r3, #1
2400b7a4:	e7ba      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b7a6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b7a8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b7aa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b7ac:	e7b6      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b7ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b7b2:	e7b3      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b7b4:	2340      	movs	r3, #64	; 0x40
2400b7b6:	e7b1      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b7b8:	2380      	movs	r3, #128	; 0x80
2400b7ba:	e7af      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b7bc:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b7c0:	e7ac      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b7c2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400b7c6:	e7a9      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b7c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400b7cc:	e7a6      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b7ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400b7d2:	e7a3      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b7d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b7d8:	e7a0      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b7da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400b7de:	e79d      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b7e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400b7e4:	e79a      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b7e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400b7ea:	e797      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
2400b7ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400b7f0:	e794      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b7f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400b7f6:	e791      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400b7f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400b7fc:	e78e      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b7fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400b802:	e78b      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b804:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400b808:	e788      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b80a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400b80e:	e785      	b.n	2400b71c <SDMMC_CmdBlockLength+0x40>
2400b810:	200006e0 	.word	0x200006e0
2400b814:	10624dd3 	.word	0x10624dd3
2400b818:	fffee0c0 	.word	0xfffee0c0
2400b81c:	00200045 	.word	0x00200045
2400b820:	002000c5 	.word	0x002000c5
2400b824:	fdffe008 	.word	0xfdffe008

2400b828 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b828:	4a4c      	ldr	r2, [pc, #304]	; (2400b95c <SDMMC_CmdReadSingleBlock+0x134>)
2400b82a:	4b4d      	ldr	r3, [pc, #308]	; (2400b960 <SDMMC_CmdReadSingleBlock+0x138>)
{
2400b82c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b82e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b830:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b832:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b836:	68c1      	ldr	r1, [r0, #12]
2400b838:	4c4a      	ldr	r4, [pc, #296]	; (2400b964 <SDMMC_CmdReadSingleBlock+0x13c>)
2400b83a:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b83e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b840:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b842:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b846:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b848:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b84c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400b84e:	b14a      	cbz	r2, 2400b864 <SDMMC_CmdReadSingleBlock+0x3c>
2400b850:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b852:	4945      	ldr	r1, [pc, #276]	; (2400b968 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400b854:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400b856:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b858:	420a      	tst	r2, r1
2400b85a:	d001      	beq.n	2400b860 <SDMMC_CmdReadSingleBlock+0x38>
2400b85c:	0492      	lsls	r2, r2, #18
2400b85e:	d507      	bpl.n	2400b870 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
2400b860:	1c5c      	adds	r4, r3, #1
2400b862:	d1f7      	bne.n	2400b854 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400b864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400b868:	4618      	mov	r0, r3
2400b86a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b86e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b870:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b872:	075c      	lsls	r4, r3, #29
2400b874:	d43d      	bmi.n	2400b8f2 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b876:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b878:	f013 0301 	ands.w	r3, r3, #1
2400b87c:	d134      	bne.n	2400b8e8 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b87e:	4b3b      	ldr	r3, [pc, #236]	; (2400b96c <SDMMC_CmdReadSingleBlock+0x144>)
2400b880:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b882:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b884:	b2db      	uxtb	r3, r3
2400b886:	2b11      	cmp	r3, #17
2400b888:	d131      	bne.n	2400b8ee <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400b88a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b88c:	4b38      	ldr	r3, [pc, #224]	; (2400b970 <SDMMC_CmdReadSingleBlock+0x148>)
2400b88e:	4013      	ands	r3, r2
2400b890:	2b00      	cmp	r3, #0
2400b892:	d0e9      	beq.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b894:	2a00      	cmp	r2, #0
2400b896:	db30      	blt.n	2400b8fa <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b898:	0051      	lsls	r1, r2, #1
2400b89a:	d431      	bmi.n	2400b900 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b89c:	0094      	lsls	r4, r2, #2
2400b89e:	d431      	bmi.n	2400b904 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b8a0:	00d0      	lsls	r0, r2, #3
2400b8a2:	d431      	bmi.n	2400b908 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b8a4:	0111      	lsls	r1, r2, #4
2400b8a6:	d432      	bmi.n	2400b90e <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b8a8:	0154      	lsls	r4, r2, #5
2400b8aa:	d433      	bmi.n	2400b914 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b8ac:	01d0      	lsls	r0, r2, #7
2400b8ae:	d434      	bmi.n	2400b91a <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b8b0:	0211      	lsls	r1, r2, #8
2400b8b2:	d435      	bmi.n	2400b920 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b8b4:	0254      	lsls	r4, r2, #9
2400b8b6:	d436      	bmi.n	2400b926 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b8b8:	0290      	lsls	r0, r2, #10
2400b8ba:	d440      	bmi.n	2400b93e <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b8bc:	02d1      	lsls	r1, r2, #11
2400b8be:	d43b      	bmi.n	2400b938 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b8c0:	0354      	lsls	r4, r2, #13
2400b8c2:	d436      	bmi.n	2400b932 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b8c4:	0390      	lsls	r0, r2, #14
2400b8c6:	d431      	bmi.n	2400b92c <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b8c8:	03d1      	lsls	r1, r2, #15
2400b8ca:	d444      	bmi.n	2400b956 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b8cc:	0414      	lsls	r4, r2, #16
2400b8ce:	d43f      	bmi.n	2400b950 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b8d0:	0450      	lsls	r0, r2, #17
2400b8d2:	d43a      	bmi.n	2400b94a <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b8d4:	0491      	lsls	r1, r2, #18
2400b8d6:	d435      	bmi.n	2400b944 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b8d8:	f012 0f08 	tst.w	r2, #8
2400b8dc:	bf14      	ite	ne
2400b8de:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400b8e2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400b8e6:	e7bf      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b8e8:	2201      	movs	r2, #1
2400b8ea:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b8ec:	e7bc      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b8ee:	2301      	movs	r3, #1
2400b8f0:	e7ba      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b8f2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b8f4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b8f6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b8f8:	e7b6      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b8fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b8fe:	e7b3      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b900:	2340      	movs	r3, #64	; 0x40
2400b902:	e7b1      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b904:	2380      	movs	r3, #128	; 0x80
2400b906:	e7af      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b908:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b90c:	e7ac      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b90e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400b912:	e7a9      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b914:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400b918:	e7a6      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b91a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400b91e:	e7a3      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b924:	e7a0      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400b92a:	e79d      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b92c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400b930:	e79a      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400b936:	e797      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400b938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400b93c:	e794      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b93e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400b942:	e791      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400b944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400b948:	e78e      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b94a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400b94e:	e78b      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b950:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400b954:	e788      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b956:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400b95a:	e785      	b.n	2400b868 <SDMMC_CmdReadSingleBlock+0x40>
2400b95c:	200006e0 	.word	0x200006e0
2400b960:	10624dd3 	.word	0x10624dd3
2400b964:	fffee0c0 	.word	0xfffee0c0
2400b968:	00200045 	.word	0x00200045
2400b96c:	002000c5 	.word	0x002000c5
2400b970:	fdffe008 	.word	0xfdffe008

2400b974 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b974:	4a4c      	ldr	r2, [pc, #304]	; (2400baa8 <SDMMC_CmdReadMultiBlock+0x134>)
2400b976:	4b4d      	ldr	r3, [pc, #308]	; (2400baac <SDMMC_CmdReadMultiBlock+0x138>)
{
2400b978:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b97a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b97c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b97e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b982:	68c1      	ldr	r1, [r0, #12]
2400b984:	4c4a      	ldr	r4, [pc, #296]	; (2400bab0 <SDMMC_CmdReadMultiBlock+0x13c>)
2400b986:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b98a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b98c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b98e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b992:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b994:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b998:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400b99a:	b14a      	cbz	r2, 2400b9b0 <SDMMC_CmdReadMultiBlock+0x3c>
2400b99c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b99e:	4945      	ldr	r1, [pc, #276]	; (2400bab4 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400b9a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400b9a2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b9a4:	420a      	tst	r2, r1
2400b9a6:	d001      	beq.n	2400b9ac <SDMMC_CmdReadMultiBlock+0x38>
2400b9a8:	0492      	lsls	r2, r2, #18
2400b9aa:	d507      	bpl.n	2400b9bc <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
2400b9ac:	1c5c      	adds	r4, r3, #1
2400b9ae:	d1f7      	bne.n	2400b9a0 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400b9b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400b9b4:	4618      	mov	r0, r3
2400b9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b9ba:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b9bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b9be:	075c      	lsls	r4, r3, #29
2400b9c0:	d43d      	bmi.n	2400ba3e <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b9c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b9c4:	f013 0301 	ands.w	r3, r3, #1
2400b9c8:	d134      	bne.n	2400ba34 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b9ca:	4b3b      	ldr	r3, [pc, #236]	; (2400bab8 <SDMMC_CmdReadMultiBlock+0x144>)
2400b9cc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b9ce:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b9d0:	b2db      	uxtb	r3, r3
2400b9d2:	2b12      	cmp	r3, #18
2400b9d4:	d131      	bne.n	2400ba3a <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400b9d6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b9d8:	4b38      	ldr	r3, [pc, #224]	; (2400babc <SDMMC_CmdReadMultiBlock+0x148>)
2400b9da:	4013      	ands	r3, r2
2400b9dc:	2b00      	cmp	r3, #0
2400b9de:	d0e9      	beq.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b9e0:	2a00      	cmp	r2, #0
2400b9e2:	db30      	blt.n	2400ba46 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b9e4:	0051      	lsls	r1, r2, #1
2400b9e6:	d431      	bmi.n	2400ba4c <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b9e8:	0094      	lsls	r4, r2, #2
2400b9ea:	d431      	bmi.n	2400ba50 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b9ec:	00d0      	lsls	r0, r2, #3
2400b9ee:	d431      	bmi.n	2400ba54 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b9f0:	0111      	lsls	r1, r2, #4
2400b9f2:	d432      	bmi.n	2400ba5a <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b9f4:	0154      	lsls	r4, r2, #5
2400b9f6:	d433      	bmi.n	2400ba60 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b9f8:	01d0      	lsls	r0, r2, #7
2400b9fa:	d434      	bmi.n	2400ba66 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b9fc:	0211      	lsls	r1, r2, #8
2400b9fe:	d435      	bmi.n	2400ba6c <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ba00:	0254      	lsls	r4, r2, #9
2400ba02:	d436      	bmi.n	2400ba72 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ba04:	0290      	lsls	r0, r2, #10
2400ba06:	d440      	bmi.n	2400ba8a <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ba08:	02d1      	lsls	r1, r2, #11
2400ba0a:	d43b      	bmi.n	2400ba84 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ba0c:	0354      	lsls	r4, r2, #13
2400ba0e:	d436      	bmi.n	2400ba7e <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ba10:	0390      	lsls	r0, r2, #14
2400ba12:	d431      	bmi.n	2400ba78 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ba14:	03d1      	lsls	r1, r2, #15
2400ba16:	d444      	bmi.n	2400baa2 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ba18:	0414      	lsls	r4, r2, #16
2400ba1a:	d43f      	bmi.n	2400ba9c <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ba1c:	0450      	lsls	r0, r2, #17
2400ba1e:	d43a      	bmi.n	2400ba96 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ba20:	0491      	lsls	r1, r2, #18
2400ba22:	d435      	bmi.n	2400ba90 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ba24:	f012 0f08 	tst.w	r2, #8
2400ba28:	bf14      	ite	ne
2400ba2a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400ba2e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400ba32:	e7bf      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ba34:	2201      	movs	r2, #1
2400ba36:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ba38:	e7bc      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ba3a:	2301      	movs	r3, #1
2400ba3c:	e7ba      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ba3e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ba40:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ba42:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ba44:	e7b6      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400ba46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ba4a:	e7b3      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ba4c:	2340      	movs	r3, #64	; 0x40
2400ba4e:	e7b1      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ba50:	2380      	movs	r3, #128	; 0x80
2400ba52:	e7af      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ba54:	f44f 7380 	mov.w	r3, #256	; 0x100
2400ba58:	e7ac      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ba5a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400ba5e:	e7a9      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ba60:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400ba64:	e7a6      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ba66:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ba6a:	e7a3      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ba6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ba70:	e7a0      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ba72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ba76:	e79d      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ba78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400ba7c:	e79a      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ba7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400ba82:	e797      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400ba84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400ba88:	e794      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ba8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ba8e:	e791      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400ba90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ba94:	e78e      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ba96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ba9a:	e78b      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ba9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400baa0:	e788      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400baa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400baa6:	e785      	b.n	2400b9b4 <SDMMC_CmdReadMultiBlock+0x40>
2400baa8:	200006e0 	.word	0x200006e0
2400baac:	10624dd3 	.word	0x10624dd3
2400bab0:	fffee0c0 	.word	0xfffee0c0
2400bab4:	00200045 	.word	0x00200045
2400bab8:	002000c5 	.word	0x002000c5
2400babc:	fdffe008 	.word	0xfdffe008

2400bac0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bac0:	4a4c      	ldr	r2, [pc, #304]	; (2400bbf4 <SDMMC_CmdWriteSingleBlock+0x134>)
2400bac2:	4b4d      	ldr	r3, [pc, #308]	; (2400bbf8 <SDMMC_CmdWriteSingleBlock+0x138>)
{
2400bac4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bac6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bac8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400baca:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bace:	68c1      	ldr	r1, [r0, #12]
2400bad0:	4c4a      	ldr	r4, [pc, #296]	; (2400bbfc <SDMMC_CmdWriteSingleBlock+0x13c>)
2400bad2:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bad6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bad8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bada:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bade:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bae0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bae4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bae6:	b14a      	cbz	r2, 2400bafc <SDMMC_CmdWriteSingleBlock+0x3c>
2400bae8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400baea:	4945      	ldr	r1, [pc, #276]	; (2400bc00 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400baec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400baee:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400baf0:	420a      	tst	r2, r1
2400baf2:	d001      	beq.n	2400baf8 <SDMMC_CmdWriteSingleBlock+0x38>
2400baf4:	0492      	lsls	r2, r2, #18
2400baf6:	d507      	bpl.n	2400bb08 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
2400baf8:	1c5c      	adds	r4, r3, #1
2400bafa:	d1f7      	bne.n	2400baec <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bafc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bb00:	4618      	mov	r0, r3
2400bb02:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bb06:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bb08:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb0a:	075c      	lsls	r4, r3, #29
2400bb0c:	d43d      	bmi.n	2400bb8a <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bb0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb10:	f013 0301 	ands.w	r3, r3, #1
2400bb14:	d134      	bne.n	2400bb80 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bb16:	4b3b      	ldr	r3, [pc, #236]	; (2400bc04 <SDMMC_CmdWriteSingleBlock+0x144>)
2400bb18:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bb1a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bb1c:	b2db      	uxtb	r3, r3
2400bb1e:	2b18      	cmp	r3, #24
2400bb20:	d131      	bne.n	2400bb86 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bb22:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bb24:	4b38      	ldr	r3, [pc, #224]	; (2400bc08 <SDMMC_CmdWriteSingleBlock+0x148>)
2400bb26:	4013      	ands	r3, r2
2400bb28:	2b00      	cmp	r3, #0
2400bb2a:	d0e9      	beq.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bb2c:	2a00      	cmp	r2, #0
2400bb2e:	db30      	blt.n	2400bb92 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bb30:	0051      	lsls	r1, r2, #1
2400bb32:	d431      	bmi.n	2400bb98 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bb34:	0094      	lsls	r4, r2, #2
2400bb36:	d431      	bmi.n	2400bb9c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bb38:	00d0      	lsls	r0, r2, #3
2400bb3a:	d431      	bmi.n	2400bba0 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bb3c:	0111      	lsls	r1, r2, #4
2400bb3e:	d432      	bmi.n	2400bba6 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bb40:	0154      	lsls	r4, r2, #5
2400bb42:	d433      	bmi.n	2400bbac <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bb44:	01d0      	lsls	r0, r2, #7
2400bb46:	d434      	bmi.n	2400bbb2 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bb48:	0211      	lsls	r1, r2, #8
2400bb4a:	d435      	bmi.n	2400bbb8 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bb4c:	0254      	lsls	r4, r2, #9
2400bb4e:	d436      	bmi.n	2400bbbe <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bb50:	0290      	lsls	r0, r2, #10
2400bb52:	d440      	bmi.n	2400bbd6 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bb54:	02d1      	lsls	r1, r2, #11
2400bb56:	d43b      	bmi.n	2400bbd0 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bb58:	0354      	lsls	r4, r2, #13
2400bb5a:	d436      	bmi.n	2400bbca <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bb5c:	0390      	lsls	r0, r2, #14
2400bb5e:	d431      	bmi.n	2400bbc4 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bb60:	03d1      	lsls	r1, r2, #15
2400bb62:	d444      	bmi.n	2400bbee <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bb64:	0414      	lsls	r4, r2, #16
2400bb66:	d43f      	bmi.n	2400bbe8 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bb68:	0450      	lsls	r0, r2, #17
2400bb6a:	d43a      	bmi.n	2400bbe2 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bb6c:	0491      	lsls	r1, r2, #18
2400bb6e:	d435      	bmi.n	2400bbdc <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bb70:	f012 0f08 	tst.w	r2, #8
2400bb74:	bf14      	ite	ne
2400bb76:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bb7a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bb7e:	e7bf      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bb80:	2201      	movs	r2, #1
2400bb82:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bb84:	e7bc      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bb86:	2301      	movs	r3, #1
2400bb88:	e7ba      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bb8a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bb8c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bb8e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bb90:	e7b6      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bb92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bb96:	e7b3      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bb98:	2340      	movs	r3, #64	; 0x40
2400bb9a:	e7b1      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bb9c:	2380      	movs	r3, #128	; 0x80
2400bb9e:	e7af      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bba0:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bba4:	e7ac      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bba6:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bbaa:	e7a9      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bbac:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bbb0:	e7a6      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bbb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bbb6:	e7a3      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bbb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bbbc:	e7a0      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bbbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bbc2:	e79d      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bbc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bbc8:	e79a      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bbca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bbce:	e797      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bbd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bbd4:	e794      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bbd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bbda:	e791      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bbdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bbe0:	e78e      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bbe2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bbe6:	e78b      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bbe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bbec:	e788      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bbee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bbf2:	e785      	b.n	2400bb00 <SDMMC_CmdWriteSingleBlock+0x40>
2400bbf4:	200006e0 	.word	0x200006e0
2400bbf8:	10624dd3 	.word	0x10624dd3
2400bbfc:	fffee0c0 	.word	0xfffee0c0
2400bc00:	00200045 	.word	0x00200045
2400bc04:	002000c5 	.word	0x002000c5
2400bc08:	fdffe008 	.word	0xfdffe008

2400bc0c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc0c:	4a4c      	ldr	r2, [pc, #304]	; (2400bd40 <SDMMC_CmdWriteMultiBlock+0x134>)
2400bc0e:	4b4d      	ldr	r3, [pc, #308]	; (2400bd44 <SDMMC_CmdWriteMultiBlock+0x138>)
{
2400bc10:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc12:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bc14:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc16:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc1a:	68c1      	ldr	r1, [r0, #12]
2400bc1c:	4c4a      	ldr	r4, [pc, #296]	; (2400bd48 <SDMMC_CmdWriteMultiBlock+0x13c>)
2400bc1e:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc22:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc24:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc26:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc2a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc2c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc30:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bc32:	b14a      	cbz	r2, 2400bc48 <SDMMC_CmdWriteMultiBlock+0x3c>
2400bc34:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bc36:	4945      	ldr	r1, [pc, #276]	; (2400bd4c <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400bc38:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bc3a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bc3c:	420a      	tst	r2, r1
2400bc3e:	d001      	beq.n	2400bc44 <SDMMC_CmdWriteMultiBlock+0x38>
2400bc40:	0492      	lsls	r2, r2, #18
2400bc42:	d507      	bpl.n	2400bc54 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
2400bc44:	1c5c      	adds	r4, r3, #1
2400bc46:	d1f7      	bne.n	2400bc38 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bc48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bc4c:	4618      	mov	r0, r3
2400bc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bc52:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bc54:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bc56:	075c      	lsls	r4, r3, #29
2400bc58:	d43d      	bmi.n	2400bcd6 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bc5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bc5c:	f013 0301 	ands.w	r3, r3, #1
2400bc60:	d134      	bne.n	2400bccc <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bc62:	4b3b      	ldr	r3, [pc, #236]	; (2400bd50 <SDMMC_CmdWriteMultiBlock+0x144>)
2400bc64:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bc66:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bc68:	b2db      	uxtb	r3, r3
2400bc6a:	2b19      	cmp	r3, #25
2400bc6c:	d131      	bne.n	2400bcd2 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bc6e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bc70:	4b38      	ldr	r3, [pc, #224]	; (2400bd54 <SDMMC_CmdWriteMultiBlock+0x148>)
2400bc72:	4013      	ands	r3, r2
2400bc74:	2b00      	cmp	r3, #0
2400bc76:	d0e9      	beq.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bc78:	2a00      	cmp	r2, #0
2400bc7a:	db30      	blt.n	2400bcde <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bc7c:	0051      	lsls	r1, r2, #1
2400bc7e:	d431      	bmi.n	2400bce4 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bc80:	0094      	lsls	r4, r2, #2
2400bc82:	d431      	bmi.n	2400bce8 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bc84:	00d0      	lsls	r0, r2, #3
2400bc86:	d431      	bmi.n	2400bcec <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bc88:	0111      	lsls	r1, r2, #4
2400bc8a:	d432      	bmi.n	2400bcf2 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bc8c:	0154      	lsls	r4, r2, #5
2400bc8e:	d433      	bmi.n	2400bcf8 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bc90:	01d0      	lsls	r0, r2, #7
2400bc92:	d434      	bmi.n	2400bcfe <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bc94:	0211      	lsls	r1, r2, #8
2400bc96:	d435      	bmi.n	2400bd04 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bc98:	0254      	lsls	r4, r2, #9
2400bc9a:	d436      	bmi.n	2400bd0a <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bc9c:	0290      	lsls	r0, r2, #10
2400bc9e:	d440      	bmi.n	2400bd22 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bca0:	02d1      	lsls	r1, r2, #11
2400bca2:	d43b      	bmi.n	2400bd1c <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bca4:	0354      	lsls	r4, r2, #13
2400bca6:	d436      	bmi.n	2400bd16 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bca8:	0390      	lsls	r0, r2, #14
2400bcaa:	d431      	bmi.n	2400bd10 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bcac:	03d1      	lsls	r1, r2, #15
2400bcae:	d444      	bmi.n	2400bd3a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bcb0:	0414      	lsls	r4, r2, #16
2400bcb2:	d43f      	bmi.n	2400bd34 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bcb4:	0450      	lsls	r0, r2, #17
2400bcb6:	d43a      	bmi.n	2400bd2e <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bcb8:	0491      	lsls	r1, r2, #18
2400bcba:	d435      	bmi.n	2400bd28 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bcbc:	f012 0f08 	tst.w	r2, #8
2400bcc0:	bf14      	ite	ne
2400bcc2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bcc6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bcca:	e7bf      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bccc:	2201      	movs	r2, #1
2400bcce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bcd0:	e7bc      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bcd2:	2301      	movs	r3, #1
2400bcd4:	e7ba      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bcd6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bcd8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bcda:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bcdc:	e7b6      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bcde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bce2:	e7b3      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bce4:	2340      	movs	r3, #64	; 0x40
2400bce6:	e7b1      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bce8:	2380      	movs	r3, #128	; 0x80
2400bcea:	e7af      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bcec:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bcf0:	e7ac      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bcf2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bcf6:	e7a9      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bcf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bcfc:	e7a6      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bcfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bd02:	e7a3      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bd04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bd08:	e7a0      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bd0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bd0e:	e79d      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bd10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bd14:	e79a      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bd16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bd1a:	e797      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bd1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bd20:	e794      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bd22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bd26:	e791      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bd28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bd2c:	e78e      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bd2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bd32:	e78b      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bd34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bd38:	e788      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bd3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bd3e:	e785      	b.n	2400bc4c <SDMMC_CmdWriteMultiBlock+0x40>
2400bd40:	200006e0 	.word	0x200006e0
2400bd44:	10624dd3 	.word	0x10624dd3
2400bd48:	fffee0c0 	.word	0xfffee0c0
2400bd4c:	00200045 	.word	0x00200045
2400bd50:	002000c5 	.word	0x002000c5
2400bd54:	fdffe008 	.word	0xfdffe008

2400bd58 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd58:	4b7d      	ldr	r3, [pc, #500]	; (2400bf50 <SDMMC_CmdStopTransfer+0x1f8>)
2400bd5a:	497e      	ldr	r1, [pc, #504]	; (2400bf54 <SDMMC_CmdStopTransfer+0x1fc>)
{
2400bd5c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd5e:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400bd60:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd62:	4b7d      	ldr	r3, [pc, #500]	; (2400bf58 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd64:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bd68:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd6a:	4d7c      	ldr	r5, [pc, #496]	; (2400bf5c <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bd6c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd70:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bd72:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bd74:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd76:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bd7a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
2400bd7e:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd80:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400bd84:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd86:	68c4      	ldr	r4, [r0, #12]
2400bd88:	4023      	ands	r3, r4
2400bd8a:	4319      	orrs	r1, r3
2400bd8c:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
2400bd8e:	b14a      	cbz	r2, 2400bda4 <SDMMC_CmdStopTransfer+0x4c>
2400bd90:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bd92:	4973      	ldr	r1, [pc, #460]	; (2400bf60 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
2400bd94:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bd96:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bd98:	420a      	tst	r2, r1
2400bd9a:	d001      	beq.n	2400bda0 <SDMMC_CmdStopTransfer+0x48>
2400bd9c:	0492      	lsls	r2, r2, #18
2400bd9e:	d50a      	bpl.n	2400bdb6 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400bda0:	1c5c      	adds	r4, r3, #1
2400bda2:	d1f7      	bne.n	2400bd94 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bda4:	68c2      	ldr	r2, [r0, #12]
2400bda6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400bdaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bdae:	60c2      	str	r2, [r0, #12]
}
2400bdb0:	4618      	mov	r0, r3
2400bdb2:	bc30      	pop	{r4, r5}
2400bdb4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bdb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bdb8:	075b      	lsls	r3, r3, #29
2400bdba:	d454      	bmi.n	2400be66 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bdbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bdbe:	f013 0301 	ands.w	r3, r3, #1
2400bdc2:	d13c      	bne.n	2400be3e <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bdc4:	4a67      	ldr	r2, [pc, #412]	; (2400bf64 <SDMMC_CmdStopTransfer+0x20c>)
2400bdc6:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bdc8:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bdca:	b2d2      	uxtb	r2, r2
2400bdcc:	2a0c      	cmp	r2, #12
2400bdce:	d144      	bne.n	2400be5a <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
2400bdd0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bdd2:	4965      	ldr	r1, [pc, #404]	; (2400bf68 <SDMMC_CmdStopTransfer+0x210>)
2400bdd4:	4011      	ands	r1, r2
2400bdd6:	2900      	cmp	r1, #0
2400bdd8:	d038      	beq.n	2400be4c <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bdda:	2a00      	cmp	r2, #0
2400bddc:	db36      	blt.n	2400be4c <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bdde:	0055      	lsls	r5, r2, #1
2400bde0:	d448      	bmi.n	2400be74 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bde2:	0094      	lsls	r4, r2, #2
2400bde4:	d44c      	bmi.n	2400be80 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bde6:	00d1      	lsls	r1, r2, #3
2400bde8:	d450      	bmi.n	2400be8c <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bdea:	0113      	lsls	r3, r2, #4
2400bdec:	d455      	bmi.n	2400be9a <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bdee:	0155      	lsls	r5, r2, #5
2400bdf0:	d45a      	bmi.n	2400bea8 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bdf2:	01d4      	lsls	r4, r2, #7
2400bdf4:	d466      	bmi.n	2400bec4 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bdf6:	0211      	lsls	r1, r2, #8
2400bdf8:	d45d      	bmi.n	2400beb6 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bdfa:	0253      	lsls	r3, r2, #9
2400bdfc:	d470      	bmi.n	2400bee0 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bdfe:	0295      	lsls	r5, r2, #10
2400be00:	d467      	bmi.n	2400bed2 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400be02:	02d4      	lsls	r4, r2, #11
2400be04:	f100 8081 	bmi.w	2400bf0a <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400be08:	0351      	lsls	r1, r2, #13
2400be0a:	d477      	bmi.n	2400befc <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400be0c:	0393      	lsls	r3, r2, #14
2400be0e:	d46e      	bmi.n	2400beee <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400be10:	03d5      	lsls	r5, r2, #15
2400be12:	f100 8096 	bmi.w	2400bf42 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400be16:	0414      	lsls	r4, r2, #16
2400be18:	f100 8085 	bmi.w	2400bf26 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400be1c:	0451      	lsls	r1, r2, #17
2400be1e:	d47b      	bmi.n	2400bf18 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400be20:	0493      	lsls	r3, r2, #18
2400be22:	f100 8087 	bmi.w	2400bf34 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400be26:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be2a:	68c2      	ldr	r2, [r0, #12]
2400be2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400be30:	bf14      	ite	ne
2400be32:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400be36:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be3a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be3c:	e7b8      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400be3e:	2201      	movs	r2, #1
2400be40:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be42:	68c2      	ldr	r2, [r0, #12]
2400be44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be48:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be4a:	e7b1      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be4c:	68c2      	ldr	r2, [r0, #12]
2400be4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be52:	60c2      	str	r2, [r0, #12]
}
2400be54:	4618      	mov	r0, r3
2400be56:	bc30      	pop	{r4, r5}
2400be58:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be5a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400be5c:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be62:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be64:	e7a4      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400be66:	2304      	movs	r3, #4
2400be68:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be6a:	68c2      	ldr	r2, [r0, #12]
2400be6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be70:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be72:	e79d      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be74:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400be76:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be7c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be7e:	e797      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be80:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400be82:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be88:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be8a:	e791      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be8c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400be8e:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be96:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be98:	e78a      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be9a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400be9c:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bea4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bea6:	e783      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bea8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400beaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400beb2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400beb4:	e77c      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beb6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400beb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bec0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bec2:	e775      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bec4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bece:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bed0:	e76e      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bed2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bed4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bedc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bede:	e767      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bee0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400beea:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400beec:	e760      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beee:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bef8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400befa:	e759      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400befc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400befe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf06:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf08:	e752      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf0a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
2400bf0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf14:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf16:	e74b      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf18:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bf1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf22:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf24:	e744      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf26:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bf28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf30:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf32:	e73d      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf34:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400bf36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf3e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf40:	e736      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf42:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bf44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf4c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf4e:	e72f      	b.n	2400bdb0 <SDMMC_CmdStopTransfer+0x58>
2400bf50:	200006e0 	.word	0x200006e0
2400bf54:	10624dd3 	.word	0x10624dd3
2400bf58:	fffee0c0 	.word	0xfffee0c0
2400bf5c:	05f5e100 	.word	0x05f5e100
2400bf60:	00200045 	.word	0x00200045
2400bf64:	002000c5 	.word	0x002000c5
2400bf68:	fdffe008 	.word	0xfdffe008

2400bf6c <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf6c:	4a4c      	ldr	r2, [pc, #304]	; (2400c0a0 <SDMMC_CmdSelDesel+0x134>)
2400bf6e:	4b4d      	ldr	r3, [pc, #308]	; (2400c0a4 <SDMMC_CmdSelDesel+0x138>)
{
2400bf70:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf72:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bf74:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf76:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf7a:	68c1      	ldr	r1, [r0, #12]
2400bf7c:	4c4a      	ldr	r4, [pc, #296]	; (2400c0a8 <SDMMC_CmdSelDesel+0x13c>)
2400bf7e:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf82:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf84:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf86:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf8a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf8c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf90:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bf92:	b14a      	cbz	r2, 2400bfa8 <SDMMC_CmdSelDesel+0x3c>
2400bf94:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bf96:	4945      	ldr	r1, [pc, #276]	; (2400c0ac <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
2400bf98:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bf9a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bf9c:	420a      	tst	r2, r1
2400bf9e:	d001      	beq.n	2400bfa4 <SDMMC_CmdSelDesel+0x38>
2400bfa0:	0492      	lsls	r2, r2, #18
2400bfa2:	d507      	bpl.n	2400bfb4 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
2400bfa4:	1c5c      	adds	r4, r3, #1
2400bfa6:	d1f7      	bne.n	2400bf98 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bfa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bfac:	4618      	mov	r0, r3
2400bfae:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bfb2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bfb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bfb6:	075c      	lsls	r4, r3, #29
2400bfb8:	d43d      	bmi.n	2400c036 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bfba:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bfbc:	f013 0301 	ands.w	r3, r3, #1
2400bfc0:	d134      	bne.n	2400c02c <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bfc2:	4b3b      	ldr	r3, [pc, #236]	; (2400c0b0 <SDMMC_CmdSelDesel+0x144>)
2400bfc4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bfc6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bfc8:	b2db      	uxtb	r3, r3
2400bfca:	2b07      	cmp	r3, #7
2400bfcc:	d131      	bne.n	2400c032 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bfce:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bfd0:	4b38      	ldr	r3, [pc, #224]	; (2400c0b4 <SDMMC_CmdSelDesel+0x148>)
2400bfd2:	4013      	ands	r3, r2
2400bfd4:	2b00      	cmp	r3, #0
2400bfd6:	d0e9      	beq.n	2400bfac <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bfd8:	2a00      	cmp	r2, #0
2400bfda:	db30      	blt.n	2400c03e <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bfdc:	0051      	lsls	r1, r2, #1
2400bfde:	d431      	bmi.n	2400c044 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bfe0:	0094      	lsls	r4, r2, #2
2400bfe2:	d431      	bmi.n	2400c048 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bfe4:	00d0      	lsls	r0, r2, #3
2400bfe6:	d431      	bmi.n	2400c04c <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bfe8:	0111      	lsls	r1, r2, #4
2400bfea:	d432      	bmi.n	2400c052 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bfec:	0154      	lsls	r4, r2, #5
2400bfee:	d433      	bmi.n	2400c058 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bff0:	01d0      	lsls	r0, r2, #7
2400bff2:	d434      	bmi.n	2400c05e <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bff4:	0211      	lsls	r1, r2, #8
2400bff6:	d435      	bmi.n	2400c064 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bff8:	0254      	lsls	r4, r2, #9
2400bffa:	d436      	bmi.n	2400c06a <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bffc:	0290      	lsls	r0, r2, #10
2400bffe:	d440      	bmi.n	2400c082 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c000:	02d1      	lsls	r1, r2, #11
2400c002:	d43b      	bmi.n	2400c07c <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c004:	0354      	lsls	r4, r2, #13
2400c006:	d436      	bmi.n	2400c076 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c008:	0390      	lsls	r0, r2, #14
2400c00a:	d431      	bmi.n	2400c070 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c00c:	03d1      	lsls	r1, r2, #15
2400c00e:	d444      	bmi.n	2400c09a <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c010:	0414      	lsls	r4, r2, #16
2400c012:	d43f      	bmi.n	2400c094 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c014:	0450      	lsls	r0, r2, #17
2400c016:	d43a      	bmi.n	2400c08e <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c018:	0491      	lsls	r1, r2, #18
2400c01a:	d435      	bmi.n	2400c088 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c01c:	f012 0f08 	tst.w	r2, #8
2400c020:	bf14      	ite	ne
2400c022:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c026:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c02a:	e7bf      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c02c:	2201      	movs	r2, #1
2400c02e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c030:	e7bc      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c032:	2301      	movs	r3, #1
2400c034:	e7ba      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c036:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c038:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c03a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c03c:	e7b6      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c03e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c042:	e7b3      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c044:	2340      	movs	r3, #64	; 0x40
2400c046:	e7b1      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c048:	2380      	movs	r3, #128	; 0x80
2400c04a:	e7af      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c04c:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c050:	e7ac      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c052:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c056:	e7a9      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c058:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c05c:	e7a6      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c05e:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c062:	e7a3      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c068:	e7a0      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c06a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c06e:	e79d      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c070:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c074:	e79a      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c07a:	e797      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c07c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c080:	e794      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c086:	e791      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c088:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c08c:	e78e      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c08e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c092:	e78b      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c094:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c098:	e788      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c09a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c09e:	e785      	b.n	2400bfac <SDMMC_CmdSelDesel+0x40>
2400c0a0:	200006e0 	.word	0x200006e0
2400c0a4:	10624dd3 	.word	0x10624dd3
2400c0a8:	fffee0c0 	.word	0xfffee0c0
2400c0ac:	00200045 	.word	0x00200045
2400c0b0:	002000c5 	.word	0x002000c5
2400c0b4:	fdffe008 	.word	0xfdffe008

2400c0b8 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0b8:	4b11      	ldr	r3, [pc, #68]	; (2400c100 <SDMMC_CmdGoIdleState+0x48>)
{
2400c0ba:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c0bc:	4a11      	ldr	r2, [pc, #68]	; (2400c104 <SDMMC_CmdGoIdleState+0x4c>)
{
2400c0be:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0c0:	4c11      	ldr	r4, [pc, #68]	; (2400c108 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400c0c2:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0c4:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400c0c6:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0c8:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c0cc:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0ce:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c0d2:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0d4:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c0d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0da:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c0de:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c0e0:	e002      	b.n	2400c0e8 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400c0e2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400c0e4:	0612      	lsls	r2, r2, #24
2400c0e6:	d405      	bmi.n	2400c0f4 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400c0e8:	3b01      	subs	r3, #1
2400c0ea:	d2fa      	bcs.n	2400c0e2 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c0ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c0f0:	bc30      	pop	{r4, r5}
2400c0f2:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c0f4:	4b05      	ldr	r3, [pc, #20]	; (2400c10c <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400c0f6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c0f8:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c0fa:	bc30      	pop	{r4, r5}
2400c0fc:	4770      	bx	lr
2400c0fe:	bf00      	nop
2400c100:	200006e0 	.word	0x200006e0
2400c104:	fffee0c0 	.word	0xfffee0c0
2400c108:	10624dd3 	.word	0x10624dd3
2400c10c:	002000c5 	.word	0x002000c5

2400c110 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c110:	4a1c      	ldr	r2, [pc, #112]	; (2400c184 <SDMMC_CmdOperCond+0x74>)
{
2400c112:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c114:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c118:	481b      	ldr	r0, [pc, #108]	; (2400c188 <SDMMC_CmdOperCond+0x78>)
{
2400c11a:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c11c:	4c1b      	ldr	r4, [pc, #108]	; (2400c18c <SDMMC_CmdOperCond+0x7c>)
2400c11e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c120:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c122:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c126:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c12a:	68cc      	ldr	r4, [r1, #12]
2400c12c:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c12e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c130:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c132:	f241 3088 	movw	r0, #5000	; 0x1388
2400c136:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c13a:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c13c:	b14a      	cbz	r2, 2400c152 <SDMMC_CmdOperCond+0x42>
2400c13e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c140:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c142:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c144:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c148:	d001      	beq.n	2400c14e <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c14a:	0490      	lsls	r0, r2, #18
2400c14c:	d506      	bpl.n	2400c15c <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400c14e:	1c5c      	adds	r4, r3, #1
2400c150:	d1f6      	bne.n	2400c140 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c152:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c156:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c15a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c15c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c15e:	075a      	lsls	r2, r3, #29
2400c160:	d40c      	bmi.n	2400c17c <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c162:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c164:	f010 0001 	ands.w	r0, r0, #1
2400c168:	d105      	bne.n	2400c176 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400c16a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c16c:	065b      	lsls	r3, r3, #25
2400c16e:	d5f2      	bpl.n	2400c156 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400c170:	2340      	movs	r3, #64	; 0x40
2400c172:	638b      	str	r3, [r1, #56]	; 0x38
2400c174:	e7ef      	b.n	2400c156 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c176:	2301      	movs	r3, #1
2400c178:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c17a:	e7ec      	b.n	2400c156 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c17c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c17e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c180:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c182:	e7e8      	b.n	2400c156 <SDMMC_CmdOperCond+0x46>
2400c184:	200006e0 	.word	0x200006e0
2400c188:	fffee0c0 	.word	0xfffee0c0
2400c18c:	10624dd3 	.word	0x10624dd3

2400c190 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c190:	4a4c      	ldr	r2, [pc, #304]	; (2400c2c4 <SDMMC_CmdAppCommand+0x134>)
2400c192:	4b4d      	ldr	r3, [pc, #308]	; (2400c2c8 <SDMMC_CmdAppCommand+0x138>)
{
2400c194:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c196:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c198:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c19a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c19e:	68c1      	ldr	r1, [r0, #12]
2400c1a0:	4c4a      	ldr	r4, [pc, #296]	; (2400c2cc <SDMMC_CmdAppCommand+0x13c>)
2400c1a2:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1a6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1a8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1aa:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1ae:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1b0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1b4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c1b6:	b14a      	cbz	r2, 2400c1cc <SDMMC_CmdAppCommand+0x3c>
2400c1b8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c1ba:	4945      	ldr	r1, [pc, #276]	; (2400c2d0 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
2400c1bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c1be:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c1c0:	420a      	tst	r2, r1
2400c1c2:	d001      	beq.n	2400c1c8 <SDMMC_CmdAppCommand+0x38>
2400c1c4:	0492      	lsls	r2, r2, #18
2400c1c6:	d507      	bpl.n	2400c1d8 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
2400c1c8:	1c5c      	adds	r4, r3, #1
2400c1ca:	d1f7      	bne.n	2400c1bc <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c1cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c1d0:	4618      	mov	r0, r3
2400c1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c1d6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c1d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c1da:	075c      	lsls	r4, r3, #29
2400c1dc:	d43d      	bmi.n	2400c25a <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c1de:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c1e0:	f013 0301 	ands.w	r3, r3, #1
2400c1e4:	d134      	bne.n	2400c250 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c1e6:	4b3b      	ldr	r3, [pc, #236]	; (2400c2d4 <SDMMC_CmdAppCommand+0x144>)
2400c1e8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c1ea:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c1ec:	b2db      	uxtb	r3, r3
2400c1ee:	2b37      	cmp	r3, #55	; 0x37
2400c1f0:	d131      	bne.n	2400c256 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c1f2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c1f4:	4b38      	ldr	r3, [pc, #224]	; (2400c2d8 <SDMMC_CmdAppCommand+0x148>)
2400c1f6:	4013      	ands	r3, r2
2400c1f8:	2b00      	cmp	r3, #0
2400c1fa:	d0e9      	beq.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c1fc:	2a00      	cmp	r2, #0
2400c1fe:	db30      	blt.n	2400c262 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c200:	0051      	lsls	r1, r2, #1
2400c202:	d431      	bmi.n	2400c268 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c204:	0094      	lsls	r4, r2, #2
2400c206:	d431      	bmi.n	2400c26c <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c208:	00d0      	lsls	r0, r2, #3
2400c20a:	d431      	bmi.n	2400c270 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c20c:	0111      	lsls	r1, r2, #4
2400c20e:	d432      	bmi.n	2400c276 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c210:	0154      	lsls	r4, r2, #5
2400c212:	d433      	bmi.n	2400c27c <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c214:	01d0      	lsls	r0, r2, #7
2400c216:	d434      	bmi.n	2400c282 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c218:	0211      	lsls	r1, r2, #8
2400c21a:	d435      	bmi.n	2400c288 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c21c:	0254      	lsls	r4, r2, #9
2400c21e:	d436      	bmi.n	2400c28e <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c220:	0290      	lsls	r0, r2, #10
2400c222:	d440      	bmi.n	2400c2a6 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c224:	02d1      	lsls	r1, r2, #11
2400c226:	d43b      	bmi.n	2400c2a0 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c228:	0354      	lsls	r4, r2, #13
2400c22a:	d436      	bmi.n	2400c29a <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c22c:	0390      	lsls	r0, r2, #14
2400c22e:	d431      	bmi.n	2400c294 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c230:	03d1      	lsls	r1, r2, #15
2400c232:	d444      	bmi.n	2400c2be <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c234:	0414      	lsls	r4, r2, #16
2400c236:	d43f      	bmi.n	2400c2b8 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c238:	0450      	lsls	r0, r2, #17
2400c23a:	d43a      	bmi.n	2400c2b2 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c23c:	0491      	lsls	r1, r2, #18
2400c23e:	d435      	bmi.n	2400c2ac <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c240:	f012 0f08 	tst.w	r2, #8
2400c244:	bf14      	ite	ne
2400c246:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c24a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c24e:	e7bf      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c250:	2201      	movs	r2, #1
2400c252:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c254:	e7bc      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c256:	2301      	movs	r3, #1
2400c258:	e7ba      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c25a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c25c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c25e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c260:	e7b6      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c266:	e7b3      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c268:	2340      	movs	r3, #64	; 0x40
2400c26a:	e7b1      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c26c:	2380      	movs	r3, #128	; 0x80
2400c26e:	e7af      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c270:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c274:	e7ac      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c276:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c27a:	e7a9      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c280:	e7a6      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c282:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c286:	e7a3      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c28c:	e7a0      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c28e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c292:	e79d      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c294:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c298:	e79a      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c29a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c29e:	e797      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c2a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c2a4:	e794      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c2a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c2aa:	e791      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c2ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c2b0:	e78e      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c2b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c2b6:	e78b      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c2b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c2bc:	e788      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c2be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c2c2:	e785      	b.n	2400c1d0 <SDMMC_CmdAppCommand+0x40>
2400c2c4:	200006e0 	.word	0x200006e0
2400c2c8:	10624dd3 	.word	0x10624dd3
2400c2cc:	fffee0c0 	.word	0xfffee0c0
2400c2d0:	00200045 	.word	0x00200045
2400c2d4:	002000c5 	.word	0x002000c5
2400c2d8:	fdffe008 	.word	0xfdffe008

2400c2dc <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c2dc:	4a18      	ldr	r2, [pc, #96]	; (2400c340 <SDMMC_CmdAppOperCommand+0x64>)
2400c2de:	4b19      	ldr	r3, [pc, #100]	; (2400c344 <SDMMC_CmdAppOperCommand+0x68>)
{
2400c2e0:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c2e2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c2e4:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c2e6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c2ea:	68c1      	ldr	r1, [r0, #12]
2400c2ec:	4c16      	ldr	r4, [pc, #88]	; (2400c348 <SDMMC_CmdAppOperCommand+0x6c>)
2400c2ee:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c2f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c2f4:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c2f6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c2fa:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c2fc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c300:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c302:	b14a      	cbz	r2, 2400c318 <SDMMC_CmdAppOperCommand+0x3c>
2400c304:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c306:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c308:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c30a:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c30e:	d001      	beq.n	2400c314 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c310:	0492      	lsls	r2, r2, #18
2400c312:	d507      	bpl.n	2400c324 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
2400c314:	1c59      	adds	r1, r3, #1
2400c316:	d1f6      	bne.n	2400c306 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c31c:	4618      	mov	r0, r3
2400c31e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c322:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c324:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c326:	f013 0304 	ands.w	r3, r3, #4
2400c32a:	d105      	bne.n	2400c338 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c32c:	4a07      	ldr	r2, [pc, #28]	; (2400c34c <SDMMC_CmdAppOperCommand+0x70>)
2400c32e:	6382      	str	r2, [r0, #56]	; 0x38
}
2400c330:	4618      	mov	r0, r3
2400c332:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c336:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c338:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c33a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c33c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c33e:	e7ed      	b.n	2400c31c <SDMMC_CmdAppOperCommand+0x40>
2400c340:	200006e0 	.word	0x200006e0
2400c344:	10624dd3 	.word	0x10624dd3
2400c348:	fffee0c0 	.word	0xfffee0c0
2400c34c:	002000c5 	.word	0x002000c5

2400c350 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c350:	4a4c      	ldr	r2, [pc, #304]	; (2400c484 <SDMMC_CmdBusWidth+0x134>)
2400c352:	4b4d      	ldr	r3, [pc, #308]	; (2400c488 <SDMMC_CmdBusWidth+0x138>)
{
2400c354:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c356:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c358:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c35a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c35e:	68c1      	ldr	r1, [r0, #12]
2400c360:	4c4a      	ldr	r4, [pc, #296]	; (2400c48c <SDMMC_CmdBusWidth+0x13c>)
2400c362:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c366:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c368:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c36a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c36e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c370:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c374:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c376:	b14a      	cbz	r2, 2400c38c <SDMMC_CmdBusWidth+0x3c>
2400c378:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c37a:	4945      	ldr	r1, [pc, #276]	; (2400c490 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
2400c37c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c37e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c380:	420a      	tst	r2, r1
2400c382:	d001      	beq.n	2400c388 <SDMMC_CmdBusWidth+0x38>
2400c384:	0492      	lsls	r2, r2, #18
2400c386:	d507      	bpl.n	2400c398 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
2400c388:	1c5c      	adds	r4, r3, #1
2400c38a:	d1f7      	bne.n	2400c37c <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c38c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c390:	4618      	mov	r0, r3
2400c392:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c396:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c398:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c39a:	075c      	lsls	r4, r3, #29
2400c39c:	d43d      	bmi.n	2400c41a <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c39e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c3a0:	f013 0301 	ands.w	r3, r3, #1
2400c3a4:	d134      	bne.n	2400c410 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c3a6:	4b3b      	ldr	r3, [pc, #236]	; (2400c494 <SDMMC_CmdBusWidth+0x144>)
2400c3a8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c3aa:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c3ac:	b2db      	uxtb	r3, r3
2400c3ae:	2b06      	cmp	r3, #6
2400c3b0:	d131      	bne.n	2400c416 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c3b2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c3b4:	4b38      	ldr	r3, [pc, #224]	; (2400c498 <SDMMC_CmdBusWidth+0x148>)
2400c3b6:	4013      	ands	r3, r2
2400c3b8:	2b00      	cmp	r3, #0
2400c3ba:	d0e9      	beq.n	2400c390 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c3bc:	2a00      	cmp	r2, #0
2400c3be:	db30      	blt.n	2400c422 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c3c0:	0051      	lsls	r1, r2, #1
2400c3c2:	d431      	bmi.n	2400c428 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c3c4:	0094      	lsls	r4, r2, #2
2400c3c6:	d431      	bmi.n	2400c42c <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c3c8:	00d0      	lsls	r0, r2, #3
2400c3ca:	d431      	bmi.n	2400c430 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c3cc:	0111      	lsls	r1, r2, #4
2400c3ce:	d432      	bmi.n	2400c436 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c3d0:	0154      	lsls	r4, r2, #5
2400c3d2:	d433      	bmi.n	2400c43c <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c3d4:	01d0      	lsls	r0, r2, #7
2400c3d6:	d434      	bmi.n	2400c442 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c3d8:	0211      	lsls	r1, r2, #8
2400c3da:	d435      	bmi.n	2400c448 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c3dc:	0254      	lsls	r4, r2, #9
2400c3de:	d436      	bmi.n	2400c44e <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c3e0:	0290      	lsls	r0, r2, #10
2400c3e2:	d440      	bmi.n	2400c466 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c3e4:	02d1      	lsls	r1, r2, #11
2400c3e6:	d43b      	bmi.n	2400c460 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c3e8:	0354      	lsls	r4, r2, #13
2400c3ea:	d436      	bmi.n	2400c45a <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c3ec:	0390      	lsls	r0, r2, #14
2400c3ee:	d431      	bmi.n	2400c454 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c3f0:	03d1      	lsls	r1, r2, #15
2400c3f2:	d444      	bmi.n	2400c47e <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c3f4:	0414      	lsls	r4, r2, #16
2400c3f6:	d43f      	bmi.n	2400c478 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c3f8:	0450      	lsls	r0, r2, #17
2400c3fa:	d43a      	bmi.n	2400c472 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c3fc:	0491      	lsls	r1, r2, #18
2400c3fe:	d435      	bmi.n	2400c46c <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c400:	f012 0f08 	tst.w	r2, #8
2400c404:	bf14      	ite	ne
2400c406:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c40a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c40e:	e7bf      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c410:	2201      	movs	r2, #1
2400c412:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c414:	e7bc      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c416:	2301      	movs	r3, #1
2400c418:	e7ba      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c41a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c41c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c41e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c420:	e7b6      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c426:	e7b3      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c428:	2340      	movs	r3, #64	; 0x40
2400c42a:	e7b1      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c42c:	2380      	movs	r3, #128	; 0x80
2400c42e:	e7af      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c430:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c434:	e7ac      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c436:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c43a:	e7a9      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c440:	e7a6      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c442:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c446:	e7a3      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c44c:	e7a0      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c44e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c452:	e79d      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c458:	e79a      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c45a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c45e:	e797      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c464:	e794      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c46a:	e791      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c46c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c470:	e78e      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c472:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c476:	e78b      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c47c:	e788      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c47e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c482:	e785      	b.n	2400c390 <SDMMC_CmdBusWidth+0x40>
2400c484:	200006e0 	.word	0x200006e0
2400c488:	10624dd3 	.word	0x10624dd3
2400c48c:	fffee0c0 	.word	0xfffee0c0
2400c490:	00200045 	.word	0x00200045
2400c494:	002000c5 	.word	0x002000c5
2400c498:	fdffe008 	.word	0xfdffe008

2400c49c <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c49c:	4a4d      	ldr	r2, [pc, #308]	; (2400c5d4 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
2400c49e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4a0:	494d      	ldr	r1, [pc, #308]	; (2400c5d8 <SDMMC_CmdSendSCR+0x13c>)
{
2400c4a2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4a4:	4c4d      	ldr	r4, [pc, #308]	; (2400c5dc <SDMMC_CmdSendSCR+0x140>)
2400c4a6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c4a8:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4aa:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4ae:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4b2:	68c4      	ldr	r4, [r0, #12]
2400c4b4:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4b6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4b8:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4ba:	f241 3188 	movw	r1, #5000	; 0x1388
2400c4be:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4c2:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c4c4:	b14a      	cbz	r2, 2400c4da <SDMMC_CmdSendSCR+0x3e>
2400c4c6:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c4c8:	4945      	ldr	r1, [pc, #276]	; (2400c5e0 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400c4ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c4cc:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c4ce:	420a      	tst	r2, r1
2400c4d0:	d001      	beq.n	2400c4d6 <SDMMC_CmdSendSCR+0x3a>
2400c4d2:	0492      	lsls	r2, r2, #18
2400c4d4:	d507      	bpl.n	2400c4e6 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400c4d6:	1c5c      	adds	r4, r3, #1
2400c4d8:	d1f7      	bne.n	2400c4ca <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c4da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c4de:	4618      	mov	r0, r3
2400c4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c4e4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c4e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c4e8:	075c      	lsls	r4, r3, #29
2400c4ea:	d43d      	bmi.n	2400c568 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c4ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c4ee:	f013 0301 	ands.w	r3, r3, #1
2400c4f2:	d134      	bne.n	2400c55e <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c4f4:	4b3b      	ldr	r3, [pc, #236]	; (2400c5e4 <SDMMC_CmdSendSCR+0x148>)
2400c4f6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c4f8:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c4fa:	b2db      	uxtb	r3, r3
2400c4fc:	2b33      	cmp	r3, #51	; 0x33
2400c4fe:	d131      	bne.n	2400c564 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c500:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c502:	4b39      	ldr	r3, [pc, #228]	; (2400c5e8 <SDMMC_CmdSendSCR+0x14c>)
2400c504:	4013      	ands	r3, r2
2400c506:	2b00      	cmp	r3, #0
2400c508:	d0e9      	beq.n	2400c4de <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c50a:	2a00      	cmp	r2, #0
2400c50c:	db30      	blt.n	2400c570 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c50e:	0051      	lsls	r1, r2, #1
2400c510:	d431      	bmi.n	2400c576 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c512:	0094      	lsls	r4, r2, #2
2400c514:	d431      	bmi.n	2400c57a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c516:	00d0      	lsls	r0, r2, #3
2400c518:	d431      	bmi.n	2400c57e <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c51a:	0111      	lsls	r1, r2, #4
2400c51c:	d432      	bmi.n	2400c584 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c51e:	0154      	lsls	r4, r2, #5
2400c520:	d433      	bmi.n	2400c58a <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c522:	01d0      	lsls	r0, r2, #7
2400c524:	d434      	bmi.n	2400c590 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c526:	0211      	lsls	r1, r2, #8
2400c528:	d435      	bmi.n	2400c596 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c52a:	0254      	lsls	r4, r2, #9
2400c52c:	d436      	bmi.n	2400c59c <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c52e:	0290      	lsls	r0, r2, #10
2400c530:	d440      	bmi.n	2400c5b4 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c532:	02d1      	lsls	r1, r2, #11
2400c534:	d43b      	bmi.n	2400c5ae <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c536:	0354      	lsls	r4, r2, #13
2400c538:	d436      	bmi.n	2400c5a8 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c53a:	0390      	lsls	r0, r2, #14
2400c53c:	d431      	bmi.n	2400c5a2 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c53e:	03d1      	lsls	r1, r2, #15
2400c540:	d444      	bmi.n	2400c5cc <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c542:	0414      	lsls	r4, r2, #16
2400c544:	d43f      	bmi.n	2400c5c6 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c546:	0450      	lsls	r0, r2, #17
2400c548:	d43a      	bmi.n	2400c5c0 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c54a:	0491      	lsls	r1, r2, #18
2400c54c:	d435      	bmi.n	2400c5ba <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c54e:	f012 0f08 	tst.w	r2, #8
2400c552:	bf14      	ite	ne
2400c554:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c558:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c55c:	e7bf      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c55e:	2201      	movs	r2, #1
2400c560:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c562:	e7bc      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c564:	2301      	movs	r3, #1
2400c566:	e7ba      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c568:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c56a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c56c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c56e:	e7b6      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c574:	e7b3      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c576:	2340      	movs	r3, #64	; 0x40
2400c578:	e7b1      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c57a:	2380      	movs	r3, #128	; 0x80
2400c57c:	e7af      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c57e:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c582:	e7ac      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c584:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c588:	e7a9      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c58e:	e7a6      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c590:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c594:	e7a3      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c59a:	e7a0      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c59c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c5a0:	e79d      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c5a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c5a6:	e79a      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c5a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c5ac:	e797      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
2400c5ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c5b2:	e794      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c5b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c5b8:	e791      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400c5ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c5be:	e78e      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c5c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c5c4:	e78b      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c5c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c5ca:	e788      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c5cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c5d0:	e785      	b.n	2400c4de <SDMMC_CmdSendSCR+0x42>
2400c5d2:	bf00      	nop
2400c5d4:	200006e0 	.word	0x200006e0
2400c5d8:	fffee0c0 	.word	0xfffee0c0
2400c5dc:	10624dd3 	.word	0x10624dd3
2400c5e0:	00200045 	.word	0x00200045
2400c5e4:	002000c5 	.word	0x002000c5
2400c5e8:	fdffe008 	.word	0xfdffe008

2400c5ec <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5ec:	4a1a      	ldr	r2, [pc, #104]	; (2400c658 <SDMMC_CmdSendCID+0x6c>)
{
2400c5ee:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c5f0:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5f2:	481a      	ldr	r0, [pc, #104]	; (2400c65c <SDMMC_CmdSendCID+0x70>)
{
2400c5f4:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5f6:	4c1a      	ldr	r4, [pc, #104]	; (2400c660 <SDMMC_CmdSendCID+0x74>)
2400c5f8:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c5fa:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5fc:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c600:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c604:	68cc      	ldr	r4, [r1, #12]
2400c606:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c608:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c60a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c60c:	f241 3088 	movw	r0, #5000	; 0x1388
2400c610:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c614:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c616:	b14a      	cbz	r2, 2400c62c <SDMMC_CmdSendCID+0x40>
2400c618:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c61a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c61c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c61e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c622:	d001      	beq.n	2400c628 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c624:	0492      	lsls	r2, r2, #18
2400c626:	d506      	bpl.n	2400c636 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400c628:	1c58      	adds	r0, r3, #1
2400c62a:	d1f6      	bne.n	2400c61a <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c62c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c630:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c634:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c636:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c638:	075b      	lsls	r3, r3, #29
2400c63a:	d409      	bmi.n	2400c650 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c63c:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c63e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c642:	bf14      	ite	ne
2400c644:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c646:	4b07      	ldreq	r3, [pc, #28]	; (2400c664 <SDMMC_CmdSendCID+0x78>)
2400c648:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c64a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c64e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c650:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c652:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c654:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c656:	e7eb      	b.n	2400c630 <SDMMC_CmdSendCID+0x44>
2400c658:	200006e0 	.word	0x200006e0
2400c65c:	fffee0c0 	.word	0xfffee0c0
2400c660:	10624dd3 	.word	0x10624dd3
2400c664:	002000c5 	.word	0x002000c5

2400c668 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c668:	4a1b      	ldr	r2, [pc, #108]	; (2400c6d8 <SDMMC_CmdSendCSD+0x70>)
{
2400c66a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c66c:	4b1b      	ldr	r3, [pc, #108]	; (2400c6dc <SDMMC_CmdSendCSD+0x74>)
2400c66e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c670:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c674:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c678:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c67c:	4818      	ldr	r0, [pc, #96]	; (2400c6e0 <SDMMC_CmdSendCSD+0x78>)
2400c67e:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c682:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c684:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c686:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c68a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c68c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c690:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c694:	1e53      	subs	r3, r2, #1
2400c696:	b14a      	cbz	r2, 2400c6ac <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400c698:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c69c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c69e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c6a2:	d001      	beq.n	2400c6a8 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c6a4:	0492      	lsls	r2, r2, #18
2400c6a6:	d504      	bpl.n	2400c6b2 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400c6a8:	1c59      	adds	r1, r3, #1
2400c6aa:	d1f5      	bne.n	2400c698 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c6ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c6b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c6b2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c6b6:	075b      	lsls	r3, r3, #29
2400c6b8:	d409      	bmi.n	2400c6ce <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c6ba:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c6be:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c6c2:	bf14      	ite	ne
2400c6c4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c6c6:	4b07      	ldreq	r3, [pc, #28]	; (2400c6e4 <SDMMC_CmdSendCSD+0x7c>)
2400c6c8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400c6cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6ce:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6d0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6d2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6d6:	4770      	bx	lr
2400c6d8:	200006e0 	.word	0x200006e0
2400c6dc:	10624dd3 	.word	0x10624dd3
2400c6e0:	fffee0c0 	.word	0xfffee0c0
2400c6e4:	002000c5 	.word	0x002000c5

2400c6e8 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400c6e8:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6ea:	4a27      	ldr	r2, [pc, #156]	; (2400c788 <SDMMC_CmdSetRelAdd+0xa0>)
{
2400c6ec:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400c6ee:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6f0:	4c26      	ldr	r4, [pc, #152]	; (2400c78c <SDMMC_CmdSetRelAdd+0xa4>)
2400c6f2:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6f4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6f6:	401c      	ands	r4, r3
2400c6f8:	f241 1303 	movw	r3, #4355	; 0x1103
2400c6fc:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6fe:	4c24      	ldr	r4, [pc, #144]	; (2400c790 <SDMMC_CmdSetRelAdd+0xa8>)
2400c700:	fba4 4202 	umull	r4, r2, r4, r2
2400c704:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c708:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c70a:	0a52      	lsrs	r2, r2, #9
2400c70c:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
2400c710:	b14a      	cbz	r2, 2400c726 <SDMMC_CmdSetRelAdd+0x3e>
2400c712:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c714:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c716:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c718:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c71c:	d001      	beq.n	2400c722 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c71e:	0492      	lsls	r2, r2, #18
2400c720:	d507      	bpl.n	2400c732 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
2400c722:	1c5c      	adds	r4, r3, #1
2400c724:	d1f6      	bne.n	2400c714 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c726:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c72a:	4618      	mov	r0, r3
2400c72c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c730:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c732:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c734:	075c      	lsls	r4, r3, #29
2400c736:	d41c      	bmi.n	2400c772 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c738:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c73a:	f013 0301 	ands.w	r3, r3, #1
2400c73e:	d113      	bne.n	2400c768 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
2400c740:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c742:	b2db      	uxtb	r3, r3
2400c744:	2b03      	cmp	r3, #3
2400c746:	d112      	bne.n	2400c76e <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c748:	4b12      	ldr	r3, [pc, #72]	; (2400c794 <SDMMC_CmdSetRelAdd+0xac>)
2400c74a:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400c74c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400c74e:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
2400c752:	d015      	beq.n	2400c780 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400c754:	0451      	lsls	r1, r2, #17
2400c756:	d410      	bmi.n	2400c77a <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c758:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400c75c:	bf14      	ite	ne
2400c75e:	f44f 5380 	movne.w	r3, #4096	; 0x1000
2400c762:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c766:	e7e0      	b.n	2400c72a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c768:	2201      	movs	r2, #1
2400c76a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c76c:	e7dd      	b.n	2400c72a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c76e:	2301      	movs	r3, #1
2400c770:	e7db      	b.n	2400c72a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c772:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c774:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c776:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c778:	e7d7      	b.n	2400c72a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c77a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c77e:	e7d4      	b.n	2400c72a <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400c780:	0c12      	lsrs	r2, r2, #16
2400c782:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
2400c784:	e7d1      	b.n	2400c72a <SDMMC_CmdSetRelAdd+0x42>
2400c786:	bf00      	nop
2400c788:	200006e0 	.word	0x200006e0
2400c78c:	fffee0c0 	.word	0xfffee0c0
2400c790:	10624dd3 	.word	0x10624dd3
2400c794:	002000c5 	.word	0x002000c5

2400c798 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c798:	4a4c      	ldr	r2, [pc, #304]	; (2400c8cc <SDMMC_CmdSendStatus+0x134>)
2400c79a:	4b4d      	ldr	r3, [pc, #308]	; (2400c8d0 <SDMMC_CmdSendStatus+0x138>)
{
2400c79c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c79e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c7a0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7a2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7a6:	68c1      	ldr	r1, [r0, #12]
2400c7a8:	4c4a      	ldr	r4, [pc, #296]	; (2400c8d4 <SDMMC_CmdSendStatus+0x13c>)
2400c7aa:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7ae:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7b0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7b2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7b6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7b8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7bc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c7be:	b14a      	cbz	r2, 2400c7d4 <SDMMC_CmdSendStatus+0x3c>
2400c7c0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c7c2:	4945      	ldr	r1, [pc, #276]	; (2400c8d8 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
2400c7c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c7c6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c7c8:	420a      	tst	r2, r1
2400c7ca:	d001      	beq.n	2400c7d0 <SDMMC_CmdSendStatus+0x38>
2400c7cc:	0492      	lsls	r2, r2, #18
2400c7ce:	d507      	bpl.n	2400c7e0 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
2400c7d0:	1c5c      	adds	r4, r3, #1
2400c7d2:	d1f7      	bne.n	2400c7c4 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c7d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c7d8:	4618      	mov	r0, r3
2400c7da:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c7de:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c7e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c7e2:	075c      	lsls	r4, r3, #29
2400c7e4:	d43d      	bmi.n	2400c862 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c7e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c7e8:	f013 0301 	ands.w	r3, r3, #1
2400c7ec:	d134      	bne.n	2400c858 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c7ee:	4b3b      	ldr	r3, [pc, #236]	; (2400c8dc <SDMMC_CmdSendStatus+0x144>)
2400c7f0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c7f2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c7f4:	b2db      	uxtb	r3, r3
2400c7f6:	2b0d      	cmp	r3, #13
2400c7f8:	d131      	bne.n	2400c85e <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c7fa:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c7fc:	4b38      	ldr	r3, [pc, #224]	; (2400c8e0 <SDMMC_CmdSendStatus+0x148>)
2400c7fe:	4013      	ands	r3, r2
2400c800:	2b00      	cmp	r3, #0
2400c802:	d0e9      	beq.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c804:	2a00      	cmp	r2, #0
2400c806:	db30      	blt.n	2400c86a <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c808:	0051      	lsls	r1, r2, #1
2400c80a:	d431      	bmi.n	2400c870 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c80c:	0094      	lsls	r4, r2, #2
2400c80e:	d431      	bmi.n	2400c874 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c810:	00d0      	lsls	r0, r2, #3
2400c812:	d431      	bmi.n	2400c878 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c814:	0111      	lsls	r1, r2, #4
2400c816:	d432      	bmi.n	2400c87e <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c818:	0154      	lsls	r4, r2, #5
2400c81a:	d433      	bmi.n	2400c884 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c81c:	01d0      	lsls	r0, r2, #7
2400c81e:	d434      	bmi.n	2400c88a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c820:	0211      	lsls	r1, r2, #8
2400c822:	d435      	bmi.n	2400c890 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c824:	0254      	lsls	r4, r2, #9
2400c826:	d436      	bmi.n	2400c896 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c828:	0290      	lsls	r0, r2, #10
2400c82a:	d440      	bmi.n	2400c8ae <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c82c:	02d1      	lsls	r1, r2, #11
2400c82e:	d43b      	bmi.n	2400c8a8 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c830:	0354      	lsls	r4, r2, #13
2400c832:	d436      	bmi.n	2400c8a2 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c834:	0390      	lsls	r0, r2, #14
2400c836:	d431      	bmi.n	2400c89c <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c838:	03d1      	lsls	r1, r2, #15
2400c83a:	d444      	bmi.n	2400c8c6 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c83c:	0414      	lsls	r4, r2, #16
2400c83e:	d43f      	bmi.n	2400c8c0 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c840:	0450      	lsls	r0, r2, #17
2400c842:	d43a      	bmi.n	2400c8ba <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c844:	0491      	lsls	r1, r2, #18
2400c846:	d435      	bmi.n	2400c8b4 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c848:	f012 0f08 	tst.w	r2, #8
2400c84c:	bf14      	ite	ne
2400c84e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c852:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c856:	e7bf      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c858:	2201      	movs	r2, #1
2400c85a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c85c:	e7bc      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c85e:	2301      	movs	r3, #1
2400c860:	e7ba      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c862:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c864:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c866:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c868:	e7b6      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c86a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c86e:	e7b3      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c870:	2340      	movs	r3, #64	; 0x40
2400c872:	e7b1      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c874:	2380      	movs	r3, #128	; 0x80
2400c876:	e7af      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c878:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c87c:	e7ac      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c87e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c882:	e7a9      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c884:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c888:	e7a6      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c88a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c88e:	e7a3      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c894:	e7a0      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c89a:	e79d      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c89c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c8a0:	e79a      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c8a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c8a6:	e797      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c8a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c8ac:	e794      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c8ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c8b2:	e791      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c8b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c8b8:	e78e      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c8ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c8be:	e78b      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c8c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c8c4:	e788      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c8c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c8ca:	e785      	b.n	2400c7d8 <SDMMC_CmdSendStatus+0x40>
2400c8cc:	200006e0 	.word	0x200006e0
2400c8d0:	10624dd3 	.word	0x10624dd3
2400c8d4:	fffee0c0 	.word	0xfffee0c0
2400c8d8:	00200045 	.word	0x00200045
2400c8dc:	002000c5 	.word	0x002000c5
2400c8e0:	fdffe008 	.word	0xfdffe008

2400c8e4 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8e4:	4a4d      	ldr	r2, [pc, #308]	; (2400ca1c <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
2400c8e6:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8e8:	494d      	ldr	r1, [pc, #308]	; (2400ca20 <SDMMC_CmdStatusRegister+0x13c>)
{
2400c8ea:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8ec:	4c4d      	ldr	r4, [pc, #308]	; (2400ca24 <SDMMC_CmdStatusRegister+0x140>)
2400c8ee:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c8f0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8f2:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8f6:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8fa:	68c4      	ldr	r4, [r0, #12]
2400c8fc:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8fe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c900:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c902:	f241 3188 	movw	r1, #5000	; 0x1388
2400c906:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c90a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c90c:	b14a      	cbz	r2, 2400c922 <SDMMC_CmdStatusRegister+0x3e>
2400c90e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c910:	4945      	ldr	r1, [pc, #276]	; (2400ca28 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400c912:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c914:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c916:	420a      	tst	r2, r1
2400c918:	d001      	beq.n	2400c91e <SDMMC_CmdStatusRegister+0x3a>
2400c91a:	0492      	lsls	r2, r2, #18
2400c91c:	d507      	bpl.n	2400c92e <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400c91e:	1c5c      	adds	r4, r3, #1
2400c920:	d1f7      	bne.n	2400c912 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c926:	4618      	mov	r0, r3
2400c928:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c92c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c92e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c930:	075c      	lsls	r4, r3, #29
2400c932:	d43d      	bmi.n	2400c9b0 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c934:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c936:	f013 0301 	ands.w	r3, r3, #1
2400c93a:	d134      	bne.n	2400c9a6 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c93c:	4b3b      	ldr	r3, [pc, #236]	; (2400ca2c <SDMMC_CmdStatusRegister+0x148>)
2400c93e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c940:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c942:	b2db      	uxtb	r3, r3
2400c944:	2b0d      	cmp	r3, #13
2400c946:	d131      	bne.n	2400c9ac <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c948:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c94a:	4b39      	ldr	r3, [pc, #228]	; (2400ca30 <SDMMC_CmdStatusRegister+0x14c>)
2400c94c:	4013      	ands	r3, r2
2400c94e:	2b00      	cmp	r3, #0
2400c950:	d0e9      	beq.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c952:	2a00      	cmp	r2, #0
2400c954:	db30      	blt.n	2400c9b8 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c956:	0051      	lsls	r1, r2, #1
2400c958:	d431      	bmi.n	2400c9be <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c95a:	0094      	lsls	r4, r2, #2
2400c95c:	d431      	bmi.n	2400c9c2 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c95e:	00d0      	lsls	r0, r2, #3
2400c960:	d431      	bmi.n	2400c9c6 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c962:	0111      	lsls	r1, r2, #4
2400c964:	d432      	bmi.n	2400c9cc <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c966:	0154      	lsls	r4, r2, #5
2400c968:	d433      	bmi.n	2400c9d2 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c96a:	01d0      	lsls	r0, r2, #7
2400c96c:	d434      	bmi.n	2400c9d8 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c96e:	0211      	lsls	r1, r2, #8
2400c970:	d435      	bmi.n	2400c9de <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c972:	0254      	lsls	r4, r2, #9
2400c974:	d436      	bmi.n	2400c9e4 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c976:	0290      	lsls	r0, r2, #10
2400c978:	d440      	bmi.n	2400c9fc <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c97a:	02d1      	lsls	r1, r2, #11
2400c97c:	d43b      	bmi.n	2400c9f6 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c97e:	0354      	lsls	r4, r2, #13
2400c980:	d436      	bmi.n	2400c9f0 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c982:	0390      	lsls	r0, r2, #14
2400c984:	d431      	bmi.n	2400c9ea <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c986:	03d1      	lsls	r1, r2, #15
2400c988:	d444      	bmi.n	2400ca14 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c98a:	0414      	lsls	r4, r2, #16
2400c98c:	d43f      	bmi.n	2400ca0e <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c98e:	0450      	lsls	r0, r2, #17
2400c990:	d43a      	bmi.n	2400ca08 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c992:	0491      	lsls	r1, r2, #18
2400c994:	d435      	bmi.n	2400ca02 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c996:	f012 0f08 	tst.w	r2, #8
2400c99a:	bf14      	ite	ne
2400c99c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c9a0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c9a4:	e7bf      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c9a6:	2201      	movs	r2, #1
2400c9a8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c9aa:	e7bc      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c9ac:	2301      	movs	r3, #1
2400c9ae:	e7ba      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c9b0:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c9b2:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c9b4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c9b6:	e7b6      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c9b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c9bc:	e7b3      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c9be:	2340      	movs	r3, #64	; 0x40
2400c9c0:	e7b1      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c9c2:	2380      	movs	r3, #128	; 0x80
2400c9c4:	e7af      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c9c6:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c9ca:	e7ac      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c9cc:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c9d0:	e7a9      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c9d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c9d6:	e7a6      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c9d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c9dc:	e7a3      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c9de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c9e2:	e7a0      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c9e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c9e8:	e79d      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c9ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c9ee:	e79a      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c9f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c9f4:	e797      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
2400c9f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c9fa:	e794      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c9fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ca00:	e791      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400ca02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ca06:	e78e      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ca08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ca0c:	e78b      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ca0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400ca12:	e788      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ca14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ca18:	e785      	b.n	2400c926 <SDMMC_CmdStatusRegister+0x42>
2400ca1a:	bf00      	nop
2400ca1c:	200006e0 	.word	0x200006e0
2400ca20:	fffee0c0 	.word	0xfffee0c0
2400ca24:	10624dd3 	.word	0x10624dd3
2400ca28:	00200045 	.word	0x00200045
2400ca2c:	002000c5 	.word	0x002000c5
2400ca30:	fdffe008 	.word	0xfdffe008

2400ca34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400ca34:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400ca36:	4903      	ldr	r1, [pc, #12]	; (2400ca44 <MX_FATFS_Init+0x10>)
2400ca38:	4803      	ldr	r0, [pc, #12]	; (2400ca48 <MX_FATFS_Init+0x14>)
2400ca3a:	f003 f86d 	bl	2400fb18 <FATFS_LinkDriver>
2400ca3e:	4b03      	ldr	r3, [pc, #12]	; (2400ca4c <MX_FATFS_Init+0x18>)
2400ca40:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400ca42:	bd08      	pop	{r3, pc}
2400ca44:	2001d8c8 	.word	0x2001d8c8
2400ca48:	24017f58 	.word	0x24017f58
2400ca4c:	2001d8cc 	.word	0x2001d8cc

2400ca50 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400ca50:	2000      	movs	r0, #0
2400ca52:	4770      	bx	lr

2400ca54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400ca54:	b510      	push	{r4, lr}
2400ca56:	4694      	mov	ip, r2
2400ca58:	b082      	sub	sp, #8
2400ca5a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400ca5c:	460a      	mov	r2, r1
2400ca5e:	4663      	mov	r3, ip
2400ca60:	4601      	mov	r1, r0
2400ca62:	9400      	str	r4, [sp, #0]
2400ca64:	4803      	ldr	r0, [pc, #12]	; (2400ca74 <BSP_SD_ReadBlocks+0x20>)
2400ca66:	f7fd fa2f 	bl	24009ec8 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400ca6a:	3800      	subs	r0, #0
2400ca6c:	bf18      	it	ne
2400ca6e:	2001      	movne	r0, #1
2400ca70:	b002      	add	sp, #8
2400ca72:	bd10      	pop	{r4, pc}
2400ca74:	2001d140 	.word	0x2001d140

2400ca78 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400ca78:	b510      	push	{r4, lr}
2400ca7a:	4694      	mov	ip, r2
2400ca7c:	b082      	sub	sp, #8
2400ca7e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400ca80:	460a      	mov	r2, r1
2400ca82:	4663      	mov	r3, ip
2400ca84:	4601      	mov	r1, r0
2400ca86:	9400      	str	r4, [sp, #0]
2400ca88:	4803      	ldr	r0, [pc, #12]	; (2400ca98 <BSP_SD_WriteBlocks+0x20>)
2400ca8a:	f7fd fb25 	bl	2400a0d8 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400ca8e:	3800      	subs	r0, #0
2400ca90:	bf18      	it	ne
2400ca92:	2001      	movne	r0, #1
2400ca94:	b002      	add	sp, #8
2400ca96:	bd10      	pop	{r4, pc}
2400ca98:	2001d140 	.word	0x2001d140

2400ca9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400ca9c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400ca9e:	4803      	ldr	r0, [pc, #12]	; (2400caac <BSP_SD_GetCardState+0x10>)
2400caa0:	f7fd ff86 	bl	2400a9b0 <HAL_SD_GetCardState>
}
2400caa4:	3804      	subs	r0, #4
2400caa6:	bf18      	it	ne
2400caa8:	2001      	movne	r0, #1
2400caaa:	bd08      	pop	{r3, pc}
2400caac:	2001d140 	.word	0x2001d140

2400cab0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400cab0:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400cab2:	4801      	ldr	r0, [pc, #4]	; (2400cab8 <BSP_SD_GetCardInfo+0x8>)
2400cab4:	f7fd be2c 	b.w	2400a710 <HAL_SD_GetCardInfo>
2400cab8:	2001d140 	.word	0x2001d140

2400cabc <BSP_SD_Init>:
{
2400cabc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400cabe:	f7f5 fc03 	bl	240022c8 <BSP_SD_IsDetected>
2400cac2:	2801      	cmp	r0, #1
2400cac4:	d001      	beq.n	2400caca <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400cac6:	2002      	movs	r0, #2
}
2400cac8:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400caca:	4807      	ldr	r0, [pc, #28]	; (2400cae8 <BSP_SD_Init+0x2c>)
2400cacc:	f7fd ff08 	bl	2400a8e0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400cad0:	2800      	cmp	r0, #0
2400cad2:	d1f9      	bne.n	2400cac8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400cad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400cad8:	4803      	ldr	r0, [pc, #12]	; (2400cae8 <BSP_SD_Init+0x2c>)
2400cada:	f7fd fe2d 	bl	2400a738 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400cade:	3800      	subs	r0, #0
2400cae0:	bf18      	it	ne
2400cae2:	2001      	movne	r0, #1
}
2400cae4:	bd08      	pop	{r3, pc}
2400cae6:	bf00      	nop
2400cae8:	2001d140 	.word	0x2001d140

2400caec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400caec:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400caee:	4c0a      	ldr	r4, [pc, #40]	; (2400cb18 <SD_initialize+0x2c>)
2400caf0:	2501      	movs	r5, #1
2400caf2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400caf4:	f7ff ffe2 	bl	2400cabc <BSP_SD_Init>
2400caf8:	b108      	cbz	r0, 2400cafe <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400cafa:	7820      	ldrb	r0, [r4, #0]
}
2400cafc:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400cafe:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400cb00:	f7ff ffcc 	bl	2400ca9c <BSP_SD_GetCardState>
2400cb04:	b918      	cbnz	r0, 2400cb0e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400cb06:	7823      	ldrb	r3, [r4, #0]
2400cb08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400cb0c:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cb0e:	7823      	ldrb	r3, [r4, #0]
2400cb10:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400cb12:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cb14:	7820      	ldrb	r0, [r4, #0]
}
2400cb16:	bd38      	pop	{r3, r4, r5, pc}
2400cb18:	200006f0 	.word	0x200006f0

2400cb1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400cb1c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400cb1e:	2301      	movs	r3, #1
2400cb20:	4c05      	ldr	r4, [pc, #20]	; (2400cb38 <SD_status+0x1c>)
2400cb22:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400cb24:	f7ff ffba 	bl	2400ca9c <BSP_SD_GetCardState>
2400cb28:	b918      	cbnz	r0, 2400cb32 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400cb2a:	7823      	ldrb	r3, [r4, #0]
2400cb2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400cb30:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cb32:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400cb34:	bd10      	pop	{r4, pc}
2400cb36:	bf00      	nop
2400cb38:	200006f0 	.word	0x200006f0

2400cb3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400cb3c:	b508      	push	{r3, lr}
2400cb3e:	4608      	mov	r0, r1
2400cb40:	4611      	mov	r1, r2
2400cb42:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400cb44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cb48:	f7ff ff84 	bl	2400ca54 <BSP_SD_ReadBlocks>
2400cb4c:	b108      	cbz	r0, 2400cb52 <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400cb4e:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400cb50:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400cb52:	f7ff ffa3 	bl	2400ca9c <BSP_SD_GetCardState>
2400cb56:	2800      	cmp	r0, #0
2400cb58:	d0fa      	beq.n	2400cb50 <SD_read+0x14>
2400cb5a:	f7ff ff9f 	bl	2400ca9c <BSP_SD_GetCardState>
2400cb5e:	2800      	cmp	r0, #0
2400cb60:	d1f7      	bne.n	2400cb52 <SD_read+0x16>
2400cb62:	e7f5      	b.n	2400cb50 <SD_read+0x14>

2400cb64 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cb64:	4b18      	ldr	r3, [pc, #96]	; (2400cbc8 <SD_ioctl+0x64>)
{
2400cb66:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cb68:	7818      	ldrb	r0, [r3, #0]
{
2400cb6a:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cb6c:	f010 0401 	ands.w	r4, r0, #1
2400cb70:	d106      	bne.n	2400cb80 <SD_ioctl+0x1c>
2400cb72:	4615      	mov	r5, r2

  switch (cmd)
2400cb74:	2903      	cmp	r1, #3
2400cb76:	d824      	bhi.n	2400cbc2 <SD_ioctl+0x5e>
2400cb78:	e8df f001 	tbb	[pc, r1]
2400cb7c:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cb80:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400cb82:	4620      	mov	r0, r4
2400cb84:	b00b      	add	sp, #44	; 0x2c
2400cb86:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400cb88:	460c      	mov	r4, r1
}
2400cb8a:	4620      	mov	r0, r4
2400cb8c:	b00b      	add	sp, #44	; 0x2c
2400cb8e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cb90:	a801      	add	r0, sp, #4
2400cb92:	f7ff ff8d 	bl	2400cab0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400cb96:	9b07      	ldr	r3, [sp, #28]
}
2400cb98:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400cb9a:	602b      	str	r3, [r5, #0]
}
2400cb9c:	b00b      	add	sp, #44	; 0x2c
2400cb9e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cba0:	a801      	add	r0, sp, #4
2400cba2:	f7ff ff85 	bl	2400cab0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cba6:	9b08      	ldr	r3, [sp, #32]
}
2400cba8:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cbaa:	802b      	strh	r3, [r5, #0]
}
2400cbac:	b00b      	add	sp, #44	; 0x2c
2400cbae:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cbb0:	a801      	add	r0, sp, #4
2400cbb2:	f7ff ff7d 	bl	2400cab0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cbb6:	9b08      	ldr	r3, [sp, #32]
}
2400cbb8:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cbba:	0a5b      	lsrs	r3, r3, #9
2400cbbc:	602b      	str	r3, [r5, #0]
}
2400cbbe:	b00b      	add	sp, #44	; 0x2c
2400cbc0:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400cbc2:	2404      	movs	r4, #4
2400cbc4:	e7dd      	b.n	2400cb82 <SD_ioctl+0x1e>
2400cbc6:	bf00      	nop
2400cbc8:	200006f0 	.word	0x200006f0

2400cbcc <SD_write>:
{
2400cbcc:	b508      	push	{r3, lr}
2400cbce:	4608      	mov	r0, r1
2400cbd0:	4611      	mov	r1, r2
2400cbd2:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400cbd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cbd8:	f7ff ff4e 	bl	2400ca78 <BSP_SD_WriteBlocks>
2400cbdc:	b108      	cbz	r0, 2400cbe2 <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400cbde:	2001      	movs	r0, #1
}
2400cbe0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400cbe2:	f7ff ff5b 	bl	2400ca9c <BSP_SD_GetCardState>
2400cbe6:	2800      	cmp	r0, #0
2400cbe8:	d0fa      	beq.n	2400cbe0 <SD_write+0x14>
2400cbea:	f7ff ff57 	bl	2400ca9c <BSP_SD_GetCardState>
2400cbee:	2800      	cmp	r0, #0
2400cbf0:	d1f7      	bne.n	2400cbe2 <SD_write+0x16>
2400cbf2:	e7f5      	b.n	2400cbe0 <SD_write+0x14>

2400cbf4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400cbf4:	4b03      	ldr	r3, [pc, #12]	; (2400cc04 <disk_status+0x10>)
2400cbf6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400cbfa:	4403      	add	r3, r0
2400cbfc:	6852      	ldr	r2, [r2, #4]
2400cbfe:	7a18      	ldrb	r0, [r3, #8]
2400cc00:	6853      	ldr	r3, [r2, #4]
2400cc02:	4718      	bx	r3
2400cc04:	2001daf8 	.word	0x2001daf8

2400cc08 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400cc08:	4b07      	ldr	r3, [pc, #28]	; (2400cc28 <disk_initialize+0x20>)
2400cc0a:	5c1a      	ldrb	r2, [r3, r0]
2400cc0c:	b952      	cbnz	r2, 2400cc24 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cc0e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400cc12:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400cc14:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cc18:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400cc1a:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cc1e:	7a08      	ldrb	r0, [r1, #8]
2400cc20:	6813      	ldr	r3, [r2, #0]
2400cc22:	4718      	bx	r3
  }
  return stat;
}
2400cc24:	2000      	movs	r0, #0
2400cc26:	4770      	bx	lr
2400cc28:	2001daf8 	.word	0x2001daf8

2400cc2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400cc2c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400cc2e:	4c05      	ldr	r4, [pc, #20]	; (2400cc44 <disk_read+0x18>)
2400cc30:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400cc34:	4404      	add	r4, r0
2400cc36:	686d      	ldr	r5, [r5, #4]
2400cc38:	7a20      	ldrb	r0, [r4, #8]
2400cc3a:	68ac      	ldr	r4, [r5, #8]
2400cc3c:	46a4      	mov	ip, r4
  return res;
}
2400cc3e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400cc40:	4760      	bx	ip
2400cc42:	bf00      	nop
2400cc44:	2001daf8 	.word	0x2001daf8

2400cc48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400cc48:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400cc4a:	4c05      	ldr	r4, [pc, #20]	; (2400cc60 <disk_write+0x18>)
2400cc4c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400cc50:	4404      	add	r4, r0
2400cc52:	686d      	ldr	r5, [r5, #4]
2400cc54:	7a20      	ldrb	r0, [r4, #8]
2400cc56:	68ec      	ldr	r4, [r5, #12]
2400cc58:	46a4      	mov	ip, r4
  return res;
}
2400cc5a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400cc5c:	4760      	bx	ip
2400cc5e:	bf00      	nop
2400cc60:	2001daf8 	.word	0x2001daf8

2400cc64 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400cc64:	4b04      	ldr	r3, [pc, #16]	; (2400cc78 <disk_ioctl+0x14>)
2400cc66:	eb03 0c00 	add.w	ip, r3, r0
2400cc6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400cc6e:	685b      	ldr	r3, [r3, #4]
2400cc70:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400cc74:	691b      	ldr	r3, [r3, #16]
2400cc76:	4718      	bx	r3
2400cc78:	2001daf8 	.word	0x2001daf8

2400cc7c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400cc7c:	4b26      	ldr	r3, [pc, #152]	; (2400cd18 <inc_lock+0x9c>)
{
2400cc7e:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
2400cc80:	681a      	ldr	r2, [r3, #0]
2400cc82:	6805      	ldr	r5, [r0, #0]
2400cc84:	4295      	cmp	r5, r2
2400cc86:	d01b      	beq.n	2400ccc0 <inc_lock+0x44>
2400cc88:	691c      	ldr	r4, [r3, #16]
2400cc8a:	42ac      	cmp	r4, r5
2400cc8c:	d006      	beq.n	2400cc9c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cc8e:	b30a      	cbz	r2, 2400ccd4 <inc_lock+0x58>
2400cc90:	2c00      	cmp	r4, #0
2400cc92:	d036      	beq.n	2400cd02 <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400cc94:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400cc96:	4620      	mov	r0, r4
2400cc98:	bcf0      	pop	{r4, r5, r6, r7}
2400cc9a:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400cc9c:	695e      	ldr	r6, [r3, #20]
2400cc9e:	6887      	ldr	r7, [r0, #8]
2400cca0:	42be      	cmp	r6, r7
2400cca2:	d1f4      	bne.n	2400cc8e <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
2400cca4:	699e      	ldr	r6, [r3, #24]
2400cca6:	6947      	ldr	r7, [r0, #20]
2400cca8:	42be      	cmp	r6, r7
2400ccaa:	d1f0      	bne.n	2400cc8e <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400ccac:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400ccae:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400ccb2:	bb49      	cbnz	r1, 2400cd08 <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400ccb4:	0111      	lsls	r1, r2, #4
	return i + 1;
2400ccb6:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400ccb8:	8982      	ldrh	r2, [r0, #12]
2400ccba:	3201      	adds	r2, #1
2400ccbc:	b292      	uxth	r2, r2
2400ccbe:	e01b      	b.n	2400ccf8 <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
2400ccc0:	6884      	ldr	r4, [r0, #8]
2400ccc2:	685e      	ldr	r6, [r3, #4]
2400ccc4:	42a6      	cmp	r6, r4
2400ccc6:	d1df      	bne.n	2400cc88 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
2400ccc8:	689c      	ldr	r4, [r3, #8]
2400ccca:	6946      	ldr	r6, [r0, #20]
2400cccc:	42a6      	cmp	r6, r4
2400ccce:	d1db      	bne.n	2400cc88 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400ccd0:	2200      	movs	r2, #0
2400ccd2:	e7ec      	b.n	2400ccae <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400ccd4:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400ccd6:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400ccd8:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400ccdc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400cce0:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400cce2:	6945      	ldr	r5, [r0, #20]
2400cce4:	6880      	ldr	r0, [r0, #8]
2400cce6:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
2400ccea:	f04f 0000 	mov.w	r0, #0
2400ccee:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400ccf0:	bf14      	ite	ne
2400ccf2:	f44f 7280 	movne.w	r2, #256	; 0x100
2400ccf6:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400ccf8:	440b      	add	r3, r1
}
2400ccfa:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400ccfc:	819a      	strh	r2, [r3, #12]
}
2400ccfe:	bcf0      	pop	{r4, r5, r6, r7}
2400cd00:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cd02:	2402      	movs	r4, #2
2400cd04:	2201      	movs	r2, #1
2400cd06:	e7e6      	b.n	2400ccd6 <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cd08:	8980      	ldrh	r0, [r0, #12]
2400cd0a:	0111      	lsls	r1, r2, #4
2400cd0c:	2800      	cmp	r0, #0
2400cd0e:	d1c1      	bne.n	2400cc94 <inc_lock+0x18>
	return i + 1;
2400cd10:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cd12:	f44f 7280 	mov.w	r2, #256	; 0x100
2400cd16:	e7ef      	b.n	2400ccf8 <inc_lock+0x7c>
2400cd18:	2001d8d4 	.word	0x2001d8d4

2400cd1c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400cd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400cd20:	440a      	add	r2, r1
2400cd22:	460d      	mov	r5, r1
2400cd24:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cd26:	4f37      	ldr	r7, [pc, #220]	; (2400ce04 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400cd28:	42aa      	cmp	r2, r5
2400cd2a:	d012      	beq.n	2400cd52 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd2c:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd30:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cd34:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd38:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd3c:	2919      	cmp	r1, #25
2400cd3e:	d9f3      	bls.n	2400cd28 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cd40:	2c7f      	cmp	r4, #127	; 0x7f
2400cd42:	bf88      	it	hi
2400cd44:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400cd48:	2c00      	cmp	r4, #0
2400cd4a:	d1ed      	bne.n	2400cd28 <pattern_matching+0xc>
2400cd4c:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400cd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400cd52:	1e1f      	subs	r7, r3, #0
2400cd54:	f896 8000 	ldrb.w	r8, [r6]
2400cd58:	bf18      	it	ne
2400cd5a:	2701      	movne	r7, #1
2400cd5c:	f1b8 0f00 	cmp.w	r8, #0
2400cd60:	d100      	bne.n	2400cd64 <pattern_matching+0x48>
2400cd62:	bb8f      	cbnz	r7, 2400cdc8 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cd64:	4c27      	ldr	r4, [pc, #156]	; (2400ce04 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400cd66:	4630      	mov	r0, r6
{
2400cd68:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400cd6a:	46a9      	mov	r9, r5
2400cd6c:	e010      	b.n	2400cd90 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd6e:	3a20      	subs	r2, #32
2400cd70:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd72:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd76:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd7a:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd7c:	f1bc 0f19 	cmp.w	ip, #25
2400cd80:	d815      	bhi.n	2400cdae <pattern_matching+0x92>
2400cd82:	3b20      	subs	r3, #32
2400cd84:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400cd86:	4293      	cmp	r3, r2
2400cd88:	d118      	bne.n	2400cdbc <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400cd8a:	b1eb      	cbz	r3, 2400cdc8 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400cd8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400cd90:	2b3f      	cmp	r3, #63	; 0x3f
2400cd92:	d01c      	beq.n	2400cdce <pattern_matching+0xb2>
2400cd94:	2b2a      	cmp	r3, #42	; 0x2a
2400cd96:	d01a      	beq.n	2400cdce <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd98:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd9c:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd9e:	2919      	cmp	r1, #25
2400cda0:	d9e5      	bls.n	2400cd6e <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cda2:	2a7f      	cmp	r2, #127	; 0x7f
2400cda4:	d9e5      	bls.n	2400cd72 <pattern_matching+0x56>
2400cda6:	4423      	add	r3, r4
2400cda8:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400cdac:	e7e1      	b.n	2400cd72 <pattern_matching+0x56>
2400cdae:	2b7f      	cmp	r3, #127	; 0x7f
2400cdb0:	d9e9      	bls.n	2400cd86 <pattern_matching+0x6a>
2400cdb2:	4421      	add	r1, r4
2400cdb4:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400cdb8:	4293      	cmp	r3, r2
2400cdba:	d0e6      	beq.n	2400cd8a <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cdbc:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400cdbe:	2b00      	cmp	r3, #0
2400cdc0:	d0c4      	beq.n	2400cd4c <pattern_matching+0x30>
2400cdc2:	2f00      	cmp	r7, #0
2400cdc4:	d1cf      	bne.n	2400cd66 <pattern_matching+0x4a>
2400cdc6:	e7c1      	b.n	2400cd4c <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400cdc8:	2001      	movs	r0, #1
}
2400cdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400cdce:	4601      	mov	r1, r0
				nm = nx = 0;
2400cdd0:	2300      	movs	r3, #0
2400cdd2:	f811 cb01 	ldrb.w	ip, [r1], #1
2400cdd6:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400cdd8:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400cddc:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400cdde:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400cde2:	bf0c      	ite	eq
2400cde4:	3201      	addeq	r2, #1
2400cde6:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400cde8:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400cdec:	d0f4      	beq.n	2400cdd8 <pattern_matching+0xbc>
2400cdee:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400cdf2:	d0f1      	beq.n	2400cdd8 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400cdf4:	4649      	mov	r1, r9
2400cdf6:	f7ff ff91 	bl	2400cd1c <pattern_matching>
2400cdfa:	2800      	cmp	r0, #0
2400cdfc:	d1e4      	bne.n	2400cdc8 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400cdfe:	f899 3000 	ldrb.w	r3, [r9]
2400ce02:	e7db      	b.n	2400cdbc <pattern_matching+0xa0>
2400ce04:	24017f80 	.word	0x24017f80

2400ce08 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400ce08:	2300      	movs	r3, #0
{
2400ce0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400ce0e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400ce12:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400ce14:	69c2      	ldr	r2, [r0, #28]
2400ce16:	2a00      	cmp	r2, #0
2400ce18:	d063      	beq.n	2400cee2 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400ce1a:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400ce1c:	4604      	mov	r4, r0
2400ce1e:	460d      	mov	r5, r1
2400ce20:	3201      	adds	r2, #1
2400ce22:	d01f      	beq.n	2400ce64 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ce24:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400ce28:	8818      	ldrh	r0, [r3, #0]
2400ce2a:	2800      	cmp	r0, #0
2400ce2c:	d063      	beq.n	2400cef6 <get_fileinfo+0xee>
2400ce2e:	f101 0715 	add.w	r7, r1, #21
2400ce32:	2601      	movs	r6, #1
2400ce34:	e000      	b.n	2400ce38 <get_fileinfo+0x30>
2400ce36:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400ce38:	2100      	movs	r1, #0
2400ce3a:	f002 fe91 	bl	2400fb60 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ce3e:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400ce40:	2800      	cmp	r0, #0
2400ce42:	d058      	beq.n	2400cef6 <get_fileinfo+0xee>
2400ce44:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400ce48:	d055      	beq.n	2400cef6 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400ce4a:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ce4e:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400ce52:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400ce56:	2800      	cmp	r0, #0
2400ce58:	d1ed      	bne.n	2400ce36 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400ce5a:	442e      	add	r6, r5
2400ce5c:	2300      	movs	r3, #0
2400ce5e:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400ce60:	7da8      	ldrb	r0, [r5, #22]
2400ce62:	e000      	b.n	2400ce66 <get_fileinfo+0x5e>
2400ce64:	4618      	mov	r0, r3
	i = j = 0;
2400ce66:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400ce6a:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400ce6c:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400ce6e:	6a21      	ldr	r1, [r4, #32]
2400ce70:	5c8b      	ldrb	r3, [r1, r2]
2400ce72:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400ce74:	2b20      	cmp	r3, #32
2400ce76:	d01b      	beq.n	2400ceb0 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400ce78:	2b05      	cmp	r3, #5
2400ce7a:	bf08      	it	eq
2400ce7c:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400ce7e:	2a09      	cmp	r2, #9
2400ce80:	d031      	beq.n	2400cee6 <get_fileinfo+0xde>
		fno->altname[j] = c;
2400ce82:	eb05 010c 	add.w	r1, r5, ip
2400ce86:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400ce88:	b980      	cbnz	r0, 2400ceac <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400ce8a:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400ce8e:	2e19      	cmp	r6, #25
2400ce90:	d80b      	bhi.n	2400ceaa <get_fileinfo+0xa2>
2400ce92:	6a26      	ldr	r6, [r4, #32]
2400ce94:	2a08      	cmp	r2, #8
2400ce96:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400ce9a:	bf8c      	ite	hi
2400ce9c:	2610      	movhi	r6, #16
2400ce9e:	2608      	movls	r6, #8
2400cea0:	ea1e 0f06 	tst.w	lr, r6
2400cea4:	d001      	beq.n	2400ceaa <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400cea6:	3320      	adds	r3, #32
2400cea8:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400ceaa:	758b      	strb	r3, [r1, #22]
		j++;
2400ceac:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400ceb0:	2a0b      	cmp	r2, #11
2400ceb2:	d1dc      	bne.n	2400ce6e <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400ceb4:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400ceb8:	b928      	cbnz	r0, 2400cec6 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400ceba:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400cebc:	6a23      	ldr	r3, [r4, #32]
2400cebe:	7b1b      	ldrb	r3, [r3, #12]
2400cec0:	2b00      	cmp	r3, #0
2400cec2:	bf08      	it	eq
2400cec4:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400cec6:	2300      	movs	r3, #0
2400cec8:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400ceca:	6a23      	ldr	r3, [r4, #32]
2400cecc:	7adb      	ldrb	r3, [r3, #11]
2400cece:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400ced0:	6a23      	ldr	r3, [r4, #32]
2400ced2:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400ced4:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400ced6:	6a23      	ldr	r3, [r4, #32]
2400ced8:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400cedc:	0c1a      	lsrs	r2, r3, #16
2400cede:	80eb      	strh	r3, [r5, #6]
2400cee0:	80aa      	strh	r2, [r5, #4]
}
2400cee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400cee6:	eb05 010c 	add.w	r1, r5, ip
2400ceea:	b900      	cbnz	r0, 2400ceee <get_fileinfo+0xe6>
2400ceec:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400ceee:	f10c 0c01 	add.w	ip, ip, #1
2400cef2:	724f      	strb	r7, [r1, #9]
2400cef4:	e7c5      	b.n	2400ce82 <get_fileinfo+0x7a>
			i = j = 0;
2400cef6:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400cef8:	2300      	movs	r3, #0
2400cefa:	442e      	add	r6, r5
2400cefc:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400cefe:	7da8      	ldrb	r0, [r5, #22]
2400cf00:	e7b1      	b.n	2400ce66 <get_fileinfo+0x5e>
2400cf02:	bf00      	nop

2400cf04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400cf04:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400cf06:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400cf0a:	2300      	movs	r3, #0
{
2400cf0c:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400cf0e:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400cf10:	70c3      	strb	r3, [r0, #3]
2400cf12:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400cf14:	d00c      	beq.n	2400cf30 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400cf16:	460d      	mov	r5, r1
2400cf18:	460a      	mov	r2, r1
2400cf1a:	2301      	movs	r3, #1
2400cf1c:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400cf20:	7840      	ldrb	r0, [r0, #1]
2400cf22:	f7ff fe83 	bl	2400cc2c <disk_read>
2400cf26:	b110      	cbz	r0, 2400cf2e <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400cf28:	2004      	movs	r0, #4
			fs->winsect = sector;
2400cf2a:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400cf2c:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400cf2e:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400cf30:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400cf34:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400cf38:	429a      	cmp	r2, r3
2400cf3a:	d11a      	bne.n	2400cf72 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400cf3c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400cf40:	2be9      	cmp	r3, #233	; 0xe9
2400cf42:	d007      	beq.n	2400cf54 <check_fs+0x50>
2400cf44:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cf46:	4a0d      	ldr	r2, [pc, #52]	; (2400cf7c <check_fs+0x78>)
2400cf48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400cf4c:	4293      	cmp	r3, r2
2400cf4e:	d001      	beq.n	2400cf54 <check_fs+0x50>
	return 2;
2400cf50:	2002      	movs	r0, #2
}
2400cf52:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400cf54:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400cf58:	4a09      	ldr	r2, [pc, #36]	; (2400cf80 <check_fs+0x7c>)
2400cf5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400cf5e:	4293      	cmp	r3, r2
2400cf60:	d009      	beq.n	2400cf76 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400cf62:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400cf66:	4b07      	ldr	r3, [pc, #28]	; (2400cf84 <check_fs+0x80>)
2400cf68:	4298      	cmp	r0, r3
2400cf6a:	bf14      	ite	ne
2400cf6c:	2002      	movne	r0, #2
2400cf6e:	2000      	moveq	r0, #0
}
2400cf70:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400cf72:	2003      	movs	r0, #3
}
2400cf74:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400cf76:	2000      	movs	r0, #0
}
2400cf78:	bd70      	pop	{r4, r5, r6, pc}
2400cf7a:	bf00      	nop
2400cf7c:	009000eb 	.word	0x009000eb
2400cf80:	00544146 	.word	0x00544146
2400cf84:	33544146 	.word	0x33544146

2400cf88 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400cf8a:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400cf8c:	b083      	sub	sp, #12
2400cf8e:	4604      	mov	r4, r0
2400cf90:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400cf92:	b973      	cbnz	r3, 2400cfb2 <move_window.part.0+0x2a>
2400cf94:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400cf98:	2301      	movs	r3, #1
2400cf9a:	462a      	mov	r2, r5
2400cf9c:	7860      	ldrb	r0, [r4, #1]
2400cf9e:	f7ff fe45 	bl	2400cc2c <disk_read>
2400cfa2:	b910      	cbnz	r0, 2400cfaa <move_window.part.0+0x22>
			fs->winsect = sector;
2400cfa4:	6325      	str	r5, [r4, #48]	; 0x30
}
2400cfa6:	b003      	add	sp, #12
2400cfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400cfaa:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400cfac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400cfb0:	e7f8      	b.n	2400cfa4 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
2400cfb2:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400cfb4:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400cfb8:	2301      	movs	r3, #1
2400cfba:	7840      	ldrb	r0, [r0, #1]
2400cfbc:	4632      	mov	r2, r6
2400cfbe:	9101      	str	r1, [sp, #4]
2400cfc0:	f7ff fe42 	bl	2400cc48 <disk_write>
2400cfc4:	b9b8      	cbnz	r0, 2400cff6 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400cfc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400cfc8:	69e3      	ldr	r3, [r4, #28]
2400cfca:	1ab2      	subs	r2, r6, r2
2400cfcc:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400cfce:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400cfd0:	429a      	cmp	r2, r3
2400cfd2:	d2e1      	bcs.n	2400cf98 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cfd4:	78a7      	ldrb	r7, [r4, #2]
2400cfd6:	2f01      	cmp	r7, #1
2400cfd8:	d801      	bhi.n	2400cfde <move_window.part.0+0x56>
2400cfda:	e7dd      	b.n	2400cf98 <move_window.part.0+0x10>
					wsect += fs->fsize;
2400cfdc:	69e3      	ldr	r3, [r4, #28]
2400cfde:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cfe0:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400cfe2:	2301      	movs	r3, #1
2400cfe4:	7860      	ldrb	r0, [r4, #1]
2400cfe6:	4632      	mov	r2, r6
2400cfe8:	9101      	str	r1, [sp, #4]
2400cfea:	f7ff fe2d 	bl	2400cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cfee:	2f01      	cmp	r7, #1
2400cff0:	9901      	ldr	r1, [sp, #4]
2400cff2:	d1f3      	bne.n	2400cfdc <move_window.part.0+0x54>
2400cff4:	e7d0      	b.n	2400cf98 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
2400cff6:	2001      	movs	r0, #1
}
2400cff8:	b003      	add	sp, #12
2400cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400cffc <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400cffc:	2300      	movs	r3, #0
{
2400cffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400d002:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400d004:	6804      	ldr	r4, [r0, #0]
2400d006:	b18c      	cbz	r4, 2400d02c <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d008:	7825      	ldrb	r5, [r4, #0]
2400d00a:	2d1f      	cmp	r5, #31
2400d00c:	d912      	bls.n	2400d034 <find_volume+0x38>
2400d00e:	2d3a      	cmp	r5, #58	; 0x3a
2400d010:	d010      	beq.n	2400d034 <find_volume+0x38>
2400d012:	46a4      	mov	ip, r4
2400d014:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400d018:	2b1f      	cmp	r3, #31
2400d01a:	d90d      	bls.n	2400d038 <find_volume+0x3c>
2400d01c:	2b3a      	cmp	r3, #58	; 0x3a
2400d01e:	d1f9      	bne.n	2400d014 <find_volume+0x18>
			i = *tp++ - '0';
2400d020:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400d022:	45a4      	cmp	ip, r4
2400d024:	d102      	bne.n	2400d02c <find_volume+0x30>
2400d026:	2d30      	cmp	r5, #48	; 0x30
2400d028:	f000 80da 	beq.w	2400d1e0 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400d02c:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400d02e:	4620      	mov	r0, r4
2400d030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d034:	462b      	mov	r3, r5
2400d036:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400d038:	2b3a      	cmp	r3, #58	; 0x3a
2400d03a:	d0f1      	beq.n	2400d020 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400d03c:	4ba6      	ldr	r3, [pc, #664]	; (2400d2d8 <find_volume+0x2dc>)
2400d03e:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d040:	2d00      	cmp	r5, #0
2400d042:	f000 80c9 	beq.w	2400d1d8 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400d046:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400d048:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400d04c:	782b      	ldrb	r3, [r5, #0]
2400d04e:	b17b      	cbz	r3, 2400d070 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400d050:	7868      	ldrb	r0, [r5, #1]
2400d052:	f7ff fdcf 	bl	2400cbf4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400d056:	07c1      	lsls	r1, r0, #31
2400d058:	d40a      	bmi.n	2400d070 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400d05a:	2c00      	cmp	r4, #0
2400d05c:	f000 80ab 	beq.w	2400d1b6 <find_volume+0x1ba>
2400d060:	f010 0404 	ands.w	r4, r0, #4
2400d064:	f000 80a7 	beq.w	2400d1b6 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400d068:	240a      	movs	r4, #10
}
2400d06a:	4620      	mov	r0, r4
2400d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400d070:	2000      	movs	r0, #0
2400d072:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400d074:	f7ff fdc8 	bl	2400cc08 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400d078:	07c2      	lsls	r2, r0, #31
2400d07a:	f100 809f 	bmi.w	2400d1bc <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400d07e:	b10c      	cbz	r4, 2400d084 <find_volume+0x88>
2400d080:	0743      	lsls	r3, r0, #29
2400d082:	d4f1      	bmi.n	2400d068 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400d084:	2100      	movs	r1, #0
2400d086:	4628      	mov	r0, r5
2400d088:	f7ff ff3c 	bl	2400cf04 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400d08c:	2802      	cmp	r0, #2
2400d08e:	d077      	beq.n	2400d180 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d090:	2804      	cmp	r0, #4
2400d092:	f000 809f 	beq.w	2400d1d4 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d096:	2801      	cmp	r0, #1
2400d098:	f200 808c 	bhi.w	2400d1b4 <find_volume+0x1b8>
	bsect = 0;
2400d09c:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400d09e:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400d0a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400d0a6:	f040 8085 	bne.w	2400d1b4 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400d0aa:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400d0ae:	b902      	cbnz	r2, 2400d0b2 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400d0b0:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d0b2:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400d0b6:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d0b8:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d0ba:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d0bc:	2901      	cmp	r1, #1
2400d0be:	d879      	bhi.n	2400d1b4 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400d0c0:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400d0c4:	b288      	uxth	r0, r1
2400d0c6:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400d0c8:	2800      	cmp	r0, #0
2400d0ca:	d073      	beq.n	2400d1b4 <find_volume+0x1b8>
2400d0cc:	1e48      	subs	r0, r1, #1
2400d0ce:	4208      	tst	r0, r1
2400d0d0:	d170      	bne.n	2400d1b4 <find_volume+0x1b8>
	rv = ptr[1];
2400d0d2:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d0d6:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d0da:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d0de:	d169      	bne.n	2400d1b4 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400d0e0:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400d0e4:	b900      	cbnz	r0, 2400d0e8 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400d0e6:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
2400d0e8:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400d0ec:	2f00      	cmp	r7, #0
2400d0ee:	d061      	beq.n	2400d1b4 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400d0f0:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400d0f4:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400d0f8:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400d0fa:	42b0      	cmp	r0, r6
2400d0fc:	d35a      	bcc.n	2400d1b4 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d0fe:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d102:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d104:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d108:	d354      	bcc.n	2400d1b4 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400d10a:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400d10e:	4288      	cmp	r0, r1
2400d110:	f200 8084 	bhi.w	2400d21c <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400d114:	f640 71f5 	movw	r1, #4085	; 0xff5
2400d118:	4288      	cmp	r0, r1
2400d11a:	f200 80a3 	bhi.w	2400d264 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d11e:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d120:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d122:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d124:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d126:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d128:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d12a:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d12c:	f1bc 0f00 	cmp.w	ip, #0
2400d130:	d040      	beq.n	2400d1b4 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d132:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400d136:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d13a:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d13c:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400d140:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d142:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d144:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
2400d148:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400d14c:	d332      	bcc.n	2400d1b4 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d152:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d154:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400d158:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400d15a:	4960      	ldr	r1, [pc, #384]	; (2400d2dc <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400d15c:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d15e:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d160:	485f      	ldr	r0, [pc, #380]	; (2400d2e0 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d162:	4a60      	ldr	r2, [pc, #384]	; (2400d2e4 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
2400d164:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d166:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d168:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d16a:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d16c:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400d16e:	800b      	strh	r3, [r1, #0]
2400d170:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d172:	f000 8086 	beq.w	2400d282 <find_volume+0x286>
2400d176:	6913      	ldr	r3, [r2, #16]
2400d178:	429d      	cmp	r5, r3
2400d17a:	d06f      	beq.n	2400d25c <find_volume+0x260>
	return FR_OK;
2400d17c:	2400      	movs	r4, #0
2400d17e:	e01a      	b.n	2400d1b6 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d180:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400d184:	b10e      	cbz	r6, 2400d18a <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400d186:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d18a:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400d18e:	b10c      	cbz	r4, 2400d194 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400d190:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d194:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400d198:	b303      	cbz	r3, 2400d1dc <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400d19a:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d19e:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400d1a2:	b10f      	cbz	r7, 2400d1a8 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400d1a4:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d1a8:	b9f6      	cbnz	r6, 2400d1e8 <find_volume+0x1ec>
2400d1aa:	bb2c      	cbnz	r4, 2400d1f8 <find_volume+0x1fc>
2400d1ac:	f1b8 0f00 	cmp.w	r8, #0
2400d1b0:	d12c      	bne.n	2400d20c <find_volume+0x210>
2400d1b2:	b93f      	cbnz	r7, 2400d1c4 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d1b4:	240d      	movs	r4, #13
}
2400d1b6:	4620      	mov	r0, r4
2400d1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400d1bc:	2403      	movs	r4, #3
}
2400d1be:	4620      	mov	r0, r4
2400d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d1c4:	4639      	mov	r1, r7
2400d1c6:	4628      	mov	r0, r5
2400d1c8:	f7ff fe9c 	bl	2400cf04 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d1cc:	2801      	cmp	r0, #1
2400d1ce:	d95b      	bls.n	2400d288 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d1d0:	2804      	cmp	r0, #4
2400d1d2:	d1ef      	bne.n	2400d1b4 <find_volume+0x1b8>
2400d1d4:	2401      	movs	r4, #1
2400d1d6:	e7ee      	b.n	2400d1b6 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d1d8:	240c      	movs	r4, #12
2400d1da:	e7ec      	b.n	2400d1b6 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d1dc:	4698      	mov	r8, r3
2400d1de:	e7de      	b.n	2400d19e <find_volume+0x1a2>
					*path = ++tt;
2400d1e0:	f10c 0301 	add.w	r3, ip, #1
2400d1e4:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400d1e6:	e729      	b.n	2400d03c <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d1e8:	4631      	mov	r1, r6
2400d1ea:	4628      	mov	r0, r5
2400d1ec:	f7ff fe8a 	bl	2400cf04 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d1f0:	2801      	cmp	r0, #1
2400d1f2:	d8da      	bhi.n	2400d1aa <find_volume+0x1ae>
2400d1f4:	4634      	mov	r4, r6
2400d1f6:	e752      	b.n	2400d09e <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d1f8:	4621      	mov	r1, r4
2400d1fa:	4628      	mov	r0, r5
2400d1fc:	f7ff fe82 	bl	2400cf04 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d200:	2801      	cmp	r0, #1
2400d202:	f67f af4c 	bls.w	2400d09e <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d206:	f1b8 0f00 	cmp.w	r8, #0
2400d20a:	d0d2      	beq.n	2400d1b2 <find_volume+0x1b6>
2400d20c:	4641      	mov	r1, r8
2400d20e:	4628      	mov	r0, r5
2400d210:	f7ff fe78 	bl	2400cf04 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d214:	2801      	cmp	r0, #1
2400d216:	d8cc      	bhi.n	2400d1b2 <find_volume+0x1b6>
2400d218:	4644      	mov	r4, r8
2400d21a:	e740      	b.n	2400d09e <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
2400d21c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d220:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d222:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d224:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d226:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d22a:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d22c:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400d22e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400d230:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d232:	d1bf      	bne.n	2400d1b4 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400d234:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400d236:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d238:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400d23c:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d23e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400d242:	d3b7      	bcc.n	2400d1b4 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d244:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d24c:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d24e:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400d250:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d252:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d256:	d019      	beq.n	2400d28c <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d258:	2003      	movs	r0, #3
2400d25a:	e77e      	b.n	2400d15a <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d25c:	2300      	movs	r3, #0
	return FR_OK;
2400d25e:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d260:	6113      	str	r3, [r2, #16]
2400d262:	e7a8      	b.n	2400d1b6 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d264:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d266:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d268:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d26a:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d26c:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d26e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d270:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d272:	f1bc 0f00 	cmp.w	ip, #0
2400d276:	d09d      	beq.n	2400d1b4 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d278:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d27a:	0049      	lsls	r1, r1, #1
2400d27c:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d27e:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
2400d280:	e760      	b.n	2400d144 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d282:	2300      	movs	r3, #0
2400d284:	6013      	str	r3, [r2, #0]
2400d286:	e776      	b.n	2400d176 <find_volume+0x17a>
2400d288:	463c      	mov	r4, r7
2400d28a:	e708      	b.n	2400d09e <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d28c:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d28e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2400d290:	4299      	cmp	r1, r3
2400d292:	d004      	beq.n	2400d29e <find_volume+0x2a2>
2400d294:	4628      	mov	r0, r5
2400d296:	f7ff fe77 	bl	2400cf88 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d29a:	2800      	cmp	r0, #0
2400d29c:	d1dc      	bne.n	2400d258 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d29e:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d2a2:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400d2a6:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d2a8:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
2400d2aa:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d2ac:	d1d4      	bne.n	2400d258 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d2ae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400d2b0:	4b0d      	ldr	r3, [pc, #52]	; (2400d2e8 <find_volume+0x2ec>)
2400d2b2:	429a      	cmp	r2, r3
2400d2b4:	d1d0      	bne.n	2400d258 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d2b6:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400d2ba:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d2be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400d2c2:	3320      	adds	r3, #32
2400d2c4:	429a      	cmp	r2, r3
2400d2c6:	d1c7      	bne.n	2400d258 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d2c8:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d2cc:	2003      	movs	r0, #3
2400d2ce:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
2400d2d2:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400d2d6:	e740      	b.n	2400d15a <find_volume+0x15e>
2400d2d8:	2001d8d0 	.word	0x2001d8d0
2400d2dc:	2001d8f4 	.word	0x2001d8f4
2400d2e0:	2001d8f8 	.word	0x2001d8f8
2400d2e4:	2001d8d4 	.word	0x2001d8d4
2400d2e8:	41615252 	.word	0x41615252

2400d2ec <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
2400d2f0:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d2f2:	4604      	mov	r4, r0
2400d2f4:	460d      	mov	r5, r1
2400d2f6:	4616      	mov	r6, r2
		switch (fs->fs_type) {
2400d2f8:	2b02      	cmp	r3, #2
2400d2fa:	d006      	beq.n	2400d30a <put_fat.part.0+0x1e>
2400d2fc:	2b03      	cmp	r3, #3
2400d2fe:	d052      	beq.n	2400d3a6 <put_fat.part.0+0xba>
2400d300:	2b01      	cmp	r3, #1
2400d302:	d01b      	beq.n	2400d33c <put_fat.part.0+0x50>
2400d304:	2002      	movs	r0, #2
}
2400d306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d30a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d30c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d30e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d312:	4299      	cmp	r1, r3
2400d314:	d003      	beq.n	2400d31e <put_fat.part.0+0x32>
2400d316:	f7ff fe37 	bl	2400cf88 <move_window.part.0>
			if (res != FR_OK) break;
2400d31a:	2800      	cmp	r0, #0
2400d31c:	d1f3      	bne.n	2400d306 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d31e:	006d      	lsls	r5, r5, #1
2400d320:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400d324:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
2400d328:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d32a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400d32e:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d330:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
2400d332:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
2400d334:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
2400d336:	70e3      	strb	r3, [r4, #3]
}
2400d338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
2400d33c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d340:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d342:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d344:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d348:	4299      	cmp	r1, r3
2400d34a:	d003      	beq.n	2400d354 <put_fat.part.0+0x68>
2400d34c:	f7ff fe1c 	bl	2400cf88 <move_window.part.0>
			if (res != FR_OK) break;
2400d350:	2800      	cmp	r0, #0
2400d352:	d1d8      	bne.n	2400d306 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d354:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400d356:	f107 0801 	add.w	r8, r7, #1
2400d35a:	f104 0934 	add.w	r9, r4, #52	; 0x34
2400d35e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d362:	d542      	bpl.n	2400d3ea <put_fat.part.0+0xfe>
2400d364:	f819 3007 	ldrb.w	r3, [r9, r7]
2400d368:	f003 030f 	and.w	r3, r3, #15
2400d36c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
2400d370:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
2400d374:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d376:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d378:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d37a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d37e:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400d380:	4299      	cmp	r1, r3
2400d382:	d004      	beq.n	2400d38e <put_fat.part.0+0xa2>
2400d384:	4620      	mov	r0, r4
2400d386:	f7ff fdff 	bl	2400cf88 <move_window.part.0>
			if (res != FR_OK) break;
2400d38a:	2800      	cmp	r0, #0
2400d38c:	d1bb      	bne.n	2400d306 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d38e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d392:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
2400d396:	44c8      	add	r8, r9
			fs->wflag = 1;
2400d398:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d39a:	f888 2000 	strb.w	r2, [r8]
			break;
2400d39e:	2000      	movs	r0, #0
			fs->wflag = 1;
2400d3a0:	70e3      	strb	r3, [r4, #3]
}
2400d3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d3a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d3aa:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3ae:	4299      	cmp	r1, r3
2400d3b0:	d003      	beq.n	2400d3ba <put_fat.part.0+0xce>
2400d3b2:	f7ff fde9 	bl	2400cf88 <move_window.part.0>
			if (res != FR_OK) break;
2400d3b6:	2800      	cmp	r0, #0
2400d3b8:	d1a5      	bne.n	2400d306 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d3ba:	00ad      	lsls	r5, r5, #2
2400d3bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400d3c0:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
2400d3c4:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d3c8:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d3ca:	1941      	adds	r1, r0, r5
2400d3cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d3d0:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
2400d3d2:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400d3d4:	5542      	strb	r2, [r0, r5]
2400d3d6:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400d3d8:	708b      	strb	r3, [r1, #2]
2400d3da:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
2400d3dc:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400d3de:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
2400d3e0:	70ca      	strb	r2, [r1, #3]
			break;
2400d3e2:	2000      	movs	r0, #0
			fs->wflag = 1;
2400d3e4:	70e3      	strb	r3, [r4, #3]
}
2400d3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d3ea:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
2400d3ee:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d3f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d3f2:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d3f4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400d3fa:	4299      	cmp	r1, r3
2400d3fc:	d005      	beq.n	2400d40a <put_fat.part.0+0x11e>
2400d3fe:	4620      	mov	r0, r4
2400d400:	f7ff fdc2 	bl	2400cf88 <move_window.part.0>
			if (res != FR_OK) break;
2400d404:	2800      	cmp	r0, #0
2400d406:	f47f af7e 	bne.w	2400d306 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d40a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d40e:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
2400d412:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d414:	f898 3000 	ldrb.w	r3, [r8]
2400d418:	f023 060f 	bic.w	r6, r3, #15
2400d41c:	4332      	orrs	r2, r6
2400d41e:	e7bb      	b.n	2400d398 <put_fat.part.0+0xac>

2400d420 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d420:	2901      	cmp	r1, #1
2400d422:	d90e      	bls.n	2400d442 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d426:	6983      	ldr	r3, [r0, #24]
2400d428:	460c      	mov	r4, r1
2400d42a:	4605      	mov	r5, r0
2400d42c:	4299      	cmp	r1, r3
2400d42e:	d206      	bcs.n	2400d43e <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400d430:	7803      	ldrb	r3, [r0, #0]
2400d432:	2b02      	cmp	r3, #2
2400d434:	d03e      	beq.n	2400d4b4 <get_fat.isra.0+0x94>
2400d436:	2b03      	cmp	r3, #3
2400d438:	d02b      	beq.n	2400d492 <get_fat.isra.0+0x72>
2400d43a:	2b01      	cmp	r3, #1
2400d43c:	d003      	beq.n	2400d446 <get_fat.isra.0+0x26>
2400d43e:	2001      	movs	r0, #1
}
2400d440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400d442:	2001      	movs	r0, #1
}
2400d444:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
2400d446:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d44a:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d44c:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d44e:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d452:	4291      	cmp	r1, r2
2400d454:	d004      	beq.n	2400d460 <get_fat.isra.0+0x40>
2400d456:	f7ff fd97 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d45a:	bba0      	cbnz	r0, 2400d4c6 <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d45c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d45e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400d460:	1c77      	adds	r7, r6, #1
2400d462:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d466:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400d46a:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d46c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400d46e:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d472:	d003      	beq.n	2400d47c <get_fat.isra.0+0x5c>
2400d474:	4628      	mov	r0, r5
2400d476:	f7ff fd87 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d47a:	bb20      	cbnz	r0, 2400d4c6 <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
2400d47c:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d480:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400d482:	443d      	add	r5, r7
2400d484:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
2400d488:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d48c:	d524      	bpl.n	2400d4d8 <get_fat.isra.0+0xb8>
2400d48e:	0900      	lsrs	r0, r0, #4
}
2400d490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d492:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d494:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d496:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d49a:	4299      	cmp	r1, r3
2400d49c:	d002      	beq.n	2400d4a4 <get_fat.isra.0+0x84>
2400d49e:	f7ff fd73 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d4a2:	b980      	cbnz	r0, 2400d4c6 <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d4a4:	00a4      	lsls	r4, r4, #2
2400d4a6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d4aa:	4425      	add	r5, r4
2400d4ac:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d4ae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400d4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d4b4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d4b8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4bc:	4299      	cmp	r1, r3
2400d4be:	d005      	beq.n	2400d4cc <get_fat.isra.0+0xac>
2400d4c0:	f7ff fd62 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d4c4:	b110      	cbz	r0, 2400d4cc <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400d4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400d4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400d4cc:	0064      	lsls	r4, r4, #1
2400d4ce:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400d4d2:	4425      	add	r5, r4
2400d4d4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
2400d4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d4d8:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
2400d4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400d4de:	bf00      	nop

2400d4e0 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
2400d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d4e4:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d4e6:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d4e8:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d4ea:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400d4ee:	d22d      	bcs.n	2400d54c <dir_next.constprop.0+0x6c>
2400d4f0:	b363      	cbz	r3, 2400d54c <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d4f2:	f3c5 0708 	ubfx	r7, r5, #0, #9
2400d4f6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d4f8:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d4fa:	b137      	cbz	r7, 2400d50a <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d4fc:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
2400d4fe:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400d500:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d502:	443e      	add	r6, r7
2400d504:	6226      	str	r6, [r4, #32]
}
2400d506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
2400d50a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400d50c:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400d50e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400d510:	b1f9      	cbz	r1, 2400d552 <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400d512:	8973      	ldrh	r3, [r6, #10]
2400d514:	3b01      	subs	r3, #1
2400d516:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
2400d51a:	d1ef      	bne.n	2400d4fc <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400d51c:	4630      	mov	r0, r6
2400d51e:	f7ff ff7f 	bl	2400d420 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d522:	2801      	cmp	r0, #1
2400d524:	d91d      	bls.n	2400d562 <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d526:	1c43      	adds	r3, r0, #1
2400d528:	d01d      	beq.n	2400d566 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400d52a:	69b3      	ldr	r3, [r6, #24]
2400d52c:	4298      	cmp	r0, r3
2400d52e:	d214      	bcs.n	2400d55a <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
2400d530:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400d532:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d534:	69b3      	ldr	r3, [r6, #24]
2400d536:	3b02      	subs	r3, #2
2400d538:	4298      	cmp	r0, r3
2400d53a:	d204      	bcs.n	2400d546 <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
2400d53c:	f8b6 800a 	ldrh.w	r8, [r6, #10]
2400d540:	6af3      	ldr	r3, [r6, #44]	; 0x2c
2400d542:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
2400d546:	f8c4 801c 	str.w	r8, [r4, #28]
2400d54a:	e7d7      	b.n	2400d4fc <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d54c:	2004      	movs	r0, #4
}
2400d54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400d552:	8933      	ldrh	r3, [r6, #8]
2400d554:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400d558:	d8d0      	bhi.n	2400d4fc <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
2400d55a:	2300      	movs	r3, #0
2400d55c:	2004      	movs	r0, #4
2400d55e:	61e3      	str	r3, [r4, #28]
2400d560:	e7d1      	b.n	2400d506 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d562:	2002      	movs	r0, #2
2400d564:	e7cf      	b.n	2400d506 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d566:	2001      	movs	r0, #1
2400d568:	e7cd      	b.n	2400d506 <dir_next.constprop.0+0x26>
2400d56a:	bf00      	nop

2400d56c <dir_read.constprop.0>:
FRESULT dir_read (
2400d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400d570:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400d572:	b083      	sub	sp, #12
2400d574:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d576:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
2400d578:	2e00      	cmp	r6, #0
2400d57a:	d05e      	beq.n	2400d63a <dir_read.constprop.0+0xce>
	BYTE ord = 0xFF, sum = 0xFF;
2400d57c:	f04f 0aff 	mov.w	sl, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d580:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400d584:	46d0      	mov	r8, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d586:	6b3d      	ldr	r5, [r7, #48]	; 0x30
2400d588:	42b5      	cmp	r5, r6
2400d58a:	d014      	beq.n	2400d5b6 <dir_read.constprop.0+0x4a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d58c:	78fb      	ldrb	r3, [r7, #3]
2400d58e:	2b00      	cmp	r3, #0
2400d590:	f040 80cb 	bne.w	2400d72a <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d594:	2301      	movs	r3, #1
2400d596:	4632      	mov	r2, r6
2400d598:	4649      	mov	r1, r9
2400d59a:	7878      	ldrb	r0, [r7, #1]
2400d59c:	f7ff fb46 	bl	2400cc2c <disk_read>
2400d5a0:	b140      	cbz	r0, 2400d5b4 <dir_read.constprop.0+0x48>
			fs->winsect = sector;
2400d5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400d5a6:	2001      	movs	r0, #1
			fs->winsect = sector;
2400d5a8:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400d5aa:	2300      	movs	r3, #0
2400d5ac:	61e3      	str	r3, [r4, #28]
}
2400d5ae:	b003      	add	sp, #12
2400d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400d5b4:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400d5b6:	6a21      	ldr	r1, [r4, #32]
2400d5b8:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400d5ba:	2a00      	cmp	r2, #0
2400d5bc:	d03d      	beq.n	2400d63a <dir_read.constprop.0+0xce>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d5be:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d5c0:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d5c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400d5c6:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d5c8:	d005      	beq.n	2400d5d6 <dir_read.constprop.0+0x6a>
2400d5ca:	2a2e      	cmp	r2, #46	; 0x2e
2400d5cc:	d003      	beq.n	2400d5d6 <dir_read.constprop.0+0x6a>
2400d5ce:	f023 0020 	bic.w	r0, r3, #32
2400d5d2:	2808      	cmp	r0, #8
2400d5d4:	d138      	bne.n	2400d648 <dir_read.constprop.0+0xdc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d5d6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d5da:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d5dc:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d5de:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d5e0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400d5e4:	d229      	bcs.n	2400d63a <dir_read.constprop.0+0xce>
2400d5e6:	b346      	cbz	r6, 2400d63a <dir_read.constprop.0+0xce>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d5e8:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400d5ec:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d5ee:	bb32      	cbnz	r2, 2400d63e <dir_read.constprop.0+0xd2>
		dp->sect++;				/* Next sector */
2400d5f0:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400d5f2:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400d5f4:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400d5f6:	b961      	cbnz	r1, 2400d612 <dir_read.constprop.0+0xa6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400d5f8:	891a      	ldrh	r2, [r3, #8]
2400d5fa:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400d5fe:	d91c      	bls.n	2400d63a <dir_read.constprop.0+0xce>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d600:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400d602:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d604:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400d606:	2e00      	cmp	r6, #0
2400d608:	d1bd      	bne.n	2400d586 <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400d60a:	2000      	movs	r0, #0
}
2400d60c:	b003      	add	sp, #12
2400d60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400d612:	895a      	ldrh	r2, [r3, #10]
2400d614:	3a01      	subs	r2, #1
2400d616:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
2400d61a:	d1f1      	bne.n	2400d600 <dir_read.constprop.0+0x94>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400d61c:	4618      	mov	r0, r3
2400d61e:	9301      	str	r3, [sp, #4]
2400d620:	f7ff fefe 	bl	2400d420 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d624:	2801      	cmp	r0, #1
2400d626:	f240 80b4 	bls.w	2400d792 <dir_read.constprop.0+0x226>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d62a:	1c43      	adds	r3, r0, #1
2400d62c:	f000 8084 	beq.w	2400d738 <dir_read.constprop.0+0x1cc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400d630:	9b01      	ldr	r3, [sp, #4]
2400d632:	699a      	ldr	r2, [r3, #24]
2400d634:	4290      	cmp	r0, r2
2400d636:	f0c0 80a0 	bcc.w	2400d77a <dir_read.constprop.0+0x20e>
	FRESULT res = FR_NO_FILE;
2400d63a:	2004      	movs	r0, #4
2400d63c:	e7b5      	b.n	2400d5aa <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d63e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400d640:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d642:	441a      	add	r2, r3
2400d644:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
2400d646:	e79e      	b.n	2400d586 <dir_read.constprop.0+0x1a>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400d648:	2b0f      	cmp	r3, #15
2400d64a:	f040 80aa 	bne.w	2400d7a2 <dir_read.constprop.0+0x236>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400d64e:	0650      	lsls	r0, r2, #25
2400d650:	d574      	bpl.n	2400d73c <dir_read.constprop.0+0x1d0>
						dp->blk_ofs = dp->dptr;
2400d652:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400d654:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400d658:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400d65c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d65e:	7b4b      	ldrb	r3, [r1, #13]
2400d660:	4553      	cmp	r3, sl
2400d662:	d1b8      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400d664:	8b4b      	ldrh	r3, [r1, #26]
2400d666:	2b00      	cmp	r3, #0
2400d668:	d1b5      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400d66a:	780b      	ldrb	r3, [r1, #0]
2400d66c:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400d670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d674:	3b01      	subs	r3, #1
2400d676:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400d67a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d67e:	2bfe      	cmp	r3, #254	; 0xfe
2400d680:	d8a9      	bhi.n	2400d5d6 <dir_read.constprop.0+0x6a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d682:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d684:	1c5a      	adds	r2, r3, #1
2400d686:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400d68a:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400d68e:	2800      	cmp	r0, #0
2400d690:	f040 8090 	bne.w	2400d7b4 <dir_read.constprop.0+0x248>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d694:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d698:	429e      	cmp	r6, r3
2400d69a:	d19c      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d69c:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6a4:	459e      	cmp	lr, r3
2400d6a6:	d196      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6a8:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6b0:	459c      	cmp	ip, r3
2400d6b2:	d190      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6b4:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6bc:	429e      	cmp	r6, r3
2400d6be:	d18a      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6c0:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6c8:	459c      	cmp	ip, r3
2400d6ca:	d184      	bne.n	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6cc:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6d4:	459e      	cmp	lr, r3
2400d6d6:	f47f af7e 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6da:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6e0:	429e      	cmp	r6, r3
2400d6e2:	f47f af78 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6e6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6ee:	459c      	cmp	ip, r3
2400d6f0:	f47f af71 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6f4:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6fa:	429e      	cmp	r6, r3
2400d6fc:	f47f af6b 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d700:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d704:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d708:	459c      	cmp	ip, r3
2400d70a:	f47f af64 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d70e:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d710:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d714:	429e      	cmp	r6, r3
2400d716:	f47f af5e 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d71a:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d71e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d722:	459c      	cmp	ip, r3
2400d724:	f000 80ca 	beq.w	2400d8bc <dir_read.constprop.0+0x350>
2400d728:	e755      	b.n	2400d5d6 <dir_read.constprop.0+0x6a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d72a:	2301      	movs	r3, #1
2400d72c:	462a      	mov	r2, r5
2400d72e:	4649      	mov	r1, r9
2400d730:	7878      	ldrb	r0, [r7, #1]
2400d732:	f7ff fa89 	bl	2400cc48 <disk_write>
2400d736:	b128      	cbz	r0, 2400d744 <dir_read.constprop.0+0x1d8>
	FRESULT res = FR_NO_FILE;
2400d738:	2001      	movs	r0, #1
2400d73a:	e736      	b.n	2400d5aa <dir_read.constprop.0+0x3e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d73c:	4542      	cmp	r2, r8
2400d73e:	f47f af4a 	bne.w	2400d5d6 <dir_read.constprop.0+0x6a>
2400d742:	e78c      	b.n	2400d65e <dir_read.constprop.0+0xf2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400d746:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d748:	1aea      	subs	r2, r5, r3
2400d74a:	69fb      	ldr	r3, [r7, #28]
2400d74c:	429a      	cmp	r2, r3
2400d74e:	f4bf af21 	bcs.w	2400d594 <dir_read.constprop.0+0x28>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d752:	f897 b002 	ldrb.w	fp, [r7, #2]
2400d756:	f1bb 0f01 	cmp.w	fp, #1
2400d75a:	d801      	bhi.n	2400d760 <dir_read.constprop.0+0x1f4>
2400d75c:	e71a      	b.n	2400d594 <dir_read.constprop.0+0x28>
					wsect += fs->fsize;
2400d75e:	69fb      	ldr	r3, [r7, #28]
2400d760:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d762:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400d766:	2301      	movs	r3, #1
2400d768:	4649      	mov	r1, r9
2400d76a:	462a      	mov	r2, r5
2400d76c:	7878      	ldrb	r0, [r7, #1]
2400d76e:	f7ff fa6b 	bl	2400cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d772:	f1bb 0f01 	cmp.w	fp, #1
2400d776:	d1f2      	bne.n	2400d75e <dir_read.constprop.0+0x1f2>
2400d778:	e70c      	b.n	2400d594 <dir_read.constprop.0+0x28>
				dp->clust = clst;		/* Initialize data for new cluster */
2400d77a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400d77c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d77e:	699a      	ldr	r2, [r3, #24]
2400d780:	3a02      	subs	r2, #2
2400d782:	4290      	cmp	r0, r2
2400d784:	d207      	bcs.n	2400d796 <dir_read.constprop.0+0x22a>
	return clst * fs->csize + fs->database;
2400d786:	895a      	ldrh	r2, [r3, #10]
2400d788:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400d78a:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400d78e:	61e6      	str	r6, [r4, #28]
2400d790:	e736      	b.n	2400d600 <dir_read.constprop.0+0x94>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d792:	2002      	movs	r0, #2
2400d794:	e709      	b.n	2400d5aa <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d796:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400d798:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400d79c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d79e:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400d7a0:	e733      	b.n	2400d60a <dir_read.constprop.0+0x9e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400d7a2:	f1b8 0f00 	cmp.w	r8, #0
2400d7a6:	f000 8096 	beq.w	2400d8d6 <dir_read.constprop.0+0x36a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400d7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d7ae:	2000      	movs	r0, #0
2400d7b0:	6323      	str	r3, [r4, #48]	; 0x30
2400d7b2:	e6fc      	b.n	2400d5ae <dir_read.constprop.0+0x42>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d7b4:	2aff      	cmp	r2, #255	; 0xff
2400d7b6:	f000 80d8 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d7ba:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400d7be:	0050      	lsls	r0, r2, #1
2400d7c0:	f8b1 e005 	ldrh.w	lr, [r1, #5]
2400d7c4:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400d7c6:	2e00      	cmp	r6, #0
2400d7c8:	f43f af6a 	beq.w	2400d6a0 <dir_read.constprop.0+0x134>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d7cc:	2aff      	cmp	r2, #255	; 0xff
2400d7ce:	f000 80cc 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d7d2:	4428      	add	r0, r5
2400d7d4:	1cda      	adds	r2, r3, #3
2400d7d6:	f8a0 e002 	strh.w	lr, [r0, #2]
2400d7da:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
2400d7de:	f1be 0f00 	cmp.w	lr, #0
2400d7e2:	f43f af63 	beq.w	2400d6ac <dir_read.constprop.0+0x140>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d7e6:	2aff      	cmp	r2, #255	; 0xff
2400d7e8:	f000 80bf 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d7ec:	f8a0 c004 	strh.w	ip, [r0, #4]
2400d7f0:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400d7f2:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400d7f6:	f1bc 0f00 	cmp.w	ip, #0
2400d7fa:	f43f af5d 	beq.w	2400d6b8 <dir_read.constprop.0+0x14c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d7fe:	2aff      	cmp	r2, #255	; 0xff
2400d800:	f000 80b3 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d804:	80c6      	strh	r6, [r0, #6]
2400d806:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400d808:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
2400d80c:	2e00      	cmp	r6, #0
2400d80e:	f43f af59 	beq.w	2400d6c4 <dir_read.constprop.0+0x158>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d812:	2aff      	cmp	r2, #255	; 0xff
2400d814:	f000 80a9 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d818:	f8a0 c008 	strh.w	ip, [r0, #8]
2400d81c:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400d81e:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
2400d822:	f1bc 0f00 	cmp.w	ip, #0
2400d826:	f43f af53 	beq.w	2400d6d0 <dir_read.constprop.0+0x164>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d82a:	2aff      	cmp	r2, #255	; 0xff
2400d82c:	f000 809d 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d830:	f8a0 e00a 	strh.w	lr, [r0, #10]
2400d834:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400d836:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400d838:	f1be 0f00 	cmp.w	lr, #0
2400d83c:	f43f af4e 	beq.w	2400d6dc <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d840:	2aff      	cmp	r2, #255	; 0xff
2400d842:	f000 8092 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d846:	8186      	strh	r6, [r0, #12]
2400d848:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400d84c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
2400d850:	2e00      	cmp	r6, #0
2400d852:	f43f af4a 	beq.w	2400d6ea <dir_read.constprop.0+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d856:	2aff      	cmp	r2, #255	; 0xff
2400d858:	f000 8087 	beq.w	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d85c:	f8a0 c00e 	strh.w	ip, [r0, #14]
2400d860:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400d864:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400d866:	f1bc 0f00 	cmp.w	ip, #0
2400d86a:	f43f af44 	beq.w	2400d6f6 <dir_read.constprop.0+0x18a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d86e:	2aff      	cmp	r2, #255	; 0xff
2400d870:	d07b      	beq.n	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d872:	8206      	strh	r6, [r0, #16]
2400d874:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400d878:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
2400d87c:	2e00      	cmp	r6, #0
2400d87e:	f43f af41 	beq.w	2400d704 <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d882:	2aff      	cmp	r2, #255	; 0xff
2400d884:	f43f aea7 	beq.w	2400d5d6 <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d888:	f8a0 c012 	strh.w	ip, [r0, #18]
2400d88c:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400d890:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400d892:	f1bc 0f00 	cmp.w	ip, #0
2400d896:	f43f af3b 	beq.w	2400d710 <dir_read.constprop.0+0x1a4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d89a:	2aff      	cmp	r2, #255	; 0xff
2400d89c:	d065      	beq.n	2400d96a <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d89e:	8286      	strh	r6, [r0, #20]
2400d8a0:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400d8a4:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
2400d8a8:	2e00      	cmp	r6, #0
2400d8aa:	f43f af38 	beq.w	2400d71e <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d8ae:	2aff      	cmp	r2, #255	; 0xff
2400d8b0:	f43f ae91 	beq.w	2400d5d6 <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d8b4:	f103 020d 	add.w	r2, r3, #13
2400d8b8:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400d8bc:	780b      	ldrb	r3, [r1, #0]
2400d8be:	0659      	lsls	r1, r3, #25
2400d8c0:	d504      	bpl.n	2400d8cc <dir_read.constprop.0+0x360>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400d8c2:	2aff      	cmp	r2, #255	; 0xff
2400d8c4:	d051      	beq.n	2400d96a <dir_read.constprop.0+0x3fe>
		lfnbuf[i] = 0;
2400d8c6:	2300      	movs	r3, #0
2400d8c8:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d8cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
2400d8d0:	fa5f f888 	uxtb.w	r8, r8
2400d8d4:	e681      	b.n	2400d5da <dir_read.constprop.0+0x6e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400d8d6:	780a      	ldrb	r2, [r1, #0]
2400d8d8:	01d3      	lsls	r3, r2, #7
2400d8da:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400d8de:	784a      	ldrb	r2, [r1, #1]
2400d8e0:	441a      	add	r2, r3
2400d8e2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d8e6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d8ea:	788a      	ldrb	r2, [r1, #2]
2400d8ec:	fa52 f283 	uxtab	r2, r2, r3
2400d8f0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d8f4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d8f8:	78ca      	ldrb	r2, [r1, #3]
2400d8fa:	fa52 f283 	uxtab	r2, r2, r3
2400d8fe:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d902:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d906:	790a      	ldrb	r2, [r1, #4]
2400d908:	fa52 f283 	uxtab	r2, r2, r3
2400d90c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d910:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d914:	794a      	ldrb	r2, [r1, #5]
2400d916:	fa52 f283 	uxtab	r2, r2, r3
2400d91a:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d91e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d922:	798a      	ldrb	r2, [r1, #6]
2400d924:	fa52 f283 	uxtab	r2, r2, r3
2400d928:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d92c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d930:	79ca      	ldrb	r2, [r1, #7]
2400d932:	fa52 f283 	uxtab	r2, r2, r3
2400d936:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d93a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d93e:	7a0a      	ldrb	r2, [r1, #8]
2400d940:	fa52 f283 	uxtab	r2, r2, r3
2400d944:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d948:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d94c:	7a4a      	ldrb	r2, [r1, #9]
2400d94e:	7a89      	ldrb	r1, [r1, #10]
2400d950:	fa52 f283 	uxtab	r2, r2, r3
2400d954:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d958:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d95c:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400d960:	b2db      	uxtb	r3, r3
2400d962:	459a      	cmp	sl, r3
2400d964:	f47f af21 	bne.w	2400d7aa <dir_read.constprop.0+0x23e>
2400d968:	e64f      	b.n	2400d60a <dir_read.constprop.0+0x9e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d96a:	4690      	mov	r8, r2
2400d96c:	e635      	b.n	2400d5da <dir_read.constprop.0+0x6e>
2400d96e:	bf00      	nop

2400d970 <sync_fs>:
{
2400d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d972:	78c3      	ldrb	r3, [r0, #3]
{
2400d974:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d976:	b95b      	cbnz	r3, 2400d990 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400d978:	7823      	ldrb	r3, [r4, #0]
2400d97a:	2b03      	cmp	r3, #3
2400d97c:	d029      	beq.n	2400d9d2 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400d97e:	2200      	movs	r2, #0
2400d980:	7860      	ldrb	r0, [r4, #1]
2400d982:	4611      	mov	r1, r2
2400d984:	f7ff f96e 	bl	2400cc64 <disk_ioctl>
			res = FR_DISK_ERR;
2400d988:	3800      	subs	r0, #0
2400d98a:	bf18      	it	ne
2400d98c:	2001      	movne	r0, #1
}
2400d98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400d990:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d992:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400d996:	2301      	movs	r3, #1
2400d998:	7840      	ldrb	r0, [r0, #1]
2400d99a:	462a      	mov	r2, r5
2400d99c:	4639      	mov	r1, r7
2400d99e:	f7ff f953 	bl	2400cc48 <disk_write>
2400d9a2:	2800      	cmp	r0, #0
2400d9a4:	d150      	bne.n	2400da48 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d9a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400d9a8:	69e3      	ldr	r3, [r4, #28]
2400d9aa:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400d9ac:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d9ae:	429a      	cmp	r2, r3
2400d9b0:	d2e2      	bcs.n	2400d978 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d9b2:	78a6      	ldrb	r6, [r4, #2]
2400d9b4:	2e01      	cmp	r6, #1
2400d9b6:	d801      	bhi.n	2400d9bc <sync_fs+0x4c>
2400d9b8:	e7de      	b.n	2400d978 <sync_fs+0x8>
					wsect += fs->fsize;
2400d9ba:	69e3      	ldr	r3, [r4, #28]
2400d9bc:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d9be:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400d9c0:	2301      	movs	r3, #1
2400d9c2:	4639      	mov	r1, r7
2400d9c4:	462a      	mov	r2, r5
2400d9c6:	7860      	ldrb	r0, [r4, #1]
2400d9c8:	f7ff f93e 	bl	2400cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d9cc:	2e01      	cmp	r6, #1
2400d9ce:	d1f4      	bne.n	2400d9ba <sync_fs+0x4a>
2400d9d0:	e7d2      	b.n	2400d978 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400d9d2:	7925      	ldrb	r5, [r4, #4]
2400d9d4:	2d01      	cmp	r5, #1
2400d9d6:	d1d2      	bne.n	2400d97e <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400d9d8:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400d9dc:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d9e0:	2100      	movs	r1, #0
2400d9e2:	4630      	mov	r0, r6
2400d9e4:	f007 fd48 	bl	24015478 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400d9e8:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
2400d9ec:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400d9ee:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400d9f0:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400d9f4:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2400d9f6:	4815      	ldr	r0, [pc, #84]	; (2400da4c <sync_fs+0xdc>)
2400d9f8:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
2400d9fc:	6360      	str	r0, [r4, #52]	; 0x34
2400d9fe:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
2400da02:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400da06:	3020      	adds	r0, #32
2400da08:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
2400da0c:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400da0e:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
2400da12:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400da14:	0e12      	lsrs	r2, r2, #24
2400da16:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
2400da1a:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
2400da1c:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
2400da20:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
2400da22:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400da24:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
2400da28:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400da2a:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
2400da2e:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400da30:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
2400da32:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400da34:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
2400da38:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400da3c:	7860      	ldrb	r0, [r4, #1]
2400da3e:	f7ff f903 	bl	2400cc48 <disk_write>
			fs->fsi_flag = 0;
2400da42:	2300      	movs	r3, #0
2400da44:	7123      	strb	r3, [r4, #4]
2400da46:	e79a      	b.n	2400d97e <sync_fs+0xe>
			res = FR_DISK_ERR;
2400da48:	2001      	movs	r0, #1
}
2400da4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400da4c:	41615252 	.word	0x41615252

2400da50 <create_chain>:
{
2400da50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400da54:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
2400da56:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
2400da58:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
2400da5c:	2900      	cmp	r1, #0
2400da5e:	f040 80b4 	bne.w	2400dbca <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400da62:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400da66:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400da6a:	b9ce      	cbnz	r6, 2400daa0 <create_chain+0x50>
2400da6c:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
2400da6e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400da70:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400da72:	429c      	cmp	r4, r3
2400da74:	d318      	bcc.n	2400daa8 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
2400da76:	2e01      	cmp	r6, #1
2400da78:	f000 80a3 	beq.w	2400dbc2 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400da7c:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
2400da80:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400da82:	69ab      	ldr	r3, [r5, #24]
2400da84:	42a3      	cmp	r3, r4
2400da86:	d907      	bls.n	2400da98 <create_chain+0x48>
		switch (fs->fs_type) {
2400da88:	782b      	ldrb	r3, [r5, #0]
2400da8a:	2b02      	cmp	r3, #2
2400da8c:	f000 8088 	beq.w	2400dba0 <create_chain+0x150>
2400da90:	2b03      	cmp	r3, #3
2400da92:	d044      	beq.n	2400db1e <create_chain+0xce>
2400da94:	2b01      	cmp	r3, #1
2400da96:	d00c      	beq.n	2400dab2 <create_chain+0x62>
2400da98:	2401      	movs	r4, #1
}
2400da9a:	4620      	mov	r0, r4
2400da9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400daa0:	42b3      	cmp	r3, r6
2400daa2:	bf98      	it	ls
2400daa4:	2601      	movls	r6, #1
2400daa6:	e7e2      	b.n	2400da6e <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400daa8:	2c01      	cmp	r4, #1
2400daaa:	f8da 5000 	ldr.w	r5, [sl]
2400daae:	d9f3      	bls.n	2400da98 <create_chain+0x48>
2400dab0:	e7e7      	b.n	2400da82 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
2400dab2:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dab8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400daba:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dabe:	4291      	cmp	r1, r2
2400dac0:	d005      	beq.n	2400dace <create_chain+0x7e>
2400dac2:	4628      	mov	r0, r5
2400dac4:	f7ff fa60 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dac8:	bb20      	cbnz	r0, 2400db14 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400daca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dacc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400dace:	f107 0b01 	add.w	fp, r7, #1
2400dad2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dad6:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400dada:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dadc:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400dade:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dae2:	d003      	beq.n	2400daec <create_chain+0x9c>
2400dae4:	4628      	mov	r0, r5
2400dae6:	f7ff fa4f 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400daea:	b998      	cbnz	r0, 2400db14 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400daec:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400daf0:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400daf2:	445d      	add	r5, fp
2400daf4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
2400daf8:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400dafc:	d575      	bpl.n	2400dbea <create_chain+0x19a>
2400dafe:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
2400db00:	b30b      	cbz	r3, 2400db46 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400db02:	2b01      	cmp	r3, #1
2400db04:	d0c8      	beq.n	2400da98 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
2400db06:	42a6      	cmp	r6, r4
2400db08:	d05b      	beq.n	2400dbc2 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400db0a:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400db0e:	e7af      	b.n	2400da70 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400db10:	2801      	cmp	r0, #1
2400db12:	d1c1      	bne.n	2400da98 <create_chain+0x48>
2400db14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400db18:	4620      	mov	r0, r4
2400db1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400db1e:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400db22:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db26:	4299      	cmp	r1, r3
2400db28:	d004      	beq.n	2400db34 <create_chain+0xe4>
2400db2a:	4628      	mov	r0, r5
2400db2c:	f7ff fa2c 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400db30:	2800      	cmp	r0, #0
2400db32:	d1ef      	bne.n	2400db14 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400db34:	00a3      	lsls	r3, r4, #2
2400db36:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400db3a:	441d      	add	r5, r3
2400db3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400db3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400db42:	2b00      	cmp	r3, #0
2400db44:	d1dd      	bne.n	2400db02 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400db46:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400db4a:	42a3      	cmp	r3, r4
2400db4c:	d9a4      	bls.n	2400da98 <create_chain+0x48>
2400db4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400db52:	4621      	mov	r1, r4
2400db54:	4648      	mov	r0, r9
2400db56:	f7ff fbc9 	bl	2400d2ec <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400db5a:	b970      	cbnz	r0, 2400db7a <create_chain+0x12a>
2400db5c:	f1b8 0f00 	cmp.w	r8, #0
2400db60:	d00b      	beq.n	2400db7a <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400db62:	f1b8 0f01 	cmp.w	r8, #1
2400db66:	d097      	beq.n	2400da98 <create_chain+0x48>
2400db68:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400db6c:	4598      	cmp	r8, r3
2400db6e:	d293      	bcs.n	2400da98 <create_chain+0x48>
2400db70:	4622      	mov	r2, r4
2400db72:	4641      	mov	r1, r8
2400db74:	4648      	mov	r0, r9
2400db76:	f7ff fbb9 	bl	2400d2ec <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400db7a:	2800      	cmp	r0, #0
2400db7c:	d1c8      	bne.n	2400db10 <create_chain+0xc0>
		fs->last_clst = ncl;
2400db7e:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400db82:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
2400db86:	3b02      	subs	r3, #2
2400db88:	429a      	cmp	r2, r3
2400db8a:	d802      	bhi.n	2400db92 <create_chain+0x142>
2400db8c:	3a01      	subs	r2, #1
2400db8e:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
2400db92:	f899 3004 	ldrb.w	r3, [r9, #4]
2400db96:	f043 0301 	orr.w	r3, r3, #1
2400db9a:	f889 3004 	strb.w	r3, [r9, #4]
2400db9e:	e77c      	b.n	2400da9a <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dba0:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dba2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dba4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dba8:	4299      	cmp	r1, r3
2400dbaa:	d004      	beq.n	2400dbb6 <create_chain+0x166>
2400dbac:	4628      	mov	r0, r5
2400dbae:	f7ff f9eb 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dbb2:	2800      	cmp	r0, #0
2400dbb4:	d1ae      	bne.n	2400db14 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400dbb6:	0063      	lsls	r3, r4, #1
2400dbb8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400dbbc:	441d      	add	r5, r3
2400dbbe:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
2400dbc0:	e79e      	b.n	2400db00 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
2400dbc2:	2400      	movs	r4, #0
}
2400dbc4:	4620      	mov	r0, r4
2400dbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400dbca:	4648      	mov	r0, r9
2400dbcc:	f7ff fc28 	bl	2400d420 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400dbd0:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400dbd2:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400dbd4:	f67f af60 	bls.w	2400da98 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400dbd8:	1c41      	adds	r1, r0, #1
2400dbda:	d09b      	beq.n	2400db14 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400dbdc:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400dbe0:	4283      	cmp	r3, r0
2400dbe2:	f63f af5a 	bhi.w	2400da9a <create_chain+0x4a>
2400dbe6:	4646      	mov	r6, r8
2400dbe8:	e741      	b.n	2400da6e <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400dbea:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400dbee:	e787      	b.n	2400db00 <create_chain+0xb0>

2400dbf0 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400dbf0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400dbf4:	d274      	bcs.n	2400dce0 <dir_sdi+0xf0>
2400dbf6:	06ca      	lsls	r2, r1, #27
{
2400dbf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400dbfc:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400dbfe:	d151      	bne.n	2400dca4 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400dc00:	6885      	ldr	r5, [r0, #8]
2400dc02:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
2400dc04:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
2400dc08:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400dc0a:	2d00      	cmp	r5, #0
2400dc0c:	d04d      	beq.n	2400dcaa <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400dc0e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400dc12:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400dc16:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400dc1a:	f0c0 808e 	bcc.w	2400dd3a <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400dc1e:	2d01      	cmp	r5, #1
2400dc20:	d040      	beq.n	2400dca4 <dir_sdi+0xb4>
2400dc22:	4647      	mov	r7, r8
2400dc24:	e03b      	b.n	2400dc9e <dir_sdi+0xae>
		switch (fs->fs_type) {
2400dc26:	783b      	ldrb	r3, [r7, #0]
2400dc28:	2b02      	cmp	r3, #2
2400dc2a:	d073      	beq.n	2400dd14 <dir_sdi+0x124>
2400dc2c:	2b03      	cmp	r3, #3
2400dc2e:	d05f      	beq.n	2400dcf0 <dir_sdi+0x100>
2400dc30:	2b01      	cmp	r3, #1
2400dc32:	d137      	bne.n	2400dca4 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
2400dc34:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc3c:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc40:	4291      	cmp	r1, r2
2400dc42:	d006      	beq.n	2400dc52 <dir_sdi+0x62>
2400dc44:	4638      	mov	r0, r7
2400dc46:	f7ff f99f 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc4a:	2800      	cmp	r0, #0
2400dc4c:	d172      	bne.n	2400dd34 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400dc52:	f10a 0b01 	add.w	fp, sl, #1
2400dc56:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc5a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400dc5e:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc60:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400dc62:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc66:	d004      	beq.n	2400dc72 <dir_sdi+0x82>
2400dc68:	4638      	mov	r0, r7
2400dc6a:	f7ff f98d 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc6e:	2800      	cmp	r0, #0
2400dc70:	d160      	bne.n	2400dd34 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
2400dc72:	f3cb 0b08 	ubfx	fp, fp, #0, #9
2400dc76:	445f      	add	r7, fp
2400dc78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400dc7c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400dc80:	07eb      	lsls	r3, r5, #31
2400dc82:	d568      	bpl.n	2400dd56 <dir_sdi+0x166>
2400dc84:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400dc88:	2d01      	cmp	r5, #1
2400dc8a:	d90b      	bls.n	2400dca4 <dir_sdi+0xb4>
2400dc8c:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400dc90:	42ab      	cmp	r3, r5
2400dc92:	d907      	bls.n	2400dca4 <dir_sdi+0xb4>
			ofs -= csz;
2400dc94:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400dc98:	45a1      	cmp	r9, r4
2400dc9a:	d850      	bhi.n	2400dd3e <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400dc9c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400dc9e:	69bb      	ldr	r3, [r7, #24]
2400dca0:	42ab      	cmp	r3, r5
2400dca2:	d8c0      	bhi.n	2400dc26 <dir_sdi+0x36>
		switch (fs->fs_type) {
2400dca4:	2002      	movs	r0, #2
}
2400dca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400dcaa:	f898 3000 	ldrb.w	r3, [r8]
2400dcae:	2b02      	cmp	r3, #2
2400dcb0:	d818      	bhi.n	2400dce4 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400dcb2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400dcb6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400dcba:	d9f3      	bls.n	2400dca4 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
2400dcbc:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
2400dcc0:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
2400dcc2:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400dcc4:	2a00      	cmp	r2, #0
2400dcc6:	d0ed      	beq.n	2400dca4 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400dcc8:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400dccc:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400dcd0:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
2400dcd4:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400dcd6:	4443      	add	r3, r8
2400dcd8:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
2400dcdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
2400dce0:	2002      	movs	r0, #2
}
2400dce2:	4770      	bx	lr
		clst = fs->dirbase;
2400dce4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400dce8:	2b00      	cmp	r3, #0
2400dcea:	d0e2      	beq.n	2400dcb2 <dir_sdi+0xc2>
2400dcec:	461d      	mov	r5, r3
2400dcee:	e78e      	b.n	2400dc0e <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dcf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dcf4:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dcf8:	4299      	cmp	r1, r3
2400dcfa:	d003      	beq.n	2400dd04 <dir_sdi+0x114>
2400dcfc:	4638      	mov	r0, r7
2400dcfe:	f7ff f943 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dd02:	b9b8      	cbnz	r0, 2400dd34 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400dd04:	00ad      	lsls	r5, r5, #2
2400dd06:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400dd0a:	442f      	add	r7, r5
2400dd0c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400dd0e:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400dd12:	e7b9      	b.n	2400dc88 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dd14:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dd18:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd1c:	4299      	cmp	r1, r3
2400dd1e:	d003      	beq.n	2400dd28 <dir_sdi+0x138>
2400dd20:	4638      	mov	r0, r7
2400dd22:	f7ff f931 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dd26:	b928      	cbnz	r0, 2400dd34 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400dd28:	006d      	lsls	r5, r5, #1
2400dd2a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
2400dd2e:	442f      	add	r7, r5
2400dd30:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
2400dd32:	e7a9      	b.n	2400dc88 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400dd34:	2001      	movs	r0, #1
}
2400dd36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dd3a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400dd3e:	3b02      	subs	r3, #2
	clst -= 2;
2400dd40:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dd42:	4299      	cmp	r1, r3
2400dd44:	d20a      	bcs.n	2400dd5c <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
2400dd46:	f8b8 300a 	ldrh.w	r3, [r8, #10]
2400dd4a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
2400dd4e:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
2400dd52:	61f2      	str	r2, [r6, #28]
2400dd54:	e7b5      	b.n	2400dcc2 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400dd56:	f3ca 050b 	ubfx	r5, sl, #0, #12
2400dd5a:	e795      	b.n	2400dc88 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
2400dd5c:	2300      	movs	r3, #0
2400dd5e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400dd62:	e79f      	b.n	2400dca4 <dir_sdi+0xb4>

2400dd64 <dir_find>:
{
2400dd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400dd68:	2100      	movs	r1, #0
{
2400dd6a:	b085      	sub	sp, #20
2400dd6c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400dd6e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400dd72:	f7ff ff3d 	bl	2400dbf0 <dir_sdi>
	if (res != FR_OK) return res;
2400dd76:	4607      	mov	r7, r0
2400dd78:	b9e8      	cbnz	r0, 2400ddb6 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400dd7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400dd7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400dd82:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dd84:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400dd86:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd88:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400dd8c:	42b5      	cmp	r5, r6
2400dd8e:	d018      	beq.n	2400ddc2 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400dd90:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400dd94:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400dd98:	2b00      	cmp	r3, #0
2400dd9a:	f040 8088 	bne.w	2400deae <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400dd9e:	2301      	movs	r3, #1
2400dda0:	4632      	mov	r2, r6
2400dda2:	f898 0001 	ldrb.w	r0, [r8, #1]
2400dda6:	f7fe ff41 	bl	2400cc2c <disk_read>
2400ddaa:	b140      	cbz	r0, 2400ddbe <dir_find+0x5a>
			fs->winsect = sector;
2400ddac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400ddb0:	2701      	movs	r7, #1
			fs->winsect = sector;
2400ddb2:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400ddb6:	4638      	mov	r0, r7
2400ddb8:	b005      	add	sp, #20
2400ddba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400ddbe:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400ddc2:	6a26      	ldr	r6, [r4, #32]
2400ddc4:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ddc6:	b34d      	cbz	r5, 2400de1c <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400ddc8:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400ddca:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400ddcc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
2400ddd0:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400ddd2:	d004      	beq.n	2400ddde <dir_find+0x7a>
2400ddd4:	0717      	lsls	r7, r2, #28
2400ddd6:	d526      	bpl.n	2400de26 <dir_find+0xc2>
2400ddd8:	2b0f      	cmp	r3, #15
2400ddda:	f000 8094 	beq.w	2400df06 <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ddde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400dde2:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400dde6:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400dde8:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ddea:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ddec:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ddee:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400ddf2:	d213      	bcs.n	2400de1c <dir_find+0xb8>
2400ddf4:	b196      	cbz	r6, 2400de1c <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ddf6:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400ddfa:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ddfc:	b94b      	cbnz	r3, 2400de12 <dir_find+0xae>
		dp->sect++;				/* Next sector */
2400ddfe:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400de00:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400de02:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400de04:	2900      	cmp	r1, #0
2400de06:	d15e      	bne.n	2400dec6 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400de08:	893a      	ldrh	r2, [r7, #8]
2400de0a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400de0e:	f240 8134 	bls.w	2400e07a <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400de12:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400de14:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400de16:	443b      	add	r3, r7
2400de18:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400de1a:	e7b5      	b.n	2400dd88 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400de1c:	2704      	movs	r7, #4
}
2400de1e:	4638      	mov	r0, r7
2400de20:	b005      	add	sp, #20
2400de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400de26:	2b0f      	cmp	r3, #15
2400de28:	d06d      	beq.n	2400df06 <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400de2a:	f1ba 0f00 	cmp.w	sl, #0
2400de2e:	f000 80d6 	beq.w	2400dfde <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400de32:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
2400de36:	f01a 0a01 	ands.w	sl, sl, #1
2400de3a:	d1d0      	bne.n	2400ddde <dir_find+0x7a>
	} while (--cnt && r == 0);
2400de3c:	7832      	ldrb	r2, [r6, #0]
2400de3e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400de42:	429a      	cmp	r2, r3
2400de44:	d1cb      	bne.n	2400ddde <dir_find+0x7a>
2400de46:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400de4a:	7873      	ldrb	r3, [r6, #1]
2400de4c:	429a      	cmp	r2, r3
2400de4e:	d1c6      	bne.n	2400ddde <dir_find+0x7a>
2400de50:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400de54:	78b3      	ldrb	r3, [r6, #2]
2400de56:	429a      	cmp	r2, r3
2400de58:	d1c1      	bne.n	2400ddde <dir_find+0x7a>
2400de5a:	78f2      	ldrb	r2, [r6, #3]
2400de5c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400de60:	429a      	cmp	r2, r3
2400de62:	d1bc      	bne.n	2400ddde <dir_find+0x7a>
2400de64:	7932      	ldrb	r2, [r6, #4]
2400de66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400de6a:	429a      	cmp	r2, r3
2400de6c:	d1b7      	bne.n	2400ddde <dir_find+0x7a>
2400de6e:	7972      	ldrb	r2, [r6, #5]
2400de70:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400de74:	429a      	cmp	r2, r3
2400de76:	d1b2      	bne.n	2400ddde <dir_find+0x7a>
2400de78:	79b2      	ldrb	r2, [r6, #6]
2400de7a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400de7e:	429a      	cmp	r2, r3
2400de80:	d1ad      	bne.n	2400ddde <dir_find+0x7a>
2400de82:	79f2      	ldrb	r2, [r6, #7]
2400de84:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400de88:	429a      	cmp	r2, r3
2400de8a:	d1a8      	bne.n	2400ddde <dir_find+0x7a>
2400de8c:	7a32      	ldrb	r2, [r6, #8]
2400de8e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400de92:	429a      	cmp	r2, r3
2400de94:	d1a3      	bne.n	2400ddde <dir_find+0x7a>
2400de96:	7a72      	ldrb	r2, [r6, #9]
2400de98:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400de9c:	429a      	cmp	r2, r3
2400de9e:	d19e      	bne.n	2400ddde <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400dea0:	7ab2      	ldrb	r2, [r6, #10]
2400dea2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400dea6:	429a      	cmp	r2, r3
2400dea8:	d199      	bne.n	2400ddde <dir_find+0x7a>
2400deaa:	4657      	mov	r7, sl
2400deac:	e783      	b.n	2400ddb6 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400deae:	2301      	movs	r3, #1
2400deb0:	462a      	mov	r2, r5
2400deb2:	f898 0001 	ldrb.w	r0, [r8, #1]
2400deb6:	9100      	str	r1, [sp, #0]
2400deb8:	f7fe fec6 	bl	2400cc48 <disk_write>
2400debc:	9900      	ldr	r1, [sp, #0]
2400debe:	2800      	cmp	r0, #0
2400dec0:	d06d      	beq.n	2400df9e <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400dec2:	2701      	movs	r7, #1
2400dec4:	e777      	b.n	2400ddb6 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400dec6:	897a      	ldrh	r2, [r7, #10]
2400dec8:	3a01      	subs	r2, #1
2400deca:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400dece:	d1a0      	bne.n	2400de12 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400ded0:	4638      	mov	r0, r7
2400ded2:	9300      	str	r3, [sp, #0]
2400ded4:	f7ff faa4 	bl	2400d420 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ded8:	2801      	cmp	r0, #1
2400deda:	f240 80d2 	bls.w	2400e082 <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400dede:	1c43      	adds	r3, r0, #1
2400dee0:	d0ef      	beq.n	2400dec2 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400dee2:	69ba      	ldr	r2, [r7, #24]
2400dee4:	4290      	cmp	r0, r2
2400dee6:	f080 80c8 	bcs.w	2400e07a <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
2400deea:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400deec:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400deee:	69ba      	ldr	r2, [r7, #24]
2400def0:	9b00      	ldr	r3, [sp, #0]
2400def2:	3a02      	subs	r2, #2
2400def4:	4290      	cmp	r0, r2
2400def6:	f080 80c6 	bcs.w	2400e086 <dir_find+0x322>
	return clst * fs->csize + fs->database;
2400defa:	897a      	ldrh	r2, [r7, #10]
2400defc:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400defe:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400df02:	61e6      	str	r6, [r4, #28]
2400df04:	e785      	b.n	2400de12 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400df06:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400df0a:	0658      	lsls	r0, r3, #25
2400df0c:	f53f af6c 	bmi.w	2400dde8 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400df10:	0669      	lsls	r1, r5, #25
2400df12:	d53f      	bpl.n	2400df94 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400df14:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400df16:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400df1a:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400df1e:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400df20:	7b73      	ldrb	r3, [r6, #13]
2400df22:	454b      	cmp	r3, r9
2400df24:	d138      	bne.n	2400df98 <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400df26:	8b73      	ldrh	r3, [r6, #26]
2400df28:	bbb3      	cbnz	r3, 2400df98 <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400df2a:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400df2c:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400df2e:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400df32:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400df36:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400e0b0 <dir_find+0x34c>
2400df3a:	9502      	str	r5, [sp, #8]
2400df3c:	4615      	mov	r5, r2
2400df3e:	3f01      	subs	r7, #1
2400df40:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400df44:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400df46:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400df4a:	f8cd 8000 	str.w	r8, [sp]
2400df4e:	9401      	str	r4, [sp, #4]
2400df50:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400df54:	e010      	b.n	2400df78 <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400df56:	2ffe      	cmp	r7, #254	; 0xfe
2400df58:	4620      	mov	r0, r4
2400df5a:	d816      	bhi.n	2400df8a <dir_find+0x226>
2400df5c:	f001 fe1e 	bl	2400fb9c <ff_wtoupper>
2400df60:	4680      	mov	r8, r0
2400df62:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400df66:	3701      	adds	r7, #1
2400df68:	f001 fe18 	bl	2400fb9c <ff_wtoupper>
2400df6c:	4580      	cmp	r8, r0
2400df6e:	4621      	mov	r1, r4
2400df70:	d10b      	bne.n	2400df8a <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400df72:	45d3      	cmp	fp, sl
2400df74:	f000 8089 	beq.w	2400e08a <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400df78:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
2400df7c:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400df7e:	2900      	cmp	r1, #0
2400df80:	d1e9      	bne.n	2400df56 <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400df82:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400df86:	429c      	cmp	r4, r3
2400df88:	d0f3      	beq.n	2400df72 <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400df8a:	e9dd 8400 	ldrd	r8, r4, [sp]
2400df8e:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400df92:	e729      	b.n	2400dde8 <dir_find+0x84>
2400df94:	45aa      	cmp	sl, r5
2400df96:	d0c3      	beq.n	2400df20 <dir_find+0x1bc>
2400df98:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400df9c:	e724      	b.n	2400dde8 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400df9e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400dfa2:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dfa6:	1aea      	subs	r2, r5, r3
2400dfa8:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400dfac:	429a      	cmp	r2, r3
2400dfae:	f4bf aef6 	bcs.w	2400dd9e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dfb2:	f898 7002 	ldrb.w	r7, [r8, #2]
2400dfb6:	2f01      	cmp	r7, #1
2400dfb8:	f67f aef1 	bls.w	2400dd9e <dir_find+0x3a>
2400dfbc:	468b      	mov	fp, r1
2400dfbe:	e001      	b.n	2400dfc4 <dir_find+0x260>
					wsect += fs->fsize;
2400dfc0:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400dfc4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dfc6:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400dfc8:	2301      	movs	r3, #1
2400dfca:	4659      	mov	r1, fp
2400dfcc:	462a      	mov	r2, r5
2400dfce:	f898 0001 	ldrb.w	r0, [r8, #1]
2400dfd2:	f7fe fe39 	bl	2400cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dfd6:	2f01      	cmp	r7, #1
2400dfd8:	d1f2      	bne.n	2400dfc0 <dir_find+0x25c>
2400dfda:	4659      	mov	r1, fp
2400dfdc:	e6df      	b.n	2400dd9e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400dfde:	7830      	ldrb	r0, [r6, #0]
2400dfe0:	7872      	ldrb	r2, [r6, #1]
2400dfe2:	01c1      	lsls	r1, r0, #7
2400dfe4:	78b3      	ldrb	r3, [r6, #2]
2400dfe6:	f896 b003 	ldrb.w	fp, [r6, #3]
2400dfea:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
2400dfee:	7937      	ldrb	r7, [r6, #4]
2400dff0:	f896 e005 	ldrb.w	lr, [r6, #5]
2400dff4:	4411      	add	r1, r2
2400dff6:	f896 c006 	ldrb.w	ip, [r6, #6]
2400dffa:	7a32      	ldrb	r2, [r6, #8]
2400dffc:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400e000:	7a75      	ldrb	r5, [r6, #9]
2400e002:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400e006:	fa53 f180 	uxtab	r1, r3, r0
2400e00a:	79f3      	ldrb	r3, [r6, #7]
2400e00c:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400e010:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400e014:	7ab1      	ldrb	r1, [r6, #10]
2400e016:	fa5b fb80 	uxtab	fp, fp, r0
2400e01a:	f3cb 0046 	ubfx	r0, fp, #1, #7
2400e01e:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
2400e022:	fa57 f780 	uxtab	r7, r7, r0
2400e026:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400e02a:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400e02e:	fa5e f080 	uxtab	r0, lr, r0
2400e032:	f3c0 0746 	ubfx	r7, r0, #1, #7
2400e036:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
2400e03a:	fa5c f780 	uxtab	r7, ip, r0
2400e03e:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400e042:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400e046:	fa53 f080 	uxtab	r0, r3, r0
2400e04a:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400e04e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
2400e052:	fa52 f383 	uxtab	r3, r2, r3
2400e056:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e05a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
2400e05e:	fa55 f283 	uxtab	r2, r5, r3
2400e062:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e066:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e06a:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e06e:	b2db      	uxtb	r3, r3
2400e070:	4599      	cmp	r9, r3
2400e072:	f47f aede 	bne.w	2400de32 <dir_find+0xce>
2400e076:	4657      	mov	r7, sl
2400e078:	e69d      	b.n	2400ddb6 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
2400e07a:	2300      	movs	r3, #0
2400e07c:	2704      	movs	r7, #4
2400e07e:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400e080:	e699      	b.n	2400ddb6 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e082:	2702      	movs	r7, #2
2400e084:	e697      	b.n	2400ddb6 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e086:	461e      	mov	r6, r3
2400e088:	e73b      	b.n	2400df02 <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e08a:	7833      	ldrb	r3, [r6, #0]
2400e08c:	f8dd 8000 	ldr.w	r8, [sp]
2400e090:	065a      	lsls	r2, r3, #25
2400e092:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
2400e096:	d500      	bpl.n	2400e09a <dir_find+0x336>
2400e098:	b919      	cbnz	r1, 2400e0a2 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e09a:	3d01      	subs	r5, #1
2400e09c:	fa5f fa85 	uxtb.w	sl, r5
2400e0a0:	e6a2      	b.n	2400dde8 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e0a2:	9b03      	ldr	r3, [sp, #12]
2400e0a4:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400e0a8:	2b00      	cmp	r3, #0
2400e0aa:	d0f6      	beq.n	2400e09a <dir_find+0x336>
2400e0ac:	e774      	b.n	2400df98 <dir_find+0x234>
2400e0ae:	bf00      	nop
2400e0b0:	24018000 	.word	0x24018000

2400e0b4 <follow_path>:
{
2400e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e0b8:	780b      	ldrb	r3, [r1, #0]
{
2400e0ba:	b083      	sub	sp, #12
2400e0bc:	4688      	mov	r8, r1
2400e0be:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e0c0:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400e0c2:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e0c6:	d103      	bne.n	2400e0d0 <follow_path+0x1c>
2400e0c8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400e0cc:	2b2f      	cmp	r3, #47	; 0x2f
2400e0ce:	d0fb      	beq.n	2400e0c8 <follow_path+0x14>
2400e0d0:	2b5c      	cmp	r3, #92	; 0x5c
2400e0d2:	d0f9      	beq.n	2400e0c8 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400e0d4:	2100      	movs	r1, #0
2400e0d6:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400e0d8:	f898 3000 	ldrb.w	r3, [r8]
2400e0dc:	2b1f      	cmp	r3, #31
2400e0de:	f240 8148 	bls.w	2400e372 <follow_path+0x2be>
2400e0e2:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400e0e4:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e0e6:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400e0e8:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400e0ea:	d929      	bls.n	2400e140 <follow_path+0x8c>
2400e0ec:	f1a5 0902 	sub.w	r9, r5, #2
2400e0f0:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400e0f2:	2401      	movs	r4, #1
2400e0f4:	e008      	b.n	2400e108 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400e0f6:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400e0fa:	1c63      	adds	r3, r4, #1
2400e0fc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400e100:	281f      	cmp	r0, #31
2400e102:	f240 80f7 	bls.w	2400e2f4 <follow_path+0x240>
		w = p[si++];					/* Get a character */
2400e106:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400e108:	282f      	cmp	r0, #47	; 0x2f
2400e10a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400e10e:	d01d      	beq.n	2400e14c <follow_path+0x98>
2400e110:	285c      	cmp	r0, #92	; 0x5c
2400e112:	d01b      	beq.n	2400e14c <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400e114:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400e118:	d00e      	beq.n	2400e138 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400e11a:	2101      	movs	r1, #1
2400e11c:	f001 fd20 	bl	2400fb60 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400e120:	b150      	cbz	r0, 2400e138 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400e122:	287f      	cmp	r0, #127	; 0x7f
2400e124:	d8e7      	bhi.n	2400e0f6 <follow_path+0x42>
	while (*str && *str != chr) str++;
2400e126:	2322      	movs	r3, #34	; 0x22
2400e128:	4aa5      	ldr	r2, [pc, #660]	; (2400e3c0 <follow_path+0x30c>)
2400e12a:	e003      	b.n	2400e134 <follow_path+0x80>
2400e12c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400e130:	2b00      	cmp	r3, #0
2400e132:	d0e0      	beq.n	2400e0f6 <follow_path+0x42>
2400e134:	4298      	cmp	r0, r3
2400e136:	d1f9      	bne.n	2400e12c <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e138:	2006      	movs	r0, #6
}
2400e13a:	b003      	add	sp, #12
2400e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400e140:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e142:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400e144:	802b      	strh	r3, [r5, #0]
}
2400e146:	b003      	add	sp, #12
2400e148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e14c:	f818 3004 	ldrb.w	r3, [r8, r4]
2400e150:	eb08 0204 	add.w	r2, r8, r4
2400e154:	2b5c      	cmp	r3, #92	; 0x5c
2400e156:	d002      	beq.n	2400e15e <follow_path+0xaa>
2400e158:	2b2f      	cmp	r3, #47	; 0x2f
2400e15a:	f040 811f 	bne.w	2400e39c <follow_path+0x2e8>
2400e15e:	1c63      	adds	r3, r4, #1
2400e160:	4443      	add	r3, r8
2400e162:	4698      	mov	r8, r3
2400e164:	f813 2b01 	ldrb.w	r2, [r3], #1
2400e168:	2a2f      	cmp	r2, #47	; 0x2f
2400e16a:	d0fa      	beq.n	2400e162 <follow_path+0xae>
2400e16c:	2a5c      	cmp	r2, #92	; 0x5c
2400e16e:	d0f8      	beq.n	2400e162 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e170:	f1ba 0f00 	cmp.w	sl, #0
2400e174:	d0e4      	beq.n	2400e140 <follow_path+0x8c>
2400e176:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e178:	2400      	movs	r4, #0
2400e17a:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400e17e:	e002      	b.n	2400e186 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e180:	f1ba 0a01 	subs.w	sl, sl, #1
2400e184:	d0dc      	beq.n	2400e140 <follow_path+0x8c>
		w = lfn[di - 1];
2400e186:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400e18a:	2b20      	cmp	r3, #32
2400e18c:	d0f8      	beq.n	2400e180 <follow_path+0xcc>
2400e18e:	2b2e      	cmp	r3, #46	; 0x2e
2400e190:	d0f6      	beq.n	2400e180 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400e192:	2320      	movs	r3, #32
2400e194:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400e198:	2100      	movs	r1, #0
2400e19a:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400e19e:	627a      	str	r2, [r7, #36]	; 0x24
2400e1a0:	62ba      	str	r2, [r7, #40]	; 0x28
2400e1a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
2400e1a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
2400e1aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e1ae:	8828      	ldrh	r0, [r5, #0]
2400e1b0:	282e      	cmp	r0, #46	; 0x2e
2400e1b2:	d002      	beq.n	2400e1ba <follow_path+0x106>
2400e1b4:	4298      	cmp	r0, r3
2400e1b6:	f040 80e5 	bne.w	2400e384 <follow_path+0x2d0>
2400e1ba:	462a      	mov	r2, r5
2400e1bc:	2300      	movs	r3, #0
2400e1be:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400e1c2:	461c      	mov	r4, r3
2400e1c4:	3301      	adds	r3, #1
2400e1c6:	2820      	cmp	r0, #32
2400e1c8:	d0f9      	beq.n	2400e1be <follow_path+0x10a>
2400e1ca:	282e      	cmp	r0, #46	; 0x2e
2400e1cc:	d0f7      	beq.n	2400e1be <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
2400e1ce:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400e1d0:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400e1d4:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400e1d8:	2a2e      	cmp	r2, #46	; 0x2e
2400e1da:	d002      	beq.n	2400e1e2 <follow_path+0x12e>
2400e1dc:	f1ba 0a01 	subs.w	sl, sl, #1
2400e1e0:	d1f8      	bne.n	2400e1d4 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
2400e1e2:	b3b0      	cbz	r0, 2400e252 <follow_path+0x19e>
2400e1e4:	2208      	movs	r2, #8
2400e1e6:	4641      	mov	r1, r8
2400e1e8:	2300      	movs	r3, #0
2400e1ea:	46b8      	mov	r8, r7
2400e1ec:	462f      	mov	r7, r5
2400e1ee:	4615      	mov	r5, r2
2400e1f0:	4699      	mov	r9, r3
2400e1f2:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400e1f4:	2820      	cmp	r0, #32
2400e1f6:	d003      	beq.n	2400e200 <follow_path+0x14c>
2400e1f8:	282e      	cmp	r0, #46	; 0x2e
2400e1fa:	d14d      	bne.n	2400e298 <follow_path+0x1e4>
2400e1fc:	45a2      	cmp	sl, r4
2400e1fe:	d04b      	beq.n	2400e298 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
2400e200:	f046 0603 	orr.w	r6, r6, #3
2400e204:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400e206:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400e20a:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400e20c:	2800      	cmp	r0, #0
2400e20e:	d1f1      	bne.n	2400e1f4 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e210:	4647      	mov	r7, r8
2400e212:	4690      	mov	r8, r2
2400e214:	462a      	mov	r2, r5
2400e216:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400e21a:	29e5      	cmp	r1, #229	; 0xe5
2400e21c:	d102      	bne.n	2400e224 <follow_path+0x170>
2400e21e:	2105      	movs	r1, #5
2400e220:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e224:	2a08      	cmp	r2, #8
2400e226:	f000 8093 	beq.w	2400e350 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e22a:	f003 020c 	and.w	r2, r3, #12
2400e22e:	2a0c      	cmp	r2, #12
2400e230:	d065      	beq.n	2400e2fe <follow_path+0x24a>
2400e232:	f003 0303 	and.w	r3, r3, #3
2400e236:	2b03      	cmp	r3, #3
2400e238:	d061      	beq.n	2400e2fe <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e23a:	07b1      	lsls	r1, r6, #30
2400e23c:	d409      	bmi.n	2400e252 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400e23e:	2b01      	cmp	r3, #1
2400e240:	d102      	bne.n	2400e248 <follow_path+0x194>
2400e242:	f046 0610 	orr.w	r6, r6, #16
2400e246:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400e248:	2a04      	cmp	r2, #4
2400e24a:	d102      	bne.n	2400e252 <follow_path+0x19e>
2400e24c:	f046 0608 	orr.w	r6, r6, #8
2400e250:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400e252:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e254:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e258:	f7ff fd84 	bl	2400dd64 <dir_find>
			ns = dp->fn[NSFLAG];
2400e25c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e260:	2800      	cmp	r0, #0
2400e262:	d158      	bne.n	2400e316 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400e264:	075a      	lsls	r2, r3, #29
2400e266:	f53f af68 	bmi.w	2400e13a <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400e26a:	79bb      	ldrb	r3, [r7, #6]
2400e26c:	06db      	lsls	r3, r3, #27
2400e26e:	f140 8097 	bpl.w	2400e3a0 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e272:	697a      	ldr	r2, [r7, #20]
2400e274:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400e278:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e27c:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400e280:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e282:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400e284:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400e286:	d102      	bne.n	2400e28e <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400e288:	8a9b      	ldrh	r3, [r3, #20]
2400e28a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e28e:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e290:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400e292:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400e296:	e725      	b.n	2400e0e4 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400e298:	454d      	cmp	r5, r9
2400e29a:	d91c      	bls.n	2400e2d6 <follow_path+0x222>
2400e29c:	ebaa 0104 	sub.w	r1, sl, r4
2400e2a0:	fab1 f181 	clz	r1, r1
2400e2a4:	0949      	lsrs	r1, r1, #5
2400e2a6:	b9b1      	cbnz	r1, 2400e2d6 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
2400e2a8:	287f      	cmp	r0, #127	; 0x7f
2400e2aa:	d83c      	bhi.n	2400e326 <follow_path+0x272>
	while (*str && *str != chr) str++;
2400e2ac:	212b      	movs	r1, #43	; 0x2b
2400e2ae:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400e3c8 <follow_path+0x314>
2400e2b2:	e003      	b.n	2400e2bc <follow_path+0x208>
2400e2b4:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400e2b8:	2900      	cmp	r1, #0
2400e2ba:	d052      	beq.n	2400e362 <follow_path+0x2ae>
2400e2bc:	4281      	cmp	r1, r0
2400e2be:	d1f9      	bne.n	2400e2b4 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400e2c0:	f046 0603 	orr.w	r6, r6, #3
2400e2c4:	205f      	movs	r0, #95	; 0x5f
2400e2c6:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400e2c8:	eb08 0109 	add.w	r1, r8, r9
2400e2cc:	f109 0901 	add.w	r9, r9, #1
2400e2d0:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400e2d4:	e797      	b.n	2400e206 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
2400e2d6:	2d0b      	cmp	r5, #11
2400e2d8:	d064      	beq.n	2400e3a4 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400e2da:	45a2      	cmp	sl, r4
2400e2dc:	d003      	beq.n	2400e2e6 <follow_path+0x232>
2400e2de:	f046 0603 	orr.w	r6, r6, #3
2400e2e2:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400e2e4:	d394      	bcc.n	2400e210 <follow_path+0x15c>
			b <<= 2; continue;
2400e2e6:	009b      	lsls	r3, r3, #2
2400e2e8:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400e2ea:	250b      	movs	r5, #11
2400e2ec:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400e2f0:	b2db      	uxtb	r3, r3
2400e2f2:	e788      	b.n	2400e206 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
2400e2f4:	46a2      	mov	sl, r4
2400e2f6:	4498      	add	r8, r3
2400e2f8:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e2fa:	2404      	movs	r4, #4
2400e2fc:	e73d      	b.n	2400e17a <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e2fe:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400e302:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e304:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e306:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e30a:	f7ff fd2b 	bl	2400dd64 <dir_find>
			ns = dp->fn[NSFLAG];
2400e30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e312:	2800      	cmp	r0, #0
2400e314:	d0a6      	beq.n	2400e264 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400e316:	2804      	cmp	r0, #4
2400e318:	f47f af0f 	bne.w	2400e13a <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e31c:	f013 0f04 	tst.w	r3, #4
2400e320:	bf08      	it	eq
2400e322:	2005      	moveq	r0, #5
2400e324:	e709      	b.n	2400e13a <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400e326:	e9cd 3200 	strd	r3, r2, [sp]
2400e32a:	f001 fc19 	bl	2400fb60 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e32e:	e9dd 3200 	ldrd	r3, r2, [sp]
2400e332:	b918      	cbnz	r0, 2400e33c <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
2400e334:	f046 0602 	orr.w	r6, r6, #2
2400e338:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e33a:	e7c1      	b.n	2400e2c0 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e33c:	4921      	ldr	r1, [pc, #132]	; (2400e3c4 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400e33e:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e342:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
2400e344:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e346:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e34a:	2800      	cmp	r0, #0
2400e34c:	d0b8      	beq.n	2400e2c0 <follow_path+0x20c>
2400e34e:	e7ad      	b.n	2400e2ac <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
2400e350:	009b      	lsls	r3, r3, #2
2400e352:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e356:	2a0c      	cmp	r2, #12
2400e358:	d0d1      	beq.n	2400e2fe <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e35a:	07b0      	lsls	r0, r6, #30
2400e35c:	f57f af74 	bpl.w	2400e248 <follow_path+0x194>
2400e360:	e777      	b.n	2400e252 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
2400e362:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400e366:	2919      	cmp	r1, #25
2400e368:	d80f      	bhi.n	2400e38a <follow_path+0x2d6>
					b |= 2;
2400e36a:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400e36e:	b2c0      	uxtb	r0, r0
2400e370:	e7aa      	b.n	2400e2c8 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
2400e372:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400e374:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400e376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400e37a:	b003      	add	sp, #12
2400e37c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400e380:	f7ff bc36 	b.w	2400dbf0 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e384:	4626      	mov	r6, r4
2400e386:	2401      	movs	r4, #1
2400e388:	e722      	b.n	2400e1d0 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
2400e38a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400e38e:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400e390:	bf9c      	itt	ls
2400e392:	3820      	subls	r0, #32
2400e394:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400e398:	b2c0      	uxtb	r0, r0
2400e39a:	e795      	b.n	2400e2c8 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e39c:	4690      	mov	r8, r2
2400e39e:	e6e7      	b.n	2400e170 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e3a0:	2005      	movs	r0, #5
2400e3a2:	e6ca      	b.n	2400e13a <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400e3a4:	4647      	mov	r7, r8
2400e3a6:	4690      	mov	r8, r2
2400e3a8:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e3ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400e3b0:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e3b2:	2ae5      	cmp	r2, #229	; 0xe5
2400e3b4:	f47f af39 	bne.w	2400e22a <follow_path+0x176>
2400e3b8:	2205      	movs	r2, #5
2400e3ba:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e3be:	e734      	b.n	2400e22a <follow_path+0x176>
2400e3c0:	24017f6c 	.word	0x24017f6c
2400e3c4:	24017f80 	.word	0x24017f80
2400e3c8:	24017f78 	.word	0x24017f78

2400e3cc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400e3cc:	2901      	cmp	r1, #1
{
2400e3ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400e3d2:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2400e3d4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400e3d6:	d90f      	bls.n	2400e3f8 <remove_chain+0x2c>
2400e3d8:	69ab      	ldr	r3, [r5, #24]
2400e3da:	428b      	cmp	r3, r1
2400e3dc:	d90c      	bls.n	2400e3f8 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400e3de:	4606      	mov	r6, r0
2400e3e0:	4611      	mov	r1, r2
2400e3e2:	b962      	cbnz	r2, 2400e3fe <remove_chain+0x32>
2400e3e4:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e3e6:	429c      	cmp	r4, r3
2400e3e8:	d206      	bcs.n	2400e3f8 <remove_chain+0x2c>
		switch (fs->fs_type) {
2400e3ea:	783b      	ldrb	r3, [r7, #0]
2400e3ec:	2b02      	cmp	r3, #2
2400e3ee:	d072      	beq.n	2400e4d6 <remove_chain+0x10a>
2400e3f0:	2b03      	cmp	r3, #3
2400e3f2:	d05d      	beq.n	2400e4b0 <remove_chain+0xe4>
2400e3f4:	2b01      	cmp	r3, #1
2400e3f6:	d010      	beq.n	2400e41a <remove_chain+0x4e>
2400e3f8:	2002      	movs	r0, #2
}
2400e3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e3fe:	4293      	cmp	r3, r2
2400e400:	d9fa      	bls.n	2400e3f8 <remove_chain+0x2c>
2400e402:	2a01      	cmp	r2, #1
2400e404:	d0f8      	beq.n	2400e3f8 <remove_chain+0x2c>
2400e406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400e40a:	4628      	mov	r0, r5
2400e40c:	f7fe ff6e 	bl	2400d2ec <put_fat.part.0>
		if (res != FR_OK) return res;
2400e410:	2800      	cmp	r0, #0
2400e412:	d1f2      	bne.n	2400e3fa <remove_chain+0x2e>
2400e414:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e416:	69bb      	ldr	r3, [r7, #24]
2400e418:	e7e5      	b.n	2400e3e6 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
2400e41a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e422:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e426:	4291      	cmp	r1, r2
2400e428:	d006      	beq.n	2400e438 <remove_chain+0x6c>
2400e42a:	4638      	mov	r0, r7
2400e42c:	f7fe fdac 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e430:	2800      	cmp	r0, #0
2400e432:	d161      	bne.n	2400e4f8 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400e438:	f108 0901 	add.w	r9, r8, #1
2400e43c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e440:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e444:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e446:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400e448:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e44c:	d004      	beq.n	2400e458 <remove_chain+0x8c>
2400e44e:	4638      	mov	r0, r7
2400e450:	f7fe fd9a 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e454:	2800      	cmp	r0, #0
2400e456:	d14f      	bne.n	2400e4f8 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e458:	f3c9 0908 	ubfx	r9, r9, #0, #9
2400e45c:	444f      	add	r7, r9
2400e45e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400e462:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e466:	07e3      	lsls	r3, r4, #31
2400e468:	d548      	bpl.n	2400e4fc <remove_chain+0x130>
2400e46a:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
2400e46e:	f1b8 0f00 	cmp.w	r8, #0
2400e472:	d046      	beq.n	2400e502 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400e474:	f1b8 0f01 	cmp.w	r8, #1
2400e478:	d0be      	beq.n	2400e3f8 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e47a:	69ab      	ldr	r3, [r5, #24]
2400e47c:	42a3      	cmp	r3, r4
2400e47e:	d9bb      	bls.n	2400e3f8 <remove_chain+0x2c>
2400e480:	2200      	movs	r2, #0
2400e482:	4621      	mov	r1, r4
2400e484:	4628      	mov	r0, r5
2400e486:	f7fe ff31 	bl	2400d2ec <put_fat.part.0>
			if (res != FR_OK) return res;
2400e48a:	2800      	cmp	r0, #0
2400e48c:	d1b5      	bne.n	2400e3fa <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400e48e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400e492:	1e91      	subs	r1, r2, #2
2400e494:	428b      	cmp	r3, r1
2400e496:	d205      	bcs.n	2400e4a4 <remove_chain+0xd8>
			fs->free_clst++;
2400e498:	3301      	adds	r3, #1
2400e49a:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400e49c:	792b      	ldrb	r3, [r5, #4]
2400e49e:	f043 0301 	orr.w	r3, r3, #1
2400e4a2:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400e4a4:	4542      	cmp	r2, r8
2400e4a6:	d92c      	bls.n	2400e502 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e4a8:	6837      	ldr	r7, [r6, #0]
2400e4aa:	4644      	mov	r4, r8
2400e4ac:	69bb      	ldr	r3, [r7, #24]
2400e4ae:	e79a      	b.n	2400e3e6 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e4b4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e4b8:	4299      	cmp	r1, r3
2400e4ba:	d003      	beq.n	2400e4c4 <remove_chain+0xf8>
2400e4bc:	4638      	mov	r0, r7
2400e4be:	f7fe fd63 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e4c2:	b9c8      	cbnz	r0, 2400e4f8 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e4c4:	00a3      	lsls	r3, r4, #2
2400e4c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e4ca:	441f      	add	r7, r3
2400e4cc:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e4d0:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
2400e4d4:	e7cb      	b.n	2400e46e <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e4d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e4da:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e4de:	4299      	cmp	r1, r3
2400e4e0:	d003      	beq.n	2400e4ea <remove_chain+0x11e>
2400e4e2:	4638      	mov	r0, r7
2400e4e4:	f7fe fd50 	bl	2400cf88 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e4e8:	b930      	cbnz	r0, 2400e4f8 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e4ea:	0063      	lsls	r3, r4, #1
2400e4ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e4f0:	441f      	add	r7, r3
2400e4f2:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
2400e4f6:	e7ba      	b.n	2400e46e <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400e4f8:	2001      	movs	r0, #1
2400e4fa:	e77e      	b.n	2400e3fa <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e4fc:	f3c8 080b 	ubfx	r8, r8, #0, #12
2400e500:	e7b5      	b.n	2400e46e <remove_chain+0xa2>
	return FR_OK;
2400e502:	2000      	movs	r0, #0
2400e504:	e779      	b.n	2400e3fa <remove_chain+0x2e>
2400e506:	bf00      	nop

2400e508 <dir_register>:
{
2400e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e50c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400e510:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e512:	f013 02a0 	ands.w	r2, r3, #160	; 0xa0
2400e516:	930a      	str	r3, [sp, #40]	; 0x28
2400e518:	f040 8358 	bne.w	2400ebcc <dir_register+0x6c4>
	FATFS *fs = dp->obj.fs;
2400e51c:	6803      	ldr	r3, [r0, #0]
2400e51e:	4682      	mov	sl, r0
2400e520:	9301      	str	r3, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400e522:	68db      	ldr	r3, [r3, #12]
2400e524:	881f      	ldrh	r7, [r3, #0]
2400e526:	b12f      	cbz	r7, 2400e534 <dir_register+0x2c>
2400e528:	4617      	mov	r7, r2
2400e52a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400e52e:	3701      	adds	r7, #1
2400e530:	2a00      	cmp	r2, #0
2400e532:	d1fa      	bne.n	2400e52a <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
2400e534:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
2400e538:	ab12      	add	r3, sp, #72	; 0x48
2400e53a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
2400e53e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400e542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400e544:	07d8      	lsls	r0, r3, #31
2400e546:	f100 8097 	bmi.w	2400e678 <dir_register+0x170>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e54a:	f013 0302 	ands.w	r3, r3, #2
2400e54e:	f8dd 9004 	ldr.w	r9, [sp, #4]
2400e552:	f000 829f 	beq.w	2400ea94 <dir_register+0x58c>
2400e556:	4a75      	ldr	r2, [pc, #468]	; (2400e72c <dir_register+0x224>)
2400e558:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
2400e55c:	2100      	movs	r1, #0
2400e55e:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e560:	fba2 2303 	umull	r2, r3, r2, r3
2400e564:	089b      	lsrs	r3, r3, #2
2400e566:	9302      	str	r3, [sp, #8]
2400e568:	3301      	adds	r3, #1
2400e56a:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400e56c:	f7ff fb40 	bl	2400dbf0 <dir_sdi>
	if (res == FR_OK) {
2400e570:	4683      	mov	fp, r0
2400e572:	2800      	cmp	r0, #0
2400e574:	f040 8299 	bne.w	2400eaaa <dir_register+0x5a2>
			res = move_window(fs, dp->sect);
2400e578:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
2400e57c:	4680      	mov	r8, r0
						fs->wflag = 1;
2400e57e:	9006      	str	r0, [sp, #24]
2400e580:	e029      	b.n	2400e5d6 <dir_register+0xce>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400e582:	fab3 f283 	clz	r2, r3
2400e586:	0952      	lsrs	r2, r2, #5
2400e588:	b3a3      	cbz	r3, 2400e5f4 <dir_register+0xec>
				n = 0;					/* Not a blank entry. Restart to search */
2400e58a:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e58c:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e590:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e594:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e596:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e59a:	f080 81ee 	bcs.w	2400e97a <dir_register+0x472>
2400e59e:	2900      	cmp	r1, #0
2400e5a0:	f000 81eb 	beq.w	2400e97a <dir_register+0x472>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e5a4:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400e5a8:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e5ac:	b967      	cbnz	r7, 2400e5c8 <dir_register+0xc0>
		dp->sect++;				/* Next sector */
2400e5ae:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
2400e5b0:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
2400e5b4:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
2400e5b8:	2b00      	cmp	r3, #0
2400e5ba:	f040 82cd 	bne.w	2400eb58 <dir_register+0x650>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e5be:	8922      	ldrh	r2, [r4, #8]
2400e5c0:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400e5c4:	f240 83bc 	bls.w	2400ed40 <dir_register+0x838>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e5c8:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e5cc:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
2400e5ce:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e5d2:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e5d6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
2400e5da:	428b      	cmp	r3, r1
2400e5dc:	d005      	beq.n	2400e5ea <dir_register+0xe2>
2400e5de:	4648      	mov	r0, r9
2400e5e0:	f7fe fcd2 	bl	2400cf88 <move_window.part.0>
			if (res != FR_OK) break;
2400e5e4:	2800      	cmp	r0, #0
2400e5e6:	f040 83b3 	bne.w	2400ed50 <dir_register+0x848>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400e5ea:	f8da 3020 	ldr.w	r3, [sl, #32]
2400e5ee:	781b      	ldrb	r3, [r3, #0]
2400e5f0:	2be5      	cmp	r3, #229	; 0xe5
2400e5f2:	d1c6      	bne.n	2400e582 <dir_register+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400e5f4:	f108 0801 	add.w	r8, r8, #1
2400e5f8:	9b03      	ldr	r3, [sp, #12]
2400e5fa:	4543      	cmp	r3, r8
2400e5fc:	d1c6      	bne.n	2400e58c <dir_register+0x84>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400e5fe:	9b02      	ldr	r3, [sp, #8]
2400e600:	f8dd b018 	ldr.w	fp, [sp, #24]
2400e604:	2b00      	cmp	r3, #0
2400e606:	f040 82ec 	bne.w	2400ebe2 <dir_register+0x6da>
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e60a:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
2400e60c:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400e612:	4299      	cmp	r1, r3
2400e614:	d005      	beq.n	2400e622 <dir_register+0x11a>
2400e616:	9801      	ldr	r0, [sp, #4]
2400e618:	f7fe fcb6 	bl	2400cf88 <move_window.part.0>
		if (res == FR_OK) {
2400e61c:	2800      	cmp	r0, #0
2400e61e:	f040 82db 	bne.w	2400ebd8 <dir_register+0x6d0>
		*d++ = (BYTE)val;
2400e622:	2220      	movs	r2, #32
2400e624:	2100      	movs	r1, #0
2400e626:	f8da 0020 	ldr.w	r0, [sl, #32]
2400e62a:	f006 ff25 	bl	24015478 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400e62e:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400e632:	f10a 0225 	add.w	r2, sl, #37	; 0x25
2400e636:	1a9a      	subs	r2, r3, r2
2400e638:	2a02      	cmp	r2, #2
2400e63a:	f240 8486 	bls.w	2400ef4a <dir_register+0xa42>
			*d++ = *s++;
2400e63e:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
2400e642:	601a      	str	r2, [r3, #0]
2400e644:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
2400e648:	605a      	str	r2, [r3, #4]
2400e64a:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
2400e64e:	4658      	mov	r0, fp
			*d++ = *s++;
2400e650:	721a      	strb	r2, [r3, #8]
2400e652:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
2400e656:	725a      	strb	r2, [r3, #9]
2400e658:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
2400e65c:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400e65e:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400e660:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
2400e664:	f8da 1020 	ldr.w	r1, [sl, #32]
2400e668:	f003 0318 	and.w	r3, r3, #24
2400e66c:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
2400e66e:	9b01      	ldr	r3, [sp, #4]
2400e670:	70da      	strb	r2, [r3, #3]
}
2400e672:	b013      	add	sp, #76	; 0x4c
2400e674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400e678:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
2400e67a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
2400e67e:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
2400e682:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400e684:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e688:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
2400e68c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
2400e690:	9208      	str	r2, [sp, #32]
2400e692:	9303      	str	r3, [sp, #12]
2400e694:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
2400e698:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
2400e69c:	9305      	str	r3, [sp, #20]
2400e69e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
2400e6a2:	9207      	str	r2, [sp, #28]
2400e6a4:	9304      	str	r3, [sp, #16]
2400e6a6:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
2400e6aa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
2400e6ae:	9302      	str	r3, [sp, #8]
2400e6b0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6b4:	4693      	mov	fp, r2
2400e6b6:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
2400e6b8:	9306      	str	r3, [sp, #24]
2400e6ba:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
2400e6be:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
				if (sr & 0x10000) sr ^= 0x11021;
2400e6c2:	4c1b      	ldr	r4, [pc, #108]	; (2400e730 <dir_register+0x228>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6c4:	461f      	mov	r7, r3
			*d++ = *s++;
2400e6c6:	9109      	str	r1, [sp, #36]	; 0x24
2400e6c8:	9b03      	ldr	r3, [sp, #12]
2400e6ca:	2100      	movs	r1, #0
2400e6cc:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400e6ce:	2e05      	cmp	r6, #5
			*d++ = *s++;
2400e6d0:	f363 0107 	bfi	r1, r3, #0, #8
2400e6d4:	9b05      	ldr	r3, [sp, #20]
2400e6d6:	f363 210f 	bfi	r1, r3, #8, #8
2400e6da:	9b04      	ldr	r3, [sp, #16]
2400e6dc:	f363 4117 	bfi	r1, r3, #16, #8
2400e6e0:	9b02      	ldr	r3, [sp, #8]
2400e6e2:	f363 611f 	bfi	r1, r3, #24, #8
2400e6e6:	9b06      	ldr	r3, [sp, #24]
2400e6e8:	f363 0207 	bfi	r2, r3, #0, #8
2400e6ec:	9b08      	ldr	r3, [sp, #32]
2400e6ee:	f367 220f 	bfi	r2, r7, #8, #8
2400e6f2:	f363 4217 	bfi	r2, r3, #16, #8
2400e6f6:	9b07      	ldr	r3, [sp, #28]
2400e6f8:	f363 621f 	bfi	r2, r3, #24, #8
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400e6fc:	9b01      	ldr	r3, [sp, #4]
2400e6fe:	68d8      	ldr	r0, [r3, #12]
			*d++ = *s++;
2400e700:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400e702:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
2400e706:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
2400e70a:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
2400e70e:	e9ca 1209 	strd	r1, r2, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400e712:	f240 8138 	bls.w	2400e986 <dir_register+0x47e>
		while (*lfn) {	/* Create a CRC */
2400e716:	8802      	ldrh	r2, [r0, #0]
2400e718:	2a00      	cmp	r2, #0
2400e71a:	f000 8134 	beq.w	2400e986 <dir_register+0x47e>
				sr = (sr << 1) + (wc & 1);
2400e71e:	f002 0101 	and.w	r1, r2, #1
2400e722:	4684      	mov	ip, r0
				wc >>= 1;
2400e724:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400e726:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e72a:	e00d      	b.n	2400e748 <dir_register+0x240>
2400e72c:	4ec4ec4f 	.word	0x4ec4ec4f
2400e730:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
2400e734:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e738:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400e73c:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400e740:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e744:	bf18      	it	ne
2400e746:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e748:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400e74c:	0893      	lsrs	r3, r2, #2
2400e74e:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400e750:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e754:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400e756:	f003 0301 	and.w	r3, r3, #1
2400e75a:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e75e:	bf48      	it	mi
2400e760:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
2400e764:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400e766:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e76a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400e76e:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e772:	bf18      	it	ne
2400e774:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e776:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e77a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e77c:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400e780:	bf48      	it	mi
2400e782:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400e784:	f003 0301 	and.w	r3, r3, #1
2400e788:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e78c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e78e:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400e792:	bf48      	it	mi
2400e794:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e796:	f000 0001 	and.w	r0, r0, #1
2400e79a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e79e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e7a0:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400e7a4:	bf48      	it	mi
2400e7a6:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e7a8:	f001 0101 	and.w	r1, r1, #1
2400e7ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7b0:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e7b2:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400e7b6:	bf48      	it	mi
2400e7b8:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400e7ba:	f003 0301 	and.w	r3, r3, #1
2400e7be:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7c2:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e7c4:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400e7c8:	bf48      	it	mi
2400e7ca:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e7cc:	f000 0001 	and.w	r0, r0, #1
2400e7d0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7d4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e7d6:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400e7da:	bf48      	it	mi
2400e7dc:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e7de:	f001 0101 	and.w	r1, r1, #1
2400e7e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7e6:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e7e8:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400e7ec:	bf48      	it	mi
2400e7ee:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400e7f0:	f003 0301 	and.w	r3, r3, #1
2400e7f4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7f8:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e7fa:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400e7fe:	bf48      	it	mi
2400e800:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e802:	f000 0001 	and.w	r0, r0, #1
2400e806:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e80a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e80c:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400e810:	bf48      	it	mi
2400e812:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e814:	f001 0101 	and.w	r1, r1, #1
2400e818:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e81c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e81e:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400e822:	bf48      	it	mi
2400e824:	4060      	eormi	r0, r4
				wc >>= 1;
2400e826:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
2400e828:	f003 0301 	and.w	r3, r3, #1
2400e82c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e830:	0400      	lsls	r0, r0, #16
2400e832:	bf48      	it	mi
2400e834:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e836:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e83a:	0408      	lsls	r0, r1, #16
2400e83c:	bf48      	it	mi
2400e83e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e840:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e844:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
2400e846:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400e84a:	bf48      	it	mi
2400e84c:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
2400e850:	2a00      	cmp	r2, #0
2400e852:	f47f af6f 	bne.w	2400e734 <dir_register+0x22c>
		c = (BYTE)((seq % 16) + '0');
2400e856:	f00e 010f 	and.w	r1, lr, #15
2400e85a:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e85e:	2a39      	cmp	r2, #57	; 0x39
2400e860:	bf88      	it	hi
2400e862:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e866:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400e86a:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400e86e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
2400e872:	f240 8156 	bls.w	2400eb22 <dir_register+0x61a>
		c = (BYTE)((seq % 16) + '0');
2400e876:	f001 000f 	and.w	r0, r1, #15
2400e87a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e87e:	2a39      	cmp	r2, #57	; 0x39
2400e880:	bf88      	it	hi
2400e882:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e886:	290f      	cmp	r1, #15
		seq /= 16;
2400e888:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400e88c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
2400e890:	f240 814d 	bls.w	2400eb2e <dir_register+0x626>
		c = (BYTE)((seq % 16) + '0');
2400e894:	f000 010f 	and.w	r1, r0, #15
2400e898:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e89c:	2a39      	cmp	r2, #57	; 0x39
2400e89e:	bf88      	it	hi
2400e8a0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e8a4:	280f      	cmp	r0, #15
		seq /= 16;
2400e8a6:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400e8aa:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
2400e8ae:	f240 8144 	bls.w	2400eb3a <dir_register+0x632>
		c = (BYTE)((seq % 16) + '0');
2400e8b2:	f001 000f 	and.w	r0, r1, #15
2400e8b6:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e8ba:	2a39      	cmp	r2, #57	; 0x39
2400e8bc:	bf88      	it	hi
2400e8be:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e8c2:	290f      	cmp	r1, #15
		seq /= 16;
2400e8c4:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400e8c8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
2400e8cc:	f240 816c 	bls.w	2400eba8 <dir_register+0x6a0>
		c = (BYTE)((seq % 16) + '0');
2400e8d0:	f000 010f 	and.w	r1, r0, #15
2400e8d4:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e8d8:	2a39      	cmp	r2, #57	; 0x39
2400e8da:	bf88      	it	hi
2400e8dc:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e8e0:	280f      	cmp	r0, #15
		seq /= 16;
2400e8e2:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400e8e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
2400e8ea:	f240 8163 	bls.w	2400ebb4 <dir_register+0x6ac>
		c = (BYTE)((seq % 16) + '0');
2400e8ee:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400e8f2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400e8f6:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e8fa:	2a39      	cmp	r2, #57	; 0x39
2400e8fc:	bf88      	it	hi
2400e8fe:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e902:	290f      	cmp	r1, #15
		ns[i--] = c;
2400e904:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
2400e908:	f240 815a 	bls.w	2400ebc0 <dir_register+0x6b8>
		c = (BYTE)((seq % 16) + '0');
2400e90c:	f00e 010f 	and.w	r1, lr, #15
2400e910:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e914:	2a39      	cmp	r2, #57	; 0x39
2400e916:	bf88      	it	hi
2400e918:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e91c:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400e920:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
2400e924:	f240 810f 	bls.w	2400eb46 <dir_register+0x63e>
		ns[i--] = c;
2400e928:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400e92c:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e930:	2200      	movs	r2, #0
2400e932:	e002      	b.n	2400e93a <dir_register+0x432>
2400e934:	3201      	adds	r2, #1
2400e936:	4562      	cmp	r2, ip
2400e938:	d003      	beq.n	2400e942 <dir_register+0x43a>
2400e93a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400e93e:	2b20      	cmp	r3, #32
2400e940:	d1f8      	bne.n	2400e934 <dir_register+0x42c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e942:	f1bc 0f07 	cmp.w	ip, #7
2400e946:	d920      	bls.n	2400e98a <dir_register+0x482>
2400e948:	1c50      	adds	r0, r2, #1
2400e94a:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400e94e:	2807      	cmp	r0, #7
2400e950:	d809      	bhi.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e952:	1c42      	adds	r2, r0, #1
2400e954:	2120      	movs	r1, #32
2400e956:	2a08      	cmp	r2, #8
2400e958:	f1c0 0208 	rsb	r2, r0, #8
2400e95c:	4428      	add	r0, r5
2400e95e:	bf88      	it	hi
2400e960:	2201      	movhi	r2, #1
2400e962:	f006 fd89 	bl	24015478 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400e966:	4650      	mov	r0, sl
2400e968:	f7ff f9fc 	bl	2400dd64 <dir_find>
			if (res != FR_OK) break;
2400e96c:	2800      	cmp	r0, #0
2400e96e:	f040 8083 	bne.w	2400ea78 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
2400e972:	3601      	adds	r6, #1
2400e974:	2e64      	cmp	r6, #100	; 0x64
2400e976:	f47f aea7 	bne.w	2400e6c8 <dir_register+0x1c0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400e97a:	f04f 0b07 	mov.w	fp, #7
}
2400e97e:	4658      	mov	r0, fp
2400e980:	b013      	add	sp, #76	; 0x4c
2400e982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400e986:	46b6      	mov	lr, r6
2400e988:	e765      	b.n	2400e856 <dir_register+0x34e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e98a:	f10c 0348 	add.w	r3, ip, #72	; 0x48
2400e98e:	f10c 0c01 	add.w	ip, ip, #1
2400e992:	eb0d 0103 	add.w	r1, sp, r3
2400e996:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e99a:	54a9      	strb	r1, [r5, r2]
2400e99c:	3201      	adds	r2, #1
	} while (j < 8);
2400e99e:	2a07      	cmp	r2, #7
2400e9a0:	d8e1      	bhi.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9a2:	f1bc 0f08 	cmp.w	ip, #8
2400e9a6:	f000 8085 	beq.w	2400eab4 <dir_register+0x5ac>
2400e9aa:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
2400e9ae:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9b0:	f102 0001 	add.w	r0, r2, #1
2400e9b4:	eb0d 0103 	add.w	r1, sp, r3
2400e9b8:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e9bc:	54a9      	strb	r1, [r5, r2]
2400e9be:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400e9c2:	d0d0      	beq.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9c4:	2908      	cmp	r1, #8
2400e9c6:	d07d      	beq.n	2400eac4 <dir_register+0x5bc>
2400e9c8:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
2400e9cc:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9ce:	eb0d 0103 	add.w	r1, sp, r3
2400e9d2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e9d6:	5429      	strb	r1, [r5, r0]
2400e9d8:	f10c 0102 	add.w	r1, ip, #2
2400e9dc:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400e9e0:	d0c1      	beq.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9e2:	2908      	cmp	r1, #8
2400e9e4:	d076      	beq.n	2400ead4 <dir_register+0x5cc>
2400e9e6:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
2400e9ea:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9ec:	eb0d 0103 	add.w	r1, sp, r3
2400e9f0:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e9f4:	5429      	strb	r1, [r5, r0]
2400e9f6:	f10c 0103 	add.w	r1, ip, #3
2400e9fa:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400e9fe:	d0b2      	beq.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea00:	2908      	cmp	r1, #8
2400ea02:	d06f      	beq.n	2400eae4 <dir_register+0x5dc>
2400ea04:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
2400ea08:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea0a:	eb0d 0103 	add.w	r1, sp, r3
2400ea0e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea12:	5429      	strb	r1, [r5, r0]
2400ea14:	f10c 0104 	add.w	r1, ip, #4
2400ea18:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400ea1c:	d0a3      	beq.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea1e:	2908      	cmp	r1, #8
2400ea20:	d068      	beq.n	2400eaf4 <dir_register+0x5ec>
2400ea22:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
2400ea26:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea28:	eb0d 0103 	add.w	r1, sp, r3
2400ea2c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea30:	5429      	strb	r1, [r5, r0]
2400ea32:	f10c 0105 	add.w	r1, ip, #5
2400ea36:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400ea3a:	d094      	beq.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea3c:	2908      	cmp	r1, #8
2400ea3e:	d061      	beq.n	2400eb04 <dir_register+0x5fc>
2400ea40:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
2400ea44:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea46:	eb0d 0103 	add.w	r1, sp, r3
2400ea4a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea4e:	5429      	strb	r1, [r5, r0]
2400ea50:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400ea54:	d087      	beq.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea56:	f1bc 0f01 	cmp.w	ip, #1
2400ea5a:	d15b      	bne.n	2400eb14 <dir_register+0x60c>
2400ea5c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
2400ea60:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea62:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
2400ea64:	f47f af7f 	bne.w	2400e966 <dir_register+0x45e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400ea68:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea6a:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400ea6e:	f7ff f979 	bl	2400dd64 <dir_find>
			if (res != FR_OK) break;
2400ea72:	2800      	cmp	r0, #0
2400ea74:	f43f af7d 	beq.w	2400e972 <dir_register+0x46a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400ea78:	2804      	cmp	r0, #4
2400ea7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
2400ea7c:	4683      	mov	fp, r0
2400ea7e:	f47f af7e 	bne.w	2400e97e <dir_register+0x476>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400ea82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
2400ea84:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
2400ea88:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ea8c:	f013 0302 	ands.w	r3, r3, #2
2400ea90:	f47f ad61 	bne.w	2400e556 <dir_register+0x4e>
2400ea94:	9302      	str	r3, [sp, #8]
2400ea96:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
2400ea98:	2100      	movs	r1, #0
2400ea9a:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ea9c:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400ea9e:	f7ff f8a7 	bl	2400dbf0 <dir_sdi>
	if (res == FR_OK) {
2400eaa2:	4683      	mov	fp, r0
2400eaa4:	2800      	cmp	r0, #0
2400eaa6:	f43f ad67 	beq.w	2400e578 <dir_register+0x70>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400eaaa:	f1bb 0f04 	cmp.w	fp, #4
2400eaae:	f43f af64 	beq.w	2400e97a <dir_register+0x472>
2400eab2:	e764      	b.n	2400e97e <dir_register+0x476>
	} while (j < 8);
2400eab4:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eab6:	f102 0001 	add.w	r0, r2, #1
2400eaba:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400eabe:	f47f af48 	bne.w	2400e952 <dir_register+0x44a>
2400eac2:	e750      	b.n	2400e966 <dir_register+0x45e>
2400eac4:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eac6:	f805 9000 	strb.w	r9, [r5, r0]
2400eaca:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400eace:	f47f af40 	bne.w	2400e952 <dir_register+0x44a>
2400ead2:	e748      	b.n	2400e966 <dir_register+0x45e>
2400ead4:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ead6:	f805 9000 	strb.w	r9, [r5, r0]
2400eada:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400eade:	f47f af38 	bne.w	2400e952 <dir_register+0x44a>
2400eae2:	e740      	b.n	2400e966 <dir_register+0x45e>
2400eae4:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eae6:	f805 9000 	strb.w	r9, [r5, r0]
2400eaea:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400eaee:	f47f af30 	bne.w	2400e952 <dir_register+0x44a>
2400eaf2:	e738      	b.n	2400e966 <dir_register+0x45e>
2400eaf4:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eaf6:	f805 9000 	strb.w	r9, [r5, r0]
2400eafa:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400eafe:	f47f af28 	bne.w	2400e952 <dir_register+0x44a>
2400eb02:	e730      	b.n	2400e966 <dir_register+0x45e>
2400eb04:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb06:	f805 9000 	strb.w	r9, [r5, r0]
2400eb0a:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400eb0e:	f47f af20 	bne.w	2400e952 <dir_register+0x44a>
2400eb12:	e728      	b.n	2400e966 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb14:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
2400eb18:	2a00      	cmp	r2, #0
2400eb1a:	f47f af24 	bne.w	2400e966 <dir_register+0x45e>
2400eb1e:	2007      	movs	r0, #7
2400eb20:	e717      	b.n	2400e952 <dir_register+0x44a>
	ns[i] = '~';
2400eb22:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eb24:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400eb28:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eb2c:	e6fe      	b.n	2400e92c <dir_register+0x424>
	ns[i] = '~';
2400eb2e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eb30:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400eb34:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eb38:	e6f8      	b.n	2400e92c <dir_register+0x424>
	ns[i] = '~';
2400eb3a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eb3c:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400eb40:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eb44:	e6f2      	b.n	2400e92c <dir_register+0x424>
	ns[i] = '~';
2400eb46:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb48:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400eb4c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb50:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
2400eb54:	4662      	mov	r2, ip
2400eb56:	e728      	b.n	2400e9aa <dir_register+0x4a2>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400eb58:	8962      	ldrh	r2, [r4, #10]
2400eb5a:	3a01      	subs	r2, #1
2400eb5c:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400eb60:	f47f ad32 	bne.w	2400e5c8 <dir_register+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400eb64:	4619      	mov	r1, r3
2400eb66:	4620      	mov	r0, r4
2400eb68:	f7fe fc5a 	bl	2400d420 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400eb6c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400eb6e:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400eb70:	f240 8205 	bls.w	2400ef7e <dir_register+0xa76>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400eb74:	1c42      	adds	r2, r0, #1
2400eb76:	f000 80dd 	beq.w	2400ed34 <dir_register+0x82c>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400eb7a:	69a3      	ldr	r3, [r4, #24]
2400eb7c:	4298      	cmp	r0, r3
2400eb7e:	f080 80e9 	bcs.w	2400ed54 <dir_register+0x84c>
	clst -= 2;
2400eb82:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400eb86:	f104 0634 	add.w	r6, r4, #52	; 0x34
2400eb8a:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
2400eb8c:	f8ca 3018 	str.w	r3, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400eb90:	69a3      	ldr	r3, [r4, #24]
2400eb92:	3b02      	subs	r3, #2
2400eb94:	455b      	cmp	r3, fp
2400eb96:	f240 813a 	bls.w	2400ee0e <dir_register+0x906>
	return clst * fs->csize + fs->database;
2400eb9a:	8963      	ldrh	r3, [r4, #10]
2400eb9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400eb9e:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
2400eba2:	f8ca 101c 	str.w	r1, [sl, #28]
2400eba6:	e511      	b.n	2400e5cc <dir_register+0xc4>
	ns[i] = '~';
2400eba8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ebaa:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400ebae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ebb2:	e6bb      	b.n	2400e92c <dir_register+0x424>
	ns[i] = '~';
2400ebb4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ebb6:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400ebba:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ebbe:	e6b5      	b.n	2400e92c <dir_register+0x424>
	ns[i] = '~';
2400ebc0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ebc2:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400ebc6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ebca:	e6af      	b.n	2400e92c <dir_register+0x424>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400ebcc:	f04f 0b06 	mov.w	fp, #6
}
2400ebd0:	4658      	mov	r0, fp
2400ebd2:	b013      	add	sp, #76	; 0x4c
2400ebd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400ebd8:	4683      	mov	fp, r0
2400ebda:	4658      	mov	r0, fp
2400ebdc:	b013      	add	sp, #76	; 0x4c
2400ebde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400ebe2:	f8da 1014 	ldr.w	r1, [sl, #20]
2400ebe6:	4650      	mov	r0, sl
2400ebe8:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
2400ebec:	f7ff f800 	bl	2400dbf0 <dir_sdi>
		if (res == FR_OK) {
2400ebf0:	4605      	mov	r5, r0
2400ebf2:	2800      	cmp	r0, #0
2400ebf4:	f040 8109 	bne.w	2400ee0a <dir_register+0x902>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ebf8:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400ebfc:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ec00:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
2400ec04:	01cb      	lsls	r3, r1, #7
2400ec06:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
2400ec0a:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400ec0e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
2400ec12:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
2400ec16:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
2400ec1a:	1919      	adds	r1, r3, r4
2400ec1c:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
2400ec20:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
2400ec24:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ec28:	f3c1 0346 	ubfx	r3, r1, #1, #7
2400ec2c:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
2400ec30:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
2400ec34:	fa50 f383 	uxtab	r3, r0, r3
2400ec38:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
2400ec3c:	f3c3 0146 	ubfx	r1, r3, #1, #7
2400ec40:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
2400ec44:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
2400ec48:	fa52 f283 	uxtab	r2, r2, r3
2400ec4c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ec50:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ec54:	fa58 f883 	uxtab	r8, r8, r3
2400ec58:	f3c8 0346 	ubfx	r3, r8, #1, #7
2400ec5c:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
2400ec60:	fa5e fe83 	uxtab	lr, lr, r3
2400ec64:	f3ce 0346 	ubfx	r3, lr, #1, #7
2400ec68:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
2400ec6c:	fa5c fc83 	uxtab	ip, ip, r3
2400ec70:	f3cc 0346 	ubfx	r3, ip, #1, #7
2400ec74:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
2400ec78:	fa57 f783 	uxtab	r7, r7, r3
2400ec7c:	f3c7 0346 	ubfx	r3, r7, #1, #7
2400ec80:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
2400ec84:	fa56 f683 	uxtab	r6, r6, r3
2400ec88:	f3c6 0346 	ubfx	r3, r6, #1, #7
2400ec8c:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
2400ec90:	9e01      	ldr	r6, [sp, #4]
2400ec92:	fa50 f083 	uxtab	r0, r0, r3
2400ec96:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400ec9a:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
2400ec9e:	fa51 f180 	uxtab	r1, r1, r0
2400eca2:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
2400eca6:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ecaa:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400ecac:	4299      	cmp	r1, r3
2400ecae:	d004      	beq.n	2400ecba <dir_register+0x7b2>
2400ecb0:	4630      	mov	r0, r6
2400ecb2:	f7fe f969 	bl	2400cf88 <move_window.part.0>
				if (res != FR_OK) break;
2400ecb6:	2800      	cmp	r0, #0
2400ecb8:	d18e      	bne.n	2400ebd8 <dir_register+0x6d0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400ecba:	f89d 0008 	ldrb.w	r0, [sp, #8]
2400ecbe:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400ecc0:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400ecc2:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400ecc6:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400ecca:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400ecce:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400ecd2:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
2400ecd6:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400ecd8:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
2400ecda:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ecdc:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
2400ece0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
2400ece4:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
2400ece6:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ecea:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ecee:	2f00      	cmp	r7, #0
2400ecf0:	f040 808f 	bne.w	2400ee12 <dir_register+0x90a>
	*ptr++ = (BYTE)val; val >>= 8;
2400ecf4:	f8a3 4003 	strh.w	r4, [r3, #3]
2400ecf8:	f8a3 4005 	strh.w	r4, [r3, #5]
2400ecfc:	f8a3 4007 	strh.w	r4, [r3, #7]
2400ed00:	f8a3 4009 	strh.w	r4, [r3, #9]
2400ed04:	81dc      	strh	r4, [r3, #14]
2400ed06:	821c      	strh	r4, [r3, #16]
2400ed08:	825c      	strh	r4, [r3, #18]
2400ed0a:	829c      	strh	r4, [r3, #20]
2400ed0c:	82dc      	strh	r4, [r3, #22]
2400ed0e:	831c      	strh	r4, [r3, #24]
2400ed10:	839c      	strh	r4, [r3, #28]
2400ed12:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400ed14:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400ed18:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
2400ed1a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400ed1c:	4650      	mov	r0, sl
				fs->wflag = 1;
2400ed1e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400ed20:	f7fe fbde 	bl	2400d4e0 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
2400ed24:	2800      	cmp	r0, #0
2400ed26:	f47f af57 	bne.w	2400ebd8 <dir_register+0x6d0>
2400ed2a:	9b02      	ldr	r3, [sp, #8]
2400ed2c:	3b01      	subs	r3, #1
2400ed2e:	9302      	str	r3, [sp, #8]
2400ed30:	d1b9      	bne.n	2400eca6 <dir_register+0x79e>
2400ed32:	e46a      	b.n	2400e60a <dir_register+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ed34:	f04f 0b01 	mov.w	fp, #1
}
2400ed38:	4658      	mov	r0, fp
2400ed3a:	b013      	add	sp, #76	; 0x4c
2400ed3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400ed40:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
2400ed44:	f8ca 301c 	str.w	r3, [sl, #28]
}
2400ed48:	4658      	mov	r0, fp
2400ed4a:	b013      	add	sp, #76	; 0x4c
2400ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400ed50:	4683      	mov	fp, r0
2400ed52:	e6aa      	b.n	2400eaaa <dir_register+0x5a2>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400ed54:	f8da 1018 	ldr.w	r1, [sl, #24]
2400ed58:	4650      	mov	r0, sl
2400ed5a:	f7fe fe79 	bl	2400da50 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400ed5e:	4603      	mov	r3, r0
2400ed60:	9004      	str	r0, [sp, #16]
2400ed62:	2800      	cmp	r0, #0
2400ed64:	f43f ae09 	beq.w	2400e97a <dir_register+0x472>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400ed68:	2801      	cmp	r0, #1
2400ed6a:	f000 8108 	beq.w	2400ef7e <dir_register+0xa76>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400ed6e:	3301      	adds	r3, #1
2400ed70:	d0e0      	beq.n	2400ed34 <dir_register+0x82c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ed72:	78e3      	ldrb	r3, [r4, #3]
2400ed74:	2b00      	cmp	r3, #0
2400ed76:	f040 810d 	bne.w	2400ef94 <dir_register+0xa8c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ed7a:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400ed7e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ed82:	2100      	movs	r1, #0
2400ed84:	4630      	mov	r0, r6
2400ed86:	f006 fb77 	bl	24015478 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ed8a:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
2400ed8c:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ed8e:	3b02      	subs	r3, #2
	clst -= 2;
2400ed90:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ed94:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
2400ed96:	8963      	ldrh	r3, [r4, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ed98:	f080 80fa 	bcs.w	2400ef90 <dir_register+0xa88>
	return clst * fs->csize + fs->database;
2400ed9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400ed9e:	fb0b 2203 	mla	r2, fp, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400eda2:	6322      	str	r2, [r4, #48]	; 0x30
2400eda4:	2b00      	cmp	r3, #0
2400eda6:	f000 80f0 	beq.w	2400ef8a <dir_register+0xa82>
2400edaa:	2300      	movs	r3, #0
2400edac:	e9cd 5707 	strd	r5, r7, [sp, #28]
2400edb0:	4617      	mov	r7, r2
2400edb2:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
2400edb4:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400edb8:	463a      	mov	r2, r7
2400edba:	4631      	mov	r1, r6
2400edbc:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
2400edbe:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400edc0:	2301      	movs	r3, #1
2400edc2:	f7fd ff41 	bl	2400cc48 <disk_write>
2400edc6:	2800      	cmp	r0, #0
2400edc8:	d1b4      	bne.n	2400ed34 <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400edca:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
2400edcc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400edce:	1af8      	subs	r0, r7, r3
2400edd0:	69e3      	ldr	r3, [r4, #28]
2400edd2:	4298      	cmp	r0, r3
2400edd4:	d20e      	bcs.n	2400edf4 <dir_register+0x8ec>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400edd6:	78a5      	ldrb	r5, [r4, #2]
2400edd8:	2d01      	cmp	r5, #1
2400edda:	d801      	bhi.n	2400ede0 <dir_register+0x8d8>
2400eddc:	e00a      	b.n	2400edf4 <dir_register+0x8ec>
					wsect += fs->fsize;
2400edde:	69e3      	ldr	r3, [r4, #28]
2400ede0:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ede2:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ede4:	2301      	movs	r3, #1
2400ede6:	4631      	mov	r1, r6
2400ede8:	463a      	mov	r2, r7
2400edea:	7860      	ldrb	r0, [r4, #1]
2400edec:	f7fd ff2c 	bl	2400cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400edf0:	2d01      	cmp	r5, #1
2400edf2:	d1f4      	bne.n	2400edde <dir_register+0x8d6>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400edf4:	9a05      	ldr	r2, [sp, #20]
2400edf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400edf8:	1c50      	adds	r0, r2, #1
2400edfa:	8965      	ldrh	r5, [r4, #10]
2400edfc:	1c5f      	adds	r7, r3, #1
2400edfe:	42a8      	cmp	r0, r5
2400ee00:	6327      	str	r7, [r4, #48]	; 0x30
2400ee02:	f080 80bf 	bcs.w	2400ef84 <dir_register+0xa7c>
2400ee06:	9005      	str	r0, [sp, #20]
2400ee08:	e7d4      	b.n	2400edb4 <dir_register+0x8ac>
2400ee0a:	4683      	mov	fp, r0
2400ee0c:	e5b7      	b.n	2400e97e <dir_register+0x476>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ee0e:	2100      	movs	r1, #0
2400ee10:	e6c7      	b.n	2400eba2 <dir_register+0x69a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee12:	42a7      	cmp	r7, r4
2400ee14:	f43f af6e 	beq.w	2400ecf4 <dir_register+0x7ec>
2400ee18:	3201      	adds	r2, #1
2400ee1a:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
2400ee1e:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400ee20:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee24:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
2400ee26:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ee2a:	2f00      	cmp	r7, #0
2400ee2c:	f43f af64 	beq.w	2400ecf8 <dir_register+0x7f0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee30:	42a7      	cmp	r7, r4
2400ee32:	f43f af61 	beq.w	2400ecf8 <dir_register+0x7f0>
2400ee36:	440a      	add	r2, r1
2400ee38:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee3a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee3e:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
2400ee40:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ee44:	2f00      	cmp	r7, #0
2400ee46:	f43f af59 	beq.w	2400ecfc <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee4a:	42a7      	cmp	r7, r4
2400ee4c:	f43f af56 	beq.w	2400ecfc <dir_register+0x7f4>
2400ee50:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee52:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee56:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
2400ee58:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ee5c:	2f00      	cmp	r7, #0
2400ee5e:	f43f af4f 	beq.w	2400ed00 <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee62:	42a7      	cmp	r7, r4
2400ee64:	f43f af4c 	beq.w	2400ed00 <dir_register+0x7f8>
2400ee68:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee6a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee6e:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
2400ee70:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ee74:	2f00      	cmp	r7, #0
2400ee76:	f43f af45 	beq.w	2400ed04 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee7a:	42a7      	cmp	r7, r4
2400ee7c:	f43f af42 	beq.w	2400ed04 <dir_register+0x7fc>
2400ee80:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee82:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee86:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
2400ee88:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ee8c:	2f00      	cmp	r7, #0
2400ee8e:	f43f af3a 	beq.w	2400ed06 <dir_register+0x7fe>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee92:	42a7      	cmp	r7, r4
2400ee94:	f43f af37 	beq.w	2400ed06 <dir_register+0x7fe>
2400ee98:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee9a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee9e:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
2400eea0:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eea4:	2f00      	cmp	r7, #0
2400eea6:	f43f af2f 	beq.w	2400ed08 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eeaa:	42a7      	cmp	r7, r4
2400eeac:	f43f af2c 	beq.w	2400ed08 <dir_register+0x800>
2400eeb0:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400eeb2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eeb6:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
2400eeb8:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eebc:	2f00      	cmp	r7, #0
2400eebe:	f43f af24 	beq.w	2400ed0a <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eec2:	42a7      	cmp	r7, r4
2400eec4:	f43f af21 	beq.w	2400ed0a <dir_register+0x802>
2400eec8:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400eeca:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eece:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
2400eed0:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eed4:	2f00      	cmp	r7, #0
2400eed6:	f43f af19 	beq.w	2400ed0c <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eeda:	42a7      	cmp	r7, r4
2400eedc:	f43f af16 	beq.w	2400ed0c <dir_register+0x804>
2400eee0:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
2400eee2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eee6:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
2400eee8:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eeec:	2f00      	cmp	r7, #0
2400eeee:	f43f af0e 	beq.w	2400ed0e <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eef2:	42a7      	cmp	r7, r4
2400eef4:	f43f af0b 	beq.w	2400ed0e <dir_register+0x806>
2400eef8:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
2400eefa:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eefe:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
2400ef00:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef04:	2f00      	cmp	r7, #0
2400ef06:	f43f af03 	beq.w	2400ed10 <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef0a:	42a7      	cmp	r7, r4
2400ef0c:	f43f af00 	beq.w	2400ed10 <dir_register+0x808>
2400ef10:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
2400ef12:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ef16:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
2400ef18:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef1c:	2f00      	cmp	r7, #0
2400ef1e:	f43f aef8 	beq.w	2400ed12 <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef22:	42a7      	cmp	r7, r4
2400ef24:	f43f aef5 	beq.w	2400ed12 <dir_register+0x80a>
2400ef28:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef2a:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400ef2c:	779a      	strb	r2, [r3, #30]
2400ef2e:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef30:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
2400ef32:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef34:	f64f 72fd 	movw	r2, #65533	; 0xfffd
2400ef38:	4297      	cmp	r7, r2
2400ef3a:	f63f aeeb 	bhi.w	2400ed14 <dir_register+0x80c>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400ef3e:	4461      	add	r1, ip
2400ef40:	8b4a      	ldrh	r2, [r1, #26]
2400ef42:	2a00      	cmp	r2, #0
2400ef44:	f47f aee8 	bne.w	2400ed18 <dir_register+0x810>
2400ef48:	e6e4      	b.n	2400ed14 <dir_register+0x80c>
			*d++ = *s++;
2400ef4a:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
2400ef4e:	701a      	strb	r2, [r3, #0]
2400ef50:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
2400ef54:	705a      	strb	r2, [r3, #1]
2400ef56:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
2400ef5a:	709a      	strb	r2, [r3, #2]
2400ef5c:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400ef60:	70da      	strb	r2, [r3, #3]
2400ef62:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
2400ef66:	711a      	strb	r2, [r3, #4]
2400ef68:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
2400ef6c:	715a      	strb	r2, [r3, #5]
2400ef6e:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
2400ef72:	719a      	strb	r2, [r3, #6]
2400ef74:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
2400ef78:	71da      	strb	r2, [r3, #7]
2400ef7a:	f7ff bb66 	b.w	2400e64a <dir_register+0x142>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ef7e:	f04f 0b02 	mov.w	fp, #2
2400ef82:	e4fc      	b.n	2400e97e <dir_register+0x476>
					fs->winsect -= n;							/* Restore window offset */
2400ef84:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
2400ef88:	1a9a      	subs	r2, r3, r2
2400ef8a:	9b04      	ldr	r3, [sp, #16]
2400ef8c:	6322      	str	r2, [r4, #48]	; 0x30
2400ef8e:	e5fd      	b.n	2400eb8c <dir_register+0x684>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ef90:	2200      	movs	r2, #0
2400ef92:	e706      	b.n	2400eda2 <dir_register+0x89a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ef94:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
2400ef98:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ef9a:	2301      	movs	r3, #1
2400ef9c:	7860      	ldrb	r0, [r4, #1]
2400ef9e:	4631      	mov	r1, r6
2400efa0:	9205      	str	r2, [sp, #20]
2400efa2:	f7fd fe51 	bl	2400cc48 <disk_write>
2400efa6:	2800      	cmp	r0, #0
2400efa8:	f47f aec4 	bne.w	2400ed34 <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400efac:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400efae:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
2400efb0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400efb2:	1ad1      	subs	r1, r2, r3
2400efb4:	69e3      	ldr	r3, [r4, #28]
2400efb6:	4299      	cmp	r1, r3
2400efb8:	f4bf aee1 	bcs.w	2400ed7e <dir_register+0x876>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400efbc:	f894 b002 	ldrb.w	fp, [r4, #2]
2400efc0:	f1bb 0f01 	cmp.w	fp, #1
2400efc4:	f67f aedb 	bls.w	2400ed7e <dir_register+0x876>
2400efc8:	4631      	mov	r1, r6
2400efca:	462e      	mov	r6, r5
2400efcc:	4625      	mov	r5, r4
2400efce:	4614      	mov	r4, r2
2400efd0:	e000      	b.n	2400efd4 <dir_register+0xacc>
					wsect += fs->fsize;
2400efd2:	69eb      	ldr	r3, [r5, #28]
2400efd4:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400efd6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400efda:	2301      	movs	r3, #1
2400efdc:	7868      	ldrb	r0, [r5, #1]
2400efde:	4622      	mov	r2, r4
2400efe0:	9105      	str	r1, [sp, #20]
2400efe2:	f7fd fe31 	bl	2400cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400efe6:	f1bb 0f01 	cmp.w	fp, #1
2400efea:	9905      	ldr	r1, [sp, #20]
2400efec:	d1f1      	bne.n	2400efd2 <dir_register+0xaca>
2400efee:	462c      	mov	r4, r5
2400eff0:	4635      	mov	r5, r6
2400eff2:	460e      	mov	r6, r1
2400eff4:	e6c3      	b.n	2400ed7e <dir_register+0x876>
2400eff6:	bf00      	nop

2400eff8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400eff8:	b510      	push	{r4, lr}
2400effa:	b082      	sub	sp, #8
2400effc:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400f000:	b1a1      	cbz	r1, 2400f02c <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f002:	f891 c000 	ldrb.w	ip, [r1]
2400f006:	f1bc 0f1f 	cmp.w	ip, #31
2400f00a:	d912      	bls.n	2400f032 <f_mount+0x3a>
2400f00c:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400f010:	d00f      	beq.n	2400f032 <f_mount+0x3a>
2400f012:	4608      	mov	r0, r1
2400f014:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400f018:	2b1f      	cmp	r3, #31
2400f01a:	d90c      	bls.n	2400f036 <f_mount+0x3e>
2400f01c:	2b3a      	cmp	r3, #58	; 0x3a
2400f01e:	d1f9      	bne.n	2400f014 <f_mount+0x1c>
			i = *tp++ - '0';
2400f020:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400f022:	4288      	cmp	r0, r1
2400f024:	d102      	bne.n	2400f02c <f_mount+0x34>
2400f026:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400f02a:	d006      	beq.n	2400f03a <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400f02c:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400f02e:	b002      	add	sp, #8
2400f030:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f032:	4663      	mov	r3, ip
2400f034:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400f036:	2b3a      	cmp	r3, #58	; 0x3a
2400f038:	d0f2      	beq.n	2400f020 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400f03a:	4916      	ldr	r1, [pc, #88]	; (2400f094 <f_mount+0x9c>)
2400f03c:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400f03e:	b143      	cbz	r3, 2400f052 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f040:	4815      	ldr	r0, [pc, #84]	; (2400f098 <f_mount+0xa0>)
2400f042:	6804      	ldr	r4, [r0, #0]
2400f044:	42a3      	cmp	r3, r4
2400f046:	d01c      	beq.n	2400f082 <f_mount+0x8a>
2400f048:	6904      	ldr	r4, [r0, #16]
2400f04a:	429c      	cmp	r4, r3
2400f04c:	d016      	beq.n	2400f07c <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
2400f04e:	2000      	movs	r0, #0
2400f050:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400f052:	9b01      	ldr	r3, [sp, #4]
2400f054:	b173      	cbz	r3, 2400f074 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
2400f056:	2000      	movs	r0, #0
2400f058:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
2400f05a:	9b01      	ldr	r3, [sp, #4]
2400f05c:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f05e:	b1b3      	cbz	r3, 2400f08e <f_mount+0x96>
2400f060:	3a01      	subs	r2, #1
2400f062:	bf18      	it	ne
2400f064:	2201      	movne	r2, #1
2400f066:	b992      	cbnz	r2, 2400f08e <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400f068:	a901      	add	r1, sp, #4
2400f06a:	4668      	mov	r0, sp
2400f06c:	f7fd ffc6 	bl	2400cffc <find_volume>
}
2400f070:	b002      	add	sp, #8
2400f072:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f074:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400f076:	600b      	str	r3, [r1, #0]
}
2400f078:	b002      	add	sp, #8
2400f07a:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f07c:	2400      	movs	r4, #0
2400f07e:	6104      	str	r4, [r0, #16]
2400f080:	e7e5      	b.n	2400f04e <f_mount+0x56>
2400f082:	2400      	movs	r4, #0
2400f084:	6004      	str	r4, [r0, #0]
2400f086:	6904      	ldr	r4, [r0, #16]
2400f088:	429c      	cmp	r4, r3
2400f08a:	d1e0      	bne.n	2400f04e <f_mount+0x56>
2400f08c:	e7f6      	b.n	2400f07c <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f08e:	2000      	movs	r0, #0
}
2400f090:	b002      	add	sp, #8
2400f092:	bd10      	pop	{r4, pc}
2400f094:	2001d8d0 	.word	0x2001d8d0
2400f098:	2001d8d4 	.word	0x2001d8d4

2400f09c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400f09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400f0a0:	b092      	sub	sp, #72	; 0x48
2400f0a2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400f0a4:	2800      	cmp	r0, #0
2400f0a6:	f000 80a1 	beq.w	2400f1ec <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400f0aa:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400f0ae:	4616      	mov	r6, r2
2400f0b0:	4604      	mov	r4, r0
2400f0b2:	a903      	add	r1, sp, #12
2400f0b4:	a801      	add	r0, sp, #4
2400f0b6:	463a      	mov	r2, r7
2400f0b8:	f7fd ffa0 	bl	2400cffc <find_volume>
	if (res == FR_OK) {
2400f0bc:	4605      	mov	r5, r0
2400f0be:	b128      	cbz	r0, 2400f0cc <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400f0c0:	2300      	movs	r3, #0
2400f0c2:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400f0c4:	4628      	mov	r0, r5
2400f0c6:	b012      	add	sp, #72	; 0x48
2400f0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400f0cc:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f0ce:	a804      	add	r0, sp, #16
2400f0d0:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400f0d2:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f0d4:	f7fe ffee 	bl	2400e0b4 <follow_path>
		if (res == FR_OK) {
2400f0d8:	bb00      	cbnz	r0, 2400f11c <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400f0da:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400f0de:	2b00      	cmp	r3, #0
2400f0e0:	f2c0 808b 	blt.w	2400f1fa <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
2400f0e4:	4ba7      	ldr	r3, [pc, #668]	; (2400f384 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f0e6:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f0ea:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400f0ec:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f0f0:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
2400f0f2:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400f0f6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400f0fa:	f1b8 0f00 	cmp.w	r8, #0
2400f0fe:	f000 80fd 	beq.w	2400f2fc <f_open+0x260>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f102:	4580      	cmp	r8, r0
2400f104:	d07b      	beq.n	2400f1fe <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
2400f106:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400f10a:	f1b8 0f00 	cmp.w	r8, #0
2400f10e:	f000 808e 	beq.w	2400f22e <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f112:	4580      	cmp	r8, r0
2400f114:	f000 8102 	beq.w	2400f31c <f_open+0x280>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f118:	2512      	movs	r5, #18
2400f11a:	e7d1      	b.n	2400f0c0 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f11c:	f016 0f1c 	tst.w	r6, #28
2400f120:	d069      	beq.n	2400f1f6 <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400f122:	2804      	cmp	r0, #4
2400f124:	d167      	bne.n	2400f1f6 <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400f126:	4b97      	ldr	r3, [pc, #604]	; (2400f384 <f_open+0x2e8>)
2400f128:	681a      	ldr	r2, [r3, #0]
2400f12a:	b112      	cbz	r2, 2400f132 <f_open+0x96>
2400f12c:	691b      	ldr	r3, [r3, #16]
2400f12e:	2b00      	cmp	r3, #0
2400f130:	d1f2      	bne.n	2400f118 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f132:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400f134:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f138:	f7ff f9e6 	bl	2400e508 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f13c:	2800      	cmp	r0, #0
2400f13e:	d15a      	bne.n	2400f1f6 <f_open+0x15a>
				dw = GET_FATTIME();
2400f140:	f7fd fc86 	bl	2400ca50 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400f144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f146:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f14a:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f14e:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f152:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
2400f156:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
2400f158:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
2400f15a:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400f15e:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
2400f160:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400f162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f164:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400f166:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
2400f168:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400f16c:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
2400f16e:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f172:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2400f176:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f17a:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f17c:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f17e:	d102      	bne.n	2400f186 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f180:	8a9a      	ldrh	r2, [r3, #20]
2400f182:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f186:	2200      	movs	r2, #0
2400f188:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f18a:	7808      	ldrb	r0, [r1, #0]
2400f18c:	2803      	cmp	r0, #3
2400f18e:	d100      	bne.n	2400f192 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
2400f190:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400f192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f194:	2200      	movs	r2, #0
2400f196:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
2400f198:	2301      	movs	r3, #1
2400f19a:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
2400f19c:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
2400f19e:	b19e      	cbz	r6, 2400f1c8 <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
2400f1a0:	4631      	mov	r1, r6
2400f1a2:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400f1a4:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400f1a8:	f7ff f910 	bl	2400e3cc <remove_chain>
						if (res == FR_OK) {
2400f1ac:	bb18      	cbnz	r0, 2400f1f6 <f_open+0x15a>
							res = move_window(fs, dw);
2400f1ae:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f1b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2400f1b2:	4590      	cmp	r8, r2
2400f1b4:	f000 80e2 	beq.w	2400f37c <f_open+0x2e0>
2400f1b8:	4618      	mov	r0, r3
2400f1ba:	4641      	mov	r1, r8
2400f1bc:	f7fd fee4 	bl	2400cf88 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f1c0:	3e01      	subs	r6, #1
2400f1c2:	9b03      	ldr	r3, [sp, #12]
2400f1c4:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400f1c6:	b9b0      	cbnz	r0, 2400f1f6 <f_open+0x15a>
				mode |= FA_MODIFIED;
2400f1c8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f1cc:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f1d2:	3900      	subs	r1, #0
2400f1d4:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f1d6:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f1d8:	bf18      	it	ne
2400f1da:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400f1dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f1de:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f1e0:	f7fd fd4c 	bl	2400cc7c <inc_lock>
2400f1e4:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400f1e6:	bb70      	cbnz	r0, 2400f246 <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f1e8:	2502      	movs	r5, #2
2400f1ea:	e769      	b.n	2400f0c0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400f1ec:	2509      	movs	r5, #9
}
2400f1ee:	4628      	mov	r0, r5
2400f1f0:	b012      	add	sp, #72	; 0x48
2400f1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400f1f6:	4605      	mov	r5, r0
2400f1f8:	e762      	b.n	2400f0c0 <f_open+0x24>
				res = FR_INVALID_NAME;
2400f1fa:	2506      	movs	r5, #6
2400f1fc:	e760      	b.n	2400f0c0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f1fe:	6858      	ldr	r0, [r3, #4]
2400f200:	4560      	cmp	r0, ip
2400f202:	f000 8094 	beq.w	2400f32e <f_open+0x292>
		if (Files[i].fs) {	/* Existing entry */
2400f206:	6918      	ldr	r0, [r3, #16]
2400f208:	b188      	cbz	r0, 2400f22e <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f20a:	4540      	cmp	r0, r8
2400f20c:	d184      	bne.n	2400f118 <f_open+0x7c>
2400f20e:	6958      	ldr	r0, [r3, #20]
2400f210:	4560      	cmp	r0, ip
2400f212:	d181      	bne.n	2400f118 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f214:	6998      	ldr	r0, [r3, #24]
2400f216:	4570      	cmp	r0, lr
2400f218:	f47f af7e 	bne.w	2400f118 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f21c:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f21e:	2a00      	cmp	r2, #0
2400f220:	d163      	bne.n	2400f2ea <f_open+0x24e>
2400f222:	eb03 1300 	add.w	r3, r3, r0, lsl #4
2400f226:	899b      	ldrh	r3, [r3, #12]
2400f228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400f22c:	d05d      	beq.n	2400f2ea <f_open+0x24e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f22e:	f016 0f1c 	tst.w	r6, #28
2400f232:	d04a      	beq.n	2400f2ca <f_open+0x22e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400f234:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f238:	f013 0f11 	tst.w	r3, #17
2400f23c:	d15c      	bne.n	2400f2f8 <f_open+0x25c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400f23e:	0773      	lsls	r3, r6, #29
2400f240:	d555      	bpl.n	2400f2ee <f_open+0x252>
2400f242:	2508      	movs	r5, #8
2400f244:	e73c      	b.n	2400f0c0 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f246:	f8dd 900c 	ldr.w	r9, [sp, #12]
2400f24a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f24c:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
2400f250:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f252:	2a03      	cmp	r2, #3
2400f254:	d102      	bne.n	2400f25c <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f256:	8a9a      	ldrh	r2, [r3, #20]
2400f258:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f25c:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2400f25e:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2400f260:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400f264:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2400f268:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
2400f26c:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400f270:	f8c4 800c 	str.w	r8, [r4, #12]
		*d++ = (BYTE)val;
2400f274:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
2400f276:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
2400f27a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400f27c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400f27e:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
2400f280:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
2400f282:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
2400f284:	f006 f8f8 	bl	24015478 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400f288:	06b9      	lsls	r1, r7, #26
2400f28a:	f57f af1b 	bpl.w	2400f0c4 <f_open+0x28>
2400f28e:	f1b8 0f00 	cmp.w	r8, #0
2400f292:	f43f af17 	beq.w	2400f0c4 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400f296:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f29a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f29e:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f2a2:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f2a6:	d804      	bhi.n	2400f2b2 <f_open+0x216>
2400f2a8:	e047      	b.n	2400f33a <f_open+0x29e>
2400f2aa:	1c42      	adds	r2, r0, #1
2400f2ac:	d06c      	beq.n	2400f388 <f_open+0x2ec>
2400f2ae:	4547      	cmp	r7, r8
2400f2b0:	d26a      	bcs.n	2400f388 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
2400f2b2:	4631      	mov	r1, r6
2400f2b4:	6820      	ldr	r0, [r4, #0]
2400f2b6:	f7fe f8b3 	bl	2400d420 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400f2ba:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f2bc:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
2400f2c0:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400f2c2:	d8f2      	bhi.n	2400f2aa <f_open+0x20e>
2400f2c4:	2502      	movs	r5, #2
				fp->clust = clst;
2400f2c6:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f2c8:	e6fa      	b.n	2400f0c0 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400f2ca:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f2ce:	06d9      	lsls	r1, r3, #27
2400f2d0:	d422      	bmi.n	2400f318 <f_open+0x27c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400f2d2:	07b1      	lsls	r1, r6, #30
2400f2d4:	d501      	bpl.n	2400f2da <f_open+0x23e>
2400f2d6:	07d8      	lsls	r0, r3, #31
2400f2d8:	d40e      	bmi.n	2400f2f8 <f_open+0x25c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f2da:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f2de:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f2e0:	2e00      	cmp	r6, #0
2400f2e2:	f47f af71 	bne.w	2400f1c8 <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f2e6:	4611      	mov	r1, r2
2400f2e8:	e772      	b.n	2400f1d0 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f2ea:	2510      	movs	r5, #16
2400f2ec:	e6e8      	b.n	2400f0c0 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f2ee:	0730      	lsls	r0, r6, #28
2400f2f0:	f53f af26 	bmi.w	2400f140 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f2f4:	9b03      	ldr	r3, [sp, #12]
2400f2f6:	e76b      	b.n	2400f1d0 <f_open+0x134>
						res = FR_DENIED;
2400f2f8:	2507      	movs	r5, #7
2400f2fa:	e6e1      	b.n	2400f0c0 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400f2fc:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400f300:	f1b8 0f00 	cmp.w	r8, #0
2400f304:	d093      	beq.n	2400f22e <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f306:	4540      	cmp	r0, r8
2400f308:	d191      	bne.n	2400f22e <f_open+0x192>
2400f30a:	6958      	ldr	r0, [r3, #20]
2400f30c:	4560      	cmp	r0, ip
2400f30e:	d18e      	bne.n	2400f22e <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
2400f310:	6998      	ldr	r0, [r3, #24]
2400f312:	4586      	cmp	lr, r0
2400f314:	d18b      	bne.n	2400f22e <f_open+0x192>
2400f316:	e781      	b.n	2400f21c <f_open+0x180>
					res = FR_NO_FILE;
2400f318:	2504      	movs	r5, #4
2400f31a:	e6d1      	b.n	2400f0c0 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f31c:	6958      	ldr	r0, [r3, #20]
2400f31e:	4560      	cmp	r0, ip
2400f320:	f47f aefa 	bne.w	2400f118 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f324:	6998      	ldr	r0, [r3, #24]
2400f326:	4586      	cmp	lr, r0
2400f328:	f47f aef6 	bne.w	2400f118 <f_open+0x7c>
2400f32c:	e776      	b.n	2400f21c <f_open+0x180>
2400f32e:	6898      	ldr	r0, [r3, #8]
2400f330:	4570      	cmp	r0, lr
2400f332:	f47f af68 	bne.w	2400f206 <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f336:	4628      	mov	r0, r5
2400f338:	e771      	b.n	2400f21e <f_open+0x182>
				fp->clust = clst;
2400f33a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f33c:	f3c8 0308 	ubfx	r3, r8, #0, #9
2400f340:	2b00      	cmp	r3, #0
2400f342:	f43f aebf 	beq.w	2400f0c4 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f346:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
2400f348:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f34a:	6983      	ldr	r3, [r0, #24]
2400f34c:	3b02      	subs	r3, #2
2400f34e:	429e      	cmp	r6, r3
2400f350:	f4bf af4a 	bcs.w	2400f1e8 <f_open+0x14c>
	return clst * fs->csize + fs->database;
2400f354:	8942      	ldrh	r2, [r0, #10]
2400f356:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
2400f358:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f35c:	2a00      	cmp	r2, #0
2400f35e:	f43f af43 	beq.w	2400f1e8 <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f362:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f366:	4651      	mov	r1, sl
2400f368:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f36a:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f36c:	7840      	ldrb	r0, [r0, #1]
2400f36e:	f7fd fc5d 	bl	2400cc2c <disk_read>
2400f372:	2800      	cmp	r0, #0
2400f374:	f43f aea6 	beq.w	2400f0c4 <f_open+0x28>
2400f378:	2501      	movs	r5, #1
2400f37a:	e6a1      	b.n	2400f0c0 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f37c:	3e01      	subs	r6, #1
2400f37e:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400f380:	e722      	b.n	2400f1c8 <f_open+0x12c>
2400f382:	bf00      	nop
2400f384:	2001d8d4 	.word	0x2001d8d4
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f388:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
2400f38a:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f38c:	bf0c      	ite	eq
2400f38e:	2301      	moveq	r3, #1
2400f390:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f392:	d1d3      	bne.n	2400f33c <f_open+0x2a0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f394:	461d      	mov	r5, r3
2400f396:	e693      	b.n	2400f0c0 <f_open+0x24>

2400f398 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f39c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400f39e:	2300      	movs	r3, #0
{
2400f3a0:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400f3a2:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f3a4:	b150      	cbz	r0, 2400f3bc <f_read+0x24>
2400f3a6:	6803      	ldr	r3, [r0, #0]
2400f3a8:	4604      	mov	r4, r0
2400f3aa:	b13b      	cbz	r3, 2400f3bc <f_read+0x24>
2400f3ac:	4617      	mov	r7, r2
2400f3ae:	781a      	ldrb	r2, [r3, #0]
2400f3b0:	b122      	cbz	r2, 2400f3bc <f_read+0x24>
2400f3b2:	460d      	mov	r5, r1
2400f3b4:	88da      	ldrh	r2, [r3, #6]
2400f3b6:	8881      	ldrh	r1, [r0, #4]
2400f3b8:	4291      	cmp	r1, r2
2400f3ba:	d005      	beq.n	2400f3c8 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f3bc:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400f3c0:	4640      	mov	r0, r8
2400f3c2:	b005      	add	sp, #20
2400f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f3c8:	7858      	ldrb	r0, [r3, #1]
2400f3ca:	f7fd fc13 	bl	2400cbf4 <disk_status>
2400f3ce:	07c2      	lsls	r2, r0, #31
2400f3d0:	d4f4      	bmi.n	2400f3bc <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f3d2:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f3d6:	f1b8 0f00 	cmp.w	r8, #0
2400f3da:	d1f1      	bne.n	2400f3c0 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f3dc:	7d23      	ldrb	r3, [r4, #20]
2400f3de:	f013 0301 	ands.w	r3, r3, #1
2400f3e2:	9300      	str	r3, [sp, #0]
2400f3e4:	f000 80ca 	beq.w	2400f57c <f_read+0x1e4>
	remain = fp->obj.objsize - fp->fptr;
2400f3e8:	69a3      	ldr	r3, [r4, #24]
2400f3ea:	68e2      	ldr	r2, [r4, #12]
2400f3ec:	1ad2      	subs	r2, r2, r3
2400f3ee:	4297      	cmp	r7, r2
2400f3f0:	bf28      	it	cs
2400f3f2:	4617      	movcs	r7, r2
	for ( ;  btr;								/* Repeat until all data read */
2400f3f4:	2f00      	cmp	r7, #0
2400f3f6:	d0e3      	beq.n	2400f3c0 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f3f8:	f104 022d 	add.w	r2, r4, #45	; 0x2d
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f3fc:	46a2      	mov	sl, r4
2400f3fe:	f8cd 8008 	str.w	r8, [sp, #8]
2400f402:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f404:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f408:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f40c:	2a00      	cmp	r2, #0
2400f40e:	d140      	bne.n	2400f492 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400f410:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400f414:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400f416:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400f41a:	d06d      	beq.n	2400f4f8 <f_read+0x160>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
2400f41c:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f41e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400f422:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f424:	3b02      	subs	r3, #2
2400f426:	4298      	cmp	r0, r3
2400f428:	d273      	bcs.n	2400f512 <f_read+0x17a>
	return clst * fs->csize + fs->database;
2400f42a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f42e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400f432:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f436:	2800      	cmp	r0, #0
2400f438:	d06b      	beq.n	2400f512 <f_read+0x17a>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f43a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400f43e:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f442:	d36d      	bcc.n	2400f520 <f_read+0x188>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f444:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400f448:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f44c:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f44e:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f452:	bf88      	it	hi
2400f454:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f458:	465a      	mov	r2, fp
2400f45a:	4629      	mov	r1, r5
2400f45c:	4643      	mov	r3, r8
2400f45e:	f7fd fbe5 	bl	2400cc2c <disk_read>
2400f462:	2800      	cmp	r0, #0
2400f464:	d171      	bne.n	2400f54a <f_read+0x1b2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f466:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400f46a:	2a00      	cmp	r2, #0
2400f46c:	f2c0 8096 	blt.w	2400f59c <f_read+0x204>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400f470:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f474:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400f476:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f478:	440d      	add	r5, r1
2400f47a:	440b      	add	r3, r1
2400f47c:	61a3      	str	r3, [r4, #24]
2400f47e:	6833      	ldr	r3, [r6, #0]
2400f480:	440b      	add	r3, r1
2400f482:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400f484:	f000 80a0 	beq.w	2400f5c8 <f_read+0x230>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f488:	69a3      	ldr	r3, [r4, #24]
2400f48a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f48e:	2a00      	cmp	r2, #0
2400f490:	d0be      	beq.n	2400f410 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f492:	1c50      	adds	r0, r2, #1
2400f494:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400f498:	eb0a 0302 	add.w	r3, sl, r2
2400f49c:	4450      	add	r0, sl
2400f49e:	42b9      	cmp	r1, r7
2400f4a0:	eba5 0000 	sub.w	r0, r5, r0
2400f4a4:	bf28      	it	cs
2400f4a6:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f4a8:	2802      	cmp	r0, #2
2400f4aa:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2400f4ae:	d95b      	bls.n	2400f568 <f_read+0x1d0>
2400f4b0:	f1bb 0f07 	cmp.w	fp, #7
2400f4b4:	d958      	bls.n	2400f568 <f_read+0x1d0>
2400f4b6:	f021 0e03 	bic.w	lr, r1, #3
2400f4ba:	461a      	mov	r2, r3
2400f4bc:	4628      	mov	r0, r5
2400f4be:	449e      	add	lr, r3
			*d++ = *s++;
2400f4c0:	f852 cb04 	ldr.w	ip, [r2], #4
2400f4c4:	4572      	cmp	r2, lr
2400f4c6:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
2400f4ca:	d1f9      	bne.n	2400f4c0 <f_read+0x128>
2400f4cc:	f021 0203 	bic.w	r2, r1, #3
2400f4d0:	4291      	cmp	r1, r2
2400f4d2:	eb05 0002 	add.w	r0, r5, r2
2400f4d6:	eb03 0c02 	add.w	ip, r3, r2
2400f4da:	d0cb      	beq.n	2400f474 <f_read+0xdc>
			*d++ = *s++;
2400f4dc:	5c9b      	ldrb	r3, [r3, r2]
2400f4de:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400f4e0:	ebbb 0202 	subs.w	r2, fp, r2
2400f4e4:	d0c6      	beq.n	2400f474 <f_read+0xdc>
			*d++ = *s++;
2400f4e6:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2400f4ea:	2a01      	cmp	r2, #1
			*d++ = *s++;
2400f4ec:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
2400f4ee:	d0c1      	beq.n	2400f474 <f_read+0xdc>
			*d++ = *s++;
2400f4f0:	f89c 3002 	ldrb.w	r3, [ip, #2]
2400f4f4:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2400f4f6:	e7bd      	b.n	2400f474 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400f4f8:	bb7b      	cbnz	r3, 2400f55a <f_read+0x1c2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400f4fa:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f4fc:	2801      	cmp	r0, #1
2400f4fe:	d908      	bls.n	2400f512 <f_read+0x17a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f500:	1c43      	adds	r3, r0, #1
2400f502:	d022      	beq.n	2400f54a <f_read+0x1b2>
				fp->clust = clst;				/* Update current cluster */
2400f504:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400f506:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f508:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400f50c:	3b02      	subs	r3, #2
2400f50e:	4298      	cmp	r0, r3
2400f510:	d38b      	bcc.n	2400f42a <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f512:	2302      	movs	r3, #2
2400f514:	4698      	mov	r8, r3
2400f516:	7563      	strb	r3, [r4, #21]
}
2400f518:	4640      	mov	r0, r8
2400f51a:	b005      	add	sp, #20
2400f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400f520:	6a22      	ldr	r2, [r4, #32]
2400f522:	455a      	cmp	r2, fp
2400f524:	d00b      	beq.n	2400f53e <f_read+0x1a6>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400f526:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f52a:	2b00      	cmp	r3, #0
2400f52c:	db29      	blt.n	2400f582 <f_read+0x1ea>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400f52e:	2301      	movs	r3, #1
2400f530:	465a      	mov	r2, fp
2400f532:	4651      	mov	r1, sl
2400f534:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f538:	f7fd fb78 	bl	2400cc2c <disk_read>
2400f53c:	b928      	cbnz	r0, 2400f54a <f_read+0x1b2>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f53e:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400f540:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f544:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f548:	e7a3      	b.n	2400f492 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f54a:	f8dd 8000 	ldr.w	r8, [sp]
2400f54e:	2301      	movs	r3, #1
}
2400f550:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f552:	7563      	strb	r3, [r4, #21]
}
2400f554:	b005      	add	sp, #20
2400f556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400f55a:	69e1      	ldr	r1, [r4, #28]
2400f55c:	6820      	ldr	r0, [r4, #0]
2400f55e:	9203      	str	r2, [sp, #12]
2400f560:	f7fd ff5e 	bl	2400d420 <get_fat.isra.0>
2400f564:	9a03      	ldr	r2, [sp, #12]
2400f566:	e7c9      	b.n	2400f4fc <f_read+0x164>
2400f568:	1e6a      	subs	r2, r5, #1
2400f56a:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
2400f56e:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
2400f572:	4563      	cmp	r3, ip
			*d++ = *s++;
2400f574:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f578:	d1f9      	bne.n	2400f56e <f_read+0x1d6>
2400f57a:	e77b      	b.n	2400f474 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f57c:	f04f 0807 	mov.w	r8, #7
2400f580:	e71e      	b.n	2400f3c0 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f582:	2301      	movs	r3, #1
2400f584:	4651      	mov	r1, sl
2400f586:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f58a:	f7fd fb5d 	bl	2400cc48 <disk_write>
2400f58e:	2800      	cmp	r0, #0
2400f590:	d1db      	bne.n	2400f54a <f_read+0x1b2>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f592:	7d23      	ldrb	r3, [r4, #20]
2400f594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f598:	7523      	strb	r3, [r4, #20]
2400f59a:	e7c8      	b.n	2400f52e <f_read+0x196>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f59c:	6a22      	ldr	r2, [r4, #32]
2400f59e:	eba2 0b0b 	sub.w	fp, r2, fp
2400f5a2:	45c3      	cmp	fp, r8
2400f5a4:	f4bf af64 	bcs.w	2400f470 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400f5a8:	eb05 224b 	add.w	r2, r5, fp, lsl #9
2400f5ac:	9b01      	ldr	r3, [sp, #4]
2400f5ae:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f5b0:	1ad0      	subs	r0, r2, r3
2400f5b2:	2802      	cmp	r0, #2
2400f5b4:	d90b      	bls.n	2400f5ce <f_read+0x236>
2400f5b6:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400f5ba:	f851 3b04 	ldr.w	r3, [r1], #4
2400f5be:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400f5c2:	4562      	cmp	r2, ip
2400f5c4:	d1f9      	bne.n	2400f5ba <f_read+0x222>
2400f5c6:	e753      	b.n	2400f470 <f_read+0xd8>
2400f5c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
2400f5cc:	e6f8      	b.n	2400f3c0 <f_read+0x28>
2400f5ce:	3a01      	subs	r2, #1
2400f5d0:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2400f5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2400f5d8:	458c      	cmp	ip, r1
			*d++ = *s++;
2400f5da:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2400f5de:	d1f9      	bne.n	2400f5d4 <f_read+0x23c>
2400f5e0:	e746      	b.n	2400f470 <f_read+0xd8>
2400f5e2:	bf00      	nop

2400f5e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400f5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f5e8:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400f5ea:	2300      	movs	r3, #0
{
2400f5ec:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2400f5ee:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f5f0:	b150      	cbz	r0, 2400f608 <f_write+0x24>
2400f5f2:	6803      	ldr	r3, [r0, #0]
2400f5f4:	4604      	mov	r4, r0
2400f5f6:	b13b      	cbz	r3, 2400f608 <f_write+0x24>
2400f5f8:	4616      	mov	r6, r2
2400f5fa:	781a      	ldrb	r2, [r3, #0]
2400f5fc:	b122      	cbz	r2, 2400f608 <f_write+0x24>
2400f5fe:	460d      	mov	r5, r1
2400f600:	88da      	ldrh	r2, [r3, #6]
2400f602:	8881      	ldrh	r1, [r0, #4]
2400f604:	4291      	cmp	r1, r2
2400f606:	d005      	beq.n	2400f614 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f608:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400f60c:	4640      	mov	r0, r8
2400f60e:	b005      	add	sp, #20
2400f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f614:	7858      	ldrb	r0, [r3, #1]
2400f616:	f7fd faed 	bl	2400cbf4 <disk_status>
2400f61a:	07c0      	lsls	r0, r0, #31
2400f61c:	d4f4      	bmi.n	2400f608 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f61e:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f622:	f1b8 0f00 	cmp.w	r8, #0
2400f626:	d1f1      	bne.n	2400f60c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400f628:	7d22      	ldrb	r2, [r4, #20]
2400f62a:	0791      	lsls	r1, r2, #30
2400f62c:	f140 80e4 	bpl.w	2400f7f8 <f_write+0x214>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400f630:	69a3      	ldr	r3, [r4, #24]
2400f632:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400f634:	bf28      	it	cs
2400f636:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2400f638:	2e00      	cmp	r6, #0
2400f63a:	f000 80cf 	beq.w	2400f7dc <f_write+0x1f8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f63e:	f504 720b 	add.w	r2, r4, #556	; 0x22c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f642:	46a2      	mov	sl, r4
2400f644:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f646:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f64a:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f64e:	2a00      	cmp	r2, #0
2400f650:	d15e      	bne.n	2400f710 <f_write+0x12c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400f652:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2400f656:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2400f65a:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
2400f65e:	d110      	bne.n	2400f682 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400f660:	2b00      	cmp	r3, #0
2400f662:	f040 80b3 	bne.w	2400f7cc <f_write+0x1e8>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400f666:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400f668:	2800      	cmp	r0, #0
2400f66a:	f000 80c8 	beq.w	2400f7fe <f_write+0x21a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400f66e:	2801      	cmp	r0, #1
2400f670:	f000 8086 	beq.w	2400f780 <f_write+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f674:	1c43      	adds	r3, r0, #1
2400f676:	f000 80a2 	beq.w	2400f7be <f_write+0x1da>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400f67a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2400f67c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400f67e:	b903      	cbnz	r3, 2400f682 <f_write+0x9e>
2400f680:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400f682:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f686:	2b00      	cmp	r3, #0
2400f688:	f2c0 808c 	blt.w	2400f7a4 <f_write+0x1c0>
	clst -= 2;
2400f68c:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f68e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400f692:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f694:	3b02      	subs	r3, #2
2400f696:	429a      	cmp	r2, r3
2400f698:	d272      	bcs.n	2400f780 <f_write+0x19c>
	return clst * fs->csize + fs->database;
2400f69a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f69e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400f6a2:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f6a6:	2a00      	cmp	r2, #0
2400f6a8:	d06a      	beq.n	2400f780 <f_write+0x19c>
			if (cc) {						/* Write maximum contiguous sectors directly */
2400f6aa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
2400f6ae:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2400f6b0:	d36d      	bcc.n	2400f78e <f_write+0x1aa>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f6b2:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400f6b6:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f6b8:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f6ba:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f6be:	bf88      	it	hi
2400f6c0:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f6c4:	4629      	mov	r1, r5
2400f6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400f6ca:	f7fd fabd 	bl	2400cc48 <disk_write>
2400f6ce:	2800      	cmp	r0, #0
2400f6d0:	d175      	bne.n	2400f7be <f_write+0x1da>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400f6d2:	6a21      	ldr	r1, [r4, #32]
2400f6d4:	9a02      	ldr	r2, [sp, #8]
2400f6d6:	9b03      	ldr	r3, [sp, #12]
2400f6d8:	1a8a      	subs	r2, r1, r2
2400f6da:	429a      	cmp	r2, r3
2400f6dc:	f0c0 80a3 	bcc.w	2400f826 <f_write+0x242>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400f6e0:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2400f6e4:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400f6e8:	69a3      	ldr	r3, [r4, #24]
2400f6ea:	4615      	mov	r5, r2
2400f6ec:	68e2      	ldr	r2, [r4, #12]
2400f6ee:	4463      	add	r3, ip
2400f6f0:	4293      	cmp	r3, r2
2400f6f2:	61a3      	str	r3, [r4, #24]
2400f6f4:	bf38      	it	cc
2400f6f6:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
2400f6f8:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400f6fc:	60e3      	str	r3, [r4, #12]
2400f6fe:	683b      	ldr	r3, [r7, #0]
2400f700:	4463      	add	r3, ip
2400f702:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2400f704:	d069      	beq.n	2400f7da <f_write+0x1f6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f706:	69a3      	ldr	r3, [r4, #24]
2400f708:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f70c:	2a00      	cmp	r2, #0
2400f70e:	d0a0      	beq.n	2400f652 <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f710:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400f714:	eb0a 0302 	add.w	r3, sl, r2
2400f718:	1c6a      	adds	r2, r5, #1
2400f71a:	45b4      	cmp	ip, r6
2400f71c:	eba3 0202 	sub.w	r2, r3, r2
2400f720:	bf28      	it	cs
2400f722:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f724:	2a02      	cmp	r2, #2
2400f726:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400f72a:	d95b      	bls.n	2400f7e4 <f_write+0x200>
2400f72c:	f1bb 0f07 	cmp.w	fp, #7
2400f730:	d958      	bls.n	2400f7e4 <f_write+0x200>
2400f732:	f02c 0e03 	bic.w	lr, ip, #3
2400f736:	462a      	mov	r2, r5
2400f738:	4619      	mov	r1, r3
2400f73a:	44ae      	add	lr, r5
			*d++ = *s++;
2400f73c:	f852 0b04 	ldr.w	r0, [r2], #4
2400f740:	4572      	cmp	r2, lr
2400f742:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
2400f746:	d1f9      	bne.n	2400f73c <f_write+0x158>
2400f748:	f02c 0103 	bic.w	r1, ip, #3
2400f74c:	458c      	cmp	ip, r1
2400f74e:	eb03 0001 	add.w	r0, r3, r1
2400f752:	eb05 0201 	add.w	r2, r5, r1
2400f756:	d00e      	beq.n	2400f776 <f_write+0x192>
			*d++ = *s++;
2400f758:	f815 e001 	ldrb.w	lr, [r5, r1]
2400f75c:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2400f760:	ebbb 0101 	subs.w	r1, fp, r1
2400f764:	d005      	beq.n	2400f772 <f_write+0x18e>
			*d++ = *s++;
2400f766:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2400f768:	2901      	cmp	r1, #1
			*d++ = *s++;
2400f76a:	7043      	strb	r3, [r0, #1]
2400f76c:	bf1c      	itt	ne
2400f76e:	7893      	ldrbne	r3, [r2, #2]
2400f770:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2400f772:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2400f776:	7d23      	ldrb	r3, [r4, #20]
2400f778:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400f77c:	7523      	strb	r3, [r4, #20]
2400f77e:	e7b3      	b.n	2400f6e8 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400f780:	2302      	movs	r3, #2
2400f782:	4698      	mov	r8, r3
2400f784:	7563      	strb	r3, [r4, #21]
}
2400f786:	4640      	mov	r0, r8
2400f788:	b005      	add	sp, #20
2400f78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400f78e:	6a23      	ldr	r3, [r4, #32]
2400f790:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2400f792:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400f794:	d002      	beq.n	2400f79c <f_write+0x1b8>
2400f796:	68e1      	ldr	r1, [r4, #12]
2400f798:	428b      	cmp	r3, r1
2400f79a:	d338      	bcc.n	2400f80e <f_write+0x22a>
			fp->sect = sect;
2400f79c:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f79e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f7a2:	e7b5      	b.n	2400f710 <f_write+0x12c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f7a4:	2301      	movs	r3, #1
2400f7a6:	6a22      	ldr	r2, [r4, #32]
2400f7a8:	4651      	mov	r1, sl
2400f7aa:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f7ae:	f7fd fa4b 	bl	2400cc48 <disk_write>
2400f7b2:	b920      	cbnz	r0, 2400f7be <f_write+0x1da>
				fp->flag &= (BYTE)~FA_DIRTY;
2400f7b4:	7d23      	ldrb	r3, [r4, #20]
2400f7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f7ba:	7523      	strb	r3, [r4, #20]
2400f7bc:	e766      	b.n	2400f68c <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f7be:	2301      	movs	r3, #1
2400f7c0:	4698      	mov	r8, r3
2400f7c2:	7563      	strb	r3, [r4, #21]
}
2400f7c4:	4640      	mov	r0, r8
2400f7c6:	b005      	add	sp, #20
2400f7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400f7cc:	69e1      	ldr	r1, [r4, #28]
2400f7ce:	4620      	mov	r0, r4
2400f7d0:	f7fe f93e 	bl	2400da50 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400f7d4:	2800      	cmp	r0, #0
2400f7d6:	f47f af4a 	bne.w	2400f66e <f_write+0x8a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400f7da:	7d22      	ldrb	r2, [r4, #20]
2400f7dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400f7e0:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400f7e2:	e713      	b.n	2400f60c <f_write+0x28>
2400f7e4:	3b01      	subs	r3, #1
2400f7e6:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2400f7ea:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2400f7ee:	4295      	cmp	r5, r2
			*d++ = *s++;
2400f7f0:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2400f7f4:	d1f9      	bne.n	2400f7ea <f_write+0x206>
2400f7f6:	e7be      	b.n	2400f776 <f_write+0x192>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400f7f8:	f04f 0807 	mov.w	r8, #7
2400f7fc:	e706      	b.n	2400f60c <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400f7fe:	4659      	mov	r1, fp
2400f800:	4620      	mov	r0, r4
2400f802:	f7fe f925 	bl	2400da50 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400f806:	2800      	cmp	r0, #0
2400f808:	f47f af31 	bne.w	2400f66e <f_write+0x8a>
2400f80c:	e7e5      	b.n	2400f7da <f_write+0x1f6>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400f80e:	2301      	movs	r3, #1
2400f810:	4651      	mov	r1, sl
2400f812:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f816:	9202      	str	r2, [sp, #8]
2400f818:	f7fd fa08 	bl	2400cc2c <disk_read>
				fp->fptr < fp->obj.objsize &&
2400f81c:	2800      	cmp	r0, #0
2400f81e:	d1ce      	bne.n	2400f7be <f_write+0x1da>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f820:	69a3      	ldr	r3, [r4, #24]
2400f822:	9a02      	ldr	r2, [sp, #8]
2400f824:	e7ba      	b.n	2400f79c <f_write+0x1b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400f826:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2400f82a:	1c42      	adds	r2, r0, #1
2400f82c:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f82e:	ebaa 0202 	sub.w	r2, sl, r2
2400f832:	2a02      	cmp	r2, #2
2400f834:	d90d      	bls.n	2400f852 <f_write+0x26e>
2400f836:	4652      	mov	r2, sl
2400f838:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
2400f83c:	f851 0b04 	ldr.w	r0, [r1], #4
2400f840:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400f844:	4562      	cmp	r2, ip
2400f846:	d1f9      	bne.n	2400f83c <f_write+0x258>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f848:	7d22      	ldrb	r2, [r4, #20]
2400f84a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400f84e:	7522      	strb	r2, [r4, #20]
2400f850:	e746      	b.n	2400f6e0 <f_write+0xfc>
2400f852:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2400f856:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2400f85a:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
2400f85e:	458c      	cmp	ip, r1
			*d++ = *s++;
2400f860:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f864:	d1f9      	bne.n	2400f85a <f_write+0x276>
2400f866:	e7ef      	b.n	2400f848 <f_write+0x264>

2400f868 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f868:	b158      	cbz	r0, 2400f882 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400f86a:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f86c:	6803      	ldr	r3, [r0, #0]
2400f86e:	4604      	mov	r4, r0
2400f870:	b12b      	cbz	r3, 2400f87e <f_close+0x16>
2400f872:	781a      	ldrb	r2, [r3, #0]
2400f874:	b11a      	cbz	r2, 2400f87e <f_close+0x16>
2400f876:	8881      	ldrh	r1, [r0, #4]
2400f878:	88da      	ldrh	r2, [r3, #6]
2400f87a:	4291      	cmp	r1, r2
2400f87c:	d003      	beq.n	2400f886 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2400f87e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400f880:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2400f882:	2009      	movs	r0, #9
}
2400f884:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f886:	7858      	ldrb	r0, [r3, #1]
2400f888:	f7fd f9b4 	bl	2400cbf4 <disk_status>
2400f88c:	07c1      	lsls	r1, r0, #31
2400f88e:	d4f6      	bmi.n	2400f87e <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400f890:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f892:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400f894:	065a      	lsls	r2, r3, #25
2400f896:	d53c      	bpl.n	2400f912 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400f898:	061b      	lsls	r3, r3, #24
2400f89a:	d45d      	bmi.n	2400f958 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
2400f89c:	f7fd f8d8 	bl	2400ca50 <get_fattime>
				res = move_window(fs, fp->dir_sect);
2400f8a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f8a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
2400f8a4:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f8a6:	4299      	cmp	r1, r3
2400f8a8:	d004      	beq.n	2400f8b4 <f_close+0x4c>
2400f8aa:	4628      	mov	r0, r5
2400f8ac:	f7fd fb6c 	bl	2400cf88 <move_window.part.0>
				if (res == FR_OK) {
2400f8b0:	2800      	cmp	r0, #0
2400f8b2:	d1e5      	bne.n	2400f880 <f_close+0x18>
					dir = fp->dir_ptr;
2400f8b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400f8b6:	7ad3      	ldrb	r3, [r2, #11]
2400f8b8:	f043 0320 	orr.w	r3, r3, #32
2400f8bc:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400f8be:	68a3      	ldr	r3, [r4, #8]
2400f8c0:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400f8c2:	f3c3 2007 	ubfx	r0, r3, #8, #8
2400f8c6:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
2400f8c8:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
2400f8ca:	7809      	ldrb	r1, [r1, #0]
2400f8cc:	2903      	cmp	r1, #3
2400f8ce:	d103      	bne.n	2400f8d8 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400f8d0:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f8d2:	7513      	strb	r3, [r2, #20]
2400f8d4:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
2400f8d6:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
2400f8d8:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
2400f8da:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400f8dc:	7596      	strb	r6, [r2, #22]
2400f8de:	0a19      	lsrs	r1, r3, #8
2400f8e0:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2400f8e2:	7751      	strb	r1, [r2, #29]
2400f8e4:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f8e6:	0e1b      	lsrs	r3, r3, #24
2400f8e8:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
2400f8ea:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
2400f8ec:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f8ee:	75d3      	strb	r3, [r2, #23]
2400f8f0:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f8f2:	0e36      	lsrs	r6, r6, #24
2400f8f4:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
2400f8f6:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
2400f8f8:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
2400f8fa:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
2400f8fc:	2301      	movs	r3, #1
2400f8fe:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400f900:	f7fe f836 	bl	2400d970 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400f904:	7d23      	ldrb	r3, [r4, #20]
2400f906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400f90a:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
2400f90c:	2800      	cmp	r0, #0
2400f90e:	d1b7      	bne.n	2400f880 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f910:	6825      	ldr	r5, [r4, #0]
2400f912:	2d00      	cmp	r5, #0
2400f914:	d0b3      	beq.n	2400f87e <f_close+0x16>
2400f916:	782b      	ldrb	r3, [r5, #0]
2400f918:	2b00      	cmp	r3, #0
2400f91a:	d0b0      	beq.n	2400f87e <f_close+0x16>
2400f91c:	88a2      	ldrh	r2, [r4, #4]
2400f91e:	88eb      	ldrh	r3, [r5, #6]
2400f920:	429a      	cmp	r2, r3
2400f922:	d1ac      	bne.n	2400f87e <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f924:	7868      	ldrb	r0, [r5, #1]
2400f926:	f7fd f965 	bl	2400cbf4 <disk_status>
2400f92a:	f010 0001 	ands.w	r0, r0, #1
2400f92e:	d1a6      	bne.n	2400f87e <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400f930:	6923      	ldr	r3, [r4, #16]
2400f932:	3b01      	subs	r3, #1
2400f934:	2b01      	cmp	r3, #1
2400f936:	d81c      	bhi.n	2400f972 <f_close+0x10a>
		n = Files[i].ctr;
2400f938:	4912      	ldr	r1, [pc, #72]	; (2400f984 <f_close+0x11c>)
2400f93a:	011d      	lsls	r5, r3, #4
2400f93c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2400f940:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400f942:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400f946:	d016      	beq.n	2400f976 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
2400f948:	b1b2      	cbz	r2, 2400f978 <f_close+0x110>
2400f94a:	3a01      	subs	r2, #1
2400f94c:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2400f94e:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400f950:	b192      	cbz	r2, 2400f978 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
2400f952:	2300      	movs	r3, #0
2400f954:	6023      	str	r3, [r4, #0]
}
2400f956:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400f958:	2301      	movs	r3, #1
2400f95a:	6a22      	ldr	r2, [r4, #32]
2400f95c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400f960:	7868      	ldrb	r0, [r5, #1]
2400f962:	f7fd f971 	bl	2400cc48 <disk_write>
2400f966:	b950      	cbnz	r0, 2400f97e <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
2400f968:	7d23      	ldrb	r3, [r4, #20]
2400f96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f96e:	7523      	strb	r3, [r4, #20]
2400f970:	e794      	b.n	2400f89c <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2400f972:	2002      	movs	r0, #2
}
2400f974:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2400f976:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400f978:	2300      	movs	r3, #0
2400f97a:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
2400f97c:	e7e9      	b.n	2400f952 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400f97e:	2001      	movs	r0, #1
}
2400f980:	bd70      	pop	{r4, r5, r6, pc}
2400f982:	bf00      	nop
2400f984:	2001d8d4 	.word	0x2001d8d4

2400f988 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f98a:	b150      	cbz	r0, 2400f9a2 <f_findnext+0x1a>
2400f98c:	4605      	mov	r5, r0
2400f98e:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400f990:	4c39      	ldr	r4, [pc, #228]	; (2400fa78 <f_findnext+0xf0>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f992:	682b      	ldr	r3, [r5, #0]
2400f994:	b12b      	cbz	r3, 2400f9a2 <f_findnext+0x1a>
2400f996:	781a      	ldrb	r2, [r3, #0]
2400f998:	b11a      	cbz	r2, 2400f9a2 <f_findnext+0x1a>
2400f99a:	88a9      	ldrh	r1, [r5, #4]
2400f99c:	88da      	ldrh	r2, [r3, #6]
2400f99e:	4291      	cmp	r1, r2
2400f9a0:	d002      	beq.n	2400f9a8 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
2400f9a2:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400f9a4:	4638      	mov	r0, r7
2400f9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f9a8:	7858      	ldrb	r0, [r3, #1]
2400f9aa:	f7fd f923 	bl	2400cbf4 <disk_status>
2400f9ae:	07c3      	lsls	r3, r0, #31
2400f9b0:	d4f7      	bmi.n	2400f9a2 <f_findnext+0x1a>
		if (!fno) {
2400f9b2:	2e00      	cmp	r6, #0
2400f9b4:	d058      	beq.n	2400fa68 <f_findnext+0xe0>
			res = dir_read(dp, 0);			/* Read an item */
2400f9b6:	4628      	mov	r0, r5
2400f9b8:	f7fd fdd8 	bl	2400d56c <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2400f9bc:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
2400f9c0:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2400f9c2:	d1ef      	bne.n	2400f9a4 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
2400f9c4:	4631      	mov	r1, r6
2400f9c6:	4628      	mov	r0, r5
2400f9c8:	f7fd fa1e 	bl	2400ce08 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400f9cc:	4628      	mov	r0, r5
2400f9ce:	f7fd fd87 	bl	2400d4e0 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400f9d2:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2400f9d6:	d14d      	bne.n	2400fa74 <f_findnext+0xec>
2400f9d8:	7db3      	ldrb	r3, [r6, #22]
2400f9da:	2b00      	cmp	r3, #0
2400f9dc:	d0e2      	beq.n	2400f9a4 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2400f9de:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
2400f9e2:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
2400f9e6:	e00f      	b.n	2400fa08 <f_findnext+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f9e8:	3a20      	subs	r2, #32
2400f9ea:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400f9ec:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f9f0:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400f9f4:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f9f6:	f1be 0f19 	cmp.w	lr, #25
2400f9fa:	d817      	bhi.n	2400fa2c <f_findnext+0xa4>
2400f9fc:	3b20      	subs	r3, #32
2400f9fe:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400fa00:	4293      	cmp	r3, r2
2400fa02:	d1c6      	bne.n	2400f992 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400fa04:	2b00      	cmp	r3, #0
2400fa06:	d0cd      	beq.n	2400f9a4 <f_findnext+0x1c>
2400fa08:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400fa0a:	f81c 3b01 	ldrb.w	r3, [ip], #1
2400fa0e:	2b3f      	cmp	r3, #63	; 0x3f
2400fa10:	d012      	beq.n	2400fa38 <f_findnext+0xb0>
2400fa12:	2b2a      	cmp	r3, #42	; 0x2a
2400fa14:	d010      	beq.n	2400fa38 <f_findnext+0xb0>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa16:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fa1a:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa1c:	2819      	cmp	r0, #25
2400fa1e:	d9e3      	bls.n	2400f9e8 <f_findnext+0x60>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fa20:	2a7f      	cmp	r2, #127	; 0x7f
2400fa22:	d9e3      	bls.n	2400f9ec <f_findnext+0x64>
2400fa24:	4423      	add	r3, r4
2400fa26:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400fa2a:	e7df      	b.n	2400f9ec <f_findnext+0x64>
2400fa2c:	2b7f      	cmp	r3, #127	; 0x7f
2400fa2e:	d9e7      	bls.n	2400fa00 <f_findnext+0x78>
2400fa30:	4420      	add	r0, r4
2400fa32:	f810 3c80 	ldrb.w	r3, [r0, #-128]
2400fa36:	e7e3      	b.n	2400fa00 <f_findnext+0x78>
2400fa38:	4694      	mov	ip, r2
				nm = nx = 0;
2400fa3a:	2300      	movs	r3, #0
2400fa3c:	f81c eb01 	ldrb.w	lr, [ip], #1
2400fa40:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400fa42:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400fa46:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2400fa48:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400fa4c:	bf0c      	ite	eq
2400fa4e:	3201      	addeq	r2, #1
2400fa50:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400fa52:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400fa56:	d0f4      	beq.n	2400fa42 <f_findnext+0xba>
2400fa58:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2400fa5c:	d0f1      	beq.n	2400fa42 <f_findnext+0xba>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400fa5e:	f7fd f95d 	bl	2400cd1c <pattern_matching>
2400fa62:	2800      	cmp	r0, #0
2400fa64:	d095      	beq.n	2400f992 <f_findnext+0xa>
2400fa66:	e79d      	b.n	2400f9a4 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400fa68:	4631      	mov	r1, r6
2400fa6a:	4628      	mov	r0, r5
}
2400fa6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400fa70:	f7fe b8be 	b.w	2400dbf0 <dir_sdi>
2400fa74:	4607      	mov	r7, r0
2400fa76:	e795      	b.n	2400f9a4 <f_findnext+0x1c>
2400fa78:	24017f80 	.word	0x24017f80

2400fa7c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2400fa7c:	b570      	push	{r4, r5, r6, lr}
2400fa7e:	b082      	sub	sp, #8
2400fa80:	4615      	mov	r5, r2
2400fa82:	4604      	mov	r4, r0
2400fa84:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2400fa86:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
2400fa88:	2200      	movs	r2, #0
2400fa8a:	a901      	add	r1, sp, #4
2400fa8c:	4668      	mov	r0, sp
2400fa8e:	9500      	str	r5, [sp, #0]
2400fa90:	f7fd fab4 	bl	2400cffc <find_volume>
	if (res == FR_OK) {
2400fa94:	b118      	cbz	r0, 2400fa9e <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400fa96:	2300      	movs	r3, #0
2400fa98:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2400fa9a:	b002      	add	sp, #8
2400fa9c:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400fa9e:	e9dd 1300 	ldrd	r1, r3, [sp]
2400faa2:	4620      	mov	r0, r4
		obj->fs = fs;
2400faa4:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400faa6:	f7fe fb05 	bl	2400e0b4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2400faaa:	bb08      	cbnz	r0, 2400faf0 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2400faac:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
2400fab0:	2b00      	cmp	r3, #0
2400fab2:	db25      	blt.n	2400fb00 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2400fab4:	79a3      	ldrb	r3, [r4, #6]
2400fab6:	06db      	lsls	r3, r3, #27
2400fab8:	d520      	bpl.n	2400fafc <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400faba:	9b01      	ldr	r3, [sp, #4]
2400fabc:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
2400fabe:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
2400fac0:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
2400fac2:	2803      	cmp	r0, #3
2400fac4:	d102      	bne.n	2400facc <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400fac6:	8a89      	ldrh	r1, [r1, #20]
2400fac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400facc:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
2400face:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400fad0:	2100      	movs	r1, #0
2400fad2:	4620      	mov	r0, r4
				obj->id = fs->id;
2400fad4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400fad6:	f7fe f88b 	bl	2400dbf0 <dir_sdi>
				if (res == FR_OK) {
2400fada:	b948      	cbnz	r0, 2400faf0 <f_findfirst+0x74>
					if (obj->sclust) {
2400fadc:	68a3      	ldr	r3, [r4, #8]
2400fade:	b98b      	cbnz	r3, 2400fb04 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
2400fae0:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
2400fae2:	4631      	mov	r1, r6
2400fae4:	4620      	mov	r0, r4
}
2400fae6:	b002      	add	sp, #8
2400fae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2400faec:	f7ff bf4c 	b.w	2400f988 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400faf0:	2804      	cmp	r0, #4
2400faf2:	d1d0      	bne.n	2400fa96 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400faf4:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400faf6:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400faf8:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2400fafa:	e7ce      	b.n	2400fa9a <f_findfirst+0x1e>
					res = FR_NO_PATH;
2400fafc:	2005      	movs	r0, #5
2400fafe:	e7ca      	b.n	2400fa96 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400fb00:	9b01      	ldr	r3, [sp, #4]
2400fb02:	e7e4      	b.n	2400face <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2400fb04:	4601      	mov	r1, r0
2400fb06:	4620      	mov	r0, r4
2400fb08:	f7fd f8b8 	bl	2400cc7c <inc_lock>
2400fb0c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2400fb0e:	2800      	cmp	r0, #0
2400fb10:	d1e7      	bne.n	2400fae2 <f_findfirst+0x66>
2400fb12:	2012      	movs	r0, #18
2400fb14:	e7bf      	b.n	2400fa96 <f_findfirst+0x1a>
2400fb16:	bf00      	nop

2400fb18 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
2400fb18:	4b10      	ldr	r3, [pc, #64]	; (2400fb5c <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
2400fb1a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
2400fb1c:	7a5c      	ldrb	r4, [r3, #9]
2400fb1e:	b9cc      	cbnz	r4, 2400fb54 <FATFS_LinkDriver+0x3c>
2400fb20:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
2400fb22:	f004 00ff 	and.w	r0, r4, #255	; 0xff
2400fb26:	7a5c      	ldrb	r4, [r3, #9]
2400fb28:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
2400fb2a:	7a5c      	ldrb	r4, [r3, #9]
2400fb2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2400fb30:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
2400fb32:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2400fb34:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
2400fb36:	441c      	add	r4, r3
2400fb38:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
2400fb3a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
2400fb3c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
2400fb3e:	b2e4      	uxtb	r4, r4
2400fb40:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
2400fb42:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2400fb44:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
2400fb46:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
2400fb48:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
2400fb4a:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
2400fb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
2400fb50:	708b      	strb	r3, [r1, #2]
}
2400fb52:	4770      	bx	lr
  uint8_t ret = 1;
2400fb54:	2001      	movs	r0, #1
}
2400fb56:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fb5a:	4770      	bx	lr
2400fb5c:	2001daf8 	.word	0x2001daf8

2400fb60 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2400fb60:	287f      	cmp	r0, #127	; 0x7f
2400fb62:	d912      	bls.n	2400fb8a <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
2400fb64:	b971      	cbnz	r1, 2400fb84 <ff_convert+0x24>
2400fb66:	4b0c      	ldr	r3, [pc, #48]	; (2400fb98 <ff_convert+0x38>)
2400fb68:	e001      	b.n	2400fb6e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2400fb6a:	2980      	cmp	r1, #128	; 0x80
2400fb6c:	d00c      	beq.n	2400fb88 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
2400fb6e:	f833 2b02 	ldrh.w	r2, [r3], #2
2400fb72:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
2400fb76:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
2400fb78:	4282      	cmp	r2, r0
2400fb7a:	d1f6      	bne.n	2400fb6a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
2400fb7c:	f10c 0080 	add.w	r0, ip, #128	; 0x80
2400fb80:	b280      	uxth	r0, r0
2400fb82:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400fb84:	28ff      	cmp	r0, #255	; 0xff
2400fb86:	d901      	bls.n	2400fb8c <ff_convert+0x2c>
2400fb88:	2000      	movs	r0, #0
		}
	}

	return c;
}
2400fb8a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400fb8c:	4b02      	ldr	r3, [pc, #8]	; (2400fb98 <ff_convert+0x38>)
2400fb8e:	3880      	subs	r0, #128	; 0x80
2400fb90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
2400fb94:	4770      	bx	lr
2400fb96:	bf00      	nop
2400fb98:	24018010 	.word	0x24018010

2400fb9c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
2400fb9c:	4b22      	ldr	r3, [pc, #136]	; (2400fc28 <ff_wtoupper+0x8c>)
2400fb9e:	4a23      	ldr	r2, [pc, #140]	; (2400fc2c <ff_wtoupper+0x90>)
2400fba0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400fba4:	bf28      	it	cs
2400fba6:	4613      	movcs	r3, r2
{
2400fba8:	b510      	push	{r4, lr}
2400fbaa:	3304      	adds	r3, #4
2400fbac:	e001      	b.n	2400fbb2 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
2400fbae:	3304      	adds	r3, #4
2400fbb0:	b1da      	cbz	r2, 2400fbea <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
2400fbb2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
2400fbb6:	461c      	mov	r4, r3
2400fbb8:	b1b1      	cbz	r1, 2400fbe8 <ff_wtoupper+0x4c>
2400fbba:	4288      	cmp	r0, r1
2400fbbc:	d314      	bcc.n	2400fbe8 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400fbbe:	f833 2c02 	ldrh.w	r2, [r3, #-2]
2400fbc2:	fa5f fc82 	uxtb.w	ip, r2
2400fbc6:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
2400fbc8:	eb0c 0e01 	add.w	lr, ip, r1
2400fbcc:	4570      	cmp	r0, lr
2400fbce:	daee      	bge.n	2400fbae <ff_wtoupper+0x12>
			switch (cmd) {
2400fbd0:	2a08      	cmp	r2, #8
2400fbd2:	d809      	bhi.n	2400fbe8 <ff_wtoupper+0x4c>
2400fbd4:	e8df f002 	tbb	[pc, r2]
2400fbd8:	19161005 	.word	0x19161005
2400fbdc:	25221f1c 	.word	0x25221f1c
2400fbe0:	0c          	.byte	0x0c
2400fbe1:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
2400fbe2:	1a41      	subs	r1, r0, r1
2400fbe4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
2400fbe8:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
2400fbea:	eb04 034c 	add.w	r3, r4, ip, lsl #1
2400fbee:	e7dc      	b.n	2400fbaa <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
2400fbf0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
2400fbf4:	b280      	uxth	r0, r0
}
2400fbf6:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2400fbf8:	1a43      	subs	r3, r0, r1
2400fbfa:	f003 0301 	and.w	r3, r3, #1
2400fbfe:	1ac0      	subs	r0, r0, r3
2400fc00:	b280      	uxth	r0, r0
}
2400fc02:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
2400fc04:	3810      	subs	r0, #16
2400fc06:	b280      	uxth	r0, r0
}
2400fc08:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
2400fc0a:	3820      	subs	r0, #32
2400fc0c:	b280      	uxth	r0, r0
}
2400fc0e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
2400fc10:	3830      	subs	r0, #48	; 0x30
2400fc12:	b280      	uxth	r0, r0
}
2400fc14:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
2400fc16:	381a      	subs	r0, #26
2400fc18:	b280      	uxth	r0, r0
}
2400fc1a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
2400fc1c:	3008      	adds	r0, #8
2400fc1e:	b280      	uxth	r0, r0
}
2400fc20:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
2400fc22:	3850      	subs	r0, #80	; 0x50
2400fc24:	b280      	uxth	r0, r0
}
2400fc26:	bd10      	pop	{r4, pc}
2400fc28:	24018110 	.word	0x24018110
2400fc2c:	24018304 	.word	0x24018304

2400fc30 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
2400fc30:	b538      	push	{r3, r4, r5, lr}
2400fc32:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2400fc36:	680d      	ldr	r5, [r1, #0]
{
2400fc38:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fc3a:	2010      	movs	r0, #16
{
2400fc3c:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fc40:	4629      	mov	r1, r5
2400fc42:	f003 f8ad 	bl	24012da0 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2400fc46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
2400fc4a:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fc4c:	6020      	str	r0, [r4, #0]
    p->mempool = m;
2400fc4e:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
2400fc50:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
2400fc54:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
2400fc56:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
2400fc5a:	edc0 7a02 	vstr	s15, [r0, #8]
}
2400fc5e:	ecbd 8b02 	vpop	{d8}
2400fc62:	bd38      	pop	{r3, r4, r5, pc}

2400fc64 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
2400fc64:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
2400fc66:	6801      	ldr	r1, [r0, #0]
2400fc68:	f003 b95c 	b.w	24012f24 <mpool_free>

2400fc6c <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
2400fc6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400fc70:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400fc8c <tPowerFollower_setFactor+0x20>
2400fc74:	6803      	ldr	r3, [r0, #0]
2400fc76:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
2400fc7a:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2400fc7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
2400fc82:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
2400fc86:	edc3 7a02 	vstr	s15, [r3, #8]
}
2400fc8a:	4770      	bx	lr
2400fc8c:	00000000 	.word	0x00000000

2400fc90 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
2400fc90:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
2400fc92:	ee60 7a00 	vmul.f32	s15, s0, s0
2400fc96:	edd3 6a03 	vldr	s13, [r3, #12]
2400fc9a:	ed93 0a02 	vldr	s0, [r3, #8]
2400fc9e:	ed93 7a01 	vldr	s14, [r3, #4]
2400fca2:	ee20 0a26 	vmul.f32	s0, s0, s13
2400fca6:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fcaa:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
2400fcae:	4770      	bx	lr

2400fcb0 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
2400fcb0:	b570      	push	{r4, r5, r6, lr}
2400fcb2:	460d      	mov	r5, r1
2400fcb4:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fcb6:	202c      	movs	r0, #44	; 0x2c
{
2400fcb8:	ed2d 8b02 	vpush	{d8}
2400fcbc:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2400fcbe:	6811      	ldr	r1, [r2, #0]
{
2400fcc0:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fcc4:	9101      	str	r1, [sp, #4]
2400fcc6:	f003 f86b 	bl	24012da0 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2400fcca:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
2400fcce:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fcd0:	6030      	str	r0, [r6, #0]
2400fcd2:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
2400fcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
2400fcd8:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2400fcda:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400fcdc:	eef4 7ac8 	vcmpe.f32	s15, s16
2400fce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fce4:	d550      	bpl.n	2400fd88 <tLinearDelay_initToPool+0xd8>
2400fce6:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fcea:	00a8      	lsls	r0, r5, #2
2400fcec:	f003 f858 	bl	24012da0 <mpool_alloc>

    d->gain = 1.0f;
2400fcf0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
2400fcf4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 2400fd9c <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
2400fcf8:	2300      	movs	r3, #0
    d->gain = 1.0f;
2400fcfa:	6062      	str	r2, [r4, #4]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fcfc:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
2400fcfe:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
2400fd02:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd06:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
2400fd0a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
2400fd0e:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd10:	edd5 7a07 	vldr	s15, [r5, #28]
2400fd14:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400fd18:	f01d fcf2 	bl	2402d700 <__LEAF_clip_veneer>

    Lfloat outPointer = d->inPoint - d->delay;
2400fd1c:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd20:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
2400fd24:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
2400fd28:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2400fd2a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2400fd2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd36:	d50a      	bpl.n	2400fd4e <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
2400fd38:	ee07 2a90 	vmov	s15, r2
2400fd3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400fd40:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400fd44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400fd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd4c:	d4f8      	bmi.n	2400fd40 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
2400fd4e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400fd52:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
2400fd56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400fd5a:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400fd5e:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
2400fd60:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
2400fd64:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400fd66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400fd6a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
2400fd6e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
2400fd72:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400fd76:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400fd7a:	d101      	bne.n	2400fd80 <tLinearDelay_initToPool+0xd0>
2400fd7c:	2300      	movs	r3, #0
2400fd7e:	61ab      	str	r3, [r5, #24]
}
2400fd80:	b002      	add	sp, #8
2400fd82:	ecbd 8b02 	vpop	{d8}
2400fd86:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
2400fd88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400fd8c:	2300      	movs	r3, #0
2400fd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd92:	bf4c      	ite	mi
2400fd94:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
2400fd96:	ed80 8a08 	vstrpl	s16, [r0, #32]
2400fd9a:	e7a6      	b.n	2400fcea <tLinearDelay_initToPool+0x3a>
2400fd9c:	00000000 	.word	0x00000000

2400fda0 <tLinearDelay_free>:
{
2400fda0:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400fda2:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
2400fda4:	6821      	ldr	r1, [r4, #0]
2400fda6:	68a0      	ldr	r0, [r4, #8]
2400fda8:	f003 f8bc 	bl	24012f24 <mpool_free>
    mpool_free((char*)d, d->mempool);
2400fdac:	6821      	ldr	r1, [r4, #0]
2400fdae:	4620      	mov	r0, r4
}
2400fdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
2400fdb4:	f003 b8b6 	b.w	24012f24 <mpool_free>

2400fdb8 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
2400fdb8:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fdba:	69cb      	ldr	r3, [r1, #28]
2400fdbc:	b14b      	cbz	r3, 2400fdd2 <tLinearDelay_clear+0x1a>
2400fdbe:	2300      	movs	r3, #0
        d->buff[i] = 0;
2400fdc0:	2000      	movs	r0, #0
2400fdc2:	688a      	ldr	r2, [r1, #8]
2400fdc4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fdc8:	3301      	adds	r3, #1
        d->buff[i] = 0;
2400fdca:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fdcc:	69ca      	ldr	r2, [r1, #28]
2400fdce:	429a      	cmp	r2, r3
2400fdd0:	d8f7      	bhi.n	2400fdc2 <tLinearDelay_clear+0xa>
}
2400fdd2:	4770      	bx	lr

2400fdd4 <tLinearDelay_tick>:
    _tLinearDelay* d = *dl;
2400fdd4:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2400fdd6:	edd3 7a01 	vldr	s15, [r3, #4]
2400fdda:	6959      	ldr	r1, [r3, #20]
2400fddc:	689a      	ldr	r2, [r3, #8]
2400fdde:	ee27 0a80 	vmul.f32	s0, s15, s0
2400fde2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400fde6:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fdea:	695a      	ldr	r2, [r3, #20]
2400fdec:	69d9      	ldr	r1, [r3, #28]
2400fdee:	3201      	adds	r2, #1
2400fdf0:	428a      	cmp	r2, r1
2400fdf2:	615a      	str	r2, [r3, #20]
2400fdf4:	d101      	bne.n	2400fdfa <tLinearDelay_tick+0x26>
2400fdf6:	2200      	movs	r2, #0
2400fdf8:	615a      	str	r2, [r3, #20]
    uint32_t idx = (uint32_t) d->outPoint;
2400fdfa:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fdfc:	6898      	ldr	r0, [r3, #8]
2400fdfe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2400fe02:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
2400fe06:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe08:	ed9c 0a00 	vldr	s0, [ip]
    if ((idx + 1) < d->maxDelay)
2400fe0c:	4291      	cmp	r1, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe0e:	ee20 0a27 	vmul.f32	s0, s0, s15
2400fe12:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400fe16:	d909      	bls.n	2400fe2c <tLinearDelay_tick+0x58>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fe18:	ed9c 7a01 	vldr	s14, [ip, #4]
2400fe1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe20:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fe22:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fe26:	ed83 0a03 	vstr	s0, [r3, #12]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe2a:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400fe2c:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe30:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
2400fe32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe36:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400fe38:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fe3c:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fe40:	4770      	bx	lr
2400fe42:	bf00      	nop

2400fe44 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
2400fe44:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2400fe46:	edd3 7a01 	vldr	s15, [r3, #4]
2400fe4a:	6959      	ldr	r1, [r3, #20]
2400fe4c:	689a      	ldr	r2, [r3, #8]
2400fe4e:	ee27 0a80 	vmul.f32	s0, s15, s0
2400fe52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400fe56:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fe5a:	695a      	ldr	r2, [r3, #20]
2400fe5c:	69d9      	ldr	r1, [r3, #28]
2400fe5e:	3201      	adds	r2, #1
2400fe60:	428a      	cmp	r2, r1
2400fe62:	615a      	str	r2, [r3, #20]
2400fe64:	d101      	bne.n	2400fe6a <tLinearDelay_tickIn+0x26>
2400fe66:	2200      	movs	r2, #0
2400fe68:	615a      	str	r2, [r3, #20]
}
2400fe6a:	4770      	bx	lr

2400fe6c <tLinearDelay_tickOut>:
{
2400fe6c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
2400fe6e:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
2400fe70:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe72:	6899      	ldr	r1, [r3, #8]
2400fe74:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2400fe78:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
2400fe7c:	69dc      	ldr	r4, [r3, #28]
2400fe7e:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe80:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
2400fe84:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe86:	ee20 0a27 	vmul.f32	s0, s0, s15
2400fe8a:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400fe8e:	d20b      	bcs.n	2400fea8 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fe90:	ed90 7a01 	vldr	s14, [r0, #4]
2400fe94:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe98:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fe9a:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fe9e:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fea2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fea6:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400fea8:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400feac:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
2400feae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400feb2:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400feb4:	eea7 0a27 	vfma.f32	s0, s14, s15
2400feb8:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400febc:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fec0:	4770      	bx	lr
2400fec2:	bf00      	nop

2400fec4 <tLinearDelay_setDelay>:
{
2400fec4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400fec6:	6804      	ldr	r4, [r0, #0]
{
2400fec8:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fecc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 2400ff44 <tLinearDelay_setDelay+0x80>
2400fed0:	edd4 7a07 	vldr	s15, [r4, #28]
2400fed4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400fed8:	f01d fc12 	bl	2402d700 <__LEAF_clip_veneer>
    Lfloat outPointer = d->inPoint - d->delay;
2400fedc:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fee0:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
2400fee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
2400fee8:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2400feea:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2400feee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400fef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fef6:	d50a      	bpl.n	2400ff0e <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
2400fef8:	ee07 2a90 	vmov	s15, r2
2400fefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400ff00:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400ff04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400ff08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ff0c:	d4f8      	bmi.n	2400ff00 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
2400ff0e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400ff12:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
2400ff16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400ff1a:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400ff1e:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
2400ff20:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
2400ff24:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400ff26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400ff2a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
2400ff2e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
2400ff32:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400ff36:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400ff3a:	d000      	beq.n	2400ff3e <tLinearDelay_setDelay+0x7a>
}
2400ff3c:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400ff3e:	2300      	movs	r3, #0
2400ff40:	61a3      	str	r3, [r4, #24]
}
2400ff42:	bd10      	pop	{r4, pc}
2400ff44:	00000000 	.word	0x00000000

2400ff48 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
2400ff48:	b570      	push	{r4, r5, r6, lr}
2400ff4a:	460d      	mov	r5, r1
2400ff4c:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400ff4e:	2030      	movs	r0, #48	; 0x30
{
2400ff50:	ed2d 8b02 	vpush	{d8}
2400ff54:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2400ff56:	6811      	ldr	r1, [r2, #0]
{
2400ff58:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400ff5c:	9101      	str	r1, [sp, #4]
2400ff5e:	f002 ff1f 	bl	24012da0 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2400ff62:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
2400ff66:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400ff68:	6030      	str	r0, [r6, #0]
2400ff6a:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
2400ff6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
2400ff70:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2400ff72:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400ff74:	eef4 7ac8 	vcmpe.f32	s15, s16
2400ff78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ff7c:	d558      	bpl.n	24010030 <tHermiteDelay_initToPool+0xe8>
2400ff7e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
2400ff82:	2d00      	cmp	r5, #0
2400ff84:	d14f      	bne.n	24010026 <tHermiteDelay_initToPool+0xde>
2400ff86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
2400ff8a:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
2400ff8e:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
2400ff92:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
2400ff96:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
2400ff9a:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
2400ff9e:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
2400ffa0:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
2400ffa2:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400ffa4:	00a8      	lsls	r0, r5, #2
2400ffa6:	f002 fefb 	bl	24012da0 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
2400ffaa:	2300      	movs	r3, #0
    d->gain = 1.0f;
2400ffac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400ffb0:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
2400ffb2:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
2400ffb4:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
2400ffb6:	2300      	movs	r3, #0
    d->gain = 1.0f;
2400ffb8:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
2400ffba:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
2400ffbe:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, Lfloat delay)
{
    _tHermiteDelay* d = *dl;
2400ffc2:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay;
2400ffc4:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
2400ffc8:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
2400ffcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400ffd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
2400ffd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400ffd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ffdc:	d50a      	bpl.n	2400fff4 <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
2400ffde:	ed93 7a07 	vldr	s14, [r3, #28]
2400ffe2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400ffe6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2400ffea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400ffee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fff2:	d4f8      	bmi.n	2400ffe6 <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
2400fff4:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
2400fff8:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
2400fffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400fffe:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
24010002:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
24010006:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
2401000a:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
2401000c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24010010:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
24010014:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010016:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
2401001a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
2401001e:	b002      	add	sp, #8
24010020:	ecbd 8b02 	vpop	{d8}
24010024:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24010026:	1e6b      	subs	r3, r5, #1
24010028:	422b      	tst	r3, r5
2401002a:	461a      	mov	r2, r3
2401002c:	d1ad      	bne.n	2400ff8a <tHermiteDelay_initToPool+0x42>
2401002e:	e7b8      	b.n	2400ffa2 <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
24010030:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24010034:	2300      	movs	r3, #0
24010036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401003a:	bf4c      	ite	mi
2401003c:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
2401003e:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
24010042:	e79e      	b.n	2400ff82 <tHermiteDelay_initToPool+0x3a>

24010044 <tHermiteDelay_free>:
{
24010044:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
24010046:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
24010048:	e9d4 1000 	ldrd	r1, r0, [r4]
2401004c:	f002 ff6a 	bl	24012f24 <mpool_free>
    mpool_free((char*)d, d->mempool);
24010050:	6821      	ldr	r1, [r4, #0]
24010052:	4620      	mov	r0, r4
}
24010054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24010058:	f002 bf64 	b.w	24012f24 <mpool_free>

2401005c <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
2401005c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2401005e:	69cb      	ldr	r3, [r1, #28]
24010060:	b14b      	cbz	r3, 24010076 <tHermiteDelay_clear+0x1a>
24010062:	2300      	movs	r3, #0
        d->buff[i] = 0;
24010064:	2000      	movs	r0, #0
24010066:	684a      	ldr	r2, [r1, #4]
24010068:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
2401006c:	3301      	adds	r3, #1
        d->buff[i] = 0;
2401006e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010070:	69ca      	ldr	r2, [r1, #28]
24010072:	429a      	cmp	r2, r3
24010074:	d8f7      	bhi.n	24010066 <tHermiteDelay_clear+0xa>
}
24010076:	4770      	bx	lr

24010078 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
24010078:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
2401007a:	6959      	ldr	r1, [r3, #20]
2401007c:	685a      	ldr	r2, [r3, #4]
2401007e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010082:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010086:	695a      	ldr	r2, [r3, #20]
24010088:	6899      	ldr	r1, [r3, #8]
2401008a:	3201      	adds	r2, #1
2401008c:	400a      	ands	r2, r1
2401008e:	615a      	str	r2, [r3, #20]
}
24010090:	4770      	bx	lr
24010092:	bf00      	nop

24010094 <tHermiteDelay_tickOut>:
{
24010094:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
24010096:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24010098:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2401009a:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
2401009e:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
240100a0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
240100a4:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
240100a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240100aa:	edd3 1a00 	vldr	s3, [r3]
240100ae:	69e3      	ldr	r3, [r4, #28]
240100b0:	440b      	add	r3, r1
240100b2:	3b01      	subs	r3, #1
240100b4:	4003      	ands	r3, r0
240100b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240100ba:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
240100be:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
240100c0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
240100c4:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
240100c6:	edd1 0a00 	vldr	s1, [r1]
240100ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240100ce:	ed92 1a00 	vldr	s2, [r2]
240100d2:	f002 fd79 	bl	24012bc8 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
240100d6:	69a3      	ldr	r3, [r4, #24]
240100d8:	68a2      	ldr	r2, [r4, #8]
240100da:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
240100dc:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
240100e0:	4013      	ands	r3, r2
240100e2:	61a3      	str	r3, [r4, #24]
}
240100e4:	bd10      	pop	{r4, pc}
240100e6:	bf00      	nop

240100e8 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
240100e8:	6803      	ldr	r3, [r0, #0]
    Lfloat outPointer = d->inPoint - d->delay;
240100ea:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
240100ee:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
240100f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240100f6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
240100fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240100fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010102:	d50a      	bpl.n	2401011a <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
24010104:	edd3 7a07 	vldr	s15, [r3, #28]
24010108:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401010c:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24010110:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010118:	d4f8      	bmi.n	2401010c <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
2401011a:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
2401011e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
24010120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010124:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
24010128:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
2401012c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
24010130:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
24010132:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24010136:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
2401013a:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2401013c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
24010140:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24010144:	4770      	bx	lr
24010146:	bf00      	nop

24010148 <tHermiteDelay_tapOut>:

Lfloat tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
24010148:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
2401014a:	43c9      	mvns	r1, r1
2401014c:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
2401014e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
24010152:	4401      	add	r1, r0
24010154:	4011      	ands	r1, r2
    return d->buff[tap];
24010156:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
2401015a:	ed91 0a00 	vldr	s0, [r1]
2401015e:	4770      	bx	lr

24010160 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tHermiteDelay_addTo (tHermiteDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
24010160:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24010162:	43c9      	mvns	r1, r1
24010164:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
24010166:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
2401016a:	4401      	add	r1, r0
2401016c:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
2401016e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
24010172:	edd1 7a00 	vldr	s15, [r1]
24010176:	ee30 0a27 	vadd.f32	s0, s0, s15
2401017a:	ed81 0a00 	vstr	s0, [r1]
}
2401017e:	4770      	bx	lr

24010180 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
24010180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
24010182:	698f      	ldr	r7, [r1, #24]
{
24010184:	4606      	mov	r6, r0
24010186:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010188:	2020      	movs	r0, #32
2401018a:	4639      	mov	r1, r7
2401018c:	f002 fe08 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
24010190:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
24010194:	4a10      	ldr	r2, [pc, #64]	; (240101d8 <tCrusher_init+0x58>)
    c->op = 4;
24010196:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010198:	6030      	str	r0, [r6, #0]
2401019a:	4604      	mov	r4, r0
    c->op = 4;
2401019c:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
2401019e:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
240101a0:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
240101a2:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
240101a4:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240101a6:	2010      	movs	r0, #16
    _tMempool* m = *mp;
240101a8:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240101aa:	4629      	mov	r1, r5
240101ac:	f002 fdf8 	bl	24012da0 <mpool_alloc>
    s->invRatio = 1.0f;
240101b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
240101b4:	2200      	movs	r2, #0
    s->count = 0;
240101b6:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240101b8:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
240101ba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240101dc <tCrusher_init+0x5c>
    s->mempool = m;
240101be:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
240101c0:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
240101c2:	6082      	str	r2, [r0, #8]
    s->count = 0;
240101c4:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
240101c6:	eddf 7a06 	vldr	s15, [pc, #24]	; 240101e0 <tCrusher_init+0x60>
240101ca:	edd4 6a03 	vldr	s13, [r4, #12]
240101ce:	eee6 7a87 	vfma.f32	s15, s13, s14
240101d2:	edc4 7a06 	vstr	s15, [r4, #24]
}
240101d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240101d8:	3951b717 	.word	0x3951b717
240101dc:	3912ccf6 	.word	0x3912ccf6
240101e0:	3e99999a 	.word	0x3e99999a

240101e4 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
240101e4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24010260 <tCrusher_tick+0x7c>
240101e8:	ee20 0a27 	vmul.f32	s0, s0, s15
{
240101ec:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
240101ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
240101f2:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
240101f4:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
240101f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
240101fc:	6960      	ldr	r0, [r4, #20]
240101fe:	05c0      	lsls	r0, r0, #23
24010200:	ee20 0a27 	vmul.f32	s0, s0, s15
24010204:	f002 fb48 	bl	24012898 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24010208:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2401020c:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
24010210:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010214:	f01d fa74 	bl	2402d700 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
24010218:	edd4 0a04 	vldr	s1, [r4, #16]
2401021c:	f002 fb2a 	bl	24012874 <LEAF_round>
    _tSampleReducer* s = *sr;
24010220:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
24010222:	68da      	ldr	r2, [r3, #12]
24010224:	edd3 7a01 	vldr	s15, [r3, #4]
24010228:	ee07 2a10 	vmov	s14, r2
2401022c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010230:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010238:	dc08      	bgt.n	2401024c <tCrusher_tick+0x68>
    s->count++;
2401023a:	3201      	adds	r2, #1
    return s->hold;
2401023c:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
24010240:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
24010242:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
24010246:	ee20 0a27 	vmul.f32	s0, s0, s15
2401024a:	bd10      	pop	{r4, pc}
        s->hold = input;
2401024c:	2201      	movs	r2, #1
2401024e:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
24010252:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
24010254:	edd4 7a06 	vldr	s15, [r4, #24]
}
24010258:	ee20 0a27 	vmul.f32	s0, s0, s15
2401025c:	bd10      	pop	{r4, pc}
2401025e:	bf00      	nop
24010260:	459c4000 	.word	0x459c4000

24010264 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
24010264:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
24010268:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
2401026a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401026e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24010272:	ed83 0a05 	vstr	s0, [r3, #20]
}
24010276:	4770      	bx	lr

24010278 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
24010278:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
2401027c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 240102b0 <tCrusher_setQuality+0x38>
24010280:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24010284:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
24010286:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
24010288:	f01d fa3a 	bl	2402d700 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
2401028c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 240102b4 <tCrusher_setQuality+0x3c>
24010290:	eddf 7a09 	vldr	s15, [pc, #36]	; 240102b8 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010294:	eddf 6a09 	vldr	s13, [pc, #36]	; 240102bc <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
24010298:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2401029c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240102c0 <tCrusher_setQuality+0x48>
240102a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
240102a4:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
240102a8:	ed84 7a06 	vstr	s14, [r4, #24]
}
240102ac:	bd10      	pop	{r4, pc}
240102ae:	bf00      	nop
240102b0:	00000000 	.word	0x00000000
240102b4:	459c4000 	.word	0x459c4000
240102b8:	3c23d70a 	.word	0x3c23d70a
240102bc:	3912ccf6 	.word	0x3912ccf6
240102c0:	3e99999a 	.word	0x3e99999a

240102c4 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
240102c4:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
240102c6:	ed83 0a04 	vstr	s0, [r3, #16]
}
240102ca:	4770      	bx	lr

240102cc <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
240102cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
240102d0:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
240102d2:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
240102d6:	eeb4 0a67 	vcmp.f32	s0, s15
240102da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240102de:	d809      	bhi.n	240102f4 <tCrusher_setSamplingRatio+0x28>
240102e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
240102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240102e8:	db04      	blt.n	240102f4 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
240102ea:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
240102ee:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
240102f0:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
240102f4:	4770      	bx	lr
240102f6:	bf00      	nop

240102f8 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
240102f8:	b570      	push	{r4, r5, r6, lr}
240102fa:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
240102fe:	698d      	ldr	r5, [r1, #24]
{
24010300:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010302:	206c      	movs	r0, #108	; 0x6c
24010304:	4629      	mov	r1, r5
24010306:	f002 fd4b 	bl	24012da0 <mpool_alloc>
2401030a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2401030c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401030e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
24010312:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010314:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24010316:	ed93 8a00 	vldr	s16, [r3]
2401031a:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401031e:	ee80 0a08 	vdiv.f32	s0, s0, s16
24010322:	f005 fb85 	bl	24015a30 <expf>
24010326:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
2401032a:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
2401032e:	ee87 0a88 	vdiv.f32	s0, s15, s16
24010332:	f005 fb7d 	bl	24015a30 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
24010336:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
2401033a:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
2401033c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
24010340:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
24010342:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
24010344:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
24010346:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
24010348:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
2401034c:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
2401034e:	62e3      	str	r3, [r4, #44]	; 0x2c
24010350:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
24010352:	6363      	str	r3, [r4, #52]	; 0x34
24010354:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
24010356:	63e3      	str	r3, [r4, #60]	; 0x3c
24010358:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
2401035a:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
2401035c:	4905      	ldr	r1, [pc, #20]	; (24010374 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
2401035e:	4b06      	ldr	r3, [pc, #24]	; (24010378 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24010360:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
24010364:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
24010366:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
24010368:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
2401036a:	6223      	str	r3, [r4, #32]
}
2401036c:	ecbd 8b02 	vpop	{d8}
24010370:	bd70      	pop	{r4, r5, r6, pc}
24010372:	bf00      	nop
24010374:	40400000 	.word	0x40400000
24010378:	3e2aaaab 	.word	0x3e2aaaab

2401037c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
2401037c:	b510      	push	{r4, lr}
2401037e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
24010382:	6804      	ldr	r4, [r0, #0]
{
24010384:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
24010388:	f002 f9f0 	bl	2401276c <fastabsf>
2401038c:	f002 fc9c 	bl	24012cc8 <fasteratodb>
24010390:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 24010444 <tCompressor_tick+0xc8>
24010394:	eef0 0a40 	vmov.f32	s1, s0
24010398:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24010448 <tCompressor_tick+0xcc>
2401039c:	f01d f9b0 	bl	2402d700 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
240103a0:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
240103a4:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
240103a8:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
240103ac:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
240103b0:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
240103b4:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
240103b8:	eef4 7ac7 	vcmpe.f32	s15, s14
240103bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240103c0:	db23      	blt.n	2401040a <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
240103c2:	2300      	movs	r3, #0
240103c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24010444 <tCompressor_tick+0xc8>
240103c8:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
240103ca:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
240103ce:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
240103d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
240103d6:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
240103da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
240103de:	bf4c      	ite	mi
240103e0:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
240103e4:	ed94 6a02 	vldrpl	s12, [r4, #8]
240103e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
240103ec:	ee67 7a87 	vmul.f32	s15, s15, s14
240103f0:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
240103f4:	ee30 0a67 	vsub.f32	s0, s0, s15
240103f8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
240103fc:	f002 fc98 	bl	24012d30 <fasterdbtoa>
    return attenuation * in;
}
24010400:	ee28 0a00 	vmul.f32	s0, s16, s0
24010404:	ecbd 8b02 	vpop	{d8}
24010408:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401040a:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
2401040e:	edd4 5a07 	vldr	s11, [r4, #28]
24010412:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
2401041a:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401041e:	dd0c      	ble.n	2401043a <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010420:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
24010424:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
24010428:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2401042a:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
2401042e:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010430:	ee67 7a87 	vmul.f32	s15, s15, s14
24010434:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
24010438:	e7c7      	b.n	240103ca <tCompressor_tick+0x4e>
        c->isActive = 1;
2401043a:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
2401043c:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
24010440:	6463      	str	r3, [r4, #68]	; 0x44
24010442:	e7c2      	b.n	240103ca <tCompressor_tick+0x4e>
24010444:	00000000 	.word	0x00000000
24010448:	c2b40000 	.word	0xc2b40000

2401044c <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
2401044c:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401044e:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
24010452:	6800      	ldr	r0, [r0, #0]
{
24010454:	eef0 7a40 	vmov.f32	s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010458:	ee07 3a10 	vmov	s14, r3
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
2401045c:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbTableSizeMinus1 = atodbTableSize-1;
24010460:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010462:	eef8 6ac7 	vcvt.f32.s32	s13, s14
{
24010466:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
24010468:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
2401046a:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
2401046c:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401046e:	ee86 7aa0 	vdiv.f32	s14, s13, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24010472:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24010474:	ee67 7a27 	vmul.f32	s15, s14, s15
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010478:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
2401047c:	edc0 7a17 	vstr	s15, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010480:	ee07 3a90 	vmov	s15, r3
24010484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24010488:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
2401048c:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010490:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24010494:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
24010498:	4770      	bx	lr
2401049a:	bf00      	nop

2401049c <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
2401049c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
2401049e:	6817      	ldr	r7, [r2, #0]
{
240104a0:	4614      	mov	r4, r2
240104a2:	4606      	mov	r6, r0
240104a4:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240104a6:	2018      	movs	r0, #24
240104a8:	4639      	mov	r1, r7
{
240104aa:	ed2d 8b02 	vpush	{d8}
240104ae:	eef0 8a40 	vmov.f32	s17, s0
240104b2:	b083      	sub	sp, #12
240104b4:	eeb0 8a41 	vmov.f32	s16, s2
240104b8:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240104bc:	f002 fc70 	bl	24012da0 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240104c0:	4621      	mov	r1, r4
    p->curr=0.0f;
240104c2:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240104c4:	4604      	mov	r4, r0
240104c6:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240104c8:	ed9d 0a01 	vldr	s0, [sp, #4]
240104cc:	3014      	adds	r0, #20
    p->mempool = m;
240104ce:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
240104d2:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
240104d6:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240104d8:	f7ff fbaa 	bl	2400fc30 <tPowerFollower_initToPool>
    p->mode=mode;
240104dc:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
240104de:	ed84 8a02 	vstr	s16, [r4, #8]
}
240104e2:	b003      	add	sp, #12
240104e4:	ecbd 8b02 	vpop	{d8}
240104e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
240104ea:	bf00      	nop

240104ec <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
240104ec:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
240104ee:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
240104f0:	f104 0014 	add.w	r0, r4, #20
240104f4:	f7ff fbb6 	bl	2400fc64 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
240104f8:	6821      	ldr	r1, [r4, #0]
240104fa:	4620      	mov	r0, r4
}
240104fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24010500:	f002 bd10 	b.w	24012f24 <mpool_free>

24010504 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
24010504:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
24010506:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401050a:	4770      	bx	lr

2401050c <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
2401050c:	6800      	ldr	r0, [r0, #0]
2401050e:	3014      	adds	r0, #20
24010510:	f7ff bbac 	b.w	2400fc6c <tPowerFollower_setFactor>

24010514 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
24010514:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
24010516:	60d9      	str	r1, [r3, #12]
}
24010518:	4770      	bx	lr
2401051a:	bf00      	nop

2401051c <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
2401051c:	b510      	push	{r4, lr}
2401051e:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
24010522:	6804      	ldr	r4, [r0, #0]
{
24010524:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24010528:	f104 0014 	add.w	r0, r4, #20
2401052c:	f7ff fbb0 	bl	2400fc90 <tPowerFollower_tick>
24010530:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24010534:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24010536:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2401053a:	b91b      	cbnz	r3, 24010544 <tFeedbackLeveler_tick+0x28>
2401053c:	eddf 7a08 	vldr	s15, [pc, #32]	; 24010560 <tFeedbackLeveler_tick+0x44>
24010540:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
24010544:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010548:	edd4 6a02 	vldr	s13, [r4, #8]
2401054c:	eee6 7ac7 	vfms.f32	s15, s13, s14
24010550:	ee27 0a88 	vmul.f32	s0, s15, s16
24010554:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
24010558:	ecbd 8b02 	vpop	{d8}
2401055c:	bd10      	pop	{r4, pc}
2401055e:	bf00      	nop
24010560:	00000000 	.word	0x00000000

24010564 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
24010564:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
24010566:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401056a:	4770      	bx	lr

2401056c <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
2401056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401056e:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
24010572:	699e      	ldr	r6, [r3, #24]
{
24010574:	4614      	mov	r4, r2
24010576:	4607      	mov	r7, r0
24010578:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401057a:	206c      	movs	r0, #108	; 0x6c
2401057c:	4631      	mov	r1, r6
{
2401057e:	eef0 9a40 	vmov.f32	s19, s0
24010582:	eeb0 9a60 	vmov.f32	s18, s1
24010586:	eeb0 8a41 	vmov.f32	s16, s2
2401058a:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401058e:	f002 fc07 	bl	24012da0 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010592:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24010596:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24010598:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
2401059a:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401059c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
240105a0:	eddf 7a22 	vldr	s15, [pc, #136]	; 2401062c <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
240105a4:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
240105a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
240105aa:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
240105ac:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240105b0:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
240105b4:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
240105b6:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
240105b8:	fe88 8a66 	vminnm.f32	s16, s16, s13
240105bc:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
240105c0:	2200      	movs	r2, #0
240105c2:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 24010630 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240105c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
240105ca:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240105ce:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
240105d2:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
240105d6:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
240105da:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
240105de:	edc0 6a19 	vstr	s13, [r0, #100]	; 0x64
    adsr->sustain = sustain;
240105e2:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
240105e6:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
240105ea:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
240105ec:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->sustain = sustain;
240105f0:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->decay = decay;
240105f4:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->release = release;
240105f8:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240105fc:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010600:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010604:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010608:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401060c:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010610:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010614:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010618:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401061c:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
24010620:	685b      	ldr	r3, [r3, #4]
24010622:	6683      	str	r3, [r0, #104]	; 0x68
}
24010624:	ecbd 8b04 	vpop	{d8-d9}
24010628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401062a:	bf00      	nop
2401062c:	4479ffff 	.word	0x4479ffff
24010630:	00000000 	.word	0x00000000

24010634 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
24010634:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010638:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401063a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
2401063e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
24010642:	bf48      	it	mi
24010644:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24010658 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010648:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
2401064c:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010650:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24010654:	4770      	bx	lr
24010656:	bf00      	nop
24010658:	3c23d70a 	.word	0x3c23d70a

2401065c <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
2401065c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010660:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010662:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
24010666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
2401066a:	bf48      	it	mi
2401066c:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24010680 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010670:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
24010674:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010678:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
2401067c:	4770      	bx	lr
2401067e:	bf00      	nop
24010680:	3c23d70a 	.word	0x3c23d70a

24010684 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24010684:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
24010688:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
2401068a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401068e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010692:	dd02      	ble.n	2401069a <tADSRT_setSustain+0x16>
24010694:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
24010698:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
2401069a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401069e:	2200      	movs	r2, #0
240106a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240106a4:	bf4c      	ite	mi
240106a6:	641a      	strmi	r2, [r3, #64]	; 0x40
    else                     adsr->sustain = sustain;
240106a8:	ed83 0a10 	vstrpl	s0, [r3, #64]	; 0x40
}
240106ac:	4770      	bx	lr
240106ae:	bf00      	nop

240106b0 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
240106b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240106b4:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240106b6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
240106ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
240106be:	bf48      	it	mi
240106c0:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240106d4 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240106c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
240106c8:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240106cc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
240106d0:	4770      	bx	lr
240106d2:	bf00      	nop
240106d4:	3c23d70a 	.word	0x3c23d70a

240106d8 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
{
240106d8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
240106da:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
240106dc:	eddf 7a06 	vldr	s15, [pc, #24]	; 240106f8 <tADSRT_setLeakFactor+0x20>
240106e0:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
240106e4:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
240106e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
240106ec:	f005 fadc 	bl	24015ca8 <powf>
240106f0:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
240106f4:	bd10      	pop	{r4, pc}
240106f6:	bf00      	nop
240106f8:	472c4400 	.word	0x472c4400

240106fc <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
{
    _tADSRT* adsr = *adsrenv;
240106fc:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
240106fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24010700:	b162      	cbz	r2, 2401071c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
24010702:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
24010704:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
24010706:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
24010708:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
2401070a:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
2401070c:	2200      	movs	r2, #0
2401070e:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24010710:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
24010714:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
24010716:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
24010718:	659a      	str	r2, [r3, #88]	; 0x58
}
2401071a:	4770      	bx	lr
        adsr->whichStage = env_attack;
2401071c:	2101      	movs	r1, #1
2401071e:	e7f5      	b.n	2401070c <tADSRT_on+0x10>

24010720 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24010720:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
24010722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24010724:	b11a      	cbz	r2, 2401072e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
24010726:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
24010728:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
2401072a:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
2401072c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
2401072e:	4770      	bx	lr

24010730 <tADSRT_tick>:

Lfloat   tADSRT_tick(tADSRT* const adsrenv)
{
24010730:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24010732:	6804      	ldr	r4, [r0, #0]
{
24010734:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
24010738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2401073a:	3b01      	subs	r3, #1
2401073c:	2b04      	cmp	r3, #4
2401073e:	f200 8154 	bhi.w	240109ea <tADSRT_tick+0x2ba>
24010742:	e8df f003 	tbb	[pc, r3]
24010746:	4d1f      	.short	0x4d1f
24010748:	6f3a      	.short	0x6f3a
2401074a:	03          	.byte	0x03
2401074b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2401074c:	edd4 7a03 	vldr	s15, [r4, #12]
24010750:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
24010754:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010758:	eeb4 1ae7 	vcmpe.f32	s2, s15
2401075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010760:	dd7d      	ble.n	2401085e <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
24010762:	eddf 7aa3 	vldr	s15, [pc, #652]	; 240109f0 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
24010766:	2301      	movs	r3, #1
24010768:	eeb0 0a67 	vmov.f32	s0, s15
2401076c:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
2401076e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
24010772:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
24010776:	ee37 1a81 	vadd.f32	s2, s15, s2
2401077a:	ed84 1a17 	vstr	s2, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
2401077e:	ecbd 8b02 	vpop	{d8}
24010782:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24010784:	edd4 7a03 	vldr	s15, [r4, #12]
24010788:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
2401078c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010790:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010798:	f340 808b 	ble.w	240108b2 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
2401079c:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
2401079e:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
240107a2:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
240107a4:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
240107a8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
240107ac:	ee37 1a81 	vadd.f32	s2, s15, s2
240107b0:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
240107b4:	ecbd 8b02 	vpop	{d8}
240107b8:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
240107ba:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
240107be:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
240107c2:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
240107c6:	ee20 0a26 	vmul.f32	s0, s0, s13
240107ca:	edd4 7a07 	vldr	s15, [r4, #28]
240107ce:	ee20 0a07 	vmul.f32	s0, s0, s14
240107d2:	ee20 0a27 	vmul.f32	s0, s0, s15
240107d6:	ed84 0a06 	vstr	s0, [r4, #24]
}
240107da:	ecbd 8b02 	vpop	{d8}
240107de:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
240107e0:	edd4 7a03 	vldr	s15, [r4, #12]
240107e4:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
240107e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240107ec:	eeb4 1ae7 	vcmpe.f32	s2, s15
240107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107f4:	f340 808b 	ble.w	2401090e <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
240107f8:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
240107fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24010800:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
24010804:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
24010806:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
24010808:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
2401080c:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
2401080e:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
24010812:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24010816:	ee37 1a81 	vadd.f32	s2, s15, s2
2401081a:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
2401081e:	ecbd 8b02 	vpop	{d8}
24010822:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24010824:	edd4 7a03 	vldr	s15, [r4, #12]
24010828:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
2401082c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010830:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010838:	f340 809e 	ble.w	24010978 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
2401083c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 240109f0 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
24010840:	2300      	movs	r3, #0
24010842:	eeb0 0a67 	vmov.f32	s0, s15
24010846:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
24010848:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
2401084c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
24010850:	ee37 1a81 	vadd.f32	s2, s15, s2
24010854:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
}
24010858:	ecbd 8b02 	vpop	{d8}
2401085c:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2401085e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
24010862:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24010866:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
2401086a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2401086e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
24010872:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24010876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401087a:	f100 80b2 	bmi.w	240109e2 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2401087e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010882:	6862      	ldr	r2, [r4, #4]
24010884:	ee17 3a90 	vmov	r3, s15
24010888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401088c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
24010890:	ee16 3a90 	vmov	r3, s13
24010894:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
24010898:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401089c:	ed92 0a00 	vldr	s0, [r2]
240108a0:	f002 f9b4 	bl	24012c0c <LEAF_interpolation_linear>
240108a4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
240108a8:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
240108ac:	ed84 0a06 	vstr	s0, [r4, #24]
240108b0:	e75f      	b.n	24010772 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240108b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
240108b6:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240108ba:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
240108be:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240108c2:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
240108c6:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240108ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240108ce:	f100 8084 	bmi.w	240109da <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
240108d2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240108d6:	6862      	ldr	r2, [r4, #4]
240108d8:	ee17 3a90 	vmov	r3, s15
240108dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240108e0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
240108e4:	ee16 3a90 	vmov	r3, s13
240108e8:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
240108ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240108f0:	ed92 0a00 	vldr	s0, [r2]
240108f4:	f002 f98a 	bl	24012c0c <LEAF_interpolation_linear>
240108f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
240108fc:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24010900:	ee37 0ac0 	vsub.f32	s0, s15, s0
24010904:	ee20 0a08 	vmul.f32	s0, s0, s16
24010908:	ed84 0a06 	vstr	s0, [r4, #24]
2401090c:	e74c      	b.n	240107a8 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401090e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24010912:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010916:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
2401091a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401091e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24010922:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401092a:	d452      	bmi.n	240109d2 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
2401092c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010930:	6862      	ldr	r2, [r4, #4]
24010932:	ee17 3a90 	vmov	r3, s15
24010936:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401093a:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
2401093e:	ee16 3a90 	vmov	r3, s13
24010942:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010946:	ed92 0a00 	vldr	s0, [r2]
2401094a:	f002 f95f 	bl	24012c0c <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
2401094e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24010952:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
24010956:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
2401095a:	ee76 6ac7 	vsub.f32	s13, s13, s14
2401095e:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
24010962:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24010966:	ee67 7a86 	vmul.f32	s15, s15, s12
2401096a:	eea6 7a80 	vfma.f32	s14, s13, s0
2401096e:	ee27 0a87 	vmul.f32	s0, s15, s14
24010972:	ed84 0a06 	vstr	s0, [r4, #24]
24010976:	e74c      	b.n	24010812 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
2401097c:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010980:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
24010984:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010988:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
2401098c:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010994:	d419      	bmi.n	240109ca <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
24010996:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2401099a:	6862      	ldr	r2, [r4, #4]
2401099c:	ee17 3a90 	vmov	r3, s15
240109a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240109a4:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
240109a8:	ee16 3a90 	vmov	r3, s13
240109ac:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
240109b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240109b4:	ed92 0a00 	vldr	s0, [r2]
240109b8:	f002 f928 	bl	24012c0c <LEAF_interpolation_linear>
240109bc:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
240109c0:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
240109c4:	ed84 0a06 	vstr	s0, [r4, #24]
240109c8:	e740      	b.n	2401084c <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240109ca:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240109cc:	eddf 0a08 	vldr	s1, [pc, #32]	; 240109f0 <tADSRT_tick+0x2c0>
240109d0:	e7ea      	b.n	240109a8 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240109d2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240109d4:	eddf 0a06 	vldr	s1, [pc, #24]	; 240109f0 <tADSRT_tick+0x2c0>
240109d8:	e7b1      	b.n	2401093e <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240109da:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240109dc:	eddf 0a04 	vldr	s1, [pc, #16]	; 240109f0 <tADSRT_tick+0x2c0>
240109e0:	e780      	b.n	240108e4 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240109e2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240109e4:	eddf 0a02 	vldr	s1, [pc, #8]	; 240109f0 <tADSRT_tick+0x2c0>
240109e8:	e752      	b.n	24010890 <tADSRT_tick+0x160>
    return adsr->next;
240109ea:	ed94 0a06 	vldr	s0, [r4, #24]
240109ee:	e6c6      	b.n	2401077e <tADSRT_tick+0x4e>
240109f0:	00000000 	.word	0x00000000

240109f4 <tADSRT_tickNoInterp>:

Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
240109f4:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
240109f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
240109f8:	3a01      	subs	r2, #1
240109fa:	2a04      	cmp	r2, #4
240109fc:	f200 80c7 	bhi.w	24010b8e <tADSRT_tickNoInterp+0x19a>
24010a00:	e8df f002 	tbb	[pc, r2]
24010a04:	6533461b 	.word	0x6533461b
24010a08:	03          	.byte	0x03
24010a09:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24010a0a:	edd3 7a03 	vldr	s15, [r3, #12]
24010a0e:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24010a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010a16:	eef4 6ac7 	vcmpe.f32	s13, s14
24010a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010a1e:	dd6e      	ble.n	24010afe <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
24010a20:	2201      	movs	r2, #1
                adsr->next = 0.0f;
24010a22:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 24010b94 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
24010a26:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24010a28:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
24010a2c:	ed83 0a06 	vstr	s0, [r3, #24]
24010a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010a34:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
24010a38:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24010a3a:	edd3 7a03 	vldr	s15, [r3, #12]
24010a3e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
24010a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010a46:	eef4 6ac7 	vcmpe.f32	s13, s14
24010a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010a4e:	dd64      	ble.n	24010b1a <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
24010a50:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
24010a52:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
24010a56:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
24010a58:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
24010a5c:	ed83 0a06 	vstr	s0, [r3, #24]
24010a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010a64:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
24010a68:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
24010a6a:	edd3 7a07 	vldr	s15, [r3, #28]
24010a6e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24010a72:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
24010a76:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
24010a7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24010a7e:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
24010a82:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24010a86:	ee20 0a27 	vmul.f32	s0, s0, s15
24010a8a:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
24010a8e:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24010a90:	edd3 7a03 	vldr	s15, [r3, #12]
24010a94:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
24010a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010a9c:	eef4 6ac7 	vcmpe.f32	s13, s14
24010aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010aa4:	dd4b      	ble.n	24010b3e <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
24010aa6:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
24010aaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24010aae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
24010ab2:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
24010ab4:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
24010ab6:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
24010aba:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
24010abc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24010ac0:	ed83 0a06 	vstr	s0, [r3, #24]
24010ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010ac8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
24010acc:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24010ace:	edd3 7a03 	vldr	s15, [r3, #12]
24010ad2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
24010ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010ada:	eef4 6ac7 	vcmpe.f32	s13, s14
24010ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ae2:	dd46      	ble.n	24010b72 <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
24010ae4:	2200      	movs	r2, #0
                adsr->next = 0.0f;
24010ae6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24010b94 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
24010aea:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24010aec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
24010af0:	ed83 0a06 	vstr	s0, [r3, #24]
24010af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010af8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
24010afc:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
24010afe:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010b02:	685a      	ldr	r2, [r3, #4]
24010b04:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
24010b08:	ee17 1a10 	vmov	r1, s14
24010b0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010b10:	ed92 0a00 	vldr	s0, [r2]
24010b14:	ee20 0a27 	vmul.f32	s0, s0, s15
24010b18:	e786      	b.n	24010a28 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
24010b1a:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010b1e:	685a      	ldr	r2, [r3, #4]
24010b20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24010b24:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24010b28:	ee17 1a10 	vmov	r1, s14
24010b2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010b30:	ed92 7a00 	vldr	s14, [r2]
24010b34:	ee30 0a47 	vsub.f32	s0, s0, s14
24010b38:	ee20 0a27 	vmul.f32	s0, s0, s15
24010b3c:	e78c      	b.n	24010a58 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
24010b3e:	eefc 5ae6 	vcvt.u32.f32	s11, s13
24010b42:	685a      	ldr	r2, [r3, #4]
24010b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010b48:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
24010b4c:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
24010b50:	ee15 1a90 	vmov	r1, s11
24010b54:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24010b58:	ee37 7a40 	vsub.f32	s14, s14, s0
24010b5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010b60:	ee67 7a86 	vmul.f32	s15, s15, s12
24010b64:	ed92 6a00 	vldr	s12, [r2]
24010b68:	eea6 0a07 	vfma.f32	s0, s12, s14
24010b6c:	ee27 0a80 	vmul.f32	s0, s15, s0
24010b70:	e7a4      	b.n	24010abc <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
24010b72:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010b76:	685a      	ldr	r2, [r3, #4]
24010b78:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
24010b7c:	ee17 1a10 	vmov	r1, s14
24010b80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010b84:	ed92 0a00 	vldr	s0, [r2]
24010b88:	ee20 0a27 	vmul.f32	s0, s0, s15
24010b8c:	e7ae      	b.n	24010aec <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
24010b8e:	ed93 0a06 	vldr	s0, [r3, #24]
24010b92:	4770      	bx	lr
24010b94:	00000000 	.word	0x00000000

24010b98 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010b98:	b538      	push	{r3, r4, r5, lr}
24010b9a:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
24010b9e:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010ba0:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010ba2:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010ba4:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010ba8:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010baa:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010bae:	f002 f8f7 	bl	24012da0 <mpool_alloc>
24010bb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010bb6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24010bec <tExpSmooth_init+0x54>
24010bba:	6028      	str	r0, [r5, #0]
24010bbc:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24010bc0:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24010bc4:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24010bc8:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24010bca:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24010bce:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24010bd2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24010bd6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24010bda:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24010bde:	6863      	ldr	r3, [r4, #4]
24010be0:	685b      	ldr	r3, [r3, #4]
24010be2:	6183      	str	r3, [r0, #24]
}
24010be4:	ecbd 8b02 	vpop	{d8}
24010be8:	bd38      	pop	{r3, r4, r5, pc}
24010bea:	bf00      	nop
24010bec:	00000000 	.word	0x00000000

24010bf0 <tExpSmooth_initToPool>:
{
24010bf0:	b538      	push	{r3, r4, r5, lr}
24010bf2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010bf6:	680c      	ldr	r4, [r1, #0]
{
24010bf8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010bfa:	201c      	movs	r0, #28
{
24010bfc:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c00:	4621      	mov	r1, r4
{
24010c02:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c06:	f002 f8cb 	bl	24012da0 <mpool_alloc>
24010c0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010c0e:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24010c44 <tExpSmooth_initToPool+0x54>
24010c12:	6028      	str	r0, [r5, #0]
24010c14:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24010c18:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24010c1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24010c20:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24010c22:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24010c26:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24010c2a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24010c2e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24010c32:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24010c36:	6863      	ldr	r3, [r4, #4]
24010c38:	685b      	ldr	r3, [r3, #4]
24010c3a:	6183      	str	r3, [r0, #24]
}
24010c3c:	ecbd 8b02 	vpop	{d8}
24010c40:	bd38      	pop	{r3, r4, r5, pc}
24010c42:	bf00      	nop
24010c44:	00000000 	.word	0x00000000

24010c48 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24010c48:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
24010c4a:	6801      	ldr	r1, [r0, #0]
24010c4c:	f002 b96a 	b.w	24012f24 <mpool_free>

24010c50 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
24010c50:	b538      	push	{r3, r4, r5, lr}
24010c52:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010c56:	680d      	ldr	r5, [r1, #0]
{
24010c58:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
24010c5a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010c5e:	2028      	movs	r0, #40	; 0x28
24010c60:	4629      	mov	r1, r5
{
24010c62:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010c66:	f002 f89b 	bl	24012da0 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
24010c6a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24010cb4 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010c6e:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010c70:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24010c74:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24010c76:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
24010c78:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24010c7c:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
24010c80:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24010c84:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010c88:	68db      	ldr	r3, [r3, #12]
24010c8a:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
24010c8c:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010c8e:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    f->freq = freq;
24010c92:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010c96:	ee68 0a20 	vmul.f32	s1, s16, s1
24010c9a:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010c9e:	f01c fd2f 	bl	2402d700 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010ca2:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010ca6:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010caa:	edc4 8a04 	vstr	s17, [r4, #16]
}
24010cae:	ecbd 8b02 	vpop	{d8}
24010cb2:	bd38      	pop	{r3, r4, r5, pc}
24010cb4:	00000000 	.word	0x00000000

24010cb8 <tOnePole_free>:
    _tOnePole* f = *ft;
24010cb8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010cba:	6801      	ldr	r1, [r0, #0]
24010cbc:	f002 b932 	b.w	24012f24 <mpool_free>

24010cc0 <tOnePole_setFreq>:
{
24010cc0:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24010cc2:	6804      	ldr	r4, [r0, #0]
{
24010cc4:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010cc8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24010ccc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24010cf8 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010cd0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24010cd4:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010cd8:	ee60 0aa7 	vmul.f32	s1, s1, s15
24010cdc:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010ce0:	f01c fd0e 	bl	2402d700 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010ce8:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010cec:	ee77 7ac0 	vsub.f32	s15, s15, s0
24010cf0:	edc4 7a04 	vstr	s15, [r4, #16]
}
24010cf4:	bd10      	pop	{r4, pc}
24010cf6:	bf00      	nop
24010cf8:	00000000 	.word	0x00000000

24010cfc <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
24010cfc:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010cfe:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
24010d02:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d06:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
24010d0a:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d0e:	edd3 6a05 	vldr	s13, [r3, #20]
24010d12:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24010d16:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d1a:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24010d1e:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
24010d22:	4770      	bx	lr

24010d24 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010d24:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24010d60 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010d2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d30:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24010d64 <tOnePole_setSampleRate+0x40>
{
24010d34:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24010d36:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010d38:	edd4 0a01 	vldr	s1, [r4, #4]
24010d3c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010d40:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010d44:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d48:	f01c fcda 	bl	2402d700 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010d4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d50:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010d54:	ee77 7ac0 	vsub.f32	s15, s15, s0
24010d58:	edc4 7a04 	vstr	s15, [r4, #16]
}
24010d5c:	bd10      	pop	{r4, pc}
24010d5e:	bf00      	nop
24010d60:	40c90fdb 	.word	0x40c90fdb
24010d64:	00000000 	.word	0x00000000

24010d68 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
24010d68:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24010d6a:	680c      	ldr	r4, [r1, #0]
{
24010d6c:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
24010d6e:	2028      	movs	r0, #40	; 0x28
24010d70:	4621      	mov	r1, r4
24010d72:	f002 f815 	bl	24012da0 <mpool_alloc>
24010d76:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24010d78:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
24010d7a:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010d7c:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24010d7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010d82:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
24010d84:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
24010d86:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
24010d88:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010d8a:	6242      	str	r2, [r0, #36]	; 0x24
}
24010d8c:	bd38      	pop	{r3, r4, r5, pc}
24010d8e:	bf00      	nop

24010d90 <tTwoZero_free>:

void    tTwoZero_free   (tTwoZero* const ft)
{
    _tTwoZero* f = *ft;
24010d90:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010d92:	6801      	ldr	r1, [r0, #0]
24010d94:	f002 b8c6 	b.w	24012f24 <mpool_free>

24010d98 <tTwoZero_tick>:
}

Lfloat   tTwoZero_tick(tTwoZero* const ft, Lfloat input)
{
    _tTwoZero* f = *ft;
24010d98:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24010d9a:	edd3 6a07 	vldr	s13, [r3, #28]
24010d9e:	edd3 7a03 	vldr	s15, [r3, #12]
24010da2:	edd3 5a08 	vldr	s11, [r3, #32]
24010da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
24010daa:	ed93 5a04 	vldr	s10, [r3, #16]
    Lfloat in = input * f->gain;
24010dae:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24010db2:	ed93 6a02 	vldr	s12, [r3, #8]
24010db6:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
24010dba:	edc3 6a08 	vstr	s13, [r3, #32]
    Lfloat in = input * f->gain;
24010dbe:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
24010dc2:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24010dc6:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
24010dca:	eea6 0a07 	vfma.f32	s0, s12, s14
24010dce:	4770      	bx	lr

24010dd0 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, Lfloat b0, Lfloat b1, Lfloat b2)
{
    _tTwoZero* f = *ft;
24010dd0:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
24010dd2:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
24010dd6:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
24010dda:	ed83 1a04 	vstr	s2, [r3, #16]
}
24010dde:	4770      	bx	lr

24010de0 <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
24010de0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24010de2:	680c      	ldr	r4, [r1, #0]
{
24010de4:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24010de6:	2044      	movs	r0, #68	; 0x44
24010de8:	4621      	mov	r1, r4
24010dea:	f001 ffd9 	bl	24012da0 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
24010dee:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24010df0:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
24010df2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
24010df6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24010df8:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24010dfa:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
24010dfc:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
24010dfe:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
24010e00:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
24010e02:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
24010e04:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
24010e06:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010e08:	68d3      	ldr	r3, [r2, #12]
24010e0a:	6403      	str	r3, [r0, #64]	; 0x40
}
24010e0c:	bd38      	pop	{r3, r4, r5, pc}
24010e0e:	bf00      	nop

24010e10 <tBiQuad_free>:

void    tBiQuad_free   (tBiQuad* const ft)
{
    _tBiQuad* f = *ft;
24010e10:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010e12:	6801      	ldr	r1, [r0, #0]
24010e14:	f002 b886 	b.w	24012f24 <mpool_free>

24010e18 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, Lfloat sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24010e18:	eddf 7a1a 	vldr	s15, [pc, #104]	; 24010e84 <tBiQuad_setSampleRate+0x6c>
24010e1c:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
24010e20:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
24010e22:	6804      	ldr	r4, [r0, #0]
{
24010e24:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
24010e28:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010e2c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
24010e30:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
24010e34:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
24010e38:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010e3c:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24010e40:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010e44:	f004 fbb4 	bl	240155b0 <cosf>
24010e48:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
24010e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010e4e:	ee28 8a27 	vmul.f32	s16, s16, s15
24010e52:	ee28 8a00 	vmul.f32	s16, s16, s0
24010e56:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
24010e5a:	b17b      	cbz	r3, 24010e7c <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
24010e5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
24010e60:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
24010e62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
24010e66:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
24010e68:	ee77 7ae8 	vsub.f32	s15, s15, s17
24010e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
24010e70:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
24010e74:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
24010e78:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
24010e7c:	ecbd 8b02 	vpop	{d8}
24010e80:	bd10      	pop	{r4, pc}
24010e82:	bf00      	nop
24010e84:	40c90fdb 	.word	0x40c90fdb

24010e88 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
24010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24010e8a:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24010e8e:	6996      	ldr	r6, [r2, #24]
{
24010e90:	4607      	mov	r7, r0
24010e92:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24010e94:	2044      	movs	r0, #68	; 0x44
24010e96:	4631      	mov	r1, r6
{
24010e98:	eef0 8a40 	vmov.f32	s17, s0
24010e9c:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24010ea0:	f001 ff7e 	bl	24012da0 <mpool_alloc>
24010ea4:	6038      	str	r0, [r7, #0]
24010ea6:	4604      	mov	r4, r0
    svf->mempool = m;
24010ea8:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
24010eaa:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
24010eac:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010eae:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 24010f60 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
24010eb2:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010eb4:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
24010eb8:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
24010eba:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
24010ebe:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010ec0:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24010ec4:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
24010ec8:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
24010eca:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
24010ecc:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24010ed0:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010ed4:	f005 f848 	bl	24015f68 <tanf>
    svf->k = 1.0f/Q;
24010ed8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010edc:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24010ee0:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
24010ee2:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
24010ee4:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
24010ee8:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
24010eea:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
24010eec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010ef0:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
24010ef4:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010ef8:	eeb0 7a67 	vmov.f32	s14, s15
24010efc:	eea0 7a26 	vfma.f32	s14, s0, s13
24010f00:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
24010f04:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010f08:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
24010f0c:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
24010f10:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24010f14:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
24010f18:	d007      	beq.n	24010f2a <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24010f1a:	2d02      	cmp	r5, #2
24010f1c:	d008      	beq.n	24010f30 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
24010f1e:	b96d      	cbnz	r5, 24010f3c <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24010f20:	4b10      	ldr	r3, [pc, #64]	; (24010f64 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24010f22:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24010f26:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
24010f28:	6363      	str	r3, [r4, #52]	; 0x34
}
24010f2a:	ecbd 8b02 	vpop	{d8}
24010f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
24010f30:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
24010f34:	6366      	str	r6, [r4, #52]	; 0x34
}
24010f36:	ecbd 8b02 	vpop	{d8}
24010f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
24010f3c:	2d03      	cmp	r5, #3
24010f3e:	d009      	beq.n	24010f54 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
24010f40:	2d04      	cmp	r5, #4
24010f42:	d1f2      	bne.n	24010f2a <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24010f44:	4a07      	ldr	r2, [pc, #28]	; (24010f64 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
24010f46:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24010f4a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24010f4e:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
24010f50:	6363      	str	r3, [r4, #52]	; 0x34
}
24010f52:	e7ea      	b.n	24010f2a <tSVF_init+0xa2>
        svf->cBK = -1.0f;
24010f54:	4b03      	ldr	r3, [pc, #12]	; (24010f64 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24010f56:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
24010f5a:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
24010f5c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
24010f5e:	e7e4      	b.n	24010f2a <tSVF_init+0xa2>
24010f60:	40490fdb 	.word	0x40490fdb
24010f64:	bf800000 	.word	0xbf800000

24010f68 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24010f68:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24010f6a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
24010f6e:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010f72:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24010f76:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010f7a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
24010f7e:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24010f82:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
24010f86:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
24010f8a:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010f8e:	edd3 2a08 	vldr	s5, [r3, #32]
24010f92:	ee67 7a84 	vmul.f32	s15, s15, s8
24010f96:	ed93 2a07 	vldr	s4, [r3, #28]
24010f9a:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24010f9e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
24010fa2:	eea2 5a23 	vfma.f32	s10, s4, s7
24010fa6:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010faa:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24010fae:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24010fb2:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24010fb6:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24010fba:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24010fbe:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24010fc2:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24010fc6:	edc3 6a05 	vstr	s13, [r3, #20]
}
24010fca:	eea3 7a80 	vfma.f32	s14, s7, s0
24010fce:	eeb0 0a47 	vmov.f32	s0, s14
24010fd2:	4770      	bx	lr

24010fd4 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
24010fd4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010fd8:	4a18      	ldr	r2, [pc, #96]	; (2401103c <tSVF_setFreqFast+0x68>)
24010fda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
24010fde:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
24010fe0:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010fe4:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010fe8:	ee77 6ac0 	vsub.f32	s13, s15, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010fec:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010ff0:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010ff4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010ff8:	edd0 5a01 	vldr	s11, [r0, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010ffc:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011000:	ee76 6a86 	vadd.f32	s13, s13, s12
24011004:	ed90 6a00 	vldr	s12, [r0]
24011008:	ee20 0a25 	vmul.f32	s0, s0, s11
2401100c:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011010:	eef0 6a67 	vmov.f32	s13, s15
24011014:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011018:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401101c:	eee0 6a07 	vfma.f32	s13, s0, s14
24011020:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
24011024:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011028:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2401102c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
24011030:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24011034:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
24011038:	4770      	bx	lr
2401103a:	bf00      	nop
2401103c:	240183c0 	.word	0x240183c0

24011040 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24011040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24011044:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011046:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
2401104a:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
2401104e:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011052:	eeb0 6a47 	vmov.f32	s12, s14
24011056:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
2401105a:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401105e:	eea7 6aa5 	vfma.f32	s12, s15, s11
24011062:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24011066:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401106a:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2401106e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24011072:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24011076:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2401107a:	4770      	bx	lr

2401107c <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
2401107c:	b538      	push	{r3, r4, r5, lr}
2401107e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
24011082:	698c      	ldr	r4, [r1, #24]
{
24011084:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24011086:	2018      	movs	r0, #24
{
24011088:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401108c:	4621      	mov	r1, r4
2401108e:	f001 feeb 	bl	24012e68 <mpool_calloc>
24011092:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24011094:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011096:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401109a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
2401109c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401109e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
240110a2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240110a4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
240110a8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
240110aa:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240110ae:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240110b2:	edc0 7a03 	vstr	s15, [r0, #12]
}
240110b6:	ecbd 8b02 	vpop	{d8}
240110ba:	bd38      	pop	{r3, r4, r5, pc}

240110bc <tHighpass_initToPool>:
{
240110bc:	b538      	push	{r3, r4, r5, lr}
240110be:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240110c2:	680c      	ldr	r4, [r1, #0]
{
240110c4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240110c6:	2018      	movs	r0, #24
{
240110c8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240110cc:	4621      	mov	r1, r4
240110ce:	f001 fecb 	bl	24012e68 <mpool_calloc>
240110d2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240110d4:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240110d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240110da:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
240110dc:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240110de:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
240110e2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240110e4:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
240110e8:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
240110ea:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240110ee:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240110f2:	edc0 7a03 	vstr	s15, [r0, #12]
}
240110f6:	ecbd 8b02 	vpop	{d8}
240110fa:	bd38      	pop	{r3, r4, r5, pc}

240110fc <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
240110fc:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
240110fe:	6801      	ldr	r1, [r0, #0]
24011100:	f001 bf10 	b.w	24012f24 <mpool_free>

24011104 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
24011104:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011106:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401110a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
2401110e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011112:	eee7 7a40 	vfms.f32	s15, s14, s0
24011116:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401111a:	4770      	bx	lr

2401111c <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
2401111c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
2401111e:	edd3 7a01 	vldr	s15, [r3, #4]
24011122:	ed93 7a02 	vldr	s14, [r3, #8]
24011126:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
2401112a:	ed83 0a01 	vstr	s0, [r3, #4]
2401112e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
24011132:	ee30 0a27 	vadd.f32	s0, s0, s15
24011136:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
2401113a:	4770      	bx	lr

2401113c <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2401113c:	eddf 6a07 	vldr	s13, [pc, #28]	; 2401115c <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24011140:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
24011144:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24011146:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401114a:	edd3 6a04 	vldr	s13, [r3, #16]
2401114e:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24011152:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24011156:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401115a:	4770      	bx	lr
2401115c:	40c90fdb 	.word	0x40c90fdb

24011160 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
24011160:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24011162:	edd3 6a03 	vldr	s13, [r3, #12]
24011166:	ed93 7a02 	vldr	s14, [r3, #8]
2401116a:	ee70 7a66 	vsub.f32	s15, s0, s13
2401116e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
24011172:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24011176:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401117a:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
2401117e:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24011182:	edd3 4a08 	vldr	s9, [r3, #32]
24011186:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401118a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2401118e:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24011192:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
24011196:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401119a:	eeb0 5a47 	vmov.f32	s10, s14
2401119e:	eea4 0a87 	vfma.f32	s0, s9, s14
240111a2:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240111a6:	eef0 7a66 	vmov.f32	s15, s13
}
240111aa:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
240111ae:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240111b2:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
240111b6:	edc3 7a03 	vstr	s15, [r3, #12]
}
240111ba:	4770      	bx	lr

240111bc <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
240111bc:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
240111be:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240111c0:	eddf 7a98 	vldr	s15, [pc, #608]	; 24011424 <tVZFilter_calcCoeffs+0x268>
{
240111c4:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240111c8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240111cc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
240111d0:	ee68 8a87 	vmul.f32	s17, s17, s14
240111d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
240111d8:	eeb0 0a68 	vmov.f32	s0, s17
240111dc:	f004 fec4 	bl	24015f68 <tanf>
    
    switch( f->type )
240111e0:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240111e2:	eeb0 8a40 	vmov.f32	s16, s0
240111e6:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
240111ea:	2b0a      	cmp	r3, #10
240111ec:	f200 8117 	bhi.w	2401141e <tVZFilter_calcCoeffs+0x262>
240111f0:	e8df f013 	tbh	[pc, r3, lsl #1]
240111f4:	002f0026 	.word	0x002f0026
240111f8:	00410038 	.word	0x00410038
240111fc:	0056004d 	.word	0x0056004d
24011200:	00a1008b 	.word	0x00a1008b
24011204:	010a00b7 	.word	0x010a00b7
24011208:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
2401120a:	edd4 7a05 	vldr	s15, [r4, #20]
2401120e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011212:	eeb1 7a67 	vneg.f32	s14, s15
24011216:	61e3      	str	r3, [r4, #28]
24011218:	6263      	str	r3, [r4, #36]	; 0x24
2401121a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401121e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011222:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011226:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
2401122a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401122e:	eee7 6a88 	vfma.f32	s13, s15, s16
24011232:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011236:	edc4 7a06 	vstr	s15, [r4, #24]
}
2401123a:	ecbd 8b02 	vpop	{d8}
2401123e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011240:	2300      	movs	r3, #0
24011242:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011246:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401124a:	61e3      	str	r3, [r4, #28]
2401124c:	6223      	str	r3, [r4, #32]
2401124e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24011250:	e7e5      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011252:	2300      	movs	r3, #0
24011254:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011258:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2401125c:	6223      	str	r3, [r4, #32]
2401125e:	6263      	str	r3, [r4, #36]	; 0x24
24011260:	61e2      	str	r2, [r4, #28]
            break;
24011262:	e7dc      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011264:	2300      	movs	r3, #0
24011266:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401126a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401126e:	61e3      	str	r3, [r4, #28]
24011270:	6263      	str	r3, [r4, #36]	; 0x24
24011272:	6222      	str	r2, [r4, #32]
            break;
24011274:	e7d3      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011276:	edd4 7a05 	vldr	s15, [r4, #20]
2401127a:	2300      	movs	r3, #0
2401127c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24011280:	61e3      	str	r3, [r4, #28]
24011282:	ee27 7a27 	vmul.f32	s14, s14, s15
24011286:	6263      	str	r3, [r4, #36]	; 0x24
24011288:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2401128c:	e7c7      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401128e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011292:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24011294:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011298:	6222      	str	r2, [r4, #32]
2401129a:	61e3      	str	r3, [r4, #28]
2401129c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401129e:	e7be      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240112a0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240112a4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
240112a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240112ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
240112b0:	f004 fcfa 	bl	24015ca8 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240112b4:	ee28 0a80 	vmul.f32	s0, s17, s0
240112b8:	f004 fe56 	bl	24015f68 <tanf>
            Lfloat r  = f->g/wl;
240112bc:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240112c0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
240112c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240112c8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
240112cc:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240112d0:	ed84 7a07 	vstr	s14, [r4, #28]
240112d4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240112d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240112dc:	eea7 7aa7 	vfma.f32	s14, s15, s15
240112e0:	eef0 6a47 	vmov.f32	s13, s14
240112e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240112e8:	ee77 7a45 	vsub.f32	s15, s14, s10
240112ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
240112f0:	ee87 7a86 	vdiv.f32	s14, s15, s12
240112f4:	eef1 7ac7 	vsqrt.f32	s15, s14
240112f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240112fc:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011300:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011304:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24011308:	e789      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
2401130a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401130e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011312:	edd4 7a05 	vldr	s15, [r4, #20]
24011316:	eef1 6ac7 	vsqrt.f32	s13, s14
2401131a:	ed84 7a07 	vstr	s14, [r4, #28]
2401131e:	6263      	str	r3, [r4, #36]	; 0x24
24011320:	ee27 6a27 	vmul.f32	s12, s14, s15
24011324:	ed84 6a08 	vstr	s12, [r4, #32]
24011328:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401132c:	ee80 8a07 	vdiv.f32	s16, s0, s14
24011330:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011334:	e773      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24011336:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2401133a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401133e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011342:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011346:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
2401134a:	61e3      	str	r3, [r4, #28]
2401134c:	ee27 6a27 	vmul.f32	s12, s14, s15
24011350:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011354:	eeb1 7ae6 	vsqrt.f32	s14, s13
24011358:	ee20 8a07 	vmul.f32	s16, s0, s14
2401135c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011360:	e75d      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
24011362:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011366:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2401136a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401136e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011428 <tVZFilter_calcCoeffs+0x26c>
24011372:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24011376:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401137a:	eeb0 0a48 	vmov.f32	s0, s16
2401137e:	eea7 0a67 	vfms.f32	s0, s14, s15
24011382:	f001 fcef 	bl	24012d64 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011386:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011428 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401138a:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401138e:	eeb0 0a68 	vmov.f32	s0, s17
24011392:	f001 fceb 	bl	24012d6c <minimum>
            f->cB = 1.0f-x*x;
24011396:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401139a:	edd4 7a05 	vldr	s15, [r4, #20]
2401139e:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
240113a2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113a6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
240113aa:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240113ae:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113b2:	ee76 5a06 	vadd.f32	s11, s12, s12
240113b6:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
240113ba:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113be:	eee6 7a06 	vfma.f32	s15, s12, s12
240113c2:	eee0 7a00 	vfma.f32	s15, s0, s0
240113c6:	eee0 7a65 	vfms.f32	s15, s0, s11
240113ca:	ee86 0aa7 	vdiv.f32	s0, s13, s15
240113ce:	f001 f9ab 	bl	24012728 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
240113d2:	edd4 5a07 	vldr	s11, [r4, #28]
240113d6:	ed94 6a08 	vldr	s12, [r4, #32]
240113da:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
240113de:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113e2:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
240113e6:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113ea:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
240113ee:	ee65 5a80 	vmul.f32	s11, s11, s0
240113f2:	ee26 6a00 	vmul.f32	s12, s12, s0
240113f6:	ee26 0a80 	vmul.f32	s0, s13, s0
240113fa:	edc4 5a07 	vstr	s11, [r4, #28]
240113fe:	ed84 6a08 	vstr	s12, [r4, #32]
24011402:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24011406:	e70a      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24011408:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2401140c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011410:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011412:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24011416:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
2401141a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401141c:	e6ff      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
2401141e:	edd4 7a05 	vldr	s15, [r4, #20]
24011422:	e6fc      	b.n	2401121e <tVZFilter_calcCoeffs+0x62>
24011424:	40490fdb 	.word	0x40490fdb
24011428:	00000000 	.word	0x00000000

2401142c <tVZFilter_initToPool>:
{
2401142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
2401142e:	6817      	ldr	r7, [r2, #0]
{
24011430:	4605      	mov	r5, r0
24011432:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24011434:	204c      	movs	r0, #76	; 0x4c
24011436:	4639      	mov	r1, r7
{
24011438:	ed2d 8b04 	vpush	{d8-d9}
2401143c:	b083      	sub	sp, #12
2401143e:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011442:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
24011446:	ed9f 8a42 	vldr	s16, [pc, #264]	; 24011550 <tVZFilter_initToPool+0x124>
{
2401144a:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
2401144e:	f001 fca7 	bl	24012da0 <mpool_alloc>
24011452:	6028      	str	r0, [r5, #0]
24011454:	4604      	mov	r4, r0
    f->mempool = m;
24011456:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011458:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
2401145c:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401145e:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
24011462:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011466:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 24011554 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
2401146a:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401146e:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
24011472:	685b      	ldr	r3, [r3, #4]
24011474:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011476:	f01c f943 	bl	2402d700 <__LEAF_clip_veneer>
    f->invG = 1.0f/ONE_OVER_SQRT2;
2401147a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 24011558 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
2401147e:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011482:	ee20 6a09 	vmul.f32	s12, s0, s18
24011486:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
2401148a:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
2401148e:	4b33      	ldr	r3, [pc, #204]	; (2401155c <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
24011490:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
24011494:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
24011496:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
2401149a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401149e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240114a2:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
240114a6:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
240114a8:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
240114ac:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
240114b0:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
240114b4:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
240114b8:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240114bc:	f004 fd54 	bl	24015f68 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
240114c0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 24011560 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240114c4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
240114c8:	eef0 0a68 	vmov.f32	s1, s17
240114cc:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
240114d0:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
240114d2:	f01c f915 	bl	2402d700 <__LEAF_clip_veneer>
240114d6:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
240114da:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240114de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
240114e2:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
240114e6:	682c      	ldr	r4, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
240114e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
240114ec:	f004 fbdc 	bl	24015ca8 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240114f0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240114f4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
240114f8:	ee67 7a87 	vmul.f32	s15, s15, s14
240114fc:	ee67 7a89 	vmul.f32	s15, s15, s18
24011500:	ee27 0a80 	vmul.f32	s0, s15, s0
24011504:	f004 fd30 	bl	24015f68 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24011508:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401150c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011510:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24011512:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24011516:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
2401151a:	ee27 7a07 	vmul.f32	s14, s14, s14
2401151e:	ee77 7ac7 	vsub.f32	s15, s15, s14
24011522:	ee67 7aa7 	vmul.f32	s15, s15, s15
24011526:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401152a:	eec7 6a87 	vdiv.f32	s13, s15, s14
2401152e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
24011532:	ee77 7aa7 	vadd.f32	s15, s15, s15
24011536:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
2401153a:	f7ff fe3f 	bl	240111bc <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
2401153e:	4628      	mov	r0, r5
}
24011540:	b003      	add	sp, #12
24011542:	ecbd 8b04 	vpop	{d8-d9}
24011546:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
2401154a:	f7ff be37 	b.w	240111bc <tVZFilter_calcCoeffs>
2401154e:	bf00      	nop
24011550:	00000000 	.word	0x00000000
24011554:	40490fdb 	.word	0x40490fdb
24011558:	3fb504f3 	.word	0x3fb504f3
2401155c:	3f3504f3 	.word	0x3f3504f3
24011560:	42c80000 	.word	0x42c80000

24011564 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24011564:	3218      	adds	r2, #24
24011566:	f7ff bf61 	b.w	2401142c <tVZFilter_initToPool>
2401156a:	bf00      	nop

2401156c <tVZFilter_setFreq>:
{
2401156c:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
2401156e:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011570:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24011574:	4604      	mov	r4, r0
24011576:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401157a:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
2401157e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24011598 <tVZFilter_setFreq+0x2c>
24011582:	ee21 1a27 	vmul.f32	s2, s2, s15
24011586:	f01c f8bb 	bl	2402d700 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
2401158a:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401158c:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
24011590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011594:	f7ff be12 	b.w	240111bc <tVZFilter_calcCoeffs>
24011598:	00000000 	.word	0x00000000

2401159c <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
2401159c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115a0:	4baa      	ldr	r3, [pc, #680]	; (2401184c <tVZFilter_setFreqFast+0x2b0>)
240115a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
240115a6:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115aa:	ee37 7ac0 	vsub.f32	s14, s15, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240115ae:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115b2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240115b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115ba:	ed91 6a01 	vldr	s12, [r1, #4]
{
240115be:	b510      	push	{r4, lr}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240115c0:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
240115c4:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115c6:	ee37 7a26 	vadd.f32	s14, s14, s13
240115ca:	edd1 6a00 	vldr	s13, [r1]
240115ce:	ee67 7a86 	vmul.f32	s15, s15, s12
{
240115d2:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115d6:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
240115da:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240115dc:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
240115e0:	2a0a      	cmp	r2, #10
240115e2:	f200 812f 	bhi.w	24011844 <tVZFilter_setFreqFast+0x2a8>
240115e6:	e8df f012 	tbh	[pc, r2, lsl #1]
240115ea:	0026      	.short	0x0026
240115ec:	0038002f 	.word	0x0038002f
240115f0:	004d0041 	.word	0x004d0041
240115f4:	009b0056 	.word	0x009b0056
240115f8:	00cf00b5 	.word	0x00cf00b5
240115fc:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011600:	ed94 7a05 	vldr	s14, [r4, #20]
24011604:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011608:	eef1 6a47 	vneg.f32	s13, s14
2401160c:	61e3      	str	r3, [r4, #28]
2401160e:	6263      	str	r3, [r4, #36]	; 0x24
24011610:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
24011614:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2401161c:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011620:	eef0 6a47 	vmov.f32	s13, s14
24011624:	eee0 6a27 	vfma.f32	s13, s0, s15
24011628:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401162c:	edc4 7a06 	vstr	s15, [r4, #24]
}
24011630:	ecbd 8b02 	vpop	{d8}
24011634:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011636:	2300      	movs	r3, #0
24011638:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401163c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011640:	61e3      	str	r3, [r4, #28]
24011642:	6223      	str	r3, [r4, #32]
24011644:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24011646:	e7e5      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011648:	2300      	movs	r3, #0
2401164a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401164e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011652:	6223      	str	r3, [r4, #32]
24011654:	6263      	str	r3, [r4, #36]	; 0x24
24011656:	61e2      	str	r2, [r4, #28]
            break;
24011658:	e7dc      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401165a:	2300      	movs	r3, #0
2401165c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011660:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011664:	61e3      	str	r3, [r4, #28]
24011666:	6263      	str	r3, [r4, #36]	; 0x24
24011668:	6222      	str	r2, [r4, #32]
            break;
2401166a:	e7d3      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401166c:	ed94 7a05 	vldr	s14, [r4, #20]
24011670:	2300      	movs	r3, #0
24011672:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011676:	61e3      	str	r3, [r4, #28]
24011678:	ee66 6a87 	vmul.f32	s13, s13, s14
2401167c:	6263      	str	r3, [r4, #36]	; 0x24
2401167e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011682:	e7c7      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011684:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011688:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
2401168a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401168e:	6222      	str	r2, [r4, #32]
24011690:	61e3      	str	r3, [r4, #28]
24011692:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011694:	e7be      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011696:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2401169a:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2401169e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240116a2:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240116aa:	ee60 0aa7 	vmul.f32	s1, s1, s15
240116ae:	f001 f87f 	bl	240127b0 <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240116b2:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240116b6:	eddf 7a66 	vldr	s15, [pc, #408]	; 24011850 <tVZFilter_setFreqFast+0x2b4>
240116ba:	ee28 8a07 	vmul.f32	s16, s16, s14
240116be:	ee28 8a27 	vmul.f32	s16, s16, s15
240116c2:	ee28 0a00 	vmul.f32	s0, s16, s0
240116c6:	f001 f81b 	bl	24012700 <fastertanf>
            Lfloat r  = f->g/wl;
240116ca:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116ce:	eeb0 5a68 	vmov.f32	s10, s17
240116d2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
240116d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116da:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
240116de:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240116e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116e6:	eea7 5aa7 	vfma.f32	s10, s15, s15
240116ea:	ee85 7a27 	vdiv.f32	s14, s10, s15
240116ee:	ee77 7a65 	vsub.f32	s15, s14, s11
240116f2:	ee67 7a86 	vmul.f32	s15, s15, s12
240116f6:	ee87 0aa6 	vdiv.f32	s0, s15, s13
240116fa:	f001 f815 	bl	24012728 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240116fe:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24011702:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011706:	edc4 8a07 	vstr	s17, [r4, #28]
2401170a:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401170e:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011712:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011716:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401171a:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
2401171e:	e779      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            Lfloat A = fastsqrtf(f->G);
24011720:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011724:	f001 f800 	bl	24012728 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011728:	f000 fffe 	bl	24012728 <fastsqrtf>
2401172c:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011730:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011734:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011738:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2401173c:	ed94 7a05 	vldr	s14, [r4, #20]
24011740:	edc4 6a07 	vstr	s13, [r4, #28]
24011744:	6263      	str	r3, [r4, #36]	; 0x24
24011746:	ee66 6a87 	vmul.f32	s13, s13, s14
2401174a:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401174e:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
24011752:	e75f      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            Lfloat A = fastsqrtf(f->G);
24011754:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011758:	f000 ffe6 	bl	24012728 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401175c:	f000 ffe4 	bl	24012728 <fastsqrtf>
24011760:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011764:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011768:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401176c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011770:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011774:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
24011778:	ee67 6a26 	vmul.f32	s13, s14, s13
2401177c:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401177e:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011782:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011786:	e745      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            Lfloat x  = (2.0f*f->m-1.0f);
24011788:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2401178c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011790:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011794:	eddf 0a2f 	vldr	s1, [pc, #188]	; 24011854 <tVZFilter_setFreqFast+0x2b8>
24011798:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
2401179c:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240117a0:	eeb0 0a48 	vmov.f32	s0, s16
240117a4:	eea7 0a67 	vfms.f32	s0, s14, s15
240117a8:	f001 fadc 	bl	24012d64 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240117ac:	eddf 0a29 	vldr	s1, [pc, #164]	; 24011854 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240117b0:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240117b4:	eeb0 0a68 	vmov.f32	s0, s17
240117b8:	f001 fad8 	bl	24012d6c <minimum>
            f->cB = 1.0f-x*x;
240117bc:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117c0:	edd4 7a05 	vldr	s15, [r4, #20]
240117c4:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
240117c8:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117cc:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
240117d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240117d4:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117d8:	ee76 5a06 	vadd.f32	s11, s12, s12
240117dc:	ee38 8a08 	vadd.f32	s16, s16, s16
240117e0:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
240117e4:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117e8:	eee6 7a06 	vfma.f32	s15, s12, s12
240117ec:	eee0 7a00 	vfma.f32	s15, s0, s0
240117f0:	eee0 7a65 	vfms.f32	s15, s0, s11
240117f4:	ee86 0aa7 	vdiv.f32	s0, s13, s15
240117f8:	f000 ff96 	bl	24012728 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
240117fc:	edd4 5a07 	vldr	s11, [r4, #28]
24011800:	ed94 6a08 	vldr	s12, [r4, #32]
24011804:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011808:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401180c:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24011810:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24011814:	ee65 5a80 	vmul.f32	s11, s11, s0
24011818:	ee26 6a00 	vmul.f32	s12, s12, s0
2401181c:	ee26 0a80 	vmul.f32	s0, s13, s0
24011820:	edc4 5a07 	vstr	s11, [r4, #28]
24011824:	ed84 6a08 	vstr	s12, [r4, #32]
24011828:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2401182c:	e6f2      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
2401182e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011832:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011836:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011838:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
2401183c:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
24011840:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011842:	e6e7      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
24011844:	ed94 7a05 	vldr	s14, [r4, #20]
24011848:	e6e4      	b.n	24011614 <tVZFilter_setFreqFast+0x78>
2401184a:	bf00      	nop
2401184c:	240183c0 	.word	0x240183c0
24011850:	40490fdb 	.word	0x40490fdb
24011854:	00000000 	.word	0x00000000

24011858 <tVZFilter_setGain>:
{
24011858:	b538      	push	{r3, r4, r5, lr}
2401185a:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401185e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24011888 <tVZFilter_setGain+0x30>
24011862:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401188c <tVZFilter_setGain+0x34>
{
24011866:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011868:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401186a:	f01b ff49 	bl	2402d700 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
2401186e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011872:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011874:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
24011878:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401187c:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
24011880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011884:	f7ff bc9a 	b.w	240111bc <tVZFilter_calcCoeffs>
24011888:	457a0000 	.word	0x457a0000
2401188c:	358637bd 	.word	0x358637bd

24011890 <tVZFilter_setResonance>:
{
24011890:	b538      	push	{r3, r4, r5, lr}
24011892:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011896:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 240118c0 <tVZFilter_setResonance+0x30>
2401189a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240118c4 <tVZFilter_setResonance+0x34>
{
2401189e:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240118a0:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240118a2:	f01b ff2d 	bl	2402d700 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
240118a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240118aa:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240118ac:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
240118b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
240118b4:	edc5 7a05 	vstr	s15, [r5, #20]
}
240118b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240118bc:	f7ff bc7e 	b.w	240111bc <tVZFilter_calcCoeffs>
240118c0:	42c80000 	.word	0x42c80000
240118c4:	3c23d70a 	.word	0x3c23d70a

240118c8 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
240118c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
240118cc:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240118ce:	eddf 7a9d 	vldr	s15, [pc, #628]	; 24011b44 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
240118d2:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
240118d6:	b510      	push	{r4, lr}
240118d8:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
240118dc:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
240118e0:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
240118e4:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240118e6:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240118ea:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
240118ee:	ee68 8a87 	vmul.f32	s17, s17, s14
240118f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
240118f6:	eeb0 0a68 	vmov.f32	s0, s17
240118fa:	f004 fb35 	bl	24015f68 <tanf>
    switch( f->type )
240118fe:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011900:	eeb0 8a40 	vmov.f32	s16, s0
24011904:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24011908:	2b0a      	cmp	r3, #10
2401190a:	f200 8117 	bhi.w	24011b3c <tVZFilter_setSampleRate+0x274>
2401190e:	e8df f013 	tbh	[pc, r3, lsl #1]
24011912:	0026      	.short	0x0026
24011914:	0038002f 	.word	0x0038002f
24011918:	004d0041 	.word	0x004d0041
2401191c:	008b0056 	.word	0x008b0056
24011920:	00b700a1 	.word	0x00b700a1
24011924:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011928:	edd4 7a05 	vldr	s15, [r4, #20]
2401192c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011930:	eeb1 7a67 	vneg.f32	s14, s15
24011934:	61e3      	str	r3, [r4, #28]
24011936:	6263      	str	r3, [r4, #36]	; 0x24
24011938:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401193c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011940:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011944:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24011948:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401194c:	eee7 6a88 	vfma.f32	s13, s15, s16
24011950:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011954:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
24011958:	ecbd 8b02 	vpop	{d8}
2401195c:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401195e:	2300      	movs	r3, #0
24011960:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011964:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011968:	61e3      	str	r3, [r4, #28]
2401196a:	6223      	str	r3, [r4, #32]
2401196c:	6262      	str	r2, [r4, #36]	; 0x24
            break;
2401196e:	e7e5      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011970:	2300      	movs	r3, #0
24011972:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011976:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2401197a:	6223      	str	r3, [r4, #32]
2401197c:	6263      	str	r3, [r4, #36]	; 0x24
2401197e:	61e2      	str	r2, [r4, #28]
            break;
24011980:	e7dc      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011982:	2300      	movs	r3, #0
24011984:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011988:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401198c:	61e3      	str	r3, [r4, #28]
2401198e:	6263      	str	r3, [r4, #36]	; 0x24
24011990:	6222      	str	r2, [r4, #32]
            break;
24011992:	e7d3      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011994:	edd4 7a05 	vldr	s15, [r4, #20]
24011998:	2300      	movs	r3, #0
2401199a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2401199e:	61e3      	str	r3, [r4, #28]
240119a0:	ee27 7a27 	vmul.f32	s14, s14, s15
240119a4:	6263      	str	r3, [r4, #36]	; 0x24
240119a6:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
240119aa:	e7c7      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240119ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240119b0:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
240119b2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240119b6:	6222      	str	r2, [r4, #32]
240119b8:	61e3      	str	r3, [r4, #28]
240119ba:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240119bc:	e7be      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240119be:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240119c2:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
240119c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240119ca:	ee60 0aa7 	vmul.f32	s1, s1, s15
240119ce:	f004 f96b 	bl	24015ca8 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240119d2:	ee28 0a80 	vmul.f32	s0, s17, s0
240119d6:	f004 fac7 	bl	24015f68 <tanf>
            Lfloat r  = f->g/wl;
240119da:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240119de:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
240119e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240119e6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
240119ea:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240119ee:	ed84 7a07 	vstr	s14, [r4, #28]
240119f2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240119f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240119fa:	eea7 7aa7 	vfma.f32	s14, s15, s15
240119fe:	eef0 6a47 	vmov.f32	s13, s14
24011a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24011a06:	ee77 7a45 	vsub.f32	s15, s14, s10
24011a0a:	ee67 7aa5 	vmul.f32	s15, s15, s11
24011a0e:	ee87 7a86 	vdiv.f32	s14, s15, s12
24011a12:	eef1 7ac7 	vsqrt.f32	s15, s14
24011a16:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a1a:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011a1e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a22:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24011a26:	e789      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            Lfloat A = sqrtf(f->G);
24011a28:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011a2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a30:	edd4 7a05 	vldr	s15, [r4, #20]
24011a34:	eef1 6ac7 	vsqrt.f32	s13, s14
24011a38:	ed84 7a07 	vstr	s14, [r4, #28]
24011a3c:	6263      	str	r3, [r4, #36]	; 0x24
24011a3e:	ee27 6a27 	vmul.f32	s12, s14, s15
24011a42:	ed84 6a08 	vstr	s12, [r4, #32]
24011a46:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011a4a:	ee80 8a07 	vdiv.f32	s16, s0, s14
24011a4e:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011a52:	e773      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            Lfloat A = sqrtf(f->G);
24011a54:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011a58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011a5c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011a60:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011a64:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24011a68:	61e3      	str	r3, [r4, #28]
24011a6a:	ee27 6a27 	vmul.f32	s12, s14, s15
24011a6e:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011a72:	eeb1 7ae6 	vsqrt.f32	s14, s13
24011a76:	ee20 8a07 	vmul.f32	s16, s0, s14
24011a7a:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011a7e:	e75d      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            Lfloat x  = (2.0f*f->m-1.0f);
24011a80:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011a84:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011a88:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011a8c:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011b48 <tVZFilter_setSampleRate+0x280>
24011a90:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24011a94:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011a98:	eeb0 0a48 	vmov.f32	s0, s16
24011a9c:	eea7 0a67 	vfms.f32	s0, s14, s15
24011aa0:	f001 f960 	bl	24012d64 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011aa4:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011b48 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011aa8:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011aac:	eeb0 0a68 	vmov.f32	s0, s17
24011ab0:	f001 f95c 	bl	24012d6c <minimum>
            f->cB = 1.0f-x*x;
24011ab4:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ab8:	edd4 7a05 	vldr	s15, [r4, #20]
24011abc:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011ac0:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ac4:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011ac8:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011acc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ad0:	ee76 5a06 	vadd.f32	s11, s12, s12
24011ad4:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011ad8:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011adc:	eee6 7a06 	vfma.f32	s15, s12, s12
24011ae0:	eee0 7a00 	vfma.f32	s15, s0, s0
24011ae4:	eee0 7a65 	vfms.f32	s15, s0, s11
24011ae8:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011aec:	f000 fe1c 	bl	24012728 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011af0:	edd4 5a07 	vldr	s11, [r4, #28]
24011af4:	ed94 6a08 	vldr	s12, [r4, #32]
24011af8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011afc:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b00:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24011b04:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b08:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24011b0c:	ee65 5a80 	vmul.f32	s11, s11, s0
24011b10:	ee26 6a00 	vmul.f32	s12, s12, s0
24011b14:	ee26 0a80 	vmul.f32	s0, s13, s0
24011b18:	edc4 5a07 	vstr	s11, [r4, #28]
24011b1c:	ed84 6a08 	vstr	s12, [r4, #32]
24011b20:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24011b24:	e70a      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
24011b26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011b2a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011b2e:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011b30:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24011b34:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24011b38:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011b3a:	e6ff      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
24011b3c:	edd4 7a05 	vldr	s15, [r4, #20]
24011b40:	e6fc      	b.n	2401193c <tVZFilter_setSampleRate+0x74>
24011b42:	bf00      	nop
24011b44:	40490fdb 	.word	0x40490fdb
24011b48:	00000000 	.word	0x00000000

24011b4c <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24011b4c:	b570      	push	{r4, r5, r6, lr}
24011b4e:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24011b52:	698d      	ldr	r5, [r1, #24]
{
24011b54:	eeb0 8a40 	vmov.f32	s16, s0
24011b58:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011b5a:	2040      	movs	r0, #64	; 0x40
24011b5c:	4629      	mov	r1, r5
{
24011b5e:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011b62:	f001 f91d 	bl	24012da0 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011b66:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24011be0 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011b6a:	6030      	str	r0, [r6, #0]
24011b6c:	4604      	mov	r4, r0
    f->mempool = m;
24011b6e:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011b70:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
24011b74:	686b      	ldr	r3, [r5, #4]
24011b76:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
24011b7a:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011b7e:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
24011b82:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011b86:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24011b8a:	f003 ff1d 	bl	240159c8 <tan>
    f->r = (7.f * resonance + 0.5f);
24011b8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011b92:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24011b96:	4913      	ldr	r1, [pc, #76]	; (24011be4 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
24011b98:	4b13      	ldr	r3, [pc, #76]	; (24011be8 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24011b9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
24011b9e:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
24011ba2:	2000      	movs	r0, #0
    f->n = 1.836f;
24011ba4:	6161      	str	r1, [r4, #20]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011ba6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
24011baa:	4910      	ldr	r1, [pc, #64]	; (24011bec <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
24011bac:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
24011bb0:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
24011bb2:	4b0f      	ldr	r3, [pc, #60]	; (24011bf0 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
24011bb4:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
24011bb6:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
24011bb8:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
24011bba:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
24011bbc:	480d      	ldr	r0, [pc, #52]	; (24011bf4 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
24011bbe:	490e      	ldr	r1, [pc, #56]	; (24011bf8 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
24011bc0:	4a0e      	ldr	r2, [pc, #56]	; (24011bfc <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
24011bc2:	4b0f      	ldr	r3, [pc, #60]	; (24011c00 <tDiodeFilter_init+0xb4>)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011bc4:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
24011bc8:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24011bcc:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
24011bd0:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
24011bd2:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24011bd4:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
24011bd6:	63a3      	str	r3, [r4, #56]	; 0x38
}
24011bd8:	ecbd 8b02 	vpop	{d8}
24011bdc:	bd70      	pop	{r4, r5, r6, pc}
24011bde:	bf00      	nop
24011be0:	40490fdb 	.word	0x40490fdb
24011be4:	3feb020c 	.word	0x3feb020c
24011be8:	3f6b020c 	.word	0x3f6b020c
24011bec:	3c23d70a 	.word	0x3c23d70a
24011bf0:	3ca3d70a 	.word	0x3ca3d70a
24011bf4:	3cf5c28f 	.word	0x3cf5c28f
24011bf8:	3f0b6efd 	.word	0x3f0b6efd
24011bfc:	3e39e952 	.word	0x3e39e952
24011c00:	3d23d70a 	.word	0x3d23d70a

24011c04 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24011c04:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c06:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011c0a:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
24011c0e:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 24011f98 <tDiodeFilter_tick+0x394>
    if (testVal!= 0.0f)
24011c12:	eddf 5ae2 	vldr	s11, [pc, #904]	; 24011f9c <tDiodeFilter_tick+0x398>
{
24011c16:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c1a:	ed93 4a03 	vldr	s8, [r3, #12]
24011c1e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24011c22:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c26:	ee66 7ac4 	vnmul.f32	s15, s13, s8
24011c2a:	ed93 2a08 	vldr	s4, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24011c2e:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c32:	ed93 5a02 	vldr	s10, [r3, #8]
24011c36:	eee6 7a23 	vfma.f32	s15, s12, s7
24011c3a:	ee67 7a82 	vmul.f32	s15, s15, s4
    Lfloat a = x*x;
24011c3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011c42:	eea7 7aa4 	vfma.f32	s14, s15, s9
24011c46:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
24011c4a:	eeb4 7a65 	vcmp.f32	s14, s11
24011c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c52:	f000 8194 	beq.w	24011f7e <tDiodeFilter_tick+0x37a>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011c56:	eddf 4ad2 	vldr	s9, [pc, #840]	; 24011fa0 <tDiodeFilter_tick+0x39c>
24011c5a:	ee77 4a24 	vadd.f32	s9, s14, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011c5e:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011c62:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011c66:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c6a:	ee25 2a02 	vmul.f32	s4, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24011c6e:	eddf 1acc 	vldr	s3, [pc, #816]	; 24011fa0 <tDiodeFilter_tick+0x39c>
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011c72:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011c76:	ee33 7ac3 	vsub.f32	s14, s7, s6
24011c7a:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
24011c7e:	eddf 5ac9 	vldr	s11, [pc, #804]	; 24011fa4 <tDiodeFilter_tick+0x3a0>
24011c82:	eeb0 8a61 	vmov.f32	s16, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011c86:	ed9f 6ac4 	vldr	s12, [pc, #784]	; 24011f98 <tDiodeFilter_tick+0x394>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011c8a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011c8e:	ee77 5aa5 	vadd.f32	s11, s15, s11
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011c92:	ee27 7a01 	vmul.f32	s14, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011c96:	eea7 8aa5 	vfma.f32	s16, s15, s11
    if (testVal!= 0.0f)
24011c9a:	eddf 5ac0 	vldr	s11, [pc, #768]	; 24011f9c <tDiodeFilter_tick+0x398>
    Lfloat a = x*x;
24011c9e:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011ca2:	eef0 7a46 	vmov.f32	s15, s12
24011ca6:	ee25 6a01 	vmul.f32	s12, s10, s2
24011caa:	eee7 7a20 	vfma.f32	s15, s14, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011cae:	eddf 0abc 	vldr	s1, [pc, #752]	; 24011fa0 <tDiodeFilter_tick+0x39c>
24011cb2:	eec8 2a24 	vdiv.f32	s5, s16, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011cb6:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011cba:	ee67 7a27 	vmul.f32	s15, s14, s15
24011cbe:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011cc2:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
24011cc6:	eef4 7a65 	vcmp.f32	s15, s11
    return ((a + 105.0f)*a + 945.0f) / output;
24011cca:	eddf 5ab6 	vldr	s11, [pc, #728]	; 24011fa4 <tDiodeFilter_tick+0x3a0>
24011cce:	ee77 5a25 	vadd.f32	s11, s14, s11
    if (testVal!= 0.0f)
24011cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24011cd6:	eee7 8a25 	vfma.f32	s17, s14, s11
    if (testVal!= 0.0f)
24011cda:	eddf 5ab0 	vldr	s11, [pc, #704]	; 24011f9c <tDiodeFilter_tick+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011cde:	bf18      	it	ne
24011ce0:	ee77 1aa1 	vaddne.f32	s3, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011ce4:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011ce8:	ee22 2a82 	vmul.f32	s4, s5, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011cec:	eddf 2aaa 	vldr	s5, [pc, #680]	; 24011f98 <tDiodeFilter_tick+0x394>
    Lfloat output = 1.0f;
24011cf0:	bf08      	it	eq
24011cf2:	eef7 1a00 	vmoveq.f32	s3, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011cf6:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011cfa:	ee88 7aa1 	vdiv.f32	s14, s17, s3
24011cfe:	eddf 1aa9 	vldr	s3, [pc, #676]	; 24011fa4 <tDiodeFilter_tick+0x3a0>
    Lfloat a = x*x;
24011d02:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d06:	eee7 2a88 	vfma.f32	s5, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24011d0a:	ee77 1aa1 	vadd.f32	s3, s15, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d0e:	ee67 2aa2 	vmul.f32	s5, s15, s5
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011d12:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (testVal!= 0.0f)
24011d16:	eef4 2a65 	vcmp.f32	s5, s11
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011d1a:	ee76 5ae4 	vsub.f32	s11, s13, s9
    if (testVal!= 0.0f)
24011d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011d22:	ee65 5a81 	vmul.f32	s11, s11, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d26:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
24011d2a:	bf18      	it	ne
24011d2c:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011d30:	eddf 0a9b 	vldr	s1, [pc, #620]	; 24011fa0 <tDiodeFilter_tick+0x39c>
    Lfloat output = 1.0f;
24011d34:	bf08      	it	eq
24011d36:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011d3a:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat a = x*x;
24011d3e:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
24011d42:	eea7 8aa1 	vfma.f32	s16, s15, s3
    if (testVal!= 0.0f)
24011d46:	eddf 1a95 	vldr	s3, [pc, #596]	; 24011f9c <tDiodeFilter_tick+0x398>
    return ((a + 105.0f)*a + 945.0f) / output;
24011d4a:	eec8 7a22 	vdiv.f32	s15, s16, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d4e:	eddf 2a92 	vldr	s5, [pc, #584]	; 24011f98 <tDiodeFilter_tick+0x394>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011d52:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d56:	eee5 2a81 	vfma.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011d5a:	ed9f 1a91 	vldr	s2, [pc, #580]	; 24011fa0 <tDiodeFilter_tick+0x39c>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011d5e:	ee25 5a08 	vmul.f32	s10, s10, s16
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d62:	ee65 2aa2 	vmul.f32	s5, s11, s5
    if (testVal!= 0.0f)
24011d66:	eef4 2a61 	vcmp.f32	s5, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24011d6a:	eddf 1a8e 	vldr	s3, [pc, #568]	; 24011fa4 <tDiodeFilter_tick+0x3a0>
24011d6e:	ee75 1aa1 	vadd.f32	s3, s11, s3
    if (testVal!= 0.0f)
24011d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011d76:	ee67 7a86 	vmul.f32	s15, s15, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d7a:	bf18      	it	ne
24011d7c:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011d80:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24011d84:	bf08      	it	eq
24011d86:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011d8a:	eee5 0aa1 	vfma.f32	s1, s11, s3
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011d8e:	ee66 1a88 	vmul.f32	s3, s13, s16
    Lfloat a = x*x;
24011d92:	ee61 1aa1 	vmul.f32	s3, s3, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24011d96:	eec0 5aa2 	vdiv.f32	s11, s1, s5
24011d9a:	eddf 0a81 	vldr	s1, [pc, #516]	; 24011fa0 <tDiodeFilter_tick+0x39c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d9e:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011da2:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011da6:	eddf 5a7c 	vldr	s11, [pc, #496]	; 24011f98 <tDiodeFilter_tick+0x394>
24011daa:	eee1 5aa2 	vfma.f32	s11, s3, s5
    if (testVal!= 0.0f)
24011dae:	eddf 2a7b 	vldr	s5, [pc, #492]	; 24011f9c <tDiodeFilter_tick+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011db2:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
24011db6:	eef4 5a62 	vcmp.f32	s11, s5
24011dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011dbe:	bf18      	it	ne
24011dc0:	ee75 2a81 	vaddne.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011dc4:	ed9f 1a77 	vldr	s2, [pc, #476]	; 24011fa4 <tDiodeFilter_tick+0x3a0>
    Lfloat output = 1.0f;
24011dc8:	bf08      	it	eq
24011dca:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011dce:	ee31 1a81 	vadd.f32	s2, s3, s2
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011dd2:	ee76 5aa4 	vadd.f32	s11, s13, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24011dd6:	eee1 0a81 	vfma.f32	s1, s3, s2
24011dda:	ee36 1aa3 	vadd.f32	s2, s13, s7
24011dde:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
24011de2:	eef0 8a61 	vmov.f32	s17, s3
24011de6:	ee80 8aa2 	vdiv.f32	s16, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011dea:	ee73 2a24 	vadd.f32	s5, s6, s9
24011dee:	ee74 0a81 	vadd.f32	s1, s9, s2
24011df2:	ee72 2a81 	vadd.f32	s5, s5, s2
24011df6:	eeb0 1a60 	vmov.f32	s2, s1
24011dfa:	eee0 2a02 	vfma.f32	s5, s0, s4
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011dfe:	ee28 5a05 	vmul.f32	s10, s16, s10
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e02:	eea2 1a87 	vfma.f32	s2, s5, s14
24011e06:	ee75 2aa5 	vadd.f32	s5, s11, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e0a:	ee35 9a29 	vadd.f32	s18, s10, s19
24011e0e:	eee5 8a21 	vfma.f32	s17, s10, s3
24011e12:	eee7 5a22 	vfma.f32	s11, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e16:	ee66 2a87 	vmul.f32	s5, s13, s14
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e1a:	ee75 0a0a 	vadd.f32	s1, s10, s20
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e1e:	eee1 5a27 	vfma.f32	s11, s2, s15
24011e22:	eeb0 1a66 	vmov.f32	s2, s13
24011e26:	eea2 1aa1 	vfma.f32	s2, s5, s3
24011e2a:	ee62 2aa9 	vmul.f32	s5, s5, s19
24011e2e:	eee6 2aa1 	vfma.f32	s5, s13, s3
24011e32:	eea2 1aa7 	vfma.f32	s2, s5, s15
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e36:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e3a:	eea5 1a86 	vfma.f32	s2, s11, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e3e:	eef0 5a62 	vmov.f32	s11, s5
24011e42:	eee5 2a21 	vfma.f32	s5, s10, s3
24011e46:	eee4 5a02 	vfma.f32	s11, s8, s4
24011e4a:	eeb0 8a62 	vmov.f32	s16, s5
24011e4e:	ee75 2a25 	vadd.f32	s5, s10, s11
24011e52:	eef0 5a45 	vmov.f32	s11, s10
24011e56:	eea2 9a87 	vfma.f32	s18, s5, s14
24011e5a:	ee75 2a21 	vadd.f32	s5, s10, s3
24011e5e:	eee8 2a07 	vfma.f32	s5, s16, s14
24011e62:	eeb0 8a68 	vmov.f32	s16, s17
24011e66:	eee9 2a27 	vfma.f32	s5, s18, s15
24011e6a:	ee20 9a87 	vmul.f32	s18, s1, s14
24011e6e:	eea9 8a29 	vfma.f32	s16, s18, s19
24011e72:	eee9 5a21 	vfma.f32	s11, s18, s3
24011e76:	eee8 5a27 	vfma.f32	s11, s16, s15
24011e7a:	eee2 5a86 	vfma.f32	s11, s5, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24011e7e:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
24011e82:	eef4 5a62 	vcmp.f32	s11, s5
24011e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24011e8a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e8e:	bf14      	ite	ne
24011e90:	ee75 5a8a 	vaddne.f32	s11, s11, s20
        tempy3denom = 0.000001f;
24011e94:	eddf 5a44 	vldreq	s11, [pc, #272]	; 24011fa8 <tDiodeFilter_tick+0x3a4>
    if (t1 == 0.0f)
24011e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24011e9c:	eec1 2a25 	vdiv.f32	s5, s2, s11
    if (t1 == 0.0f)
24011ea0:	d075      	beq.n	24011f8e <tDiodeFilter_tick+0x38a>
24011ea2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011ea6:	ee77 1a21 	vadd.f32	s3, s14, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24011eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
24011eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011eb2:	d067      	beq.n	24011f84 <tDiodeFilter_tick+0x380>
24011eb4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24011eb8:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24011ebc:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
24011ec0:	ed83 0a07 	vstr	s0, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011ec4:	eeb0 8a66 	vmov.f32	s16, s13
    Lfloat xx = (in - f->r*y3);
24011ec8:	ee24 4a22 	vmul.f32	s8, s8, s5
    if (t3 == 0.0f)
24011ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011ed0:	eeb0 1a64 	vmov.f32	s2, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011ed4:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
24011ed8:	bf08      	it	eq
24011eda:	ed9f 6a33 	vldreq	s12, [pc, #204]	; 24011fa8 <tDiodeFilter_tick+0x3a4>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011ede:	ee70 0a86 	vadd.f32	s1, s1, s12
24011ee2:	eea6 1a22 	vfma.f32	s2, s12, s5
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011ee6:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011eea:	ee90 8aa2 	vfnms.f32	s16, s1, s5
    Lfloat xx = (in - f->r*y3);
24011eee:	ee70 0a44 	vsub.f32	s1, s0, s8
    return tanhf(y3*f->r);
24011ef2:	eeb0 0a44 	vmov.f32	s0, s8
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011ef6:	ee88 4a06 	vdiv.f32	s8, s16, s12
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011efa:	ee95 1a84 	vfnms.f32	s2, s11, s8
24011efe:	eeb0 8a41 	vmov.f32	s16, s2
24011f02:	eeb0 1a63 	vmov.f32	s2, s7
24011f06:	eec8 5a27 	vdiv.f32	s11, s16, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011f0a:	eea7 1a84 	vfma.f32	s2, s15, s8
24011f0e:	ee91 1aa5 	vfnms.f32	s2, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f12:	ee75 1ac4 	vsub.f32	s3, s11, s8
24011f16:	ee61 1aa7 	vmul.f32	s3, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011f1a:	ee81 8a07 	vdiv.f32	s16, s2, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011f1e:	ee34 1a62 	vsub.f32	s2, s8, s5
24011f22:	ee21 1a06 	vmul.f32	s2, s2, s12
24011f26:	eea5 1a62 	vfms.f32	s2, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f2a:	ee72 2ac4 	vsub.f32	s5, s5, s8
24011f2e:	eeb0 5a61 	vmov.f32	s10, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f32:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f36:	eea2 5a86 	vfma.f32	s10, s5, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f3a:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011f3e:	ee75 5ac8 	vsub.f32	s11, s11, s16
24011f42:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
24011f46:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f4a:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011f4e:	eee1 6a22 	vfma.f32	s13, s2, s5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011f52:	eee2 5a20 	vfma.f32	s11, s4, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f56:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f5a:	eee5 4a22 	vfma.f32	s9, s10, s5
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011f5e:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011f62:	eea5 3aa2 	vfma.f32	s6, s11, s5
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f66:	eee7 3a22 	vfma.f32	s7, s14, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f6a:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011f6e:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f72:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
24011f76:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
24011f7a:	f004 b821 	b.w	24015fc0 <tanhf>
    Lfloat output = 1.0f;
24011f7e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
24011f82:	e66c      	b.n	24011c5e <tDiodeFilter_tick+0x5a>
24011f84:	eddf 5a09 	vldr	s11, [pc, #36]	; 24011fac <tDiodeFilter_tick+0x3a8>
        t2 = 0.000001f;
24011f88:	eddf 7a07 	vldr	s15, [pc, #28]	; 24011fa8 <tDiodeFilter_tick+0x3a4>
24011f8c:	e796      	b.n	24011ebc <tDiodeFilter_tick+0x2b8>
24011f8e:	eddf 1a07 	vldr	s3, [pc, #28]	; 24011fac <tDiodeFilter_tick+0x3a8>
        t1 = 0.000001f;
24011f92:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24011fa8 <tDiodeFilter_tick+0x3a4>
24011f96:	e788      	b.n	24011eaa <tDiodeFilter_tick+0x2a6>
24011f98:	43d20000 	.word	0x43d20000
24011f9c:	c46c4000 	.word	0xc46c4000
24011fa0:	446c4000 	.word	0x446c4000
24011fa4:	42d20000 	.word	0x42d20000
24011fa8:	358637bd 	.word	0x358637bd
24011fac:	3f800008 	.word	0x3f800008

24011fb0 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24011fb0:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011fb2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011fb6:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
24011fba:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 24012344 <tDiodeFilter_tickEfficient+0x394>
    if (testVal!= 0.0f)
24011fbe:	eddf 5ae2 	vldr	s11, [pc, #904]	; 24012348 <tDiodeFilter_tickEfficient+0x398>
{
24011fc2:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011fc6:	ed93 4a03 	vldr	s8, [r3, #12]
24011fca:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24011fce:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011fd2:	ee66 7ac4 	vnmul.f32	s15, s13, s8
24011fd6:	ed93 2a08 	vldr	s4, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24011fda:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011fde:	ed93 5a02 	vldr	s10, [r3, #8]
24011fe2:	eee6 7a23 	vfma.f32	s15, s12, s7
24011fe6:	ee67 7a82 	vmul.f32	s15, s15, s4
    Lfloat a = x*x;
24011fea:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011fee:	eea7 7aa4 	vfma.f32	s14, s15, s9
24011ff2:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
24011ff6:	eeb4 7a65 	vcmp.f32	s14, s11
24011ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011ffe:	f000 8194 	beq.w	2401232a <tDiodeFilter_tickEfficient+0x37a>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012002:	eddf 4ad2 	vldr	s9, [pc, #840]	; 2401234c <tDiodeFilter_tickEfficient+0x39c>
24012006:	ee77 4a24 	vadd.f32	s9, s14, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401200a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401200e:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012012:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012016:	ee25 2a02 	vmul.f32	s4, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2401201a:	eddf 1acc 	vldr	s3, [pc, #816]	; 2401234c <tDiodeFilter_tickEfficient+0x39c>
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401201e:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012022:	ee33 7ac3 	vsub.f32	s14, s7, s6
24012026:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
2401202a:	eddf 5ac9 	vldr	s11, [pc, #804]	; 24012350 <tDiodeFilter_tickEfficient+0x3a0>
2401202e:	eeb0 8a61 	vmov.f32	s16, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012032:	ed9f 6ac4 	vldr	s12, [pc, #784]	; 24012344 <tDiodeFilter_tickEfficient+0x394>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012036:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401203a:	ee77 5aa5 	vadd.f32	s11, s15, s11
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401203e:	ee27 7a01 	vmul.f32	s14, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24012042:	eea7 8aa5 	vfma.f32	s16, s15, s11
    if (testVal!= 0.0f)
24012046:	eddf 5ac0 	vldr	s11, [pc, #768]	; 24012348 <tDiodeFilter_tickEfficient+0x398>
    Lfloat a = x*x;
2401204a:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401204e:	eef0 7a46 	vmov.f32	s15, s12
24012052:	ee25 6a01 	vmul.f32	s12, s10, s2
24012056:	eee7 7a20 	vfma.f32	s15, s14, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2401205a:	eddf 0abc 	vldr	s1, [pc, #752]	; 2401234c <tDiodeFilter_tickEfficient+0x39c>
2401205e:	eec8 2a24 	vdiv.f32	s5, s16, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012062:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012066:	ee67 7a27 	vmul.f32	s15, s14, s15
2401206a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401206e:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
24012072:	eef4 7a65 	vcmp.f32	s15, s11
    return ((a + 105.0f)*a + 945.0f) / output;
24012076:	eddf 5ab6 	vldr	s11, [pc, #728]	; 24012350 <tDiodeFilter_tickEfficient+0x3a0>
2401207a:	ee77 5a25 	vadd.f32	s11, s14, s11
    if (testVal!= 0.0f)
2401207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24012082:	eee7 8a25 	vfma.f32	s17, s14, s11
    if (testVal!= 0.0f)
24012086:	eddf 5ab0 	vldr	s11, [pc, #704]	; 24012348 <tDiodeFilter_tickEfficient+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401208a:	bf18      	it	ne
2401208c:	ee77 1aa1 	vaddne.f32	s3, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012090:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012094:	ee22 2a82 	vmul.f32	s4, s5, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012098:	eddf 2aaa 	vldr	s5, [pc, #680]	; 24012344 <tDiodeFilter_tickEfficient+0x394>
    Lfloat output = 1.0f;
2401209c:	bf08      	it	eq
2401209e:	eef7 1a00 	vmoveq.f32	s3, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240120a2:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240120a6:	ee88 7aa1 	vdiv.f32	s14, s17, s3
240120aa:	eddf 1aa9 	vldr	s3, [pc, #676]	; 24012350 <tDiodeFilter_tickEfficient+0x3a0>
    Lfloat a = x*x;
240120ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120b2:	eee7 2a88 	vfma.f32	s5, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
240120b6:	ee77 1aa1 	vadd.f32	s3, s15, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120ba:	ee67 2aa2 	vmul.f32	s5, s15, s5
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240120be:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (testVal!= 0.0f)
240120c2:	eef4 2a65 	vcmp.f32	s5, s11
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240120c6:	ee76 5ae4 	vsub.f32	s11, s13, s9
    if (testVal!= 0.0f)
240120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240120ce:	ee65 5a81 	vmul.f32	s11, s11, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120d2:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
240120d6:	bf18      	it	ne
240120d8:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240120dc:	eddf 0a9b 	vldr	s1, [pc, #620]	; 2401234c <tDiodeFilter_tickEfficient+0x39c>
    Lfloat output = 1.0f;
240120e0:	bf08      	it	eq
240120e2:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
240120e6:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat a = x*x;
240120ea:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
240120ee:	eea7 8aa1 	vfma.f32	s16, s15, s3
    if (testVal!= 0.0f)
240120f2:	eddf 1a95 	vldr	s3, [pc, #596]	; 24012348 <tDiodeFilter_tickEfficient+0x398>
    return ((a + 105.0f)*a + 945.0f) / output;
240120f6:	eec8 7a22 	vdiv.f32	s15, s16, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120fa:	eddf 2a92 	vldr	s5, [pc, #584]	; 24012344 <tDiodeFilter_tickEfficient+0x394>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240120fe:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012102:	eee5 2a81 	vfma.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24012106:	ed9f 1a91 	vldr	s2, [pc, #580]	; 2401234c <tDiodeFilter_tickEfficient+0x39c>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401210a:	ee25 5a08 	vmul.f32	s10, s10, s16
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401210e:	ee65 2aa2 	vmul.f32	s5, s11, s5
    if (testVal!= 0.0f)
24012112:	eef4 2a61 	vcmp.f32	s5, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24012116:	eddf 1a8e 	vldr	s3, [pc, #568]	; 24012350 <tDiodeFilter_tickEfficient+0x3a0>
2401211a:	ee75 1aa1 	vadd.f32	s3, s11, s3
    if (testVal!= 0.0f)
2401211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012122:	ee67 7a86 	vmul.f32	s15, s15, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012126:	bf18      	it	ne
24012128:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2401212c:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24012130:	bf08      	it	eq
24012132:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24012136:	eee5 0aa1 	vfma.f32	s1, s11, s3
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401213a:	ee66 1a88 	vmul.f32	s3, s13, s16
    Lfloat a = x*x;
2401213e:	ee61 1aa1 	vmul.f32	s3, s3, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24012142:	eec0 5aa2 	vdiv.f32	s11, s1, s5
24012146:	eddf 0a81 	vldr	s1, [pc, #516]	; 2401234c <tDiodeFilter_tickEfficient+0x39c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401214a:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401214e:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012152:	eddf 5a7c 	vldr	s11, [pc, #496]	; 24012344 <tDiodeFilter_tickEfficient+0x394>
24012156:	eee1 5aa2 	vfma.f32	s11, s3, s5
    if (testVal!= 0.0f)
2401215a:	eddf 2a7b 	vldr	s5, [pc, #492]	; 24012348 <tDiodeFilter_tickEfficient+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401215e:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
24012162:	eef4 5a62 	vcmp.f32	s11, s5
24012166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401216a:	bf18      	it	ne
2401216c:	ee75 2a81 	vaddne.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24012170:	ed9f 1a77 	vldr	s2, [pc, #476]	; 24012350 <tDiodeFilter_tickEfficient+0x3a0>
    Lfloat output = 1.0f;
24012174:	bf08      	it	eq
24012176:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401217a:	ee31 1a81 	vadd.f32	s2, s3, s2
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401217e:	ee76 5aa4 	vadd.f32	s11, s13, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24012182:	eee1 0a81 	vfma.f32	s1, s3, s2
24012186:	ee36 1aa3 	vadd.f32	s2, s13, s7
2401218a:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
2401218e:	eef0 8a61 	vmov.f32	s17, s3
24012192:	ee80 8aa2 	vdiv.f32	s16, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012196:	ee73 2a24 	vadd.f32	s5, s6, s9
2401219a:	ee74 0a81 	vadd.f32	s1, s9, s2
2401219e:	ee72 2a81 	vadd.f32	s5, s5, s2
240121a2:	eeb0 1a60 	vmov.f32	s2, s1
240121a6:	eee0 2a02 	vfma.f32	s5, s0, s4
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240121aa:	ee28 5a05 	vmul.f32	s10, s16, s10
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121ae:	eea2 1a87 	vfma.f32	s2, s5, s14
240121b2:	ee75 2aa5 	vadd.f32	s5, s11, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121b6:	ee35 9a29 	vadd.f32	s18, s10, s19
240121ba:	eee5 8a21 	vfma.f32	s17, s10, s3
240121be:	eee7 5a22 	vfma.f32	s11, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121c2:	ee66 2a87 	vmul.f32	s5, s13, s14
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121c6:	ee75 0a0a 	vadd.f32	s1, s10, s20
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121ca:	eee1 5a27 	vfma.f32	s11, s2, s15
240121ce:	eeb0 1a66 	vmov.f32	s2, s13
240121d2:	eea2 1aa1 	vfma.f32	s2, s5, s3
240121d6:	ee62 2aa9 	vmul.f32	s5, s5, s19
240121da:	eee6 2aa1 	vfma.f32	s5, s13, s3
240121de:	eea2 1aa7 	vfma.f32	s2, s5, s15
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121e2:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121e6:	eea5 1a86 	vfma.f32	s2, s11, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121ea:	eef0 5a62 	vmov.f32	s11, s5
240121ee:	eee5 2a21 	vfma.f32	s5, s10, s3
240121f2:	eee4 5a02 	vfma.f32	s11, s8, s4
240121f6:	eeb0 8a62 	vmov.f32	s16, s5
240121fa:	ee75 2a25 	vadd.f32	s5, s10, s11
240121fe:	eef0 5a45 	vmov.f32	s11, s10
24012202:	eea2 9a87 	vfma.f32	s18, s5, s14
24012206:	ee75 2a21 	vadd.f32	s5, s10, s3
2401220a:	eee8 2a07 	vfma.f32	s5, s16, s14
2401220e:	eeb0 8a68 	vmov.f32	s16, s17
24012212:	eee9 2a27 	vfma.f32	s5, s18, s15
24012216:	ee20 9a87 	vmul.f32	s18, s1, s14
2401221a:	eea9 8a29 	vfma.f32	s16, s18, s19
2401221e:	eee9 5a21 	vfma.f32	s11, s18, s3
24012222:	eee8 5a27 	vfma.f32	s11, s16, s15
24012226:	eee2 5a86 	vfma.f32	s11, s5, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
2401222a:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
2401222e:	eef4 5a62 	vcmp.f32	s11, s5
24012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24012236:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401223a:	bf14      	ite	ne
2401223c:	ee75 5a8a 	vaddne.f32	s11, s11, s20
        tempy3denom = 0.000001f;
24012240:	eddf 5a44 	vldreq	s11, [pc, #272]	; 24012354 <tDiodeFilter_tickEfficient+0x3a4>
    if (t1 == 0.0f)
24012244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24012248:	eec1 2a25 	vdiv.f32	s5, s2, s11
    if (t1 == 0.0f)
2401224c:	d075      	beq.n	2401233a <tDiodeFilter_tickEfficient+0x38a>
2401224e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24012252:	ee77 1a21 	vadd.f32	s3, s14, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24012256:	eef5 7a40 	vcmp.f32	s15, #0.0
2401225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401225e:	d067      	beq.n	24012330 <tDiodeFilter_tickEfficient+0x380>
24012260:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24012264:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24012268:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
2401226c:	ed83 0a07 	vstr	s0, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012270:	eeb0 8a66 	vmov.f32	s16, s13
    Lfloat xx = (in - f->r*y3);
24012274:	ee24 4a22 	vmul.f32	s8, s8, s5
    if (t3 == 0.0f)
24012278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401227c:	eeb0 1a64 	vmov.f32	s2, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012280:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
24012284:	bf08      	it	eq
24012286:	ed9f 6a33 	vldreq	s12, [pc, #204]	; 24012354 <tDiodeFilter_tickEfficient+0x3a4>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401228a:	ee70 0a86 	vadd.f32	s1, s1, s12
2401228e:	eea6 1a22 	vfma.f32	s2, s12, s5
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012292:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012296:	ee90 8aa2 	vfnms.f32	s16, s1, s5
    Lfloat xx = (in - f->r*y3);
2401229a:	ee70 0a44 	vsub.f32	s1, s0, s8
    return LEAF_tanh(y3*f->r);
2401229e:	eeb0 0a44 	vmov.f32	s0, s8
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240122a2:	ee88 4a06 	vdiv.f32	s8, s16, s12
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
240122a6:	ee95 1a84 	vfnms.f32	s2, s11, s8
240122aa:	eeb0 8a41 	vmov.f32	s16, s2
240122ae:	eeb0 1a63 	vmov.f32	s2, s7
240122b2:	eec8 5a27 	vdiv.f32	s11, s16, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240122b6:	eea7 1a84 	vfma.f32	s2, s15, s8
240122ba:	ee91 1aa5 	vfnms.f32	s2, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240122be:	ee75 1ac4 	vsub.f32	s3, s11, s8
240122c2:	ee61 1aa7 	vmul.f32	s3, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240122c6:	ee81 8a07 	vdiv.f32	s16, s2, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
240122ca:	ee34 1a62 	vsub.f32	s2, s8, s5
240122ce:	ee21 1a06 	vmul.f32	s2, s2, s12
240122d2:	eea5 1a62 	vfms.f32	s2, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240122d6:	ee72 2ac4 	vsub.f32	s5, s5, s8
240122da:	eeb0 5a61 	vmov.f32	s10, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240122de:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240122e2:	eea2 5a86 	vfma.f32	s10, s5, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240122e6:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240122ea:	ee75 5ac8 	vsub.f32	s11, s11, s16
240122ee:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
240122f2:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240122f6:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
240122fa:	eee1 6a22 	vfma.f32	s13, s2, s5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240122fe:	eee2 5a20 	vfma.f32	s11, s4, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012302:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012306:	eee5 4a22 	vfma.f32	s9, s10, s5
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401230a:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401230e:	eea5 3aa2 	vfma.f32	s6, s11, s5
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012312:	eee7 3a22 	vfma.f32	s7, s14, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012316:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401231a:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401231e:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
24012322:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
24012326:	f000 babd 	b.w	240128a4 <LEAF_tanh>
    Lfloat output = 1.0f;
2401232a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
2401232e:	e66c      	b.n	2401200a <tDiodeFilter_tickEfficient+0x5a>
24012330:	eddf 5a09 	vldr	s11, [pc, #36]	; 24012358 <tDiodeFilter_tickEfficient+0x3a8>
        t2 = 0.000001f;
24012334:	eddf 7a07 	vldr	s15, [pc, #28]	; 24012354 <tDiodeFilter_tickEfficient+0x3a4>
24012338:	e796      	b.n	24012268 <tDiodeFilter_tickEfficient+0x2b8>
2401233a:	eddf 1a07 	vldr	s3, [pc, #28]	; 24012358 <tDiodeFilter_tickEfficient+0x3a8>
        t1 = 0.000001f;
2401233e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24012354 <tDiodeFilter_tickEfficient+0x3a4>
24012342:	e788      	b.n	24012256 <tDiodeFilter_tickEfficient+0x2a6>
24012344:	43d20000 	.word	0x43d20000
24012348:	c46c4000 	.word	0xc46c4000
2401234c:	446c4000 	.word	0x446c4000
24012350:	42d20000 	.word	0x42d20000
24012354:	358637bd 	.word	0x358637bd
24012358:	3f800008 	.word	0x3f800008

2401235c <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
2401235c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24012360:	4b0d      	ldr	r3, [pc, #52]	; (24012398 <tDiodeFilter_setFreqFast+0x3c>)
24012362:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
24012366:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24012368:	ee17 2a10 	vmov	r2, s14
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401236c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24012370:	ee77 7ac0 	vsub.f32	s15, s15, s0
24012374:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012378:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2401237c:	edd0 6a01 	vldr	s13, [r0, #4]
24012380:	ee77 7a87 	vadd.f32	s15, s15, s14
24012384:	ed90 7a00 	vldr	s14, [r0]
24012388:	ee20 0a26 	vmul.f32	s0, s0, s13
2401238c:	eea7 0a27 	vfma.f32	s0, s14, s15
24012390:	ed81 0a02 	vstr	s0, [r1, #8]
}
24012394:	4770      	bx	lr
24012396:	bf00      	nop
24012398:	240183c0 	.word	0x240183c0

2401239c <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
2401239c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240123a0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
240123a4:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
240123a8:	eef0 0a67 	vmov.f32	s1, s15
{
240123ac:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
240123ae:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
240123b0:	eee0 0a07 	vfma.f32	s1, s0, s14
240123b4:	eeb0 0a67 	vmov.f32	s0, s15
240123b8:	f01b f9a2 	bl	2402d700 <__LEAF_clip_veneer>
240123bc:	ed84 0a03 	vstr	s0, [r4, #12]
}
240123c0:	bd10      	pop	{r4, pc}
240123c2:	bf00      	nop

240123c4 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
240123c4:	b570      	push	{r4, r5, r6, lr}
240123c6:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
240123ca:	698d      	ldr	r5, [r1, #24]
{
240123cc:	eef0 8a40 	vmov.f32	s17, s0
240123d0:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240123d2:	2038      	movs	r0, #56	; 0x38
240123d4:	4629      	mov	r1, r5
{
240123d6:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240123da:	f000 fce1 	bl	24012da0 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240123de:	eddf 7a18 	vldr	s15, [pc, #96]	; 24012440 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240123e2:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
240123e4:	2301      	movs	r3, #1
    f->mempool = m;
240123e6:	6005      	str	r5, [r0, #0]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240123e8:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
240123ec:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240123ee:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
240123f0:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
240123f4:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240123f8:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
240123fc:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
240123fe:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24012402:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24012406:	f003 fadf 	bl	240159c8 <tan>
2401240a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
2401240e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
24012412:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
24012416:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
2401241a:	490a      	ldr	r1, [pc, #40]	; (24012444 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
2401241c:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
24012420:	4b09      	ldr	r3, [pc, #36]	; (24012448 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
24012422:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24012426:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
2401242a:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
2401242c:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
2401242e:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
24012430:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
24012434:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
24012438:	62a3      	str	r3, [r4, #40]	; 0x28
}
2401243a:	ecbd 8b02 	vpop	{d8}
2401243e:	bd70      	pop	{r4, r5, r6, pc}
24012440:	40490fdb 	.word	0x40490fdb
24012444:	3dcccccd 	.word	0x3dcccccd
24012448:	3d23d70a 	.word	0x3d23d70a

2401244c <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
2401244c:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
2401244e:	eddf 7a8f 	vldr	s15, [pc, #572]	; 2401268c <tLadderFilter_tick+0x240>
{
24012452:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
24012456:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24012458:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
2401245c:	2900      	cmp	r1, #0
2401245e:	f340 8110 	ble.w	24012682 <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012462:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24012466:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401246a:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2401246e:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
24012472:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012476:	ed92 7a08 	vldr	s14, [r2, #32]
2401247a:	ee72 2a27 	vadd.f32	s5, s4, s15
2401247e:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
24012482:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24012486:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2401248a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2401248e:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
24012492:	ee25 9a28 	vmul.f32	s18, s10, s17
24012496:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401249a:	ee62 2a87 	vmul.f32	s5, s5, s14
2401249e:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240124a2:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
240124a6:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
240124a8:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240124ac:	ed9f 8a78 	vldr	s16, [pc, #480]	; 24012690 <tLadderFilter_tick+0x244>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240124b0:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
240124b4:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
240124b6:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
240124ba:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
240124be:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240124c0:	ee65 5aa5 	vmul.f32	s11, s11, s11
240124c4:	ee26 6a06 	vmul.f32	s12, s12, s12
240124c8:	ee66 6aa6 	vmul.f32	s13, s13, s13
240124cc:	ee22 baa5 	vmul.f32	s22, s5, s11
240124d0:	ee26 ca22 	vmul.f32	s24, s12, s5
240124d4:	ee72 5a25 	vadd.f32	s11, s4, s11
240124d8:	ee32 6a06 	vadd.f32	s12, s4, s12
240124dc:	ee66 baa2 	vmul.f32	s23, s13, s5
240124e0:	eecb ea25 	vdiv.f32	s29, s22, s11
240124e4:	ee8c ba06 	vdiv.f32	s22, s24, s12
240124e8:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
240124ec:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240124f0:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
240124f4:	ee27 7a07 	vmul.f32	s14, s14, s14
240124f8:	ee77 eaee 	vsub.f32	s29, s15, s29
240124fc:	ee77 6acb 	vsub.f32	s13, s15, s22
24012500:	ee62 5a87 	vmul.f32	s11, s5, s14
24012504:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24012508:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401250c:	ee85 ca87 	vdiv.f32	s24, s11, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24012510:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012514:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24012518:	ee3e da27 	vadd.f32	s26, s28, s15
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
2401251c:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24012520:	ee65 ca07 	vmul.f32	s25, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
24012524:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
24012528:	eece 5a0d 	vdiv.f32	s11, s28, s26
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
2401252c:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012530:	ee37 cacc 	vsub.f32	s24, s15, s24
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24012534:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
24012538:	ee8c eaad 	vdiv.f32	s28, s25, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
2401253c:	ee25 ba0c 	vmul.f32	s22, s10, s24
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24012540:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24012544:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24012548:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401254c:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24012550:	ee87 daad 	vdiv.f32	s26, s15, s27
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24012554:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
24012558:	eecb da25 	vdiv.f32	s27, s22, s11
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
2401255c:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        Lfloat estimate =
24012560:	ee73 5a2a 	vadd.f32	s11, s6, s21
24012564:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24012568:	ee66 6a26 	vmul.f32	s13, s12, s13
2401256c:	ee65 5a89 	vmul.f32	s11, s11, s18
24012570:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24012574:	ee2f 6a2e 	vmul.f32	s12, s30, s29
24012578:	ee65 5aae 	vmul.f32	s11, s11, s29
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
2401257c:	ee2d 7a07 	vmul.f32	s14, s26, s14
24012580:	ee65 5a8f 	vmul.f32	s11, s11, s30
24012584:	ee60 ea8e 	vmul.f32	s29, s1, s28
24012588:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401258c:	ee2e ca0c 	vmul.f32	s24, s28, s24
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24012590:	eeb0 ea67 	vmov.f32	s28, s15
24012594:	eeab eaad 	vfma.f32	s28, s23, s27
24012598:	ee6b 5a25 	vmul.f32	s11, s22, s11
    Lfloat  x1 = smoothABS (x-a, 0.01f);
2401259c:	eeb0 ba67 	vmov.f32	s22, s15
240125a0:	eeec 5a84 	vfma.f32	s11, s25, s8
240125a4:	eef0 ca64 	vmov.f32	s25, s9
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240125a8:	eec9 ba8e 	vdiv.f32	s23, s19, s28
240125ac:	eeed ca25 	vfma.f32	s25, s26, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240125b0:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240125b4:	eeb0 da48 	vmov.f32	s26, s16
    Lfloat  x1 = smoothABS (x-a, 0.01f);
240125b8:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240125bc:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240125c0:	eef0 ca48 	vmov.f32	s25, s16
240125c4:	eeab da0b 	vfma.f32	s26, s22, s22
240125c8:	eee5 caa5 	vfma.f32	s25, s11, s11
240125cc:	eef1 5acd 	vsqrt.f32	s11, s26
240125d0:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240125d4:	ee3b ba65 	vsub.f32	s22, s22, s11
240125d8:	eef0 5a40 	vmov.f32	s11, s0
240125dc:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
240125e0:	eeb0 ba43 	vmov.f32	s22, s6
240125e4:	eea5 ba25 	vfma.f32	s22, s10, s11
240125e8:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240125ec:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
240125f0:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240125f4:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
240125f8:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240125fc:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24012600:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24012604:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
24012608:	ee36 6a66 	vsub.f32	s12, s12, s13
2401260c:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24012610:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24012614:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24012618:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
2401261c:	ee76 6ac7 	vsub.f32	s13, s13, s14
24012620:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24012624:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24012628:	ee37 7a4c 	vsub.f32	s14, s14, s24
2401262c:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
24012630:	f47f af3e 	bne.w	240124b0 <tLadderFilter_tick+0x64>
24012634:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
24012638:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
2401263c:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
24012640:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012644:	ed9f 7a12 	vldr	s14, [pc, #72]	; 24012690 <tLadderFilter_tick+0x244>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24012648:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401264c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012650:	eef0 5a47 	vmov.f32	s11, s14
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24012654:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012658:	eee0 5aa0 	vfma.f32	s11, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2401265c:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012660:	eea0 7aa0 	vfma.f32	s14, s1, s1
24012664:	eef1 7ae5 	vsqrt.f32	s15, s11
24012668:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
2401266c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24012670:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24012674:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
24012678:	ee20 0a0c 	vmul.f32	s0, s0, s24
2401267c:	ecbd 8b10 	vpop	{d8-d15}
24012680:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24012682:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
24012686:	ed9f ca03 	vldr	s24, [pc, #12]	; 24012694 <tLadderFilter_tick+0x248>
2401268a:	e7db      	b.n	24012644 <tLadderFilter_tick+0x1f8>
2401268c:	3c75c28f 	.word	0x3c75c28f
24012690:	3c23d70a 	.word	0x3c23d70a
24012694:	00000000 	.word	0x00000000

24012698 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
24012698:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2401269c:	4b0f      	ldr	r3, [pc, #60]	; (240126dc <tLadderFilter_setFreqFast+0x44>)
2401269e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
240126a2:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
240126a4:	ee17 2a10 	vmov	r2, s14
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240126a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240126ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
240126b0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240126b4:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240126b8:	edd0 6a01 	vldr	s13, [r0, #4]
240126bc:	ee77 7a87 	vadd.f32	s15, s15, s14
240126c0:	ed90 7a00 	vldr	s14, [r0]
240126c4:	ee20 0a26 	vmul.f32	s0, s0, s13
240126c8:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
240126cc:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240126d0:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
240126d4:	edc1 7a06 	vstr	s15, [r1, #24]
}
240126d8:	4770      	bx	lr
240126da:	bf00      	nop
240126dc:	240183c0 	.word	0x240183c0

240126e0 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
240126e0:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
240126e2:	6804      	ldr	r4, [r0, #0]
{
240126e4:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
240126e8:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
240126ec:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240126fc <tLadderFilter_setQ+0x1c>
240126f0:	f01b f806 	bl	2402d700 <__LEAF_clip_veneer>
240126f4:	ed84 0a05 	vstr	s0, [r4, #20]
}
240126f8:	bd10      	pop	{r4, pc}
240126fa:	bf00      	nop
240126fc:	3e4ccccd 	.word	0x3e4ccccd

24012700 <fastertanf>:
    return fResult;
}

Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
24012700:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
24012704:	ed9f 6a06 	vldr	s12, [pc, #24]	; 24012720 <fastertanf+0x20>
24012708:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24012724 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
2401270c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
24012710:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
24012714:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24012718:	ee20 0a27 	vmul.f32	s0, s0, s15
2401271c:	4770      	bx	lr
2401271e:	bf00      	nop
24012720:	3e502de0 	.word	0x3e502de0
24012724:	3ea295ea 	.word	0x3ea295ea

24012728 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24012728:	ee10 2a10 	vmov	r2, s0
2401272c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
24012730:	4b0d      	ldr	r3, [pc, #52]	; (24012768 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24012732:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
24012736:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
2401273a:	ee60 7a27 	vmul.f32	s15, s0, s15
2401273e:	ee00 3a10 	vmov	s0, r3
24012742:	ee67 7a80 	vmul.f32	s15, s15, s0
24012746:	eea0 7a67 	vfms.f32	s14, s0, s15
2401274a:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
2401274e:	ee10 3a10 	vmov	r3, s0
24012752:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
24012756:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
2401275a:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
2401275e:	336e      	adds	r3, #110	; 0x6e
}
24012760:	ee00 3a10 	vmov	s0, r3
24012764:	4770      	bx	lr
24012766:	bf00      	nop
24012768:	5f3759df 	.word	0x5f3759df

2401276c <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
2401276c:	ee10 3a10 	vmov	r3, s0
24012770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24012774:	ee00 3a10 	vmov	s0, r3
}
24012778:	4770      	bx	lr
2401277a:	bf00      	nop

2401277c <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
2401277c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012780:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240127ac <fasterexpf+0x30>
24012784:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012788:	ee27 0aa7 	vmul.f32	s0, s15, s15
2401278c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012790:	ee20 0a00 	vmul.f32	s0, s0, s0
24012794:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012798:	ee20 0a00 	vmul.f32	s0, s0, s0
2401279c:	ee20 0a00 	vmul.f32	s0, s0, s0
240127a0:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
240127a4:	ee20 0a00 	vmul.f32	s0, s0, s0
240127a8:	4770      	bx	lr
240127aa:	bf00      	nop
240127ac:	3b800000 	.word	0x3b800000

240127b0 <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240127b0:	ee10 3a10 	vmov	r3, s0
240127b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240127d8 <fastPowf+0x28>
240127b8:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
240127bc:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
240127c0:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
240127c4:	330b      	adds	r3, #11
240127c6:	ee07 3a90 	vmov	s15, r3
240127ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240127ce:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
240127d2:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
240127d6:	4770      	bx	lr
240127d8:	4e7de250 	.word	0x4e7de250

240127dc <LEAF_shaper>:
#else
Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
240127dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401285c <LEAF_shaper+0x80>
240127e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
240127e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240127e8:	d406      	bmi.n	240127f8 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
240127ea:	eddf 7a1d 	vldr	s15, [pc, #116]	; 24012860 <LEAF_shaper+0x84>
240127ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
240127f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240127f6:	dd02      	ble.n	240127fe <LEAF_shaper+0x22>
240127f8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 24012864 <LEAF_shaper+0x88>
}
240127fc:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
240127fe:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012802:	ed9f 5a19 	vldr	s10, [pc, #100]	; 24012868 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
24012806:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
2401280a:	ed9f 4a18 	vldr	s8, [pc, #96]	; 2401286c <LEAF_shaper+0x90>
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401280e:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
24012812:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012816:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
2401281a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
2401281e:	ee20 0a25 	vmul.f32	s0, s0, s11
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012822:	eddf 5a13 	vldr	s11, [pc, #76]	; 24012870 <LEAF_shaper+0x94>
24012826:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
2401282a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401282e:	ee66 4aa6 	vmul.f32	s9, s13, s13
24012832:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
24012836:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401283a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401283e:	eea4 7a85 	vfma.f32	s14, s9, s10
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012842:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
24012846:	ee60 0a84 	vmul.f32	s1, s1, s8
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401284a:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401284e:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
24012852:	ee20 0a80 	vmul.f32	s0, s1, s0
24012856:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
2401285a:	4770      	bx	lr
2401285c:	bfb504f3 	.word	0xbfb504f3
24012860:	3fb504f3 	.word	0x3fb504f3
24012864:	00000000 	.word	0x00000000
24012868:	3c800000 	.word	0x3c800000
2401286c:	3f272f05 	.word	0x3f272f05
24012870:	3d4ccccd 	.word	0x3d4ccccd

24012874 <LEAF_round>:
    rnd = fabsf(rnd);
24012874:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24012878:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012894 <LEAF_round+0x20>
2401287c:	eef4 0ae7 	vcmpe.f32	s1, s15
24012880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012884:	d905      	bls.n	24012892 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
24012886:	eec0 7a20 	vdiv.f32	s15, s0, s1
2401288a:	feb8 0a67 	vrinta.f32	s0, s15
2401288e:	ee20 0a20 	vmul.f32	s0, s0, s1
}
24012892:	4770      	bx	lr
24012894:	33d6bf95 	.word	0x33d6bf95

24012898 <LEAF_bitwise_xor>:
    return unholy.f;
24012898:	ee10 3a10 	vmov	r3, s0
2401289c:	4043      	eors	r3, r0
2401289e:	ee00 3a10 	vmov	s0, r3
}
240128a2:	4770      	bx	lr

240128a4 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
240128a4:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
240128a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
240128ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240128b0:	d418      	bmi.n	240128e4 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
240128b2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
240128b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
240128ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240128be:	dd02      	ble.n	240128c6 <LEAF_tanh+0x22>
        return 1.0f;
240128c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
240128c4:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
240128c6:	ee60 6a00 	vmul.f32	s13, s0, s0
240128ca:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
240128ce:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
240128d2:	ee36 7aa7 	vadd.f32	s14, s13, s15
240128d6:	eee6 7a86 	vfma.f32	s15, s13, s12
240128da:	ee27 7a00 	vmul.f32	s14, s14, s0
240128de:	ee87 0a27 	vdiv.f32	s0, s14, s15
240128e2:	4770      	bx	lr
        return -1.0f;
240128e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240128e8:	4770      	bx	lr
240128ea:	bf00      	nop

240128ec <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
240128ec:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
240128ee:	1e4b      	subs	r3, r1, #1
240128f0:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
240128f4:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
240128f6:	ee07 3a90 	vmov	s15, r3
240128fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240128fe:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24012902:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24012906:	dd16      	ble.n	24012936 <LEAF_generate_exp+0x4a>
24012908:	4604      	mov	r4, r0
2401290a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
2401290e:	eeb0 8a60 	vmov.f32	s16, s1
24012912:	eef0 8a40 	vmov.f32	s17, s0
24012916:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
2401291a:	eef0 0a48 	vmov.f32	s1, s16
2401291e:	eeb0 0a68 	vmov.f32	s0, s17
24012922:	f003 f9c1 	bl	24015ca8 <powf>
24012926:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
2401292a:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
2401292e:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012932:	42a5      	cmp	r5, r4
24012934:	d1f1      	bne.n	2401291a <LEAF_generate_exp+0x2e>
    }
}
24012936:	ecbd 8b04 	vpop	{d8-d9}
2401293a:	bd38      	pop	{r3, r4, r5, pc}

2401293c <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
2401293c:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
2401293e:	ee31 1a40 	vsub.f32	s2, s2, s0
{
24012942:	460d      	mov	r5, r1
24012944:	4604      	mov	r4, r0
24012946:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
2401294a:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
2401294e:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24012952:	ee81 0a29 	vdiv.f32	s0, s2, s19
24012956:	f003 f8e7 	bl	24015b28 <logf>
    Lfloat increment = 1.0 / (Lfloat)(size-1);
2401295a:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
2401295c:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0 / (Lfloat)(size-1);
2401295e:	ee07 3a90 	vmov	s15, r3
24012962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401296a:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
2401296e:	dd19      	ble.n	240129a4 <LEAF_generate_table_skew_non_sym+0x68>
24012970:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 240129ac <LEAF_generate_table_skew_non_sym+0x70>
24012974:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0;
24012978:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 240129b0 <LEAF_generate_table_skew_non_sym+0x74>
2401297c:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
24012980:	eeb0 0a48 	vmov.f32	s0, s16
24012984:	f003 f8d0 	bl	24015b28 <logf>
24012988:	ee20 0a09 	vmul.f32	s0, s0, s18
2401298c:	f003 f850 	bl	24015a30 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24012990:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
24012994:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24012998:	eee9 7a80 	vfma.f32	s15, s19, s0
2401299c:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
240129a0:	42a5      	cmp	r5, r4
240129a2:	d1ed      	bne.n	24012980 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
240129a4:	ecbd 8b06 	vpop	{d8-d10}
240129a8:	bd38      	pop	{r3, r4, r5, pc}
240129aa:	bf00      	nop
240129ac:	bfb8aa3b 	.word	0xbfb8aa3b
240129b0:	00000000 	.word	0x00000000

240129b4 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
240129b4:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
240129b6:	1e4b      	subs	r3, r1, #1
240129b8:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
240129bc:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
240129be:	ee07 3a90 	vmov	s15, r3
240129c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240129c6:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
240129ca:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
240129ce:	dd12      	ble.n	240129f6 <LEAF_generate_atodb+0x42>
240129d0:	4604      	mov	r4, r0
240129d2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
240129d6:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
240129da:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
240129de:	eeb0 0a48 	vmov.f32	s0, s16
240129e2:	f003 fb85 	bl	240160f0 <log10f>
240129e6:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
240129ea:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
240129ee:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
240129f2:	42a5      	cmp	r5, r4
240129f4:	d1f3      	bne.n	240129de <LEAF_generate_atodb+0x2a>
}
240129f6:	ecbd 8b04 	vpop	{d8-d9}
240129fa:	bd38      	pop	{r3, r4, r5, pc}

240129fc <LEAF_generate_dbtoa>:
{
240129fc:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
240129fe:	1e4b      	subs	r3, r1, #1
24012a00:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
24012a04:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24012a06:	ee07 3a90 	vmov	s15, r3
24012a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012a0e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24012a12:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24012a16:	dd14      	ble.n	24012a42 <LEAF_generate_dbtoa+0x46>
24012a18:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
24012a1a:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24012a48 <LEAF_generate_dbtoa+0x4c>
24012a1e:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24012a4c <LEAF_generate_dbtoa+0x50>
24012a22:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012a26:	eeb0 8a40 	vmov.f32	s16, s0
24012a2a:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24012a2e:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
24012a32:	ee20 0a09 	vmul.f32	s0, s0, s18
24012a36:	f002 fffb 	bl	24015a30 <expf>
        buffer[i] = dbtoa(x);
24012a3a:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24012a3e:	42a5      	cmp	r5, r4
24012a40:	d1f3      	bne.n	24012a2a <LEAF_generate_dbtoa+0x2e>
}
24012a42:	ecbd 8b04 	vpop	{d8-d9}
24012a46:	bd38      	pop	{r3, r4, r5, pc}
24012a48:	3d4ccccd 	.word	0x3d4ccccd
24012a4c:	40135d8e 	.word	0x40135d8e

24012a50 <LEAF_generate_mtof>:
{
24012a50:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012a52:	1e4b      	subs	r3, r1, #1
24012a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24012a58:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012a5a:	ee07 3a90 	vmov	s15, r3
24012a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012a62:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012a66:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24012a6a:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24012a6e:	dd29      	ble.n	24012ac4 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
24012a70:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24012ad8 <LEAF_generate_mtof+0x88>
24012a74:	eef0 9a40 	vmov.f32	s19, s0
24012a78:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24012a7a:	eddf 8a18 	vldr	s17, [pc, #96]	; 24012adc <LEAF_generate_mtof+0x8c>
24012a7e:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24012a82:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24012ae0 <LEAF_generate_mtof+0x90>
24012a86:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24012a8a:	ed9f ca16 	vldr	s24, [pc, #88]	; 24012ae4 <LEAF_generate_mtof+0x94>
24012a8e:	eddf ba16 	vldr	s23, [pc, #88]	; 24012ae8 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
24012a92:	eeb0 0a69 	vmov.f32	s0, s19
24012a96:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
24012a9a:	e006      	b.n	24012aaa <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24012a9c:	eeb4 0ac8 	vcmpe.f32	s0, s16
24012aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012aa4:	dd11      	ble.n	24012aca <LEAF_generate_mtof+0x7a>
24012aa6:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24012aaa:	eeb4 0ae8 	vcmpe.f32	s0, s17
24012aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ab2:	d8f3      	bhi.n	24012a9c <LEAF_generate_mtof+0x4c>
24012ab4:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24012ab8:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012abc:	42a5      	cmp	r5, r4
        x += increment;
24012abe:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24012ac2:	d1e6      	bne.n	24012a92 <LEAF_generate_mtof+0x42>
}
24012ac4:	ecbd 8b0a 	vpop	{d8-d12}
24012ac8:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012aca:	ee20 0a0c 	vmul.f32	s0, s0, s24
24012ace:	f002 ffaf 	bl	24015a30 <expf>
24012ad2:	ee60 7a2b 	vmul.f32	s15, s0, s23
24012ad6:	e7ef      	b.n	24012ab8 <LEAF_generate_mtof+0x68>
24012ad8:	00000000 	.word	0x00000000
24012adc:	c4bb8000 	.word	0xc4bb8000
24012ae0:	44bb6000 	.word	0x44bb6000
24012ae4:	3d6c9820 	.word	0x3d6c9820
24012ae8:	4102d013 	.word	0x4102d013

24012aec <LEAF_poly_blep>:
    if (t < dt) {
24012aec:	eeb4 0ae0 	vcmpe.f32	s0, s1
24012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012af4:	d418      	bmi.n	24012b28 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
24012af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012afa:	ee77 7a60 	vsub.f32	s15, s14, s1
24012afe:	eef4 7ac0 	vcmpe.f32	s15, s0
24012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b06:	d50c      	bpl.n	24012b22 <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
24012b08:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
24012b0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
24012b10:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
24012b14:	ee76 7a26 	vadd.f32	s15, s12, s13
24012b18:	eea7 7a86 	vfma.f32	s14, s15, s12
24012b1c:	eeb0 0a47 	vmov.f32	s0, s14
24012b20:	4770      	bx	lr
    else return 0.0f;
24012b22:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24012b40 <LEAF_poly_blep+0x54>
}
24012b26:	4770      	bx	lr
        t /= dt;
24012b28:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
24012b2c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012b30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
24012b38:	eea7 0a87 	vfma.f32	s0, s15, s14
24012b3c:	4770      	bx	lr
24012b3e:	bf00      	nop
24012b40:	00000000 	.word	0x00000000

24012b44 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
24012b44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b4c:	db2c      	blt.n	24012ba8 <LEAF_poly_blamp+0x64>
24012b4e:	ee70 7aa0 	vadd.f32	s15, s1, s1
24012b52:	eef4 7ac0 	vcmpe.f32	s15, s0
24012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b5a:	dd25      	ble.n	24012ba8 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
24012b5c:	ee80 6a20 	vdiv.f32	s12, s0, s1
        Lfloat u = 2.0f - x;
24012b60:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        if (t < dt)
24012b64:	eeb4 0ae0 	vcmpe.f32	s0, s1
24012b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
24012b6c:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat u2 = u * u;
24012b70:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
24012b74:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012b78:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
24012b7c:	d517      	bpl.n	24012bae <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
24012b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
24012b82:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 24012bbc <LEAF_poly_blamp+0x78>
24012b86:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
24012b8a:	ee60 0a80 	vmul.f32	s1, s1, s0
        	Lfloat v = 1.0f - x;
24012b8e:	ee36 7ac6 	vsub.f32	s14, s13, s12
        	Lfloat v2 = v * v;
24012b92:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
24012b96:	ee27 7a25 	vmul.f32	s14, s14, s11
24012b9a:	ee27 7a26 	vmul.f32	s14, s14, s13
24012b9e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
24012ba2:	ee20 0aa7 	vmul.f32	s0, s1, s15
24012ba6:	4770      	bx	lr
24012ba8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24012bc0 <LEAF_poly_blamp+0x7c>
}
24012bac:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
24012bae:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24012bc4 <LEAF_poly_blamp+0x80>
24012bb2:	ee60 0a80 	vmul.f32	s1, s1, s0
24012bb6:	ee20 0aa7 	vmul.f32	s0, s1, s15
24012bba:	4770      	bx	lr
24012bbc:	416fffff 	.word	0x416fffff
24012bc0:	00000000 	.word	0x00000000
24012bc4:	c16fffff 	.word	0xc16fffff

24012bc8 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012bc8:	ee71 1ac0 	vsub.f32	s3, s3, s0
24012bcc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c1 = 0.5f * (yy2 - yy0);
24012bd0:	ee31 6a40 	vsub.f32	s12, s2, s0
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012bd4:	ee71 1aa0 	vadd.f32	s3, s3, s1
24012bd8:	eef0 7a60 	vmov.f32	s15, s1
24012bdc:	ee30 7ac1 	vsub.f32	s14, s1, s2
24012be0:	ee71 1ac1 	vsub.f32	s3, s3, s2
24012be4:	eed6 7a26 	vfnms.f32	s15, s12, s13
24012be8:	eea1 7aa6 	vfma.f32	s14, s3, s13
    Lfloat c2 = y0my1 + c1 - c3;
24012bec:	ee70 7a27 	vadd.f32	s15, s0, s15
24012bf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24012bf4:	eee7 7a02 	vfma.f32	s15, s14, s4
24012bf8:	ee67 7a82 	vmul.f32	s15, s15, s4
24012bfc:	eee6 7a26 	vfma.f32	s15, s12, s13
}
24012c00:	eee7 0a82 	vfma.f32	s1, s15, s4
24012c04:	eeb0 0a60 	vmov.f32	s0, s1
24012c08:	4770      	bx	lr
24012c0a:	bf00      	nop

24012c0c <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24012c0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < min)
24012c10:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24012c30 <LEAF_interpolation_linear+0x24>
24012c14:	fe81 1a67 	vminnm.f32	s2, s2, s15
24012c18:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
24012c1c:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
24012c20:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24012c24:	eee7 0a80 	vfma.f32	s1, s15, s0
24012c28:	eeb0 0a60 	vmov.f32	s0, s1
24012c2c:	4770      	bx	lr
24012c2e:	bf00      	nop
24012c30:	00000000 	.word	0x00000000

24012c34 <mtof>:
    if (f <= -1500.0f) return(0);
24012c34:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24012c74 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
24012c38:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24012c78 <mtof+0x44>
24012c3c:	e006      	b.n	24012c4c <mtof+0x18>
24012c3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012c46:	dd09      	ble.n	24012c5c <mtof+0x28>
24012c48:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24012c4c:	eeb4 0ac7 	vcmpe.f32	s0, s14
24012c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012c54:	d8f3      	bhi.n	24012c3e <mtof+0xa>
24012c56:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24012c7c <mtof+0x48>
}
24012c5a:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24012c5c:	eddf 7a08 	vldr	s15, [pc, #32]	; 24012c80 <mtof+0x4c>
{
24012c60:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012c62:	ee20 0a27 	vmul.f32	s0, s0, s15
24012c66:	f002 fee3 	bl	24015a30 <expf>
24012c6a:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012c84 <mtof+0x50>
24012c6e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24012c72:	bd08      	pop	{r3, pc}
24012c74:	c4bb8000 	.word	0xc4bb8000
24012c78:	44bb6000 	.word	0x44bb6000
24012c7c:	00000000 	.word	0x00000000
24012c80:	3d6c9820 	.word	0x3d6c9820
24012c84:	4102d013 	.word	0x4102d013

24012c88 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
24012c88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012c8c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012cc0 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24012c90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24012cc4 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24012c94:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
24012c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012c9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012ca0:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012ca4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
24012ca8:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012cac:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012cb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24012cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
24012cb8:	ee27 0a87 	vmul.f32	s0, s15, s14
24012cbc:	4770      	bx	lr
24012cbe:	bf00      	nop
24012cc0:	396c9820 	.word	0x396c9820
24012cc4:	4102d013 	.word	0x4102d013

24012cc8 <fasteratodb>:
{
24012cc8:	b500      	push	{lr}
24012cca:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
24012ccc:	eeb0 0ac0 	vabs.f32	s0, s0
24012cd0:	a801      	add	r0, sp, #4
24012cd2:	f002 fbd9 	bl	24015488 <frexpf>
    Y += -4.11852516267426f;
24012cd6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24012d0c <fasteratodb+0x44>
24012cda:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24012d10 <fasteratodb+0x48>
    Y += 6.02197014179219f;
24012cde:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24012d14 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
24012ce2:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
24012ce6:	eddd 7a01 	vldr	s15, [sp, #4]
24012cea:	eddf 5a0b 	vldr	s11, [pc, #44]	; 24012d18 <fasteratodb+0x50>
24012cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
24012cf2:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 24012d1c <fasteratodb+0x54>
    Y += E;
24012cf6:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
24012cfa:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
24012cfe:	eee0 7a07 	vfma.f32	s15, s0, s14
}
24012d02:	ee27 0a86 	vmul.f32	s0, s15, s12
24012d06:	b003      	add	sp, #12
24012d08:	f85d fb04 	ldr.w	pc, [sp], #4
24012d0c:	3f9da1a8 	.word	0x3f9da1a8
24012d10:	c083caf5 	.word	0xc083caf5
24012d14:	40c0b3fb 	.word	0x40c0b3fb
24012d18:	404892e0 	.word	0x404892e0
24012d1c:	40c0a8c2 	.word	0x40c0a8c2

24012d20 <fastdbtoa>:


Lfloat fastdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
24012d20:	eddf 7a02 	vldr	s15, [pc, #8]	; 24012d2c <fastdbtoa+0xc>
24012d24:	ee20 0a27 	vmul.f32	s0, s0, s15
24012d28:	f002 be82 	b.w	24015a30 <expf>
24012d2c:	3debc8e3 	.word	0x3debc8e3

24012d30 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24012d30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012d34:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012d60 <fasterdbtoa+0x30>
24012d38:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012d3c:	ee27 0aa7 	vmul.f32	s0, s15, s15
24012d40:	ee20 0a00 	vmul.f32	s0, s0, s0
24012d44:	ee20 0a00 	vmul.f32	s0, s0, s0
24012d48:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012d4c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012d50:	ee20 0a00 	vmul.f32	s0, s0, s0
24012d54:	ee20 0a00 	vmul.f32	s0, s0, s0

Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
24012d58:	ee20 0a00 	vmul.f32	s0, s0, s0
24012d5c:	4770      	bx	lr
24012d5e:	bf00      	nop
24012d60:	39ebc8e3 	.word	0x39ebc8e3

24012d64 <maximum>:


Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
24012d64:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
24012d68:	4770      	bx	lr
24012d6a:	bf00      	nop

24012d6c <minimum>:

Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24012d6c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24012d70:	4770      	bx	lr
24012d72:	bf00      	nop

24012d74 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012d74:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24012d76:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012d78:	2510      	movs	r5, #16
    pool->usize  = 0;
24012d7a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012d7c:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012d7e:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
24012d80:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
24012d82:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012d88:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24012d8a:	440b      	add	r3, r1
24012d8c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24012d8e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24012d92:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24012d94:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24012d98:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012d9a:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24012d9c:	6183      	str	r3, [r0, #24]
}
24012d9e:	4770      	bx	lr

24012da0 <mpool_alloc>:
{
24012da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24012da2:	684a      	ldr	r2, [r1, #4]
{
24012da4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24012da6:	6c93      	ldr	r3, [r2, #72]	; 0x48
24012da8:	3301      	adds	r3, #1
24012daa:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24012dac:	694b      	ldr	r3, [r1, #20]
24012dae:	2b00      	cmp	r3, #0
24012db0:	d04a      	beq.n	24012e48 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24012db2:	1dc4      	adds	r4, r0, #7
24012db4:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24012db8:	e002      	b.n	24012dc0 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24012dba:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24012dbc:	2b00      	cmp	r3, #0
24012dbe:	d043      	beq.n	24012e48 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24012dc0:	68da      	ldr	r2, [r3, #12]
24012dc2:	42a2      	cmp	r2, r4
24012dc4:	d3f9      	bcc.n	24012dba <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24012dc6:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24012dc8:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24012dca:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012dce:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012dd0:	4281      	cmp	r1, r0
24012dd2:	d246      	bcs.n	24012e62 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012dd4:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24012dd8:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24012dda:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012ddc:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24012dde:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24012de0:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24012de2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24012de6:	4429      	add	r1, r5
24012de8:	5111      	str	r1, [r2, r4]
    node->size = size;
24012dea:	60e8      	str	r0, [r5, #12]
    node->next = next;
24012dec:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012df0:	f8dc 2014 	ldr.w	r2, [ip, #20]
24012df4:	429a      	cmp	r2, r3
        pool->head = new_node;
24012df6:	bf08      	it	eq
24012df8:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24012dfc:	685a      	ldr	r2, [r3, #4]
24012dfe:	b10a      	cbz	r2, 24012e04 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24012e00:	6899      	ldr	r1, [r3, #8]
24012e02:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24012e04:	689a      	ldr	r2, [r3, #8]
24012e06:	b10a      	cbz	r2, 24012e0c <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24012e08:	6859      	ldr	r1, [r3, #4]
24012e0a:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24012e0c:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012e0e:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24012e10:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012e14:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012e18:	f8dc 200c 	ldr.w	r2, [ip, #12]
24012e1c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
24012e1e:	4422      	add	r2, r4
24012e20:	4402      	add	r2, r0
24012e22:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24012e26:	694a      	ldr	r2, [r1, #20]
24012e28:	42aa      	cmp	r2, r5
24012e2a:	dd0b      	ble.n	24012e44 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24012e2c:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24012e2e:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24012e30:	b14a      	cbz	r2, 24012e46 <mpool_alloc+0xa6>
24012e32:	1e41      	subs	r1, r0, #1
24012e34:	460a      	mov	r2, r1
24012e36:	f801 5f01 	strb.w	r5, [r1, #1]!
24012e3a:	68dc      	ldr	r4, [r3, #12]
24012e3c:	3202      	adds	r2, #2
24012e3e:	1a12      	subs	r2, r2, r0
24012e40:	4294      	cmp	r4, r2
24012e42:	d8f7      	bhi.n	24012e34 <mpool_alloc+0x94>
    return node_to_alloc->pool;
24012e44:	6818      	ldr	r0, [r3, #0]
}
24012e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24012e48:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24012e4c:	1a9b      	subs	r3, r3, r2
24012e4e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012e50:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24012e54:	bf8c      	ite	hi
24012e56:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012e58:	2100      	movls	r1, #0
24012e5a:	f001 fe57 	bl	24014b0c <LEAF_internalErrorCallback>
        return NULL;
24012e5e:	2000      	movs	r0, #0
}
24012e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24012e62:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24012e64:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24012e66:	e7c3      	b.n	24012df0 <mpool_alloc+0x50>

24012e68 <mpool_calloc>:
{
24012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24012e6a:	684a      	ldr	r2, [r1, #4]
{
24012e6c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24012e6e:	6c93      	ldr	r3, [r2, #72]	; 0x48
24012e70:	3301      	adds	r3, #1
24012e72:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24012e74:	694b      	ldr	r3, [r1, #20]
24012e76:	2b00      	cmp	r3, #0
24012e78:	d044      	beq.n	24012f04 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24012e7a:	1dc4      	adds	r4, r0, #7
24012e7c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24012e80:	e002      	b.n	24012e88 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
24012e82:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24012e84:	2b00      	cmp	r3, #0
24012e86:	d03d      	beq.n	24012f04 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24012e88:	68da      	ldr	r2, [r3, #12]
24012e8a:	42a2      	cmp	r2, r4
24012e8c:	d3f9      	bcc.n	24012e82 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24012e8e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24012e90:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24012e92:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012e96:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012e98:	4281      	cmp	r1, r0
24012e9a:	d240      	bcs.n	24012f1e <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012e9c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24012ea0:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24012ea2:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012ea4:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24012ea6:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24012ea8:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24012eaa:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24012eae:	4429      	add	r1, r5
24012eb0:	5111      	str	r1, [r2, r4]
    node->size = size;
24012eb2:	60e8      	str	r0, [r5, #12]
    node->next = next;
24012eb4:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012eb8:	f8dc 2014 	ldr.w	r2, [ip, #20]
24012ebc:	429a      	cmp	r2, r3
        pool->head = new_node;
24012ebe:	bf08      	it	eq
24012ec0:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24012ec4:	685a      	ldr	r2, [r3, #4]
24012ec6:	b10a      	cbz	r2, 24012ecc <mpool_calloc+0x64>
        node->next->prev = node->prev;
24012ec8:	6899      	ldr	r1, [r3, #8]
24012eca:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24012ecc:	689a      	ldr	r2, [r3, #8]
24012ece:	b10a      	cbz	r2, 24012ed4 <mpool_calloc+0x6c>
        node->prev->next = node->next;
24012ed0:	6859      	ldr	r1, [r3, #4]
24012ed2:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24012ed4:	2200      	movs	r2, #0
    node->prev = NULL;
24012ed6:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012eda:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012ede:	f8dc 000c 	ldr.w	r0, [ip, #12]
24012ee2:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012ee4:	4401      	add	r1, r0
24012ee6:	68d8      	ldr	r0, [r3, #12]
24012ee8:	4401      	add	r1, r0
24012eea:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24012eee:	68d9      	ldr	r1, [r3, #12]
24012ef0:	b131      	cbz	r1, 24012f00 <mpool_calloc+0x98>
24012ef2:	4610      	mov	r0, r2
24012ef4:	6819      	ldr	r1, [r3, #0]
24012ef6:	5488      	strb	r0, [r1, r2]
24012ef8:	3201      	adds	r2, #1
24012efa:	68d9      	ldr	r1, [r3, #12]
24012efc:	4291      	cmp	r1, r2
24012efe:	d8f9      	bhi.n	24012ef4 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
24012f00:	6818      	ldr	r0, [r3, #0]
}
24012f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24012f04:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24012f08:	1a9b      	subs	r3, r3, r2
24012f0a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012f0c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24012f10:	bf8c      	ite	hi
24012f12:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012f14:	2100      	movls	r1, #0
24012f16:	f001 fdf9 	bl	24014b0c <LEAF_internalErrorCallback>
        return NULL;
24012f1a:	2000      	movs	r0, #0
}
24012f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24012f1e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24012f20:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24012f22:	e7c9      	b.n	24012eb8 <mpool_calloc+0x50>

24012f24 <mpool_free>:
{
24012f24:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
24012f26:	684a      	ldr	r2, [r1, #4]
24012f28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24012f2a:	3301      	adds	r3, #1
24012f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24012f2e:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012f30:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24012f32:	6b72      	ldr	r2, [r6, #52]	; 0x34
24012f34:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012f36:	1a9b      	subs	r3, r3, r2
24012f38:	68e2      	ldr	r2, [r4, #12]
24012f3a:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
24012f3c:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012f3e:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
24012f40:	2b00      	cmp	r3, #0
24012f42:	d051      	beq.n	24012fe8 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
24012f44:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
24012f46:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
24012f48:	429a      	cmp	r2, r3
24012f4a:	dc17      	bgt.n	24012f7c <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
24012f4c:	690d      	ldr	r5, [r1, #16]
24012f4e:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
24012f50:	429a      	cmp	r2, r3
24012f52:	d913      	bls.n	24012f7c <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012f54:	6b72      	ldr	r2, [r6, #52]	; 0x34
24012f56:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
24012f58:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012f5a:	eb02 0c06 	add.w	ip, r2, r6
24012f5e:	eb0c 0604 	add.w	r6, ip, r4
24012f62:	42b3      	cmp	r3, r6
24012f64:	d029      	beq.n	24012fba <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
24012f66:	68de      	ldr	r6, [r3, #12]
24012f68:	441a      	add	r2, r3
24012f6a:	4432      	add	r2, r6
24012f6c:	4294      	cmp	r4, r2
24012f6e:	d00a      	beq.n	24012f86 <mpool_free+0x62>
    while (other_node != NULL)
24012f70:	b1e5      	cbz	r5, 24012fac <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012f72:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
24012f74:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012f76:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
24012f78:	429a      	cmp	r2, r3
24012f7a:	dde7      	ble.n	24012f4c <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24012f7c:	4630      	mov	r0, r6
24012f7e:	2102      	movs	r1, #2
}
24012f80:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24012f82:	f001 bdc3 	b.w	24014b0c <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
24012f86:	4466      	add	r6, ip
24012f88:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
24012f8a:	694a      	ldr	r2, [r1, #20]
24012f8c:	429a      	cmp	r2, r3
24012f8e:	d028      	beq.n	24012fe2 <mpool_free+0xbe>
    if (node->next != NULL)
24012f90:	b10d      	cbz	r5, 24012f96 <mpool_free+0x72>
        node->next->prev = node->prev;
24012f92:	689a      	ldr	r2, [r3, #8]
24012f94:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
24012f96:	689a      	ldr	r2, [r3, #8]
24012f98:	b10a      	cbz	r2, 24012f9e <mpool_free+0x7a>
        node->prev->next = node->next;
24012f9a:	685c      	ldr	r4, [r3, #4]
24012f9c:	6054      	str	r4, [r2, #4]
    node->next = NULL;
24012f9e:	461c      	mov	r4, r3
    node->prev = NULL;
24012fa0:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
24012fa4:	694a      	ldr	r2, [r1, #20]
24012fa6:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
24012fa8:	2d00      	cmp	r5, #0
24012faa:	d1e2      	bne.n	24012f72 <mpool_free+0x4e>
    freed_node->next = pool->head;
24012fac:	694b      	ldr	r3, [r1, #20]
24012fae:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24012fb0:	b103      	cbz	r3, 24012fb4 <mpool_free+0x90>
24012fb2:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
24012fb4:	614c      	str	r4, [r1, #20]
}
24012fb6:	bc70      	pop	{r4, r5, r6}
24012fb8:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
24012fba:	68da      	ldr	r2, [r3, #12]
24012fbc:	4462      	add	r2, ip
24012fbe:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
24012fc0:	694a      	ldr	r2, [r1, #20]
24012fc2:	429a      	cmp	r2, r3
24012fc4:	d00a      	beq.n	24012fdc <mpool_free+0xb8>
    if (node->next != NULL)
24012fc6:	685a      	ldr	r2, [r3, #4]
24012fc8:	b10a      	cbz	r2, 24012fce <mpool_free+0xaa>
        node->next->prev = node->prev;
24012fca:	689e      	ldr	r6, [r3, #8]
24012fcc:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
24012fce:	689a      	ldr	r2, [r3, #8]
24012fd0:	b10a      	cbz	r2, 24012fd6 <mpool_free+0xb2>
        node->prev->next = node->next;
24012fd2:	685e      	ldr	r6, [r3, #4]
24012fd4:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
24012fd6:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
24012fda:	e7c9      	b.n	24012f70 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
24012fdc:	685a      	ldr	r2, [r3, #4]
24012fde:	614a      	str	r2, [r1, #20]
24012fe0:	e7f1      	b.n	24012fc6 <mpool_free+0xa2>
                pool->head = pool->head->next;
24012fe2:	461c      	mov	r4, r3
24012fe4:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
24012fe6:	e7c3      	b.n	24012f70 <mpool_free+0x4c>
    freed_node->next = pool->head;
24012fe8:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24012fea:	e7e3      	b.n	24012fb4 <mpool_free+0x90>

24012fec <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24012fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24012ff0:	699d      	ldr	r5, [r3, #24]
{
24012ff2:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
24012ff4:	6868      	ldr	r0, [r5, #4]
24012ff6:	6c83      	ldr	r3, [r0, #72]	; 0x48
24012ff8:	3301      	adds	r3, #1
24012ffa:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
24012ffc:	696b      	ldr	r3, [r5, #20]
24012ffe:	b91b      	cbnz	r3, 24013008 <tMempool_init+0x1c>
24013000:	e063      	b.n	240130ca <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
24013002:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24013004:	2b00      	cmp	r3, #0
24013006:	d060      	beq.n	240130ca <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
24013008:	68dc      	ldr	r4, [r3, #12]
2401300a:	2c17      	cmp	r4, #23
2401300c:	d9f9      	bls.n	24013002 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
2401300e:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
24013010:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
24013014:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
24013016:	6868      	ldr	r0, [r5, #4]
24013018:	6b40      	ldr	r0, [r0, #52]	; 0x34
2401301a:	4287      	cmp	r7, r0
2401301c:	d952      	bls.n	240130c4 <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401301e:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24013022:	f100 0c18 	add.w	ip, r0, #24
24013026:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
2401302a:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401302c:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
24013030:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24013034:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
24013036:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
2401303a:	4420      	add	r0, r4
2401303c:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
24013040:	60e7      	str	r7, [r4, #12]
    node->next = next;
24013042:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
24013046:	6968      	ldr	r0, [r5, #20]
24013048:	4283      	cmp	r3, r0
        pool->head = new_node;
2401304a:	bf08      	it	eq
2401304c:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
2401304e:	6858      	ldr	r0, [r3, #4]
24013050:	b108      	cbz	r0, 24013056 <tMempool_init+0x6a>
        node->next->prev = node->prev;
24013052:	689c      	ldr	r4, [r3, #8]
24013054:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
24013056:	6898      	ldr	r0, [r3, #8]
24013058:	b108      	cbz	r0, 2401305e <tMempool_init+0x72>
        node->prev->next = node->next;
2401305a:	685c      	ldr	r4, [r3, #4]
2401305c:	6044      	str	r4, [r0, #4]
    node->next = NULL;
2401305e:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013060:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
24013062:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013066:	f8d5 c004 	ldr.w	ip, [r5, #4]
2401306a:	68e8      	ldr	r0, [r5, #12]
2401306c:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
24013070:	4430      	add	r0, r6
24013072:	4404      	add	r4, r0
24013074:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
24013076:	f8dc 0014 	ldr.w	r0, [ip, #20]
2401307a:	42b8      	cmp	r0, r7
2401307c:	dd0c      	ble.n	24013098 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
2401307e:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24013080:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24013082:	b154      	cbz	r4, 2401309a <tMempool_init+0xae>
24013084:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
24013088:	4664      	mov	r4, ip
2401308a:	f80c 7f01 	strb.w	r7, [ip, #1]!
2401308e:	68de      	ldr	r6, [r3, #12]
24013090:	3402      	adds	r4, #2
24013092:	1a24      	subs	r4, r4, r0
24013094:	42a6      	cmp	r6, r4
24013096:	d8f7      	bhi.n	24013088 <tMempool_init+0x9c>
    return node_to_alloc->pool;
24013098:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
2401309a:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2401309e:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
240130a0:	686b      	ldr	r3, [r5, #4]
240130a2:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240130a4:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
240130a6:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240130a8:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
240130aa:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
240130ac:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240130b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240130b2:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
240130b4:	440b      	add	r3, r1
    node->prev = prev;
240130b6:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
240130ba:	600b      	str	r3, [r1, #0]
    node->size = size;
240130bc:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240130be:	6141      	str	r1, [r0, #20]
}
240130c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
240130c4:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
240130c6:	685c      	ldr	r4, [r3, #4]
240130c8:	e7bd      	b.n	24013046 <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
240130ca:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240130ce:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
240130d0:	1a52      	subs	r2, r2, r1
240130d2:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240130d4:	bf94      	ite	ls
240130d6:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240130d8:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240130da:	f001 fd17 	bl	24014b0c <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
240130de:	2300      	movs	r3, #0
240130e0:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
240130e4:	686a      	ldr	r2, [r5, #4]
240130e6:	605a      	str	r2, [r3, #4]
240130e8:	deff      	udf	#255	; 0xff
240130ea:	bf00      	nop

240130ec <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
240130ec:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240130ee:	698c      	ldr	r4, [r1, #24]
{
240130f0:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240130f2:	2018      	movs	r0, #24
240130f4:	4621      	mov	r1, r4
240130f6:	f7ff fe53 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240130fa:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240130fc:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
240130fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24013102:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013104:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013106:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013120 <tCycle_init+0x34>
    c->phase    =  0;
2401310a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401310e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24013112:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013114:	ee67 7a87 	vmul.f32	s15, s15, s14
24013118:	edc0 7a04 	vstr	s15, [r0, #16]
}
2401311c:	bd38      	pop	{r3, r4, r5, pc}
2401311e:	bf00      	nop
24013120:	4f800000 	.word	0x4f800000

24013124 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24013124:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
24013126:	4910      	ldr	r1, [pc, #64]	; (24013168 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013128:	ed9f 7a10 	vldr	s14, [pc, #64]	; 2401316c <tCycle_tick+0x48>
    c->phase += c->inc;
2401312c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
24013130:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
24013132:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
24013134:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24013136:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
2401313a:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
2401313c:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
24013140:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
24013144:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
2401314a:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
2401314e:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
24013150:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013154:	ee67 7a87 	vmul.f32	s15, s15, s14
24013158:	ed92 7a00 	vldr	s14, [r2]
2401315c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24013160:	eea7 0a27 	vfma.f32	s0, s14, s15
24013164:	4770      	bx	lr
24013166:	bf00      	nop
24013168:	2401c440 	.word	0x2401c440
2401316c:	35000004 	.word	0x35000004

24013170 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
24013170:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013172:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24013176:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401317a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401317e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24013182:	ed83 0a02 	vstr	s0, [r3, #8]
}
24013186:	4770      	bx	lr

24013188 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
24013188:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
2401318c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240131a8 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
24013190:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013196:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2401319a:	ee20 0a07 	vmul.f32	s0, s0, s14
2401319e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240131a2:	ed83 0a01 	vstr	s0, [r3, #4]
}
240131a6:	4770      	bx	lr
240131a8:	4f800000 	.word	0x4f800000

240131ac <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
240131ac:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240131ae:	698c      	ldr	r4, [r1, #24]
{
240131b0:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
240131b2:	2020      	movs	r0, #32
240131b4:	4621      	mov	r1, r4
240131b6:	f7ff fdf3 	bl	24012da0 <mpool_alloc>
240131ba:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240131bc:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
240131be:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
240131c2:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
240131c4:	2300      	movs	r3, #0
    c->phase    =  0.25f;
240131c6:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
240131ca:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
240131cc:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240131d0:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
240131d2:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
240131d4:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
240131d6:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
240131d8:	6183      	str	r3, [r0, #24]
}
240131da:	bd38      	pop	{r3, r4, r5, pc}

240131dc <tPBTriangle_setSkew>:
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
}

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
240131dc:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
240131e0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24013210 <tPBTriangle_setSkew+0x34>
240131e4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24013214 <tPBTriangle_setSkew+0x38>
{
240131e8:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
240131ea:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
240131ec:	f01a fa88 	bl	2402d700 <__LEAF_clip_veneer>
    c->skew = (mySkew + 1.0f) * 0.5f;
240131f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240131f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240131f8:	ee30 0a27 	vadd.f32	s0, s0, s15
240131fc:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
24013200:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
24013204:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
24013208:	edc4 7a05 	vstr	s15, [r4, #20]
}
2401320c:	bd10      	pop	{r4, pc}
2401320e:	bf00      	nop
24013210:	3f7d70a4 	.word	0x3f7d70a4
24013214:	3c23d70a 	.word	0x3c23d70a

24013218 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
24013218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401321a:	698e      	ldr	r6, [r1, #24]
{
2401321c:	4607      	mov	r7, r0
2401321e:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24013220:	2028      	movs	r0, #40	; 0x28
24013222:	4631      	mov	r1, r6
24013224:	f7ff fdbc 	bl	24012da0 <mpool_alloc>
24013228:	6038      	str	r0, [r7, #0]
    c->mempool = m;
2401322a:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
2401322c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2401322e:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013230:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
24013232:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013234:	4629      	mov	r1, r5
24013236:	f7ff fdb3 	bl	24012da0 <mpool_alloc>
    c->inc      =  0;
2401323a:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401323c:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
2401323e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
24013242:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013244:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013246:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 2401327c <tPBSineTriangle_init+0x64>
    c->phase    =  0;
2401324a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401324e:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
24013252:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
24013256:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
24013258:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401325a:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
2401325e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013262:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
24013266:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
24013268:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
2401326a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
2401326e:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
24013270:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
24013272:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
24013274:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
24013276:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
24013278:	6222      	str	r2, [r4, #32]
}
2401327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401327c:	4f800000 	.word	0x4f800000

24013280 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
24013280:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
24013284:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
24013286:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
2401328a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
2401328e:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
24013292:	ed83 0a08 	vstr	s0, [r3, #32]
}
24013296:	4770      	bx	lr

24013298 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
24013298:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401329a:	698c      	ldr	r4, [r1, #24]
{
2401329c:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
2401329e:	2018      	movs	r0, #24
240132a0:	4621      	mov	r1, r4
240132a2:	f7ff fd7d 	bl	24012da0 <mpool_alloc>
240132a6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240132a8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
240132aa:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
240132ac:	6862      	ldr	r2, [r4, #4]
    c->phase    =  0.0f;
    c->width     =  0.5f;
240132ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
240132b2:	6852      	ldr	r2, [r2, #4]
    c->inc      =  0.0f;
240132b4:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
240132b6:	6043      	str	r3, [r0, #4]
    c->width     =  0.5f;
240132b8:	6101      	str	r1, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
240132ba:	6142      	str	r2, [r0, #20]
}
240132bc:	bd38      	pop	{r3, r4, r5, pc}
240132be:	bf00      	nop

240132c0 <tPBPulse_setWidth>:
    c->inc = freq * c->invSampleRate;
}

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
240132c0:	6803      	ldr	r3, [r0, #0]
    c->width = width;
240132c2:	ed83 0a04 	vstr	s0, [r3, #16]
}
240132c6:	4770      	bx	lr

240132c8 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
240132c8:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240132ca:	698c      	ldr	r4, [r1, #24]
{
240132cc:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
240132ce:	201c      	movs	r0, #28
240132d0:	4621      	mov	r1, r4
240132d2:	f7ff fd65 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0.0f;
240132d6:	2300      	movs	r3, #0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
240132d8:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240132da:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240132dc:	6862      	ldr	r2, [r4, #4]
    c->inc      =  0.0f;
240132de:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
240132e0:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240132e2:	6853      	ldr	r3, [r2, #4]
240132e4:	6103      	str	r3, [r0, #16]
}
240132e6:	bd38      	pop	{r3, r4, r5, pc}

240132e8 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
240132e8:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240132ea:	698c      	ldr	r4, [r1, #24]
{
240132ec:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
240132ee:	2024      	movs	r0, #36	; 0x24
240132f0:	4621      	mov	r1, r4
240132f2:	f7ff fd55 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0.0f;
240132f6:	2300      	movs	r3, #0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
240132f8:	6028      	str	r0, [r5, #0]
    c->phase    =  0.0f;
    c->shape = 0.0f;
    c->oneMinusShape = 1.0f;
240132fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->mempool = m;
240132fe:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013300:	6862      	ldr	r2, [r4, #4]
    c->inc      =  0.0f;
24013302:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
24013304:	6043      	str	r3, [r0, #4]
    c->shape = 0.0f;
24013306:	61c3      	str	r3, [r0, #28]
    c->oneMinusShape = 1.0f;
24013308:	6201      	str	r1, [r0, #32]
    c->invSampleRate = leaf->invSampleRate;
2401330a:	6853      	ldr	r3, [r2, #4]
2401330c:	6103      	str	r3, [r0, #16]
}
2401330e:	bd38      	pop	{r3, r4, r5, pc}

24013310 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24013310:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
24013312:	6995      	ldr	r5, [r2, #24]
{
24013314:	4606      	mov	r6, r0
24013316:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24013318:	2018      	movs	r0, #24
2401331a:	4629      	mov	r1, r5
2401331c:	f7ff fd40 	bl	24012da0 <mpool_alloc>
24013320:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24013322:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24013324:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
24013326:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24013328:	691b      	ldr	r3, [r3, #16]
2401332a:	6143      	str	r3, [r0, #20]
}
2401332c:	bd70      	pop	{r4, r5, r6, pc}
2401332e:	bf00      	nop

24013330 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24013330:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24013332:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24013334:	6963      	ldr	r3, [r4, #20]
24013336:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24013338:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
2401333a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401333e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24013342:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24013344:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24013348:	d12f      	bne.n	240133aa <tNoise_tick+0x7a>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401334a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 240133b0 <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
2401334e:	eddf 6a19 	vldr	s13, [pc, #100]	; 240133b4 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013352:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013356:	ed94 5a03 	vldr	s10, [r4, #12]
2401335a:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401335e:	edd4 3a02 	vldr	s7, [r4, #8]
24013362:	eddf 4a15 	vldr	s9, [pc, #84]	; 240133b8 <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013366:	eddf 5a15 	vldr	s11, [pc, #84]	; 240133bc <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401336a:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401336e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 240133c0 <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013372:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013376:	ed94 4a04 	vldr	s8, [r4, #16]
2401337a:	ee27 7a87 	vmul.f32	s14, s15, s14
2401337e:	eddf 4a11 	vldr	s9, [pc, #68]	; 240133c4 <tNoise_tick+0x94>
24013382:	ed9f 5a11 	vldr	s10, [pc, #68]	; 240133c8 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24013386:	eddf 5a11 	vldr	s11, [pc, #68]	; 240133cc <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401338a:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401338e:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24013392:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013396:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401339a:	eea7 0a85 	vfma.f32	s0, s15, s10
2401339e:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
240133a2:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
240133a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
240133aa:	eeb0 0a67 	vmov.f32	s0, s15
240133ae:	bd10      	pop	{r4, pc}
240133b0:	3dcad8a1 	.word	0x3dcad8a1
240133b4:	3e97d0ff 	.word	0x3e97d0ff
240133b8:	3f7f65fe 	.word	0x3f7f65fe
240133bc:	3f76872b 	.word	0x3f76872b
240133c0:	3f86be97 	.word	0x3f86be97
240133c4:	3f11eb85 	.word	0x3f11eb85
240133c8:	3e3d3c36 	.word	0x3e3d3c36
240133cc:	3d4ccccd 	.word	0x3d4ccccd

240133d0 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
240133d0:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240133d2:	698c      	ldr	r4, [r1, #24]
{
240133d4:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240133d6:	201c      	movs	r0, #28
240133d8:	4621      	mov	r1, r4
240133da:	f7ff fce1 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
240133de:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240133e0:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240133e2:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240133e4:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240133e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240133fc <tIntPhasor_init+0x2c>
    c->phase    =  0;
240133ea:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240133ec:	edd3 7a01 	vldr	s15, [r3, #4]
240133f0:	ee67 7a87 	vmul.f32	s15, s15, s14
240133f4:	edc0 7a06 	vstr	s15, [r0, #24]
}
240133f8:	bd38      	pop	{r3, r4, r5, pc}
240133fa:	bf00      	nop
240133fc:	4f800000 	.word	0x4f800000

24013400 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24013400:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24013402:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401341c <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
24013406:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
2401340a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
2401340c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24013410:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24013412:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
24013416:	ee20 0a27 	vmul.f32	s0, s0, s15
2401341a:	4770      	bx	lr
2401341c:	2f80000d 	.word	0x2f80000d

24013420 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24013420:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013422:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24013426:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401342a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401342e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013432:	ed83 0a02 	vstr	s0, [r3, #8]
}
24013436:	4770      	bx	lr

24013438 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
24013438:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
2401343c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013458 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
24013440:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013446:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2401344a:	ee20 0a07 	vmul.f32	s0, s0, s14
2401344e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013452:	ed83 0a01 	vstr	s0, [r3, #4]
}
24013456:	4770      	bx	lr
24013458:	4f800000 	.word	0x4f800000

2401345c <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
2401345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401345e:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013462:	698f      	ldr	r7, [r1, #24]
{
24013464:	4606      	mov	r6, r0
24013466:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013468:	2010      	movs	r0, #16
2401346a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401346c:	ed9f 8a21 	vldr	s16, [pc, #132]	; 240134f4 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013470:	f7ff fc96 	bl	24012da0 <mpool_alloc>
24013474:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24013476:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013478:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2401347a:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401347c:	201c      	movs	r0, #28
2401347e:	4639      	mov	r1, r7
24013480:	f7ff fc8e 	bl	24012da0 <mpool_alloc>
24013484:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24013486:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013488:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
2401348a:	2700      	movs	r7, #0
2401348c:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401348e:	edd3 7a01 	vldr	s15, [r3, #4]
24013492:	ee67 7a88 	vmul.f32	s15, s15, s16
24013496:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401349a:	201c      	movs	r0, #28
    _tMempool* m = *mp;
2401349c:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401349e:	4629      	mov	r1, r5
240134a0:	f7ff fc7e 	bl	24012da0 <mpool_alloc>
240134a4:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240134a6:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
240134a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
240134ac:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240134ae:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240134b0:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240134b4:	eddf 6a10 	vldr	s13, [pc, #64]	; 240134f8 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240134b8:	ee27 7a08 	vmul.f32	s14, s14, s16
240134bc:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
240134c0:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240134c2:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
240134c4:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240134c8:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
240134cc:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240134ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240134d2:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
240134d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240134da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240134de:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
240134e2:	ee67 7a88 	vmul.f32	s15, s15, s16
240134e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240134ea:	edc3 7a01 	vstr	s15, [r3, #4]
}
240134ee:	ecbd 8b02 	vpop	{d8}
240134f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240134f4:	4f800000 	.word	0x4f800000
240134f8:	2f80000d 	.word	0x2f80000d

240134fc <tSquareLFO_initToPool>:
{
240134fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240134fe:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24013502:	680f      	ldr	r7, [r1, #0]
{
24013504:	4606      	mov	r6, r0
24013506:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013508:	2010      	movs	r0, #16
2401350a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401350c:	ed9f 8a21 	vldr	s16, [pc, #132]	; 24013594 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013510:	f7ff fc46 	bl	24012da0 <mpool_alloc>
24013514:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24013516:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013518:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2401351a:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401351c:	201c      	movs	r0, #28
2401351e:	4639      	mov	r1, r7
24013520:	f7ff fc3e 	bl	24012da0 <mpool_alloc>
24013524:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24013526:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013528:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
2401352a:	2700      	movs	r7, #0
2401352c:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401352e:	edd3 7a01 	vldr	s15, [r3, #4]
24013532:	ee67 7a88 	vmul.f32	s15, s15, s16
24013536:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401353a:	201c      	movs	r0, #28
    _tMempool* m = *mp;
2401353c:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401353e:	4629      	mov	r1, r5
24013540:	f7ff fc2e 	bl	24012da0 <mpool_alloc>
24013544:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24013546:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
24013548:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
2401354c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
2401354e:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013550:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013554:	eddf 6a10 	vldr	s13, [pc, #64]	; 24013598 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013558:	ee27 7a08 	vmul.f32	s14, s14, s16
2401355c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24013560:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013562:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24013564:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013568:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
2401356c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401356e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24013572:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24013576:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401357a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401357e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24013582:	ee67 7a88 	vmul.f32	s15, s15, s16
24013586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401358a:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401358e:	ecbd 8b02 	vpop	{d8}
24013592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24013594:	4f800000 	.word	0x4f800000
24013598:	2f80000d 	.word	0x2f80000d

2401359c <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
2401359c:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401359e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
240135a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 240135e0 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
240135a6:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
240135a8:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240135ac:	4403      	add	r3, r0
240135ae:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
240135b0:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
240135b4:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
240135b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240135ba:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240135be:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
240135c0:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
240135c4:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240135c6:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240135ca:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240135ce:	ee30 0a66 	vsub.f32	s0, s0, s13
240135d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
240135d6:	eea7 0a87 	vfma.f32	s0, s15, s14
}
240135da:	ee30 0a00 	vadd.f32	s0, s0, s0
240135de:	4770      	bx	lr
240135e0:	2f80000d 	.word	0x2f80000d

240135e4 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
240135e4:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
240135e6:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240135e8:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240135ec:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240135f0:	ee60 7a27 	vmul.f32	s15, s0, s15
240135f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240135f8:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
240135fc:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240135fe:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24013602:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013606:	ee20 0a27 	vmul.f32	s0, s0, s15
2401360a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401360e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24013612:	4770      	bx	lr

24013614 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24013614:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013616:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2401364c <tSquareLFO_setPulseWidth+0x38>
2401361a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
2401361c:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013620:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
24013624:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24013650 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013628:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
2401362c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401362e:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
24013632:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24013636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401363a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2401363e:	ee20 0a07 	vmul.f32	s0, s0, s14
24013642:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013646:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401364a:	4770      	bx	lr
2401364c:	2f80000d 	.word	0x2f80000d
24013650:	4f800000 	.word	0x4f800000

24013654 <tSquareLFO_setPhase>:
    int i = phase;
24013654:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
24013658:	eddf 6a13 	vldr	s13, [pc, #76]	; 240136a8 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
2401365c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401365e:	ed9f 6a13 	vldr	s12, [pc, #76]	; 240136ac <tSquareLFO_setPhase+0x58>
    phase -= i;
24013662:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
24013666:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24013668:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
2401366c:	ee20 0a26 	vmul.f32	s0, s0, s13
24013670:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013674:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013678:	689a      	ldr	r2, [r3, #8]
2401367a:	edd3 7a01 	vldr	s15, [r3, #4]
2401367e:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24013682:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013684:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24013688:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
2401368c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24013690:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24013694:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24013698:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401369c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240136a0:	edc3 7a01 	vstr	s15, [r3, #4]
}
240136a4:	4770      	bx	lr
240136a6:	bf00      	nop
240136a8:	4f800000 	.word	0x4f800000
240136ac:	2f80000d 	.word	0x2f80000d

240136b0 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
240136b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240136b2:	460c      	mov	r4, r1
{
240136b4:	4606      	mov	r6, r0
240136b6:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
240136b8:	2010      	movs	r0, #16
    _tMempool* m = *mp;
240136ba:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
240136be:	4639      	mov	r1, r7
240136c0:	f7ff fb6e 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
240136c4:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
240136c6:	6030      	str	r0, [r6, #0]
240136c8:	4604      	mov	r4, r0
    c->mempool = m;
240136ca:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
240136ce:	f7ff ff15 	bl	240134fc <tSquareLFO_initToPool>
    _tMempool* m = *mp;
240136d2:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240136d4:	201c      	movs	r0, #28
240136d6:	4629      	mov	r1, r5
240136d8:	f7ff fb62 	bl	24012da0 <mpool_alloc>
    c->phase    =  0;
240136dc:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240136de:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
240136e0:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240136e2:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240136e4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 240136f8 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
240136e8:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240136ea:	edd3 7a01 	vldr	s15, [r3, #4]
240136ee:	ee67 7a87 	vmul.f32	s15, s15, s14
240136f2:	edc0 7a06 	vstr	s15, [r0, #24]
}
240136f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240136f8:	4f800000 	.word	0x4f800000

240136fc <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
240136fc:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
240136fe:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24013700:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24013704:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2401377c <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013708:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
2401370c:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
2401370e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
24013712:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24013716:	4403      	add	r3, r0
24013718:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401371a:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
2401371e:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24013720:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24013724:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
24013726:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24013728:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
2401372c:	6884      	ldr	r4, [r0, #8]
2401372e:	4423      	add	r3, r4
24013730:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
24013732:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24013736:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
24013738:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
2401373c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
24013740:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
24013742:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
24013746:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24013748:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
2401374c:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013750:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24013754:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24013758:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401375c:	ee76 6ac5 	vsub.f32	s13, s13, s10
24013760:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
24013764:	ee30 0a00 	vadd.f32	s0, s0, s0
24013768:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401376c:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
24013770:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24013774:	eea6 0a07 	vfma.f32	s0, s12, s14
24013778:	4770      	bx	lr
2401377a:	bf00      	nop
2401377c:	2f80000d 	.word	0x2f80000d

24013780 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
24013780:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
24013782:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
24013784:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013786:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401378a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401378e:	ee60 7a27 	vmul.f32	s15, s0, s15
24013792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013796:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
2401379a:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401379c:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240137a0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240137a4:	ee60 7a27 	vmul.f32	s15, s0, s15
240137a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240137ac:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
240137b0:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240137b2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240137b6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240137ba:	ee20 0a27 	vmul.f32	s0, s0, s15
240137be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240137c2:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
240137c6:	4770      	bx	lr

240137c8 <tSawSquareLFO_setPhase>:
    int i = phase;
240137c8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
240137cc:	eddf 6a15 	vldr	s13, [pc, #84]	; 24013824 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
240137d0:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240137d2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 24013828 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
240137d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
240137da:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
240137dc:	6890      	ldr	r0, [r2, #8]
    phase -= i;
240137de:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
240137e2:	ee20 0a26 	vmul.f32	s0, s0, s13
240137e6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
240137ea:	edc0 7a01 	vstr	s15, [r0, #4]
240137ee:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240137f2:	6890      	ldr	r0, [r2, #8]
240137f4:	edd2 7a01 	vldr	s15, [r2, #4]
240137f8:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
240137fc:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240137fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24013802:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24013806:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401380a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401380e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24013812:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401381a:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
2401381e:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
24013820:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
24013822:	4770      	bx	lr
24013824:	4f800000 	.word	0x4f800000
24013828:	2f80000d 	.word	0x2f80000d

2401382c <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
2401382c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
2401382e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24013832:	4770      	bx	lr

24013834 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
24013834:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013836:	698d      	ldr	r5, [r1, #24]
{
24013838:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401383a:	2018      	movs	r0, #24
2401383c:	4629      	mov	r1, r5
2401383e:	f7ff faaf 	bl	24012da0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24013842:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24013844:	6020      	str	r0, [r4, #0]
    c->mempool = m;
24013846:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013848:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401384a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24013880 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
2401384e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24013884 <tTriLFO_init+0x50>
    c->phase    =  0;
24013852:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24013856:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401385a:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
2401385e:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013862:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
24013866:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013868:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401386c:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013870:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013878:	edc3 7a02 	vstr	s15, [r3, #8]
}
2401387c:	bd38      	pop	{r3, r4, r5, pc}
2401387e:	bf00      	nop
24013880:	4f800000 	.word	0x4f800000
24013884:	435c0000 	.word	0x435c0000

24013888 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24013888:	6803      	ldr	r3, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401388a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401388e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240138b8 <tTriLFO_tick+0x30>
    c->phase += c->inc;
24013892:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
24013896:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24013898:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
2401389c:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
2401389e:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
240138a2:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240138a6:	ee07 3a90 	vmov	s15, r3
240138aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240138ae:	eea7 0a87 	vfma.f32	s0, s15, s14
}
240138b2:	ee30 0a00 	vadd.f32	s0, s0, s0
240138b6:	4770      	bx	lr
240138b8:	2ffffff6 	.word	0x2ffffff6

240138bc <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
240138bc:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240138be:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240138c2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240138c6:	ee20 0a27 	vmul.f32	s0, s0, s15
240138ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240138ce:	ed83 0a02 	vstr	s0, [r3, #8]
}
240138d2:	4770      	bx	lr

240138d4 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
240138d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
240138d8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240138da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240138de:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
240138e2:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
240138e6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240138ea:	4770      	bx	lr

240138ec <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
240138ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240138ee:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240138f2:	698f      	ldr	r7, [r1, #24]
{
240138f4:	4606      	mov	r6, r0
240138f6:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
240138f8:	2010      	movs	r0, #16
240138fa:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240138fc:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24013978 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013900:	f7ff fa4e 	bl	24012da0 <mpool_alloc>
24013904:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24013906:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013908:	6034      	str	r4, [r6, #0]
    c->mempool = m;
2401390a:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
2401390c:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401390e:	4631      	mov	r1, r6
24013910:	f7ff fa46 	bl	24012da0 <mpool_alloc>
24013914:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24013916:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013918:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
2401391a:	2600      	movs	r6, #0
    c->freq  = freq;
2401391c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2401397c <tSineTriLFO_init+0x90>
    c->phase    =  0;
24013920:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24013924:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013928:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
2401392c:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013930:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013934:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
24013936:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013938:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401393c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013940:	ee67 7a87 	vmul.f32	s15, s15, s14
24013944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013948:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
2401394c:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401394e:	4629      	mov	r1, r5
24013950:	f7ff fa26 	bl	24012da0 <mpool_alloc>
24013954:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24013956:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24013958:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
2401395c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
2401395e:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013962:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24013966:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013968:	ee67 7a88 	vmul.f32	s15, s15, s16
2401396c:	edc0 7a04 	vstr	s15, [r0, #16]
}
24013970:	ecbd 8b02 	vpop	{d8}
24013974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24013976:	bf00      	nop
24013978:	4f800000 	.word	0x4f800000
2401397c:	435c0000 	.word	0x435c0000

24013980 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24013980:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
24013982:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
24013984:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
24013988:	4a20      	ldr	r2, [pc, #128]	; (24013a0c <tSineTriLFO_tick+0x8c>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401398a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
2401398e:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013990:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24013a10 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
24013994:	694e      	ldr	r6, [r1, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24013996:	eddf 4a1f 	vldr	s9, [pc, #124]	; 24013a14 <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
2401399a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
2401399e:	4403      	add	r3, r0
240139a0:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
240139a2:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
240139a4:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240139a6:	f3c3 0314 	ubfx	r3, r3, #0, #21
240139aa:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
240139ae:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240139b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
240139b6:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
240139b8:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
240139ba:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
240139be:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
240139c0:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240139c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240139c6:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
240139ca:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
240139ce:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
240139d2:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
240139d6:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
240139da:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240139de:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
240139e2:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
240139e6:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240139ea:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240139ee:	ee07 3a10 	vmov	s14, r3
240139f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240139f6:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240139fa:	eea7 0a24 	vfma.f32	s0, s14, s9
}
240139fe:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
24013a00:	ee26 0a00 	vmul.f32	s0, s12, s0
}
24013a04:	eea5 0aa6 	vfma.f32	s0, s11, s13
24013a08:	4770      	bx	lr
24013a0a:	bf00      	nop
24013a0c:	2401c440 	.word	0x2401c440
24013a10:	35000004 	.word	0x35000004
24013a14:	2ffffff6 	.word	0x2ffffff6

24013a18 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
24013a18:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
24013a1a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a1c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24013a20:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a24:	ee60 7a27 	vmul.f32	s15, s0, s15
24013a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013a2c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24013a30:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a32:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24013a36:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a3a:	ee20 0a27 	vmul.f32	s0, s0, s15
24013a3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24013a42:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
24013a46:	4770      	bx	lr

24013a48 <tSineTriLFO_setPhase>:
    int i = phase;
24013a48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24013a4c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24013a74 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
24013a50:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
24013a56:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24013a58:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24013a5c:	ee20 0a07 	vmul.f32	s0, s0, s14
24013a60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24013a64:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24013a68:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
24013a6c:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
24013a6e:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
24013a72:	4770      	bx	lr
24013a74:	4f800000 	.word	0x4f800000

24013a78 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24013a78:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24013a7a:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24013a7e:	4770      	bx	lr

24013a80 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
24013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24013a84:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
24013a88:	f8d3 9000 	ldr.w	r9, [r3]
{
24013a8c:	b083      	sub	sp, #12
24013a8e:	460e      	mov	r6, r1
24013a90:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013a92:	4649      	mov	r1, r9
24013a94:	2064      	movs	r0, #100	; 0x64
{
24013a96:	461d      	mov	r5, r3
24013a98:	eeb0 8a40 	vmov.f32	s16, s0
24013a9c:	eeb0 9a41 	vmov.f32	s18, s2
24013aa0:	4617      	mov	r7, r2
24013aa2:	eef0 9a61 	vmov.f32	s19, s3
24013aa6:	eeb0 aa42 	vmov.f32	s20, s4
24013aaa:	eef0 aa62 	vmov.f32	s21, s5
24013aae:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013ab2:	f7ff f975 	bl	24012da0 <mpool_alloc>
24013ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
24013aba:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013abe:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013ac2:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
24013ac6:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
24013aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013ace:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
24013ad2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
24013ad6:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->maxLength = 2400 * oversampling;
24013ad8:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
24013adc:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013ae0:	4604      	mov	r4, r0
    p->curr=0.0f;
24013ae2:	2300      	movs	r3, #0
    p->maxLength = 2400 * oversampling;
24013ae4:	fb01 f606 	mul.w	r6, r1, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013ae8:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24013aec:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
24013af0:	ee67 7a80 	vmul.f32	s15, s15, s0
    p->curr=0.0f;
24013af4:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013af6:	eddf 0a82 	vldr	s1, [pc, #520]	; 24013d00 <tSimpleLivingString3_initToPool+0x280>
24013afa:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
24013afc:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24013afe:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24013b02:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b06:	4650      	mov	r0, sl
24013b08:	ee2b 0a2b 	vmul.f32	s0, s22, s23
24013b0c:	ee20 0a27 	vmul.f32	s0, s0, s15
24013b10:	f7fd f86e 	bl	24010bf0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24013b14:	ed94 0a02 	vldr	s0, [r4, #8]
24013b18:	462a      	mov	r2, r5
24013b1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
24013b1c:	4658      	mov	r0, fp
24013b1e:	f7fc f8c7 	bl	2400fcb0 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24013b22:	ed94 0a02 	vldr	s0, [r4, #8]
24013b26:	462a      	mov	r2, r5
24013b28:	6b21      	ldr	r1, [r4, #48]	; 0x30
24013b2a:	4648      	mov	r0, r9
24013b2c:	f7fc f8c0 	bl	2400fcb0 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
24013b30:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
24013b34:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
24013b38:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24013b3c:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
24013b40:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 24013cf0 <tSimpleLivingString3_initToPool+0x270>
24013b44:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
24013b48:	eeb4 7bc6 	vcmpe.f64	d7, d6
24013b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013b50:	f100 80c7 	bmi.w	24013ce2 <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013b54:	6b33      	ldr	r3, [r6, #48]	; 0x30
24013b56:	005b      	lsls	r3, r3, #1
24013b58:	ee07 3a90 	vmov	s15, r3
24013b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24013b60:	fec7 7ac0 	vminnm.f32	s15, s15, s0
24013b64:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013b68:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24013b6c:	ed86 0a02 	vstr	s0, [r6, #8]
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013b70:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013b74:	f019 fdb0 	bl	2402d6d8 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013b78:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24013b7c:	f104 0840 	add.w	r8, r4, #64	; 0x40
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013b80:	eddf 7a60 	vldr	s15, [pc, #384]	; 24013d04 <tSimpleLivingString3_initToPool+0x284>
24013b84:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013b88:	ed96 6a01 	vldr	s12, [r6, #4]
24013b8c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013b90:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013b94:	ed9f 0b58 	vldr	d0, [pc, #352]	; 24013cf8 <tSimpleLivingString3_initToPool+0x278>
24013b98:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013b9c:	ee27 7b06 	vmul.f64	d7, d7, d6
24013ba0:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013ba4:	f001 fda8 	bl	240156f8 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24013ba8:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013baa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013bae:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24013bb2:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24013bb6:	ed94 0a02 	vldr	s0, [r4, #8]
24013bba:	f7fc f983 	bl	2400fec4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
24013bbe:	ed94 0a02 	vldr	s0, [r4, #8]
24013bc2:	4648      	mov	r0, r9
24013bc4:	f7fc f97e 	bl	2400fec4 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24013bc8:	4658      	mov	r0, fp
24013bca:	f7fc f8f5 	bl	2400fdb8 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
24013bce:	4648      	mov	r0, r9
24013bd0:	f7fc f8f2 	bl	2400fdb8 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24013bd4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
24013bd8:	4629      	mov	r1, r5
24013bda:	eeb0 0a68 	vmov.f32	s0, s17
24013bde:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
24013be0:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24013be4:	9301      	str	r3, [sp, #4]
24013be6:	f7fd f833 	bl	24010c50 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24013bea:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013bee:	9801      	ldr	r0, [sp, #4]
24013bf0:	f7fd f898 	bl	24010d24 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24013bf4:	eeb0 0a68 	vmov.f32	s0, s17
24013bf8:	9801      	ldr	r0, [sp, #4]
24013bfa:	f7fd f861 	bl	24010cc0 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24013bfe:	4629      	mov	r1, r5
24013c00:	4640      	mov	r0, r8
24013c02:	f8cd 8004 	str.w	r8, [sp, #4]
24013c06:	f7fd f8eb 	bl	24010de0 <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
24013c0a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013c0e:	9801      	ldr	r0, [sp, #4]
24013c10:	f7fd f902 	bl	24010e18 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24013c14:	4629      	mov	r1, r5
24013c16:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24013c1a:	4630      	mov	r0, r6
24013c1c:	9601      	str	r6, [sp, #4]
24013c1e:	f7fd fa4d 	bl	240110bc <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24013c22:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013c26:	9801      	ldr	r0, [sp, #4]
24013c28:	f7fd fa88 	bl	2401113c <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24013c2c:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24013c30:	9801      	ldr	r0, [sp, #4]
24013c32:	f7fd fa67 	bl	24011104 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013c36:	eeb0 0a69 	vmov.f32	s0, s19
24013c3a:	eeb0 1a6a 	vmov.f32	s2, s21
24013c3e:	462a      	mov	r2, r5
24013c40:	eef0 0a4a 	vmov.f32	s1, s20
24013c44:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013c48:	4639      	mov	r1, r7
    p->userDecay = decay;
24013c4a:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013c4e:	f7fc fc25 	bl	2401049c <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24013c52:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
24013c56:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
24013c58:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
24013c5c:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
24013c60:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
24013c64:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24013cf0 <tSimpleLivingString3_initToPool+0x270>
24013c68:	eeb7 6acb 	vcvt.f64.f32	d6, s22
24013c6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
24013c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c74:	d438      	bmi.n	24013ce8 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013c76:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24013c78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013c7c:	005b      	lsls	r3, r3, #1
24013c7e:	ee00 3a10 	vmov	s0, r3
24013c82:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24013c86:	fe80 0a4b 	vminnm.f32	s0, s0, s22
24013c8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013c8e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
24013c90:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013c94:	f019 fd20 	bl	2402d6d8 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013c9c:	ed94 7a05 	vldr	s14, [r4, #20]
24013ca0:	eddf 7a18 	vldr	s15, [pc, #96]	; 24013d04 <tSimpleLivingString3_initToPool+0x284>
24013ca4:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013ca8:	ed94 6a01 	vldr	s12, [r4, #4]
24013cac:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013cb4:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24013cf8 <tSimpleLivingString3_initToPool+0x278>
24013cb8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013cbc:	ee27 7b06 	vmul.f64	d7, d7, d6
24013cc0:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013cc4:	f001 fd18 	bl	240156f8 <exp>
    p->pickupPoint = 0.9f;
24013cc8:	4a0f      	ldr	r2, [pc, #60]	; (24013d08 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
24013cca:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
24013ccc:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013cce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24013cd2:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013cd4:	ed84 0a04 	vstr	s0, [r4, #16]
}
24013cd8:	b003      	add	sp, #12
24013cda:	ecbd 8b08 	vpop	{d8-d11}
24013cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013ce2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24013d0c <tSimpleLivingString3_initToPool+0x28c>
24013ce6:	e73f      	b.n	24013b68 <tSimpleLivingString3_initToPool+0xe8>
24013ce8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24013d0c <tSimpleLivingString3_initToPool+0x28c>
24013cec:	e7cf      	b.n	24013c8e <tSimpleLivingString3_initToPool+0x20e>
24013cee:	bf00      	nop
24013cf0:	33333333 	.word	0x33333333
24013cf4:	40133333 	.word	0x40133333
24013cf8:	0a3d70a4 	.word	0x0a3d70a4
24013cfc:	c01ba3d7 	.word	0xc01ba3d7
24013d00:	3c23d70a 	.word	0x3c23d70a
24013d04:	3d8d78c4 	.word	0x3d8d78c4
24013d08:	3f666666 	.word	0x3f666666
24013d0c:	4019999a 	.word	0x4019999a

24013d10 <tSimpleLivingString3_free>:
{
24013d10:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24013d12:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
24013d14:	f104 0058 	add.w	r0, r4, #88	; 0x58
24013d18:	f7fc ff96 	bl	24010c48 <tExpSmooth_free>
    tLinearDelay_free(&p->delayLineU);
24013d1c:	f104 0034 	add.w	r0, r4, #52	; 0x34
24013d20:	f7fc f83e 	bl	2400fda0 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineL);
24013d24:	f104 0038 	add.w	r0, r4, #56	; 0x38
24013d28:	f7fc f83a 	bl	2400fda0 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
24013d2c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24013d30:	f7fc ffc2 	bl	24010cb8 <tOnePole_free>
    tBiQuad_free(&p->bridgeFilter2),
24013d34:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013d38:	f7fd f86a 	bl	24010e10 <tBiQuad_free>
    tHighpass_free(&p->DCblocker);
24013d3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
24013d40:	f7fd f9dc 	bl	240110fc <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLev);
24013d44:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013d48:	f7fc fbd0 	bl	240104ec <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
24013d4c:	6821      	ldr	r1, [r4, #0]
24013d4e:	4620      	mov	r0, r4
}
24013d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24013d54:	f7ff b8e6 	b.w	24012f24 <mpool_free>

24013d58 <tSimpleLivingString3_setFreq>:
{
24013d58:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24013d5a:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
24013d5c:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24013d60:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24013d64:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24013d68:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24013de0 <tSimpleLivingString3_setFreq+0x88>
24013d6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24013d70:	eeb4 5bc6 	vcmpe.f64	d5, d6
24013d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013d78:	d42e      	bmi.n	24013dd8 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24013d7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013d80:	005b      	lsls	r3, r3, #1
24013d82:	ee00 3a10 	vmov	s0, r3
24013d86:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24013d8a:	fe80 0a67 	vminnm.f32	s0, s0, s15
24013d8e:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24013d96:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013d9a:	f019 fc9d 	bl	2402d6d8 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013da2:	ed94 7a05 	vldr	s14, [r4, #20]
24013da6:	eddf 7a12 	vldr	s15, [pc, #72]	; 24013df0 <tSimpleLivingString3_setFreq+0x98>
24013daa:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013dae:	ed94 6a01 	vldr	s12, [r4, #4]
24013db2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013db6:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013dba:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24013de8 <tSimpleLivingString3_setFreq+0x90>
24013dbe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013dc2:	ee27 7b06 	vmul.f64	d7, d7, d6
24013dc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013dca:	f001 fc95 	bl	240156f8 <exp>
24013dce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013dd2:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24013dd6:	bd10      	pop	{r4, pc}
24013dd8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24013df4 <tSimpleLivingString3_setFreq+0x9c>
24013ddc:	e7d9      	b.n	24013d92 <tSimpleLivingString3_setFreq+0x3a>
24013dde:	bf00      	nop
24013de0:	33333333 	.word	0x33333333
24013de4:	40133333 	.word	0x40133333
24013de8:	0a3d70a4 	.word	0x0a3d70a4
24013dec:	c01ba3d7 	.word	0xc01ba3d7
24013df0:	3d8d78c4 	.word	0x3d8d78c4
24013df4:	4019999a 	.word	0x4019999a

24013df8 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24013df8:	6800      	ldr	r0, [r0, #0]
24013dfa:	303c      	adds	r0, #60	; 0x3c
24013dfc:	f7fc bf60 	b.w	24010cc0 <tOnePole_setFreq>

24013e00 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013e00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013e04:	eddf 6a10 	vldr	s13, [pc, #64]	; 24013e48 <tSimpleLivingString3_setDecay+0x48>
{
24013e08:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013e0a:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
24013e0e:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24013e10:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013e14:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
24013e18:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24013e1c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24013e20:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013e24:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24013e40 <tSimpleLivingString3_setDecay+0x40>
24013e28:	ee27 7b06 	vmul.f64	d7, d7, d6
24013e2c:	ee85 0b07 	vdiv.f64	d0, d5, d7
24013e30:	f001 fc62 	bl	240156f8 <exp>
24013e34:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013e38:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24013e3c:	bd10      	pop	{r4, pc}
24013e3e:	bf00      	nop
24013e40:	52bd3c36 	.word	0x52bd3c36
24013e44:	c01ba196 	.word	0xc01ba196
24013e48:	3d8d78c4 	.word	0x3d8d78c4

24013e4c <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24013e4c:	6800      	ldr	r0, [r0, #0]
24013e4e:	3054      	adds	r0, #84	; 0x54
24013e50:	f7fc bb88 	b.w	24010564 <tFeedbackLeveler_setTargetLevel>

24013e54 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24013e54:	6800      	ldr	r0, [r0, #0]
24013e56:	3054      	adds	r0, #84	; 0x54
24013e58:	f7fc bb58 	b.w	2401050c <tFeedbackLeveler_setFactor>

24013e5c <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24013e5c:	6800      	ldr	r0, [r0, #0]
24013e5e:	3054      	adds	r0, #84	; 0x54
24013e60:	f7fc bb50 	b.w	24010504 <tFeedbackLeveler_setStrength>

24013e64 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24013e64:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
24013e66:	6805      	ldr	r5, [r0, #0]
{
24013e68:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24013e6a:	f105 0054 	add.w	r0, r5, #84	; 0x54
24013e6e:	f7fc fb51 	bl	24010514 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24013e72:	622c      	str	r4, [r5, #32]
}
24013e74:	bd38      	pop	{r3, r4, r5, pc}
24013e76:	bf00      	nop

24013e78 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
24013e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
24013e7c:	6801      	ldr	r1, [r0, #0]
{
24013e7e:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
24013e80:	edd1 7a02 	vldr	s15, [r1, #8]
24013e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013e88:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24013e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013e90:	ee67 0aa0 	vmul.f32	s1, s15, s1
24013e94:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24013e98:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
24013e9c:	2b00      	cmp	r3, #0
24013e9e:	f340 8081 	ble.w	24013fa4 <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
24013ea2:	4298      	cmp	r0, r3
24013ea4:	dc0f      	bgt.n	24013ec6 <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
24013ea6:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24013ea8:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
24013eaa:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
24013eac:	dd77      	ble.n	24013f9e <tSimpleLivingString3_pluck+0x126>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013eae:	ee07 7a90 	vmov	s15, r7
24013eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013eb6:	2f00      	cmp	r7, #0
24013eb8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24013ebc:	ee86 7a86 	vdiv.f32	s14, s13, s12
24013ec0:	da0f      	bge.n	24013ee2 <tSimpleLivingString3_pluck+0x6a>
24013ec2:	2300      	movs	r3, #0
24013ec4:	e02b      	b.n	24013f1e <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
24013ec6:	1ac2      	subs	r2, r0, r3
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013ec8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24013ecc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013ed0:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013ed2:	ee07 2a90 	vmov	s15, r2
24013ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013eda:	ee85 7a86 	vdiv.f32	s14, s11, s12
24013ede:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24013ee2:	429f      	cmp	r7, r3
24013ee4:	bfa8      	it	ge
24013ee6:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
24013ee8:	2300      	movs	r3, #0
24013eea:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013eee:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013ef0:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013ef4:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
24013efc:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013efe:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24013f00:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f02:	fbb2 f6f5 	udiv	r6, r2, r5
24013f06:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
24013f0e:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
24013f10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24013f14:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24013f18:	dde9      	ble.n	24013eee <tSimpleLivingString3_pluck+0x76>
24013f1a:	4298      	cmp	r0, r3
24013f1c:	dd1d      	ble.n	24013f5a <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f1e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013f22:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f26:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24013f2c:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f30:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f34:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24013f38:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f3a:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24013f3c:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f3e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
24013f42:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f44:	fbb2 f6f5 	udiv	r6, r2, r5
24013f48:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f4c:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24013f50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24013f54:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24013f58:	dce3      	bgt.n	24013f22 <tSimpleLivingString3_pluck+0xaa>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f5a:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24013f5e:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f62:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
24013f66:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24013f68:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f6a:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24013f6c:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f6e:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24013f70:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f72:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24013f74:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f76:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24013f78:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
24013f7a:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24013f7e:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f82:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24013f86:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
24013f8a:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013f8c:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24013f90:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24013f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24013f98:	6812      	ldr	r2, [r2, #0]
24013f9a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
24013f9c:	d1df      	bne.n	24013f5e <tSimpleLivingString3_pluck+0xe6>
    }
}
24013f9e:	b002      	add	sp, #8
24013fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
24013fa4:	2800      	cmp	r0, #0
24013fa6:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
24013faa:	ddf8      	ble.n	24013f9e <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013fac:	ee07 7a10 	vmov	s14, r7
24013fb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
24013fb4:	2301      	movs	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013fb6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
24013fba:	eeb0 7a67 	vmov.f32	s14, s15
24013fbe:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013fc2:	eeb0 6a67 	vmov.f32	s12, s15
24013fc6:	e78c      	b.n	24013ee2 <tSimpleLivingString3_pluck+0x6a>

24013fc8 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24013fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24013fcc:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
24013fd0:	6804      	ldr	r4, [r0, #0]
{
24013fd2:	b083      	sub	sp, #12

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24013fd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
24013fd8:	f104 0634 	add.w	r6, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24013fdc:	f019 fb6c 	bl	2402d6b8 <__tExpSmooth_tick_veneer>
24013fe0:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24013fe4:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
24013fe8:	4630      	mov	r0, r6
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24013fea:	ed8d 0a01 	vstr	s0, [sp, #4]
    tLinearDelay_setDelay(&p->delayLineU, wl);
24013fee:	f7fb ff69 	bl	2400fec4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24013ff2:	eeb0 0a48 	vmov.f32	s0, s16
24013ff6:	4638      	mov	r0, r7
24013ff8:	f7fb ff64 	bl	2400fec4 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
24013ffc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24013ffe:	2b00      	cmp	r3, #0
24014000:	dd3c      	ble.n	2401407c <tSimpleLivingString3_tick+0xb4>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24014002:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24014006:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
2401400a:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
2401400c:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
2401400e:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24014010:	f7fb ff2c 	bl	2400fe6c <tLinearDelay_tickOut>
24014014:	4648      	mov	r0, r9
24014016:	f7fc fe71 	bl	24010cfc <tOnePole_tick>
2401401a:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
2401401e:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24014020:	ee20 0a27 	vmul.f32	s0, s0, s15
24014024:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24014028:	f7fc fa78 	bl	2401051c <tFeedbackLeveler_tick>
2401402c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24014030:	eef0 0a40 	vmov.f32	s1, s0
24014034:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014038:	f019 fb62 	bl	2402d700 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
2401403c:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
2401403e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24014042:	f7fb ff13 	bl	2400fe6c <tLinearDelay_tickOut>
24014046:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2401404a:	eef0 0a40 	vmov.f32	s1, s0
2401404e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014052:	f019 fb55 	bl	2402d700 <__LEAF_clip_veneer>
24014056:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
2401405a:	4630      	mov	r0, r6
2401405c:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24014060:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
24014064:	f7fb feee 	bl	2400fe44 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24014068:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
2401406c:	4638      	mov	r0, r7
2401406e:	eeb1 0a40 	vneg.f32	s0, s0
24014072:	f7fb fee7 	bl	2400fe44 <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
24014076:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24014078:	42ab      	cmp	r3, r5
2401407a:	dcc7      	bgt.n	2401400c <tSimpleLivingString3_tick+0x44>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
2401407c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
24014080:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24014084:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24014086:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
2401408a:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401408e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24014090:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24014094:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24014096:	feb8 6a65 	vrinta.f32	s12, s11
2401409a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
2401409e:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240140a2:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
240140a6:	feb8 7a66 	vrinta.f32	s14, s13
240140aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240140ae:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
240140b2:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
240140b6:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240140ba:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
240140be:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
240140c2:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240140c4:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
240140c6:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240140ca:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
240140cc:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240140d0:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240140d4:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
240140d6:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240140d8:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
240140da:	ee35 6ac6 	vsub.f32	s12, s11, s12
    LfloatPart = reversePoint - whichPoint;
240140de:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
240140e2:	fb93 f6f0 	sdiv	r6, r3, r0
240140e6:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240140ea:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240140ec:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    LfloatPart = reversePoint - whichPoint;
240140f0:	ee76 6ae5 	vsub.f32	s13, s13, s11
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240140f4:	ee30 0a25 	vadd.f32	s0, s0, s11
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240140f8:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240140fc:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24014100:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24014102:	edd2 5a00 	vldr	s11, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24014106:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
2401410a:	ee20 0a25 	vmul.f32	s0, s0, s11
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
2401410e:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24014112:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24014114:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24014118:	eea7 0a27 	vfma.f32	s0, s14, s15
2401411c:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24014120:	fb93 f5f0 	sdiv	r5, r3, r0
24014124:	eea7 0a86 	vfma.f32	s0, s15, s12
24014128:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
2401412c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24014130:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
24014134:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24014136:	eea7 0aa6 	vfma.f32	s0, s15, s13
2401413a:	ee20 0a24 	vmul.f32	s0, s0, s9
2401413e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24014142:	b003      	add	sp, #12
24014144:	ecbd 8b02 	vpop	{d8}
24014148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

2401414c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
2401414c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
2401414e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24014152:	4770      	bx	lr

24014154 <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, Lfloat freq, Lfloat pickPos, Lfloat prepPos, Lfloat pickupPos, Lfloat prepIndex,
                                     Lfloat brightness, Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                     Lfloat levStrength, int levMode, tMempool* const mp)
{
24014154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24014158:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
2401415c:	f8d2 8000 	ldr.w	r8, [r2]
{
24014160:	4606      	mov	r6, r0
24014162:	b083      	sub	sp, #12
24014164:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24014166:	2070      	movs	r0, #112	; 0x70
24014168:	4641      	mov	r1, r8
{
2401416a:	eef0 ca61 	vmov.f32	s25, s3
2401416e:	4615      	mov	r5, r2
24014170:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
24014174:	ed9f da99 	vldr	s26, [pc, #612]	; 240143dc <tLivingString2_initToPool+0x288>
{
24014178:	eef0 9a62 	vmov.f32	s19, s5
2401417c:	eef0 aa63 	vmov.f32	s21, s7
24014180:	eef0 ba44 	vmov.f32	s23, s8
24014184:	eeb0 ca64 	vmov.f32	s24, s9
24014188:	eeb0 ba43 	vmov.f32	s22, s6
2401418c:	eef0 8a41 	vmov.f32	s17, s2
24014190:	eeb0 aa40 	vmov.f32	s20, s0
24014194:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24014198:	f7fe fe02 	bl	24012da0 <mpool_alloc>
2401419c:	6030      	str	r0, [r6, #0]
2401419e:	4604      	mov	r4, r0
    p->mempool = m;
240141a0:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240141a4:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
240141a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240141aa:	305c      	adds	r0, #92	; 0x5c
240141ac:	eddf 0a8c 	vldr	s1, [pc, #560]	; 240143e0 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240141b0:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
240141b4:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
240141b8:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
240141bc:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
240141c0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240141c4:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
240141c8:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240141cc:	f7fc fd10 	bl	24010bf0 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
240141d0:	eddf 7a84 	vldr	s15, [pc, #528]	; 240143e4 <tLivingString2_initToPool+0x290>
240141d4:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
240141d6:	f104 0934 	add.w	r9, r4, #52	; 0x34
240141da:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
240141de:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240141e2:	305c      	adds	r0, #92	; 0x5c
240141e4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
240141e8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
240141ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240141f0:	ed90 7a04 	vldr	s14, [r0, #16]
240141f4:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
240141f8:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240141fc:	ee30 0a6d 	vsub.f32	s0, s0, s27
24014200:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014204:	f019 fa68 	bl	2402d6d8 <__tExpSmooth_setDest_veneer>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24014208:	eddf 0a77 	vldr	s1, [pc, #476]	; 240143e8 <tLivingString2_initToPool+0x294>
2401420c:	eeb0 0a49 	vmov.f32	s0, s18
24014210:	f104 0060 	add.w	r0, r4, #96	; 0x60
24014214:	4629      	mov	r1, r5
    p->freq = freq;
24014216:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
2401421a:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
2401421e:	edcd 0a00 	vstr	s1, [sp]
24014222:	f7fc fce5 	bl	24010bf0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
24014226:	eeb0 0a68 	vmov.f32	s0, s17
2401422a:	4629      	mov	r1, r5
2401422c:	eddd 0a00 	vldr	s1, [sp]
24014230:	f104 0064 	add.w	r0, r4, #100	; 0x64
24014234:	f7fc fcdc 	bl	24010bf0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
24014238:	eddd 0a00 	vldr	s1, [sp]
2401423c:	4629      	mov	r1, r5
2401423e:	eeb0 0a6c 	vmov.f32	s0, s25
24014242:	f104 0068 	add.w	r0, r4, #104	; 0x68
24014246:	f7fc fcd3 	bl	24010bf0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, Lfloat pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
2401424a:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
2401424c:	fe89 0a6d 	vminnm.f32	s0, s18, s27
24014250:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24014254:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
24014256:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401425a:	f019 fa3d 	bl	2402d6d8 <__tExpSmooth_setDest_veneer>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, Lfloat prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
2401425e:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
24014260:	fe88 0aed 	vminnm.f32	s0, s17, s27
24014264:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24014268:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
2401426a:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401426e:	f019 fa33 	bl	2402d6d8 <__tExpSmooth_setDest_veneer>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24014272:	ed94 0a02 	vldr	s0, [r4, #8]
24014276:	462a      	mov	r2, r5
24014278:	4658      	mov	r0, fp
2401427a:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
2401427e:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
24014282:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24014286:	f7fb fe5f 	bl	2400ff48 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
2401428a:	ed94 0a02 	vldr	s0, [r4, #8]
2401428e:	462a      	mov	r2, r5
24014290:	4650      	mov	r0, sl
24014292:	f44f 6116 	mov.w	r1, #2400	; 0x960
24014296:	f7fb fe57 	bl	2400ff48 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
2401429a:	ed94 0a02 	vldr	s0, [r4, #8]
2401429e:	462a      	mov	r2, r5
240142a0:	4648      	mov	r0, r9
240142a2:	f44f 6116 	mov.w	r1, #2400	; 0x960
240142a6:	f7fb fe4f 	bl	2400ff48 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
240142aa:	462a      	mov	r2, r5
240142ac:	ed94 0a02 	vldr	s0, [r4, #8]
240142b0:	f44f 6116 	mov.w	r1, #2400	; 0x960
240142b4:	4640      	mov	r0, r8
240142b6:	f7fb fe47 	bl	2400ff48 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
240142ba:	4658      	mov	r0, fp
240142bc:	f7fb fece 	bl	2401005c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
240142c0:	4650      	mov	r0, sl
240142c2:	f7fb fecb 	bl	2401005c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
240142c6:	4648      	mov	r0, r9
240142c8:	f7fb fec8 	bl	2401005c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
240142cc:	4640      	mov	r0, r8
240142ce:	f7fb fec5 	bl	2401005c <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
240142d2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240142d6:	4629      	mov	r1, r5
    p->brightness = brightness;
240142d8:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
240142dc:	f7fc fd44 	bl	24010d68 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
240142e0:	4629      	mov	r1, r5
240142e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
240142e6:	f7fc fd3f 	bl	24010d68 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
240142ea:	4629      	mov	r1, r5
240142ec:	f104 0044 	add.w	r0, r4, #68	; 0x44
240142f0:	f7fc fd3a 	bl	24010d68 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
240142f4:	4629      	mov	r1, r5
240142f6:	f104 0048 	add.w	r0, r4, #72	; 0x48
240142fa:	f7fc fd35 	bl	24010d68 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, Lfloat brightness)
{
    _tLivingString2* p = *pl;
    Lfloat h0=(1.0 + brightness) * 0.5f;
240142fe:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
24014302:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
24014306:	6836      	ldr	r6, [r6, #0]
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014308:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    Lfloat h1=(1.0 - brightness) * 0.25f;
2401430c:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24014310:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014314:	ee05 6b06 	vmla.f64	d6, d5, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24014318:	ee37 7b45 	vsub.f64	d7, d7, d5
2401431c:	ee27 7b00 	vmul.f64	d7, d7, d0
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014320:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24014324:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24014328:	edcd 0a00 	vstr	s1, [sp]
2401432c:	eeb0 0a41 	vmov.f32	s0, s2
24014330:	ed8d 1a01 	vstr	s2, [sp, #4]
24014334:	f7fc fd4c 	bl	24010dd0 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
24014338:	ed9d 1a01 	vldr	s2, [sp, #4]
2401433c:	eddd 0a00 	vldr	s1, [sp]
24014340:	f106 0040 	add.w	r0, r6, #64	; 0x40
24014344:	eeb0 0a41 	vmov.f32	s0, s2
24014348:	ed8d 1a00 	vstr	s2, [sp]
2401434c:	edcd 0a01 	vstr	s1, [sp, #4]
24014350:	f7fc fd3e 	bl	24010dd0 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
24014354:	ed9d 1a00 	vldr	s2, [sp]
24014358:	f106 0044 	add.w	r0, r6, #68	; 0x44
2401435c:	eddd 0a01 	vldr	s1, [sp, #4]
24014360:	eeb0 0a41 	vmov.f32	s0, s2
24014364:	f7fc fd34 	bl	24010dd0 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24014368:	ed9d 1a00 	vldr	s2, [sp]
2401436c:	eddd 0a01 	vldr	s1, [sp, #4]
24014370:	f106 0048 	add.w	r0, r6, #72	; 0x48
24014374:	eeb0 0a41 	vmov.f32	s0, s2
24014378:	f7fc fd2a 	bl	24010dd0 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
2401437c:	4629      	mov	r1, r5
2401437e:	f104 0050 	add.w	r0, r4, #80	; 0x50
24014382:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24014386:	f7fc fe99 	bl	240110bc <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
2401438a:	4629      	mov	r1, r5
2401438c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24014390:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24014394:	f7fc fe92 	bl	240110bc <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
24014398:	eeb0 1a4c 	vmov.f32	s2, s24
2401439c:	eef0 0a6b 	vmov.f32	s1, s23
240143a0:	f104 0054 	add.w	r0, r4, #84	; 0x54
240143a4:	eeb0 0a6a 	vmov.f32	s0, s21
240143a8:	462a      	mov	r2, r5
240143aa:	4639      	mov	r1, r7
    p->decay=decay;
240143ac:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
240143b0:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
240143b4:	f7fc f872 	bl	2401049c <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
240143b8:	eeb0 1a4c 	vmov.f32	s2, s24
240143bc:	eef0 0a6b 	vmov.f32	s1, s23
240143c0:	462a      	mov	r2, r5
240143c2:	eeb0 0a6a 	vmov.f32	s0, s21
240143c6:	4639      	mov	r1, r7
240143c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
240143cc:	f7fc f866 	bl	2401049c <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
240143d0:	6227      	str	r7, [r4, #32]
}
240143d2:	b003      	add	sp, #12
240143d4:	ecbd 8b0c 	vpop	{d8-d13}
240143d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240143dc:	00000000 	.word	0x00000000
240143e0:	3dcccccd 	.word	0x3dcccccd
240143e4:	461c4000 	.word	0x461c4000
240143e8:	3c23d70a 	.word	0x3c23d70a

240143ec <tLivingString2_free>:
{
240143ec:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
240143ee:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
240143f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
240143f4:	f7fc fc28 	bl	24010c48 <tExpSmooth_free>
    tExpSmooth_free(&p->ppSmooth);
240143f8:	f104 0060 	add.w	r0, r4, #96	; 0x60
240143fc:	f7fc fc24 	bl	24010c48 <tExpSmooth_free>
    tExpSmooth_free(&p->prpSmooth);
24014400:	f104 0064 	add.w	r0, r4, #100	; 0x64
24014404:	f7fc fc20 	bl	24010c48 <tExpSmooth_free>
    tExpSmooth_free(&p->puSmooth);
24014408:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401440c:	f7fc fc1c 	bl	24010c48 <tExpSmooth_free>
    tHermiteDelay_free(&p->delLF);
24014410:	f104 002c 	add.w	r0, r4, #44	; 0x2c
24014414:	f7fb fe16 	bl	24010044 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUF);
24014418:	f104 0030 	add.w	r0, r4, #48	; 0x30
2401441c:	f7fb fe12 	bl	24010044 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUB);
24014420:	f104 0034 	add.w	r0, r4, #52	; 0x34
24014424:	f7fb fe0e 	bl	24010044 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delLB);
24014428:	f104 0038 	add.w	r0, r4, #56	; 0x38
2401442c:	f7fb fe0a 	bl	24010044 <tHermiteDelay_free>
    tTwoZero_free(&p->bridgeFilter);
24014430:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24014434:	f7fc fcac 	bl	24010d90 <tTwoZero_free>
    tTwoZero_free(&p->nutFilter);
24014438:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401443c:	f7fc fca8 	bl	24010d90 <tTwoZero_free>
    tTwoZero_free(&p->prepFilterU);
24014440:	f104 0044 	add.w	r0, r4, #68	; 0x44
24014444:	f7fc fca4 	bl	24010d90 <tTwoZero_free>
    tTwoZero_free(&p->prepFilterL);
24014448:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401444c:	f7fc fca0 	bl	24010d90 <tTwoZero_free>
    tHighpass_free(&p->DCblockerU);
24014450:	f104 0050 	add.w	r0, r4, #80	; 0x50
24014454:	f7fc fe52 	bl	240110fc <tHighpass_free>
    tHighpass_free(&p->DCblockerL);
24014458:	f104 004c 	add.w	r0, r4, #76	; 0x4c
2401445c:	f7fc fe4e 	bl	240110fc <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLevU);
24014460:	f104 0054 	add.w	r0, r4, #84	; 0x54
24014464:	f7fc f842 	bl	240104ec <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLevL);
24014468:	f104 0058 	add.w	r0, r4, #88	; 0x58
2401446c:	f7fc f83e 	bl	240104ec <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
24014470:	6821      	ldr	r1, [r4, #0]
24014472:	4620      	mov	r0, r4
}
24014474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24014478:	f7fe bd54 	b.w	24012f24 <mpool_free>

2401447c <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
2401447c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
24014480:	eddf 6a0c 	vldr	s13, [pc, #48]	; 240144b4 <tLivingString2_setFreq+0x38>
24014484:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24014486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401448a:	fe80 0a66 	vminnm.f32	s0, s0, s13
2401448e:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
24014492:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24014496:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401449a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401449e:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
240144a2:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240144a6:	ee30 0a47 	vsub.f32	s0, s0, s14
240144aa:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240144ae:	f019 b913 	b.w	2402d6d8 <__tExpSmooth_setDest_veneer>
240144b2:	bf00      	nop
240144b4:	461c4000 	.word	0x461c4000

240144b8 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
240144b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240144bc:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
240144be:	eddf 7a06 	vldr	s15, [pc, #24]	; 240144d8 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
240144c2:	f103 0060 	add.w	r0, r3, #96	; 0x60
240144c6:	fe80 0a47 	vminnm.f32	s0, s0, s14
240144ca:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
240144ce:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
240144d2:	f019 b901 	b.w	2402d6d8 <__tExpSmooth_setDest_veneer>
240144d6:	bf00      	nop
240144d8:	00000000 	.word	0x00000000

240144dc <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
240144dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240144e0:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
240144e2:	eddf 7a06 	vldr	s15, [pc, #24]	; 240144fc <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
240144e6:	f103 0064 	add.w	r0, r3, #100	; 0x64
240144ea:	fe80 0a47 	vminnm.f32	s0, s0, s14
240144ee:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
240144f2:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
240144f6:	f019 b8ef 	b.w	2402d6d8 <__tExpSmooth_setDest_veneer>
240144fa:	bf00      	nop
240144fc:	00000000 	.word	0x00000000

24014500 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
24014500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014504:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
24014506:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014520 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
2401450a:	f103 0068 	add.w	r0, r3, #104	; 0x68
2401450e:	fe80 0a47 	vminnm.f32	s0, s0, s14
24014512:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
24014516:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
2401451a:	f019 b8dd 	b.w	2402d6d8 <__tExpSmooth_setDest_veneer>
2401451e:	bf00      	nop
24014520:	00000000 	.word	0x00000000

24014524 <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
24014524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
24014528:	eddf 7a04 	vldr	s15, [pc, #16]	; 2401453c <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
2401452c:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
2401452e:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
24014532:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
24014536:	ed83 0a06 	vstr	s0, [r3, #24]
}
2401453a:	4770      	bx	lr
2401453c:	00000000 	.word	0x00000000

24014540 <tLivingString2_setBrightness>:
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014540:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24014544:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
24014548:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    Lfloat h1=(1.0 - brightness) * 0.25f;
2401454c:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014550:	ee00 6b06 	vmla.f64	d6, d0, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24014554:	ee37 7b40 	vsub.f64	d7, d7, d0
{
24014558:	b510      	push	{r4, lr}
    Lfloat h1=(1.0 - brightness) * 0.25f;
2401455a:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
2401455e:	6804      	ldr	r4, [r0, #0]
{
24014560:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24014562:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014566:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
2401456a:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
2401456e:	edcd 0a00 	vstr	s1, [sp]
24014572:	eeb0 0a41 	vmov.f32	s0, s2
24014576:	ed8d 1a01 	vstr	s2, [sp, #4]
2401457a:	f7fc fc29 	bl	24010dd0 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
2401457e:	ed9d 1a01 	vldr	s2, [sp, #4]
24014582:	eddd 0a00 	vldr	s1, [sp]
24014586:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401458a:	eeb0 0a41 	vmov.f32	s0, s2
2401458e:	ed8d 1a00 	vstr	s2, [sp]
24014592:	edcd 0a01 	vstr	s1, [sp, #4]
24014596:	f7fc fc1b 	bl	24010dd0 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
2401459a:	ed9d 1a00 	vldr	s2, [sp]
2401459e:	f104 0044 	add.w	r0, r4, #68	; 0x44
240145a2:	eddd 0a01 	vldr	s1, [sp, #4]
240145a6:	eeb0 0a41 	vmov.f32	s0, s2
240145aa:	f7fc fc11 	bl	24010dd0 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
240145ae:	ed9d 1a00 	vldr	s2, [sp]
240145b2:	eddd 0a01 	vldr	s1, [sp, #4]
240145b6:	f104 0048 	add.w	r0, r4, #72	; 0x48
240145ba:	eeb0 0a41 	vmov.f32	s0, s2
}
240145be:	b002      	add	sp, #8
240145c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
240145c4:	f7fc bc04 	b.w	24010dd0 <tTwoZero_setCoefficients>

240145c8 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, Lfloat decay)
{
240145c8:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
240145ca:	6804      	ldr	r4, [r0, #0]
{
240145cc:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
240145d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240145d4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 240145f0 <tLivingString2_setDecay+0x28>
240145d8:	ed94 7a01 	vldr	s14, [r4, #4]
240145dc:	ee67 7a87 	vmul.f32	s15, s15, s14
240145e0:	eec0 0aa7 	vdiv.f32	s1, s1, s15
240145e4:	f001 fb60 	bl	24015ca8 <powf>
240145e8:	ed84 0a07 	vstr	s0, [r4, #28]
}
240145ec:	bd10      	pop	{r4, pc}
240145ee:	bf00      	nop
240145f0:	3a83126f 	.word	0x3a83126f

240145f4 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, Lfloat targetLev)
{
240145f4:	b510      	push	{r4, lr}
240145f6:	ed2d 8b02 	vpush	{d8}
240145fa:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
240145fe:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
24014600:	f104 0054 	add.w	r0, r4, #84	; 0x54
24014604:	f7fb ffae 	bl	24010564 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24014608:	eeb0 0a48 	vmov.f32	s0, s16
2401460c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24014610:	ecbd 8b02 	vpop	{d8}
24014614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24014618:	f7fb bfa4 	b.w	24010564 <tFeedbackLeveler_setTargetLevel>

2401461c <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, Lfloat levSmoothFactor)
{
2401461c:	b510      	push	{r4, lr}
2401461e:	ed2d 8b02 	vpush	{d8}
24014622:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24014626:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
24014628:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401462c:	f7fb ff6e 	bl	2401050c <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24014630:	eeb0 0a48 	vmov.f32	s0, s16
24014634:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24014638:	ecbd 8b02 	vpop	{d8}
2401463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24014640:	f7fb bf64 	b.w	2401050c <tFeedbackLeveler_setFactor>

24014644 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, Lfloat levStrength)
{
24014644:	b510      	push	{r4, lr}
24014646:	ed2d 8b02 	vpush	{d8}
2401464a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401464e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
24014650:	f104 0054 	add.w	r0, r4, #84	; 0x54
24014654:	f7fb ff56 	bl	24010504 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
24014658:	eeb0 0a48 	vmov.f32	s0, s16
2401465c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24014660:	ecbd 8b02 	vpop	{d8}
24014664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
24014668:	f7fb bf4c 	b.w	24010504 <tFeedbackLeveler_setStrength>

2401466c <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
2401466c:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
2401466e:	6805      	ldr	r5, [r0, #0]
{
24014670:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
24014672:	f105 0054 	add.w	r0, r5, #84	; 0x54
24014676:	f7fb ff4d 	bl	24010514 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
2401467a:	4621      	mov	r1, r4
2401467c:	f105 0058 	add.w	r0, r5, #88	; 0x58
24014680:	f7fb ff48 	bl	24010514 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24014684:	622c      	str	r4, [r5, #32]
}
24014686:	bd38      	pop	{r3, r4, r5, pc}

24014688 <tLivingString2_tick>:

Lfloat   tLivingString2_tick(tLivingString2* const pl, Lfloat input)
{
24014688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
2401468c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24014690:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
24014694:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
24014696:	ee60 aa27 	vmul.f32	s21, s0, s15
    //Lfloat pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
    Lfloat lowLen=prepP*wLen;
    Lfloat upLen=(1.0f-prepP)*wLen;
2401469a:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
2401469e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
240146a2:	f019 f809 	bl	2402d6b8 <__tExpSmooth_tick_veneer>
    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
240146a6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
240146aa:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
240146ae:	f019 f803 	bl	2402d6b8 <__tExpSmooth_tick_veneer>
240146b2:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
240146b6:	f104 0064 	add.w	r0, r4, #100	; 0x64
240146ba:	f018 fffd 	bl	2402d6b8 <__tExpSmooth_tick_veneer>
    Lfloat upLen=(1.0f-prepP)*wLen;
240146be:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
240146c2:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
240146c6:	eeb4 8ac0 	vcmpe.f32	s16, s0
    Lfloat lowLen=prepP*wLen;
240146ca:	ee28 9a80 	vmul.f32	s18, s17, s0
    Lfloat upLen=(1.0f-prepP)*wLen;
240146ce:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
240146d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240146d6:	f340 8170 	ble.w	240149ba <tLivingString2_tick+0x332>
    {
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
240146da:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        Lfloat pickPLfloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
240146de:	f104 0930 	add.w	r9, r4, #48	; 0x30
240146e2:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
240146e6:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
240146ea:	4648      	mov	r0, r9
    {
         Lfloat fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        Lfloat pickPLfloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240146ec:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
240146f0:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
240146f4:	f104 0638 	add.w	r6, r4, #56	; 0x38
240146f8:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
240146fc:	eebc bae6 	vcvt.u32.f32	s22, s13
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014700:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014704:	ee1b 1a10 	vmov	r1, s22
24014708:	ee77 ba2b 	vadd.f32	s23, s14, s23
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
2401470c:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24014710:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014714:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
24014718:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
2401471c:	eeb0 0a6b 	vmov.f32	s0, s23
24014720:	f7fb fd1e 	bl	24010160 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
24014724:	ee1b 1a10 	vmov	r1, s22
24014728:	4648      	mov	r0, r9
2401472a:	eeb0 0a6a 	vmov.f32	s0, s21
2401472e:	3101      	adds	r1, #1
24014730:	f7fb fd16 	bl	24010160 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24014734:	eefc 7ac8 	vcvt.u32.f32	s15, s16
24014738:	4640      	mov	r0, r8
2401473a:	eeb0 0a6b 	vmov.f32	s0, s23
2401473e:	ee17 1a90 	vmov	r1, s15
24014742:	f7fb fd0d 	bl	24010160 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPLfloat, (uint32_t) (upLen - pickPInt - 1));
24014746:	ee38 7a6c 	vsub.f32	s14, s16, s25
2401474a:	eeb0 0a6a 	vmov.f32	s0, s21
2401474e:	4640      	mov	r0, r8
24014750:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24014754:	ee17 1a90 	vmov	r1, s15
24014758:	f7fb fd02 	bl	24010160 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
2401475c:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401475e:	f104 0554 	add.w	r5, r4, #84	; 0x54
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
24014762:	f7fb fc97 	bl	24010094 <tHermiteDelay_tickOut>
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
24014766:	4648      	mov	r0, r9
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
24014768:	eef0 aa40 	vmov.f32	s21, s0
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
2401476c:	f7fb fc92 	bl	24010094 <tHermiteDelay_tickOut>
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
24014770:	4640      	mov	r0, r8
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
24014772:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
24014776:	f7fb fc8d 	bl	24010094 <tHermiteDelay_tickOut>
2401477a:	eeb0 ba40 	vmov.f32	s22, s0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
2401477e:	4630      	mov	r0, r6
24014780:	f7fb fc88 	bl	24010094 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24014784:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
24014788:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401478c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014790:	f018 ffb6 	bl	2402d700 <__LEAF_clip_veneer>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24014794:	eef0 0a4b 	vmov.f32	s1, s22
24014798:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401479c:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
240147a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240147a4:	f018 ffac 	bl	2402d700 <__LEAF_clip_veneer>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
240147a8:	eef0 0a48 	vmov.f32	s1, s16
240147ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
240147b0:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
240147b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240147b8:	f018 ffa2 	bl	2402d700 <__LEAF_clip_veneer>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
240147bc:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
240147c0:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
240147c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240147c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240147cc:	f018 ff98 	bl	2402d700 <__LEAF_clip_veneer>
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240147d0:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
240147d2:	eeb0 ba40 	vmov.f32	s22, s0
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240147d6:	2b00      	cmp	r3, #0
240147d8:	f040 80ec 	bne.w	240149b4 <tLivingString2_tick+0x32c>
240147dc:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240147e0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240147e4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240147e8:	eeb0 0a48 	vmov.f32	s0, s16
240147ec:	f7fc fad4 	bl	24010d98 <tTwoZero_tick>
240147f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
240147f4:	f7fc fc92 	bl	2401111c <tHighpass_tick>
240147f8:	4628      	mov	r0, r5
240147fa:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240147fe:	f104 0558 	add.w	r5, r4, #88	; 0x58
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014802:	f7fb fe8b 	bl	2401051c <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24014806:	eeb0 1a6a 	vmov.f32	s2, s21
2401480a:	eef1 0a40 	vneg.f32	s1, s0
2401480e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014812:	f018 ff75 	bl	2402d700 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24014816:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24014818:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
2401481c:	f7fb fc2c 	bl	24010078 <tHermiteDelay_tickIn>
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
24014820:	f104 0048 	add.w	r0, r4, #72	; 0x48
24014824:	eeb0 0a4b 	vmov.f32	s0, s22
24014828:	f7fc fab6 	bl	24010d98 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
2401482c:	eeb0 1a6a 	vmov.f32	s2, s21
24014830:	eef1 0a40 	vneg.f32	s1, s0
24014834:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014838:	f018 ff62 	bl	2402d700 <__LEAF_clip_veneer>
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
2401483c:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
24014840:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24014844:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
24014848:	eeb0 1a6a 	vmov.f32	s2, s21
2401484c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24014850:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
24014854:	eee7 0a87 	vfma.f32	s1, s15, s14
24014858:	f018 ff52 	bl	2402d700 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
2401485c:	4630      	mov	r0, r6
2401485e:	f7fb fc0b 	bl	24010078 <tHermiteDelay_tickIn>
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24014862:	6a23      	ldr	r3, [r4, #32]
24014864:	b90b      	cbnz	r3, 2401486a <tLivingString2_tick+0x1e2>
24014866:	edd4 aa07 	vldr	s21, [r4, #28]
2401486a:	eeb0 0a4c 	vmov.f32	s0, s24
2401486e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24014872:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24014876:	f7fc fa8f 	bl	24010d98 <tTwoZero_tick>
2401487a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
2401487e:	f7fc fc4d 	bl	2401111c <tHighpass_tick>
24014882:	4628      	mov	r0, r5
24014884:	ee20 0a2a 	vmul.f32	s0, s0, s21
24014888:	f7fb fe48 	bl	2401051c <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
2401488c:	eeb0 1a4c 	vmov.f32	s2, s24
24014890:	eef1 0a40 	vneg.f32	s1, s0
24014894:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014898:	f018 ff32 	bl	2402d700 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
2401489c:	4638      	mov	r0, r7
2401489e:	f7fb fbeb 	bl	24010078 <tHermiteDelay_tickIn>
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
240148a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
240148a6:	eeb0 0a6b 	vmov.f32	s0, s23
240148aa:	f7fc fa75 	bl	24010d98 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
240148ae:	eeb0 1a4c 	vmov.f32	s2, s24
240148b2:	eef1 0a40 	vneg.f32	s1, s0
240148b6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240148ba:	f018 ff21 	bl	2402d700 <__LEAF_clip_veneer>
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
240148be:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
240148c2:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
240148c6:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
240148ca:	eeb0 1a4c 	vmov.f32	s2, s24
240148ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
240148d2:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
240148d6:	eee7 0a87 	vfma.f32	s1, s15, s14
240148da:	f018 ff11 	bl	2402d700 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
240148de:	4648      	mov	r0, r9
240148e0:	f7fb fbca 	bl	24010078 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
240148e4:	eeb0 0a49 	vmov.f32	s0, s18
240148e8:	4638      	mov	r0, r7
240148ea:	f7fb fbfd 	bl	240100e8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
240148ee:	eeb0 0a49 	vmov.f32	s0, s18
240148f2:	4630      	mov	r0, r6
240148f4:	f7fb fbf8 	bl	240100e8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
240148f8:	eeb0 0a69 	vmov.f32	s0, s19
240148fc:	4648      	mov	r0, r9
240148fe:	f7fb fbf3 	bl	240100e8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
24014902:	eeb0 0a69 	vmov.f32	s0, s19
24014906:	4640      	mov	r0, r8
24014908:	f7fb fbee 	bl	240100e8 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    Lfloat pickupOut = 0.0f;
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
2401490c:	f104 0068 	add.w	r0, r4, #104	; 0x68
24014910:	f018 fed2 	bl	2402d6b8 <__tExpSmooth_tick_veneer>
    if (pupos < 0.9999f)
24014914:	eddf 7a66 	vldr	s15, [pc, #408]	; 24014ab0 <tLivingString2_tick+0x428>
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
24014918:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
2401491c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014924:	d53e      	bpl.n	240149a4 <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
24014926:	eeb4 aac0 	vcmpe.f32	s20, s0
2401492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401492e:	f140 8082 	bpl.w	24014a36 <tLivingString2_tick+0x3ae>
        {
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
24014932:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            Lfloat PUPLfloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
24014936:	4648      	mov	r0, r9
24014938:	ee39 9a0c 	vadd.f32	s18, s18, s24
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
2401493c:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24014940:	eea8 9aea 	vfms.f32	s18, s17, s21
24014944:	eebc aac8 	vcvt.u32.f32	s20, s16
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24014948:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
2401494c:	ee1a 1a10 	vmov	r1, s20
24014950:	f7fb fbfa 	bl	24010148 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
24014954:	ee1a 1a10 	vmov	r1, s20
24014958:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
2401495a:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
2401495e:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
24014962:	3101      	adds	r1, #1
24014964:	f7fb fbf0 	bl	24010148 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
24014968:	4640      	mov	r0, r8
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
2401496a:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
2401496e:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
24014972:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
24014976:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
2401497a:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
2401497e:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
24014982:	f7fb fbe1 	bl	24010148 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
24014986:	eefc 7ae9 	vcvt.u32.f32	s15, s19
2401498a:	4640      	mov	r0, r8
2401498c:	ee3a aa00 	vadd.f32	s20, s20, s0
24014990:	ee17 1a90 	vmov	r1, s15
24014994:	f7fb fbd8 	bl	24010148 <tHermiteDelay_tapOut>
24014998:	ee38 8a00 	vadd.f32	s16, s16, s0
2401499c:	ee28 8a2b 	vmul.f32	s16, s16, s23
240149a0:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
240149a4:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
240149a8:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
240149ac:	ecbd 8b0a 	vpop	{d8-d12}
240149b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240149b4:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
240149b8:	e712      	b.n	240147e0 <tLivingString2_tick+0x158>
         Lfloat fullPickPoint =  pickP * wLen;
240149ba:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240149be:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
240149c2:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
240149c6:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240149ca:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
240149cc:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
240149d0:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240149d4:	ee7c bac8 	vsub.f32	s23, s25, s16
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
240149d8:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240149dc:	ee1c 1a10 	vmov	r1, s24
240149e0:	ee7b baa7 	vadd.f32	s23, s23, s15
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
240149e4:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
240149e8:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240149ec:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
240149f0:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
240149f4:	eeb0 0a6b 	vmov.f32	s0, s23
240149f8:	f7fb fbb2 	bl	24010160 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
240149fc:	ee1c 1a10 	vmov	r1, s24
24014a00:	4638      	mov	r0, r7
24014a02:	eeb0 0a48 	vmov.f32	s0, s16
24014a06:	3101      	adds	r1, #1
24014a08:	f7fb fbaa 	bl	24010160 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014a0c:	eefc 7acb 	vcvt.u32.f32	s15, s22
24014a10:	4630      	mov	r0, r6
24014a12:	eeb0 0a6b 	vmov.f32	s0, s23
24014a16:	ee17 1a90 	vmov	r1, s15
24014a1a:	f7fb fba1 	bl	24010160 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPLfloat, (uint32_t) (lowLen - pickPInt - 1));
24014a1e:	ee7b 7a6c 	vsub.f32	s15, s22, s25
24014a22:	eeb0 0a48 	vmov.f32	s0, s16
24014a26:	4630      	mov	r0, r6
24014a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24014a2c:	ee17 1a90 	vmov	r1, s15
24014a30:	f7fb fb96 	bl	24010160 <tHermiteDelay_addTo>
24014a34:	e692      	b.n	2401475c <tLivingString2_tick+0xd4>
             Lfloat fullPUPoint =  pupos * wLen;
24014a36:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014a3a:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24014a3c:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014a40:	ee3c aa68 	vsub.f32	s20, s24, s17
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24014a44:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014a48:	ee19 1a90 	vmov	r1, s19
24014a4c:	f7fb fb7c 	bl	24010148 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24014a50:	ee19 1a90 	vmov	r1, s19
24014a54:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014a56:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014a5a:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24014a5e:	3101      	adds	r1, #1
24014a60:	f7fb fb72 	bl	24010148 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014a64:	4630      	mov	r0, r6
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24014a66:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014a6a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
24014a6e:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014a72:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014a76:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24014a7a:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014a7e:	f7fb fb63 	bl	24010148 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
24014a82:	eefc 7ac9 	vcvt.u32.f32	s15, s18
24014a86:	4630      	mov	r0, r6
24014a88:	ee79 9a80 	vadd.f32	s19, s19, s0
24014a8c:	ee17 1a90 	vmov	r1, s15
24014a90:	f7fb fb5a 	bl	24010148 <tHermiteDelay_tapOut>
24014a94:	ee38 8a00 	vadd.f32	s16, s16, s0
24014a98:	ee28 8a28 	vmul.f32	s16, s16, s17
24014a9c:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
24014aa0:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24014aa4:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24014aa8:	ecbd 8b0a 	vpop	{d8-d12}
24014aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24014ab0:	3f7ff972 	.word	0x3f7ff972

24014ab4 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24014ab4:	4770      	bx	lr
24014ab6:	bf00      	nop

24014ab8 <LEAF_init>:
{
24014ab8:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
24014aba:	6200      	str	r0, [r0, #32]
{
24014abc:	4604      	mov	r4, r0
24014abe:	461d      	mov	r5, r3
24014ac0:	ed2d 8b02 	vpush	{d8}
24014ac4:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24014ac8:	f7fe f954 	bl	24012d74 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
24014acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014ad0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24014b04 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24014ad4:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24014ad6:	4b0c      	ldr	r3, [pc, #48]	; (24014b08 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24014ad8:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24014adc:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
24014ae0:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
24014ae2:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
24014ae4:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
24014ae8:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
24014aec:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014af0:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
24014af4:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014af8:	edc4 7a03 	vstr	s15, [r4, #12]
}
24014afc:	ecbd 8b02 	vpop	{d8}
24014b00:	bd38      	pop	{r3, r4, r5, pc}
24014b02:	bf00      	nop
24014b04:	40c90fdb 	.word	0x40c90fdb
24014b08:	24014ab5 	.word	0x24014ab5

24014b0c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24014b0c:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
24014b0e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
24014b12:	2401      	movs	r4, #1
24014b14:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
24014b16:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
24014b1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
24014b1c:	4718      	bx	r3
24014b1e:	bf00      	nop

24014b20 <arm_fir_interpolate_init_f32>:
24014b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24014b22:	fbb2 f6f1 	udiv	r6, r2, r1
24014b26:	fb01 2416 	mls	r4, r1, r6, r2
24014b2a:	9f06      	ldr	r7, [sp, #24]
24014b2c:	b984      	cbnz	r4, 24014b50 <arm_fir_interpolate_init_f32+0x30>
24014b2e:	6043      	str	r3, [r0, #4]
24014b30:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
24014b34:	9b07      	ldr	r3, [sp, #28]
24014b36:	4605      	mov	r5, r0
24014b38:	7001      	strb	r1, [r0, #0]
24014b3a:	4621      	mov	r1, r4
24014b3c:	441a      	add	r2, r3
24014b3e:	8046      	strh	r6, [r0, #2]
24014b40:	4638      	mov	r0, r7
24014b42:	4432      	add	r2, r6
24014b44:	0092      	lsls	r2, r2, #2
24014b46:	f000 fc97 	bl	24015478 <memset>
24014b4a:	60af      	str	r7, [r5, #8]
24014b4c:	4620      	mov	r0, r4
24014b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014b50:	f06f 0001 	mvn.w	r0, #1
24014b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014b56:	bf00      	nop

24014b58 <arm_fir_interpolate_f32>:
24014b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24014b5c:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
24014b60:	b08f      	sub	sp, #60	; 0x3c
24014b62:	8845      	ldrh	r5, [r0, #2]
24014b64:	9202      	str	r2, [sp, #8]
24014b66:	442c      	add	r4, r5
24014b68:	6882      	ldr	r2, [r0, #8]
24014b6a:	930d      	str	r3, [sp, #52]	; 0x34
24014b6c:	089b      	lsrs	r3, r3, #2
24014b6e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
24014b72:	9107      	str	r1, [sp, #28]
24014b74:	950b      	str	r5, [sp, #44]	; 0x2c
24014b76:	4616      	mov	r6, r2
24014b78:	9209      	str	r2, [sp, #36]	; 0x24
24014b7a:	f8d0 b004 	ldr.w	fp, [r0, #4]
24014b7e:	970a      	str	r7, [sp, #40]	; 0x28
24014b80:	930c      	str	r3, [sp, #48]	; 0x30
24014b82:	f000 811b 	beq.w	24014dbc <arm_fir_interpolate_f32+0x264>
24014b86:	462a      	mov	r2, r5
24014b88:	468e      	mov	lr, r1
24014b8a:	4619      	mov	r1, r3
24014b8c:	4635      	mov	r5, r6
24014b8e:	4613      	mov	r3, r2
24014b90:	ea4f 0892 	mov.w	r8, r2, lsr #2
24014b94:	f106 0c1c 	add.w	ip, r6, #28
24014b98:	f10e 0210 	add.w	r2, lr, #16
24014b9c:	ea4f 1608 	mov.w	r6, r8, lsl #4
24014ba0:	f003 0903 	and.w	r9, r3, #3
24014ba4:	f107 0310 	add.w	r3, r7, #16
24014ba8:	f8cd b020 	str.w	fp, [sp, #32]
24014bac:	4693      	mov	fp, r2
24014bae:	e9cd 3103 	strd	r3, r1, [sp, #12]
24014bb2:	f106 030c 	add.w	r3, r6, #12
24014bb6:	4466      	add	r6, ip
24014bb8:	18eb      	adds	r3, r5, r3
24014bba:	9301      	str	r3, [sp, #4]
24014bbc:	f85b 3c10 	ldr.w	r3, [fp, #-16]
24014bc0:	9a03      	ldr	r2, [sp, #12]
24014bc2:	f842 3c10 	str.w	r3, [r2, #-16]
24014bc6:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
24014bca:	f842 3c0c 	str.w	r3, [r2, #-12]
24014bce:	f85b 3c08 	ldr.w	r3, [fp, #-8]
24014bd2:	f842 3c08 	str.w	r3, [r2, #-8]
24014bd6:	f85b 3c04 	ldr.w	r3, [fp, #-4]
24014bda:	f842 3c04 	str.w	r3, [r2, #-4]
24014bde:	f890 a000 	ldrb.w	sl, [r0]
24014be2:	4653      	mov	r3, sl
24014be4:	f1ba 0f00 	cmp.w	sl, #0
24014be8:	f000 80c5 	beq.w	24014d76 <arm_fir_interpolate_f32+0x21e>
24014bec:	f1ac 0310 	sub.w	r3, ip, #16
24014bf0:	f8cd b018 	str.w	fp, [sp, #24]
24014bf4:	4655      	mov	r5, sl
24014bf6:	9f02      	ldr	r7, [sp, #8]
24014bf8:	f04f 0e01 	mov.w	lr, #1
24014bfc:	f8dd b020 	ldr.w	fp, [sp, #32]
24014c00:	9305      	str	r3, [sp, #20]
24014c02:	eba5 040e 	sub.w	r4, r5, lr
24014c06:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
24014c0a:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
24014c0e:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
24014c12:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
24014c16:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 24014ef8 <arm_fir_interpolate_f32+0x3a0>
24014c1a:	f1b8 0f00 	cmp.w	r8, #0
24014c1e:	f000 8163 	beq.w	24014ee8 <arm_fir_interpolate_f32+0x390>
24014c22:	eef0 5a47 	vmov.f32	s11, s14
24014c26:	00a9      	lsls	r1, r5, #2
24014c28:	eef0 4a47 	vmov.f32	s9, s14
24014c2c:	4662      	mov	r2, ip
24014c2e:	eef0 6a47 	vmov.f32	s13, s14
24014c32:	4623      	mov	r3, r4
24014c34:	ed52 1a04 	vldr	s3, [r2, #-16]
24014c38:	3210      	adds	r2, #16
24014c3a:	edd3 7a00 	vldr	s15, [r3]
24014c3e:	440b      	add	r3, r1
24014c40:	ee27 6a82 	vmul.f32	s12, s15, s4
24014c44:	edd3 3a00 	vldr	s7, [r3]
24014c48:	ee27 4a83 	vmul.f32	s8, s15, s6
24014c4c:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
24014c50:	ee27 5aa2 	vmul.f32	s10, s15, s5
24014c54:	440b      	add	r3, r1
24014c56:	ee61 7aa7 	vmul.f32	s15, s3, s15
24014c5a:	ee76 6a26 	vadd.f32	s13, s12, s13
24014c5e:	ed93 6a00 	vldr	s12, [r3]
24014c62:	ee63 0a83 	vmul.f32	s1, s7, s6
24014c66:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
24014c6a:	ee75 5a25 	vadd.f32	s11, s10, s11
24014c6e:	440b      	add	r3, r1
24014c70:	ee21 1aa3 	vmul.f32	s2, s3, s7
24014c74:	ee74 4a24 	vadd.f32	s9, s8, s9
24014c78:	ed93 5a00 	vldr	s10, [r3]
24014c7c:	ee23 4aa2 	vmul.f32	s8, s7, s5
24014c80:	440b      	add	r3, r1
24014c82:	ee37 7a87 	vadd.f32	s14, s15, s14
24014c86:	ee63 3a82 	vmul.f32	s7, s7, s4
24014c8a:	ee74 4a24 	vadd.f32	s9, s8, s9
24014c8e:	ee70 0aa6 	vadd.f32	s1, s1, s13
24014c92:	ee21 4a86 	vmul.f32	s8, s3, s12
24014c96:	ee66 6a22 	vmul.f32	s13, s12, s5
24014c9a:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
24014c9e:	ee31 1a25 	vadd.f32	s2, s2, s11
24014ca2:	4296      	cmp	r6, r2
24014ca4:	ee73 7a87 	vadd.f32	s15, s7, s14
24014ca8:	ee62 5a06 	vmul.f32	s11, s4, s12
24014cac:	ee26 7a03 	vmul.f32	s14, s12, s6
24014cb0:	ee61 1a85 	vmul.f32	s3, s3, s10
24014cb4:	ee34 4a24 	vadd.f32	s8, s8, s9
24014cb8:	ee35 6a81 	vadd.f32	s12, s11, s2
24014cbc:	ee62 4a05 	vmul.f32	s9, s4, s10
24014cc0:	ee63 5a05 	vmul.f32	s11, s6, s10
24014cc4:	ee76 6aa0 	vadd.f32	s13, s13, s1
24014cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
24014ccc:	ee25 5a22 	vmul.f32	s10, s10, s5
24014cd0:	ee71 6aa6 	vadd.f32	s13, s3, s13
24014cd4:	ee74 4a84 	vadd.f32	s9, s9, s8
24014cd8:	ee75 5a86 	vadd.f32	s11, s11, s12
24014cdc:	ee35 7a07 	vadd.f32	s14, s10, s14
24014ce0:	d1a8      	bne.n	24014c34 <arm_fir_interpolate_f32+0xdc>
24014ce2:	fb08 f305 	mul.w	r3, r8, r5
24014ce6:	9a01      	ldr	r2, [sp, #4]
24014ce8:	eb04 1403 	add.w	r4, r4, r3, lsl #4
24014cec:	f1b9 0f00 	cmp.w	r9, #0
24014cf0:	d01e      	beq.n	24014d30 <arm_fir_interpolate_f32+0x1d8>
24014cf2:	00ad      	lsls	r5, r5, #2
24014cf4:	464b      	mov	r3, r9
24014cf6:	ed94 6a00 	vldr	s12, [r4]
24014cfa:	3b01      	subs	r3, #1
24014cfc:	ecf2 7a01 	vldmia	r2!, {s15}
24014d00:	442c      	add	r4, r5
24014d02:	ee66 3a02 	vmul.f32	s7, s12, s4
24014d06:	ee26 4a03 	vmul.f32	s8, s12, s6
24014d0a:	ee26 5a22 	vmul.f32	s10, s12, s5
24014d0e:	eeb0 2a43 	vmov.f32	s4, s6
24014d12:	eeb0 3a62 	vmov.f32	s6, s5
24014d16:	eef0 2a67 	vmov.f32	s5, s15
24014d1a:	ee67 7a86 	vmul.f32	s15, s15, s12
24014d1e:	ee76 6aa3 	vadd.f32	s13, s13, s7
24014d22:	ee74 4a84 	vadd.f32	s9, s9, s8
24014d26:	ee75 5a85 	vadd.f32	s11, s11, s10
24014d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
24014d2e:	d1e2      	bne.n	24014cf6 <arm_fir_interpolate_f32+0x19e>
24014d30:	edc7 6a00 	vstr	s13, [r7]
24014d34:	45f2      	cmp	sl, lr
24014d36:	7803      	ldrb	r3, [r0, #0]
24014d38:	f10e 0201 	add.w	r2, lr, #1
24014d3c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24014d40:	edc3 4a00 	vstr	s9, [r3]
24014d44:	7803      	ldrb	r3, [r0, #0]
24014d46:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
24014d4a:	edc3 5a00 	vstr	s11, [r3]
24014d4e:	7803      	ldrb	r3, [r0, #0]
24014d50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014d54:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24014d58:	f107 0704 	add.w	r7, r7, #4
24014d5c:	ed83 7a00 	vstr	s14, [r3]
24014d60:	d002      	beq.n	24014d68 <arm_fir_interpolate_f32+0x210>
24014d62:	4696      	mov	lr, r2
24014d64:	7805      	ldrb	r5, [r0, #0]
24014d66:	e74c      	b.n	24014c02 <arm_fir_interpolate_f32+0xaa>
24014d68:	9b02      	ldr	r3, [sp, #8]
24014d6a:	f8dd b018 	ldr.w	fp, [sp, #24]
24014d6e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24014d72:	9302      	str	r3, [sp, #8]
24014d74:	7803      	ldrb	r3, [r0, #0]
24014d76:	9a03      	ldr	r2, [sp, #12]
24014d78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014d7c:	f10b 0b10 	add.w	fp, fp, #16
24014d80:	f10c 0c10 	add.w	ip, ip, #16
24014d84:	3210      	adds	r2, #16
24014d86:	3610      	adds	r6, #16
24014d88:	9203      	str	r2, [sp, #12]
24014d8a:	9a01      	ldr	r2, [sp, #4]
24014d8c:	3210      	adds	r2, #16
24014d8e:	9201      	str	r2, [sp, #4]
24014d90:	9a02      	ldr	r2, [sp, #8]
24014d92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24014d96:	9302      	str	r3, [sp, #8]
24014d98:	9b04      	ldr	r3, [sp, #16]
24014d9a:	3b01      	subs	r3, #1
24014d9c:	9304      	str	r3, [sp, #16]
24014d9e:	f47f af0d 	bne.w	24014bbc <arm_fir_interpolate_f32+0x64>
24014da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24014da4:	9a07      	ldr	r2, [sp, #28]
24014da6:	011b      	lsls	r3, r3, #4
24014da8:	f8dd b020 	ldr.w	fp, [sp, #32]
24014dac:	441a      	add	r2, r3
24014dae:	9207      	str	r2, [sp, #28]
24014db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24014db2:	441a      	add	r2, r3
24014db4:	920a      	str	r2, [sp, #40]	; 0x28
24014db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014db8:	441a      	add	r2, r3
24014dba:	9209      	str	r2, [sp, #36]	; 0x24
24014dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
24014dbe:	f013 0303 	ands.w	r3, r3, #3
24014dc2:	f000 80b1 	beq.w	24014f28 <arm_fir_interpolate_f32+0x3d0>
24014dc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24014dc8:	009d      	lsls	r5, r3, #2
24014dca:	990a      	ldr	r1, [sp, #40]	; 0x28
24014dcc:	0894      	lsrs	r4, r2, #2
24014dce:	f002 0a03 	and.w	sl, r2, #3
24014dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014dd4:	0123      	lsls	r3, r4, #4
24014dd6:	9106      	str	r1, [sp, #24]
24014dd8:	f102 0110 	add.w	r1, r2, #16
24014ddc:	46a1      	mov	r9, r4
24014dde:	f103 0e10 	add.w	lr, r3, #16
24014de2:	18d3      	adds	r3, r2, r3
24014de4:	9101      	str	r1, [sp, #4]
24014de6:	9907      	ldr	r1, [sp, #28]
24014de8:	4496      	add	lr, r2
24014dea:	950c      	str	r5, [sp, #48]	; 0x30
24014dec:	4429      	add	r1, r5
24014dee:	9303      	str	r3, [sp, #12]
24014df0:	f8cd b014 	str.w	fp, [sp, #20]
24014df4:	910a      	str	r1, [sp, #40]	; 0x28
24014df6:	9004      	str	r0, [sp, #16]
24014df8:	9a07      	ldr	r2, [sp, #28]
24014dfa:	f852 3b04 	ldr.w	r3, [r2], #4
24014dfe:	9207      	str	r2, [sp, #28]
24014e00:	9a01      	ldr	r2, [sp, #4]
24014e02:	3a10      	subs	r2, #16
24014e04:	9208      	str	r2, [sp, #32]
24014e06:	9a06      	ldr	r2, [sp, #24]
24014e08:	f842 3b04 	str.w	r3, [r2], #4
24014e0c:	9b04      	ldr	r3, [sp, #16]
24014e0e:	9206      	str	r2, [sp, #24]
24014e10:	f893 b000 	ldrb.w	fp, [r3]
24014e14:	f1bb 0f00 	cmp.w	fp, #0
24014e18:	d074      	beq.n	24014f04 <arm_fir_interpolate_f32+0x3ac>
24014e1a:	465f      	mov	r7, fp
24014e1c:	f04f 0c01 	mov.w	ip, #1
24014e20:	9b05      	ldr	r3, [sp, #20]
24014e22:	eba7 000c 	sub.w	r0, r7, ip
24014e26:	f8dd 8008 	ldr.w	r8, [sp, #8]
24014e2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24014e2e:	f1b9 0f00 	cmp.w	r9, #0
24014e32:	d055      	beq.n	24014ee0 <arm_fir_interpolate_f32+0x388>
24014e34:	b23a      	sxth	r2, r7
24014e36:	9b01      	ldr	r3, [sp, #4]
24014e38:	4601      	mov	r1, r0
24014e3a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 24014ef8 <arm_fir_interpolate_f32+0x3a0>
24014e3e:	0094      	lsls	r4, r2, #2
24014e40:	0115      	lsls	r5, r2, #4
24014e42:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
24014e46:	ed13 7a04 	vldr	s14, [r3, #-16]
24014e4a:	190e      	adds	r6, r1, r4
24014e4c:	edd1 6a00 	vldr	s13, [r1]
24014e50:	3310      	adds	r3, #16
24014e52:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
24014e56:	4429      	add	r1, r5
24014e58:	ee27 7a26 	vmul.f32	s14, s14, s13
24014e5c:	ed96 6a00 	vldr	s12, [r6]
24014e60:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24014e64:	1916      	adds	r6, r2, r4
24014e66:	ee26 6a25 	vmul.f32	s12, s12, s11
24014e6a:	ed92 5a00 	vldr	s10, [r2]
24014e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
24014e72:	edd6 5a00 	vldr	s11, [r6]
24014e76:	ee26 7a85 	vmul.f32	s14, s13, s10
24014e7a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
24014e7e:	459e      	cmp	lr, r3
24014e80:	442a      	add	r2, r5
24014e82:	ee76 7a27 	vadd.f32	s15, s12, s15
24014e86:	ee65 6aa6 	vmul.f32	s13, s11, s13
24014e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
24014e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24014e92:	d1d8      	bne.n	24014e46 <arm_fir_interpolate_f32+0x2ee>
24014e94:	fb09 f404 	mul.w	r4, r9, r4
24014e98:	9a03      	ldr	r2, [sp, #12]
24014e9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
24014e9e:	f1ba 0f00 	cmp.w	sl, #0
24014ea2:	d00c      	beq.n	24014ebe <arm_fir_interpolate_f32+0x366>
24014ea4:	00bf      	lsls	r7, r7, #2
24014ea6:	4653      	mov	r3, sl
24014ea8:	edd0 6a00 	vldr	s13, [r0]
24014eac:	3b01      	subs	r3, #1
24014eae:	ecb2 7a01 	vldmia	r2!, {s14}
24014eb2:	4438      	add	r0, r7
24014eb4:	ee27 7a26 	vmul.f32	s14, s14, s13
24014eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
24014ebc:	d1f4      	bne.n	24014ea8 <arm_fir_interpolate_f32+0x350>
24014ebe:	45e3      	cmp	fp, ip
24014ec0:	ece8 7a01 	vstmia	r8!, {s15}
24014ec4:	f10c 0301 	add.w	r3, ip, #1
24014ec8:	d018      	beq.n	24014efc <arm_fir_interpolate_f32+0x3a4>
24014eca:	469c      	mov	ip, r3
24014ecc:	9b04      	ldr	r3, [sp, #16]
24014ece:	781f      	ldrb	r7, [r3, #0]
24014ed0:	9b05      	ldr	r3, [sp, #20]
24014ed2:	eba7 000c 	sub.w	r0, r7, ip
24014ed6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24014eda:	f1b9 0f00 	cmp.w	r9, #0
24014ede:	d1a9      	bne.n	24014e34 <arm_fir_interpolate_f32+0x2dc>
24014ee0:	9a08      	ldr	r2, [sp, #32]
24014ee2:	eddf 7a05 	vldr	s15, [pc, #20]	; 24014ef8 <arm_fir_interpolate_f32+0x3a0>
24014ee6:	e7da      	b.n	24014e9e <arm_fir_interpolate_f32+0x346>
24014ee8:	9a05      	ldr	r2, [sp, #20]
24014eea:	eef0 5a47 	vmov.f32	s11, s14
24014eee:	eef0 4a47 	vmov.f32	s9, s14
24014ef2:	eef0 6a47 	vmov.f32	s13, s14
24014ef6:	e6f9      	b.n	24014cec <arm_fir_interpolate_f32+0x194>
24014ef8:	00000000 	.word	0x00000000
24014efc:	9b02      	ldr	r3, [sp, #8]
24014efe:	eb03 038b 	add.w	r3, r3, fp, lsl #2
24014f02:	9302      	str	r3, [sp, #8]
24014f04:	9b03      	ldr	r3, [sp, #12]
24014f06:	f10e 0e04 	add.w	lr, lr, #4
24014f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24014f0c:	3304      	adds	r3, #4
24014f0e:	9303      	str	r3, [sp, #12]
24014f10:	9b01      	ldr	r3, [sp, #4]
24014f12:	3304      	adds	r3, #4
24014f14:	9301      	str	r3, [sp, #4]
24014f16:	9b07      	ldr	r3, [sp, #28]
24014f18:	4293      	cmp	r3, r2
24014f1a:	f47f af6d 	bne.w	24014df8 <arm_fir_interpolate_f32+0x2a0>
24014f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
24014f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
24014f22:	9804      	ldr	r0, [sp, #16]
24014f24:	4413      	add	r3, r2
24014f26:	9309      	str	r3, [sp, #36]	; 0x24
24014f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24014f2a:	6885      	ldr	r5, [r0, #8]
24014f2c:	1e5c      	subs	r4, r3, #1
24014f2e:	08a6      	lsrs	r6, r4, #2
24014f30:	d020      	beq.n	24014f74 <arm_fir_interpolate_f32+0x41c>
24014f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
24014f34:	4631      	mov	r1, r6
24014f36:	f103 0210 	add.w	r2, r3, #16
24014f3a:	f105 0310 	add.w	r3, r5, #16
24014f3e:	f852 0c10 	ldr.w	r0, [r2, #-16]
24014f42:	3901      	subs	r1, #1
24014f44:	f102 0210 	add.w	r2, r2, #16
24014f48:	f103 0310 	add.w	r3, r3, #16
24014f4c:	f843 0c20 	str.w	r0, [r3, #-32]
24014f50:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24014f54:	f843 0c1c 	str.w	r0, [r3, #-28]
24014f58:	f852 0c18 	ldr.w	r0, [r2, #-24]
24014f5c:	f843 0c18 	str.w	r0, [r3, #-24]
24014f60:	f852 0c14 	ldr.w	r0, [r2, #-20]
24014f64:	f843 0c14 	str.w	r0, [r3, #-20]
24014f68:	d1e9      	bne.n	24014f3e <arm_fir_interpolate_f32+0x3e6>
24014f6a:	0133      	lsls	r3, r6, #4
24014f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014f6e:	441d      	add	r5, r3
24014f70:	441a      	add	r2, r3
24014f72:	9209      	str	r2, [sp, #36]	; 0x24
24014f74:	f014 0403 	ands.w	r4, r4, #3
24014f78:	d00a      	beq.n	24014f90 <arm_fir_interpolate_f32+0x438>
24014f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014f7c:	3c01      	subs	r4, #1
24014f7e:	6813      	ldr	r3, [r2, #0]
24014f80:	602b      	str	r3, [r5, #0]
24014f82:	d005      	beq.n	24014f90 <arm_fir_interpolate_f32+0x438>
24014f84:	6853      	ldr	r3, [r2, #4]
24014f86:	2c01      	cmp	r4, #1
24014f88:	606b      	str	r3, [r5, #4]
24014f8a:	d001      	beq.n	24014f90 <arm_fir_interpolate_f32+0x438>
24014f8c:	6893      	ldr	r3, [r2, #8]
24014f8e:	60ab      	str	r3, [r5, #8]
24014f90:	b00f      	add	sp, #60	; 0x3c
24014f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014f96:	bf00      	nop

24014f98 <arm_fir_decimate_init_f32>:
24014f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24014f9c:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
24014fa0:	fbbc f4f2 	udiv	r4, ip, r2
24014fa4:	fb02 c414 	mls	r4, r2, r4, ip
24014fa8:	b99c      	cbnz	r4, 24014fd2 <arm_fir_decimate_init_f32+0x3a>
24014faa:	460f      	mov	r7, r1
24014fac:	4616      	mov	r6, r2
24014fae:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
24014fb2:	4605      	mov	r5, r0
24014fb4:	443a      	add	r2, r7
24014fb6:	8069      	strh	r1, [r5, #2]
24014fb8:	6043      	str	r3, [r0, #4]
24014fba:	4621      	mov	r1, r4
24014fbc:	4462      	add	r2, ip
24014fbe:	4640      	mov	r0, r8
24014fc0:	0092      	lsls	r2, r2, #2
24014fc2:	f000 fa59 	bl	24015478 <memset>
24014fc6:	4620      	mov	r0, r4
24014fc8:	f8c5 8008 	str.w	r8, [r5, #8]
24014fcc:	702e      	strb	r6, [r5, #0]
24014fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24014fd2:	f06f 0001 	mvn.w	r0, #1
24014fd6:	e7fa      	b.n	24014fce <arm_fir_decimate_init_f32+0x36>

24014fd8 <arm_fir_decimate_f32>:
24014fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24014fdc:	4605      	mov	r5, r0
24014fde:	b08d      	sub	sp, #52	; 0x34
24014fe0:	4694      	mov	ip, r2
24014fe2:	782c      	ldrb	r4, [r5, #0]
24014fe4:	886f      	ldrh	r7, [r5, #2]
24014fe6:	9001      	str	r0, [sp, #4]
24014fe8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
24014fec:	68ae      	ldr	r6, [r5, #8]
24014fee:	4438      	add	r0, r7
24014ff0:	686d      	ldr	r5, [r5, #4]
24014ff2:	9207      	str	r2, [sp, #28]
24014ff4:	970a      	str	r7, [sp, #40]	; 0x28
24014ff6:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
24014ffa:	9508      	str	r5, [sp, #32]
24014ffc:	fbb3 f3f4 	udiv	r3, r3, r4
24015000:	930b      	str	r3, [sp, #44]	; 0x2c
24015002:	089b      	lsrs	r3, r3, #2
24015004:	9309      	str	r3, [sp, #36]	; 0x24
24015006:	f000 80ef 	beq.w	240151e8 <arm_fir_decimate_f32+0x210>
2401500a:	08ba      	lsrs	r2, r7, #2
2401500c:	462b      	mov	r3, r5
2401500e:	3510      	adds	r5, #16
24015010:	f007 0703 	and.w	r7, r7, #3
24015014:	9205      	str	r2, [sp, #20]
24015016:	0112      	lsls	r2, r2, #4
24015018:	9809      	ldr	r0, [sp, #36]	; 0x24
2401501a:	f10c 0910 	add.w	r9, ip, #16
2401501e:	4413      	add	r3, r2
24015020:	9100      	str	r1, [sp, #0]
24015022:	eb05 0e02 	add.w	lr, r5, r2
24015026:	4611      	mov	r1, r2
24015028:	9503      	str	r5, [sp, #12]
2401502a:	9704      	str	r7, [sp, #16]
2401502c:	9002      	str	r0, [sp, #8]
2401502e:	9306      	str	r3, [sp, #24]
24015030:	00a4      	lsls	r4, r4, #2
24015032:	4658      	mov	r0, fp
24015034:	9a00      	ldr	r2, [sp, #0]
24015036:	4623      	mov	r3, r4
24015038:	f852 5b04 	ldr.w	r5, [r2], #4
2401503c:	3b01      	subs	r3, #1
2401503e:	f840 5b04 	str.w	r5, [r0], #4
24015042:	d1f9      	bne.n	24015038 <arm_fir_decimate_f32+0x60>
24015044:	9b01      	ldr	r3, [sp, #4]
24015046:	00a4      	lsls	r4, r4, #2
24015048:	eddf 0abe 	vldr	s1, [pc, #760]	; 24015344 <arm_fir_decimate_f32+0x36c>
2401504c:	f893 8000 	ldrb.w	r8, [r3]
24015050:	44a3      	add	fp, r4
24015052:	9b00      	ldr	r3, [sp, #0]
24015054:	ea4f 0888 	mov.w	r8, r8, lsl #2
24015058:	4423      	add	r3, r4
2401505a:	eb06 0708 	add.w	r7, r6, r8
2401505e:	9300      	str	r3, [sp, #0]
24015060:	eb07 0c08 	add.w	ip, r7, r8
24015064:	9b05      	ldr	r3, [sp, #20]
24015066:	eb0c 0a08 	add.w	sl, ip, r8
2401506a:	2b00      	cmp	r3, #0
2401506c:	f000 815c 	beq.w	24015328 <arm_fir_decimate_f32+0x350>
24015070:	eef0 4a60 	vmov.f32	s9, s1
24015074:	9b03      	ldr	r3, [sp, #12]
24015076:	eef0 7a60 	vmov.f32	s15, s1
2401507a:	f106 0510 	add.w	r5, r6, #16
2401507e:	eeb0 7a60 	vmov.f32	s14, s1
24015082:	f107 0410 	add.w	r4, r7, #16
24015086:	f10c 0010 	add.w	r0, ip, #16
2401508a:	f10a 0210 	add.w	r2, sl, #16
2401508e:	ed53 5a04 	vldr	s11, [r3, #-16]
24015092:	3310      	adds	r3, #16
24015094:	ed12 5a04 	vldr	s10, [r2, #-16]
24015098:	3510      	adds	r5, #16
2401509a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
2401509e:	3410      	adds	r4, #16
240150a0:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
240150a4:	3010      	adds	r0, #16
240150a6:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
240150aa:	ee65 6aa6 	vmul.f32	s13, s11, s13
240150ae:	ee25 1a81 	vmul.f32	s2, s11, s2
240150b2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
240150b6:	ee65 3aa3 	vmul.f32	s7, s11, s7
240150ba:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
240150be:	ee65 5a85 	vmul.f32	s11, s11, s10
240150c2:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
240150c6:	ed12 5a03 	vldr	s10, [r2, #-12]
240150ca:	ee36 7a87 	vadd.f32	s14, s13, s14
240150ce:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
240150d2:	ee73 1aa4 	vadd.f32	s3, s7, s9
240150d6:	ee26 2a02 	vmul.f32	s4, s12, s4
240150da:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
240150de:	ee31 1a27 	vadd.f32	s2, s2, s15
240150e2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
240150e6:	ee66 7a22 	vmul.f32	s15, s12, s5
240150ea:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
240150ee:	ee26 3a03 	vmul.f32	s6, s12, s6
240150f2:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
240150f6:	ee75 5aa0 	vadd.f32	s11, s11, s1
240150fa:	ed52 0a02 	vldr	s1, [r2, #-8]
240150fe:	ee26 6a05 	vmul.f32	s12, s12, s10
24015102:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
24015106:	ee72 2a07 	vadd.f32	s5, s4, s14
2401510a:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
2401510e:	ee77 7a81 	vadd.f32	s15, s15, s2
24015112:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
24015116:	ee33 3a21 	vadd.f32	s6, s6, s3
2401511a:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
2401511e:	ee66 3aa3 	vmul.f32	s7, s13, s7
24015122:	ed52 1a01 	vldr	s3, [r2, #-4]
24015126:	ee26 4a84 	vmul.f32	s8, s13, s8
2401512a:	459e      	cmp	lr, r3
2401512c:	ee66 4aa4 	vmul.f32	s9, s13, s9
24015130:	f102 0210 	add.w	r2, r2, #16
24015134:	ee66 6aa0 	vmul.f32	s13, s13, s1
24015138:	ee36 6a25 	vadd.f32	s12, s12, s11
2401513c:	ee25 7a07 	vmul.f32	s14, s10, s14
24015140:	ee34 4a27 	vadd.f32	s8, s8, s15
24015144:	ee74 4a83 	vadd.f32	s9, s9, s6
24015148:	ee65 7a01 	vmul.f32	s15, s10, s2
2401514c:	ee25 3a02 	vmul.f32	s6, s10, s4
24015150:	ee73 3aa2 	vadd.f32	s7, s7, s5
24015154:	ee76 6a86 	vadd.f32	s13, s13, s12
24015158:	ee25 5a21 	vmul.f32	s10, s10, s3
2401515c:	ee37 7a23 	vadd.f32	s14, s14, s7
24015160:	ee77 7a84 	vadd.f32	s15, s15, s8
24015164:	ee73 4a24 	vadd.f32	s9, s6, s9
24015168:	ee75 0a26 	vadd.f32	s1, s10, s13
2401516c:	d18f      	bne.n	2401508e <arm_fir_decimate_f32+0xb6>
2401516e:	440e      	add	r6, r1
24015170:	440f      	add	r7, r1
24015172:	448c      	add	ip, r1
24015174:	eb0a 0001 	add.w	r0, sl, r1
24015178:	9a06      	ldr	r2, [sp, #24]
2401517a:	9b04      	ldr	r3, [sp, #16]
2401517c:	b1db      	cbz	r3, 240151b6 <arm_fir_decimate_f32+0x1de>
2401517e:	ecb2 5a01 	vldmia	r2!, {s10}
24015182:	3b01      	subs	r3, #1
24015184:	ecf6 2a01 	vldmia	r6!, {s5}
24015188:	ecf7 3a01 	vldmia	r7!, {s7}
2401518c:	ecbc 4a01 	vldmia	ip!, {s8}
24015190:	ee65 2a22 	vmul.f32	s5, s10, s5
24015194:	ecf0 6a01 	vldmia	r0!, {s13}
24015198:	ee65 3a23 	vmul.f32	s7, s10, s7
2401519c:	ee25 4a04 	vmul.f32	s8, s10, s8
240151a0:	ee25 5a26 	vmul.f32	s10, s10, s13
240151a4:	ee37 7a22 	vadd.f32	s14, s14, s5
240151a8:	ee77 7aa3 	vadd.f32	s15, s15, s7
240151ac:	ee74 4a84 	vadd.f32	s9, s9, s8
240151b0:	ee70 0a85 	vadd.f32	s1, s1, s10
240151b4:	d1e3      	bne.n	2401517e <arm_fir_decimate_f32+0x1a6>
240151b6:	9b02      	ldr	r3, [sp, #8]
240151b8:	eb0a 0608 	add.w	r6, sl, r8
240151bc:	ed09 7a04 	vstr	s14, [r9, #-16]
240151c0:	f109 0910 	add.w	r9, r9, #16
240151c4:	3b01      	subs	r3, #1
240151c6:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
240151ca:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
240151ce:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
240151d2:	9302      	str	r3, [sp, #8]
240151d4:	d002      	beq.n	240151dc <arm_fir_decimate_f32+0x204>
240151d6:	9b01      	ldr	r3, [sp, #4]
240151d8:	781c      	ldrb	r4, [r3, #0]
240151da:	e729      	b.n	24015030 <arm_fir_decimate_f32+0x58>
240151dc:	9b07      	ldr	r3, [sp, #28]
240151de:	9a09      	ldr	r2, [sp, #36]	; 0x24
240151e0:	9900      	ldr	r1, [sp, #0]
240151e2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
240151e6:	9307      	str	r3, [sp, #28]
240151e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
240151ea:	f013 0803 	ands.w	r8, r3, #3
240151ee:	d067      	beq.n	240152c0 <arm_fir_decimate_f32+0x2e8>
240151f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240151f2:	9808      	ldr	r0, [sp, #32]
240151f4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
240151f8:	9d07      	ldr	r5, [sp, #28]
240151fa:	4602      	mov	r2, r0
240151fc:	f003 0703 	and.w	r7, r3, #3
24015200:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
24015204:	f8cd e000 	str.w	lr, [sp]
24015208:	3210      	adds	r2, #16
2401520a:	eb05 0888 	add.w	r8, r5, r8, lsl #2
2401520e:	eb00 090c 	add.w	r9, r0, ip
24015212:	f8dd e004 	ldr.w	lr, [sp, #4]
24015216:	eb02 040c 	add.w	r4, r2, ip
2401521a:	46aa      	mov	sl, r5
2401521c:	9203      	str	r2, [sp, #12]
2401521e:	f89e 5000 	ldrb.w	r5, [lr]
24015222:	4658      	mov	r0, fp
24015224:	460a      	mov	r2, r1
24015226:	462b      	mov	r3, r5
24015228:	ecf2 7a01 	vldmia	r2!, {s15}
2401522c:	3b01      	subs	r3, #1
2401522e:	ece0 7a01 	vstmia	r0!, {s15}
24015232:	d1f9      	bne.n	24015228 <arm_fir_decimate_f32+0x250>
24015234:	00ad      	lsls	r5, r5, #2
24015236:	9b00      	ldr	r3, [sp, #0]
24015238:	4429      	add	r1, r5
2401523a:	44ab      	add	fp, r5
2401523c:	2b00      	cmp	r3, #0
2401523e:	d07c      	beq.n	2401533a <arm_fir_decimate_f32+0x362>
24015240:	9b03      	ldr	r3, [sp, #12]
24015242:	f106 0210 	add.w	r2, r6, #16
24015246:	eddf 7a3f 	vldr	s15, [pc, #252]	; 24015344 <arm_fir_decimate_f32+0x36c>
2401524a:	ed13 7a04 	vldr	s14, [r3, #-16]
2401524e:	3310      	adds	r3, #16
24015250:	ed52 6a04 	vldr	s13, [r2, #-16]
24015254:	3210      	adds	r2, #16
24015256:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
2401525a:	ee27 7a26 	vmul.f32	s14, s14, s13
2401525e:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
24015262:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24015266:	ee26 6a25 	vmul.f32	s12, s12, s11
2401526a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
2401526e:	ee77 7a27 	vadd.f32	s15, s14, s15
24015272:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
24015276:	ee26 7a85 	vmul.f32	s14, s13, s10
2401527a:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
2401527e:	429c      	cmp	r4, r3
24015280:	ee76 7a27 	vadd.f32	s15, s12, s15
24015284:	ee65 6aa6 	vmul.f32	s13, s11, s13
24015288:	ee77 7a27 	vadd.f32	s15, s14, s15
2401528c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015290:	d1db      	bne.n	2401524a <arm_fir_decimate_f32+0x272>
24015292:	eb06 000c 	add.w	r0, r6, ip
24015296:	464a      	mov	r2, r9
24015298:	b157      	cbz	r7, 240152b0 <arm_fir_decimate_f32+0x2d8>
2401529a:	463b      	mov	r3, r7
2401529c:	ecb2 7a01 	vldmia	r2!, {s14}
240152a0:	3b01      	subs	r3, #1
240152a2:	ecf0 6a01 	vldmia	r0!, {s13}
240152a6:	ee27 7a26 	vmul.f32	s14, s14, s13
240152aa:	ee77 7a87 	vadd.f32	s15, s15, s14
240152ae:	d1f5      	bne.n	2401529c <arm_fir_decimate_f32+0x2c4>
240152b0:	f89e 3000 	ldrb.w	r3, [lr]
240152b4:	ecea 7a01 	vstmia	sl!, {s15}
240152b8:	45c2      	cmp	sl, r8
240152ba:	eb06 0683 	add.w	r6, r6, r3, lsl #2
240152be:	d1ae      	bne.n	2401521e <arm_fir_decimate_f32+0x246>
240152c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240152c2:	1e5c      	subs	r4, r3, #1
240152c4:	9b01      	ldr	r3, [sp, #4]
240152c6:	08a5      	lsrs	r5, r4, #2
240152c8:	689f      	ldr	r7, [r3, #8]
240152ca:	d01d      	beq.n	24015308 <arm_fir_decimate_f32+0x330>
240152cc:	f106 0210 	add.w	r2, r6, #16
240152d0:	f107 0310 	add.w	r3, r7, #16
240152d4:	4629      	mov	r1, r5
240152d6:	f852 0c10 	ldr.w	r0, [r2, #-16]
240152da:	3901      	subs	r1, #1
240152dc:	f102 0210 	add.w	r2, r2, #16
240152e0:	f103 0310 	add.w	r3, r3, #16
240152e4:	f843 0c20 	str.w	r0, [r3, #-32]
240152e8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
240152ec:	f843 0c1c 	str.w	r0, [r3, #-28]
240152f0:	f852 0c18 	ldr.w	r0, [r2, #-24]
240152f4:	f843 0c18 	str.w	r0, [r3, #-24]
240152f8:	f852 0c14 	ldr.w	r0, [r2, #-20]
240152fc:	f843 0c14 	str.w	r0, [r3, #-20]
24015300:	d1e9      	bne.n	240152d6 <arm_fir_decimate_f32+0x2fe>
24015302:	012d      	lsls	r5, r5, #4
24015304:	442e      	add	r6, r5
24015306:	442f      	add	r7, r5
24015308:	f014 0403 	ands.w	r4, r4, #3
2401530c:	d009      	beq.n	24015322 <arm_fir_decimate_f32+0x34a>
2401530e:	6833      	ldr	r3, [r6, #0]
24015310:	3c01      	subs	r4, #1
24015312:	603b      	str	r3, [r7, #0]
24015314:	d005      	beq.n	24015322 <arm_fir_decimate_f32+0x34a>
24015316:	6873      	ldr	r3, [r6, #4]
24015318:	2c01      	cmp	r4, #1
2401531a:	607b      	str	r3, [r7, #4]
2401531c:	d001      	beq.n	24015322 <arm_fir_decimate_f32+0x34a>
2401531e:	68b3      	ldr	r3, [r6, #8]
24015320:	60bb      	str	r3, [r7, #8]
24015322:	b00d      	add	sp, #52	; 0x34
24015324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24015328:	4650      	mov	r0, sl
2401532a:	9a08      	ldr	r2, [sp, #32]
2401532c:	eef0 4a60 	vmov.f32	s9, s1
24015330:	eef0 7a60 	vmov.f32	s15, s1
24015334:	eeb0 7a60 	vmov.f32	s14, s1
24015338:	e71f      	b.n	2401517a <arm_fir_decimate_f32+0x1a2>
2401533a:	9a08      	ldr	r2, [sp, #32]
2401533c:	4630      	mov	r0, r6
2401533e:	eddf 7a01 	vldr	s15, [pc, #4]	; 24015344 <arm_fir_decimate_f32+0x36c>
24015342:	e7a9      	b.n	24015298 <arm_fir_decimate_f32+0x2c0>
24015344:	00000000 	.word	0x00000000

24015348 <arm_sin_f32>:
24015348:	eddf 7a1f 	vldr	s15, [pc, #124]	; 240153c8 <arm_sin_f32+0x80>
2401534c:	ee20 0a27 	vmul.f32	s0, s0, s15
24015350:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24015354:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24015358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401535c:	d504      	bpl.n	24015368 <arm_sin_f32+0x20>
2401535e:	ee17 3a90 	vmov	r3, s15
24015362:	3b01      	subs	r3, #1
24015364:	ee07 3a90 	vmov	s15, r3
24015368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401536c:	eddf 6a17 	vldr	s13, [pc, #92]	; 240153cc <arm_sin_f32+0x84>
24015370:	ee70 7a67 	vsub.f32	s15, s0, s15
24015374:	ee67 7aa6 	vmul.f32	s15, s15, s13
24015378:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2401537c:	ee17 3a10 	vmov	r3, s14
24015380:	b29b      	uxth	r3, r3
24015382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24015386:	d21a      	bcs.n	240153be <arm_sin_f32+0x76>
24015388:	ee07 3a10 	vmov	s14, r3
2401538c:	1c59      	adds	r1, r3, #1
2401538e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
24015392:	ee77 7ac0 	vsub.f32	s15, s15, s0
24015396:	4a0e      	ldr	r2, [pc, #56]	; (240153d0 <arm_sin_f32+0x88>)
24015398:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401539c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240153a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240153a4:	ee30 0a67 	vsub.f32	s0, s0, s15
240153a8:	edd3 6a00 	vldr	s13, [r3]
240153ac:	ed92 7a00 	vldr	s14, [r2]
240153b0:	ee20 0a26 	vmul.f32	s0, s0, s13
240153b4:	ee67 7a87 	vmul.f32	s15, s15, s14
240153b8:	ee30 0a27 	vadd.f32	s0, s0, s15
240153bc:	4770      	bx	lr
240153be:	ee77 7ae6 	vsub.f32	s15, s15, s13
240153c2:	2101      	movs	r1, #1
240153c4:	2300      	movs	r3, #0
240153c6:	e7e6      	b.n	24015396 <arm_sin_f32+0x4e>
240153c8:	3e22f983 	.word	0x3e22f983
240153cc:	44000000 	.word	0x44000000
240153d0:	2402bb4c 	.word	0x2402bb4c

240153d4 <__errno>:
240153d4:	4b01      	ldr	r3, [pc, #4]	; (240153dc <__errno+0x8>)
240153d6:	6818      	ldr	r0, [r3, #0]
240153d8:	4770      	bx	lr
240153da:	bf00      	nop
240153dc:	200006f4 	.word	0x200006f4

240153e0 <__libc_init_array>:
240153e0:	b570      	push	{r4, r5, r6, lr}
240153e2:	4d0d      	ldr	r5, [pc, #52]	; (24015418 <__libc_init_array+0x38>)
240153e4:	4c0d      	ldr	r4, [pc, #52]	; (2401541c <__libc_init_array+0x3c>)
240153e6:	1b64      	subs	r4, r4, r5
240153e8:	10a4      	asrs	r4, r4, #2
240153ea:	2600      	movs	r6, #0
240153ec:	42a6      	cmp	r6, r4
240153ee:	d109      	bne.n	24015404 <__libc_init_array+0x24>
240153f0:	4d0b      	ldr	r5, [pc, #44]	; (24015420 <__libc_init_array+0x40>)
240153f2:	4c0c      	ldr	r4, [pc, #48]	; (24015424 <__libc_init_array+0x44>)
240153f4:	f018 f944 	bl	2402d680 <_init>
240153f8:	1b64      	subs	r4, r4, r5
240153fa:	10a4      	asrs	r4, r4, #2
240153fc:	2600      	movs	r6, #0
240153fe:	42a6      	cmp	r6, r4
24015400:	d105      	bne.n	2401540e <__libc_init_array+0x2e>
24015402:	bd70      	pop	{r4, r5, r6, pc}
24015404:	f855 3b04 	ldr.w	r3, [r5], #4
24015408:	4798      	blx	r3
2401540a:	3601      	adds	r6, #1
2401540c:	e7ee      	b.n	240153ec <__libc_init_array+0xc>
2401540e:	f855 3b04 	ldr.w	r3, [r5], #4
24015412:	4798      	blx	r3
24015414:	3601      	adds	r6, #1
24015416:	e7f2      	b.n	240153fe <__libc_init_array+0x1e>
24015418:	2402d708 	.word	0x2402d708
2401541c:	2402d708 	.word	0x2402d708
24015420:	2402d708 	.word	0x2402d708
24015424:	2402d70c 	.word	0x2402d70c

24015428 <__itoa>:
24015428:	1e93      	subs	r3, r2, #2
2401542a:	2b22      	cmp	r3, #34	; 0x22
2401542c:	b510      	push	{r4, lr}
2401542e:	460c      	mov	r4, r1
24015430:	d904      	bls.n	2401543c <__itoa+0x14>
24015432:	2300      	movs	r3, #0
24015434:	700b      	strb	r3, [r1, #0]
24015436:	461c      	mov	r4, r3
24015438:	4620      	mov	r0, r4
2401543a:	bd10      	pop	{r4, pc}
2401543c:	2a0a      	cmp	r2, #10
2401543e:	d109      	bne.n	24015454 <__itoa+0x2c>
24015440:	2800      	cmp	r0, #0
24015442:	da07      	bge.n	24015454 <__itoa+0x2c>
24015444:	232d      	movs	r3, #45	; 0x2d
24015446:	700b      	strb	r3, [r1, #0]
24015448:	4240      	negs	r0, r0
2401544a:	2101      	movs	r1, #1
2401544c:	4421      	add	r1, r4
2401544e:	f000 f841 	bl	240154d4 <__utoa>
24015452:	e7f1      	b.n	24015438 <__itoa+0x10>
24015454:	2100      	movs	r1, #0
24015456:	e7f9      	b.n	2401544c <__itoa+0x24>

24015458 <itoa>:
24015458:	f7ff bfe6 	b.w	24015428 <__itoa>

2401545c <memcpy>:
2401545c:	440a      	add	r2, r1
2401545e:	4291      	cmp	r1, r2
24015460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24015464:	d100      	bne.n	24015468 <memcpy+0xc>
24015466:	4770      	bx	lr
24015468:	b510      	push	{r4, lr}
2401546a:	f811 4b01 	ldrb.w	r4, [r1], #1
2401546e:	f803 4f01 	strb.w	r4, [r3, #1]!
24015472:	4291      	cmp	r1, r2
24015474:	d1f9      	bne.n	2401546a <memcpy+0xe>
24015476:	bd10      	pop	{r4, pc}

24015478 <memset>:
24015478:	4402      	add	r2, r0
2401547a:	4603      	mov	r3, r0
2401547c:	4293      	cmp	r3, r2
2401547e:	d100      	bne.n	24015482 <memset+0xa>
24015480:	4770      	bx	lr
24015482:	f803 1b01 	strb.w	r1, [r3], #1
24015486:	e7f9      	b.n	2401547c <memset+0x4>

24015488 <frexpf>:
24015488:	ee10 3a10 	vmov	r3, s0
2401548c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24015490:	2100      	movs	r1, #0
24015492:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24015496:	6001      	str	r1, [r0, #0]
24015498:	da19      	bge.n	240154ce <frexpf+0x46>
2401549a:	b1c2      	cbz	r2, 240154ce <frexpf+0x46>
2401549c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
240154a0:	d10a      	bne.n	240154b8 <frexpf+0x30>
240154a2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 240154d0 <frexpf+0x48>
240154a6:	ee60 7a27 	vmul.f32	s15, s0, s15
240154aa:	f06f 0118 	mvn.w	r1, #24
240154ae:	ee17 3a90 	vmov	r3, s15
240154b2:	6001      	str	r1, [r0, #0]
240154b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240154b8:	6801      	ldr	r1, [r0, #0]
240154ba:	15d2      	asrs	r2, r2, #23
240154bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
240154c0:	3a7e      	subs	r2, #126	; 0x7e
240154c2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
240154c6:	440a      	add	r2, r1
240154c8:	ee00 3a10 	vmov	s0, r3
240154cc:	6002      	str	r2, [r0, #0]
240154ce:	4770      	bx	lr
240154d0:	4c000000 	.word	0x4c000000

240154d4 <__utoa>:
240154d4:	b5f0      	push	{r4, r5, r6, r7, lr}
240154d6:	4c1f      	ldr	r4, [pc, #124]	; (24015554 <__utoa+0x80>)
240154d8:	b08b      	sub	sp, #44	; 0x2c
240154da:	4605      	mov	r5, r0
240154dc:	460b      	mov	r3, r1
240154de:	466e      	mov	r6, sp
240154e0:	f104 0c20 	add.w	ip, r4, #32
240154e4:	6820      	ldr	r0, [r4, #0]
240154e6:	6861      	ldr	r1, [r4, #4]
240154e8:	4637      	mov	r7, r6
240154ea:	c703      	stmia	r7!, {r0, r1}
240154ec:	3408      	adds	r4, #8
240154ee:	4564      	cmp	r4, ip
240154f0:	463e      	mov	r6, r7
240154f2:	d1f7      	bne.n	240154e4 <__utoa+0x10>
240154f4:	7921      	ldrb	r1, [r4, #4]
240154f6:	7139      	strb	r1, [r7, #4]
240154f8:	1e91      	subs	r1, r2, #2
240154fa:	6820      	ldr	r0, [r4, #0]
240154fc:	6038      	str	r0, [r7, #0]
240154fe:	2922      	cmp	r1, #34	; 0x22
24015500:	f04f 0100 	mov.w	r1, #0
24015504:	d904      	bls.n	24015510 <__utoa+0x3c>
24015506:	7019      	strb	r1, [r3, #0]
24015508:	460b      	mov	r3, r1
2401550a:	4618      	mov	r0, r3
2401550c:	b00b      	add	sp, #44	; 0x2c
2401550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
24015510:	1e58      	subs	r0, r3, #1
24015512:	4684      	mov	ip, r0
24015514:	fbb5 f7f2 	udiv	r7, r5, r2
24015518:	fb02 5617 	mls	r6, r2, r7, r5
2401551c:	3628      	adds	r6, #40	; 0x28
2401551e:	446e      	add	r6, sp
24015520:	460c      	mov	r4, r1
24015522:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24015526:	f80c 6f01 	strb.w	r6, [ip, #1]!
2401552a:	462e      	mov	r6, r5
2401552c:	42b2      	cmp	r2, r6
2401552e:	f101 0101 	add.w	r1, r1, #1
24015532:	463d      	mov	r5, r7
24015534:	d9ee      	bls.n	24015514 <__utoa+0x40>
24015536:	2200      	movs	r2, #0
24015538:	545a      	strb	r2, [r3, r1]
2401553a:	1919      	adds	r1, r3, r4
2401553c:	1aa5      	subs	r5, r4, r2
2401553e:	42aa      	cmp	r2, r5
24015540:	dae3      	bge.n	2401550a <__utoa+0x36>
24015542:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24015546:	780e      	ldrb	r6, [r1, #0]
24015548:	7006      	strb	r6, [r0, #0]
2401554a:	3201      	adds	r2, #1
2401554c:	f801 5901 	strb.w	r5, [r1], #-1
24015550:	e7f4      	b.n	2401553c <__utoa+0x68>
24015552:	bf00      	nop
24015554:	2402c350 	.word	0x2402c350

24015558 <sinf_poly>:
24015558:	07cb      	lsls	r3, r1, #31
2401555a:	d412      	bmi.n	24015582 <sinf_poly+0x2a>
2401555c:	ee21 5b00 	vmul.f64	d5, d1, d0
24015560:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
24015564:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
24015568:	eea6 7b01 	vfma.f64	d7, d6, d1
2401556c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
24015570:	ee21 1b05 	vmul.f64	d1, d1, d5
24015574:	eea6 0b05 	vfma.f64	d0, d6, d5
24015578:	eea7 0b01 	vfma.f64	d0, d7, d1
2401557c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015580:	4770      	bx	lr
24015582:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
24015586:	ee21 5b01 	vmul.f64	d5, d1, d1
2401558a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
2401558e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
24015592:	eea1 7b06 	vfma.f64	d7, d1, d6
24015596:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
2401559a:	eea1 0b06 	vfma.f64	d0, d1, d6
2401559e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
240155a2:	ee21 1b05 	vmul.f64	d1, d1, d5
240155a6:	eea5 0b06 	vfma.f64	d0, d5, d6
240155aa:	e7e5      	b.n	24015578 <sinf_poly+0x20>
240155ac:	0000      	movs	r0, r0
	...

240155b0 <cosf>:
240155b0:	b538      	push	{r3, r4, r5, lr}
240155b2:	ee10 4a10 	vmov	r4, s0
240155b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
240155ba:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
240155be:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
240155c2:	d21f      	bcs.n	24015604 <cosf+0x54>
240155c4:	ee27 0b07 	vmul.f64	d0, d7, d7
240155c8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
240155cc:	f0c0 8088 	bcc.w	240156e0 <cosf+0x130>
240155d0:	ee20 4b00 	vmul.f64	d4, d0, d0
240155d4:	4b46      	ldr	r3, [pc, #280]	; (240156f0 <cosf+0x140>)
240155d6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
240155da:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
240155de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
240155e2:	eea0 6b05 	vfma.f64	d6, d0, d5
240155e6:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
240155ea:	eea0 7b05 	vfma.f64	d7, d0, d5
240155ee:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
240155f2:	ee20 0b04 	vmul.f64	d0, d0, d4
240155f6:	eea4 7b05 	vfma.f64	d7, d4, d5
240155fa:	eea6 7b00 	vfma.f64	d7, d6, d0
240155fe:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
24015602:	bd38      	pop	{r3, r4, r5, pc}
24015604:	f240 422e 	movw	r2, #1070	; 0x42e
24015608:	4293      	cmp	r3, r2
2401560a:	d82b      	bhi.n	24015664 <cosf+0xb4>
2401560c:	4b38      	ldr	r3, [pc, #224]	; (240156f0 <cosf+0x140>)
2401560e:	ed93 6b08 	vldr	d6, [r3, #32]
24015612:	ee27 6b06 	vmul.f64	d6, d7, d6
24015616:	eefd 6bc6 	vcvt.s32.f64	s13, d6
2401561a:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401561e:	ee16 1a90 	vmov	r1, s13
24015622:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
24015626:	1609      	asrs	r1, r1, #24
24015628:	ee06 1a90 	vmov	s13, r1
2401562c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
24015630:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
24015634:	f001 0203 	and.w	r2, r1, #3
24015638:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401563c:	eea5 7b46 	vfms.f64	d7, d5, d6
24015640:	eeb0 0b47 	vmov.f64	d0, d7
24015644:	ed92 7b00 	vldr	d7, [r2]
24015648:	ee20 1b00 	vmul.f64	d1, d0, d0
2401564c:	f011 0f02 	tst.w	r1, #2
24015650:	bf08      	it	eq
24015652:	4618      	moveq	r0, r3
24015654:	f081 0101 	eor.w	r1, r1, #1
24015658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401565c:	ee20 0b07 	vmul.f64	d0, d0, d7
24015660:	f7ff bf7a 	b.w	24015558 <sinf_poly>
24015664:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24015668:	d236      	bcs.n	240156d8 <cosf+0x128>
2401566a:	4a22      	ldr	r2, [pc, #136]	; (240156f4 <cosf+0x144>)
2401566c:	f3c4 6183 	ubfx	r1, r4, #26, #4
24015670:	eb02 0581 	add.w	r5, r2, r1, lsl #2
24015674:	f3c4 0316 	ubfx	r3, r4, #0, #23
24015678:	f3c4 50c2 	ubfx	r0, r4, #23, #3
2401567c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24015680:	4083      	lsls	r3, r0
24015682:	6a28      	ldr	r0, [r5, #32]
24015684:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
24015688:	fba3 1000 	umull	r1, r0, r3, r0
2401568c:	6929      	ldr	r1, [r5, #16]
2401568e:	435a      	muls	r2, r3
24015690:	fbe3 0201 	umlal	r0, r2, r3, r1
24015694:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
24015698:	0f8d      	lsrs	r5, r1, #30
2401569a:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
2401569e:	1a51      	subs	r1, r2, r1
240156a0:	f7ea ffb0 	bl	24000604 <__aeabi_l2d>
240156a4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
240156a8:	4b11      	ldr	r3, [pc, #68]	; (240156f0 <cosf+0x140>)
240156aa:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 240156e8 <cosf+0x138>
240156ae:	ec41 0b16 	vmov	d6, r0, r1
240156b2:	f004 0203 	and.w	r2, r4, #3
240156b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
240156ba:	f014 0f02 	tst.w	r4, #2
240156be:	f103 0070 	add.w	r0, r3, #112	; 0x70
240156c2:	ee26 7b07 	vmul.f64	d7, d6, d7
240156c6:	ed92 0b00 	vldr	d0, [r2]
240156ca:	ee27 1b07 	vmul.f64	d1, d7, d7
240156ce:	f085 0101 	eor.w	r1, r5, #1
240156d2:	bf08      	it	eq
240156d4:	4618      	moveq	r0, r3
240156d6:	e7bf      	b.n	24015658 <cosf+0xa8>
240156d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240156dc:	f000 b964 	b.w	240159a8 <__math_invalidf>
240156e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240156e4:	e78d      	b.n	24015602 <cosf+0x52>
240156e6:	bf00      	nop
240156e8:	54442d18 	.word	0x54442d18
240156ec:	3c1921fb 	.word	0x3c1921fb
240156f0:	2402cfe0 	.word	0x2402cfe0
240156f4:	2402cf80 	.word	0x2402cf80

240156f8 <exp>:
240156f8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
240156fa:	ee10 3a90 	vmov	r3, s1
240156fe:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
24015702:	f3c3 540a 	ubfx	r4, r3, #20, #11
24015706:	18a2      	adds	r2, r4, r2
24015708:	2a3e      	cmp	r2, #62	; 0x3e
2401570a:	ee10 1a10 	vmov	r1, s0
2401570e:	d922      	bls.n	24015756 <exp+0x5e>
24015710:	2a00      	cmp	r2, #0
24015712:	da06      	bge.n	24015722 <exp+0x2a>
24015714:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24015718:	ee30 0b07 	vadd.f64	d0, d0, d7
2401571c:	b004      	add	sp, #16
2401571e:	bcf0      	pop	{r4, r5, r6, r7}
24015720:	4770      	bx	lr
24015722:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24015726:	f04f 0000 	mov.w	r0, #0
2401572a:	d913      	bls.n	24015754 <exp+0x5c>
2401572c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24015730:	bf08      	it	eq
24015732:	4281      	cmpeq	r1, r0
24015734:	f000 80a0 	beq.w	24015878 <exp+0x180>
24015738:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401573c:	4294      	cmp	r4, r2
2401573e:	d0e9      	beq.n	24015714 <exp+0x1c>
24015740:	4283      	cmp	r3, r0
24015742:	da03      	bge.n	2401574c <exp+0x54>
24015744:	b004      	add	sp, #16
24015746:	bcf0      	pop	{r4, r5, r6, r7}
24015748:	f000 b8c6 	b.w	240158d8 <__math_uflow>
2401574c:	b004      	add	sp, #16
2401574e:	bcf0      	pop	{r4, r5, r6, r7}
24015750:	f000 b8ca 	b.w	240158e8 <__math_oflow>
24015754:	4604      	mov	r4, r0
24015756:	4950      	ldr	r1, [pc, #320]	; (24015898 <exp+0x1a0>)
24015758:	ed91 6b02 	vldr	d6, [r1, #8]
2401575c:	ed91 5b00 	vldr	d5, [r1]
24015760:	eeb0 7b46 	vmov.f64	d7, d6
24015764:	eea5 7b00 	vfma.f64	d7, d5, d0
24015768:	ee17 5a10 	vmov	r5, s14
2401576c:	ee37 7b46 	vsub.f64	d7, d7, d6
24015770:	ed91 6b04 	vldr	d6, [r1, #16]
24015774:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24015778:	eea6 0b07 	vfma.f64	d0, d6, d7
2401577c:	ed91 6b06 	vldr	d6, [r1, #24]
24015780:	18d8      	adds	r0, r3, r3
24015782:	f100 030f 	add.w	r3, r0, #15
24015786:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
2401578a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401578e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
24015792:	ee20 7b00 	vmul.f64	d7, d0, d0
24015796:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
2401579a:	ed91 5b08 	vldr	d5, [r1, #32]
2401579e:	ee30 6b06 	vadd.f64	d6, d0, d6
240157a2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
240157a6:	eea4 5b00 	vfma.f64	d5, d4, d0
240157aa:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
240157ae:	eea5 6b07 	vfma.f64	d6, d5, d7
240157b2:	ee27 7b07 	vmul.f64	d7, d7, d7
240157b6:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
240157ba:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
240157be:	f8d2 c004 	ldr.w	ip, [r2, #4]
240157c2:	eea4 5b00 	vfma.f64	d5, d4, d0
240157c6:	2600      	movs	r6, #0
240157c8:	19f2      	adds	r2, r6, r7
240157ca:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
240157ce:	eea7 6b05 	vfma.f64	d6, d7, d5
240157d2:	2c00      	cmp	r4, #0
240157d4:	d14b      	bne.n	2401586e <exp+0x176>
240157d6:	42b5      	cmp	r5, r6
240157d8:	db10      	blt.n	240157fc <exp+0x104>
240157da:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
240157de:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24015880 <exp+0x188>
240157e2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
240157e6:	4610      	mov	r0, r2
240157e8:	ec41 0b10 	vmov	d0, r0, r1
240157ec:	eea6 0b00 	vfma.f64	d0, d6, d0
240157f0:	ee20 0b07 	vmul.f64	d0, d0, d7
240157f4:	b004      	add	sp, #16
240157f6:	bcf0      	pop	{r4, r5, r6, r7}
240157f8:	f000 b88a 	b.w	24015910 <__math_check_oflow>
240157fc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24015800:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
24015804:	4610      	mov	r0, r2
24015806:	ec41 0b17 	vmov	d7, r0, r1
2401580a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
2401580e:	ee26 6b07 	vmul.f64	d6, d6, d7
24015812:	ee37 5b06 	vadd.f64	d5, d7, d6
24015816:	eeb4 5bc4 	vcmpe.f64	d5, d4
2401581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401581e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24015888 <exp+0x190>
24015822:	d51e      	bpl.n	24015862 <exp+0x16a>
24015824:	ee35 3b04 	vadd.f64	d3, d5, d4
24015828:	ee37 7b45 	vsub.f64	d7, d7, d5
2401582c:	ee37 7b06 	vadd.f64	d7, d7, d6
24015830:	ee34 6b43 	vsub.f64	d6, d4, d3
24015834:	ee36 5b05 	vadd.f64	d5, d6, d5
24015838:	ee35 5b07 	vadd.f64	d5, d5, d7
2401583c:	ee35 5b03 	vadd.f64	d5, d5, d3
24015840:	ee35 5b44 	vsub.f64	d5, d5, d4
24015844:	eeb5 5b40 	vcmp.f64	d5, #0.0
24015848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401584c:	d101      	bne.n	24015852 <exp+0x15a>
2401584e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24015890 <exp+0x198>
24015852:	ed8d 0b00 	vstr	d0, [sp]
24015856:	ed9d 7b00 	vldr	d7, [sp]
2401585a:	ee27 7b00 	vmul.f64	d7, d7, d0
2401585e:	ed8d 7b02 	vstr	d7, [sp, #8]
24015862:	ee25 0b00 	vmul.f64	d0, d5, d0
24015866:	b004      	add	sp, #16
24015868:	bcf0      	pop	{r4, r5, r6, r7}
2401586a:	f000 b845 	b.w	240158f8 <__math_check_uflow>
2401586e:	ec43 2b10 	vmov	d0, r2, r3
24015872:	eea6 0b00 	vfma.f64	d0, d6, d0
24015876:	e751      	b.n	2401571c <exp+0x24>
24015878:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24015890 <exp+0x198>
2401587c:	e74e      	b.n	2401571c <exp+0x24>
2401587e:	bf00      	nop
24015880:	00000000 	.word	0x00000000
24015884:	7f000000 	.word	0x7f000000
24015888:	00000000 	.word	0x00000000
2401588c:	00100000 	.word	0x00100000
	...
24015898:	2402c378 	.word	0x2402c378

2401589c <with_errno>:
2401589c:	b513      	push	{r0, r1, r4, lr}
2401589e:	4604      	mov	r4, r0
240158a0:	ed8d 0b00 	vstr	d0, [sp]
240158a4:	f7ff fd96 	bl	240153d4 <__errno>
240158a8:	ed9d 0b00 	vldr	d0, [sp]
240158ac:	6004      	str	r4, [r0, #0]
240158ae:	b002      	add	sp, #8
240158b0:	bd10      	pop	{r4, pc}

240158b2 <xflow>:
240158b2:	b082      	sub	sp, #8
240158b4:	b158      	cbz	r0, 240158ce <xflow+0x1c>
240158b6:	eeb1 7b40 	vneg.f64	d7, d0
240158ba:	ed8d 7b00 	vstr	d7, [sp]
240158be:	ed9d 7b00 	vldr	d7, [sp]
240158c2:	2022      	movs	r0, #34	; 0x22
240158c4:	ee20 0b07 	vmul.f64	d0, d0, d7
240158c8:	b002      	add	sp, #8
240158ca:	f7ff bfe7 	b.w	2401589c <with_errno>
240158ce:	eeb0 7b40 	vmov.f64	d7, d0
240158d2:	e7f2      	b.n	240158ba <xflow+0x8>
240158d4:	0000      	movs	r0, r0
	...

240158d8 <__math_uflow>:
240158d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 240158e0 <__math_uflow+0x8>
240158dc:	f7ff bfe9 	b.w	240158b2 <xflow>
240158e0:	00000000 	.word	0x00000000
240158e4:	10000000 	.word	0x10000000

240158e8 <__math_oflow>:
240158e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 240158f0 <__math_oflow+0x8>
240158ec:	f7ff bfe1 	b.w	240158b2 <xflow>
240158f0:	00000000 	.word	0x00000000
240158f4:	70000000 	.word	0x70000000

240158f8 <__math_check_uflow>:
240158f8:	eeb5 0b40 	vcmp.f64	d0, #0.0
240158fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015900:	d102      	bne.n	24015908 <__math_check_uflow+0x10>
24015902:	2022      	movs	r0, #34	; 0x22
24015904:	f7ff bfca 	b.w	2401589c <with_errno>
24015908:	4770      	bx	lr
2401590a:	0000      	movs	r0, r0
2401590c:	0000      	movs	r0, r0
	...

24015910 <__math_check_oflow>:
24015910:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24015930 <__math_check_oflow+0x20>
24015914:	eeb0 7bc0 	vabs.f64	d7, d0
24015918:	eeb4 7b46 	vcmp.f64	d7, d6
2401591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015920:	dd02      	ble.n	24015928 <__math_check_oflow+0x18>
24015922:	2022      	movs	r0, #34	; 0x22
24015924:	f7ff bfba 	b.w	2401589c <with_errno>
24015928:	4770      	bx	lr
2401592a:	bf00      	nop
2401592c:	f3af 8000 	nop.w
24015930:	ffffffff 	.word	0xffffffff
24015934:	7fefffff 	.word	0x7fefffff

24015938 <with_errnof>:
24015938:	b513      	push	{r0, r1, r4, lr}
2401593a:	4604      	mov	r4, r0
2401593c:	ed8d 0a01 	vstr	s0, [sp, #4]
24015940:	f7ff fd48 	bl	240153d4 <__errno>
24015944:	ed9d 0a01 	vldr	s0, [sp, #4]
24015948:	6004      	str	r4, [r0, #0]
2401594a:	b002      	add	sp, #8
2401594c:	bd10      	pop	{r4, pc}

2401594e <xflowf>:
2401594e:	b130      	cbz	r0, 2401595e <xflowf+0x10>
24015950:	eef1 7a40 	vneg.f32	s15, s0
24015954:	ee27 0a80 	vmul.f32	s0, s15, s0
24015958:	2022      	movs	r0, #34	; 0x22
2401595a:	f7ff bfed 	b.w	24015938 <with_errnof>
2401595e:	eef0 7a40 	vmov.f32	s15, s0
24015962:	e7f7      	b.n	24015954 <xflowf+0x6>

24015964 <__math_uflowf>:
24015964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401596c <__math_uflowf+0x8>
24015968:	f7ff bff1 	b.w	2401594e <xflowf>
2401596c:	10000000 	.word	0x10000000

24015970 <__math_may_uflowf>:
24015970:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24015978 <__math_may_uflowf+0x8>
24015974:	f7ff bfeb 	b.w	2401594e <xflowf>
24015978:	1a200000 	.word	0x1a200000

2401597c <__math_oflowf>:
2401597c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24015984 <__math_oflowf+0x8>
24015980:	f7ff bfe5 	b.w	2401594e <xflowf>
24015984:	70000000 	.word	0x70000000

24015988 <__math_divzerof>:
24015988:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401598c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24015990:	2800      	cmp	r0, #0
24015992:	fe40 7a27 	vseleq.f32	s15, s0, s15
24015996:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240159a4 <__math_divzerof+0x1c>
2401599a:	2022      	movs	r0, #34	; 0x22
2401599c:	ee87 0a80 	vdiv.f32	s0, s15, s0
240159a0:	f7ff bfca 	b.w	24015938 <with_errnof>
240159a4:	00000000 	.word	0x00000000

240159a8 <__math_invalidf>:
240159a8:	eef0 7a40 	vmov.f32	s15, s0
240159ac:	ee30 7a40 	vsub.f32	s14, s0, s0
240159b0:	eef4 7a67 	vcmp.f32	s15, s15
240159b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240159b8:	ee87 0a07 	vdiv.f32	s0, s14, s14
240159bc:	d602      	bvs.n	240159c4 <__math_invalidf+0x1c>
240159be:	2021      	movs	r0, #33	; 0x21
240159c0:	f7ff bfba 	b.w	24015938 <with_errnof>
240159c4:	4770      	bx	lr
	...

240159c8 <tan>:
240159c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
240159ca:	eeb0 7b40 	vmov.f64	d7, d0
240159ce:	ee17 3a90 	vmov	r3, s15
240159d2:	4a15      	ldr	r2, [pc, #84]	; (24015a28 <tan+0x60>)
240159d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240159d8:	4293      	cmp	r3, r2
240159da:	dc07      	bgt.n	240159ec <tan+0x24>
240159dc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 24015a20 <tan+0x58>
240159e0:	2001      	movs	r0, #1
240159e2:	b005      	add	sp, #20
240159e4:	f85d eb04 	ldr.w	lr, [sp], #4
240159e8:	f001 bab6 	b.w	24016f58 <__kernel_tan>
240159ec:	4a0f      	ldr	r2, [pc, #60]	; (24015a2c <tan+0x64>)
240159ee:	4293      	cmp	r3, r2
240159f0:	dd04      	ble.n	240159fc <tan+0x34>
240159f2:	ee30 0b40 	vsub.f64	d0, d0, d0
240159f6:	b005      	add	sp, #20
240159f8:	f85d fb04 	ldr.w	pc, [sp], #4
240159fc:	4668      	mov	r0, sp
240159fe:	f000 fcb7 	bl	24016370 <__ieee754_rem_pio2>
24015a02:	0040      	lsls	r0, r0, #1
24015a04:	f000 0002 	and.w	r0, r0, #2
24015a08:	ed9d 1b02 	vldr	d1, [sp, #8]
24015a0c:	ed9d 0b00 	vldr	d0, [sp]
24015a10:	f1c0 0001 	rsb	r0, r0, #1
24015a14:	f001 faa0 	bl	24016f58 <__kernel_tan>
24015a18:	e7ed      	b.n	240159f6 <tan+0x2e>
24015a1a:	bf00      	nop
24015a1c:	f3af 8000 	nop.w
	...
24015a28:	3fe921fb 	.word	0x3fe921fb
24015a2c:	7fefffff 	.word	0x7fefffff

24015a30 <expf>:
24015a30:	ee10 2a10 	vmov	r2, s0
24015a34:	f240 412a 	movw	r1, #1066	; 0x42a
24015a38:	f3c2 530a 	ubfx	r3, r2, #20, #11
24015a3c:	428b      	cmp	r3, r1
24015a3e:	b430      	push	{r4, r5}
24015a40:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24015a44:	d92a      	bls.n	24015a9c <expf+0x6c>
24015a46:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24015a4a:	d058      	beq.n	24015afe <expf+0xce>
24015a4c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24015a50:	d303      	bcc.n	24015a5a <expf+0x2a>
24015a52:	ee30 0a00 	vadd.f32	s0, s0, s0
24015a56:	bc30      	pop	{r4, r5}
24015a58:	4770      	bx	lr
24015a5a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24015b04 <expf+0xd4>
24015a5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015a66:	dd03      	ble.n	24015a70 <expf+0x40>
24015a68:	bc30      	pop	{r4, r5}
24015a6a:	2000      	movs	r0, #0
24015a6c:	f7ff bf86 	b.w	2401597c <__math_oflowf>
24015a70:	eddf 7a25 	vldr	s15, [pc, #148]	; 24015b08 <expf+0xd8>
24015a74:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015a7c:	d503      	bpl.n	24015a86 <expf+0x56>
24015a7e:	bc30      	pop	{r4, r5}
24015a80:	2000      	movs	r0, #0
24015a82:	f7ff bf6f 	b.w	24015964 <__math_uflowf>
24015a86:	eddf 7a21 	vldr	s15, [pc, #132]	; 24015b0c <expf+0xdc>
24015a8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015a92:	d503      	bpl.n	24015a9c <expf+0x6c>
24015a94:	bc30      	pop	{r4, r5}
24015a96:	2000      	movs	r0, #0
24015a98:	f7ff bf6a 	b.w	24015970 <__math_may_uflowf>
24015a9c:	4b1c      	ldr	r3, [pc, #112]	; (24015b10 <expf+0xe0>)
24015a9e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24015aa2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24015aa6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24015aaa:	eeb0 7b44 	vmov.f64	d7, d4
24015aae:	eea5 7b06 	vfma.f64	d7, d5, d6
24015ab2:	ee17 0a10 	vmov	r0, s14
24015ab6:	ee37 7b44 	vsub.f64	d7, d7, d4
24015aba:	f000 021f 	and.w	r2, r0, #31
24015abe:	ee95 7b06 	vfnms.f64	d7, d5, d6
24015ac2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24015ac6:	ee27 4b07 	vmul.f64	d4, d7, d7
24015aca:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24015ace:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24015ad2:	eea5 6b07 	vfma.f64	d6, d5, d7
24015ad6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24015ada:	684d      	ldr	r5, [r1, #4]
24015adc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24015ae0:	2100      	movs	r1, #0
24015ae2:	190a      	adds	r2, r1, r4
24015ae4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24015ae8:	eea5 0b07 	vfma.f64	d0, d5, d7
24015aec:	ec43 2b17 	vmov	d7, r2, r3
24015af0:	eea6 0b04 	vfma.f64	d0, d6, d4
24015af4:	ee20 0b07 	vmul.f64	d0, d0, d7
24015af8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015afc:	e7ab      	b.n	24015a56 <expf+0x26>
24015afe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24015b14 <expf+0xe4>
24015b02:	e7a8      	b.n	24015a56 <expf+0x26>
24015b04:	42b17217 	.word	0x42b17217
24015b08:	c2cff1b4 	.word	0xc2cff1b4
24015b0c:	c2ce8ecf 	.word	0xc2ce8ecf
24015b10:	2402cbe8 	.word	0x2402cbe8
24015b14:	00000000 	.word	0x00000000

24015b18 <fabsf>:
24015b18:	ee10 3a10 	vmov	r3, s0
24015b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015b20:	ee00 3a10 	vmov	s0, r3
24015b24:	4770      	bx	lr
	...

24015b28 <logf>:
24015b28:	ee10 3a10 	vmov	r3, s0
24015b2c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24015b30:	b410      	push	{r4}
24015b32:	d055      	beq.n	24015be0 <logf+0xb8>
24015b34:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24015b38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24015b3c:	d31a      	bcc.n	24015b74 <logf+0x4c>
24015b3e:	005a      	lsls	r2, r3, #1
24015b40:	d104      	bne.n	24015b4c <logf+0x24>
24015b42:	f85d 4b04 	ldr.w	r4, [sp], #4
24015b46:	2001      	movs	r0, #1
24015b48:	f7ff bf1e 	b.w	24015988 <__math_divzerof>
24015b4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015b50:	d043      	beq.n	24015bda <logf+0xb2>
24015b52:	2b00      	cmp	r3, #0
24015b54:	db02      	blt.n	24015b5c <logf+0x34>
24015b56:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24015b5a:	d303      	bcc.n	24015b64 <logf+0x3c>
24015b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
24015b60:	f7ff bf22 	b.w	240159a8 <__math_invalidf>
24015b64:	eddf 7a20 	vldr	s15, [pc, #128]	; 24015be8 <logf+0xc0>
24015b68:	ee20 0a27 	vmul.f32	s0, s0, s15
24015b6c:	ee10 3a10 	vmov	r3, s0
24015b70:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24015b74:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24015b78:	491c      	ldr	r1, [pc, #112]	; (24015bec <logf+0xc4>)
24015b7a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24015b7e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24015b82:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24015b86:	0dd4      	lsrs	r4, r2, #23
24015b88:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24015b8c:	05e4      	lsls	r4, r4, #23
24015b8e:	ed90 6b00 	vldr	d6, [r0]
24015b92:	1b1b      	subs	r3, r3, r4
24015b94:	ee07 3a90 	vmov	s15, r3
24015b98:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24015b9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24015ba0:	15d2      	asrs	r2, r2, #23
24015ba2:	eea6 0b07 	vfma.f64	d0, d6, d7
24015ba6:	ed90 6b02 	vldr	d6, [r0, #8]
24015baa:	ee20 4b00 	vmul.f64	d4, d0, d0
24015bae:	ee07 2a90 	vmov	s15, r2
24015bb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24015bb6:	eea7 6b05 	vfma.f64	d6, d7, d5
24015bba:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24015bbe:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24015bc2:	eea5 7b00 	vfma.f64	d7, d5, d0
24015bc6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24015bca:	ee30 0b06 	vadd.f64	d0, d0, d6
24015bce:	eea5 7b04 	vfma.f64	d7, d5, d4
24015bd2:	eea4 0b07 	vfma.f64	d0, d4, d7
24015bd6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015bda:	f85d 4b04 	ldr.w	r4, [sp], #4
24015bde:	4770      	bx	lr
24015be0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24015bf0 <logf+0xc8>
24015be4:	e7f9      	b.n	24015bda <logf+0xb2>
24015be6:	bf00      	nop
24015be8:	4b000000 	.word	0x4b000000
24015bec:	2402cd30 	.word	0x2402cd30
24015bf0:	00000000 	.word	0x00000000

24015bf4 <lrintf>:
24015bf4:	ee10 3a10 	vmov	r3, s0
24015bf8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24015bfc:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
24015c00:	281e      	cmp	r0, #30
24015c02:	b082      	sub	sp, #8
24015c04:	dc2e      	bgt.n	24015c64 <lrintf+0x70>
24015c06:	1c41      	adds	r1, r0, #1
24015c08:	da02      	bge.n	24015c10 <lrintf+0x1c>
24015c0a:	2000      	movs	r0, #0
24015c0c:	b002      	add	sp, #8
24015c0e:	4770      	bx	lr
24015c10:	2816      	cmp	r0, #22
24015c12:	ea4f 71d3 	mov.w	r1, r3, lsr #31
24015c16:	dd09      	ble.n	24015c2c <lrintf+0x38>
24015c18:	f3c3 0016 	ubfx	r0, r3, #0, #23
24015c1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24015c20:	3a96      	subs	r2, #150	; 0x96
24015c22:	4090      	lsls	r0, r2
24015c24:	2900      	cmp	r1, #0
24015c26:	d0f1      	beq.n	24015c0c <lrintf+0x18>
24015c28:	4240      	negs	r0, r0
24015c2a:	e7ef      	b.n	24015c0c <lrintf+0x18>
24015c2c:	4b10      	ldr	r3, [pc, #64]	; (24015c70 <lrintf+0x7c>)
24015c2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24015c32:	ed93 7a00 	vldr	s14, [r3]
24015c36:	ee37 0a00 	vadd.f32	s0, s14, s0
24015c3a:	ed8d 0a01 	vstr	s0, [sp, #4]
24015c3e:	eddd 7a01 	vldr	s15, [sp, #4]
24015c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015c46:	ee17 3a90 	vmov	r3, s15
24015c4a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24015c4e:	d0dc      	beq.n	24015c0a <lrintf+0x16>
24015c50:	f3c3 0016 	ubfx	r0, r3, #0, #23
24015c54:	f3c3 53c7 	ubfx	r3, r3, #23, #8
24015c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24015c5c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24015c60:	40d8      	lsrs	r0, r3
24015c62:	e7df      	b.n	24015c24 <lrintf+0x30>
24015c64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24015c68:	ee17 0a90 	vmov	r0, s15
24015c6c:	e7ce      	b.n	24015c0c <lrintf+0x18>
24015c6e:	bf00      	nop
24015c70:	2402ce50 	.word	0x2402ce50

24015c74 <checkint>:
24015c74:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24015c78:	2b7e      	cmp	r3, #126	; 0x7e
24015c7a:	dd10      	ble.n	24015c9e <checkint+0x2a>
24015c7c:	2b96      	cmp	r3, #150	; 0x96
24015c7e:	dc0c      	bgt.n	24015c9a <checkint+0x26>
24015c80:	2201      	movs	r2, #1
24015c82:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24015c86:	fa02 f303 	lsl.w	r3, r2, r3
24015c8a:	1e5a      	subs	r2, r3, #1
24015c8c:	4202      	tst	r2, r0
24015c8e:	d106      	bne.n	24015c9e <checkint+0x2a>
24015c90:	4203      	tst	r3, r0
24015c92:	bf0c      	ite	eq
24015c94:	2002      	moveq	r0, #2
24015c96:	2001      	movne	r0, #1
24015c98:	4770      	bx	lr
24015c9a:	2002      	movs	r0, #2
24015c9c:	4770      	bx	lr
24015c9e:	2000      	movs	r0, #0
24015ca0:	4770      	bx	lr
24015ca2:	0000      	movs	r0, r0
24015ca4:	0000      	movs	r0, r0
	...

24015ca8 <powf>:
24015ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
24015caa:	ee10 1a10 	vmov	r1, s0
24015cae:	ee10 4a90 	vmov	r4, s1
24015cb2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24015cb6:	0062      	lsls	r2, r4, #1
24015cb8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015cbc:	eef0 7a40 	vmov.f32	s15, s0
24015cc0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24015cc4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24015cc8:	d252      	bcs.n	24015d70 <powf+0xc8>
24015cca:	4298      	cmp	r0, r3
24015ccc:	d252      	bcs.n	24015d74 <powf+0xcc>
24015cce:	2000      	movs	r0, #0
24015cd0:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
24015cd4:	4ca0      	ldr	r4, [pc, #640]	; (24015f58 <powf+0x2b0>)
24015cd6:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
24015cda:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24015cde:	f3c2 45c3 	ubfx	r5, r2, #19, #4
24015ce2:	0dd2      	lsrs	r2, r2, #23
24015ce4:	05d2      	lsls	r2, r2, #23
24015ce6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
24015cea:	1a8b      	subs	r3, r1, r2
24015cec:	ed95 6b00 	vldr	d6, [r5]
24015cf0:	ee07 3a90 	vmov	s15, r3
24015cf4:	15d2      	asrs	r2, r2, #23
24015cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24015cfa:	eea6 5b07 	vfma.f64	d5, d6, d7
24015cfe:	ed95 6b02 	vldr	d6, [r5, #8]
24015d02:	ee25 2b05 	vmul.f64	d2, d5, d5
24015d06:	ee22 1b02 	vmul.f64	d1, d2, d2
24015d0a:	ee07 2a90 	vmov	s15, r2
24015d0e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
24015d12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24015d16:	ee37 7b06 	vadd.f64	d7, d7, d6
24015d1a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
24015d1e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
24015d22:	eea5 3b06 	vfma.f64	d3, d5, d6
24015d26:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
24015d2a:	eea5 6b04 	vfma.f64	d6, d5, d4
24015d2e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
24015d32:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
24015d36:	eea5 7b04 	vfma.f64	d7, d5, d4
24015d3a:	eea2 7b06 	vfma.f64	d7, d2, d6
24015d3e:	eea3 7b01 	vfma.f64	d7, d3, d1
24015d42:	ee20 0b07 	vmul.f64	d0, d0, d7
24015d46:	ee10 3a90 	vmov	r3, s1
24015d4a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24015d4e:	f248 03bf 	movw	r3, #32959	; 0x80bf
24015d52:	429a      	cmp	r2, r3
24015d54:	f0c0 80b1 	bcc.w	24015eba <powf+0x212>
24015d58:	ed9f 7b77 	vldr	d7, [pc, #476]	; 24015f38 <powf+0x290>
24015d5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015d64:	dd79      	ble.n	24015e5a <powf+0x1b2>
24015d66:	b003      	add	sp, #12
24015d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015d6c:	f7ff be06 	b.w	2401597c <__math_oflowf>
24015d70:	4298      	cmp	r0, r3
24015d72:	d32d      	bcc.n	24015dd0 <powf+0x128>
24015d74:	b952      	cbnz	r2, 24015d8c <powf+0xe4>
24015d76:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
24015d7a:	005b      	lsls	r3, r3, #1
24015d7c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
24015d80:	f240 80c9 	bls.w	24015f16 <powf+0x26e>
24015d84:	ee37 0aa0 	vadd.f32	s0, s15, s1
24015d88:	b003      	add	sp, #12
24015d8a:	bd30      	pop	{r4, r5, pc}
24015d8c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24015d90:	d105      	bne.n	24015d9e <powf+0xf6>
24015d92:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
24015d96:	0064      	lsls	r4, r4, #1
24015d98:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24015d9c:	e7f0      	b.n	24015d80 <powf+0xd8>
24015d9e:	004b      	lsls	r3, r1, #1
24015da0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
24015da4:	d8ee      	bhi.n	24015d84 <powf+0xdc>
24015da6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24015daa:	d1eb      	bne.n	24015d84 <powf+0xdc>
24015dac:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015db0:	f000 80b1 	beq.w	24015f16 <powf+0x26e>
24015db4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015db8:	ea6f 0404 	mvn.w	r4, r4
24015dbc:	bf34      	ite	cc
24015dbe:	2300      	movcc	r3, #0
24015dc0:	2301      	movcs	r3, #1
24015dc2:	0fe4      	lsrs	r4, r4, #31
24015dc4:	42a3      	cmp	r3, r4
24015dc6:	f040 80a9 	bne.w	24015f1c <powf+0x274>
24015dca:	ee20 0aa0 	vmul.f32	s0, s1, s1
24015dce:	e7db      	b.n	24015d88 <powf+0xe0>
24015dd0:	004d      	lsls	r5, r1, #1
24015dd2:	1e6a      	subs	r2, r5, #1
24015dd4:	429a      	cmp	r2, r3
24015dd6:	d31c      	bcc.n	24015e12 <powf+0x16a>
24015dd8:	2900      	cmp	r1, #0
24015dda:	ee20 0a00 	vmul.f32	s0, s0, s0
24015dde:	da0f      	bge.n	24015e00 <powf+0x158>
24015de0:	ee10 0a90 	vmov	r0, s1
24015de4:	f7ff ff46 	bl	24015c74 <checkint>
24015de8:	2801      	cmp	r0, #1
24015dea:	d109      	bne.n	24015e00 <powf+0x158>
24015dec:	eeb1 0a40 	vneg.f32	s0, s0
24015df0:	b945      	cbnz	r5, 24015e04 <powf+0x15c>
24015df2:	2c00      	cmp	r4, #0
24015df4:	dac8      	bge.n	24015d88 <powf+0xe0>
24015df6:	b003      	add	sp, #12
24015df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015dfc:	f7ff bdc4 	b.w	24015988 <__math_divzerof>
24015e00:	2000      	movs	r0, #0
24015e02:	e7f5      	b.n	24015df0 <powf+0x148>
24015e04:	2c00      	cmp	r4, #0
24015e06:	dabf      	bge.n	24015d88 <powf+0xe0>
24015e08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015e0c:	ee87 0a80 	vdiv.f32	s0, s15, s0
24015e10:	e7ba      	b.n	24015d88 <powf+0xe0>
24015e12:	2900      	cmp	r1, #0
24015e14:	da1f      	bge.n	24015e56 <powf+0x1ae>
24015e16:	ee10 0a90 	vmov	r0, s1
24015e1a:	f7ff ff2b 	bl	24015c74 <checkint>
24015e1e:	b920      	cbnz	r0, 24015e2a <powf+0x182>
24015e20:	b003      	add	sp, #12
24015e22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015e26:	f7ff bdbf 	b.w	240159a8 <__math_invalidf>
24015e2a:	2801      	cmp	r0, #1
24015e2c:	bf14      	ite	ne
24015e2e:	2000      	movne	r0, #0
24015e30:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
24015e34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24015e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24015e3c:	f4bf af48 	bcs.w	24015cd0 <powf+0x28>
24015e40:	ed9f 0a46 	vldr	s0, [pc, #280]	; 24015f5c <powf+0x2b4>
24015e44:	ee27 0a80 	vmul.f32	s0, s15, s0
24015e48:	ee10 3a10 	vmov	r3, s0
24015e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015e50:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
24015e54:	e73c      	b.n	24015cd0 <powf+0x28>
24015e56:	2000      	movs	r0, #0
24015e58:	e7ee      	b.n	24015e38 <powf+0x190>
24015e5a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 24015f40 <powf+0x298>
24015e5e:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015e66:	dd10      	ble.n	24015e8a <powf+0x1e2>
24015e68:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
24015e6c:	2800      	cmp	r0, #0
24015e6e:	d158      	bne.n	24015f22 <powf+0x27a>
24015e70:	9300      	str	r3, [sp, #0]
24015e72:	eddd 7a00 	vldr	s15, [sp]
24015e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
24015e7e:	eef4 7a47 	vcmp.f32	s15, s14
24015e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015e86:	f47f af6e 	bne.w	24015d66 <powf+0xbe>
24015e8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24015f48 <powf+0x2a0>
24015e8e:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015e96:	d804      	bhi.n	24015ea2 <powf+0x1fa>
24015e98:	b003      	add	sp, #12
24015e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015e9e:	f7ff bd61 	b.w	24015964 <__math_uflowf>
24015ea2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24015f50 <powf+0x2a8>
24015ea6:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015eae:	d504      	bpl.n	24015eba <powf+0x212>
24015eb0:	b003      	add	sp, #12
24015eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015eb6:	f7ff bd5b 	b.w	24015970 <__math_may_uflowf>
24015eba:	4b29      	ldr	r3, [pc, #164]	; (24015f60 <powf+0x2b8>)
24015ebc:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
24015ec0:	ee30 6b07 	vadd.f64	d6, d0, d7
24015ec4:	ee16 2a10 	vmov	r2, s12
24015ec8:	ee36 7b47 	vsub.f64	d7, d6, d7
24015ecc:	f002 011f 	and.w	r1, r2, #31
24015ed0:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24015ed4:	ee30 7b47 	vsub.f64	d7, d0, d7
24015ed8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24015edc:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24015ee0:	ee27 4b07 	vmul.f64	d4, d7, d7
24015ee4:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
24015ee8:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
24015eec:	eea7 6b05 	vfma.f64	d6, d7, d5
24015ef0:	686d      	ldr	r5, [r5, #4]
24015ef2:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
24015ef6:	1882      	adds	r2, r0, r2
24015ef8:	2300      	movs	r3, #0
24015efa:	1918      	adds	r0, r3, r4
24015efc:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24015f00:	eea7 0b05 	vfma.f64	d0, d7, d5
24015f04:	ec41 0b17 	vmov	d7, r0, r1
24015f08:	eea6 0b04 	vfma.f64	d0, d6, d4
24015f0c:	ee20 0b07 	vmul.f64	d0, d0, d7
24015f10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015f14:	e738      	b.n	24015d88 <powf+0xe0>
24015f16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015f1a:	e735      	b.n	24015d88 <powf+0xe0>
24015f1c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 24015f64 <powf+0x2bc>
24015f20:	e732      	b.n	24015d88 <powf+0xe0>
24015f22:	9301      	str	r3, [sp, #4]
24015f24:	eddd 7a01 	vldr	s15, [sp, #4]
24015f28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24015f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
24015f30:	e7a5      	b.n	24015e7e <powf+0x1d6>
24015f32:	bf00      	nop
24015f34:	f3af 8000 	nop.w
24015f38:	ffd1d571 	.word	0xffd1d571
24015f3c:	405fffff 	.word	0x405fffff
24015f40:	ffa3aae2 	.word	0xffa3aae2
24015f44:	405fffff 	.word	0x405fffff
24015f48:	00000000 	.word	0x00000000
24015f4c:	c062c000 	.word	0xc062c000
24015f50:	00000000 	.word	0x00000000
24015f54:	c062a000 	.word	0xc062a000
24015f58:	2402ce58 	.word	0x2402ce58
24015f5c:	4b000000 	.word	0x4b000000
24015f60:	2402cbe8 	.word	0x2402cbe8
24015f64:	00000000 	.word	0x00000000

24015f68 <tanf>:
24015f68:	ee10 3a10 	vmov	r3, s0
24015f6c:	b507      	push	{r0, r1, r2, lr}
24015f6e:	4a12      	ldr	r2, [pc, #72]	; (24015fb8 <tanf+0x50>)
24015f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015f74:	4293      	cmp	r3, r2
24015f76:	dc07      	bgt.n	24015f88 <tanf+0x20>
24015f78:	eddf 0a10 	vldr	s1, [pc, #64]	; 24015fbc <tanf+0x54>
24015f7c:	2001      	movs	r0, #1
24015f7e:	b003      	add	sp, #12
24015f80:	f85d eb04 	ldr.w	lr, [sp], #4
24015f84:	f001 bb76 	b.w	24017674 <__kernel_tanf>
24015f88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015f8c:	db04      	blt.n	24015f98 <tanf+0x30>
24015f8e:	ee30 0a40 	vsub.f32	s0, s0, s0
24015f92:	b003      	add	sp, #12
24015f94:	f85d fb04 	ldr.w	pc, [sp], #4
24015f98:	4668      	mov	r0, sp
24015f9a:	f000 fc07 	bl	240167ac <__ieee754_rem_pio2f>
24015f9e:	0040      	lsls	r0, r0, #1
24015fa0:	f000 0002 	and.w	r0, r0, #2
24015fa4:	eddd 0a01 	vldr	s1, [sp, #4]
24015fa8:	ed9d 0a00 	vldr	s0, [sp]
24015fac:	f1c0 0001 	rsb	r0, r0, #1
24015fb0:	f001 fb60 	bl	24017674 <__kernel_tanf>
24015fb4:	e7ed      	b.n	24015f92 <tanf+0x2a>
24015fb6:	bf00      	nop
24015fb8:	3f490fda 	.word	0x3f490fda
24015fbc:	00000000 	.word	0x00000000

24015fc0 <tanhf>:
24015fc0:	b510      	push	{r4, lr}
24015fc2:	ee10 4a10 	vmov	r4, s0
24015fc6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
24015fca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015fce:	ed2d 8b02 	vpush	{d8}
24015fd2:	eeb0 7a40 	vmov.f32	s14, s0
24015fd6:	db0c      	blt.n	24015ff2 <tanhf+0x32>
24015fd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015fdc:	eec0 7a07 	vdiv.f32	s15, s0, s14
24015fe0:	2c00      	cmp	r4, #0
24015fe2:	bfac      	ite	ge
24015fe4:	ee37 0a80 	vaddge.f32	s0, s15, s0
24015fe8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
24015fec:	ecbd 8b02 	vpop	{d8}
24015ff0:	bd10      	pop	{r4, pc}
24015ff2:	4a1b      	ldr	r2, [pc, #108]	; (24016060 <tanhf+0xa0>)
24015ff4:	4293      	cmp	r3, r2
24015ff6:	dc30      	bgt.n	2401605a <tanhf+0x9a>
24015ff8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
24015ffc:	da06      	bge.n	2401600c <tanhf+0x4c>
24015ffe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24016002:	ee70 7a27 	vadd.f32	s15, s0, s15
24016006:	ee27 0a80 	vmul.f32	s0, s15, s0
2401600a:	e7ef      	b.n	24015fec <tanhf+0x2c>
2401600c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24016010:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
24016014:	db12      	blt.n	2401603c <tanhf+0x7c>
24016016:	f7ff fd7f 	bl	24015b18 <fabsf>
2401601a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401601e:	f001 fd11 	bl	24017a44 <expm1f>
24016022:	ee30 0a08 	vadd.f32	s0, s0, s16
24016026:	eec8 7a00 	vdiv.f32	s15, s16, s0
2401602a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401602e:	ee30 0a67 	vsub.f32	s0, s0, s15
24016032:	2c00      	cmp	r4, #0
24016034:	bfb8      	it	lt
24016036:	eeb1 0a40 	vneglt.f32	s0, s0
2401603a:	e7d7      	b.n	24015fec <tanhf+0x2c>
2401603c:	f7ff fd6c 	bl	24015b18 <fabsf>
24016040:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
24016044:	ee20 0a27 	vmul.f32	s0, s0, s15
24016048:	f001 fcfc 	bl	24017a44 <expm1f>
2401604c:	ee70 7a08 	vadd.f32	s15, s0, s16
24016050:	eeb1 7a40 	vneg.f32	s14, s0
24016054:	ee87 0a27 	vdiv.f32	s0, s14, s15
24016058:	e7eb      	b.n	24016032 <tanhf+0x72>
2401605a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401605e:	e7e8      	b.n	24016032 <tanhf+0x72>
24016060:	41afffff 	.word	0x41afffff
24016064:	00000000 	.word	0x00000000

24016068 <fmod>:
24016068:	b508      	push	{r3, lr}
2401606a:	ed2d 8b04 	vpush	{d8-d9}
2401606e:	eeb0 9b40 	vmov.f64	d9, d0
24016072:	eeb0 8b41 	vmov.f64	d8, d1
24016076:	f000 f869 	bl	2401614c <__ieee754_fmod>
2401607a:	eeb4 9b48 	vcmp.f64	d9, d8
2401607e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016082:	d60c      	bvs.n	2401609e <fmod+0x36>
24016084:	ed9f 9b08 	vldr	d9, [pc, #32]	; 240160a8 <fmod+0x40>
24016088:	eeb4 8b49 	vcmp.f64	d8, d9
2401608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016090:	d105      	bne.n	2401609e <fmod+0x36>
24016092:	f7ff f99f 	bl	240153d4 <__errno>
24016096:	ee89 0b09 	vdiv.f64	d0, d9, d9
2401609a:	2321      	movs	r3, #33	; 0x21
2401609c:	6003      	str	r3, [r0, #0]
2401609e:	ecbd 8b04 	vpop	{d8-d9}
240160a2:	bd08      	pop	{r3, pc}
240160a4:	f3af 8000 	nop.w
	...

240160b0 <fmodf>:
240160b0:	b508      	push	{r3, lr}
240160b2:	ed2d 8b02 	vpush	{d8}
240160b6:	eef0 8a40 	vmov.f32	s17, s0
240160ba:	eeb0 8a60 	vmov.f32	s16, s1
240160be:	f000 fa9b 	bl	240165f8 <__ieee754_fmodf>
240160c2:	eef4 8a48 	vcmp.f32	s17, s16
240160c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160ca:	d60c      	bvs.n	240160e6 <fmodf+0x36>
240160cc:	eddf 8a07 	vldr	s17, [pc, #28]	; 240160ec <fmodf+0x3c>
240160d0:	eeb4 8a68 	vcmp.f32	s16, s17
240160d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160d8:	d105      	bne.n	240160e6 <fmodf+0x36>
240160da:	f7ff f97b 	bl	240153d4 <__errno>
240160de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
240160e2:	2321      	movs	r3, #33	; 0x21
240160e4:	6003      	str	r3, [r0, #0]
240160e6:	ecbd 8b02 	vpop	{d8}
240160ea:	bd08      	pop	{r3, pc}
240160ec:	00000000 	.word	0x00000000

240160f0 <log10f>:
240160f0:	b508      	push	{r3, lr}
240160f2:	ed2d 8b02 	vpush	{d8}
240160f6:	eeb0 8a40 	vmov.f32	s16, s0
240160fa:	f000 faff 	bl	240166fc <__ieee754_log10f>
240160fe:	eeb4 8a48 	vcmp.f32	s16, s16
24016102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016106:	d60f      	bvs.n	24016128 <log10f+0x38>
24016108:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2401610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016110:	d80a      	bhi.n	24016128 <log10f+0x38>
24016112:	eeb5 8a40 	vcmp.f32	s16, #0.0
24016116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401611a:	d108      	bne.n	2401612e <log10f+0x3e>
2401611c:	f7ff f95a 	bl	240153d4 <__errno>
24016120:	2322      	movs	r3, #34	; 0x22
24016122:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24016144 <log10f+0x54>
24016126:	6003      	str	r3, [r0, #0]
24016128:	ecbd 8b02 	vpop	{d8}
2401612c:	bd08      	pop	{r3, pc}
2401612e:	f7ff f951 	bl	240153d4 <__errno>
24016132:	ecbd 8b02 	vpop	{d8}
24016136:	2321      	movs	r3, #33	; 0x21
24016138:	6003      	str	r3, [r0, #0]
2401613a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401613e:	4802      	ldr	r0, [pc, #8]	; (24016148 <log10f+0x58>)
24016140:	f001 bddc 	b.w	24017cfc <nanf>
24016144:	ff800000 	.word	0xff800000
24016148:	2402c374 	.word	0x2402c374

2401614c <__ieee754_fmod>:
2401614c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
24016150:	ed8d 1b00 	vstr	d1, [sp]
24016154:	e9dd 6500 	ldrd	r6, r5, [sp]
24016158:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
2401615c:	ea57 0306 	orrs.w	r3, r7, r6
24016160:	46b4      	mov	ip, r6
24016162:	d00d      	beq.n	24016180 <__ieee754_fmod+0x34>
24016164:	ee10 9a90 	vmov	r9, s1
24016168:	4a7b      	ldr	r2, [pc, #492]	; (24016358 <__ieee754_fmod+0x20c>)
2401616a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
2401616e:	4293      	cmp	r3, r2
24016170:	dc06      	bgt.n	24016180 <__ieee754_fmod+0x34>
24016172:	4272      	negs	r2, r6
24016174:	4879      	ldr	r0, [pc, #484]	; (2401635c <__ieee754_fmod+0x210>)
24016176:	4332      	orrs	r2, r6
24016178:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
2401617c:	4282      	cmp	r2, r0
2401617e:	d908      	bls.n	24016192 <__ieee754_fmod+0x46>
24016180:	ed9d 7b00 	vldr	d7, [sp]
24016184:	ee20 7b07 	vmul.f64	d7, d0, d7
24016188:	ee87 0b07 	vdiv.f64	d0, d7, d7
2401618c:	b003      	add	sp, #12
2401618e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
24016192:	42bb      	cmp	r3, r7
24016194:	ee10 ea10 	vmov	lr, s0
24016198:	ee10 1a10 	vmov	r1, s0
2401619c:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
240161a0:	dc09      	bgt.n	240161b6 <__ieee754_fmod+0x6a>
240161a2:	dbf3      	blt.n	2401618c <__ieee754_fmod+0x40>
240161a4:	45b6      	cmp	lr, r6
240161a6:	d3f1      	bcc.n	2401618c <__ieee754_fmod+0x40>
240161a8:	d105      	bne.n	240161b6 <__ieee754_fmod+0x6a>
240161aa:	4b6d      	ldr	r3, [pc, #436]	; (24016360 <__ieee754_fmod+0x214>)
240161ac:	eb03 7414 	add.w	r4, r3, r4, lsr #28
240161b0:	ed94 0b00 	vldr	d0, [r4]
240161b4:	e7ea      	b.n	2401618c <__ieee754_fmod+0x40>
240161b6:	ea19 0f00 	tst.w	r9, r0
240161ba:	d14d      	bne.n	24016258 <__ieee754_fmod+0x10c>
240161bc:	2b00      	cmp	r3, #0
240161be:	d144      	bne.n	2401624a <__ieee754_fmod+0xfe>
240161c0:	4868      	ldr	r0, [pc, #416]	; (24016364 <__ieee754_fmod+0x218>)
240161c2:	4672      	mov	r2, lr
240161c4:	2a00      	cmp	r2, #0
240161c6:	dc3d      	bgt.n	24016244 <__ieee754_fmod+0xf8>
240161c8:	4a64      	ldr	r2, [pc, #400]	; (2401635c <__ieee754_fmod+0x210>)
240161ca:	402a      	ands	r2, r5
240161cc:	2a00      	cmp	r2, #0
240161ce:	d155      	bne.n	2401627c <__ieee754_fmod+0x130>
240161d0:	2f00      	cmp	r7, #0
240161d2:	d149      	bne.n	24016268 <__ieee754_fmod+0x11c>
240161d4:	46b0      	mov	r8, r6
240161d6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
240161da:	f1b8 0f00 	cmp.w	r8, #0
240161de:	dc3f      	bgt.n	24016260 <__ieee754_fmod+0x114>
240161e0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 24016368 <__ieee754_fmod+0x21c>
240161e4:	4540      	cmp	r0, r8
240161e6:	db4d      	blt.n	24016284 <__ieee754_fmod+0x138>
240161e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
240161ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
240161f0:	f8df e174 	ldr.w	lr, [pc, #372]	; 24016368 <__ieee754_fmod+0x21c>
240161f4:	4572      	cmp	r2, lr
240161f6:	db59      	blt.n	240162ac <__ieee754_fmod+0x160>
240161f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
240161fc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
24016200:	1a80      	subs	r0, r0, r2
24016202:	1b5e      	subs	r6, r3, r5
24016204:	eba1 070c 	sub.w	r7, r1, ip
24016208:	2800      	cmp	r0, #0
2401620a:	d165      	bne.n	240162d8 <__ieee754_fmod+0x18c>
2401620c:	4561      	cmp	r1, ip
2401620e:	bf38      	it	cc
24016210:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
24016214:	2e00      	cmp	r6, #0
24016216:	bfa4      	itt	ge
24016218:	4639      	movge	r1, r7
2401621a:	4633      	movge	r3, r6
2401621c:	ea53 0001 	orrs.w	r0, r3, r1
24016220:	d0c3      	beq.n	240161aa <__ieee754_fmod+0x5e>
24016222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24016226:	db6c      	blt.n	24016302 <__ieee754_fmod+0x1b6>
24016228:	484f      	ldr	r0, [pc, #316]	; (24016368 <__ieee754_fmod+0x21c>)
2401622a:	4282      	cmp	r2, r0
2401622c:	db6f      	blt.n	2401630e <__ieee754_fmod+0x1c2>
2401622e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
24016232:	4323      	orrs	r3, r4
24016234:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
24016238:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
2401623c:	460c      	mov	r4, r1
2401623e:	ec45 4b10 	vmov	d0, r4, r5
24016242:	e7a3      	b.n	2401618c <__ieee754_fmod+0x40>
24016244:	3801      	subs	r0, #1
24016246:	0052      	lsls	r2, r2, #1
24016248:	e7bc      	b.n	240161c4 <__ieee754_fmod+0x78>
2401624a:	4847      	ldr	r0, [pc, #284]	; (24016368 <__ieee754_fmod+0x21c>)
2401624c:	02da      	lsls	r2, r3, #11
2401624e:	2a00      	cmp	r2, #0
24016250:	ddba      	ble.n	240161c8 <__ieee754_fmod+0x7c>
24016252:	3801      	subs	r0, #1
24016254:	0052      	lsls	r2, r2, #1
24016256:	e7fa      	b.n	2401624e <__ieee754_fmod+0x102>
24016258:	1518      	asrs	r0, r3, #20
2401625a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
2401625e:	e7b3      	b.n	240161c8 <__ieee754_fmod+0x7c>
24016260:	3a01      	subs	r2, #1
24016262:	ea4f 0848 	mov.w	r8, r8, lsl #1
24016266:	e7b8      	b.n	240161da <__ieee754_fmod+0x8e>
24016268:	4a3f      	ldr	r2, [pc, #252]	; (24016368 <__ieee754_fmod+0x21c>)
2401626a:	ea4f 28c7 	mov.w	r8, r7, lsl #11
2401626e:	f1b8 0f00 	cmp.w	r8, #0
24016272:	ddb5      	ble.n	240161e0 <__ieee754_fmod+0x94>
24016274:	3a01      	subs	r2, #1
24016276:	ea4f 0848 	mov.w	r8, r8, lsl #1
2401627a:	e7f8      	b.n	2401626e <__ieee754_fmod+0x122>
2401627c:	153a      	asrs	r2, r7, #20
2401627e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
24016282:	e7ad      	b.n	240161e0 <__ieee754_fmod+0x94>
24016284:	eba8 0100 	sub.w	r1, r8, r0
24016288:	291f      	cmp	r1, #31
2401628a:	dc09      	bgt.n	240162a0 <__ieee754_fmod+0x154>
2401628c:	f200 481e 	addw	r8, r0, #1054	; 0x41e
24016290:	408b      	lsls	r3, r1
24016292:	fa2e f808 	lsr.w	r8, lr, r8
24016296:	ea48 0303 	orr.w	r3, r8, r3
2401629a:	fa0e f101 	lsl.w	r1, lr, r1
2401629e:	e7a7      	b.n	240161f0 <__ieee754_fmod+0xa4>
240162a0:	4b32      	ldr	r3, [pc, #200]	; (2401636c <__ieee754_fmod+0x220>)
240162a2:	1a1b      	subs	r3, r3, r0
240162a4:	fa0e f303 	lsl.w	r3, lr, r3
240162a8:	2100      	movs	r1, #0
240162aa:	e7a1      	b.n	240161f0 <__ieee754_fmod+0xa4>
240162ac:	ebae 0c02 	sub.w	ip, lr, r2
240162b0:	f1bc 0f1f 	cmp.w	ip, #31
240162b4:	dc09      	bgt.n	240162ca <__ieee754_fmod+0x17e>
240162b6:	f202 451e 	addw	r5, r2, #1054	; 0x41e
240162ba:	fa07 f70c 	lsl.w	r7, r7, ip
240162be:	fa26 f505 	lsr.w	r5, r6, r5
240162c2:	433d      	orrs	r5, r7
240162c4:	fa06 fc0c 	lsl.w	ip, r6, ip
240162c8:	e79a      	b.n	24016200 <__ieee754_fmod+0xb4>
240162ca:	4d28      	ldr	r5, [pc, #160]	; (2401636c <__ieee754_fmod+0x220>)
240162cc:	1aad      	subs	r5, r5, r2
240162ce:	fa06 f505 	lsl.w	r5, r6, r5
240162d2:	f04f 0c00 	mov.w	ip, #0
240162d6:	e793      	b.n	24016200 <__ieee754_fmod+0xb4>
240162d8:	4561      	cmp	r1, ip
240162da:	bf38      	it	cc
240162dc:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
240162e0:	2e00      	cmp	r6, #0
240162e2:	da05      	bge.n	240162f0 <__ieee754_fmod+0x1a4>
240162e4:	0fce      	lsrs	r6, r1, #31
240162e6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
240162ea:	0049      	lsls	r1, r1, #1
240162ec:	3801      	subs	r0, #1
240162ee:	e788      	b.n	24016202 <__ieee754_fmod+0xb6>
240162f0:	ea56 0307 	orrs.w	r3, r6, r7
240162f4:	f43f af59 	beq.w	240161aa <__ieee754_fmod+0x5e>
240162f8:	0ffb      	lsrs	r3, r7, #31
240162fa:	eb03 0346 	add.w	r3, r3, r6, lsl #1
240162fe:	0079      	lsls	r1, r7, #1
24016300:	e7f4      	b.n	240162ec <__ieee754_fmod+0x1a0>
24016302:	0fc8      	lsrs	r0, r1, #31
24016304:	eb00 0343 	add.w	r3, r0, r3, lsl #1
24016308:	0049      	lsls	r1, r1, #1
2401630a:	3a01      	subs	r2, #1
2401630c:	e789      	b.n	24016222 <__ieee754_fmod+0xd6>
2401630e:	1a80      	subs	r0, r0, r2
24016310:	2814      	cmp	r0, #20
24016312:	dc0c      	bgt.n	2401632e <__ieee754_fmod+0x1e2>
24016314:	f202 421e 	addw	r2, r2, #1054	; 0x41e
24016318:	fa03 f202 	lsl.w	r2, r3, r2
2401631c:	40c1      	lsrs	r1, r0
2401631e:	430a      	orrs	r2, r1
24016320:	4103      	asrs	r3, r0
24016322:	ea43 0104 	orr.w	r1, r3, r4
24016326:	4610      	mov	r0, r2
24016328:	ec41 0b10 	vmov	d0, r0, r1
2401632c:	e72e      	b.n	2401618c <__ieee754_fmod+0x40>
2401632e:	281f      	cmp	r0, #31
24016330:	dc07      	bgt.n	24016342 <__ieee754_fmod+0x1f6>
24016332:	f202 421e 	addw	r2, r2, #1054	; 0x41e
24016336:	40c1      	lsrs	r1, r0
24016338:	fa03 f202 	lsl.w	r2, r3, r2
2401633c:	430a      	orrs	r2, r1
2401633e:	4623      	mov	r3, r4
24016340:	e7ef      	b.n	24016322 <__ieee754_fmod+0x1d6>
24016342:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
24016346:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
2401634a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
2401634e:	32e2      	adds	r2, #226	; 0xe2
24016350:	fa43 f202 	asr.w	r2, r3, r2
24016354:	e7f3      	b.n	2401633e <__ieee754_fmod+0x1f2>
24016356:	bf00      	nop
24016358:	7fefffff 	.word	0x7fefffff
2401635c:	7ff00000 	.word	0x7ff00000
24016360:	2402d0c0 	.word	0x2402d0c0
24016364:	fffffbed 	.word	0xfffffbed
24016368:	fffffc02 	.word	0xfffffc02
2401636c:	fffffbe2 	.word	0xfffffbe2

24016370 <__ieee754_rem_pio2>:
24016370:	b570      	push	{r4, r5, r6, lr}
24016372:	eeb0 7b40 	vmov.f64	d7, d0
24016376:	ee17 5a90 	vmov	r5, s15
2401637a:	4b99      	ldr	r3, [pc, #612]	; (240165e0 <__ieee754_rem_pio2+0x270>)
2401637c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
24016380:	429e      	cmp	r6, r3
24016382:	b088      	sub	sp, #32
24016384:	4604      	mov	r4, r0
24016386:	dc07      	bgt.n	24016398 <__ieee754_rem_pio2+0x28>
24016388:	2200      	movs	r2, #0
2401638a:	2300      	movs	r3, #0
2401638c:	ed84 0b00 	vstr	d0, [r4]
24016390:	e9c0 2302 	strd	r2, r3, [r0, #8]
24016394:	2000      	movs	r0, #0
24016396:	e01b      	b.n	240163d0 <__ieee754_rem_pio2+0x60>
24016398:	4b92      	ldr	r3, [pc, #584]	; (240165e4 <__ieee754_rem_pio2+0x274>)
2401639a:	429e      	cmp	r6, r3
2401639c:	dc3b      	bgt.n	24016416 <__ieee754_rem_pio2+0xa6>
2401639e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
240163a2:	2d00      	cmp	r5, #0
240163a4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 240165a0 <__ieee754_rem_pio2+0x230>
240163a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
240163ac:	dd19      	ble.n	240163e2 <__ieee754_rem_pio2+0x72>
240163ae:	ee30 7b46 	vsub.f64	d7, d0, d6
240163b2:	429e      	cmp	r6, r3
240163b4:	d00e      	beq.n	240163d4 <__ieee754_rem_pio2+0x64>
240163b6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 240165a8 <__ieee754_rem_pio2+0x238>
240163ba:	ee37 5b46 	vsub.f64	d5, d7, d6
240163be:	ee37 7b45 	vsub.f64	d7, d7, d5
240163c2:	ed84 5b00 	vstr	d5, [r4]
240163c6:	ee37 7b46 	vsub.f64	d7, d7, d6
240163ca:	ed84 7b02 	vstr	d7, [r4, #8]
240163ce:	2001      	movs	r0, #1
240163d0:	b008      	add	sp, #32
240163d2:	bd70      	pop	{r4, r5, r6, pc}
240163d4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 240165b0 <__ieee754_rem_pio2+0x240>
240163d8:	ee37 7b46 	vsub.f64	d7, d7, d6
240163dc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 240165b8 <__ieee754_rem_pio2+0x248>
240163e0:	e7eb      	b.n	240163ba <__ieee754_rem_pio2+0x4a>
240163e2:	429e      	cmp	r6, r3
240163e4:	ee30 7b06 	vadd.f64	d7, d0, d6
240163e8:	d00e      	beq.n	24016408 <__ieee754_rem_pio2+0x98>
240163ea:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 240165a8 <__ieee754_rem_pio2+0x238>
240163ee:	ee37 5b06 	vadd.f64	d5, d7, d6
240163f2:	ee37 7b45 	vsub.f64	d7, d7, d5
240163f6:	ed84 5b00 	vstr	d5, [r4]
240163fa:	ee37 7b06 	vadd.f64	d7, d7, d6
240163fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24016402:	ed84 7b02 	vstr	d7, [r4, #8]
24016406:	e7e3      	b.n	240163d0 <__ieee754_rem_pio2+0x60>
24016408:	ed9f 6b69 	vldr	d6, [pc, #420]	; 240165b0 <__ieee754_rem_pio2+0x240>
2401640c:	ee37 7b06 	vadd.f64	d7, d7, d6
24016410:	ed9f 6b69 	vldr	d6, [pc, #420]	; 240165b8 <__ieee754_rem_pio2+0x248>
24016414:	e7eb      	b.n	240163ee <__ieee754_rem_pio2+0x7e>
24016416:	4b74      	ldr	r3, [pc, #464]	; (240165e8 <__ieee754_rem_pio2+0x278>)
24016418:	429e      	cmp	r6, r3
2401641a:	dc70      	bgt.n	240164fe <__ieee754_rem_pio2+0x18e>
2401641c:	f001 fa0a 	bl	24017834 <fabs>
24016420:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24016424:	ed9f 6b66 	vldr	d6, [pc, #408]	; 240165c0 <__ieee754_rem_pio2+0x250>
24016428:	eea0 7b06 	vfma.f64	d7, d0, d6
2401642c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
24016430:	eeb8 5be7 	vcvt.f64.s32	d5, s15
24016434:	ee17 0a90 	vmov	r0, s15
24016438:	eeb1 4b45 	vneg.f64	d4, d5
2401643c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 240165a0 <__ieee754_rem_pio2+0x230>
24016440:	eea5 0b47 	vfms.f64	d0, d5, d7
24016444:	ed9f 7b58 	vldr	d7, [pc, #352]	; 240165a8 <__ieee754_rem_pio2+0x238>
24016448:	281f      	cmp	r0, #31
2401644a:	ee25 7b07 	vmul.f64	d7, d5, d7
2401644e:	ee30 6b47 	vsub.f64	d6, d0, d7
24016452:	dc08      	bgt.n	24016466 <__ieee754_rem_pio2+0xf6>
24016454:	4b65      	ldr	r3, [pc, #404]	; (240165ec <__ieee754_rem_pio2+0x27c>)
24016456:	1e42      	subs	r2, r0, #1
24016458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2401645c:	42b3      	cmp	r3, r6
2401645e:	d002      	beq.n	24016466 <__ieee754_rem_pio2+0xf6>
24016460:	ed84 6b00 	vstr	d6, [r4]
24016464:	e026      	b.n	240164b4 <__ieee754_rem_pio2+0x144>
24016466:	ee16 3a90 	vmov	r3, s13
2401646a:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401646e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
24016472:	2b10      	cmp	r3, #16
24016474:	ea4f 5226 	mov.w	r2, r6, asr #20
24016478:	ddf2      	ble.n	24016460 <__ieee754_rem_pio2+0xf0>
2401647a:	eeb0 6b40 	vmov.f64	d6, d0
2401647e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 240165b0 <__ieee754_rem_pio2+0x240>
24016482:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 240165b8 <__ieee754_rem_pio2+0x248>
24016486:	eea4 6b07 	vfma.f64	d6, d4, d7
2401648a:	ee30 0b46 	vsub.f64	d0, d0, d6
2401648e:	eea4 0b07 	vfma.f64	d0, d4, d7
24016492:	eeb0 7b40 	vmov.f64	d7, d0
24016496:	ee95 7b03 	vfnms.f64	d7, d5, d3
2401649a:	ee36 3b47 	vsub.f64	d3, d6, d7
2401649e:	ee13 3a90 	vmov	r3, s7
240164a2:	f3c3 530a 	ubfx	r3, r3, #20, #11
240164a6:	1ad3      	subs	r3, r2, r3
240164a8:	2b31      	cmp	r3, #49	; 0x31
240164aa:	dc17      	bgt.n	240164dc <__ieee754_rem_pio2+0x16c>
240164ac:	eeb0 0b46 	vmov.f64	d0, d6
240164b0:	ed84 3b00 	vstr	d3, [r4]
240164b4:	ed94 6b00 	vldr	d6, [r4]
240164b8:	2d00      	cmp	r5, #0
240164ba:	ee30 0b46 	vsub.f64	d0, d0, d6
240164be:	ee30 0b47 	vsub.f64	d0, d0, d7
240164c2:	ed84 0b02 	vstr	d0, [r4, #8]
240164c6:	da83      	bge.n	240163d0 <__ieee754_rem_pio2+0x60>
240164c8:	eeb1 6b46 	vneg.f64	d6, d6
240164cc:	eeb1 0b40 	vneg.f64	d0, d0
240164d0:	ed84 6b00 	vstr	d6, [r4]
240164d4:	ed84 0b02 	vstr	d0, [r4, #8]
240164d8:	4240      	negs	r0, r0
240164da:	e779      	b.n	240163d0 <__ieee754_rem_pio2+0x60>
240164dc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 240165c8 <__ieee754_rem_pio2+0x258>
240164e0:	eeb0 0b46 	vmov.f64	d0, d6
240164e4:	eea4 0b03 	vfma.f64	d0, d4, d3
240164e8:	ee36 7b40 	vsub.f64	d7, d6, d0
240164ec:	ed9f 6b38 	vldr	d6, [pc, #224]	; 240165d0 <__ieee754_rem_pio2+0x260>
240164f0:	eea4 7b03 	vfma.f64	d7, d4, d3
240164f4:	ee95 7b06 	vfnms.f64	d7, d5, d6
240164f8:	ee30 6b47 	vsub.f64	d6, d0, d7
240164fc:	e7b0      	b.n	24016460 <__ieee754_rem_pio2+0xf0>
240164fe:	4b3c      	ldr	r3, [pc, #240]	; (240165f0 <__ieee754_rem_pio2+0x280>)
24016500:	429e      	cmp	r6, r3
24016502:	dd06      	ble.n	24016512 <__ieee754_rem_pio2+0x1a2>
24016504:	ee30 7b40 	vsub.f64	d7, d0, d0
24016508:	ed80 7b02 	vstr	d7, [r0, #8]
2401650c:	ed80 7b00 	vstr	d7, [r0]
24016510:	e740      	b.n	24016394 <__ieee754_rem_pio2+0x24>
24016512:	1532      	asrs	r2, r6, #20
24016514:	ee10 0a10 	vmov	r0, s0
24016518:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
2401651c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
24016520:	ec41 0b17 	vmov	d7, r0, r1
24016524:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24016528:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 240165d8 <__ieee754_rem_pio2+0x268>
2401652c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24016530:	ee37 7b46 	vsub.f64	d7, d7, d6
24016534:	ed8d 6b02 	vstr	d6, [sp, #8]
24016538:	ee27 7b05 	vmul.f64	d7, d7, d5
2401653c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24016540:	a902      	add	r1, sp, #8
24016542:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24016546:	ee37 7b46 	vsub.f64	d7, d7, d6
2401654a:	ed8d 6b04 	vstr	d6, [sp, #16]
2401654e:	ee27 7b05 	vmul.f64	d7, d7, d5
24016552:	ed8d 7b06 	vstr	d7, [sp, #24]
24016556:	2603      	movs	r6, #3
24016558:	4608      	mov	r0, r1
2401655a:	ed91 7b04 	vldr	d7, [r1, #16]
2401655e:	eeb5 7b40 	vcmp.f64	d7, #0.0
24016562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016566:	4633      	mov	r3, r6
24016568:	f1a1 0108 	sub.w	r1, r1, #8
2401656c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
24016570:	d0f3      	beq.n	2401655a <__ieee754_rem_pio2+0x1ea>
24016572:	4920      	ldr	r1, [pc, #128]	; (240165f4 <__ieee754_rem_pio2+0x284>)
24016574:	9101      	str	r1, [sp, #4]
24016576:	2102      	movs	r1, #2
24016578:	9100      	str	r1, [sp, #0]
2401657a:	4621      	mov	r1, r4
2401657c:	f000 fa54 	bl	24016a28 <__kernel_rem_pio2>
24016580:	2d00      	cmp	r5, #0
24016582:	f6bf af25 	bge.w	240163d0 <__ieee754_rem_pio2+0x60>
24016586:	ed94 7b00 	vldr	d7, [r4]
2401658a:	eeb1 7b47 	vneg.f64	d7, d7
2401658e:	ed84 7b00 	vstr	d7, [r4]
24016592:	ed94 7b02 	vldr	d7, [r4, #8]
24016596:	eeb1 7b47 	vneg.f64	d7, d7
2401659a:	ed84 7b02 	vstr	d7, [r4, #8]
2401659e:	e79b      	b.n	240164d8 <__ieee754_rem_pio2+0x168>
240165a0:	54400000 	.word	0x54400000
240165a4:	3ff921fb 	.word	0x3ff921fb
240165a8:	1a626331 	.word	0x1a626331
240165ac:	3dd0b461 	.word	0x3dd0b461
240165b0:	1a600000 	.word	0x1a600000
240165b4:	3dd0b461 	.word	0x3dd0b461
240165b8:	2e037073 	.word	0x2e037073
240165bc:	3ba3198a 	.word	0x3ba3198a
240165c0:	6dc9c883 	.word	0x6dc9c883
240165c4:	3fe45f30 	.word	0x3fe45f30
240165c8:	2e000000 	.word	0x2e000000
240165cc:	3ba3198a 	.word	0x3ba3198a
240165d0:	252049c1 	.word	0x252049c1
240165d4:	397b839a 	.word	0x397b839a
240165d8:	00000000 	.word	0x00000000
240165dc:	41700000 	.word	0x41700000
240165e0:	3fe921fb 	.word	0x3fe921fb
240165e4:	4002d97b 	.word	0x4002d97b
240165e8:	413921fb 	.word	0x413921fb
240165ec:	2402d0d0 	.word	0x2402d0d0
240165f0:	7fefffff 	.word	0x7fefffff
240165f4:	2402d150 	.word	0x2402d150

240165f8 <__ieee754_fmodf>:
240165f8:	b5f0      	push	{r4, r5, r6, r7, lr}
240165fa:	ee10 5a90 	vmov	r5, s1
240165fe:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
24016602:	d009      	beq.n	24016618 <__ieee754_fmodf+0x20>
24016604:	ee10 2a10 	vmov	r2, s0
24016608:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401660c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24016610:	da02      	bge.n	24016618 <__ieee754_fmodf+0x20>
24016612:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
24016616:	dd04      	ble.n	24016622 <__ieee754_fmodf+0x2a>
24016618:	ee60 0a20 	vmul.f32	s1, s0, s1
2401661c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
24016620:	bdf0      	pop	{r4, r5, r6, r7, pc}
24016622:	42a3      	cmp	r3, r4
24016624:	dbfc      	blt.n	24016620 <__ieee754_fmodf+0x28>
24016626:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
2401662a:	d105      	bne.n	24016638 <__ieee754_fmodf+0x40>
2401662c:	4b32      	ldr	r3, [pc, #200]	; (240166f8 <__ieee754_fmodf+0x100>)
2401662e:	eb03 7356 	add.w	r3, r3, r6, lsr #29
24016632:	ed93 0a00 	vldr	s0, [r3]
24016636:	e7f3      	b.n	24016620 <__ieee754_fmodf+0x28>
24016638:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
2401663c:	d13f      	bne.n	240166be <__ieee754_fmodf+0xc6>
2401663e:	0219      	lsls	r1, r3, #8
24016640:	f06f 007d 	mvn.w	r0, #125	; 0x7d
24016644:	2900      	cmp	r1, #0
24016646:	dc37      	bgt.n	240166b8 <__ieee754_fmodf+0xc0>
24016648:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
2401664c:	d13d      	bne.n	240166ca <__ieee754_fmodf+0xd2>
2401664e:	0227      	lsls	r7, r4, #8
24016650:	f06f 017d 	mvn.w	r1, #125	; 0x7d
24016654:	2f00      	cmp	r7, #0
24016656:	da35      	bge.n	240166c4 <__ieee754_fmodf+0xcc>
24016658:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
2401665c:	bfbb      	ittet	lt
2401665e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
24016662:	1a12      	sublt	r2, r2, r0
24016664:	f3c2 0316 	ubfxge	r3, r2, #0, #23
24016668:	4093      	lsllt	r3, r2
2401666a:	bfa8      	it	ge
2401666c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
24016670:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
24016674:	bfb5      	itete	lt
24016676:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
2401667a:	f3c5 0416 	ubfxge	r4, r5, #0, #23
2401667e:	1a52      	sublt	r2, r2, r1
24016680:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
24016684:	bfb8      	it	lt
24016686:	4094      	lsllt	r4, r2
24016688:	1a40      	subs	r0, r0, r1
2401668a:	1b1a      	subs	r2, r3, r4
2401668c:	bb00      	cbnz	r0, 240166d0 <__ieee754_fmodf+0xd8>
2401668e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
24016692:	bf38      	it	cc
24016694:	4613      	movcc	r3, r2
24016696:	2b00      	cmp	r3, #0
24016698:	d0c8      	beq.n	2401662c <__ieee754_fmodf+0x34>
2401669a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2401669e:	db1f      	blt.n	240166e0 <__ieee754_fmodf+0xe8>
240166a0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
240166a4:	db1f      	blt.n	240166e6 <__ieee754_fmodf+0xee>
240166a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
240166aa:	317f      	adds	r1, #127	; 0x7f
240166ac:	4333      	orrs	r3, r6
240166ae:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
240166b2:	ee00 3a10 	vmov	s0, r3
240166b6:	e7b3      	b.n	24016620 <__ieee754_fmodf+0x28>
240166b8:	3801      	subs	r0, #1
240166ba:	0049      	lsls	r1, r1, #1
240166bc:	e7c2      	b.n	24016644 <__ieee754_fmodf+0x4c>
240166be:	15d8      	asrs	r0, r3, #23
240166c0:	387f      	subs	r0, #127	; 0x7f
240166c2:	e7c1      	b.n	24016648 <__ieee754_fmodf+0x50>
240166c4:	3901      	subs	r1, #1
240166c6:	007f      	lsls	r7, r7, #1
240166c8:	e7c4      	b.n	24016654 <__ieee754_fmodf+0x5c>
240166ca:	15e1      	asrs	r1, r4, #23
240166cc:	397f      	subs	r1, #127	; 0x7f
240166ce:	e7c3      	b.n	24016658 <__ieee754_fmodf+0x60>
240166d0:	2a00      	cmp	r2, #0
240166d2:	da02      	bge.n	240166da <__ieee754_fmodf+0xe2>
240166d4:	005b      	lsls	r3, r3, #1
240166d6:	3801      	subs	r0, #1
240166d8:	e7d7      	b.n	2401668a <__ieee754_fmodf+0x92>
240166da:	d0a7      	beq.n	2401662c <__ieee754_fmodf+0x34>
240166dc:	0053      	lsls	r3, r2, #1
240166de:	e7fa      	b.n	240166d6 <__ieee754_fmodf+0xde>
240166e0:	005b      	lsls	r3, r3, #1
240166e2:	3901      	subs	r1, #1
240166e4:	e7d9      	b.n	2401669a <__ieee754_fmodf+0xa2>
240166e6:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
240166ea:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
240166ee:	3182      	adds	r1, #130	; 0x82
240166f0:	410b      	asrs	r3, r1
240166f2:	4333      	orrs	r3, r6
240166f4:	e7dd      	b.n	240166b2 <__ieee754_fmodf+0xba>
240166f6:	bf00      	nop
240166f8:	2402d258 	.word	0x2402d258

240166fc <__ieee754_log10f>:
240166fc:	b508      	push	{r3, lr}
240166fe:	ee10 2a10 	vmov	r2, s0
24016702:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
24016706:	ed2d 8b02 	vpush	{d8}
2401670a:	d108      	bne.n	2401671e <__ieee754_log10f+0x22>
2401670c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 24016794 <__ieee754_log10f+0x98>
24016710:	eddf 7a21 	vldr	s15, [pc, #132]	; 24016798 <__ieee754_log10f+0x9c>
24016714:	ee87 0a27 	vdiv.f32	s0, s14, s15
24016718:	ecbd 8b02 	vpop	{d8}
2401671c:	bd08      	pop	{r3, pc}
2401671e:	2a00      	cmp	r2, #0
24016720:	da02      	bge.n	24016728 <__ieee754_log10f+0x2c>
24016722:	ee30 7a40 	vsub.f32	s14, s0, s0
24016726:	e7f3      	b.n	24016710 <__ieee754_log10f+0x14>
24016728:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401672c:	db02      	blt.n	24016734 <__ieee754_log10f+0x38>
2401672e:	ee30 0a00 	vadd.f32	s0, s0, s0
24016732:	e7f1      	b.n	24016718 <__ieee754_log10f+0x1c>
24016734:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
24016738:	bfbf      	itttt	lt
2401673a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 2401679c <__ieee754_log10f+0xa0>
2401673e:	ee60 7a27 	vmullt.f32	s15, s0, s15
24016742:	f06f 0118 	mvnlt.w	r1, #24
24016746:	ee17 2a90 	vmovlt	r2, s15
2401674a:	ea4f 53e2 	mov.w	r3, r2, asr #23
2401674e:	bfa8      	it	ge
24016750:	2100      	movge	r1, #0
24016752:	3b7f      	subs	r3, #127	; 0x7f
24016754:	440b      	add	r3, r1
24016756:	0fd9      	lsrs	r1, r3, #31
24016758:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2401675c:	ee07 3a90 	vmov	s15, r3
24016760:	f3c2 0216 	ubfx	r2, r2, #0, #23
24016764:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
24016768:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
2401676c:	ee00 3a10 	vmov	s0, r3
24016770:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
24016774:	f7ff f9d8 	bl	24015b28 <logf>
24016778:	eddf 7a09 	vldr	s15, [pc, #36]	; 240167a0 <__ieee754_log10f+0xa4>
2401677c:	ee20 0a27 	vmul.f32	s0, s0, s15
24016780:	eddf 7a08 	vldr	s15, [pc, #32]	; 240167a4 <__ieee754_log10f+0xa8>
24016784:	eea8 0a27 	vfma.f32	s0, s16, s15
24016788:	eddf 7a07 	vldr	s15, [pc, #28]	; 240167a8 <__ieee754_log10f+0xac>
2401678c:	eea8 0a27 	vfma.f32	s0, s16, s15
24016790:	e7c2      	b.n	24016718 <__ieee754_log10f+0x1c>
24016792:	bf00      	nop
24016794:	cc000000 	.word	0xcc000000
24016798:	00000000 	.word	0x00000000
2401679c:	4c000000 	.word	0x4c000000
240167a0:	3ede5bd9 	.word	0x3ede5bd9
240167a4:	355427db 	.word	0x355427db
240167a8:	3e9a2080 	.word	0x3e9a2080

240167ac <__ieee754_rem_pio2f>:
240167ac:	b5f0      	push	{r4, r5, r6, r7, lr}
240167ae:	ee10 6a10 	vmov	r6, s0
240167b2:	4b8e      	ldr	r3, [pc, #568]	; (240169ec <__ieee754_rem_pio2f+0x240>)
240167b4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
240167b8:	429d      	cmp	r5, r3
240167ba:	b087      	sub	sp, #28
240167bc:	eef0 7a40 	vmov.f32	s15, s0
240167c0:	4604      	mov	r4, r0
240167c2:	dc05      	bgt.n	240167d0 <__ieee754_rem_pio2f+0x24>
240167c4:	2300      	movs	r3, #0
240167c6:	ed80 0a00 	vstr	s0, [r0]
240167ca:	6043      	str	r3, [r0, #4]
240167cc:	2000      	movs	r0, #0
240167ce:	e01a      	b.n	24016806 <__ieee754_rem_pio2f+0x5a>
240167d0:	4b87      	ldr	r3, [pc, #540]	; (240169f0 <__ieee754_rem_pio2f+0x244>)
240167d2:	429d      	cmp	r5, r3
240167d4:	dc46      	bgt.n	24016864 <__ieee754_rem_pio2f+0xb8>
240167d6:	2e00      	cmp	r6, #0
240167d8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 240169f4 <__ieee754_rem_pio2f+0x248>
240167dc:	4b86      	ldr	r3, [pc, #536]	; (240169f8 <__ieee754_rem_pio2f+0x24c>)
240167de:	f025 050f 	bic.w	r5, r5, #15
240167e2:	dd1f      	ble.n	24016824 <__ieee754_rem_pio2f+0x78>
240167e4:	429d      	cmp	r5, r3
240167e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
240167ea:	d00e      	beq.n	2401680a <__ieee754_rem_pio2f+0x5e>
240167ec:	ed9f 7a83 	vldr	s14, [pc, #524]	; 240169fc <__ieee754_rem_pio2f+0x250>
240167f0:	ee37 0ac7 	vsub.f32	s0, s15, s14
240167f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
240167f8:	ed80 0a00 	vstr	s0, [r0]
240167fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016800:	2001      	movs	r0, #1
24016802:	edc4 7a01 	vstr	s15, [r4, #4]
24016806:	b007      	add	sp, #28
24016808:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401680a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24016a00 <__ieee754_rem_pio2f+0x254>
2401680e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 24016a04 <__ieee754_rem_pio2f+0x258>
24016812:	ee77 7ac0 	vsub.f32	s15, s15, s0
24016816:	ee77 6ac7 	vsub.f32	s13, s15, s14
2401681a:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401681e:	edc0 6a00 	vstr	s13, [r0]
24016822:	e7eb      	b.n	240167fc <__ieee754_rem_pio2f+0x50>
24016824:	429d      	cmp	r5, r3
24016826:	ee77 7a80 	vadd.f32	s15, s15, s0
2401682a:	d00e      	beq.n	2401684a <__ieee754_rem_pio2f+0x9e>
2401682c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 240169fc <__ieee754_rem_pio2f+0x250>
24016830:	ee37 0a87 	vadd.f32	s0, s15, s14
24016834:	ee77 7ac0 	vsub.f32	s15, s15, s0
24016838:	ed80 0a00 	vstr	s0, [r0]
2401683c:	ee77 7a87 	vadd.f32	s15, s15, s14
24016840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24016844:	edc4 7a01 	vstr	s15, [r4, #4]
24016848:	e7dd      	b.n	24016806 <__ieee754_rem_pio2f+0x5a>
2401684a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24016a00 <__ieee754_rem_pio2f+0x254>
2401684e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 24016a04 <__ieee754_rem_pio2f+0x258>
24016852:	ee77 7a80 	vadd.f32	s15, s15, s0
24016856:	ee77 6a87 	vadd.f32	s13, s15, s14
2401685a:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401685e:	edc0 6a00 	vstr	s13, [r0]
24016862:	e7eb      	b.n	2401683c <__ieee754_rem_pio2f+0x90>
24016864:	4b68      	ldr	r3, [pc, #416]	; (24016a08 <__ieee754_rem_pio2f+0x25c>)
24016866:	429d      	cmp	r5, r3
24016868:	dc72      	bgt.n	24016950 <__ieee754_rem_pio2f+0x1a4>
2401686a:	f7ff f955 	bl	24015b18 <fabsf>
2401686e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24016a0c <__ieee754_rem_pio2f+0x260>
24016872:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24016876:	eee0 7a07 	vfma.f32	s15, s0, s14
2401687a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401687e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24016882:	ee17 0a90 	vmov	r0, s15
24016886:	eddf 7a5b 	vldr	s15, [pc, #364]	; 240169f4 <__ieee754_rem_pio2f+0x248>
2401688a:	eea7 0a67 	vfms.f32	s0, s14, s15
2401688e:	281f      	cmp	r0, #31
24016890:	eddf 7a5a 	vldr	s15, [pc, #360]	; 240169fc <__ieee754_rem_pio2f+0x250>
24016894:	ee67 7a27 	vmul.f32	s15, s14, s15
24016898:	eeb1 6a47 	vneg.f32	s12, s14
2401689c:	ee70 6a67 	vsub.f32	s13, s0, s15
240168a0:	ee16 2a90 	vmov	r2, s13
240168a4:	dc1c      	bgt.n	240168e0 <__ieee754_rem_pio2f+0x134>
240168a6:	495a      	ldr	r1, [pc, #360]	; (24016a10 <__ieee754_rem_pio2f+0x264>)
240168a8:	1e47      	subs	r7, r0, #1
240168aa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
240168ae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
240168b2:	428b      	cmp	r3, r1
240168b4:	d014      	beq.n	240168e0 <__ieee754_rem_pio2f+0x134>
240168b6:	6022      	str	r2, [r4, #0]
240168b8:	ed94 7a00 	vldr	s14, [r4]
240168bc:	ee30 0a47 	vsub.f32	s0, s0, s14
240168c0:	2e00      	cmp	r6, #0
240168c2:	ee30 0a67 	vsub.f32	s0, s0, s15
240168c6:	ed84 0a01 	vstr	s0, [r4, #4]
240168ca:	da9c      	bge.n	24016806 <__ieee754_rem_pio2f+0x5a>
240168cc:	eeb1 7a47 	vneg.f32	s14, s14
240168d0:	eeb1 0a40 	vneg.f32	s0, s0
240168d4:	ed84 7a00 	vstr	s14, [r4]
240168d8:	ed84 0a01 	vstr	s0, [r4, #4]
240168dc:	4240      	negs	r0, r0
240168de:	e792      	b.n	24016806 <__ieee754_rem_pio2f+0x5a>
240168e0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
240168e4:	15eb      	asrs	r3, r5, #23
240168e6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
240168ea:	2d08      	cmp	r5, #8
240168ec:	dde3      	ble.n	240168b6 <__ieee754_rem_pio2f+0x10a>
240168ee:	eddf 7a44 	vldr	s15, [pc, #272]	; 24016a00 <__ieee754_rem_pio2f+0x254>
240168f2:	eddf 5a44 	vldr	s11, [pc, #272]	; 24016a04 <__ieee754_rem_pio2f+0x258>
240168f6:	eef0 6a40 	vmov.f32	s13, s0
240168fa:	eee6 6a27 	vfma.f32	s13, s12, s15
240168fe:	ee30 0a66 	vsub.f32	s0, s0, s13
24016902:	eea6 0a27 	vfma.f32	s0, s12, s15
24016906:	eef0 7a40 	vmov.f32	s15, s0
2401690a:	eed7 7a25 	vfnms.f32	s15, s14, s11
2401690e:	ee76 5ae7 	vsub.f32	s11, s13, s15
24016912:	ee15 2a90 	vmov	r2, s11
24016916:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401691a:	1a5b      	subs	r3, r3, r1
2401691c:	2b19      	cmp	r3, #25
2401691e:	dc04      	bgt.n	2401692a <__ieee754_rem_pio2f+0x17e>
24016920:	edc4 5a00 	vstr	s11, [r4]
24016924:	eeb0 0a66 	vmov.f32	s0, s13
24016928:	e7c6      	b.n	240168b8 <__ieee754_rem_pio2f+0x10c>
2401692a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24016a14 <__ieee754_rem_pio2f+0x268>
2401692e:	eeb0 0a66 	vmov.f32	s0, s13
24016932:	eea6 0a25 	vfma.f32	s0, s12, s11
24016936:	ee76 7ac0 	vsub.f32	s15, s13, s0
2401693a:	eddf 6a37 	vldr	s13, [pc, #220]	; 24016a18 <__ieee754_rem_pio2f+0x26c>
2401693e:	eee6 7a25 	vfma.f32	s15, s12, s11
24016942:	eed7 7a26 	vfnms.f32	s15, s14, s13
24016946:	ee30 7a67 	vsub.f32	s14, s0, s15
2401694a:	ed84 7a00 	vstr	s14, [r4]
2401694e:	e7b3      	b.n	240168b8 <__ieee754_rem_pio2f+0x10c>
24016950:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
24016954:	db06      	blt.n	24016964 <__ieee754_rem_pio2f+0x1b8>
24016956:	ee70 7a40 	vsub.f32	s15, s0, s0
2401695a:	edc0 7a01 	vstr	s15, [r0, #4]
2401695e:	edc0 7a00 	vstr	s15, [r0]
24016962:	e733      	b.n	240167cc <__ieee754_rem_pio2f+0x20>
24016964:	15ea      	asrs	r2, r5, #23
24016966:	3a86      	subs	r2, #134	; 0x86
24016968:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
2401696c:	ee07 3a90 	vmov	s15, r3
24016970:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24016974:	eddf 6a29 	vldr	s13, [pc, #164]	; 24016a1c <__ieee754_rem_pio2f+0x270>
24016978:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401697c:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016980:	ed8d 7a03 	vstr	s14, [sp, #12]
24016984:	ee67 7aa6 	vmul.f32	s15, s15, s13
24016988:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401698c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24016990:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016994:	ed8d 7a04 	vstr	s14, [sp, #16]
24016998:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401699c:	eef5 7a40 	vcmp.f32	s15, #0.0
240169a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240169a4:	edcd 7a05 	vstr	s15, [sp, #20]
240169a8:	d11e      	bne.n	240169e8 <__ieee754_rem_pio2f+0x23c>
240169aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
240169ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240169b2:	bf14      	ite	ne
240169b4:	2302      	movne	r3, #2
240169b6:	2301      	moveq	r3, #1
240169b8:	4919      	ldr	r1, [pc, #100]	; (24016a20 <__ieee754_rem_pio2f+0x274>)
240169ba:	9101      	str	r1, [sp, #4]
240169bc:	2102      	movs	r1, #2
240169be:	9100      	str	r1, [sp, #0]
240169c0:	a803      	add	r0, sp, #12
240169c2:	4621      	mov	r1, r4
240169c4:	f000 fbe0 	bl	24017188 <__kernel_rem_pio2f>
240169c8:	2e00      	cmp	r6, #0
240169ca:	f6bf af1c 	bge.w	24016806 <__ieee754_rem_pio2f+0x5a>
240169ce:	edd4 7a00 	vldr	s15, [r4]
240169d2:	eef1 7a67 	vneg.f32	s15, s15
240169d6:	edc4 7a00 	vstr	s15, [r4]
240169da:	edd4 7a01 	vldr	s15, [r4, #4]
240169de:	eef1 7a67 	vneg.f32	s15, s15
240169e2:	edc4 7a01 	vstr	s15, [r4, #4]
240169e6:	e779      	b.n	240168dc <__ieee754_rem_pio2f+0x130>
240169e8:	2303      	movs	r3, #3
240169ea:	e7e5      	b.n	240169b8 <__ieee754_rem_pio2f+0x20c>
240169ec:	3f490fd8 	.word	0x3f490fd8
240169f0:	4016cbe3 	.word	0x4016cbe3
240169f4:	3fc90f80 	.word	0x3fc90f80
240169f8:	3fc90fd0 	.word	0x3fc90fd0
240169fc:	37354443 	.word	0x37354443
24016a00:	37354400 	.word	0x37354400
24016a04:	2e85a308 	.word	0x2e85a308
24016a08:	43490f80 	.word	0x43490f80
24016a0c:	3f22f984 	.word	0x3f22f984
24016a10:	2402d260 	.word	0x2402d260
24016a14:	2e85a300 	.word	0x2e85a300
24016a18:	248d3132 	.word	0x248d3132
24016a1c:	43800000 	.word	0x43800000
24016a20:	2402d2e0 	.word	0x2402d2e0
24016a24:	00000000 	.word	0x00000000

24016a28 <__kernel_rem_pio2>:
24016a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016a2c:	ed2d 8b06 	vpush	{d8-d10}
24016a30:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
24016a34:	460f      	mov	r7, r1
24016a36:	9002      	str	r0, [sp, #8]
24016a38:	49c5      	ldr	r1, [pc, #788]	; (24016d50 <__kernel_rem_pio2+0x328>)
24016a3a:	98a2      	ldr	r0, [sp, #648]	; 0x288
24016a3c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
24016a40:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
24016a44:	9301      	str	r3, [sp, #4]
24016a46:	f112 0f14 	cmn.w	r2, #20
24016a4a:	bfa8      	it	ge
24016a4c:	2018      	movge	r0, #24
24016a4e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
24016a52:	bfb8      	it	lt
24016a54:	2000      	movlt	r0, #0
24016a56:	f06f 0417 	mvn.w	r4, #23
24016a5a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 24016d38 <__kernel_rem_pio2+0x310>
24016a5e:	bfa4      	itt	ge
24016a60:	f1a2 0a03 	subge.w	sl, r2, #3
24016a64:	fb9a f0f0 	sdivge	r0, sl, r0
24016a68:	fb00 4404 	mla	r4, r0, r4, r4
24016a6c:	1a46      	subs	r6, r0, r1
24016a6e:	4414      	add	r4, r2
24016a70:	eb09 0c01 	add.w	ip, r9, r1
24016a74:	ad1a      	add	r5, sp, #104	; 0x68
24016a76:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
24016a7a:	2200      	movs	r2, #0
24016a7c:	4562      	cmp	r2, ip
24016a7e:	dd10      	ble.n	24016aa2 <__kernel_rem_pio2+0x7a>
24016a80:	9a01      	ldr	r2, [sp, #4]
24016a82:	ab1a      	add	r3, sp, #104	; 0x68
24016a84:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24016a88:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
24016a8c:	f04f 0c00 	mov.w	ip, #0
24016a90:	45cc      	cmp	ip, r9
24016a92:	dc26      	bgt.n	24016ae2 <__kernel_rem_pio2+0xba>
24016a94:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 24016d38 <__kernel_rem_pio2+0x310>
24016a98:	f8dd 8008 	ldr.w	r8, [sp, #8]
24016a9c:	4616      	mov	r6, r2
24016a9e:	2500      	movs	r5, #0
24016aa0:	e015      	b.n	24016ace <__kernel_rem_pio2+0xa6>
24016aa2:	42d6      	cmn	r6, r2
24016aa4:	d409      	bmi.n	24016aba <__kernel_rem_pio2+0x92>
24016aa6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
24016aaa:	ee07 3a90 	vmov	s15, r3
24016aae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016ab2:	eca5 7b02 	vstmia	r5!, {d7}
24016ab6:	3201      	adds	r2, #1
24016ab8:	e7e0      	b.n	24016a7c <__kernel_rem_pio2+0x54>
24016aba:	eeb0 7b46 	vmov.f64	d7, d6
24016abe:	e7f8      	b.n	24016ab2 <__kernel_rem_pio2+0x8a>
24016ac0:	ecb8 5b02 	vldmia	r8!, {d5}
24016ac4:	ed96 6b00 	vldr	d6, [r6]
24016ac8:	3501      	adds	r5, #1
24016aca:	eea5 7b06 	vfma.f64	d7, d5, d6
24016ace:	428d      	cmp	r5, r1
24016ad0:	f1a6 0608 	sub.w	r6, r6, #8
24016ad4:	ddf4      	ble.n	24016ac0 <__kernel_rem_pio2+0x98>
24016ad6:	ecaa 7b02 	vstmia	sl!, {d7}
24016ada:	f10c 0c01 	add.w	ip, ip, #1
24016ade:	3208      	adds	r2, #8
24016ae0:	e7d6      	b.n	24016a90 <__kernel_rem_pio2+0x68>
24016ae2:	ab06      	add	r3, sp, #24
24016ae4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 24016d40 <__kernel_rem_pio2+0x318>
24016ae8:	ed9f ab97 	vldr	d10, [pc, #604]	; 24016d48 <__kernel_rem_pio2+0x320>
24016aec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
24016af0:	9303      	str	r3, [sp, #12]
24016af2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
24016af6:	464d      	mov	r5, r9
24016af8:	00eb      	lsls	r3, r5, #3
24016afa:	9304      	str	r3, [sp, #16]
24016afc:	ab92      	add	r3, sp, #584	; 0x248
24016afe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24016b02:	f10d 0b18 	add.w	fp, sp, #24
24016b06:	ab6a      	add	r3, sp, #424	; 0x1a8
24016b08:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
24016b0c:	465e      	mov	r6, fp
24016b0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24016b12:	4628      	mov	r0, r5
24016b14:	2800      	cmp	r0, #0
24016b16:	f1a2 0208 	sub.w	r2, r2, #8
24016b1a:	dc4c      	bgt.n	24016bb6 <__kernel_rem_pio2+0x18e>
24016b1c:	4620      	mov	r0, r4
24016b1e:	9105      	str	r1, [sp, #20]
24016b20:	f000 ff06 	bl	24017930 <scalbn>
24016b24:	eeb0 8b40 	vmov.f64	d8, d0
24016b28:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
24016b2c:	ee28 0b00 	vmul.f64	d0, d8, d0
24016b30:	f000 fe8a 	bl	24017848 <floor>
24016b34:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
24016b38:	eea0 8b47 	vfms.f64	d8, d0, d7
24016b3c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
24016b40:	2c00      	cmp	r4, #0
24016b42:	eeb8 0be7 	vcvt.f64.s32	d0, s15
24016b46:	ee17 8a90 	vmov	r8, s15
24016b4a:	ee38 8b40 	vsub.f64	d8, d8, d0
24016b4e:	9905      	ldr	r1, [sp, #20]
24016b50:	dd43      	ble.n	24016bda <__kernel_rem_pio2+0x1b2>
24016b52:	1e68      	subs	r0, r5, #1
24016b54:	ab06      	add	r3, sp, #24
24016b56:	f1c4 0c18 	rsb	ip, r4, #24
24016b5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
24016b5e:	fa46 f20c 	asr.w	r2, r6, ip
24016b62:	4490      	add	r8, r2
24016b64:	fa02 f20c 	lsl.w	r2, r2, ip
24016b68:	1ab6      	subs	r6, r6, r2
24016b6a:	f1c4 0217 	rsb	r2, r4, #23
24016b6e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
24016b72:	4116      	asrs	r6, r2
24016b74:	2e00      	cmp	r6, #0
24016b76:	dd3f      	ble.n	24016bf8 <__kernel_rem_pio2+0x1d0>
24016b78:	f04f 0c00 	mov.w	ip, #0
24016b7c:	f108 0801 	add.w	r8, r8, #1
24016b80:	4660      	mov	r0, ip
24016b82:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
24016b86:	4565      	cmp	r5, ip
24016b88:	dc6e      	bgt.n	24016c68 <__kernel_rem_pio2+0x240>
24016b8a:	2c00      	cmp	r4, #0
24016b8c:	dd04      	ble.n	24016b98 <__kernel_rem_pio2+0x170>
24016b8e:	2c01      	cmp	r4, #1
24016b90:	d07f      	beq.n	24016c92 <__kernel_rem_pio2+0x26a>
24016b92:	2c02      	cmp	r4, #2
24016b94:	f000 8087 	beq.w	24016ca6 <__kernel_rem_pio2+0x27e>
24016b98:	2e02      	cmp	r6, #2
24016b9a:	d12d      	bne.n	24016bf8 <__kernel_rem_pio2+0x1d0>
24016b9c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24016ba0:	ee30 8b48 	vsub.f64	d8, d0, d8
24016ba4:	b340      	cbz	r0, 24016bf8 <__kernel_rem_pio2+0x1d0>
24016ba6:	4620      	mov	r0, r4
24016ba8:	9105      	str	r1, [sp, #20]
24016baa:	f000 fec1 	bl	24017930 <scalbn>
24016bae:	9905      	ldr	r1, [sp, #20]
24016bb0:	ee38 8b40 	vsub.f64	d8, d8, d0
24016bb4:	e020      	b.n	24016bf8 <__kernel_rem_pio2+0x1d0>
24016bb6:	ee20 7b09 	vmul.f64	d7, d0, d9
24016bba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24016bbe:	3801      	subs	r0, #1
24016bc0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24016bc4:	eea7 0b4a 	vfms.f64	d0, d7, d10
24016bc8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016bcc:	eca6 0a01 	vstmia	r6!, {s0}
24016bd0:	ed92 0b00 	vldr	d0, [r2]
24016bd4:	ee37 0b00 	vadd.f64	d0, d7, d0
24016bd8:	e79c      	b.n	24016b14 <__kernel_rem_pio2+0xec>
24016bda:	d105      	bne.n	24016be8 <__kernel_rem_pio2+0x1c0>
24016bdc:	1e6a      	subs	r2, r5, #1
24016bde:	ab06      	add	r3, sp, #24
24016be0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
24016be4:	15f6      	asrs	r6, r6, #23
24016be6:	e7c5      	b.n	24016b74 <__kernel_rem_pio2+0x14c>
24016be8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24016bec:	eeb4 8bc7 	vcmpe.f64	d8, d7
24016bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016bf4:	da36      	bge.n	24016c64 <__kernel_rem_pio2+0x23c>
24016bf6:	2600      	movs	r6, #0
24016bf8:	eeb5 8b40 	vcmp.f64	d8, #0.0
24016bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016c00:	f040 80aa 	bne.w	24016d58 <__kernel_rem_pio2+0x330>
24016c04:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24016c08:	4658      	mov	r0, fp
24016c0a:	2200      	movs	r2, #0
24016c0c:	4548      	cmp	r0, r9
24016c0e:	da52      	bge.n	24016cb6 <__kernel_rem_pio2+0x28e>
24016c10:	2a00      	cmp	r2, #0
24016c12:	f000 8081 	beq.w	24016d18 <__kernel_rem_pio2+0x2f0>
24016c16:	ab06      	add	r3, sp, #24
24016c18:	3c18      	subs	r4, #24
24016c1a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
24016c1e:	2b00      	cmp	r3, #0
24016c20:	f000 8087 	beq.w	24016d32 <__kernel_rem_pio2+0x30a>
24016c24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24016c28:	4620      	mov	r0, r4
24016c2a:	f000 fe81 	bl	24017930 <scalbn>
24016c2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
24016c32:	ed9f 6b43 	vldr	d6, [pc, #268]	; 24016d40 <__kernel_rem_pio2+0x318>
24016c36:	a96a      	add	r1, sp, #424	; 0x1a8
24016c38:	f103 0208 	add.w	r2, r3, #8
24016c3c:	1888      	adds	r0, r1, r2
24016c3e:	4659      	mov	r1, fp
24016c40:	2900      	cmp	r1, #0
24016c42:	f280 80b7 	bge.w	24016db4 <__kernel_rem_pio2+0x38c>
24016c46:	4659      	mov	r1, fp
24016c48:	2900      	cmp	r1, #0
24016c4a:	f2c0 80d5 	blt.w	24016df8 <__kernel_rem_pio2+0x3d0>
24016c4e:	a86a      	add	r0, sp, #424	; 0x1a8
24016c50:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
24016c54:	ed9f 7b38 	vldr	d7, [pc, #224]	; 24016d38 <__kernel_rem_pio2+0x310>
24016c58:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 24016d54 <__kernel_rem_pio2+0x32c>
24016c5c:	2400      	movs	r4, #0
24016c5e:	ebab 0001 	sub.w	r0, fp, r1
24016c62:	e0be      	b.n	24016de2 <__kernel_rem_pio2+0x3ba>
24016c64:	2602      	movs	r6, #2
24016c66:	e787      	b.n	24016b78 <__kernel_rem_pio2+0x150>
24016c68:	f8db 2000 	ldr.w	r2, [fp]
24016c6c:	b958      	cbnz	r0, 24016c86 <__kernel_rem_pio2+0x25e>
24016c6e:	b122      	cbz	r2, 24016c7a <__kernel_rem_pio2+0x252>
24016c70:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
24016c74:	f8cb 2000 	str.w	r2, [fp]
24016c78:	2201      	movs	r2, #1
24016c7a:	f10c 0c01 	add.w	ip, ip, #1
24016c7e:	f10b 0b04 	add.w	fp, fp, #4
24016c82:	4610      	mov	r0, r2
24016c84:	e77f      	b.n	24016b86 <__kernel_rem_pio2+0x15e>
24016c86:	ebae 0202 	sub.w	r2, lr, r2
24016c8a:	f8cb 2000 	str.w	r2, [fp]
24016c8e:	4602      	mov	r2, r0
24016c90:	e7f3      	b.n	24016c7a <__kernel_rem_pio2+0x252>
24016c92:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24016c96:	ab06      	add	r3, sp, #24
24016c98:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24016c9c:	f3c2 0216 	ubfx	r2, r2, #0, #23
24016ca0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
24016ca4:	e778      	b.n	24016b98 <__kernel_rem_pio2+0x170>
24016ca6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24016caa:	ab06      	add	r3, sp, #24
24016cac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24016cb0:	f3c2 0215 	ubfx	r2, r2, #0, #22
24016cb4:	e7f4      	b.n	24016ca0 <__kernel_rem_pio2+0x278>
24016cb6:	ab06      	add	r3, sp, #24
24016cb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
24016cbc:	3801      	subs	r0, #1
24016cbe:	431a      	orrs	r2, r3
24016cc0:	e7a4      	b.n	24016c0c <__kernel_rem_pio2+0x1e4>
24016cc2:	f10c 0c01 	add.w	ip, ip, #1
24016cc6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
24016cca:	2800      	cmp	r0, #0
24016ccc:	d0f9      	beq.n	24016cc2 <__kernel_rem_pio2+0x29a>
24016cce:	9b04      	ldr	r3, [sp, #16]
24016cd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
24016cd4:	eb0d 0203 	add.w	r2, sp, r3
24016cd8:	9b01      	ldr	r3, [sp, #4]
24016cda:	18e8      	adds	r0, r5, r3
24016cdc:	ab1a      	add	r3, sp, #104	; 0x68
24016cde:	1c6e      	adds	r6, r5, #1
24016ce0:	3a98      	subs	r2, #152	; 0x98
24016ce2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
24016ce6:	4465      	add	r5, ip
24016ce8:	42b5      	cmp	r5, r6
24016cea:	f6ff af05 	blt.w	24016af8 <__kernel_rem_pio2+0xd0>
24016cee:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
24016cf2:	f8dd e008 	ldr.w	lr, [sp, #8]
24016cf6:	ee07 3a90 	vmov	s15, r3
24016cfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016cfe:	f04f 0c00 	mov.w	ip, #0
24016d02:	eca0 7b02 	vstmia	r0!, {d7}
24016d06:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24016d38 <__kernel_rem_pio2+0x310>
24016d0a:	4680      	mov	r8, r0
24016d0c:	458c      	cmp	ip, r1
24016d0e:	dd07      	ble.n	24016d20 <__kernel_rem_pio2+0x2f8>
24016d10:	eca2 7b02 	vstmia	r2!, {d7}
24016d14:	3601      	adds	r6, #1
24016d16:	e7e7      	b.n	24016ce8 <__kernel_rem_pio2+0x2c0>
24016d18:	9a03      	ldr	r2, [sp, #12]
24016d1a:	f04f 0c01 	mov.w	ip, #1
24016d1e:	e7d2      	b.n	24016cc6 <__kernel_rem_pio2+0x29e>
24016d20:	ecbe 5b02 	vldmia	lr!, {d5}
24016d24:	ed38 6b02 	vldmdb	r8!, {d6}
24016d28:	f10c 0c01 	add.w	ip, ip, #1
24016d2c:	eea5 7b06 	vfma.f64	d7, d5, d6
24016d30:	e7ec      	b.n	24016d0c <__kernel_rem_pio2+0x2e4>
24016d32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24016d36:	e76e      	b.n	24016c16 <__kernel_rem_pio2+0x1ee>
	...
24016d44:	3e700000 	.word	0x3e700000
24016d48:	00000000 	.word	0x00000000
24016d4c:	41700000 	.word	0x41700000
24016d50:	2402d638 	.word	0x2402d638
24016d54:	2402d5f8 	.word	0x2402d5f8
24016d58:	4260      	negs	r0, r4
24016d5a:	eeb0 0b48 	vmov.f64	d0, d8
24016d5e:	f000 fde7 	bl	24017930 <scalbn>
24016d62:	ed9f 6b77 	vldr	d6, [pc, #476]	; 24016f40 <__kernel_rem_pio2+0x518>
24016d66:	eeb4 0bc6 	vcmpe.f64	d0, d6
24016d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016d6e:	db18      	blt.n	24016da2 <__kernel_rem_pio2+0x37a>
24016d70:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24016f48 <__kernel_rem_pio2+0x520>
24016d74:	ee20 7b07 	vmul.f64	d7, d0, d7
24016d78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24016d7c:	aa06      	add	r2, sp, #24
24016d7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
24016d82:	eea5 0b46 	vfms.f64	d0, d5, d6
24016d86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016d8a:	f105 0b01 	add.w	fp, r5, #1
24016d8e:	ee10 3a10 	vmov	r3, s0
24016d92:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24016d96:	ee17 3a10 	vmov	r3, s14
24016d9a:	3418      	adds	r4, #24
24016d9c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
24016da0:	e740      	b.n	24016c24 <__kernel_rem_pio2+0x1fc>
24016da2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016da6:	aa06      	add	r2, sp, #24
24016da8:	ee10 3a10 	vmov	r3, s0
24016dac:	46ab      	mov	fp, r5
24016dae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24016db2:	e737      	b.n	24016c24 <__kernel_rem_pio2+0x1fc>
24016db4:	ac06      	add	r4, sp, #24
24016db6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
24016dba:	9401      	str	r4, [sp, #4]
24016dbc:	ee07 4a90 	vmov	s15, r4
24016dc0:	3901      	subs	r1, #1
24016dc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016dc6:	ee27 7b00 	vmul.f64	d7, d7, d0
24016dca:	ee20 0b06 	vmul.f64	d0, d0, d6
24016dce:	ed20 7b02 	vstmdb	r0!, {d7}
24016dd2:	e735      	b.n	24016c40 <__kernel_rem_pio2+0x218>
24016dd4:	ecbc 5b02 	vldmia	ip!, {d5}
24016dd8:	ecb5 6b02 	vldmia	r5!, {d6}
24016ddc:	3401      	adds	r4, #1
24016dde:	eea5 7b06 	vfma.f64	d7, d5, d6
24016de2:	454c      	cmp	r4, r9
24016de4:	dc01      	bgt.n	24016dea <__kernel_rem_pio2+0x3c2>
24016de6:	4284      	cmp	r4, r0
24016de8:	ddf4      	ble.n	24016dd4 <__kernel_rem_pio2+0x3ac>
24016dea:	ac42      	add	r4, sp, #264	; 0x108
24016dec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24016df0:	ed80 7b00 	vstr	d7, [r0]
24016df4:	3901      	subs	r1, #1
24016df6:	e727      	b.n	24016c48 <__kernel_rem_pio2+0x220>
24016df8:	99a2      	ldr	r1, [sp, #648]	; 0x288
24016dfa:	2902      	cmp	r1, #2
24016dfc:	dc0a      	bgt.n	24016e14 <__kernel_rem_pio2+0x3ec>
24016dfe:	2900      	cmp	r1, #0
24016e00:	dc2c      	bgt.n	24016e5c <__kernel_rem_pio2+0x434>
24016e02:	d045      	beq.n	24016e90 <__kernel_rem_pio2+0x468>
24016e04:	f008 0007 	and.w	r0, r8, #7
24016e08:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
24016e0c:	ecbd 8b06 	vpop	{d8-d10}
24016e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24016e14:	9aa2      	ldr	r2, [sp, #648]	; 0x288
24016e16:	2a03      	cmp	r2, #3
24016e18:	d1f4      	bne.n	24016e04 <__kernel_rem_pio2+0x3dc>
24016e1a:	aa42      	add	r2, sp, #264	; 0x108
24016e1c:	4413      	add	r3, r2
24016e1e:	461a      	mov	r2, r3
24016e20:	4619      	mov	r1, r3
24016e22:	4658      	mov	r0, fp
24016e24:	2800      	cmp	r0, #0
24016e26:	f1a1 0108 	sub.w	r1, r1, #8
24016e2a:	dc54      	bgt.n	24016ed6 <__kernel_rem_pio2+0x4ae>
24016e2c:	4659      	mov	r1, fp
24016e2e:	2901      	cmp	r1, #1
24016e30:	f1a2 0208 	sub.w	r2, r2, #8
24016e34:	dc5f      	bgt.n	24016ef6 <__kernel_rem_pio2+0x4ce>
24016e36:	ed9f 7b46 	vldr	d7, [pc, #280]	; 24016f50 <__kernel_rem_pio2+0x528>
24016e3a:	3308      	adds	r3, #8
24016e3c:	f1bb 0f01 	cmp.w	fp, #1
24016e40:	dc69      	bgt.n	24016f16 <__kernel_rem_pio2+0x4ee>
24016e42:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
24016e46:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
24016e4a:	2e00      	cmp	r6, #0
24016e4c:	d16a      	bne.n	24016f24 <__kernel_rem_pio2+0x4fc>
24016e4e:	ed87 5b00 	vstr	d5, [r7]
24016e52:	ed87 6b02 	vstr	d6, [r7, #8]
24016e56:	ed87 7b04 	vstr	d7, [r7, #16]
24016e5a:	e7d3      	b.n	24016e04 <__kernel_rem_pio2+0x3dc>
24016e5c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 24016f50 <__kernel_rem_pio2+0x528>
24016e60:	ab42      	add	r3, sp, #264	; 0x108
24016e62:	441a      	add	r2, r3
24016e64:	465b      	mov	r3, fp
24016e66:	2b00      	cmp	r3, #0
24016e68:	da26      	bge.n	24016eb8 <__kernel_rem_pio2+0x490>
24016e6a:	b35e      	cbz	r6, 24016ec4 <__kernel_rem_pio2+0x49c>
24016e6c:	eeb1 7b46 	vneg.f64	d7, d6
24016e70:	ed87 7b00 	vstr	d7, [r7]
24016e74:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
24016e78:	aa44      	add	r2, sp, #272	; 0x110
24016e7a:	2301      	movs	r3, #1
24016e7c:	ee37 7b46 	vsub.f64	d7, d7, d6
24016e80:	459b      	cmp	fp, r3
24016e82:	da22      	bge.n	24016eca <__kernel_rem_pio2+0x4a2>
24016e84:	b10e      	cbz	r6, 24016e8a <__kernel_rem_pio2+0x462>
24016e86:	eeb1 7b47 	vneg.f64	d7, d7
24016e8a:	ed87 7b02 	vstr	d7, [r7, #8]
24016e8e:	e7b9      	b.n	24016e04 <__kernel_rem_pio2+0x3dc>
24016e90:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24016f50 <__kernel_rem_pio2+0x528>
24016e94:	ab42      	add	r3, sp, #264	; 0x108
24016e96:	441a      	add	r2, r3
24016e98:	f1bb 0f00 	cmp.w	fp, #0
24016e9c:	da05      	bge.n	24016eaa <__kernel_rem_pio2+0x482>
24016e9e:	b10e      	cbz	r6, 24016ea4 <__kernel_rem_pio2+0x47c>
24016ea0:	eeb1 7b47 	vneg.f64	d7, d7
24016ea4:	ed87 7b00 	vstr	d7, [r7]
24016ea8:	e7ac      	b.n	24016e04 <__kernel_rem_pio2+0x3dc>
24016eaa:	ed32 6b02 	vldmdb	r2!, {d6}
24016eae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24016eb2:	ee37 7b06 	vadd.f64	d7, d7, d6
24016eb6:	e7ef      	b.n	24016e98 <__kernel_rem_pio2+0x470>
24016eb8:	ed32 7b02 	vldmdb	r2!, {d7}
24016ebc:	3b01      	subs	r3, #1
24016ebe:	ee36 6b07 	vadd.f64	d6, d6, d7
24016ec2:	e7d0      	b.n	24016e66 <__kernel_rem_pio2+0x43e>
24016ec4:	eeb0 7b46 	vmov.f64	d7, d6
24016ec8:	e7d2      	b.n	24016e70 <__kernel_rem_pio2+0x448>
24016eca:	ecb2 6b02 	vldmia	r2!, {d6}
24016ece:	3301      	adds	r3, #1
24016ed0:	ee37 7b06 	vadd.f64	d7, d7, d6
24016ed4:	e7d4      	b.n	24016e80 <__kernel_rem_pio2+0x458>
24016ed6:	ed91 7b00 	vldr	d7, [r1]
24016eda:	ed91 5b02 	vldr	d5, [r1, #8]
24016ede:	3801      	subs	r0, #1
24016ee0:	ee37 6b05 	vadd.f64	d6, d7, d5
24016ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
24016ee8:	ed81 6b00 	vstr	d6, [r1]
24016eec:	ee37 7b05 	vadd.f64	d7, d7, d5
24016ef0:	ed81 7b02 	vstr	d7, [r1, #8]
24016ef4:	e796      	b.n	24016e24 <__kernel_rem_pio2+0x3fc>
24016ef6:	ed92 7b00 	vldr	d7, [r2]
24016efa:	ed92 5b02 	vldr	d5, [r2, #8]
24016efe:	3901      	subs	r1, #1
24016f00:	ee37 6b05 	vadd.f64	d6, d7, d5
24016f04:	ee37 7b46 	vsub.f64	d7, d7, d6
24016f08:	ed82 6b00 	vstr	d6, [r2]
24016f0c:	ee37 7b05 	vadd.f64	d7, d7, d5
24016f10:	ed82 7b02 	vstr	d7, [r2, #8]
24016f14:	e78b      	b.n	24016e2e <__kernel_rem_pio2+0x406>
24016f16:	ed33 6b02 	vldmdb	r3!, {d6}
24016f1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24016f1e:	ee37 7b06 	vadd.f64	d7, d7, d6
24016f22:	e78b      	b.n	24016e3c <__kernel_rem_pio2+0x414>
24016f24:	eeb1 5b45 	vneg.f64	d5, d5
24016f28:	eeb1 6b46 	vneg.f64	d6, d6
24016f2c:	ed87 5b00 	vstr	d5, [r7]
24016f30:	eeb1 7b47 	vneg.f64	d7, d7
24016f34:	ed87 6b02 	vstr	d6, [r7, #8]
24016f38:	e78d      	b.n	24016e56 <__kernel_rem_pio2+0x42e>
24016f3a:	bf00      	nop
24016f3c:	f3af 8000 	nop.w
24016f40:	00000000 	.word	0x00000000
24016f44:	41700000 	.word	0x41700000
24016f48:	00000000 	.word	0x00000000
24016f4c:	3e700000 	.word	0x3e700000
	...

24016f58 <__kernel_tan>:
24016f58:	eeb0 7b40 	vmov.f64	d7, d0
24016f5c:	ee17 3a90 	vmov	r3, s15
24016f60:	4987      	ldr	r1, [pc, #540]	; (24017180 <__kernel_tan+0x228>)
24016f62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24016f66:	428a      	cmp	r2, r1
24016f68:	b510      	push	{r4, lr}
24016f6a:	dc33      	bgt.n	24016fd4 <__kernel_tan+0x7c>
24016f6c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
24016f70:	ee16 1a90 	vmov	r1, s13
24016f74:	2900      	cmp	r1, #0
24016f76:	d143      	bne.n	24017000 <__kernel_tan+0xa8>
24016f78:	ee10 4a10 	vmov	r4, s0
24016f7c:	1c43      	adds	r3, r0, #1
24016f7e:	4323      	orrs	r3, r4
24016f80:	4313      	orrs	r3, r2
24016f82:	d108      	bne.n	24016f96 <__kernel_tan+0x3e>
24016f84:	f000 fc56 	bl	24017834 <fabs>
24016f88:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24016f8c:	ee86 7b00 	vdiv.f64	d7, d6, d0
24016f90:	eeb0 0b47 	vmov.f64	d0, d7
24016f94:	bd10      	pop	{r4, pc}
24016f96:	2801      	cmp	r0, #1
24016f98:	d0fa      	beq.n	24016f90 <__kernel_tan+0x38>
24016f9a:	ee30 6b01 	vadd.f64	d6, d0, d1
24016f9e:	ec53 2b16 	vmov	r2, r3, d6
24016fa2:	460a      	mov	r2, r1
24016fa4:	ec43 2b15 	vmov	d5, r2, r3
24016fa8:	ee35 7b40 	vsub.f64	d7, d5, d0
24016fac:	ee31 1b47 	vsub.f64	d1, d1, d7
24016fb0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
24016fb4:	ee87 4b06 	vdiv.f64	d4, d7, d6
24016fb8:	ec53 2b14 	vmov	r2, r3, d4
24016fbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24016fc0:	460a      	mov	r2, r1
24016fc2:	ec43 2b17 	vmov	d7, r2, r3
24016fc6:	eea5 6b07 	vfma.f64	d6, d5, d7
24016fca:	eea1 6b07 	vfma.f64	d6, d1, d7
24016fce:	eea6 7b04 	vfma.f64	d7, d6, d4
24016fd2:	e7dd      	b.n	24016f90 <__kernel_tan+0x38>
24016fd4:	496b      	ldr	r1, [pc, #428]	; (24017184 <__kernel_tan+0x22c>)
24016fd6:	428a      	cmp	r2, r1
24016fd8:	dd12      	ble.n	24017000 <__kernel_tan+0xa8>
24016fda:	ed9f 6b49 	vldr	d6, [pc, #292]	; 24017100 <__kernel_tan+0x1a8>
24016fde:	2b00      	cmp	r3, #0
24016fe0:	bfb8      	it	lt
24016fe2:	eeb1 7b40 	vneglt.f64	d7, d0
24016fe6:	ee36 7b47 	vsub.f64	d7, d6, d7
24016fea:	ed9f 6b47 	vldr	d6, [pc, #284]	; 24017108 <__kernel_tan+0x1b0>
24016fee:	bfb8      	it	lt
24016ff0:	eeb1 1b41 	vneglt.f64	d1, d1
24016ff4:	ee36 1b41 	vsub.f64	d1, d6, d1
24016ff8:	ee31 7b07 	vadd.f64	d7, d1, d7
24016ffc:	ed9f 1b44 	vldr	d1, [pc, #272]	; 24017110 <__kernel_tan+0x1b8>
24017000:	ee27 5b07 	vmul.f64	d5, d7, d7
24017004:	ee25 6b05 	vmul.f64	d6, d5, d5
24017008:	ed9f 3b43 	vldr	d3, [pc, #268]	; 24017118 <__kernel_tan+0x1c0>
2401700c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24017120 <__kernel_tan+0x1c8>
24017010:	eea6 4b03 	vfma.f64	d4, d6, d3
24017014:	ed9f 3b44 	vldr	d3, [pc, #272]	; 24017128 <__kernel_tan+0x1d0>
24017018:	eea4 3b06 	vfma.f64	d3, d4, d6
2401701c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24017130 <__kernel_tan+0x1d8>
24017020:	eea3 4b06 	vfma.f64	d4, d3, d6
24017024:	ed9f 3b44 	vldr	d3, [pc, #272]	; 24017138 <__kernel_tan+0x1e0>
24017028:	eea4 3b06 	vfma.f64	d3, d4, d6
2401702c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24017140 <__kernel_tan+0x1e8>
24017030:	ed9f 2b45 	vldr	d2, [pc, #276]	; 24017148 <__kernel_tan+0x1f0>
24017034:	eea3 4b06 	vfma.f64	d4, d3, d6
24017038:	ed9f 3b45 	vldr	d3, [pc, #276]	; 24017150 <__kernel_tan+0x1f8>
2401703c:	eea6 3b02 	vfma.f64	d3, d6, d2
24017040:	ed9f 2b45 	vldr	d2, [pc, #276]	; 24017158 <__kernel_tan+0x200>
24017044:	eea3 2b06 	vfma.f64	d2, d3, d6
24017048:	ed9f 3b45 	vldr	d3, [pc, #276]	; 24017160 <__kernel_tan+0x208>
2401704c:	eea2 3b06 	vfma.f64	d3, d2, d6
24017050:	ed9f 2b45 	vldr	d2, [pc, #276]	; 24017168 <__kernel_tan+0x210>
24017054:	eea3 2b06 	vfma.f64	d2, d3, d6
24017058:	ed9f 3b45 	vldr	d3, [pc, #276]	; 24017170 <__kernel_tan+0x218>
2401705c:	4949      	ldr	r1, [pc, #292]	; (24017184 <__kernel_tan+0x22c>)
2401705e:	eea2 3b06 	vfma.f64	d3, d2, d6
24017062:	ee27 2b05 	vmul.f64	d2, d7, d5
24017066:	eeb0 6b44 	vmov.f64	d6, d4
2401706a:	eeb0 4b41 	vmov.f64	d4, d1
2401706e:	eea3 6b05 	vfma.f64	d6, d3, d5
24017072:	eea6 4b02 	vfma.f64	d4, d6, d2
24017076:	ed9f 6b40 	vldr	d6, [pc, #256]	; 24017178 <__kernel_tan+0x220>
2401707a:	eea4 1b05 	vfma.f64	d1, d4, d5
2401707e:	428a      	cmp	r2, r1
24017080:	eea2 1b06 	vfma.f64	d1, d2, d6
24017084:	ee37 5b01 	vadd.f64	d5, d7, d1
24017088:	dd1d      	ble.n	240170c6 <__kernel_tan+0x16e>
2401708a:	ee25 3b05 	vmul.f64	d3, d5, d5
2401708e:	179b      	asrs	r3, r3, #30
24017090:	ee06 0a90 	vmov	s13, r0
24017094:	f003 0302 	and.w	r3, r3, #2
24017098:	f1c3 0301 	rsb	r3, r3, #1
2401709c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
240170a0:	ee35 5b06 	vadd.f64	d5, d5, d6
240170a4:	ee83 4b05 	vdiv.f64	d4, d3, d5
240170a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
240170ac:	ee34 1b41 	vsub.f64	d1, d4, d1
240170b0:	ee37 7b41 	vsub.f64	d7, d7, d1
240170b4:	eea7 6b45 	vfms.f64	d6, d7, d5
240170b8:	ee07 3a10 	vmov	s14, r3
240170bc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
240170c0:	ee27 7b06 	vmul.f64	d7, d7, d6
240170c4:	e764      	b.n	24016f90 <__kernel_tan+0x38>
240170c6:	2801      	cmp	r0, #1
240170c8:	d016      	beq.n	240170f8 <__kernel_tan+0x1a0>
240170ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
240170ce:	ec51 0b15 	vmov	r0, r1, d5
240170d2:	2000      	movs	r0, #0
240170d4:	ec41 0b13 	vmov	d3, r0, r1
240170d8:	ee33 7b47 	vsub.f64	d7, d3, d7
240170dc:	ee31 1b47 	vsub.f64	d1, d1, d7
240170e0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
240170e4:	ee87 4b05 	vdiv.f64	d4, d7, d5
240170e8:	ec53 2b14 	vmov	r2, r3, d4
240170ec:	4602      	mov	r2, r0
240170ee:	ec43 2b17 	vmov	d7, r2, r3
240170f2:	eea3 6b07 	vfma.f64	d6, d3, d7
240170f6:	e768      	b.n	24016fca <__kernel_tan+0x72>
240170f8:	eeb0 7b45 	vmov.f64	d7, d5
240170fc:	e748      	b.n	24016f90 <__kernel_tan+0x38>
240170fe:	bf00      	nop
24017100:	54442d18 	.word	0x54442d18
24017104:	3fe921fb 	.word	0x3fe921fb
24017108:	33145c07 	.word	0x33145c07
2401710c:	3c81a626 	.word	0x3c81a626
	...
24017118:	db605373 	.word	0xdb605373
2401711c:	bef375cb 	.word	0xbef375cb
24017120:	a03792a6 	.word	0xa03792a6
24017124:	3f147e88 	.word	0x3f147e88
24017128:	f2f26501 	.word	0xf2f26501
2401712c:	3f4344d8 	.word	0x3f4344d8
24017130:	c9560328 	.word	0xc9560328
24017134:	3f6d6d22 	.word	0x3f6d6d22
24017138:	8406d637 	.word	0x8406d637
2401713c:	3f9664f4 	.word	0x3f9664f4
24017140:	1110fe7a 	.word	0x1110fe7a
24017144:	3fc11111 	.word	0x3fc11111
24017148:	74bf7ad4 	.word	0x74bf7ad4
2401714c:	3efb2a70 	.word	0x3efb2a70
24017150:	32f0a7e9 	.word	0x32f0a7e9
24017154:	3f12b80f 	.word	0x3f12b80f
24017158:	1a8d1068 	.word	0x1a8d1068
2401715c:	3f3026f7 	.word	0x3f3026f7
24017160:	fee08315 	.word	0xfee08315
24017164:	3f57dbc8 	.word	0x3f57dbc8
24017168:	e96e8493 	.word	0xe96e8493
2401716c:	3f8226e3 	.word	0x3f8226e3
24017170:	1bb341fe 	.word	0x1bb341fe
24017174:	3faba1ba 	.word	0x3faba1ba
24017178:	55555563 	.word	0x55555563
2401717c:	3fd55555 	.word	0x3fd55555
24017180:	3e2fffff 	.word	0x3e2fffff
24017184:	3fe59427 	.word	0x3fe59427

24017188 <__kernel_rem_pio2f>:
24017188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401718c:	ed2d 8b04 	vpush	{d8-d9}
24017190:	b0d9      	sub	sp, #356	; 0x164
24017192:	4688      	mov	r8, r1
24017194:	9002      	str	r0, [sp, #8]
24017196:	49bb      	ldr	r1, [pc, #748]	; (24017484 <__kernel_rem_pio2f+0x2fc>)
24017198:	9866      	ldr	r0, [sp, #408]	; 0x198
2401719a:	9301      	str	r3, [sp, #4]
2401719c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
240171a0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
240171a4:	1e59      	subs	r1, r3, #1
240171a6:	1d13      	adds	r3, r2, #4
240171a8:	db27      	blt.n	240171fa <__kernel_rem_pio2f+0x72>
240171aa:	f1b2 0b03 	subs.w	fp, r2, #3
240171ae:	bf48      	it	mi
240171b0:	f102 0b04 	addmi.w	fp, r2, #4
240171b4:	ea4f 00eb 	mov.w	r0, fp, asr #3
240171b8:	1c45      	adds	r5, r0, #1
240171ba:	00ec      	lsls	r4, r5, #3
240171bc:	1a47      	subs	r7, r0, r1
240171be:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 24017494 <__kernel_rem_pio2f+0x30c>
240171c2:	9403      	str	r4, [sp, #12]
240171c4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
240171c8:	eb0a 0c01 	add.w	ip, sl, r1
240171cc:	ae1c      	add	r6, sp, #112	; 0x70
240171ce:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
240171d2:	2400      	movs	r4, #0
240171d4:	4564      	cmp	r4, ip
240171d6:	dd12      	ble.n	240171fe <__kernel_rem_pio2f+0x76>
240171d8:	9b01      	ldr	r3, [sp, #4]
240171da:	ac1c      	add	r4, sp, #112	; 0x70
240171dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
240171e0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
240171e4:	f04f 0c00 	mov.w	ip, #0
240171e8:	45d4      	cmp	ip, sl
240171ea:	dc27      	bgt.n	2401723c <__kernel_rem_pio2f+0xb4>
240171ec:	f8dd 9008 	ldr.w	r9, [sp, #8]
240171f0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 24017494 <__kernel_rem_pio2f+0x30c>
240171f4:	4627      	mov	r7, r4
240171f6:	2600      	movs	r6, #0
240171f8:	e016      	b.n	24017228 <__kernel_rem_pio2f+0xa0>
240171fa:	2000      	movs	r0, #0
240171fc:	e7dc      	b.n	240171b8 <__kernel_rem_pio2f+0x30>
240171fe:	42e7      	cmn	r7, r4
24017200:	bf5d      	ittte	pl
24017202:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
24017206:	ee07 3a90 	vmovpl	s15, r3
2401720a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401720e:	eef0 7a47 	vmovmi.f32	s15, s14
24017212:	ece6 7a01 	vstmia	r6!, {s15}
24017216:	3401      	adds	r4, #1
24017218:	e7dc      	b.n	240171d4 <__kernel_rem_pio2f+0x4c>
2401721a:	ecf9 6a01 	vldmia	r9!, {s13}
2401721e:	ed97 7a00 	vldr	s14, [r7]
24017222:	eee6 7a87 	vfma.f32	s15, s13, s14
24017226:	3601      	adds	r6, #1
24017228:	428e      	cmp	r6, r1
2401722a:	f1a7 0704 	sub.w	r7, r7, #4
2401722e:	ddf4      	ble.n	2401721a <__kernel_rem_pio2f+0x92>
24017230:	eceb 7a01 	vstmia	fp!, {s15}
24017234:	f10c 0c01 	add.w	ip, ip, #1
24017238:	3404      	adds	r4, #4
2401723a:	e7d5      	b.n	240171e8 <__kernel_rem_pio2f+0x60>
2401723c:	ab08      	add	r3, sp, #32
2401723e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24017242:	eddf 8a93 	vldr	s17, [pc, #588]	; 24017490 <__kernel_rem_pio2f+0x308>
24017246:	ed9f 9a91 	vldr	s18, [pc, #580]	; 2401748c <__kernel_rem_pio2f+0x304>
2401724a:	9304      	str	r3, [sp, #16]
2401724c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
24017250:	4656      	mov	r6, sl
24017252:	00b3      	lsls	r3, r6, #2
24017254:	9305      	str	r3, [sp, #20]
24017256:	ab58      	add	r3, sp, #352	; 0x160
24017258:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401725c:	ac08      	add	r4, sp, #32
2401725e:	ab44      	add	r3, sp, #272	; 0x110
24017260:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
24017264:	46a4      	mov	ip, r4
24017266:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401726a:	4637      	mov	r7, r6
2401726c:	2f00      	cmp	r7, #0
2401726e:	f1a0 0004 	sub.w	r0, r0, #4
24017272:	dc4f      	bgt.n	24017314 <__kernel_rem_pio2f+0x18c>
24017274:	4628      	mov	r0, r5
24017276:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401727a:	f000 fd45 	bl	24017d08 <scalbnf>
2401727e:	eeb0 8a40 	vmov.f32	s16, s0
24017282:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
24017286:	ee28 0a00 	vmul.f32	s0, s16, s0
2401728a:	f000 fcf5 	bl	24017c78 <floorf>
2401728e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
24017292:	eea0 8a67 	vfms.f32	s16, s0, s15
24017296:	2d00      	cmp	r5, #0
24017298:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401729c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
240172a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
240172a4:	ee17 9a90 	vmov	r9, s15
240172a8:	ee38 8a40 	vsub.f32	s16, s16, s0
240172ac:	dd44      	ble.n	24017338 <__kernel_rem_pio2f+0x1b0>
240172ae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
240172b2:	ab08      	add	r3, sp, #32
240172b4:	f1c5 0e08 	rsb	lr, r5, #8
240172b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
240172bc:	fa47 f00e 	asr.w	r0, r7, lr
240172c0:	4481      	add	r9, r0
240172c2:	fa00 f00e 	lsl.w	r0, r0, lr
240172c6:	1a3f      	subs	r7, r7, r0
240172c8:	f1c5 0007 	rsb	r0, r5, #7
240172cc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
240172d0:	4107      	asrs	r7, r0
240172d2:	2f00      	cmp	r7, #0
240172d4:	dd3f      	ble.n	24017356 <__kernel_rem_pio2f+0x1ce>
240172d6:	f04f 0e00 	mov.w	lr, #0
240172da:	f109 0901 	add.w	r9, r9, #1
240172de:	4673      	mov	r3, lr
240172e0:	4576      	cmp	r6, lr
240172e2:	dc6b      	bgt.n	240173bc <__kernel_rem_pio2f+0x234>
240172e4:	2d00      	cmp	r5, #0
240172e6:	dd04      	ble.n	240172f2 <__kernel_rem_pio2f+0x16a>
240172e8:	2d01      	cmp	r5, #1
240172ea:	d078      	beq.n	240173de <__kernel_rem_pio2f+0x256>
240172ec:	2d02      	cmp	r5, #2
240172ee:	f000 8081 	beq.w	240173f4 <__kernel_rem_pio2f+0x26c>
240172f2:	2f02      	cmp	r7, #2
240172f4:	d12f      	bne.n	24017356 <__kernel_rem_pio2f+0x1ce>
240172f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240172fa:	ee30 8a48 	vsub.f32	s16, s0, s16
240172fe:	b353      	cbz	r3, 24017356 <__kernel_rem_pio2f+0x1ce>
24017300:	4628      	mov	r0, r5
24017302:	e9cd 1206 	strd	r1, r2, [sp, #24]
24017306:	f000 fcff 	bl	24017d08 <scalbnf>
2401730a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401730e:	ee38 8a40 	vsub.f32	s16, s16, s0
24017312:	e020      	b.n	24017356 <__kernel_rem_pio2f+0x1ce>
24017314:	ee60 7a28 	vmul.f32	s15, s0, s17
24017318:	3f01      	subs	r7, #1
2401731a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401731e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017322:	eea7 0ac9 	vfms.f32	s0, s15, s18
24017326:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401732a:	ecac 0a01 	vstmia	ip!, {s0}
2401732e:	ed90 0a00 	vldr	s0, [r0]
24017332:	ee37 0a80 	vadd.f32	s0, s15, s0
24017336:	e799      	b.n	2401726c <__kernel_rem_pio2f+0xe4>
24017338:	d105      	bne.n	24017346 <__kernel_rem_pio2f+0x1be>
2401733a:	1e70      	subs	r0, r6, #1
2401733c:	ab08      	add	r3, sp, #32
2401733e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
24017342:	11ff      	asrs	r7, r7, #7
24017344:	e7c5      	b.n	240172d2 <__kernel_rem_pio2f+0x14a>
24017346:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401734a:	eeb4 8ae7 	vcmpe.f32	s16, s15
2401734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017352:	da31      	bge.n	240173b8 <__kernel_rem_pio2f+0x230>
24017354:	2700      	movs	r7, #0
24017356:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401735e:	f040 809b 	bne.w	24017498 <__kernel_rem_pio2f+0x310>
24017362:	1e74      	subs	r4, r6, #1
24017364:	46a4      	mov	ip, r4
24017366:	2000      	movs	r0, #0
24017368:	45d4      	cmp	ip, sl
2401736a:	da4a      	bge.n	24017402 <__kernel_rem_pio2f+0x27a>
2401736c:	2800      	cmp	r0, #0
2401736e:	d07a      	beq.n	24017466 <__kernel_rem_pio2f+0x2de>
24017370:	ab08      	add	r3, sp, #32
24017372:	3d08      	subs	r5, #8
24017374:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24017378:	2b00      	cmp	r3, #0
2401737a:	f000 8081 	beq.w	24017480 <__kernel_rem_pio2f+0x2f8>
2401737e:	4628      	mov	r0, r5
24017380:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24017384:	00a5      	lsls	r5, r4, #2
24017386:	f000 fcbf 	bl	24017d08 <scalbnf>
2401738a:	aa44      	add	r2, sp, #272	; 0x110
2401738c:	1d2b      	adds	r3, r5, #4
2401738e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 24017490 <__kernel_rem_pio2f+0x308>
24017392:	18d1      	adds	r1, r2, r3
24017394:	4622      	mov	r2, r4
24017396:	2a00      	cmp	r2, #0
24017398:	f280 80ae 	bge.w	240174f8 <__kernel_rem_pio2f+0x370>
2401739c:	4622      	mov	r2, r4
2401739e:	2a00      	cmp	r2, #0
240173a0:	f2c0 80cc 	blt.w	2401753c <__kernel_rem_pio2f+0x3b4>
240173a4:	a944      	add	r1, sp, #272	; 0x110
240173a6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
240173aa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 24017488 <__kernel_rem_pio2f+0x300>
240173ae:	eddf 7a39 	vldr	s15, [pc, #228]	; 24017494 <__kernel_rem_pio2f+0x30c>
240173b2:	2000      	movs	r0, #0
240173b4:	1aa1      	subs	r1, r4, r2
240173b6:	e0b6      	b.n	24017526 <__kernel_rem_pio2f+0x39e>
240173b8:	2702      	movs	r7, #2
240173ba:	e78c      	b.n	240172d6 <__kernel_rem_pio2f+0x14e>
240173bc:	6820      	ldr	r0, [r4, #0]
240173be:	b94b      	cbnz	r3, 240173d4 <__kernel_rem_pio2f+0x24c>
240173c0:	b118      	cbz	r0, 240173ca <__kernel_rem_pio2f+0x242>
240173c2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
240173c6:	6020      	str	r0, [r4, #0]
240173c8:	2001      	movs	r0, #1
240173ca:	f10e 0e01 	add.w	lr, lr, #1
240173ce:	3404      	adds	r4, #4
240173d0:	4603      	mov	r3, r0
240173d2:	e785      	b.n	240172e0 <__kernel_rem_pio2f+0x158>
240173d4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
240173d8:	6020      	str	r0, [r4, #0]
240173da:	4618      	mov	r0, r3
240173dc:	e7f5      	b.n	240173ca <__kernel_rem_pio2f+0x242>
240173de:	1e74      	subs	r4, r6, #1
240173e0:	a808      	add	r0, sp, #32
240173e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
240173e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
240173ea:	f10d 0c20 	add.w	ip, sp, #32
240173ee:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
240173f2:	e77e      	b.n	240172f2 <__kernel_rem_pio2f+0x16a>
240173f4:	1e74      	subs	r4, r6, #1
240173f6:	a808      	add	r0, sp, #32
240173f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
240173fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24017400:	e7f3      	b.n	240173ea <__kernel_rem_pio2f+0x262>
24017402:	ab08      	add	r3, sp, #32
24017404:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24017408:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401740c:	4318      	orrs	r0, r3
2401740e:	e7ab      	b.n	24017368 <__kernel_rem_pio2f+0x1e0>
24017410:	f10c 0c01 	add.w	ip, ip, #1
24017414:	f850 4d04 	ldr.w	r4, [r0, #-4]!
24017418:	2c00      	cmp	r4, #0
2401741a:	d0f9      	beq.n	24017410 <__kernel_rem_pio2f+0x288>
2401741c:	9b05      	ldr	r3, [sp, #20]
2401741e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24017422:	eb0d 0003 	add.w	r0, sp, r3
24017426:	9b01      	ldr	r3, [sp, #4]
24017428:	18f4      	adds	r4, r6, r3
2401742a:	ab1c      	add	r3, sp, #112	; 0x70
2401742c:	1c77      	adds	r7, r6, #1
2401742e:	384c      	subs	r0, #76	; 0x4c
24017430:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24017434:	4466      	add	r6, ip
24017436:	42be      	cmp	r6, r7
24017438:	f6ff af0b 	blt.w	24017252 <__kernel_rem_pio2f+0xca>
2401743c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
24017440:	f8dd e008 	ldr.w	lr, [sp, #8]
24017444:	ee07 3a90 	vmov	s15, r3
24017448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401744c:	f04f 0c00 	mov.w	ip, #0
24017450:	ece4 7a01 	vstmia	r4!, {s15}
24017454:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24017494 <__kernel_rem_pio2f+0x30c>
24017458:	46a1      	mov	r9, r4
2401745a:	458c      	cmp	ip, r1
2401745c:	dd07      	ble.n	2401746e <__kernel_rem_pio2f+0x2e6>
2401745e:	ece0 7a01 	vstmia	r0!, {s15}
24017462:	3701      	adds	r7, #1
24017464:	e7e7      	b.n	24017436 <__kernel_rem_pio2f+0x2ae>
24017466:	9804      	ldr	r0, [sp, #16]
24017468:	f04f 0c01 	mov.w	ip, #1
2401746c:	e7d2      	b.n	24017414 <__kernel_rem_pio2f+0x28c>
2401746e:	ecfe 6a01 	vldmia	lr!, {s13}
24017472:	ed39 7a01 	vldmdb	r9!, {s14}
24017476:	f10c 0c01 	add.w	ip, ip, #1
2401747a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401747e:	e7ec      	b.n	2401745a <__kernel_rem_pio2f+0x2d2>
24017480:	3c01      	subs	r4, #1
24017482:	e775      	b.n	24017370 <__kernel_rem_pio2f+0x1e8>
24017484:	2402d674 	.word	0x2402d674
24017488:	2402d648 	.word	0x2402d648
2401748c:	43800000 	.word	0x43800000
24017490:	3b800000 	.word	0x3b800000
24017494:	00000000 	.word	0x00000000
24017498:	9b03      	ldr	r3, [sp, #12]
2401749a:	eeb0 0a48 	vmov.f32	s0, s16
2401749e:	1a98      	subs	r0, r3, r2
240174a0:	f000 fc32 	bl	24017d08 <scalbnf>
240174a4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401748c <__kernel_rem_pio2f+0x304>
240174a8:	eeb4 0ac7 	vcmpe.f32	s0, s14
240174ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240174b0:	db19      	blt.n	240174e6 <__kernel_rem_pio2f+0x35e>
240174b2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24017490 <__kernel_rem_pio2f+0x308>
240174b6:	ee60 7a27 	vmul.f32	s15, s0, s15
240174ba:	aa08      	add	r2, sp, #32
240174bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240174c0:	1c74      	adds	r4, r6, #1
240174c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240174c6:	3508      	adds	r5, #8
240174c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
240174cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240174d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240174d4:	ee10 3a10 	vmov	r3, s0
240174d8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
240174dc:	ee17 3a90 	vmov	r3, s15
240174e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
240174e4:	e74b      	b.n	2401737e <__kernel_rem_pio2f+0x1f6>
240174e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240174ea:	aa08      	add	r2, sp, #32
240174ec:	ee10 3a10 	vmov	r3, s0
240174f0:	4634      	mov	r4, r6
240174f2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
240174f6:	e742      	b.n	2401737e <__kernel_rem_pio2f+0x1f6>
240174f8:	a808      	add	r0, sp, #32
240174fa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
240174fe:	9001      	str	r0, [sp, #4]
24017500:	ee07 0a90 	vmov	s15, r0
24017504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017508:	3a01      	subs	r2, #1
2401750a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401750e:	ee20 0a07 	vmul.f32	s0, s0, s14
24017512:	ed61 7a01 	vstmdb	r1!, {s15}
24017516:	e73e      	b.n	24017396 <__kernel_rem_pio2f+0x20e>
24017518:	ecfc 6a01 	vldmia	ip!, {s13}
2401751c:	ecb6 7a01 	vldmia	r6!, {s14}
24017520:	eee6 7a87 	vfma.f32	s15, s13, s14
24017524:	3001      	adds	r0, #1
24017526:	4550      	cmp	r0, sl
24017528:	dc01      	bgt.n	2401752e <__kernel_rem_pio2f+0x3a6>
2401752a:	4288      	cmp	r0, r1
2401752c:	ddf4      	ble.n	24017518 <__kernel_rem_pio2f+0x390>
2401752e:	a858      	add	r0, sp, #352	; 0x160
24017530:	eb00 0181 	add.w	r1, r0, r1, lsl #2
24017534:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
24017538:	3a01      	subs	r2, #1
2401753a:	e730      	b.n	2401739e <__kernel_rem_pio2f+0x216>
2401753c:	9a66      	ldr	r2, [sp, #408]	; 0x198
2401753e:	2a02      	cmp	r2, #2
24017540:	dc09      	bgt.n	24017556 <__kernel_rem_pio2f+0x3ce>
24017542:	2a00      	cmp	r2, #0
24017544:	dc2a      	bgt.n	2401759c <__kernel_rem_pio2f+0x414>
24017546:	d043      	beq.n	240175d0 <__kernel_rem_pio2f+0x448>
24017548:	f009 0007 	and.w	r0, r9, #7
2401754c:	b059      	add	sp, #356	; 0x164
2401754e:	ecbd 8b04 	vpop	{d8-d9}
24017552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24017556:	9b66      	ldr	r3, [sp, #408]	; 0x198
24017558:	2b03      	cmp	r3, #3
2401755a:	d1f5      	bne.n	24017548 <__kernel_rem_pio2f+0x3c0>
2401755c:	ab30      	add	r3, sp, #192	; 0xc0
2401755e:	442b      	add	r3, r5
24017560:	461a      	mov	r2, r3
24017562:	4619      	mov	r1, r3
24017564:	4620      	mov	r0, r4
24017566:	2800      	cmp	r0, #0
24017568:	f1a1 0104 	sub.w	r1, r1, #4
2401756c:	dc51      	bgt.n	24017612 <__kernel_rem_pio2f+0x48a>
2401756e:	4621      	mov	r1, r4
24017570:	2901      	cmp	r1, #1
24017572:	f1a2 0204 	sub.w	r2, r2, #4
24017576:	dc5c      	bgt.n	24017632 <__kernel_rem_pio2f+0x4aa>
24017578:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 24017494 <__kernel_rem_pio2f+0x30c>
2401757c:	3304      	adds	r3, #4
2401757e:	2c01      	cmp	r4, #1
24017580:	dc67      	bgt.n	24017652 <__kernel_rem_pio2f+0x4ca>
24017582:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
24017586:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401758a:	2f00      	cmp	r7, #0
2401758c:	d167      	bne.n	2401765e <__kernel_rem_pio2f+0x4d6>
2401758e:	edc8 6a00 	vstr	s13, [r8]
24017592:	ed88 7a01 	vstr	s14, [r8, #4]
24017596:	edc8 7a02 	vstr	s15, [r8, #8]
2401759a:	e7d5      	b.n	24017548 <__kernel_rem_pio2f+0x3c0>
2401759c:	aa30      	add	r2, sp, #192	; 0xc0
2401759e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 24017494 <__kernel_rem_pio2f+0x30c>
240175a2:	4413      	add	r3, r2
240175a4:	4622      	mov	r2, r4
240175a6:	2a00      	cmp	r2, #0
240175a8:	da24      	bge.n	240175f4 <__kernel_rem_pio2f+0x46c>
240175aa:	b34f      	cbz	r7, 24017600 <__kernel_rem_pio2f+0x478>
240175ac:	eef1 7a47 	vneg.f32	s15, s14
240175b0:	edc8 7a00 	vstr	s15, [r8]
240175b4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
240175b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
240175bc:	aa31      	add	r2, sp, #196	; 0xc4
240175be:	2301      	movs	r3, #1
240175c0:	429c      	cmp	r4, r3
240175c2:	da20      	bge.n	24017606 <__kernel_rem_pio2f+0x47e>
240175c4:	b10f      	cbz	r7, 240175ca <__kernel_rem_pio2f+0x442>
240175c6:	eef1 7a67 	vneg.f32	s15, s15
240175ca:	edc8 7a01 	vstr	s15, [r8, #4]
240175ce:	e7bb      	b.n	24017548 <__kernel_rem_pio2f+0x3c0>
240175d0:	aa30      	add	r2, sp, #192	; 0xc0
240175d2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 24017494 <__kernel_rem_pio2f+0x30c>
240175d6:	4413      	add	r3, r2
240175d8:	2c00      	cmp	r4, #0
240175da:	da05      	bge.n	240175e8 <__kernel_rem_pio2f+0x460>
240175dc:	b10f      	cbz	r7, 240175e2 <__kernel_rem_pio2f+0x45a>
240175de:	eef1 7a67 	vneg.f32	s15, s15
240175e2:	edc8 7a00 	vstr	s15, [r8]
240175e6:	e7af      	b.n	24017548 <__kernel_rem_pio2f+0x3c0>
240175e8:	ed33 7a01 	vldmdb	r3!, {s14}
240175ec:	3c01      	subs	r4, #1
240175ee:	ee77 7a87 	vadd.f32	s15, s15, s14
240175f2:	e7f1      	b.n	240175d8 <__kernel_rem_pio2f+0x450>
240175f4:	ed73 7a01 	vldmdb	r3!, {s15}
240175f8:	3a01      	subs	r2, #1
240175fa:	ee37 7a27 	vadd.f32	s14, s14, s15
240175fe:	e7d2      	b.n	240175a6 <__kernel_rem_pio2f+0x41e>
24017600:	eef0 7a47 	vmov.f32	s15, s14
24017604:	e7d4      	b.n	240175b0 <__kernel_rem_pio2f+0x428>
24017606:	ecb2 7a01 	vldmia	r2!, {s14}
2401760a:	3301      	adds	r3, #1
2401760c:	ee77 7a87 	vadd.f32	s15, s15, s14
24017610:	e7d6      	b.n	240175c0 <__kernel_rem_pio2f+0x438>
24017612:	edd1 7a00 	vldr	s15, [r1]
24017616:	edd1 6a01 	vldr	s13, [r1, #4]
2401761a:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401761e:	3801      	subs	r0, #1
24017620:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017624:	ed81 7a00 	vstr	s14, [r1]
24017628:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401762c:	edc1 7a01 	vstr	s15, [r1, #4]
24017630:	e799      	b.n	24017566 <__kernel_rem_pio2f+0x3de>
24017632:	edd2 7a00 	vldr	s15, [r2]
24017636:	edd2 6a01 	vldr	s13, [r2, #4]
2401763a:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401763e:	3901      	subs	r1, #1
24017640:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017644:	ed82 7a00 	vstr	s14, [r2]
24017648:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401764c:	edc2 7a01 	vstr	s15, [r2, #4]
24017650:	e78e      	b.n	24017570 <__kernel_rem_pio2f+0x3e8>
24017652:	ed33 7a01 	vldmdb	r3!, {s14}
24017656:	3c01      	subs	r4, #1
24017658:	ee77 7a87 	vadd.f32	s15, s15, s14
2401765c:	e78f      	b.n	2401757e <__kernel_rem_pio2f+0x3f6>
2401765e:	eef1 6a66 	vneg.f32	s13, s13
24017662:	eeb1 7a47 	vneg.f32	s14, s14
24017666:	edc8 6a00 	vstr	s13, [r8]
2401766a:	ed88 7a01 	vstr	s14, [r8, #4]
2401766e:	eef1 7a67 	vneg.f32	s15, s15
24017672:	e790      	b.n	24017596 <__kernel_rem_pio2f+0x40e>

24017674 <__kernel_tanf>:
24017674:	b508      	push	{r3, lr}
24017676:	ee10 3a10 	vmov	r3, s0
2401767a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401767e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
24017682:	eef0 7a40 	vmov.f32	s15, s0
24017686:	da17      	bge.n	240176b8 <__kernel_tanf+0x44>
24017688:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401768c:	ee17 1a10 	vmov	r1, s14
24017690:	bb41      	cbnz	r1, 240176e4 <__kernel_tanf+0x70>
24017692:	1c43      	adds	r3, r0, #1
24017694:	4313      	orrs	r3, r2
24017696:	d108      	bne.n	240176aa <__kernel_tanf+0x36>
24017698:	f7fe fa3e 	bl	24015b18 <fabsf>
2401769c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240176a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
240176a4:	eeb0 0a67 	vmov.f32	s0, s15
240176a8:	bd08      	pop	{r3, pc}
240176aa:	2801      	cmp	r0, #1
240176ac:	d0fa      	beq.n	240176a4 <__kernel_tanf+0x30>
240176ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240176b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
240176b6:	e7f5      	b.n	240176a4 <__kernel_tanf+0x30>
240176b8:	494c      	ldr	r1, [pc, #304]	; (240177ec <__kernel_tanf+0x178>)
240176ba:	428a      	cmp	r2, r1
240176bc:	db12      	blt.n	240176e4 <__kernel_tanf+0x70>
240176be:	2b00      	cmp	r3, #0
240176c0:	bfb8      	it	lt
240176c2:	eef1 7a40 	vneglt.f32	s15, s0
240176c6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 240177f0 <__kernel_tanf+0x17c>
240176ca:	ee70 7a67 	vsub.f32	s15, s0, s15
240176ce:	ed9f 0a49 	vldr	s0, [pc, #292]	; 240177f4 <__kernel_tanf+0x180>
240176d2:	bfb8      	it	lt
240176d4:	eef1 0a60 	vneglt.f32	s1, s1
240176d8:	ee70 0a60 	vsub.f32	s1, s0, s1
240176dc:	ee70 7aa7 	vadd.f32	s15, s1, s15
240176e0:	eddf 0a45 	vldr	s1, [pc, #276]	; 240177f8 <__kernel_tanf+0x184>
240176e4:	eddf 5a45 	vldr	s11, [pc, #276]	; 240177fc <__kernel_tanf+0x188>
240176e8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 24017800 <__kernel_tanf+0x18c>
240176ec:	ed9f 5a45 	vldr	s10, [pc, #276]	; 24017804 <__kernel_tanf+0x190>
240176f0:	493e      	ldr	r1, [pc, #248]	; (240177ec <__kernel_tanf+0x178>)
240176f2:	ee67 6aa7 	vmul.f32	s13, s15, s15
240176f6:	428a      	cmp	r2, r1
240176f8:	ee26 7aa6 	vmul.f32	s14, s13, s13
240176fc:	eea7 6a25 	vfma.f32	s12, s14, s11
24017700:	eddf 5a41 	vldr	s11, [pc, #260]	; 24017808 <__kernel_tanf+0x194>
24017704:	eee6 5a07 	vfma.f32	s11, s12, s14
24017708:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401780c <__kernel_tanf+0x198>
2401770c:	eea5 6a87 	vfma.f32	s12, s11, s14
24017710:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24017810 <__kernel_tanf+0x19c>
24017714:	eee6 5a07 	vfma.f32	s11, s12, s14
24017718:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 24017814 <__kernel_tanf+0x1a0>
2401771c:	eea5 6a87 	vfma.f32	s12, s11, s14
24017720:	eddf 5a3d 	vldr	s11, [pc, #244]	; 24017818 <__kernel_tanf+0x1a4>
24017724:	eee7 5a05 	vfma.f32	s11, s14, s10
24017728:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401781c <__kernel_tanf+0x1a8>
2401772c:	eea5 5a87 	vfma.f32	s10, s11, s14
24017730:	eddf 5a3b 	vldr	s11, [pc, #236]	; 24017820 <__kernel_tanf+0x1ac>
24017734:	eee5 5a07 	vfma.f32	s11, s10, s14
24017738:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 24017824 <__kernel_tanf+0x1b0>
2401773c:	eea5 5a87 	vfma.f32	s10, s11, s14
24017740:	eddf 5a39 	vldr	s11, [pc, #228]	; 24017828 <__kernel_tanf+0x1b4>
24017744:	eee5 5a07 	vfma.f32	s11, s10, s14
24017748:	eeb0 7a46 	vmov.f32	s14, s12
2401774c:	eea5 7aa6 	vfma.f32	s14, s11, s13
24017750:	ee27 5aa6 	vmul.f32	s10, s15, s13
24017754:	eeb0 6a60 	vmov.f32	s12, s1
24017758:	eea7 6a05 	vfma.f32	s12, s14, s10
2401775c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401782c <__kernel_tanf+0x1b8>
24017760:	eee6 0a26 	vfma.f32	s1, s12, s13
24017764:	eee5 0a07 	vfma.f32	s1, s10, s14
24017768:	ee37 7aa0 	vadd.f32	s14, s15, s1
2401776c:	db1d      	blt.n	240177aa <__kernel_tanf+0x136>
2401776e:	ee06 0a90 	vmov	s13, r0
24017772:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
24017776:	ee27 6a07 	vmul.f32	s12, s14, s14
2401777a:	ee37 7a00 	vadd.f32	s14, s14, s0
2401777e:	179b      	asrs	r3, r3, #30
24017780:	eec6 6a07 	vdiv.f32	s13, s12, s14
24017784:	f003 0302 	and.w	r3, r3, #2
24017788:	f1c3 0301 	rsb	r3, r3, #1
2401778c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24017790:	ee76 0ae0 	vsub.f32	s1, s13, s1
24017794:	ee77 7ae0 	vsub.f32	s15, s15, s1
24017798:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401779c:	ee07 3a90 	vmov	s15, r3
240177a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240177a4:	ee67 7a80 	vmul.f32	s15, s15, s0
240177a8:	e77c      	b.n	240176a4 <__kernel_tanf+0x30>
240177aa:	2801      	cmp	r0, #1
240177ac:	d01b      	beq.n	240177e6 <__kernel_tanf+0x172>
240177ae:	4b20      	ldr	r3, [pc, #128]	; (24017830 <__kernel_tanf+0x1bc>)
240177b0:	ee17 2a10 	vmov	r2, s14
240177b4:	401a      	ands	r2, r3
240177b6:	ee06 2a10 	vmov	s12, r2
240177ba:	ee76 7a67 	vsub.f32	s15, s12, s15
240177be:	ee70 0ae7 	vsub.f32	s1, s1, s15
240177c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
240177c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
240177ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240177ce:	ee16 2a90 	vmov	r2, s13
240177d2:	4013      	ands	r3, r2
240177d4:	ee07 3a90 	vmov	s15, r3
240177d8:	eea6 7a27 	vfma.f32	s14, s12, s15
240177dc:	eea0 7aa7 	vfma.f32	s14, s1, s15
240177e0:	eee7 7a26 	vfma.f32	s15, s14, s13
240177e4:	e75e      	b.n	240176a4 <__kernel_tanf+0x30>
240177e6:	eef0 7a47 	vmov.f32	s15, s14
240177ea:	e75b      	b.n	240176a4 <__kernel_tanf+0x30>
240177ec:	3f2ca140 	.word	0x3f2ca140
240177f0:	3f490fda 	.word	0x3f490fda
240177f4:	33222168 	.word	0x33222168
240177f8:	00000000 	.word	0x00000000
240177fc:	b79bae5f 	.word	0xb79bae5f
24017800:	38a3f445 	.word	0x38a3f445
24017804:	37d95384 	.word	0x37d95384
24017808:	3a1a26c8 	.word	0x3a1a26c8
2401780c:	3b6b6916 	.word	0x3b6b6916
24017810:	3cb327a4 	.word	0x3cb327a4
24017814:	3e088889 	.word	0x3e088889
24017818:	3895c07a 	.word	0x3895c07a
2401781c:	398137b9 	.word	0x398137b9
24017820:	3abede48 	.word	0x3abede48
24017824:	3c11371f 	.word	0x3c11371f
24017828:	3d5d0dd1 	.word	0x3d5d0dd1
2401782c:	3eaaaaab 	.word	0x3eaaaaab
24017830:	fffff000 	.word	0xfffff000

24017834 <fabs>:
24017834:	ec51 0b10 	vmov	r0, r1, d0
24017838:	ee10 2a10 	vmov	r2, s0
2401783c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
24017840:	ec43 2b10 	vmov	d0, r2, r3
24017844:	4770      	bx	lr
	...

24017848 <floor>:
24017848:	ee10 1a90 	vmov	r1, s1
2401784c:	f3c1 520a 	ubfx	r2, r1, #20, #11
24017850:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
24017854:	2b13      	cmp	r3, #19
24017856:	b530      	push	{r4, r5, lr}
24017858:	ee10 0a10 	vmov	r0, s0
2401785c:	ee10 5a10 	vmov	r5, s0
24017860:	dc31      	bgt.n	240178c6 <floor+0x7e>
24017862:	2b00      	cmp	r3, #0
24017864:	da15      	bge.n	24017892 <floor+0x4a>
24017866:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 24017920 <floor+0xd8>
2401786a:	ee30 0b07 	vadd.f64	d0, d0, d7
2401786e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24017872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017876:	dd07      	ble.n	24017888 <floor+0x40>
24017878:	2900      	cmp	r1, #0
2401787a:	da4e      	bge.n	2401791a <floor+0xd2>
2401787c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
24017880:	4318      	orrs	r0, r3
24017882:	d001      	beq.n	24017888 <floor+0x40>
24017884:	4928      	ldr	r1, [pc, #160]	; (24017928 <floor+0xe0>)
24017886:	2000      	movs	r0, #0
24017888:	460b      	mov	r3, r1
2401788a:	4602      	mov	r2, r0
2401788c:	ec43 2b10 	vmov	d0, r2, r3
24017890:	e020      	b.n	240178d4 <floor+0x8c>
24017892:	4a26      	ldr	r2, [pc, #152]	; (2401792c <floor+0xe4>)
24017894:	411a      	asrs	r2, r3
24017896:	ea01 0402 	and.w	r4, r1, r2
2401789a:	4304      	orrs	r4, r0
2401789c:	d01a      	beq.n	240178d4 <floor+0x8c>
2401789e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 24017920 <floor+0xd8>
240178a2:	ee30 0b07 	vadd.f64	d0, d0, d7
240178a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
240178aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240178ae:	ddeb      	ble.n	24017888 <floor+0x40>
240178b0:	2900      	cmp	r1, #0
240178b2:	bfbe      	ittt	lt
240178b4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
240178b8:	fa40 f303 	asrlt.w	r3, r0, r3
240178bc:	18c9      	addlt	r1, r1, r3
240178be:	ea21 0102 	bic.w	r1, r1, r2
240178c2:	2000      	movs	r0, #0
240178c4:	e7e0      	b.n	24017888 <floor+0x40>
240178c6:	2b33      	cmp	r3, #51	; 0x33
240178c8:	dd05      	ble.n	240178d6 <floor+0x8e>
240178ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
240178ce:	d101      	bne.n	240178d4 <floor+0x8c>
240178d0:	ee30 0b00 	vadd.f64	d0, d0, d0
240178d4:	bd30      	pop	{r4, r5, pc}
240178d6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
240178da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
240178de:	40e2      	lsrs	r2, r4
240178e0:	4202      	tst	r2, r0
240178e2:	d0f7      	beq.n	240178d4 <floor+0x8c>
240178e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 24017920 <floor+0xd8>
240178e8:	ee30 0b07 	vadd.f64	d0, d0, d7
240178ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
240178f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240178f4:	ddc8      	ble.n	24017888 <floor+0x40>
240178f6:	2900      	cmp	r1, #0
240178f8:	da02      	bge.n	24017900 <floor+0xb8>
240178fa:	2b14      	cmp	r3, #20
240178fc:	d103      	bne.n	24017906 <floor+0xbe>
240178fe:	3101      	adds	r1, #1
24017900:	ea20 0002 	bic.w	r0, r0, r2
24017904:	e7c0      	b.n	24017888 <floor+0x40>
24017906:	2401      	movs	r4, #1
24017908:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401790c:	fa04 f303 	lsl.w	r3, r4, r3
24017910:	4418      	add	r0, r3
24017912:	42a8      	cmp	r0, r5
24017914:	bf38      	it	cc
24017916:	1909      	addcc	r1, r1, r4
24017918:	e7f2      	b.n	24017900 <floor+0xb8>
2401791a:	2000      	movs	r0, #0
2401791c:	4601      	mov	r1, r0
2401791e:	e7b3      	b.n	24017888 <floor+0x40>
24017920:	8800759c 	.word	0x8800759c
24017924:	7e37e43c 	.word	0x7e37e43c
24017928:	bff00000 	.word	0xbff00000
2401792c:	000fffff 	.word	0x000fffff

24017930 <scalbn>:
24017930:	ee10 1a90 	vmov	r1, s1
24017934:	b510      	push	{r4, lr}
24017936:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401793a:	b98c      	cbnz	r4, 24017960 <scalbn+0x30>
2401793c:	ee10 3a10 	vmov	r3, s0
24017940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24017944:	430b      	orrs	r3, r1
24017946:	d011      	beq.n	2401796c <scalbn+0x3c>
24017948:	ed9f 7b31 	vldr	d7, [pc, #196]	; 24017a10 <scalbn+0xe0>
2401794c:	4b3c      	ldr	r3, [pc, #240]	; (24017a40 <scalbn+0x110>)
2401794e:	ee20 0b07 	vmul.f64	d0, d0, d7
24017952:	4298      	cmp	r0, r3
24017954:	da0b      	bge.n	2401796e <scalbn+0x3e>
24017956:	ed9f 7b30 	vldr	d7, [pc, #192]	; 24017a18 <scalbn+0xe8>
2401795a:	ee20 0b07 	vmul.f64	d0, d0, d7
2401795e:	e005      	b.n	2401796c <scalbn+0x3c>
24017960:	f240 73ff 	movw	r3, #2047	; 0x7ff
24017964:	429c      	cmp	r4, r3
24017966:	d107      	bne.n	24017978 <scalbn+0x48>
24017968:	ee30 0b00 	vadd.f64	d0, d0, d0
2401796c:	bd10      	pop	{r4, pc}
2401796e:	ee10 1a90 	vmov	r1, s1
24017972:	f3c1 540a 	ubfx	r4, r1, #20, #11
24017976:	3c36      	subs	r4, #54	; 0x36
24017978:	4404      	add	r4, r0
2401797a:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401797e:	429c      	cmp	r4, r3
24017980:	dd0d      	ble.n	2401799e <scalbn+0x6e>
24017982:	ed9f 7b27 	vldr	d7, [pc, #156]	; 24017a20 <scalbn+0xf0>
24017986:	ed9f 5b28 	vldr	d5, [pc, #160]	; 24017a28 <scalbn+0xf8>
2401798a:	eeb0 6b47 	vmov.f64	d6, d7
2401798e:	ee10 3a90 	vmov	r3, s1
24017992:	2b00      	cmp	r3, #0
24017994:	fe27 7b05 	vselge.f64	d7, d7, d5
24017998:	ee27 0b06 	vmul.f64	d0, d7, d6
2401799c:	e7e6      	b.n	2401796c <scalbn+0x3c>
2401799e:	2c00      	cmp	r4, #0
240179a0:	dd0a      	ble.n	240179b8 <scalbn+0x88>
240179a2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
240179a6:	ec53 2b10 	vmov	r2, r3, d0
240179aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
240179ae:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
240179b2:	ec43 2b10 	vmov	d0, r2, r3
240179b6:	e7d9      	b.n	2401796c <scalbn+0x3c>
240179b8:	f114 0f35 	cmn.w	r4, #53	; 0x35
240179bc:	da19      	bge.n	240179f2 <scalbn+0xc2>
240179be:	f24c 3350 	movw	r3, #50000	; 0xc350
240179c2:	4298      	cmp	r0, r3
240179c4:	ee10 3a90 	vmov	r3, s1
240179c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
240179cc:	dd09      	ble.n	240179e2 <scalbn+0xb2>
240179ce:	ed9f 0b14 	vldr	d0, [pc, #80]	; 24017a20 <scalbn+0xf0>
240179d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 24017a28 <scalbn+0xf8>
240179d6:	eeb0 7b40 	vmov.f64	d7, d0
240179da:	2b00      	cmp	r3, #0
240179dc:	fe00 0b06 	vseleq.f64	d0, d0, d6
240179e0:	e7bb      	b.n	2401795a <scalbn+0x2a>
240179e2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 24017a18 <scalbn+0xe8>
240179e6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 24017a30 <scalbn+0x100>
240179ea:	eeb0 7b40 	vmov.f64	d7, d0
240179ee:	2b00      	cmp	r3, #0
240179f0:	e7f4      	b.n	240179dc <scalbn+0xac>
240179f2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
240179f6:	ec53 2b10 	vmov	r2, r3, d0
240179fa:	3436      	adds	r4, #54	; 0x36
240179fc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24017a00:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
24017a04:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24017a38 <scalbn+0x108>
24017a08:	ec43 2b10 	vmov	d0, r2, r3
24017a0c:	e7a5      	b.n	2401795a <scalbn+0x2a>
24017a0e:	bf00      	nop
24017a10:	00000000 	.word	0x00000000
24017a14:	43500000 	.word	0x43500000
24017a18:	c2f8f359 	.word	0xc2f8f359
24017a1c:	01a56e1f 	.word	0x01a56e1f
24017a20:	8800759c 	.word	0x8800759c
24017a24:	7e37e43c 	.word	0x7e37e43c
24017a28:	8800759c 	.word	0x8800759c
24017a2c:	fe37e43c 	.word	0xfe37e43c
24017a30:	c2f8f359 	.word	0xc2f8f359
24017a34:	81a56e1f 	.word	0x81a56e1f
24017a38:	00000000 	.word	0x00000000
24017a3c:	3c900000 	.word	0x3c900000
24017a40:	ffff3cb0 	.word	0xffff3cb0

24017a44 <expm1f>:
24017a44:	ee10 2a10 	vmov	r2, s0
24017a48:	497c      	ldr	r1, [pc, #496]	; (24017c3c <expm1f+0x1f8>)
24017a4a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24017a4e:	428b      	cmp	r3, r1
24017a50:	d920      	bls.n	24017a94 <expm1f+0x50>
24017a52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24017a56:	d902      	bls.n	24017a5e <expm1f+0x1a>
24017a58:	ee30 0a00 	vadd.f32	s0, s0, s0
24017a5c:	4770      	bx	lr
24017a5e:	d105      	bne.n	24017a6c <expm1f+0x28>
24017a60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24017a64:	2a00      	cmp	r2, #0
24017a66:	fe20 0a27 	vselge.f32	s0, s0, s15
24017a6a:	4770      	bx	lr
24017a6c:	2a00      	cmp	r2, #0
24017a6e:	db05      	blt.n	24017a7c <expm1f+0x38>
24017a70:	4973      	ldr	r1, [pc, #460]	; (24017c40 <expm1f+0x1fc>)
24017a72:	428b      	cmp	r3, r1
24017a74:	d95c      	bls.n	24017b30 <expm1f+0xec>
24017a76:	2000      	movs	r0, #0
24017a78:	f7fd bf80 	b.w	2401597c <__math_oflowf>
24017a7c:	eddf 7a71 	vldr	s15, [pc, #452]	; 24017c44 <expm1f+0x200>
24017a80:	ee70 7a27 	vadd.f32	s15, s0, s15
24017a84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24017a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a8c:	d550      	bpl.n	24017b30 <expm1f+0xec>
24017a8e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017a92:	4770      	bx	lr
24017a94:	496c      	ldr	r1, [pc, #432]	; (24017c48 <expm1f+0x204>)
24017a96:	428b      	cmp	r3, r1
24017a98:	d966      	bls.n	24017b68 <expm1f+0x124>
24017a9a:	496c      	ldr	r1, [pc, #432]	; (24017c4c <expm1f+0x208>)
24017a9c:	428b      	cmp	r3, r1
24017a9e:	d847      	bhi.n	24017b30 <expm1f+0xec>
24017aa0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 24017c50 <expm1f+0x20c>
24017aa4:	2a00      	cmp	r2, #0
24017aa6:	bfa7      	ittee	ge
24017aa8:	ee30 7a47 	vsubge.f32	s14, s0, s14
24017aac:	eddf 7a69 	vldrge	s15, [pc, #420]	; 24017c54 <expm1f+0x210>
24017ab0:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 24017c58 <expm1f+0x214>
24017ab4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
24017ab8:	bfac      	ite	ge
24017aba:	2301      	movge	r3, #1
24017abc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
24017ac0:	ee37 0a67 	vsub.f32	s0, s14, s15
24017ac4:	ee37 7a40 	vsub.f32	s14, s14, s0
24017ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
24017acc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
24017ad0:	ee20 4a25 	vmul.f32	s8, s0, s11
24017ad4:	ed9f 6a61 	vldr	s12, [pc, #388]	; 24017c5c <expm1f+0x218>
24017ad8:	eddf 6a61 	vldr	s13, [pc, #388]	; 24017c60 <expm1f+0x21c>
24017adc:	ed9f 5a61 	vldr	s10, [pc, #388]	; 24017c64 <expm1f+0x220>
24017ae0:	ee20 7a04 	vmul.f32	s14, s0, s8
24017ae4:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
24017ae8:	eee7 6a06 	vfma.f32	s13, s14, s12
24017aec:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 24017c68 <expm1f+0x224>
24017af0:	eea6 6a87 	vfma.f32	s12, s13, s14
24017af4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 24017c6c <expm1f+0x228>
24017af8:	eee6 6a07 	vfma.f32	s13, s12, s14
24017afc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24017b00:	eea6 5a87 	vfma.f32	s10, s13, s14
24017b04:	eef0 6a46 	vmov.f32	s13, s12
24017b08:	eee5 6a07 	vfma.f32	s13, s10, s14
24017b0c:	eee4 4a66 	vfms.f32	s9, s8, s13
24017b10:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
24017b14:	eea0 4a64 	vfms.f32	s8, s0, s9
24017b18:	ee36 5ae4 	vsub.f32	s10, s13, s9
24017b1c:	eec5 6a04 	vdiv.f32	s13, s10, s8
24017b20:	ee66 6a87 	vmul.f32	s13, s13, s14
24017b24:	bb73      	cbnz	r3, 24017b84 <expm1f+0x140>
24017b26:	eef0 7a47 	vmov.f32	s15, s14
24017b2a:	eed0 7a26 	vfnms.f32	s15, s0, s13
24017b2e:	e024      	b.n	24017b7a <expm1f+0x136>
24017b30:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
24017b34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24017b38:	2a00      	cmp	r2, #0
24017b3a:	fe67 7a87 	vselge.f32	s15, s15, s14
24017b3e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 24017c70 <expm1f+0x22c>
24017b42:	eddf 6a43 	vldr	s13, [pc, #268]	; 24017c50 <expm1f+0x20c>
24017b46:	ee40 7a07 	vmla.f32	s15, s0, s14
24017b4a:	eeb0 7a40 	vmov.f32	s14, s0
24017b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017b52:	ee17 3a90 	vmov	r3, s15
24017b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017b5a:	eea7 7ae6 	vfms.f32	s14, s15, s13
24017b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24017c54 <expm1f+0x210>
24017b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
24017b66:	e7ab      	b.n	24017ac0 <expm1f+0x7c>
24017b68:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
24017b6c:	d208      	bcs.n	24017b80 <expm1f+0x13c>
24017b6e:	eddf 7a41 	vldr	s15, [pc, #260]	; 24017c74 <expm1f+0x230>
24017b72:	ee70 7a27 	vadd.f32	s15, s0, s15
24017b76:	ee77 7ae7 	vsub.f32	s15, s15, s15
24017b7a:	ee30 0a67 	vsub.f32	s0, s0, s15
24017b7e:	4770      	bx	lr
24017b80:	2300      	movs	r3, #0
24017b82:	e7a3      	b.n	24017acc <expm1f+0x88>
24017b84:	ee76 6ae7 	vsub.f32	s13, s13, s15
24017b88:	1c5a      	adds	r2, r3, #1
24017b8a:	eed6 7a80 	vfnms.f32	s15, s13, s0
24017b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017b92:	d106      	bne.n	24017ba2 <expm1f+0x15e>
24017b94:	ee70 7a67 	vsub.f32	s15, s0, s15
24017b98:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24017b9c:	eea7 0aa5 	vfma.f32	s0, s15, s11
24017ba0:	4770      	bx	lr
24017ba2:	2b01      	cmp	r3, #1
24017ba4:	d118      	bne.n	24017bd8 <expm1f+0x194>
24017ba6:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
24017baa:	eeb4 0ac7 	vcmpe.f32	s0, s14
24017bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017bb2:	bf5b      	ittet	pl
24017bb4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
24017bb8:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
24017bbc:	ee30 0a25 	vaddmi.f32	s0, s0, s11
24017bc0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
24017bc4:	bf43      	ittte	mi
24017bc6:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
24017bca:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
24017bce:	ee27 0a80 	vmulmi.f32	s0, s15, s0
24017bd2:	eeb0 0a46 	vmovpl.f32	s0, s12
24017bd6:	4770      	bx	lr
24017bd8:	1c5a      	adds	r2, r3, #1
24017bda:	2a39      	cmp	r2, #57	; 0x39
24017bdc:	ea4f 51c3 	mov.w	r1, r3, lsl #23
24017be0:	d90b      	bls.n	24017bfa <expm1f+0x1b6>
24017be2:	ee37 0ac0 	vsub.f32	s0, s15, s0
24017be6:	ee36 0a40 	vsub.f32	s0, s12, s0
24017bea:	ee10 3a10 	vmov	r3, s0
24017bee:	440b      	add	r3, r1
24017bf0:	ee00 3a10 	vmov	s0, r3
24017bf4:	ee30 0a46 	vsub.f32	s0, s0, s12
24017bf8:	4770      	bx	lr
24017bfa:	2b16      	cmp	r3, #22
24017bfc:	dc11      	bgt.n	24017c22 <expm1f+0x1de>
24017bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24017c02:	fa42 f303 	asr.w	r3, r2, r3
24017c06:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
24017c0a:	ee37 0ac0 	vsub.f32	s0, s15, s0
24017c0e:	ee07 3a90 	vmov	s15, r3
24017c12:	ee37 0ac0 	vsub.f32	s0, s15, s0
24017c16:	ee10 3a10 	vmov	r3, s0
24017c1a:	440b      	add	r3, r1
24017c1c:	ee00 3a10 	vmov	s0, r3
24017c20:	4770      	bx	lr
24017c22:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
24017c26:	05db      	lsls	r3, r3, #23
24017c28:	ee07 3a10 	vmov	s14, r3
24017c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
24017c30:	ee70 7a67 	vsub.f32	s15, s0, s15
24017c34:	ee37 0a86 	vadd.f32	s0, s15, s12
24017c38:	e7ed      	b.n	24017c16 <expm1f+0x1d2>
24017c3a:	bf00      	nop
24017c3c:	4195b843 	.word	0x4195b843
24017c40:	42b17217 	.word	0x42b17217
24017c44:	0da24260 	.word	0x0da24260
24017c48:	3eb17218 	.word	0x3eb17218
24017c4c:	3f851591 	.word	0x3f851591
24017c50:	3f317180 	.word	0x3f317180
24017c54:	3717f7d1 	.word	0x3717f7d1
24017c58:	b717f7d1 	.word	0xb717f7d1
24017c5c:	b457edbb 	.word	0xb457edbb
24017c60:	36867e54 	.word	0x36867e54
24017c64:	bd088889 	.word	0xbd088889
24017c68:	b8a670cd 	.word	0xb8a670cd
24017c6c:	3ad00d01 	.word	0x3ad00d01
24017c70:	3fb8aa3b 	.word	0x3fb8aa3b
24017c74:	7149f2ca 	.word	0x7149f2ca

24017c78 <floorf>:
24017c78:	ee10 3a10 	vmov	r3, s0
24017c7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24017c80:	3a7f      	subs	r2, #127	; 0x7f
24017c82:	2a16      	cmp	r2, #22
24017c84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24017c88:	dc2a      	bgt.n	24017ce0 <floorf+0x68>
24017c8a:	2a00      	cmp	r2, #0
24017c8c:	da11      	bge.n	24017cb2 <floorf+0x3a>
24017c8e:	eddf 7a18 	vldr	s15, [pc, #96]	; 24017cf0 <floorf+0x78>
24017c92:	ee30 0a27 	vadd.f32	s0, s0, s15
24017c96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c9e:	dd05      	ble.n	24017cac <floorf+0x34>
24017ca0:	2b00      	cmp	r3, #0
24017ca2:	da23      	bge.n	24017cec <floorf+0x74>
24017ca4:	4a13      	ldr	r2, [pc, #76]	; (24017cf4 <floorf+0x7c>)
24017ca6:	2900      	cmp	r1, #0
24017ca8:	bf18      	it	ne
24017caa:	4613      	movne	r3, r2
24017cac:	ee00 3a10 	vmov	s0, r3
24017cb0:	4770      	bx	lr
24017cb2:	4911      	ldr	r1, [pc, #68]	; (24017cf8 <floorf+0x80>)
24017cb4:	4111      	asrs	r1, r2
24017cb6:	420b      	tst	r3, r1
24017cb8:	d0fa      	beq.n	24017cb0 <floorf+0x38>
24017cba:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24017cf0 <floorf+0x78>
24017cbe:	ee30 0a27 	vadd.f32	s0, s0, s15
24017cc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017cca:	ddef      	ble.n	24017cac <floorf+0x34>
24017ccc:	2b00      	cmp	r3, #0
24017cce:	bfbe      	ittt	lt
24017cd0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
24017cd4:	fa40 f202 	asrlt.w	r2, r0, r2
24017cd8:	189b      	addlt	r3, r3, r2
24017cda:	ea23 0301 	bic.w	r3, r3, r1
24017cde:	e7e5      	b.n	24017cac <floorf+0x34>
24017ce0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
24017ce4:	d3e4      	bcc.n	24017cb0 <floorf+0x38>
24017ce6:	ee30 0a00 	vadd.f32	s0, s0, s0
24017cea:	4770      	bx	lr
24017cec:	2300      	movs	r3, #0
24017cee:	e7dd      	b.n	24017cac <floorf+0x34>
24017cf0:	7149f2ca 	.word	0x7149f2ca
24017cf4:	bf800000 	.word	0xbf800000
24017cf8:	007fffff 	.word	0x007fffff

24017cfc <nanf>:
24017cfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24017d04 <nanf+0x8>
24017d00:	4770      	bx	lr
24017d02:	bf00      	nop
24017d04:	7fc00000 	.word	0x7fc00000

24017d08 <scalbnf>:
24017d08:	ee10 3a10 	vmov	r3, s0
24017d0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24017d10:	d024      	beq.n	24017d5c <scalbnf+0x54>
24017d12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24017d16:	d302      	bcc.n	24017d1e <scalbnf+0x16>
24017d18:	ee30 0a00 	vadd.f32	s0, s0, s0
24017d1c:	4770      	bx	lr
24017d1e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24017d22:	d121      	bne.n	24017d68 <scalbnf+0x60>
24017d24:	4b29      	ldr	r3, [pc, #164]	; (24017dcc <scalbnf+0xc4>)
24017d26:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24017dd0 <scalbnf+0xc8>
24017d2a:	4298      	cmp	r0, r3
24017d2c:	ee20 0a27 	vmul.f32	s0, s0, s15
24017d30:	db15      	blt.n	24017d5e <scalbnf+0x56>
24017d32:	ee10 3a10 	vmov	r3, s0
24017d36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24017d3a:	3a19      	subs	r2, #25
24017d3c:	4402      	add	r2, r0
24017d3e:	2afe      	cmp	r2, #254	; 0xfe
24017d40:	dd14      	ble.n	24017d6c <scalbnf+0x64>
24017d42:	eddf 7a24 	vldr	s15, [pc, #144]	; 24017dd4 <scalbnf+0xcc>
24017d46:	eddf 6a24 	vldr	s13, [pc, #144]	; 24017dd8 <scalbnf+0xd0>
24017d4a:	ee10 3a10 	vmov	r3, s0
24017d4e:	eeb0 7a67 	vmov.f32	s14, s15
24017d52:	2b00      	cmp	r3, #0
24017d54:	fe67 7aa6 	vselge.f32	s15, s15, s13
24017d58:	ee27 0a27 	vmul.f32	s0, s14, s15
24017d5c:	4770      	bx	lr
24017d5e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24017ddc <scalbnf+0xd4>
24017d62:	ee20 0a27 	vmul.f32	s0, s0, s15
24017d66:	4770      	bx	lr
24017d68:	0dd2      	lsrs	r2, r2, #23
24017d6a:	e7e7      	b.n	24017d3c <scalbnf+0x34>
24017d6c:	2a00      	cmp	r2, #0
24017d6e:	dd06      	ble.n	24017d7e <scalbnf+0x76>
24017d70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017d74:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
24017d78:	ee00 3a10 	vmov	s0, r3
24017d7c:	4770      	bx	lr
24017d7e:	f112 0f16 	cmn.w	r2, #22
24017d82:	da19      	bge.n	24017db8 <scalbnf+0xb0>
24017d84:	f24c 3350 	movw	r3, #50000	; 0xc350
24017d88:	4298      	cmp	r0, r3
24017d8a:	ee10 3a10 	vmov	r3, s0
24017d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24017d92:	dd09      	ble.n	24017da8 <scalbnf+0xa0>
24017d94:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 24017dd4 <scalbnf+0xcc>
24017d98:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24017dd8 <scalbnf+0xd0>
24017d9c:	eef0 7a40 	vmov.f32	s15, s0
24017da0:	2b00      	cmp	r3, #0
24017da2:	fe00 0a07 	vseleq.f32	s0, s0, s14
24017da6:	e7dc      	b.n	24017d62 <scalbnf+0x5a>
24017da8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24017ddc <scalbnf+0xd4>
24017dac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24017de0 <scalbnf+0xd8>
24017db0:	eef0 7a40 	vmov.f32	s15, s0
24017db4:	2b00      	cmp	r3, #0
24017db6:	e7f4      	b.n	24017da2 <scalbnf+0x9a>
24017db8:	3219      	adds	r2, #25
24017dba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017dbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
24017dc2:	eddf 7a08 	vldr	s15, [pc, #32]	; 24017de4 <scalbnf+0xdc>
24017dc6:	ee07 3a10 	vmov	s14, r3
24017dca:	e7c5      	b.n	24017d58 <scalbnf+0x50>
24017dcc:	ffff3cb0 	.word	0xffff3cb0
24017dd0:	4c000000 	.word	0x4c000000
24017dd4:	7149f2ca 	.word	0x7149f2ca
24017dd8:	f149f2ca 	.word	0xf149f2ca
24017ddc:	0da24260 	.word	0x0da24260
24017de0:	8da24260 	.word	0x8da24260
24017de4:	33000000 	.word	0x33000000
24017de8:	62652e2a 	.word	0x62652e2a
24017dec:	00000070 	.word	0x00000070
24017df0:	53594850 	.word	0x53594850
24017df4:	52545320 	.word	0x52545320
24017df8:	20202031 	.word	0x20202031
24017dfc:	00002020 	.word	0x00002020
24017e00:	67726154 	.word	0x67726154
24017e04:	654c7465 	.word	0x654c7465
24017e08:	20202076 	.word	0x20202076
24017e0c:	00002020 	.word	0x00002020
24017e10:	5376654c 	.word	0x5376654c
24017e14:	746f6f6d 	.word	0x746f6f6d
24017e18:	20202068 	.word	0x20202068
24017e1c:	00002020 	.word	0x00002020
24017e20:	5376654c 	.word	0x5376654c
24017e24:	6e657274 	.word	0x6e657274
24017e28:	20207467 	.word	0x20207467
24017e2c:	00002020 	.word	0x00002020
24017e30:	4d76654c 	.word	0x4d76654c
24017e34:	2065646f 	.word	0x2065646f
24017e38:	20202020 	.word	0x20202020
24017e3c:	00002020 	.word	0x00002020
24017e40:	20202020 	.word	0x20202020
24017e44:	20202020 	.word	0x20202020
24017e48:	20202020 	.word	0x20202020
24017e4c:	00002020 	.word	0x00002020
24017e50:	53594850 	.word	0x53594850
24017e54:	52545320 	.word	0x52545320
24017e58:	20202032 	.word	0x20202032
24017e5c:	00002020 	.word	0x00002020
24017e60:	654c4246 	.word	0x654c4246
24017e64:	6e4f2076 	.word	0x6e4f2076
24017e68:	20202020 	.word	0x20202020
24017e6c:	00002020 	.word	0x00002020
24017e70:	6b636950 	.word	0x6b636950
24017e74:	20736f50 	.word	0x20736f50
24017e78:	20202020 	.word	0x20202020
24017e7c:	00002020 	.word	0x00002020
24017e80:	61636544 	.word	0x61636544
24017e84:	20202079 	.word	0x20202079
24017e88:	20202020 	.word	0x20202020
24017e8c:	00002020 	.word	0x00002020
24017e90:	63756f54 	.word	0x63756f54
24017e94:	20202068 	.word	0x20202068
24017e98:	20202020 	.word	0x20202020
24017e9c:	00002020 	.word	0x00002020
24017ea0:	73696f4e 	.word	0x73696f4e
24017ea4:	20203165 	.word	0x20203165
24017ea8:	20202020 	.word	0x20202020
24017eac:	00002020 	.word	0x00002020
24017eb0:	73696f4e 	.word	0x73696f4e
24017eb4:	20203265 	.word	0x20203265
24017eb8:	20202020 	.word	0x20202020
24017ebc:	00002020 	.word	0x00002020
24017ec0:	49444441 	.word	0x49444441
24017ec4:	45564954 	.word	0x45564954
24017ec8:	20202020 	.word	0x20202020
24017ecc:	00002020 	.word	0x00002020
24017ed0:	656e6f54 	.word	0x656e6f54
24017ed4:	20202020 	.word	0x20202020
24017ed8:	20202020 	.word	0x20202020
24017edc:	00002020 	.word	0x00002020
24017ee0:	65727453 	.word	0x65727453
24017ee4:	20686374 	.word	0x20686374
24017ee8:	20202020 	.word	0x20202020
24017eec:	00002020 	.word	0x00002020
24017ef0:	646e6152 	.word	0x646e6152
24017ef4:	79636544 	.word	0x79636544
24017ef8:	20202020 	.word	0x20202020
24017efc:	00002020 	.word	0x00002020
24017f00:	646e6152 	.word	0x646e6152
24017f04:	6e696147 	.word	0x6e696147
24017f08:	20202020 	.word	0x20202020
24017f0c:	00002020 	.word	0x00002020
24017f10:	73696f4e 	.word	0x73696f4e
24017f14:	6c6f5665 	.word	0x6c6f5665
24017f18:	20202020 	.word	0x20202020
24017f1c:	00002020 	.word	0x00002020
24017f20:	7062652e 	.word	0x7062652e
24017f24:	00000000 	.word	0x00000000
24017f28:	69617262 	.word	0x69617262
24017f2c:	69622e6e 	.word	0x69622e6e
24017f30:	0000006e 	.word	0x0000006e
24017f34:	63756c70 	.word	0x63756c70
24017f38:	69622e6b 	.word	0x69622e6b
24017f3c:	0000006e 	.word	0x0000006e

24017f40 <D1CorePrescTable>:
24017f40:	00000000 04030201 04030201 09080706     ................

24017f50 <flagBitshiftOffset.0>:
24017f50:	16100600 16100600                       ........

24017f58 <SD_Driver>:
24017f58:	2400caed 2400cb1d 2400cb3d 2400cbcd     ...$...$=..$...$
24017f68:	2400cb65 3c3a2a22 7f7c3f3e 00000000     e..$"*:<>?|.....
24017f78:	3d3b2c2b 00005d5b                       +,;=[]..

24017f80 <ExCvt>:
24017f80:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
24017f90:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
24017fa0:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
24017fb0:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
24017fc0:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
24017fd0:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
24017fe0:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
24017ff0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

24018000 <LfnOfs>:
24018000:	07050301 12100e09 1c181614 0000001e     ................

24018010 <Tbl>:
24018010:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
24018020:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
24018030:	00e600c9 00f400c6 00f200f6 00f900fb     ................
24018040:	00d600ff 00f800dc 00d800a3 019200d7     ................
24018050:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
24018060:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
24018070:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
24018080:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
24018090:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
240180a0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
240180b0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
240180c0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
240180d0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
240180e0:	00da00de 00d900db 00dd00fd 00b400af     ................
240180f0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
24018100:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

24018110 <cvt1.1>:
24018110:	031a0061 031700e0 030700f8 000100ff     a...............
24018120:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
24018130:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
24018140:	01840182 01860184 01870187 018a0189     ................
24018150:	018b018b 018e018d 0190018f 01910191     ................
24018160:	01940193 019601f6 01980197 023d0198     ..............=.
24018170:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
24018180:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
24018190:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
240181a0:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
240181b0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
240181c0:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
240181d0:	01ca01cb 011001cd 000101dd 01de018e     ................
240181e0:	01f30112 01f10003 01f401f4 012801f8     ..............(.
240181f0:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
24018200:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
24018210:	01810040 02550186 018a0189 018f0258     @.....U.....X...
24018220:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
24018230:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
24018240:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
24018250:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
24018260:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
24018270:	01a90282 02850284 02870286 024401ae     ..............D.
24018280:	01b201b1 028d0245 028f028e 02910290     ....E...........
24018290:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
240182a0:	03880386 038a0389 031103b1 000203c2     ................
240182b0:	03a303a3 030803c4 000303cc 038e038c     ................
240182c0:	03d8038f 03f20118 03f9000a 03f403f3     ................
240182d0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
240182e0:	04500320 04600710 048a0122 04c10136      .P...`."...6...
240182f0:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
24018300:	00000000                                ....

24018304 <cvt2.0>:
24018304:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
24018314:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
24018324:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
24018334:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
24018344:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
24018354:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
24018364:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
24018374:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
24018384:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
24018394:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
240183a4:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
240183b4:	2d000164 ff410826 0000031a              d..-&.A.....

240183c0 <__leaf_table_filtertan>:
240183c0:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
240183d0:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
240183e0:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
240183f0:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
24018400:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
24018410:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
24018420:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
24018430:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
24018440:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
24018450:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
24018460:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
24018470:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
24018480:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
24018490:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
240184a0:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
240184b0:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
240184c0:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
240184d0:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
240184e0:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
240184f0:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
24018500:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
24018510:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
24018520:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
24018530:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
24018540:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
24018550:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
24018560:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
24018570:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
24018580:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
24018590:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
240185a0:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
240185b0:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
240185c0:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
240185d0:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
240185e0:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
240185f0:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
24018600:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
24018610:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
24018620:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
24018630:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
24018640:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
24018650:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
24018660:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
24018670:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
24018680:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
24018690:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
240186a0:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
240186b0:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
240186c0:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
240186d0:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
240186e0:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
240186f0:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
24018700:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
24018710:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
24018720:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
24018730:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
24018740:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
24018750:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
24018760:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
24018770:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
24018780:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
24018790:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
240187a0:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
240187b0:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
240187c0:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
240187d0:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
240187e0:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
240187f0:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
24018800:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
24018810:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
24018820:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
24018830:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
24018840:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
24018850:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
24018860:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
24018870:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
24018880:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
24018890:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
240188a0:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
240188b0:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
240188c0:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
240188d0:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
240188e0:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
240188f0:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
24018900:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
24018910:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
24018920:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
24018930:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
24018940:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
24018950:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
24018960:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
24018970:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
24018980:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
24018990:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
240189a0:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
240189b0:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
240189c0:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
240189d0:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
240189e0:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
240189f0:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
24018a00:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
24018a10:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
24018a20:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
24018a30:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
24018a40:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
24018a50:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
24018a60:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
24018a70:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
24018a80:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
24018a90:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
24018aa0:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
24018ab0:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
24018ac0:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
24018ad0:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
24018ae0:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
24018af0:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
24018b00:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
24018b10:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
24018b20:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
24018b30:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
24018b40:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
24018b50:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
24018b60:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
24018b70:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
24018b80:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
24018b90:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
24018ba0:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
24018bb0:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
24018bc0:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
24018bd0:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
24018be0:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
24018bf0:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
24018c00:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
24018c10:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
24018c20:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
24018c30:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
24018c40:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
24018c50:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
24018c60:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
24018c70:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
24018c80:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
24018c90:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
24018ca0:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
24018cb0:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
24018cc0:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
24018cd0:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
24018ce0:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
24018cf0:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
24018d00:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
24018d10:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
24018d20:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
24018d30:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
24018d40:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
24018d50:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
24018d60:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
24018d70:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
24018d80:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
24018d90:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
24018da0:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
24018db0:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
24018dc0:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
24018dd0:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
24018de0:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
24018df0:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
24018e00:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
24018e10:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
24018e20:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
24018e30:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
24018e40:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
24018e50:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
24018e60:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
24018e70:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
24018e80:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
24018e90:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
24018ea0:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
24018eb0:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
24018ec0:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
24018ed0:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
24018ee0:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
24018ef0:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
24018f00:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
24018f10:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
24018f20:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
24018f30:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
24018f40:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
24018f50:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
24018f60:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
24018f70:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
24018f80:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
24018f90:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
24018fa0:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
24018fb0:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
24018fc0:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
24018fd0:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
24018fe0:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
24018ff0:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
24019000:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
24019010:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
24019020:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
24019030:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
24019040:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
24019050:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
24019060:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
24019070:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
24019080:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
24019090:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
240190a0:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
240190b0:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
240190c0:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
240190d0:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
240190e0:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
240190f0:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
24019100:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
24019110:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
24019120:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
24019130:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
24019140:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
24019150:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
24019160:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
24019170:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
24019180:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
24019190:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
240191a0:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
240191b0:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
240191c0:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
240191d0:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
240191e0:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
240191f0:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
24019200:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
24019210:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
24019220:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
24019230:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
24019240:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
24019250:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
24019260:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
24019270:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
24019280:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
24019290:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
240192a0:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
240192b0:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
240192c0:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
240192d0:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
240192e0:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
240192f0:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
24019300:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
24019310:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
24019320:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
24019330:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
24019340:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
24019350:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
24019360:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
24019370:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
24019380:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
24019390:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
240193a0:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
240193b0:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
240193c0:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
240193d0:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
240193e0:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
240193f0:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
24019400:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
24019410:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
24019420:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
24019430:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
24019440:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
24019450:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
24019460:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
24019470:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
24019480:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
24019490:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
240194a0:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
240194b0:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
240194c0:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
240194d0:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
240194e0:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
240194f0:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
24019500:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
24019510:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
24019520:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
24019530:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
24019540:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
24019550:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
24019560:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
24019570:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
24019580:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
24019590:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
240195a0:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
240195b0:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
240195c0:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
240195d0:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
240195e0:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
240195f0:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
24019600:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
24019610:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
24019620:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
24019630:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
24019640:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
24019650:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
24019660:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
24019670:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
24019680:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
24019690:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
240196a0:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
240196b0:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
240196c0:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
240196d0:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
240196e0:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
240196f0:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
24019700:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
24019710:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
24019720:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
24019730:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
24019740:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
24019750:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
24019760:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
24019770:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
24019780:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
24019790:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
240197a0:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
240197b0:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
240197c0:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
240197d0:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
240197e0:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
240197f0:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
24019800:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
24019810:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
24019820:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
24019830:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
24019840:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
24019850:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
24019860:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
24019870:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
24019880:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
24019890:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
240198a0:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
240198b0:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
240198c0:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
240198d0:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
240198e0:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
240198f0:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
24019900:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
24019910:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
24019920:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
24019930:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
24019940:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
24019950:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
24019960:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
24019970:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
24019980:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
24019990:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
240199a0:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
240199b0:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
240199c0:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
240199d0:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
240199e0:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
240199f0:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
24019a00:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
24019a10:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
24019a20:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
24019a30:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
24019a40:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
24019a50:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
24019a60:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
24019a70:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
24019a80:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
24019a90:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
24019aa0:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
24019ab0:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
24019ac0:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
24019ad0:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
24019ae0:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
24019af0:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
24019b00:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
24019b10:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
24019b20:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
24019b30:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
24019b40:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
24019b50:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
24019b60:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
24019b70:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
24019b80:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
24019b90:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
24019ba0:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
24019bb0:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
24019bc0:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
24019bd0:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
24019be0:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
24019bf0:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
24019c00:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
24019c10:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
24019c20:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
24019c30:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
24019c40:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
24019c50:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
24019c60:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
24019c70:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
24019c80:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
24019c90:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
24019ca0:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
24019cb0:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
24019cc0:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
24019cd0:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
24019ce0:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
24019cf0:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
24019d00:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
24019d10:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
24019d20:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
24019d30:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
24019d40:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
24019d50:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
24019d60:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
24019d70:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
24019d80:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
24019d90:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
24019da0:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
24019db0:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
24019dc0:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
24019dd0:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
24019de0:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
24019df0:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
24019e00:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
24019e10:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
24019e20:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
24019e30:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
24019e40:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
24019e50:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
24019e60:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
24019e70:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
24019e80:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
24019e90:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
24019ea0:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
24019eb0:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
24019ec0:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
24019ed0:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
24019ee0:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
24019ef0:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
24019f00:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
24019f10:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
24019f20:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
24019f30:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
24019f40:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
24019f50:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
24019f60:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
24019f70:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
24019f80:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
24019f90:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
24019fa0:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
24019fb0:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
24019fc0:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
24019fd0:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
24019fe0:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
24019ff0:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
2401a000:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
2401a010:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
2401a020:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
2401a030:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
2401a040:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
2401a050:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
2401a060:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
2401a070:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
2401a080:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
2401a090:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
2401a0a0:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
2401a0b0:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
2401a0c0:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
2401a0d0:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
2401a0e0:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
2401a0f0:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
2401a100:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
2401a110:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
2401a120:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
2401a130:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
2401a140:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
2401a150:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
2401a160:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
2401a170:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
2401a180:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
2401a190:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
2401a1a0:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
2401a1b0:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
2401a1c0:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
2401a1d0:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
2401a1e0:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
2401a1f0:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
2401a200:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
2401a210:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
2401a220:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
2401a230:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
2401a240:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
2401a250:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
2401a260:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
2401a270:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
2401a280:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
2401a290:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
2401a2a0:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
2401a2b0:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
2401a2c0:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
2401a2d0:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
2401a2e0:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
2401a2f0:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
2401a300:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
2401a310:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
2401a320:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
2401a330:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
2401a340:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
2401a350:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
2401a360:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
2401a370:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
2401a380:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
2401a390:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
2401a3a0:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
2401a3b0:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
2401a3c0:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
2401a3d0:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
2401a3e0:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
2401a3f0:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
2401a400:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
2401a410:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
2401a420:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
2401a430:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
2401a440:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
2401a450:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
2401a460:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
2401a470:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
2401a480:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
2401a490:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
2401a4a0:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
2401a4b0:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
2401a4c0:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
2401a4d0:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
2401a4e0:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
2401a4f0:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
2401a500:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
2401a510:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
2401a520:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
2401a530:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
2401a540:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
2401a550:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
2401a560:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
2401a570:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
2401a580:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
2401a590:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
2401a5a0:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
2401a5b0:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
2401a5c0:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
2401a5d0:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
2401a5e0:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
2401a5f0:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
2401a600:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
2401a610:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
2401a620:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
2401a630:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
2401a640:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
2401a650:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
2401a660:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
2401a670:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
2401a680:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
2401a690:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
2401a6a0:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
2401a6b0:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
2401a6c0:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
2401a6d0:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
2401a6e0:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
2401a6f0:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
2401a700:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
2401a710:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
2401a720:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
2401a730:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
2401a740:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
2401a750:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
2401a760:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
2401a770:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
2401a780:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
2401a790:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
2401a7a0:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
2401a7b0:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
2401a7c0:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
2401a7d0:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
2401a7e0:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
2401a7f0:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
2401a800:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
2401a810:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
2401a820:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
2401a830:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
2401a840:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
2401a850:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
2401a860:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
2401a870:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
2401a880:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
2401a890:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
2401a8a0:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
2401a8b0:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
2401a8c0:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
2401a8d0:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
2401a8e0:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
2401a8f0:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
2401a900:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
2401a910:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
2401a920:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
2401a930:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
2401a940:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
2401a950:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
2401a960:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
2401a970:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
2401a980:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
2401a990:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
2401a9a0:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
2401a9b0:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
2401a9c0:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
2401a9d0:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
2401a9e0:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
2401a9f0:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
2401aa00:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
2401aa10:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
2401aa20:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
2401aa30:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
2401aa40:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
2401aa50:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
2401aa60:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
2401aa70:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
2401aa80:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
2401aa90:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
2401aaa0:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
2401aab0:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
2401aac0:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
2401aad0:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
2401aae0:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
2401aaf0:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
2401ab00:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
2401ab10:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
2401ab20:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
2401ab30:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
2401ab40:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
2401ab50:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
2401ab60:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
2401ab70:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
2401ab80:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
2401ab90:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
2401aba0:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
2401abb0:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
2401abc0:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
2401abd0:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
2401abe0:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
2401abf0:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
2401ac00:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
2401ac10:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
2401ac20:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
2401ac30:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
2401ac40:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
2401ac50:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
2401ac60:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
2401ac70:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
2401ac80:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
2401ac90:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
2401aca0:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
2401acb0:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
2401acc0:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
2401acd0:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
2401ace0:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
2401acf0:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
2401ad00:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
2401ad10:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
2401ad20:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
2401ad30:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
2401ad40:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
2401ad50:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
2401ad60:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
2401ad70:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
2401ad80:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
2401ad90:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
2401ada0:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
2401adb0:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
2401adc0:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
2401add0:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
2401ade0:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
2401adf0:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
2401ae00:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
2401ae10:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
2401ae20:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
2401ae30:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
2401ae40:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
2401ae50:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
2401ae60:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
2401ae70:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
2401ae80:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
2401ae90:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
2401aea0:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
2401aeb0:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
2401aec0:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
2401aed0:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
2401aee0:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
2401aef0:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
2401af00:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
2401af10:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
2401af20:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
2401af30:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
2401af40:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
2401af50:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
2401af60:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
2401af70:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
2401af80:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
2401af90:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
2401afa0:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
2401afb0:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
2401afc0:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
2401afd0:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
2401afe0:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
2401aff0:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
2401b000:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
2401b010:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
2401b020:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
2401b030:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
2401b040:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
2401b050:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
2401b060:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
2401b070:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
2401b080:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
2401b090:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
2401b0a0:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
2401b0b0:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
2401b0c0:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
2401b0d0:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
2401b0e0:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
2401b0f0:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
2401b100:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
2401b110:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
2401b120:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
2401b130:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
2401b140:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
2401b150:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
2401b160:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
2401b170:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
2401b180:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
2401b190:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
2401b1a0:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
2401b1b0:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
2401b1c0:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
2401b1d0:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
2401b1e0:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
2401b1f0:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
2401b200:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
2401b210:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
2401b220:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
2401b230:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
2401b240:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
2401b250:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
2401b260:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
2401b270:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
2401b280:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
2401b290:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
2401b2a0:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
2401b2b0:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
2401b2c0:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
2401b2d0:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
2401b2e0:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
2401b2f0:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
2401b300:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
2401b310:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
2401b320:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
2401b330:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
2401b340:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
2401b350:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
2401b360:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
2401b370:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
2401b380:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
2401b390:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
2401b3a0:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
2401b3b0:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
2401b3c0:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
2401b3d0:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
2401b3e0:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
2401b3f0:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
2401b400:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
2401b410:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
2401b420:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
2401b430:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
2401b440:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
2401b450:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
2401b460:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
2401b470:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
2401b480:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
2401b490:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
2401b4a0:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
2401b4b0:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
2401b4c0:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
2401b4d0:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
2401b4e0:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
2401b4f0:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
2401b500:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
2401b510:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
2401b520:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
2401b530:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
2401b540:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
2401b550:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
2401b560:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
2401b570:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
2401b580:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
2401b590:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
2401b5a0:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
2401b5b0:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
2401b5c0:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
2401b5d0:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
2401b5e0:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
2401b5f0:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
2401b600:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
2401b610:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
2401b620:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
2401b630:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
2401b640:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
2401b650:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
2401b660:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
2401b670:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
2401b680:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
2401b690:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
2401b6a0:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
2401b6b0:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
2401b6c0:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
2401b6d0:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
2401b6e0:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
2401b6f0:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
2401b700:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
2401b710:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
2401b720:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
2401b730:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
2401b740:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
2401b750:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
2401b760:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
2401b770:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
2401b780:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
2401b790:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
2401b7a0:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
2401b7b0:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
2401b7c0:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
2401b7d0:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
2401b7e0:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
2401b7f0:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
2401b800:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
2401b810:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
2401b820:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
2401b830:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
2401b840:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
2401b850:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
2401b860:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
2401b870:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
2401b880:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
2401b890:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
2401b8a0:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
2401b8b0:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
2401b8c0:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
2401b8d0:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
2401b8e0:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
2401b8f0:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
2401b900:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
2401b910:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
2401b920:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
2401b930:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
2401b940:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
2401b950:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
2401b960:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
2401b970:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
2401b980:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
2401b990:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
2401b9a0:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
2401b9b0:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
2401b9c0:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
2401b9d0:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
2401b9e0:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
2401b9f0:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
2401ba00:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
2401ba10:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
2401ba20:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
2401ba30:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
2401ba40:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
2401ba50:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
2401ba60:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
2401ba70:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
2401ba80:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
2401ba90:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
2401baa0:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
2401bab0:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
2401bac0:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
2401bad0:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
2401bae0:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
2401baf0:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
2401bb00:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
2401bb10:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
2401bb20:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
2401bb30:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
2401bb40:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
2401bb50:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
2401bb60:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
2401bb70:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
2401bb80:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
2401bb90:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
2401bba0:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
2401bbb0:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
2401bbc0:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
2401bbd0:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
2401bbe0:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
2401bbf0:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
2401bc00:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
2401bc10:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
2401bc20:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
2401bc30:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
2401bc40:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
2401bc50:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
2401bc60:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
2401bc70:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
2401bc80:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
2401bc90:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
2401bca0:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
2401bcb0:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
2401bcc0:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
2401bcd0:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
2401bce0:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
2401bcf0:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
2401bd00:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
2401bd10:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
2401bd20:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
2401bd30:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
2401bd40:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
2401bd50:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
2401bd60:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
2401bd70:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
2401bd80:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
2401bd90:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
2401bda0:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
2401bdb0:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
2401bdc0:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
2401bdd0:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
2401bde0:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
2401bdf0:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
2401be00:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
2401be10:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
2401be20:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
2401be30:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
2401be40:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
2401be50:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
2401be60:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
2401be70:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
2401be80:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
2401be90:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
2401bea0:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
2401beb0:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
2401bec0:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
2401bed0:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
2401bee0:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
2401bef0:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
2401bf00:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
2401bf10:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
2401bf20:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
2401bf30:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
2401bf40:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
2401bf50:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
2401bf60:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
2401bf70:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
2401bf80:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
2401bf90:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
2401bfa0:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
2401bfb0:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2401bfc0:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2401bfd0:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2401bfe0:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2401bff0:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2401c000:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2401c010:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2401c020:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2401c030:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2401c040:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2401c050:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
2401c060:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
2401c070:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
2401c080:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
2401c090:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
2401c0a0:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
2401c0b0:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2401c0c0:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2401c0d0:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2401c0e0:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2401c0f0:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2401c100:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2401c110:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2401c120:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2401c130:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2401c140:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2401c150:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
2401c160:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
2401c170:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
2401c180:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
2401c190:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
2401c1a0:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
2401c1b0:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2401c1c0:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2401c1d0:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2401c1e0:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2401c1f0:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2401c200:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2401c210:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2401c220:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2401c230:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2401c240:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2401c250:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
2401c260:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
2401c270:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
2401c280:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
2401c290:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
2401c2a0:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
2401c2b0:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2401c2c0:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2401c2d0:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2401c2e0:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2401c2f0:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2401c300:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2401c310:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2401c320:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2401c330:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2401c340:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2401c350:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
2401c360:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
2401c370:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
2401c380:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
2401c390:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
2401c3a0:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
2401c3b0:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2401c3c0 <__leaf_table_fir2XLow>:
2401c3c0:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2401c3d0:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2401c3e0:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2401c3f0:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2401c400:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2401c410:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2401c420:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2401c430:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2401c440 <__leaf_table_sinewave>:
2401c440:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
2401c450:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
2401c460:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
2401c470:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
2401c480:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
2401c490:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
2401c4a0:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
2401c4b0:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
2401c4c0:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
2401c4d0:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
2401c4e0:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
2401c4f0:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
2401c500:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
2401c510:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
2401c520:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
2401c530:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
2401c540:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
2401c550:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
2401c560:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
2401c570:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
2401c580:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
2401c590:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
2401c5a0:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
2401c5b0:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
2401c5c0:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
2401c5d0:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
2401c5e0:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
2401c5f0:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
2401c600:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
2401c610:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
2401c620:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
2401c630:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
2401c640:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
2401c650:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
2401c660:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
2401c670:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
2401c680:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
2401c690:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
2401c6a0:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
2401c6b0:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
2401c6c0:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
2401c6d0:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
2401c6e0:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
2401c6f0:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
2401c700:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
2401c710:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
2401c720:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
2401c730:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
2401c740:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
2401c750:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
2401c760:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
2401c770:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
2401c780:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
2401c790:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
2401c7a0:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
2401c7b0:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
2401c7c0:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
2401c7d0:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
2401c7e0:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
2401c7f0:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
2401c800:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
2401c810:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
2401c820:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
2401c830:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
2401c840:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
2401c850:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
2401c860:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
2401c870:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
2401c880:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
2401c890:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
2401c8a0:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
2401c8b0:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
2401c8c0:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
2401c8d0:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
2401c8e0:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
2401c8f0:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
2401c900:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2401c910:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2401c920:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2401c930:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2401c940:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2401c950:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
2401c960:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
2401c970:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
2401c980:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
2401c990:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
2401c9a0:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
2401c9b0:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
2401c9c0:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
2401c9d0:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
2401c9e0:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
2401c9f0:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
2401ca00:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2401ca10:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2401ca20:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2401ca30:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2401ca40:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2401ca50:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
2401ca60:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
2401ca70:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
2401ca80:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
2401ca90:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
2401caa0:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
2401cab0:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
2401cac0:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
2401cad0:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
2401cae0:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
2401caf0:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
2401cb00:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2401cb10:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2401cb20:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2401cb30:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2401cb40:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2401cb50:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
2401cb60:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
2401cb70:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
2401cb80:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
2401cb90:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
2401cba0:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
2401cbb0:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
2401cbc0:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
2401cbd0:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
2401cbe0:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
2401cbf0:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
2401cc00:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2401cc10:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2401cc20:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2401cc30:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2401cc40:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2401cc50:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
2401cc60:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
2401cc70:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
2401cc80:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
2401cc90:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
2401cca0:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
2401ccb0:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
2401ccc0:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
2401ccd0:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
2401cce0:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
2401ccf0:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
2401cd00:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
2401cd10:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
2401cd20:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
2401cd30:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
2401cd40:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
2401cd50:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
2401cd60:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
2401cd70:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
2401cd80:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
2401cd90:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
2401cda0:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
2401cdb0:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
2401cdc0:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
2401cdd0:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
2401cde0:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
2401cdf0:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
2401ce00:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
2401ce10:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
2401ce20:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
2401ce30:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
2401ce40:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
2401ce50:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
2401ce60:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
2401ce70:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
2401ce80:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
2401ce90:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
2401cea0:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
2401ceb0:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
2401cec0:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
2401ced0:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
2401cee0:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
2401cef0:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
2401cf00:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
2401cf10:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
2401cf20:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
2401cf30:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
2401cf40:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
2401cf50:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
2401cf60:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
2401cf70:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
2401cf80:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
2401cf90:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
2401cfa0:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
2401cfb0:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
2401cfc0:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
2401cfd0:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
2401cfe0:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
2401cff0:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
2401d000:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
2401d010:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
2401d020:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
2401d030:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
2401d040:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
2401d050:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
2401d060:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
2401d070:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
2401d080:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
2401d090:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
2401d0a0:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
2401d0b0:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
2401d0c0:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
2401d0d0:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
2401d0e0:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
2401d0f0:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
2401d100:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
2401d110:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
2401d120:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
2401d130:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
2401d140:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
2401d150:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
2401d160:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
2401d170:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
2401d180:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
2401d190:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
2401d1a0:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
2401d1b0:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
2401d1c0:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
2401d1d0:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
2401d1e0:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
2401d1f0:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
2401d200:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
2401d210:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
2401d220:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
2401d230:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
2401d240:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
2401d250:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
2401d260:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
2401d270:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
2401d280:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
2401d290:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
2401d2a0:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
2401d2b0:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
2401d2c0:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
2401d2d0:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
2401d2e0:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
2401d2f0:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
2401d300:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
2401d310:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
2401d320:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
2401d330:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
2401d340:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
2401d350:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
2401d360:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
2401d370:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
2401d380:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
2401d390:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
2401d3a0:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
2401d3b0:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
2401d3c0:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
2401d3d0:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
2401d3e0:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
2401d3f0:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
2401d400:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
2401d410:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
2401d420:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
2401d430:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
2401d440:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
2401d450:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
2401d460:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
2401d470:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
2401d480:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
2401d490:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
2401d4a0:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
2401d4b0:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
2401d4c0:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
2401d4d0:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
2401d4e0:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
2401d4f0:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
2401d500:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
2401d510:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
2401d520:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
2401d530:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
2401d540:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
2401d550:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
2401d560:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
2401d570:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
2401d580:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
2401d590:	be827fa2 be84039b be858794 be870b8d     ................
2401d5a0:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
2401d5b0:	be8e9b7c be901b86 be919f80 be931f8a     |...............
2401d5c0:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
2401d5d0:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
2401d5e0:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
2401d5f0:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
2401d600:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
2401d610:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
2401d620:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
2401d630:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
2401d640:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
2401d650:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
2401d660:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
2401d670:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
2401d680:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
2401d690:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
2401d6a0:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
2401d6b0:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
2401d6c0:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
2401d6d0:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
2401d6e0:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
2401d6f0:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
2401d700:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
2401d710:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
2401d720:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
2401d730:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
2401d740:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
2401d750:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
2401d760:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
2401d770:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
2401d780:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
2401d790:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
2401d7a0:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
2401d7b0:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
2401d7c0:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
2401d7d0:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
2401d7e0:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
2401d7f0:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
2401d800:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
2401d810:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
2401d820:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
2401d830:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
2401d840:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
2401d850:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
2401d860:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
2401d870:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
2401d880:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
2401d890:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
2401d8a0:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
2401d8b0:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
2401d8c0:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
2401d8d0:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
2401d8e0:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
2401d8f0:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
2401d900:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2401d910:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2401d920:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2401d930:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2401d940:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2401d950:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
2401d960:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
2401d970:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
2401d980:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
2401d990:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
2401d9a0:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
2401d9b0:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
2401d9c0:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
2401d9d0:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
2401d9e0:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
2401d9f0:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
2401da00:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2401da10:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2401da20:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2401da30:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2401da40:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2401da50:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
2401da60:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
2401da70:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
2401da80:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
2401da90:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
2401daa0:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
2401dab0:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
2401dac0:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
2401dad0:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
2401dae0:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
2401daf0:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
2401db00:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2401db10:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2401db20:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2401db30:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2401db40:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2401db50:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
2401db60:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
2401db70:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
2401db80:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
2401db90:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
2401dba0:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
2401dbb0:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
2401dbc0:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
2401dbd0:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
2401dbe0:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
2401dbf0:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
2401dc00:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2401dc10:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2401dc20:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2401dc30:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2401dc40:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2401dc50:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
2401dc60:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
2401dc70:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
2401dc80:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
2401dc90:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
2401dca0:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
2401dcb0:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
2401dcc0:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
2401dcd0:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
2401dce0:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
2401dcf0:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
2401dd00:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
2401dd10:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
2401dd20:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
2401dd30:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
2401dd40:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
2401dd50:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
2401dd60:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
2401dd70:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
2401dd80:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
2401dd90:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
2401dda0:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
2401ddb0:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
2401ddc0:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
2401ddd0:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
2401dde0:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
2401ddf0:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
2401de00:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
2401de10:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
2401de20:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
2401de30:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
2401de40:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
2401de50:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
2401de60:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
2401de70:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
2401de80:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
2401de90:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
2401dea0:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
2401deb0:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2401dec0:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2401ded0:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2401dee0:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2401def0:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2401df00:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2401df10:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2401df20:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2401df30:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2401df40:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2401df50:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
2401df60:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
2401df70:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
2401df80:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
2401df90:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
2401dfa0:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
2401dfb0:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2401dfc0:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2401dfd0:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2401dfe0:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2401dff0:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2401e000:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2401e010:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2401e020:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2401e030:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2401e040:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2401e050:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
2401e060:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
2401e070:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
2401e080:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
2401e090:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
2401e0a0:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
2401e0b0:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2401e0c0:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2401e0d0:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2401e0e0:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2401e0f0:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2401e100:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2401e110:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2401e120:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2401e130:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2401e140:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2401e150:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2401e160:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2401e170:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2401e180:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2401e190:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2401e1a0:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2401e1b0:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2401e1c0:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2401e1d0:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2401e1e0:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2401e1f0:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2401e200:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2401e210:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2401e220:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2401e230:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2401e240:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2401e250:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2401e260:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2401e270:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2401e280:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2401e290:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2401e2a0:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2401e2b0:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2401e2c0:	be949f95 be931f8a be919f80 be901b86     ................
2401e2d0:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2401e2e0:	be888f86 be870b8d be858794 be84039b     ................
2401e2f0:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2401e300:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2401e310:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2401e320:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2401e330:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2401e340:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2401e350:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2401e360:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2401e370:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2401e380:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2401e390:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2401e3a0:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2401e3b0:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2401e3c0:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2401e3d0:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2401e3e0:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2401e3f0:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2401e400:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2401e410:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2401e420:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2401e430:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2401e440 <slope_dd_table>:
	...
2401e4dc:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
2401e4ec:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
2401e4fc:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
2401e50c:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
2401e51c:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
2401e52c:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
2401e53c:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
2401e54c:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
2401e55c:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
2401e56c:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
2401e57c:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
2401e58c:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
2401e59c:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
2401e5ac:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
2401e5bc:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
2401e5cc:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
2401e5dc:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
2401e5ec:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
2401e5fc:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
2401e60c:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
2401e61c:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
2401e62c:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
2401e63c:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
2401e64c:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
2401e65c:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
2401e66c:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
2401e67c:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
2401e68c:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
2401e69c:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
2401e6ac:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
2401e6bc:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
2401e6cc:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
2401e6dc:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
2401e6ec:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
2401e6fc:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
2401e70c:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
2401e71c:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
2401e72c:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
2401e73c:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
2401e74c:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
2401e75c:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
2401e76c:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
2401e77c:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
2401e78c:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
2401e79c:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
2401e7ac:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
2401e7bc:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
2401e7cc:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
2401e7dc:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
2401e7ec:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
2401e7fc:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
2401e80c:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
2401e81c:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
2401e82c:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
2401e83c:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
2401e84c:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
2401e85c:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
2401e86c:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
2401e87c:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
2401e88c:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
2401e89c:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
2401e8ac:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
2401e8bc:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
2401e8cc:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
2401e8dc:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
2401e8ec:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
2401e8fc:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
2401e90c:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
2401e91c:	be0eae12 be10148d be1152be be1268fb     .........R...h..
2401e92c:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
2401e93c:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
2401e94c:	be15718f be15109e be148cff be13e73e     .q..........>...
2401e95c:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
2401e96c:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
2401e97c:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
2401e98c:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
2401e99c:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
2401e9ac:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
2401e9bc:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
2401e9cc:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
2401e9dc:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
2401e9ec:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
2401e9fc:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
2401ea0c:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
2401ea1c:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
2401ea2c:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
2401ea3c:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
2401ea4c:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
2401ea5c:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
2401ea6c:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
2401ea7c:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
2401ea8c:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
2401ea9c:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
2401eaac:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
2401eabc:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
2401eacc:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
2401eadc:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
2401eaec:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
2401eafc:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
2401eb0c:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
2401eb1c:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
2401eb2c:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
2401eb3c:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
2401eb4c:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
2401eb5c:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
2401eb6c:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
2401eb7c:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
2401eb8c:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
2401eb9c:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
2401ebac:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
2401ebbc:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
2401ebcc:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
2401ebdc:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
2401ebec:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
2401ebfc:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
2401ec0c:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
2401ec1c:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
2401ec2c:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
2401ec3c:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
2401ec4c:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
2401ec5c:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
2401ec6c:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
2401ec7c:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
2401ec8c:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
2401ec9c:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
2401ecac:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
2401ecbc:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
2401eccc:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
2401ecdc:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
2401ecec:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
2401ecfc:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
2401ed0c:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
2401ed1c:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
2401ed2c:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
2401ed3c:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
2401ed4c:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
2401ed5c:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
2401ed6c:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
2401ed7c:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
2401ed8c:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
2401ed9c:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
2401edac:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
2401edbc:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
2401edcc:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
2401eddc:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
2401edec:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
2401edfc:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
2401ee0c:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
2401ee1c:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
2401ee2c:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
2401ee3c:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
2401ee4c:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
2401ee5c:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
2401ee6c:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
2401ee7c:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
2401ee8c:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
2401ee9c:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
2401eeac:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
2401eebc:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
2401eecc:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
2401eedc:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
2401eeec:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
2401eefc:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
2401ef0c:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
2401ef1c:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
2401ef2c:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
2401ef3c:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
2401ef4c:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
2401ef5c:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
2401ef6c:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
2401ef7c:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
2401ef8c:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
2401ef9c:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
2401efac:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
2401efbc:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
2401efcc:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
2401efdc:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
2401efec:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
2401effc:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
2401f00c:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
2401f01c:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
2401f02c:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
2401f03c:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
2401f04c:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
2401f05c:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
2401f06c:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
2401f07c:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
2401f08c:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
2401f09c:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
2401f0ac:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
2401f0bc:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
2401f0cc:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
2401f0dc:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
2401f0ec:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
2401f0fc:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
2401f10c:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
2401f11c:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
2401f12c:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
2401f13c:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
2401f14c:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
2401f15c:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
2401f16c:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
2401f17c:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
2401f18c:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
2401f19c:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
2401f1ac:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
2401f1bc:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
2401f1cc:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
2401f1dc:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
2401f1ec:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
2401f1fc:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
2401f20c:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
2401f21c:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
2401f22c:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
2401f23c:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
2401f24c:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
2401f25c:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
2401f26c:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
2401f27c:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
2401f28c:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
2401f29c:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
2401f2ac:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
2401f2bc:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
2401f2cc:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
2401f2dc:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
2401f2ec:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
2401f2fc:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
2401f30c:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
2401f31c:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
2401f32c:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
2401f33c:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
2401f34c:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
2401f35c:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
2401f36c:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
2401f37c:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
2401f38c:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
2401f39c:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
2401f3ac:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
2401f3bc:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
2401f3cc:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
2401f3dc:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
2401f3ec:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
2401f3fc:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
2401f40c:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
2401f41c:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
2401f42c:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
2401f43c:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
2401f44c:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
2401f45c:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
2401f46c:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
2401f47c:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
2401f48c:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
2401f49c:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
2401f4ac:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
2401f4bc:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
2401f4cc:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
2401f4dc:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
2401f4ec:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
2401f4fc:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
2401f50c:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
2401f51c:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
2401f52c:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
2401f53c:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
2401f54c:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
2401f55c:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
2401f56c:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
2401f57c:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
2401f58c:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
2401f59c:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
2401f5ac:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
2401f5bc:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
2401f5cc:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
2401f5dc:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
2401f5ec:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
2401f5fc:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
2401f60c:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
2401f61c:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
2401f62c:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
2401f63c:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
2401f64c:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
2401f65c:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
2401f66c:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
2401f67c:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
2401f68c:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
2401f69c:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
2401f6ac:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
2401f6bc:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
2401f6cc:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
2401f6dc:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
2401f6ec:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
2401f6fc:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
2401f70c:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
2401f71c:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
2401f72c:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
2401f73c:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
2401f74c:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
2401f75c:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
2401f76c:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
2401f77c:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
2401f78c:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
2401f79c:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
2401f7ac:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
2401f7bc:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
2401f7cc:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
2401f7dc:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
2401f7ec:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
2401f7fc:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
2401f80c:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
2401f81c:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
2401f82c:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
2401f83c:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
2401f84c:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
2401f85c:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
2401f86c:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
2401f87c:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
2401f88c:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
2401f89c:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
2401f8ac:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
2401f8bc:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
2401f8cc:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
2401f8dc:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
2401f8ec:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
2401f8fc:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
2401f90c:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
2401f91c:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
2401f92c:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
2401f93c:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
2401f94c:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
2401f95c:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
2401f96c:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
2401f97c:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
2401f98c:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
2401f99c:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
2401f9ac:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
2401f9bc:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
2401f9cc:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
2401f9dc:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
2401f9ec:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
2401f9fc:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
2401fa0c:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
2401fa1c:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
2401fa2c:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
2401fa3c:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
2401fa4c:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
2401fa5c:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
2401fa6c:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
2401fa7c:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
2401fa8c:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
2401fa9c:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
2401faac:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
2401fabc:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
2401facc:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
2401fadc:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
2401faec:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
2401fafc:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
2401fb0c:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
2401fb1c:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
2401fb2c:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
2401fb3c:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
2401fb4c:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
2401fb5c:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
2401fb6c:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
2401fb7c:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
2401fb8c:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
2401fb9c:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
2401fbac:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
2401fbbc:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
2401fbcc:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
2401fbdc:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
2401fbec:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
2401fbfc:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
2401fc0c:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
2401fc1c:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
2401fc2c:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
2401fc3c:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
2401fc4c:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
2401fc5c:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
2401fc6c:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
2401fc7c:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
2401fc8c:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
2401fc9c:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
2401fcac:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
2401fcbc:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
2401fccc:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
2401fcdc:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
2401fcec:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
2401fcfc:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
2401fd0c:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
2401fd1c:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
2401fd2c:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
2401fd3c:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
2401fd4c:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
2401fd5c:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
2401fd6c:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
2401fd7c:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
2401fd8c:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
2401fd9c:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
2401fdac:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
2401fdbc:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
2401fdcc:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
2401fddc:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
2401fdec:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
2401fdfc:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
2401fe0c:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
2401fe1c:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
2401fe2c:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
2401fe3c:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
2401fe4c:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
2401fe5c:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
2401fe6c:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
2401fe7c:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
2401fe8c:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
2401fe9c:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
2401feac:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
2401febc:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
2401fecc:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
2401fedc:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
2401feec:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
2401fefc:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
2401ff0c:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
2401ff1c:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
2401ff2c:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
2401ff3c:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
2401ff4c:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
2401ff5c:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
2401ff6c:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
2401ff7c:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
2401ff8c:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
2401ff9c:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
2401ffac:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
2401ffbc:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
2401ffcc:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
2401ffdc:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
2401ffec:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
2401fffc:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
2402000c:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
2402001c:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
2402002c:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
2402003c:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
2402004c:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
2402005c:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
2402006c:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
2402007c:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
2402008c:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
2402009c:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
240200ac:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
240200bc:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
240200cc:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
240200dc:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
240200ec:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
240200fc:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
2402010c:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
2402011c:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
2402012c:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
2402013c:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
2402014c:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
2402015c:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
2402016c:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
2402017c:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
2402018c:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
2402019c:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
240201ac:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
240201bc:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
240201cc:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
240201dc:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
240201ec:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
240201fc:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
2402020c:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
2402021c:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
2402022c:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
2402023c:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
2402024c:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
2402025c:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
2402026c:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
2402027c:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
2402028c:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
2402029c:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
240202ac:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
240202bc:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
240202cc:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
240202dc:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
240202ec:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
240202fc:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
2402030c:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
2402031c:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
2402032c:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
2402033c:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
2402034c:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
2402035c:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
2402036c:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
2402037c:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
2402038c:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
2402039c:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
240203ac:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
240203bc:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
240203cc:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
240203dc:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
240203ec:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
240203fc:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
2402040c:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
2402041c:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
2402042c:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
2402043c:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
2402044c:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
2402045c:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
2402046c:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
2402047c:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
2402048c:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
2402049c:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
240204ac:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
240204bc:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
240204cc:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
240204dc:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
240204ec:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
240204fc:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
2402050c:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
2402051c:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
2402052c:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
2402053c:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
2402054c:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
2402055c:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
2402056c:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
2402057c:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
2402058c:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
2402059c:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
240205ac:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
240205bc:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
240205cc:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
240205dc:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
240205ec:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
240205fc:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
2402060c:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
2402061c:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
2402062c:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
2402063c:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
2402064c:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
2402065c:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
2402066c:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
2402067c:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
2402068c:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
2402069c:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
240206ac:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
240206bc:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
240206cc:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
240206dc:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
240206ec:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
240206fc:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
2402070c:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
2402071c:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
2402072c:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
2402073c:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
2402074c:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
2402075c:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
2402076c:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
2402077c:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
2402078c:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
2402079c:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
240207ac:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
240207bc:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
240207cc:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
240207dc:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
240207ec:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
240207fc:	babf16bd babb96cd bab7bd01 bab38bab     ................
2402080c:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
2402081c:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
2402082c:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
2402083c:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
2402084c:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
2402085c:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
2402086c:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
2402087c:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
2402088c:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
2402089c:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
240208ac:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
240208bc:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
240208cc:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
240208dc:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
240208ec:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
240208fc:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
2402090c:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
2402091c:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
2402092c:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
2402093c:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
2402094c:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
2402095c:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
2402096c:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
2402097c:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
2402098c:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
2402099c:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
240209ac:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
240209bc:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
240209cc:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
240209dc:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
240209ec:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
240209fc:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
24020a0c:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
24020a1c:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
24020a2c:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
24020a3c:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
24020a4c:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
24020a5c:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
24020a6c:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
24020a7c:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
24020a8c:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
24020a9c:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
24020aac:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
24020abc:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
24020acc:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
24020adc:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
24020aec:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
24020afc:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
24020b0c:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
24020b1c:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
24020b2c:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
24020b3c:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
24020b4c:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
24020b5c:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
24020b6c:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
24020b7c:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
24020b8c:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
24020b9c:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
24020bac:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
24020bbc:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
24020bcc:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
24020bdc:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
24020bec:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
24020bfc:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
24020c0c:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
24020c1c:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
24020c2c:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
24020c3c:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
24020c4c:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
24020c5c:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
24020c6c:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
24020c7c:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
24020c8c:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
24020c9c:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
24020cac:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
24020cbc:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
24020ccc:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
24020cdc:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
24020cec:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
24020cfc:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
24020d0c:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
24020d1c:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
24020d2c:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
24020d3c:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
24020d4c:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
24020d5c:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
24020d6c:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
24020d7c:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
24020d8c:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
24020d9c:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
24020dac:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
24020dbc:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
24020dcc:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
24020ddc:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
24020dec:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
24020dfc:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
24020e0c:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
24020e1c:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
24020e2c:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
24020e3c:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
24020e4c:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
24020e5c:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
24020e6c:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
24020e7c:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
24020e8c:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
24020e9c:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
24020eac:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
24020ebc:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
24020ecc:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
24020edc:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
24020eec:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
24020efc:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
24020f0c:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
24020f1c:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
24020f2c:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
24020f3c:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
24020f4c:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
24020f5c:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
24020f6c:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
24020f7c:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
24020f8c:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
24020f9c:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
24020fac:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
24020fbc:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
24020fcc:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
24020fdc:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
24020fec:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
24020ffc:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
2402100c:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
2402101c:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
2402102c:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
2402103c:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
2402104c:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
2402105c:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
2402106c:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
2402107c:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
2402108c:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
2402109c:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
240210ac:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
240210bc:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
240210cc:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
240210dc:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
240210ec:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
240210fc:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
2402110c:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
2402111c:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
2402112c:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
2402113c:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
2402114c:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
2402115c:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
2402116c:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
2402117c:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
2402118c:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
2402119c:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
240211ac:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
240211bc:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
240211cc:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
240211dc:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
240211ec:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
240211fc:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
2402120c:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
2402121c:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
2402122c:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
2402123c:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
2402124c:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
2402125c:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
2402126c:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
2402127c:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
2402128c:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
2402129c:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
240212ac:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
240212bc:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
240212cc:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
240212dc:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
240212ec:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
240212fc:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
2402130c:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
2402131c:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
2402132c:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
2402133c:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
2402134c:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
2402135c:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
2402136c:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
2402137c:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
2402138c:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
2402139c:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
240213ac:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
240213bc:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
240213cc:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
240213dc:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
240213ec:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
240213fc:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
2402140c:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
2402141c:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
2402142c:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
2402143c:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
2402144c:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
2402145c:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
2402146c:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
2402147c:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
2402148c:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
2402149c:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
240214ac:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
240214bc:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
240214cc:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
240214dc:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
240214ec:	b90eeda2 b91206b3 b914cece b9174509     .............E..
240214fc:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
2402150c:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
2402151c:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
2402152c:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
2402153c:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
2402154c:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
2402155c:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
2402156c:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
2402157c:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
2402158c:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
2402159c:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
240215ac:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
240215bc:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
240215cc:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
240215dc:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
240215ec:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
240215fc:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
2402160c:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
2402161c:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
2402162c:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
2402163c:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
2402164c:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
2402165c:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
2402166c:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
2402167c:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
2402168c:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
2402169c:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
240216ac:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
240216bc:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
240216cc:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
240216dc:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
240216ec:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
240216fc:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
2402170c:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
2402171c:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
2402172c:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
2402173c:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
2402174c:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
2402175c:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
2402176c:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
2402177c:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
2402178c:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
2402179c:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
240217ac:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
240217bc:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
240217cc:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
240217dc:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
240217ec:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
240217fc:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
2402180c:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
2402181c:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
2402182c:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
2402183c:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
2402184c:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
2402185c:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
2402186c:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
2402187c:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
2402188c:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
2402189c:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
240218ac:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
240218bc:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
240218cc:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
240218dc:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
240218ec:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
240218fc:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
2402190c:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
2402191c:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
2402192c:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
2402193c:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
2402194c:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
2402195c:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
2402196c:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
2402197c:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
2402198c:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
2402199c:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
240219ac:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
240219bc:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
240219cc:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
240219dc:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
240219ec:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
240219fc:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24021a0c:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24021a1c:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
24021a2c:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
24021a3c:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
24021a4c:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
24021a5c:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
24021a6c:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
24021a7c:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
24021a8c:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
24021a9c:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
24021aac:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
24021abc:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
24021acc:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
24021adc:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
24021aec:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
24021afc:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
24021b0c:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
24021b1c:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
24021b2c:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
24021b3c:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
24021b4c:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
24021b5c:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
24021b6c:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
24021b7c:	b808d82b b80a8abf b80befed b80d078a     +...............
24021b8c:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
24021b9c:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
24021bac:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
24021bbc:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
24021bcc:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
24021bdc:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
24021bec:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
24021bfc:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
24021c0c:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
24021c1c:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
24021c2c:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
24021c3c:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
24021c4c:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
24021c5c:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
24021c6c:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
24021c7c:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
24021c8c:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
24021c9c:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
24021cac:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
24021cbc:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
24021ccc:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
24021cdc:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
24021cec:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
24021cfc:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
24021d0c:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
24021d1c:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
24021d2c:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
24021d3c:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
24021d4c:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
24021d5c:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
24021d6c:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
24021d7c:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
24021d8c:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
24021d9c:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
24021dac:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
24021dbc:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
24021dcc:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
24021ddc:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
24021dec:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
24021dfc:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
24021e0c:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
24021e1c:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
24021e2c:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
24021e3c:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
24021e4c:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
24021e5c:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
24021e6c:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
24021e7c:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
24021e8c:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
24021e9c:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
24021eac:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
24021ebc:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
24021ecc:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
24021edc:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
24021eec:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
24021efc:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
24021f0c:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
24021f1c:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
24021f2c:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
24021f3c:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
24021f4c:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
24021f5c:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
24021f6c:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
24021f7c:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
24021f8c:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
24021f9c:	b7087574 b70df990 b713221d b717ed03     tu......."......
24021fac:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
24021fbc:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
24021fcc:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
24021fdc:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
24021fec:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
24021ffc:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
2402200c:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
2402201c:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
2402202c:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
2402203c:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
2402204c:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
2402205c:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
2402206c:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
2402207c:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
2402208c:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
2402209c:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
240220ac:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
240220bc:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
240220cc:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
240220dc:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
240220ec:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
240220fc:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
2402210c:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
2402211c:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
2402212c:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
2402213c:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
2402214c:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
2402215c:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
2402216c:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
2402217c:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
2402218c:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
2402219c:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
240221ac:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
240221bc:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
240221cc:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
240221dc:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
240221ec:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
240221fc:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
2402220c:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
2402221c:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
2402222c:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
2402223c:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
2402224c:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
2402225c:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
2402226c:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
2402227c:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
2402228c:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
2402229c:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
240222ac:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
240222bc:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
240222cc:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
240222dc:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
240222ec:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
240222fc:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
2402230c:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
2402231c:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
2402232c:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
2402233c:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
2402234c:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
2402235c:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
2402236c:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
2402237c:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
2402238c:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
2402239c:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
240223ac:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
240223bc:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
240223cc:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
240223dc:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
240223ec:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
240223fc:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
2402240c:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
2402241c:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
2402242c:	b610f5d3 b60be886 b60694c9 b600fec9     ................
2402243c:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
2402244c:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
2402245c:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
2402246c:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
2402247c:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
2402248c:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
2402249c:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
240224ac:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
240224bc:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
240224cc:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
240224dc:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
240224ec:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
240224fc:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
2402250c:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
2402251c:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
2402252c:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
2402253c:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
2402254c:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
2402255c:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
2402256c:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
2402257c:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
2402258c:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
2402259c:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
240225ac:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
240225bc:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
240225cc:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
240225dc:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
240225ec:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
240225fc:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
2402260c:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
2402261c:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
2402262c:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
2402263c:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
2402264c:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
2402265c:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
2402266c:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
2402267c:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
2402268c:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
2402269c:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
240226ac:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
240226bc:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
240226cc:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
240226dc:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
240226ec:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
240226fc:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
2402270c:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
2402271c:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
2402272c:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
2402273c:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
2402274c:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
2402275c:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
2402276c:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
2402277c:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
2402278c:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
2402279c:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
240227ac:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
240227bc:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
240227cc:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
240227dc:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
240227ec:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
240227fc:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
2402280c:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
2402281c:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
2402282c:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
2402283c:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
2402284c:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
2402285c:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
2402286c:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
2402287c:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
2402288c:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
2402289c:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
240228ac:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
240228bc:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
240228cc:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
240228dc:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
240228ec:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
240228fc:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
2402290c:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
2402291c:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
2402292c:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
2402293c:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
2402294c:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
2402295c:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
2402296c:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
2402297c:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
2402298c:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
2402299c:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
240229ac:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
240229bc:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
240229cc:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
240229dc:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
240229ec:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
240229fc:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24022a0c:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24022a1c:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
24022a2c:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
24022a3c:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
24022a4c:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
24022a5c:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
24022a6c:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
24022a7c:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
24022a8c:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
24022a9c:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
24022aac:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
24022abc:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

24022b44 <step_dd_table>:
	...
24022c78:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
24022c88:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
24022c98:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
24022ca8:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
24022cb8:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
24022cc8:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
24022cd8:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
24022ce8:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
24022cf8:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
24022d08:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
24022d18:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
24022d28:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
24022d38:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
24022d48:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
24022d58:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
24022d68:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
24022d78:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
24022d88:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
24022d98:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
24022da8:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
24022db8:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
24022dc8:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
24022dd8:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
24022de8:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
24022df8:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
24022e08:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
24022e18:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
24022e28:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
24022e38:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
24022e48:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
24022e58:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
24022e68:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
24022e78:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
24022e88:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
24022e98:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
24022ea8:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
24022eb8:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
24022ec8:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
24022ed8:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
24022ee8:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
24022ef8:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
24022f08:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
24022f18:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
24022f28:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
24022f38:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
24022f48:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
24022f58:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
24022f68:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
24022f78:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
24022f88:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
24022f98:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
24022fa8:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
24022fb8:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
24022fc8:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
24022fd8:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
24022fe8:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
24022ff8:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
24023008:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
24023018:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
24023028:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
24023038:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
24023048:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
24023058:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
24023068:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
24023078:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
24023088:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
24023098:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
240230a8:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
240230b8:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
240230c8:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
240230d8:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
240230e8:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
240230f8:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
24023108:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
24023118:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
24023128:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
24023138:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
24023148:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
24023158:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
24023168:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
24023178:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
24023188:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
24023198:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
240231a8:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
240231b8:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
240231c8:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
240231d8:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
240231e8:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
240231f8:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
24023208:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
24023218:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
24023228:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
24023238:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
24023248:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
24023258:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
24023268:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
24023278:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
24023288:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
24023298:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
240232a8:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
240232b8:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
240232c8:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
240232d8:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
240232e8:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
240232f8:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
24023308:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
24023318:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
24023328:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
24023338:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
24023348:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
24023358:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
24023368:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
24023378:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
24023388:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
24023398:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
240233a8:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
240233b8:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
240233c8:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
240233d8:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
240233e8:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
240233f8:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
24023408:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
24023418:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
24023428:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
24023438:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
24023448:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
24023458:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
24023468:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
24023478:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
24023488:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
24023498:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
240234a8:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
240234b8:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
240234c8:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
240234d8:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
240234e8:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
240234f8:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24023508:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24023518:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
24023528:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
24023538:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
24023548:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
24023558:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
24023568:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
24023578:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
24023588:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
24023598:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
240235a8:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
240235b8:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
240235c8:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
240235d8:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
240235e8:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
240235f8:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24023608:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24023618:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
24023628:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
24023638:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
24023648:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
24023658:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
24023668:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
24023678:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
24023688:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
24023698:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
240236a8:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
240236b8:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
240236c8:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
240236d8:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
240236e8:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
240236f8:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24023708:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24023718:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
24023728:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
24023738:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
24023748:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
24023758:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
24023768:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
24023778:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
24023788:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
24023798:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
240237a8:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
240237b8:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
240237c8:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
240237d8:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
240237e8:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
240237f8:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24023808:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24023818:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
24023828:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
24023838:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
24023848:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
24023858:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
24023868:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
24023878:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
24023888:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24023898:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
240238a8:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
240238b8:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
240238c8:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
240238d8:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
240238e8:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
240238f8:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
24023908:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
24023918:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
24023928:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
24023938:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
24023948:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
24023958:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
24023968:	bae718f6 be02f380 bad0894d be049492     ........M.......
24023978:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
24023988:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
24023998:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
240239a8:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
240239b8:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
240239c8:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
240239d8:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
240239e8:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
240239f8:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
24023a08:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
24023a18:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
24023a28:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
24023a38:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
24023a48:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
24023a58:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
24023a68:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
24023a78:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
24023a88:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
24023a98:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
24023aa8:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
24023ab8:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
24023ac8:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
24023ad8:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
24023ae8:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
24023af8:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
24023b08:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
24023b18:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
24023b28:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
24023b38:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
24023b48:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
24023b58:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
24023b68:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
24023b78:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
24023b88:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
24023b98:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
24023ba8:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
24023bb8:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
24023bc8:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
24023bd8:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
24023be8:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
24023bf8:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
24023c08:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
24023c18:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
24023c28:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
24023c38:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
24023c48:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
24023c58:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
24023c68:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
24023c78:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
24023c88:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
24023c98:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
24023ca8:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
24023cb8:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
24023cc8:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
24023cd8:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
24023ce8:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
24023cf8:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
24023d08:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
24023d18:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
24023d28:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
24023d38:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
24023d48:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
24023d58:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
24023d68:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
24023d78:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
24023d88:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
24023d98:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
24023da8:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
24023db8:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
24023dc8:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
24023dd8:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
24023de8:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
24023df8:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
24023e08:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
24023e18:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
24023e28:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
24023e38:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
24023e48:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
24023e58:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
24023e68:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
24023e78:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
24023e88:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
24023e98:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
24023ea8:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
24023eb8:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
24023ec8:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
24023ed8:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
24023ee8:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
24023ef8:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
24023f08:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
24023f18:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
24023f28:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
24023f38:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
24023f48:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
24023f58:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
24023f68:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
24023f78:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
24023f88:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
24023f98:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
24023fa8:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
24023fb8:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
24023fc8:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
24023fd8:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
24023fe8:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
24023ff8:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
24024008:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
24024018:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
24024028:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
24024038:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
24024048:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
24024058:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
24024068:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
24024078:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
24024088:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
24024098:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
240240a8:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
240240b8:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
240240c8:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
240240d8:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
240240e8:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
240240f8:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
24024108:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
24024118:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
24024128:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
24024138:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
24024148:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
24024158:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
24024168:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
24024178:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
24024188:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
24024198:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
240241a8:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
240241b8:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
240241c8:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
240241d8:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
240241e8:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
240241f8:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
24024208:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
24024218:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
24024228:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
24024238:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
24024248:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
24024258:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
24024268:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
24024278:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
24024288:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
24024298:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
240242a8:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
240242b8:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
240242c8:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
240242d8:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
240242e8:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
240242f8:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
24024308:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
24024318:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
24024328:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
24024338:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
24024348:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
24024358:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
24024368:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
24024378:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
24024388:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
24024398:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
240243a8:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
240243b8:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
240243c8:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
240243d8:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
240243e8:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
240243f8:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
24024408:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
24024418:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
24024428:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
24024438:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
24024448:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
24024458:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
24024468:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
24024478:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
24024488:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
24024498:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
240244a8:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
240244b8:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
240244c8:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
240244d8:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
240244e8:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
240244f8:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
24024508:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
24024518:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
24024528:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
24024538:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
24024548:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
24024558:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
24024568:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
24024578:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
24024588:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
24024598:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
240245a8:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
240245b8:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
240245c8:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
240245d8:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
240245e8:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
240245f8:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
24024608:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
24024618:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
24024628:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
24024638:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
24024648:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
24024658:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
24024668:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
24024678:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
24024688:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
24024698:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
240246a8:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
240246b8:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
240246c8:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
240246d8:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
240246e8:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
240246f8:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
24024708:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
24024718:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
24024728:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
24024738:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
24024748:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
24024758:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
24024768:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
24024778:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
24024788:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
24024798:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
240247a8:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
240247b8:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
240247c8:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
240247d8:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
240247e8:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
240247f8:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
24024808:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
24024818:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
24024828:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
24024838:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
24024848:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
24024858:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
24024868:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
24024878:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
24024888:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
24024898:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
240248a8:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
240248b8:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
240248c8:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
240248d8:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
240248e8:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
240248f8:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
24024908:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
24024918:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
24024928:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
24024938:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
24024948:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
24024958:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
24024968:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
24024978:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
24024988:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
24024998:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
240249a8:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
240249b8:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
240249c8:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
240249d8:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
240249e8:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
240249f8:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
24024a08:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
24024a18:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
24024a28:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
24024a38:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
24024a48:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
24024a58:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
24024a68:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
24024a78:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
24024a88:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
24024a98:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
24024aa8:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
24024ab8:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
24024ac8:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
24024ad8:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
24024ae8:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
24024af8:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
24024b08:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
24024b18:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
24024b28:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
24024b38:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
24024b48:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
24024b58:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
24024b68:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
24024b78:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
24024b88:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
24024b98:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
24024ba8:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
24024bb8:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
24024bc8:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
24024bd8:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
24024be8:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
24024bf8:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
24024c08:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
24024c18:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
24024c28:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
24024c38:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
24024c48:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
24024c58:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
24024c68:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
24024c78:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
24024c88:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
24024c98:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
24024ca8:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
24024cb8:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
24024cc8:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
24024cd8:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
24024ce8:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
24024cf8:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
24024d08:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
24024d18:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
24024d28:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
24024d38:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
24024d48:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
24024d58:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
24024d68:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
24024d78:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
24024d88:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
24024d98:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
24024da8:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
24024db8:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
24024dc8:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
24024dd8:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
24024de8:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
24024df8:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
24024e08:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
24024e18:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
24024e28:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
24024e38:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
24024e48:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
24024e58:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
24024e68:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
24024e78:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
24024e88:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
24024e98:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
24024ea8:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
24024eb8:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
24024ec8:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
24024ed8:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
24024ee8:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
24024ef8:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
24024f08:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
24024f18:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
24024f28:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
24024f38:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
24024f48:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
24024f58:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
24024f68:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
24024f78:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
24024f88:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
24024f98:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
24024fa8:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
24024fb8:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
24024fc8:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
24024fd8:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
24024fe8:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
24024ff8:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
24025008:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
24025018:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
24025028:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
24025038:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
24025048:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
24025058:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
24025068:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
24025078:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
24025088:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
24025098:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
240250a8:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
240250b8:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
240250c8:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
240250d8:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
240250e8:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
240250f8:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
24025108:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
24025118:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
24025128:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
24025138:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
24025148:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
24025158:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
24025168:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
24025178:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
24025188:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
24025198:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
240251a8:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
240251b8:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
240251c8:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
240251d8:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
240251e8:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
240251f8:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
24025208:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
24025218:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
24025228:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
24025238:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
24025248:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
24025258:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
24025268:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
24025278:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
24025288:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
24025298:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
240252a8:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
240252b8:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
240252c8:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
240252d8:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
240252e8:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
240252f8:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
24025308:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
24025318:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
24025328:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
24025338:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
24025348:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
24025358:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
24025368:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
24025378:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
24025388:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
24025398:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
240253a8:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
240253b8:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
240253c8:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
240253d8:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
240253e8:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
240253f8:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
24025408:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
24025418:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
24025428:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
24025438:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
24025448:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
24025458:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
24025468:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
24025478:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
24025488:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
24025498:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
240254a8:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
240254b8:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
240254c8:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
240254d8:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
240254e8:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
240254f8:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
24025508:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
24025518:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
24025528:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
24025538:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
24025548:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
24025558:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
24025568:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
24025578:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
24025588:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
24025598:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
240255a8:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
240255b8:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
240255c8:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
240255d8:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
240255e8:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
240255f8:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
24025608:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
24025618:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
24025628:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
24025638:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
24025648:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
24025658:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
24025668:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
24025678:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
24025688:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
24025698:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
240256a8:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
240256b8:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
240256c8:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
240256d8:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
240256e8:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
240256f8:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
24025708:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
24025718:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
24025728:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
24025738:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
24025748:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
24025758:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
24025768:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
24025778:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
24025788:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
24025798:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
240257a8:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
240257b8:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
240257c8:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
240257d8:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
240257e8:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
240257f8:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
24025808:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
24025818:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
24025828:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
24025838:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
24025848:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
24025858:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
24025868:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
24025878:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
24025888:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
24025898:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
240258a8:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
240258b8:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
240258c8:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
240258d8:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
240258e8:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
240258f8:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
24025908:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
24025918:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
24025928:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
24025938:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
24025948:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
24025958:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
24025968:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
24025978:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
24025988:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
24025998:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
240259a8:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
240259b8:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
240259c8:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
240259d8:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
240259e8:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
240259f8:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
24025a08:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
24025a18:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
24025a28:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
24025a38:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
24025a48:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
24025a58:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
24025a68:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
24025a78:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
24025a88:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
24025a98:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
24025aa8:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
24025ab8:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
24025ac8:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
24025ad8:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
24025ae8:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
24025af8:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
24025b08:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
24025b18:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
24025b28:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
24025b38:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
24025b48:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
24025b58:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
24025b68:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
24025b78:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
24025b88:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
24025b98:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
24025ba8:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
24025bb8:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
24025bc8:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
24025bd8:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
24025be8:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
24025bf8:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
24025c08:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
24025c18:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
24025c28:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
24025c38:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
24025c48:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
24025c58:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
24025c68:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
24025c78:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
24025c88:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
24025c98:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
24025ca8:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
24025cb8:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
24025cc8:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
24025cd8:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
24025ce8:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
24025cf8:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
24025d08:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
24025d18:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
24025d28:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
24025d38:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
24025d48:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
24025d58:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
24025d68:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
24025d78:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
24025d88:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
24025d98:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
24025da8:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
24025db8:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
24025dc8:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
24025dd8:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
24025de8:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
24025df8:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
24025e08:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
24025e18:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
24025e28:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
24025e38:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
24025e48:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
24025e58:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
24025e68:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
24025e78:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
24025e88:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
24025e98:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
24025ea8:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
24025eb8:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
24025ec8:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
24025ed8:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
24025ee8:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
24025ef8:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
24025f08:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
24025f18:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
24025f28:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
24025f38:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
24025f48:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
24025f58:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
24025f68:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
24025f78:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
24025f88:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
24025f98:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
24025fa8:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
24025fb8:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
24025fc8:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
24025fd8:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
24025fe8:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
24025ff8:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
24026008:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
24026018:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
24026028:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
24026038:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
24026048:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
24026058:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
24026068:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
24026078:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
24026088:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
24026098:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
240260a8:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
240260b8:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
240260c8:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
240260d8:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
240260e8:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
240260f8:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
24026108:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
24026118:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
24026128:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
24026138:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
24026148:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
24026158:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
24026168:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
24026178:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
24026188:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
24026198:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
240261a8:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
240261b8:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
240261c8:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
240261d8:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
240261e8:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
240261f8:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
24026208:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
24026218:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
24026228:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
24026238:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
24026248:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
24026258:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
24026268:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
24026278:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
24026288:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
24026298:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
240262a8:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
240262b8:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
240262c8:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
240262d8:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
240262e8:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
240262f8:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
24026308:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
24026318:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
24026328:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
24026338:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
24026348:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
24026358:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
24026368:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
24026378:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
24026388:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
24026398:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
240263a8:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
240263b8:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
240263c8:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
240263d8:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
240263e8:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
240263f8:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
24026408:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
24026418:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
24026428:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
24026438:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
24026448:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
24026458:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
24026468:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
24026478:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
24026488:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
24026498:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
240264a8:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
240264b8:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
240264c8:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
240264d8:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
240264e8:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
240264f8:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
24026508:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
24026518:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
24026528:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
24026538:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
24026548:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
24026558:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
24026568:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
24026578:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
24026588:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
24026598:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
240265a8:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
240265b8:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
240265c8:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
240265d8:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
240265e8:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
240265f8:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
24026608:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
24026618:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
24026628:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
24026638:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
24026648:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
24026658:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
24026668:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
24026678:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
24026688:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
24026698:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
240266a8:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
240266b8:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
240266c8:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
240266d8:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
240266e8:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
240266f8:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
24026708:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
24026718:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
24026728:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
24026738:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
24026748:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
24026758:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
24026768:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
24026778:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
24026788:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
24026798:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
240267a8:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
240267b8:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
240267c8:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
240267d8:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
240267e8:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
240267f8:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
24026808:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
24026818:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
24026828:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
24026838:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
24026848:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
24026858:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
24026868:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
24026878:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
24026888:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
24026898:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
240268a8:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
240268b8:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
240268c8:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
240268d8:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
240268e8:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
240268f8:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
24026908:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
24026918:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
24026928:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
24026938:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
24026948:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
24026958:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
24026968:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
24026978:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
24026988:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
24026998:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
240269a8:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
240269b8:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
240269c8:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
240269d8:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
240269e8:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
240269f8:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
24026a08:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
24026a18:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
24026a28:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
24026a38:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
24026a48:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
24026a58:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
24026a68:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
24026a78:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
24026a88:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
24026a98:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
24026aa8:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
24026ab8:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
24026ac8:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
24026ad8:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
24026ae8:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
24026af8:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
24026b08:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
24026b18:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
24026b28:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
24026b38:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
24026b48:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
24026b58:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
24026b68:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
24026b78:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
24026b88:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
24026b98:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
24026ba8:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
24026bb8:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
24026bc8:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
24026bd8:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
24026be8:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
24026bf8:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
24026c08:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
24026c18:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
24026c28:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
24026c38:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
24026c48:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
24026c58:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
24026c68:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
24026c78:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
24026c88:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
24026c98:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
24026ca8:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
24026cb8:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
24026cc8:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
24026cd8:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
24026ce8:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
24026cf8:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
24026d08:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
24026d18:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
24026d28:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
24026d38:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
24026d48:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
24026d58:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
24026d68:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
24026d78:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
24026d88:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
24026d98:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
24026da8:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
24026db8:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
24026dc8:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
24026dd8:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
24026de8:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
24026df8:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
24026e08:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
24026e18:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
24026e28:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
24026e38:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
24026e48:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
24026e58:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
24026e68:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
24026e78:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
24026e88:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
24026e98:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
24026ea8:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
24026eb8:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
24026ec8:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
24026ed8:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
24026ee8:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
24026ef8:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
24026f08:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
24026f18:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
24026f28:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
24026f38:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
24026f48:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
24026f58:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
24026f68:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
24026f78:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
24026f88:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
24026f98:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
24026fa8:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
24026fb8:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
24026fc8:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
24026fd8:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
24026fe8:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
24026ff8:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
24027008:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
24027018:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
24027028:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
24027038:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
24027048:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
24027058:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
24027068:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
24027078:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
24027088:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
24027098:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
240270a8:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
240270b8:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
240270c8:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
240270d8:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
240270e8:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
240270f8:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
24027108:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
24027118:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
24027128:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
24027138:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
24027148:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
24027158:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
24027168:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
24027178:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
24027188:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
24027198:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
240271a8:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
240271b8:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
240271c8:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
240271d8:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
240271e8:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
240271f8:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
24027208:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
24027218:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
24027228:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
24027238:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
24027248:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
24027258:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
24027268:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
24027278:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
24027288:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
24027298:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
240272a8:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
240272b8:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
240272c8:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
240272d8:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
240272e8:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
240272f8:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
24027308:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
24027318:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
24027328:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
24027338:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
24027348:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
24027358:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
24027368:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
24027378:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
24027388:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
24027398:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
240273a8:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
240273b8:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
240273c8:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
240273d8:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
240273e8:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
240273f8:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
24027408:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
24027418:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
24027428:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
24027438:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
24027448:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
24027458:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
24027468:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
24027478:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
24027488:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
24027498:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
240274a8:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
240274b8:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
240274c8:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
240274d8:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
240274e8:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
240274f8:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
24027508:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
24027518:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
24027528:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
24027538:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
24027548:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
24027558:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
24027568:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
24027578:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
24027588:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
24027598:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
240275a8:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
240275b8:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
240275c8:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
240275d8:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
240275e8:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
240275f8:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
24027608:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
24027618:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
24027628:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
24027638:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
24027648:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
24027658:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
24027668:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
24027678:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
24027688:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
24027698:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
240276a8:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
240276b8:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
240276c8:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
240276d8:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
240276e8:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
240276f8:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
24027708:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
24027718:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
24027728:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
24027738:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
24027748:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
24027758:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
24027768:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
24027778:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
24027788:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
24027798:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
240277a8:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
240277b8:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
240277c8:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
240277d8:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
240277e8:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
240277f8:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
24027808:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
24027818:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
24027828:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
24027838:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
24027848:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
24027858:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
24027868:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
24027878:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
24027888:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
24027898:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
240278a8:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
240278b8:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
240278c8:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
240278d8:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
240278e8:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
240278f8:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
24027908:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
24027918:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
24027928:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
24027938:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
24027948:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
24027958:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
24027968:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
24027978:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
24027988:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
24027998:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
240279a8:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
240279b8:	b89cc6ac bafe109a b89407ce bb03a88e     ................
240279c8:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
240279d8:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
240279e8:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
240279f8:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
24027a08:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
24027a18:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
24027a28:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
24027a38:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
24027a48:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
24027a58:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
24027a68:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
24027a78:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
24027a88:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
24027a98:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
24027aa8:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
24027ab8:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
24027ac8:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
24027ad8:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
24027ae8:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
24027af8:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
24027b08:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
24027b18:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
24027b28:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
24027b38:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
24027b48:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
24027b58:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
24027b68:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
24027b78:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
24027b88:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
24027b98:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
24027ba8:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
24027bb8:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
24027bc8:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
24027bd8:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
24027be8:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
24027bf8:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
24027c08:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
24027c18:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
24027c28:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
24027c38:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
24027c48:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
24027c58:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
24027c68:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
24027c78:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
24027c88:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
24027c98:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
24027ca8:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
24027cb8:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
24027cc8:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
24027cd8:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
24027ce8:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
24027cf8:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
24027d08:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
24027d18:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
24027d28:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
24027d38:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
24027d48:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
24027d58:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
24027d68:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
24027d78:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
24027d88:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
24027d98:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
24027da8:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
24027db8:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
24027dc8:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
24027dd8:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
24027de8:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
24027df8:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
24027e08:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
24027e18:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
24027e28:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
24027e38:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
24027e48:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
24027e58:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
24027e68:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
24027e78:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
24027e88:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
24027e98:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
24027ea8:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
24027eb8:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
24027ec8:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
24027ed8:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
24027ee8:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
24027ef8:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
24027f08:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
24027f18:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
24027f28:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
24027f38:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
24027f48:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
24027f58:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
24027f68:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
24027f78:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
24027f88:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
24027f98:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
24027fa8:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
24027fb8:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
24027fc8:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
24027fd8:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
24027fe8:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
24027ff8:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
24028008:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
24028018:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
24028028:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
24028038:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
24028048:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
24028058:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
24028068:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
24028078:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
24028088:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
24028098:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
240280a8:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
240280b8:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
240280c8:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
240280d8:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
240280e8:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
240280f8:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
24028108:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
24028118:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
24028128:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
24028138:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
24028148:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
24028158:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
24028168:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
24028178:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
24028188:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
24028198:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
240281a8:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
240281b8:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
240281c8:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
240281d8:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
240281e8:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
240281f8:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
24028208:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
24028218:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
24028228:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
24028238:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
24028248:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
24028258:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
24028268:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
24028278:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
24028288:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
24028298:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
240282a8:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
240282b8:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
240282c8:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
240282d8:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
240282e8:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
240282f8:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
24028308:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
24028318:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
24028328:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
24028338:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
24028348:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
24028358:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
24028368:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
24028378:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
24028388:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
24028398:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
240283a8:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
240283b8:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
240283c8:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
240283d8:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
240283e8:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
240283f8:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
24028408:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
24028418:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
24028428:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
24028438:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
24028448:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
24028458:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
24028468:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
24028478:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
24028488:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
24028498:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
240284a8:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
240284b8:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
240284c8:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
240284d8:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
240284e8:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
240284f8:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
24028508:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
24028518:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
24028528:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
24028538:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
24028548:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
24028558:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
24028568:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
24028578:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
24028588:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
24028598:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
240285a8:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
240285b8:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
240285c8:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
240285d8:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
240285e8:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
240285f8:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
24028608:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
24028618:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
24028628:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
24028638:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
24028648:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
24028658:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
24028668:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
24028678:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
24028688:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
24028698:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
240286a8:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
240286b8:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
240286c8:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
240286d8:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
240286e8:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
240286f8:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
24028708:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
24028718:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
24028728:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
24028738:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
24028748:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
24028758:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
24028768:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
24028778:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
24028788:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
24028798:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
240287a8:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
240287b8:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
240287c8:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
240287d8:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
240287e8:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
240287f8:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
24028808:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
24028818:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
24028828:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
24028838:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
24028848:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
24028858:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
24028868:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
24028878:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
24028888:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
24028898:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
240288a8:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
240288b8:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
240288c8:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
240288d8:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
240288e8:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
240288f8:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
24028908:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
24028918:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
24028928:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
24028938:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
24028948:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
24028958:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
24028968:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
24028978:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
24028988:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
24028998:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
240289a8:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
240289b8:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
240289c8:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
240289d8:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
240289e8:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
240289f8:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
24028a08:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
24028a18:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
24028a28:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
24028a38:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
24028a48:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
24028a58:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
24028a68:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
24028a78:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
24028a88:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
24028a98:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
24028aa8:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
24028ab8:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
24028ac8:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
24028ad8:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
24028ae8:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
24028af8:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
24028b08:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
24028b18:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
24028b28:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
24028b38:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
24028b48:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
24028b58:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
24028b68:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
24028b78:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
24028b88:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
24028b98:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
24028ba8:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
24028bb8:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
24028bc8:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
24028bd8:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
24028be8:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
24028bf8:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
24028c08:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
24028c18:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
24028c28:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
24028c38:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
24028c48:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
24028c58:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
24028c68:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
24028c78:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
24028c88:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
24028c98:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
24028ca8:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
24028cb8:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
24028cc8:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
24028cd8:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
24028ce8:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
24028cf8:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
24028d08:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
24028d18:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
24028d28:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
24028d38:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
24028d48:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
24028d58:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
24028d68:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
24028d78:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
24028d88:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
24028d98:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
24028da8:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
24028db8:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
24028dc8:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
24028dd8:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
24028de8:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
24028df8:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
24028e08:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
24028e18:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
24028e28:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
24028e38:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
24028e48:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
24028e58:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
24028e68:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
24028e78:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
24028e88:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
24028e98:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
24028ea8:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
24028eb8:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
24028ec8:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
24028ed8:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
24028ee8:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
24028ef8:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
24028f08:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
24028f18:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
24028f28:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
24028f38:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
24028f48:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
24028f58:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
24028f68:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
24028f78:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
24028f88:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
24028f98:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
24028fa8:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
24028fb8:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
24028fc8:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
24028fd8:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
24028fe8:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
24028ff8:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
24029008:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
24029018:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
24029028:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
24029038:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
24029048:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
24029058:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
24029068:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
24029078:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
24029088:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
24029098:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
240290a8:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
240290b8:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
240290c8:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
240290d8:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
240290e8:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
240290f8:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
24029108:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
24029118:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
24029128:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
24029138:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
24029148:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
24029158:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
24029168:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
24029178:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
24029188:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
24029198:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
240291a8:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
240291b8:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
240291c8:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
240291d8:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
240291e8:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
240291f8:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
24029208:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
24029218:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
24029228:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
24029238:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
24029248:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
24029258:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
24029268:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
24029278:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
24029288:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
24029298:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
240292a8:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
240292b8:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
240292c8:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
240292d8:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
240292e8:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
240292f8:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
24029308:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
24029318:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
24029328:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
24029338:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
24029348:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
24029358:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
24029368:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
24029378:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
24029388:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
24029398:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
240293a8:	b7168bbf b8839904 b7135056 b896030f     ........VP......
240293b8:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
240293c8:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
240293d8:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
240293e8:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
240293f8:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
24029408:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
24029418:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
24029428:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
24029438:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
24029448:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
24029458:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
24029468:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
24029478:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
24029488:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
24029498:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
240294a8:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
240294b8:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
240294c8:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
240294d8:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
240294e8:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
240294f8:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
24029508:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
24029518:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
24029528:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
24029538:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
24029548:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
24029558:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
24029568:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
24029578:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
24029588:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
24029598:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
240295a8:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
240295b8:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
240295c8:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
240295d8:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
240295e8:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
240295f8:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
24029608:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
24029618:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
24029628:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
24029638:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
24029648:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
24029658:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
24029668:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
24029678:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
24029688:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
24029698:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
240296a8:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
240296b8:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
240296c8:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
240296d8:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
240296e8:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
240296f8:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
24029708:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
24029718:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
24029728:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
24029738:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
24029748:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
24029758:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
24029768:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
24029778:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
24029788:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
24029798:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
240297a8:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
240297b8:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
240297c8:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
240297d8:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
240297e8:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
240297f8:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
24029808:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
24029818:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
24029828:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
24029838:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
24029848:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
24029858:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
24029868:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
24029878:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
24029888:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
24029898:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
240298a8:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
240298b8:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
240298c8:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
240298d8:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
240298e8:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
240298f8:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
24029908:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
24029918:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
24029928:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
24029938:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
24029948:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
24029958:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
24029968:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
24029978:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
24029988:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
24029998:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
240299a8:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
240299b8:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
240299c8:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
240299d8:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
240299e8:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
240299f8:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
24029a08:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
24029a18:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
24029a28:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
24029a38:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
24029a48:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
24029a58:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
24029a68:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
24029a78:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
24029a88:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
24029a98:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
24029aa8:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
24029ab8:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
24029ac8:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
24029ad8:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
24029ae8:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
24029af8:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
24029b08:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
24029b18:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
24029b28:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
24029b38:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
24029b48:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
24029b58:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
24029b68:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
24029b78:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
24029b88:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
24029b98:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
24029ba8:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
24029bb8:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
24029bc8:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
24029bd8:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
24029be8:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
24029bf8:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
24029c08:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
24029c18:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
24029c28:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
24029c38:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
24029c48:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
24029c58:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
24029c68:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
24029c78:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
24029c88:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
24029c98:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
24029ca8:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
24029cb8:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
24029cc8:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
24029cd8:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
24029ce8:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
24029cf8:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
24029d08:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
24029d18:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
24029d28:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
24029d38:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
24029d48:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
24029d58:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
24029d68:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
24029d78:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
24029d88:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
24029d98:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
24029da8:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
24029db8:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
24029dc8:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
24029dd8:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
24029de8:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
24029df8:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
24029e08:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
24029e18:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
24029e28:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
24029e38:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
24029e48:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
24029e58:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
24029e68:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
24029e78:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24029e88:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
24029e98:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
24029ea8:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
24029eb8:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
24029ec8:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
24029ed8:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
24029ee8:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
24029ef8:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
24029f08:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
24029f18:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
24029f28:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
24029f38:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
24029f48:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
24029f58:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
24029f68:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
24029f78:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
24029f88:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
24029f98:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
24029fa8:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
24029fb8:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
24029fc8:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
24029fd8:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
24029fe8:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
24029ff8:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
2402a008:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
2402a018:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
2402a028:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
2402a038:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
2402a048:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
2402a058:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
2402a068:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
2402a078:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
2402a088:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
2402a098:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
2402a0a8:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
2402a0b8:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
2402a0c8:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
2402a0d8:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
2402a0e8:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
2402a0f8:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
2402a108:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
2402a118:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
2402a128:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
2402a138:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
2402a148:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
2402a158:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
2402a168:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
2402a178:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
2402a188:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
2402a198:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
2402a1a8:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
2402a1b8:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
2402a1c8:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
2402a1d8:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
2402a1e8:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
2402a1f8:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
2402a208:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
2402a218:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
2402a228:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
2402a238:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
2402a248:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
2402a258:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
2402a268:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
2402a278:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
2402a288:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
2402a298:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
2402a2a8:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
2402a2b8:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
2402a2c8:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
2402a2d8:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
2402a2e8:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
2402a2f8:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
2402a308:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
2402a318:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
2402a328:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
2402a338:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
2402a348:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
2402a358:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
2402a368:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
2402a378:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
2402a388:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
2402a398:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
2402a3a8:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
2402a3b8:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
2402a3c8:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
2402a3d8:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
2402a3e8:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
2402a3f8:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
2402a408:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
2402a418:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
2402a428:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
2402a438:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
2402a448:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
2402a458:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
2402a468:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
2402a478:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
2402a488:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
2402a498:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
2402a4a8:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
2402a4b8:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
2402a4c8:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
2402a4d8:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
2402a4e8:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
2402a4f8:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
2402a508:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
2402a518:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
2402a528:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
2402a538:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
2402a548:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
2402a558:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
2402a568:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
2402a578:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
2402a588:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
2402a598:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
2402a5a8:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
2402a5b8:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
2402a5c8:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
2402a5d8:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
2402a5e8:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
2402a5f8:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
2402a608:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
2402a618:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
2402a628:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
2402a638:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
2402a648:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
2402a658:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
2402a668:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
2402a678:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
2402a688:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
2402a698:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
2402a6a8:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
2402a6b8:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
2402a6c8:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
2402a6d8:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
2402a6e8:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
2402a6f8:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
2402a708:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
2402a718:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
2402a728:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
2402a738:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
2402a748:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
2402a758:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
2402a768:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
2402a778:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
2402a788:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
2402a798:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
2402a7a8:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
2402a7b8:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
2402a7c8:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
2402a7d8:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
2402a7e8:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
2402a7f8:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
2402a808:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
2402a818:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
2402a828:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
2402a838:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
2402a848:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
2402a858:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
2402a868:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
2402a878:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
2402a888:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
2402a898:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
2402a8a8:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
2402a8b8:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
2402a8c8:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
2402a8d8:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
2402a8e8:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
2402a8f8:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
2402a908:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
2402a918:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
2402a928:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
2402a938:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
2402a948:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
2402a958:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
2402a968:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
2402a978:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
2402a988:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
2402a998:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
2402a9a8:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
2402a9b8:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
2402a9c8:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
2402a9d8:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
2402a9e8:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
2402a9f8:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
2402aa08:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
2402aa18:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
2402aa28:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
2402aa38:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
2402aa48:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
2402aa58:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
2402aa68:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
2402aa78:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
2402aa88:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
2402aa98:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
2402aaa8:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
2402aab8:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
2402aac8:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
2402aad8:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
2402aae8:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
2402aaf8:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
2402ab08:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
2402ab18:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
2402ab28:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
2402ab38:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
2402ab48:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
2402ab58:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
2402ab68:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
2402ab78:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
2402ab88:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
2402ab98:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
2402aba8:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
2402abb8:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
2402abc8:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
2402abd8:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
2402abe8:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
2402abf8:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
2402ac08:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
2402ac18:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
2402ac28:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
2402ac38:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
2402ac48:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
2402ac58:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
2402ac68:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
2402ac78:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
2402ac88:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
2402ac98:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
2402aca8:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
2402acb8:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
2402acc8:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
2402acd8:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
2402ace8:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
2402acf8:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
2402ad08:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
2402ad18:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
2402ad28:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
2402ad38:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
2402ad48:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
2402ad58:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
2402ad68:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
2402ad78:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
2402ad88:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
2402ad98:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
2402ada8:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
2402adb8:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
2402adc8:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
2402add8:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
2402ade8:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
2402adf8:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
2402ae08:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
2402ae18:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
2402ae28:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
2402ae38:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
2402ae48:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
2402ae58:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
2402ae68:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
2402ae78:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
2402ae88:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
2402ae98:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
2402aea8:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
2402aeb8:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
2402aec8:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
2402aed8:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
2402aee8:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
2402aef8:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
2402af08:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
2402af18:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
2402af28:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
2402af38:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
2402af48:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
2402af58:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
2402af68:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
2402af78:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
2402af88:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
2402af98:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
2402afa8:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
2402afb8:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
2402afc8:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
2402afd8:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
2402afe8:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
2402aff8:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
2402b008:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
2402b018:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
2402b028:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
2402b038:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
2402b048:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
2402b058:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
2402b068:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
2402b078:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
2402b088:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
2402b098:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
2402b0a8:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
2402b0b8:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
2402b0c8:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
2402b0d8:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
2402b0e8:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
2402b0f8:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
2402b108:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
2402b118:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
2402b128:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
2402b138:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
2402b148:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
2402b158:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
2402b168:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
2402b178:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
2402b188:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
2402b198:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
2402b1a8:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
2402b1b8:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
2402b1c8:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
2402b1d8:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
2402b1e8:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
2402b1f8:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
2402b208:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
2402b218:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
2402b228:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
2402b238:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
2402b248:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
2402b258:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
2402b268:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
2402b278:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
2402b288:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
2402b298:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
2402b2a8:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
2402b2b8:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
2402b2c8:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
2402b2d8:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
2402b2e8:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
2402b2f8:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
2402b308:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
2402b318:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
2402b328:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
2402b338:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
2402b348:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
2402b358:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
2402b368:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
2402b378:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
2402b388:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
2402b398:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
2402b3a8:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
2402b3b8:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
2402b3c8:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
2402b3d8:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
2402b3e8:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
2402b3f8:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
2402b408:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
2402b418:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
2402b428:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
2402b438:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
2402b448:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
2402b458:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
2402b468:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
2402b478:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
2402b488:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
2402b498:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
2402b4a8:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
2402b4b8:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
2402b4c8:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
2402b4d8:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
2402b4e8:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
2402b4f8:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
2402b508:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
2402b518:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
2402b528:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
2402b538:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
2402b548:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
2402b558:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
2402b568:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
2402b578:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
2402b588:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
2402b598:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
2402b5a8:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
2402b5b8:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
2402b5c8:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
2402b5d8:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
2402b5e8:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
2402b5f8:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
2402b608:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
2402b618:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
2402b628:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
2402b638:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
2402b648:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
2402b658:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
2402b668:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
2402b678:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
2402b688:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
2402b698:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
2402b6a8:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
2402b6b8:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
2402b6c8:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
2402b6d8:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
2402b6e8:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
2402b6f8:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
2402b708:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
2402b718:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
2402b728:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
2402b738:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
2402b748:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
2402b758:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
2402b768:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
2402b778:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
2402b788:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
2402b798:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
2402b7a8:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
2402b7b8:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
2402b7c8:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
2402b7d8:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
2402b7e8:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
2402b7f8:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
2402b808:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
2402b818:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
2402b828:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
2402b838:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
2402b848:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
2402b858:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
2402b868:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
2402b878:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
2402b888:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
2402b898:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
2402b8a8:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
2402b8b8:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
2402b8c8:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
2402b8d8:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
2402b8e8:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
2402b8f8:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
2402b908:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
2402b918:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
2402b928:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
2402b938:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
2402b948:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
2402b958:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
2402b968:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
2402b978:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
2402b988:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
2402b998:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
2402b9a8:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
2402b9b8:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
2402b9c8:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
2402b9d8:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
2402b9e8:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
2402b9f8:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
2402ba08:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
2402ba18:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
2402ba28:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
2402ba38:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
2402ba48:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
2402ba58:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
2402ba68:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
2402ba78:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
2402ba88:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
2402ba98:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
2402baa8:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
2402bab8:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
2402bac8:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
2402bad8:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
2402bae8:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
2402baf8:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
2402bb08:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
2402bb18:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
2402bb28:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

2402bb4c <sinTable_f32>:
2402bb4c:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2402bb5c:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2402bb6c:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2402bb7c:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2402bb8c:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2402bb9c:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2402bbac:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2402bbbc:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2402bbcc:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2402bbdc:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2402bbec:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2402bbfc:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2402bc0c:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2402bc1c:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2402bc2c:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2402bc3c:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2402bc4c:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2402bc5c:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2402bc6c:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2402bc7c:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2402bc8c:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2402bc9c:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2402bcac:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2402bcbc:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2402bccc:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2402bcdc:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2402bcec:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2402bcfc:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2402bd0c:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2402bd1c:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2402bd2c:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2402bd3c:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2402bd4c:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2402bd5c:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2402bd6c:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2402bd7c:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2402bd8c:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2402bd9c:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2402bdac:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2402bdbc:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2402bdcc:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2402bddc:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2402bdec:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2402bdfc:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2402be0c:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2402be1c:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2402be2c:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2402be3c:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2402be4c:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2402be5c:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2402be6c:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2402be7c:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2402be8c:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2402be9c:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2402beac:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2402bebc:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2402becc:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2402bedc:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2402beec:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2402befc:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2402bf0c:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2402bf1c:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2402bf2c:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2402bf3c:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2402bf4c:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2402bf5c:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2402bf6c:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2402bf7c:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2402bf8c:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2402bf9c:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2402bfac:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2402bfbc:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2402bfcc:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2402bfdc:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2402bfec:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2402bffc:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2402c00c:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2402c01c:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2402c02c:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2402c03c:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2402c04c:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2402c05c:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2402c06c:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2402c07c:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2402c08c:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2402c09c:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2402c0ac:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2402c0bc:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2402c0cc:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2402c0dc:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2402c0ec:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2402c0fc:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2402c10c:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2402c11c:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2402c12c:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2402c13c:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2402c14c:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2402c15c:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2402c16c:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2402c17c:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2402c18c:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2402c19c:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2402c1ac:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2402c1bc:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2402c1cc:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2402c1dc:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2402c1ec:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2402c1fc:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2402c20c:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2402c21c:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2402c22c:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2402c23c:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2402c24c:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2402c25c:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2402c26c:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2402c27c:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2402c28c:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2402c29c:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2402c2ac:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2402c2bc:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2402c2cc:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2402c2dc:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2402c2ec:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2402c2fc:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2402c30c:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2402c31c:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2402c32c:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2402c33c:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2402c34c:	80000000 33323130 37363534 62613938     ....0123456789ab
2402c35c:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
2402c36c:	76757473 7a797877 00000000              stuvwxyz....

2402c378 <__exp_data>:
2402c378:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
2402c388:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
2402c398:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
2402c3a8:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
2402c3b8:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
2402c3c8:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
2402c3d8:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
2402c3f4:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
2402c404:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
2402c414:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
2402c424:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
2402c434:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
2402c444:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
2402c454:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
2402c464:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
2402c474:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
2402c484:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
2402c494:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
2402c4a4:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
2402c4b4:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
2402c4c4:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
2402c4d4:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
2402c4e4:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
2402c4f4:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
2402c504:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
2402c514:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
2402c524:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
2402c534:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
2402c544:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
2402c554:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
2402c564:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
2402c574:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
2402c584:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
2402c594:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
2402c5a4:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
2402c5b4:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
2402c5c4:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
2402c5d4:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
2402c5e4:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
2402c5f4:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
2402c604:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
2402c614:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
2402c624:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
2402c634:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
2402c644:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
2402c654:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
2402c664:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
2402c674:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
2402c684:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
2402c694:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
2402c6a4:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
2402c6b4:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
2402c6c4:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
2402c6d4:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
2402c6e4:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
2402c6f4:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
2402c704:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
2402c714:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
2402c724:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
2402c734:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
2402c744:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
2402c754:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
2402c764:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
2402c774:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
2402c784:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
2402c794:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
2402c7a4:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
2402c7b4:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
2402c7c4:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
2402c7d4:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
2402c7e4:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
2402c7f4:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
2402c804:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
2402c814:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
2402c824:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
2402c834:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
2402c844:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
2402c854:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
2402c864:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
2402c874:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
2402c884:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
2402c894:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
2402c8a4:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
2402c8b4:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
2402c8c4:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
2402c8d4:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
2402c8e4:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
2402c8f4:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
2402c904:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
2402c914:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
2402c924:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
2402c934:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
2402c944:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
2402c954:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
2402c964:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
2402c974:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
2402c984:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
2402c994:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
2402c9a4:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
2402c9b4:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
2402c9c4:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
2402c9d4:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
2402c9e4:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
2402c9f4:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
2402ca04:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
2402ca14:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
2402ca24:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
2402ca34:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
2402ca44:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
2402ca54:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
2402ca64:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
2402ca74:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
2402ca84:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
2402ca94:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
2402caa4:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
2402cab4:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
2402cac4:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
2402cad4:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
2402cae4:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
2402caf4:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
2402cb04:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
2402cb14:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
2402cb24:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
2402cb34:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
2402cb44:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
2402cb54:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
2402cb64:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
2402cb74:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
2402cb84:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
2402cb94:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
2402cba4:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
2402cbb4:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
2402cbc4:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
2402cbd4:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
2402cbe4:	3feff3c2                                ...?

2402cbe8 <__exp2f_data>:
2402cbe8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
2402cbf8:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
2402cc08:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
2402cc18:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
2402cc28:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
2402cc38:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
2402cc48:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
2402cc58:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
2402cc68:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
2402cc78:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
2402cc88:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
2402cc98:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
2402cca8:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
2402ccb8:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
2402ccc8:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
2402ccd8:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
2402cce8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
2402ccf8:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
2402cd08:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
2402cd18:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
2402cd28:	ff0c52d6 3f962e42                       .R..B..?

2402cd30 <__logf_data>:
2402cd30:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
2402cd40:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
2402cd50:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
2402cd60:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
2402cd70:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
2402cd80:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
2402cd90:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
2402cda0:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
2402cdb0:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
2402cdc0:	00000000 3ff00000 00000000 00000000     .......?........
2402cdd0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
2402cde0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
2402cdf0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
2402ce00:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
2402ce10:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
2402ce20:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
2402ce30:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
2402ce40:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

2402ce50 <TWO23>:
2402ce50:	4b000000 cb000000                       ...K....

2402ce58 <__powf_log2_data>:
2402ce58:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402ce68:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402ce78:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402ce88:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402ce98:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402cea8:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402ceb8:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402cec8:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402ced8:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402cee8:	00000000 3ff00000 00000000 00000000     .......?........
2402cef8:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402cf08:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402cf18:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402cf28:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402cf38:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402cf48:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402cf58:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
2402cf68:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
2402cf78:	652ab82b 3ff71547                       +.*eG..?

2402cf80 <__inv_pio4>:
2402cf80:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
2402cf90:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
2402cfa0:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
2402cfb0:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
2402cfc0:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
2402cfd0:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

2402cfe0 <__sincosf_table>:
2402cfe0:	00000000 3ff00000 00000000 bff00000     .......?........
2402cff0:	00000000 bff00000 00000000 3ff00000     ...............?
2402d000:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402d010:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
2402d020:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
2402d030:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
2402d040:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
2402d050:	00000000 3ff00000 00000000 bff00000     .......?........
2402d060:	00000000 bff00000 00000000 3ff00000     ...............?
2402d070:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402d080:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
2402d090:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
2402d0a0:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
2402d0b0:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

2402d0c0 <Zero>:
	...
2402d0cc:	80000000                                ....

2402d0d0 <npio2_hw>:
2402d0d0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
2402d0e0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
2402d0f0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
2402d100:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
2402d110:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
2402d120:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
2402d130:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
2402d140:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

2402d150 <two_over_pi>:
2402d150:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
2402d160:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
2402d170:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
2402d180:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
2402d190:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
2402d1a0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
2402d1b0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
2402d1c0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
2402d1d0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
2402d1e0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
2402d1f0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
2402d200:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
2402d210:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
2402d220:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
2402d230:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
2402d240:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
2402d250:	0060e27b 00c08c6b                       {.`.k...

2402d258 <Zero>:
2402d258:	00000000 80000000                       ........

2402d260 <npio2_hw>:
2402d260:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
2402d270:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
2402d280:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
2402d290:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
2402d2a0:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
2402d2b0:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
2402d2c0:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
2402d2d0:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

2402d2e0 <two_over_pi>:
2402d2e0:	000000a2 000000f9 00000083 0000006e     ............n...
2402d2f0:	0000004e 00000044 00000015 00000029     N...D.......)...
2402d300:	000000fc 00000027 00000057 000000d1     ....'...W.......
2402d310:	000000f5 00000034 000000dd 000000c0     ....4...........
2402d320:	000000db 00000062 00000095 00000099     ....b...........
2402d330:	0000003c 00000043 00000090 00000041     <...C.......A...
2402d340:	000000fe 00000051 00000063 000000ab     ....Q...c.......
2402d350:	000000de 000000bb 000000c5 00000061     ............a...
2402d360:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
2402d370:	00000042 0000004d 000000d2 000000e0     B...M...........
2402d380:	00000006 00000049 0000002e 000000ea     ....I...........
2402d390:	00000009 000000d1 00000092 0000001c     ................
2402d3a0:	000000fe 0000001d 000000eb 0000001c     ................
2402d3b0:	000000b1 00000029 000000a7 0000003e     ....).......>...
2402d3c0:	000000e8 00000082 00000035 000000f5     ........5.......
2402d3d0:	0000002e 000000bb 00000044 00000084     ........D.......
2402d3e0:	000000e9 0000009c 00000070 00000026     ........p...&...
2402d3f0:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
2402d400:	00000039 00000091 000000d6 00000039     9...........9...
2402d410:	00000083 00000053 00000039 000000f4     ....S...9.......
2402d420:	0000009c 00000084 0000005f 0000008b     ........_.......
2402d430:	000000bd 000000f9 00000028 0000003b     ........(...;...
2402d440:	0000001f 000000f8 00000097 000000ff     ................
2402d450:	000000de 00000005 00000098 0000000f     ................
2402d460:	000000ef 0000002f 00000011 0000008b     ..../...........
2402d470:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
2402d480:	0000006d 00000036 0000007e 000000cf     m...6...~.......
2402d490:	00000027 000000cb 00000009 000000b7     '...............
2402d4a0:	0000004f 00000046 0000003f 00000066     O...F...?...f...
2402d4b0:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
2402d4c0:	00000075 00000027 000000ba 000000c7     u...'...........
2402d4d0:	000000eb 000000e5 000000f1 0000007b     ............{...
2402d4e0:	0000003d 00000007 00000039 000000f7     =.......9.......
2402d4f0:	0000008a 00000052 00000092 000000ea     ....R...........
2402d500:	0000006b 000000fb 0000005f 000000b1     k......._.......
2402d510:	0000001f 0000008d 0000005d 00000008     ........].......
2402d520:	00000056 00000003 00000030 00000046     V.......0...F...
2402d530:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
2402d540:	000000f0 000000cf 000000bc 00000020     ............ ...
2402d550:	0000009a 000000f4 00000036 0000001d     ........6.......
2402d560:	000000a9 000000e3 00000091 00000061     ............a...
2402d570:	0000005e 000000e6 0000001b 00000008     ^...............
2402d580:	00000065 00000099 00000085 0000005f     e..........._...
2402d590:	00000014 000000a0 00000068 00000040     ........h...@...
2402d5a0:	0000008d 000000ff 000000d8 00000080     ................
2402d5b0:	0000004d 00000073 00000027 00000031     M...s...'...1...
2402d5c0:	00000006 00000006 00000015 00000056     ............V...
2402d5d0:	000000ca 00000073 000000a8 000000c9     ....s...........
2402d5e0:	00000060 000000e2 0000007b 000000c0     `.......{.......
2402d5f0:	0000008c 0000006b                       ....k...

2402d5f8 <PIo2>:
2402d5f8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
2402d608:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
2402d618:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
2402d628:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

2402d638 <init_jk>:
2402d638:	00000002 00000003 00000004 00000006     ................

2402d648 <PIo2>:
2402d648:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
2402d658:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
2402d668:	1fc40000 1bc60000 17440000              ..........D.

2402d674 <init_jk>:
2402d674:	00000004 00000007 00000009              ............

2402d680 <_init>:
2402d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402d682:	bf00      	nop
2402d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402d686:	bc08      	pop	{r3}
2402d688:	469e      	mov	lr, r3
2402d68a:	4770      	bx	lr

2402d68c <_fini>:
2402d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402d68e:	bf00      	nop
2402d690:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402d692:	bc08      	pop	{r3}
2402d694:	469e      	mov	lr, r3
2402d696:	4770      	bx	lr

2402d698 <__HAL_SAI_TxCpltCallback_veneer>:
2402d698:	f85f f000 	ldr.w	pc, [pc]	; 2402d69c <__HAL_SAI_TxCpltCallback_veneer+0x4>
2402d69c:	00004d01 	.word	0x00004d01

2402d6a0 <__HAL_I2C_ErrorCallback_veneer>:
2402d6a0:	f85f f000 	ldr.w	pc, [pc]	; 2402d6a4 <__HAL_I2C_ErrorCallback_veneer+0x4>
2402d6a4:	00006e01 	.word	0x00006e01

2402d6a8 <__HAL_SPI_RxCpltCallback_veneer>:
2402d6a8:	f85f f000 	ldr.w	pc, [pc]	; 2402d6ac <__HAL_SPI_RxCpltCallback_veneer+0x4>
2402d6ac:	000047c1 	.word	0x000047c1

2402d6b0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
2402d6b0:	f85f f000 	ldr.w	pc, [pc]	; 2402d6b4 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
2402d6b4:	00004c61 	.word	0x00004c61

2402d6b8 <__tExpSmooth_tick_veneer>:
2402d6b8:	f85f f000 	ldr.w	pc, [pc]	; 2402d6bc <__tExpSmooth_tick_veneer+0x4>
2402d6bc:	00006e41 	.word	0x00006e41

2402d6c0 <__HAL_SAI_TxHalfCpltCallback_veneer>:
2402d6c0:	f85f f000 	ldr.w	pc, [pc]	; 2402d6c4 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2402d6c4:	00004d61 	.word	0x00004d61

2402d6c8 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
2402d6c8:	f85f f000 	ldr.w	pc, [pc]	; 2402d6cc <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402d6cc:	00006da1 	.word	0x00006da1

2402d6d0 <__parsePreset_veneer>:
2402d6d0:	f85f f000 	ldr.w	pc, [pc]	; 2402d6d4 <__parsePreset_veneer+0x4>
2402d6d4:	00005181 	.word	0x00005181

2402d6d8 <__tExpSmooth_setDest_veneer>:
2402d6d8:	f85f f000 	ldr.w	pc, [pc]	; 2402d6dc <__tExpSmooth_setDest_veneer+0x4>
2402d6dc:	00006e61 	.word	0x00006e61

2402d6e0 <__randomNumber_veneer>:
2402d6e0:	f85f f000 	ldr.w	pc, [pc]	; 2402d6e4 <__randomNumber_veneer+0x4>
2402d6e4:	00005121 	.word	0x00005121

2402d6e8 <__HAL_SPI_TxRxCpltCallback_veneer>:
2402d6e8:	f85f f000 	ldr.w	pc, [pc]	; 2402d6ec <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402d6ec:	00004bc1 	.word	0x00004bc1

2402d6f0 <__HAL_SAI_ErrorCallback_veneer>:
2402d6f0:	f85f f000 	ldr.w	pc, [pc]	; 2402d6f4 <__HAL_SAI_ErrorCallback_veneer+0x4>
2402d6f4:	00004dc1 	.word	0x00004dc1

2402d6f8 <__HAL_SPI_RxHalfCpltCallback_veneer>:
2402d6f8:	f85f f000 	ldr.w	pc, [pc]	; 2402d6fc <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
2402d6fc:	000049c1 	.word	0x000049c1

2402d700 <__LEAF_clip_veneer>:
2402d700:	f85f f000 	ldr.w	pc, [pc]	; 2402d704 <__LEAF_clip_veneer+0x4>
2402d704:	00006f81 	.word	0x00006f81

Disassembly of section .itcmram:

00000400 <updateStateFromSPIMessage>:
}
     400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     402:	4c4d      	ldr	r4, [pc, #308]	; (538 <updateStateFromSPIMessage+0x138>)
     404:	4a4d      	ldr	r2, [pc, #308]	; (53c <updateStateFromSPIMessage+0x13c>)
     406:	1825      	adds	r5, r4, r0
     408:	4e4d      	ldr	r6, [pc, #308]	; (540 <updateStateFromSPIMessage+0x140>)
     40a:	f8df c180 	ldr.w	ip, [pc, #384]	; 58c <updateStateFromSPIMessage+0x18c>
    __HAL_DMA_ENABLE(hdma);
     40e:	7e2b      	ldrb	r3, [r5, #24]
     410:	7e6d      	ldrb	r5, [r5, #25]
     412:	494c      	ldr	r1, [pc, #304]	; (544 <updateStateFromSPIMessage+0x144>)
     414:	6015      	str	r5, [r2, #0]
     416:	f3c3 1580 	ubfx	r5, r3, #6, #1
     41a:	4f4b      	ldr	r7, [pc, #300]	; (548 <updateStateFromSPIMessage+0x148>)
     41c:	6035      	str	r5, [r6, #0]
     41e:	f3c3 1540 	ubfx	r5, r3, #5, #1
     422:	6816      	ldr	r6, [r2, #0]
     424:	f8cc 5000 	str.w	r5, [ip]
     428:	f3c3 1500 	ubfx	r5, r3, #4, #1
     42c:	603d      	str	r5, [r7, #0]
     42e:	680d      	ldr	r5, [r1, #0]
     430:	42ae      	cmp	r6, r5
     432:	d00f      	beq.n	454 <updateStateFromSPIMessage+0x54>
     434:	6815      	ldr	r5, [r2, #0]
     436:	2d3f      	cmp	r5, #63	; 0x3f
     438:	d05e      	beq.n	4f8 <updateStateFromSPIMessage+0xf8>
     43a:	6815      	ldr	r5, [r2, #0]
     43c:	2d3e      	cmp	r5, #62	; 0x3e
     43e:	d05b      	beq.n	4f8 <updateStateFromSPIMessage+0xf8>
     440:	6815      	ldr	r5, [r2, #0]
     442:	2d3d      	cmp	r5, #61	; 0x3d
     444:	d058      	beq.n	4f8 <updateStateFromSPIMessage+0xf8>
     446:	4d41      	ldr	r5, [pc, #260]	; (54c <updateStateFromSPIMessage+0x14c>)
     448:	2601      	movs	r6, #1
     44a:	602e      	str	r6, [r5, #0]
     44c:	6815      	ldr	r5, [r2, #0]
     44e:	4e40      	ldr	r6, [pc, #256]	; (550 <updateStateFromSPIMessage+0x150>)
     450:	b2ed      	uxtb	r5, r5
     452:	7035      	strb	r5, [r6, #0]
     454:	6812      	ldr	r2, [r2, #0]
     456:	4420      	add	r0, r4
     458:	f003 030f 	and.w	r3, r3, #15
     45c:	4c3d      	ldr	r4, [pc, #244]	; (554 <updateStateFromSPIMessage+0x154>)
     45e:	600a      	str	r2, [r1, #0]
     460:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
     464:	7e85      	ldrb	r5, [r0, #26]
     466:	3b05      	subs	r3, #5
     468:	7ec2      	ldrb	r2, [r0, #27]
     46a:	493b      	ldr	r1, [pc, #236]	; (558 <updateStateFromSPIMessage+0x158>)
     46c:	ee07 3a90 	vmov	s15, r3
     470:	eb02 2205 	add.w	r2, r2, r5, lsl #8
     474:	4d39      	ldr	r5, [pc, #228]	; (55c <updateStateFromSPIMessage+0x15c>)
     476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     47a:	4e39      	ldr	r6, [pc, #228]	; (560 <updateStateFromSPIMessage+0x160>)
     47c:	b293      	uxth	r3, r2
     47e:	7f42      	ldrb	r2, [r0, #29]
     480:	ed9f 7a38 	vldr	s14, [pc, #224]	; 564 <updateStateFromSPIMessage+0x164>
     484:	800b      	strh	r3, [r1, #0]
     486:	ee67 7aa6 	vmul.f32	s15, s15, s13
     48a:	880b      	ldrh	r3, [r1, #0]
     48c:	7f01      	ldrb	r1, [r0, #28]
     48e:	b29b      	uxth	r3, r3
     490:	edc6 7a00 	vstr	s15, [r6]
     494:	eb02 2201 	add.w	r2, r2, r1, lsl #8
     498:	4e33      	ldr	r6, [pc, #204]	; (568 <updateStateFromSPIMessage+0x168>)
     49a:	ee00 3a10 	vmov	s0, r3
     49e:	7823      	ldrb	r3, [r4, #0]
     4a0:	4f32      	ldr	r7, [pc, #200]	; (56c <updateStateFromSPIMessage+0x16c>)
     4a2:	b2db      	uxtb	r3, r3
     4a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
     4a8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
     4ac:	7823      	ldrb	r3, [r4, #0]
}
     4ae:	ee20 0a07 	vmul.f32	s0, s0, s14
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b2:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
     4b4:	ed87 0a00 	vstr	s0, [r7]
}
     4b8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4bc:	7823      	ldrb	r3, [r4, #0]
     4be:	b2db      	uxtb	r3, r3
     4c0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  __HAL_LOCK(hdma);
     4c4:	429a      	cmp	r2, r3
}
     4c6:	d012      	beq.n	4ee <updateStateFromSPIMessage+0xee>
    __HAL_DMA_ENABLE(hdma);
     4c8:	2201      	movs	r2, #1
     4ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
     4ce:	4828      	ldr	r0, [pc, #160]	; (570 <updateStateFromSPIMessage+0x170>)
}
     4d0:	f008 f992 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d4:	7822      	ldrb	r2, [r4, #0]
     4d6:	7823      	ldrb	r3, [r4, #0]
     4d8:	2101      	movs	r1, #1
     4da:	b2d2      	uxtb	r2, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	ed97 0a00 	vldr	s0, [r7]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	b2db      	uxtb	r3, r3
     4e2:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
     4e6:	4a23      	ldr	r2, [pc, #140]	; (574 <updateStateFromSPIMessage+0x174>)
     4e8:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
     4ec:	6011      	str	r1, [r2, #0]
     4ee:	4822      	ldr	r0, [pc, #136]	; (578 <updateStateFromSPIMessage+0x178>)
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
     4f4:	f006 bcb4 	b.w	6e60 <tExpSmooth_setDest>
     4f8:	680d      	ldr	r5, [r1, #0]
     4fa:	2d3f      	cmp	r5, #63	; 0x3f
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	d00d      	beq.n	51a <updateStateFromSPIMessage+0x11a>
     4fe:	680d      	ldr	r5, [r1, #0]
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	2d3e      	cmp	r5, #62	; 0x3e
     502:	d011      	beq.n	528 <updateStateFromSPIMessage+0x128>
     504:	6815      	ldr	r5, [r2, #0]
     506:	4e1d      	ldr	r6, [pc, #116]	; (57c <updateStateFromSPIMessage+0x17c>)
     508:	b2ed      	uxtb	r5, r5
     50a:	7035      	strb	r5, [r6, #0]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50c:	2601      	movs	r6, #1
     50e:	4d1c      	ldr	r5, [pc, #112]	; (580 <updateStateFromSPIMessage+0x180>)
     510:	602e      	str	r6, [r5, #0]
     512:	2600      	movs	r6, #0
     514:	4d1b      	ldr	r5, [pc, #108]	; (584 <updateStateFromSPIMessage+0x184>)
     516:	702e      	strb	r6, [r5, #0]
     518:	e79c      	b.n	454 <updateStateFromSPIMessage+0x54>
     51a:	6815      	ldr	r5, [r2, #0]
     51c:	2d3e      	cmp	r5, #62	; 0x3e
     51e:	d1ee      	bne.n	4fe <updateStateFromSPIMessage+0xfe>
     520:	4d19      	ldr	r5, [pc, #100]	; (588 <updateStateFromSPIMessage+0x188>)
     522:	2601      	movs	r6, #1
     524:	602e      	str	r6, [r5, #0]
     526:	e795      	b.n	454 <updateStateFromSPIMessage+0x54>
     528:	6815      	ldr	r5, [r2, #0]
     52a:	2d3f      	cmp	r5, #63	; 0x3f
     52c:	d1ea      	bne.n	504 <updateStateFromSPIMessage+0x104>
     52e:	4d16      	ldr	r5, [pc, #88]	; (588 <updateStateFromSPIMessage+0x188>)
                for (int j = i + 1; j != n; ++j)
                {
                    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&p->_zc, j);
                    if (next->_peak >= threshold)
                    {
                        int period = tZeroCrossingInfo_period(&curr, &next);
     530:	2602      	movs	r6, #2
     532:	602e      	str	r6, [r5, #0]
     534:	e78e      	b.n	454 <updateStateFromSPIMessage+0x54>
     536:	bf00      	nop
     538:	30000140 	.word	0x30000140
     53c:	200148ec 	.word	0x200148ec
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
        result->period = 0.0f;
     540:	20005548 	.word	0x20005548
        if (info._periodicity > collector->_fundamental._periodicity &&
     544:	2000014c 	.word	0x2000014c
     548:	2000505c 	.word	0x2000505c
     54c:	2001aa88 	.word	0x2001aa88
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     550:	2001aa86 	.word	0x2001aa86
     554:	20014920 	.word	0x20014920
     558:	200148f8 	.word	0x200148f8
     55c:	20014850 	.word	0x20014850
        if (info._periodicity > collector->_fundamental._periodicity &&
     560:	20005584 	.word	0x20005584
     564:	39800801 	.word	0x39800801
            Lfloat periodicity_diff = fabsf(info._periodicity - collector->_fundamental._periodicity);
     568:	20014858 	.word	0x20014858
     56c:	200148f4 	.word	0x200148f4
            if (periodicity_diff <= collector->_harmonic_threshold)
     570:	58020c00 	.word	0x58020c00
     574:	2000554c 	.word	0x2000554c
                collector->_fundamental._i1 = info._i1;
     578:	200148fc 	.word	0x200148fc
            if (periodicity_diff <= collector->_harmonic_threshold)
     57c:	200006d8 	.word	0x200006d8
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     580:	20005744 	.word	0x20005744
                collector->_fundamental._i2 = info._i2;
     584:	20014b40 	.word	0x20014b40
                            if (count == 0)
     588:	20014868 	.word	0x20014868
     58c:	20005058 	.word	0x20005058
    unsigned int trailing_edge = 0;
     590:	f3af 8000 	nop.w
    if (info._period != -1.0f)
     594:	f3af 8000 	nop.w
     598:	f3af 8000 	nop.w
     59c:	f3af 8000 	nop.w

000005a0 <switchStringModel>:
     5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                for (int d = start - 1; d > p->_min_period; --d)
     5a4:	2801      	cmp	r0, #1
     5a6:	4f50      	ldr	r7, [pc, #320]	; (6e8 <switchStringModel+0x148>)
                            int count = tBACF_getCorrelation(&p->_bacf, period);
     5a8:	f04f 0400 	mov.w	r4, #0
                                for (int d = start + 1; d < mid; ++d)
     5ac:	ed2d 8b06 	vpush	{d8-d10}
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     5b0:	603c      	str	r4, [r7, #0]
            if (periodicity_diff <= collector->_harmonic_threshold)
     5b2:	d044      	beq.n	63e <switchStringModel+0x9e>
     5b4:	2802      	cmp	r0, #2
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5b6:	d00d      	beq.n	5d4 <switchStringModel+0x34>
     5b8:	4b4c      	ldr	r3, [pc, #304]	; (6ec <switchStringModel+0x14c>)
     5ba:	2100      	movs	r1, #0
     5bc:	4a4c      	ldr	r2, [pc, #304]	; (6f0 <switchStringModel+0x150>)
     5be:	2001      	movs	r0, #1
     5c0:	681b      	ldr	r3, [r3, #0]
     5c2:	7011      	strb	r1, [r2, #0]
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	b2db      	uxtb	r3, r3
     5c6:	4a4b      	ldr	r2, [pc, #300]	; (6f4 <switchStringModel+0x154>)
     5c8:	6038      	str	r0, [r7, #0]
     5ca:	7013      	strb	r3, [r2, #0]
     5cc:	ecbd 8b06 	vpop	{d8-d10}
	*ptr++ = (BYTE)val; val >>= 8;
     5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5d4:	4d48      	ldr	r5, [pc, #288]	; (6f8 <switchStringModel+0x158>)
     5d6:	782b      	ldrb	r3, [r5, #0]
     5d8:	2b00      	cmp	r3, #0
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5da:	d0ed      	beq.n	5b8 <switchStringModel+0x18>
     5dc:	4e47      	ldr	r6, [pc, #284]	; (6fc <switchStringModel+0x15c>)
     5de:	4630      	mov	r0, r6
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e0:	3401      	adds	r4, #1
     5e2:	f008 f9c1 	bl	8968 <__tLivingString2_free_veneer>
     5e6:	782b      	ldrb	r3, [r5, #0]
     5e8:	3604      	adds	r6, #4
     5ea:	42a3      	cmp	r3, r4
		*d++ = (BYTE)val;
     5ec:	dcf7      	bgt.n	5de <switchStringModel+0x3e>
     5ee:	2b00      	cmp	r3, #0
     5f0:	d0e2      	beq.n	5b8 <switchStringModel+0x18>
     5f2:	4e43      	ldr	r6, [pc, #268]	; (700 <switchStringModel+0x160>)
     5f4:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val; val >>= 8;
     5f6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 72c <switchStringModel+0x18c>
     5fa:	ed9f aa42 	vldr	s20, [pc, #264]	; 704 <switchStringModel+0x164>
     5fe:	eddf 9a42 	vldr	s19, [pc, #264]	; 708 <switchStringModel+0x168>
     602:	ed9f 9a42 	vldr	s18, [pc, #264]	; 70c <switchStringModel+0x16c>
     606:	eddf 8a42 	vldr	s17, [pc, #264]	; 710 <switchStringModel+0x170>
     60a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 714 <switchStringModel+0x174>
     60e:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
     610:	4643      	mov	r3, r8
     612:	eef0 2a4a 	vmov.f32	s5, s20
	*ptr++ = (BYTE)val; val >>= 8;
     616:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 704 <switchStringModel+0x164>
     61a:	eef0 1a69 	vmov.f32	s3, s19
	*ptr++ = (BYTE)val;
     61e:	2200      	movs	r2, #0
}
     620:	eeb0 1a49 	vmov.f32	s2, s18
	const BYTE *s = (const BYTE*)src;
     624:	2108      	movs	r1, #8
     626:	eef0 0a68 	vmov.f32	s1, s17
			*d++ = *s++;
     62a:	3401      	adds	r4, #1
     62c:	eeb0 0a48 	vmov.f32	s0, s16
     630:	3604      	adds	r6, #4
     632:	f008 f9e9 	bl	8a08 <__tSimpleLivingString3_initToPool_veneer>
		} while (--cnt);
     636:	782b      	ldrb	r3, [r5, #0]

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     638:	42a3      	cmp	r3, r4
     63a:	dce8      	bgt.n	60e <switchStringModel+0x6e>
     63c:	e7bc      	b.n	5b8 <switchStringModel+0x18>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     63e:	4d2e      	ldr	r5, [pc, #184]	; (6f8 <switchStringModel+0x158>)
     640:	782b      	ldrb	r3, [r5, #0]
     642:	2b00      	cmp	r3, #0
     644:	d0b8      	beq.n	5b8 <switchStringModel+0x18>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     646:	4e2e      	ldr	r6, [pc, #184]	; (700 <switchStringModel+0x160>)
     648:	4630      	mov	r0, r6
     64a:	3401      	adds	r4, #1
     64c:	f008 f904 	bl	8858 <__tSimpleLivingString3_free_veneer>
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     650:	782b      	ldrb	r3, [r5, #0]
     652:	3604      	adds	r6, #4
		*d++ = (BYTE)val;
     654:	42a3      	cmp	r3, r4
     656:	dcf7      	bgt.n	648 <switchStringModel+0xa8>
     658:	2b00      	cmp	r3, #0
     65a:	d0ad      	beq.n	5b8 <switchStringModel+0x18>
     65c:	4c27      	ldr	r4, [pc, #156]	; (6fc <switchStringModel+0x15c>)
     65e:	2600      	movs	r6, #0
     660:	eddf aa2d 	vldr	s21, [pc, #180]	; 718 <switchStringModel+0x178>
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     664:	ed9f 8a28 	vldr	s16, [pc, #160]	; 708 <switchStringModel+0x168>
			pte[PTE_System] = sys;				/* System type */
     668:	ed9f aa2c 	vldr	s20, [pc, #176]	; 71c <switchStringModel+0x17c>
	*ptr++ = (BYTE)val; val >>= 8;
     66c:	eddf 9a2c 	vldr	s19, [pc, #176]	; 720 <switchStringModel+0x180>
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     670:	ed9f 9a2c 	vldr	s18, [pc, #176]	; 724 <switchStringModel+0x184>
     674:	eddf 8a2c 	vldr	s17, [pc, #176]	; 728 <switchStringModel+0x188>
	*ptr++ = (BYTE)val; val >>= 8;
     678:	eef0 4a6a 	vmov.f32	s9, s21
	*ptr++ = (BYTE)val; val >>= 8;
     67c:	4a2b      	ldr	r2, [pc, #172]	; (72c <switchStringModel+0x18c>)
     67e:	eef0 3a48 	vmov.f32	s7, s16
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     682:	ed9f 4a25 	vldr	s8, [pc, #148]	; 718 <switchStringModel+0x178>
			pte[PTE_EdHead] = 254;				/* End head */
     686:	eeb0 3a4a 	vmov.f32	s6, s20
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     68a:	eddf 2a24 	vldr	s5, [pc, #144]	; 71c <switchStringModel+0x17c>
	*ptr++ = (BYTE)val; val >>= 8;
     68e:	eef0 1a69 	vmov.f32	s3, s19
			pte[PTE_EdHead] = 254;				/* End head */
     692:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 708 <switchStringModel+0x168>
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     696:	eeb0 1a49 	vmov.f32	s2, s18
     69a:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
     69c:	eef0 0a68 	vmov.f32	s1, s17
	*ptr++ = (BYTE)val;
     6a0:	4620      	mov	r0, r4
     6a2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 730 <switchStringModel+0x190>
	*ptr++ = (BYTE)val; val >>= 8;
     6a6:	3601      	adds	r6, #1
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6a8:	f008 f936 	bl	8918 <__tLivingString2_initToPool_veneer>
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ac:	4620      	mov	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	ed9f 0a21 	vldr	s0, [pc, #132]	; 734 <switchStringModel+0x194>
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	f008 f8ad 	bl	8810 <__tLivingString2_setBrightness_veneer>
     6b6:	4620      	mov	r0, r4
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6b8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
     6bc:	f008 f8fc 	bl	88b8 <__tLivingString2_setPickPos_veneer>
     6c0:	4620      	mov	r0, r4
     6c2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 738 <switchStringModel+0x198>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c6:	f008 f953 	bl	8970 <__tLivingString2_setPrepPos_veneer>
     6ca:	4620      	mov	r0, r4
     6cc:	eeb0 0a48 	vmov.f32	s0, s16
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6d0:	f008 f9aa 	bl	8a28 <__tLivingString2_setPrepIndex_veneer>
     6d4:	4620      	mov	r0, r4
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
			sys = 0x0C;		/* FAT32X */
     6da:	3404      	adds	r4, #4
     6dc:	f008 f928 	bl	8930 <__tLivingString2_setPickupPos_veneer>
	const BYTE *s = (const BYTE*)src;
     6e0:	782b      	ldrb	r3, [r5, #0]
     6e2:	42b3      	cmp	r3, r6
     6e4:	dcc8      	bgt.n	678 <switchStringModel+0xd8>
			*d++ = *s++;
     6e6:	e767      	b.n	5b8 <switchStringModel+0x18>
     6e8:	20005744 	.word	0x20005744
     6ec:	200148ec 	.word	0x200148ec
		} while (--cnt);
     6f0:	20014b40 	.word	0x20014b40
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f4:	200006d8 	.word	0x200006d8
     6f8:	2000000d 	.word	0x2000000d
     6fc:	20014860 	.word	0x20014860
     700:	200053e4 	.word	0x200053e4
     704:	3c23d70a 	.word	0x3c23d70a
     708:	00000000 	.word	0x00000000
     70c:	3f7fff58 	.word	0x3f7fff58
     710:	4684d000 	.word	0x4684d000
     714:	435c0000 	.word	0x435c0000
     718:	3d4ccccd 	.word	0x3d4ccccd
     71c:	3f7ff972 	.word	0x3f7ff972
     720:	3f666666 	.word	0x3f666666
     724:	3e99999a 	.word	0x3e99999a
	i = lrintf(r - 0.5f);
     728:	3f19999a 	.word	0x3f19999a
                x = 0.5f - (p - b) * invB1;
     72c:	20005500 	.word	0x20005500
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     730:	42c80000 	.word	0x42c80000
                x = 0.5f - (p - b) * invB1;
     734:	3f7d70a4 	.word	0x3f7d70a4
	i = lrintf(r - 0.5f);
     738:	3ecccccd 	.word	0x3ecccccd
	r -= (Lfloat)i;
     73c:	f3af 8000 	nop.w

00000740 <oscillator_tick>:
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     740:	4a65      	ldr	r2, [pc, #404]	; (8d8 <oscillator_tick+0x198>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     742:	4b66      	ldr	r3, [pc, #408]	; (8dc <oscillator_tick+0x19c>)
     744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     748:	eb02 0580 	add.w	r5, r2, r0, lsl #2
	r -= (Lfloat)i;
     74c:	ed2d 8b0c 	vpush	{d8-d13}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     750:	eddf 8a63 	vldr	s17, [pc, #396]	; 8e0 <oscillator_tick+0x1a0>
	r -= (Lfloat)i;
     754:	b087      	sub	sp, #28
     756:	7819      	ldrb	r1, [r3, #0]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     758:	edc5 8a00 	vstr	s17, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     75c:	edc5 8a06 	vstr	s17, [r5, #24]
	c->BLEPindices[c->mostRecentBLEP] = i;
     760:	edc5 8a02 	vstr	s17, [r5, #8]
     764:	edc5 8a08 	vstr	s17, [r5, #32]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     768:	edc5 8a04 	vstr	s17, [r5, #16]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     76c:	edc5 8a0a 	vstr	s17, [r5, #40]	; 0x28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     770:	2900      	cmp	r1, #0
     772:	f000 80ab 	beq.w	8cc <oscillator_tick+0x18c>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     776:	0082      	lsls	r2, r0, #2
     778:	495a      	ldr	r1, [pc, #360]	; (8e4 <oscillator_tick+0x1a4>)
            x = 0.5f - (p_at_reset - b) * invB1;
     77a:	4c5b      	ldr	r4, [pc, #364]	; (8e8 <oscillator_tick+0x1a8>)
     77c:	eeb0 9a40 	vmov.f32	s18, s0
                if (p_at_reset >= 1.0f) {
     780:	4e5a      	ldr	r6, [pc, #360]	; (8ec <oscillator_tick+0x1ac>)
            x = 0.5f - (p_at_reset - b) * invB1;
     782:	eb01 0902 	add.w	r9, r1, r2
     786:	495a      	ldr	r1, [pc, #360]	; (8f0 <oscillator_tick+0x1b0>)
     788:	4682      	mov	sl, r0
                if (p_at_reset >= 1.0f) {
     78a:	4b5a      	ldr	r3, [pc, #360]	; (8f4 <oscillator_tick+0x1b4>)
     78c:	4414      	add	r4, r2
            x = 0.5f - (p_at_reset - b) * invB1;
     78e:	eddf ba5a 	vldr	s23, [pc, #360]	; 8f8 <oscillator_tick+0x1b8>
                if (p_at_reset >= 1.0f) {
     792:	4416      	add	r6, r2
     794:	ed9f ba59 	vldr	s22, [pc, #356]	; 8fc <oscillator_tick+0x1bc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     798:	eb01 0802 	add.w	r8, r1, r2
     79c:	eddf aa58 	vldr	s21, [pc, #352]	; 900 <oscillator_tick+0x1c0>
     7a0:	2700      	movs	r7, #0
     7a2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 910 <oscillator_tick+0x1d0>
	i = lrintf(r - 0.5f);
     7a6:	ed9f aa57 	vldr	s20, [pc, #348]	; 904 <oscillator_tick+0x1c4>
     7aa:	eddf 9a57 	vldr	s19, [pc, #348]	; 908 <oscillator_tick+0x1c8>
     7ae:	9302      	str	r3, [sp, #8]
     7b0:	9501      	str	r5, [sp, #4]
	r -= (Lfloat)i;
     7b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7b6:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
	c->BLEPindices[c->mostRecentBLEP] = i;
     7ba:	9b01      	ldr	r3, [sp, #4]
     7bc:	eeb0 0a49 	vmov.f32	s0, s18
	r -= (Lfloat)i;
     7c0:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
     7c4:	4630      	mov	r0, r6
     7c6:	eef4 6ac7 	vcmpe.f32	s13, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7ca:	3308      	adds	r3, #8
     7cc:	eea7 0aab 	vfma.f32	s0, s15, s23
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7d0:	ed94 cafe 	vldr	s24, [r4, #1016]	; 0x3f8
	c->BLEPindices[c->mostRecentBLEP] = i;
     7d4:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
     7d8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7e0:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7e4:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     7e8:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7ec:	9301      	str	r3, [sp, #4]
     7ee:	bfcc      	ite	gt
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     7f0:	2201      	movgt	r2, #1
     7f2:	2200      	movle	r2, #0
     7f4:	9203      	str	r2, [sp, #12]
     7f6:	f006 fb33 	bl	6e60 <tExpSmooth_setDest>
     7fa:	4630      	mov	r0, r6
     7fc:	3608      	adds	r6, #8
     7fe:	f006 fb1f 	bl	6e40 <tExpSmooth_tick>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     802:	eeb0 1a4a 	vmov.f32	s2, s20
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     806:	eef0 0a40 	vmov.f32	s1, s0
            if (p >= b) {
     80a:	eeb0 0a69 	vmov.f32	s0, s19
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     80e:	f006 fbb7 	bl	6f80 <LEAF_clip>
     812:	eef0 7a6a 	vmov.f32	s15, s21
            if (p >= b) {
     816:	464b      	mov	r3, r9
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     818:	483c      	ldr	r0, [pc, #240]	; (90c <oscillator_tick+0x1cc>)
     81a:	eef0 0a6d 	vmov.f32	s1, s27
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     81e:	9a03      	ldr	r2, [sp, #12]
	c->BLEPindices[c->mostRecentBLEP] = i;
     820:	eee0 7a0b 	vfma.f32	s15, s0, s22
     824:	ed93 6a00 	vldr	s12, [r3]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     828:	eeb0 0a4d 	vmov.f32	s0, s26
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     82c:	edcd 8a05 	vstr	s17, [sp, #20]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     830:	f109 0908 	add.w	r9, r9, #8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     834:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     838:	ee38 7a67 	vsub.f32	s14, s16, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     83c:	ee38 8a4c 	vsub.f32	s16, s16, s24
     840:	ee16 3a90 	vmov	r3, s13
     844:	eef8 6ae6 	vcvt.f32.s32	s13, s13
     848:	1c59      	adds	r1, r3, #1
     84a:	f3c3 030e 	ubfx	r3, r3, #0, #15
            x = -0.5f + p * invB;
     84e:	ee37 7a26 	vadd.f32	s14, s14, s13
            k = 0;
     852:	eb00 0383 	add.w	r3, r0, r3, lsl #2
            x = -0.5f + p * invB;
     856:	f3c1 010e 	ubfx	r1, r1, #0, #15
                p -= 1.0f;
     85a:	ee77 7ae6 	vsub.f32	s15, s15, s13
     85e:	edd3 6a00 	vldr	s13, [r3]
                x = -0.5f + p * invB;
     862:	eb00 0381 	add.w	r3, r0, r1, lsl #2
	_tMBSineTri* c = *osc;
     866:	4639      	mov	r1, r7
     868:	3701      	adds	r7, #1
     86a:	edd3 5a00 	vldr	s11, [r3]
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
     86e:	9b02      	ldr	r3, [sp, #8]
                x = -0.5f + p * invB;
     870:	ee67 7aa5 	vmul.f32	s15, s15, s11
	i = lrintf(r - 0.5f);
     874:	f853 0b04 	ldr.w	r0, [r3], #4
     878:	eee7 7a26 	vfma.f32	s15, s14, s13
	r -= (Lfloat)i;
     87c:	4605      	mov	r5, r0
     87e:	9302      	str	r3, [sp, #8]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     880:	a805      	add	r0, sp, #20
     882:	4653      	mov	r3, sl
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     884:	eea6 0a27 	vfma.f32	s0, s12, s15
	r -= (Lfloat)i;
     888:	47a8      	blx	r5
     88a:	ed9d 7a05 	vldr	s14, [sp, #20]
	scale *= w;
     88e:	eddb 7a00 	vldr	s15, [fp]
                x = -0.5f + p * invB;
     892:	4643      	mov	r3, r8
     894:	ee2c 7a87 	vmul.f32	s14, s25, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     898:	edd4 6a4f 	vldr	s13, [r4, #316]	; 0x13c
	r -= (Lfloat)i;
     89c:	f108 0808 	add.w	r8, r8, #8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8a0:	ee26 ca8c 	vmul.f32	s24, s13, s24
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
     8a8:	ed83 7a00 	vstr	s14, [r3]
     8ac:	9b01      	ldr	r3, [sp, #4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8ae:	ee28 8a27 	vmul.f32	s16, s16, s15
     8b2:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8b6:	ee28 8a26 	vmul.f32	s16, s16, s13
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     8ba:	ed03 ca02 	vstr	s24, [r3, #-8]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     8be:	ed83 8a04 	vstr	s16, [r3, #16]
     8c2:	4b06      	ldr	r3, [pc, #24]	; (8dc <oscillator_tick+0x19c>)
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	42bb      	cmp	r3, r7
     8c8:	f73f af73 	bgt.w	7b2 <oscillator_tick+0x72>
}
     8cc:	b007      	add	sp, #28
     8ce:	ecbd 8b0c 	vpop	{d8-d13}
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	i = lrintf(r - 0.5f);
     8d6:	bf00      	nop
     8d8:	200055b8 	.word	0x200055b8
                x = 0.5f - (p - b) * invB1;
     8dc:	20000024 	.word	0x20000024
     8e0:	00000000 	.word	0x00000000
	i = lrintf(r - 0.5f);
     8e4:	200050dc 	.word	0x200050dc
     8e8:	20019958 	.word	0x20019958
                x = 0.5f - (p - b) * invB1;
     8ec:	2000572c 	.word	0x2000572c
	i = lrintf(r - 0.5f);
     8f0:	200146b0 	.word	0x200146b0
	r -= (Lfloat)i;
     8f4:	20005bd4 	.word	0x20005bd4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8f8:	3c23d70a 	.word	0x3c23d70a
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     8fc:	42c80000 	.word	0x42c80000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     900:	46800000 	.word	0x46800000
	r -= (Lfloat)i;
     904:	4323d666 	.word	0x4323d666
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     908:	c323d666 	.word	0xc323d666
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     90c:	30012000 	.word	0x30012000
	r -= (Lfloat)i;
     910:	20000010 	.word	0x20000010
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     914:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     918:	f3af 8000 	nop.w
	c->BLEPindices[c->mostRecentBLEP] = i;
     91c:	f3af 8000 	nop.w

00000920 <sawSquareTick>:
     920:	4a0a      	ldr	r2, [pc, #40]	; (94c <sawSquareTick+0x2c>)
     922:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     926:	b510      	push	{r4, lr}
     928:	4604      	mov	r4, r0
     92a:	b082      	sub	sp, #8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     92c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     930:	9001      	str	r0, [sp, #4]
     932:	f006 fdf5 	bl	7520 <tPBSawSquare_setFreq>
            x = -0.5f + p_at_reset * invB;
     936:	9801      	ldr	r0, [sp, #4]
     938:	f006 fd72 	bl	7420 <tPBSawSquare_tick>
    sinPhase += inc_amount;
     93c:	edd4 7a00 	vldr	s15, [r4]
    p += inc_amount;
     940:	ee37 0a80 	vadd.f32	s0, s15, s0
            x = -0.5f + p_at_reset * invB;
     944:	ed84 0a00 	vstr	s0, [r4]
            else if (sw < 0)
     948:	b002      	add	sp, #8
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     94a:	bd10      	pop	{r4, pc}
     94c:	20005b7c 	.word	0x20005b7c
     950:	f3af 8000 	nop.w
     954:	f3af 8000 	nop.w
     958:	f3af 8000 	nop.w
                    p_at_reset -= 1.0f;
     95c:	f3af 8000 	nop.w

00000960 <sineTriTick>:
                    x = -0.5f + p_at_reset * invB;
     960:	b538      	push	{r3, r4, r5, lr}
                    p_at_reset -= 1.0f;
     962:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	i = lrintf(r - 0.5f);
     966:	4c0e      	ldr	r4, [pc, #56]	; (9a0 <sineTriTick+0x40>)
     968:	4605      	mov	r5, r0
                    x = -0.5f + p_at_reset * invB;
     96a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     96e:	ed2d 8b02 	vpush	{d8}
                    x = -0.5f + p_at_reset * invB;
     972:	eeb0 8a60 	vmov.f32	s16, s1
	i = lrintf(r - 0.5f);
     976:	4620      	mov	r0, r4
     978:	f006 fbc2 	bl	7100 <tPBSineTriangle_setFreq>
     97c:	4620      	mov	r0, r4
	r -= (Lfloat)i;
     97e:	eeb0 0a48 	vmov.f32	s0, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     982:	f007 ff09 	bl	8798 <__tPBSineTriangle_setShape_veneer>
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     986:	4620      	mov	r0, r4
     988:	f006 fb0a 	bl	6fa0 <tPBSineTriangle_tick>
	r -= (Lfloat)i;
     98c:	edd5 7a00 	vldr	s15, [r5]
	i = lrintf(r - 0.5f);
     990:	ee37 0a80 	vadd.f32	s0, s15, s0
	r -= (Lfloat)i;
     994:	ed85 0a00 	vstr	s0, [r5]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     998:	ecbd 8b02 	vpop	{d8}
	i = lrintf(r - 0.5f);
     99c:	bd38      	pop	{r3, r4, r5, pc}
     99e:	bf00      	nop
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     9a0:	20005c38 	.word	0x20005c38
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9a4:	f3af 8000 	nop.w
	c->BLEPindices[c->mostRecentBLEP] = i;
     9a8:	f3af 8000 	nop.w
     9ac:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9b0:	f3af 8000 	nop.w
     9b4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     9b8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     9bc:	f3af 8000 	nop.w

000009c0 <sawTick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     9c0:	4a0a      	ldr	r2, [pc, #40]	; (9ec <sawTick+0x2c>)
     9c2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
     9c6:	b510      	push	{r4, lr}
     9c8:	4604      	mov	r4, r0
     9ca:	b082      	sub	sp, #8
     9cc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
	i = lrintf(r - 0.5f);
     9d0:	9001      	str	r0, [sp, #4]
	r -= (Lfloat)i;
     9d2:	f006 fd15 	bl	7400 <tPBSaw_setFreq>
	c->BLEPindices[c->mostRecentBLEP] = i;
     9d6:	9801      	ldr	r0, [sp, #4]
     9d8:	f006 fcc2 	bl	7360 <tPBSaw_tick>
     9dc:	edd4 7a00 	vldr	s15, [r4]
	r -= (Lfloat)i;
     9e0:	ee37 0a80 	vadd.f32	s0, s15, s0
     9e4:	ed84 0a00 	vstr	s0, [r4]
                x = -0.5f + p * invB;
     9e8:	b002      	add	sp, #8
     9ea:	bd10      	pop	{r4, pc}
     9ec:	20005b64 	.word	0x20005b64
     9f0:	f3af 8000 	nop.w
	_tMBSineTri* c = *osc;
     9f4:	f3af 8000 	nop.w
     9f8:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     9fc:	f3af 8000 	nop.w

00000a00 <pulseTick>:
	i = lrintf(r - 0.5f);
     a00:	b538      	push	{r3, r4, r5, lr}
     a02:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	r -= (Lfloat)i;
     a06:	4c0e      	ldr	r4, [pc, #56]	; (a40 <pulseTick+0x40>)
     a08:	4605      	mov	r5, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a0a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	scale *= w;
     a0e:	ed2d 8b02 	vpush	{d8}
	r -= (Lfloat)i;
     a12:	eeb0 8a60 	vmov.f32	s16, s1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     a16:	4620      	mov	r0, r4
     a18:	f006 fc92 	bl	7340 <tPBPulse_setFreq>
                x = -0.5f + p * invB;
     a1c:	4620      	mov	r0, r4
     a1e:	eeb0 0a48 	vmov.f32	s0, s16
	scale *= w;
     a22:	f007 ffb9 	bl	8998 <__tPBPulse_setWidth_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a26:	4620      	mov	r0, r4
	r -= (Lfloat)i;
     a28:	f006 fc3a 	bl	72a0 <tPBPulse_tick>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a2c:	edd5 7a00 	vldr	s15, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a30:	ee37 0a80 	vadd.f32	s0, s15, s0
	c->BLEPindices[c->mostRecentBLEP] = i;
     a34:	ed85 0a00 	vstr	s0, [r5]
     a38:	ecbd 8b02 	vpop	{d8}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a3c:	bd38      	pop	{r3, r4, r5, pc}
     a3e:	bf00      	nop
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a40:	20005748 	.word	0x20005748
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a44:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     a48:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a4c:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     a50:	f3af 8000 	nop.w
     a54:	f3af 8000 	nop.w
     a58:	f3af 8000 	nop.w
     a5c:	f3af 8000 	nop.w

00000a60 <sineTick>:
}
     a60:	4a0a      	ldr	r2, [pc, #40]	; (a8c <sineTick+0x2c>)
        	p = (1.0f - eof_offset) + 0.25f;
     a62:	eb03 0141 	add.w	r1, r3, r1, lsl #1
        	sinPhase = (1.0f - eof_offset);
     a66:	b510      	push	{r4, lr}
     a68:	4604      	mov	r4, r0
        	p = (1.0f - eof_offset) + 0.25f;
     a6a:	b082      	sub	sp, #8
     a6c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
        if (!k) {
     a70:	9001      	str	r0, [sp, #4]
     a72:	f007 ffa9 	bl	89c8 <__tCycle_setFreq_veneer>
                if (p_at_reset < 0.0f) {
     a76:	9801      	ldr	r0, [sp, #4]
     a78:	f007 fece 	bl	8818 <__tCycle_tick_veneer>
     a7c:	edd4 7a00 	vldr	s15, [r4]
            x = -0.5f + p_at_reset * invB;
     a80:	ee37 0a80 	vadd.f32	s0, s15, s0
     a84:	ed84 0a00 	vstr	s0, [r4]
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     a88:	b002      	add	sp, #8
     a8a:	bd10      	pop	{r4, pc}
     a8c:	20005c20 	.word	0x20005c20
            x = -0.5f + p_at_reset * invB;
     a90:	f3af 8000 	nop.w
     a94:	f3af 8000 	nop.w
	r = MINBLEP_PHASES * phase * inv_w;
     a98:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     a9c:	f3af 8000 	nop.w

00000aa0 <triTick>:
     aa0:	b538      	push	{r3, r4, r5, lr}
     aa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     aa6:	4c0e      	ldr	r4, [pc, #56]	; (ae0 <triTick+0x40>)
     aa8:	4605      	mov	r5, r0
     aaa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	r -= (Lfloat)i;
     aae:	ed2d 8b02 	vpush	{d8}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ab2:	eeb0 8a60 	vmov.f32	s16, s1
	c->BLEPindices[c->mostRecentBLEP] = i;
     ab6:	4620      	mov	r0, r4
	r -= (Lfloat)i;
     ab8:	f006 fbe2 	bl	7280 <tPBTriangle_setFreq>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     abc:	4620      	mov	r0, r4
	r -= (Lfloat)i;
     abe:	eeb0 0a48 	vmov.f32	s0, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ac2:	f007 fe55 	bl	8770 <__tPBTriangle_setSkew_veneer>
     ac6:	4620      	mov	r0, r4
     ac8:	f006 fb3a 	bl	7140 <tPBTriangle_tick>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     acc:	edd5 7a00 	vldr	s15, [r5]
	c->BLEPindices[c->mostRecentBLEP] = i;
     ad0:	ee37 0a80 	vadd.f32	s0, s15, s0
     ad4:	ed85 0a00 	vstr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ad8:	ecbd 8b02 	vpop	{d8}
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     adc:	bd38      	pop	{r3, r4, r5, pc}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ade:	bf00      	nop
     ae0:	200148d4 	.word	0x200148d4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ae4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ae8:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     aec:	f3af 8000 	nop.w
     af0:	f3af 8000 	nop.w
     af4:	f3af 8000 	nop.w
     af8:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     afc:	f3af 8000 	nop.w

00000b00 <userTick>:
	scale *= w;
     b00:	4770      	bx	lr
     b02:	bf00      	nop
            if (p < b) {
     b04:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b08:	f3af 8000 	nop.w
     b0c:	f3af 8000 	nop.w
            if (p < b) {
     b10:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b14:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b18:	f3af 8000 	nop.w
	c->BLEPindices[c->mostRecentBLEP] = i;
     b1c:	f3af 8000 	nop.w

00000b20 <filter_tick>:
     b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b22:	f201 239b 	addw	r3, r1, #667	; 0x29b
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b26:	4e50      	ldr	r6, [pc, #320]	; (c68 <filter_tick+0x148>)
     b28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b2c:	460c      	mov	r4, r1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     b2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b32:	4605      	mov	r5, r0
     b34:	ed2d 8b04 	vpush	{d8-d9}
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     b38:	ed93 9a00 	vldr	s18, [r3]
     b3c:	eeb0 8a40 	vmov.f32	s16, s0
     b40:	b085      	sub	sp, #20
     b42:	eeb4 9ae7 	vcmpe.f32	s18, s15
            if (p < b) {
     b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p - b) * invB1;
     b4a:	d922      	bls.n	b92 <filter_tick+0x72>
     b4c:	f606 2364 	addw	r3, r6, #2660	; 0xa64
     b50:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
     b54:	eddf 0a45 	vldr	s1, [pc, #276]	; c6c <filter_tick+0x14c>
     b58:	008f      	lsls	r7, r1, #2
     b5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     b5e:	ed9f 1a44 	vldr	s2, [pc, #272]	; c70 <filter_tick+0x150>
     b62:	ed9f 0a44 	vldr	s0, [pc, #272]	; c74 <filter_tick+0x154>
     b66:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
     b6a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
                    p_at_reset -= 1.0f;
     b6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b72:	eee8 7a07 	vfma.f32	s15, s16, s14
	i = lrintf(r - 0.5f);
     b76:	ee67 0aa0 	vmul.f32	s1, s15, s1
     b7a:	f006 fa01 	bl	6f80 <LEAF_clip>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b7e:	483e      	ldr	r0, [pc, #248]	; (c78 <filter_tick+0x158>)
	i = lrintf(r - 0.5f);
     b80:	4438      	add	r0, r7
     b82:	9001      	str	r0, [sp, #4]
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b84:	f006 f96c 	bl	6e60 <tExpSmooth_setDest>
	i = lrintf(r - 0.5f);
     b88:	9801      	ldr	r0, [sp, #4]
     b8a:	f006 f959 	bl	6e40 <tExpSmooth_tick>
     b8e:	ed8d 0a02 	vstr	s0, [sp, #8]
	r -= (Lfloat)i;
     b92:	f204 23c5 	addw	r3, r4, #709	; 0x2c5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     b9a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	r -= (Lfloat)i;
     b9e:	edd3 8a00 	vldr	s17, [r3]
	scale *= w;
     ba2:	eef4 8ae7 	vcmpe.f32	s17, s15
                if (!k && p_at_reset >= b) {
     ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     baa:	d922      	bls.n	bf2 <filter_tick+0xd2>
     bac:	4b33      	ldr	r3, [pc, #204]	; (c7c <filter_tick+0x15c>)
	r -= (Lfloat)i;
     bae:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bb2:	eddf 0a2e 	vldr	s1, [pc, #184]	; c6c <filter_tick+0x14c>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
     bba:	ed9f 1a2d 	vldr	s2, [pc, #180]	; c70 <filter_tick+0x150>
                if (!k && p_at_reset >= b) {
     bbe:	ed9f 0a2d 	vldr	s0, [pc, #180]	; c74 <filter_tick+0x154>
	c->BLEPindices[c->mostRecentBLEP] = i;
     bc2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bc6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     bca:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     bce:	eee7 7a08 	vfma.f32	s15, s14, s16
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bd2:	ee67 0aa0 	vmul.f32	s1, s15, s1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     bd6:	f006 f9d3 	bl	6f80 <LEAF_clip>
     bda:	1ca3      	adds	r3, r4, #2
     bdc:	4826      	ldr	r0, [pc, #152]	; (c78 <filter_tick+0x158>)
     bde:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     be2:	9001      	str	r0, [sp, #4]
     be4:	f006 f93c 	bl	6e60 <tExpSmooth_setDest>
                if (!k && p_at_reset >= b) {
     be8:	9801      	ldr	r0, [sp, #4]
                    x = 0.5f - (p_at_reset - b) * invB1;
     bea:	f006 f929 	bl	6e40 <tExpSmooth_tick>
	_tMBSineTri* c = *osc;
     bee:	ed8d 0a03 	vstr	s0, [sp, #12]
	i = lrintf(r - 0.5f);
     bf2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
     bf6:	f204 23ef 	addw	r3, r4, #751	; 0x2ef
     bfa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     bfe:	eeb4 9ae7 	vcmpe.f32	s18, s15
                    x = 0.5f - (p_at_reset - b) * invB1;
     c02:	ed96 8a00 	vldr	s16, [r6]
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	i = lrintf(r - 0.5f);
     c0a:	dd07      	ble.n	c1c <filter_tick+0xfc>
     c0c:	4b1c      	ldr	r3, [pc, #112]	; (c80 <filter_tick+0x160>)
     c0e:	4622      	mov	r2, r4
	r -= (Lfloat)i;
     c10:	ed9d 0a02 	vldr	s0, [sp, #8]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c14:	2100      	movs	r1, #0
     c16:	681b      	ldr	r3, [r3, #0]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c18:	4628      	mov	r0, r5
     c1a:	4798      	blx	r3
	r -= (Lfloat)i;
     c1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c20:	ed95 0a01 	vldr	s0, [r5, #4]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
     c28:	ed95 7a00 	vldr	s14, [r5]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c2c:	ee77 7ac8 	vsub.f32	s15, s15, s16
	r -= (Lfloat)i;
     c30:	eef4 8ae6 	vcmpe.f32	s17, s13
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c34:	eea7 0a27 	vfma.f32	s0, s14, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
     c3c:	ed85 0a01 	vstr	s0, [r5, #4]
     c40:	dd0b      	ble.n	c5a <filter_tick+0x13a>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c42:	4b0f      	ldr	r3, [pc, #60]	; (c80 <filter_tick+0x160>)
     c44:	4622      	mov	r2, r4
     c46:	ed9d 0a03 	vldr	s0, [sp, #12]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c4a:	2101      	movs	r1, #1
     c4c:	685b      	ldr	r3, [r3, #4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     c4e:	1d28      	adds	r0, r5, #4
     c50:	4798      	blx	r3
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     c52:	ed95 0a01 	vldr	s0, [r5, #4]
     c56:	ed95 7a00 	vldr	s14, [r5]
     c5a:	eea8 0a07 	vfma.f32	s0, s16, s14
     c5e:	b005      	add	sp, #20
        if (sw > 0)
     c60:	ecbd 8b04 	vpop	{d8-d9}
     c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c66:	bf00      	nop
     c68:	20019958 	.word	0x20019958
     c6c:	420fb824 	.word	0x420fb824
	i = lrintf(r - 0.5f);
     c70:	457ff000 	.word	0x457ff000
     c74:	00000000 	.word	0x00000000
     c78:	2000509c 	.word	0x2000509c
     c7c:	2001a464 	.word	0x2001a464
     c80:	200050bc 	.word	0x200050bc
	r -= (Lfloat)i;
     c84:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c88:	f3af 8000 	nop.w
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c8c:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     c90:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c94:	f3af 8000 	nop.w
                if (p_at_reset >= 1.0f) {
     c98:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     c9c:	f3af 8000 	nop.w

00000ca0 <lowpassTick>:
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ca0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ca4:	4b0d      	ldr	r3, [pc, #52]	; (cdc <lowpassTick+0x3c>)
     ca6:	b530      	push	{r4, r5, lr}
     ca8:	4605      	mov	r5, r0
     caa:	b083      	sub	sp, #12
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
     cb0:	0094      	lsls	r4, r2, #2
     cb2:	9001      	str	r0, [sp, #4]
                if (p_at_reset >= 1.0f) {
     cb4:	f007 fe14 	bl	88e0 <__tSVF_setFreqFast_veneer>
	c->BLEPindices[c->mostRecentBLEP] = i;
     cb8:	ed95 0a00 	vldr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cbc:	9801      	ldr	r0, [sp, #4]
     cbe:	f007 fd7b 	bl	87b8 <__tSVF_tick_veneer>
     cc2:	4a07      	ldr	r2, [pc, #28]	; (ce0 <lowpassTick+0x40>)
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cc4:	ed85 0a00 	vstr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     cc8:	4422      	add	r2, r4
     cca:	edd2 7a00 	vldr	s15, [r2]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cce:	ee27 0a80 	vmul.f32	s0, s15, s0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     cd2:	ed85 0a00 	vstr	s0, [r5]
     cd6:	b003      	add	sp, #12
     cd8:	bd30      	pop	{r4, r5, pc}
     cda:	bf00      	nop
     cdc:	200053ec 	.word	0x200053ec
                if (p_at_reset >= 1.0f) {
     ce0:	200050ac 	.word	0x200050ac
                    x = 0.5f - (p_at_reset - b) * invB1;
     ce4:	f3af 8000 	nop.w
     ce8:	f3af 8000 	nop.w
     cec:	f3af 8000 	nop.w
     cf0:	f3af 8000 	nop.w
     cf4:	f3af 8000 	nop.w
            x = 0.5f - (p_at_reset - b) * invB1;
     cf8:	f3af 8000 	nop.w
                if (p_at_reset < b) {
     cfc:	f3af 8000 	nop.w

00000d00 <highpassTick>:
            x = 0.5f - (p_at_reset - b) * invB1;
     d00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
                if (p_at_reset < b) {
     d04:	4b0d      	ldr	r3, [pc, #52]	; (d3c <highpassTick+0x3c>)
     d06:	b530      	push	{r4, r5, lr}
            x = 0.5f - (p_at_reset - b) * invB1;
     d08:	4605      	mov	r5, r0
     d0a:	b083      	sub	sp, #12
                if (p_at_reset < b) {
     d0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
                if (p_at_reset < 0.0f) {
     d10:	0094      	lsls	r4, r2, #2
     d12:	9001      	str	r0, [sp, #4]
     d14:	f007 fde4 	bl	88e0 <__tSVF_setFreqFast_veneer>
     d18:	ed95 0a00 	vldr	s0, [r5]
        else if (sw < 0)
     d1c:	9801      	ldr	r0, [sp, #4]
     d1e:	f007 fd4b 	bl	87b8 <__tSVF_tick_veneer>
     d22:	4a07      	ldr	r2, [pc, #28]	; (d40 <highpassTick+0x40>)
	i = lrintf(r - 0.5f);
     d24:	ed85 0a00 	vstr	s0, [r5]
     d28:	4422      	add	r2, r4
     d2a:	edd2 7a00 	vldr	s15, [r2]
     d2e:	ee27 0a80 	vmul.f32	s0, s15, s0
     d32:	ed85 0a00 	vstr	s0, [r5]
     d36:	b003      	add	sp, #12
	r -= (Lfloat)i;
     d38:	bd30      	pop	{r4, r5, pc}
     d3a:	bf00      	nop
	c->BLEPindices[c->mostRecentBLEP] = i;
     d3c:	20005160 	.word	0x20005160
	r -= (Lfloat)i;
     d40:	200050ac 	.word	0x200050ac
     d44:	f3af 8000 	nop.w
     d48:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     d4c:	f3af 8000 	nop.w
                p -= 1.0f;
     d50:	f3af 8000 	nop.w
     d54:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     d58:	f3af 8000 	nop.w
	_tMBSineTri* c = *osc;
     d5c:	f3af 8000 	nop.w

00000d60 <bandpassTick>:
     d60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
}
     d64:	4b0d      	ldr	r3, [pc, #52]	; (d9c <bandpassTick+0x3c>)
     d66:	b530      	push	{r4, r5, lr}
	i = lrintf(r - 0.5f);
     d68:	4605      	mov	r5, r0
     d6a:	b083      	sub	sp, #12
                x = -0.5f + p * invB;
     d6c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
	scale *= w;
     d70:	0094      	lsls	r4, r2, #2
     d72:	9001      	str	r0, [sp, #4]
	i = lrintf(r - 0.5f);
     d74:	f007 fdb4 	bl	88e0 <__tSVF_setFreqFast_veneer>
     d78:	ed95 0a00 	vldr	s0, [r5]
	r -= (Lfloat)i;
     d7c:	9801      	ldr	r0, [sp, #4]
     d7e:	f007 fd1b 	bl	87b8 <__tSVF_tick_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d82:	4a07      	ldr	r2, [pc, #28]	; (da0 <bandpassTick+0x40>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     d84:	ed85 0a00 	vstr	s0, [r5]
	r -= (Lfloat)i;
     d88:	4422      	add	r2, r4
     d8a:	edd2 7a00 	vldr	s15, [r2]
	scale *= w;
     d8e:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d92:	ed85 0a00 	vstr	s0, [r5]
	r -= (Lfloat)i;
     d96:	b003      	add	sp, #12
     d98:	bd30      	pop	{r4, r5, pc}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d9a:	bf00      	nop
     d9c:	20000a0c 	.word	0x20000a0c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     da0:	200050ac 	.word	0x200050ac
	c->BLEPindices[c->mostRecentBLEP] = i;
     da4:	f3af 8000 	nop.w
     da8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     dac:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     db0:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     db4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     db8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     dbc:	f3af 8000 	nop.w

00000dc0 <diodeLowpassTick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     dc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     dc4:	4b0d      	ldr	r3, [pc, #52]	; (dfc <diodeLowpassTick+0x3c>)
     dc6:	b530      	push	{r4, r5, lr}
     dc8:	4605      	mov	r5, r0
     dca:	b083      	sub	sp, #12
}
     dcc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     dd0:	0094      	lsls	r4, r2, #2
     dd2:	9001      	str	r0, [sp, #4]
     dd4:	f007 fca4 	bl	8720 <__tDiodeFilter_setFreqFast_veneer>
	i = lrintf(r - 0.5f);
     dd8:	ed95 0a00 	vldr	s0, [r5]
     ddc:	9801      	ldr	r0, [sp, #4]
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     dde:	f007 fc97 	bl	8710 <__tDiodeFilter_tickEfficient_veneer>
     de2:	4a07      	ldr	r2, [pc, #28]	; (e00 <diodeLowpassTick+0x40>)
     de4:	ed85 0a00 	vstr	s0, [r5]
	i = lrintf(r - 0.5f);
     de8:	4422      	add	r2, r4
     dea:	edd2 7a00 	vldr	s15, [r2]
                    p_at_reset += 1.0f;
     dee:	ee27 0a80 	vmul.f32	s0, s15, s0
	i = lrintf(r - 0.5f);
     df2:	ed85 0a00 	vstr	s0, [r5]
     df6:	b003      	add	sp, #12
     df8:	bd30      	pop	{r4, r5, pc}
	r -= (Lfloat)i;
     dfa:	bf00      	nop
     dfc:	20005048 	.word	0x20005048
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e00:	200050ac 	.word	0x200050ac
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e04:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     e08:	f3af 8000 	nop.w
                if (k && p_at_reset < b) {
     e0c:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e10:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     e14:	f3af 8000 	nop.w
	scale *= w;
     e18:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e1c:	f3af 8000 	nop.w

00000e20 <VZpeakTick>:
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e20:	4b09      	ldr	r3, [pc, #36]	; (e48 <VZpeakTick+0x28>)
     e22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
     e26:	b510      	push	{r4, lr}
                if (k && p_at_reset < b) {
     e28:	4604      	mov	r4, r0
     e2a:	b082      	sub	sp, #8
	c->BLEPindices[c->mostRecentBLEP] = i;
     e2c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e30:	9001      	str	r0, [sp, #4]
     e32:	f007 fce9 	bl	8808 <__tVZFilter_setFreqFast_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     e36:	9801      	ldr	r0, [sp, #4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e38:	ed94 0a00 	vldr	s0, [r4]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     e3c:	f007 fd18 	bl	8870 <__tVZFilter_tickEfficient_veneer>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     e40:	ed84 0a00 	vstr	s0, [r4]
     e44:	b002      	add	sp, #8
     e46:	bd10      	pop	{r4, pc}
     e48:	200008d4 	.word	0x200008d4
     e4c:	f3af 8000 	nop.w
                if (k && p_at_reset < b) {
     e50:	f3af 8000 	nop.w
                    x = -0.5f + p_at_reset * invB;
     e54:	f3af 8000 	nop.w
	_tMBSineTri* c = *osc;
     e58:	f3af 8000 	nop.w
                    x = -0.5f + p_at_reset * invB;
     e5c:	f3af 8000 	nop.w

00000e60 <VZlowshelfTick>:
	i = lrintf(r - 0.5f);
     e60:	4b09      	ldr	r3, [pc, #36]	; (e88 <VZlowshelfTick+0x28>)
                    x = -0.5f + p_at_reset * invB;
     e62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	r = MINBLEP_PHASES * phase * inv_w;
     e66:	b510      	push	{r4, lr}
     e68:	4604      	mov	r4, r0
	i = lrintf(r - 0.5f);
     e6a:	b082      	sub	sp, #8
     e6c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     e70:	9001      	str	r0, [sp, #4]
	r -= (Lfloat)i;
     e72:	f007 fcc9 	bl	8808 <__tVZFilter_setFreqFast_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e76:	9801      	ldr	r0, [sp, #4]
     e78:	ed94 0a00 	vldr	s0, [r4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e7c:	f007 fcf8 	bl	8870 <__tVZFilter_tickEfficient_veneer>
	r -= (Lfloat)i;
     e80:	ed84 0a00 	vstr	s0, [r4]
     e84:	b002      	add	sp, #8
     e86:	bd10      	pop	{r4, pc}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e88:	200008c4 	.word	0x200008c4
     e8c:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e90:	f3af 8000 	nop.w
	c->BLEPindices[c->mostRecentBLEP] = i;
     e94:	f3af 8000 	nop.w
     e98:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e9c:	f3af 8000 	nop.w

00000ea0 <VZhighshelfTick>:
     ea0:	4b09      	ldr	r3, [pc, #36]	; (ec8 <VZhighshelfTick+0x28>)
     ea2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ea6:	b510      	push	{r4, lr}
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ea8:	4604      	mov	r4, r0
     eaa:	b082      	sub	sp, #8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     eac:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     eb0:	9001      	str	r0, [sp, #4]
     eb2:	f007 fca9 	bl	8808 <__tVZFilter_setFreqFast_veneer>
     eb6:	9801      	ldr	r0, [sp, #4]
     eb8:	ed94 0a00 	vldr	s0, [r4]
        else if (sw < 0)
     ebc:	f007 fcd8 	bl	8870 <__tVZFilter_tickEfficient_veneer>
	i = lrintf(r - 0.5f);
     ec0:	ed84 0a00 	vstr	s0, [r4]
     ec4:	b002      	add	sp, #8
     ec6:	bd10      	pop	{r4, pc}
     ec8:	200008b4 	.word	0x200008b4
     ecc:	f3af 8000 	nop.w
     ed0:	f3af 8000 	nop.w
     ed4:	f3af 8000 	nop.w
     ed8:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     edc:	f3af 8000 	nop.w

00000ee0 <VZbandrejectTick>:
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ee0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     ee4:	4b0d      	ldr	r3, [pc, #52]	; (f1c <VZbandrejectTick+0x3c>)
     ee6:	b530      	push	{r4, r5, lr}
	r -= (Lfloat)i;
     ee8:	4605      	mov	r5, r0
     eea:	b083      	sub	sp, #12
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     eec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
                if (p_at_reset < 0.0f) {
     ef0:	0094      	lsls	r4, r2, #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ef2:	9001      	str	r0, [sp, #4]
     ef4:	f007 fc88 	bl	8808 <__tVZFilter_setFreqFast_veneer>
	r -= (Lfloat)i;
     ef8:	ed95 0a00 	vldr	s0, [r5]
	scale *= w;
     efc:	9801      	ldr	r0, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     efe:	f007 fcb7 	bl	8870 <__tVZFilter_tickEfficient_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f02:	4a07      	ldr	r2, [pc, #28]	; (f20 <VZbandrejectTick+0x40>)
     f04:	ed85 0a00 	vstr	s0, [r5]
	c->BLEPindices[c->mostRecentBLEP] = i;
     f08:	4422      	add	r2, r4
                if (p_at_reset < 0.0f) {
     f0a:	edd2 7a00 	vldr	s15, [r2]
	scale *= w;
     f0e:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->BLEPindices[c->mostRecentBLEP] = i;
     f12:	ed85 0a00 	vstr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f16:	b003      	add	sp, #12
     f18:	bd30      	pop	{r4, r5, pc}
     f1a:	bf00      	nop
     f1c:	200008a4 	.word	0x200008a4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     f20:	200050ac 	.word	0x200050ac
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     f24:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     f28:	f3af 8000 	nop.w
     f2c:	f3af 8000 	nop.w
     f30:	f3af 8000 	nop.w
     f34:	f3af 8000 	nop.w
                    x = -0.5f + p_at_reset * invB;
     f38:	f3af 8000 	nop.w
        else if (sw < 0)
     f3c:	f3af 8000 	nop.w

00000f40 <LadderLowpassTick>:
     f40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     f44:	4b0d      	ldr	r3, [pc, #52]	; (f7c <LadderLowpassTick+0x3c>)
	i = lrintf(r - 0.5f);
     f46:	b530      	push	{r4, r5, lr}
     f48:	4605      	mov	r5, r0
                    x = -0.5f + p_at_reset * invB;
     f4a:	b083      	sub	sp, #12
     f4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
	i = lrintf(r - 0.5f);
     f50:	0094      	lsls	r4, r2, #2
     f52:	9001      	str	r0, [sp, #4]
     f54:	f007 fcac 	bl	88b0 <__tLadderFilter_setFreqFast_veneer>
	r -= (Lfloat)i;
     f58:	ed95 0a00 	vldr	s0, [r5]
	c->BLEPindices[c->mostRecentBLEP] = i;
     f5c:	9801      	ldr	r0, [sp, #4]
     f5e:	f007 fcff 	bl	8960 <__tLadderFilter_tick_veneer>
	r -= (Lfloat)i;
     f62:	4a07      	ldr	r2, [pc, #28]	; (f80 <LadderLowpassTick+0x40>)
     f64:	ed85 0a00 	vstr	s0, [r5]
                    x = -0.5f + p_at_reset * invB;
     f68:	4422      	add	r2, r4
	r -= (Lfloat)i;
     f6a:	edd2 7a00 	vldr	s15, [r2]
     f6e:	ee27 0a80 	vmul.f32	s0, s15, s0
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     f72:	ed85 0a00 	vstr	s0, [r5]
     f76:	b003      	add	sp, #12
     f78:	bd30      	pop	{r4, r5, pc}
     f7a:	bf00      	nop
     f7c:	20000894 	.word	0x20000894
                    x = 0.5f - (p_at_reset - b) * invB1;
     f80:	200050ac 	.word	0x200050ac
	i = lrintf(r - 0.5f);
     f84:	f3af 8000 	nop.w
                    x = 0.5f - (p_at_reset - b) * invB1;
     f88:	f3af 8000 	nop.w
     f8c:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     f90:	f3af 8000 	nop.w
                    x = 0.5f - (p_at_reset - b) * invB1;
     f94:	f3af 8000 	nop.w
     f98:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     f9c:	f3af 8000 	nop.w

00000fa0 <setFreqMultPitch>:
     fa0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
                    x = 0.5f - (p_at_reset - b) * invB1;
     fa4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
     fa8:	eef0 0a40 	vmov.f32	s1, s0
	r -= (Lfloat)i;
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	0045      	lsls	r5, r0, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fb0:	4b0e      	ldr	r3, [pc, #56]	; (fec <setFreqMultPitch+0x4c>)
     fb2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     fb6:	460c      	mov	r4, r1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     fb8:	3020      	adds	r0, #32
     fba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	r -= (Lfloat)i;
     fbe:	4408      	add	r0, r1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     fc4:	ed90 7a02 	vldr	s14, [r0, #8]
     fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
	i = lrintf(r - 0.5f);
     fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (Lfloat)i;
     fd0:	dd01      	ble.n	fd6 <setFreqMultPitch+0x36>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fd2:	fef8 0a40 	vrinta.f32	s1, s0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fd6:	ed9f 0a06 	vldr	s0, [pc, #24]	; ff0 <setFreqMultPitch+0x50>
	c->BLEPindices[c->mostRecentBLEP] = i;
     fda:	442c      	add	r4, r5
     fdc:	f007 fbac 	bl	8738 <__powf_veneer>
	i = lrintf(r - 0.5f);
     fe0:	4b04      	ldr	r3, [pc, #16]	; (ff4 <setFreqMultPitch+0x54>)
	c->BLEPindices[c->mostRecentBLEP] = i;
     fe2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fe6:	ed84 0a00 	vstr	s0, [r4]
     fea:	bd38      	pop	{r3, r4, r5, pc}
     fec:	20019958 	.word	0x20019958
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ff0:	3f879c7d 	.word	0x3f879c7d
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ff4:	200050dc 	.word	0x200050dc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     ff8:	f3af 8000 	nop.w
     ffc:	f3af 8000 	nop.w

00001000 <setFreqMultHarm>:
    1000:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
	i = lrintf(r - 0.5f);
    1004:	4b15      	ldr	r3, [pc, #84]	; (105c <setFreqMultHarm+0x5c>)
    1006:	0042      	lsls	r2, r0, #1
	r -= (Lfloat)i;
    1008:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	c->BLEPindices[c->mostRecentBLEP] = i;
    100c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    1010:	3020      	adds	r0, #32
    1012:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	r -= (Lfloat)i;
    1016:	4408      	add	r0, r1
    1018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    101c:	ed90 7a02 	vldr	s14, [r0, #8]
    1020:	eeb4 7ae7 	vcmpe.f32	s14, s15
    sinPhase += inc_amount;
    1024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    p += inc_amount;
    1028:	dd01      	ble.n	102e <setFreqMultHarm+0x2e>
    102a:	feb8 0a40 	vrinta.f32	s0, s0
    102e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
                x = 0.5f - (p - b) * invB1;
    1032:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    103a:	db08      	blt.n	104e <setFreqMultHarm+0x4e>
    103c:	ee30 0a27 	vadd.f32	s0, s0, s15
    1040:	4b07      	ldr	r3, [pc, #28]	; (1060 <setFreqMultHarm+0x60>)
    1042:	4411      	add	r1, r2
    1044:	eb03 0181 	add.w	r1, r3, r1, lsl #2
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1048:	ed81 0a00 	vstr	s0, [r1]
	i = lrintf(r - 0.5f);
    104c:	4770      	bx	lr
    104e:	ee30 0a67 	vsub.f32	s0, s0, s15
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1052:	eeb0 7ac0 	vabs.f32	s14, s0
	i = lrintf(r - 0.5f);
    1056:	ee87 0a87 	vdiv.f32	s0, s15, s14
    105a:	e7f1      	b.n	1040 <setFreqMultHarm+0x40>
    105c:	20019958 	.word	0x20019958
	{
		freqMult[osc][string] = (harm + 1);
	}
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    1060:	200050dc 	.word	0x200050dc
    1064:	f3af 8000 	nop.w
    1068:	f3af 8000 	nop.w
    106c:	f3af 8000 	nop.w
    1070:	f3af 8000 	nop.w
    1074:	f3af 8000 	nop.w
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <lowpassSetQ+0x10>)
    1082:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1086:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    108a:	f007 bba5 	b.w	87d8 <__tSVF_setQ_veneer>
    108e:	bf00      	nop
    1090:	200053ec 	.word	0x200053ec
    1094:	f3af 8000 	nop.w
    1098:	f3af 8000 	nop.w
    109c:	f3af 8000 	nop.w

000010a0 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <highpassSetQ+0x10>)
    10a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10aa:	f007 bb95 	b.w	87d8 <__tSVF_setQ_veneer>
    10ae:	bf00      	nop
    10b0:	20005160 	.word	0x20005160
    10b4:	f3af 8000 	nop.w
    10b8:	f3af 8000 	nop.w
    10bc:	f3af 8000 	nop.w

000010c0 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <bandpassSetQ+0x10>)
    10c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10ca:	f007 bb85 	b.w	87d8 <__tSVF_setQ_veneer>
    10ce:	bf00      	nop
    10d0:	20000a0c 	.word	0x20000a0c
    10d4:	f3af 8000 	nop.w
    10d8:	f3af 8000 	nop.w
    10dc:	f3af 8000 	nop.w

000010e0 <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    10e0:	4b03      	ldr	r3, [pc, #12]	; (10f0 <diodeLowpassSetQ+0x10>)
    10e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10ea:	f007 bc69 	b.w	89c0 <__tDiodeFilter_setQ_veneer>
    10ee:	bf00      	nop
    10f0:	20005048 	.word	0x20005048
    10f4:	f3af 8000 	nop.w
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
    1100:	4b03      	ldr	r3, [pc, #12]	; (1110 <VZpeakSetQ+0x10>)
    1102:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    110a:	f007 bc95 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    110e:	bf00      	nop
    1110:	200008d4 	.word	0x200008d4
    1114:	f3af 8000 	nop.w
    1118:	f3af 8000 	nop.w
    111c:	f3af 8000 	nop.w

00001120 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
    1120:	4b03      	ldr	r3, [pc, #12]	; (1130 <VZlowshelfSetQ+0x10>)
    1122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    112a:	f007 bc85 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    112e:	bf00      	nop
    1130:	200008c4 	.word	0x200008c4
    1134:	f3af 8000 	nop.w
    1138:	f3af 8000 	nop.w
    113c:	f3af 8000 	nop.w

00001140 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
    1140:	4b03      	ldr	r3, [pc, #12]	; (1150 <VZhighshelfSetQ+0x10>)
    1142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    114a:	f007 bc75 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    114e:	bf00      	nop
    1150:	200008b4 	.word	0x200008b4
    1154:	f3af 8000 	nop.w
    1158:	f3af 8000 	nop.w
    115c:	f3af 8000 	nop.w

00001160 <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <VZbandrejectSetQ+0x10>)
    1162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    116a:	f007 bc65 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    116e:	bf00      	nop
    1170:	200008a4 	.word	0x200008a4
    1174:	f3af 8000 	nop.w
    1178:	f3af 8000 	nop.w
    117c:	f3af 8000 	nop.w

00001180 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    1180:	4b03      	ldr	r3, [pc, #12]	; (1190 <LadderLowpassSetQ+0x10>)
    1182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    118a:	f007 bbdd 	b.w	8948 <__tLadderFilter_setQ_veneer>
    118e:	bf00      	nop
    1190:	20000894 	.word	0x20000894
    1194:	f3af 8000 	nop.w
    1198:	f3af 8000 	nop.w
    119c:	f3af 8000 	nop.w

000011a0 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    11a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    11a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    11a8:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    11aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    11ae:	4605      	mov	r5, r0
    11b0:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    11b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11b6:	eeb0 0a67 	vmov.f32	s0, s15
    11ba:	f007 fb41 	bl	8840 <__fasterdbtoa_veneer>
    11be:	4b03      	ldr	r3, [pc, #12]	; (11cc <lowpassSetGain+0x2c>)
    11c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    11c4:	ed84 0a00 	vstr	s0, [r4]
}
    11c8:	bd38      	pop	{r3, r4, r5, pc}
    11ca:	bf00      	nop
    11cc:	200050ac 	.word	0x200050ac
    11d0:	f3af 8000 	nop.w
    11d4:	f3af 8000 	nop.w
    11d8:	f3af 8000 	nop.w
    11dc:	f3af 8000 	nop.w

000011e0 <highpassSetGain>:
    11e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    11e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    11e8:	b538      	push	{r3, r4, r5, lr}
    11ea:	eee0 7a07 	vfma.f32	s15, s0, s14
    11ee:	4605      	mov	r5, r0
    11f0:	460c      	mov	r4, r1
    11f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11f6:	eeb0 0a67 	vmov.f32	s0, s15
    11fa:	f007 fb21 	bl	8840 <__fasterdbtoa_veneer>
    11fe:	4b03      	ldr	r3, [pc, #12]	; (120c <highpassSetGain+0x2c>)
    1200:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1204:	ed84 0a00 	vstr	s0, [r4]
    1208:	bd38      	pop	{r3, r4, r5, pc}
    120a:	bf00      	nop
    120c:	200050ac 	.word	0x200050ac
    1210:	f3af 8000 	nop.w
    1214:	f3af 8000 	nop.w
    1218:	f3af 8000 	nop.w
    121c:	f3af 8000 	nop.w

00001220 <bandpassSetGain>:
    1220:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1224:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1228:	b538      	push	{r3, r4, r5, lr}
    122a:	eee0 7a07 	vfma.f32	s15, s0, s14
    122e:	4605      	mov	r5, r0
    1230:	460c      	mov	r4, r1
    1232:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1236:	eeb0 0a67 	vmov.f32	s0, s15
    123a:	f007 fb01 	bl	8840 <__fasterdbtoa_veneer>
    123e:	4b03      	ldr	r3, [pc, #12]	; (124c <bandpassSetGain+0x2c>)
    1240:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1244:	ed84 0a00 	vstr	s0, [r4]
    1248:	bd38      	pop	{r3, r4, r5, pc}
    124a:	bf00      	nop
    124c:	200050ac 	.word	0x200050ac
    1250:	f3af 8000 	nop.w
    1254:	f3af 8000 	nop.w
    1258:	f3af 8000 	nop.w
    125c:	f3af 8000 	nop.w

00001260 <diodeLowpassSetGain>:
    1260:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1264:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1268:	b538      	push	{r3, r4, r5, lr}
    126a:	eee0 7a07 	vfma.f32	s15, s0, s14
    126e:	4605      	mov	r5, r0
    1270:	460c      	mov	r4, r1
    1272:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1276:	eeb0 0a67 	vmov.f32	s0, s15
    127a:	f007 fae1 	bl	8840 <__fasterdbtoa_veneer>
    127e:	4b03      	ldr	r3, [pc, #12]	; (128c <diodeLowpassSetGain+0x2c>)
    1280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1284:	ed84 0a00 	vstr	s0, [r4]
    1288:	bd38      	pop	{r3, r4, r5, pc}
    128a:	bf00      	nop
    128c:	200050ac 	.word	0x200050ac
    1290:	f3af 8000 	nop.w
    1294:	f3af 8000 	nop.w
    1298:	f3af 8000 	nop.w
    129c:	f3af 8000 	nop.w

000012a0 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12a0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    12a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 12cc <VZpeakSetGain+0x2c>
{
    12a8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    12ae:	4605      	mov	r5, r0
    12b0:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    12b6:	eeb0 0a67 	vmov.f32	s0, s15
    12ba:	f007 fac1 	bl	8840 <__fasterdbtoa_veneer>
    12be:	4804      	ldr	r0, [pc, #16]	; (12d0 <VZpeakSetGain+0x30>)
    12c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    12c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12c8:	f007 ba9a 	b.w	8800 <__tVZFilter_setGain_veneer>
    12cc:	42480000 	.word	0x42480000
    12d0:	200008d4 	.word	0x200008d4
    12d4:	f3af 8000 	nop.w
    12d8:	f3af 8000 	nop.w
    12dc:	f3af 8000 	nop.w

000012e0 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12e0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    12e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 130c <VZlowshelfSetGain+0x2c>
{
    12e8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    12ee:	4605      	mov	r5, r0
    12f0:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    12f6:	eeb0 0a67 	vmov.f32	s0, s15
    12fa:	f007 faa1 	bl	8840 <__fasterdbtoa_veneer>
    12fe:	4804      	ldr	r0, [pc, #16]	; (1310 <VZlowshelfSetGain+0x30>)
    1300:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1308:	f007 ba7a 	b.w	8800 <__tVZFilter_setGain_veneer>
    130c:	42480000 	.word	0x42480000
    1310:	200008c4 	.word	0x200008c4
    1314:	f3af 8000 	nop.w
    1318:	f3af 8000 	nop.w
    131c:	f3af 8000 	nop.w

00001320 <VZhighshelfSetGain>:
    1320:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1324:	ed9f 7a09 	vldr	s14, [pc, #36]	; 134c <VZhighshelfSetGain+0x2c>
    1328:	b538      	push	{r3, r4, r5, lr}
    132a:	eee0 7a07 	vfma.f32	s15, s0, s14
    132e:	4605      	mov	r5, r0
    1330:	460c      	mov	r4, r1
    1332:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1336:	eeb0 0a67 	vmov.f32	s0, s15
    133a:	f007 fa81 	bl	8840 <__fasterdbtoa_veneer>
    133e:	4804      	ldr	r0, [pc, #16]	; (1350 <VZhighshelfSetGain+0x30>)
    1340:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1348:	f007 ba5a 	b.w	8800 <__tVZFilter_setGain_veneer>
    134c:	42480000 	.word	0x42480000
    1350:	200008c4 	.word	0x200008c4
    1354:	f3af 8000 	nop.w
    1358:	f3af 8000 	nop.w
    135c:	f3af 8000 	nop.w

00001360 <VZbandrejectSetGain>:
    1360:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1364:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1368:	b538      	push	{r3, r4, r5, lr}
    136a:	eee0 7a07 	vfma.f32	s15, s0, s14
    136e:	4605      	mov	r5, r0
    1370:	460c      	mov	r4, r1
    1372:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1376:	eeb0 0a67 	vmov.f32	s0, s15
    137a:	f007 fa61 	bl	8840 <__fasterdbtoa_veneer>
    137e:	4b03      	ldr	r3, [pc, #12]	; (138c <VZbandrejectSetGain+0x2c>)
    1380:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1384:	ed84 0a00 	vstr	s0, [r4]
    1388:	bd38      	pop	{r3, r4, r5, pc}
    138a:	bf00      	nop
    138c:	200050ac 	.word	0x200050ac
    1390:	f3af 8000 	nop.w
    1394:	f3af 8000 	nop.w
    1398:	f3af 8000 	nop.w
    139c:	f3af 8000 	nop.w

000013a0 <LadderLowpassSetGain>:
    13a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    13a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    13a8:	b538      	push	{r3, r4, r5, lr}
    13aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    13ae:	4605      	mov	r5, r0
    13b0:	460c      	mov	r4, r1
    13b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    13b6:	eeb0 0a67 	vmov.f32	s0, s15
    13ba:	f007 fa41 	bl	8840 <__fasterdbtoa_veneer>
    13be:	4b03      	ldr	r3, [pc, #12]	; (13cc <LadderLowpassSetGain+0x2c>)
    13c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    13c4:	ed84 0a00 	vstr	s0, [r4]
    13c8:	bd38      	pop	{r3, r4, r5, pc}
    13ca:	bf00      	nop
    13cc:	200050ac 	.word	0x200050ac
    13d0:	f3af 8000 	nop.w
    13d4:	f3af 8000 	nop.w
    13d8:	f3af 8000 	nop.w
    13dc:	f3af 8000 	nop.w

000013e0 <envelope_tick>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}


void __ATTR_ITCMRAM envelope_tick(int string)
{
    13e0:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < NUM_ENV; v++)
	{
		if (envOn[v])
    13e2:	4d1d      	ldr	r5, [pc, #116]	; (1458 <envelope_tick+0x78>)
{
    13e4:	4604      	mov	r4, r0
		if (envOn[v])
    13e6:	782b      	ldrb	r3, [r5, #0]
    13e8:	bb53      	cbnz	r3, 1440 <envelope_tick+0x60>
    13ea:	786b      	ldrb	r3, [r5, #1]
    13ec:	b9e3      	cbnz	r3, 1428 <envelope_tick+0x48>
    13ee:	78ab      	ldrb	r3, [r5, #2]
    13f0:	b973      	cbnz	r3, 1410 <envelope_tick+0x30>
    13f2:	78eb      	ldrb	r3, [r5, #3]
    13f4:	b903      	cbnz	r3, 13f8 <envelope_tick+0x18>
		{
			float value = tADSRT_tickNoInterp(&envs[v][string]);
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
		}
	}
}
    13f6:	bd38      	pop	{r3, r4, r5, pc}
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    13f8:	4b18      	ldr	r3, [pc, #96]	; (145c <envelope_tick+0x7c>)
    13fa:	1da0      	adds	r0, r4, #6
    13fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1400:	f007 fa4a 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    1404:	4816      	ldr	r0, [pc, #88]	; (1460 <envelope_tick+0x80>)
    1406:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    140a:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
}
    140e:	bd38      	pop	{r3, r4, r5, pc}
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    1410:	4b12      	ldr	r3, [pc, #72]	; (145c <envelope_tick+0x7c>)
    1412:	1d20      	adds	r0, r4, #4
    1414:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1418:	f007 fa3e 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    141c:	4b10      	ldr	r3, [pc, #64]	; (1460 <envelope_tick+0x80>)
    141e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1422:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    1426:	e7e4      	b.n	13f2 <envelope_tick+0x12>
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    1428:	4b0c      	ldr	r3, [pc, #48]	; (145c <envelope_tick+0x7c>)
    142a:	1ca0      	adds	r0, r4, #2
    142c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1430:	f007 fa32 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    1434:	4b0a      	ldr	r3, [pc, #40]	; (1460 <envelope_tick+0x80>)
    1436:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    143a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    143e:	e7d6      	b.n	13ee <envelope_tick+0xe>
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    1440:	4806      	ldr	r0, [pc, #24]	; (145c <envelope_tick+0x7c>)
    1442:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1446:	f007 fa27 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <envelope_tick+0x80>)
    144c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1450:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    1454:	e7c9      	b.n	13ea <envelope_tick+0xa>
    1456:	bf00      	nop
    1458:	20005070 	.word	0x20005070
    145c:	20005074 	.word	0x20005074
    1460:	200146b0 	.word	0x200146b0
    1464:	f3af 8000 	nop.w
    1468:	f3af 8000 	nop.w
    146c:	f3af 8000 	nop.w
    1470:	f3af 8000 	nop.w
    1474:	f3af 8000 	nop.w
    1478:	f3af 8000 	nop.w
    147c:	f3af 8000 	nop.w

00001480 <lfo_tick>:


void __ATTR_ITCMRAM lfo_tick(int string)
{
    1480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1484:	4d14      	ldr	r5, [pc, #80]	; (14d8 <lfo_tick+0x58>)
    1486:	b083      	sub	sp, #12
    1488:	4e14      	ldr	r6, [pc, #80]	; (14dc <lfo_tick+0x5c>)
	for (int i = 0; i < NUM_LFOS; i++)
    148a:	2400      	movs	r4, #0
{
    148c:	4607      	mov	r7, r0
	{
		float sample = 0.0f;
    148e:	f04f 0800 	mov.w	r8, #0
    1492:	eb05 0580 	add.w	r5, r5, r0, lsl #2
		if (lfoOn[i])
		{
			lfoShapeTick[i](&sample,i, string);
    1496:	f8df 9048 	ldr.w	r9, [pc, #72]	; 14e0 <lfo_tick+0x60>
		if (lfoOn[i])
    149a:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
    149e:	4621      	mov	r1, r4
    14a0:	463a      	mov	r2, r7
    14a2:	a801      	add	r0, sp, #4
		float sample = 0.0f;
    14a4:	f8cd 8004 	str.w	r8, [sp, #4]
		if (lfoOn[i])
    14a8:	b163      	cbz	r3, 14c4 <lfo_tick+0x44>
			lfoShapeTick[i](&sample,i, string);
    14aa:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
    14ae:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
    14b0:	4798      	blx	r3
	for (int i = 0; i < NUM_LFOS; i++)
    14b2:	3508      	adds	r5, #8
		}
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    14b4:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < NUM_LFOS; i++)
    14b6:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    14b8:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
    14bc:	d1ed      	bne.n	149a <lfo_tick+0x1a>
	}
}
    14be:	b003      	add	sp, #12
    14c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < NUM_LFOS; i++)
    14c4:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    14c6:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    14ca:	3508      	adds	r5, #8
    14cc:	2c04      	cmp	r4, #4
    14ce:	d1e4      	bne.n	149a <lfo_tick+0x1a>
}
    14d0:	b003      	add	sp, #12
    14d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14d6:	bf00      	nop
    14d8:	200146b0 	.word	0x200146b0
    14dc:	20005310 	.word	0x20005310
    14e0:	20005374 	.word	0x20005374
    14e4:	f3af 8000 	nop.w
    14e8:	f3af 8000 	nop.w
    14ec:	f3af 8000 	nop.w
    14f0:	f3af 8000 	nop.w
    14f4:	f3af 8000 	nop.w
    14f8:	f3af 8000 	nop.w
    14fc:	f3af 8000 	nop.w

00001500 <setEnvelopeAttack>:


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
    1500:	eddf 7a05 	vldr	s15, [pc, #20]	; 1518 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    1504:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1508:	4b04      	ldr	r3, [pc, #16]	; (151c <setEnvelopeAttack+0x1c>)
    150a:	ee30 0a27 	vadd.f32	s0, s0, s15
    150e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1512:	f007 ba15 	b.w	8940 <__tADSRT_setAttack_veneer>
    1516:	bf00      	nop
    1518:	3c23d70a 	.word	0x3c23d70a
    151c:	20005074 	.word	0x20005074

00001520 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
    1520:	eddf 7a05 	vldr	s15, [pc, #20]	; 1538 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    1524:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1528:	4b04      	ldr	r3, [pc, #16]	; (153c <setEnvelopeDecay+0x1c>)
    152a:	ee30 0a27 	vadd.f32	s0, s0, s15
    152e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1532:	f007 b8e5 	b.w	8700 <__tADSRT_setDecay_veneer>
    1536:	bf00      	nop
    1538:	3c23d70a 	.word	0x3c23d70a
    153c:	20005074 	.word	0x20005074

00001540 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
    1540:	4b03      	ldr	r3, [pc, #12]	; (1550 <setEnvelopeSustain+0x10>)
    1542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1546:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    154a:	f007 b9a1 	b.w	8890 <__tADSRT_setSustain_veneer>
    154e:	bf00      	nop
    1550:	20005074 	.word	0x20005074
    1554:	f3af 8000 	nop.w
    1558:	f3af 8000 	nop.w
    155c:	f3af 8000 	nop.w

00001560 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
    1560:	eddf 7a05 	vldr	s15, [pc, #20]	; 1578 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    1564:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <setEnvelopeRelease+0x1c>)
    156a:	ee30 0a27 	vadd.f32	s0, s0, s15
    156e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1572:	f007 b91d 	b.w	87b0 <__tADSRT_setRelease_veneer>
    1576:	bf00      	nop
    1578:	3c23d70a 	.word	0x3c23d70a
    157c:	20005074 	.word	0x20005074

00001580 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    1580:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1584:	eddf 6a08 	vldr	s13, [pc, #32]	; 15a8 <setEnvelopeLeak+0x28>
    1588:	ed9f 7a08 	vldr	s14, [pc, #32]	; 15ac <setEnvelopeLeak+0x2c>
    158c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1590:	4b07      	ldr	r3, [pc, #28]	; (15b0 <setEnvelopeLeak+0x30>)
    1592:	ee77 7ac0 	vsub.f32	s15, s15, s0
    1596:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    159a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    159e:	eeb0 0a47 	vmov.f32	s0, s14
    15a2:	f007 ba01 	b.w	89a8 <__tADSRT_setLeakFactor_veneer>
    15a6:	bf00      	nop
    15a8:	3851b717 	.word	0x3851b717
    15ac:	3f7ffcb9 	.word	0x3f7ffcb9
    15b0:	20005074 	.word	0x20005074
    15b4:	f3af 8000 	nop.w
    15b8:	f3af 8000 	nop.w
    15bc:	f3af 8000 	nop.w

000015c0 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
    15c0:	4b02      	ldr	r3, [pc, #8]	; (15cc <setAmp+0xc>)
    15c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    15c6:	ed81 0a00 	vstr	s0, [r1]
}
    15ca:	4770      	bx	lr
    15cc:	20000a04 	.word	0x20000a04
    15d0:	f3af 8000 	nop.w
    15d4:	f3af 8000 	nop.w
    15d8:	f3af 8000 	nop.w
    15dc:	f3af 8000 	nop.w

000015e0 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
    15e0:	4b02      	ldr	r3, [pc, #8]	; (15ec <setMaster+0xc>)
    15e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    15e6:	ed81 0a00 	vstr	s0, [r1]
}
    15ea:	4770      	bx	lr
    15ec:	200050cc 	.word	0x200050cc
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
    1600:	4b01      	ldr	r3, [pc, #4]	; (1608 <setTranspose+0x8>)
    1602:	ed83 0a00 	vstr	s0, [r3]
}
    1606:	4770      	bx	lr
    1608:	200148d0 	.word	0x200148d0
    160c:	f3af 8000 	nop.w
    1610:	f3af 8000 	nop.w
    1614:	f3af 8000 	nop.w
    1618:	f3af 8000 	nop.w
    161c:	f3af 8000 	nop.w

00001620 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    1620:	eddf 7a03 	vldr	s15, [pc, #12]	; 1630 <setPitchBendRange+0x10>
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <setPitchBendRange+0x14>)
    1626:	ee20 0a27 	vmul.f32	s0, s0, s15
    162a:	ed83 0a00 	vstr	s0, [r3]
}
    162e:	4770      	bx	lr
    1630:	39000200 	.word	0x39000200
    1634:	20000000 	.word	0x20000000
    1638:	f3af 8000 	nop.w
    163c:	f3af 8000 	nop.w

00001640 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1640:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1644:	eddf 0a0b 	vldr	s1, [pc, #44]	; 1674 <setFinalLowpass+0x34>
{
    1648:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    164c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 1678 <setFinalLowpass+0x38>
    1650:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 167c <setFinalLowpass+0x3c>
    1654:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
    1658:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    165a:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
    165e:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1660:	f005 fc8e 	bl	6f80 <LEAF_clip>
    1664:	4806      	ldr	r0, [pc, #24]	; (1680 <setFinalLowpass+0x40>)
    1666:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    166e:	f007 b937 	b.w	88e0 <__tSVF_setFreqFast_veneer>
    1672:	bf00      	nop
    1674:	420fb824 	.word	0x420fb824
    1678:	457ff000 	.word	0x457ff000
    167c:	00000000 	.word	0x00000000
    1680:	200050c4 	.word	0x200050c4
    1684:	f3af 8000 	nop.w
    1688:	f3af 8000 	nop.w
    168c:	f3af 8000 	nop.w
    1690:	f3af 8000 	nop.w
    1694:	f3af 8000 	nop.w
    1698:	f3af 8000 	nop.w
    169c:	f3af 8000 	nop.w

000016a0 <tickMappings>:


void __ATTR_ITCMRAM tickMappings(void)
{
    16a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
	for (int i = 0; i < numMappings; i++)
    16a4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 1804 <tickMappings+0x164>
	interruptChecker = 0;
    16a8:	f04f 0b00 	mov.w	fp, #0
    16ac:	4b51      	ldr	r3, [pc, #324]	; (17f4 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    16ae:	f899 2000 	ldrb.w	r2, [r9]
{
    16b2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    16b6:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    16ba:	2a00      	cmp	r2, #0
    16bc:	f000 8087 	beq.w	17ce <tickMappings+0x12e>
    16c0:	4c4d      	ldr	r4, [pc, #308]	; (17f8 <tickMappings+0x158>)
	{
		if (mappings[i].destNumber != 255)
		{
			for (int v = 0; v < numStringsThisBoard; v++)
    16c2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1808 <tickMappings+0x168>
    16c6:	e004      	b.n	16d2 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    16c8:	f10b 0b01 	add.w	fp, fp, #1
    16cc:	344c      	adds	r4, #76	; 0x4c
    16ce:	455a      	cmp	r2, fp
    16d0:	dd7d      	ble.n	17ce <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    16d2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    16d6:	2bff      	cmp	r3, #255	; 0xff
    16d8:	d0f6      	beq.n	16c8 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    16da:	f898 3000 	ldrb.w	r3, [r8]
    16de:	2b00      	cmp	r3, #0
    16e0:	d0f2      	beq.n	16c8 <tickMappings+0x28>
    16e2:	4b46      	ldr	r3, [pc, #280]	; (17fc <tickMappings+0x15c>)
    16e4:	4626      	mov	r6, r4
    16e6:	2500      	movs	r5, #0
    16e8:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
			{
				float unsmoothedValue = 0.0f;
				float smoothedValue = 0.0f;
				for (int j = 0; j < 3; j++)
				{
					if (mappings[i].hookActive[j])
    16ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    16f0:	2b00      	cmp	r3, #0
    16f2:	d070      	beq.n	17d6 <tickMappings+0x136>
					{
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    16f4:	6832      	ldr	r2, [r6, #0]
    16f6:	69f3      	ldr	r3, [r6, #28]
    16f8:	ed92 8a00 	vldr	s16, [r2]
    16fc:	ed93 7a00 	vldr	s14, [r3]
    1700:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    1704:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    1708:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    170a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    170e:	2900      	cmp	r1, #0
    1710:	d069      	beq.n	17e6 <tickMappings+0x146>
						{
							smoothedValue += sum;
    1712:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    1716:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 1800 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    171a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    171e:	b183      	cbz	r3, 1742 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1720:	68b2      	ldr	r2, [r6, #8]
    1722:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1724:	ed92 7a00 	vldr	s14, [r2]
    1728:	ed93 6a00 	vldr	s12, [r3]
    172c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    1730:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    1734:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1736:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    173a:	2900      	cmp	r1, #0
    173c:	d156      	bne.n	17ec <tickMappings+0x14c>
						}
						else
						{
							unsmoothedValue += sum;
    173e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    1742:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    1746:	b183      	cbz	r3, 176a <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1748:	6932      	ldr	r2, [r6, #16]
    174a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    174c:	ed92 7a00 	vldr	s14, [r2]
    1750:	ed93 6a00 	vldr	s12, [r3]
    1754:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    1758:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    175c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    175e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    1762:	2900      	cmp	r1, #0
    1764:	d13c      	bne.n	17e0 <tickMappings+0x140>
							unsmoothedValue += sum;
    1766:	ee38 8a07 	vadd.f32	s16, s16, s14
						}
					}
				}
				//sources are now summed - let's add the initial value
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    176a:	f854 3c04 	ldr.w	r3, [r4, #-4]

				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    176e:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    1770:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    1772:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1776:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    177a:	ee37 0a80 	vadd.f32	s0, s15, s0
    177e:	f005 fb6f 	bl	6e60 <tExpSmooth_setDest>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    1782:	4638      	mov	r0, r7
    1784:	f005 fb5c 	bl	6e40 <tExpSmooth_tick>
				float finalVal = unsmoothedValue + smoothedValue;

				//now scale the value with the correct scaling function
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    1788:	f854 ac04 	ldr.w	sl, [r4, #-4]
    178c:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    1790:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    1792:	f8da 3010 	ldr.w	r3, [sl, #16]
    1796:	4798      	blx	r3
    1798:	1cab      	adds	r3, r5, #2

				//and pop that value where it belongs by setting the actual parameter
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    179a:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    179c:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    179e:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    17a2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    17a6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    17aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    17ae:	6942      	ldr	r2, [r0, #20]
    17b0:	7e00      	ldrb	r0, [r0, #24]
    17b2:	ed93 0a00 	vldr	s0, [r3]
    17b6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    17b8:	f898 3000 	ldrb.w	r3, [r8]
    17bc:	42ab      	cmp	r3, r5
    17be:	dc95      	bgt.n	16ec <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    17c0:	f899 2000 	ldrb.w	r2, [r9]
    17c4:	f10b 0b01 	add.w	fp, fp, #1
    17c8:	344c      	adds	r4, #76	; 0x4c
    17ca:	455a      	cmp	r2, fp
    17cc:	dc81      	bgt.n	16d2 <tickMappings+0x32>
			}
		}
	}


}
    17ce:	ecbd 8b02 	vpop	{d8}
    17d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    17d6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1800 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    17da:	eeb0 8a67 	vmov.f32	s16, s15
    17de:	e79c      	b.n	171a <tickMappings+0x7a>
							smoothedValue += sum;
    17e0:	ee77 7a87 	vadd.f32	s15, s15, s14
    17e4:	e7c1      	b.n	176a <tickMappings+0xca>
				float smoothedValue = 0.0f;
    17e6:	eddf 7a06 	vldr	s15, [pc, #24]	; 1800 <tickMappings+0x160>
    17ea:	e796      	b.n	171a <tickMappings+0x7a>
							smoothedValue += sum;
    17ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    17f0:	e7a7      	b.n	1742 <tickMappings+0xa2>
    17f2:	bf00      	nop
    17f4:	20016cc8 	.word	0x20016cc8
    17f8:	20018d08 	.word	0x20018d08
    17fc:	20005400 	.word	0x20005400
    1800:	00000000 	.word	0x00000000
    1804:	20019948 	.word	0x20019948
    1808:	2000000d 	.word	0x2000000d
    180c:	f3af 8000 	nop.w
    1810:	f3af 8000 	nop.w
    1814:	f3af 8000 	nop.w
    1818:	f3af 8000 	nop.w
    181c:	f3af 8000 	nop.w

00001820 <audioTickString>:

	return masterSample * audioMasterLevel * 0.98f;
}

float __ATTR_ITCMRAM audioTickString(void)
{
    1820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    1824:	f8df 8208 	ldr.w	r8, [pc, #520]	; 1a30 <audioTickString+0x210>
    1828:	4e71      	ldr	r6, [pc, #452]	; (19f0 <audioTickString+0x1d0>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    182a:	4872      	ldr	r0, [pc, #456]	; (19f4 <audioTickString+0x1d4>)
    182c:	4d72      	ldr	r5, [pc, #456]	; (19f8 <audioTickString+0x1d8>)
    182e:	4634      	mov	r4, r6
    1830:	f106 0930 	add.w	r9, r6, #48	; 0x30
{
    1834:	ed2d 8b0c 	vpush	{d8-d13}
    1838:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
    183a:	f898 3000 	ldrb.w	r3, [r8]
{
    183e:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    1840:	009b      	lsls	r3, r3, #2
    1842:	3307      	adds	r3, #7
    1844:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    1848:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    184c:	f005 faf8 	bl	6e40 <tExpSmooth_tick>
    1850:	eef0 ba40 	vmov.f32	s23, s0
	float note[numStringsThisBoard];
    1854:	46ea      	mov	sl, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1856:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    1858:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    185a:	f005 faf1 	bl	6e40 <tExpSmooth_tick>
    185e:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    1862:	454c      	cmp	r4, r9
    1864:	d1f7      	bne.n	1856 <audioTickString+0x36>
	}
	pluckPos = knobScaled[9];
    1866:	4a65      	ldr	r2, [pc, #404]	; (19fc <audioTickString+0x1dc>)
    1868:	6a71      	ldr	r1, [r6, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
    186a:	f898 3000 	ldrb.w	r3, [r8]
	float temp = 0.0f;
    186e:	ed9f 9a64 	vldr	s18, [pc, #400]	; 1a00 <audioTickString+0x1e0>
	pluckPos = knobScaled[9];
    1872:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    1874:	2b00      	cmp	r3, #0
    1876:	f000 8084 	beq.w	1982 <audioTickString+0x162>
		float finalFreq = mtof(note[i]);
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    187a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    187e:	4654      	mov	r4, sl
		if (note[i] < 0.0f)
    1880:	eeb0 ba49 	vmov.f32	s22, s18
    1884:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 1a34 <audioTickString+0x214>
    1888:	4d5e      	ldr	r5, [pc, #376]	; (1a04 <audioTickString+0x1e4>)
	for (int i = 0; i < numStringsThisBoard; i++)
    188a:	f04f 0a00 	mov.w	sl, #0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    188e:	eddf ca5e 	vldr	s25, [pc, #376]	; 1a08 <audioTickString+0x1e8>
    1892:	ed9f ca5e 	vldr	s24, [pc, #376]	; 1a0c <audioTickString+0x1ec>
		float decay = 0.1f;
    1896:	eddf 9a5e 	vldr	s19, [pc, #376]	; 1a10 <audioTickString+0x1f0>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    189a:	ed9f da5e 	vldr	s26, [pc, #376]	; 1a14 <audioTickString+0x1f4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    189e:	4b5e      	ldr	r3, [pc, #376]	; (1a18 <audioTickString+0x1f8>)
    18a0:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
    18a4:	ecb9 0a01 	vldmia	r9!, {s0}
    18a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    18ac:	edd2 7a00 	vldr	s15, [r2]
    18b0:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
    18b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    18b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    18bc:	f100 8093 	bmi.w	19e6 <audioTickString+0x1c6>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    18c0:	ed84 0a00 	vstr	s0, [r4]
		float finalFreq = mtof(note[i]);
    18c4:	f006 ff60 	bl	8788 <__mtof_veneer>
    18c8:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    18cc:	eeb0 0a4c 	vmov.f32	s0, s24
    18d0:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
		float decay = 0.1f;
    18d4:	eeb0 aa69 	vmov.f32	s20, s19
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    18d8:	eea7 0aac 	vfma.f32	s0, s15, s25
    18dc:	f006 ffe4 	bl	88a8 <__faster_mtof_veneer>
		if (lsDecay[i])
    18e0:	f815 2b01 	ldrb.w	r2, [r5], #1
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    18e4:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
    18e8:	b12a      	cbz	r2, 18f6 <audioTickString+0xd6>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    18ea:	eeb0 aa6a 	vmov.f32	s20, s21
    18ee:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    18f2:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    18f6:	4b49      	ldr	r3, [pc, #292]	; (1a1c <audioTickString+0x1fc>)
	for (int i = 0; i < numStringsThisBoard; i++)
    18f8:	f10a 0a01 	add.w	sl, sl, #1
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    18fc:	ed96 0a08 	vldr	s0, [r6, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    1900:	3404      	adds	r4, #4
    1902:	eb03 000b 	add.w	r0, r3, fp
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    1906:	6078      	str	r0, [r7, #4]
    1908:	f006 ffee 	bl	88e8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    190c:	eeb0 0a4a 	vmov.f32	s0, s20
    1910:	6878      	ldr	r0, [r7, #4]
    1912:	f006 ff1d 	bl	8750 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    1916:	eeb0 0a68 	vmov.f32	s0, s17
    191a:	6878      	ldr	r0, [r7, #4]
    191c:	f007 f82c 	bl	8978 <__tSimpleLivingString3_setDampFreq_veneer>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
    1920:	ed96 0a00 	vldr	s0, [r6]
    1924:	6878      	ldr	r0, [r7, #4]
    1926:	f006 fff3 	bl	8910 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
    192a:	ed96 0a01 	vldr	s0, [r6, #4]
    192e:	6878      	ldr	r0, [r7, #4]
    1930:	ee20 0a29 	vmul.f32	s0, s0, s19
    1934:	f007 f834 	bl	89a0 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
    1938:	ed96 0a02 	vldr	s0, [r6, #8]
    193c:	6878      	ldr	r0, [r7, #4]
    193e:	ee20 0a29 	vmul.f32	s0, s0, s19
    1942:	f006 fed5 	bl	86f0 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
    1946:	edd6 7a03 	vldr	s15, [r6, #12]
    194a:	6878      	ldr	r0, [r7, #4]
    194c:	eef4 7aea 	vcmpe.f32	s15, s21
    1950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1954:	bfcc      	ite	gt
    1956:	2101      	movgt	r1, #1
    1958:	2100      	movle	r1, #0
    195a:	f006 fec1 	bl	86e0 <__tSimpleLivingString3_setLevMode_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    195e:	eeb0 0a48 	vmov.f32	s0, s16
    1962:	6878      	ldr	r0, [r7, #4]
    1964:	f006 ff88 	bl	8878 <__tSimpleLivingString3_setFreq_veneer>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
    1968:	eeb0 0a4b 	vmov.f32	s0, s22
    196c:	6878      	ldr	r0, [r7, #4]
    196e:	f006 ffbf 	bl	88f0 <__tSimpleLivingString3_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1972:	f898 2000 	ldrb.w	r2, [r8]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
    1976:	ee39 9a00 	vadd.f32	s18, s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    197a:	4552      	cmp	r2, sl
    197c:	dc8f      	bgt.n	189e <audioTickString+0x7e>
    197e:	ee29 9a2a 	vmul.f32	s18, s18, s21
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    1982:	ed9f 0a27 	vldr	s0, [pc, #156]	; 1a20 <audioTickString+0x200>
    1986:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a24 <audioTickString+0x204>
    198a:	eef0 0a40 	vmov.f32	s1, s0
    198e:	ed9f 1a26 	vldr	s2, [pc, #152]	; 1a28 <audioTickString+0x208>
    1992:	eeeb 0aa7 	vfma.f32	s1, s23, s15
    1996:	f005 faf3 	bl	6f80 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    199a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    199e:	4a23      	ldr	r2, [pc, #140]	; (1a2c <audioTickString+0x20c>)
	float omAlpha = 1.0f - alpha;
    19a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol * 0.5f;

	return temp;
}
    19a4:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
    19a6:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    19aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
    19ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    19b2:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    19b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    19b8:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    19bc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    19c0:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    19c4:	ed93 7a00 	vldr	s14, [r3]
    19c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    19cc:	edd2 6a00 	vldr	s13, [r2]
    19d0:	ee20 0a26 	vmul.f32	s0, s0, s13
    19d4:	eea7 0a27 	vfma.f32	s0, s14, s15
}
    19d8:	ee20 0a09 	vmul.f32	s0, s0, s18
    19dc:	46bd      	mov	sp, r7
    19de:	ecbd 8b0c 	vpop	{d8-d13}
    19e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
    19e6:	eeb0 0a4b 	vmov.f32	s0, s22
    19ea:	ed84 ba00 	vstr	s22, [r4]
    19ee:	e769      	b.n	18c4 <audioTickString+0xa4>
    19f0:	20005218 	.word	0x20005218
    19f4:	200148fc 	.word	0x200148fc
    19f8:	2000528c 	.word	0x2000528c
    19fc:	20000148 	.word	0x20000148
    1a00:	00000000 	.word	0x00000000
    1a04:	200053fc 	.word	0x200053fc
    1a08:	430c0000 	.word	0x430c0000
    1a0c:	42700000 	.word	0x42700000
    1a10:	3dcccccd 	.word	0x3dcccccd
    1a14:	44480000 	.word	0x44480000
    1a18:	20014840 	.word	0x20014840
    1a1c:	200053e4 	.word	0x200053e4
    1a20:	423c0000 	.word	0x423c0000
    1a24:	42a00000 	.word	0x42a00000
    1a28:	42fe0000 	.word	0x42fe0000
    1a2c:	200004d4 	.word	0x200004d4
    1a30:	2000000d 	.word	0x2000000d
    1a34:	20014848 	.word	0x20014848
    1a38:	f3af 8000 	nop.w
    1a3c:	f3af 8000 	nop.w

00001a40 <audioTickString2>:



float  __ATTR_ITCMRAM audioTickString2(void)
{
    1a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    1a44:	4b9f      	ldr	r3, [pc, #636]	; (1cc4 <audioTickString2+0x284>)
    1a46:	4da0      	ldr	r5, [pc, #640]	; (1cc8 <audioTickString2+0x288>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1a48:	48a0      	ldr	r0, [pc, #640]	; (1ccc <audioTickString2+0x28c>)
    1a4a:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 1d1c <audioTickString2+0x2dc>
    1a4e:	462c      	mov	r4, r5
    1a50:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
    1a54:	ed2d 8b08 	vpush	{d8-d11}
    1a58:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
    1a5a:	781b      	ldrb	r3, [r3, #0]
{
    1a5c:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    1a5e:	009b      	lsls	r3, r3, #2
    1a60:	3307      	adds	r3, #7
    1a62:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    1a66:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1a6a:	f005 f9e9 	bl	6e40 <tExpSmooth_tick>
    1a6e:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
    1a72:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1a74:	4648      	mov	r0, r9
	for (int i = 0; i < 12; i++)
    1a76:	f109 0904 	add.w	r9, r9, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1a7a:	f005 f9e1 	bl	6e40 <tExpSmooth_tick>
    1a7e:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    1a82:	4554      	cmp	r4, sl
    1a84:	d1f6      	bne.n	1a74 <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
    1a86:	4b8f      	ldr	r3, [pc, #572]	; (1cc4 <audioTickString2+0x284>)
    1a88:	781b      	ldrb	r3, [r3, #0]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	f000 8116 	beq.w	1cbc <audioTickString2+0x27c>
    1a90:	4b8f      	ldr	r3, [pc, #572]	; (1cd0 <audioTickString2+0x290>)
    1a92:	f04f 0800 	mov.w	r8, #0
    1a96:	4c8f      	ldr	r4, [pc, #572]	; (1cd4 <audioTickString2+0x294>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
    1a98:	eddf 8a8f 	vldr	s17, [pc, #572]	; 1cd8 <audioTickString2+0x298>
		if (note[i] < 0.0f)
    1a9c:	ed9f aa8f 	vldr	s20, [pc, #572]	; 1cdc <audioTickString2+0x29c>
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1aa0:	f8df b27c 	ldr.w	fp, [pc, #636]	; 1d20 <audioTickString2+0x2e0>
    1aa4:	f8df a27c 	ldr.w	sl, [pc, #636]	; 1d24 <audioTickString2+0x2e4>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1aa8:	f8df 927c 	ldr.w	r9, [pc, #636]	; 1d28 <audioTickString2+0x2e8>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1aac:	eddf 9a8c 	vldr	s19, [pc, #560]	; 1ce0 <audioTickString2+0x2a0>
    1ab0:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1ab2:	687b      	ldr	r3, [r7, #4]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1ab4:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
    1ab6:	eddf aa8b 	vldr	s21, [pc, #556]	; 1ce4 <audioTickString2+0x2a4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1aba:	ecb3 7a01 	vldmia	r3!, {s14}
    1abe:	607b      	str	r3, [r7, #4]
    1ac0:	4b89      	ldr	r3, [pc, #548]	; (1ce8 <audioTickString2+0x2a8>)
    1ac2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    1ac6:	edd3 7a00 	vldr	s15, [r3]
    1aca:	ea4f 0388 	mov.w	r3, r8, lsl #2
	for (int i = 0; i < numStringsThisBoard; i++)
    1ace:	f108 0801 	add.w	r8, r8, #1
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
		if (note[i] < 0.0f)
    1ad6:	603b      	str	r3, [r7, #0]
    1ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1ae0:	bf54      	ite	pl
    1ae2:	edc6 7a00 	vstrpl	s15, [r6]
			note[i] = 0.0f;
    1ae6:	ed86 aa00 	vstrmi	s20, [r6]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1aea:	f006 ff85 	bl	89f8 <__tNoise_tick_veneer>
    1aee:	4650      	mov	r0, sl
    1af0:	f006 febe 	bl	8870 <__tVZFilter_tickEfficient_veneer>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1af4:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1af6:	eeb0 ba40 	vmov.f32	s22, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1afa:	f006 ff7d 	bl	89f8 <__tNoise_tick_veneer>
    1afe:	4648      	mov	r0, r9
    1b00:	f006 feb6 	bl	8870 <__tVZFilter_tickEfficient_veneer>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1b04:	4a79      	ldr	r2, [pc, #484]	; (1cec <audioTickString2+0x2ac>)
    1b06:	683b      	ldr	r3, [r7, #0]
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1b08:	ee3b ba00 	vadd.f32	s22, s22, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1b0c:	18d0      	adds	r0, r2, r3
    1b0e:	f006 ff4f 	bl	89b0 <__tADSRT_tick_veneer>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1b12:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1b14:	eeb0 8a40 	vmov.f32	s16, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1b18:	eeb0 0a69 	vmov.f32	s0, s19
    1b1c:	f006 ff08 	bl	8930 <__tLivingString2_setPickupPos_veneer>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
    1b20:	ed95 0a05 	vldr	s0, [r5, #20]
    1b24:	ee20 0a28 	vmul.f32	s0, s0, s17
    1b28:	f006 febe 	bl	88a8 <__faster_mtof_veneer>
    1b2c:	4650      	mov	r0, sl
    1b2e:	f006 ff43 	bl	89b8 <__tVZFilter_setFreq_veneer>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
    1b32:	ed95 0a06 	vldr	s0, [r5, #24]
    1b36:	ee20 0a28 	vmul.f32	s0, s0, s17
    1b3a:	f006 feb5 	bl	88a8 <__faster_mtof_veneer>
    1b3e:	4648      	mov	r0, r9
    1b40:	f006 ff3a 	bl	89b8 <__tVZFilter_setFreq_veneer>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
    1b44:	ed95 0a07 	vldr	s0, [r5, #28]
    1b48:	4620      	mov	r0, r4
    1b4a:	ee20 0a2a 	vmul.f32	s0, s0, s21
    1b4e:	f006 fe3f 	bl	87d0 <__tLivingString2_setLevSmoothFactor_veneer>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
    1b52:	ed95 0a08 	vldr	s0, [r5, #32]
    1b56:	4620      	mov	r0, r4
    1b58:	ee20 0a2a 	vmul.f32	s0, s0, s21
    1b5c:	f006 feb0 	bl	88c0 <__tLivingString2_setLevStrength_veneer>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
    1b60:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
    1b64:	4620      	mov	r0, r4
    1b66:	f006 fe53 	bl	8810 <__tLivingString2_setBrightness_veneer>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
    1b6a:	ed95 0a02 	vldr	s0, [r5, #8]
    1b6e:	4620      	mov	r0, r4
    1b70:	f006 fea2 	bl	88b8 <__tLivingString2_setPickPos_veneer>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
    1b74:	eeb0 0a6a 	vmov.f32	s0, s21
    1b78:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
    1b7c:	4620      	mov	r0, r4
    1b7e:	eddf 7a5c 	vldr	s15, [pc, #368]	; 1cf0 <audioTickString2+0x2b0>
    1b82:	eea7 0a27 	vfma.f32	s0, s14, s15
    1b86:	f006 fef3 	bl	8970 <__tLivingString2_setPrepPos_veneer>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
    1b8a:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 1cf4 <audioTickString2+0x2b4>
    1b8e:	ecf6 0a01 	vldmia	r6!, {s1}
    1b92:	ed9f 0a59 	vldr	s0, [pc, #356]	; 1cf8 <audioTickString2+0x2b8>
    1b96:	f005 f9f3 	bl	6f80 <LEAF_clip>
    1b9a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 1cfc <audioTickString2+0x2bc>
    1b9e:	eddf 7a58 	vldr	s15, [pc, #352]	; 1d00 <audioTickString2+0x2c0>

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);

		tLivingString2_setFreq(&strings[i], finalFreq);
    1ba2:	4620      	mov	r0, r4
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1ba4:	4a57      	ldr	r2, [pc, #348]	; (1d04 <audioTickString2+0x2c4>)
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
    1ba6:	eee0 7a07 	vfma.f32	s15, s0, s14
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		int tempIndexI = (int)tempIndexF;
    1bae:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
    1bb6:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
    1bba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1bbe:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1bc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
    1bc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1bc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1bcc:	f3c1 010e 	ubfx	r1, r1, #0, #15
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1bd0:	ee37 7a26 	vadd.f32	s14, s14, s13
    1bd4:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1bd8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1bdc:	ed93 0a00 	vldr	s0, [r3]
    1be0:	ee27 0a80 	vmul.f32	s0, s15, s0
		tLivingString2_setFreq(&strings[i], finalFreq);
    1be4:	eea7 0a26 	vfma.f32	s0, s14, s13
    1be8:	f006 fe02 	bl	87f0 <__tLivingString2_setFreq_veneer>


		if (knobScaled[4] > 0.5f)
    1bec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1bf0:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
    1bf4:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
    1bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c00:	dd4d      	ble.n	1c9e <audioTickString2+0x25e>
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
    1c02:	4620      	mov	r0, r4
    1c04:	ee28 0a00 	vmul.f32	s0, s16, s0
    1c08:	f006 ff0e 	bl	8a28 <__tLivingString2_setPrepIndex_veneer>
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
		}

		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1c0c:	4620      	mov	r0, r4
    1c0e:	ee2b 0a08 	vmul.f32	s0, s22, s16
	for (int i = 0; i < numStringsThisBoard; i++)
    1c12:	3404      	adds	r4, #4
		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1c14:	f006 fe60 	bl	88d8 <__tLivingString2_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1c18:	4b2a      	ldr	r3, [pc, #168]	; (1cc4 <audioTickString2+0x284>)
    1c1a:	781b      	ldrb	r3, [r3, #0]
    1c1c:	4598      	cmp	r8, r3
    1c1e:	f6ff af48 	blt.w	1ab2 <audioTickString2+0x72>
    1c22:	ed9f 8a39 	vldr	s16, [pc, #228]	; 1d08 <audioTickString2+0x2c8>
    1c26:	ee20 8a08 	vmul.f32	s16, s0, s16

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    1c2a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1d0c <audioTickString2+0x2cc>
    1c2e:	eddf 7a38 	vldr	s15, [pc, #224]	; 1d10 <audioTickString2+0x2d0>
    1c32:	eef0 0a40 	vmov.f32	s1, s0
    1c36:	ed9f 1a37 	vldr	s2, [pc, #220]	; 1d14 <audioTickString2+0x2d4>
    1c3a:	eee9 0a27 	vfma.f32	s1, s18, s15
    1c3e:	f005 f99f 	bl	6f80 <LEAF_clip>
    1c42:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
    1c46:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1c4a:	4a33      	ldr	r2, [pc, #204]	; (1d18 <audioTickString2+0x2d8>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * 0.5f;

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    1c4c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
    1c50:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    1c54:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
    1c58:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1c5c:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    1c5e:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1c62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    1c66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1c6a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1c6e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    1c72:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1c76:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
    1c7a:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1c7e:	edd3 6a00 	vldr	s13, [r3]
    1c82:	ee60 0aa7 	vmul.f32	s1, s1, s15
    1c86:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    1c8a:	ee60 0a88 	vmul.f32	s1, s1, s16
    1c8e:	f005 f977 	bl	6f80 <LEAF_clip>
}
    1c92:	370c      	adds	r7, #12
    1c94:	46bd      	mov	sp, r7
    1c96:	ecbd 8b08 	vpop	{d8-d11}
    1c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
    1c9e:	4620      	mov	r0, r4
    1ca0:	f006 fec2 	bl	8a28 <__tLivingString2_setPrepIndex_veneer>
		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1ca4:	4620      	mov	r0, r4
    1ca6:	ee2b 0a08 	vmul.f32	s0, s22, s16
	for (int i = 0; i < numStringsThisBoard; i++)
    1caa:	3404      	adds	r4, #4
		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1cac:	f006 fe14 	bl	88d8 <__tLivingString2_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1cb0:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <audioTickString2+0x284>)
    1cb2:	781b      	ldrb	r3, [r3, #0]
    1cb4:	4543      	cmp	r3, r8
    1cb6:	f73f aefc 	bgt.w	1ab2 <audioTickString2+0x72>
    1cba:	e7b2      	b.n	1c22 <audioTickString2+0x1e2>
    1cbc:	ed9f 8a07 	vldr	s16, [pc, #28]	; 1cdc <audioTickString2+0x29c>
    1cc0:	e7b3      	b.n	1c2a <audioTickString2+0x1ea>
    1cc2:	bf00      	nop
    1cc4:	2000000d 	.word	0x2000000d
    1cc8:	20005218 	.word	0x20005218
    1ccc:	200148fc 	.word	0x200148fc
    1cd0:	20014848 	.word	0x20014848
    1cd4:	20014860 	.word	0x20014860
    1cd8:	43000000 	.word	0x43000000
    1cdc:	00000000 	.word	0x00000000
    1ce0:	3f7ff972 	.word	0x3f7ff972
    1ce4:	3dcccccd 	.word	0x3dcccccd
    1ce8:	20014840 	.word	0x20014840
    1cec:	20005094 	.word	0x20005094
    1cf0:	3f4ccccd 	.word	0x3f4ccccd
    1cf4:	43480000 	.word	0x43480000
    1cf8:	c3480000 	.word	0xc3480000
    1cfc:	42c80000 	.word	0x42c80000
    1d00:	46800000 	.word	0x46800000
    1d04:	30012000 	.word	0x30012000
    1d08:	3efae148 	.word	0x3efae148
    1d0c:	423c0000 	.word	0x423c0000
    1d10:	42a00000 	.word	0x42a00000
    1d14:	42fe0000 	.word	0x42fe0000
    1d18:	200004d4 	.word	0x200004d4
    1d1c:	2000528c 	.word	0x2000528c
    1d20:	20005544 	.word	0x20005544
    1d24:	2000555c 	.word	0x2000555c
    1d28:	20005560 	.word	0x20005560
    1d2c:	f3af 8000 	nop.w
    1d30:	f3af 8000 	nop.w
    1d34:	f3af 8000 	nop.w
    1d38:	f3af 8000 	nop.w
    1d3c:	f3af 8000 	nop.w

00001d40 <lfoSawSquareTick>:



void __ATTR_ITCMRAM lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    1d40:	4b05      	ldr	r3, [pc, #20]	; (1d58 <lfoSawSquareTick+0x18>)
    1d42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1d46:	b510      	push	{r4, lr}
    1d48:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    1d4a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1d4e:	f006 fd37 	bl	87c0 <__tSawSquareLFO_tick_veneer>
    1d52:	ed84 0a00 	vstr	s0, [r4]
}
    1d56:	bd10      	pop	{r4, pc}
    1d58:	20005354 	.word	0x20005354
    1d5c:	f3af 8000 	nop.w

00001d60 <lfoSineTriTick>:

void __ATTR_ITCMRAM lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    1d60:	4b05      	ldr	r3, [pc, #20]	; (1d78 <lfoSineTriTick+0x18>)
    1d62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1d66:	b510      	push	{r4, lr}
    1d68:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    1d6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1d6e:	f006 fddb 	bl	8928 <__tSineTriLFO_tick_veneer>
    1d72:	ed84 0a00 	vstr	s0, [r4]
}
    1d76:	bd10      	pop	{r4, pc}
    1d78:	200053a4 	.word	0x200053a4
    1d7c:	f3af 8000 	nop.w

00001d80 <lfoSineTick>:

void __ATTR_ITCMRAM lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
    1d80:	4b05      	ldr	r3, [pc, #20]	; (1d98 <lfoSineTick+0x18>)
    1d82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1d86:	b510      	push	{r4, lr}
    1d88:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    1d8a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1d8e:	f006 fd43 	bl	8818 <__tCycle_tick_veneer>
    1d92:	ed84 0a00 	vstr	s0, [r4]
}
    1d96:	bd10      	pop	{r4, pc}
    1d98:	20005384 	.word	0x20005384
    1d9c:	f3af 8000 	nop.w

00001da0 <lfoTriTick>:

void __ATTR_ITCMRAM lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <lfoTriTick+0x18>)
    1da2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1da6:	b510      	push	{r4, lr}
    1da8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    1daa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1dae:	f006 fce7 	bl	8780 <__tTriLFO_tick_veneer>
    1db2:	ed84 0a00 	vstr	s0, [r4]
}
    1db6:	bd10      	pop	{r4, pc}
    1db8:	200053c4 	.word	0x200053c4
    1dbc:	f3af 8000 	nop.w

00001dc0 <lfoSawTick>:
void __ATTR_ITCMRAM lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    1dc0:	4b08      	ldr	r3, [pc, #32]	; (1de4 <lfoSawTick+0x24>)
    1dc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1dc6:	b510      	push	{r4, lr}
    1dc8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    1dca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1dce:	f006 fe0f 	bl	89f0 <__tIntPhasor_tick_veneer>
    1dd2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1dd6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1dda:	eee0 7a07 	vfma.f32	s15, s0, s14
    1dde:	edc4 7a00 	vstr	s15, [r4]
}
    1de2:	bd10      	pop	{r4, pc}
    1de4:	20005334 	.word	0x20005334
    1de8:	f3af 8000 	nop.w
    1dec:	f3af 8000 	nop.w
    1df0:	f3af 8000 	nop.w
    1df4:	f3af 8000 	nop.w
    1df8:	f3af 8000 	nop.w
    1dfc:	f3af 8000 	nop.w

00001e00 <lfoPulseTick>:

void __ATTR_ITCMRAM lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    1e00:	4b05      	ldr	r3, [pc, #20]	; (1e18 <lfoPulseTick+0x18>)
    1e02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1e06:	b510      	push	{r4, lr}
    1e08:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    1e0a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1e0e:	f006 fd0b 	bl	8828 <__tSquareLFO_tick_veneer>
    1e12:	ed84 0a00 	vstr	s0, [r4]
}
    1e16:	bd10      	pop	{r4, pc}
    1e18:	20005314 	.word	0x20005314
    1e1c:	f3af 8000 	nop.w

00001e20 <lfoSawSquareSetRate>:

void __ATTR_ITCMRAM lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    1e20:	4b03      	ldr	r3, [pc, #12]	; (1e30 <lfoSawSquareSetRate+0x10>)
    1e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e2a:	f006 be01 	b.w	8a30 <__tSawSquareLFO_setFreq_veneer>
    1e2e:	bf00      	nop
    1e30:	20005354 	.word	0x20005354
    1e34:	f3af 8000 	nop.w
    1e38:	f3af 8000 	nop.w
    1e3c:	f3af 8000 	nop.w

00001e40 <lfoSineTriSetRate>:
}

void __ATTR_ITCMRAM lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <lfoSineTriSetRate+0x10>)
    1e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e4a:	f006 bca1 	b.w	8790 <__tSineTriLFO_setFreq_veneer>
    1e4e:	bf00      	nop
    1e50:	200053a4 	.word	0x200053a4
    1e54:	f3af 8000 	nop.w
    1e58:	f3af 8000 	nop.w
    1e5c:	f3af 8000 	nop.w

00001e60 <lfoSineSetRate>:
}
void __ATTR_ITCMRAM lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
    1e60:	4b03      	ldr	r3, [pc, #12]	; (1e70 <lfoSineSetRate+0x10>)
    1e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e6a:	f006 bdad 	b.w	89c8 <__tCycle_setFreq_veneer>
    1e6e:	bf00      	nop
    1e70:	20005384 	.word	0x20005384
    1e74:	f3af 8000 	nop.w
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <lfoTriSetRate>:
}
void __ATTR_ITCMRAM lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
    1e80:	4b03      	ldr	r3, [pc, #12]	; (1e90 <lfoTriSetRate+0x10>)
    1e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e8a:	f006 bcfd 	b.w	8888 <__tTriLFO_setFreq_veneer>
    1e8e:	bf00      	nop
    1e90:	200053c4 	.word	0x200053c4
    1e94:	f3af 8000 	nop.w
    1e98:	f3af 8000 	nop.w
    1e9c:	f3af 8000 	nop.w

00001ea0 <lfoSawSetRate>:
}
void __ATTR_ITCMRAM lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    1ea0:	4b03      	ldr	r3, [pc, #12]	; (1eb0 <lfoSawSetRate+0x10>)
    1ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eaa:	f006 bd45 	b.w	8938 <__tIntPhasor_setFreq_veneer>
    1eae:	bf00      	nop
    1eb0:	20005334 	.word	0x20005334
    1eb4:	f3af 8000 	nop.w
    1eb8:	f3af 8000 	nop.w
    1ebc:	f3af 8000 	nop.w

00001ec0 <lfoPulseSetRate>:
}
void __ATTR_ITCMRAM lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <lfoPulseSetRate+0x10>)
    1ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eca:	f006 bd59 	b.w	8980 <__tSquareLFO_setFreq_veneer>
    1ece:	bf00      	nop
    1ed0:	20005314 	.word	0x20005314
    1ed4:	f3af 8000 	nop.w
    1ed8:	f3af 8000 	nop.w
    1edc:	f3af 8000 	nop.w

00001ee0 <lfoSawSquareSetPhase>:
}


void __ATTR_ITCMRAM lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    1ee0:	4b03      	ldr	r3, [pc, #12]	; (1ef0 <lfoSawSquareSetPhase+0x10>)
    1ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eea:	f006 bcf1 	b.w	88d0 <__tSawSquareLFO_setPhase_veneer>
    1eee:	bf00      	nop
    1ef0:	20005354 	.word	0x20005354
    1ef4:	f3af 8000 	nop.w
    1ef8:	f3af 8000 	nop.w
    1efc:	f3af 8000 	nop.w

00001f00 <lfoSineTriSetPhase>:
}
void __ATTR_ITCMRAM lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    1f00:	4b03      	ldr	r3, [pc, #12]	; (1f10 <lfoSineTriSetPhase+0x10>)
    1f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f0a:	f006 bc35 	b.w	8778 <__tSineTriLFO_setPhase_veneer>
    1f0e:	bf00      	nop
    1f10:	200053a4 	.word	0x200053a4
    1f14:	f3af 8000 	nop.w
    1f18:	f3af 8000 	nop.w
    1f1c:	f3af 8000 	nop.w

00001f20 <lfoSineSetPhase>:
}
void __ATTR_ITCMRAM lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
    1f20:	4b03      	ldr	r3, [pc, #12]	; (1f30 <lfoSineSetPhase+0x10>)
    1f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f2a:	f006 bd69 	b.w	8a00 <__tCycle_setPhase_veneer>
    1f2e:	bf00      	nop
    1f30:	20005384 	.word	0x20005384
    1f34:	f3af 8000 	nop.w
    1f38:	f3af 8000 	nop.w
    1f3c:	f3af 8000 	nop.w

00001f40 <lfoTriSetPhase>:
}
void __ATTR_ITCMRAM lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <lfoTriSetPhase+0x10>)
    1f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f4a:	f006 bd65 	b.w	8a18 <__tTriLFO_setPhase_veneer>
    1f4e:	bf00      	nop
    1f50:	200053c4 	.word	0x200053c4
    1f54:	f3af 8000 	nop.w
    1f58:	f3af 8000 	nop.w
    1f5c:	f3af 8000 	nop.w

00001f60 <lfoSawSetPhase>:
}
void __ATTR_ITCMRAM lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    1f60:	4b03      	ldr	r3, [pc, #12]	; (1f70 <lfoSawSetPhase+0x10>)
    1f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f6a:	f006 bcc5 	b.w	88f8 <__tIntPhasor_setPhase_veneer>
    1f6e:	bf00      	nop
    1f70:	20005334 	.word	0x20005334
    1f74:	f3af 8000 	nop.w
    1f78:	f3af 8000 	nop.w
    1f7c:	f3af 8000 	nop.w

00001f80 <lfoPulseSetPhase>:
}
void __ATTR_ITCMRAM lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <lfoPulseSetPhase+0x10>)
    1f82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f8a:	f006 bc2d 	b.w	87e8 <__tSquareLFO_setPhase_veneer>
    1f8e:	bf00      	nop
    1f90:	20005314 	.word	0x20005314
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <lfoSawSquareSetShape>:
}


void __ATTR_ITCMRAM lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    1fa0:	4b03      	ldr	r3, [pc, #12]	; (1fb0 <lfoSawSquareSetShape+0x10>)
    1fa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1fa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1faa:	f006 bba5 	b.w	86f8 <__tSawSquareLFO_setShape_veneer>
    1fae:	bf00      	nop
    1fb0:	20005354 	.word	0x20005354
    1fb4:	f3af 8000 	nop.w
    1fb8:	f3af 8000 	nop.w
    1fbc:	f3af 8000 	nop.w

00001fc0 <lfoSineTriSetShape>:
}
void __ATTR_ITCMRAM lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    1fc0:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <lfoSineTriSetShape+0x10>)
    1fc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1fca:	f006 bc4d 	b.w	8868 <__tSineTriLFO_setShape_veneer>
    1fce:	bf00      	nop
    1fd0:	200053a4 	.word	0x200053a4
    1fd4:	f3af 8000 	nop.w
    1fd8:	f3af 8000 	nop.w
    1fdc:	f3af 8000 	nop.w

00001fe0 <lfoSineSetShape>:
}
void __ATTR_ITCMRAM lfoSineSetShape(float s, int v, int string)
{
	//none
}
    1fe0:	4770      	bx	lr
    1fe2:	bf00      	nop
    1fe4:	f3af 8000 	nop.w
    1fe8:	f3af 8000 	nop.w
    1fec:	f3af 8000 	nop.w
    1ff0:	f3af 8000 	nop.w
    1ff4:	f3af 8000 	nop.w
    1ff8:	f3af 8000 	nop.w
    1ffc:	f3af 8000 	nop.w

00002000 <lfoTriSetShape>:
    2000:	4770      	bx	lr
    2002:	bf00      	nop
    2004:	f3af 8000 	nop.w
    2008:	f3af 8000 	nop.w
    200c:	f3af 8000 	nop.w
    2010:	f3af 8000 	nop.w
    2014:	f3af 8000 	nop.w
    2018:	f3af 8000 	nop.w
    201c:	f3af 8000 	nop.w

00002020 <lfoSawSetShape>:
    2020:	4770      	bx	lr
    2022:	bf00      	nop
    2024:	f3af 8000 	nop.w
    2028:	f3af 8000 	nop.w
    202c:	f3af 8000 	nop.w
    2030:	f3af 8000 	nop.w
    2034:	f3af 8000 	nop.w
    2038:	f3af 8000 	nop.w
    203c:	f3af 8000 	nop.w

00002040 <lfoPulseSetShape>:
{
	//none
}
void __ATTR_ITCMRAM lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    2040:	4b03      	ldr	r3, [pc, #12]	; (2050 <lfoPulseSetShape+0x10>)
    2042:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2046:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    204a:	f006 bc01 	b.w	8850 <__tSquareLFO_setPulseWidth_veneer>
    204e:	bf00      	nop
    2050:	20005314 	.word	0x20005314
    2054:	f3af 8000 	nop.w
    2058:	f3af 8000 	nop.w
    205c:	f3af 8000 	nop.w

00002060 <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
    2060:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    2064:	b538      	push	{r3, r4, r5, lr}
    2066:	4605      	mov	r5, r0
    2068:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    206a:	ee20 0a27 	vmul.f32	s0, s0, s15
    206e:	f006 fbe7 	bl	8840 <__fasterdbtoa_veneer>
    2072:	4b04      	ldr	r3, [pc, #16]	; (2084 <clipperGainSet+0x24>)
    2074:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2078:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    207c:	ed84 0a00 	vstr	s0, [r4]
}
    2080:	bd38      	pop	{r3, r4, r5, pc}
    2082:	bf00      	nop
    2084:	200055f0 	.word	0x200055f0
    2088:	f3af 8000 	nop.w
    208c:	f3af 8000 	nop.w
    2090:	f3af 8000 	nop.w
    2094:	f3af 8000 	nop.w
    2098:	f3af 8000 	nop.w
    209c:	f3af 8000 	nop.w

000020a0 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
    20a0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    20a4:	b538      	push	{r3, r4, r5, lr}
    20a6:	4605      	mov	r5, r0
    20a8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    20aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    20ae:	f006 fbc7 	bl	8840 <__fasterdbtoa_veneer>
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <wavefolderParam1+0x24>)
    20b4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    20b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    20bc:	ed84 0a00 	vstr	s0, [r4]
}
    20c0:	bd38      	pop	{r3, r4, r5, pc}
    20c2:	bf00      	nop
    20c4:	200055f0 	.word	0x200055f0
    20c8:	f3af 8000 	nop.w
    20cc:	f3af 8000 	nop.w
    20d0:	f3af 8000 	nop.w
    20d4:	f3af 8000 	nop.w
    20d8:	f3af 8000 	nop.w
    20dc:	f3af 8000 	nop.w

000020e0 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
    20e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    20e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    20e8:	4b07      	ldr	r3, [pc, #28]	; (2108 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    20ea:	4808      	ldr	r0, [pc, #32]	; (210c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    20ec:	ee70 6a27 	vadd.f32	s13, s0, s15
    20f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    20f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    20f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    20fc:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    2100:	ed83 7a00 	vstr	s14, [r3]
}
    2104:	4770      	bx	lr
    2106:	bf00      	nop
    2108:	200051f4 	.word	0x200051f4
    210c:	20005630 	.word	0x20005630
    2110:	f3af 8000 	nop.w
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
    2120:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2122:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    2126:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    212a:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    212e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    2132:	0084      	lsls	r4, r0, #2
{
    2134:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2138:	eee0 7a68 	vfms.f32	s15, s0, s17
    213c:	eeb0 0a67 	vmov.f32	s0, s15
    2140:	f006 fb7e 	bl	8840 <__fasterdbtoa_veneer>
    2144:	4808      	ldr	r0, [pc, #32]	; (2168 <tiltParam1+0x48>)
    2146:	4420      	add	r0, r4
    2148:	f006 fb5a 	bl	8800 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    214c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    2150:	eea8 0a28 	vfma.f32	s0, s16, s17
    2154:	f006 fb74 	bl	8840 <__fasterdbtoa_veneer>
    2158:	4804      	ldr	r0, [pc, #16]	; (216c <tiltParam1+0x4c>)
}
    215a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    215e:	4420      	add	r0, r4
}
    2160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    2164:	f006 bb4c 	b.w	8800 <__tVZFilter_setGain_veneer>
    2168:	20005be0 	.word	0x20005be0
    216c:	20005c00 	.word	0x20005c00
    2170:	f3af 8000 	nop.w
    2174:	f3af 8000 	nop.w
    2178:	f3af 8000 	nop.w
    217c:	f3af 8000 	nop.w

00002180 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2180:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2184:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 21b8 <tiltParam2+0x38>
    2188:	eddf 0a0c 	vldr	s1, [pc, #48]	; 21bc <tiltParam2+0x3c>
    218c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 21c0 <tiltParam2+0x40>
    2190:	eee0 7a07 	vfma.f32	s15, s0, s14
    2194:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 21c4 <tiltParam2+0x44>
{
    2198:	b538      	push	{r3, r4, r5, lr}
    219a:	4605      	mov	r5, r0
    219c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    219e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
    21a2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    21a6:	f004 feeb 	bl	6f80 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    21aa:	4807      	ldr	r0, [pc, #28]	; (21c8 <tiltParam2+0x48>)
    21ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    21b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
    21b4:	f006 bb28 	b.w	8808 <__tVZFilter_setFreqFast_veneer>
    21b8:	429a0000 	.word	0x429a0000
    21bc:	420fb824 	.word	0x420fb824
    21c0:	457ff000 	.word	0x457ff000
    21c4:	00000000 	.word	0x00000000
    21c8:	20000a44 	.word	0x20000a44
    21cc:	f3af 8000 	nop.w
    21d0:	f3af 8000 	nop.w
    21d4:	f3af 8000 	nop.w
    21d8:	f3af 8000 	nop.w
    21dc:	f3af 8000 	nop.w

000021e0 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    21e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    21e4:	4b06      	ldr	r3, [pc, #24]	; (2200 <tiltParam3+0x20>)
    21e6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    21ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21ee:	ee30 0a07 	vadd.f32	s0, s0, s14
    21f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    21f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    21fa:	f006 bc1d 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    21fe:	bf00      	nop
    2200:	20000a44 	.word	0x20000a44
    2204:	f3af 8000 	nop.w
    2208:	f3af 8000 	nop.w
    220c:	f3af 8000 	nop.w
    2210:	f3af 8000 	nop.w
    2214:	f3af 8000 	nop.w
    2218:	f3af 8000 	nop.w
    221c:	f3af 8000 	nop.w

00002220 <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    2220:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    2224:	ed9f 7a09 	vldr	s14, [pc, #36]	; 224c <tiltParam4+0x2c>
{
    2228:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    222a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    222e:	4605      	mov	r5, r0
    2230:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    2232:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2236:	eeb0 0a67 	vmov.f32	s0, s15
    223a:	f006 fa85 	bl	8748 <__fastdbtoa_veneer>
    223e:	4804      	ldr	r0, [pc, #16]	; (2250 <tiltParam4+0x30>)
    2240:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    2248:	f006 bada 	b.w	8800 <__tVZFilter_setGain_veneer>
    224c:	42080000 	.word	0x42080000
    2250:	20000a44 	.word	0x20000a44
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
    2260:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    2264:	4b04      	ldr	r3, [pc, #16]	; (2278 <compressorParam1+0x18>)
    2266:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    226a:	ee20 0a27 	vmul.f32	s0, s0, s15
    226e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2272:	ed83 0a03 	vstr	s0, [r3, #12]
}
    2276:	4770      	bx	lr
    2278:	20000a64 	.word	0x20000a64
    227c:	f3af 8000 	nop.w

00002280 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
    2280:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2284:	4b0a      	ldr	r3, [pc, #40]	; (22b0 <compressorParam2+0x30>)
    2286:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    228a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    228e:	eeb0 7a67 	vmov.f32	s14, s15
    2292:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    2296:	eea0 7a26 	vfma.f32	s14, s0, s13
    229a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    229e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    22a2:	edd3 6a04 	vldr	s13, [r3, #16]
    22a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    22aa:	ed83 7a07 	vstr	s14, [r3, #28]
}
    22ae:	4770      	bx	lr
    22b0:	20000a64 	.word	0x20000a64
    22b4:	f3af 8000 	nop.w
    22b8:	f3af 8000 	nop.w
    22bc:	f3af 8000 	nop.w

000022c0 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
    22c0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    22c4:	4b04      	ldr	r3, [pc, #16]	; (22d8 <compressorParam3+0x18>)
    22c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    22ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    22d2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    22d6:	4770      	bx	lr
    22d8:	20000a64 	.word	0x20000a64
    22dc:	f3af 8000 	nop.w

000022e0 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    22e0:	4b0b      	ldr	r3, [pc, #44]	; (2310 <compressorParam4+0x30>)
    22e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    22e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2314 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    22ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    22ee:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    22f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    22f4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    22f8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    22fc:	ee20 0a07 	vmul.f32	s0, s0, s14
    2300:	ee87 0a80 	vdiv.f32	s0, s15, s0
    2304:	f006 fb64 	bl	89d0 <__fasterexpf_veneer>
    2308:	ed84 0a01 	vstr	s0, [r4, #4]
}
    230c:	bd10      	pop	{r4, pc}
    230e:	bf00      	nop
    2310:	20000a64 	.word	0x20000a64
    2314:	3a83126f 	.word	0x3a83126f
    2318:	f3af 8000 	nop.w
    231c:	f3af 8000 	nop.w

00002320 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2320:	4b0b      	ldr	r3, [pc, #44]	; (2350 <compressorParam5+0x30>)
    2322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    2326:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2354 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    232a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    232e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2330:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    2334:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2338:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    233c:	ee20 0a07 	vmul.f32	s0, s0, s14
    2340:	ee87 0a80 	vdiv.f32	s0, s15, s0
    2344:	f006 fb44 	bl	89d0 <__fasterexpf_veneer>
    2348:	ed84 0a02 	vstr	s0, [r4, #8]
}
    234c:	bd10      	pop	{r4, pc}
    234e:	bf00      	nop
    2350:	20000a64 	.word	0x20000a64
    2354:	3a83126f 	.word	0x3a83126f
    2358:	f3af 8000 	nop.w
    235c:	f3af 8000 	nop.w

00002360 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
    2360:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    2364:	4b05      	ldr	r3, [pc, #20]	; (237c <offsetParam2+0x1c>)
    2366:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    236a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    236e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2372:	eee0 7a07 	vfma.f32	s15, s0, s14
    2376:	edc3 7a00 	vstr	s15, [r3]
}
    237a:	4770      	bx	lr
    237c:	20005610 	.word	0x20005610

00002380 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
    2380:	4b03      	ldr	r3, [pc, #12]	; (2390 <param2Linear+0x10>)
    2382:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2386:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    238a:	ed83 0a00 	vstr	s0, [r3]
}
    238e:	4770      	bx	lr
    2390:	20005610 	.word	0x20005610
    2394:	f3af 8000 	nop.w
    2398:	f3af 8000 	nop.w
    239c:	f3af 8000 	nop.w

000023a0 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
    23a0:	4b03      	ldr	r3, [pc, #12]	; (23b0 <param3Linear+0x10>)
    23a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    23a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    23aa:	ed83 0a00 	vstr	s0, [r3]
}
    23ae:	4770      	bx	lr
    23b0:	20005630 	.word	0x20005630
    23b4:	f3af 8000 	nop.w
    23b8:	f3af 8000 	nop.w
    23bc:	f3af 8000 	nop.w

000023c0 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
    23c0:	eddf 6a10 	vldr	s13, [pc, #64]	; 2404 <param3Soft+0x44>
    23c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    23c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2408 <param3Soft+0x48>
    23cc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    23d0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 240c <param3Soft+0x4c>
    23d4:	eee0 7a26 	vfma.f32	s15, s0, s13
    23d8:	4a0d      	ldr	r2, [pc, #52]	; (2410 <param3Soft+0x50>)
    23da:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    23de:	4b0d      	ldr	r3, [pc, #52]	; (2414 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    23e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    23e4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    23e8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    23ec:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    23f0:	eee5 6a86 	vfma.f32	s13, s11, s12
    23f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    23f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    23fc:	edc1 6a00 	vstr	s13, [r1]
}
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	3f7d70a4 	.word	0x3f7d70a4
    2408:	3c23d70a 	.word	0x3c23d70a
    240c:	3eaaaaaa 	.word	0x3eaaaaaa
    2410:	20005630 	.word	0x20005630
    2414:	20005bb4 	.word	0x20005bb4
    2418:	f3af 8000 	nop.w
    241c:	f3af 8000 	nop.w

00002420 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    2420:	eddf 6a17 	vldr	s13, [pc, #92]	; 2480 <param3Hard+0x60>
    2424:	eddf 7a17 	vldr	s15, [pc, #92]	; 2484 <param3Hard+0x64>
    2428:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2488 <param3Hard+0x68>
    242c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    2430:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    2432:	4b16      	ldr	r3, [pc, #88]	; (248c <param3Hard+0x6c>)
    2434:	0045      	lsls	r5, r0, #1
    2436:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    243a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    243c:	ee27 0a87 	vmul.f32	s0, s15, s14
    2440:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2444:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
    2448:	f006 f9fe 	bl	8848 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    244c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    2450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2454:	d00a      	beq.n	246c <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    2456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    245a:	4b0d      	ldr	r3, [pc, #52]	; (2490 <param3Hard+0x70>)
    245c:	442c      	add	r4, r5
    245e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    2462:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2466:	edc4 7a00 	vstr	s15, [r4]
}
    246a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    246c:	4b08      	ldr	r3, [pc, #32]	; (2490 <param3Hard+0x70>)
    246e:	442c      	add	r4, r5
    2470:	eddf 7a08 	vldr	s15, [pc, #32]	; 2494 <param3Hard+0x74>
    2474:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2478:	edc4 7a00 	vstr	s15, [r4]
}
    247c:	bd38      	pop	{r3, r4, r5, pc}
    247e:	bf00      	nop
    2480:	3f7d70a4 	.word	0x3f7d70a4
    2484:	3c23d70a 	.word	0x3c23d70a
    2488:	3fc90fdb 	.word	0x3fc90fdb
    248c:	20005630 	.word	0x20005630
    2490:	20005b94 	.word	0x20005b94
    2494:	4479ffff 	.word	0x4479ffff
    2498:	f3af 8000 	nop.w
    249c:	f3af 8000 	nop.w

000024a0 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
    24a0:	4b03      	ldr	r3, [pc, #12]	; (24b0 <param4Linear+0x10>)
    24a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    24a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    24aa:	ed83 0a00 	vstr	s0, [r3]
}
    24ae:	4770      	bx	lr
    24b0:	20005650 	.word	0x20005650
    24b4:	f3af 8000 	nop.w
    24b8:	f3af 8000 	nop.w
    24bc:	f3af 8000 	nop.w

000024c0 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
    24c0:	4b03      	ldr	r3, [pc, #12]	; (24d0 <param5Linear+0x10>)
    24c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    24c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    24ca:	ed83 0a00 	vstr	s0, [r3]
}
    24ce:	4770      	bx	lr
    24d0:	20005670 	.word	0x20005670
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <param2BC>:
void __ATTR_ITCMRAM param2BC(float value, int v, int string)
{
	tCrusher_setQuality (&bc[v][string],value);
    24e0:	4b03      	ldr	r3, [pc, #12]	; (24f0 <param2BC+0x10>)
    24e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    24e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    24ea:	f006 ba75 	b.w	89d8 <__tCrusher_setQuality_veneer>
    24ee:	bf00      	nop
    24f0:	20000a24 	.word	0x20000a24
    24f4:	f3af 8000 	nop.w
    24f8:	f3af 8000 	nop.w
    24fc:	f3af 8000 	nop.w

00002500 <param3BC>:
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
    2500:	4a07      	ldr	r2, [pc, #28]	; (2520 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    2502:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    2506:	eddf 7a07 	vldr	s15, [pc, #28]	; 2524 <param3BC+0x24>
    250a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    250e:	4b06      	ldr	r3, [pc, #24]	; (2528 <param3BC+0x28>)
    2510:	eee7 7a00 	vfma.f32	s15, s14, s0
    2514:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2518:	eeb0 0a67 	vmov.f32	s0, s15
    251c:	f006 b988 	b.w	8830 <__tCrusher_setSamplingRatio_veneer>
    2520:	20000008 	.word	0x20000008
    2524:	3c23d70a 	.word	0x3c23d70a
    2528:	20000a24 	.word	0x20000a24
    252c:	f3af 8000 	nop.w
    2530:	f3af 8000 	nop.w
    2534:	f3af 8000 	nop.w
    2538:	f3af 8000 	nop.w
    253c:	f3af 8000 	nop.w

00002540 <param4BC>:
}
void __ATTR_ITCMRAM param4BC(float value, int v, int string)
{
	tCrusher_setRound(&bc[v][string], value);
    2540:	4b03      	ldr	r3, [pc, #12]	; (2550 <param4BC+0x10>)
    2542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2546:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    254a:	f006 b8dd 	b.w	8708 <__tCrusher_setRound_veneer>
    254e:	bf00      	nop
    2550:	20000a24 	.word	0x20000a24
    2554:	f3af 8000 	nop.w
    2558:	f3af 8000 	nop.w
    255c:	f3af 8000 	nop.w

00002560 <param5BC>:
}
void __ATTR_ITCMRAM param5BC(float value, int v, int string)
{
	tCrusher_setOperation(&bc[v][string], value);
    2560:	4b03      	ldr	r3, [pc, #12]	; (2570 <param5BC+0x10>)
    2562:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2566:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    256a:	f006 b959 	b.w	8820 <__tCrusher_setOperation_veneer>
    256e:	bf00      	nop
    2570:	20000a24 	.word	0x20000a24
    2574:	f3af 8000 	nop.w
    2578:	f3af 8000 	nop.w
    257c:	f3af 8000 	nop.w

00002580 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
    2580:	4b03      	ldr	r3, [pc, #12]	; (2590 <fxMixSet+0x10>)
    2582:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2586:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    258a:	ed83 0a00 	vstr	s0, [r3]
}
    258e:	4770      	bx	lr
    2590:	200050f4 	.word	0x200050f4
    2594:	f3af 8000 	nop.w
    2598:	f3af 8000 	nop.w
    259c:	f3af 8000 	nop.w

000025a0 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    25a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    25a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    25a8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    25aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    25ae:	4605      	mov	r5, r0
    25b0:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    25b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    25b6:	eeb0 0a67 	vmov.f32	s0, s15
    25ba:	f006 f941 	bl	8840 <__fasterdbtoa_veneer>
    25be:	4b03      	ldr	r3, [pc, #12]	; (25cc <fxPostGainSet+0x2c>)
    25c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    25c4:	ed84 0a00 	vstr	s0, [r4]
}
    25c8:	bd38      	pop	{r3, r4, r5, pc}
    25ca:	bf00      	nop
    25cc:	20005114 	.word	0x20005114
    25d0:	f3af 8000 	nop.w
    25d4:	f3af 8000 	nop.w
    25d8:	f3af 8000 	nop.w
    25dc:	f3af 8000 	nop.w

000025e0 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
    25e0:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    25e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
    25e6:	4d36      	ldr	r5, [pc, #216]	; (26c0 <wavefolderTick+0xe0>)
    25e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    25ec:	4b35      	ldr	r3, [pc, #212]	; (26c4 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    25ee:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    25f2:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    25f6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    25fa:	4a33      	ldr	r2, [pc, #204]	; (26c8 <wavefolderTick+0xe8>)
    25fc:	ed9f 4a33 	vldr	s8, [pc, #204]	; 26cc <wavefolderTick+0xec>
    2600:	0084      	lsls	r4, r0, #2
    2602:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
    2606:	eddf 3a32 	vldr	s7, [pc, #200]	; 26d0 <wavefolderTick+0xf0>
{
    260a:	ed2d 8b02 	vpush	{d8}
    260e:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2612:	ed93 6a00 	vldr	s12, [r3]
    2616:	fe88 8a66 	vminnm.f32	s16, s16, s13
    261a:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    261e:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
    2622:	4b2c      	ldr	r3, [pc, #176]	; (26d4 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2624:	ee30 0a06 	vadd.f32	s0, s0, s12
    2628:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
    262c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    2630:	4a29      	ldr	r2, [pc, #164]	; (26d8 <wavefolderTick+0xf8>)
    2632:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2636:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
    263a:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
    263e:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    2642:	4b26      	ldr	r3, [pc, #152]	; (26dc <wavefolderTick+0xfc>)
    2644:	ee76 5ae5 	vsub.f32	s11, s13, s11
    2648:	ed9f 0a25 	vldr	s0, [pc, #148]	; 26e0 <wavefolderTick+0x100>
    264c:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
    2650:	ee67 7aa3 	vmul.f32	s15, s15, s7
    2654:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    2658:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    265c:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
    2660:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    2664:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2668:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    266c:	ee36 3ac5 	vsub.f32	s6, s13, s10
    2670:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    2674:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    2678:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    267c:	ee25 5a23 	vmul.f32	s10, s10, s7
    2680:	ee76 6ae5 	vsub.f32	s13, s13, s11
    2684:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    2688:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    268c:	eee7 7a05 	vfma.f32	s15, s14, s10
    2690:	eeb0 8a67 	vmov.f32	s16, s15
    2694:	f006 f8d8 	bl	8848 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    2698:	4b12      	ldr	r3, [pc, #72]	; (26e4 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    269a:	4813      	ldr	r0, [pc, #76]	; (26e8 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    269c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    26a0:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26a2:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    26a4:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26a8:	eee8 7ac0 	vfms.f32	s15, s17, s0
    26ac:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26b0:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
    26b4:	ecbd 8b02 	vpop	{d8}
    26b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26bc:	f006 b904 	b.w	88c8 <__tHighpass_tick_veneer>
    26c0:	20014900 	.word	0x20014900
    26c4:	20005610 	.word	0x20005610
    26c8:	200055f0 	.word	0x200055f0
    26cc:	3eaaaaaa 	.word	0x3eaaaaaa
    26d0:	3fbffff8 	.word	0x3fbffff8
    26d4:	20005630 	.word	0x20005630
    26d8:	20005650 	.word	0x20005650
    26dc:	20005670 	.word	0x20005670
    26e0:	40c90fdb 	.word	0x40c90fdb
    26e4:	200051f4 	.word	0x200051f4
    26e8:	20000de4 	.word	0x20000de4
    26ec:	f3af 8000 	nop.w
    26f0:	f3af 8000 	nop.w
    26f4:	f3af 8000 	nop.w
    26f8:	f3af 8000 	nop.w
    26fc:	f3af 8000 	nop.w

00002700 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
    2700:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    2704:	ed9f 7a05 	vldr	s14, [pc, #20]	; 271c <chorusParam1+0x1c>
    2708:	4b05      	ldr	r3, [pc, #20]	; (2720 <chorusParam1+0x20>)
    270a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    270e:	eee0 7a07 	vfma.f32	s15, s0, s14
    2712:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2716:	edc3 7a00 	vstr	s15, [r3]
}
    271a:	4770      	bx	lr
    271c:	45b4a000 	.word	0x45b4a000
    2720:	200055f0 	.word	0x200055f0
    2724:	f3af 8000 	nop.w
    2728:	f3af 8000 	nop.w
    272c:	f3af 8000 	nop.w
    2730:	f3af 8000 	nop.w
    2734:	f3af 8000 	nop.w
    2738:	f3af 8000 	nop.w
    273c:	f3af 8000 	nop.w

00002740 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
    2740:	eddf 7a05 	vldr	s15, [pc, #20]	; 2758 <chorusParam2+0x18>
    2744:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2748:	4b04      	ldr	r3, [pc, #16]	; (275c <chorusParam2+0x1c>)
    274a:	ee20 0a27 	vmul.f32	s0, s0, s15
    274e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2752:	ed83 0a00 	vstr	s0, [r3]
}
    2756:	4770      	bx	lr
    2758:	3dcccccd 	.word	0x3dcccccd
    275c:	20005610 	.word	0x20005610

00002760 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    2760:	ed9f 7a07 	vldr	s14, [pc, #28]	; 2780 <chorusParam3+0x20>
    2764:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2768:	eddf 7a06 	vldr	s15, [pc, #24]	; 2784 <chorusParam3+0x24>
    276c:	4b06      	ldr	r3, [pc, #24]	; (2788 <chorusParam3+0x28>)
    276e:	eee0 7a07 	vfma.f32	s15, s0, s14
    2772:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2776:	eeb0 0a67 	vmov.f32	s0, s15
    277a:	f006 b925 	b.w	89c8 <__tCycle_setFreq_veneer>
    277e:	bf00      	nop
    2780:	3ecccccd 	.word	0x3ecccccd
    2784:	3c23d70a 	.word	0x3c23d70a
    2788:	20005504 	.word	0x20005504
    278c:	f3af 8000 	nop.w
    2790:	f3af 8000 	nop.w
    2794:	f3af 8000 	nop.w
    2798:	f3af 8000 	nop.w
    279c:	f3af 8000 	nop.w

000027a0 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    27a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 27c0 <chorusParam4+0x20>
    27a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    27a8:	eddf 7a06 	vldr	s15, [pc, #24]	; 27c4 <chorusParam4+0x24>
    27ac:	4b06      	ldr	r3, [pc, #24]	; (27c8 <chorusParam4+0x28>)
    27ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    27b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    27b6:	eeb0 0a67 	vmov.f32	s0, s15
    27ba:	f006 b905 	b.w	89c8 <__tCycle_setFreq_veneer>
    27be:	bf00      	nop
    27c0:	3ee38e37 	.word	0x3ee38e37
    27c4:	3c343958 	.word	0x3c343958
    27c8:	20005524 	.word	0x20005524
    27cc:	f3af 8000 	nop.w
    27d0:	f3af 8000 	nop.w
    27d4:	f3af 8000 	nop.w
    27d8:	f3af 8000 	nop.w
    27dc:	f3af 8000 	nop.w

000027e0 <chorusTick>:
}


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    27e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    27e6:	4f2b      	ldr	r7, [pc, #172]	; (2894 <chorusTick+0xb4>)
    27e8:	4d2b      	ldr	r5, [pc, #172]	; (2898 <chorusTick+0xb8>)
    27ea:	482c      	ldr	r0, [pc, #176]	; (289c <chorusTick+0xbc>)
    27ec:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    27f0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    27f4:	4e2a      	ldr	r6, [pc, #168]	; (28a0 <chorusTick+0xc0>)
    27f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    27fa:	008c      	lsls	r4, r1, #2
    27fc:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    2800:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    2804:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    2808:	edd5 9a00 	vldr	s19, [r5]
{
    280c:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    2810:	ed97 9a00 	vldr	s18, [r7]
    2814:	f006 f800 	bl	8818 <__tCycle_tick_veneer>
    2818:	4630      	mov	r0, r6
    281a:	eef0 7a48 	vmov.f32	s15, s16
    281e:	eee9 7a80 	vfma.f32	s15, s19, s0
    2822:	ed9f 0a20 	vldr	s0, [pc, #128]	; 28a4 <chorusTick+0xc4>
    2826:	ee29 0a00 	vmul.f32	s0, s18, s0
    282a:	ee20 0a27 	vmul.f32	s0, s0, s15
    282e:	f006 f817 	bl	8860 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    2832:	481d      	ldr	r0, [pc, #116]	; (28a8 <chorusTick+0xc8>)
    2834:	edd5 9a00 	vldr	s19, [r5]
    2838:	4420      	add	r0, r4
    283a:	ed97 9a00 	vldr	s18, [r7]
    283e:	f005 ffeb 	bl	8818 <__tCycle_tick_veneer>
    2842:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2846:	eea9 8ac0 	vfms.f32	s16, s19, s0
    284a:	4d18      	ldr	r5, [pc, #96]	; (28ac <chorusTick+0xcc>)
    284c:	ee29 0a27 	vmul.f32	s0, s18, s15
    2850:	4425      	add	r5, r4
    2852:	4628      	mov	r0, r5
    2854:	ee20 0a08 	vmul.f32	s0, s0, s16
    2858:	f006 f802 	bl	8860 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    285c:	eeb0 0a68 	vmov.f32	s0, s17
    2860:	4630      	mov	r0, r6
    2862:	f006 f891 	bl	8988 <__tLinearDelay_tick_veneer>
    2866:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    286a:	4628      	mov	r0, r5
    286c:	eeb0 0a68 	vmov.f32	s0, s17
    2870:	f006 f88a 	bl	8988 <__tLinearDelay_tick_veneer>
    2874:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    2878:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    287c:	480c      	ldr	r0, [pc, #48]	; (28b0 <chorusTick+0xd0>)
    287e:	4420      	add	r0, r4
    2880:	eea8 0ae7 	vfms.f32	s0, s17, s15
    2884:	f006 f820 	bl	88c8 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    2888:	eeb1 0a40 	vneg.f32	s0, s0
    288c:	ecbd 8b04 	vpop	{d8-d9}
    2890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2892:	bf00      	nop
    2894:	200055f0 	.word	0x200055f0
    2898:	20005610 	.word	0x20005610
    289c:	20005504 	.word	0x20005504
    28a0:	20005008 	.word	0x20005008
    28a4:	3f34fdf4 	.word	0x3f34fdf4
    28a8:	20005524 	.word	0x20005524
    28ac:	20005028 	.word	0x20005028
    28b0:	20000de4 	.word	0x20000de4
    28b4:	f3af 8000 	nop.w
    28b8:	f3af 8000 	nop.w
    28bc:	f3af 8000 	nop.w

000028c0 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    28c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    28c4:	4a0e      	ldr	r2, [pc, #56]	; (2900 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    28c6:	4b0f      	ldr	r3, [pc, #60]	; (2904 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    28c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    28cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    28d0:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    28d2:	edd2 7a00 	vldr	s15, [r2]
    28d6:	008c      	lsls	r4, r1, #2
    28d8:	ee30 0a27 	vadd.f32	s0, s0, s15
    28dc:	edd3 7a00 	vldr	s15, [r3]
    28e0:	4b09      	ldr	r3, [pc, #36]	; (2908 <shaperTick+0x48>)
    28e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    28e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    28ea:	edd1 0a00 	vldr	s1, [r1]
    28ee:	f006 f897 	bl	8a20 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    28f2:	4806      	ldr	r0, [pc, #24]	; (290c <shaperTick+0x4c>)
    28f4:	4420      	add	r0, r4
    return temp;
}
    28f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    28fa:	f005 bfe5 	b.w	88c8 <__tHighpass_tick_veneer>
    28fe:	bf00      	nop
    2900:	20005610 	.word	0x20005610
    2904:	200055f0 	.word	0x200055f0
    2908:	20005630 	.word	0x20005630
    290c:	20000de4 	.word	0x20000de4
    2910:	f3af 8000 	nop.w
    2914:	f3af 8000 	nop.w
    2918:	f3af 8000 	nop.w
    291c:	f3af 8000 	nop.w

00002920 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    2920:	4770      	bx	lr
    2922:	bf00      	nop
    2924:	f3af 8000 	nop.w
    2928:	f3af 8000 	nop.w
    292c:	f3af 8000 	nop.w
    2930:	f3af 8000 	nop.w
    2934:	f3af 8000 	nop.w
    2938:	f3af 8000 	nop.w
    293c:	f3af 8000 	nop.w

00002940 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    2940:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2944:	4b08      	ldr	r3, [pc, #32]	; (2968 <tiltFilterTick+0x28>)
{
    2946:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    2948:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    294c:	008c      	lsls	r4, r1, #2
    294e:	f005 ff8f 	bl	8870 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    2952:	4806      	ldr	r0, [pc, #24]	; (296c <tiltFilterTick+0x2c>)
    2954:	4420      	add	r0, r4
    2956:	f005 ff8b 	bl	8870 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    295a:	4805      	ldr	r0, [pc, #20]	; (2970 <tiltFilterTick+0x30>)
    295c:	4420      	add	r0, r4
    return sample;
}
    295e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    2962:	f005 bf85 	b.w	8870 <__tVZFilter_tickEfficient_veneer>
    2966:	bf00      	nop
    2968:	20005be0 	.word	0x20005be0
    296c:	20005c00 	.word	0x20005c00
    2970:	20000a44 	.word	0x20000a44
    2974:	f3af 8000 	nop.w
    2978:	f3af 8000 	nop.w
    297c:	f3af 8000 	nop.w

00002980 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    2980:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    2984:	4b10      	ldr	r3, [pc, #64]	; (29c8 <tanhTick+0x48>)
    2986:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    298a:	4810      	ldr	r0, [pc, #64]	; (29cc <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    298c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    2990:	b510      	push	{r4, lr}
    2992:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
    2996:	008c      	lsls	r4, r1, #2
    2998:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    299c:	eea6 0a87 	vfma.f32	s0, s13, s14
    29a0:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
    29a4:	ee27 0a80 	vmul.f32	s0, s15, s0
    29a8:	f005 ff7a 	bl	88a0 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    29ac:	4808      	ldr	r0, [pc, #32]	; (29d0 <tanhTick+0x50>)
    29ae:	4420      	add	r0, r4
    29b0:	f005 ff8a 	bl	88c8 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    29b4:	4b07      	ldr	r3, [pc, #28]	; (29d4 <tanhTick+0x54>)
    29b6:	4423      	add	r3, r4
    29b8:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    29bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    29c0:	ee20 0a27 	vmul.f32	s0, s0, s15
    29c4:	f005 bf6c 	b.w	88a0 <__tanhf_veneer>
    29c8:	20005610 	.word	0x20005610
    29cc:	200055f0 	.word	0x200055f0
    29d0:	20000de4 	.word	0x20000de4
    29d4:	20005650 	.word	0x20005650
    29d8:	f3af 8000 	nop.w
    29dc:	f3af 8000 	nop.w

000029e0 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    29e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    29e4:	4a19      	ldr	r2, [pc, #100]	; (2a4c <softClipTick+0x6c>)
    float shape = param3[v][string];
    29e6:	4b1a      	ldr	r3, [pc, #104]	; (2a50 <softClipTick+0x70>)
    sample = sample + param2[v][string];
    29e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    29ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    29f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 2a54 <softClipTick+0x74>
    float shape = param3[v][string];
    29f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    29f8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    29fc:	4816      	ldr	r0, [pc, #88]	; (2a58 <softClipTick+0x78>)
{
    29fe:	b410      	push	{r4}
    sample = sample * param1[v][string];
    2a00:	4c16      	ldr	r4, [pc, #88]	; (2a5c <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2a02:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
    2a06:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    2a0a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
    2a0e:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
    2a12:	4b13      	ldr	r3, [pc, #76]	; (2a60 <softClipTick+0x80>)
    sample = sample + param2[v][string];
    2a14:	ed94 5a00 	vldr	s10, [r4]
    2a18:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
    2a1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
    2a20:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
    2a24:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
    2a28:	ed93 0a00 	vldr	s0, [r3]
    2a2c:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    2a30:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    2a34:	ee27 7a27 	vmul.f32	s14, s14, s15
    2a38:	ee27 7a27 	vmul.f32	s14, s14, s15
    2a3c:	ee36 7ac7 	vsub.f32	s14, s13, s14
    2a40:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2a44:	ee27 0a80 	vmul.f32	s0, s15, s0
    2a48:	f005 bf3e 	b.w	88c8 <__tHighpass_tick_veneer>
    2a4c:	20005610 	.word	0x20005610
    2a50:	20005630 	.word	0x20005630
    2a54:	3eaaaaaa 	.word	0x3eaaaaaa
    2a58:	20000de4 	.word	0x20000de4
    2a5c:	200055f0 	.word	0x200055f0
    2a60:	20005bb4 	.word	0x20005bb4
    2a64:	f3af 8000 	nop.w
    2a68:	f3af 8000 	nop.w
    2a6c:	f3af 8000 	nop.w
    2a70:	f3af 8000 	nop.w
    2a74:	f3af 8000 	nop.w
    2a78:	f3af 8000 	nop.w
    2a7c:	f3af 8000 	nop.w

00002a80 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    2a80:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2a84:	4a1a      	ldr	r2, [pc, #104]	; (2af0 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    2a86:	4b1b      	ldr	r3, [pc, #108]	; (2af4 <hardClipTick+0x74>)
    2a88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    2a8c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2a90:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    2a94:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    2a98:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    2a9a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    2a9e:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
    2aa0:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2aa4:	4e14      	ldr	r6, [pc, #80]	; (2af8 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    2aa6:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2aaa:	4d14      	ldr	r5, [pc, #80]	; (2afc <hardClipTick+0x7c>)
    2aac:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    2ab0:	4425      	add	r5, r4
    2ab2:	ed96 7a00 	vldr	s14, [r6]
    2ab6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    2aba:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    2abe:	ee27 0a87 	vmul.f32	s0, s15, s14
    2ac2:	f005 fec1 	bl	8848 <__arm_sin_f32_veneer>
    2ac6:	ed96 7a00 	vldr	s14, [r6]
    2aca:	edd5 7a00 	vldr	s15, [r5]
    2ace:	ee67 7a87 	vmul.f32	s15, s15, s14
    2ad2:	ee27 0a80 	vmul.f32	s0, s15, s0
    2ad6:	f005 feb7 	bl	8848 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    2ada:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2ade:	4808      	ldr	r0, [pc, #32]	; (2b00 <hardClipTick+0x80>)
    2ae0:	ee20 0a27 	vmul.f32	s0, s0, s15
    2ae4:	4420      	add	r0, r4
    return sample;
}
    2ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2aea:	f005 beed 	b.w	88c8 <__tHighpass_tick_veneer>
    2aee:	bf00      	nop
    2af0:	200055f0 	.word	0x200055f0
    2af4:	20005610 	.word	0x20005610
    2af8:	20005630 	.word	0x20005630
    2afc:	20005b94 	.word	0x20005b94
    2b00:	20000de4 	.word	0x20000de4
    2b04:	f3af 8000 	nop.w
    2b08:	f3af 8000 	nop.w
    2b0c:	f3af 8000 	nop.w
    2b10:	f3af 8000 	nop.w
    2b14:	f3af 8000 	nop.w
    2b18:	f3af 8000 	nop.w
    2b1c:	f3af 8000 	nop.w

00002b20 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    2b20:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b24:	4b17      	ldr	r3, [pc, #92]	; (2b84 <satTick+0x64>)
    sample = sample * param1[v][string];
    2b26:	4a18      	ldr	r2, [pc, #96]	; (2b88 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b28:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    2b2c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2b30:	4816      	ldr	r0, [pc, #88]	; (2b8c <satTick+0x6c>)
    sample = sample * param1[v][string];
    2b32:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2b36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    2b3a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b3c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    2b40:	008c      	lsls	r4, r1, #2
    2b42:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b46:	eeb0 6a47 	vmov.f32	s12, s14
    2b4a:	ee27 7a87 	vmul.f32	s14, s15, s14
    2b4e:	eea7 6a80 	vfma.f32	s12, s15, s0
    2b52:	eea7 7a80 	vfma.f32	s14, s15, s0
    2b56:	eeb0 6ac6 	vabs.f32	s12, s12
    2b5a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2b5e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2b62:	ee36 6b05 	vadd.f64	d6, d6, d5
    2b66:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2b6a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2b6e:	f005 feab 	bl	88c8 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    2b72:	4807      	ldr	r0, [pc, #28]	; (2b90 <satTick+0x70>)
    2b74:	4420      	add	r0, r4
    2b76:	f005 fea7 	bl	88c8 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    2b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    2b7e:	f005 bf2f 	b.w	89e0 <__LEAF_tanh_veneer>
    2b82:	bf00      	nop
    2b84:	20005610 	.word	0x20005610
    2b88:	200055f0 	.word	0x200055f0
    2b8c:	20000de4 	.word	0x20000de4
    2b90:	20000e04 	.word	0x20000e04
    2b94:	f3af 8000 	nop.w
    2b98:	f3af 8000 	nop.w
    2b9c:	f3af 8000 	nop.w

00002ba0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    2ba0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2ba4:	4b05      	ldr	r3, [pc, #20]	; (2bbc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    2ba6:	4806      	ldr	r0, [pc, #24]	; (2bc0 <bcTick+0x20>)
    sample = sample * param1[v][string];
    2ba8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    2bac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    2bb0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    2bb4:	ee20 0a27 	vmul.f32	s0, s0, s15
    2bb8:	f005 be3e 	b.w	8838 <__tCrusher_tick_veneer>
    2bbc:	200055f0 	.word	0x200055f0
    2bc0:	20000a24 	.word	0x20000a24
    2bc4:	f3af 8000 	nop.w
    2bc8:	f3af 8000 	nop.w
    2bcc:	f3af 8000 	nop.w
    2bd0:	f3af 8000 	nop.w
    2bd4:	f3af 8000 	nop.w
    2bd8:	f3af 8000 	nop.w
    2bdc:	f3af 8000 	nop.w

00002be0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    2be0:	4b03      	ldr	r3, [pc, #12]	; (2bf0 <compressorTick+0x10>)
    2be2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2be6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2bea:	f005 bd9d 	b.w	8728 <__tCompressor_tick_veneer>
    2bee:	bf00      	nop
    2bf0:	20000a64 	.word	0x20000a64
    2bf4:	f3af 8000 	nop.w
    2bf8:	f3af 8000 	nop.w
    2bfc:	f3af 8000 	nop.w

00002c00 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    2c00:	4b03      	ldr	r3, [pc, #12]	; (2c10 <FXlowpassTick+0x10>)
    2c02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c0a:	f005 bdd5 	b.w	87b8 <__tSVF_tick_veneer>
    2c0e:	bf00      	nop
    2c10:	20000874 	.word	0x20000874
    2c14:	f3af 8000 	nop.w
    2c18:	f3af 8000 	nop.w
    2c1c:	f3af 8000 	nop.w

00002c20 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    2c20:	4b03      	ldr	r3, [pc, #12]	; (2c30 <FXhighpassTick+0x10>)
    2c22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c2a:	f005 bdc5 	b.w	87b8 <__tSVF_tick_veneer>
    2c2e:	bf00      	nop
    2c30:	20000854 	.word	0x20000854
    2c34:	f3af 8000 	nop.w
    2c38:	f3af 8000 	nop.w
    2c3c:	f3af 8000 	nop.w

00002c40 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    2c40:	4b03      	ldr	r3, [pc, #12]	; (2c50 <FXbandpassTick+0x10>)
    2c42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c4a:	f005 bdb5 	b.w	87b8 <__tSVF_tick_veneer>
    2c4e:	bf00      	nop
    2c50:	20000814 	.word	0x20000814
    2c54:	f3af 8000 	nop.w
    2c58:	f3af 8000 	nop.w
    2c5c:	f3af 8000 	nop.w

00002c60 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    2c60:	4b03      	ldr	r3, [pc, #12]	; (2c70 <FXdiodeLowpassTick+0x10>)
    2c62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c6a:	f005 bd9d 	b.w	87a8 <__tDiodeFilter_tick_veneer>
    2c6e:	bf00      	nop
    2c70:	20000834 	.word	0x20000834
    2c74:	f3af 8000 	nop.w
    2c78:	f3af 8000 	nop.w
    2c7c:	f3af 8000 	nop.w

00002c80 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    2c80:	4b03      	ldr	r3, [pc, #12]	; (2c90 <FXVZpeakTick+0x10>)
    2c82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c8a:	f005 bdf1 	b.w	8870 <__tVZFilter_tickEfficient_veneer>
    2c8e:	bf00      	nop
    2c90:	200007f4 	.word	0x200007f4
    2c94:	f3af 8000 	nop.w
    2c98:	f3af 8000 	nop.w
    2c9c:	f3af 8000 	nop.w

00002ca0 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    2ca0:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <FXVZlowshelfTick+0x10>)
    2ca2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2caa:	f005 bde1 	b.w	8870 <__tVZFilter_tickEfficient_veneer>
    2cae:	bf00      	nop
    2cb0:	200007d4 	.word	0x200007d4
    2cb4:	f3af 8000 	nop.w
    2cb8:	f3af 8000 	nop.w
    2cbc:	f3af 8000 	nop.w

00002cc0 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <FXVZhighshelfTick+0x10>)
    2cc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2cc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cca:	f005 bdd1 	b.w	8870 <__tVZFilter_tickEfficient_veneer>
    2cce:	bf00      	nop
    2cd0:	200007b4 	.word	0x200007b4
    2cd4:	f3af 8000 	nop.w
    2cd8:	f3af 8000 	nop.w
    2cdc:	f3af 8000 	nop.w

00002ce0 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    2ce0:	4b03      	ldr	r3, [pc, #12]	; (2cf0 <FXVZbandrejectTick+0x10>)
    2ce2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ce6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cea:	f005 bdc1 	b.w	8870 <__tVZFilter_tickEfficient_veneer>
    2cee:	bf00      	nop
    2cf0:	20000794 	.word	0x20000794
    2cf4:	f3af 8000 	nop.w
    2cf8:	f3af 8000 	nop.w
    2cfc:	f3af 8000 	nop.w

00002d00 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    2d00:	4b03      	ldr	r3, [pc, #12]	; (2d10 <FXLadderLowpassTick+0x10>)
    2d02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2d06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2d0a:	f005 be29 	b.w	8960 <__tLadderFilter_tick_veneer>
    2d0e:	bf00      	nop
    2d10:	20000774 	.word	0x20000774
    2d14:	f3af 8000 	nop.w
    2d18:	f3af 8000 	nop.w
    2d1c:	f3af 8000 	nop.w

00002d20 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d20:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2d24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2d58 <FXLowpassParam1+0x38>
    2d28:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2d5c <FXLowpassParam1+0x3c>
    2d2c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2d60 <FXLowpassParam1+0x40>
    2d30:	eee0 7a07 	vfma.f32	s15, s0, s14
    2d34:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2d64 <FXLowpassParam1+0x44>
{
    2d38:	b538      	push	{r3, r4, r5, lr}
    2d3a:	4605      	mov	r5, r0
    2d3c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d3e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d42:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d46:	f004 f91b 	bl	6f80 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d4a:	4807      	ldr	r0, [pc, #28]	; (2d68 <FXLowpassParam1+0x48>)
    2d4c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d54:	f005 bdc4 	b.w	88e0 <__tSVF_setFreqFast_veneer>
    2d58:	429a0000 	.word	0x429a0000
    2d5c:	420fb824 	.word	0x420fb824
    2d60:	457ff000 	.word	0x457ff000
    2d64:	00000000 	.word	0x00000000
    2d68:	20000874 	.word	0x20000874
    2d6c:	f3af 8000 	nop.w
    2d70:	f3af 8000 	nop.w
    2d74:	f3af 8000 	nop.w
    2d78:	f3af 8000 	nop.w
    2d7c:	f3af 8000 	nop.w

00002d80 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d80:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2d84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2db8 <FXHighpassParam1+0x38>
    2d88:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2dbc <FXHighpassParam1+0x3c>
    2d8c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2dc0 <FXHighpassParam1+0x40>
    2d90:	eee0 7a07 	vfma.f32	s15, s0, s14
    2d94:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2dc4 <FXHighpassParam1+0x44>
{
    2d98:	b538      	push	{r3, r4, r5, lr}
    2d9a:	4605      	mov	r5, r0
    2d9c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d9e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2da2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2da6:	f004 f8eb 	bl	6f80 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2daa:	4807      	ldr	r0, [pc, #28]	; (2dc8 <FXHighpassParam1+0x48>)
    2dac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2db4:	f005 bd94 	b.w	88e0 <__tSVF_setFreqFast_veneer>
    2db8:	429a0000 	.word	0x429a0000
    2dbc:	420fb824 	.word	0x420fb824
    2dc0:	457ff000 	.word	0x457ff000
    2dc4:	00000000 	.word	0x00000000
    2dc8:	20000854 	.word	0x20000854
    2dcc:	f3af 8000 	nop.w
    2dd0:	f3af 8000 	nop.w
    2dd4:	f3af 8000 	nop.w
    2dd8:	f3af 8000 	nop.w
    2ddc:	f3af 8000 	nop.w

00002de0 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2de0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2de4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2e18 <FXBandpassParam1+0x38>
    2de8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2e1c <FXBandpassParam1+0x3c>
    2dec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2e20 <FXBandpassParam1+0x40>
    2df0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2df4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2e24 <FXBandpassParam1+0x44>
{
    2df8:	b538      	push	{r3, r4, r5, lr}
    2dfa:	4605      	mov	r5, r0
    2dfc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2dfe:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e02:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e06:	f004 f8bb 	bl	6f80 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e0a:	4807      	ldr	r0, [pc, #28]	; (2e28 <FXBandpassParam1+0x48>)
    2e0c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e14:	f005 bd64 	b.w	88e0 <__tSVF_setFreqFast_veneer>
    2e18:	429a0000 	.word	0x429a0000
    2e1c:	420fb824 	.word	0x420fb824
    2e20:	457ff000 	.word	0x457ff000
    2e24:	00000000 	.word	0x00000000
    2e28:	20000814 	.word	0x20000814
    2e2c:	f3af 8000 	nop.w
    2e30:	f3af 8000 	nop.w
    2e34:	f3af 8000 	nop.w
    2e38:	f3af 8000 	nop.w
    2e3c:	f3af 8000 	nop.w

00002e40 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e40:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2e44:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2e78 <FXDiodeParam1+0x38>
    2e48:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2e7c <FXDiodeParam1+0x3c>
    2e4c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2e80 <FXDiodeParam1+0x40>
    2e50:	eee0 7a07 	vfma.f32	s15, s0, s14
    2e54:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2e84 <FXDiodeParam1+0x44>
{
    2e58:	b538      	push	{r3, r4, r5, lr}
    2e5a:	4605      	mov	r5, r0
    2e5c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e5e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2e62:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e66:	f004 f88b 	bl	6f80 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2e6a:	4807      	ldr	r0, [pc, #28]	; (2e88 <FXDiodeParam1+0x48>)
    2e6c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2e74:	f005 bc54 	b.w	8720 <__tDiodeFilter_setFreqFast_veneer>
    2e78:	429a0000 	.word	0x429a0000
    2e7c:	420fb824 	.word	0x420fb824
    2e80:	457ff000 	.word	0x457ff000
    2e84:	00000000 	.word	0x00000000
    2e88:	20000834 	.word	0x20000834
    2e8c:	f3af 8000 	nop.w
    2e90:	f3af 8000 	nop.w
    2e94:	f3af 8000 	nop.w
    2e98:	f3af 8000 	nop.w
    2e9c:	f3af 8000 	nop.w

00002ea0 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ea0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2ea4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2ed8 <FXPeakParam1+0x38>
    2ea8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2edc <FXPeakParam1+0x3c>
    2eac:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2ee0 <FXPeakParam1+0x40>
    2eb0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2eb4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2ee4 <FXPeakParam1+0x44>
{
    2eb8:	b538      	push	{r3, r4, r5, lr}
    2eba:	4605      	mov	r5, r0
    2ebc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ebe:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2ec2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ec6:	f004 f85b 	bl	6f80 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2eca:	4807      	ldr	r0, [pc, #28]	; (2ee8 <FXPeakParam1+0x48>)
    2ecc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2ed4:	f005 bc98 	b.w	8808 <__tVZFilter_setFreqFast_veneer>
    2ed8:	429a0000 	.word	0x429a0000
    2edc:	420fb824 	.word	0x420fb824
    2ee0:	457ff000 	.word	0x457ff000
    2ee4:	00000000 	.word	0x00000000
    2ee8:	200007f4 	.word	0x200007f4
    2eec:	f3af 8000 	nop.w
    2ef0:	f3af 8000 	nop.w
    2ef4:	f3af 8000 	nop.w
    2ef8:	f3af 8000 	nop.w
    2efc:	f3af 8000 	nop.w

00002f00 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f00:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2f04:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2f38 <FXLowShelfParam1+0x38>
    2f08:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2f3c <FXLowShelfParam1+0x3c>
    2f0c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2f40 <FXLowShelfParam1+0x40>
    2f10:	eee0 7a07 	vfma.f32	s15, s0, s14
    2f14:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2f44 <FXLowShelfParam1+0x44>
{
    2f18:	b538      	push	{r3, r4, r5, lr}
    2f1a:	4605      	mov	r5, r0
    2f1c:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f1e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f22:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f26:	f004 f82b 	bl	6f80 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f2a:	4807      	ldr	r0, [pc, #28]	; (2f48 <FXLowShelfParam1+0x48>)
    2f2c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f34:	f005 bc68 	b.w	8808 <__tVZFilter_setFreqFast_veneer>
    2f38:	429a0000 	.word	0x429a0000
    2f3c:	420fb824 	.word	0x420fb824
    2f40:	457ff000 	.word	0x457ff000
    2f44:	00000000 	.word	0x00000000
    2f48:	200007d4 	.word	0x200007d4
    2f4c:	f3af 8000 	nop.w
    2f50:	f3af 8000 	nop.w
    2f54:	f3af 8000 	nop.w
    2f58:	f3af 8000 	nop.w
    2f5c:	f3af 8000 	nop.w

00002f60 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f60:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2f64:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2f98 <FXHighShelfParam1+0x38>
    2f68:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2f9c <FXHighShelfParam1+0x3c>
    2f6c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2fa0 <FXHighShelfParam1+0x40>
    2f70:	eee0 7a07 	vfma.f32	s15, s0, s14
    2f74:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2fa4 <FXHighShelfParam1+0x44>
{
    2f78:	b538      	push	{r3, r4, r5, lr}
    2f7a:	4605      	mov	r5, r0
    2f7c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f7e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2f82:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f86:	f003 fffb 	bl	6f80 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2f8a:	4807      	ldr	r0, [pc, #28]	; (2fa8 <FXHighShelfParam1+0x48>)
    2f8c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2f94:	f005 bc38 	b.w	8808 <__tVZFilter_setFreqFast_veneer>
    2f98:	429a0000 	.word	0x429a0000
    2f9c:	420fb824 	.word	0x420fb824
    2fa0:	457ff000 	.word	0x457ff000
    2fa4:	00000000 	.word	0x00000000
    2fa8:	200007b4 	.word	0x200007b4
    2fac:	f3af 8000 	nop.w
    2fb0:	f3af 8000 	nop.w
    2fb4:	f3af 8000 	nop.w
    2fb8:	f3af 8000 	nop.w
    2fbc:	f3af 8000 	nop.w

00002fc0 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2fc0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2fc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2ff8 <FXNotchParam1+0x38>
    2fc8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2ffc <FXNotchParam1+0x3c>
    2fcc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3000 <FXNotchParam1+0x40>
    2fd0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2fd4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3004 <FXNotchParam1+0x44>
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
    2fda:	4605      	mov	r5, r0
    2fdc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2fde:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    2fe2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2fe6:	f003 ffcb 	bl	6f80 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    2fea:	4807      	ldr	r0, [pc, #28]	; (3008 <FXNotchParam1+0x48>)
    2fec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    2ff4:	f005 bc08 	b.w	8808 <__tVZFilter_setFreqFast_veneer>
    2ff8:	429a0000 	.word	0x429a0000
    2ffc:	420fb824 	.word	0x420fb824
    3000:	457ff000 	.word	0x457ff000
    3004:	00000000 	.word	0x00000000
    3008:	20000794 	.word	0x20000794
    300c:	f3af 8000 	nop.w
    3010:	f3af 8000 	nop.w
    3014:	f3af 8000 	nop.w
    3018:	f3af 8000 	nop.w
    301c:	f3af 8000 	nop.w

00003020 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3020:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    3024:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3058 <FXLadderParam1+0x38>
    3028:	eddf 0a0c 	vldr	s1, [pc, #48]	; 305c <FXLadderParam1+0x3c>
    302c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3060 <FXLadderParam1+0x40>
    3030:	eee0 7a07 	vfma.f32	s15, s0, s14
    3034:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3064 <FXLadderParam1+0x44>
{
    3038:	b538      	push	{r3, r4, r5, lr}
    303a:	4605      	mov	r5, r0
    303c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    303e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    3042:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3046:	f003 ff9b 	bl	6f80 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    304a:	4807      	ldr	r0, [pc, #28]	; (3068 <FXLadderParam1+0x48>)
    304c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    3050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    3054:	f005 bc2c 	b.w	88b0 <__tLadderFilter_setFreqFast_veneer>
    3058:	429a0000 	.word	0x429a0000
    305c:	420fb824 	.word	0x420fb824
    3060:	457ff000 	.word	0x457ff000
    3064:	00000000 	.word	0x00000000
    3068:	20000774 	.word	0x20000774
    306c:	f3af 8000 	nop.w
    3070:	f3af 8000 	nop.w
    3074:	f3af 8000 	nop.w
    3078:	f3af 8000 	nop.w
    307c:	f3af 8000 	nop.w

00003080 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3080:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3084:	ed9f 7a09 	vldr	s14, [pc, #36]	; 30ac <FXPeakParam2+0x2c>
{
    3088:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    308a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    308e:	4605      	mov	r5, r0
    3090:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3092:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3096:	eeb0 0a67 	vmov.f32	s0, s15
    309a:	f005 fbd1 	bl	8840 <__fasterdbtoa_veneer>
    309e:	4804      	ldr	r0, [pc, #16]	; (30b0 <FXPeakParam2+0x30>)
    30a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    30a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30a8:	f005 bbaa 	b.w	8800 <__tVZFilter_setGain_veneer>
    30ac:	42480000 	.word	0x42480000
    30b0:	200007f4 	.word	0x200007f4
    30b4:	f3af 8000 	nop.w
    30b8:	f3af 8000 	nop.w
    30bc:	f3af 8000 	nop.w

000030c0 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    30c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 30ec <FXLowShelfParam2+0x2c>
{
    30c8:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    30ce:	4605      	mov	r5, r0
    30d0:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    30d6:	eeb0 0a67 	vmov.f32	s0, s15
    30da:	f005 fbb1 	bl	8840 <__fasterdbtoa_veneer>
    30de:	4804      	ldr	r0, [pc, #16]	; (30f0 <FXLowShelfParam2+0x30>)
    30e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    30e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30e8:	f005 bb8a 	b.w	8800 <__tVZFilter_setGain_veneer>
    30ec:	42480000 	.word	0x42480000
    30f0:	200007d4 	.word	0x200007d4
    30f4:	f3af 8000 	nop.w
    30f8:	f3af 8000 	nop.w
    30fc:	f3af 8000 	nop.w

00003100 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3100:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3104:	ed9f 7a09 	vldr	s14, [pc, #36]	; 312c <FXHighShelfParam2+0x2c>
{
    3108:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    310a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    310e:	4605      	mov	r5, r0
    3110:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3116:	eeb0 0a67 	vmov.f32	s0, s15
    311a:	f005 fb91 	bl	8840 <__fasterdbtoa_veneer>
    311e:	4804      	ldr	r0, [pc, #16]	; (3130 <FXHighShelfParam2+0x30>)
    3120:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    3124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3128:	f005 bb6a 	b.w	8800 <__tVZFilter_setGain_veneer>
    312c:	42480000 	.word	0x42480000
    3130:	200007b4 	.word	0x200007b4
    3134:	f3af 8000 	nop.w
    3138:	f3af 8000 	nop.w
    313c:	f3af 8000 	nop.w

00003140 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3140:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3144:	ed9f 7a09 	vldr	s14, [pc, #36]	; 316c <FXNotchParam2+0x2c>
{
    3148:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    314a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    314e:	4605      	mov	r5, r0
    3150:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3156:	eeb0 0a67 	vmov.f32	s0, s15
    315a:	f005 fb71 	bl	8840 <__fasterdbtoa_veneer>
    315e:	4804      	ldr	r0, [pc, #16]	; (3170 <FXNotchParam2+0x30>)
    3160:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
    3164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3168:	f005 bb4a 	b.w	8800 <__tVZFilter_setGain_veneer>
    316c:	42480000 	.word	0x42480000
    3170:	20000794 	.word	0x20000794
    3174:	f3af 8000 	nop.w
    3178:	f3af 8000 	nop.w
    317c:	f3af 8000 	nop.w

00003180 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    3180:	4b03      	ldr	r3, [pc, #12]	; (3190 <FXLowpassParam3+0x10>)
    3182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    318a:	f005 bb25 	b.w	87d8 <__tSVF_setQ_veneer>
    318e:	bf00      	nop
    3190:	20000874 	.word	0x20000874
    3194:	f3af 8000 	nop.w
    3198:	f3af 8000 	nop.w
    319c:	f3af 8000 	nop.w

000031a0 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    31a0:	4b03      	ldr	r3, [pc, #12]	; (31b0 <FXHighpassParam3+0x10>)
    31a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    31a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    31aa:	f005 bb15 	b.w	87d8 <__tSVF_setQ_veneer>
    31ae:	bf00      	nop
    31b0:	20000854 	.word	0x20000854
    31b4:	f3af 8000 	nop.w
    31b8:	f3af 8000 	nop.w
    31bc:	f3af 8000 	nop.w

000031c0 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    31c0:	4b03      	ldr	r3, [pc, #12]	; (31d0 <FXBandpassParam3+0x10>)
    31c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    31c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    31ca:	f005 bb05 	b.w	87d8 <__tSVF_setQ_veneer>
    31ce:	bf00      	nop
    31d0:	20000814 	.word	0x20000814
    31d4:	f3af 8000 	nop.w
    31d8:	f3af 8000 	nop.w
    31dc:	f3af 8000 	nop.w

000031e0 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    31e0:	4b03      	ldr	r3, [pc, #12]	; (31f0 <FXDiodeParam3+0x10>)
    31e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    31e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    31ea:	f005 bbe9 	b.w	89c0 <__tDiodeFilter_setQ_veneer>
    31ee:	bf00      	nop
    31f0:	20000834 	.word	0x20000834
    31f4:	f3af 8000 	nop.w
    31f8:	f3af 8000 	nop.w
    31fc:	f3af 8000 	nop.w

00003200 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
    3200:	4b03      	ldr	r3, [pc, #12]	; (3210 <FXPeakParam3+0x10>)
    3202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    320a:	f005 bc15 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    320e:	bf00      	nop
    3210:	200007f4 	.word	0x200007f4
    3214:	f3af 8000 	nop.w
    3218:	f3af 8000 	nop.w
    321c:	f3af 8000 	nop.w

00003220 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
    3220:	4b03      	ldr	r3, [pc, #12]	; (3230 <FXLowShelfParam3+0x10>)
    3222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    322a:	f005 bc05 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    322e:	bf00      	nop
    3230:	200007d4 	.word	0x200007d4
    3234:	f3af 8000 	nop.w
    3238:	f3af 8000 	nop.w
    323c:	f3af 8000 	nop.w

00003240 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
    3240:	4b03      	ldr	r3, [pc, #12]	; (3250 <FXHighShelfParam3+0x10>)
    3242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    324a:	f005 bbf5 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    324e:	bf00      	nop
    3250:	200007b4 	.word	0x200007b4
    3254:	f3af 8000 	nop.w
    3258:	f3af 8000 	nop.w
    325c:	f3af 8000 	nop.w

00003260 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    3260:	4b03      	ldr	r3, [pc, #12]	; (3270 <FXNotchParam3+0x10>)
    3262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    326a:	f005 bbe5 	b.w	8a38 <__tVZFilter_setResonance_veneer>
    326e:	bf00      	nop
    3270:	20000794 	.word	0x20000794
    3274:	f3af 8000 	nop.w
    3278:	f3af 8000 	nop.w
    327c:	f3af 8000 	nop.w

00003280 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    3280:	4b03      	ldr	r3, [pc, #12]	; (3290 <FXLadderParam3+0x10>)
    3282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    328a:	f005 bb5d 	b.w	8948 <__tLadderFilter_setQ_veneer>
    328e:	bf00      	nop
    3290:	20000774 	.word	0x20000774
    3294:	f3af 8000 	nop.w
    3298:	f3af 8000 	nop.w
    329c:	f3af 8000 	nop.w

000032a0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    32a0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32a2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    32a6:	008c      	lsls	r4, r1, #2
{
    32a8:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32ac:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    32b0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32b4:	eee0 7a68 	vfms.f32	s15, s0, s17
    32b8:	eeb0 0a67 	vmov.f32	s0, s15
    32bc:	f005 fa44 	bl	8748 <__fastdbtoa_veneer>
    32c0:	4808      	ldr	r0, [pc, #32]	; (32e4 <noiseSetTilt+0x44>)
    32c2:	4420      	add	r0, r4
    32c4:	f005 fa9c 	bl	8800 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    32c8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    32cc:	eea8 0a28 	vfma.f32	s0, s16, s17
    32d0:	f005 fa3a 	bl	8748 <__fastdbtoa_veneer>
    32d4:	4804      	ldr	r0, [pc, #16]	; (32e8 <noiseSetTilt+0x48>)
}
    32d6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    32da:	4420      	add	r0, r4
}
    32dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    32e0:	f005 ba8e 	b.w	8800 <__tVZFilter_setGain_veneer>
    32e4:	20005574 	.word	0x20005574
    32e8:	2000557c 	.word	0x2000557c
    32ec:	f3af 8000 	nop.w
    32f0:	f3af 8000 	nop.w
    32f4:	f3af 8000 	nop.w
    32f8:	f3af 8000 	nop.w
    32fc:	f3af 8000 	nop.w

00003300 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3300:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    3304:	ed9f 7a08 	vldr	s14, [pc, #32]	; 3328 <noiseSetGain+0x28>
{
    3308:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    330a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    330e:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3310:	eeb0 0a67 	vmov.f32	s0, s15
    3314:	f005 fa18 	bl	8748 <__fastdbtoa_veneer>
    3318:	4804      	ldr	r0, [pc, #16]	; (332c <noiseSetGain+0x2c>)
    331a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    331e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3322:	f005 ba6d 	b.w	8800 <__tVZFilter_setGain_veneer>
    3326:	bf00      	nop
    3328:	42080000 	.word	0x42080000
    332c:	20005554 	.word	0x20005554
    3330:	f3af 8000 	nop.w
    3334:	f3af 8000 	nop.w
    3338:	f3af 8000 	nop.w
    333c:	f3af 8000 	nop.w

00003340 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3340:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    3344:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3374 <noiseSetFreq+0x34>
    3348:	eddf 0a0b 	vldr	s1, [pc, #44]	; 3378 <noiseSetFreq+0x38>
    334c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 337c <noiseSetFreq+0x3c>
    3350:	eee0 7a07 	vfma.f32	s15, s0, s14
    3354:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 3380 <noiseSetFreq+0x40>
{
    3358:	b510      	push	{r4, lr}
    335a:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    335c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    3360:	f003 fe0e 	bl	6f80 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    3364:	4807      	ldr	r0, [pc, #28]	; (3384 <noiseSetFreq+0x44>)
    3366:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    336e:	f005 ba4b 	b.w	8808 <__tVZFilter_setFreqFast_veneer>
    3372:	bf00      	nop
    3374:	429a0000 	.word	0x429a0000
    3378:	420fb824 	.word	0x420fb824
    337c:	457ff000 	.word	0x457ff000
    3380:	00000000 	.word	0x00000000
    3384:	20005554 	.word	0x20005554
    3388:	f3af 8000 	nop.w
    338c:	f3af 8000 	nop.w
    3390:	f3af 8000 	nop.w
    3394:	f3af 8000 	nop.w
    3398:	f3af 8000 	nop.w
    339c:	f3af 8000 	nop.w

000033a0 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    33a0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    33a2:	4b25      	ldr	r3, [pc, #148]	; (3438 <noise_tick+0x98>)
{
    33a4:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    33a6:	4d25      	ldr	r5, [pc, #148]	; (343c <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    33a8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    33ac:	4924      	ldr	r1, [pc, #144]	; (3440 <noise_tick+0xa0>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    33ae:	4825      	ldr	r0, [pc, #148]	; (3444 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    33b0:	4613      	mov	r3, r2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    33b2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    33b6:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    33ba:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    33be:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    33c2:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    33c4:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    33c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    33cc:	3201      	adds	r2, #1
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    33ce:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    33d2:	702a      	strb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    33d4:	f005 fa4c 	bl	8870 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    33d8:	00a5      	lsls	r5, r4, #2
    33da:	481b      	ldr	r0, [pc, #108]	; (3448 <noise_tick+0xa8>)
    33dc:	4428      	add	r0, r5
    33de:	f005 fa47 	bl	8870 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    33e2:	481a      	ldr	r0, [pc, #104]	; (344c <noise_tick+0xac>)
    33e4:	4428      	add	r0, r5
    33e6:	f005 fa43 	bl	8870 <__tVZFilter_tickEfficient_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    33ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    33ee:	ed9f 6a18 	vldr	s12, [pc, #96]	; 3450 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    33f2:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    33f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    33fa:	4816      	ldr	r0, [pc, #88]	; (3454 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    33fc:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    3400:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    3404:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    3408:	4b13      	ldr	r3, [pc, #76]	; (3458 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    340a:	4405      	add	r5, r0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    340c:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    3410:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    3414:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    3418:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    341c:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    3420:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    3424:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    3428:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    342c:	edc3 7a06 	vstr	s15, [r3, #24]
}
    3430:	ecbd 8b04 	vpop	{d8-d9}
    3434:	bd38      	pop	{r3, r4, r5, pc}
    3436:	bf00      	nop
    3438:	20019958 	.word	0x20019958
    343c:	20005b60 	.word	0x20005b60
    3440:	2001aa94 	.word	0x2001aa94
    3444:	20005574 	.word	0x20005574
    3448:	2000557c 	.word	0x2000557c
    344c:	20005554 	.word	0x20005554
    3450:	00000000 	.word	0x00000000
    3454:	20005564 	.word	0x20005564
    3458:	200146b0 	.word	0x200146b0
    345c:	f3af 8000 	nop.w

00003460 <audioTickL>:
{
    3460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
    3464:	2200      	movs	r2, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    3466:	4cc0      	ldr	r4, [pc, #768]	; (3768 <audioTickL+0x308>)
	interrupted = 0;
    3468:	4bc0      	ldr	r3, [pc, #768]	; (376c <audioTickL+0x30c>)
    346a:	4dc1      	ldr	r5, [pc, #772]	; (3770 <audioTickL+0x310>)
    346c:	4ec1      	ldr	r6, [pc, #772]	; (3774 <audioTickL+0x314>)
    346e:	f8df a38c 	ldr.w	sl, [pc, #908]	; 37fc <audioTickL+0x39c>
    3472:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
    3476:	ed2d 8b08 	vpush	{d8-d11}
    347a:	b091      	sub	sp, #68	; 0x44
	interrupted = 0;
    347c:	701a      	strb	r2, [r3, #0]
{
    347e:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    3480:	6863      	ldr	r3, [r4, #4]
    3482:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    3484:	f8d4 8004 	ldr.w	r8, [r4, #4]
	tickMappings();
    3488:	f7fe f90a 	bl	16a0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    348c:	6863      	ldr	r3, [r4, #4]
    348e:	4aba      	ldr	r2, [pc, #744]	; (3778 <audioTickL+0x318>)
    3490:	eba3 0308 	sub.w	r3, r3, r8
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    3494:	48b9      	ldr	r0, [pc, #740]	; (377c <audioTickL+0x31c>)
    3496:	f8df 8368 	ldr.w	r8, [pc, #872]	; 3800 <audioTickL+0x3a0>
	timeMap = DWT->CYCCNT - tempCountMap;
    349a:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    349c:	f8d4 b004 	ldr.w	fp, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    34a0:	f003 fcce 	bl	6e40 <tExpSmooth_tick>
    34a4:	eeb0 9a40 	vmov.f32	s18, s0
    34a8:	4634      	mov	r4, r6
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    34aa:	4650      	mov	r0, sl
    34ac:	f003 fcc8 	bl	6e40 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    34b0:	f898 3000 	ldrb.w	r3, [r8]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    34b4:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    34b8:	b12b      	cbz	r3, 34c6 <audioTickL+0x66>
    34ba:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    34bc:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    34c0:	d001      	beq.n	34c6 <audioTickL+0x66>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    34c2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    34c6:	454d      	cmp	r5, r9
    34c8:	f10a 0a04 	add.w	sl, sl, #4
    34cc:	f104 0408 	add.w	r4, r4, #8
    34d0:	d1eb      	bne.n	34aa <audioTickL+0x4a>
    34d2:	4cab      	ldr	r4, [pc, #684]	; (3780 <audioTickL+0x320>)
    34d4:	4dab      	ldr	r5, [pc, #684]	; (3784 <audioTickL+0x324>)
    34d6:	f104 0928 	add.w	r9, r4, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    34da:	4628      	mov	r0, r5
    34dc:	f003 fcb0 	bl	6e40 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    34e0:	f898 3000 	ldrb.w	r3, [r8]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    34e4:	eca4 0a01 	vstmia	r4!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    34e8:	b12b      	cbz	r3, 34f6 <audioTickL+0x96>
    34ea:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    34ec:	ed86 0a38 	vstr	s0, [r6, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    34f0:	d001      	beq.n	34f6 <audioTickL+0x96>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    34f2:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    34f6:	454c      	cmp	r4, r9
    34f8:	f105 0504 	add.w	r5, r5, #4
    34fc:	f106 0608 	add.w	r6, r6, #8
    3500:	d1eb      	bne.n	34da <audioTickL+0x7a>
	float note[numStringsThisBoard];
    3502:	009a      	lsls	r2, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    3504:	f8df a260 	ldr.w	sl, [pc, #608]	; 3768 <audioTickL+0x308>
	float masterSample = 0.0f;
    3508:	eddf 9a9f 	vldr	s19, [pc, #636]	; 3788 <audioTickL+0x328>
	float note[numStringsThisBoard];
    350c:	3207      	adds	r2, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    350e:	f8da 1004 	ldr.w	r1, [sl, #4]
	float note[numStringsThisBoard];
    3512:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    3516:	eba1 010b 	sub.w	r1, r1, fp
	float note[numStringsThisBoard];
    351a:	ebad 0d02 	sub.w	sp, sp, r2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    351e:	4a9b      	ldr	r2, [pc, #620]	; (378c <audioTickL+0x32c>)
    3520:	6011      	str	r1, [r2, #0]
	float note[numStringsThisBoard];
    3522:	4668      	mov	r0, sp
	uint32_t tempPerStringTick = DWT->CYCCNT;
    3524:	f8da 2004 	ldr.w	r2, [sl, #4]
    3528:	607a      	str	r2, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    352a:	2b00      	cmp	r3, #0
    352c:	f000 819f 	beq.w	386e <audioTickL+0x40e>
    3530:	4b97      	ldr	r3, [pc, #604]	; (3790 <audioTickL+0x330>)
    3532:	f04f 0900 	mov.w	r9, #0
		float sample = 0.0f;
    3536:	eef0 8a69 	vmov.f32	s17, s19
		if (note[v] > 127.0f)
    353a:	ed9f aa96 	vldr	s20, [pc, #600]	; 3794 <audioTickL+0x334>
    353e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int v = 0; v < numStringsThisBoard; v++)
    3540:	46cb      	mov	fp, r9
    3542:	4b95      	ldr	r3, [pc, #596]	; (3798 <audioTickL+0x338>)
				if (oversamplerArray[i] > .999999f)
    3544:	eddf aa95 	vldr	s21, [pc, #596]	; 379c <audioTickL+0x33c>
    3548:	623b      	str	r3, [r7, #32]
    354a:	4b95      	ldr	r3, [pc, #596]	; (37a0 <audioTickL+0x340>)
				else if (oversamplerArray[i]< -.999999f)
    354c:	ed9f ba95 	vldr	s22, [pc, #596]	; 37a4 <audioTickL+0x344>
    3550:	617b      	str	r3, [r7, #20]
    3552:	4b95      	ldr	r3, [pc, #596]	; (37a8 <audioTickL+0x348>)
    3554:	61b8      	str	r0, [r7, #24]
    3556:	627b      	str	r3, [r7, #36]	; 0x24
    3558:	4b94      	ldr	r3, [pc, #592]	; (37ac <audioTickL+0x34c>)
			lfoShapeTick[i](&sample,i, string);
    355a:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
    355e:	61fb      	str	r3, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    3560:	4b93      	ldr	r3, [pc, #588]	; (37b0 <audioTickL+0x350>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    3562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    3564:	edd3 7a00 	vldr	s15, [r3]
    3568:	4b92      	ldr	r3, [pc, #584]	; (37b4 <audioTickL+0x354>)
		float sample = 0.0f;
    356a:	edc7 8a0d 	vstr	s17, [r7, #52]	; 0x34
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    356e:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    3572:	4b91      	ldr	r3, [pc, #580]	; (37b8 <audioTickL+0x358>)
    3574:	eb03 028b 	add.w	r2, r3, fp, lsl #2
    3578:	4b90      	ldr	r3, [pc, #576]	; (37bc <audioTickL+0x35c>)
    357a:	440b      	add	r3, r1
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    357c:	f8da 1004 	ldr.w	r1, [sl, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    3580:	ed92 8a00 	vldr	s16, [r2]
    3584:	edd3 6a00 	vldr	s13, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    3588:	6aba      	ldr	r2, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    358a:	ee38 8a26 	vadd.f32	s16, s16, s13
    358e:	69bb      	ldr	r3, [r7, #24]
    3590:	4615      	mov	r5, r2
    3592:	3204      	adds	r2, #4
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    3594:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    3598:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
    359c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    35a0:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35a2:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
    35a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35aa:	ed42 7a01 	vstr	s15, [r2, #-4]
    35ae:	62ba      	str	r2, [r7, #40]	; 0x28
		if (note[v] < 0.0f)
    35b0:	f100 81c0 	bmi.w	3934 <audioTickL+0x4d4>
		if (note[v] > 127.0f)
    35b4:	eeb4 8aca 	vcmpe.f32	s16, s20
    35b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    35bc:	dd03      	ble.n	35c6 <audioTickL+0x166>
			note[v] = 127.0f;
    35be:	eeb0 8a4a 	vmov.f32	s16, s20
    35c2:	ed03 aa01 	vstr	s20, [r3, #-4]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    35c6:	f8da 3004 	ldr.w	r3, [sl, #4]
    35ca:	4a7d      	ldr	r2, [pc, #500]	; (37c0 <audioTickL+0x360>)
    35cc:	1a5b      	subs	r3, r3, r1
    35ce:	6013      	str	r3, [r2, #0]
		if (envOn[v])
    35d0:	4b7c      	ldr	r3, [pc, #496]	; (37c4 <audioTickL+0x364>)
		uint32_t tempCountEnv = DWT->CYCCNT;
    35d2:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (envOn[v])
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	2b00      	cmp	r3, #0
    35da:	f040 8237 	bne.w	3a4c <audioTickL+0x5ec>
    35de:	4b79      	ldr	r3, [pc, #484]	; (37c4 <audioTickL+0x364>)
    35e0:	785b      	ldrb	r3, [r3, #1]
    35e2:	2b00      	cmp	r3, #0
    35e4:	f040 820f 	bne.w	3a06 <audioTickL+0x5a6>
    35e8:	4b76      	ldr	r3, [pc, #472]	; (37c4 <audioTickL+0x364>)
    35ea:	789b      	ldrb	r3, [r3, #2]
    35ec:	2b00      	cmp	r3, #0
    35ee:	f040 8217 	bne.w	3a20 <audioTickL+0x5c0>
    35f2:	4b74      	ldr	r3, [pc, #464]	; (37c4 <audioTickL+0x364>)
    35f4:	78db      	ldrb	r3, [r3, #3]
    35f6:	2b00      	cmp	r3, #0
    35f8:	f040 821f 	bne.w	3a3a <audioTickL+0x5da>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    35fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    3600:	3d88      	subs	r5, #136	; 0x88
    3602:	4e71      	ldr	r6, [pc, #452]	; (37c8 <audioTickL+0x368>)
    3604:	1b1c      	subs	r4, r3, r4
    3606:	4b71      	ldr	r3, [pc, #452]	; (37cc <audioTickL+0x36c>)
    3608:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < NUM_LFOS; i++)
    360a:	2400      	movs	r4, #0
		uint32_t tempCountLFO = DWT->CYCCNT;
    360c:	f8da 9004 	ldr.w	r9, [sl, #4]
		if (lfoOn[i])
    3610:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
    3614:	4621      	mov	r1, r4
    3616:	465a      	mov	r2, fp
    3618:	f107 0038 	add.w	r0, r7, #56	; 0x38
		float sample = 0.0f;
    361c:	edc7 8a0e 	vstr	s17, [r7, #56]	; 0x38
		if (lfoOn[i])
    3620:	2b00      	cmp	r3, #0
    3622:	f000 817f 	beq.w	3924 <audioTickL+0x4c4>
			lfoShapeTick[i](&sample,i, string);
    3626:	4b6a      	ldr	r3, [pc, #424]	; (37d0 <audioTickL+0x370>)
	for (int i = 0; i < NUM_LFOS; i++)
    3628:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
    362a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
    362e:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
    3630:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    3632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	for (int i = 0; i < NUM_LFOS; i++)
    3634:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    3636:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
    363a:	d1e9      	bne.n	3610 <audioTickL+0x1b0>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    363c:	f8da 3004 	ldr.w	r3, [sl, #4]
		oscillator_tick(note[v], v);
    3640:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    3644:	4a63      	ldr	r2, [pc, #396]	; (37d4 <audioTickL+0x374>)
		oscillator_tick(note[v], v);
    3646:	4658      	mov	r0, fp
		timeLFO = DWT->CYCCNT - tempCountLFO;
    3648:	eba3 0309 	sub.w	r3, r3, r9
    364c:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    364e:	f8da 4004 	ldr.w	r4, [sl, #4]
		oscillator_tick(note[v], v);
    3652:	f7fd f875 	bl	740 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    3656:	f8da 3004 	ldr.w	r3, [sl, #4]
		noise_tick(v);
    365a:	4658      	mov	r0, fp
		timeOsc = DWT->CYCCNT - tempCountOsc;
    365c:	4a5e      	ldr	r2, [pc, #376]	; (37d8 <audioTickL+0x378>)
    365e:	1b1b      	subs	r3, r3, r4
    3660:	6013      	str	r3, [r2, #0]
		uint32_t tempCountNoise = DWT->CYCCNT;
    3662:	f8da 4004 	ldr.w	r4, [sl, #4]
		noise_tick(v);
    3666:	f7ff fe9b 	bl	33a0 <noise_tick>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    366a:	f8da 3004 	ldr.w	r3, [sl, #4]
    366e:	4a5b      	ldr	r2, [pc, #364]	; (37dc <audioTickL+0x37c>)
    3670:	1b1b      	subs	r3, r3, r4
    3672:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    3674:	4b5a      	ldr	r3, [pc, #360]	; (37e0 <audioTickL+0x380>)
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	2b00      	cmp	r3, #0
    367a:	f000 81f1 	beq.w	3a60 <audioTickL+0x600>
			filterSamps[0] += oscOuts[0][i][v];
    367e:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    3680:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    3682:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    3686:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    368a:	d011      	beq.n	36b0 <audioTickL+0x250>
			filterSamps[0] += oscOuts[0][i][v];
    368c:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    3690:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    3692:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    3696:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    369a:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    369e:	d007      	beq.n	36b0 <audioTickL+0x250>
			filterSamps[0] += oscOuts[0][i][v];
    36a0:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    36a4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    36a8:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    36ac:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    36b0:	697b      	ldr	r3, [r7, #20]
		sample = filter_tick(&filterSamps[0], note[v], v);
    36b2:	eeb0 0a48 	vmov.f32	s0, s16
    36b6:	4659      	mov	r1, fp
    36b8:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    36bc:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    36c0:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    36c4:	ee76 6a86 	vadd.f32	s13, s13, s12
    36c8:	617b      	str	r3, [r7, #20]
		filterSamps[1] += noiseOuts[1][v];
    36ca:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    36ce:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    36d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    36d6:	f8da 4004 	ldr.w	r4, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    36da:	f7fd fa21 	bl	b20 <filter_tick>
    36de:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    36e2:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    36e6:	f8da 3004 	ldr.w	r3, [sl, #4]
    36ea:	4a3e      	ldr	r2, [pc, #248]	; (37e4 <audioTickL+0x384>)
    36ec:	1b1b      	subs	r3, r3, r4
    36ee:	6013      	str	r3, [r2, #0]
		if (fxPre)
    36f0:	4b3d      	ldr	r3, [pc, #244]	; (37e8 <audioTickL+0x388>)
    36f2:	781b      	ldrb	r3, [r3, #0]
    36f4:	b133      	cbz	r3, 3704 <audioTickL+0x2a4>
			sample *= amplitude[v];
    36f6:	6a3b      	ldr	r3, [r7, #32]
    36f8:	edd3 7a00 	vldr	s15, [r3]
    36fc:	ee20 8a27 	vmul.f32	s16, s0, s15
    3700:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    3704:	4b39      	ldr	r3, [pc, #228]	; (37ec <audioTickL+0x38c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    3706:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
		if (overSampled)
    370a:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    370c:	f8da 3004 	ldr.w	r3, [sl, #4]
    3710:	613b      	str	r3, [r7, #16]
		if (overSampled)
    3712:	2c00      	cmp	r4, #0
    3714:	f040 8113 	bne.w	393e <audioTickL+0x4de>
    3718:	4a35      	ldr	r2, [pc, #212]	; (37f0 <audioTickL+0x390>)
    371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    371c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 3804 <audioTickL+0x3a4>
    3720:	18d6      	adds	r6, r2, r3
    3722:	4a34      	ldr	r2, [pc, #208]	; (37f4 <audioTickL+0x394>)
    3724:	18d5      	adds	r5, r2, r3
					sample = effectTick[i](sample, i, v); //run the effect
    3726:	4a34      	ldr	r2, [pc, #208]	; (37f8 <audioTickL+0x398>)
				if (effectsActive[i])
    3728:	f819 3b01 	ldrb.w	r3, [r9], #1
					sample = effectTick[i](sample, i, v); //run the effect
    372c:	eeb0 0a48 	vmov.f32	s0, s16
    3730:	4620      	mov	r0, r4
    3732:	4659      	mov	r1, fp
				if (effectsActive[i])
    3734:	b18b      	cbz	r3, 375a <audioTickL+0x2fa>
					sample = effectTick[i](sample, i, v); //run the effect
    3736:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    373a:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    373c:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    3740:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    3744:	ee7b 6ae7 	vsub.f32	s13, s23, s15
					sample *= fxPostGain[i][v];
    3748:	4a2b      	ldr	r2, [pc, #172]	; (37f8 <audioTickL+0x398>)
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    374a:	ee60 7a27 	vmul.f32	s15, s0, s15
    374e:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    3752:	ee27 8a87 	vmul.f32	s16, s15, s14
    3756:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    375a:	3401      	adds	r4, #1
    375c:	3608      	adds	r6, #8
    375e:	3508      	adds	r5, #8
    3760:	2c04      	cmp	r4, #4
    3762:	d1e1      	bne.n	3728 <audioTickL+0x2c8>
    3764:	e050      	b.n	3808 <audioTickL+0x3a8>
    3766:	bf00      	nop
    3768:	e0001000 	.word	0xe0001000
    376c:	200051f0 	.word	0x200051f0
    3770:	20005218 	.word	0x20005218
    3774:	200146b0 	.word	0x200146b0
    3778:	20014884 	.word	0x20014884
    377c:	200148fc 	.word	0x200148fc
    3780:	20005690 	.word	0x20005690
    3784:	20005704 	.word	0x20005704
    3788:	00000000 	.word	0x00000000
    378c:	20014898 	.word	0x20014898
    3790:	20014738 	.word	0x20014738
    3794:	42fe0000 	.word	0x42fe0000
    3798:	20000a04 	.word	0x20000a04
    379c:	3f7fffef 	.word	0x3f7fffef
    37a0:	20005564 	.word	0x20005564
    37a4:	bf7fffef 	.word	0xbf7fffef
    37a8:	20005074 	.word	0x20005074
    37ac:	200055b8 	.word	0x200055b8
    37b0:	20019940 	.word	0x20019940
    37b4:	2001993c 	.word	0x2001993c
    37b8:	20014840 	.word	0x20014840
    37bc:	20014848 	.word	0x20014848
    37c0:	2001487c 	.word	0x2001487c
    37c4:	20005070 	.word	0x20005070
    37c8:	20005310 	.word	0x20005310
    37cc:	20014870 	.word	0x20014870
    37d0:	20005374 	.word	0x20005374
    37d4:	20014880 	.word	0x20014880
    37d8:	20014890 	.word	0x20014890
    37dc:	20014888 	.word	0x20014888
    37e0:	20000024 	.word	0x20000024
    37e4:	20014874 	.word	0x20014874
    37e8:	20016cc6 	.word	0x20016cc6
    37ec:	20000025 	.word	0x20000025
    37f0:	200050f4 	.word	0x200050f4
    37f4:	20005114 	.word	0x20005114
    37f8:	20005060 	.word	0x20005060
    37fc:	2000528c 	.word	0x2000528c
    3800:	2000000d 	.word	0x2000000d
    3804:	20014b94 	.word	0x20014b94
		timeOS = DWT->CYCCNT - tempCountOS;
    3808:	f8da 3004 	ldr.w	r3, [sl, #4]
    380c:	693a      	ldr	r2, [r7, #16]
    380e:	1a9b      	subs	r3, r3, r2
    3810:	4a9c      	ldr	r2, [pc, #624]	; (3a84 <audioTickL+0x624>)
    3812:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    3814:	4b9c      	ldr	r3, [pc, #624]	; (3a88 <audioTickL+0x628>)
    3816:	781b      	ldrb	r3, [r3, #0]
    3818:	b933      	cbnz	r3, 3828 <audioTickL+0x3c8>
			sample *= amplitude[v];
    381a:	6a3b      	ldr	r3, [r7, #32]
    381c:	edd3 7a00 	vldr	s15, [r3]
    3820:	ee28 8a27 	vmul.f32	s16, s16, s15
    3824:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    3828:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
    382a:	eeb0 0a48 	vmov.f32	s0, s16
    382e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    3830:	f10b 0b01 	add.w	fp, fp, #1
    3834:	3304      	adds	r3, #4
    3836:	623b      	str	r3, [r7, #32]
    3838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    383a:	3304      	adds	r3, #4
    383c:	627b      	str	r3, [r7, #36]	; 0x24
    383e:	69fb      	ldr	r3, [r7, #28]
    3840:	3304      	adds	r3, #4
    3842:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
    3844:	4b91      	ldr	r3, [pc, #580]	; (3a8c <audioTickL+0x62c>)
    3846:	1918      	adds	r0, r3, r4
    3848:	f004 ffb6 	bl	87b8 <__tSVF_tick_veneer>
		masterSample += sample * finalMaster[v];
    384c:	4b90      	ldr	r3, [pc, #576]	; (3a90 <audioTickL+0x630>)
    384e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    3852:	4423      	add	r3, r4
    3854:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    3858:	1d23      	adds	r3, r4, #4
    385a:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample * finalMaster[v];
    385c:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int v = 0; v < numStringsThisBoard; v++)
    3860:	f898 3000 	ldrb.w	r3, [r8]
    3864:	455b      	cmp	r3, fp
		masterSample += sample * finalMaster[v];
    3866:	eee7 9a80 	vfma.f32	s19, s15, s0
	for (int v = 0; v < numStringsThisBoard; v++)
    386a:	f73f ae79 	bgt.w	3560 <audioTickL+0x100>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    386e:	ed9f 0a89 	vldr	s0, [pc, #548]	; 3a94 <audioTickL+0x634>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    3872:	4b89      	ldr	r3, [pc, #548]	; (3a98 <audioTickL+0x638>)
    3874:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    3876:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    387a:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    387c:	eddf 7a87 	vldr	s15, [pc, #540]	; 3a9c <audioTickL+0x63c>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    3880:	1a5b      	subs	r3, r3, r1
    3882:	4a87      	ldr	r2, [pc, #540]	; (3aa0 <audioTickL+0x640>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    3884:	eee9 0a27 	vfma.f32	s1, s18, s15
    3888:	ed9f 1a86 	vldr	s2, [pc, #536]	; 3aa4 <audioTickL+0x644>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    388c:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    388e:	f003 fb77 	bl	6f80 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    3892:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    3896:	4a84      	ldr	r2, [pc, #528]	; (3aa8 <audioTickL+0x648>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    3898:	4b84      	ldr	r3, [pc, #528]	; (3aac <audioTickL+0x64c>)
	if (pedalControlsMaster)
    389a:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    389c:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    38a0:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    38a2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    38a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    38aa:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    38ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    38b2:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    38b6:	b178      	cbz	r0, 38d8 <audioTickL+0x478>
	float omAlpha = 1.0f - alpha;
    38b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    38bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    38c0:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    38c4:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    38c8:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    38cc:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    38d0:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    38d4:	ee69 9aa7 	vmul.f32	s19, s19, s15
	if (masterSample  > .999999f)
    38d8:	eddf 7a75 	vldr	s15, [pc, #468]	; 3ab0 <audioTickL+0x650>
    38dc:	eef4 9ae7 	vcmpe.f32	s19, s15
    38e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38e4:	f300 80b9 	bgt.w	3a5a <audioTickL+0x5fa>
	else if (masterSample < -.999999f)
    38e8:	eddf 7a72 	vldr	s15, [pc, #456]	; 3ab4 <audioTickL+0x654>
    38ec:	eef4 9ae7 	vcmpe.f32	s19, s15
    38f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38f4:	d501      	bpl.n	38fa <audioTickL+0x49a>
		masterSample = -.9999999f;
    38f6:	eddf 9a70 	vldr	s19, [pc, #448]	; 3ab8 <audioTickL+0x658>
	return masterSample * audioMasterLevel * 0.98f;
    38fa:	4970      	ldr	r1, [pc, #448]	; (3abc <audioTickL+0x65c>)
	timeTick = DWT->CYCCNT - tempCountTick;
    38fc:	4b66      	ldr	r3, [pc, #408]	; (3a98 <audioTickL+0x638>)
	return masterSample * audioMasterLevel * 0.98f;
    38fe:	eddf 7a70 	vldr	s15, [pc, #448]	; 3ac0 <audioTickL+0x660>
	timeTick = DWT->CYCCNT - tempCountTick;
    3902:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    3904:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    3908:	68b9      	ldr	r1, [r7, #8]
}
    390a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    390c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    3910:	4a6c      	ldr	r2, [pc, #432]	; (3ac4 <audioTickL+0x664>)
    3912:	1a5b      	subs	r3, r3, r1
}
    3914:	ee20 0a29 	vmul.f32	s0, s0, s19
	timeTick = DWT->CYCCNT - tempCountTick;
    3918:	6013      	str	r3, [r2, #0]
}
    391a:	46bd      	mov	sp, r7
    391c:	ecbd 8b08 	vpop	{d8-d11}
    3920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
    3924:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    3926:	edc5 8a30 	vstr	s17, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    392a:	3508      	adds	r5, #8
    392c:	2c04      	cmp	r4, #4
    392e:	f47f ae6f 	bne.w	3610 <audioTickL+0x1b0>
    3932:	e683      	b.n	363c <audioTickL+0x1dc>
			note[v] = 0.0f;
    3934:	eeb0 8a68 	vmov.f32	s16, s17
    3938:	ed43 8a01 	vstr	s17, [r3, #-4]
		if (note[v] > 127.0f)
    393c:	e643      	b.n	35c6 <audioTickL+0x166>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3940:	f107 0134 	add.w	r1, r7, #52	; 0x34
    3944:	4860      	ldr	r0, [pc, #384]	; (3ac8 <audioTickL+0x668>)
			for (int i = 0; i < 4; i++)
    3946:	2400      	movs	r4, #0
    3948:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    394c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 3aec <audioTickL+0x68c>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    3950:	4410      	add	r0, r2
    3952:	603a      	str	r2, [r7, #0]
    3954:	4a5d      	ldr	r2, [pc, #372]	; (3acc <audioTickL+0x66c>)
    3956:	18d6      	adds	r6, r2, r3
    3958:	4a5d      	ldr	r2, [pc, #372]	; (3ad0 <audioTickL+0x670>)
    395a:	18d5      	adds	r5, r2, r3
    395c:	2301      	movs	r3, #1
    395e:	4a5d      	ldr	r2, [pc, #372]	; (3ad4 <audioTickL+0x674>)
    3960:	f004 fff6 	bl	8950 <__arm_fir_interpolate_f32_veneer>
    3964:	4659      	mov	r1, fp
    3966:	46b3      	mov	fp, r6
    3968:	462e      	mov	r6, r5
				if (effectsActive[i])
    396a:	f819 3b01 	ldrb.w	r3, [r9], #1
    396e:	bb63      	cbnz	r3, 39ca <audioTickL+0x56a>
			for (int i = 0; i < 4; i++)
    3970:	3401      	adds	r4, #1
    3972:	f10b 0b08 	add.w	fp, fp, #8
    3976:	3608      	adds	r6, #8
    3978:	2c04      	cmp	r4, #4
    397a:	d1f6      	bne.n	396a <audioTickL+0x50a>
				if (oversamplerArray[i] > .999999f)
    397c:	4b55      	ldr	r3, [pc, #340]	; (3ad4 <audioTickL+0x674>)
    397e:	468b      	mov	fp, r1
    3980:	edd3 7a00 	vldr	s15, [r3]
    3984:	eef4 7aea 	vcmpe.f32	s15, s21
    3988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    398c:	dd6d      	ble.n	3a6a <audioTickL+0x60a>
					oversamplerArray[i] = .999999f;
    398e:	4b51      	ldr	r3, [pc, #324]	; (3ad4 <audioTickL+0x674>)
    3990:	edc3 aa00 	vstr	s21, [r3]
				if (oversamplerArray[i] > .999999f)
    3994:	4b4f      	ldr	r3, [pc, #316]	; (3ad4 <audioTickL+0x674>)
    3996:	edd3 7a01 	vldr	s15, [r3, #4]
    399a:	eef4 7aea 	vcmpe.f32	s15, s21
    399e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39a2:	dc6a      	bgt.n	3a7a <audioTickL+0x61a>
				else if (oversamplerArray[i]< -.999999f)
    39a4:	eef4 7acb 	vcmpe.f32	s15, s22
    39a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39ac:	d501      	bpl.n	39b2 <audioTickL+0x552>
					oversamplerArray[i] = -.999999f;
    39ae:	ed83 ba01 	vstr	s22, [r3, #4]
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    39b2:	683b      	ldr	r3, [r7, #0]
    39b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
    39b8:	4847      	ldr	r0, [pc, #284]	; (3ad8 <audioTickL+0x678>)
    39ba:	4946      	ldr	r1, [pc, #280]	; (3ad4 <audioTickL+0x674>)
    39bc:	4418      	add	r0, r3
    39be:	2302      	movs	r3, #2
    39c0:	f004 ffca 	bl	8958 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    39c4:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    39c8:	e71e      	b.n	3808 <audioTickL+0x3a8>
    39ca:	4d42      	ldr	r5, [pc, #264]	; (3ad4 <audioTickL+0x674>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    39cc:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    39d0:	4620      	mov	r0, r4
    39d2:	4b42      	ldr	r3, [pc, #264]	; (3adc <audioTickL+0x67c>)
    39d4:	eeb0 0a48 	vmov.f32	s0, s16
    39d8:	60f9      	str	r1, [r7, #12]
    39da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    39de:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    39e0:	eddb 7a00 	vldr	s15, [fp]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    39e4:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    39e8:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    39ec:	4b3c      	ldr	r3, [pc, #240]	; (3ae0 <audioTickL+0x680>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    39ee:	ee7b 7ae7 	vsub.f32	s15, s23, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    39f2:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    39f4:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    39f8:	ee27 0a00 	vmul.f32	s0, s14, s0
    39fc:	eca5 0a01 	vstmia	r5!, {s0}
					for (int j = 0; j < OVERSAMPLE; j++)
    3a00:	429d      	cmp	r5, r3
    3a02:	d1e3      	bne.n	39cc <audioTickL+0x56c>
    3a04:	e7b4      	b.n	3970 <audioTickL+0x510>
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    3a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a08:	f103 0008 	add.w	r0, r3, #8
    3a0c:	f004 ff44 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    3a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a12:	ed83 0a07 	vstr	s0, [r3, #28]
		if (envOn[v])
    3a16:	4b33      	ldr	r3, [pc, #204]	; (3ae4 <audioTickL+0x684>)
    3a18:	789b      	ldrb	r3, [r3, #2]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	f43f ade9 	beq.w	35f2 <audioTickL+0x192>
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    3a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a22:	f103 0010 	add.w	r0, r3, #16
    3a26:	f004 ff37 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    3a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a2c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
		if (envOn[v])
    3a30:	4b2c      	ldr	r3, [pc, #176]	; (3ae4 <audioTickL+0x684>)
    3a32:	78db      	ldrb	r3, [r3, #3]
    3a34:	2b00      	cmp	r3, #0
    3a36:	f43f ade1 	beq.w	35fc <audioTickL+0x19c>
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    3a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a3c:	f103 0018 	add.w	r0, r3, #24
    3a40:	f004 ff2a 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    3a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a46:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    3a4a:	e5d7      	b.n	35fc <audioTickL+0x19c>
			float value = tADSRT_tickNoInterp(&envs[v][string]);
    3a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3a4e:	f004 ff23 	bl	8898 <__tADSRT_tickNoInterp_veneer>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    3a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a54:	ed83 0a05 	vstr	s0, [r3, #20]
    3a58:	e5c1      	b.n	35de <audioTickL+0x17e>
		masterSample  = .999999f;
    3a5a:	eef0 9a67 	vmov.f32	s19, s15
    3a5e:	e74c      	b.n	38fa <audioTickL+0x49a>
		for (int i = 0; i < oscToTick; i++)
    3a60:	eddf 7a21 	vldr	s15, [pc, #132]	; 3ae8 <audioTickL+0x688>
    3a64:	eeb0 6a67 	vmov.f32	s12, s15
    3a68:	e622      	b.n	36b0 <audioTickL+0x250>
				else if (oversamplerArray[i]< -.999999f)
    3a6a:	eef4 7acb 	vcmpe.f32	s15, s22
    3a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a72:	d58f      	bpl.n	3994 <audioTickL+0x534>
					oversamplerArray[i] = -.999999f;
    3a74:	ed83 ba00 	vstr	s22, [r3]
    3a78:	e78c      	b.n	3994 <audioTickL+0x534>
					oversamplerArray[i] = .999999f;
    3a7a:	4b16      	ldr	r3, [pc, #88]	; (3ad4 <audioTickL+0x674>)
    3a7c:	edc3 aa01 	vstr	s21, [r3, #4]
    3a80:	e797      	b.n	39b2 <audioTickL+0x552>
    3a82:	bf00      	nop
    3a84:	2001488c 	.word	0x2001488c
    3a88:	20016cc6 	.word	0x20016cc6
    3a8c:	200050c4 	.word	0x200050c4
    3a90:	200050cc 	.word	0x200050cc
    3a94:	423c0000 	.word	0x423c0000
    3a98:	e0001000 	.word	0xe0001000
    3a9c:	42a00000 	.word	0x42a00000
    3aa0:	20014894 	.word	0x20014894
    3aa4:	42fe0000 	.word	0x42fe0000
    3aa8:	2001aa68 	.word	0x2001aa68
    3aac:	200004d4 	.word	0x200004d4
    3ab0:	3f7fffef 	.word	0x3f7fffef
    3ab4:	bf7fffef 	.word	0xbf7fffef
    3ab8:	bf7ffffe 	.word	0xbf7ffffe
    3abc:	200006d4 	.word	0x200006d4
    3ac0:	3f7ae148 	.word	0x3f7ae148
    3ac4:	2001489c 	.word	0x2001489c
    3ac8:	200055a0 	.word	0x200055a0
    3acc:	200050f4 	.word	0x200050f4
    3ad0:	20005114 	.word	0x20005114
    3ad4:	200055e8 	.word	0x200055e8
    3ad8:	20005588 	.word	0x20005588
    3adc:	20005060 	.word	0x20005060
    3ae0:	200055f0 	.word	0x200055f0
    3ae4:	20005070 	.word	0x20005070
    3ae8:	00000000 	.word	0x00000000
    3aec:	20014b94 	.word	0x20014b94
    3af0:	f3af 8000 	nop.w
    3af4:	f3af 8000 	nop.w
    3af8:	f3af 8000 	nop.w
    3afc:	f3af 8000 	nop.w

00003b00 <audioFrame>:
{
    3b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    3b04:	2201      	movs	r2, #1
{
    3b06:	4683      	mov	fp, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    3b08:	2108      	movs	r1, #8
    3b0a:	48b9      	ldr	r0, [pc, #740]	; (3df0 <audioFrame+0x2f0>)
	if (switchStrings)
    3b0c:	4cb9      	ldr	r4, [pc, #740]	; (3df4 <audioFrame+0x2f4>)
{
    3b0e:	ed2d 8b10 	vpush	{d8-d15}
    3b12:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    3b14:	f004 fe70 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    3b18:	4bb7      	ldr	r3, [pc, #732]	; (3df8 <audioFrame+0x2f8>)
    3b1a:	685b      	ldr	r3, [r3, #4]
    3b1c:	9304      	str	r3, [sp, #16]
	if (switchStrings)
    3b1e:	6823      	ldr	r3, [r4, #0]
    3b20:	2b00      	cmp	r3, #0
    3b22:	f040 8118 	bne.w	3d56 <audioFrame+0x256>
	switchStrings = 0;
    3b26:	2200      	movs	r2, #0
	if (newBar)
    3b28:	4bb4      	ldr	r3, [pc, #720]	; (3dfc <audioFrame+0x2fc>)
	switchStrings = 0;
    3b2a:	6022      	str	r2, [r4, #0]
	if (newBar)
    3b2c:	6819      	ldr	r1, [r3, #0]
    3b2e:	b1a1      	cbz	r1, 3b5a <audioFrame+0x5a>
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    3b30:	48b3      	ldr	r0, [pc, #716]	; (3e00 <audioFrame+0x300>)
    3b32:	eddf 6ab4 	vldr	s13, [pc, #720]	; 3e04 <audioFrame+0x304>
    3b36:	ed90 7a00 	vldr	s14, [r0]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    3b3a:	edd0 7a01 	vldr	s15, [r0, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    3b3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3b42:	49b1      	ldr	r1, [pc, #708]	; (3e08 <audioFrame+0x308>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    3b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		newBar = 0;
    3b48:	601a      	str	r2, [r3, #0]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    3b4a:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    3b4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    3b52:	ed81 7a00 	vstr	s14, [r1]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    3b56:	edc1 7a01 	vstr	s15, [r1, #4]
	if (newPluck)
    3b5a:	4bac      	ldr	r3, [pc, #688]	; (3e0c <audioFrame+0x30c>)
    3b5c:	681b      	ldr	r3, [r3, #0]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d153      	bne.n	3c0a <audioFrame+0x10a>
	if (currentActivePreset == 63)
    3b62:	f8df 9304 	ldr.w	r9, [pc, #772]	; 3e68 <audioFrame+0x368>
    3b66:	f899 3000 	ldrb.w	r3, [r9]
    3b6a:	2b3f      	cmp	r3, #63	; 0x3f
    3b6c:	f000 80bc 	beq.w	3ce8 <audioFrame+0x1e8>
	else if (currentActivePreset == 62)
    3b70:	f899 3000 	ldrb.w	r3, [r9]
    3b74:	2b3e      	cmp	r3, #62	; 0x3e
    3b76:	f000 80ce 	beq.w	3d16 <audioFrame+0x216>
	else if (currentActivePreset == 61)
    3b7a:	f899 3000 	ldrb.w	r3, [r9]
    3b7e:	2b3d      	cmp	r3, #61	; 0x3d
    3b80:	f000 8178 	beq.w	3e74 <audioFrame+0x374>
    3b84:	4ca2      	ldr	r4, [pc, #648]	; (3e10 <audioFrame+0x310>)
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    3b86:	ed9f 8aa3 	vldr	s16, [pc, #652]	; 3e14 <audioFrame+0x314>
    3b8a:	f104 0540 	add.w	r5, r4, #64	; 0x40
    3b8e:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    3b92:	eb05 058b 	add.w	r5, r5, fp, lsl #2
    3b96:	f7ff fc63 	bl	3460 <audioTickL>
    3b9a:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3b9e:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    3ba0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3ba4:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    3ba6:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    3baa:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3bae:	d1f2      	bne.n	3b96 <audioFrame+0x96>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bb0:	4899      	ldr	r0, [pc, #612]	; (3e18 <audioFrame+0x318>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3bb2:	4b91      	ldr	r3, [pc, #580]	; (3df8 <audioFrame+0x2f8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bb4:	edd0 6a00 	vldr	s13, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3bb8:	685b      	ldr	r3, [r3, #4]
    3bba:	9804      	ldr	r0, [sp, #16]
	if (frameLoadPercentage > .99f)
    3bbc:	ed9f 7a97 	vldr	s14, [pc, #604]	; 3e1c <audioFrame+0x31c>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3bc0:	1a1b      	subs	r3, r3, r0
    3bc2:	4997      	ldr	r1, [pc, #604]	; (3e20 <audioFrame+0x320>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bc4:	4a97      	ldr	r2, [pc, #604]	; (3e24 <audioFrame+0x324>)
    3bc6:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3bca:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3bd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    3bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bd8:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    3bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3be0:	dd09      	ble.n	3bf6 <audioFrame+0xf6>
		if (overSampled == 1)
    3be2:	4b91      	ldr	r3, [pc, #580]	; (3e28 <audioFrame+0x328>)
    3be4:	781a      	ldrb	r2, [r3, #0]
    3be6:	2a01      	cmp	r2, #1
    3be8:	f000 80d0 	beq.w	3d8c <audioFrame+0x28c>
		else if (oscToTick > 0)
    3bec:	4a8f      	ldr	r2, [pc, #572]	; (3e2c <audioFrame+0x32c>)
    3bee:	7813      	ldrb	r3, [r2, #0]
    3bf0:	b10b      	cbz	r3, 3bf6 <audioFrame+0xf6>
			oscToTick--;
    3bf2:	3b01      	subs	r3, #1
    3bf4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    3bf6:	2200      	movs	r2, #0
    3bf8:	2108      	movs	r1, #8
    3bfa:	487d      	ldr	r0, [pc, #500]	; (3df0 <audioFrame+0x2f0>)
}
    3bfc:	b00d      	add	sp, #52	; 0x34
    3bfe:	ecbd 8b10 	vpop	{d8-d15}
    3c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    3c06:	f004 bdf7 	b.w	87f8 <__HAL_GPIO_WritePin_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    3c0a:	f8df a260 	ldr.w	sl, [pc, #608]	; 3e6c <audioFrame+0x36c>
    3c0e:	f89a 0000 	ldrb.w	r0, [sl]
    3c12:	2800      	cmp	r0, #0
    3c14:	f000 80a3 	beq.w	3d5e <audioFrame+0x25e>
    3c18:	4985      	ldr	r1, [pc, #532]	; (3e30 <audioFrame+0x330>)
    3c1a:	2400      	movs	r4, #0
    3c1c:	f8df 9248 	ldr.w	r9, [pc, #584]	; 3e68 <audioFrame+0x368>
    3c20:	f8df 824c 	ldr.w	r8, [pc, #588]	; 3e70 <audioFrame+0x370>
    3c24:	4b83      	ldr	r3, [pc, #524]	; (3e34 <audioFrame+0x334>)
    3c26:	4a84      	ldr	r2, [pc, #528]	; (3e38 <audioFrame+0x338>)
    3c28:	9102      	str	r1, [sp, #8]
    3c2a:	4984      	ldr	r1, [pc, #528]	; (3e3c <audioFrame+0x33c>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    3c2c:	f8cd b018 	str.w	fp, [sp, #24]
    3c30:	46c3      	mov	fp, r8
    3c32:	9101      	str	r1, [sp, #4]
    3c34:	f8cd a014 	str.w	sl, [sp, #20]
    3c38:	469a      	mov	sl, r3
    3c3a:	4981      	ldr	r1, [pc, #516]	; (3e40 <audioFrame+0x340>)
    3c3c:	f8cd 900c 	str.w	r9, [sp, #12]
    3c40:	4691      	mov	r9, r2
					tLivingString2_setDecay(&strings[i], 0.2f);
    3c42:	eddf ba80 	vldr	s23, [pc, #512]	; 3e44 <audioFrame+0x344>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3c46:	ed9f ba80 	vldr	s22, [pc, #512]	; 3e48 <audioFrame+0x348>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    3c4a:	eddf aa80 	vldr	s21, [pc, #512]	; 3e4c <audioFrame+0x34c>
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    3c4e:	ed9f ca80 	vldr	s24, [pc, #512]	; 3e50 <audioFrame+0x350>
    3c52:	4e80      	ldr	r6, [pc, #512]	; (3e54 <audioFrame+0x354>)
    3c54:	4f80      	ldr	r7, [pc, #512]	; (3e58 <audioFrame+0x358>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    3c56:	ed9f aa81 	vldr	s20, [pc, #516]	; 3e5c <audioFrame+0x35c>
    3c5a:	9100      	str	r1, [sp, #0]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    3c5c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
    3c60:	2d00      	cmp	r5, #0
    3c62:	d16f      	bne.n	3d44 <audioFrame+0x244>
    3c64:	f8db 3000 	ldr.w	r3, [fp]
    3c68:	2b00      	cmp	r3, #0
    3c6a:	f040 8092 	bne.w	3d92 <audioFrame+0x292>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    3c6e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
    3c72:	2900      	cmp	r1, #0
    3c74:	dd13      	ble.n	3c9e <audioFrame+0x19e>
				if (currentActivePreset < 60)
    3c76:	9b03      	ldr	r3, [sp, #12]
    3c78:	781b      	ldrb	r3, [r3, #0]
    3c7a:	2b3b      	cmp	r3, #59	; 0x3b
    3c7c:	d972      	bls.n	3d64 <audioFrame+0x264>
				else if (currentActivePreset == 63)
    3c7e:	9b03      	ldr	r3, [sp, #12]
    3c80:	781b      	ldrb	r3, [r3, #0]
    3c82:	2b3f      	cmp	r3, #63	; 0x3f
    3c84:	f000 81fa 	beq.w	407c <_Min_Heap_Size+0x7c>
				else if (currentActivePreset == 62)
    3c88:	9b03      	ldr	r3, [sp, #12]
    3c8a:	781b      	ldrb	r3, [r3, #0]
    3c8c:	2b3e      	cmp	r3, #62	; 0x3e
    3c8e:	f000 8261 	beq.w	4154 <_Min_Heap_Size+0x154>
				else if (currentActivePreset == 61)
    3c92:	9b03      	ldr	r3, [sp, #12]
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2b3d      	cmp	r3, #61	; 0x3d
    3c98:	f000 8281 	beq.w	419e <_Min_Heap_Size+0x19e>
    3c9c:	2300      	movs	r3, #0
			previousStringInputs[i] = stringInputs[i];
    3c9e:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
    3ca2:	3401      	adds	r4, #1
    3ca4:	9b02      	ldr	r3, [sp, #8]
    3ca6:	f10b 0b04 	add.w	fp, fp, #4
    3caa:	42a0      	cmp	r0, r4
    3cac:	f10a 0a04 	add.w	sl, sl, #4
    3cb0:	f103 0304 	add.w	r3, r3, #4
    3cb4:	f106 0604 	add.w	r6, r6, #4
    3cb8:	f109 0904 	add.w	r9, r9, #4
    3cbc:	9302      	str	r3, [sp, #8]
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	f103 0304 	add.w	r3, r3, #4
    3cc4:	9301      	str	r3, [sp, #4]
    3cc6:	9b00      	ldr	r3, [sp, #0]
    3cc8:	f103 0348 	add.w	r3, r3, #72	; 0x48
    3ccc:	9300      	str	r3, [sp, #0]
    3cce:	dcc5      	bgt.n	3c5c <audioFrame+0x15c>
    3cd0:	f8dd b018 	ldr.w	fp, [sp, #24]
    3cd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
		newPluck = 0;
    3cd8:	2300      	movs	r3, #0
    3cda:	4a4c      	ldr	r2, [pc, #304]	; (3e0c <audioFrame+0x30c>)
    3cdc:	6013      	str	r3, [r2, #0]
	if (currentActivePreset == 63)
    3cde:	f899 3000 	ldrb.w	r3, [r9]
    3ce2:	2b3f      	cmp	r3, #63	; 0x3f
    3ce4:	f47f af44 	bne.w	3b70 <audioFrame+0x70>
    3ce8:	4c49      	ldr	r4, [pc, #292]	; (3e10 <audioFrame+0x310>)
			current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    3cea:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 3e14 <audioFrame+0x314>
    3cee:	f104 0540 	add.w	r5, r4, #64	; 0x40
    3cf2:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    3cf6:	eb05 058b 	add.w	r5, r5, fp, lsl #2
    3cfa:	f7fd fd91 	bl	1820 <audioTickString>
    3cfe:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d02:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    3d04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d08:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    3d0a:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    3d0e:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d12:	d1f2      	bne.n	3cfa <audioFrame+0x1fa>
    3d14:	e74c      	b.n	3bb0 <audioFrame+0xb0>
    3d16:	4c3e      	ldr	r4, [pc, #248]	; (3e10 <audioFrame+0x310>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    3d18:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 3e14 <audioFrame+0x314>
    3d1c:	f104 0540 	add.w	r5, r4, #64	; 0x40
    3d20:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    3d24:	eb05 058b 	add.w	r5, r5, fp, lsl #2
    3d28:	f7fd fe8a 	bl	1a40 <audioTickString2>
    3d2c:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d30:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    3d32:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d36:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    3d38:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    3d3c:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d40:	d1f2      	bne.n	3d28 <audioFrame+0x228>
    3d42:	e735      	b.n	3bb0 <audioFrame+0xb0>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    3d44:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	f8db 3000 	ldr.w	r3, [fp]
    3d4e:	dda6      	ble.n	3c9e <audioFrame+0x19e>
    3d50:	2b00      	cmp	r3, #0
    3d52:	d1a4      	bne.n	3c9e <audioFrame+0x19e>
    3d54:	e78f      	b.n	3c76 <audioFrame+0x176>
		switchStringModel(switchStrings);
    3d56:	6820      	ldr	r0, [r4, #0]
    3d58:	f7fc fc22 	bl	5a0 <switchStringModel>
    3d5c:	e6e3      	b.n	3b26 <audioFrame+0x26>
    3d5e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3e68 <audioFrame+0x368>
    3d62:	e7b9      	b.n	3cd8 <audioFrame+0x1d8>
						tADSRT_off(&envs[v][i]);
    3d64:	4650      	mov	r0, sl
    3d66:	f004 fdcb 	bl	8900 <__tADSRT_off_veneer>
    3d6a:	f10a 0008 	add.w	r0, sl, #8
    3d6e:	f004 fdc7 	bl	8900 <__tADSRT_off_veneer>
    3d72:	f10a 0010 	add.w	r0, sl, #16
    3d76:	f004 fdc3 	bl	8900 <__tADSRT_off_veneer>
    3d7a:	f10a 0018 	add.w	r0, sl, #24
    3d7e:	f004 fdbf 	bl	8900 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    3d82:	9a05      	ldr	r2, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
    3d84:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    3d88:	7810      	ldrb	r0, [r2, #0]
    3d8a:	e788      	b.n	3c9e <audioFrame+0x19e>
			overSampled = 0;
    3d8c:	2200      	movs	r2, #0
    3d8e:	701a      	strb	r2, [r3, #0]
    3d90:	e731      	b.n	3bf6 <audioFrame+0xf6>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3d92:	ee07 3a90 	vmov	s15, r3
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    3d96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3d9a:	eeb0 0a4a 	vmov.f32	s0, s20
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3d9e:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    3da2:	ee60 0a8b 	vmul.f32	s1, s1, s22
    3da6:	f003 f8eb 	bl	6f80 <LEAF_clip>
    3daa:	4b2d      	ldr	r3, [pc, #180]	; (3e60 <audioFrame+0x360>)
    3dac:	eef0 9a40 	vmov.f32	s19, s0
				stringOctave[i] = octave;
    3db0:	00a2      	lsls	r2, r4, #2
    3db2:	eb03 0884 	add.w	r8, r3, r4, lsl #2
    3db6:	4b2b      	ldr	r3, [pc, #172]	; (3e64 <audioFrame+0x364>)
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	f8c8 3000 	str.w	r3, [r8]
				if (currentActivePreset < 60)
    3dbe:	9b03      	ldr	r3, [sp, #12]
    3dc0:	781b      	ldrb	r3, [r3, #0]
    3dc2:	2b3b      	cmp	r3, #59	; 0x3b
    3dc4:	f240 815e 	bls.w	4084 <_Min_Heap_Size+0x84>
				else if (currentActivePreset == 63)
    3dc8:	9b03      	ldr	r3, [sp, #12]
    3dca:	781b      	ldrb	r3, [r3, #0]
    3dcc:	2b3f      	cmp	r3, #63	; 0x3f
    3dce:	f000 81d7 	beq.w	4180 <_Min_Heap_Size+0x180>
				else if (currentActivePreset == 62)
    3dd2:	9b03      	ldr	r3, [sp, #12]
    3dd4:	781b      	ldrb	r3, [r3, #0]
    3dd6:	2b3e      	cmp	r3, #62	; 0x3e
    3dd8:	f000 822a 	beq.w	4230 <_Min_Heap_Size+0x230>
				else if (currentActivePreset == 61)
    3ddc:	9b03      	ldr	r3, [sp, #12]
    3dde:	781b      	ldrb	r3, [r3, #0]
    3de0:	2b3d      	cmp	r3, #61	; 0x3d
    3de2:	f000 82b1 	beq.w	4348 <_Min_Heap_Size+0x348>
		for (int i = 0; i < numStringsThisBoard; i++)
    3de6:	9a05      	ldr	r2, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
    3de8:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    3dec:	7810      	ldrb	r0, [r2, #0]
    3dee:	e756      	b.n	3c9e <audioFrame+0x19e>
    3df0:	58020000 	.word	0x58020000
    3df4:	20014868 	.word	0x20014868
    3df8:	e0001000 	.word	0xe0001000
    3dfc:	2000554c 	.word	0x2000554c
    3e00:	20014850 	.word	0x20014850
    3e04:	3b000000 	.word	0x3b000000
    3e08:	20000a1c 	.word	0x20000a1c
    3e0c:	20005550 	.word	0x20005550
    3e10:	30000040 	.word	0x30000040
    3e14:	4b000000 	.word	0x4b000000
    3e18:	20000004 	.word	0x20000004
    3e1c:	3f7d70a4 	.word	0x3f7d70a4
    3e20:	20014878 	.word	0x20014878
    3e24:	200050d8 	.word	0x200050d8
    3e28:	20000025 	.word	0x20000025
    3e2c:	20000024 	.word	0x20000024
    3e30:	20014740 	.word	0x20014740
    3e34:	20005074 	.word	0x20005074
    3e38:	20005094 	.word	0x20005094
    3e3c:	2001a808 	.word	0x2001a808
    3e40:	20000974 	.word	0x20000974
    3e44:	3e4ccccd 	.word	0x3e4ccccd
    3e48:	37800080 	.word	0x37800080
    3e4c:	3ffeb852 	.word	0x3ffeb852
    3e50:	44fa0000 	.word	0x44fa0000
    3e54:	20014860 	.word	0x20014860
    3e58:	30000000 	.word	0x30000000
    3e5c:	00000000 	.word	0x00000000
    3e60:	20014848 	.word	0x20014848
    3e64:	20005584 	.word	0x20005584
    3e68:	200006d8 	.word	0x200006d8
    3e6c:	2000000d 	.word	0x2000000d
    3e70:	20014810 	.word	0x20014810
    3e74:	4bd0      	ldr	r3, [pc, #832]	; (41b8 <_Min_Heap_Size+0x1b8>)
    3e76:	4ed1      	ldr	r6, [pc, #836]	; (41bc <_Min_Heap_Size+0x1bc>)
    3e78:	f103 0240 	add.w	r2, r3, #64	; 0x40
    3e7c:	eb03 038b 	add.w	r3, r3, fp, lsl #2
			tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    3e80:	eddf aacf 	vldr	s21, [pc, #828]	; 41c0 <_Min_Heap_Size+0x1c0>
    3e84:	f106 0730 	add.w	r7, r6, #48	; 0x30
    3e88:	9302      	str	r3, [sp, #8]
    3e8a:	eb02 038b 	add.w	r3, r2, fp, lsl #2
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3e8e:	ed9f aacd 	vldr	s20, [pc, #820]	; 41c4 <_Min_Heap_Size+0x1c4>
    3e92:	9305      	str	r3, [sp, #20]
					if (tempFreq < 18000.0f)
    3e94:	eddf 9acc 	vldr	s19, [pc, #816]	; 41c8 <_Min_Heap_Size+0x1c8>
    3e98:	4bcc      	ldr	r3, [pc, #816]	; (41cc <_Min_Heap_Size+0x1cc>)
    3e9a:	f8df a38c 	ldr.w	sl, [pc, #908]	; 4228 <_Min_Heap_Size+0x228>
    3e9e:	9301      	str	r3, [sp, #4]
			for (int i = 0; i < 12; i++)
    3ea0:	f8df 8388 	ldr.w	r8, [pc, #904]	; 422c <_Min_Heap_Size+0x22c>
    3ea4:	4dc5      	ldr	r5, [pc, #788]	; (41bc <_Min_Heap_Size+0x1bc>)
    3ea6:	4cca      	ldr	r4, [pc, #808]	; (41d0 <_Min_Heap_Size+0x1d0>)
				knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    3ea8:	4640      	mov	r0, r8
    3eaa:	f002 ffc9 	bl	6e40 <tExpSmooth_tick>
				for (int v = 0; v < numStringsThisBoard; v++)
    3eae:	f89a 3000 	ldrb.w	r3, [sl]
				knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    3eb2:	eca5 0a01 	vstmia	r5!, {s0}
				for (int v = 0; v < numStringsThisBoard; v++)
    3eb6:	b12b      	cbz	r3, 3ec4 <audioFrame+0x3c4>
    3eb8:	2b01      	cmp	r3, #1
					sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    3eba:	ed84 0a08 	vstr	s0, [r4, #32]
				for (int v = 0; v < numStringsThisBoard; v++)
    3ebe:	d001      	beq.n	3ec4 <audioFrame+0x3c4>
					sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    3ec0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
			for (int i = 0; i < 12; i++)
    3ec4:	42af      	cmp	r7, r5
    3ec6:	f108 0804 	add.w	r8, r8, #4
    3eca:	f104 0408 	add.w	r4, r4, #8
    3ece:	d1eb      	bne.n	3ea8 <audioFrame+0x3a8>
			float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    3ed0:	48c0      	ldr	r0, [pc, #768]	; (41d4 <_Min_Heap_Size+0x1d4>)
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3ed2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    3ed6:	f004 fd8f 	bl	89f8 <__tNoise_tick_veneer>
    3eda:	48bf      	ldr	r0, [pc, #764]	; (41d8 <_Min_Heap_Size+0x1d8>)
    3edc:	f004 fcc8 	bl	8870 <__tVZFilter_tickEfficient_veneer>
    3ee0:	eeb0 ba40 	vmov.f32	s22, s0
			filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    3ee4:	48bb      	ldr	r0, [pc, #748]	; (41d4 <_Min_Heap_Size+0x1d4>)
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    3ee6:	f04f 0800 	mov.w	r8, #0
			filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    3eea:	f004 fd85 	bl	89f8 <__tNoise_tick_veneer>
    3eee:	48bb      	ldr	r0, [pc, #748]	; (41dc <_Min_Heap_Size+0x1dc>)
    3ef0:	f004 fcbe 	bl	8870 <__tVZFilter_tickEfficient_veneer>
    3ef4:	ee3b ba00 	vadd.f32	s22, s22, s0
			tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    3ef8:	ed96 0a00 	vldr	s0, [r6]
			float tempSamp = 0.0f;
    3efc:	eddf 8ab8 	vldr	s17, [pc, #736]	; 41e0 <_Min_Heap_Size+0x1e0>
			tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    3f00:	ee20 0a2a 	vmul.f32	s0, s0, s21
    3f04:	4db7      	ldr	r5, [pc, #732]	; (41e4 <_Min_Heap_Size+0x1e4>)
    3f06:	f004 fccf 	bl	88a8 <__faster_mtof_veneer>
    3f0a:	48b3      	ldr	r0, [pc, #716]	; (41d8 <_Min_Heap_Size+0x1d8>)
    3f0c:	f004 fd54 	bl	89b8 <__tVZFilter_setFreq_veneer>
			tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[1] * 128.0f));
    3f10:	ed96 0a01 	vldr	s0, [r6, #4]
    3f14:	ee20 0a2a 	vmul.f32	s0, s0, s21
    3f18:	f004 fcc6 	bl	88a8 <__faster_mtof_veneer>
    3f1c:	48af      	ldr	r0, [pc, #700]	; (41dc <_Min_Heap_Size+0x1dc>)
    3f1e:	f004 fd4b 	bl	89b8 <__tVZFilter_setFreq_veneer>
			float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    3f22:	48b1      	ldr	r0, [pc, #708]	; (41e8 <_Min_Heap_Size+0x1e8>)
    3f24:	f002 ff8c 	bl	6e40 <tExpSmooth_tick>
    3f28:	4bb0      	ldr	r3, [pc, #704]	; (41ec <_Min_Heap_Size+0x1ec>)
    3f2a:	eef0 ba40 	vmov.f32	s23, s0
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    3f2e:	f8cd a00c 	str.w	sl, [sp, #12]
    3f32:	9300      	str	r3, [sp, #0]
    3f34:	4bae      	ldr	r3, [pc, #696]	; (41f0 <_Min_Heap_Size+0x1f0>)
    3f36:	4699      	mov	r9, r3
				float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    3f38:	4bae      	ldr	r3, [pc, #696]	; (41f4 <_Min_Heap_Size+0x1f4>)
    3f3a:	ea4f 0488 	mov.w	r4, r8, lsl #2
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f3e:	46cb      	mov	fp, r9
				for (int j = 0; j < NUM_OVERTONES; j++)
    3f40:	f04f 0a00 	mov.w	sl, #0
				float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    3f44:	eb03 0088 	add.w	r0, r3, r8, lsl #2
    3f48:	f004 fd32 	bl	89b0 <__tADSRT_tick_veneer>
				tempSamp += filtNoise * noiseEnv * knobScaled[7];
    3f4c:	edd6 7a07 	vldr	s15, [r6, #28]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f50:	9b01      	ldr	r3, [sp, #4]
				tempSamp += filtNoise * noiseEnv * knobScaled[7];
    3f52:	ee6b 7a27 	vmul.f32	s15, s22, s15
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f56:	441c      	add	r4, r3
    3f58:	9b00      	ldr	r3, [sp, #0]
    3f5a:	ed94 7a00 	vldr	s14, [r4]
				tempSamp += filtNoise * noiseEnv * knobScaled[7];
    3f5e:	eee0 8a27 	vfma.f32	s17, s0, s15
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f62:	ecb3 0a01 	vldmia	r3!, {s0}
    3f66:	eb08 04c8 	add.w	r4, r8, r8, lsl #3
    3f6a:	ee37 0a00 	vadd.f32	s0, s14, s0
    3f6e:	9300      	str	r3, [sp, #0]
    3f70:	f004 fc0a 	bl	8788 <__mtof_veneer>
    3f74:	4ba0      	ldr	r3, [pc, #640]	; (41f8 <_Min_Heap_Size+0x1f8>)
    3f76:	eca5 0a01 	vstmia	r5!, {s0}
				for (int j = 0; j < NUM_OVERTONES; j++)
    3f7a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    3f7e:	e004      	b.n	3f8a <audioFrame+0x48a>
    3f80:	f1ba 0f0c 	cmp.w	sl, #12
    3f84:	f104 0404 	add.w	r4, r4, #4
    3f88:	d030      	beq.n	3fec <audioFrame+0x4ec>
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    3f8a:	4658      	mov	r0, fp
				for (int j = 0; j < NUM_OVERTONES; j++)
    3f8c:	f10b 0b04 	add.w	fp, fp, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    3f90:	f004 fc82 	bl	8898 <__tADSRT_tickNoInterp_veneer>
    3f94:	ee06 aa10 	vmov	s12, sl
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3f98:	edd6 6a04 	vldr	s13, [r6, #16]
    3f9c:	f10a 0a01 	add.w	sl, sl, #1
    3fa0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    3fa4:	ed55 7a01 	vldr	s15, [r5, #-4]
    3fa8:	ee66 6a8a 	vmul.f32	s13, s13, s20
    3fac:	ee07 aa10 	vmov	s14, sl
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    3fb0:	eeb0 8a40 	vmov.f32	s16, s0
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3fb4:	eeb0 0a49 	vmov.f32	s0, s18
    3fb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3fbc:	eea6 0a26 	vfma.f32	s0, s12, s13
    3fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
    3fc4:	ee27 0a80 	vmul.f32	s0, s15, s0
					if (tempFreq < 18000.0f)
    3fc8:	eeb4 0ae9 	vcmpe.f32	s0, s19
    3fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3fd0:	d5d6      	bpl.n	3f80 <audioFrame+0x480>
						tCycle_setFreq(&additive[i][j], tempFreq);
    3fd2:	4620      	mov	r0, r4
    3fd4:	f004 fcf8 	bl	89c8 <__tCycle_setFreq_veneer>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    3fd8:	4620      	mov	r0, r4
    3fda:	f004 fc1d 	bl	8818 <__tCycle_tick_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
    3fde:	f1ba 0f0c 	cmp.w	sl, #12
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    3fe2:	eee0 8a08 	vfma.f32	s17, s0, s16
				for (int j = 0; j < NUM_OVERTONES; j++)
    3fe6:	f104 0404 	add.w	r4, r4, #4
    3fea:	d1ce      	bne.n	3f8a <audioFrame+0x48a>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    3fec:	f109 0948 	add.w	r9, r9, #72	; 0x48
    3ff0:	f1b8 0f00 	cmp.w	r8, #0
    3ff4:	d03f      	beq.n	4076 <_Min_Heap_Size+0x76>
			float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    3ff6:	ed9f 0a81 	vldr	s0, [pc, #516]	; 41fc <_Min_Heap_Size+0x1fc>
    3ffa:	eddf 7a81 	vldr	s15, [pc, #516]	; 4200 <_Min_Heap_Size+0x200>
    3ffe:	eef0 0a40 	vmov.f32	s1, s0
    4002:	ed9f 1a80 	vldr	s2, [pc, #512]	; 4204 <_Min_Heap_Size+0x204>
    4006:	f8dd a00c 	ldr.w	sl, [sp, #12]
    400a:	eeeb 0aa7 	vfma.f32	s1, s23, s15
    400e:	f002 ffb7 	bl	6f80 <LEAF_clip>
			int volIdxInt = (int) volIdx;
    4012:	eefd 6ac0 	vcvt.s32.f32	s13, s0
			float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4016:	497c      	ldr	r1, [pc, #496]	; (4208 <_Min_Heap_Size+0x208>)
			float omAlpha = 1.0f - alpha;
    4018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			current_sample = (int32_t)(tempSamp * TWO_TO_23);
    401c:	eddf 7a7b 	vldr	s15, [pc, #492]	; 420c <_Min_Heap_Size+0x20c>
			int volIdxInt = (int) volIdx;
    4020:	ee16 2a90 	vmov	r2, s13
			float alpha = volIdx-volIdxInt;
    4024:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			current_sample = (int32_t)(tempSamp * TWO_TO_23);
    4028:	ee68 7aa7 	vmul.f32	s15, s17, s15
			int volIdxIntPlus = (volIdxInt + 1) & 127;
    402c:	1c53      	adds	r3, r2, #1
			float omAlpha = 1.0f - alpha;
    402e:	ee37 7a40 	vsub.f32	s14, s14, s0
			float alpha = volIdx-volIdxInt;
    4032:	ee70 8a66 	vsub.f32	s17, s0, s13
			float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4036:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			int volIdxIntPlus = (volIdxInt + 1) & 127;
    403a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			float omAlpha = 1.0f - alpha;
    403e:	ee37 7a26 	vadd.f32	s14, s14, s13
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4042:	edd2 6a00 	vldr	s13, [r2]
    4046:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    404a:	9a02      	ldr	r2, [sp, #8]
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    404c:	ed93 0a00 	vldr	s0, [r3]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4050:	3208      	adds	r2, #8
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4052:	ee68 8a80 	vmul.f32	s17, s17, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4056:	9202      	str	r2, [sp, #8]
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4058:	eee6 8a87 	vfma.f32	s17, s13, s14
			current_sample = (int32_t)(tempSamp * TWO_TO_23);
    405c:	ee67 8aa8 	vmul.f32	s17, s15, s17
    4060:	eefd 7ae8 	vcvt.s32.f32	s15, s17
    4064:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    4068:	e942 3302 	strd	r3, r3, [r2, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    406c:	9b05      	ldr	r3, [sp, #20]
    406e:	4293      	cmp	r3, r2
    4070:	f47f af16 	bne.w	3ea0 <audioFrame+0x3a0>
    4074:	e59c      	b.n	3bb0 <audioFrame+0xb0>
    4076:	f04f 0801 	mov.w	r8, #1
    407a:	e75d      	b.n	3f38 <audioFrame+0x438>
					lsDecay[i] = 0;
    407c:	2300      	movs	r3, #0
    407e:	4964      	ldr	r1, [pc, #400]	; (4210 <_Min_Heap_Size+0x210>)
    4080:	5463      	strb	r3, [r4, r1]
    4082:	e60c      	b.n	3c9e <audioFrame+0x19e>
    4084:	9a01      	ldr	r2, [sp, #4]
						voiceSounding = 1;
    4086:	46b0      	mov	r8, r6
    4088:	4626      	mov	r6, r4
    408a:	f5a2 7313 	sub.w	r3, r2, #588	; 0x24c
    408e:	3254      	adds	r2, #84	; 0x54
    4090:	461c      	mov	r4, r3
    4092:	e9cd 2507 	strd	r2, r5, [sp, #28]
    4096:	4655      	mov	r5, sl
						if (useVelocity == 0) envVel = 1.f;
    4098:	edd4 7a00 	vldr	s15, [r4]
						tADSRT_on(&envs[v][i], envVel);
    409c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    40a0:	4628      	mov	r0, r5
					for (int v = 0; v < NUM_ENV; v++)
    40a2:	34a8      	adds	r4, #168	; 0xa8
						if (useVelocity == 0) envVel = 1.f;
    40a4:	eef5 7a40 	vcmp.f32	s15, #0.0
    40a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40ac:	d047      	beq.n	413e <_Min_Heap_Size+0x13e>
						tADSRT_on(&envs[v][i], envVel);
    40ae:	eeb0 0a69 	vmov.f32	s0, s19
					for (int v = 0; v < NUM_ENV; v++)
    40b2:	3508      	adds	r5, #8
						tADSRT_on(&envs[v][i], envVel);
    40b4:	f004 fb44 	bl	8740 <__tADSRT_on_veneer>
						voiceSounding = 1;
    40b8:	4b56      	ldr	r3, [pc, #344]	; (4214 <_Min_Heap_Size+0x214>)
    40ba:	f04f 0201 	mov.w	r2, #1
    40be:	701a      	strb	r2, [r3, #0]
					for (int v = 0; v < NUM_ENV; v++)
    40c0:	9b07      	ldr	r3, [sp, #28]
    40c2:	429c      	cmp	r4, r3
    40c4:	d1e8      	bne.n	4098 <_Min_Heap_Size+0x98>
    40c6:	4634      	mov	r4, r6
    40c8:	4646      	mov	r6, r8
						if (noteOnSync > 0.5f)
    40ca:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    40ce:	9d08      	ldr	r5, [sp, #32]
    40d0:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
				if (currentActivePreset < 60)
    40d4:	9607      	str	r6, [sp, #28]
    40d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
    40da:	009b      	lsls	r3, r3, #2
    40dc:	330c      	adds	r3, #12
    40de:	461e      	mov	r6, r3
						if (noteOnSync > 0.5f)
    40e0:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    40e4:	4628      	mov	r0, r5
    40e6:	4621      	mov	r1, r4
					for (int v = 0; v < NUM_LFOS; v++)
    40e8:	3501      	adds	r5, #1
						if (noteOnSync > 0.5f)
    40ea:	eef4 7ac8 	vcmpe.f32	s15, s16
    40ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40f2:	dd04      	ble.n	40fe <_Min_Heap_Size+0xfe>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    40f4:	ed98 0a00 	vldr	s0, [r8]
    40f8:	f858 2006 	ldr.w	r2, [r8, r6]
    40fc:	4790      	blx	r2
					for (int v = 0; v < NUM_LFOS; v++)
    40fe:	2d04      	cmp	r5, #4
    4100:	f108 088c 	add.w	r8, r8, #140	; 0x8c
    4104:	d1ec      	bne.n	40e0 <_Min_Heap_Size+0xe0>
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4106:	4844      	ldr	r0, [pc, #272]	; (4218 <_Min_Heap_Size+0x218>)
    4108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    410c:	4d43      	ldr	r5, [pc, #268]	; (421c <_Min_Heap_Size+0x21c>)
    410e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4112:	7801      	ldrb	r1, [r0, #0]
					sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    4114:	9a02      	ldr	r2, [sp, #8]
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4116:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    411a:	3101      	adds	r1, #1
					sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    411c:	edc2 9a00 	vstr	s19, [r2]
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4120:	edd5 7a00 	vldr	s15, [r5]
    4124:	7001      	strb	r1, [r0, #0]
    4126:	ee77 7aa6 	vadd.f32	s15, s15, s13
    412a:	9e07      	ldr	r6, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    412c:	f8db 3000 	ldr.w	r3, [fp]
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4130:	ee67 7a87 	vmul.f32	s15, s15, s14
    4134:	edc2 7a02 	vstr	s15, [r2, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    4138:	9a05      	ldr	r2, [sp, #20]
    413a:	7810      	ldrb	r0, [r2, #0]
    413c:	e5af      	b.n	3c9e <audioFrame+0x19e>
						tADSRT_on(&envs[v][i], envVel);
    413e:	f004 faff 	bl	8740 <__tADSRT_on_veneer>
						voiceSounding = 1;
    4142:	4b34      	ldr	r3, [pc, #208]	; (4214 <_Min_Heap_Size+0x214>)
    4144:	f04f 0201 	mov.w	r2, #1
					for (int v = 0; v < NUM_ENV; v++)
    4148:	3508      	adds	r5, #8
						voiceSounding = 1;
    414a:	701a      	strb	r2, [r3, #0]
					for (int v = 0; v < NUM_ENV; v++)
    414c:	9b07      	ldr	r3, [sp, #28]
    414e:	42a3      	cmp	r3, r4
    4150:	d1a2      	bne.n	4098 <_Min_Heap_Size+0x98>
    4152:	e7b8      	b.n	40c6 <_Min_Heap_Size+0xc6>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    4154:	eeb0 0a4a 	vmov.f32	s0, s20
    4158:	4630      	mov	r0, r6
    415a:	f004 fafd 	bl	8758 <__tLivingString2_setTargetLev_veneer>
					tLivingString2_setLevMode(&strings[i], 0);
    415e:	4630      	mov	r0, r6
    4160:	2100      	movs	r1, #0
    4162:	f004 fae5 	bl	8730 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setDecay(&strings[i], 0.2f);
    4166:	eeb0 0a6b 	vmov.f32	s0, s23
    416a:	4630      	mov	r0, r6
    416c:	f004 fc50 	bl	8a10 <__tLivingString2_setDecay_veneer>
					tADSRT_off(&fenvelopes[i]);
    4170:	4648      	mov	r0, r9
    4172:	f004 fbc5 	bl	8900 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    4176:	9a05      	ldr	r2, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
    4178:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    417c:	7810      	ldrb	r0, [r2, #0]
    417e:	e58e      	b.n	3c9e <audioFrame+0x19e>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
    4180:	4b27      	ldr	r3, [pc, #156]	; (4220 <_Min_Heap_Size+0x220>)
    4182:	4828      	ldr	r0, [pc, #160]	; (4224 <_Min_Heap_Size+0x224>)
    4184:	edd3 0a00 	vldr	s1, [r3]
    4188:	4410      	add	r0, r2
    418a:	f004 fb1d 	bl	87c8 <__tSimpleLivingString3_pluck_veneer>
					lsDecay[i] = 1;
    418e:	4b20      	ldr	r3, [pc, #128]	; (4210 <_Min_Heap_Size+0x210>)
    4190:	2101      	movs	r1, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    4192:	9a05      	ldr	r2, [sp, #20]
					lsDecay[i] = 1;
    4194:	54e1      	strb	r1, [r4, r3]
		for (int i = 0; i < numStringsThisBoard; i++)
    4196:	7810      	ldrb	r0, [r2, #0]
			previousStringInputs[i] = stringInputs[i];
    4198:	f8db 3000 	ldr.w	r3, [fp]
    419c:	e57f      	b.n	3c9e <audioFrame+0x19e>
    419e:	9b00      	ldr	r3, [sp, #0]
    41a0:	4698      	mov	r8, r3
    41a2:	f103 0530 	add.w	r5, r3, #48	; 0x30
						tADSRT_off(&additiveEnv[i][j]);
    41a6:	4640      	mov	r0, r8
					for (int j = 0; j < NUM_OVERTONES; j++)
    41a8:	f108 0804 	add.w	r8, r8, #4
						tADSRT_off(&additiveEnv[i][j]);
    41ac:	f004 fba8 	bl	8900 <__tADSRT_off_veneer>
					for (int j = 0; j < NUM_OVERTONES; j++)
    41b0:	45a8      	cmp	r8, r5
    41b2:	d1f8      	bne.n	41a6 <_Min_Heap_Size+0x1a6>
    41b4:	e7dc      	b.n	4170 <_Min_Heap_Size+0x170>
    41b6:	bf00      	nop
    41b8:	30000040 	.word	0x30000040
    41bc:	20005218 	.word	0x20005218
    41c0:	43000000 	.word	0x43000000
    41c4:	3b449ba6 	.word	0x3b449ba6
    41c8:	468ca000 	.word	0x468ca000
    41cc:	20014840 	.word	0x20014840
    41d0:	200146b0 	.word	0x200146b0
    41d4:	20005544 	.word	0x20005544
    41d8:	2000555c 	.word	0x2000555c
    41dc:	20005560 	.word	0x20005560
    41e0:	00000000 	.word	0x00000000
    41e4:	200147e0 	.word	0x200147e0
    41e8:	200148fc 	.word	0x200148fc
    41ec:	20014848 	.word	0x20014848
    41f0:	20000974 	.word	0x20000974
    41f4:	20005094 	.word	0x20005094
    41f8:	200008e4 	.word	0x200008e4
    41fc:	423c0000 	.word	0x423c0000
    4200:	42a00000 	.word	0x42a00000
    4204:	42fe0000 	.word	0x42fe0000
    4208:	200004d4 	.word	0x200004d4
    420c:	4a4ccccd 	.word	0x4a4ccccd
    4210:	200053fc 	.word	0x200053fc
    4214:	200148f0 	.word	0x200148f0
    4218:	20005b60 	.word	0x20005b60
    421c:	2001aa94 	.word	0x2001aa94
    4220:	20000148 	.word	0x20000148
    4224:	200053e4 	.word	0x200053e4
    4228:	2000000d 	.word	0x2000000d
    422c:	2000528c 	.word	0x2000528c
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    4230:	4b5d      	ldr	r3, [pc, #372]	; (43a8 <_Min_Heap_Size+0x3a8>)
					tADSRT_on(&fenvelopes[i], amplitz);
    4232:	4648      	mov	r0, r9
					float pluckAmp = amplitz * 2.0f; //was 4
    4234:	ee79 9aa9 	vadd.f32	s19, s19, s19
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    4238:	9307      	str	r3, [sp, #28]
					tADSRT_on(&fenvelopes[i], amplitz);
    423a:	f004 fa81 	bl	8740 <__tADSRT_on_veneer>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    423e:	4b5a      	ldr	r3, [pc, #360]	; (43a8 <_Min_Heap_Size+0x3a8>)
    4240:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4244:	4630      	mov	r0, r6
    4246:	ed93 7a00 	vldr	s14, [r3]
    424a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4252:	bfcc      	ite	gt
    4254:	2101      	movgt	r1, #1
    4256:	2100      	movle	r1, #0
    4258:	f004 fa6a 	bl	8730 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
    425c:	4b52      	ldr	r3, [pc, #328]	; (43a8 <_Min_Heap_Size+0x3a8>)
    425e:	4630      	mov	r0, r6
    4260:	ed93 0a01 	vldr	s0, [r3, #4]
    4264:	f004 fa78 	bl	8758 <__tLivingString2_setTargetLev_veneer>
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4268:	6831      	ldr	r1, [r6, #0]
					int beforeLength = (delayLength * knobScaled[2]);
    426a:	4b4f      	ldr	r3, [pc, #316]	; (43a8 <_Min_Heap_Size+0x3a8>)
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    426c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4270:	edd1 6a02 	vldr	s13, [r1, #8]
					int beforeLength = (delayLength * knobScaled[2]);
    4274:	ed93 7a02 	vldr	s14, [r3, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4278:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    427c:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4280:	ee16 3a90 	vmov	r3, s13
					int beforeLength = (delayLength * knobScaled[2]);
    4284:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    4288:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    428c:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
    4290:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    4294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
    4298:	ee17 ea10 	vmov	lr, s14
					if (beforeLength > 0)
    429c:	f1be 0f00 	cmp.w	lr, #0
    42a0:	f340 827b 	ble.w	479a <_Min_Heap_Size+0x79a>
						beforePickIncrement = pluckAmp / beforeLength;
    42a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    42a8:	eec9 6a87 	vdiv.f32	s13, s19, s14
					if (afterLength > 0)
    42ac:	ee17 2a90 	vmov	r2, s15
    42b0:	2a00      	cmp	r2, #0
    42b2:	dd03      	ble.n	42bc <_Min_Heap_Size+0x2bc>
						afterPickIncrement = pluckAmp / afterLength;
    42b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    42b8:	eec9 9aa7 	vdiv.f32	s19, s19, s15
					for (int j = 0; j < delayLength; j++)
    42bc:	2b00      	cmp	r3, #0
    42be:	dd34      	ble.n	432a <_Min_Heap_Size+0x32a>
					float value = 0.0f;
    42c0:	eddf 7a3a 	vldr	s15, [pc, #232]	; 43ac <_Min_Heap_Size+0x3ac>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    42c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    42c8:	e01c      	b.n	4304 <_Min_Heap_Size+0x304>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    42ca:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
							value += beforePickIncrement;
    42cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    42d0:	6982      	ldr	r2, [r0, #24]
    42d2:	6881      	ldr	r1, [r0, #8]
    42d4:	ee27 6a87 	vmul.f32	s12, s15, s14
    42d8:	442a      	add	r2, r5
    42da:	400a      	ands	r2, r1
    42dc:	6841      	ldr	r1, [r0, #4]
    42de:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    42e2:	ed82 6a00 	vstr	s12, [r2]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
    42e6:	6832      	ldr	r2, [r6, #0]
    42e8:	6b90      	ldr	r0, [r2, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    42ea:	6982      	ldr	r2, [r0, #24]
    42ec:	6881      	ldr	r1, [r0, #8]
    42ee:	442a      	add	r2, r5
					for (int j = 0; j < delayLength; j++)
    42f0:	3501      	adds	r5, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    42f2:	400a      	ands	r2, r1
    42f4:	6841      	ldr	r1, [r0, #4]
					for (int j = 0; j < delayLength; j++)
    42f6:	42ab      	cmp	r3, r5
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    42f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    42fc:	ed82 6a00 	vstr	s12, [r2]
					for (int j = 0; j < delayLength; j++)
    4300:	d013      	beq.n	432a <_Min_Heap_Size+0x32a>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    4302:	6831      	ldr	r1, [r6, #0]
						if (j < beforeLength)
    4304:	45ae      	cmp	lr, r5
    4306:	dce0      	bgt.n	42ca <_Min_Heap_Size+0x2ca>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    4308:	6b08      	ldr	r0, [r1, #48]	; 0x30
							value -= afterPickIncrement;
    430a:	ee77 7ae9 	vsub.f32	s15, s15, s19
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    430e:	6982      	ldr	r2, [r0, #24]
    4310:	6881      	ldr	r1, [r0, #8]
    4312:	ee27 6a87 	vmul.f32	s12, s15, s14
    4316:	442a      	add	r2, r5
    4318:	400a      	ands	r2, r1
    431a:	6841      	ldr	r1, [r0, #4]
    431c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4320:	ed82 6a00 	vstr	s12, [r2]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    4324:	6832      	ldr	r2, [r6, #0]
    4326:	6b50      	ldr	r0, [r2, #52]	; 0x34
    4328:	e7df      	b.n	42ea <_Min_Heap_Size+0x2ea>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
    432a:	9b07      	ldr	r3, [sp, #28]
    432c:	4630      	mov	r0, r6
    432e:	eddf 7a20 	vldr	s15, [pc, #128]	; 43b0 <_Min_Heap_Size+0x3b0>
    4332:	ed93 0a03 	vldr	s0, [r3, #12]
    4336:	ee20 0a27 	vmul.f32	s0, s0, s15
    433a:	f004 fb69 	bl	8a10 <__tLivingString2_setDecay_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    433e:	9a05      	ldr	r2, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
    4340:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    4344:	7810      	ldrb	r0, [r2, #0]
    4346:	e4aa      	b.n	3c9e <audioFrame+0x19e>
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4348:	4b1a      	ldr	r3, [pc, #104]	; (43b4 <_Min_Heap_Size+0x3b4>)
					tADSRT_on(&fenvelopes[i], amplitz);
    434a:	4648      	mov	r0, r9
    434c:	9208      	str	r2, [sp, #32]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    434e:	eeb1 da00 	vmov.f32	s26, #16	; 0x40800000  4.0
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4352:	9307      	str	r3, [sp, #28]
					tADSRT_on(&fenvelopes[i], amplitz);
    4354:	f004 f9f4 	bl	8740 <__tADSRT_on_veneer>
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4358:	edd8 7a00 	vldr	s15, [r8]
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    435c:	eddf ca16 	vldr	s25, [pc, #88]	; 43b8 <_Min_Heap_Size+0x3b8>
    4360:	f8df 8064 	ldr.w	r8, [pc, #100]	; 43c8 <_Min_Heap_Size+0x3c8>
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4364:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    4368:	4413      	add	r3, r2
    436a:	9207      	str	r2, [sp, #28]
    436c:	ed93 0a00 	vldr	s0, [r3]
    4370:	ee30 0a27 	vadd.f32	s0, s0, s15
    4374:	f004 fa08 	bl	8788 <__mtof_veneer>
    4378:	9a07      	ldr	r2, [sp, #28]
    437a:	4b10      	ldr	r3, [pc, #64]	; (43bc <_Min_Heap_Size+0x3bc>)
    437c:	eef0 7a40 	vmov.f32	s15, s0
    4380:	9900      	ldr	r1, [sp, #0]
    4382:	4413      	add	r3, r2
    4384:	4808      	ldr	r0, [pc, #32]	; (43a8 <_Min_Heap_Size+0x3a8>)
    4386:	4a0e      	ldr	r2, [pc, #56]	; (43c0 <_Min_Heap_Size+0x3c0>)
    4388:	9307      	str	r3, [sp, #28]
    438a:	ed83 0a00 	vstr	s0, [r3]
					for (int j = 0; j < NUM_OVERTONES; j++)
    438e:	4b0d      	ldr	r3, [pc, #52]	; (43c4 <_Min_Heap_Size+0x3c4>)
    4390:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    4394:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    4398:	4699      	mov	r9, r3
    439a:	468a      	mov	sl, r1
    439c:	e9cd b608 	strd	fp, r6, [sp, #32]
    43a0:	4616      	mov	r6, r2
    43a2:	4683      	mov	fp, r0
    43a4:	e0fb      	b.n	459e <_Min_Heap_Size+0x59e>
    43a6:	bf00      	nop
    43a8:	20005218 	.word	0x20005218
    43ac:	00000000 	.word	0x00000000
    43b0:	43fa0000 	.word	0x43fa0000
    43b4:	20014840 	.word	0x20014840
    43b8:	3dcccccd 	.word	0x3dcccccd
    43bc:	200147e0 	.word	0x200147e0
    43c0:	20000cc4 	.word	0x20000cc4
    43c4:	20000ba4 	.word	0x20000ba4
    43c8:	20000300 	.word	0x20000300
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    43cc:	ed98 7a06 	vldr	s14, [r8, #24]
    43d0:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    43d4:	edd8 7a08 	vldr	s15, [r8, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    43d8:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    43dc:	ee78 6a47 	vsub.f32	s13, s16, s14
    43e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    43e4:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
    43e8:	ee29 9a2b 	vmul.f32	s18, s18, s23
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    43ec:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    43f0:	ee7e dac9 	vsub.f32	s27, s29, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    43f4:	ee70 0aa0 	vadd.f32	s1, s1, s1
    43f8:	f002 fdc2 	bl	6f80 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    43fc:	ed98 7a03 	vldr	s14, [r8, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4400:	edd8 7a05 	vldr	s15, [r8, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    4404:	eeb0 fa40 	vmov.f32	s30, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4408:	ee78 6a47 	vsub.f32	s13, s16, s14
    440c:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    4410:	eeb0 1a6a 	vmov.f32	s2, s21
    4414:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4418:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    441c:	ee70 0aa0 	vadd.f32	s1, s1, s1
    4420:	f002 fdae 	bl	6f80 <LEAF_clip>
							int height2Int = floor(height2);
    4424:	eeb7 6acf 	vcvt.f64.f32	d6, s30
							int height1Int = floor(height1);
    4428:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    442c:	48dc      	ldr	r0, [pc, #880]	; (47a0 <_Min_Heap_Size+0x7a0>)
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    442e:	ee7e 5ac0 	vsub.f32	s11, s29, s0
							int height2Int = floor(height2);
    4432:	febb 6b46 	vrintm.f64	d6, d6
    4436:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
    443a:	febb 7b47 	vrintm.f64	d7, d7
    443e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
    4442:	eeb4 faee 	vcmpe.f32	s30, s29
							int height2Int = floor(height2);
    4446:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
    444a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
    444e:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
    4452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4456:	1c51      	adds	r1, r2, #1
    4458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
    445c:	ee7f 8a66 	vsub.f32	s17, s30, s13
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4460:	eb05 0282 	add.w	r2, r5, r2, lsl #2
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4464:	ee35 7aa7 	vadd.f32	s14, s11, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4468:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							float height1Float = height1 - height1Int;
    446c:	ee70 7a67 	vsub.f32	s15, s0, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4470:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							if (height2 < 1.0f)
    4474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    447c:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4480:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4484:	f103 0201 	add.w	r2, r3, #1
    4488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    448c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4490:	eb00 0181 	add.w	r1, r0, r1, lsl #2
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4494:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    4498:	eb05 0383 	add.w	r3, r5, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    449c:	edd1 5a48 	vldr	s11, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    44a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    44a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    44a8:	ee68 8aa5 	vmul.f32	s17, s17, s11
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    44ac:	ed92 5a24 	vldr	s10, [r2, #144]	; 0x90
    44b0:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
    44b4:	ee67 7a85 	vmul.f32	s15, s15, s10
    44b8:	eee5 7a87 	vfma.f32	s15, s11, s14
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    44bc:	ee3e 7acf 	vsub.f32	s14, s29, s30
    44c0:	ee37 7a26 	vadd.f32	s14, s14, s13
    44c4:	eee6 8a07 	vfma.f32	s17, s12, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    44c8:	ee6d 8aa8 	vmul.f32	s17, s27, s17
    44cc:	eee9 8a27 	vfma.f32	s17, s18, s15
							if (height2 < 1.0f)
    44d0:	f100 812c 	bmi.w	472c <_Min_Heap_Size+0x72c>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    44d4:	eef0 0a48 	vmov.f32	s1, s16
    44d8:	ed98 1a08 	vldr	s2, [r8, #32]
    44dc:	ed98 0a07 	vldr	s0, [r8, #28]
    44e0:	ed99 fa3c 	vldr	s30, [r9, #240]	; 0xf0
    44e4:	f002 fd4c 	bl	6f80 <LEAF_clip>
    44e8:	edd6 7a3c 	vldr	s15, [r6, #240]	; 0xf0
    44ec:	eeef 7a00 	vfma.f32	s15, s30, s0
    44f0:	ee8e faa7 	vdiv.f32	s30, s29, s15
							if (height1 < 1.0f)
    44f4:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    44f8:	eef0 0a48 	vmov.f32	s1, s16
							if (height1 < 1.0f)
    44fc:	eeb4 eaee 	vcmpe.f32	s28, s29
    4500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4504:	f100 8103 	bmi.w	470e <_Min_Heap_Size+0x70e>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    4508:	ed98 1a05 	vldr	s2, [r8, #20]
    450c:	ed98 0a04 	vldr	s0, [r8, #16]
    4510:	ed99 8a24 	vldr	s16, [r9, #144]	; 0x90
    4514:	f002 fd34 	bl	6f80 <LEAF_clip>
    4518:	edd6 7a24 	vldr	s15, [r6, #144]	; 0x90
    451c:	eee8 7a00 	vfma.f32	s15, s16, s0
    4520:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    4524:	ee6d 7a8f 	vmul.f32	s15, s27, s30
    4528:	eee7 7a09 	vfma.f32	s15, s14, s18
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    452c:	4a9d      	ldr	r2, [pc, #628]	; (47a4 <_Min_Heap_Size+0x7a4>)
    452e:	4650      	mov	r0, sl
    4530:	499d      	ldr	r1, [pc, #628]	; (47a8 <_Min_Heap_Size+0x7a8>)
					for (int j = 0; j < NUM_OVERTONES; j++)
    4532:	3501      	adds	r5, #1
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    4534:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    4536:	f109 0904 	add.w	r9, r9, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    453a:	ed9b 0a05 	vldr	s0, [fp, #20]
					for (int j = 0; j < NUM_OVERTONES; j++)
    453e:	3604      	adds	r6, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    4540:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4544:	ed9b 7a03 	vldr	s14, [fp, #12]
    4548:	ee20 0a2c 	vmul.f32	s0, s0, s25
    454c:	edd3 6a00 	vldr	s13, [r3]
    4550:	ee27 7a0c 	vmul.f32	s14, s14, s24
    4554:	ee20 0a26 	vmul.f32	s0, s0, s13
    4558:	eea7 0a87 	vfma.f32	s0, s15, s14
    455c:	f004 f8d0 	bl	8700 <__tADSRT_setDecay_veneer>
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    4560:	4a90      	ldr	r2, [pc, #576]	; (47a4 <_Min_Heap_Size+0x7a4>)
    4562:	4991      	ldr	r1, [pc, #580]	; (47a8 <_Min_Heap_Size+0x7a8>)
    4564:	4650      	mov	r0, sl
    4566:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    4568:	f10a 0a04 	add.w	sl, sl, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    456c:	eddb 7a06 	vldr	s15, [fp, #24]
    4570:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4574:	ee67 7aac 	vmul.f32	s15, s15, s25
    4578:	ed93 7a00 	vldr	s14, [r3]
    457c:	eee7 8a27 	vfma.f32	s17, s14, s15
    4580:	ee28 0aa9 	vmul.f32	s0, s17, s19
    4584:	f004 f8dc 	bl	8740 <__tADSRT_on_veneer>
						currentRandom++;
    4588:	4a86      	ldr	r2, [pc, #536]	; (47a4 <_Min_Heap_Size+0x7a4>)
					for (int j = 0; j < NUM_OVERTONES; j++)
    458a:	2d0c      	cmp	r5, #12
						currentRandom++;
    458c:	7813      	ldrb	r3, [r2, #0]
    458e:	f103 0301 	add.w	r3, r3, #1
    4592:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    4594:	f000 80fb 	beq.w	478e <_Min_Heap_Size+0x78e>
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    4598:	9b07      	ldr	r3, [sp, #28]
    459a:	edd3 7a00 	vldr	s15, [r3]
						int thisString = i + firstString;
    459e:	4b83      	ldr	r3, [pc, #524]	; (47ac <_Min_Heap_Size+0x7ac>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    45a0:	ed9b 8a02 	vldr	s16, [fp, #8]
						int thisString = i + firstString;
    45a4:	681b      	ldr	r3, [r3, #0]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    45a6:	ee28 8a0d 	vmul.f32	s16, s16, s26
						int thisString = i + firstString;
    45aa:	4423      	add	r3, r4
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    45ac:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (thisString < 6)
    45b0:	2b05      	cmp	r3, #5
							stringFade = (float)thisString * 0.2f;
    45b2:	ee07 3a90 	vmov	s15, r3
    45b6:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
						if (thisString < 6)
    45ba:	f77f af07 	ble.w	43cc <_Min_Heap_Size+0x3cc>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    45be:	ed98 7a03 	vldr	s14, [r8, #12]
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    45c2:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    45c6:	edd8 7a05 	vldr	s15, [r8, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    45ca:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    45ce:	ee78 6a47 	vsub.f32	s13, s16, s14
    45d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    45d6:	eeb0 0a4a 	vmov.f32	s0, s20
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    45da:	ee39 9a46 	vsub.f32	s18, s18, s12
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    45de:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    45e2:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    45e6:	ee29 9a2b 	vmul.f32	s18, s18, s23
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    45ea:	ee3d eac9 	vsub.f32	s28, s27, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    45ee:	ee70 0aa0 	vadd.f32	s1, s1, s1
    45f2:	f002 fcc5 	bl	6f80 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    45f6:	ed98 7a00 	vldr	s14, [r8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    45fa:	edd8 7a02 	vldr	s15, [r8, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    45fe:	eeb0 fa40 	vmov.f32	s30, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4602:	ee78 6a47 	vsub.f32	s13, s16, s14
    4606:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    460a:	eeb0 1a6a 	vmov.f32	s2, s21
    460e:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4612:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    4616:	ee70 0aa0 	vadd.f32	s1, s1, s1
    461a:	f002 fcb1 	bl	6f80 <LEAF_clip>
							int height2Int = floor(height2);
    461e:	eeb7 6acf 	vcvt.f64.f32	d6, s30
							int height1Int = floor(height1);
    4622:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4626:	485e      	ldr	r0, [pc, #376]	; (47a0 <_Min_Heap_Size+0x7a0>)
							if (height2 < 1.0f)
    4628:	eeb4 faed 	vcmpe.f32	s30, s27
							int height2Int = floor(height2);
    462c:	febb 6b46 	vrintm.f64	d6, d6
    4630:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
    4634:	febb 7b47 	vrintm.f64	d7, d7
    4638:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
    463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
    4640:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
    4644:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
    4648:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
    464c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4650:	f102 0101 	add.w	r1, r2, #1
    4654:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
    4658:	ee7f 6a66 	vsub.f32	s13, s30, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    465c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							float height1Float = height1 - height1Int;
    4660:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4664:	eb05 0282 	add.w	r2, r5, r2, lsl #2
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    4668:	eef0 ea40 	vmov.f32	s29, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    466c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4670:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4674:	edd2 8a24 	vldr	s17, [r2, #144]	; 0x90
    4678:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    467c:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4680:	f103 0201 	add.w	r2, r3, #1
    4684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4688:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    468c:	eee7 8aa6 	vfma.f32	s17, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4690:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4694:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    4698:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    469c:	edd3 7a00 	vldr	s15, [r3]
    46a0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    46a4:	ee6e 8a28 	vmul.f32	s17, s28, s17
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    46a8:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
    46ac:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    46b0:	eee9 8a27 	vfma.f32	s17, s18, s15
							if (height2 < 1.0f)
    46b4:	d45a      	bmi.n	476c <_Min_Heap_Size+0x76c>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    46b6:	eef0 0a48 	vmov.f32	s1, s16
    46ba:	ed98 1a05 	vldr	s2, [r8, #20]
    46be:	ed98 0a04 	vldr	s0, [r8, #16]
    46c2:	ed99 fa24 	vldr	s30, [r9, #144]	; 0x90
    46c6:	f002 fc5b 	bl	6f80 <LEAF_clip>
    46ca:	edd6 7a24 	vldr	s15, [r6, #144]	; 0x90
    46ce:	eeef 7a00 	vfma.f32	s15, s30, s0
    46d2:	ee8d faa7 	vdiv.f32	s30, s27, s15
							if (height1 < 1.0f)
    46d6:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    46da:	eef0 0a48 	vmov.f32	s1, s16
							if (height1 < 1.0f)
    46de:	eef4 eaed 	vcmpe.f32	s29, s27
    46e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46e6:	d432      	bmi.n	474e <_Min_Heap_Size+0x74e>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    46e8:	ed98 1a02 	vldr	s2, [r8, #8]
    46ec:	ed98 0a01 	vldr	s0, [r8, #4]
    46f0:	ed99 8a0c 	vldr	s16, [r9, #48]	; 0x30
    46f4:	f002 fc44 	bl	6f80 <LEAF_clip>
    46f8:	edd6 7a0c 	vldr	s15, [r6, #48]	; 0x30
    46fc:	eee8 7a00 	vfma.f32	s15, s16, s0
    4700:	ee8d 7aa7 	vdiv.f32	s14, s27, s15
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    4704:	ee6e 7a0f 	vmul.f32	s15, s28, s30
    4708:	eee7 7a09 	vfma.f32	s15, s14, s18
    470c:	e70e      	b.n	452c <_Min_Heap_Size+0x52c>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    470e:	ed98 1a04 	vldr	s2, [r8, #16]
    4712:	ed98 0a03 	vldr	s0, [r8, #12]
    4716:	ed99 8a18 	vldr	s16, [r9, #96]	; 0x60
    471a:	f002 fc31 	bl	6f80 <LEAF_clip>
    471e:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    4722:	eee8 7a00 	vfma.f32	s15, s16, s0
    4726:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
    472a:	e6fb      	b.n	4524 <_Min_Heap_Size+0x524>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    472c:	eef0 0a48 	vmov.f32	s1, s16
    4730:	ed98 1a07 	vldr	s2, [r8, #28]
    4734:	ed98 0a06 	vldr	s0, [r8, #24]
    4738:	ed99 fa30 	vldr	s30, [r9, #192]	; 0xc0
    473c:	f002 fc20 	bl	6f80 <LEAF_clip>
    4740:	edd6 7a30 	vldr	s15, [r6, #192]	; 0xc0
    4744:	eeef 7a00 	vfma.f32	s15, s30, s0
    4748:	ee8e faa7 	vdiv.f32	s30, s29, s15
    474c:	e6d2      	b.n	44f4 <_Min_Heap_Size+0x4f4>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    474e:	ed98 1a01 	vldr	s2, [r8, #4]
    4752:	ed98 0a00 	vldr	s0, [r8]
    4756:	ed99 8a00 	vldr	s16, [r9]
    475a:	f002 fc11 	bl	6f80 <LEAF_clip>
    475e:	edd6 7a00 	vldr	s15, [r6]
    4762:	eee8 7a00 	vfma.f32	s15, s16, s0
    4766:	ee8d 7aa7 	vdiv.f32	s14, s27, s15
    476a:	e7cb      	b.n	4704 <_Min_Heap_Size+0x704>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    476c:	eef0 0a48 	vmov.f32	s1, s16
    4770:	ed98 1a04 	vldr	s2, [r8, #16]
    4774:	ed98 0a03 	vldr	s0, [r8, #12]
    4778:	ed99 fa18 	vldr	s30, [r9, #96]	; 0x60
    477c:	f002 fc00 	bl	6f80 <LEAF_clip>
    4780:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    4784:	eeef 7a00 	vfma.f32	s15, s30, s0
    4788:	ee8d faa7 	vdiv.f32	s30, s27, s15
    478c:	e7a3      	b.n	46d6 <_Min_Heap_Size+0x6d6>
			previousStringInputs[i] = stringInputs[i];
    478e:	e9dd b608 	ldrd	fp, r6, [sp, #32]
    4792:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
    4796:	f7ff bb26 	b.w	3de6 <audioFrame+0x2e6>
						beforePickIncrement = pluckAmp;
    479a:	eef0 6a69 	vmov.f32	s13, s19
    479e:	e585      	b.n	42ac <_Min_Heap_Size+0x2ac>
    47a0:	20000324 	.word	0x20000324
    47a4:	20014b06 	.word	0x20014b06
    47a8:	20005760 	.word	0x20005760
    47ac:	200050d4 	.word	0x200050d4
    47b0:	f3af 8000 	nop.w
    47b4:	f3af 8000 	nop.w
    47b8:	f3af 8000 	nop.w
    47bc:	f3af 8000 	nop.w

000047c0 <HAL_SPI_RxCpltCallback>:



void __ATTR_ITCMRAM HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
    47c0:	2201      	movs	r2, #1
    47c2:	4b76      	ldr	r3, [pc, #472]	; (499c <HAL_SPI_RxCpltCallback+0x1dc>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    47c4:	2102      	movs	r1, #2
    47c6:	4876      	ldr	r0, [pc, #472]	; (49a0 <HAL_SPI_RxCpltCallback+0x1e0>)
{
    47c8:	b510      	push	{r4, lr}
	interrupted = 1;
    47ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    47cc:	f004 f814 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    47d0:	4b74      	ldr	r3, [pc, #464]	; (49a4 <HAL_SPI_RxCpltCallback+0x1e4>)
    47d2:	f023 011f 	bic.w	r1, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    47d6:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    47da:	4a73      	ldr	r2, [pc, #460]	; (49a8 <HAL_SPI_RxCpltCallback+0x1e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    47dc:	f101 0420 	add.w	r4, r1, #32
    47e0:	f101 0040 	add.w	r0, r1, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    47e4:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    47e8:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    47ec:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    47f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47f4:	f3bf 8f6f 	isb	sy
	if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    47f8:	7e9a      	ldrb	r2, [r3, #26]
    47fa:	2afe      	cmp	r2, #254	; 0xfe
    47fc:	d009      	beq.n	4812 <HAL_SPI_RxCpltCallback+0x52>
		for (int i = 0; i < numStringsThisBoard; i++)
		{
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
		}
	}
	newPluck = 1;
    47fe:	2401      	movs	r4, #1
    4800:	4b6a      	ldr	r3, [pc, #424]	; (49ac <HAL_SPI_RxCpltCallback+0x1ec>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4802:	2200      	movs	r2, #0
    4804:	2102      	movs	r1, #2
	newPluck = 1;
    4806:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4808:	4865      	ldr	r0, [pc, #404]	; (49a0 <HAL_SPI_RxCpltCallback+0x1e0>)
}
    480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    480e:	f003 bff3 	b.w	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    4812:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    4816:	2afd      	cmp	r2, #253	; 0xfd
    4818:	d1f1      	bne.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
		for (int i = 0; i < numStringsThisBoard; i++)
    481a:	4a65      	ldr	r2, [pc, #404]	; (49b0 <HAL_SPI_RxCpltCallback+0x1f0>)
    481c:	7811      	ldrb	r1, [r2, #0]
    481e:	2900      	cmp	r1, #0
    4820:	d0ed      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4822:	4a64      	ldr	r2, [pc, #400]	; (49b4 <HAL_SPI_RxCpltCallback+0x1f4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    4824:	2901      	cmp	r1, #1
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4826:	6814      	ldr	r4, [r2, #0]
    4828:	6810      	ldr	r0, [r2, #0]
    482a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    482e:	f100 000e 	add.w	r0, r0, #14
    4832:	f894 c01b 	ldrb.w	ip, [r4, #27]
    4836:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
    483a:	485f      	ldr	r0, [pc, #380]	; (49b8 <HAL_SPI_RxCpltCallback+0x1f8>)
    483c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4840:	6004      	str	r4, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4842:	d0dc      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4844:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4846:	2902      	cmp	r1, #2
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4848:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    484c:	f894 c01d 	ldrb.w	ip, [r4, #29]
    4850:	6814      	ldr	r4, [r2, #0]
    4852:	f104 040f 	add.w	r4, r4, #15
    4856:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    485a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    485e:	6044      	str	r4, [r0, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    4860:	d0cd      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4862:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4864:	2903      	cmp	r1, #3
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4866:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    486a:	f894 c01f 	ldrb.w	ip, [r4, #31]
    486e:	6814      	ldr	r4, [r2, #0]
    4870:	f104 0410 	add.w	r4, r4, #16
    4874:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    4878:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    487c:	6084      	str	r4, [r0, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    487e:	d0be      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4880:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4882:	2904      	cmp	r1, #4
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4884:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4888:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
    488c:	6814      	ldr	r4, [r2, #0]
    488e:	f104 0411 	add.w	r4, r4, #17
    4892:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    4896:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    489a:	60c4      	str	r4, [r0, #12]
		for (int i = 0; i < numStringsThisBoard; i++)
    489c:	d0af      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    489e:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    48a0:	2905      	cmp	r1, #5
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48a2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48a6:	f894 c023 	ldrb.w	ip, [r4, #35]	; 0x23
    48aa:	6814      	ldr	r4, [r2, #0]
    48ac:	f104 0412 	add.w	r4, r4, #18
    48b0:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    48b4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    48b8:	6104      	str	r4, [r0, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    48ba:	d0a0      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48bc:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    48be:	2906      	cmp	r1, #6
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48c0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48c4:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
    48c8:	6814      	ldr	r4, [r2, #0]
    48ca:	f104 0413 	add.w	r4, r4, #19
    48ce:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    48d2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    48d6:	6144      	str	r4, [r0, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
    48d8:	d091      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48da:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    48dc:	2907      	cmp	r1, #7
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48e2:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
    48e6:	6814      	ldr	r4, [r2, #0]
    48e8:	f104 0414 	add.w	r4, r4, #20
    48ec:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    48f0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    48f4:	6184      	str	r4, [r0, #24]
		for (int i = 0; i < numStringsThisBoard; i++)
    48f6:	d082      	beq.n	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48f8:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    48fa:	2908      	cmp	r1, #8
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48fc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4900:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    4904:	6814      	ldr	r4, [r2, #0]
    4906:	f104 0415 	add.w	r4, r4, #21
    490a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    490e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4912:	61c4      	str	r4, [r0, #28]
		for (int i = 0; i < numStringsThisBoard; i++)
    4914:	f43f af73 	beq.w	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4918:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    491a:	2909      	cmp	r1, #9
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    491c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4920:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
    4924:	6814      	ldr	r4, [r2, #0]
    4926:	f104 0416 	add.w	r4, r4, #22
    492a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    492e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4932:	6204      	str	r4, [r0, #32]
		for (int i = 0; i < numStringsThisBoard; i++)
    4934:	f43f af63 	beq.w	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4938:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    493a:	290a      	cmp	r1, #10
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    493c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4940:	f894 c02d 	ldrb.w	ip, [r4, #45]	; 0x2d
    4944:	6814      	ldr	r4, [r2, #0]
    4946:	f104 0417 	add.w	r4, r4, #23
    494a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    494e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4952:	6244      	str	r4, [r0, #36]	; 0x24
		for (int i = 0; i < numStringsThisBoard; i++)
    4954:	f43f af53 	beq.w	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4958:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    495a:	290b      	cmp	r1, #11
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    495c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4960:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
    4964:	6814      	ldr	r4, [r2, #0]
    4966:	f104 0418 	add.w	r4, r4, #24
    496a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    496e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4972:	6284      	str	r4, [r0, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
    4974:	f43f af43 	beq.w	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4978:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    497a:	290c      	cmp	r1, #12
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    497c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4980:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    4984:	6814      	ldr	r4, [r2, #0]
    4986:	f104 0419 	add.w	r4, r4, #25
    498a:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
    498e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    4992:	62c3      	str	r3, [r0, #44]	; 0x2c
		for (int i = 0; i < numStringsThisBoard; i++)
    4994:	f43f af33 	beq.w	47fe <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4998:	6813      	ldr	r3, [r2, #0]
    499a:	6813      	ldr	r3, [r2, #0]
    499c:	200051f0 	.word	0x200051f0
    49a0:	58020800 	.word	0x58020800
    49a4:	38000000 	.word	0x38000000
    49a8:	e000ed00 	.word	0xe000ed00
    49ac:	20005550 	.word	0x20005550
    49b0:	2000000d 	.word	0x2000000d
    49b4:	200050d4 	.word	0x200050d4
    49b8:	20014810 	.word	0x20014810
    49bc:	f3af 8000 	nop.w

000049c0 <HAL_SPI_RxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    49c0:	b510      	push	{r4, lr}
	interrupted = 1;
    49c2:	4b75      	ldr	r3, [pc, #468]	; (4b98 <HAL_SPI_RxHalfCpltCallback+0x1d8>)
    49c4:	2201      	movs	r2, #1
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    49c6:	4c75      	ldr	r4, [pc, #468]	; (4b9c <HAL_SPI_RxHalfCpltCallback+0x1dc>)
	interrupted = 1;
    49c8:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    49ca:	f024 031f 	bic.w	r3, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
    49ce:	f3bf 8f4f 	dsb	sy
    49d2:	4973      	ldr	r1, [pc, #460]	; (4ba0 <HAL_SPI_RxHalfCpltCallback+0x1e0>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    49d4:	f103 0020 	add.w	r0, r3, #32
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    49d8:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    49dc:	3340      	adds	r3, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    49de:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
    49e2:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
    49e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49ea:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    49ee:	2102      	movs	r1, #2
    49f0:	486c      	ldr	r0, [pc, #432]	; (4ba4 <HAL_SPI_RxHalfCpltCallback+0x1e4>)
    49f2:	f003 ff01 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    49f6:	7823      	ldrb	r3, [r4, #0]
    49f8:	2bfe      	cmp	r3, #254	; 0xfe
    49fa:	d009      	beq.n	4a10 <HAL_SPI_RxHalfCpltCallback+0x50>
		for (int i = 0; i < numStringsThisBoard; i++)
		{
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
		}
	}
	newPluck = 1;
    49fc:	2401      	movs	r4, #1
    49fe:	4b6a      	ldr	r3, [pc, #424]	; (4ba8 <HAL_SPI_RxHalfCpltCallback+0x1e8>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4a00:	2200      	movs	r2, #0
    4a02:	2102      	movs	r1, #2
	newPluck = 1;
    4a04:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4a06:	4867      	ldr	r0, [pc, #412]	; (4ba4 <HAL_SPI_RxHalfCpltCallback+0x1e4>)
}
    4a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4a0c:	f003 bef4 	b.w	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    4a10:	7e63      	ldrb	r3, [r4, #25]
    4a12:	2bfd      	cmp	r3, #253	; 0xfd
    4a14:	d1f2      	bne.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
		for (int i = 0; i < numStringsThisBoard; i++)
    4a16:	4b65      	ldr	r3, [pc, #404]	; (4bac <HAL_SPI_RxHalfCpltCallback+0x1ec>)
    4a18:	781a      	ldrb	r2, [r3, #0]
    4a1a:	2a00      	cmp	r2, #0
    4a1c:	d0ee      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a1e:	4b64      	ldr	r3, [pc, #400]	; (4bb0 <HAL_SPI_RxHalfCpltCallback+0x1f0>)
		for (int i = 0; i < numStringsThisBoard; i++)
    4a20:	2a01      	cmp	r2, #1
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a22:	6818      	ldr	r0, [r3, #0]
    4a24:	6819      	ldr	r1, [r3, #0]
    4a26:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a2a:	f101 0101 	add.w	r1, r1, #1
    4a2e:	f890 c001 	ldrb.w	ip, [r0, #1]
    4a32:	f814 0011 	ldrb.w	r0, [r4, r1, lsl #1]
    4a36:	495f      	ldr	r1, [pc, #380]	; (4bb4 <HAL_SPI_RxHalfCpltCallback+0x1f4>)
    4a38:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a3c:	6008      	str	r0, [r1, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a3e:	d0dd      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a40:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a42:	2a02      	cmp	r2, #2
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a44:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a48:	f890 c003 	ldrb.w	ip, [r0, #3]
    4a4c:	6818      	ldr	r0, [r3, #0]
    4a4e:	f100 0002 	add.w	r0, r0, #2
    4a52:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a56:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a5a:	6048      	str	r0, [r1, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a5c:	d0ce      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a5e:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a60:	2a03      	cmp	r2, #3
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a62:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a66:	f890 c005 	ldrb.w	ip, [r0, #5]
    4a6a:	6818      	ldr	r0, [r3, #0]
    4a6c:	f100 0003 	add.w	r0, r0, #3
    4a70:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a74:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a78:	6088      	str	r0, [r1, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a7a:	d0bf      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a7c:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a7e:	2a04      	cmp	r2, #4
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a80:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a84:	f890 c007 	ldrb.w	ip, [r0, #7]
    4a88:	6818      	ldr	r0, [r3, #0]
    4a8a:	f100 0004 	add.w	r0, r0, #4
    4a8e:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a92:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a96:	60c8      	str	r0, [r1, #12]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a98:	d0b0      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a9a:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a9c:	2a05      	cmp	r2, #5
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a9e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4aa2:	f890 c009 	ldrb.w	ip, [r0, #9]
    4aa6:	6818      	ldr	r0, [r3, #0]
    4aa8:	f100 0005 	add.w	r0, r0, #5
    4aac:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4ab0:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4ab4:	6108      	str	r0, [r1, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ab6:	d0a1      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ab8:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4aba:	2a06      	cmp	r2, #6
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4abc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4ac0:	f890 c00b 	ldrb.w	ip, [r0, #11]
    4ac4:	6818      	ldr	r0, [r3, #0]
    4ac6:	f100 0006 	add.w	r0, r0, #6
    4aca:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4ace:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4ad2:	6148      	str	r0, [r1, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ad4:	d092      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ad6:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ad8:	2a07      	cmp	r2, #7
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ada:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4ade:	f890 c00d 	ldrb.w	ip, [r0, #13]
    4ae2:	6818      	ldr	r0, [r3, #0]
    4ae4:	f100 0007 	add.w	r0, r0, #7
    4ae8:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4aec:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4af0:	6188      	str	r0, [r1, #24]
		for (int i = 0; i < numStringsThisBoard; i++)
    4af2:	d083      	beq.n	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4af4:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4af6:	2a08      	cmp	r2, #8
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4af8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4afc:	f890 c00f 	ldrb.w	ip, [r0, #15]
    4b00:	6818      	ldr	r0, [r3, #0]
    4b02:	f100 0008 	add.w	r0, r0, #8
    4b06:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4b0a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4b0e:	61c8      	str	r0, [r1, #28]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b10:	f43f af74 	beq.w	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b14:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b16:	2a09      	cmp	r2, #9
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b18:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b1c:	f890 c011 	ldrb.w	ip, [r0, #17]
    4b20:	6818      	ldr	r0, [r3, #0]
    4b22:	f100 0009 	add.w	r0, r0, #9
    4b26:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4b2a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4b2e:	6208      	str	r0, [r1, #32]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b30:	f43f af64 	beq.w	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b34:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b36:	2a0a      	cmp	r2, #10
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b38:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b3c:	f890 c013 	ldrb.w	ip, [r0, #19]
    4b40:	6818      	ldr	r0, [r3, #0]
    4b42:	f100 000a 	add.w	r0, r0, #10
    4b46:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4b4a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4b4e:	6248      	str	r0, [r1, #36]	; 0x24
		for (int i = 0; i < numStringsThisBoard; i++)
    4b50:	f43f af54 	beq.w	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b54:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b56:	2a0b      	cmp	r2, #11
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b58:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b5c:	f890 c015 	ldrb.w	ip, [r0, #21]
    4b60:	6818      	ldr	r0, [r3, #0]
    4b62:	f100 000b 	add.w	r0, r0, #11
    4b66:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4b6a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4b6e:	6288      	str	r0, [r1, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
    4b70:	f43f af44 	beq.w	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b74:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b76:	2a0c      	cmp	r2, #12
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b78:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4b7c:	f890 c017 	ldrb.w	ip, [r0, #23]
    4b80:	6818      	ldr	r0, [r3, #0]
    4b82:	f100 000c 	add.w	r0, r0, #12
    4b86:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4b8a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4b8e:	62c8      	str	r0, [r1, #44]	; 0x2c
		for (int i = 0; i < numStringsThisBoard; i++)
    4b90:	f43f af34 	beq.w	49fc <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b94:	681a      	ldr	r2, [r3, #0]
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	200051f0 	.word	0x200051f0
    4b9c:	38000000 	.word	0x38000000
    4ba0:	e000ed00 	.word	0xe000ed00
    4ba4:	58020800 	.word	0x58020800
    4ba8:	20005550 	.word	0x20005550
    4bac:	2000000d 	.word	0x2000000d
    4bb0:	200050d4 	.word	0x200050d4
    4bb4:	20014810 	.word	0x20014810
    4bb8:	f3af 8000 	nop.w
    4bbc:	f3af 8000 	nop.w

00004bc0 <HAL_SPI_TxRxCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
    4bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interrupted = 1;
    4bc2:	2201      	movs	r2, #1
    4bc4:	4b1c      	ldr	r3, [pc, #112]	; (4c38 <HAL_SPI_TxRxCpltCallback+0x78>)
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4bc6:	4d1d      	ldr	r5, [pc, #116]	; (4c3c <HAL_SPI_TxRxCpltCallback+0x7c>)
	interrupted = 1;
    4bc8:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4bca:	f025 041f 	bic.w	r4, r5, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4bce:	f3bf 8f4f 	dsb	sy
    4bd2:	4b1b      	ldr	r3, [pc, #108]	; (4c40 <HAL_SPI_TxRxCpltCallback+0x80>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4bd4:	f104 0720 	add.w	r7, r4, #32
    4bd8:	f104 0640 	add.w	r6, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4bdc:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    4be0:	f8c3 725c 	str.w	r7, [r3, #604]	; 0x25c
    4be4:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
    4be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4bec:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    4bf0:	2110      	movs	r1, #16
    4bf2:	4814      	ldr	r0, [pc, #80]	; (4c44 <HAL_SPI_TxRxCpltCallback+0x84>)
    4bf4:	f003 fe00 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    4bf8:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    4bfc:	2bfe      	cmp	r3, #254	; 0xfe
    4bfe:	d013      	beq.n	4c28 <HAL_SPI_TxRxCpltCallback+0x68>
  __ASM volatile ("dsb 0xF":::"memory");
    4c00:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c04:	4b0e      	ldr	r3, [pc, #56]	; (4c40 <HAL_SPI_TxRxCpltCallback+0x80>)
    4c06:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    4c0a:	f8c3 7268 	str.w	r7, [r3, #616]	; 0x268
    4c0e:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
    4c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c16:	f3bf 8f6f 	isb	sy
	{
		handleSPI(LEVER_BUFFER_SIZE);
	}
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4c1a:	2200      	movs	r2, #0
    4c1c:	2110      	movs	r1, #16
    4c1e:	4809      	ldr	r0, [pc, #36]	; (4c44 <HAL_SPI_TxRxCpltCallback+0x84>)
}
    4c20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4c24:	f003 bde8 	b.w	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    4c28:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    4c2c:	2bfd      	cmp	r3, #253	; 0xfd
    4c2e:	d1e7      	bne.n	4c00 <HAL_SPI_TxRxCpltCallback+0x40>
		handleSPI(LEVER_BUFFER_SIZE);
    4c30:	2020      	movs	r0, #32
    4c32:	f001 f955 	bl	5ee0 <handleSPI>
    4c36:	e7e3      	b.n	4c00 <HAL_SPI_TxRxCpltCallback+0x40>
    4c38:	200051f0 	.word	0x200051f0
    4c3c:	30000140 	.word	0x30000140
    4c40:	e000ed00 	.word	0xe000ed00
    4c44:	58020800 	.word	0x58020800
    4c48:	f3af 8000 	nop.w
    4c4c:	f3af 8000 	nop.w
    4c50:	f3af 8000 	nop.w
    4c54:	f3af 8000 	nop.w
    4c58:	f3af 8000 	nop.w
    4c5c:	f3af 8000 	nop.w

00004c60 <HAL_SPI_TxRxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    4c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interrupted = 1;
    4c62:	2201      	movs	r2, #1
    4c64:	4b1b      	ldr	r3, [pc, #108]	; (4cd4 <HAL_SPI_TxRxHalfCpltCallback+0x74>)
	//SCB_InvalidateDCache();
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4c66:	4d1c      	ldr	r5, [pc, #112]	; (4cd8 <HAL_SPI_TxRxHalfCpltCallback+0x78>)
	interrupted = 1;
    4c68:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4c6a:	f025 041f 	bic.w	r4, r5, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4c6e:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c72:	4b1a      	ldr	r3, [pc, #104]	; (4cdc <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4c74:	f104 0720 	add.w	r7, r4, #32
    4c78:	f104 0640 	add.w	r6, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c7c:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    4c80:	f8c3 725c 	str.w	r7, [r3, #604]	; 0x25c
    4c84:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
    4c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c8c:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    4c90:	2110      	movs	r1, #16
    4c92:	4813      	ldr	r0, [pc, #76]	; (4ce0 <HAL_SPI_TxRxHalfCpltCallback+0x80>)
    4c94:	f003 fdb0 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    4c98:	7fab      	ldrb	r3, [r5, #30]
    4c9a:	2bfe      	cmp	r3, #254	; 0xfe
    4c9c:	d013      	beq.n	4cc6 <HAL_SPI_TxRxHalfCpltCallback+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
    4c9e:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4ca2:	4b0e      	ldr	r3, [pc, #56]	; (4cdc <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
    4ca4:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    4ca8:	f8c3 7268 	str.w	r7, [r3, #616]	; 0x268
    4cac:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
    4cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4cb4:	f3bf 8f6f 	isb	sy
	{
		handleSPI(0);
	}
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4cb8:	2200      	movs	r2, #0
    4cba:	2110      	movs	r1, #16
    4cbc:	4808      	ldr	r0, [pc, #32]	; (4ce0 <HAL_SPI_TxRxHalfCpltCallback+0x80>)
}
    4cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4cc2:	f003 bd99 	b.w	87f8 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    4cc6:	7feb      	ldrb	r3, [r5, #31]
    4cc8:	2bfd      	cmp	r3, #253	; 0xfd
    4cca:	d1e8      	bne.n	4c9e <HAL_SPI_TxRxHalfCpltCallback+0x3e>
		handleSPI(0);
    4ccc:	2000      	movs	r0, #0
    4cce:	f001 f907 	bl	5ee0 <handleSPI>
    4cd2:	e7e4      	b.n	4c9e <HAL_SPI_TxRxHalfCpltCallback+0x3e>
    4cd4:	200051f0 	.word	0x200051f0
    4cd8:	30000140 	.word	0x30000140
    4cdc:	e000ed00 	.word	0xe000ed00
    4ce0:	58020800 	.word	0x58020800
    4ce4:	f3af 8000 	nop.w
    4ce8:	f3af 8000 	nop.w
    4cec:	f3af 8000 	nop.w
    4cf0:	f3af 8000 	nop.w
    4cf4:	f3af 8000 	nop.w
    4cf8:	f3af 8000 	nop.w
    4cfc:	f3af 8000 	nop.w

00004d00 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    4d00:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    4d02:	4b0c      	ldr	r3, [pc, #48]	; (4d34 <HAL_SAI_TxCpltCallback+0x34>)
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	b913      	cbnz	r3, 4d0e <HAL_SAI_TxCpltCallback+0xe>
    4d08:	4b0b      	ldr	r3, [pc, #44]	; (4d38 <HAL_SAI_TxCpltCallback+0x38>)
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	b903      	cbnz	r3, 4d10 <HAL_SAI_TxCpltCallback+0x10>
	{
		audioFrame(HALF_BUFFER_SIZE);
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
	}
}
    4d0e:	bd08      	pop	{r3, pc}
		audioFrame(HALF_BUFFER_SIZE);
    4d10:	2010      	movs	r0, #16
    4d12:	f7fe fef5 	bl	3b00 <audioFrame>
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4d16:	4a09      	ldr	r2, [pc, #36]	; (4d3c <HAL_SAI_TxCpltCallback+0x3c>)
  __ASM volatile ("dsb 0xF":::"memory");
    4d18:	f3bf 8f4f 	dsb	sy
    4d1c:	4b08      	ldr	r3, [pc, #32]	; (4d40 <HAL_SAI_TxCpltCallback+0x40>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4d1e:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4d22:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    4d26:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d2e:	f3bf 8f6f 	isb	sy
}
    4d32:	bd08      	pop	{r3, pc}
    4d34:	20014b40 	.word	0x20014b40
    4d38:	20005744 	.word	0x20005744
    4d3c:	30000040 	.word	0x30000040
    4d40:	e000ed00 	.word	0xe000ed00
    4d44:	f3af 8000 	nop.w
    4d48:	f3af 8000 	nop.w
    4d4c:	f3af 8000 	nop.w
    4d50:	f3af 8000 	nop.w
    4d54:	f3af 8000 	nop.w
    4d58:	f3af 8000 	nop.w
    4d5c:	f3af 8000 	nop.w

00004d60 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    4d60:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    4d62:	4b0c      	ldr	r3, [pc, #48]	; (4d94 <HAL_SAI_TxHalfCpltCallback+0x34>)
    4d64:	7818      	ldrb	r0, [r3, #0]
    4d66:	b910      	cbnz	r0, 4d6e <HAL_SAI_TxHalfCpltCallback+0xe>
    4d68:	4b0b      	ldr	r3, [pc, #44]	; (4d98 <HAL_SAI_TxHalfCpltCallback+0x38>)
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	b903      	cbnz	r3, 4d70 <HAL_SAI_TxHalfCpltCallback+0x10>
	{
		audioFrame(0);
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
	}
}
    4d6e:	bd08      	pop	{r3, pc}
		audioFrame(0);
    4d70:	f7fe fec6 	bl	3b00 <audioFrame>
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4d74:	4a09      	ldr	r2, [pc, #36]	; (4d9c <HAL_SAI_TxHalfCpltCallback+0x3c>)
  __ASM volatile ("dsb 0xF":::"memory");
    4d76:	f3bf 8f4f 	dsb	sy
    4d7a:	4b09      	ldr	r3, [pc, #36]	; (4da0 <HAL_SAI_TxHalfCpltCallback+0x40>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4d7c:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4d80:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    4d84:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4d88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d8c:	f3bf 8f6f 	isb	sy
}
    4d90:	bd08      	pop	{r3, pc}
    4d92:	bf00      	nop
    4d94:	20014b40 	.word	0x20014b40
    4d98:	20005744 	.word	0x20005744
    4d9c:	30000040 	.word	0x30000040
    4da0:	e000ed00 	.word	0xe000ed00
    4da4:	f3af 8000 	nop.w
    4da8:	f3af 8000 	nop.w
    4dac:	f3af 8000 	nop.w
    4db0:	f3af 8000 	nop.w
    4db4:	f3af 8000 	nop.w
    4db8:	f3af 8000 	nop.w
    4dbc:	f3af 8000 	nop.w

00004dc0 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    4dc0:	4770      	bx	lr
    4dc2:	bf00      	nop
	...

00004de0 <scaleDefault>:
}
    4de0:	4770      	bx	lr
    4de2:	bf00      	nop
    4de4:	f3af 8000 	nop.w
    4de8:	f3af 8000 	nop.w
    4dec:	f3af 8000 	nop.w
    4df0:	f3af 8000 	nop.w
    4df4:	f3af 8000 	nop.w
    4df8:	f3af 8000 	nop.w
    4dfc:	f3af 8000 	nop.w

00004e00 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    4e00:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    4e04:	ed9f 7a03 	vldr	s14, [pc, #12]	; 4e14 <scaleOscPitch+0x14>
}
    4e08:	eee0 7a07 	vfma.f32	s15, s0, s14
    4e0c:	eeb0 0a67 	vmov.f32	s0, s15
    4e10:	4770      	bx	lr
    4e12:	bf00      	nop
    4e14:	42400000 	.word	0x42400000
    4e18:	f3af 8000 	nop.w
    4e1c:	f3af 8000 	nop.w

00004e20 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    4e20:	ed9f 7a04 	vldr	s14, [pc, #16]	; 4e34 <scaleOscFine+0x14>
    4e24:	eddf 7a04 	vldr	s15, [pc, #16]	; 4e38 <scaleOscFine+0x18>
}
    4e28:	eee0 7a07 	vfma.f32	s15, s0, s14
    4e2c:	eeb0 0a67 	vmov.f32	s0, s15
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop
    4e34:	43480000 	.word	0x43480000
    4e38:	c2c80000 	.word	0xc2c80000
    4e3c:	f3af 8000 	nop.w

00004e40 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    4e40:	ed9f 7a04 	vldr	s14, [pc, #16]	; 4e54 <scaleOscFreq+0x14>
    4e44:	eddf 7a04 	vldr	s15, [pc, #16]	; 4e58 <scaleOscFreq+0x18>
}
    4e48:	eee0 7a07 	vfma.f32	s15, s0, s14
    4e4c:	eeb0 0a67 	vmov.f32	s0, s15
    4e50:	4770      	bx	lr
    4e52:	bf00      	nop
    4e54:	457a0000 	.word	0x457a0000
    4e58:	c4fa0000 	.word	0xc4fa0000
    4e5c:	f3af 8000 	nop.w

00004e60 <scaleFilterCutoff>:
	return (input * 127.0f);
    4e60:	eddf 7a02 	vldr	s15, [pc, #8]	; 4e6c <scaleFilterCutoff+0xc>
}
    4e64:	ee20 0a27 	vmul.f32	s0, s0, s15
    4e68:	4770      	bx	lr
    4e6a:	bf00      	nop
    4e6c:	42fe0000 	.word	0x42fe0000
    4e70:	f3af 8000 	nop.w
    4e74:	f3af 8000 	nop.w
    4e78:	f3af 8000 	nop.w
    4e7c:	f3af 8000 	nop.w

00004e80 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    4e80:	ed9f 7a04 	vldr	s14, [pc, #16]	; 4e94 <scaleFinalLowpass+0x14>
    4e84:	eddf 7a04 	vldr	s15, [pc, #16]	; 4e98 <scaleFinalLowpass+0x18>
}
    4e88:	eee0 7a07 	vfma.f32	s15, s0, s14
    4e8c:	eeb0 0a67 	vmov.f32	s0, s15
    4e90:	4770      	bx	lr
    4e92:	bf00      	nop
    4e94:	428c0000 	.word	0x428c0000
    4e98:	42680000 	.word	0x42680000
    4e9c:	f3af 8000 	nop.w

00004ea0 <blankFunction>:
}
    4ea0:	4770      	bx	lr
    4ea2:	bf00      	nop
    4ea4:	f3af 8000 	nop.w
    4ea8:	f3af 8000 	nop.w
    4eac:	f3af 8000 	nop.w
    4eb0:	f3af 8000 	nop.w
    4eb4:	f3af 8000 	nop.w
    4eb8:	f3af 8000 	nop.w
    4ebc:	f3af 8000 	nop.w

00004ec0 <scaleTranspose>:
{
    4ec0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    4ec4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 4ee4 <scaleTranspose+0x24>
    4ec8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    4ecc:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    4ece:	f002 f857 	bl	6f80 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    4ed2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4ee8 <scaleTranspose+0x28>
    4ed6:	eddf 7a05 	vldr	s15, [pc, #20]	; 4eec <scaleTranspose+0x2c>
}
    4eda:	eee0 7a07 	vfma.f32	s15, s0, s14
    4ede:	eeb0 0a67 	vmov.f32	s0, s15
    4ee2:	bd08      	pop	{r3, pc}
    4ee4:	00000000 	.word	0x00000000
    4ee8:	42c00000 	.word	0x42c00000
    4eec:	c2400000 	.word	0xc2400000
    4ef0:	f3af 8000 	nop.w
    4ef4:	f3af 8000 	nop.w
    4ef8:	f3af 8000 	nop.w
    4efc:	f3af 8000 	nop.w

00004f00 <scalePitchBend>:
{
    4f00:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    4f04:	ed9f 0a05 	vldr	s0, [pc, #20]	; 4f1c <scalePitchBend+0x1c>
    4f08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    4f0c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    4f0e:	f002 f837 	bl	6f80 <LEAF_clip>
	return (input * 48.0f);
    4f12:	eddf 7a03 	vldr	s15, [pc, #12]	; 4f20 <scalePitchBend+0x20>
}
    4f16:	ee20 0a27 	vmul.f32	s0, s0, s15
    4f1a:	bd08      	pop	{r3, pc}
    4f1c:	00000000 	.word	0x00000000
    4f20:	42400000 	.word	0x42400000
    4f24:	f3af 8000 	nop.w
    4f28:	f3af 8000 	nop.w
    4f2c:	f3af 8000 	nop.w
    4f30:	f3af 8000 	nop.w
    4f34:	f3af 8000 	nop.w
    4f38:	f3af 8000 	nop.w
    4f3c:	f3af 8000 	nop.w

00004f40 <scaleFilterResonance>:
{
    4f40:	b510      	push	{r4, lr}
    4f42:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    4f46:	ed9f 9a21 	vldr	s18, [pc, #132]	; 4fcc <scaleFilterResonance+0x8c>
{
    4f4a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    4f4e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4f52:	eeb0 0a49 	vmov.f32	s0, s18
    4f56:	f002 f813 	bl	6f80 <LEAF_clip>
    4f5a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    4f5e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 4fd0 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4f62:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 4fd4 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    4f66:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    4f6a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    4f6e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    4f72:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4f76:	1c63      	adds	r3, r4, #1
    4f78:	ee00 3a90 	vmov	s1, r3
    4f7c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    4f80:	f001 fffe 	bl	6f80 <LEAF_clip>
    4f84:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4f88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4f8c:	4b12      	ldr	r3, [pc, #72]	; (4fd8 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    4f8e:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4f92:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4f96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4f9a:	ee38 8a27 	vadd.f32	s16, s16, s15
    4f9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4fa2:	edd4 7a00 	vldr	s15, [r4]
    4fa6:	eeb0 0a49 	vmov.f32	s0, s18
    4faa:	ed93 7a00 	vldr	s14, [r3]
    4fae:	ee38 8a68 	vsub.f32	s16, s16, s17
    4fb2:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    4fb6:	ee60 0a87 	vmul.f32	s1, s1, s14
    4fba:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    4fbe:	ecbd 8b04 	vpop	{d8-d9}
    4fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4fc6:	f001 bfdb 	b.w	6f80 <LEAF_clip>
    4fca:	bf00      	nop
    4fcc:	3dcccccd 	.word	0x3dcccccd
    4fd0:	44ffe000 	.word	0x44ffe000
    4fd4:	00000000 	.word	0x00000000
    4fd8:	2001ae98 	.word	0x2001ae98
    4fdc:	f3af 8000 	nop.w

00004fe0 <scaleEnvTimes>:
{
    4fe0:	b510      	push	{r4, lr}
    4fe2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    4fe6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 505c <scaleEnvTimes+0x7c>
{
    4fea:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    4fee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4ff2:	eeb0 0a68 	vmov.f32	s0, s17
    4ff6:	f001 ffc3 	bl	6f80 <LEAF_clip>
    4ffa:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    4ffe:	ed9f 1a18 	vldr	s2, [pc, #96]	; 5060 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5002:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    5006:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    500a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    500e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    5012:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5016:	1c63      	adds	r3, r4, #1
    5018:	ee00 3a90 	vmov	s1, r3
    501c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    5020:	f001 ffae 	bl	6f80 <LEAF_clip>
    5024:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    5028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    502c:	4b0d      	ldr	r3, [pc, #52]	; (5064 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    502e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    5032:	ee10 2a10 	vmov	r2, s0
    5036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    503a:	ee38 8a07 	vadd.f32	s16, s16, s14
    503e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5042:	ed94 7a00 	vldr	s14, [r4]
    5046:	ed93 0a00 	vldr	s0, [r3]
    504a:	ee38 8a68 	vsub.f32	s16, s16, s17
    504e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    5052:	eea7 0a08 	vfma.f32	s0, s14, s16
    5056:	ecbd 8b02 	vpop	{d8}
    505a:	bd10      	pop	{r4, pc}
    505c:	00000000 	.word	0x00000000
    5060:	44ffe000 	.word	0x44ffe000
    5064:	20014b98 	.word	0x20014b98
    5068:	f3af 8000 	nop.w
    506c:	f3af 8000 	nop.w
    5070:	f3af 8000 	nop.w
    5074:	f3af 8000 	nop.w
    5078:	f3af 8000 	nop.w
    507c:	f3af 8000 	nop.w

00005080 <scaleLFORates>:
{
    5080:	b510      	push	{r4, lr}
    5082:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    5086:	eddf 8a1d 	vldr	s17, [pc, #116]	; 50fc <scaleLFORates+0x7c>
{
    508a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    508e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    5092:	eeb0 0a68 	vmov.f32	s0, s17
    5096:	f001 ff73 	bl	6f80 <LEAF_clip>
    509a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    509e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 5100 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    50a2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    50a6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    50aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    50ae:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    50b2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    50b6:	1c63      	adds	r3, r4, #1
    50b8:	ee00 3a90 	vmov	s1, r3
    50bc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    50c0:	f001 ff5e 	bl	6f80 <LEAF_clip>
    50c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    50c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    50cc:	4b0d      	ldr	r3, [pc, #52]	; (5104 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    50ce:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    50d2:	ee10 2a10 	vmov	r2, s0
    50d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    50da:	ee38 8a07 	vadd.f32	s16, s16, s14
    50de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    50e2:	ed94 7a00 	vldr	s14, [r4]
    50e6:	ed93 0a00 	vldr	s0, [r3]
    50ea:	ee38 8a68 	vsub.f32	s16, s16, s17
    50ee:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    50f2:	eea7 0a08 	vfma.f32	s0, s14, s16
    50f6:	ecbd 8b02 	vpop	{d8}
    50fa:	bd10      	pop	{r4, pc}
    50fc:	00000000 	.word	0x00000000
    5100:	44ffe000 	.word	0x44ffe000
    5104:	20016ccc 	.word	0x20016ccc
    5108:	f3af 8000 	nop.w
    510c:	f3af 8000 	nop.w
    5110:	f3af 8000 	nop.w
    5114:	f3af 8000 	nop.w
    5118:	f3af 8000 	nop.w
    511c:	f3af 8000 	nop.w

00005120 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    5120:	b500      	push	{lr}
    5122:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    5124:	4807      	ldr	r0, [pc, #28]	; (5144 <randomNumber+0x24>)
    5126:	a901      	add	r1, sp, #4
    5128:	f003 fbaa 	bl	8880 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    512c:	eddd 7a01 	vldr	s15, [sp, #4]
    5130:	ed9f 0a05 	vldr	s0, [pc, #20]	; 5148 <randomNumber+0x28>
    5134:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    5138:	ee27 0a80 	vmul.f32	s0, s15, s0
    513c:	b003      	add	sp, #12
    513e:	f85d fb04 	ldr.w	pc, [sp], #4
    5142:	bf00      	nop
    5144:	2001cf08 	.word	0x2001cf08
    5148:	2f80000d 	.word	0x2f80000d
    514c:	f3af 8000 	nop.w
    5150:	f3af 8000 	nop.w
    5154:	f3af 8000 	nop.w
    5158:	f3af 8000 	nop.w
    515c:	f3af 8000 	nop.w

00005160 <scaleTwo>:
}
    5160:	ee30 0a00 	vadd.f32	s0, s0, s0
    5164:	4770      	bx	lr
    5166:	bf00      	nop
    5168:	f3af 8000 	nop.w
    516c:	f3af 8000 	nop.w
    5170:	f3af 8000 	nop.w
    5174:	f3af 8000 	nop.w
    5178:	f3af 8000 	nop.w
    517c:	f3af 8000 	nop.w

00005180 <parsePreset>:
{
    5180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5184:	460b      	mov	r3, r1
    5186:	b089      	sub	sp, #36	; 0x24
    5188:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    518a:	2200      	movs	r2, #0
    518c:	2101      	movs	r1, #1
    518e:	4877      	ldr	r0, [pc, #476]	; (536c <parsePreset+0x1ec>)
{
    5190:	e9cd 4301 	strd	r4, r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    5194:	f003 fb30 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    5198:	b672      	cpsid	i
	 presetReady = 0;
    519a:	2500      	movs	r5, #0
    519c:	4b74      	ldr	r3, [pc, #464]	; (5370 <parsePreset+0x1f0>)
	if (buffer[bufferIndex] == 17)
    519e:	4c75      	ldr	r4, [pc, #468]	; (5374 <parsePreset+0x1f4>)
		 audioOutBuffer[i] = 0;
    51a0:	2280      	movs	r2, #128	; 0x80
    51a2:	4629      	mov	r1, r5
    51a4:	4874      	ldr	r0, [pc, #464]	; (5378 <parsePreset+0x1f8>)
	 presetReady = 0;
    51a6:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    51a8:	f003 fc1e 	bl	89e8 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    51ac:	f894 c000 	ldrb.w	ip, [r4]
	audioMasterLevel = 0.0f;
    51b0:	2300      	movs	r3, #0
    51b2:	4a72      	ldr	r2, [pc, #456]	; (537c <parsePreset+0x1fc>)
	if (buffer[bufferIndex] == 17)
    51b4:	f1bc 0f11 	cmp.w	ip, #17
	audioMasterLevel = 0.0f;
    51b8:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    51ba:	f000 8205 	beq.w	55c8 <parsePreset+0x448>
	uint16_t bufferIndex = 0;
    51be:	4629      	mov	r1, r5
	uint16_t presetVersionNumber = 0;
    51c0:	46ab      	mov	fp, r5
		presetName[i] = buffer[bufferIndex];
    51c2:	1c4a      	adds	r2, r1, #1
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51c4:	9b02      	ldr	r3, [sp, #8]
		presetName[i] = buffer[bufferIndex];
    51c6:	f814 9002 	ldrb.w	r9, [r4, r2]
    51ca:	1c8a      	adds	r2, r1, #2
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		presetName[i] = buffer[bufferIndex];
    51d0:	f814 8002 	ldrb.w	r8, [r4, r2]
    51d4:	1cca      	adds	r2, r1, #3
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51d6:	9307      	str	r3, [sp, #28]
		presetName[i] = buffer[bufferIndex];
    51d8:	5ca7      	ldrb	r7, [r4, r2]
    51da:	1d0a      	adds	r2, r1, #4
    51dc:	5ca2      	ldrb	r2, [r4, r2]
    51de:	9206      	str	r2, [sp, #24]
    51e0:	1d4a      	adds	r2, r1, #5
    51e2:	5ca0      	ldrb	r0, [r4, r2]
    51e4:	1d8a      	adds	r2, r1, #6
    51e6:	5ca5      	ldrb	r5, [r4, r2]
    51e8:	1dca      	adds	r2, r1, #7
    51ea:	9005      	str	r0, [sp, #20]
    51ec:	f814 a002 	ldrb.w	sl, [r4, r2]
    51f0:	f101 0208 	add.w	r2, r1, #8
    51f4:	9504      	str	r5, [sp, #16]
    51f6:	5ca6      	ldrb	r6, [r4, r2]
    51f8:	f101 0209 	add.w	r2, r1, #9
    51fc:	9603      	str	r6, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51fe:	4e60      	ldr	r6, [pc, #384]	; (5380 <parsePreset+0x200>)
		presetName[i] = buffer[bufferIndex];
    5200:	5ca5      	ldrb	r5, [r4, r2]
    5202:	f101 020a 	add.w	r2, r1, #10
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5206:	eb06 0043 	add.w	r0, r6, r3, lsl #1
    520a:	005e      	lsls	r6, r3, #1
		presetName[i] = buffer[bufferIndex];
    520c:	f814 e002 	ldrb.w	lr, [r4, r2]
    5210:	4a5c      	ldr	r2, [pc, #368]	; (5384 <parsePreset+0x204>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5212:	4633      	mov	r3, r6
    5214:	4e5a      	ldr	r6, [pc, #360]	; (5380 <parsePreset+0x200>)
		presetName[i] = buffer[bufferIndex];
    5216:	f882 c000 	strb.w	ip, [r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    521a:	f806 c003 	strb.w	ip, [r6, r3]
		presetName[i] = buffer[bufferIndex];
    521e:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5222:	f880 9001 	strb.w	r9, [r0, #1]
		presetName[i] = buffer[bufferIndex];
    5226:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    522a:	f880 8002 	strb.w	r8, [r0, #2]
		presetName[i] = buffer[bufferIndex];
    522e:	70d7      	strb	r7, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5230:	70c7      	strb	r7, [r0, #3]
		presetName[i] = buffer[bufferIndex];
    5232:	9f06      	ldr	r7, [sp, #24]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5234:	9b07      	ldr	r3, [sp, #28]
		presetName[i] = buffer[bufferIndex];
    5236:	7117      	strb	r7, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5238:	7107      	strb	r7, [r0, #4]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    523a:	011b      	lsls	r3, r3, #4
		presetName[i] = buffer[bufferIndex];
    523c:	9f05      	ldr	r7, [sp, #20]
    523e:	7157      	strb	r7, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5240:	7147      	strb	r7, [r0, #5]
		presetName[i] = buffer[bufferIndex];
    5242:	9f04      	ldr	r7, [sp, #16]
    5244:	7197      	strb	r7, [r2, #6]
    5246:	9e03      	ldr	r6, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5248:	7187      	strb	r7, [r0, #6]
		presetName[i] = buffer[bufferIndex];
    524a:	f882 a007 	strb.w	sl, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    524e:	f880 a007 	strb.w	sl, [r0, #7]
		presetName[i] = buffer[bufferIndex];
    5252:	7216      	strb	r6, [r2, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5254:	7206      	strb	r6, [r0, #8]
		presetName[i] = buffer[bufferIndex];
    5256:	7255      	strb	r5, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5258:	7245      	strb	r5, [r0, #9]
		presetName[i] = buffer[bufferIndex];
    525a:	f101 050b 	add.w	r5, r1, #11
    525e:	f882 e00a 	strb.w	lr, [r2, #10]
    5262:	5d65      	ldrb	r5, [r4, r5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5264:	f880 e00a 	strb.w	lr, [r0, #10]
		presetName[i] = buffer[bufferIndex];
    5268:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    526a:	72c5      	strb	r5, [r0, #11]
		presetName[i] = buffer[bufferIndex];
    526c:	f101 050c 	add.w	r5, r1, #12
    5270:	4e45      	ldr	r6, [pc, #276]	; (5388 <parsePreset+0x208>)
    5272:	5d65      	ldrb	r5, [r4, r5]
    5274:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5276:	7305      	strb	r5, [r0, #12]
		presetName[i] = buffer[bufferIndex];
    5278:	f101 050d 	add.w	r5, r1, #13
    527c:	5d65      	ldrb	r5, [r4, r5]
    527e:	7355      	strb	r5, [r2, #13]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5280:	7345      	strb	r5, [r0, #13]
		bufferIndex++;
    5282:	f101 000e 	add.w	r0, r1, #14
	for (int j = 0; j < 8; j++)
    5286:	2500      	movs	r5, #0
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5288:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    528c:	5c27      	ldrb	r7, [r4, r0]
	for (int j = 0; j < 8; j++)
    528e:	3501      	adds	r5, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5290:	eb03 0242 	add.w	r2, r3, r2, lsl #1
	for (int j = 0; j < 8; j++)
    5294:	2d08      	cmp	r5, #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5296:	54b7      	strb	r7, [r6, r2]
			bufferIndex++;
    5298:	f100 0701 	add.w	r7, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    529c:	4432      	add	r2, r6
    529e:	b2bf      	uxth	r7, r7
    52a0:	5de7      	ldrb	r7, [r4, r7]
    52a2:	7057      	strb	r7, [r2, #1]
			bufferIndex++;
    52a4:	f100 0702 	add.w	r7, r0, #2
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52a8:	b2bf      	uxth	r7, r7
    52aa:	5de7      	ldrb	r7, [r4, r7]
    52ac:	7097      	strb	r7, [r2, #2]
			bufferIndex++;
    52ae:	f100 0703 	add.w	r7, r0, #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52b2:	b2bf      	uxth	r7, r7
    52b4:	5de7      	ldrb	r7, [r4, r7]
    52b6:	70d7      	strb	r7, [r2, #3]
			bufferIndex++;
    52b8:	f100 0704 	add.w	r7, r0, #4
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52bc:	b2bf      	uxth	r7, r7
    52be:	5de7      	ldrb	r7, [r4, r7]
    52c0:	7117      	strb	r7, [r2, #4]
			bufferIndex++;
    52c2:	f100 0705 	add.w	r7, r0, #5
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52c6:	b2bf      	uxth	r7, r7
    52c8:	5de7      	ldrb	r7, [r4, r7]
    52ca:	7157      	strb	r7, [r2, #5]
			bufferIndex++;
    52cc:	f100 0706 	add.w	r7, r0, #6
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52d0:	b2bf      	uxth	r7, r7
    52d2:	5de7      	ldrb	r7, [r4, r7]
    52d4:	7197      	strb	r7, [r2, #6]
			bufferIndex++;
    52d6:	f100 0707 	add.w	r7, r0, #7
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52da:	b2bf      	uxth	r7, r7
    52dc:	5de7      	ldrb	r7, [r4, r7]
    52de:	71d7      	strb	r7, [r2, #7]
			bufferIndex++;
    52e0:	f100 0708 	add.w	r7, r0, #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52e4:	b2bf      	uxth	r7, r7
    52e6:	5de7      	ldrb	r7, [r4, r7]
    52e8:	7217      	strb	r7, [r2, #8]
			bufferIndex++;
    52ea:	f100 0709 	add.w	r7, r0, #9
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52ee:	b2bf      	uxth	r7, r7
    52f0:	5de7      	ldrb	r7, [r4, r7]
    52f2:	7257      	strb	r7, [r2, #9]
			bufferIndex++;
    52f4:	f100 070a 	add.w	r7, r0, #10
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52f8:	b2bf      	uxth	r7, r7
    52fa:	5de7      	ldrb	r7, [r4, r7]
    52fc:	7297      	strb	r7, [r2, #10]
			bufferIndex++;
    52fe:	f100 070b 	add.w	r7, r0, #11
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5302:	b2bf      	uxth	r7, r7
    5304:	5de7      	ldrb	r7, [r4, r7]
    5306:	72d7      	strb	r7, [r2, #11]
			bufferIndex++;
    5308:	f100 070c 	add.w	r7, r0, #12
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    530c:	b2bf      	uxth	r7, r7
    530e:	5de7      	ldrb	r7, [r4, r7]
    5310:	7317      	strb	r7, [r2, #12]
			bufferIndex++;
    5312:	f100 070d 	add.w	r7, r0, #13
    5316:	f100 000e 	add.w	r0, r0, #14
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    531a:	b2bf      	uxth	r7, r7
			bufferIndex++;
    531c:	b280      	uxth	r0, r0
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    531e:	5de7      	ldrb	r7, [r4, r7]
    5320:	7357      	strb	r7, [r2, #13]
	for (int j = 0; j < 8; j++)
    5322:	d1b1      	bne.n	5288 <parsePreset+0x108>
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5324:	f101 027e 	add.w	r2, r1, #126	; 0x7e
    5328:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    532c:	5ca0      	ldrb	r0, [r4, r2]
    532e:	5ce3      	ldrb	r3, [r4, r3]
    5330:	eb03 2300 	add.w	r3, r3, r0, lsl #8
	if (paramCount > size)
    5334:	9801      	ldr	r0, [sp, #4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5336:	b29b      	uxth	r3, r3
	if (paramCount > size)
    5338:	4283      	cmp	r3, r0
    533a:	dc0c      	bgt.n	5356 <parsePreset+0x1d6>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    533c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	if (paramEndCheck != 0xefef)
    5340:	f64e 76ef 	movw	r6, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    5344:	005d      	lsls	r5, r3, #1
    5346:	4422      	add	r2, r4
    5348:	7897      	ldrb	r7, [r2, #2]
    534a:	78d0      	ldrb	r0, [r2, #3]
    534c:	eb00 2007 	add.w	r0, r0, r7, lsl #8
	if (paramEndCheck != 0xefef)
    5350:	b280      	uxth	r0, r0
    5352:	42b0      	cmp	r0, r6
    5354:	d01c      	beq.n	5390 <parsePreset+0x210>
		audioMasterLevel = 1.0f;
    5356:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    535a:	4b0c      	ldr	r3, [pc, #48]	; (538c <parsePreset+0x20c>)
    535c:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    535e:	4807      	ldr	r0, [pc, #28]	; (537c <parsePreset+0x1fc>)
    5360:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    5362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    5364:	b662      	cpsie	i
}
    5366:	b009      	add	sp, #36	; 0x24
    5368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    536c:	58020000 	.word	0x58020000
    5370:	20005744 	.word	0x20005744
    5374:	300001c0 	.word	0x300001c0
    5378:	30000040 	.word	0x30000040
    537c:	200006d4 	.word	0x200006d4
    5380:	30032000 	.word	0x30032000
    5384:	2001aa78 	.word	0x2001aa78
    5388:	30032380 	.word	0x30032380
    538c:	2001aa8c 	.word	0x2001aa8c
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    5390:	7910      	ldrb	r0, [r2, #4]
    5392:	7952      	ldrb	r2, [r2, #5]
    5394:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    5398:	b290      	uxth	r0, r2
    539a:	9003      	str	r0, [sp, #12]
	if (presetVersionNumber == 0)
    539c:	f1bb 0f00 	cmp.w	fp, #0
    53a0:	f000 811a 	beq.w	55d8 <parsePreset+0x458>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    53a4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    53a8:	18d0      	adds	r0, r2, r3
    53aa:	f101 0284 	add.w	r2, r1, #132	; 0x84
    53ae:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    53b2:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    53b4:	9801      	ldr	r0, [sp, #4]
    53b6:	4282      	cmp	r2, r0
    53b8:	dccd      	bgt.n	5356 <parsePreset+0x1d6>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    53ba:	18a6      	adds	r6, r4, r2
    53bc:	5ca0      	ldrb	r0, [r4, r2]
    53be:	7872      	ldrb	r2, [r6, #1]
    53c0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    53c4:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    53c8:	b292      	uxth	r2, r2
    53ca:	4282      	cmp	r2, r0
    53cc:	d1c3      	bne.n	5356 <parsePreset+0x1d6>
	bufferIndex = bufferIndex + 2;
    53ce:	f101 0c80 	add.w	ip, r1, #128	; 0x80
    53d2:	46e1      	mov	r9, ip
	for (int i = 0; i < paramCount; i++)
    53d4:	2b00      	cmp	r3, #0
    53d6:	f000 8542 	beq.w	5e5e <parsePreset+0xcde>
    53da:	4465      	add	r5, ip
    53dc:	48b5      	ldr	r0, [pc, #724]	; (56b4 <parsePreset+0x534>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    53de:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 56b8 <parsePreset+0x538>
    53e2:	fa1f fc85 	uxth.w	ip, r5
	for (int i = 0; i < paramCount; i++)
    53e6:	4606      	mov	r6, r0
    53e8:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    53ea:	eb04 0209 	add.w	r2, r4, r9
    53ee:	f814 7009 	ldrb.w	r7, [r4, r9]
		bufferIndex += 2;
    53f2:	f109 0902 	add.w	r9, r9, #2
	for (int i = 0; i < paramCount; i++)
    53f6:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    53f8:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    53fa:	fa1f f989 	uxth.w	r9, r9
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    53fe:	eb02 2207 	add.w	r2, r2, r7, lsl #8
	for (int i = 0; i < paramCount; i++)
    5402:	45cc      	cmp	ip, r9
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5404:	ee07 2a90 	vmov	s15, r2
    5408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    540c:	ee67 7a87 	vmul.f32	s15, s15, s14
    5410:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
    5414:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    5418:	d1e7      	bne.n	53ea <parsePreset+0x26a>
    541a:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
    541e:	4aa5      	ldr	r2, [pc, #660]	; (56b4 <parsePreset+0x534>)
    5420:	4fa6      	ldr	r7, [pc, #664]	; (56bc <parsePreset+0x53c>)
    5422:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
    5426:	6157      	str	r7, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    5428:	321c      	adds	r2, #28
    542a:	4295      	cmp	r5, r2
    542c:	d1fb      	bne.n	5426 <parsePreset+0x2a6>
    542e:	4aa4      	ldr	r2, [pc, #656]	; (56c0 <parsePreset+0x540>)
		params[i].scaleFunc = &scaleDefault;
    5430:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    5432:	301c      	adds	r0, #28
    5434:	4285      	cmp	r5, r0
    5436:	d1fb      	bne.n	5430 <parsePreset+0x2b0>
		bufferIndex += 2;
    5438:	eb01 0943 	add.w	r9, r1, r3, lsl #1
    543c:	f109 0980 	add.w	r9, r9, #128	; 0x80
    5440:	fa1f f989 	uxth.w	r9, r9
	for (int i = paramCount; i < NUM_PARAMS; i++)
    5444:	2b9b      	cmp	r3, #155	; 0x9b
    5446:	f300 8507 	bgt.w	5e58 <parsePreset+0xcd8>
    544a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    544e:	4d9d      	ldr	r5, [pc, #628]	; (56c4 <parsePreset+0x544>)
    5450:	4f9a      	ldr	r7, [pc, #616]	; (56bc <parsePreset+0x53c>)
			params[i].zeroToOneVal[v] = 0.0f;
    5452:	2100      	movs	r1, #0
    5454:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5458:	4a99      	ldr	r2, [pc, #612]	; (56c0 <parsePreset+0x540>)
    545a:	6019      	str	r1, [r3, #0]
    545c:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    545e:	e9c3 2704 	strd	r2, r7, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    5462:	331c      	adds	r3, #28
    5464:	429d      	cmp	r5, r3
    5466:	d1f8      	bne.n	545a <parsePreset+0x2da>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    5468:	4a97      	ldr	r2, [pc, #604]	; (56c8 <parsePreset+0x548>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    546a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    546e:	4b97      	ldr	r3, [pc, #604]	; (56cc <parsePreset+0x54c>)
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    5470:	f8c6 22e8 	str.w	r2, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    5474:	f8c6 2454 	str.w	r2, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    5478:	f8c6 25c0 	str.w	r2, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    547c:	4a94      	ldr	r2, [pc, #592]	; (56d0 <parsePreset+0x550>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    547e:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    5482:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    5486:	f8c6 2470 	str.w	r2, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    548a:	f8c6 25dc 	str.w	r2, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    548e:	4a91      	ldr	r2, [pc, #580]	; (56d4 <parsePreset+0x554>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    5490:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    5494:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    5498:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    549c:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    54a0:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    54a4:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    54a8:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    54ac:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    54b0:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    54b4:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    54b8:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    54bc:	f8c6 2aac 	str.w	r2, [r6, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    54c0:	4b85      	ldr	r3, [pc, #532]	; (56d8 <parsePreset+0x558>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    54c2:	f8c6 2b54 	str.w	r2, [r6, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    54c6:	4a85      	ldr	r2, [pc, #532]	; (56dc <parsePreset+0x55c>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    54c8:	f8df a23c 	ldr.w	sl, [pc, #572]	; 5708 <parsePreset+0x588>
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    54cc:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    54d0:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    54d4:	f6aa 181c 	subw	r8, sl, #2332	; 0x91c
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    54d8:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    54dc:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    54e0:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    54e4:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    54e8:	f8c6 21d0 	str.w	r2, [r6, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    54ec:	4b7c      	ldr	r3, [pc, #496]	; (56e0 <parsePreset+0x560>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    54ee:	4f7d      	ldr	r7, [pc, #500]	; (56e4 <parsePreset+0x564>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    54f0:	4a7d      	ldr	r2, [pc, #500]	; (56e8 <parsePreset+0x568>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    54f2:	f8c6 3e80 	str.w	r3, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    54f6:	f8c6 3f0c 	str.w	r3, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    54fa:	f8c6 7ae4 	str.w	r7, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    54fe:	f8c6 7b8c 	str.w	r7, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    5502:	f8c6 21ec 	str.w	r2, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    5506:	f8c6 3f98 	str.w	r3, [r6, #3992]	; 0xf98
	for (int i = 0; i < NUM_EFFECT; i++)
    550a:	2600      	movs	r6, #0
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    550c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    5510:	4b76      	ldr	r3, [pc, #472]	; (56ec <parsePreset+0x56c>)
    5512:	f8ca 30cc 	str.w	r3, [sl, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5516:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    551a:	4631      	mov	r1, r6
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    551c:	ee67 7a87 	vmul.f32	s15, s15, s14
    5520:	fef8 7a67 	vrinta.f32	s15, s15
    5524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5528:	edcd 7a01 	vstr	s15, [sp, #4]
    552c:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    5530:	280b      	cmp	r0, #11
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    5532:	bf88      	it	hi
    5534:	f8c8 7064 	strhi.w	r7, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    5538:	f003 f9e6 	bl	8908 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    553c:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    5540:	4631      	mov	r1, r6
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5542:	ee67 7a87 	vmul.f32	s15, s15, s14
    5546:	fef8 7a67 	vrinta.f32	s15, s15
    554a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    554e:	edcd 7a01 	vstr	s15, [sp, #4]
    5552:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    5556:	280b      	cmp	r0, #11
    5558:	d946      	bls.n	55e8 <parsePreset+0x468>
	for (int i = 0; i < NUM_EFFECT; i++)
    555a:	3601      	adds	r6, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    555c:	f8c8 7064 	str.w	r7, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    5560:	f003 f9d2 	bl	8908 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    5564:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    5568:	2e04      	cmp	r6, #4
    556a:	d1d4      	bne.n	5516 <parsePreset+0x396>
    556c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 56b4 <parsePreset+0x534>
    5570:	4646      	mov	r6, r8
    5572:	4647      	mov	r7, r8
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5574:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5576:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5578:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
    557c:	4798      	blx	r3
    557e:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    5582:	42bd      	cmp	r5, r7
    5584:	d1f6      	bne.n	5574 <parsePreset+0x3f4>
    5586:	4f4b      	ldr	r7, [pc, #300]	; (56b4 <parsePreset+0x534>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5588:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    558a:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    558c:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
    5590:	4798      	blx	r3
    5592:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5596:	42bd      	cmp	r5, r7
    5598:	d1f6      	bne.n	5588 <parsePreset+0x408>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    559a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    559e:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
    55a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    55a6:	fef8 7a67 	vrinta.f32	s15, s15
    55aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    55ae:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    55b2:	2b06      	cmp	r3, #6
    55b4:	d82e      	bhi.n	5614 <parsePreset+0x494>
    55b6:	e8df f013 	tbh	[pc, r3, lsl #1]
    55ba:	002a      	.short	0x002a
    55bc:	0445044a 	.word	0x0445044a
    55c0:	043b0440 	.word	0x043b0440
    55c4:	04310436 	.word	0x04310436
		if (buffer[bufferIndex + 1] == 18)
    55c8:	7863      	ldrb	r3, [r4, #1]
    55ca:	2b12      	cmp	r3, #18
    55cc:	d015      	beq.n	55fa <parsePreset+0x47a>
	uint16_t presetVersionNumber = 0;
    55ce:	46ab      	mov	fp, r5
		presetName[i] = buffer[bufferIndex];
    55d0:	f894 c004 	ldrb.w	ip, [r4, #4]
		bufferIndex = 4;
    55d4:	2104      	movs	r1, #4
    55d6:	e5f4      	b.n	51c2 <parsePreset+0x42>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    55d8:	f101 0284 	add.w	r2, r1, #132	; 0x84
    55dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    55e0:	442a      	add	r2, r5
    55e2:	4402      	add	r2, r0
    55e4:	b292      	uxth	r2, r2
    55e6:	e6e5      	b.n	53b4 <parsePreset+0x234>
			setEffectsFunctions(effectType, i);
    55e8:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_EFFECT; i++)
    55ea:	3601      	adds	r6, #1
			setEffectsFunctions(effectType, i);
    55ec:	f003 f98c 	bl	8908 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    55f0:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    55f4:	2e04      	cmp	r6, #4
    55f6:	d18e      	bne.n	5516 <parsePreset+0x396>
    55f8:	e7b8      	b.n	556c <parsePreset+0x3ec>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    55fa:	78a2      	ldrb	r2, [r4, #2]
		bufferIndex = 4;
    55fc:	2104      	movs	r1, #4
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    55fe:	78e3      	ldrb	r3, [r4, #3]
		presetName[i] = buffer[bufferIndex];
    5600:	f894 c004 	ldrb.w	ip, [r4, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    5604:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5608:	fa1f fb83 	uxth.w	fp, r3
    560c:	e5d9      	b.n	51c2 <parsePreset+0x42>
			  shapeTick[i] = &sawSquareTick;
    560e:	4b38      	ldr	r3, [pc, #224]	; (56f0 <parsePreset+0x570>)
    5610:	4a38      	ldr	r2, [pc, #224]	; (56f4 <parsePreset+0x574>)
    5612:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5614:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5618:	ed96 7aaa 	vldr	s14, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    561c:	4a36      	ldr	r2, [pc, #216]	; (56f8 <parsePreset+0x578>)
    561e:	4937      	ldr	r1, [pc, #220]	; (56fc <parsePreset+0x57c>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5620:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5624:	edd2 7a00 	vldr	s15, [r2]
    5628:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    562c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5630:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    5634:	bfd4      	ite	le
    5636:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    5638:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    563a:	fef8 7a67 	vrinta.f32	s15, s15
    563e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			enabledCount++;
    5642:	4603      	mov	r3, r0
    5644:	6008      	str	r0, [r1, #0]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5646:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    564a:	2a06      	cmp	r2, #6
    564c:	d80b      	bhi.n	5666 <parsePreset+0x4e6>
    564e:	e8df f012 	tbh	[pc, r2, lsl #1]
    5652:	0007      	.short	0x0007
    5654:	03dd03e1 	.word	0x03dd03e1
    5658:	039d03a1 	.word	0x039d03a1
    565c:	03950399 	.word	0x03950399
			  shapeTick[i] = &sawSquareTick;
    5660:	4a23      	ldr	r2, [pc, #140]	; (56f0 <parsePreset+0x570>)
    5662:	4824      	ldr	r0, [pc, #144]	; (56f4 <parsePreset+0x574>)
    5664:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5666:	4a26      	ldr	r2, [pc, #152]	; (5700 <parsePreset+0x580>)
    5668:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    566c:	ed92 7a00 	vldr	s14, [r2]
    5670:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5678:	f340 8366 	ble.w	5d48 <parsePreset+0xbc8>
			enabledCount++;
    567c:	3301      	adds	r3, #1
			oscsEnabled[i] = 1;
    567e:	2201      	movs	r2, #1
			enabledCount++;
    5680:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    5682:	604a      	str	r2, [r1, #4]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5684:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    5688:	4a1e      	ldr	r2, [pc, #120]	; (5704 <parsePreset+0x584>)
    568a:	edd2 7a00 	vldr	s15, [r2]
    568e:	ee67 7a87 	vmul.f32	s15, s15, s14
    5692:	fef8 7a67 	vrinta.f32	s15, s15
    5696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    569a:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    569e:	2a06      	cmp	r2, #6
    56a0:	d837      	bhi.n	5712 <parsePreset+0x592>
    56a2:	e8df f012 	tbh	[pc, r2, lsl #1]
    56a6:	0367      	.short	0x0367
    56a8:	035f0363 	.word	0x035f0363
    56ac:	0357035b 	.word	0x0357035b
    56b0:	00330353 	.word	0x00330353
    56b4:	20019958 	.word	0x20019958
    56b8:	377ffff6 	.word	0x377ffff6
    56bc:	00004ea1 	.word	0x00004ea1
    56c0:	00004de1 	.word	0x00004de1
    56c4:	2001aa68 	.word	0x2001aa68
    56c8:	00004e21 	.word	0x00004e21
    56cc:	00004fe1 	.word	0x00004fe1
    56d0:	00004e41 	.word	0x00004e41
    56d4:	00004e61 	.word	0x00004e61
    56d8:	00004e01 	.word	0x00004e01
    56dc:	00004ec1 	.word	0x00004ec1
    56e0:	00005081 	.word	0x00005081
    56e4:	00004f41 	.word	0x00004f41
    56e8:	00004f01 	.word	0x00004f01
    56ec:	00004e81 	.word	0x00004e81
    56f0:	20005bd4 	.word	0x20005bd4
    56f4:	00000921 	.word	0x00000921
    56f8:	20019ea0 	.word	0x20019ea0
    56fc:	2001994c 	.word	0x2001994c
    5700:	20019d6c 	.word	0x20019d6c
    5704:	2001a00c 	.word	0x2001a00c
    5708:	2001a958 	.word	0x2001a958
			  shapeTick[i] = &userTick;
    570c:	4a90      	ldr	r2, [pc, #576]	; (5950 <parsePreset+0x7d0>)
    570e:	4891      	ldr	r0, [pc, #580]	; (5954 <parsePreset+0x7d4>)
    5710:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5712:	4a91      	ldr	r2, [pc, #580]	; (5958 <parsePreset+0x7d8>)
    5714:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5718:	ed92 7a00 	vldr	s14, [r2]
    571c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5724:	f340 830e 	ble.w	5d44 <parsePreset+0xbc4>
			enabledCount++;
    5728:	3301      	adds	r3, #1
			oscsEnabled[i] = 1;
    572a:	2201      	movs	r2, #1
			enabledCount++;
    572c:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    572e:	4f8b      	ldr	r7, [pc, #556]	; (595c <parsePreset+0x7dc>)
    5730:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    5734:	608a      	str	r2, [r1, #8]
		setFilterTypes(filterType, i);
    5736:	2100      	movs	r1, #0
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    5738:	edd7 7a00 	vldr	s15, [r7]
    573c:	f207 4544 	addw	r5, r7, #1092	; 0x444
	oscAmpMult = oscAmpMultArray[enabledCount];
    5740:	4a87      	ldr	r2, [pc, #540]	; (5960 <parsePreset+0x7e0>)
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    5742:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    5746:	ee67 7aa6 	vmul.f32	s15, s15, s13
	oscAmpMult = oscAmpMultArray[enabledCount];
    574a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    574e:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    5752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    5756:	681a      	ldr	r2, [r3, #0]
    5758:	4b82      	ldr	r3, [pc, #520]	; (5964 <parsePreset+0x7e4>)
		setFilterTypes(filterType, i);
    575a:	ee17 0a90 	vmov	r0, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    575e:	601a      	str	r2, [r3, #0]
		setFilterTypes(filterType, i);
    5760:	f003 f802 	bl	8768 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    5764:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    5768:	460f      	mov	r7, r1
		setFilterTypes(filterType, i);
    576a:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    576c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5770:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    5774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5778:	ee17 0a90 	vmov	r0, s15
    577c:	f002 fff4 	bl	8768 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    5780:	462b      	mov	r3, r5
		setLFOShapes(LFOShape, i);
    5782:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_LFOS; i++)
    5784:	3701      	adds	r7, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    5786:	358c      	adds	r5, #140	; 0x8c
    5788:	edd3 7a00 	vldr	s15, [r3]
    578c:	ee67 7a87 	vmul.f32	s15, s15, s14
    5790:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    5794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5798:	ee17 0a90 	vmov	r0, s15
    579c:	f002 ffa4 	bl	86e8 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    57a0:	2f04      	cmp	r7, #4
    57a2:	d1ed      	bne.n	5780 <parsePreset+0x600>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    57a4:	4d70      	ldr	r5, [pc, #448]	; (5968 <parsePreset+0x7e8>)
		params[i].objectNumber = 0;
    57a6:	2700      	movs	r7, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    57a8:	4b70      	ldr	r3, [pc, #448]	; (596c <parsePreset+0x7ec>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    57aa:	f8c6 52d0 	str.w	r5, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    57ae:	f8c6 543c 	str.w	r5, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    57b2:	f8c6 55a8 	str.w	r5, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    57b6:	4d6e      	ldr	r5, [pc, #440]	; (5970 <parsePreset+0x7f0>)
	params[Effect1Mix].setParam = &fxMixSet;
    57b8:	486e      	ldr	r0, [pc, #440]	; (5974 <parsePreset+0x7f4>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    57ba:	f8c6 535c 	str.w	r5, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    57be:	f8c6 54c8 	str.w	r5, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    57c2:	f8c6 5634 	str.w	r5, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    57c6:	681d      	ldr	r5, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    57c8:	496b      	ldr	r1, [pc, #428]	; (5978 <parsePreset+0x7f8>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    57ca:	f8c6 5714 	str.w	r5, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    57ce:	685d      	ldr	r5, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    57d0:	f8c6 07a0 	str.w	r0, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    57d4:	f8c6 5730 	str.w	r5, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    57d8:	689d      	ldr	r5, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    57da:	f8c6 17bc 	str.w	r1, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    57de:	f8c6 574c 	str.w	r5, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    57e2:	68dd      	ldr	r5, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    57e4:	4a65      	ldr	r2, [pc, #404]	; (597c <parsePreset+0x7fc>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    57e6:	f8c6 5768 	str.w	r5, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    57ea:	691d      	ldr	r5, [r3, #16]
    57ec:	f8c6 5784 	str.w	r5, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    57f0:	695d      	ldr	r5, [r3, #20]
    57f2:	f8c6 57f4 	str.w	r5, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    57f6:	699d      	ldr	r5, [r3, #24]
    57f8:	f8c6 5810 	str.w	r5, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    57fc:	69dd      	ldr	r5, [r3, #28]
    57fe:	f8c6 582c 	str.w	r5, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    5802:	4d5f      	ldr	r5, [pc, #380]	; (5980 <parsePreset+0x800>)
    5804:	f8c6 5228 	str.w	r5, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    5808:	4d5e      	ldr	r5, [pc, #376]	; (5984 <parsePreset+0x804>)
    580a:	f8c6 5260 	str.w	r5, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    580e:	4d5e      	ldr	r5, [pc, #376]	; (5988 <parsePreset+0x808>)
    5810:	f8c6 5244 	str.w	r5, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
    5814:	4d5d      	ldr	r5, [pc, #372]	; (598c <parsePreset+0x80c>)
    5816:	64f5      	str	r5, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    5818:	4d5d      	ldr	r5, [pc, #372]	; (5990 <parsePreset+0x810>)
    581a:	f8c6 51d4 	str.w	r5, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    581e:	4d5d      	ldr	r5, [pc, #372]	; (5994 <parsePreset+0x814>)
    5820:	f8c6 51f0 	str.w	r5, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    5824:	4d5c      	ldr	r5, [pc, #368]	; (5998 <parsePreset+0x818>)
    5826:	f8ca 50d0 	str.w	r5, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    582a:	6a1d      	ldr	r5, [r3, #32]
    582c:	f8c6 5848 	str.w	r5, [r6, #2120]	; 0x848
	params[OutputAmp].setParam = &setAmp;
    5830:	2501      	movs	r5, #1
	params[Effect2PostGain].setParam = &fxPostGainSet;
    5832:	f8c6 189c 	str.w	r1, [r6, #2204]	; 0x89c
	params[Effect3PostGain].setParam = &fxPostGainSet;
    5836:	f8c6 197c 	str.w	r1, [r6, #2428]	; 0x97c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    583a:	f8c6 1a5c 	str.w	r1, [r6, #2652]	; 0xa5c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    583e:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2Mix].setParam = &fxMixSet;
    5840:	f8c6 0880 	str.w	r0, [r6, #2176]	; 0x880
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    5844:	f8c6 1864 	str.w	r1, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    5848:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3Mix].setParam = &fxMixSet;
    584a:	f8c6 0960 	str.w	r0, [r6, #2400]	; 0x960
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    584e:	f8c6 18d4 	str.w	r1, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    5852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4Mix].setParam = &fxMixSet;
    5854:	f8c6 0a40 	str.w	r0, [r6, #2624]	; 0xa40
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    5858:	f8c6 18f0 	str.w	r1, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    585c:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    585e:	484f      	ldr	r0, [pc, #316]	; (599c <parsePreset+0x81c>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    5860:	f8c6 190c 	str.w	r1, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    5864:	6b59      	ldr	r1, [r3, #52]	; 0x34
    5866:	f8c6 1928 	str.w	r1, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    586a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    586c:	f8c6 1944 	str.w	r1, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    5870:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5872:	f8c6 19b4 	str.w	r1, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    5876:	6c19      	ldr	r1, [r3, #64]	; 0x40
    5878:	f8c6 19d0 	str.w	r1, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    587c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    587e:	f8c6 19ec 	str.w	r1, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    5882:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    5884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    5886:	f8c6 1a08 	str.w	r1, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    588a:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    588e:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    5890:	4943      	ldr	r1, [pc, #268]	; (59a0 <parsePreset+0x820>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    5892:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    5896:	6853      	ldr	r3, [r2, #4]
    5898:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    589c:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    589e:	f8c6 1be4 	str.w	r1, [r6, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    58a2:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    58a6:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    58a8:	f8c6 1c8c 	str.w	r1, [r6, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    58ac:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    58b0:	4b3c      	ldr	r3, [pc, #240]	; (59a4 <parsePreset+0x824>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    58b2:	f8c6 1d34 	str.w	r1, [r6, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    58b6:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    58ba:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    58be:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    58c2:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    58c6:	4b38      	ldr	r3, [pc, #224]	; (59a8 <parsePreset+0x828>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    58c8:	f8c6 1ddc 	str.w	r1, [r6, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    58cc:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    58d0:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    58d4:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    58d8:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    58dc:	4b33      	ldr	r3, [pc, #204]	; (59ac <parsePreset+0x82c>)
    58de:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    58e2:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    58e6:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    58ea:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    58ee:	4b30      	ldr	r3, [pc, #192]	; (59b0 <parsePreset+0x830>)
    58f0:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    58f4:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    58f8:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    58fc:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    5900:	6803      	ldr	r3, [r0, #0]
    5902:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    5906:	68c3      	ldr	r3, [r0, #12]
    5908:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    590c:	6983      	ldr	r3, [r0, #24]
    590e:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    5912:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5914:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    5918:	6843      	ldr	r3, [r0, #4]
    591a:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    591e:	6903      	ldr	r3, [r0, #16]
    5920:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    5924:	69c3      	ldr	r3, [r0, #28]
    5926:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    592a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    592c:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    5930:	6883      	ldr	r3, [r0, #8]
    5932:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    5936:	6943      	ldr	r3, [r0, #20]
    5938:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    593c:	6a03      	ldr	r3, [r0, #32]
    593e:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    5942:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5944:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    5948:	4b1a      	ldr	r3, [pc, #104]	; (59b4 <parsePreset+0x834>)
    594a:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
	for (int i = 0; i < NUM_PARAMS; i++)
    594e:	e03a      	b.n	59c6 <parsePreset+0x846>
    5950:	20005bd4 	.word	0x20005bd4
    5954:	00000b01 	.word	0x00000b01
    5958:	20019ed8 	.word	0x20019ed8
    595c:	2001a3e0 	.word	0x2001a3e0
    5960:	20000014 	.word	0x20000014
    5964:	20000010 	.word	0x20000010
    5968:	00000fa1 	.word	0x00000fa1
    596c:	20014b44 	.word	0x20014b44
    5970:	00001001 	.word	0x00001001
    5974:	00002581 	.word	0x00002581
    5978:	000025a1 	.word	0x000025a1
    597c:	20016b98 	.word	0x20016b98
    5980:	000032a1 	.word	0x000032a1
    5984:	00003341 	.word	0x00003341
    5988:	00003301 	.word	0x00003301
    598c:	000015e1 	.word	0x000015e1
    5990:	00001601 	.word	0x00001601
    5994:	00001621 	.word	0x00001621
    5998:	00001641 	.word	0x00001641
    599c:	20018ccc 	.word	0x20018ccc
    59a0:	00001501 	.word	0x00001501
    59a4:	00001521 	.word	0x00001521
    59a8:	00001541 	.word	0x00001541
    59ac:	00001561 	.word	0x00001561
    59b0:	00001581 	.word	0x00001581
    59b4:	000015c1 	.word	0x000015c1
    59b8:	3c010204 	.word	0x3c010204
    59bc:	42fe0000 	.word	0x42fe0000
    59c0:	f108 081c 	add.w	r8, r8, #28
    59c4:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
    59c6:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
    59ca:	f888 7018 	strb.w	r7, [r8, #24]
		if ((i >= Osc1) && (i < Osc2))
    59ce:	2b0c      	cmp	r3, #12
    59d0:	d94b      	bls.n	5a6a <parsePreset+0x8ea>
		else if ((i >= Osc2) && (i < Osc3))
    59d2:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
    59d6:	2b0c      	cmp	r3, #12
    59d8:	f240 8265 	bls.w	5ea6 <parsePreset+0xd26>
		else if ((i >= Osc3) && (i < Effect1FXType))
    59dc:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
    59e0:	2b0c      	cmp	r3, #12
    59e2:	f240 825c 	bls.w	5e9e <parsePreset+0xd1e>
		else if ((i >= Filter1) && (i < Filter2))
    59e6:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    59ea:	2b05      	cmp	r3, #5
    59ec:	d93d      	bls.n	5a6a <parsePreset+0x8ea>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    59ee:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
    59f2:	2b06      	cmp	r3, #6
    59f4:	f240 8257 	bls.w	5ea6 <parsePreset+0xd26>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    59f8:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
    59fc:	2b05      	cmp	r3, #5
    59fe:	d934      	bls.n	5a6a <parsePreset+0x8ea>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    5a00:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
    5a04:	2b05      	cmp	r3, #5
    5a06:	f240 824e 	bls.w	5ea6 <parsePreset+0xd26>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    5a0a:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
    5a0e:	2b05      	cmp	r3, #5
    5a10:	f240 8245 	bls.w	5e9e <parsePreset+0xd1e>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    5a14:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
    5a18:	2b05      	cmp	r3, #5
    5a1a:	f240 822b 	bls.w	5e74 <parsePreset+0xcf4>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    5a1e:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
    5a22:	2b04      	cmp	r3, #4
    5a24:	d921      	bls.n	5a6a <parsePreset+0x8ea>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    5a26:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
    5a2a:	2b04      	cmp	r3, #4
    5a2c:	f240 823b 	bls.w	5ea6 <parsePreset+0xd26>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    5a30:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
    5a34:	2b04      	cmp	r3, #4
    5a36:	f240 8232 	bls.w	5e9e <parsePreset+0xd1e>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    5a3a:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
    5a3e:	2b04      	cmp	r3, #4
    5a40:	f240 8218 	bls.w	5e74 <parsePreset+0xcf4>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    5a44:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
    5a48:	2b07      	cmp	r3, #7
    5a4a:	d90e      	bls.n	5a6a <parsePreset+0x8ea>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    5a4c:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
    5a50:	2b07      	cmp	r3, #7
    5a52:	f240 8228 	bls.w	5ea6 <parsePreset+0xd26>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    5a56:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
    5a5a:	2b07      	cmp	r3, #7
    5a5c:	f240 821f 	bls.w	5e9e <parsePreset+0xd1e>
		else if ((i >= Effect4FXType) && (i < Filter1))
    5a60:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    5a64:	2b07      	cmp	r3, #7
    5a66:	f240 8205 	bls.w	5e74 <parsePreset+0xcf4>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    5a6a:	2100      	movs	r1, #0
    5a6c:	ed98 0a02 	vldr	s0, [r8, #8]
    5a70:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5a74:	4608      	mov	r0, r1
    5a76:	4798      	blx	r3
    5a78:	ed98 0a03 	vldr	s0, [r8, #12]
    5a7c:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5a80:	2101      	movs	r1, #1
    5a82:	f898 0018 	ldrb.w	r0, [r8, #24]
    5a86:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    5a88:	2d9c      	cmp	r5, #156	; 0x9c
    5a8a:	d199      	bne.n	59c0 <parsePreset+0x840>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a8c:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a90:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a94:	ed96 7a02 	vldr	s14, [r6, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a98:	ed9a 6a38 	vldr	s12, [sl, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
    5aa0:	ed1f 5a3b 	vldr	s10, [pc, #-236]	; 59b8 <parsePreset+0x838>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5aa4:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5aa8:	ed5f 5a3c 	vldr	s11, [pc, #-240]	; 59bc <parsePreset+0x83c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5aac:	4bbb      	ldr	r3, [pc, #748]	; (5d9c <parsePreset+0xc1c>)
    5aae:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5ab6:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5aba:	bfcc      	ite	gt
    5abc:	2201      	movgt	r2, #1
    5abe:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5ac0:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5ac4:	4bb6      	ldr	r3, [pc, #728]	; (5da0 <parsePreset+0xc20>)
    5ac6:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5aca:	4bb6      	ldr	r3, [pc, #728]	; (5da4 <parsePreset+0xc24>)
    5acc:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    5ace:	f1bb 0f00 	cmp.w	fp, #0
    5ad2:	f000 8135 	beq.w	5d40 <parsePreset+0xbc0>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5ad6:	edda 7a3f 	vldr	s15, [sl, #252]	; 0xfc
    5ada:	eef4 7ae6 	vcmpe.f32	s15, s13
    5ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ae2:	bfcc      	ite	gt
    5ae4:	2301      	movgt	r3, #1
    5ae6:	2300      	movle	r3, #0
    5ae8:	49af      	ldr	r1, [pc, #700]	; (5da8 <parsePreset+0xc28>)
	numMappings = 0;
    5aea:	2200      	movs	r2, #0
    5aec:	f8df 8314 	ldr.w	r8, [pc, #788]	; 5e04 <parsePreset+0xc84>
	bufferIndex += 2;
    5af0:	f109 0e04 	add.w	lr, r9, #4
    5af4:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    5af6:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    5af8:	4bac      	ldr	r3, [pc, #688]	; (5dac <parsePreset+0xc2c>)
	bufferIndex += 2;
    5afa:	fa1f fe8e 	uxth.w	lr, lr
	numMappings = 0;
    5afe:	f508 6018 	add.w	r0, r8, #2432	; 0x980
    5b02:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    5b04:	4baa      	ldr	r3, [pc, #680]	; (5db0 <parsePreset+0xc30>)
    5b06:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    5b08:	4baa      	ldr	r3, [pc, #680]	; (5db4 <parsePreset+0xc34>)
    5b0a:	601a      	str	r2, [r3, #0]
    5b0c:	4643      	mov	r3, r8
		mappings[i].destNumber = 255;
    5b0e:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    5b10:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    5b12:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    5b16:	4283      	cmp	r3, r0
    5b18:	d1f9      	bne.n	5b0e <parsePreset+0x98e>
	for (int i = 0; i < mappingCount; i++)
    5b1a:	9b03      	ldr	r3, [sp, #12]
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	f000 80c1 	beq.w	5ca4 <parsePreset+0xb24>
    5b22:	2300      	movs	r3, #0
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5b24:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 5db8 <parsePreset+0xc38>
    5b28:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 5e08 <parsePreset+0xc88>
				foundOne = 1;
    5b2c:	f04f 0901 	mov.w	r9, #1
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5b30:	469c      	mov	ip, r3
	for (int i = 0; i < mappingCount; i++)
    5b32:	9301      	str	r3, [sp, #4]
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5b34:	9604      	str	r6, [sp, #16]
		uint8_t destNumber = buffer[bufferIndex+1];
    5b36:	eb04 030e 	add.w	r3, r4, lr
    5b3a:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    5b3c:	f1bb 0f00 	cmp.w	fp, #0
    5b40:	f000 80ef 	beq.w	5d22 <parsePreset+0xba2>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    5b44:	795f      	ldrb	r7, [r3, #5]
		uint8_t whichHook = 0;
    5b46:	2300      	movs	r3, #0
    5b48:	465e      	mov	r6, fp
    5b4a:	4642      	mov	r2, r8
    5b4c:	461d      	mov	r5, r3
    5b4e:	469b      	mov	fp, r3
    5b50:	e003      	b.n	5b5a <parsePreset+0x9da>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5b52:	3301      	adds	r3, #1
    5b54:	324c      	adds	r2, #76	; 0x4c
    5b56:	2b20      	cmp	r3, #32
    5b58:	d00d      	beq.n	5b76 <parsePreset+0x9f6>
			if (mappings[j].destNumber == destNumber)
    5b5a:	7811      	ldrb	r1, [r2, #0]
    5b5c:	4281      	cmp	r1, r0
    5b5e:	d1f8      	bne.n	5b52 <parsePreset+0x9d2>
				foundOne = 1;
    5b60:	2501      	movs	r5, #1
    5b62:	fa5f fb83 	uxtb.w	fp, r3
				if (presetVersionNumber == 0)
    5b66:	2e00      	cmp	r6, #0
    5b68:	d1f3      	bne.n	5b52 <parsePreset+0x9d2>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5b6a:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    5b6c:	f892 704b 	ldrb.w	r7, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5b70:	324c      	adds	r2, #76	; 0x4c
    5b72:	2b20      	cmp	r3, #32
    5b74:	d1f1      	bne.n	5b5a <parsePreset+0x9da>
		if (foundOne == 0)
    5b76:	465b      	mov	r3, fp
    5b78:	46b3      	mov	fp, r6
    5b7a:	461e      	mov	r6, r3
    5b7c:	b9ad      	cbnz	r5, 5baa <parsePreset+0xa2a>
			mappings[whichMapping].destNumber = destNumber;
    5b7e:	9901      	ldr	r1, [sp, #4]
    5b80:	234c      	movs	r3, #76	; 0x4c
			if (presetVersionNumber == 0)
    5b82:	f1bb 0f00 	cmp.w	fp, #0
			mappings[whichMapping].destNumber = destNumber;
    5b86:	fb03 f301 	mul.w	r3, r3, r1
    5b8a:	460e      	mov	r6, r1
			if (presetVersionNumber == 0)
    5b8c:	bf08      	it	eq
    5b8e:	2700      	moveq	r7, #0
			mappings[whichMapping].destNumber = destNumber;
    5b90:	eb08 0203 	add.w	r2, r8, r3
    5b94:	f808 0003 	strb.w	r0, [r8, r3]
			mappings[whichMapping].dest = &params[destNumber];
    5b98:	9b04      	ldr	r3, [sp, #16]
    5b9a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5b9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
    5ba2:	1c4b      	adds	r3, r1, #1
    5ba4:	b2db      	uxtb	r3, r3
			mappings[whichMapping].dest = &params[destNumber];
    5ba6:	6050      	str	r0, [r2, #4]
			numMappings++;
    5ba8:	9301      	str	r3, [sp, #4]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5baa:	224c      	movs	r2, #76	; 0x4c
		int source = buffer[bufferIndex];
    5bac:	f814 300e 	ldrb.w	r3, [r4, lr]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5bb0:	1c78      	adds	r0, r7, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5bb2:	fb02 f206 	mul.w	r2, r2, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5bb6:	eb0a 05c3 	add.w	r5, sl, r3, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    5bba:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5bbc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5bc0:	eb08 0102 	add.w	r1, r8, r2
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5bc4:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
    5bc8:	f105 0504 	add.w	r5, r5, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5bcc:	4439      	add	r1, r7
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5bce:	4442      	add	r2, r8
    5bd0:	60d5      	str	r5, [r2, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    5bd2:	bfcc      	ite	gt
    5bd4:	464a      	movgt	r2, r9
    5bd6:	2200      	movle	r2, #0
    5bd8:	f881 2020 	strb.w	r2, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5bdc:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
    5be0:	f848 2000 	str.w	r2, [r8, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5be4:	f1a3 0218 	sub.w	r2, r3, #24
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5be8:	00f8      	lsls	r0, r7, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5bea:	2a03      	cmp	r2, #3
    5bec:	d87e      	bhi.n	5cec <parsePreset+0xb6c>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    5bee:	4a70      	ldr	r2, [pc, #448]	; (5db0 <parsePreset+0xc30>)
    5bf0:	4413      	add	r3, r2
    5bf2:	f803 9c18 	strb.w	r9, [r3, #-24]
		int scalar = buffer[bufferIndex+2];
    5bf6:	eb04 030e 	add.w	r3, r4, lr
    5bfa:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
    5bfc:	2bff      	cmp	r3, #255	; 0xff
    5bfe:	f000 8083 	beq.w	5d08 <parsePreset+0xb88>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5c02:	224c      	movs	r2, #76	; 0x4c
    5c04:	1d39      	adds	r1, r7, #4
    5c06:	eb0a 05c3 	add.w	r5, sl, r3, lsl #3
    5c0a:	fb02 f206 	mul.w	r2, r2, r6
    5c0e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    5c12:	4441      	add	r1, r8
    5c14:	604d      	str	r5, [r1, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5c16:	f1a3 0118 	sub.w	r1, r3, #24
    5c1a:	2903      	cmp	r1, #3
    5c1c:	f240 8083 	bls.w	5d26 <parsePreset+0xba6>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5c20:	f1a3 0114 	sub.w	r1, r3, #20
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5c24:	4402      	add	r2, r0
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5c26:	2903      	cmp	r1, #3
    5c28:	f200 811c 	bhi.w	5e64 <parsePreset+0xce4>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5c2c:	2004      	movs	r0, #4
    5c2e:	2108      	movs	r1, #8
    5c30:	4442      	add	r2, r8
    5c32:	fb11 0103 	smlabb	r1, r1, r3, r0
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5c36:	485f      	ldr	r0, [pc, #380]	; (5db4 <parsePreset+0xc34>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5c38:	4451      	add	r1, sl
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5c3a:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5c3c:	6291      	str	r1, [r2, #40]	; 0x28
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5c3e:	f803 9c14 	strb.w	r9, [r3, #-20]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c42:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5c46:	eb04 020e 	add.w	r2, r4, lr
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c4a:	214c      	movs	r1, #76	; 0x4c
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c4c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5c50:	78d0      	ldrb	r0, [r2, #3]
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c52:	fb01 8606 	mla	r6, r1, r6, r8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c56:	443b      	add	r3, r7
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c58:	4437      	add	r7, r6
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c5a:	eb08 0183 	add.w	r1, r8, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5c5e:	7913      	ldrb	r3, [r2, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c60:	f887 9048 	strb.w	r9, [r7, #72]	; 0x48
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5c64:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5c68:	b21b      	sxth	r3, r3
    5c6a:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].numHooks++;
    5c6e:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].numHooks++;
    5c76:	3301      	adds	r3, #1
    5c78:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c80:	edc1 7a0f 	vstr	s15, [r1, #60]	; 0x3c
		if (presetVersionNumber > 0)
    5c84:	f1bb 0f00 	cmp.w	fp, #0
    5c88:	d02b      	beq.n	5ce2 <parsePreset+0xb62>
			bufferIndex += 6;
    5c8a:	f10e 0e06 	add.w	lr, lr, #6
    5c8e:	fa1f fe8e 	uxth.w	lr, lr
	for (int i = 0; i < mappingCount; i++)
    5c92:	f10c 0c01 	add.w	ip, ip, #1
    5c96:	9b03      	ldr	r3, [sp, #12]
    5c98:	459c      	cmp	ip, r3
    5c9a:	f47f af4c 	bne.w	5b36 <parsePreset+0x9b6>
    5c9e:	4b43      	ldr	r3, [pc, #268]	; (5dac <parsePreset+0xc2c>)
    5ca0:	9a01      	ldr	r2, [sp, #4]
    5ca2:	701a      	strb	r2, [r3, #0]
	presetWaitingToParse = 0;
    5ca4:	4a45      	ldr	r2, [pc, #276]	; (5dbc <parsePreset+0xc3c>)
    5ca6:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    5ca8:	f89d 3008 	ldrb.w	r3, [sp, #8]
	presetWaitingToParse = 0;
    5cac:	6014      	str	r4, [r2, #0]
	currentActivePreset = presetNumber;
    5cae:	4a44      	ldr	r2, [pc, #272]	; (5dc0 <parsePreset+0xc40>)
	audioMasterLevel = 1.0f;
    5cb0:	4944      	ldr	r1, [pc, #272]	; (5dc4 <parsePreset+0xc44>)
	currentActivePreset = presetNumber;
    5cb2:	7013      	strb	r3, [r2, #0]
	audioMasterLevel = 1.0f;
    5cb4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	oscToTick = NUM_OSC;
    5cb8:	4a43      	ldr	r2, [pc, #268]	; (5dc8 <parsePreset+0xc48>)
	audioMasterLevel = 1.0f;
    5cba:	600b      	str	r3, [r1, #0]
	oscToTick = NUM_OSC;
    5cbc:	2103      	movs	r1, #3
	overSampled = 1;
    5cbe:	4b43      	ldr	r3, [pc, #268]	; (5dcc <parsePreset+0xc4c>)
	oscToTick = NUM_OSC;
    5cc0:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
    5cc2:	2201      	movs	r2, #1
    5cc4:	701a      	strb	r2, [r3, #0]
    5cc6:	b662      	cpsie	i
	presetReady = 1;
    5cc8:	4b41      	ldr	r3, [pc, #260]	; (5dd0 <parsePreset+0xc50>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    5cca:	4611      	mov	r1, r2
    5ccc:	4841      	ldr	r0, [pc, #260]	; (5dd4 <parsePreset+0xc54>)
	presetReady = 1;
    5cce:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    5cd0:	f002 fd92 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    5cd4:	4a40      	ldr	r2, [pc, #256]	; (5dd8 <parsePreset+0xc58>)
	receivingI2C = 0;
    5cd6:	4b41      	ldr	r3, [pc, #260]	; (5ddc <parsePreset+0xc5c>)
	diskBusy = 0;
    5cd8:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    5cda:	701c      	strb	r4, [r3, #0]
}
    5cdc:	b009      	add	sp, #36	; 0x24
    5cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bufferIndex += 5;
    5ce2:	f10e 0e05 	add.w	lr, lr, #5
    5ce6:	fa1f fe8e 	uxth.w	lr, lr
    5cea:	e7d2      	b.n	5c92 <parsePreset+0xb12>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5cec:	f1a3 0214 	sub.w	r2, r3, #20
    5cf0:	2a03      	cmp	r2, #3
    5cf2:	d880      	bhi.n	5bf6 <parsePreset+0xa76>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    5cf4:	4a2f      	ldr	r2, [pc, #188]	; (5db4 <parsePreset+0xc34>)
    5cf6:	4413      	add	r3, r2
    5cf8:	f803 9c14 	strb.w	r9, [r3, #-20]
		int scalar = buffer[bufferIndex+2];
    5cfc:	eb04 030e 	add.w	r3, r4, lr
    5d00:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
    5d02:	2bff      	cmp	r3, #255	; 0xff
    5d04:	f47f af7d 	bne.w	5c02 <parsePreset+0xa82>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    5d08:	234c      	movs	r3, #76	; 0x4c
    5d0a:	4935      	ldr	r1, [pc, #212]	; (5de0 <parsePreset+0xc60>)
    5d0c:	fb03 f306 	mul.w	r3, r3, r6
    5d10:	18c2      	adds	r2, r0, r3
    5d12:	4442      	add	r2, r8
    5d14:	6291      	str	r1, [r2, #40]	; 0x28
    5d16:	1d3a      	adds	r2, r7, #4
    5d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5d1c:	4443      	add	r3, r8
    5d1e:	6059      	str	r1, [r3, #4]
    5d20:	e78f      	b.n	5c42 <parsePreset+0xac2>
		uint8_t whichHook = 0;
    5d22:	465f      	mov	r7, fp
    5d24:	e70f      	b.n	5b46 <parsePreset+0x9c6>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5d26:	4402      	add	r2, r0
    5d28:	2108      	movs	r1, #8
    5d2a:	2004      	movs	r0, #4
    5d2c:	4442      	add	r2, r8
    5d2e:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5d32:	481f      	ldr	r0, [pc, #124]	; (5db0 <parsePreset+0xc30>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5d34:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5d36:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5d38:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5d3a:	f803 9c18 	strb.w	r9, [r3, #-24]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5d3e:	e780      	b.n	5c42 <parsePreset+0xac2>
		pedalControlsMaster = 1;
    5d40:	2301      	movs	r3, #1
    5d42:	e6d1      	b.n	5ae8 <parsePreset+0x968>
			oscsEnabled[i] = 0;
    5d44:	2200      	movs	r2, #0
    5d46:	e4f2      	b.n	572e <parsePreset+0x5ae>
    5d48:	2200      	movs	r2, #0
    5d4a:	e49a      	b.n	5682 <parsePreset+0x502>
			  shapeTick[i] = &triTick;
    5d4c:	4a25      	ldr	r2, [pc, #148]	; (5de4 <parsePreset+0xc64>)
    5d4e:	4826      	ldr	r0, [pc, #152]	; (5de8 <parsePreset+0xc68>)
    5d50:	6090      	str	r0, [r2, #8]
			  break;
    5d52:	e4de      	b.n	5712 <parsePreset+0x592>
			  shapeTick[i] = &sineTick;
    5d54:	4a23      	ldr	r2, [pc, #140]	; (5de4 <parsePreset+0xc64>)
    5d56:	4825      	ldr	r0, [pc, #148]	; (5dec <parsePreset+0xc6c>)
    5d58:	6090      	str	r0, [r2, #8]
			  break;
    5d5a:	e4da      	b.n	5712 <parsePreset+0x592>
			  shapeTick[i] = &pulseTick;
    5d5c:	4a21      	ldr	r2, [pc, #132]	; (5de4 <parsePreset+0xc64>)
    5d5e:	4824      	ldr	r0, [pc, #144]	; (5df0 <parsePreset+0xc70>)
    5d60:	6090      	str	r0, [r2, #8]
			  break;
    5d62:	e4d6      	b.n	5712 <parsePreset+0x592>
			  shapeTick[i] = &sawTick;
    5d64:	4a1f      	ldr	r2, [pc, #124]	; (5de4 <parsePreset+0xc64>)
    5d66:	4823      	ldr	r0, [pc, #140]	; (5df4 <parsePreset+0xc74>)
    5d68:	6090      	str	r0, [r2, #8]
			  break;
    5d6a:	e4d2      	b.n	5712 <parsePreset+0x592>
			  shapeTick[i] = &sineTriTick;
    5d6c:	4a1d      	ldr	r2, [pc, #116]	; (5de4 <parsePreset+0xc64>)
    5d6e:	4822      	ldr	r0, [pc, #136]	; (5df8 <parsePreset+0xc78>)
    5d70:	6090      	str	r0, [r2, #8]
			  break;
    5d72:	e4ce      	b.n	5712 <parsePreset+0x592>
			  shapeTick[i] = &sawSquareTick;
    5d74:	4a1b      	ldr	r2, [pc, #108]	; (5de4 <parsePreset+0xc64>)
    5d76:	4821      	ldr	r0, [pc, #132]	; (5dfc <parsePreset+0xc7c>)
    5d78:	6090      	str	r0, [r2, #8]
			  break;
    5d7a:	e4ca      	b.n	5712 <parsePreset+0x592>
			  shapeTick[i] = &userTick;
    5d7c:	4a19      	ldr	r2, [pc, #100]	; (5de4 <parsePreset+0xc64>)
    5d7e:	4820      	ldr	r0, [pc, #128]	; (5e00 <parsePreset+0xc80>)
    5d80:	6050      	str	r0, [r2, #4]
			  break;
    5d82:	e470      	b.n	5666 <parsePreset+0x4e6>
			  shapeTick[i] = &triTick;
    5d84:	4a17      	ldr	r2, [pc, #92]	; (5de4 <parsePreset+0xc64>)
    5d86:	4818      	ldr	r0, [pc, #96]	; (5de8 <parsePreset+0xc68>)
    5d88:	6050      	str	r0, [r2, #4]
			  break;
    5d8a:	e46c      	b.n	5666 <parsePreset+0x4e6>
			  shapeTick[i] = &sineTick;
    5d8c:	4a15      	ldr	r2, [pc, #84]	; (5de4 <parsePreset+0xc64>)
    5d8e:	4817      	ldr	r0, [pc, #92]	; (5dec <parsePreset+0xc6c>)
    5d90:	6050      	str	r0, [r2, #4]
			  break;
    5d92:	e468      	b.n	5666 <parsePreset+0x4e6>
			  shapeTick[i] = &pulseTick;
    5d94:	4a13      	ldr	r2, [pc, #76]	; (5de4 <parsePreset+0xc64>)
    5d96:	4816      	ldr	r0, [pc, #88]	; (5df0 <parsePreset+0xc70>)
    5d98:	6050      	str	r0, [r2, #4]
			  break;
    5d9a:	e464      	b.n	5666 <parsePreset+0x4e6>
    5d9c:	2001993c 	.word	0x2001993c
    5da0:	20019940 	.word	0x20019940
    5da4:	20016cc6 	.word	0x20016cc6
    5da8:	2001aa68 	.word	0x2001aa68
    5dac:	20019948 	.word	0x20019948
    5db0:	20005310 	.word	0x20005310
    5db4:	20005070 	.word	0x20005070
    5db8:	37fffffc 	.word	0x37fffffc
    5dbc:	2001aa8c 	.word	0x2001aa8c
    5dc0:	200006d8 	.word	0x200006d8
    5dc4:	200006d4 	.word	0x200006d4
    5dc8:	20000024 	.word	0x20000024
    5dcc:	20000025 	.word	0x20000025
    5dd0:	20005744 	.word	0x20005744
    5dd4:	58020000 	.word	0x58020000
    5dd8:	20014b40 	.word	0x20014b40
    5ddc:	2001ae94 	.word	0x2001ae94
    5de0:	200006dc 	.word	0x200006dc
    5de4:	20005bd4 	.word	0x20005bd4
    5de8:	00000aa1 	.word	0x00000aa1
    5dec:	00000a61 	.word	0x00000a61
    5df0:	00000a01 	.word	0x00000a01
    5df4:	000009c1 	.word	0x000009c1
    5df8:	00000961 	.word	0x00000961
    5dfc:	00000921 	.word	0x00000921
    5e00:	00000b01 	.word	0x00000b01
    5e04:	20018d00 	.word	0x20018d00
    5e08:	200146b0 	.word	0x200146b0
			  shapeTick[i] = &sawTick;
    5e0c:	4a28      	ldr	r2, [pc, #160]	; (5eb0 <parsePreset+0xd30>)
    5e0e:	4829      	ldr	r0, [pc, #164]	; (5eb4 <parsePreset+0xd34>)
    5e10:	6050      	str	r0, [r2, #4]
			  break;
    5e12:	e428      	b.n	5666 <parsePreset+0x4e6>
			  shapeTick[i] = &sineTriTick;
    5e14:	4a26      	ldr	r2, [pc, #152]	; (5eb0 <parsePreset+0xd30>)
    5e16:	4828      	ldr	r0, [pc, #160]	; (5eb8 <parsePreset+0xd38>)
    5e18:	6050      	str	r0, [r2, #4]
			  break;
    5e1a:	e424      	b.n	5666 <parsePreset+0x4e6>
			  shapeTick[i] = &userTick;
    5e1c:	4b24      	ldr	r3, [pc, #144]	; (5eb0 <parsePreset+0xd30>)
    5e1e:	4a27      	ldr	r2, [pc, #156]	; (5ebc <parsePreset+0xd3c>)
    5e20:	601a      	str	r2, [r3, #0]
			  break;
    5e22:	f7ff bbf7 	b.w	5614 <parsePreset+0x494>
			  shapeTick[i] = &triTick;
    5e26:	4b22      	ldr	r3, [pc, #136]	; (5eb0 <parsePreset+0xd30>)
    5e28:	4a25      	ldr	r2, [pc, #148]	; (5ec0 <parsePreset+0xd40>)
    5e2a:	601a      	str	r2, [r3, #0]
			  break;
    5e2c:	f7ff bbf2 	b.w	5614 <parsePreset+0x494>
			  shapeTick[i] = &sineTick;
    5e30:	4b1f      	ldr	r3, [pc, #124]	; (5eb0 <parsePreset+0xd30>)
    5e32:	4a24      	ldr	r2, [pc, #144]	; (5ec4 <parsePreset+0xd44>)
    5e34:	601a      	str	r2, [r3, #0]
			  break;
    5e36:	f7ff bbed 	b.w	5614 <parsePreset+0x494>
			  shapeTick[i] = &pulseTick;
    5e3a:	4b1d      	ldr	r3, [pc, #116]	; (5eb0 <parsePreset+0xd30>)
    5e3c:	4a22      	ldr	r2, [pc, #136]	; (5ec8 <parsePreset+0xd48>)
    5e3e:	601a      	str	r2, [r3, #0]
			  break;
    5e40:	f7ff bbe8 	b.w	5614 <parsePreset+0x494>
			  shapeTick[i] = &sawTick;
    5e44:	4b1a      	ldr	r3, [pc, #104]	; (5eb0 <parsePreset+0xd30>)
    5e46:	4a1b      	ldr	r2, [pc, #108]	; (5eb4 <parsePreset+0xd34>)
    5e48:	601a      	str	r2, [r3, #0]
			  break;
    5e4a:	f7ff bbe3 	b.w	5614 <parsePreset+0x494>
			  shapeTick[i] = &sineTriTick;
    5e4e:	4b18      	ldr	r3, [pc, #96]	; (5eb0 <parsePreset+0xd30>)
    5e50:	4a19      	ldr	r2, [pc, #100]	; (5eb8 <parsePreset+0xd38>)
    5e52:	601a      	str	r2, [r3, #0]
			  break;
    5e54:	f7ff bbde 	b.w	5614 <parsePreset+0x494>
    5e58:	4d1c      	ldr	r5, [pc, #112]	; (5ecc <parsePreset+0xd4c>)
    5e5a:	f7ff bb05 	b.w	5468 <parsePreset+0x2e8>
    5e5e:	4e1c      	ldr	r6, [pc, #112]	; (5ed0 <parsePreset+0xd50>)
    5e60:	f7ff baf0 	b.w	5444 <parsePreset+0x2c4>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5e64:	2108      	movs	r1, #8
    5e66:	2004      	movs	r0, #4
    5e68:	4442      	add	r2, r8
    5e6a:	fb11 0303 	smlabb	r3, r1, r3, r0
    5e6e:	4453      	add	r3, sl
    5e70:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5e72:	e6e6      	b.n	5c42 <parsePreset+0xac2>
			params[i].objectNumber = 3;
    5e74:	f04f 0303 	mov.w	r3, #3
    5e78:	f888 3018 	strb.w	r3, [r8, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    5e7c:	ed98 0a02 	vldr	s0, [r8, #8]
    5e80:	2100      	movs	r1, #0
    5e82:	f898 0018 	ldrb.w	r0, [r8, #24]
    5e86:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5e8a:	4798      	blx	r3
    5e8c:	ed98 0a03 	vldr	s0, [r8, #12]
    5e90:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5e94:	2101      	movs	r1, #1
    5e96:	f898 0018 	ldrb.w	r0, [r8, #24]
    5e9a:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    5e9c:	e590      	b.n	59c0 <parsePreset+0x840>
			params[i].objectNumber = 2;
    5e9e:	2302      	movs	r3, #2
    5ea0:	f888 3018 	strb.w	r3, [r8, #24]
    5ea4:	e7ea      	b.n	5e7c <parsePreset+0xcfc>
			params[i].objectNumber = 1;
    5ea6:	f04f 0301 	mov.w	r3, #1
    5eaa:	f888 3018 	strb.w	r3, [r8, #24]
    5eae:	e7e5      	b.n	5e7c <parsePreset+0xcfc>
    5eb0:	20005bd4 	.word	0x20005bd4
    5eb4:	000009c1 	.word	0x000009c1
    5eb8:	00000961 	.word	0x00000961
    5ebc:	00000b01 	.word	0x00000b01
    5ec0:	00000aa1 	.word	0x00000aa1
    5ec4:	00000a61 	.word	0x00000a61
    5ec8:	00000a01 	.word	0x00000a01
    5ecc:	2001aa68 	.word	0x2001aa68
    5ed0:	20019958 	.word	0x20019958
    5ed4:	f3af 8000 	nop.w
    5ed8:	f3af 8000 	nop.w
    5edc:	f3af 8000 	nop.w

00005ee0 <handleSPI>:
	if (foundBrainFirmware)
    5ee0:	49a0      	ldr	r1, [pc, #640]	; (6164 <handleSPI+0x284>)
	interruptChecker = 1;
    5ee2:	2301      	movs	r3, #1
{
    5ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    5ee8:	4d9f      	ldr	r5, [pc, #636]	; (6168 <handleSPI+0x288>)
{
    5eea:	4604      	mov	r4, r0
    5eec:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    5ef0:	780a      	ldrb	r2, [r1, #0]
{
    5ef2:	b085      	sub	sp, #20
	interruptChecker = 1;
    5ef4:	702b      	strb	r3, [r5, #0]
	if (foundBrainFirmware)
    5ef6:	b382      	cbz	r2, 5f5a <handleSPI+0x7a>
		if (brainFirmwareEndSignal)
    5ef8:	f8df 8298 	ldr.w	r8, [pc, #664]	; 6194 <handleSPI+0x2b4>
    5efc:	f898 7000 	ldrb.w	r7, [r8]
    5f00:	2f00      	cmp	r7, #0
    5f02:	f000 80bf 	beq.w	6084 <handleSPI+0x1a4>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    5f06:	4b99      	ldr	r3, [pc, #612]	; (616c <handleSPI+0x28c>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    5f08:	4a99      	ldr	r2, [pc, #612]	; (6170 <handleSPI+0x290>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    5f0a:	441c      	add	r4, r3
    5f0c:	23f9      	movs	r3, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    5f0e:	6812      	ldr	r2, [r2, #0]
			brainFirmwareSendInProgress = 0;
    5f10:	4898      	ldr	r0, [pc, #608]	; (6174 <handleSPI+0x294>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    5f12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    5f16:	2300      	movs	r3, #0
			foundBrainFirmware = 0;
    5f18:	700b      	strb	r3, [r1, #0]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    5f1a:	0a11      	lsrs	r1, r2, #8
			brainFirmwareSendInProgress = 0;
    5f1c:	7003      	strb	r3, [r0, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    5f1e:	0e10      	lsrs	r0, r2, #24
			brainFirmwareEndSignal = 0;
    5f20:	f888 3000 	strb.w	r3, [r8]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    5f24:	0c13      	lsrs	r3, r2, #16
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    5f26:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    5f28:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    5f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    5f30:	f04f 03fe 	mov.w	r3, #254	; 0xfe
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    5f34:	bf18      	it	ne
    5f36:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    5f38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    5f3c:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    5f40:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    5f44:	2200      	movs	r2, #0
    5f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
    5f4a:	488b      	ldr	r0, [pc, #556]	; (6178 <handleSPI+0x298>)
}
    5f4c:	b005      	add	sp, #20
    5f4e:	ecbd 8b02 	vpop	{d8}
    5f52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    5f56:	f002 bc4f 	b.w	87f8 <__HAL_GPIO_WritePin_veneer>
		if (SPI_LEVERS[offset] == ReceivingPitches)
    5f5a:	4d84      	ldr	r5, [pc, #528]	; (616c <handleSPI+0x28c>)
    5f5c:	5c2b      	ldrb	r3, [r5, r0]
    5f5e:	2b01      	cmp	r3, #1
    5f60:	f000 8120 	beq.w	61a4 <handleSPI+0x2c4>
		else if (SPI_LEVERS[offset] == ReceivingPreset)
    5f64:	2b02      	cmp	r3, #2
    5f66:	f000 83c6 	beq.w	66f6 <handleSPI+0x816>
		else if (SPI_LEVERS[offset] == ReceivingKnobs)
    5f6a:	2b03      	cmp	r3, #3
    5f6c:	f000 820c 	beq.w	6388 <handleSPI+0x4a8>
		else if (SPI_LEVERS[offset] == ReceivingEnd)
    5f70:	2bfd      	cmp	r3, #253	; 0xfd
    5f72:	f000 8411 	beq.w	6798 <handleSPI+0x8b8>
		else if (SPI_LEVERS[offset] == ReceivingSingleParamChange)
    5f76:	2b06      	cmp	r3, #6
    5f78:	f000 8425 	beq.w	67c6 <handleSPI+0x8e6>
		else if (SPI_LEVERS[offset] == ReceivingMappingChange)
    5f7c:	2b07      	cmp	r3, #7
    5f7e:	f040 8243 	bne.w	6408 <handleSPI+0x528>
			if (presetReady)
    5f82:	4b7e      	ldr	r3, [pc, #504]	; (617c <handleSPI+0x29c>)
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	2b00      	cmp	r3, #0
    5f88:	f000 823e 	beq.w	6408 <handleSPI+0x528>
				uint8_t currentByte = offset+1;
    5f8c:	1c43      	adds	r3, r0, #1
    5f8e:	4f7c      	ldr	r7, [pc, #496]	; (6180 <handleSPI+0x2a0>)
				uint8_t foundOne = 0;
    5f90:	4692      	mov	sl, r2
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    5f92:	f04f 0820 	mov.w	r8, #32
				uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    5f96:	b2db      	uxtb	r3, r3
    5f98:	5ce9      	ldrb	r1, [r5, r3]
    5f9a:	442b      	add	r3, r5
    5f9c:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    5f9e:	f893 c005 	ldrb.w	ip, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    5fa2:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    5fa6:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS[currentByte+2]);
    5fa8:	f893 e002 	ldrb.w	lr, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    5fac:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS[currentByte+3]);
    5fb0:	f893 9003 	ldrb.w	r9, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    5fb4:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    5fb6:	4639      	mov	r1, r7
    5fb8:	fa0f fc8c 	sxth.w	ip, ip
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5fbc:	4613      	mov	r3, r2
					if (mappings[j].destNumber == destNumber)
    5fbe:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5fc0:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    5fc2:	4286      	cmp	r6, r0
    5fc4:	d102      	bne.n	5fcc <handleSPI+0xec>
						whichMapping = j;
    5fc6:	b2da      	uxtb	r2, r3
						foundOne = 1;
    5fc8:	f04f 0a01 	mov.w	sl, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    5fcc:	28ff      	cmp	r0, #255	; 0xff
    5fce:	d103      	bne.n	5fd8 <handleSPI+0xf8>
    5fd0:	4598      	cmp	r8, r3
    5fd2:	bfc8      	it	gt
    5fd4:	fa5f f883 	uxtbgt.w	r8, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5fd8:	3301      	adds	r3, #1
    5fda:	2b20      	cmp	r3, #32
    5fdc:	d1ef      	bne.n	5fbe <handleSPI+0xde>
				if (foundOne == 0)
    5fde:	f1ba 0f00 	cmp.w	sl, #0
    5fe2:	d10f      	bne.n	6004 <handleSPI+0x124>
					numMappings++;
    5fe4:	4967      	ldr	r1, [pc, #412]	; (6184 <handleSPI+0x2a4>)
					mappings[whichMapping].destNumber = destNumber;
    5fe6:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    5fe8:	4642      	mov	r2, r8
					numMappings++;
    5fea:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    5fec:	fb03 f308 	mul.w	r3, r3, r8
					numMappings++;
    5ff0:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    5ff2:	54fe      	strb	r6, [r7, r3]
					mappings[whichMapping].dest = &params[destNumber];
    5ff4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    5ff8:	443b      	add	r3, r7
					numMappings++;
    5ffa:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    5ffc:	4962      	ldr	r1, [pc, #392]	; (6188 <handleSPI+0x2a8>)
    5ffe:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    6002:	605e      	str	r6, [r3, #4]
				if (mappingChangeType == SourceID)
    6004:	f1b9 0f00 	cmp.w	r9, #0
    6008:	f040 8618 	bne.w	6c3c <handleSPI+0xd5c>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    600c:	234c      	movs	r3, #76	; 0x4c
    600e:	2001      	movs	r0, #1
					if (source == 255)
    6010:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    6014:	fb02 f303 	mul.w	r3, r2, r3
    6018:	eb07 0803 	add.w	r8, r7, r3
    601c:	eb08 060e 	add.w	r6, r8, lr
    6020:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    6024:	f000 8646 	beq.w	6cb4 <handleSPI+0xdd4>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6028:	f8df 816c 	ldr.w	r8, [pc, #364]	; 6198 <handleSPI+0x2b8>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    602c:	f10e 0104 	add.w	r1, lr, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6030:	f10e 0a01 	add.w	sl, lr, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    6034:	f1bc 0f03 	cmp.w	ip, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6038:	eb08 0bcc 	add.w	fp, r8, ip, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    603c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 619c <handleSPI+0x2bc>
    6040:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    6044:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6048:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
    604c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6050:	4439      	add	r1, r7
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6052:	f847 b00a 	str.w	fp, [r7, sl]
    6056:	f10b 0b04 	add.w	fp, fp, #4
    605a:	443b      	add	r3, r7
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    605c:	f8c1 8004 	str.w	r8, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6060:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6064:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    6068:	f300 861a 	bgt.w	6ca0 <handleSPI+0xdc0>
							mappings[whichMapping].sourceSmoothed[whichSlot] = 0;
    606c:	f886 9020 	strb.w	r9, [r6, #32]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    6070:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    6074:	2100      	movs	r1, #0
    6076:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    607a:	4472      	add	r2, lr
    607c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    6080:	63d9      	str	r1, [r3, #60]	; 0x3c
    6082:	e1c1      	b.n	6408 <handleSPI+0x528>
		else if (brainFirmwareSendInProgress)
    6084:	4a3b      	ldr	r2, [pc, #236]	; (6174 <handleSPI+0x294>)
    6086:	7811      	ldrb	r1, [r2, #0]
    6088:	2900      	cmp	r1, #0
    608a:	f000 814d 	beq.w	6328 <handleSPI+0x448>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    608e:	4d37      	ldr	r5, [pc, #220]	; (616c <handleSPI+0x28c>)
    6090:	23fb      	movs	r3, #251	; 0xfb
    6092:	f8df 910c 	ldr.w	r9, [pc, #268]	; 61a0 <handleSPI+0x2c0>
    6096:	4e3d      	ldr	r6, [pc, #244]	; (618c <handleSPI+0x2ac>)
    6098:	442c      	add	r4, r5
    609a:	f8b9 0000 	ldrh.w	r0, [r9]
    609e:	4d3c      	ldr	r5, [pc, #240]	; (6190 <handleSPI+0x2b0>)
    60a0:	6832      	ldr	r2, [r6, #0]
    60a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    60a6:	f815 c002 	ldrb.w	ip, [r5, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    60aa:	f102 0a01 	add.w	sl, r2, #1
	if (('0' <= value) && (value <= '9'))
    60ae:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    60b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
	if (('0' <= value) && (value <= '9'))
    60b6:	b2db      	uxtb	r3, r3
    60b8:	2b09      	cmp	r3, #9
    60ba:	f240 82ea 	bls.w	6692 <handleSPI+0x7b2>
	if (('a' <= value) && (value <= 'f'))
    60be:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
    60c2:	2b05      	cmp	r3, #5
    60c4:	f240 82e8 	bls.w	6698 <handleSPI+0x7b8>
	if (('A' <= value) && (value <= 'F'))
    60c8:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
    60cc:	2b05      	cmp	r3, #5
    60ce:	f240 82ee 	bls.w	66ae <handleSPI+0x7ce>
    60d2:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    60d4:	f1ae 0130 	sub.w	r1, lr, #48	; 0x30
    60d8:	b2c9      	uxtb	r1, r1
    60da:	2909      	cmp	r1, #9
    60dc:	f240 82d6 	bls.w	668c <handleSPI+0x7ac>
	if (('a' <= value) && (value <= 'f'))
    60e0:	f1ae 0161 	sub.w	r1, lr, #97	; 0x61
    60e4:	2905      	cmp	r1, #5
    60e6:	f240 82dd 	bls.w	66a4 <handleSPI+0x7c4>
	if (('A' <= value) && (value <= 'F'))
    60ea:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
    60ee:	2905      	cmp	r1, #5
    60f0:	f240 82ca 	bls.w	6688 <handleSPI+0x7a8>
				if (positionInRowLine < 294)
    60f4:	f5b0 7f93 	cmp.w	r0, #294	; 0x126
    60f8:	f0c0 82ad 	bcc.w	6656 <handleSPI+0x776>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    60fc:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
    6100:	f000 8345 	beq.w	678e <handleSPI+0x8ae>
    6104:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    6108:	f04f 0000 	mov.w	r0, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    610c:	bf08      	it	eq
    610e:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6110:	18ab      	adds	r3, r5, r2
    6112:	789b      	ldrb	r3, [r3, #2]
    6114:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6116:	bf08      	it	eq
    6118:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    611a:	18ab      	adds	r3, r5, r2
    611c:	78db      	ldrb	r3, [r3, #3]
    611e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6120:	bf08      	it	eq
    6122:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6124:	18ab      	adds	r3, r5, r2
    6126:	791b      	ldrb	r3, [r3, #4]
    6128:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    612a:	bf08      	it	eq
    612c:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    612e:	18ab      	adds	r3, r5, r2
    6130:	795b      	ldrb	r3, [r3, #5]
    6132:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6134:	bf08      	it	eq
    6136:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6138:	18ab      	adds	r3, r5, r2
    613a:	799b      	ldrb	r3, [r3, #6]
    613c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    613e:	bf08      	it	eq
    6140:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6142:	18ab      	adds	r3, r5, r2
    6144:	79db      	ldrb	r3, [r3, #7]
    6146:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6148:	bf08      	it	eq
    614a:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    614c:	18ab      	adds	r3, r5, r2
    614e:	7a1b      	ldrb	r3, [r3, #8]
    6150:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6152:	bf08      	it	eq
    6154:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6156:	18ab      	adds	r3, r5, r2
    6158:	7a5b      	ldrb	r3, [r3, #9]
    615a:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    615c:	bf08      	it	eq
    615e:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    6160:	e7a1      	b.n	60a6 <handleSPI+0x1c6>
    6162:	bf00      	nop
    6164:	20016cc4 	.word	0x20016cc4
    6168:	20016cc8 	.word	0x20016cc8
    616c:	30000140 	.word	0x30000140
    6170:	20014b00 	.word	0x20014b00
    6174:	20014afd 	.word	0x20014afd
    6178:	58020c00 	.word	0x58020c00
    617c:	20005744 	.word	0x20005744
    6180:	20018d00 	.word	0x20018d00
    6184:	20019948 	.word	0x20019948
    6188:	20019958 	.word	0x20019958
    618c:	20014af8 	.word	0x20014af8
    6190:	c3e00000 	.word	0xc3e00000
    6194:	20014afc 	.word	0x20014afc
    6198:	200146b0 	.word	0x200146b0
    619c:	200006dc 	.word	0x200006dc
    61a0:	2001aa74 	.word	0x2001aa74
			 for (int i = 0; i < numStringsThisBoard; i++)
    61a4:	4b6d      	ldr	r3, [pc, #436]	; (635c <handleSPI+0x47c>)
    61a6:	7818      	ldrb	r0, [r3, #0]
    61a8:	2800      	cmp	r0, #0
    61aa:	f000 80b2 	beq.w	6312 <handleSPI+0x432>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    61ae:	496c      	ldr	r1, [pc, #432]	; (6360 <handleSPI+0x480>)
			 uint8_t currentByte = offset+1;
    61b0:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    61b2:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 6364 <handleSPI+0x484>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    61b6:	680a      	ldr	r2, [r1, #0]
    61b8:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    61ba:	eddf 6a6b 	vldr	s13, [pc, #428]	; 6368 <handleSPI+0x488>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    61be:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    61c2:	5cd2      	ldrb	r2, [r2, r3]
    61c4:	0212      	lsls	r2, r2, #8
    61c6:	ee07 2a90 	vmov	s15, r2
    61ca:	680a      	ldr	r2, [r1, #0]
    61cc:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    61d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    61d4:	441a      	add	r2, r3
    61d6:	7852      	ldrb	r2, [r2, #1]
    61d8:	ee07 2a90 	vmov	s15, r2
    61dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    61e0:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    61e4:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    61e8:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    61ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61f0:	d507      	bpl.n	6202 <handleSPI+0x322>
    61f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    61f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61fa:	dd02      	ble.n	6202 <handleSPI+0x322>
					stringMIDIPitches[i] = myPitch;
    61fc:	4a5b      	ldr	r2, [pc, #364]	; (636c <handleSPI+0x48c>)
    61fe:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    6202:	2801      	cmp	r0, #1
    6204:	f000 8085 	beq.w	6312 <handleSPI+0x432>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6208:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    620a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 6364 <handleSPI+0x484>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    620e:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6210:	eddf 6a55 	vldr	s13, [pc, #340]	; 6368 <handleSPI+0x488>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6214:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6218:	5cd2      	ldrb	r2, [r2, r3]
    621a:	0212      	lsls	r2, r2, #8
    621c:	ee07 2a90 	vmov	s15, r2
    6220:	680a      	ldr	r2, [r1, #0]
    6222:	3201      	adds	r2, #1
    6224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    6228:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    622c:	441a      	add	r2, r3
    622e:	7852      	ldrb	r2, [r2, #1]
    6230:	ee07 2a90 	vmov	s15, r2
    6234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6238:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    623c:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6240:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6248:	d507      	bpl.n	625a <handleSPI+0x37a>
    624a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6252:	dd02      	ble.n	625a <handleSPI+0x37a>
					stringMIDIPitches[i] = myPitch;
    6254:	4a45      	ldr	r2, [pc, #276]	; (636c <handleSPI+0x48c>)
    6256:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    625a:	2802      	cmp	r0, #2
    625c:	d059      	beq.n	6312 <handleSPI+0x432>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    625e:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6260:	ed9f 6a40 	vldr	s12, [pc, #256]	; 6364 <handleSPI+0x484>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6264:	3202      	adds	r2, #2
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6266:	eddf 6a40 	vldr	s13, [pc, #256]	; 6368 <handleSPI+0x488>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    626a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    626e:	5cd2      	ldrb	r2, [r2, r3]
    6270:	0212      	lsls	r2, r2, #8
    6272:	ee07 2a90 	vmov	s15, r2
    6276:	680a      	ldr	r2, [r1, #0]
    6278:	3202      	adds	r2, #2
    627a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    627e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6282:	441a      	add	r2, r3
    6284:	7852      	ldrb	r2, [r2, #1]
    6286:	ee07 2a90 	vmov	s15, r2
    628a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    628e:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6292:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6296:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    629e:	d507      	bpl.n	62b0 <handleSPI+0x3d0>
    62a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    62a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62a8:	dd02      	ble.n	62b0 <handleSPI+0x3d0>
					stringMIDIPitches[i] = myPitch;
    62aa:	4a30      	ldr	r2, [pc, #192]	; (636c <handleSPI+0x48c>)
    62ac:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    62b0:	2803      	cmp	r0, #3
    62b2:	d02e      	beq.n	6312 <handleSPI+0x432>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    62b4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 6368 <handleSPI+0x488>
			 for (int i = 0; i < numStringsThisBoard; i++)
    62b8:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    62ba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 6364 <handleSPI+0x484>
					stringMIDIPitches[i] = myPitch;
    62be:	4f2b      	ldr	r7, [pc, #172]	; (636c <handleSPI+0x48c>)
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    62c0:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    62c2:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    62c6:	4432      	add	r2, r6
    62c8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    62cc:	5cd2      	ldrb	r2, [r2, r3]
    62ce:	0212      	lsls	r2, r2, #8
    62d0:	ee07 2a90 	vmov	s15, r2
    62d4:	680a      	ldr	r2, [r1, #0]
    62d6:	4432      	add	r2, r6
    62d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    62dc:	3601      	adds	r6, #1
    62de:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    62e2:	441a      	add	r2, r3
    62e4:	7852      	ldrb	r2, [r2, #1]
    62e6:	ee07 2a90 	vmov	s15, r2
    62ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    62ee:	ee77 7a27 	vadd.f32	s15, s14, s15
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    62f2:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    62f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
    62fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62fe:	dd06      	ble.n	630e <handleSPI+0x42e>
    6300:	eef4 7a66 	vcmp.f32	s15, s13
    6304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6308:	d501      	bpl.n	630e <handleSPI+0x42e>
					stringMIDIPitches[i] = myPitch;
    630a:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    630e:	4286      	cmp	r6, r0
    6310:	dbd6      	blt.n	62c0 <handleSPI+0x3e0>
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    6312:	4817      	ldr	r0, [pc, #92]	; (6370 <handleSPI+0x490>)
    6314:	f44f 7100 	mov.w	r1, #512	; 0x200
    6318:	2201      	movs	r2, #1
			 whichBar = 0;
    631a:	2600      	movs	r6, #0
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    631c:	f002 fa6c 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
			 whichBar = 0;
    6320:	4b14      	ldr	r3, [pc, #80]	; (6374 <handleSPI+0x494>)
			 updateStateFromSPIMessage(offset);
    6322:	4620      	mov	r0, r4
			 whichBar = 0;
    6324:	701e      	strb	r6, [r3, #0]
			 updateStateFromSPIMessage(offset);
    6326:	e067      	b.n	63f8 <handleSPI+0x518>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    6328:	4913      	ldr	r1, [pc, #76]	; (6378 <handleSPI+0x498>)
    632a:	20fc      	movs	r0, #252	; 0xfc
    632c:	4e13      	ldr	r6, [pc, #76]	; (637c <handleSPI+0x49c>)
    632e:	440c      	add	r4, r1
			brainFirmwareSendInProgress = 1;
    6330:	7013      	strb	r3, [r2, #0]
    6332:	4a13      	ldr	r2, [pc, #76]	; (6380 <handleSPI+0x4a0>)
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    6334:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    6338:	6831      	ldr	r1, [r6, #0]
    633a:	f102 0464 	add.w	r4, r2, #100	; 0x64
				if (brainFirmwareBuffer[i] ==  0x3a)
    633e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    6342:	283a      	cmp	r0, #58	; 0x3a
    6344:	bf08      	it	eq
    6346:	4619      	moveq	r1, r3
			for (uint8_t i = 0; i<100; i++)
    6348:	4294      	cmp	r4, r2
    634a:	f103 0301 	add.w	r3, r3, #1
    634e:	d1f6      	bne.n	633e <handleSPI+0x45e>
			positionInRowLine = 0;
    6350:	4b0c      	ldr	r3, [pc, #48]	; (6384 <handleSPI+0x4a4>)
    6352:	2200      	movs	r2, #0
    6354:	6031      	str	r1, [r6, #0]
    6356:	801a      	strh	r2, [r3, #0]
    6358:	e5f4      	b.n	5f44 <handleSPI+0x64>
    635a:	bf00      	nop
    635c:	2000000d 	.word	0x2000000d
    6360:	200050d4 	.word	0x200050d4
    6364:	478bff74 	.word	0x478bff74
    6368:	3b000080 	.word	0x3b000080
    636c:	20014840 	.word	0x20014840
    6370:	58021800 	.word	0x58021800
    6374:	20014920 	.word	0x20014920
    6378:	30000140 	.word	0x30000140
    637c:	20014af8 	.word	0x20014af8
    6380:	c3dfffff 	.word	0xc3dfffff
    6384:	2001aa74 	.word	0x2001aa74
			 uint8_t currentByte = offset+1;
    6388:	1c47      	adds	r7, r0, #1
    638a:	4ecc      	ldr	r6, [pc, #816]	; (66bc <handleSPI+0x7dc>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    638c:	ed9f 8acc 	vldr	s16, [pc, #816]	; 66c0 <handleSPI+0x7e0>
    6390:	fa55 f787 	uxtab	r7, r5, r7
    6394:	f106 0830 	add.w	r8, r6, #48	; 0x30
    6398:	f817 3b01 	ldrb.w	r3, [r7], #1
    639c:	4630      	mov	r0, r6
				for (int i = 0; i < 12; i++)
    639e:	3604      	adds	r6, #4
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    63a0:	ee00 3a10 	vmov	s0, r3
    63a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    63a8:	ee20 0a08 	vmul.f32	s0, s0, s16
    63ac:	f000 fd58 	bl	6e60 <tExpSmooth_setDest>
				for (int i = 0; i < 12; i++)
    63b0:	4546      	cmp	r6, r8
    63b2:	d1f1      	bne.n	6398 <handleSPI+0x4b8>
				currentByte += 12;
    63b4:	f104 070d 	add.w	r7, r4, #13
    63b8:	4ec2      	ldr	r6, [pc, #776]	; (66c4 <handleSPI+0x7e4>)
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    63ba:	ed9f 8ac1 	vldr	s16, [pc, #772]	; 66c0 <handleSPI+0x7e0>
    63be:	b2ff      	uxtb	r7, r7
    63c0:	f106 0828 	add.w	r8, r6, #40	; 0x28
    63c4:	3f01      	subs	r7, #1
    63c6:	442f      	add	r7, r5
    63c8:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    63cc:	4630      	mov	r0, r6
				for (int i = 0; i < 10; i++)
    63ce:	3604      	adds	r6, #4
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    63d0:	ee00 3a10 	vmov	s0, r3
    63d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    63d8:	ee20 0a08 	vmul.f32	s0, s0, s16
    63dc:	f000 fd40 	bl	6e60 <tExpSmooth_setDest>
				for (int i = 0; i < 10; i++)
    63e0:	4546      	cmp	r6, r8
    63e2:	d1f1      	bne.n	63c8 <handleSPI+0x4e8>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    63e4:	2201      	movs	r2, #1
    63e6:	48b8      	ldr	r0, [pc, #736]	; (66c8 <handleSPI+0x7e8>)
    63e8:	f44f 7100 	mov.w	r1, #512	; 0x200
    63ec:	f002 fa04 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
				whichBar = 1;
    63f0:	4bb6      	ldr	r3, [pc, #728]	; (66cc <handleSPI+0x7ec>)
    63f2:	2201      	movs	r2, #1
				updateStateFromSPIMessage(offset);
    63f4:	4620      	mov	r0, r4
				whichBar = 1;
    63f6:	701a      	strb	r2, [r3, #0]
				updateStateFromSPIMessage(offset);
    63f8:	f7fa f802 	bl	400 <updateStateFromSPIMessage>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    63fc:	2200      	movs	r2, #0
    63fe:	f44f 7100 	mov.w	r1, #512	; 0x200
    6402:	48b1      	ldr	r0, [pc, #708]	; (66c8 <handleSPI+0x7e8>)
    6404:	f002 f9f8 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
			if (boardNumber == 0)
    6408:	4bb1      	ldr	r3, [pc, #708]	; (66d0 <handleSPI+0x7f0>)
    640a:	781e      	ldrb	r6, [r3, #0]
    640c:	2e00      	cmp	r6, #0
    640e:	f47f ad99 	bne.w	5f44 <handleSPI+0x64>
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    6412:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    6414:	4baf      	ldr	r3, [pc, #700]	; (66d4 <handleSPI+0x7f4>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    6416:	21fd      	movs	r1, #253	; 0xfd
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    6418:	4daf      	ldr	r5, [pc, #700]	; (66d8 <handleSPI+0x7f8>)
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    641a:	781a      	ldrb	r2, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    641c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6420:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    6422:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6426:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    642a:	4aac      	ldr	r2, [pc, #688]	; (66dc <handleSPI+0x7fc>)
    642c:	0049      	lsls	r1, r1, #1
    642e:	5c51      	ldrb	r1, [r2, r1]
    6430:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    6434:	7819      	ldrb	r1, [r3, #0]
    6436:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    643a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    643e:	7849      	ldrb	r1, [r1, #1]
    6440:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    6444:	7819      	ldrb	r1, [r3, #0]
    6446:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    644a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    644e:	7889      	ldrb	r1, [r1, #2]
    6450:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    6454:	7819      	ldrb	r1, [r3, #0]
    6456:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    645a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    645e:	78c9      	ldrb	r1, [r1, #3]
    6460:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    6464:	7819      	ldrb	r1, [r3, #0]
    6466:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    646a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    646e:	7909      	ldrb	r1, [r1, #4]
    6470:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    6474:	7819      	ldrb	r1, [r3, #0]
    6476:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    647a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    647e:	7949      	ldrb	r1, [r1, #5]
    6480:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    6484:	7819      	ldrb	r1, [r3, #0]
    6486:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    648a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    648e:	7989      	ldrb	r1, [r1, #6]
    6490:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    6494:	7819      	ldrb	r1, [r3, #0]
    6496:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    649a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    649e:	79c9      	ldrb	r1, [r1, #7]
    64a0:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    64a4:	7819      	ldrb	r1, [r3, #0]
    64a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    64aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    64ae:	7a09      	ldrb	r1, [r1, #8]
    64b0:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    64b4:	7819      	ldrb	r1, [r3, #0]
    64b6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    64ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    64be:	7a49      	ldrb	r1, [r1, #9]
    64c0:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    64c4:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    64c6:	782f      	ldrb	r7, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    64c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    64cc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    64d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    64d4:	7a89      	ldrb	r1, [r1, #10]
    64d6:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    64da:	7819      	ldrb	r1, [r3, #0]
    64dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    64e0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    64e4:	7ac9      	ldrb	r1, [r1, #11]
    64e6:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    64ea:	7819      	ldrb	r1, [r3, #0]
    64ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    64f0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    64f4:	7b09      	ldrb	r1, [r1, #12]
    64f6:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    64fa:	7819      	ldrb	r1, [r3, #0]
    64fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6500:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    6504:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
				whichMacroToSendName = (whichMacroToSendName + 1);
    6508:	3701      	adds	r7, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    650a:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    650c:	b2ff      	uxtb	r7, r7
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    650e:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    6512:	781a      	ldrb	r2, [r3, #0]
				if (whichMacroToSendName >= 8)
    6514:	2f07      	cmp	r7, #7
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    6516:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    651a:	ea4f 1002 	mov.w	r0, r2, lsl #4
    651e:	4a70      	ldr	r2, [pc, #448]	; (66e0 <handleSPI+0x800>)
    6520:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6524:	5c10      	ldrb	r0, [r2, r0]
    6526:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    652a:	7818      	ldrb	r0, [r3, #0]
    652c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6530:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6534:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6538:	4410      	add	r0, r2
    653a:	7840      	ldrb	r0, [r0, #1]
    653c:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    6540:	7818      	ldrb	r0, [r3, #0]
    6542:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6546:	ea4f 1000 	mov.w	r0, r0, lsl #4
    654a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    654e:	4410      	add	r0, r2
    6550:	7880      	ldrb	r0, [r0, #2]
    6552:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    6556:	7818      	ldrb	r0, [r3, #0]
    6558:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    655c:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6560:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6564:	4410      	add	r0, r2
    6566:	78c0      	ldrb	r0, [r0, #3]
    6568:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    656c:	7818      	ldrb	r0, [r3, #0]
    656e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6572:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6576:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    657a:	4410      	add	r0, r2
    657c:	7900      	ldrb	r0, [r0, #4]
    657e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    6582:	7818      	ldrb	r0, [r3, #0]
    6584:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6588:	ea4f 1000 	mov.w	r0, r0, lsl #4
    658c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6590:	4410      	add	r0, r2
    6592:	7940      	ldrb	r0, [r0, #5]
    6594:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    6598:	7818      	ldrb	r0, [r3, #0]
    659a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    659e:	ea4f 1000 	mov.w	r0, r0, lsl #4
    65a2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    65a6:	4410      	add	r0, r2
    65a8:	7980      	ldrb	r0, [r0, #6]
    65aa:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    65ae:	7818      	ldrb	r0, [r3, #0]
    65b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    65b4:	ea4f 1000 	mov.w	r0, r0, lsl #4
    65b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    65bc:	4410      	add	r0, r2
    65be:	79c0      	ldrb	r0, [r0, #7]
    65c0:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    65c4:	7818      	ldrb	r0, [r3, #0]
    65c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    65ca:	ea4f 1000 	mov.w	r0, r0, lsl #4
    65ce:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    65d2:	4410      	add	r0, r2
    65d4:	7a00      	ldrb	r0, [r0, #8]
    65d6:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    65da:	7818      	ldrb	r0, [r3, #0]
    65dc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    65e0:	ea4f 1000 	mov.w	r0, r0, lsl #4
    65e4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    65e8:	4410      	add	r0, r2
    65ea:	7a40      	ldrb	r0, [r0, #9]
    65ec:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
    65f0:	7818      	ldrb	r0, [r3, #0]
    65f2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    65f6:	ea4f 1000 	mov.w	r0, r0, lsl #4
    65fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    65fe:	4410      	add	r0, r2
    6600:	7a80      	ldrb	r0, [r0, #10]
    6602:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
    6606:	7818      	ldrb	r0, [r3, #0]
    6608:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    660c:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6610:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6614:	4410      	add	r0, r2
    6616:	7ac0      	ldrb	r0, [r0, #11]
    6618:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    661c:	7818      	ldrb	r0, [r3, #0]
    661e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6622:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6626:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    662a:	4410      	add	r0, r2
    662c:	7b00      	ldrb	r0, [r0, #12]
    662e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    6632:	7818      	ldrb	r0, [r3, #0]
    6634:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6638:	ea4f 1000 	mov.w	r0, r0, lsl #4
    663c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    6640:	440a      	add	r2, r1
    6642:	7b52      	ldrb	r2, [r2, #13]
    6644:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    6648:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    664c:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 8)
    6650:	d84a      	bhi.n	66e8 <handleSPI+0x808>
				whichMacroToSendName = (whichMacroToSendName + 1);
    6652:	702f      	strb	r7, [r5, #0]
    6654:	e476      	b.n	5f44 <handleSPI+0x64>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    6656:	19e1      	adds	r1, r4, r7
			for (int i = 0; i < 30; i++)
    6658:	3701      	adds	r7, #1
				positionInRowLine++;
    665a:	3001      	adds	r0, #1
					brainFirmwareBufferIndex += 2;
    665c:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    665e:	2f1e      	cmp	r7, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    6660:	f881 3041 	strb.w	r3, [r1, #65]	; 0x41
				positionInRowLine++;
    6664:	b280      	uxth	r0, r0
			for (int i = 0; i < 30; i++)
    6666:	f47f ad1e 	bne.w	60a6 <handleSPI+0x1c6>
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    666a:	4b1e      	ldr	r3, [pc, #120]	; (66e4 <handleSPI+0x804>)
			SPI_LEVERS_TX[offset+31] = 254;
    666c:	21fe      	movs	r1, #254	; 0xfe
    666e:	6032      	str	r2, [r6, #0]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	f8a9 0000 	strh.w	r0, [r9]
    6676:	429a      	cmp	r2, r3
			SPI_LEVERS_TX[offset+31] = 254;
    6678:	f884 105f 	strb.w	r1, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    667c:	f4ff ac62 	bcc.w	5f44 <handleSPI+0x64>
				brainFirmwareEndSignal = 1;
    6680:	2301      	movs	r3, #1
    6682:	f888 3000 	strb.w	r3, [r8]
    6686:	e45d      	b.n	5f44 <handleSPI+0x64>
		return (uint8_t) (10 + value - 'A');
    6688:	f1ae 0137 	sub.w	r1, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    668c:	430b      	orrs	r3, r1
    668e:	b25b      	sxtb	r3, r3
		return (uint8_t) (10 + value - 'A');
    6690:	e530      	b.n	60f4 <handleSPI+0x214>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    6692:	011b      	lsls	r3, r3, #4
    6694:	b25b      	sxtb	r3, r3
    6696:	e51d      	b.n	60d4 <handleSPI+0x1f4>
		return (uint8_t) (10 + value - 'a');
    6698:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    669c:	f343 0303 	sbfx	r3, r3, #0, #4
    66a0:	011b      	lsls	r3, r3, #4
		return (uint8_t) (10 + value - 'a');
    66a2:	e517      	b.n	60d4 <handleSPI+0x1f4>
    66a4:	f1ae 0157 	sub.w	r1, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    66a8:	430b      	orrs	r3, r1
    66aa:	b25b      	sxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    66ac:	e522      	b.n	60f4 <handleSPI+0x214>
		return (uint8_t) (10 + value - 'A');
    66ae:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    66b2:	f343 0303 	sbfx	r3, r3, #0, #4
    66b6:	011b      	lsls	r3, r3, #4
		return (uint8_t) (10 + value - 'A');
    66b8:	e50c      	b.n	60d4 <handleSPI+0x1f4>
    66ba:	bf00      	nop
    66bc:	2000528c 	.word	0x2000528c
    66c0:	3b808081 	.word	0x3b808081
    66c4:	20005704 	.word	0x20005704
    66c8:	58021800 	.word	0x58021800
    66cc:	20014920 	.word	0x20014920
    66d0:	20014af5 	.word	0x20014af5
    66d4:	2001cf05 	.word	0x2001cf05
    66d8:	2001cf04 	.word	0x2001cf04
    66dc:	30032000 	.word	0x30032000
    66e0:	30032380 	.word	0x30032380
    66e4:	20014b00 	.word	0x20014b00
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    66e8:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    66ea:	702e      	strb	r6, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    66ec:	3201      	adds	r2, #1
    66ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    66f2:	701a      	strb	r2, [r3, #0]
    66f4:	e426      	b.n	5f44 <handleSPI+0x64>
			 if (writingState != ReceivingPreset)
    66f6:	49b9      	ldr	r1, [pc, #740]	; (69dc <handleSPI+0xafc>)
    66f8:	7808      	ldrb	r0, [r1, #0]
    66fa:	2802      	cmp	r0, #2
    66fc:	d061      	beq.n	67c2 <handleSPI+0x8e2>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    66fe:	700b      	strb	r3, [r1, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    6700:	4bb7      	ldr	r3, [pc, #732]	; (69e0 <handleSPI+0xb00>)
    6702:	f013 0107 	ands.w	r1, r3, #7
    6706:	f040 81a1 	bne.w	6a4c <handleSPI+0xb6c>
						audioOutBuffer[i] = 0;
    670a:	e9c3 1100 	strd	r1, r1, [r3]
    670e:	e9c3 1102 	strd	r1, r1, [r3, #8]
    6712:	e9c3 1104 	strd	r1, r1, [r3, #16]
    6716:	e9c3 1106 	strd	r1, r1, [r3, #24]
    671a:	e9c3 1108 	strd	r1, r1, [r3, #32]
    671e:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
    6722:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
    6726:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    672a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
    672e:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    6732:	e9c3 1114 	strd	r1, r1, [r3, #80]	; 0x50
    6736:	e9c3 1116 	strd	r1, r1, [r3, #88]	; 0x58
    673a:	e9c3 1118 	strd	r1, r1, [r3, #96]	; 0x60
    673e:	e9c3 111a 	strd	r1, r1, [r3, #104]	; 0x68
    6742:	e9c3 111c 	strd	r1, r1, [r3, #112]	; 0x70
    6746:	e9c3 111e 	strd	r1, r1, [r3, #120]	; 0x78
				 diskBusy = 1;
    674a:	4aa6      	ldr	r2, [pc, #664]	; (69e4 <handleSPI+0xb04>)
    674c:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    674e:	4ba6      	ldr	r3, [pc, #664]	; (69e8 <handleSPI+0xb08>)
				 diskBusy = 1;
    6750:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    6752:	2200      	movs	r2, #0
				 bufferPos = 0;
    6754:	48a5      	ldr	r0, [pc, #660]	; (69ec <handleSPI+0xb0c>)
				 audioMasterLevel = 0.0f;
    6756:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    6758:	2300      	movs	r3, #0
    675a:	8003      	strh	r3, [r0, #0]
			 presetNumberToSave = SPI_LEVERS[offset + 1];
    675c:	192b      	adds	r3, r5, r4
    675e:	4aa4      	ldr	r2, [pc, #656]	; (69f0 <handleSPI+0xb10>)
    6760:	4fa4      	ldr	r7, [pc, #656]	; (69f4 <handleSPI+0xb14>)
    6762:	785b      	ldrb	r3, [r3, #1]
    6764:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 6a44 <handleSPI+0xb64>
    6768:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    676a:	1ca3      	adds	r3, r4, #2
    676c:	b2db      	uxtb	r3, r3
    676e:	1e59      	subs	r1, r3, #1
    6770:	441f      	add	r7, r3
    6772:	4429      	add	r1, r5
				 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    6774:	8803      	ldrh	r3, [r0, #0]
    6776:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    677a:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    677c:	42b9      	cmp	r1, r7
				 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    677e:	f103 0201 	add.w	r2, r3, #1
    6782:	f80c 6003 	strb.w	r6, [ip, r3]
    6786:	b293      	uxth	r3, r2
    6788:	8003      	strh	r3, [r0, #0]
			 for (int i = 0; i < 28; i++)
    678a:	d1f3      	bne.n	6774 <handleSPI+0x894>
    678c:	e63c      	b.n	6408 <handleSPI+0x528>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    678e:	18ab      	adds	r3, r5, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6790:	4652      	mov	r2, sl
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6792:	f893 e002 	ldrb.w	lr, [r3, #2]
    6796:	e4b5      	b.n	6104 <handleSPI+0x224>
			if(writingState == ReceivingPreset)
    6798:	4b90      	ldr	r3, [pc, #576]	; (69dc <handleSPI+0xafc>)
    679a:	7819      	ldrb	r1, [r3, #0]
    679c:	2902      	cmp	r1, #2
    679e:	f47f ae33 	bne.w	6408 <handleSPI+0x528>
				 presetNumberToLoad = presetNumberToSave;
    67a2:	4893      	ldr	r0, [pc, #588]	; (69f0 <handleSPI+0xb10>)
				 writingState = 0;
    67a4:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    67a6:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    67a8:	4a90      	ldr	r2, [pc, #576]	; (69ec <handleSPI+0xb0c>)
				 presetNumberToLoad = presetNumberToSave;
    67aa:	4993      	ldr	r1, [pc, #588]	; (69f8 <handleSPI+0xb18>)
    67ac:	b2db      	uxtb	r3, r3
    67ae:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    67b0:	8813      	ldrh	r3, [r2, #0]
    67b2:	4992      	ldr	r1, [pc, #584]	; (69fc <handleSPI+0xb1c>)
    67b4:	b29b      	uxth	r3, r3
    67b6:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    67b8:	8813      	ldrh	r3, [r2, #0]
    67ba:	4a91      	ldr	r2, [pc, #580]	; (6a00 <handleSPI+0xb20>)
    67bc:	b29b      	uxth	r3, r3
    67be:	6013      	str	r3, [r2, #0]
    67c0:	e622      	b.n	6408 <handleSPI+0x528>
    67c2:	488a      	ldr	r0, [pc, #552]	; (69ec <handleSPI+0xb0c>)
    67c4:	e7ca      	b.n	675c <handleSPI+0x87c>
			if (presetReady)
    67c6:	4b8f      	ldr	r3, [pc, #572]	; (6a04 <handleSPI+0xb24>)
    67c8:	681b      	ldr	r3, [r3, #0]
    67ca:	2b00      	cmp	r3, #0
    67cc:	f43f ae1c 	beq.w	6408 <handleSPI+0x528>
				uint8_t currentByte = offset+1;
    67d0:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    67d2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 6a08 <handleSPI+0xb28>
    67d6:	4e8d      	ldr	r6, [pc, #564]	; (6a0c <handleSPI+0xb2c>)
				uint16_t whichParam = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    67d8:	b2db      	uxtb	r3, r3
    67da:	18ea      	adds	r2, r5, r3
    67dc:	5ceb      	ldrb	r3, [r5, r3]
    67de:	7857      	ldrb	r7, [r2, #1]
    67e0:	eb07 2703 	add.w	r7, r7, r3, lsl #8
				currentByte = currentByte + 2;
    67e4:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    67e6:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    67e8:	b2bf      	uxth	r7, r7
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    67ea:	18e9      	adds	r1, r5, r3
    67ec:	5cea      	ldrb	r2, [r5, r3]
    67ee:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    67f2:	784b      	ldrb	r3, [r1, #1]
    67f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    67f8:	f1a7 023f 	sub.w	r2, r7, #63	; 0x3f
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    67fc:	ee07 3a90 	vmov	s15, r3
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    6800:	b291      	uxth	r1, r2
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6802:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    6806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    680a:	2918      	cmp	r1, #24
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    680c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6810:	ee67 7a87 	vmul.f32	s15, s15, s14
    6814:	edc3 7a00 	vstr	s15, [r3]
    6818:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    681c:	d842      	bhi.n	68a4 <handleSPI+0x9c4>
    681e:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    6822:	40cb      	lsrs	r3, r1
    6824:	07d8      	lsls	r0, r3, #31
    6826:	d53d      	bpl.n	68a4 <handleSPI+0x9c4>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6828:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    682c:	4613      	mov	r3, r2
    682e:	2a00      	cmp	r2, #0
					param *FXAlias = &params[whichParam + 1];
    6830:	f107 0201 	add.w	r2, r7, #1
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6834:	ee67 7a87 	vmul.f32	s15, s15, s14
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    6838:	bfb8      	it	lt
    683a:	f1a7 0338 	sublt.w	r3, r7, #56	; 0x38
					param *FXAlias = &params[whichParam + 1];
    683e:	ebc2 09c2 	rsb	r9, r2, r2, lsl #3
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    6842:	10db      	asrs	r3, r3, #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6844:	fef8 7a67 	vrinta.f32	s15, s15
    6848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
					param *FXAlias = &params[whichParam + 1];
    684c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    6850:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6854:	edcd 7a01 	vstr	s15, [sp, #4]
    6858:	f89d 0004 	ldrb.w	r0, [sp, #4]
					if (effectType > FXLowpass)
    685c:	280b      	cmp	r0, #11
    685e:	d902      	bls.n	6866 <handleSPI+0x986>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    6860:	496b      	ldr	r1, [pc, #428]	; (6a10 <handleSPI+0xb30>)
    6862:	f8c9 1048 	str.w	r1, [r9, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    6866:	fa5f f883 	uxtb.w	r8, r3
    686a:	9201      	str	r2, [sp, #4]
    686c:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    686e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    6872:	f002 f849 	bl	8908 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    6876:	9a01      	ldr	r2, [sp, #4]
    6878:	ebab 0302 	sub.w	r3, fp, r2
    687c:	4a65      	ldr	r2, [pc, #404]	; (6a14 <handleSPI+0xb34>)
    687e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6882:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    6886:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    688a:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    688c:	684b      	ldr	r3, [r1, #4]
    688e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    6892:	688b      	ldr	r3, [r1, #8]
    6894:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    6898:	68cb      	ldr	r3, [r1, #12]
    689a:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    689e:	690b      	ldr	r3, [r1, #16]
    68a0:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
    68a4:	ebaa 0807 	sub.w	r8, sl, r7
			 for (int i = 0; i < numStringsThisBoard; i++)
    68a8:	f04f 0b00 	mov.w	fp, #0
    68ac:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    68b0:	46c1      	mov	r9, r8
    68b2:	ecb8 0a01 	vldmia	r8!, {s0}
    68b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    68ba:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    68bc:	4659      	mov	r1, fp
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    68be:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    68c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
    68c6:	f899 0018 	ldrb.w	r0, [r9, #24]
    68ca:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    68cc:	f1bb 0f00 	cmp.w	fp, #0
    68d0:	f000 8081 	beq.w	69d6 <handleSPI+0xaf6>
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    68d4:	f1a7 0323 	sub.w	r3, r7, #35	; 0x23
    68d8:	b299      	uxth	r1, r3
    68da:	291a      	cmp	r1, #26
    68dc:	d821      	bhi.n	6922 <handleSPI+0xa42>
    68de:	4a4e      	ldr	r2, [pc, #312]	; (6a18 <handleSPI+0xb38>)
    68e0:	40ca      	lsrs	r2, r1
    68e2:	07d1      	lsls	r1, r2, #31
    68e4:	d51d      	bpl.n	6922 <handleSPI+0xa42>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    68e6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    68ea:	edd9 7a02 	vldr	s15, [r9, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    68ee:	4a4b      	ldr	r2, [pc, #300]	; (6a1c <handleSPI+0xb3c>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    68f0:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    68f4:	fb82 1203 	smull	r1, r2, r2, r3
    68f8:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    68fa:	fef8 7a67 	vrinta.f32	s15, s15
    68fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    6902:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6906:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    690a:	2a06      	cmp	r2, #6
    690c:	d809      	bhi.n	6922 <handleSPI+0xa42>
    690e:	e8df f002 	tbb	[pc, r2]
    6912:	4449      	.short	0x4449
    6914:	4e53585d 	.word	0x4e53585d
    6918:	04          	.byte	0x04
    6919:	00          	.byte	0x00
			  shapeTick[i] = &userTick;
    691a:	4a41      	ldr	r2, [pc, #260]	; (6a20 <handleSPI+0xb40>)
    691c:	4941      	ldr	r1, [pc, #260]	; (6a24 <handleSPI+0xb44>)
    691e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    6922:	f1a7 0318 	sub.w	r3, r7, #24
    6926:	b299      	uxth	r1, r3
    6928:	291a      	cmp	r1, #26
    692a:	f240 80b0 	bls.w	6a8e <handleSPI+0xbae>
				if ((whichParam == Filter1Type) || (whichParam == Filter1Type))
    692e:	2f60      	cmp	r7, #96	; 0x60
    6930:	f040 80d4 	bne.w	6adc <handleSPI+0xbfc>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    6934:	f8df 8110 	ldr.w	r8, [pc, #272]	; 6a48 <handleSPI+0xb68>
    6938:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					setFilterTypes(filterType, whichFilter);
    693c:	2100      	movs	r1, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    693e:	4643      	mov	r3, r8
    6940:	f108 0838 	add.w	r8, r8, #56	; 0x38
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6944:	460f      	mov	r7, r1
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    6946:	edd3 7a00 	vldr	s15, [r3]
    694a:	ee67 7a87 	vmul.f32	s15, s15, s14
    694e:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    6952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6956:	ee17 0a90 	vmov	r0, s15
    695a:	f001 ff05 	bl	8768 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    695e:	4a32      	ldr	r2, [pc, #200]	; (6a28 <handleSPI+0xb48>)
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    6960:	e9d2 3200 	ldrd	r3, r2, [r2]
    6964:	f8c6 2acc 	str.w	r2, [r6, #2764]	; 0xacc
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    6968:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    696c:	ed98 0a07 	vldr	s0, [r8, #28]
    6970:	4639      	mov	r1, r7
    6972:	f896 0aec 	ldrb.w	r0, [r6, #2796]	; 0xaec
    6976:	f108 0804 	add.w	r8, r8, #4
    697a:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    697c:	ed18 0a01 	vldr	s0, [r8, #-4]
    6980:	4639      	mov	r1, r7
    6982:	f8d6 3acc 	ldr.w	r3, [r6, #2764]	; 0xacc
    6986:	f896 0ad0 	ldrb.w	r0, [r6, #2768]	; 0xad0
    698a:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    698c:	2f00      	cmp	r7, #0
    698e:	f47f ad3b 	bne.w	6408 <handleSPI+0x528>
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    6992:	f8d6 3ae8 	ldr.w	r3, [r6, #2792]	; 0xae8
    6996:	2701      	movs	r7, #1
    6998:	e7e8      	b.n	696c <handleSPI+0xa8c>
			  shapeTick[i] = &sineTriTick;
    699a:	4a21      	ldr	r2, [pc, #132]	; (6a20 <handleSPI+0xb40>)
    699c:	4923      	ldr	r1, [pc, #140]	; (6a2c <handleSPI+0xb4c>)
    699e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    69a2:	e7be      	b.n	6922 <handleSPI+0xa42>
			  shapeTick[i] = &sawSquareTick;
    69a4:	4a1e      	ldr	r2, [pc, #120]	; (6a20 <handleSPI+0xb40>)
    69a6:	4922      	ldr	r1, [pc, #136]	; (6a30 <handleSPI+0xb50>)
    69a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    69ac:	e7b9      	b.n	6922 <handleSPI+0xa42>
			  shapeTick[i] = &triTick;
    69ae:	4a1c      	ldr	r2, [pc, #112]	; (6a20 <handleSPI+0xb40>)
    69b0:	4920      	ldr	r1, [pc, #128]	; (6a34 <handleSPI+0xb54>)
    69b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    69b6:	e7b4      	b.n	6922 <handleSPI+0xa42>
			  shapeTick[i] = &sineTick;
    69b8:	4a19      	ldr	r2, [pc, #100]	; (6a20 <handleSPI+0xb40>)
    69ba:	491f      	ldr	r1, [pc, #124]	; (6a38 <handleSPI+0xb58>)
    69bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    69c0:	e7af      	b.n	6922 <handleSPI+0xa42>
			  shapeTick[i] = &pulseTick;
    69c2:	4a17      	ldr	r2, [pc, #92]	; (6a20 <handleSPI+0xb40>)
    69c4:	491d      	ldr	r1, [pc, #116]	; (6a3c <handleSPI+0xb5c>)
    69c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    69ca:	e7aa      	b.n	6922 <handleSPI+0xa42>
			  shapeTick[i] = &sawTick;
    69cc:	4a14      	ldr	r2, [pc, #80]	; (6a20 <handleSPI+0xb40>)
    69ce:	491c      	ldr	r1, [pc, #112]	; (6a40 <handleSPI+0xb60>)
    69d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    69d4:	e7a5      	b.n	6922 <handleSPI+0xa42>
    69d6:	f04f 0b01 	mov.w	fp, #1
    69da:	e76a      	b.n	68b2 <handleSPI+0x9d2>
    69dc:	2001cf06 	.word	0x2001cf06
    69e0:	30000040 	.word	0x30000040
    69e4:	20014b40 	.word	0x20014b40
    69e8:	200006d4 	.word	0x200006d4
    69ec:	20014b04 	.word	0x20014b04
    69f0:	2001aa87 	.word	0x2001aa87
    69f4:	3000015b 	.word	0x3000015b
    69f8:	2001aa86 	.word	0x2001aa86
    69fc:	2001aa8c 	.word	0x2001aa8c
    6a00:	2001aa90 	.word	0x2001aa90
    6a04:	20005744 	.word	0x20005744
    6a08:	377ffff6 	.word	0x377ffff6
    6a0c:	20019958 	.word	0x20019958
    6a10:	00004f41 	.word	0x00004f41
    6a14:	20014b44 	.word	0x20014b44
    6a18:	04002001 	.word	0x04002001
    6a1c:	4ec4ec4f 	.word	0x4ec4ec4f
    6a20:	20005bd4 	.word	0x20005bd4
    6a24:	00000b01 	.word	0x00000b01
    6a28:	20016b98 	.word	0x20016b98
    6a2c:	00000961 	.word	0x00000961
    6a30:	00000921 	.word	0x00000921
    6a34:	00000aa1 	.word	0x00000aa1
    6a38:	00000a61 	.word	0x00000a61
    6a3c:	00000a01 	.word	0x00000a01
    6a40:	000009c1 	.word	0x000009c1
    6a44:	300001c0 	.word	0x300001c0
    6a48:	2001a3e0 	.word	0x2001a3e0
						audioOutBuffer[i + 1] = 0;
    6a4c:	e9c3 2200 	strd	r2, r2, [r3]
    6a50:	e9c3 2202 	strd	r2, r2, [r3, #8]
    6a54:	e9c3 2204 	strd	r2, r2, [r3, #16]
    6a58:	e9c3 2206 	strd	r2, r2, [r3, #24]
    6a5c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6a60:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    6a64:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
    6a68:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    6a6c:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
    6a70:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
    6a74:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    6a78:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    6a7c:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    6a80:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
    6a84:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
    6a88:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    6a8c:	e65d      	b.n	674a <handleSPI+0x86a>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    6a8e:	4ab0      	ldr	r2, [pc, #704]	; (6d50 <handleSPI+0xe70>)
    6a90:	40ca      	lsrs	r2, r1
    6a92:	07d2      	lsls	r2, r2, #31
    6a94:	d522      	bpl.n	6adc <handleSPI+0xbfc>
					if (params[whichParam].realVal[0]  > 0.5f)
    6a96:	ebaa 0207 	sub.w	r2, sl, r7
    6a9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6a9e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6aa2:	ed92 7a02 	vldr	s14, [r2, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    6aa6:	4aab      	ldr	r2, [pc, #684]	; (6d54 <handleSPI+0xe74>)
					if (params[whichParam].realVal[0]  > 0.5f)
    6aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    6aac:	fb82 1203 	smull	r1, r2, r2, r3
    6ab0:	17db      	asrs	r3, r3, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    6ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    6ab6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    6aba:	4aa7      	ldr	r2, [pc, #668]	; (6d58 <handleSPI+0xe78>)
					if (params[whichParam].realVal[0]  > 0.5f)
    6abc:	bfcc      	ite	gt
    6abe:	2101      	movgt	r1, #1
    6ac0:	2100      	movle	r1, #0
    6ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						enabledCount += oscsEnabled[j];
    6ac6:	e9d2 3100 	ldrd	r3, r1, [r2]
					oscAmpMult = oscAmpMultArray[enabledCount];
    6aca:	6892      	ldr	r2, [r2, #8]
						enabledCount += oscsEnabled[j];
    6acc:	440b      	add	r3, r1
					oscAmpMult = oscAmpMultArray[enabledCount];
    6ace:	4413      	add	r3, r2
    6ad0:	4aa2      	ldr	r2, [pc, #648]	; (6d5c <handleSPI+0xe7c>)
    6ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6ad6:	681a      	ldr	r2, [r3, #0]
    6ad8:	4ba1      	ldr	r3, [pc, #644]	; (6d60 <handleSPI+0xe80>)
    6ada:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    6adc:	f1a7 0887 	sub.w	r8, r7, #135	; 0x87
    6ae0:	fa1f f288 	uxth.w	r2, r8
    6ae4:	2a0f      	cmp	r2, #15
    6ae6:	d874      	bhi.n	6bd2 <handleSPI+0xcf2>
    6ae8:	f248 4321 	movw	r3, #33825	; 0x8421
    6aec:	40d3      	lsrs	r3, r2
    6aee:	43db      	mvns	r3, r3
    6af0:	f013 0301 	ands.w	r3, r3, #1
    6af4:	d16d      	bne.n	6bd2 <handleSPI+0xcf2>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    6af6:	ebaa 0a07 	sub.w	sl, sl, r7
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6afa:	4699      	mov	r9, r3
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    6afc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    6b00:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    6b04:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    6b08:	4b96      	ldr	r3, [pc, #600]	; (6d64 <handleSPI+0xe84>)
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    6b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    6b0e:	fb83 2308 	smull	r2, r3, r3, r8
    6b12:	ea4f 78e8 	mov.w	r8, r8, asr #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    6b16:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    6b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    6b1e:	ebc8 0863 	rsb	r8, r8, r3, asr #1
					setLFOShapes(LFOShape, whichLFO);
    6b22:	ee17 0a90 	vmov	r0, s15
    6b26:	4641      	mov	r1, r8
    6b28:	f001 fdde 	bl	86e8 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b2c:	488e      	ldr	r0, [pc, #568]	; (6d68 <handleSPI+0xe88>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    6b2e:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    6b32:	9503      	str	r5, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b34:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    6b38:	464d      	mov	r5, r9
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    6b3a:	f103 0a84 	add.w	sl, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    6b3e:	f103 0b85 	add.w	fp, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    6b42:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b44:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    6b48:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
    6b4c:	46a1      	mov	r9, r4
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    6b4e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    6b52:	463c      	mov	r4, r7
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b54:	ea4f 088a 	mov.w	r8, sl, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    6b58:	eb06 0283 	add.w	r2, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b5c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    6b60:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b64:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    6b68:	4617      	mov	r7, r2
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    6b6a:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    6b6e:	f8ca 3014 	str.w	r3, [sl, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    6b72:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6b76:	f8cb 3014 	str.w	r3, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    6b7a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    6b7e:	6153      	str	r3, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6b80:	f108 0308 	add.w	r3, r8, #8
    6b84:	18f3      	adds	r3, r6, r3
    6b86:	9302      	str	r3, [sp, #8]
    6b88:	f108 0324 	add.w	r3, r8, #36	; 0x24
    6b8c:	f108 0840 	add.w	r8, r8, #64	; 0x40
    6b90:	18f3      	adds	r3, r6, r3
    6b92:	44b0      	add	r8, r6
    6b94:	9301      	str	r3, [sp, #4]
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    6b96:	9b02      	ldr	r3, [sp, #8]
    6b98:	4629      	mov	r1, r5
    6b9a:	f89a 0018 	ldrb.w	r0, [sl, #24]
    6b9e:	ecb3 0a01 	vldmia	r3!, {s0}
    6ba2:	9302      	str	r3, [sp, #8]
    6ba4:	f8da 3014 	ldr.w	r3, [sl, #20]
    6ba8:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    6baa:	9b01      	ldr	r3, [sp, #4]
    6bac:	4629      	mov	r1, r5
    6bae:	f89b 0018 	ldrb.w	r0, [fp, #24]
    6bb2:	ecb3 0a01 	vldmia	r3!, {s0}
    6bb6:	9301      	str	r3, [sp, #4]
    6bb8:	f8db 3014 	ldr.w	r3, [fp, #20]
    6bbc:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    6bbe:	ecb8 0a01 	vldmia	r8!, {s0}
    6bc2:	4629      	mov	r1, r5
    6bc4:	697b      	ldr	r3, [r7, #20]
    6bc6:	7e38      	ldrb	r0, [r7, #24]
    6bc8:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6bca:	b1ad      	cbz	r5, 6bf8 <handleSPI+0xd18>
    6bcc:	4627      	mov	r7, r4
    6bce:	9d03      	ldr	r5, [sp, #12]
    6bd0:	464c      	mov	r4, r9
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    6bd2:	2f01      	cmp	r7, #1
    6bd4:	d912      	bls.n	6bfc <handleSPI+0xd1c>
				if (whichParam == FXOrder)
    6bd6:	2f9a      	cmp	r7, #154	; 0x9a
    6bd8:	d126      	bne.n	6c28 <handleSPI+0xd48>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    6bda:	4a64      	ldr	r2, [pc, #400]	; (6d6c <handleSPI+0xe8c>)
    6bdc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6be0:	4b63      	ldr	r3, [pc, #396]	; (6d70 <handleSPI+0xe90>)
    6be2:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    6be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bee:	bfcc      	ite	gt
    6bf0:	2201      	movgt	r2, #1
    6bf2:	2200      	movle	r2, #0
    6bf4:	701a      	strb	r2, [r3, #0]
    6bf6:	e407      	b.n	6408 <handleSPI+0x528>
    6bf8:	2501      	movs	r5, #1
    6bfa:	e7cc      	b.n	6b96 <handleSPI+0xcb6>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6bfc:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    6c00:	ed96 7a02 	vldr	s14, [r6, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6c04:	eddf 6a5b 	vldr	s13, [pc, #364]	; 6d74 <handleSPI+0xe94>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6c08:	ee37 7a67 	vsub.f32	s14, s14, s15
    6c0c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 6d78 <handleSPI+0xe98>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6c10:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6c14:	4b59      	ldr	r3, [pc, #356]	; (6d7c <handleSPI+0xe9c>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6c16:	4a5a      	ldr	r2, [pc, #360]	; (6d80 <handleSPI+0xea0>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6c18:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6c1c:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6c20:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    6c24:	f7ff bbf0 	b.w	6408 <handleSPI+0x528>
    6c28:	2f9b      	cmp	r7, #155	; 0x9b
    6c2a:	f47f abed 	bne.w	6408 <handleSPI+0x528>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    6c2e:	4a4f      	ldr	r2, [pc, #316]	; (6d6c <handleSPI+0xe8c>)
    6c30:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6c34:	4b53      	ldr	r3, [pc, #332]	; (6d84 <handleSPI+0xea4>)
    6c36:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    6c3a:	e7d4      	b.n	6be6 <handleSPI+0xd06>
				else if (mappingChangeType == Amount)
    6c3c:	f1b9 0f01 	cmp.w	r9, #1
    6c40:	d056      	beq.n	6cf0 <handleSPI+0xe10>
				else if (mappingChangeType == ScalarID)
    6c42:	f1b9 0f02 	cmp.w	r9, #2
    6c46:	f47f abdf 	bne.w	6408 <handleSPI+0x528>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    6c4a:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    6c4c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    6c50:	ea4f 014c 	mov.w	r1, ip, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6c54:	f1ac 0818 	sub.w	r8, ip, #24
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    6c58:	fb03 f202 	mul.w	r2, r3, r2
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6c5c:	f1ac 0614 	sub.w	r6, ip, #20
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    6c60:	f10e 0304 	add.w	r3, lr, #4
						if (scalar == 0xff)
    6c64:	d062      	beq.n	6d2c <handleSPI+0xe4c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    6c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6c6a:	4847      	ldr	r0, [pc, #284]	; (6d88 <handleSPI+0xea8>)
    6c6c:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
    6c70:	3101      	adds	r1, #1
    6c72:	443b      	add	r3, r7
    6c74:	eb00 09cc 	add.w	r9, r0, ip, lsl #3
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6c78:	f1b8 0f03 	cmp.w	r8, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    6c7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c80:	f8c3 9004 	str.w	r9, [r3, #4]
    6c84:	eb07 0302 	add.w	r3, r7, r2
    6c88:	6298      	str	r0, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6c8a:	d95a      	bls.n	6d42 <handleSPI+0xe62>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6c8c:	2e03      	cmp	r6, #3
    6c8e:	f63f abbb 	bhi.w	6408 <handleSPI+0x528>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    6c92:	4b3e      	ldr	r3, [pc, #248]	; (6d8c <handleSPI+0xeac>)
    6c94:	2201      	movs	r2, #1
    6c96:	449c      	add	ip, r3
    6c98:	f80c 2c14 	strb.w	r2, [ip, #-20]
    6c9c:	f7ff bbb4 	b.w	6408 <handleSPI+0x528>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6ca0:	f1ac 0318 	sub.w	r3, ip, #24
    6ca4:	2b03      	cmp	r3, #3
    6ca6:	d836      	bhi.n	6d16 <handleSPI+0xe36>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    6ca8:	4b39      	ldr	r3, [pc, #228]	; (6d90 <handleSPI+0xeb0>)
    6caa:	449c      	add	ip, r3
    6cac:	f80c 0c18 	strb.w	r0, [ip, #-24]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6cb0:	f7ff b9de 	b.w	6070 <handleSPI+0x190>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    6cb4:	f886 9048 	strb.w	r9, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6cb8:	464e      	mov	r6, r9
							mappings[whichMapping].destNumber = 255;
    6cba:	f807 c003 	strb.w	ip, [r7, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    6cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6cc2:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    6cc6:	691b      	ldr	r3, [r3, #16]
    6cc8:	ed97 0a00 	vldr	s0, [r7]
    6ccc:	4798      	blx	r3
    6cce:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    6cd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6cd6:	4631      	mov	r1, r6
    6cd8:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    6cdc:	695a      	ldr	r2, [r3, #20]
    6cde:	7e18      	ldrb	r0, [r3, #24]
    6ce0:	ed97 0a02 	vldr	s0, [r7, #8]
    6ce4:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6ce6:	2e00      	cmp	r6, #0
    6ce8:	f47f ab8e 	bne.w	6408 <handleSPI+0x528>
    6cec:	2601      	movs	r6, #1
    6cee:	e7e6      	b.n	6cbe <handleSPI+0xdde>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    6cf0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    6cf4:	ee07 ca90 	vmov	s15, ip
    6cf8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 6d94 <handleSPI+0xeb4>
    6cfc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    6d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6d04:	4472      	add	r2, lr
    6d06:	ee67 7a87 	vmul.f32	s15, s15, s14
    6d0a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    6d0e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    6d12:	f7ff bb79 	b.w	6408 <handleSPI+0x528>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6d16:	f1ac 0314 	sub.w	r3, ip, #20
    6d1a:	2b03      	cmp	r3, #3
    6d1c:	f63f a9a8 	bhi.w	6070 <handleSPI+0x190>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    6d20:	4b1a      	ldr	r3, [pc, #104]	; (6d8c <handleSPI+0xeac>)
    6d22:	449c      	add	ip, r3
    6d24:	f80c 0c14 	strb.w	r0, [ip, #-20]
    6d28:	f7ff b9a2 	b.w	6070 <handleSPI+0x190>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    6d2c:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
    6d30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6d34:	4439      	add	r1, r7
    6d36:	18bb      	adds	r3, r7, r2
    6d38:	4a17      	ldr	r2, [pc, #92]	; (6d98 <handleSPI+0xeb8>)
    6d3a:	605a      	str	r2, [r3, #4]
    6d3c:	628a      	str	r2, [r1, #40]	; 0x28
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6d3e:	f7ff bb63 	b.w	6408 <handleSPI+0x528>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    6d42:	4b13      	ldr	r3, [pc, #76]	; (6d90 <handleSPI+0xeb0>)
    6d44:	2201      	movs	r2, #1
    6d46:	449c      	add	ip, r3
    6d48:	f80c 2c18 	strb.w	r2, [ip, #-24]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6d4c:	f7ff bb5c 	b.w	6408 <handleSPI+0x528>
    6d50:	04002001 	.word	0x04002001
    6d54:	4ec4ec4f 	.word	0x4ec4ec4f
    6d58:	2001994c 	.word	0x2001994c
    6d5c:	20000014 	.word	0x20000014
    6d60:	20000010 	.word	0x20000010
    6d64:	66666667 	.word	0x66666667
    6d68:	20018ccc 	.word	0x20018ccc
    6d6c:	2001a958 	.word	0x2001a958
    6d70:	20016cc6 	.word	0x20016cc6
    6d74:	42fe0000 	.word	0x42fe0000
    6d78:	3c010204 	.word	0x3c010204
    6d7c:	2001993c 	.word	0x2001993c
    6d80:	20019940 	.word	0x20019940
    6d84:	2001aa68 	.word	0x2001aa68
    6d88:	200146b0 	.word	0x200146b0
    6d8c:	20005070 	.word	0x20005070
    6d90:	20005310 	.word	0x20005310
    6d94:	37fffffc 	.word	0x37fffffc
    6d98:	200006dc 	.word	0x200006dc
    6d9c:	f3af 8000 	nop.w

00006da0 <HAL_I2C_SlaveRxCpltCallback>:
{
    6da0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    6da2:	2200      	movs	r2, #0
    6da4:	2140      	movs	r1, #64	; 0x40
    6da6:	4806      	ldr	r0, [pc, #24]	; (6dc0 <HAL_I2C_SlaveRxCpltCallback+0x20>)
    6da8:	f001 fd26 	bl	87f8 <__HAL_GPIO_WritePin_veneer>
	presetWaitingToParse = 4096;
    6dac:	4b05      	ldr	r3, [pc, #20]	; (6dc4 <HAL_I2C_SlaveRxCpltCallback+0x24>)
    6dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    6db2:	4905      	ldr	r1, [pc, #20]	; (6dc8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
    6db4:	4805      	ldr	r0, [pc, #20]	; (6dcc <HAL_I2C_SlaveRxCpltCallback+0x2c>)
	presetWaitingToParse = 4096;
    6db6:	601a      	str	r2, [r3, #0]
}
    6db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    6dbc:	f001 bd10 	b.w	87e0 <__HAL_I2C_Slave_Receive_IT_veneer>
    6dc0:	58020000 	.word	0x58020000
    6dc4:	2001aa8c 	.word	0x2001aa8c
    6dc8:	300001c0 	.word	0x300001c0
    6dcc:	20014a4c 	.word	0x20014a4c
    6dd0:	f3af 8000 	nop.w
    6dd4:	f3af 8000 	nop.w
    6dd8:	f3af 8000 	nop.w
    6ddc:	f3af 8000 	nop.w

00006de0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    6de0:	4b01      	ldr	r3, [pc, #4]	; (6de8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    6de2:	2200      	movs	r2, #0
    6de4:	701a      	strb	r2, [r3, #0]
}
    6de6:	4770      	bx	lr
    6de8:	20016cc7 	.word	0x20016cc7
    6dec:	f3af 8000 	nop.w
    6df0:	f3af 8000 	nop.w
    6df4:	f3af 8000 	nop.w
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    6e00:	2100      	movs	r1, #0
	I2CErrors++;
    6e02:	4a05      	ldr	r2, [pc, #20]	; (6e18 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    6e04:	4b05      	ldr	r3, [pc, #20]	; (6e1c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    6e06:	4806      	ldr	r0, [pc, #24]	; (6e20 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    6e08:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    6e0a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    6e0c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    6e0e:	3301      	adds	r3, #1
    6e10:	b2db      	uxtb	r3, r3
    6e12:	7013      	strb	r3, [r2, #0]
}
    6e14:	4770      	bx	lr
    6e16:	bf00      	nop
    6e18:	20014af4 	.word	0x20014af4
    6e1c:	20016cc7 	.word	0x20016cc7
    6e20:	2001ae94 	.word	0x2001ae94
	...

00006e40 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
    6e40:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
    6e42:	edd3 6a04 	vldr	s13, [r3, #16]
    6e46:	ed93 0a03 	vldr	s0, [r3, #12]
    6e4a:	ed93 7a02 	vldr	s14, [r3, #8]
    6e4e:	ee20 0a26 	vmul.f32	s0, s0, s13
    6e52:	edd3 7a05 	vldr	s15, [r3, #20]
    6e56:	eea7 0a27 	vfma.f32	s0, s14, s15
    6e5a:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
    6e5e:	4770      	bx	lr

00006e60 <tExpSmooth_setDest>:
    _tExpSmooth* smooth = *expsmooth;
    6e60:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
    6e62:	ed83 0a05 	vstr	s0, [r3, #20]
}
    6e66:	4770      	bx	lr
	...

00006e80 <place_step_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    6e80:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 6eec <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    6e84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    6e88:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    6e8c:	b538      	push	{r3, r4, r5, lr}
    6e8e:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    6e92:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    6e96:	460d      	mov	r5, r1
    6e98:	4604      	mov	r4, r0
    6e9a:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    6e9e:	ee38 0a67 	vsub.f32	s0, s16, s15
    6ea2:	f001 fc39 	bl	8718 <__lrintf_veneer>
	r -= (Lfloat)i;
    6ea6:	ee07 0a90 	vmov	s15, r0
    6eaa:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6eae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    6eb2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    6eb6:	4b0e      	ldr	r3, [pc, #56]	; (6ef0 <place_step_dd+0x70>)
    6eb8:	f502 7190 	add.w	r1, r2, #288	; 0x120
    6ebc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6ec0:	ee38 6a46 	vsub.f32	s12, s16, s12

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    6ec4:	edd3 6a01 	vldr	s13, [r3, #4]
    6ec8:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    6ecc:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    6ed0:	edd2 7a00 	vldr	s15, [r2]
    6ed4:	eea6 7a86 	vfma.f32	s14, s13, s12
    6ed8:	eee7 7a28 	vfma.f32	s15, s14, s17
    6edc:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    6ee0:	4291      	cmp	r1, r2
    6ee2:	d1ef      	bne.n	6ec4 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    6ee4:	ecbd 8b02 	vpop	{d8}
    6ee8:	bd38      	pop	{r3, r4, r5, pc}
    6eea:	bf00      	nop
    6eec:	42800000 	.word	0x42800000
    6ef0:	24022b44 	.word	0x24022b44
    6ef4:	f3af 8000 	nop.w
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <place_slope_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    6f00:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 6f78 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    6f04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    6f08:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    6f0c:	b538      	push	{r3, r4, r5, lr}
    6f0e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    6f12:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    6f16:	460d      	mov	r5, r1
    6f18:	4604      	mov	r4, r0
    6f1a:	eeb0 8a60 	vmov.f32	s16, s1
    6f1e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    6f22:	ee38 0ae7 	vsub.f32	s0, s17, s15
    6f26:	f001 fbf7 	bl	8718 <__lrintf_veneer>
	r -= (Lfloat)i;
    6f2a:	ee07 0a90 	vmov	s15, r0
    6f2e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6f32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    6f36:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    6f3a:	4b10      	ldr	r3, [pc, #64]	; (6f7c <place_slope_dd+0x7c>)

	slope_delta *= w;
    6f3c:	ee28 1a09 	vmul.f32	s2, s16, s18
    6f40:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    6f44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (Lfloat)i;
    6f48:	ee38 6ac6 	vsub.f32	s12, s17, s12

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    6f4c:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    6f50:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    6f54:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    6f58:	ed92 7a00 	vldr	s14, [r2]
    6f5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    6f60:	eee6 7a86 	vfma.f32	s15, s13, s12
    6f64:	eea7 7a81 	vfma.f32	s14, s15, s2
    6f68:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    6f6c:	4291      	cmp	r1, r2
    6f6e:	d1ed      	bne.n	6f4c <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    6f70:	ecbd 8b04 	vpop	{d8-d9}
    6f74:	bd38      	pop	{r3, r4, r5, pc}
    6f76:	bf00      	nop
    6f78:	42800000 	.word	0x42800000
    6f7c:	2401e440 	.word	0x2401e440

00006f80 <LEAF_clip>:
    if (val < min)
    6f80:	eef4 0ac0 	vcmpe.f32	s1, s0
    6f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f88:	d401      	bmi.n	6f8e <LEAF_clip+0xe>
    else if (val > max)
    6f8a:	fe80 0ac1 	vminnm.f32	s0, s1, s2
}
    6f8e:	4770      	bx	lr
	...

00006fa0 <tPBSineTriangle_tick>:
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    6fa0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    6fa4:	b510      	push	{r4, lr}
    6fa6:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
    6faa:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    6fac:	eeb0 aa00 	vmov.f32	s20, #0	; 0x40000000  2.0
    6fb0:	eeb0 7a67 	vmov.f32	s14, s15
{
    6fb4:	b082      	sub	sp, #8
    Lfloat t = c->phase;
    6fb6:	edd4 aa01 	vldr	s21, [r4, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
    6fba:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    6fbe:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    6fc2:	eeaa 7a8a 	vfma.f32	s14, s21, s20
    6fc6:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
    6fca:	eeb0 0a6a 	vmov.f32	s0, s21
    6fce:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    6fd2:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
    6fd6:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    6fda:	eee7 7a0a 	vfma.f32	s15, s14, s20
    6fde:	eeb0 9a67 	vmov.f32	s18, s15
    v += LEAF_poly_blamp(t,  dt);
    6fe2:	f001 fbbd 	bl	8760 <__LEAF_poly_blamp_veneer>
    v += LEAF_poly_blamp(1.0f - t,  dt);
    6fe6:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
    6fea:	eeb0 8a40 	vmov.f32	s16, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    6fee:	ee39 0aea 	vsub.f32	s0, s19, s21
    6ff2:	f001 fbb5 	bl	8760 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    6ff6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(t,  dt);
    6ffa:	ee39 8a08 	vadd.f32	s16, s18, s16
    v -= LEAF_poly_blamp(t, dt);
    6ffe:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
    7002:	ee7a aa87 	vadd.f32	s21, s21, s14
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7006:	ee38 8a00 	vadd.f32	s16, s16, s0
    t -= (int)(t);
    700a:	eefd 8aea 	vcvt.s32.f32	s17, s21
    700e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    v -= LEAF_poly_blamp(t, dt);
    7012:	ee3a 0ae8 	vsub.f32	s0, s21, s17
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    7016:	ee79 aaea 	vsub.f32	s21, s19, s21
    v -= LEAF_poly_blamp(t, dt);
    701a:	f001 fba1 	bl	8760 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    701e:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    7022:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    7026:	ee3a 0aa8 	vadd.f32	s0, s21, s17
    702a:	f001 fb99 	bl	8760 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    702e:	ed94 7a02 	vldr	s14, [r4, #8]
    7032:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    7036:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
    703a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    703e:	ee37 7a26 	vadd.f32	s14, s14, s13
    7042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7046:	ee77 7a67 	vsub.f32	s15, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    704a:	eef4 7ae9 	vcmpe.f32	s15, s19
    c->phase += c->inc - (int)c->inc;
    704e:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    7052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7056:	db0a      	blt.n	706e <tPBSineTriangle_tick+0xce>
    7058:	eeb0 7a67 	vmov.f32	s14, s15
    705c:	ee77 7ae9 	vsub.f32	s15, s15, s19
    7060:	eeb4 7aca 	vcmpe.f32	s14, s20
    7064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7068:	daf6      	bge.n	7058 <tPBSineTriangle_tick+0xb8>
    706a:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    706e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7076:	d50e      	bpl.n	7096 <tPBSineTriangle_tick+0xf6>
    7078:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    707c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    7080:	eeb0 7a67 	vmov.f32	s14, s15
    7084:	ee77 7a86 	vadd.f32	s15, s15, s12
    7088:	eeb4 7ae6 	vcmpe.f32	s14, s13
    708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7090:	d4f6      	bmi.n	7080 <tPBSineTriangle_tick+0xe0>
    7092:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
    7096:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
    7098:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
    709c:	4a14      	ldr	r2, [pc, #80]	; (70f0 <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    709e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 70f4 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
    70a2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
    70a6:	440b      	add	r3, r1
    70a8:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
    70aa:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    70ac:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
    70b0:	6940      	ldr	r0, [r0, #20]
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    70b2:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    70b6:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
    70ba:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
    70bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
    70c0:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    70c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
    70c6:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
    70ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    70ce:	ee67 7a87 	vmul.f32	s15, s15, s14
    70d2:	ed92 7a00 	vldr	s14, [r2]
    70d6:	ee37 7a40 	vsub.f32	s14, s14, s0
    70da:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    70de:	ee20 0a06 	vmul.f32	s0, s0, s12
}
    70e2:	eea6 0a88 	vfma.f32	s0, s13, s16
    70e6:	b002      	add	sp, #8
    70e8:	ecbd 8b06 	vpop	{d8-d10}
    70ec:	bd10      	pop	{r4, pc}
    70ee:	bf00      	nop
    70f0:	2401c440 	.word	0x2401c440
    70f4:	35000004 	.word	0x35000004
    70f8:	f3af 8000 	nop.w
    70fc:	f3af 8000 	nop.w

00007100 <tPBSineTriangle_setFreq>:
    _tPBSineTriangle* c = *osc;
    7100:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7102:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
    7106:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
    7108:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
    710c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    7110:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    7114:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
    7118:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    711c:	ee20 0a27 	vmul.f32	s0, s0, s15
    7120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    7124:	ed82 0a02 	vstr	s0, [r2, #8]
}
    7128:	4770      	bx	lr
    712a:	bf00      	nop
    712c:	f3af 8000 	nop.w
    7130:	f3af 8000 	nop.w
    7134:	f3af 8000 	nop.w
    7138:	f3af 8000 	nop.w
    713c:	f3af 8000 	nop.w

00007140 <tPBTriangle_tick>:
{
    7140:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
    7142:	6804      	ldr	r4, [r0, #0]
{
    7144:	ed2d 8b08 	vpush	{d8-d11}
    Lfloat t = c->phase;
    7148:	ed94 8a01 	vldr	s16, [r4, #4]
{
    714c:	b082      	sub	sp, #8
    if (t < c->skew)
    714e:	edd4 7a04 	vldr	s15, [r4, #16]
    7152:	edd4 0a02 	vldr	s1, [r4, #8]
    7156:	eef4 7ac8 	vcmpe.f32	s15, s16
    715a:	eef0 0ae0 	vabs.f32	s1, s1
    715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7162:	eef1 0a60 	vneg.f32	s1, s1
    7166:	dd71      	ble.n	724c <tPBTriangle_tick+0x10c>
        v = 2.0f * t / c->skew - 1.0f;
    7168:	ee38 7a08 	vadd.f32	s14, s16, s16
    716c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    7170:	eec7 6a27 	vdiv.f32	s13, s14, s15
    7174:	ee36 aaca 	vsub.f32	s20, s13, s20
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7178:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
    717c:	edcd 0a01 	vstr	s1, [sp, #4]
    7180:	eeb0 0a48 	vmov.f32	s0, s16
    7184:	f001 faec 	bl	8760 <__LEAF_poly_blamp_veneer>
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7188:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
    718c:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7190:	ee38 0ac8 	vsub.f32	s0, s17, s16
    7194:	f001 fae4 	bl	8760 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    7198:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
    719c:	eef0 aa40 	vmov.f32	s21, s0
    v -= LEAF_poly_blamp(t, dt);
    71a0:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
    71a4:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
    71a8:	eefd 9ac8 	vcvt.s32.f32	s19, s16
    71ac:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
    71b0:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    71b4:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
    71b8:	f001 fad2 	bl	8760 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    71bc:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    71c0:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    71c4:	ee38 0a29 	vadd.f32	s0, s16, s19
    71c8:	f001 faca 	bl	8760 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    71cc:	ed94 7a02 	vldr	s14, [r4, #8]
    71d0:	ed94 6a01 	vldr	s12, [r4, #4]
    71d4:	ee79 6a00 	vadd.f32	s13, s18, s0
    71d8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    71dc:	ee37 7a06 	vadd.f32	s14, s14, s12
    71e0:	ee76 6aca 	vsub.f32	s13, s13, s20
    71e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    71e8:	ee77 7a67 	vsub.f32	s15, s14, s15
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    71ec:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
    71f0:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    71f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71f8:	db0c      	blt.n	7214 <tPBTriangle_tick+0xd4>
    71fa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    71fe:	eeb0 7a67 	vmov.f32	s14, s15
    7202:	ee77 7ae8 	vsub.f32	s15, s15, s17
    7206:	eeb4 7ac6 	vcmpe.f32	s14, s12
    720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    720e:	daf6      	bge.n	71fe <tPBTriangle_tick+0xbe>
    7210:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
    7214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    721c:	d50e      	bpl.n	723c <tPBTriangle_tick+0xfc>
    721e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7222:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    7226:	eeb0 7a67 	vmov.f32	s14, s15
    722a:	ee77 7aa5 	vadd.f32	s15, s15, s11
    722e:	eeb4 7ac6 	vcmpe.f32	s14, s12
    7232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7236:	d4f6      	bmi.n	7226 <tPBTriangle_tick+0xe6>
    7238:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
    723c:	ee36 9acb 	vsub.f32	s18, s13, s22
    7240:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
    7244:	b002      	add	sp, #8
    7246:	ecbd 8b08 	vpop	{d8-d11}
    724a:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    724c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
    7250:	ed94 7a05 	vldr	s14, [r4, #20]
    7254:	ee78 7a67 	vsub.f32	s15, s16, s15
    7258:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    725c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7260:	eec7 6a87 	vdiv.f32	s13, s15, s14
    7264:	ee36 aa8a 	vadd.f32	s20, s13, s20
    7268:	e786      	b.n	7178 <tPBTriangle_tick+0x38>
    726a:	bf00      	nop
    726c:	f3af 8000 	nop.w
    7270:	f3af 8000 	nop.w
    7274:	f3af 8000 	nop.w
    7278:	f3af 8000 	nop.w
    727c:	f3af 8000 	nop.w

00007280 <tPBTriangle_setFreq>:
    _tPBTriangle* c = *osc;
    7280:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7282:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
    7286:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    728a:	ee27 0a80 	vmul.f32	s0, s15, s0
    728e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7292:	4770      	bx	lr
    7294:	f3af 8000 	nop.w
    7298:	f3af 8000 	nop.w
    729c:	f3af 8000 	nop.w

000072a0 <tPBPulse_tick>:
{
    72a0:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
    72a2:	6804      	ldr	r4, [r0, #0]
{
    72a4:	ed2d 8b04 	vpush	{d8-d9}
    if (c->phase < c->width) out = 1.0f;
    72a8:	edd4 7a04 	vldr	s15, [r4, #16]
    else out = -1.0f;
    72ac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    if (c->phase < c->width) out = 1.0f;
    72b0:	ed94 0a01 	vldr	s0, [r4, #4]
    else out = -1.0f;
    72b4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    out += LEAF_poly_blep(c->phase, c->inc);
    72b8:	edd4 0a02 	vldr	s1, [r4, #8]
    else out = -1.0f;
    72bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
    72c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72c4:	bf54      	ite	pl
    72c6:	eef0 8a48 	vmovpl.f32	s17, s16
    72ca:	eef0 8a49 	vmovmi.f32	s17, s18
    out += LEAF_poly_blep(c->phase, c->inc);
    72ce:	f001 fb5f 	bl	8990 <__LEAF_poly_blep_veneer>
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
    72d2:	edd4 7a01 	vldr	s15, [r4, #4]
    72d6:	eef0 0a49 	vmov.f32	s1, s18
    72da:	ed94 7a04 	vldr	s14, [r4, #16]
    72de:	ee77 7a89 	vadd.f32	s15, s15, s18
    out += LEAF_poly_blep(c->phase, c->inc);
    72e2:	ee78 8a80 	vadd.f32	s17, s17, s0
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
    72e6:	ee37 0ac7 	vsub.f32	s0, s15, s14
    72ea:	f001 fa59 	bl	87a0 <__fmodf_veneer>
    72ee:	edd4 0a02 	vldr	s1, [r4, #8]
    72f2:	f001 fb4d 	bl	8990 <__LEAF_poly_blep_veneer>
    c->phase += c->inc - (int)c->inc;
    72f6:	ed94 7a02 	vldr	s14, [r4, #8]
    72fa:	edd4 6a01 	vldr	s13, [r4, #4]
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
    72fe:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc - (int)c->inc;
    7302:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    7306:	ee37 7a26 	vadd.f32	s14, s14, s13
    730a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    730e:	ee77 7a67 	vsub.f32	s15, s14, s15
    if (c->phase >= 1.0f) c->phase -= 1.0f;
    7312:	eef4 7ac9 	vcmpe.f32	s15, s18
    7316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    731a:	bfa8      	it	ge
    731c:	ee77 7ac9 	vsubge.f32	s15, s15, s18
    if (c->phase < 0.0f) c->phase += 1.0f;
    7320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    if (c->phase >= 1.0f) c->phase -= 1.0f;
    7324:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
    7328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    732c:	d505      	bpl.n	733a <tPBPulse_tick+0x9a>
    732e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7332:	ee77 7a87 	vadd.f32	s15, s15, s14
    7336:	edc4 7a01 	vstr	s15, [r4, #4]
}
    733a:	ecbd 8b04 	vpop	{d8-d9}
    733e:	bd10      	pop	{r4, pc}

00007340 <tPBPulse_setFreq>:
    _tPBPulse* c = *osc;
    7340:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7342:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
    7346:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    734a:	ee27 0a80 	vmul.f32	s0, s15, s0
    734e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7352:	4770      	bx	lr
    7354:	f3af 8000 	nop.w
    7358:	f3af 8000 	nop.w
    735c:	f3af 8000 	nop.w

00007360 <tPBSaw_tick>:
{
    7360:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
    7362:	6804      	ldr	r4, [r0, #0]
{
    7364:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * 2.0f) - 1.0f;
    7368:	ed94 0a01 	vldr	s0, [r4, #4]
    out -= LEAF_poly_blep(c->phase, c->inc);
    736c:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat out = (c->phase * 2.0f) - 1.0f;
    7370:	ee30 8a00 	vadd.f32	s16, s0, s0
    out -= LEAF_poly_blep(c->phase, c->inc);
    7374:	f001 fb0c 	bl	8990 <__LEAF_poly_blep_veneer>
    c->phase += c->inc - (int)c->inc;
    7378:	ed94 7a02 	vldr	s14, [r4, #8]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    737c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc - (int)c->inc;
    7380:	ed94 6a01 	vldr	s12, [r4, #4]
    7384:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    7388:	ee37 7a06 	vadd.f32	s14, s14, s12
    738c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7390:	ee77 7a67 	vsub.f32	s15, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    7394:	eef4 7ae6 	vcmpe.f32	s15, s13
    c->phase += c->inc - (int)c->inc;
    7398:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73a0:	db0c      	blt.n	73bc <tPBSaw_tick+0x5c>
    73a2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    73a6:	eeb0 7a67 	vmov.f32	s14, s15
    73aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
    73ae:	eeb4 7ac6 	vcmpe.f32	s14, s12
    73b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73b6:	daf6      	bge.n	73a6 <tPBSaw_tick+0x46>
    73b8:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    73bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    73c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73c4:	d50e      	bpl.n	73e4 <tPBSaw_tick+0x84>
    73c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    73ca:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    73ce:	eeb0 7a67 	vmov.f32	s14, s15
    73d2:	ee77 7a86 	vadd.f32	s15, s15, s12
    73d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
    73da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73de:	d4f6      	bmi.n	73ce <tPBSaw_tick+0x6e>
    73e0:	edc4 7a01 	vstr	s15, [r4, #4]
    return (-1.0f * out);
    73e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    73e8:	ee37 8ac8 	vsub.f32	s16, s15, s16
}
    73ec:	ee38 0a00 	vadd.f32	s0, s16, s0
    73f0:	ecbd 8b02 	vpop	{d8}
    73f4:	bd10      	pop	{r4, pc}
    73f6:	bf00      	nop
    73f8:	f3af 8000 	nop.w
    73fc:	f3af 8000 	nop.w

00007400 <tPBSaw_setFreq>:
    _tPBSaw* c = *osc;
    7400:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7402:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
    7406:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    740a:	ee27 0a80 	vmul.f32	s0, s15, s0
    740e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7412:	4770      	bx	lr
    7414:	f3af 8000 	nop.w
    7418:	f3af 8000 	nop.w
    741c:	f3af 8000 	nop.w

00007420 <tPBSawSquare_tick>:
{
    7420:	b510      	push	{r4, lr}
    _tPBSawSquare* c = *osc;
    7422:	6804      	ldr	r4, [r0, #0]
{
    7424:	ed2d 8b02 	vpush	{d8}
    float midBlep = LEAF_poly_blep(fmod(c->phase + 0.5f, 1.0f), c->inc);
    7428:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    float resetBlep = LEAF_poly_blep(c->phase, c->inc);
    742c:	edd4 0a02 	vldr	s1, [r4, #8]
    7430:	ed94 0a01 	vldr	s0, [r4, #4]
    7434:	f001 faac 	bl	8990 <__LEAF_poly_blep_veneer>
    float midBlep = LEAF_poly_blep(fmod(c->phase + 0.5f, 1.0f), c->inc);
    7438:	edd4 7a01 	vldr	s15, [r4, #4]
    float resetBlep = LEAF_poly_blep(c->phase, c->inc);
    743c:	eeb0 8a40 	vmov.f32	s16, s0
    float midBlep = LEAF_poly_blep(fmod(c->phase + 0.5f, 1.0f), c->inc);
    7440:	ee37 0aa8 	vadd.f32	s0, s15, s17
    7444:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
    7448:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    744c:	f001 fa68 	bl	8920 <__fmod_veneer>
    7450:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    7454:	edd4 0a02 	vldr	s1, [r4, #8]
    7458:	f001 fa9a 	bl	8990 <__LEAF_poly_blep_veneer>
    c->phase += c->inc - (int)c->inc;
    745c:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat sawOut = (c->phase * 2.0f) - 1.0f;
    7460:	ed94 7a01 	vldr	s14, [r4, #4]
    else squareOut = -1.0f;
    7464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc - (int)c->inc;
    7468:	eefd 4ae7 	vcvt.s32.f32	s9, s15
    746c:	ee77 7a27 	vadd.f32	s15, s14, s15
    else squareOut = -1.0f;
    7470:	eeb4 7ae8 	vcmpe.f32	s14, s17
    c->phase += c->inc - (int)c->inc;
    7474:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    else squareOut = -1.0f;
    7478:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    747c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->phase += c->inc - (int)c->inc;
    7480:	ee77 7ae4 	vsub.f32	s15, s15, s9
    squareOut -= midBlep;
    7484:	ee78 5a40 	vsub.f32	s11, s16, s0
    else squareOut = -1.0f;
    7488:	bf48      	it	mi
    748a:	eeb0 6a66 	vmovmi.f32	s12, s13
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    748e:	eef4 7ae6 	vcmpe.f32	s15, s13
    c->phase += c->inc - (int)c->inc;
    7492:	edc4 7a01 	vstr	s15, [r4, #4]
    Lfloat sawOut = (c->phase * 2.0f) - 1.0f;
    7496:	ee37 5a07 	vadd.f32	s10, s14, s14
    squareOut -= midBlep;
    749a:	ee75 5a86 	vadd.f32	s11, s11, s12
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    749e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74a2:	db0c      	blt.n	74be <tPBSawSquare_tick+0x9e>
    74a4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    74a8:	eeb0 7a67 	vmov.f32	s14, s15
    74ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
    74b0:	eeb4 7ac6 	vcmpe.f32	s14, s12
    74b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74b8:	daf6      	bge.n	74a8 <tPBSawSquare_tick+0x88>
    74ba:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    74be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    74c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74c6:	d50e      	bpl.n	74e6 <tPBSawSquare_tick+0xc6>
    74c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    74cc:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    74d0:	eeb0 7a67 	vmov.f32	s14, s15
    74d4:	ee77 7a86 	vadd.f32	s15, s15, s12
    74d8:	eeb4 7ae6 	vcmpe.f32	s14, s13
    74dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74e0:	d4f6      	bmi.n	74d0 <tPBSawSquare_tick+0xb0>
    74e2:	edc4 7a01 	vstr	s15, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    74e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    74ea:	edd4 7a07 	vldr	s15, [r4, #28]
    74ee:	ed94 6a08 	vldr	s12, [r4, #32]
    74f2:	ee25 0aa7 	vmul.f32	s0, s11, s15
    74f6:	ee36 5ac5 	vsub.f32	s10, s13, s10
    74fa:	ee35 7a08 	vadd.f32	s14, s10, s16
}
    74fe:	ecbd 8b02 	vpop	{d8}
    7502:	eea7 0a06 	vfma.f32	s0, s14, s12
    7506:	bd10      	pop	{r4, pc}
    7508:	f3af 8000 	nop.w
    750c:	f3af 8000 	nop.w
    7510:	f3af 8000 	nop.w
    7514:	f3af 8000 	nop.w
    7518:	f3af 8000 	nop.w
    751c:	f3af 8000 	nop.w

00007520 <tPBSawSquare_setFreq>:
    _tPBSawSquare* c = *osc;
    7520:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7522:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
    7526:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    752a:	ee27 0a80 	vmul.f32	s0, s15, s0
    752e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7532:	4770      	bx	lr
    7534:	f3af 8000 	nop.w
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <tMBPulse_place_step_dd_noBuffer>:
{
    7540:	b510      	push	{r4, lr}
    7542:	ed2d 8b04 	vpush	{d8-d9}
    7546:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 75b0 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    754a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    754e:	eef0 8a40 	vmov.f32	s17, s0
	_tMBPulse* c = *osc;
    7552:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    7554:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    7558:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    755c:	eee0 7a08 	vfma.f32	s15, s0, s16
    7560:	eeb0 0a67 	vmov.f32	s0, s15
    7564:	f001 f8d8 	bl	8718 <__lrintf_veneer>
	r -= (Lfloat)i;
    7568:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    756c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7570:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    7574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7578:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    757a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    757e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7582:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7586:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    758a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    758e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7592:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7596:	ed82 9a3b 	vstr	s18, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    759a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    759e:	3301      	adds	r3, #1
    75a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    75a4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    75a8:	ecbd 8b04 	vpop	{d8-d9}
    75ac:	bd10      	pop	{r4, pc}
    75ae:	bf00      	nop
    75b0:	42800000 	.word	0x42800000
    75b4:	f3af 8000 	nop.w
    75b8:	f3af 8000 	nop.w
    75bc:	f3af 8000 	nop.w

000075c0 <tMBTriangle_place_dd_noBuffer>:
{
    75c0:	b510      	push	{r4, lr}
    75c2:	ed2d 8b06 	vpush	{d8-d10}
    75c6:	eddf 8a1f 	vldr	s17, [pc, #124]	; 7644 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    75ca:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
    75ce:	6804      	ldr	r4, [r0, #0]
{
    75d0:	eeb0 9a40 	vmov.f32	s18, s0
    75d4:	ee60 8aa8 	vmul.f32	s17, s1, s17
    75d8:	eeb0 8a41 	vmov.f32	s16, s2
    75dc:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    75e0:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    75e4:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    75e8:	eeb0 0a67 	vmov.f32	s0, s15
    75ec:	f001 f894 	bl	8718 <__lrintf_veneer>
	r -= (Lfloat)i;
    75f0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    75f4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    75f8:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (Lfloat)i;
    75fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7600:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7604:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    7606:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    760a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    760e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    7612:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7616:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    761a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    761e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7622:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    7626:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    762a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    762e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7632:	3301      	adds	r3, #1
    7634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7638:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    763c:	ecbd 8b06 	vpop	{d8-d10}
    7640:	bd10      	pop	{r4, pc}
    7642:	bf00      	nop
    7644:	42800000 	.word	0x42800000
    7648:	f3af 8000 	nop.w
    764c:	f3af 8000 	nop.w
    7650:	f3af 8000 	nop.w
    7654:	f3af 8000 	nop.w
    7658:	f3af 8000 	nop.w
    765c:	f3af 8000 	nop.w

00007660 <tMBSineTri_place_dd_noBuffer>:
{
    7660:	b510      	push	{r4, lr}
    7662:	ed2d 8b06 	vpush	{d8-d10}
    7666:	eddf 8a1f 	vldr	s17, [pc, #124]	; 76e4 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    766a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
    766e:	6804      	ldr	r4, [r0, #0]
{
    7670:	eeb0 9a40 	vmov.f32	s18, s0
    7674:	ee60 8aa8 	vmul.f32	s17, s1, s17
    7678:	eeb0 8a41 	vmov.f32	s16, s2
    767c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    7680:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    7684:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    7688:	eeb0 0a67 	vmov.f32	s0, s15
    768c:	f001 f844 	bl	8718 <__lrintf_veneer>
	r -= (Lfloat)i;
    7690:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7694:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    7698:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (Lfloat)i;
    769c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    76a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    76a4:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    76a6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    76aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    76ae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    76b2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    76b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    76ba:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    76be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    76c2:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    76c6:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    76ca:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    76ce:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    76d2:	3301      	adds	r3, #1
    76d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    76d8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    76dc:	ecbd 8b06 	vpop	{d8-d10}
    76e0:	bd10      	pop	{r4, pc}
    76e2:	bf00      	nop
    76e4:	42800000 	.word	0x42800000
    76e8:	f3af 8000 	nop.w
    76ec:	f3af 8000 	nop.w
    76f0:	f3af 8000 	nop.w
    76f4:	f3af 8000 	nop.w
    76f8:	f3af 8000 	nop.w
    76fc:	f3af 8000 	nop.w

00007700 <tMBSaw_place_step_dd_noBuffer>:
{
    7700:	b510      	push	{r4, lr}
    7702:	ed2d 8b04 	vpush	{d8-d9}
    7706:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 7770 <tMBSaw_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    770a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    770e:	eef0 8a40 	vmov.f32	s17, s0
	_tMBSaw* c = *osc;
    7712:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    7714:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    7718:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    771c:	eee0 7a08 	vfma.f32	s15, s0, s16
    7720:	eeb0 0a67 	vmov.f32	s0, s15
    7724:	f000 fff8 	bl	8718 <__lrintf_veneer>
	r -= (Lfloat)i;
    7728:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    772c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7730:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    7734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7738:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    773a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    773e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7742:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7746:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    774a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    774e:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7752:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7756:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    775a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    775e:	3301      	adds	r3, #1
    7760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7764:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
    7768:	ecbd 8b04 	vpop	{d8-d9}
    776c:	bd10      	pop	{r4, pc}
    776e:	bf00      	nop
    7770:	42800000 	.word	0x42800000
    7774:	f3af 8000 	nop.w
    7778:	f3af 8000 	nop.w
    777c:	f3af 8000 	nop.w

00007780 <tMBSawPulse_place_step_dd_noBuffer>:
{
    7780:	b510      	push	{r4, lr}
    7782:	ed2d 8b04 	vpush	{d8-d9}
    _tMBSawPulse* c = *osc;
    7786:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    7788:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    778c:	b36b      	cbz	r3, 77ea <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    778e:	ed9f 8a18 	vldr	s16, [pc, #96]	; 77f0 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    7792:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    7796:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    779a:	ee20 8a88 	vmul.f32	s16, s1, s16
    779e:	eeb0 9a41 	vmov.f32	s18, s2
    77a2:	eea8 0a88 	vfma.f32	s0, s17, s16
    77a6:	f000 ffb7 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    77aa:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    77ae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    77b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    77b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    77ba:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    77bc:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    77c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    77c4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    77c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    77cc:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    77d0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    77d4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    77d8:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    77dc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    77e0:	3301      	adds	r3, #1
    77e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77e6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    77ea:	ecbd 8b04 	vpop	{d8-d9}
    77ee:	bd10      	pop	{r4, pc}
    77f0:	42800000 	.word	0x42800000
    77f4:	f3af 8000 	nop.w
    77f8:	f3af 8000 	nop.w
    77fc:	f3af 8000 	nop.w

00007800 <tMBSawPulse_tick>:
{
    7800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7804:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
    7808:	6804      	ldr	r4, [r0, #0]
    Lfloat sawShape = 1.0f - c->shape;
    780a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
    780e:	b084      	sub	sp, #16
    7810:	4607      	mov	r7, r0
    sync = c->sync;
    7812:	ed94 8a04 	vldr	s16, [r4, #16]
    Lfloat shape = c->shape;
    7816:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    781a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    781e:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    Lfloat sawShape = 1.0f - c->shape;
    7822:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
    7826:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    782a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
    782e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    7836:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    783a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    783e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    7842:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7844:	f340 80d8 	ble.w	79f8 <tMBSawPulse_tick+0x1f8>
    7848:	69a3      	ldr	r3, [r4, #24]
    784a:	2b00      	cmp	r3, #0
    784c:	dd65      	ble.n	791a <tMBSawPulse_tick+0x11a>
    784e:	edd4 6a05 	vldr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7852:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7856:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    785a:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    785e:	edc4 6a05 	vstr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7862:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    7866:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    786a:	ee37 7a27 	vadd.f32	s14, s14, s15
    786e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    7872:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    7876:	ee1c 3a90 	vmov	r3, s25
		if (sw > 0)
    787a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    787e:	2b00      	cmp	r3, #0
    7880:	f040 80d1 	bne.w	7a26 <tMBSawPulse_tick+0x226>
		if (sw > 0)
    7884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7888:	f340 8210 	ble.w	7cac <tMBSawPulse_tick+0x4ac>
			if (p >= b) {
    788c:	eeb4 8acb 	vcmpe.f32	s16, s22
    7890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7894:	f280 81cc 	bge.w	7c30 <tMBSawPulse_tick+0x430>
    7898:	eddf 5ae3 	vldr	s11, [pc, #908]	; 7c28 <tMBSawPulse_tick+0x428>
			if (p >= 1.0f) {
    789c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    78a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
    78a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78a8:	f2c0 80cb 	blt.w	7a42 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
    78ac:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    78ae:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    78b2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    78b6:	2b00      	cmp	r3, #0
    78b8:	f000 81f3 	beq.w	7ca2 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    78bc:	eddf 7adb 	vldr	s15, [pc, #876]	; 7c2c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    78c0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    78c4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    78c8:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
    78cc:	eea9 0a08 	vfma.f32	s0, s18, s16
    78d0:	f000 ff22 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    78d4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    78d8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    78dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    78e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    78e4:	eddf 5ad0 	vldr	s11, [pc, #832]	; 7c28 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    78e8:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    78ea:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    78ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    78f2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    78f6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    78fa:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    78fe:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7902:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7906:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    790a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    790e:	3301      	adds	r3, #1
    7910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7914:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7918:	e093      	b.n	7a42 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    791a:	ed94 9a05 	vldr	s18, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    791e:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    7922:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7926:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    792a:	eefd 8ae7 	vcvt.s32.f32	s17, s15
    792e:	ee37 7a87 	vadd.f32	s14, s15, s14
    7932:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    7936:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
    793a:	f040 8639 	bne.w	85b0 <_Min_Stack_Size+0x5b0>
        if (sw > 0) p = eof_offset;
    793e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7942:	4625      	mov	r5, r4
        Lfloat eof_offset = sync * sw;
    7944:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
    7948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat p_at_reset = p - eof_offset;
    794c:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
    7950:	f340 8117 	ble.w	7b82 <tMBSawPulse_tick+0x382>
		 if (!k)
    7954:	ee1c 2a90 	vmov	r2, s25
    7958:	2a00      	cmp	r2, #0
    795a:	f040 8274 	bne.w	7e46 <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
    795e:	eeb4 baed 	vcmpe.f32	s22, s27
    7962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7966:	f240 83c0 	bls.w	80ea <_Min_Stack_Size+0xea>
    _tMBSawPulse* c = *osc;
    796a:	46a0      	mov	r8, r4
    if (c->active)
    796c:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    7970:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
    7974:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7978:	eef4 dae8 	vcmpe.f32	s27, s17
    797c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7980:	f280 82ad 	bge.w	7ede <tMBSawPulse_tick+0x6de>
    if (c->active)
    7984:	b35a      	cbz	r2, 79de <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
    7986:	eddf 8aa9 	vldr	s17, [pc, #676]	; 7c2c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    798a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    798e:	ee6d da8d 	vmul.f32	s27, s27, s26
    7992:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    7996:	eea8 0a28 	vfma.f32	s0, s16, s17
    799a:	f000 febd 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    799e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    79a2:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    79a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    79aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    79ae:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    79b0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    79b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    79b8:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    79bc:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    79c0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    79c4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    79c8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    79cc:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    79d0:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    79d4:	3301      	adds	r3, #1
    79d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79da:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
    79de:	f1b9 0f00 	cmp.w	r9, #0
    79e2:	f040 8419 	bne.w	8218 <_Min_Stack_Size+0x218>
			if (p >= b) {
    79e6:	eeb4 bac8 	vcmpe.f32	s22, s16
    79ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79ee:	f240 80df 	bls.w	7bb0 <tMBSawPulse_tick+0x3b0>
		 if (!k)
    79f2:	eddf 5a8d 	vldr	s11, [pc, #564]	; 7c28 <tMBSawPulse_tick+0x428>
    79f6:	e024      	b.n	7a42 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    79f8:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    79fc:	ee1c 3a90 	vmov	r3, s25
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7a00:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    7a04:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7a08:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    7a0c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    7a10:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    7a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    7a18:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    7a1c:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    7a20:	2b00      	cmp	r3, #0
    7a22:	f43f af2f 	beq.w	7884 <tMBSawPulse_tick+0x84>
		if (sw > 0)
    7a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a2a:	f340 81bd 	ble.w	7da8 <tMBSawPulse_tick+0x5a8>
			if (p >= 1.0f) {
    7a2e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7a32:	eeb4 8ae8 	vcmpe.f32	s16, s17
    7a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a3a:	f280 80ac 	bge.w	7b96 <tMBSawPulse_tick+0x396>
    c->_k = k;
    7a3e:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    7a42:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    7a46:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    7a48:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    7a4c:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    7a50:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
    7a54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    7a58:	eea6 7a8d 	vfma.f32	s14, s13, s26
    7a5c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    7a60:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    7a64:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7a68:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a6c:	2b00      	cmp	r3, #0
    7a6e:	f000 81e5 	beq.w	7e3c <tMBSawPulse_tick+0x63c>
    7a72:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    7a76:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7a7a:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7a7e:	2000      	movs	r0, #0
    7a80:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    7a84:	4d67      	ldr	r5, [pc, #412]	; (7c24 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    7a86:	ebae 0300 	sub.w	r3, lr, r0
    7a8a:	b29b      	uxth	r3, r3
    7a8c:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
    7a90:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a98:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7a9c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7aa0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7aa4:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    7aa8:	b289      	uxth	r1, r1
    7aaa:	f8bd 900e 	ldrh.w	r9, [sp, #14]
    7aae:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7ab0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7ab4:	fa1f f888 	uxth.w	r8, r8
    7ab8:	fa1f f989 	uxth.w	r9, r9
    7abc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    7ac0:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    7ac4:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    7ac8:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    7acc:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7ad0:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7ad2:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    7ad6:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    7ada:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7ade:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7ae2:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    7ae6:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7aea:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7aec:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7af0:	edd9 6a01 	vldr	s13, [r9, #4]
    7af4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7af8:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7afc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7b00:	eee6 7a26 	vfma.f32	s15, s12, s13
    7b04:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7b08:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7b0c:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    7b10:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7b12:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7b16:	d32e      	bcc.n	7b76 <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
    7b18:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7b1c:	3001      	adds	r0, #1
    7b1e:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
    7b22:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7b24:	4282      	cmp	r2, r0
			c->numBLEPs--;
    7b26:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7b2a:	dcac      	bgt.n	7a86 <tMBSawPulse_tick+0x286>
    7b2c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    7b30:	ee37 7a4a 	vsub.f32	s14, s14, s20
    return -c->out * c->gain;
    7b34:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    7b38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    7b3c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    7b3e:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
    7b42:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    7b46:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    7b4a:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
    7b4e:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
    7b52:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
    7b56:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
    7b5a:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
    7b5c:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
    7b60:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    7b64:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    7b68:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    7b6c:	b004      	add	sp, #16
    7b6e:	ecbd 8b0e 	vpop	{d8-d14}
    7b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7b76:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b7a:	3001      	adds	r0, #1
    7b7c:	4283      	cmp	r3, r0
    7b7e:	dc82      	bgt.n	7a86 <tMBSawPulse_tick+0x286>
    7b80:	e7d4      	b.n	7b2c <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
    7b82:	f100 8229 	bmi.w	7fd8 <tMBSawPulse_tick+0x7d8>
		 if (!k)
    7b86:	ee1c 2a90 	vmov	r2, s25
    7b8a:	2a00      	cmp	r2, #0
    7b8c:	f040 8197 	bne.w	7ebe <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
    7b90:	eeb0 8a68 	vmov.f32	s16, s17
    7b94:	e72d      	b.n	79f2 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    7b96:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    7b98:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    7b9c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	f040 8161 	bne.w	7e68 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
    7ba6:	eeb4 bac8 	vcmpe.f32	s22, s16
    7baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bae:	d878      	bhi.n	7ca2 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
    7bb0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    7bb2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	f000 8151 	beq.w	7e5e <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
    7bbc:	eddf 7a1b 	vldr	s15, [pc, #108]	; 7c2c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    7bc0:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    7bc4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    7bc8:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
    7bcc:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    7bd0:	eea8 0a89 	vfma.f32	s0, s17, s18
    7bd4:	f000 fda0 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7bd8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7bdc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7be0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7be8:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    7bea:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7bee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    7bf6:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    7bfa:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7bfe:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7c02:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7c06:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7c0a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7c0e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7c12:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7c16:	3301      	adds	r3, #1
    7c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c1c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7c20:	e70f      	b.n	7a42 <tMBSawPulse_tick+0x242>
    7c22:	bf00      	nop
    7c24:	24022b44 	.word	0x24022b44
    7c28:	00000000 	.word	0x00000000
    7c2c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
    7c30:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    7c32:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    7c36:	2b00      	cmp	r3, #0
    7c38:	f000 814c 	beq.w	7ed4 <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
    7c3c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 7c2c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    7c40:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    7c44:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    7c48:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
    7c4c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    7c50:	eea9 0aa8 	vfma.f32	s0, s19, s17
    7c54:	f000 fd60 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7c58:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c5c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7c60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c68:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    7c6a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7c6e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    7c76:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    7c7a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c7e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7c82:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7c86:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7c8a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7c8e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7c92:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7c96:	3301      	adds	r3, #1
    7c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c9c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7ca0:	e5fc      	b.n	789c <tMBSawPulse_tick+0x9c>
				x = 0.5f;
    7ca2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
    7ca6:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 7c28 <tMBSawPulse_tick+0x428>
    7caa:	e6ca      	b.n	7a42 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
    7cac:	eeb5 8a40 	vcmp.f32	s16, #0.0
    7cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cb4:	f57f ae9d 	bpl.w	79f2 <tMBSawPulse_tick+0x1f2>
    7cb8:	eef5 7a40 	vcmp.f32	s15, #0.0
    7cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cc0:	f57f ae97 	bpl.w	79f2 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    7cc4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    7cc6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    7cca:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    7cce:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
    7cd2:	b353      	cbz	r3, 7d2a <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
    7cd4:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
    7cd8:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 7c2c <tMBSawPulse_tick+0x42c>
    7cdc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    7ce0:	eea8 0a29 	vfma.f32	s0, s16, s19
    7ce4:	f000 fd18 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7ce8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7cec:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7cf0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7cf8:	4ab2      	ldr	r2, [pc, #712]	; (7fc4 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7cfa:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7cfc:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7d04:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7d08:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7d0c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7d10:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    7d14:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7d18:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7d1c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7d20:	3301      	adds	r3, #1
    7d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7d26:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
    7d2a:	eeb4 bae8 	vcmpe.f32	s22, s17
    7d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d32:	f340 8446 	ble.w	85c2 <_Min_Stack_Size+0x5c2>
    _tMBSawPulse* c = *osc;
    7d36:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    7d38:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	f000 8327 	beq.w	8390 <_Min_Stack_Size+0x390>
		r = MINBLEP_PHASES * phase * inv_w;
    7d42:	eddf 7aa4 	vldr	s15, [pc, #656]	; 7fd4 <tMBSawPulse_tick+0x7d4>
    7d46:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    7d4a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    7d4e:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    7d52:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7d56:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
    7d5a:	eea9 0a29 	vfma.f32	s0, s18, s19
    7d5e:	f000 fcdb 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7d62:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7d66:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7d6a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7d72:	eddf 5a97 	vldr	s11, [pc, #604]	; 7fd0 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7d76:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7d78:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7d80:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7d84:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7d88:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7d8c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7d90:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7d94:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7d98:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7d9c:	3301      	adds	r3, #1
    7d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7da2:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7da6:	e64c      	b.n	7a42 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
    7da8:	f57f ae49 	bpl.w	7a3e <tMBSawPulse_tick+0x23e>
			if (p < b) {
    7dac:	eeb4 8acb 	vcmpe.f32	s16, s22
    7db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7db4:	f100 80cd 	bmi.w	7f52 <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
    7db8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    7dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dc0:	f57f ae3d 	bpl.w	7a3e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    7dc4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    7dc6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    7dca:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    7dce:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
    7dd2:	2b00      	cmp	r3, #0
    7dd4:	f000 8302 	beq.w	83dc <_Min_Stack_Size+0x3dc>
		i = lrintf(r - 0.5f);
    7dd8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    7ddc:	eddf 9a7d 	vldr	s19, [pc, #500]	; 7fd4 <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
    7de0:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
    7de4:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    7de8:	eeb0 0a6a 	vmov.f32	s0, s21
    7dec:	eea9 0a29 	vfma.f32	s0, s18, s19
    7df0:	f000 fc92 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7df4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7df8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7dfc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7e04:	4a6f      	ldr	r2, [pc, #444]	; (7fc4 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e06:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7e08:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    7e10:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    7e14:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e18:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7e1c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7e20:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    7e24:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7e28:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7e2c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7e30:	3301      	adds	r3, #1
    7e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e36:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7e3a:	e602      	b.n	7a42 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    7e3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    7e40:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    7e44:	e674      	b.n	7b30 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
    7e46:	eef4 dae9 	vcmpe.f32	s27, s19
    7e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e4e:	f280 8159 	bge.w	8104 <_Min_Stack_Size+0x104>
    _tMBSawPulse* c = *osc;
    7e52:	46a0      	mov	r8, r4
    if (c->active)
    7e54:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    7e58:	ee1c 9a90 	vmov	r9, s25
    7e5c:	e592      	b.n	7984 <tMBSawPulse_tick+0x184>
    7e5e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    7e62:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    7e66:	e5ec      	b.n	7a42 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
    7e68:	eddf 9a5a 	vldr	s19, [pc, #360]	; 7fd4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    7e6c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    7e70:	ee69 9a29 	vmul.f32	s19, s18, s19
    7e74:	eea9 0a88 	vfma.f32	s0, s19, s16
    7e78:	f000 fc4e 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7e7c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e80:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7e84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e8c:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7e8e:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7e96:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e9a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7e9e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7ea2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7ea6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7eaa:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7eae:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7eb2:	3301      	adds	r3, #1
    7eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7eb8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7ebc:	e673      	b.n	7ba6 <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
    7ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ec6:	f100 815b 	bmi.w	8180 <_Min_Stack_Size+0x180>
    c->_k = k;
    7eca:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
    7ece:	eeb0 8a68 	vmov.f32	s16, s17
    7ed2:	e5b6      	b.n	7a42 <tMBSawPulse_tick+0x242>
    7ed4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    7ed8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    7edc:	e4de      	b.n	789c <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
    7ede:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
    7ee2:	2a00      	cmp	r2, #0
    7ee4:	f000 810b 	beq.w	80fe <_Min_Stack_Size+0xfe>
		r = MINBLEP_PHASES * phase * inv_w;
    7ee8:	eddf 9a3a 	vldr	s19, [pc, #232]	; 7fd4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    7eec:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
    7ef0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    7ef4:	f04f 0900 	mov.w	r9, #0
    7ef8:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
    7efc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    7f00:	eeac 0aa9 	vfma.f32	s0, s25, s19
    7f04:	f000 fc08 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7f08:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f0c:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7f10:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f18:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7f1a:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7f22:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f26:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7f2a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7f2e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    7f32:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7f36:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7f3a:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    7f3e:	3301      	adds	r3, #1
    7f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7f44:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    7f48:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    7f4c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    7f50:	e518      	b.n	7984 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
    7f52:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    7f54:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    7f58:	ee1c 3a90 	vmov	r3, s25
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	f000 820d 	beq.w	837c <_Min_Stack_Size+0x37c>
		r = MINBLEP_PHASES * phase * inv_w;
    7f62:	eddf 9a1c 	vldr	s19, [pc, #112]	; 7fd4 <tMBSawPulse_tick+0x7d4>
    7f66:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    7f6a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    7f6e:	eddf ca16 	vldr	s25, [pc, #88]	; 7fc8 <tMBSawPulse_tick+0x7c8>
    7f72:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
    7f76:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    7f7a:	eea9 0aa8 	vfma.f32	s0, s19, s17
    7f7e:	f000 fbcb 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    7f82:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f86:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7f8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f92:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7f94:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7f9c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7fa0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7fa4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7fa8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7fac:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7fb0:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7fb4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7fb8:	3301      	adds	r3, #1
    7fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fbe:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7fc2:	e6f9      	b.n	7db8 <tMBSawPulse_tick+0x5b8>
    7fc4:	bf800000 	.word	0xbf800000
    7fc8:	00000000 	.word	0x00000000
    7fcc:	00000001 	.word	0x00000001
    7fd0:	00000000 	.word	0x00000000
    7fd4:	42800000 	.word	0x42800000
		 if (!k)
    7fd8:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
    7fdc:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
    7fe0:	2a00      	cmp	r2, #0
    7fe2:	f040 80cf 	bne.w	8184 <_Min_Stack_Size+0x184>
				 if (p_at_reset < 0.0f)
    7fe6:	eef5 da40 	vcmp.f32	s27, #0.0
    7fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7fee:	d571      	bpl.n	80d4 <_Min_Stack_Size+0xd4>
    if (c->active)
    7ff0:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    7ff4:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	f040 8231 	bne.w	8460 <_Min_Stack_Size+0x460>
				 if (k && p_at_reset < b)
    7ffe:	eeb4 baed 	vcmpe.f32	s22, s27
    8002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8006:	f340 82d7 	ble.w	85b8 <_Min_Stack_Size+0x5b8>
        else if (sw < 0) p = 1.0f - eof_offset;
    800a:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    800e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    8012:	2b00      	cmp	r3, #0
    8014:	f000 81d6 	beq.w	83c4 <_Min_Stack_Size+0x3c4>
		r = MINBLEP_PHASES * phase * inv_w;
    8018:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    801c:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 7fd4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    8020:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
    8024:	ed5f ca17 	vldr	s25, [pc, #-92]	; 7fcc <tMBSawPulse_tick+0x7cc>
    8028:	ee69 9a29 	vmul.f32	s19, s18, s19
    802c:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
    8030:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    8034:	eea9 0aa8 	vfma.f32	s0, s19, s17
    8038:	f000 fb6e 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    803c:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8040:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8044:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    804c:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    804e:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8056:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    805a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    805e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8062:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8066:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    806a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    806e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8072:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8076:	3301      	adds	r3, #1
    8078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    807c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
    8080:	eeb4 bace 	vcmpe.f32	s22, s28
    8084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8088:	f77f acd9 	ble.w	7a3e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    808c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    808e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    8092:	2b00      	cmp	r3, #0
    8094:	f43f ae05 	beq.w	7ca2 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    8098:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 7fd4 <tMBSawPulse_tick+0x7d4>
    809c:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
    80a0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    80a4:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    80a8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    80ac:	eea9 0a0e 	vfma.f32	s0, s18, s28
    80b0:	f000 fb32 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    80b4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    80b8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    80bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    80c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    80c4:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 7fd0 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    80c8:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    80ca:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    80ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    80d2:	e655      	b.n	7d80 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
    80d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    80d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80dc:	f100 814b 	bmi.w	8376 <_Min_Stack_Size+0x376>
        else if (sw < 0) p = 1.0f - eof_offset;
    80e0:	eeb0 8a4e 	vmov.f32	s16, s28
    80e4:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 7fd0 <tMBSawPulse_tick+0x7d0>
    80e8:	e4ab      	b.n	7a42 <tMBSawPulse_tick+0x242>
    if (c->active)
    80ea:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    80ee:	2b00      	cmp	r3, #0
    80f0:	f040 8109 	bne.w	8306 <_Min_Stack_Size+0x306>
				 if (p_at_reset >= 1.0f)
    80f4:	eef4 dae9 	vcmpe.f32	s27, s19
    80f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80fc:	db0f      	blt.n	811e <_Min_Stack_Size+0x11e>
				x = 0.5f;
    80fe:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8102:	e470      	b.n	79e6 <tMBSawPulse_tick+0x1e6>
    if (c->active)
    8104:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
    8108:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
    810c:	f1b9 0f00 	cmp.w	r9, #0
    8110:	f040 8084 	bne.w	821c <_Min_Stack_Size+0x21c>
				 if (!k && p_at_reset >= b)
    8114:	eeb4 baed 	vcmpe.f32	s22, s27
    8118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    811c:	d8ef      	bhi.n	80fe <_Min_Stack_Size+0xfe>
    if (c->active)
    811e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    8122:	2b00      	cmp	r3, #0
    8124:	d0eb      	beq.n	80fe <_Min_Stack_Size+0xfe>
		r = MINBLEP_PHASES * phase * inv_w;
    8126:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 7fd4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    812a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    812e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8132:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    8136:	eea8 0a28 	vfma.f32	s0, s16, s17
    813a:	f000 faed 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    813e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8142:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8146:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    814a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    814e:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    8150:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8158:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    815c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8160:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8164:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8168:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    816c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8170:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8174:	3301      	adds	r3, #1
    8176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    817a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    817e:	e432      	b.n	79e6 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
    8180:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
    8184:	eeb4 baed 	vcmpe.f32	s22, s27
    8188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    818c:	f300 8108 	bgt.w	83a0 <_Min_Stack_Size+0x3a0>
				 if (p_at_reset < 0.0f)
    8190:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
    8194:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
    8198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    819c:	f100 8126 	bmi.w	83ec <_Min_Stack_Size+0x3ec>
        else if (sw < 0) p = 1.0f - eof_offset;
    81a0:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    81a4:	b38b      	cbz	r3, 820a <_Min_Stack_Size+0x20a>
		r = MINBLEP_PHASES * phase * inv_w;
    81a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    81aa:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 7fd4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    81ae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    81b2:	ee69 9a29 	vmul.f32	s19, s18, s19
    81b6:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    81ba:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
    81be:	eea9 0aae 	vfma.f32	s0, s19, s29
    81c2:	f000 faa9 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    81c6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    81ca:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    81ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    81d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    81d6:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    81d8:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    81dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    81e0:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
    81e4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    81e8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    81ec:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    81f0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    81f4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    81f8:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    81fc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8200:	3301      	adds	r3, #1
    8202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8206:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
    820a:	ee1c 3a90 	vmov	r3, s25
    820e:	2b00      	cmp	r3, #0
    8210:	f47f af36 	bne.w	8080 <_Min_Stack_Size+0x80>
    8214:	683d      	ldr	r5, [r7, #0]
    8216:	e6fa      	b.n	800e <_Min_Stack_Size+0xe>
    8218:	683d      	ldr	r5, [r7, #0]
    821a:	e780      	b.n	811e <_Min_Stack_Size+0x11e>
		i = lrintf(r - 0.5f);
    821c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
    8220:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 7fd4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    8224:	ee78 aa2d 	vadd.f32	s21, s16, s27
    8228:	9301      	str	r3, [sp, #4]
    822a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    822e:	eeb0 0a6c 	vmov.f32	s0, s25
    8232:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    8236:	f000 fa6f 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    823a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    823e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8242:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
    824a:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    824c:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
    824e:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8252:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (Lfloat)i;
    8256:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
    825a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    825e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8262:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8266:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    826a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    826e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8272:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8276:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    827a:	f102 0201 	add.w	r2, r2, #1
    827e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    8282:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    8286:	f8d7 8000 	ldr.w	r8, [r7]
    828a:	4645      	mov	r5, r8
    if (c->active)
    828c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
    8290:	f200 8175 	bhi.w	857e <_Min_Stack_Size+0x57e>
    if (c->active)
    8294:	2a00      	cmp	r2, #0
    8296:	f43f af42 	beq.w	811e <_Min_Stack_Size+0x11e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    829a:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
    829e:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
    82a2:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
    82a6:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    82aa:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
    82ae:	eea9 0aa8 	vfma.f32	s0, s19, s17
    82b2:	f000 fa31 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    82b6:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    82ba:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    82be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    82c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    82c6:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    82c8:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    82cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    82d0:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    82d4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    82d8:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    82dc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    82e0:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    82e4:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    82e8:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    82ec:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    82f0:	444b      	add	r3, r9
    82f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    82f6:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    82fa:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    82fe:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    8302:	f7ff bb3f 	b.w	7984 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
    8306:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 7fd4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    830a:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
    830e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    8312:	f04f 0901 	mov.w	r9, #1
    8316:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
    831a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    831e:	eea8 0aa9 	vfma.f32	s0, s17, s19
    8322:	f000 f9f9 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    8326:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    832a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    832e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8336:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    8338:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    833c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8340:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    8344:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8348:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    834c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8350:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    8354:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8358:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    835c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    8360:	444b      	add	r3, r9
    8362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8366:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    836a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    836e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    8372:	f7ff baff 	b.w	7974 <tMBSawPulse_tick+0x174>
    8376:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    837a:	e711      	b.n	81a0 <_Min_Stack_Size+0x1a0>
			if (p < 0.0f) {
    837c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    8380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8384:	f100 8100 	bmi.w	8588 <_Min_Stack_Size+0x588>
				x = 0.5f;
    8388:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    838c:	f7ff bb57 	b.w	7a3e <tMBSawPulse_tick+0x23e>
				x = 0.5f;
    8390:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8394:	eddf 5a8f 	vldr	s11, [pc, #572]	; 85d4 <_Min_Stack_Size+0x5d4>
    8398:	eeb0 8a68 	vmov.f32	s16, s17
    839c:	f7ff bb51 	b.w	7a42 <tMBSawPulse_tick+0x242>
    if (c->active)
    83a0:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    83a4:	ee1c 2a90 	vmov	r2, s25
    83a8:	2a00      	cmp	r2, #0
    83aa:	f040 80b6 	bne.w	851a <_Min_Stack_Size+0x51a>
				 if (p_at_reset < 0.0f)
    83ae:	eef5 dac0 	vcmpe.f32	s27, #0.0
    83b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    83b6:	f100 80ef 	bmi.w	8598 <_Min_Stack_Size+0x598>
					 x = 0.5f;
    83ba:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
    83be:	eeb0 8a4e 	vmov.f32	s16, s28
    83c2:	e722      	b.n	820a <_Min_Stack_Size+0x20a>
			if (p < b) {
    83c4:	eeb4 bace 	vcmpe.f32	s22, s28
    83c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    83cc:	f73f ac69 	bgt.w	7ca2 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
    83d0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
    83d4:	eddf ca80 	vldr	s25, [pc, #512]	; 85d8 <_Min_Stack_Size+0x5d8>
    83d8:	f7ff bb31 	b.w	7a3e <tMBSawPulse_tick+0x23e>
				x = -0.5f;
    83dc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    83e0:	eeb0 8a67 	vmov.f32	s16, s15
    83e4:	eef0 5a68 	vmov.f32	s11, s17
    83e8:	f7ff bb2b 	b.w	7a42 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
    83ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    83f0:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
    83f4:	2b00      	cmp	r3, #0
    83f6:	f000 80cf 	beq.w	8598 <_Min_Stack_Size+0x598>
		r = MINBLEP_PHASES * phase * inv_w;
    83fa:	ed9f 8a78 	vldr	s16, [pc, #480]	; 85dc <_Min_Stack_Size+0x5dc>
		i = lrintf(r - 0.5f);
    83fe:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    8402:	eddf ca75 	vldr	s25, [pc, #468]	; 85d8 <_Min_Stack_Size+0x5d8>
    8406:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
    840a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    840e:	eea8 0a28 	vfma.f32	s0, s16, s17
    8412:	f000 f981 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    8416:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    841a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    841e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8426:	4a6e      	ldr	r2, [pc, #440]	; (85e0 <_Min_Stack_Size+0x5e0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8428:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    842a:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    842e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8432:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8436:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    843a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    843e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    8442:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8446:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    844a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    844e:	3301      	adds	r3, #1
    8450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8454:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    8458:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    845a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    845e:	e69f      	b.n	81a0 <_Min_Stack_Size+0x1a0>
		r = MINBLEP_PHASES * phase * inv_w;
    8460:	eddf 9a5e 	vldr	s19, [pc, #376]	; 85dc <_Min_Stack_Size+0x5dc>
		i = lrintf(r - 0.5f);
    8464:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    8468:	ee69 9a29 	vmul.f32	s19, s18, s19
    846c:	eea9 0aa8 	vfma.f32	s0, s19, s17
    8470:	f000 f952 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    8474:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8478:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    847c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8484:	4a56      	ldr	r2, [pc, #344]	; (85e0 <_Min_Stack_Size+0x5e0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8486:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
    8488:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    848c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8490:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
    8494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    8498:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    849c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    84a0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    84a4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    84a8:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    84ac:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    84b0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    84b4:	f103 0301 	add.w	r3, r3, #1
    84b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84bc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    84c0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    84c2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
    84c6:	dd6e      	ble.n	85a6 <_Min_Stack_Size+0x5a6>
    if (c->active)
    84c8:	2b00      	cmp	r3, #0
    84ca:	f43f ad9e 	beq.w	800a <_Min_Stack_Size+0xa>
		r = MINBLEP_PHASES * phase * inv_w;
    84ce:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
    84d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    84d6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    84da:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
    84de:	eea8 0a29 	vfma.f32	s0, s16, s19
    84e2:	f000 f919 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    84e6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84ea:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    84ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    84f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84f6:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    84f8:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8500:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8504:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8508:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    850c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8510:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8514:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8518:	e797      	b.n	844a <_Min_Stack_Size+0x44a>
		r = MINBLEP_PHASES * phase * inv_w;
    851a:	ed9f 8a30 	vldr	s16, [pc, #192]	; 85dc <_Min_Stack_Size+0x5dc>
    851e:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    8522:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    8526:	ee0c 3a90 	vmov	s25, r3
    852a:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
    852e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    8532:	eea9 0a88 	vfma.f32	s0, s19, s16
    8536:	f000 f8ef 	bl	8718 <__lrintf_veneer>
		r -= (Lfloat)i;
    853a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    853e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8542:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    854a:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    854c:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8554:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8558:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    855c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8560:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8564:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8568:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    856c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8570:	3301      	adds	r3, #1
    8572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8576:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    857a:	683d      	ldr	r5, [r7, #0]
    857c:	e608      	b.n	8190 <_Min_Stack_Size+0x190>
    857e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8582:	4699      	mov	r9, r3
    8584:	f7ff b9fe 	b.w	7984 <tMBSawPulse_tick+0x184>
				p += 1.0f;
    8588:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    858c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    8590:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
    8594:	f7ff ba55 	b.w	7a42 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
    8598:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    859c:	eddf ca0e 	vldr	s25, [pc, #56]	; 85d8 <_Min_Stack_Size+0x5d8>
    85a0:	eeb0 8a4e 	vmov.f32	s16, s28
    85a4:	e56c      	b.n	8080 <_Min_Stack_Size+0x80>
    85a6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    85aa:	eddf ca0b 	vldr	s25, [pc, #44]	; 85d8 <_Min_Stack_Size+0x5d8>
		else if (sw < 0)
    85ae:	e5f7      	b.n	81a0 <_Min_Stack_Size+0x1a0>
    p += sw - (int)sw;
    85b0:	eeb0 8a68 	vmov.f32	s16, s17
    85b4:	f7ff b95f 	b.w	7876 <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
    85b8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    85bc:	eddf ca06 	vldr	s25, [pc, #24]	; 85d8 <_Min_Stack_Size+0x5d8>
    85c0:	e6fd      	b.n	83be <_Min_Stack_Size+0x3be>
    85c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    85c6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    85ca:	eeb0 8a68 	vmov.f32	s16, s17
    85ce:	f7ff ba38 	b.w	7a42 <tMBSawPulse_tick+0x242>
    85d2:	bf00      	nop
    85d4:	00000000 	.word	0x00000000
    85d8:	00000001 	.word	0x00000001
    85dc:	42800000 	.word	0x42800000
    85e0:	bf800000 	.word	0xbf800000
    85e4:	f3af 8000 	nop.w
    85e8:	f3af 8000 	nop.w
    85ec:	f3af 8000 	nop.w
    85f0:	f3af 8000 	nop.w
    85f4:	f3af 8000 	nop.w
    85f8:	f3af 8000 	nop.w
    85fc:	f3af 8000 	nop.w

00008600 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    8600:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    8602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    8606:	eddf 6a14 	vldr	s13, [pc, #80]	; 8658 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    860a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    860e:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    8612:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    8616:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    861a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    861e:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    8622:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    8626:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    862a:	dc0c      	bgt.n	8646 <tMBSawPulse_setFreq+0x46>
    862c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 865c <tMBSawPulse_setFreq+0x5c>
    8630:	eeb4 0ae7 	vcmpe.f32	s0, s15
    8634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8638:	d405      	bmi.n	8646 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    863a:	2201      	movs	r2, #1
    863c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    8640:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    8644:	4770      	bx	lr
    	c->gain = 0.0f;
    8646:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8660 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    864a:	2200      	movs	r2, #0
    864c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    8650:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    8654:	4770      	bx	lr
    8656:	bf00      	nop
    8658:	45bb8000 	.word	0x45bb8000
    865c:	c5bb8000 	.word	0xc5bb8000
    8660:	00000000 	.word	0x00000000
    8664:	f3af 8000 	nop.w
    8668:	f3af 8000 	nop.w
    866c:	f3af 8000 	nop.w
    8670:	f3af 8000 	nop.w
    8674:	f3af 8000 	nop.w
    8678:	f3af 8000 	nop.w
    867c:	f3af 8000 	nop.w

00008680 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    8680:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    8682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat last = c->lastsyncin;
    8686:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    868a:	ed83 0a03 	vstr	s0, [r3, #12]
    Lfloat delta = value - last;
    868e:	ee30 6a67 	vsub.f32	s12, s0, s15
    Lfloat crossing = -last / delta;
    8692:	eef1 7a67 	vneg.f32	s15, s15
    8696:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    869a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    869e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86a2:	eef4 6ac7 	vcmpe.f32	s13, s14
    86a6:	bfcc      	ite	gt
    86a8:	2201      	movgt	r2, #1
    86aa:	2200      	movle	r2, #0
    86ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86b0:	f002 0201 	and.w	r2, r2, #1
    86b4:	bf88      	it	hi
    86b6:	2200      	movhi	r2, #0
    86b8:	b122      	cbz	r2, 86c4 <tMBSawPulse_sync+0x44>
    86ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
    86be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86c2:	da04      	bge.n	86ce <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    86c4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 86dc <tMBSawPulse_sync+0x5c>
    86c8:	ed83 7a04 	vstr	s14, [r3, #16]
}
    86cc:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    86ce:	ee37 7a66 	vsub.f32	s14, s14, s13
    86d2:	ee27 7a06 	vmul.f32	s14, s14, s12
    86d6:	ed83 7a04 	vstr	s14, [r3, #16]
}
    86da:	4770      	bx	lr
    86dc:	00000000 	.word	0x00000000

000086e0 <__tSimpleLivingString3_setLevMode_veneer>:
    86e0:	f85f f000 	ldr.w	pc, [pc]	; 86e4 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    86e4:	24013e65 	.word	0x24013e65

000086e8 <__setLFOShapes_veneer>:
    86e8:	f85f f000 	ldr.w	pc, [pc]	; 86ec <__setLFOShapes_veneer+0x4>
    86ec:	24002e4d 	.word	0x24002e4d

000086f0 <__tSimpleLivingString3_setLevStrength_veneer>:
    86f0:	f85f f000 	ldr.w	pc, [pc]	; 86f4 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    86f4:	24013e5d 	.word	0x24013e5d

000086f8 <__tSawSquareLFO_setShape_veneer>:
    86f8:	f85f f000 	ldr.w	pc, [pc]	; 86fc <__tSawSquareLFO_setShape_veneer+0x4>
    86fc:	2401382d 	.word	0x2401382d

00008700 <__tADSRT_setDecay_veneer>:
    8700:	f85f f000 	ldr.w	pc, [pc]	; 8704 <__tADSRT_setDecay_veneer+0x4>
    8704:	2401065d 	.word	0x2401065d

00008708 <__tCrusher_setRound_veneer>:
    8708:	f85f f000 	ldr.w	pc, [pc]	; 870c <__tCrusher_setRound_veneer+0x4>
    870c:	240102c5 	.word	0x240102c5

00008710 <__tDiodeFilter_tickEfficient_veneer>:
    8710:	f85f f000 	ldr.w	pc, [pc]	; 8714 <__tDiodeFilter_tickEfficient_veneer+0x4>
    8714:	24011fb1 	.word	0x24011fb1

00008718 <__lrintf_veneer>:
    8718:	f85f f000 	ldr.w	pc, [pc]	; 871c <__lrintf_veneer+0x4>
    871c:	24015bf5 	.word	0x24015bf5

00008720 <__tDiodeFilter_setFreqFast_veneer>:
    8720:	f85f f000 	ldr.w	pc, [pc]	; 8724 <__tDiodeFilter_setFreqFast_veneer+0x4>
    8724:	2401235d 	.word	0x2401235d

00008728 <__tCompressor_tick_veneer>:
    8728:	f85f f000 	ldr.w	pc, [pc]	; 872c <__tCompressor_tick_veneer+0x4>
    872c:	2401037d 	.word	0x2401037d

00008730 <__tLivingString2_setLevMode_veneer>:
    8730:	f85f f000 	ldr.w	pc, [pc]	; 8734 <__tLivingString2_setLevMode_veneer+0x4>
    8734:	2401466d 	.word	0x2401466d

00008738 <__powf_veneer>:
    8738:	f85f f000 	ldr.w	pc, [pc]	; 873c <__powf_veneer+0x4>
    873c:	24015ca9 	.word	0x24015ca9

00008740 <__tADSRT_on_veneer>:
    8740:	f85f f000 	ldr.w	pc, [pc]	; 8744 <__tADSRT_on_veneer+0x4>
    8744:	240106fd 	.word	0x240106fd

00008748 <__fastdbtoa_veneer>:
    8748:	f85f f000 	ldr.w	pc, [pc]	; 874c <__fastdbtoa_veneer+0x4>
    874c:	24012d21 	.word	0x24012d21

00008750 <__tSimpleLivingString3_setDecay_veneer>:
    8750:	f85f f000 	ldr.w	pc, [pc]	; 8754 <__tSimpleLivingString3_setDecay_veneer+0x4>
    8754:	24013e01 	.word	0x24013e01

00008758 <__tLivingString2_setTargetLev_veneer>:
    8758:	f85f f000 	ldr.w	pc, [pc]	; 875c <__tLivingString2_setTargetLev_veneer+0x4>
    875c:	240145f5 	.word	0x240145f5

00008760 <__LEAF_poly_blamp_veneer>:
    8760:	f85f f000 	ldr.w	pc, [pc]	; 8764 <__LEAF_poly_blamp_veneer+0x4>
    8764:	24012b45 	.word	0x24012b45

00008768 <__setFilterTypes_veneer>:
    8768:	f85f f000 	ldr.w	pc, [pc]	; 876c <__setFilterTypes_veneer+0x4>
    876c:	24002cb5 	.word	0x24002cb5

00008770 <__tPBTriangle_setSkew_veneer>:
    8770:	f85f f000 	ldr.w	pc, [pc]	; 8774 <__tPBTriangle_setSkew_veneer+0x4>
    8774:	240131dd 	.word	0x240131dd

00008778 <__tSineTriLFO_setPhase_veneer>:
    8778:	f85f f000 	ldr.w	pc, [pc]	; 877c <__tSineTriLFO_setPhase_veneer+0x4>
    877c:	24013a49 	.word	0x24013a49

00008780 <__tTriLFO_tick_veneer>:
    8780:	f85f f000 	ldr.w	pc, [pc]	; 8784 <__tTriLFO_tick_veneer+0x4>
    8784:	24013889 	.word	0x24013889

00008788 <__mtof_veneer>:
    8788:	f85f f000 	ldr.w	pc, [pc]	; 878c <__mtof_veneer+0x4>
    878c:	24012c35 	.word	0x24012c35

00008790 <__tSineTriLFO_setFreq_veneer>:
    8790:	f85f f000 	ldr.w	pc, [pc]	; 8794 <__tSineTriLFO_setFreq_veneer+0x4>
    8794:	24013a19 	.word	0x24013a19

00008798 <__tPBSineTriangle_setShape_veneer>:
    8798:	f85f f000 	ldr.w	pc, [pc]	; 879c <__tPBSineTriangle_setShape_veneer+0x4>
    879c:	24013281 	.word	0x24013281

000087a0 <__fmodf_veneer>:
    87a0:	f85f f000 	ldr.w	pc, [pc]	; 87a4 <__fmodf_veneer+0x4>
    87a4:	240160b1 	.word	0x240160b1

000087a8 <__tDiodeFilter_tick_veneer>:
    87a8:	f85f f000 	ldr.w	pc, [pc]	; 87ac <__tDiodeFilter_tick_veneer+0x4>
    87ac:	24011c05 	.word	0x24011c05

000087b0 <__tADSRT_setRelease_veneer>:
    87b0:	f85f f000 	ldr.w	pc, [pc]	; 87b4 <__tADSRT_setRelease_veneer+0x4>
    87b4:	240106b1 	.word	0x240106b1

000087b8 <__tSVF_tick_veneer>:
    87b8:	f85f f000 	ldr.w	pc, [pc]	; 87bc <__tSVF_tick_veneer+0x4>
    87bc:	24010f69 	.word	0x24010f69

000087c0 <__tSawSquareLFO_tick_veneer>:
    87c0:	f85f f000 	ldr.w	pc, [pc]	; 87c4 <__tSawSquareLFO_tick_veneer+0x4>
    87c4:	240136fd 	.word	0x240136fd

000087c8 <__tSimpleLivingString3_pluck_veneer>:
    87c8:	f85f f000 	ldr.w	pc, [pc]	; 87cc <__tSimpleLivingString3_pluck_veneer+0x4>
    87cc:	24013e79 	.word	0x24013e79

000087d0 <__tLivingString2_setLevSmoothFactor_veneer>:
    87d0:	f85f f000 	ldr.w	pc, [pc]	; 87d4 <__tLivingString2_setLevSmoothFactor_veneer+0x4>
    87d4:	2401461d 	.word	0x2401461d

000087d8 <__tSVF_setQ_veneer>:
    87d8:	f85f f000 	ldr.w	pc, [pc]	; 87dc <__tSVF_setQ_veneer+0x4>
    87dc:	24011041 	.word	0x24011041

000087e0 <__HAL_I2C_Slave_Receive_IT_veneer>:
    87e0:	f85f f000 	ldr.w	pc, [pc]	; 87e4 <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    87e4:	24006931 	.word	0x24006931

000087e8 <__tSquareLFO_setPhase_veneer>:
    87e8:	f85f f000 	ldr.w	pc, [pc]	; 87ec <__tSquareLFO_setPhase_veneer+0x4>
    87ec:	24013655 	.word	0x24013655

000087f0 <__tLivingString2_setFreq_veneer>:
    87f0:	f85f f000 	ldr.w	pc, [pc]	; 87f4 <__tLivingString2_setFreq_veneer+0x4>
    87f4:	2401447d 	.word	0x2401447d

000087f8 <__HAL_GPIO_WritePin_veneer>:
    87f8:	f85f f000 	ldr.w	pc, [pc]	; 87fc <__HAL_GPIO_WritePin_veneer+0x4>
    87fc:	2400633d 	.word	0x2400633d

00008800 <__tVZFilter_setGain_veneer>:
    8800:	f85f f000 	ldr.w	pc, [pc]	; 8804 <__tVZFilter_setGain_veneer+0x4>
    8804:	24011859 	.word	0x24011859

00008808 <__tVZFilter_setFreqFast_veneer>:
    8808:	f85f f000 	ldr.w	pc, [pc]	; 880c <__tVZFilter_setFreqFast_veneer+0x4>
    880c:	2401159d 	.word	0x2401159d

00008810 <__tLivingString2_setBrightness_veneer>:
    8810:	f85f f000 	ldr.w	pc, [pc]	; 8814 <__tLivingString2_setBrightness_veneer+0x4>
    8814:	24014541 	.word	0x24014541

00008818 <__tCycle_tick_veneer>:
    8818:	f85f f000 	ldr.w	pc, [pc]	; 881c <__tCycle_tick_veneer+0x4>
    881c:	24013125 	.word	0x24013125

00008820 <__tCrusher_setOperation_veneer>:
    8820:	f85f f000 	ldr.w	pc, [pc]	; 8824 <__tCrusher_setOperation_veneer+0x4>
    8824:	24010265 	.word	0x24010265

00008828 <__tSquareLFO_tick_veneer>:
    8828:	f85f f000 	ldr.w	pc, [pc]	; 882c <__tSquareLFO_tick_veneer+0x4>
    882c:	2401359d 	.word	0x2401359d

00008830 <__tCrusher_setSamplingRatio_veneer>:
    8830:	f85f f000 	ldr.w	pc, [pc]	; 8834 <__tCrusher_setSamplingRatio_veneer+0x4>
    8834:	240102cd 	.word	0x240102cd

00008838 <__tCrusher_tick_veneer>:
    8838:	f85f f000 	ldr.w	pc, [pc]	; 883c <__tCrusher_tick_veneer+0x4>
    883c:	240101e5 	.word	0x240101e5

00008840 <__fasterdbtoa_veneer>:
    8840:	f85f f000 	ldr.w	pc, [pc]	; 8844 <__fasterdbtoa_veneer+0x4>
    8844:	24012d31 	.word	0x24012d31

00008848 <__arm_sin_f32_veneer>:
    8848:	f85f f000 	ldr.w	pc, [pc]	; 884c <__arm_sin_f32_veneer+0x4>
    884c:	24015349 	.word	0x24015349

00008850 <__tSquareLFO_setPulseWidth_veneer>:
    8850:	f85f f000 	ldr.w	pc, [pc]	; 8854 <__tSquareLFO_setPulseWidth_veneer+0x4>
    8854:	24013615 	.word	0x24013615

00008858 <__tSimpleLivingString3_free_veneer>:
    8858:	f85f f000 	ldr.w	pc, [pc]	; 885c <__tSimpleLivingString3_free_veneer+0x4>
    885c:	24013d11 	.word	0x24013d11

00008860 <__tLinearDelay_setDelay_veneer>:
    8860:	f85f f000 	ldr.w	pc, [pc]	; 8864 <__tLinearDelay_setDelay_veneer+0x4>
    8864:	2400fec5 	.word	0x2400fec5

00008868 <__tSineTriLFO_setShape_veneer>:
    8868:	f85f f000 	ldr.w	pc, [pc]	; 886c <__tSineTriLFO_setShape_veneer+0x4>
    886c:	24013a79 	.word	0x24013a79

00008870 <__tVZFilter_tickEfficient_veneer>:
    8870:	f85f f000 	ldr.w	pc, [pc]	; 8874 <__tVZFilter_tickEfficient_veneer+0x4>
    8874:	24011161 	.word	0x24011161

00008878 <__tSimpleLivingString3_setFreq_veneer>:
    8878:	f85f f000 	ldr.w	pc, [pc]	; 887c <__tSimpleLivingString3_setFreq_veneer+0x4>
    887c:	24013d59 	.word	0x24013d59

00008880 <__HAL_RNG_GenerateRandomNumber_veneer>:
    8880:	f85f f000 	ldr.w	pc, [pc]	; 8884 <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    8884:	24009349 	.word	0x24009349

00008888 <__tTriLFO_setFreq_veneer>:
    8888:	f85f f000 	ldr.w	pc, [pc]	; 888c <__tTriLFO_setFreq_veneer+0x4>
    888c:	240138bd 	.word	0x240138bd

00008890 <__tADSRT_setSustain_veneer>:
    8890:	f85f f000 	ldr.w	pc, [pc]	; 8894 <__tADSRT_setSustain_veneer+0x4>
    8894:	24010685 	.word	0x24010685

00008898 <__tADSRT_tickNoInterp_veneer>:
    8898:	f85f f000 	ldr.w	pc, [pc]	; 889c <__tADSRT_tickNoInterp_veneer+0x4>
    889c:	240109f5 	.word	0x240109f5

000088a0 <__tanhf_veneer>:
    88a0:	f85f f000 	ldr.w	pc, [pc]	; 88a4 <__tanhf_veneer+0x4>
    88a4:	24015fc1 	.word	0x24015fc1

000088a8 <__faster_mtof_veneer>:
    88a8:	f85f f000 	ldr.w	pc, [pc]	; 88ac <__faster_mtof_veneer+0x4>
    88ac:	24012c89 	.word	0x24012c89

000088b0 <__tLadderFilter_setFreqFast_veneer>:
    88b0:	f85f f000 	ldr.w	pc, [pc]	; 88b4 <__tLadderFilter_setFreqFast_veneer+0x4>
    88b4:	24012699 	.word	0x24012699

000088b8 <__tLivingString2_setPickPos_veneer>:
    88b8:	f85f f000 	ldr.w	pc, [pc]	; 88bc <__tLivingString2_setPickPos_veneer+0x4>
    88bc:	240144b9 	.word	0x240144b9

000088c0 <__tLivingString2_setLevStrength_veneer>:
    88c0:	f85f f000 	ldr.w	pc, [pc]	; 88c4 <__tLivingString2_setLevStrength_veneer+0x4>
    88c4:	24014645 	.word	0x24014645

000088c8 <__tHighpass_tick_veneer>:
    88c8:	f85f f000 	ldr.w	pc, [pc]	; 88cc <__tHighpass_tick_veneer+0x4>
    88cc:	2401111d 	.word	0x2401111d

000088d0 <__tSawSquareLFO_setPhase_veneer>:
    88d0:	f85f f000 	ldr.w	pc, [pc]	; 88d4 <__tSawSquareLFO_setPhase_veneer+0x4>
    88d4:	240137c9 	.word	0x240137c9

000088d8 <__tLivingString2_tick_veneer>:
    88d8:	f85f f000 	ldr.w	pc, [pc]	; 88dc <__tLivingString2_tick_veneer+0x4>
    88dc:	24014689 	.word	0x24014689

000088e0 <__tSVF_setFreqFast_veneer>:
    88e0:	f85f f000 	ldr.w	pc, [pc]	; 88e4 <__tSVF_setFreqFast_veneer+0x4>
    88e4:	24010fd5 	.word	0x24010fd5

000088e8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    88e8:	f85f f000 	ldr.w	pc, [pc]	; 88ec <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    88ec:	2401414d 	.word	0x2401414d

000088f0 <__tSimpleLivingString3_tick_veneer>:
    88f0:	f85f f000 	ldr.w	pc, [pc]	; 88f4 <__tSimpleLivingString3_tick_veneer+0x4>
    88f4:	24013fc9 	.word	0x24013fc9

000088f8 <__tIntPhasor_setPhase_veneer>:
    88f8:	f85f f000 	ldr.w	pc, [pc]	; 88fc <__tIntPhasor_setPhase_veneer+0x4>
    88fc:	24013439 	.word	0x24013439

00008900 <__tADSRT_off_veneer>:
    8900:	f85f f000 	ldr.w	pc, [pc]	; 8904 <__tADSRT_off_veneer+0x4>
    8904:	24010721 	.word	0x24010721

00008908 <__setEffectsFunctions_veneer>:
    8908:	f85f f000 	ldr.w	pc, [pc]	; 890c <__setEffectsFunctions_veneer+0x4>
    890c:	24002891 	.word	0x24002891

00008910 <__tSimpleLivingString3_setTargetLev_veneer>:
    8910:	f85f f000 	ldr.w	pc, [pc]	; 8914 <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    8914:	24013e4d 	.word	0x24013e4d

00008918 <__tLivingString2_initToPool_veneer>:
    8918:	f85f f000 	ldr.w	pc, [pc]	; 891c <__tLivingString2_initToPool_veneer+0x4>
    891c:	24014155 	.word	0x24014155

00008920 <__fmod_veneer>:
    8920:	f85f f000 	ldr.w	pc, [pc]	; 8924 <__fmod_veneer+0x4>
    8924:	24016069 	.word	0x24016069

00008928 <__tSineTriLFO_tick_veneer>:
    8928:	f85f f000 	ldr.w	pc, [pc]	; 892c <__tSineTriLFO_tick_veneer+0x4>
    892c:	24013981 	.word	0x24013981

00008930 <__tLivingString2_setPickupPos_veneer>:
    8930:	f85f f000 	ldr.w	pc, [pc]	; 8934 <__tLivingString2_setPickupPos_veneer+0x4>
    8934:	24014501 	.word	0x24014501

00008938 <__tIntPhasor_setFreq_veneer>:
    8938:	f85f f000 	ldr.w	pc, [pc]	; 893c <__tIntPhasor_setFreq_veneer+0x4>
    893c:	24013421 	.word	0x24013421

00008940 <__tADSRT_setAttack_veneer>:
    8940:	f85f f000 	ldr.w	pc, [pc]	; 8944 <__tADSRT_setAttack_veneer+0x4>
    8944:	24010635 	.word	0x24010635

00008948 <__tLadderFilter_setQ_veneer>:
    8948:	f85f f000 	ldr.w	pc, [pc]	; 894c <__tLadderFilter_setQ_veneer+0x4>
    894c:	240126e1 	.word	0x240126e1

00008950 <__arm_fir_interpolate_f32_veneer>:
    8950:	f85f f000 	ldr.w	pc, [pc]	; 8954 <__arm_fir_interpolate_f32_veneer+0x4>
    8954:	24014b59 	.word	0x24014b59

00008958 <__arm_fir_decimate_f32_veneer>:
    8958:	f85f f000 	ldr.w	pc, [pc]	; 895c <__arm_fir_decimate_f32_veneer+0x4>
    895c:	24014fd9 	.word	0x24014fd9

00008960 <__tLadderFilter_tick_veneer>:
    8960:	f85f f000 	ldr.w	pc, [pc]	; 8964 <__tLadderFilter_tick_veneer+0x4>
    8964:	2401244d 	.word	0x2401244d

00008968 <__tLivingString2_free_veneer>:
    8968:	f85f f000 	ldr.w	pc, [pc]	; 896c <__tLivingString2_free_veneer+0x4>
    896c:	240143ed 	.word	0x240143ed

00008970 <__tLivingString2_setPrepPos_veneer>:
    8970:	f85f f000 	ldr.w	pc, [pc]	; 8974 <__tLivingString2_setPrepPos_veneer+0x4>
    8974:	240144dd 	.word	0x240144dd

00008978 <__tSimpleLivingString3_setDampFreq_veneer>:
    8978:	f85f f000 	ldr.w	pc, [pc]	; 897c <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    897c:	24013df9 	.word	0x24013df9

00008980 <__tSquareLFO_setFreq_veneer>:
    8980:	f85f f000 	ldr.w	pc, [pc]	; 8984 <__tSquareLFO_setFreq_veneer+0x4>
    8984:	240135e5 	.word	0x240135e5

00008988 <__tLinearDelay_tick_veneer>:
    8988:	f85f f000 	ldr.w	pc, [pc]	; 898c <__tLinearDelay_tick_veneer+0x4>
    898c:	2400fdd5 	.word	0x2400fdd5

00008990 <__LEAF_poly_blep_veneer>:
    8990:	f85f f000 	ldr.w	pc, [pc]	; 8994 <__LEAF_poly_blep_veneer+0x4>
    8994:	24012aed 	.word	0x24012aed

00008998 <__tPBPulse_setWidth_veneer>:
    8998:	f85f f000 	ldr.w	pc, [pc]	; 899c <__tPBPulse_setWidth_veneer+0x4>
    899c:	240132c1 	.word	0x240132c1

000089a0 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    89a0:	f85f f000 	ldr.w	pc, [pc]	; 89a4 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    89a4:	24013e55 	.word	0x24013e55

000089a8 <__tADSRT_setLeakFactor_veneer>:
    89a8:	f85f f000 	ldr.w	pc, [pc]	; 89ac <__tADSRT_setLeakFactor_veneer+0x4>
    89ac:	240106d9 	.word	0x240106d9

000089b0 <__tADSRT_tick_veneer>:
    89b0:	f85f f000 	ldr.w	pc, [pc]	; 89b4 <__tADSRT_tick_veneer+0x4>
    89b4:	24010731 	.word	0x24010731

000089b8 <__tVZFilter_setFreq_veneer>:
    89b8:	f85f f000 	ldr.w	pc, [pc]	; 89bc <__tVZFilter_setFreq_veneer+0x4>
    89bc:	2401156d 	.word	0x2401156d

000089c0 <__tDiodeFilter_setQ_veneer>:
    89c0:	f85f f000 	ldr.w	pc, [pc]	; 89c4 <__tDiodeFilter_setQ_veneer+0x4>
    89c4:	2401239d 	.word	0x2401239d

000089c8 <__tCycle_setFreq_veneer>:
    89c8:	f85f f000 	ldr.w	pc, [pc]	; 89cc <__tCycle_setFreq_veneer+0x4>
    89cc:	24013171 	.word	0x24013171

000089d0 <__fasterexpf_veneer>:
    89d0:	f85f f000 	ldr.w	pc, [pc]	; 89d4 <__fasterexpf_veneer+0x4>
    89d4:	2401277d 	.word	0x2401277d

000089d8 <__tCrusher_setQuality_veneer>:
    89d8:	f85f f000 	ldr.w	pc, [pc]	; 89dc <__tCrusher_setQuality_veneer+0x4>
    89dc:	24010279 	.word	0x24010279

000089e0 <__LEAF_tanh_veneer>:
    89e0:	f85f f000 	ldr.w	pc, [pc]	; 89e4 <__LEAF_tanh_veneer+0x4>
    89e4:	240128a5 	.word	0x240128a5

000089e8 <__memset_veneer>:
    89e8:	f85f f000 	ldr.w	pc, [pc]	; 89ec <__memset_veneer+0x4>
    89ec:	24015479 	.word	0x24015479

000089f0 <__tIntPhasor_tick_veneer>:
    89f0:	f85f f000 	ldr.w	pc, [pc]	; 89f4 <__tIntPhasor_tick_veneer+0x4>
    89f4:	24013401 	.word	0x24013401

000089f8 <__tNoise_tick_veneer>:
    89f8:	f85f f000 	ldr.w	pc, [pc]	; 89fc <__tNoise_tick_veneer+0x4>
    89fc:	24013331 	.word	0x24013331

00008a00 <__tCycle_setPhase_veneer>:
    8a00:	f85f f000 	ldr.w	pc, [pc]	; 8a04 <__tCycle_setPhase_veneer+0x4>
    8a04:	24013189 	.word	0x24013189

00008a08 <__tSimpleLivingString3_initToPool_veneer>:
    8a08:	f85f f000 	ldr.w	pc, [pc]	; 8a0c <__tSimpleLivingString3_initToPool_veneer+0x4>
    8a0c:	24013a81 	.word	0x24013a81

00008a10 <__tLivingString2_setDecay_veneer>:
    8a10:	f85f f000 	ldr.w	pc, [pc]	; 8a14 <__tLivingString2_setDecay_veneer+0x4>
    8a14:	240145c9 	.word	0x240145c9

00008a18 <__tTriLFO_setPhase_veneer>:
    8a18:	f85f f000 	ldr.w	pc, [pc]	; 8a1c <__tTriLFO_setPhase_veneer+0x4>
    8a1c:	240138d5 	.word	0x240138d5

00008a20 <__LEAF_shaper_veneer>:
    8a20:	f85f f000 	ldr.w	pc, [pc]	; 8a24 <__LEAF_shaper_veneer+0x4>
    8a24:	240127dd 	.word	0x240127dd

00008a28 <__tLivingString2_setPrepIndex_veneer>:
    8a28:	f85f f000 	ldr.w	pc, [pc]	; 8a2c <__tLivingString2_setPrepIndex_veneer+0x4>
    8a2c:	24014525 	.word	0x24014525

00008a30 <__tSawSquareLFO_setFreq_veneer>:
    8a30:	f85f f000 	ldr.w	pc, [pc]	; 8a34 <__tSawSquareLFO_setFreq_veneer+0x4>
    8a34:	24013781 	.word	0x24013781

00008a38 <__tVZFilter_setResonance_veneer>:
    8a38:	f85f f000 	ldr.w	pc, [pc]	; 8a3c <__tVZFilter_setResonance_veneer+0x4>
    8a3c:	24011891 	.word	0x24011891
