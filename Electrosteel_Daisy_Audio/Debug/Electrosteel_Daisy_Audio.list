
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00033b20  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  24033db8  24033db8  00065a28  2**0
                  CONTENTS
  3 .exidx        00000000  24033db8  24033db8  00065a28  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  24033db8  24033db8  00065a28  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  24033db8  24033db8  00043db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  24033dbc  24033dbc  00043dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    000140c0  30000000  30000000  00070000  2**5
                  ALLOC
  8 .sram2_bss    0001c620  30020000  30020000  00070000  2**5
                  ALLOC
  9 .sram3_bss    00000034  38000000  38000000  00070000  2**5
                  ALLOC
 10 .userflash    00000020  38800000  38800000  00070000  2**5
                  ALLOC
 11 .data         00000848  20000000  24033dc0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0001efdc  20000848  24034608  00070848  2**3
                  ALLOC
 13 .dtcmram_bss  00000000  2001f824  2001f824  00065a56  2**0
                  CONTENTS
 14 .itcmram      00005628  00000400  24034608  00060400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    04000000  c0000000  c0000000  00070000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  00065a56  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  00065a56  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  00065a56  2**0
                  CONTENTS
 19 .heap         00000000  2001f824  2001f824  00065a56  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001f824  2001f824  00065a56  2**0
                  CONTENTS
 21 .debug_info   0008887e  00000000  00000000  00065a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000a657  00000000  00000000  000ee2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0007bae0  00000000  00000000  000f892b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00003a90  00000000  00000000  0017440b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00010718  00000000  00000000  00177e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00045097  00000000  00000000  001885b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   00076f51  00000000  00000000  001cd64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    001753b5  00000000  00000000  0024459b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .comment      000000c5  00000000  00000000  003b9950  2**0
                  CONTENTS, READONLY
 30 .debug_frame  0000d118  00000000  00000000  003b9a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000848 	.word	0x20000848
240002b4:	00000000 	.word	0x00000000
240002b8:	00005a28 	.word	0x00005a28

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000084c 	.word	0x2000084c
240002d4:	00005a28 	.word	0x00005a28

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit()
{
24000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000664:	4cf0      	ldr	r4, [pc, #960]	; (24000a28 <audioInit+0x3c8>)
24000666:	ed9f 0af1 	vldr	s0, [pc, #964]	; 24000a2c <audioInit+0x3cc>
2400066a:	4620      	mov	r0, r4
2400066c:	4af0      	ldr	r2, [pc, #960]	; (24000a30 <audioInit+0x3d0>)
2400066e:	49f1      	ldr	r1, [pc, #964]	; (24000a34 <audioInit+0x3d4>)
24000670:	4bf1      	ldr	r3, [pc, #964]	; (24000a38 <audioInit+0x3d8>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000672:	4df2      	ldr	r5, [pc, #968]	; (24000a3c <audioInit+0x3dc>)
{
24000674:	ed2d 8b10 	vpush	{d8-d15}
24000678:	b085      	sub	sp, #20
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400067a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
2400067e:	f018 f859 	bl	24018734 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000682:	4623      	mov	r3, r4
24000684:	4aee      	ldr	r2, [pc, #952]	; (24000a40 <audioInit+0x3e0>)
24000686:	49ef      	ldr	r1, [pc, #956]	; (24000a44 <audioInit+0x3e4>)
24000688:	48ef      	ldr	r0, [pc, #956]	; (24000a48 <audioInit+0x3e8>)
2400068a:	f013 fad9 	bl	24013c40 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
2400068e:	4623      	mov	r3, r4
24000690:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24000694:	49ed      	ldr	r1, [pc, #948]	; (24000a4c <audioInit+0x3ec>)
24000696:	48ee      	ldr	r0, [pc, #952]	; (24000a50 <audioInit+0x3f0>)
24000698:	f013 fad2 	bl	24013c40 <tMempool_init>
	leaf.clearOnAllocation = 1;
2400069c:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
2400069e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006a2:	eddf 1aec 	vldr	s3, [pc, #944]	; 24000a54 <audioInit+0x3f4>
240006a6:	eddf 0aec 	vldr	s1, [pc, #944]	; 24000a58 <audioInit+0x3f8>
240006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006ae:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 24000a5c <audioInit+0x3fc>
240006b2:	48eb      	ldr	r0, [pc, #940]	; (24000a60 <audioInit+0x400>)
	leaf.clearOnAllocation = 1;
240006b4:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b6:	f013 f82f 	bl	24013718 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006ba:	48ea      	ldr	r0, [pc, #936]	; (24000a64 <audioInit+0x404>)
	tCycle_init(&testSine, &leaf);
240006bc:	4621      	mov	r1, r4
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006be:	4bea      	ldr	r3, [pc, #936]	; (24000a68 <audioInit+0x408>)
240006c0:	4aea      	ldr	r2, [pc, #936]	; (24000a6c <audioInit+0x40c>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006c2:	6005      	str	r5, [r0, #0]
	tCycle_init(&testSine, &leaf);
240006c4:	48ea      	ldr	r0, [pc, #936]	; (24000a70 <audioInit+0x410>)
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c6:	601a      	str	r2, [r3, #0]
	tCycle_init(&testSine, &leaf);
240006c8:	f013 fad4 	bl	24013c74 <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006cc:	ed9f 0ae9 	vldr	s0, [pc, #932]	; 24000a74 <audioInit+0x414>
240006d0:	48e7      	ldr	r0, [pc, #924]	; (24000a70 <audioInit+0x410>)
240006d2:	f013 fb2d 	bl	24013d30 <tCycle_setFreq>
		totalGain[0] += partials[i];
240006d6:	4ce8      	ldr	r4, [pc, #928]	; (24000a78 <audioInit+0x418>)
		totalGain[1] += partialsHigh[i];
240006d8:	49e8      	ldr	r1, [pc, #928]	; (24000a7c <audioInit+0x41c>)
		totalGain[0] += partials[i];
240006da:	4ae9      	ldr	r2, [pc, #932]	; (24000a80 <audioInit+0x420>)
		totalGain[1] += partialsHigh[i];
240006dc:	ed94 4a01 	vldr	s8, [r4, #4]
240006e0:	edd1 4a00 	vldr	s9, [r1]
		totalGain[0] += partials[i];
240006e4:	ed92 2a00 	vldr	s4, [r2]
240006e8:	edd4 3a00 	vldr	s7, [r4]
		totalGain[1] += partialsHigh[i];
240006ec:	ee34 4a24 	vadd.f32	s8, s8, s9
240006f0:	ed91 1a01 	vldr	s2, [r1, #4]
		totalGain[0] += partials[i];
240006f4:	ee73 3a82 	vadd.f32	s7, s7, s4
240006f8:	edd2 0a01 	vldr	s1, [r2, #4]
		totalGain[1] += partialsHigh[i];
240006fc:	ee34 4a01 	vadd.f32	s8, s8, s2
24000700:	ed91 3a02 	vldr	s6, [r1, #8]
		totalGain[0] += partials[i];
24000704:	edd2 6a02 	vldr	s13, [r2, #8]
24000708:	ee73 3aa0 	vadd.f32	s7, s7, s1
		totalGain[1] += partialsHigh[i];
2400070c:	ed91 2a03 	vldr	s4, [r1, #12]
24000710:	ee34 4a03 	vadd.f32	s8, s8, s6
		totalGain[0] += partials[i];
24000714:	ed92 5a03 	vldr	s10, [r2, #12]
		totalGain[1] += partialsHigh[i];
24000718:	edd1 4a04 	vldr	s9, [r1, #16]
		totalGain[0] += partials[i];
2400071c:	ee73 3aa6 	vadd.f32	s7, s7, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000720:	4bd8      	ldr	r3, [pc, #864]	; (24000a84 <audioInit+0x424>)
		totalGain[1] += partialsHigh[i];
24000722:	ee34 4a02 	vadd.f32	s8, s8, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000726:	48d8      	ldr	r0, [pc, #864]	; (24000a88 <audioInit+0x428>)
		totalGain[0] += partials[i];
24000728:	edd2 2a04 	vldr	s5, [r2, #16]
2400072c:	ee73 3a85 	vadd.f32	s7, s7, s10
		totalGain[1] += partialsHigh[i];
24000730:	ed91 1a05 	vldr	s2, [r1, #20]
24000734:	ee34 4a24 	vadd.f32	s8, s8, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000738:	edd0 4a00 	vldr	s9, [r0]
		totalGain[0] += partials[i];
2400073c:	ed92 0a05 	vldr	s0, [r2, #20]
24000740:	ee73 3aa2 	vadd.f32	s7, s7, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000744:	edd3 2a00 	vldr	s5, [r3]
		totalGain[1] += partialsHigh[i];
24000748:	ee34 4a01 	vadd.f32	s8, s8, s2
2400074c:	edd1 0a06 	vldr	s1, [r1, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000750:	ee74 4aa2 	vadd.f32	s9, s9, s5
		totalGain[0] += partials[i];
24000754:	edd2 1a06 	vldr	s3, [r2, #24]
24000758:	ee73 3a80 	vadd.f32	s7, s7, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400075c:	ed93 0a01 	vldr	s0, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000760:	ee34 4a20 	vadd.f32	s8, s8, s1
24000764:	edd1 6a07 	vldr	s13, [r1, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000768:	ee74 4a80 	vadd.f32	s9, s9, s0
2400076c:	edd3 2a02 	vldr	s5, [r3, #8]
		totalGain[0] += partials[i];
24000770:	ee73 3aa1 	vadd.f32	s7, s7, s3
		totalGain[1] += partialsHigh[i];
24000774:	ed91 5a08 	vldr	s10, [r1, #32]
24000778:	ee34 4a26 	vadd.f32	s8, s8, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400077c:	edd3 1a03 	vldr	s3, [r3, #12]
24000780:	ee74 4aa2 	vadd.f32	s9, s9, s5
		totalGain[0] += partials[i];
24000784:	edd2 5a07 	vldr	s11, [r2, #28]
24000788:	edd2 7a08 	vldr	s15, [r2, #32]
2400078c:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
24000790:	ee73 3aa5 	vadd.f32	s7, s7, s11
24000794:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000798:	ee74 4aa1 	vadd.f32	s9, s9, s3
		totalGain[1] += partialsHigh[i];
2400079c:	ed91 3a09 	vldr	s6, [r1, #36]	; 0x24
240007a0:	ee34 4a05 	vadd.f32	s8, s8, s10
240007a4:	ed91 2a0a 	vldr	s4, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
240007a8:	ee73 3aa7 	vadd.f32	s7, s7, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ac:	ed93 1a04 	vldr	s2, [r3, #16]
240007b0:	ed93 0a05 	vldr	s0, [r3, #20]
		totalGain[1] += partialsHigh[i];
240007b4:	ee34 4a03 	vadd.f32	s8, s8, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007b8:	ed93 8a06 	vldr	s16, [r3, #24]
240007bc:	ee74 4a81 	vadd.f32	s9, s9, s2
240007c0:	edd3 5a07 	vldr	s11, [r3, #28]
		totalGain[0] += partials[i];
240007c4:	ee73 3a86 	vadd.f32	s7, s7, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007c8:	ed90 5a01 	vldr	s10, [r0, #4]
		totalGain[1] += partialsHigh[i];
240007cc:	ee34 4a02 	vadd.f32	s8, s8, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007d0:	edd3 1a0c 	vldr	s3, [r3, #48]	; 0x30
240007d4:	ee74 4a80 	vadd.f32	s9, s9, s0
240007d8:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
240007dc:	ee73 3a87 	vadd.f32	s7, s7, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007e0:	ee35 5a21 	vadd.f32	s10, s10, s3
240007e4:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
240007e8:	edd3 1a0f 	vldr	s3, [r3, #60]	; 0x3c
240007ec:	ee74 4a88 	vadd.f32	s9, s9, s16
240007f0:	ed93 1a10 	vldr	s2, [r3, #64]	; 0x40
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
240007f4:	ee8b aa23 	vdiv.f32	s20, s22, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007f8:	edd3 0a11 	vldr	s1, [r3, #68]	; 0x44
240007fc:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
24000800:	edd3 2a08 	vldr	s5, [r3, #32]
24000804:	ed93 3a13 	vldr	s6, [r3, #76]	; 0x4c
24000808:	ee35 5a28 	vadd.f32	s10, s10, s17
2400080c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
24000810:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000814:	edd0 5a02 	vldr	s11, [r0, #8]
24000818:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	gainNormalizers[1] = 1.0f / totalGain[1];
2400081c:	eecb 8a04 	vdiv.f32	s17, s22, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000820:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
24000824:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
	gainNormalizers[0] = 1.0f / totalGain[0];
24000828:	4d98      	ldr	r5, [pc, #608]	; (24000a8c <audioInit+0x42c>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400082a:	ee35 5a06 	vadd.f32	s10, s10, s12
2400082e:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
24000832:	ee74 4aa2 	vadd.f32	s9, s9, s5
24000836:	edd3 2a1b 	vldr	s5, [r3, #108]	; 0x6c
2400083a:	ee35 5a21 	vadd.f32	s10, s10, s3
2400083e:	edd3 1a18 	vldr	s3, [r3, #96]	; 0x60
24000842:	ee74 4aa6 	vadd.f32	s9, s9, s13
24000846:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
2400084a:	ee75 5aa1 	vadd.f32	s11, s11, s3
2400084e:	edd3 1a1a 	vldr	s3, [r3, #104]	; 0x68
24000852:	ee35 5a01 	vadd.f32	s10, s10, s2
24000856:	ed93 1a19 	vldr	s2, [r3, #100]	; 0x64
2400085a:	ee74 4aa7 	vadd.f32	s9, s9, s15
2400085e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
24000862:	ee75 5a81 	vadd.f32	s11, s11, s2
24000866:	ed93 1a1d 	vldr	s2, [r3, #116]	; 0x74
2400086a:	ee35 5a20 	vadd.f32	s10, s10, s1
2400086e:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000872:	eecb 9a24 	vdiv.f32	s19, s22, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000876:	ee35 5a00 	vadd.f32	s10, s10, s0
2400087a:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
2400087e:	ee75 5aa1 	vadd.f32	s11, s11, s3
24000882:	edd3 1a21 	vldr	s3, [r3, #132]	; 0x84
24000886:	ee35 5a03 	vadd.f32	s10, s10, s6
2400088a:	ed93 3a1f 	vldr	s6, [r3, #124]	; 0x7c
2400088e:	ee75 5aa2 	vadd.f32	s11, s11, s5
24000892:	edd3 2a22 	vldr	s5, [r3, #136]	; 0x88
24000896:	ee35 5a06 	vadd.f32	s10, s10, s12
2400089a:	ed90 6a03 	vldr	s12, [r0, #12]
2400089e:	ee75 5aa0 	vadd.f32	s11, s11, s1
240008a2:	edd3 0a24 	vldr	s1, [r3, #144]	; 0x90
240008a6:	ee36 6a20 	vadd.f32	s12, s12, s1
240008aa:	ee35 5a02 	vadd.f32	s10, s10, s4
240008ae:	ed93 2a26 	vldr	s4, [r3, #152]	; 0x98
240008b2:	ee75 5a81 	vadd.f32	s11, s11, s2
240008b6:	edd3 0a27 	vldr	s1, [r3, #156]	; 0x9c
240008ba:	ee36 6a27 	vadd.f32	s12, s12, s15
240008be:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
240008c2:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
240008c6:	ee35 5a07 	vadd.f32	s10, s10, s14
240008ca:	ee75 5a80 	vadd.f32	s11, s11, s0
240008ce:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
240008d2:	ee36 6a02 	vadd.f32	s12, s12, s4
240008d6:	ed93 0a2b 	vldr	s0, [r3, #172]	; 0xac
240008da:	ed93 2a2c 	vldr	s4, [r3, #176]	; 0xb0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240008de:	ee8b 9a05 	vdiv.f32	s18, s22, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240008e2:	edd3 aa45 	vldr	s21, [r3, #276]	; 0x114
240008e6:	ee36 6a20 	vadd.f32	s12, s12, s1
240008ea:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
240008ee:	ee75 5a83 	vadd.f32	s11, s11, s6
240008f2:	ed93 3a2d 	vldr	s6, [r3, #180]	; 0xb4
240008f6:	ee36 6a01 	vadd.f32	s12, s12, s2
240008fa:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
240008fe:	ee75 5aa6 	vadd.f32	s11, s11, s13
24000902:	edd0 6a04 	vldr	s13, [r0, #16]
24000906:	ee36 6a27 	vadd.f32	s12, s12, s15
2400090a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
2400090e:	ee76 6a81 	vadd.f32	s13, s13, s2
24000912:	ed93 1a33 	vldr	s2, [r3, #204]	; 0xcc
24000916:	ee75 5aa1 	vadd.f32	s11, s11, s3
2400091a:	edd3 1a32 	vldr	s3, [r3, #200]	; 0xc8
2400091e:	ee36 6a07 	vadd.f32	s12, s12, s14
24000922:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
24000926:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400092a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
2400092e:	ee75 5aa2 	vadd.f32	s11, s11, s5
24000932:	edd3 2a36 	vldr	s5, [r3, #216]	; 0xd8
24000936:	ee36 6a00 	vadd.f32	s12, s12, s0
2400093a:	ed93 0a37 	vldr	s0, [r3, #220]	; 0xdc
2400093e:	ee76 6aa1 	vadd.f32	s13, s13, s3
24000942:	edd3 1a38 	vldr	s3, [r3, #224]	; 0xe0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000946:	ee8b 8a25 	vdiv.f32	s16, s22, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400094a:	ee36 6a02 	vadd.f32	s12, s12, s4
2400094e:	ed93 2a39 	vldr	s4, [r3, #228]	; 0xe4
24000952:	ee76 6a81 	vadd.f32	s13, s13, s2
24000956:	ed93 1a3c 	vldr	s2, [r3, #240]	; 0xf0
2400095a:	ee36 6a03 	vadd.f32	s12, s12, s6
2400095e:	ed90 3a05 	vldr	s6, [r0, #20]
24000962:	ee76 6a87 	vadd.f32	s13, s13, s14
24000966:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
2400096a:	ee33 3a01 	vadd.f32	s6, s6, s2
2400096e:	ed93 1a3d 	vldr	s2, [r3, #244]	; 0xf4
24000972:	ee36 6a20 	vadd.f32	s12, s12, s1
24000976:	edd3 0a3f 	vldr	s1, [r3, #252]	; 0xfc
2400097a:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400097e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
24000982:	ee33 3a01 	vadd.f32	s6, s6, s2
24000986:	ed93 1a42 	vldr	s2, [r3, #264]	; 0x108
2400098a:	ee76 6aa2 	vadd.f32	s13, s13, s5
2400098e:	edd3 2a40 	vldr	s5, [r3, #256]	; 0x100
24000992:	ee33 3a27 	vadd.f32	s6, s6, s15
24000996:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
2400099a:	ee76 6a80 	vadd.f32	s13, s13, s0
2400099e:	ee33 3a20 	vadd.f32	s6, s6, s1
240009a2:	edd3 0a44 	vldr	s1, [r3, #272]	; 0x110
240009a6:	ee76 6aa1 	vadd.f32	s13, s13, s3
240009aa:	edd3 1a43 	vldr	s3, [r3, #268]	; 0x10c
240009ae:	ee33 3a22 	vadd.f32	s6, s6, s5
240009b2:	edd3 2a46 	vldr	s5, [r3, #280]	; 0x118
240009b6:	ee76 6a82 	vadd.f32	s13, s13, s4
240009ba:	ed90 2a06 	vldr	s4, [r0, #24]
240009be:	ee33 3a27 	vadd.f32	s6, s6, s15
240009c2:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
240009c6:	ed93 0a54 	vldr	s0, [r3, #336]	; 0x150
240009ca:	ee32 2a27 	vadd.f32	s4, s4, s15
240009ce:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
240009d2:	ee76 6a87 	vadd.f32	s13, s13, s14
240009d6:	ed90 7a07 	vldr	s14, [r0, #28]
240009da:	ee33 3a01 	vadd.f32	s6, s6, s2
240009de:	ed93 1a4c 	vldr	s2, [r3, #304]	; 0x130
240009e2:	ee37 7a00 	vadd.f32	s14, s14, s0
240009e6:	ed93 0a60 	vldr	s0, [r3, #384]	; 0x180
240009ea:	ee32 2a27 	vadd.f32	s4, s4, s15
240009ee:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
240009f2:	ee33 3a21 	vadd.f32	s6, s6, s3
240009f6:	edd3 1a55 	vldr	s3, [r3, #340]	; 0x154
240009fa:	ee32 2a27 	vadd.f32	s4, s4, s15
240009fe:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000a02:	ee37 7a21 	vadd.f32	s14, s14, s3
24000a06:	edd3 1a56 	vldr	s3, [r3, #344]	; 0x158
24000a0a:	ee33 3a20 	vadd.f32	s6, s6, s1
24000a0e:	edd3 0a58 	vldr	s1, [r3, #352]	; 0x160
24000a12:	ee32 2a27 	vadd.f32	s4, s4, s15
24000a16:	edd0 7a08 	vldr	s15, [r0, #32]
24000a1a:	ee37 7a21 	vadd.f32	s14, s14, s3
24000a1e:	edd3 1a57 	vldr	s3, [r3, #348]	; 0x15c
24000a22:	ee77 7a80 	vadd.f32	s15, s15, s0
24000a26:	e033      	b.n	24000a90 <audioInit+0x430>
24000a28:	200051f4 	.word	0x200051f4
24000a2c:	473b8000 	.word	0x473b8000
24000a30:	00011d28 	.word	0x00011d28
24000a34:	20005b2c 	.word	0x20005b2c
24000a38:	24004409 	.word	0x24004409
24000a3c:	457ff000 	.word	0x457ff000
24000a40:	000186a0 	.word	0x000186a0
24000a44:	30020000 	.word	0x30020000
24000a48:	20005434 	.word	0x20005434
24000a4c:	c0000000 	.word	0xc0000000
24000a50:	200051f0 	.word	0x200051f0
24000a54:	ba51b717 	.word	0xba51b717
24000a58:	00000000 	.word	0x00000000
24000a5c:	3a83126f 	.word	0x3a83126f
24000a60:	20000fec 	.word	0x20000fec
24000a64:	20004fec 	.word	0x20004fec
24000a68:	20005148 	.word	0x20005148
24000a6c:	3dba2e8c 	.word	0x3dba2e8c
24000a70:	200179bc 	.word	0x200179bc
24000a74:	43dc0000 	.word	0x43dc0000
24000a78:	200179e4 	.word	0x200179e4
24000a7c:	20000144 	.word	0x20000144
24000a80:	200000fc 	.word	0x200000fc
24000a84:	20000394 	.word	0x20000394
24000a88:	200179ec 	.word	0x200179ec
24000a8c:	200050e0 	.word	0x200050e0
24000a90:	ed93 0a4e 	vldr	s0, [r3, #312]	; 0x138
24000a94:	ee73 aa2a 	vadd.f32	s21, s6, s21
24000a98:	ed93 3a61 	vldr	s6, [r3, #388]	; 0x184
24000a9c:	ee37 7a21 	vadd.f32	s14, s14, s3
24000aa0:	edd3 1a62 	vldr	s3, [r3, #392]	; 0x188
24000aa4:	ee32 2a01 	vadd.f32	s4, s4, s2
24000aa8:	ed93 1a4d 	vldr	s2, [r3, #308]	; 0x134
24000aac:	ee77 7a83 	vadd.f32	s15, s15, s6
24000ab0:	ee37 7a20 	vadd.f32	s14, s14, s1
24000ab4:	edd3 0a66 	vldr	s1, [r3, #408]	; 0x198
24000ab8:	ee32 2a01 	vadd.f32	s4, s4, s2
24000abc:	ed93 1a59 	vldr	s2, [r3, #356]	; 0x164
24000ac0:	ee77 7aa1 	vadd.f32	s15, s15, s3
24000ac4:	edd3 1a5a 	vldr	s3, [r3, #360]	; 0x168
24000ac8:	ee37 7a01 	vadd.f32	s14, s14, s2
24000acc:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000ad0:	ee32 3a00 	vadd.f32	s6, s4, s0
24000ad4:	ed93 0a64 	vldr	s0, [r3, #400]	; 0x190
24000ad8:	ee77 7a81 	vadd.f32	s15, s15, s2
24000adc:	ed93 1a5b 	vldr	s2, [r3, #364]	; 0x16c
24000ae0:	ee37 7a21 	vadd.f32	s14, s14, s3
24000ae4:	ed93 2a65 	vldr	s4, [r3, #404]	; 0x194
24000ae8:	edd3 1a4f 	vldr	s3, [r3, #316]	; 0x13c
24000aec:	ee7a aaa2 	vadd.f32	s21, s21, s5
24000af0:	ee77 7a80 	vadd.f32	s15, s15, s0
24000af4:	ee37 7a01 	vadd.f32	s14, s14, s2
24000af8:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
24000afc:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b00:	edd3 1a51 	vldr	s3, [r3, #324]	; 0x144
24000b04:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b08:	ed93 2a5c 	vldr	s4, [r3, #368]	; 0x170
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b0c:	ee8b 0a06 	vdiv.f32	s0, s22, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b10:	ee37 7a02 	vadd.f32	s14, s14, s4
24000b14:	ed93 2a5e 	vldr	s4, [r3, #376]	; 0x178
24000b18:	ee77 7aa0 	vadd.f32	s15, s15, s1
24000b1c:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
24000b20:	ee37 7a01 	vadd.f32	s14, s14, s2
24000b24:	ed93 1a52 	vldr	s2, [r3, #328]	; 0x148
24000b28:	ee33 3a20 	vadd.f32	s6, s6, s1
24000b2c:	edd3 2a67 	vldr	s5, [r3, #412]	; 0x19c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b30:	eecb 0a26 	vdiv.f32	s1, s22, s13
24000b34:	edc4 3a00 	vstr	s7, [r4]
24000b38:	ed84 4a01 	vstr	s8, [r4, #4]
24000b3c:	edc0 4a00 	vstr	s9, [r0]
24000b40:	4ce7      	ldr	r4, [pc, #924]	; (24000ee0 <audioInit+0x880>)
24000b42:	ed80 5a01 	vstr	s10, [r0, #4]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b46:	ee77 7aa2 	vadd.f32	s15, s15, s5
24000b4a:	edd3 2a6a 	vldr	s5, [r3, #424]	; 0x1a8
24000b4e:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b52:	edd3 1a68 	vldr	s3, [r3, #416]	; 0x1a0
24000b56:	ee37 7a02 	vadd.f32	s14, s14, s4
24000b5a:	ed93 2a69 	vldr	s4, [r3, #420]	; 0x1a4
24000b5e:	ee77 7aa1 	vadd.f32	s15, s15, s3
24000b62:	edc0 5a02 	vstr	s11, [r0, #8]
24000b66:	ee33 3a01 	vadd.f32	s6, s6, s2
24000b6a:	ed80 6a03 	vstr	s12, [r0, #12]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b6e:	ee8b 1a2a 	vdiv.f32	s2, s22, s21
24000b72:	edc0 6a04 	vstr	s13, [r0, #16]
24000b76:	edc0 aa05 	vstr	s21, [r0, #20]
24000b7a:	ed80 3a06 	vstr	s6, [r0, #24]
24000b7e:	ed80 7a07 	vstr	s14, [r0, #28]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000b82:	ed85 aa00 	vstr	s20, [r5]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b86:	ee77 7a82 	vadd.f32	s15, s15, s4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b8a:	edc4 9a00 	vstr	s19, [r4]
24000b8e:	eecb 1a03 	vdiv.f32	s3, s22, s6
24000b92:	ed84 9a01 	vstr	s18, [r4, #4]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000b96:	edc5 8a01 	vstr	s17, [r5, #4]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b9a:	ed84 8a02 	vstr	s16, [r4, #8]
24000b9e:	ed84 0a03 	vstr	s0, [r4, #12]
24000ba2:	edc4 0a04 	vstr	s1, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000ba6:	ee77 7aa2 	vadd.f32	s15, s15, s5
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000baa:	ee8b 2a07 	vdiv.f32	s4, s22, s14
24000bae:	edc0 7a08 	vstr	s15, [r0, #32]
24000bb2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
24000bb6:	ed84 1a05 	vstr	s2, [r4, #20]
24000bba:	eecb 2a27 	vdiv.f32	s5, s22, s15
24000bbe:	edc4 1a06 	vstr	s3, [r4, #24]
24000bc2:	ed84 2a07 	vstr	s4, [r4, #28]
24000bc6:	edc4 2a08 	vstr	s5, [r4, #32]
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000bca:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
24000bce:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000bd2:	ee69 7aa7 	vmul.f32	s15, s19, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000bd6:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
24000bda:	ee2a 3a03 	vmul.f32	s6, s20, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000bde:	ee68 3aa3 	vmul.f32	s7, s17, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000be2:	ece3 7a01 	vstmia	r3!, {s15}
24000be6:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000bea:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000bee:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000bf2:	ee24 4a09 	vmul.f32	s8, s8, s18
24000bf6:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000bfa:	ee64 4a88 	vmul.f32	s9, s9, s16
24000bfe:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000c02:	ee25 5a00 	vmul.f32	s10, s10, s0
24000c06:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000c0a:	ee65 5aa0 	vmul.f32	s11, s11, s1
24000c0e:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000c12:	ee26 6a01 	vmul.f32	s12, s12, s2
24000c16:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000c1a:	ee66 6aa1 	vmul.f32	s13, s13, s3
24000c1e:	ee27 7a02 	vmul.f32	s14, s14, s4
			partials[i] = partials[i] * gainNormalizers[0];
24000c22:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c26:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c2a:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c2c:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c30:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000c34:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000c38:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000c3c:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000c40:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000c44:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000c48:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000c4c:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c50:	d1bb      	bne.n	24000bca <audioInit+0x56a>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000c52:	4ba4      	ldr	r3, [pc, #656]	; (24000ee4 <audioInit+0x884>)
24000c54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000c58:	4ca3      	ldr	r4, [pc, #652]	; (24000ee8 <audioInit+0x888>)
24000c5a:	ed93 8a01 	vldr	s16, [r3, #4]
24000c5e:	ed93 0a04 	vldr	s0, [r3, #16]
24000c62:	f104 082c 	add.w	r8, r4, #44	; 0x2c
24000c66:	edd3 0a07 	vldr	s1, [r3, #28]
24000c6a:	edd3 9a00 	vldr	s19, [r3]
24000c6e:	ed93 6a02 	vldr	s12, [r3, #8]
24000c72:	ed93 9a03 	vldr	s18, [r3, #12]
24000c76:	ee78 4a69 	vsub.f32	s9, s16, s19
24000c7a:	edd3 6a05 	vldr	s13, [r3, #20]
24000c7e:	ee36 6a48 	vsub.f32	s12, s12, s16
24000c82:	edd3 8a06 	vldr	s17, [r3, #24]
24000c86:	ee30 5a49 	vsub.f32	s10, s0, s18
24000c8a:	ed93 7a08 	vldr	s14, [r3, #32]
24000c8e:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000c92:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000c96:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 24000f68 <audioInit+0x908>
24000c9a:	ee37 7a60 	vsub.f32	s14, s14, s1
24000c9e:	4f93      	ldr	r7, [pc, #588]	; (24000eec <audioInit+0x88c>)
24000ca0:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000ca4:	4e92      	ldr	r6, [pc, #584]	; (24000ef0 <audioInit+0x890>)
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000ca6:	eddf aa93 	vldr	s21, [pc, #588]	; 24000ef4 <audioInit+0x894>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000caa:	ed9f aa93 	vldr	s20, [pc, #588]	; 24000ef8 <audioInit+0x898>
24000cae:	4b93      	ldr	r3, [pc, #588]	; (24000efc <audioInit+0x89c>)
24000cb0:	4893      	ldr	r0, [pc, #588]	; (24000f00 <audioInit+0x8a0>)
24000cb2:	ee87 da86 	vdiv.f32	s26, s15, s12
24000cb6:	4993      	ldr	r1, [pc, #588]	; (24000f04 <audioInit+0x8a4>)
24000cb8:	4a93      	ldr	r2, [pc, #588]	; (24000f08 <audioInit+0x8a8>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000cba:	4d94      	ldr	r5, [pc, #592]	; (24000f0c <audioInit+0x8ac>)
24000cbc:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000cc0:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000cc4:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000cc8:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000ccc:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000cd0:	3304      	adds	r3, #4
24000cd2:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000cd6:	ecb5 2a01 	vldmia	r5!, {s4}
24000cda:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cde:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000ce2:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000ce6:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
24000cea:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cec:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000cf0:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000cf4:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000cf8:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cfc:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24000d00:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24000d04:	ee87 2aa2 	vdiv.f32	s4, s15, s5
24000d08:	eec7 4a85 	vdiv.f32	s9, s15, s10
24000d0c:	eec7 faa3 	vdiv.f32	s31, s15, s7
24000d10:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24000d14:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d18:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d1c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24000d20:	eec7 6a87 	vdiv.f32	s13, s15, s14
24000d24:	ee87 7a83 	vdiv.f32	s14, s15, s6
24000d28:	ee74 1a42 	vsub.f32	s3, s8, s4
24000d2c:	ee35 3a63 	vsub.f32	s6, s10, s7
24000d30:	ee74 2aef 	vsub.f32	s5, s9, s31
24000d34:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d38:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d3c:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d40:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d44:	ece0 1a01 	vstmia	r0!, {s3}
24000d48:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d4c:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d50:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d54:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000d58:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d5c:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d60:	ecec 5a01 	vstmia	ip!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d64:	ee62 2aac 	vmul.f32	s5, s5, s25
24000d68:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
24000d6c:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000d70:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d74:	ee27 7a0b 	vmul.f32	s14, s14, s22
24000d78:	ee23 3a2b 	vmul.f32	s6, s6, s23
24000d7c:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d80:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d84:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d88:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d8c:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d90:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d94:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d98:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d9c:	eca7 fa01 	vstmia	r7!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000da0:	ee28 2a83 	vmul.f32	s4, s17, s6
24000da4:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
24000da8:	ee20 6a87 	vmul.f32	s12, s1, s14
24000dac:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000db0:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000db4:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000db8:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dbc:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dc0:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dc4:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dc8:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000dcc:	ece6 ea01 	vstmia	r6!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dd0:	ee73 3ac2 	vsub.f32	s7, s7, s4
24000dd4:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
24000dd8:	ee35 5a46 	vsub.f32	s10, s10, s12
24000ddc:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
24000de0:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
24000de4:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
24000de8:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
24000dec:	f47f af6e 	bne.w	24000ccc <audioInit+0x66c>
24000df0:	4c47      	ldr	r4, [pc, #284]	; (24000f10 <audioInit+0x8b0>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = randomNumber() + 0.5f;
24000df2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24000df6:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24000dfa:	f003 fb05 	bl	24004408 <randomNumber>
24000dfe:	ee30 0a08 	vadd.f32	s0, s0, s16
24000e02:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
24000e06:	42ac      	cmp	r4, r5
24000e08:	d1f7      	bne.n	24000dfa <audioInit+0x79a>
		}
	//LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
	//LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24000e0e:	4c41      	ldr	r4, [pc, #260]	; (24000f14 <audioInit+0x8b4>)
24000e10:	eddf 0a41 	vldr	s1, [pc, #260]	; 24000f18 <audioInit+0x8b8>
24000e14:	ed9f 0a41 	vldr	s0, [pc, #260]	; 24000f1c <audioInit+0x8bc>
24000e18:	1865      	adds	r5, r4, r1
24000e1a:	4841      	ldr	r0, [pc, #260]	; (24000f20 <audioInit+0x8c0>)
24000e1c:	f012 fce0 	bl	240137e0 <LEAF_generate_mtof>

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
24000e20:	ed9f 8a40 	vldr	s16, [pc, #256]	; 24000f24 <audioInit+0x8c4>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
24000e24:	4b40      	ldr	r3, [pc, #256]	; (24000f28 <audioInit+0x8c8>)
24000e26:	4a41      	ldr	r2, [pc, #260]	; (24000f2c <audioInit+0x8cc>)
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000e28:	eddf 9a41 	vldr	s19, [pc, #260]	; 24000f30 <audioInit+0x8d0>
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000e2c:	ed9f 9a41 	vldr	s18, [pc, #260]	; 24000f34 <audioInit+0x8d4>
        x += increment;
24000e30:	eddf 8a41 	vldr	s17, [pc, #260]	; 24000f38 <audioInit+0x8d8>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
24000e34:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000e36:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
24000e3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24000e3e:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
24000e42:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000e46:	ee20 0a29 	vmul.f32	s0, s0, s19
24000e4a:	f012 fd97 	bl	2401397c <ftom>
24000e4e:	ee30 0a49 	vsub.f32	s0, s0, s18
24000e52:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
24000e56:	42ac      	cmp	r4, r5
24000e58:	d1ed      	bne.n	24000e36 <audioInit+0x7d6>
    }


	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24000e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000e5e:	4837      	ldr	r0, [pc, #220]	; (24000f3c <audioInit+0x8dc>)
24000e60:	f006 fb10 	bl	24007484 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24000e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24000e68:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24000e6a:	4834      	ldr	r0, [pc, #208]	; (24000f3c <audioInit+0x8dc>)
24000e6c:	f006 fb0a 	bl	24007484 <HAL_GPIO_ReadPin>
24000e70:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24000e72:	2104      	movs	r1, #4
24000e74:	4832      	ldr	r0, [pc, #200]	; (24000f40 <audioInit+0x8e0>)
24000e76:	f006 fb05 	bl	24007484 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
24000e7a:	4b32      	ldr	r3, [pc, #200]	; (24000f44 <audioInit+0x8e4>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24000e7c:	00a4      	lsls	r4, r4, #2
24000e7e:	4932      	ldr	r1, [pc, #200]	; (24000f48 <audioInit+0x8e8>)
	if (numStrings == 6)
24000e80:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24000e82:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	if (numStrings == 6)
24000e86:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24000e88:	4418      	add	r0, r3
24000e8a:	b2c3      	uxtb	r3, r0
24000e8c:	700b      	strb	r3, [r1, #0]
	if (numStrings == 6)
24000e8e:	f000 83db 	beq.w	24001648 <audioInit+0xfe8>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000e92:	2a0a      	cmp	r2, #10
24000e94:	f000 83cd 	beq.w	24001632 <audioInit+0xfd2>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e98:	005b      	lsls	r3, r3, #1
24000e9a:	482c      	ldr	r0, [pc, #176]	; (24000f4c <audioInit+0x8ec>)
		numStringsThisBoard = 2;
24000e9c:	4a2c      	ldr	r2, [pc, #176]	; (24000f50 <audioInit+0x8f0>)
24000e9e:	2102      	movs	r1, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ea0:	6003      	str	r3, [r0, #0]
		numStringsThisBoard = 2;
24000ea2:	7011      	strb	r1, [r2, #0]
24000ea4:	4b2b      	ldr	r3, [pc, #172]	; (24000f54 <audioInit+0x8f4>)
    float x = 0.0f;
24000ea6:	f04f 0900 	mov.w	r9, #0
24000eaa:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 24000f6c <audioInit+0x90c>
24000eae:	9300      	str	r3, [sp, #0]
24000eb0:	4b29      	ldr	r3, [pc, #164]	; (24000f58 <audioInit+0x8f8>)
		tSlide_init(&freqSlider[i], 2, 2, &leaf);

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_initToPool(&additive[i][j], &mediumPool);
			tADSRT_initToPool(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &mediumPool);
24000eb2:	ed9f 9a2a 	vldr	s18, [pc, #168]	; 24000f5c <audioInit+0x8fc>
24000eb6:	9301      	str	r3, [sp, #4]
24000eb8:	4b14      	ldr	r3, [pc, #80]	; (24000f0c <audioInit+0x8ac>)
24000eba:	eddf 8a29 	vldr	s17, [pc, #164]	; 24000f60 <audioInit+0x900>
24000ebe:	f103 082c 	add.w	r8, r3, #44	; 0x2c
24000ec2:	ed9f 8a18 	vldr	s16, [pc, #96]	; 24000f24 <audioInit+0x8c4>
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
24000ec6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
24000eca:	4926      	ldr	r1, [pc, #152]	; (24000f64 <audioInit+0x904>)
24000ecc:	4658      	mov	r0, fp
24000ece:	9e01      	ldr	r6, [sp, #4]
24000ed0:	4d0e      	ldr	r5, [pc, #56]	; (24000f0c <audioInit+0x8ac>)
24000ed2:	eeb0 0a60 	vmov.f32	s0, s1
24000ed6:	9c00      	ldr	r4, [sp, #0]
			tCycle_initToPool(&additive[i][j], &mediumPool);
24000ed8:	f8df a094 	ldr.w	sl, [pc, #148]	; 24000f70 <audioInit+0x910>
24000edc:	e04a      	b.n	24000f74 <audioInit+0x914>
24000ede:	bf00      	nop
24000ee0:	200050e8 	.word	0x200050e8
24000ee4:	20000340 	.word	0x20000340
24000ee8:	200000b4 	.word	0x200000b4
24000eec:	20000f14 	.word	0x20000f14
24000ef0:	20000fa4 	.word	0x20000fa4
24000ef4:	3b84a9fa 	.word	0x3b84a9fa
24000ef8:	42f60000 	.word	0x42f60000
24000efc:	20000190 	.word	0x20000190
24000f00:	20000c94 	.word	0x20000c94
24000f04:	20000b74 	.word	0x20000b74
24000f08:	20000db4 	.word	0x20000db4
24000f0c:	2000006c 	.word	0x2000006c
24000f10:	2000563c 	.word	0x2000563c
24000f14:	30000040 	.word	0x30000040
24000f18:	4323d666 	.word	0x4323d666
24000f1c:	c323d666 	.word	0xc323d666
24000f20:	30004040 	.word	0x30004040
24000f24:	00000000 	.word	0x00000000
24000f28:	2000004c 	.word	0x2000004c
24000f2c:	44124000 	.word	0x44124000
24000f30:	435c0000 	.word	0x435c0000
24000f34:	42640000 	.word	0x42640000
24000f38:	39800801 	.word	0x39800801
24000f3c:	58020400 	.word	0x58020400
24000f40:	58020000 	.word	0x58020000
24000f44:	20000051 	.word	0x20000051
24000f48:	20017b44 	.word	0x20017b44
24000f4c:	20005078 	.word	0x20005078
24000f50:	20000052 	.word	0x20000052
24000f54:	200009d4 	.word	0x200009d4
24000f58:	20000a64 	.word	0x20000a64
24000f5c:	447a0000 	.word	0x447a0000
24000f60:	43160000 	.word	0x43160000
24000f64:	200051f4 	.word	0x200051f4
24000f68:	20000f5c 	.word	0x20000f5c
24000f6c:	20005098 	.word	0x20005098
24000f70:	20005434 	.word	0x20005434
			tADSRT_initToPool(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &mediumPool);
24000f74:	4fdc      	ldr	r7, [pc, #880]	; (240012e8 <audioInit+0xc88>)
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
24000f76:	f010 fde3 	bl	24011b40 <tSlide_init>
			tCycle_initToPool(&additive[i][j], &mediumPool);
24000f7a:	4620      	mov	r0, r4
24000f7c:	4651      	mov	r1, sl
24000f7e:	f012 fe95 	bl	24013cac <tCycle_initToPool>
			tADSRT_initToPool(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &mediumPool);
24000f82:	ecf5 0a01 	vldmia	r5!, {s1}
24000f86:	4630      	mov	r0, r6
24000f88:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f8c:	eef0 1a68 	vmov.f32	s3, s17
24000f90:	4653      	mov	r3, sl
24000f92:	ee60 0a89 	vmul.f32	s1, s1, s18
24000f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000f9a:	eeb0 1a48 	vmov.f32	s2, s16
24000f9e:	4639      	mov	r1, r7
24000fa0:	f010 fa64 	bl	2401146c <tADSRT_initToPool>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000fa4:	4545      	cmp	r5, r8
24000fa6:	f104 0404 	add.w	r4, r4, #4
24000faa:	f106 0604 	add.w	r6, r6, #4
24000fae:	d1e4      	bne.n	24000f7a <audioInit+0x91a>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000fb0:	9b00      	ldr	r3, [sp, #0]
24000fb2:	f109 0912 	add.w	r9, r9, #18
24000fb6:	f10b 0b04 	add.w	fp, fp, #4
24000fba:	3348      	adds	r3, #72	; 0x48
24000fbc:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
24000fc0:	9300      	str	r3, [sp, #0]
24000fc2:	9b01      	ldr	r3, [sp, #4]
24000fc4:	f103 0348 	add.w	r3, r3, #72	; 0x48
24000fc8:	9301      	str	r3, [sp, #4]
24000fca:	f47f af7c 	bne.w	24000ec6 <audioInit+0x866>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fce:	4ec7      	ldr	r6, [pc, #796]	; (240012ec <audioInit+0xc8c>)
24000fd0:	eddf 8ac7 	vldr	s17, [pc, #796]	; 240012f0 <audioInit+0xc90>
24000fd4:	ed9f 8ac7 	vldr	s16, [pc, #796]	; 240012f4 <audioInit+0xc94>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000fd8:	4631      	mov	r1, r6
24000fda:	4cc7      	ldr	r4, [pc, #796]	; (240012f8 <audioInit+0xc98>)
24000fdc:	eef0 0a68 	vmov.f32	s1, s17
24000fe0:	eeb0 0a48 	vmov.f32	s0, s16
24000fe4:	48c5      	ldr	r0, [pc, #788]	; (240012fc <audioInit+0xc9c>)
24000fe6:	f104 0530 	add.w	r5, r4, #48	; 0x30
24000fea:	f010 fd3d 	bl	24011a68 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fee:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
24000ff0:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000ff2:	eef0 0a68 	vmov.f32	s1, s17
24000ff6:	4631      	mov	r1, r6
24000ff8:	eeb0 0a48 	vmov.f32	s0, s16
24000ffc:	f010 fd34 	bl	24011a68 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24001000:	42ac      	cmp	r4, r5
24001002:	d1f4      	bne.n	24000fee <audioInit+0x98e>
24001004:	4cbe      	ldr	r4, [pc, #760]	; (24001300 <audioInit+0xca0>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001006:	4eb9      	ldr	r6, [pc, #740]	; (240012ec <audioInit+0xc8c>)
24001008:	eddf 8ab9 	vldr	s17, [pc, #740]	; 240012f0 <audioInit+0xc90>
2400100c:	f104 0528 	add.w	r5, r4, #40	; 0x28
24001010:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 240012f4 <audioInit+0xc94>
24001014:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24001016:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001018:	eef0 0a68 	vmov.f32	s1, s17
2400101c:	4631      	mov	r1, r6
2400101e:	eeb0 0a48 	vmov.f32	s0, s16
24001022:	f010 fd21 	bl	24011a68 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24001026:	42ac      	cmp	r4, r5
24001028:	d1f4      	bne.n	24001014 <audioInit+0x9b4>
2400102a:	2600      	movs	r6, #0
2400102c:	4bb5      	ldr	r3, [pc, #724]	; (24001304 <audioInit+0xca4>)
2400102e:	f8df b3b8 	ldr.w	fp, [pc, #952]	; 240013e8 <audioInit+0xd88>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
24001032:	4cae      	ldr	r4, [pc, #696]	; (240012ec <audioInit+0xc8c>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001034:	eddf bab4 	vldr	s23, [pc, #720]	; 24001308 <audioInit+0xca8>


		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001038:	ed9f cab4 	vldr	s24, [pc, #720]	; 2400130c <audioInit+0xcac>
2400103c:	eddf 8aad 	vldr	s17, [pc, #692]	; 240012f4 <audioInit+0xc94>
					                                 0.99999f, 0.0f, 0.01f,
					                                 0.01f, 0, &largePool);

		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &largePool);
24001040:	ed9f 9ab3 	vldr	s18, [pc, #716]	; 24001310 <audioInit+0xcb0>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001044:	eddf aab3 	vldr	s21, [pc, #716]	; 24001314 <audioInit+0xcb4>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001048:	e9cd 3600 	strd	r3, r6, [sp]
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
2400104c:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400104e:	ed9f 8ab2 	vldr	s16, [pc, #712]	; 24001318 <audioInit+0xcb8>
			tMBSaw_init(&saw[i][v],  &leaf);
24001052:	4bb2      	ldr	r3, [pc, #712]	; (2400131c <audioInit+0xcbc>)
24001054:	4621      	mov	r1, r4
24001056:	1998      	adds	r0, r3, r6
24001058:	4428      	add	r0, r5
2400105a:	f015 fd69 	bl	24016b30 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
2400105e:	4bb0      	ldr	r3, [pc, #704]	; (24001320 <audioInit+0xcc0>)
24001060:	4621      	mov	r1, r4
24001062:	1998      	adds	r0, r3, r6
24001064:	4428      	add	r0, r5
24001066:	f012 fee1 	bl	24013e2c <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
2400106a:	4bae      	ldr	r3, [pc, #696]	; (24001324 <audioInit+0xcc4>)
2400106c:	4621      	mov	r1, r4
2400106e:	1998      	adds	r0, r3, r6
24001070:	4428      	add	r0, r5
24001072:	f012 fdff 	bl	24013c74 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
24001076:	4bac      	ldr	r3, [pc, #688]	; (24001328 <audioInit+0xcc8>)
24001078:	4621      	mov	r1, r4
2400107a:	1998      	adds	r0, r3, r6
2400107c:	4428      	add	r0, r5
2400107e:	f013 fcad 	bl	240149dc <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
24001082:	4baa      	ldr	r3, [pc, #680]	; (2400132c <audioInit+0xccc>)
24001084:	4621      	mov	r1, r4
24001086:	1998      	adds	r0, r3, r6
24001088:	4428      	add	r0, r5
2400108a:	f016 f80d 	bl	240170a8 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
2400108e:	4ba8      	ldr	r3, [pc, #672]	; (24001330 <audioInit+0xcd0>)
24001090:	4621      	mov	r1, r4
24001092:	1998      	adds	r0, r3, r6
24001094:	4428      	add	r0, r5
24001096:	f014 fccf 	bl	24015a38 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400109a:	4ba6      	ldr	r3, [pc, #664]	; (24001334 <audioInit+0xcd4>)
2400109c:	eef0 0a48 	vmov.f32	s1, s16
240010a0:	4621      	mov	r1, r4
240010a2:	1998      	adds	r0, r3, r6
240010a4:	eeb0 0a6b 	vmov.f32	s0, s23
240010a8:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
240010aa:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
240010ac:	f010 fcdc 	bl	24011a68 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
240010b0:	2d18      	cmp	r5, #24
240010b2:	d1ce      	bne.n	24001052 <audioInit+0x9f2>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010b4:	48a0      	ldr	r0, [pc, #640]	; (24001338 <audioInit+0xcd8>)
240010b6:	eef0 2a4c 	vmov.f32	s5, s24
240010ba:	eef0 1a68 	vmov.f32	s3, s17
240010be:	ed9f 2a93 	vldr	s4, [pc, #588]	; 2400130c <audioInit+0xcac>
240010c2:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 2400133c <audioInit+0xcdc>
240010c6:	2200      	movs	r2, #0
240010c8:	eddf 0a9d 	vldr	s1, [pc, #628]	; 24001340 <audioInit+0xce0>
240010cc:	2104      	movs	r1, #4
240010ce:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 24001344 <audioInit+0xce4>
240010d2:	4430      	add	r0, r6
240010d4:	4b9c      	ldr	r3, [pc, #624]	; (24001348 <audioInit+0xce8>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240010d6:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010d8:	f016 fb82 	bl	240177e0 <tSimpleLivingString3_initToPool>
		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &largePool);
240010dc:	4b9b      	ldr	r3, [pc, #620]	; (2400134c <audioInit+0xcec>)
240010de:	ed9f 3a9c 	vldr	s6, [pc, #624]	; 24001350 <audioInit+0xcf0>
240010e2:	eef0 4a49 	vmov.f32	s9, s18
240010e6:	1998      	adds	r0, r3, r6
240010e8:	eef0 3a68 	vmov.f32	s7, s17
240010ec:	eef0 2a43 	vmov.f32	s5, s6
240010f0:	ed9f 4a87 	vldr	s8, [pc, #540]	; 24001310 <audioInit+0xcb0>
240010f4:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 240012f4 <audioInit+0xc94>
240010f8:	2101      	movs	r1, #1
240010fa:	eddf 1a96 	vldr	s3, [pc, #600]	; 24001354 <audioInit+0xcf4>
240010fe:	f106 0710 	add.w	r7, r6, #16
24001102:	ed9f 1a95 	vldr	s2, [pc, #596]	; 24001358 <audioInit+0xcf8>
24001106:	eddf 0a95 	vldr	s1, [pc, #596]	; 2400135c <audioInit+0xcfc>
2400110a:	4a8f      	ldr	r2, [pc, #572]	; (24001348 <audioInit+0xce8>)
2400110c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 24001360 <audioInit+0xd00>
24001110:	9002      	str	r0, [sp, #8]
24001112:	f016 fea5 	bl	24017e60 <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[v], .99f);
24001116:	ed9f 0a93 	vldr	s0, [pc, #588]	; 24001364 <audioInit+0xd04>
2400111a:	9802      	ldr	r0, [sp, #8]
2400111c:	f017 f84e 	bl	240181bc <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[v], .5f);
24001120:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
24001124:	9802      	ldr	r0, [sp, #8]
24001126:	f017 f805 	bl	24018134 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[v], .4f);
2400112a:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 24001368 <audioInit+0xd08>
2400112e:	9802      	ldr	r0, [sp, #8]
24001130:	f017 f812 	bl	24018158 <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
24001134:	eeb0 0a68 	vmov.f32	s0, s17
24001138:	9802      	ldr	r0, [sp, #8]
2400113a:	f017 f831 	bl	240181a0 <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[v], 1.0f);
2400113e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24001142:	9802      	ldr	r0, [sp, #8]
24001144:	f017 f81a 	bl	2401817c <tLivingString2_setPickupPos>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001148:	4a88      	ldr	r2, [pc, #544]	; (2400136c <audioInit+0xd0c>)
2400114a:	eeb0 1a68 	vmov.f32	s2, s17
2400114e:	4623      	mov	r3, r4
24001150:	eddf 1a87 	vldr	s3, [pc, #540]	; 24001370 <audioInit+0xd10>
24001154:	1990      	adds	r0, r2, r6
24001156:	eddf 0a87 	vldr	s1, [pc, #540]	; 24001374 <audioInit+0xd14>
2400115a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400115e:	ed9f 0a65 	vldr	s0, [pc, #404]	; 240012f4 <audioInit+0xc94>
24001162:	4961      	ldr	r1, [pc, #388]	; (240012e8 <audioInit+0xc88>)
24001164:	f010 f91e 	bl	240113a4 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24001168:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
2400116c:	4622      	mov	r2, r4
2400116e:	ed9f 0a82 	vldr	s0, [pc, #520]	; 24001378 <audioInit+0xd18>
24001172:	2103      	movs	r1, #3
24001174:	4881      	ldr	r0, [pc, #516]	; (2400137c <audioInit+0xd1c>)
24001176:	f011 f9b7 	bl	240124e8 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
2400117a:	4622      	mov	r2, r4
2400117c:	2101      	movs	r1, #1
2400117e:	4880      	ldr	r0, [pc, #512]	; (24001380 <audioInit+0xd20>)
24001180:	eddf 0a74 	vldr	s1, [pc, #464]	; 24001354 <audioInit+0xcf4>
24001184:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 24001384 <audioInit+0xd24>
24001188:	f011 f9ae 	bl	240124e8 <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
2400118c:	4622      	mov	r2, r4
2400118e:	2100      	movs	r1, #0
24001190:	487d      	ldr	r0, [pc, #500]	; (24001388 <audioInit+0xd28>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001192:	eddf 9a7e 	vldr	s19, [pc, #504]	; 2400138c <audioInit+0xd2c>
24001196:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 24001390 <audioInit+0xd30>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
2400119a:	f012 fde7 	bl	24013d6c <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400119e:	4b7d      	ldr	r3, [pc, #500]	; (24001394 <audioInit+0xd34>)
240011a0:	eef0 0a69 	vmov.f32	s1, s19
240011a4:	eeb0 0a48 	vmov.f32	s0, s16
240011a8:	2101      	movs	r1, #1
240011aa:	1958      	adds	r0, r3, r5
240011ac:	4622      	mov	r2, r4
240011ae:	f010 fe2f 	bl	24011e10 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
240011b2:	4b79      	ldr	r3, [pc, #484]	; (24001398 <audioInit+0xd38>)
240011b4:	eef0 0a69 	vmov.f32	s1, s19
240011b8:	4622      	mov	r2, r4
240011ba:	1958      	adds	r0, r3, r5
240011bc:	eeb0 0a48 	vmov.f32	s0, s16
240011c0:	2100      	movs	r1, #0
240011c2:	f010 fe25 	bl	24011e10 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240011c6:	4b75      	ldr	r3, [pc, #468]	; (2400139c <audioInit+0xd3c>)
240011c8:	4622      	mov	r2, r4
240011ca:	eef0 0a69 	vmov.f32	s1, s19
240011ce:	1958      	adds	r0, r3, r5
240011d0:	eeb0 0a48 	vmov.f32	s0, s16
240011d4:	2102      	movs	r1, #2
240011d6:	f010 fe1b 	bl	24011e10 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
240011da:	4b71      	ldr	r3, [pc, #452]	; (240013a0 <audioInit+0xd40>)
240011dc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240011e0:	4621      	mov	r1, r4
240011e2:	1958      	adds	r0, r3, r5
240011e4:	eeb0 0a48 	vmov.f32	s0, s16
240011e8:	f011 fc6e 	bl	24012ac8 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240011ec:	4b6d      	ldr	r3, [pc, #436]	; (240013a4 <audioInit+0xd44>)
240011ee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011f2:	4622      	mov	r2, r4
240011f4:	1958      	adds	r0, r3, r5
240011f6:	eeb0 0a48 	vmov.f32	s0, s16
240011fa:	2105      	movs	r1, #5
240011fc:	f011 f974 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
24001200:	4b69      	ldr	r3, [pc, #420]	; (240013a8 <audioInit+0xd48>)
24001202:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001206:	4622      	mov	r2, r4
24001208:	1958      	adds	r0, r3, r5
2400120a:	eeb0 0a48 	vmov.f32	s0, s16
2400120e:	2106      	movs	r1, #6
24001210:	f011 f96a 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
24001214:	4b65      	ldr	r3, [pc, #404]	; (240013ac <audioInit+0xd4c>)
24001216:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400121a:	4622      	mov	r2, r4
2400121c:	1958      	adds	r0, r3, r5
2400121e:	eeb0 0a48 	vmov.f32	s0, s16
24001222:	2107      	movs	r1, #7
24001224:	f011 f960 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24001228:	4b61      	ldr	r3, [pc, #388]	; (240013b0 <audioInit+0xd50>)
2400122a:	4622      	mov	r2, r4
2400122c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001230:	1958      	adds	r0, r3, r5
24001232:	eeb0 0a48 	vmov.f32	s0, s16
24001236:	2104      	movs	r1, #4
24001238:	f011 f956 	bl	240124e8 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
2400123c:	4b5d      	ldr	r3, [pc, #372]	; (240013b4 <audioInit+0xd54>)
2400123e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001242:	4621      	mov	r1, r4
24001244:	1958      	adds	r0, r3, r5
24001246:	eeb0 0a48 	vmov.f32	s0, s16
2400124a:	f011 ffd1 	bl	240131f0 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400124e:	4b5a      	ldr	r3, [pc, #360]	; (240013b8 <audioInit+0xd58>)
24001250:	eef0 0a4c 	vmov.f32	s1, s24
24001254:	4621      	mov	r1, r4
24001256:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
24001258:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400125a:	eeb0 0a6b 	vmov.f32	s0, s23
2400125e:	f010 fc03 	bl	24011a68 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
24001262:	42af      	cmp	r7, r5
24001264:	d19b      	bne.n	2400119e <audioInit+0xb3e>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001266:	4b55      	ldr	r3, [pc, #340]	; (240013bc <audioInit+0xd5c>)
24001268:	2500      	movs	r5, #0
2400126a:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400126e:	4b54      	ldr	r3, [pc, #336]	; (240013c0 <audioInit+0xd60>)
24001270:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001272:	eb08 0005 	add.w	r0, r8, r5
24001276:	4621      	mov	r1, r4
24001278:	f015 ff64 	bl	24017144 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400127c:	1978      	adds	r0, r7, r5
2400127e:	4621      	mov	r1, r4
24001280:	f015 ffa6 	bl	240171d0 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24001284:	4b4f      	ldr	r3, [pc, #316]	; (240013c4 <audioInit+0xd64>)
24001286:	4621      	mov	r1, r4
24001288:	1998      	adds	r0, r3, r6
2400128a:	4428      	add	r0, r5
2400128c:	f012 fcf2 	bl	24013c74 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
24001290:	4b4d      	ldr	r3, [pc, #308]	; (240013c8 <audioInit+0xd68>)
24001292:	4621      	mov	r1, r4
24001294:	1998      	adds	r0, r3, r6
24001296:	4428      	add	r0, r5
24001298:	f016 f982 	bl	240175a0 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
2400129c:	4b4b      	ldr	r3, [pc, #300]	; (240013cc <audioInit+0xd6c>)
2400129e:	4621      	mov	r1, r4
240012a0:	1998      	adds	r0, r3, r6
240012a2:	4428      	add	r0, r5
240012a4:	f016 f9d4 	bl	24017650 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240012a8:	4b49      	ldr	r3, [pc, #292]	; (240013d0 <audioInit+0xd70>)
240012aa:	4621      	mov	r1, r4
240012ac:	1998      	adds	r0, r3, r6
240012ae:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
240012b0:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240012b2:	f016 f8b9 	bl	24017428 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
240012b6:	2d20      	cmp	r5, #32
240012b8:	d1db      	bne.n	24001272 <audioInit+0xc12>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
240012ba:	4b46      	ldr	r3, [pc, #280]	; (240013d4 <audioInit+0xd74>)
240012bc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
240012c0:	ed9f 0a45 	vldr	s0, [pc, #276]	; 240013d8 <audioInit+0xd78>
240012c4:	2106      	movs	r1, #6
240012c6:	1998      	adds	r0, r3, r6
240012c8:	4622      	mov	r2, r4
240012ca:	f011 f90d 	bl	240124e8 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012ce:	4b43      	ldr	r3, [pc, #268]	; (240013dc <audioInit+0xd7c>)
240012d0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
240012d4:	4622      	mov	r2, r4
240012d6:	1998      	adds	r0, r3, r6
240012d8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 240013e0 <audioInit+0xd80>
240012dc:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012de:	eddf 9a41 	vldr	s19, [pc, #260]	; 240013e4 <audioInit+0xd84>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012e2:	f011 f901 	bl	240124e8 <tVZFilter_init>
240012e6:	e081      	b.n	240013ec <audioInit+0xd8c>
240012e8:	20000fec 	.word	0x20000fec
240012ec:	200051f4 	.word	0x200051f4
240012f0:	3a03126f 	.word	0x3a03126f
240012f4:	00000000 	.word	0x00000000
240012f8:	200051c0 	.word	0x200051c0
240012fc:	20017a40 	.word	0x20017a40
24001300:	200055a4 	.word	0x200055a4
24001304:	20005038 	.word	0x20005038
24001308:	42800000 	.word	0x42800000
2400130c:	3c23d70a 	.word	0x3c23d70a
24001310:	3d4ccccd 	.word	0x3d4ccccd
24001314:	447a0000 	.word	0x447a0000
24001318:	3ca3d70a 	.word	0x3ca3d70a
2400131c:	20005a40 	.word	0x20005a40
24001320:	20005624 	.word	0x20005624
24001324:	20005afc 	.word	0x20005afc
24001328:	20017a18 	.word	0x20017a18
2400132c:	20005a58 	.word	0x20005a58
24001330:	20005b14 	.word	0x20005b14
24001334:	200055cc 	.word	0x200055cc
24001338:	20005318 	.word	0x20005318
2400133c:	3f7fff58 	.word	0x3f7fff58
24001340:	4684d000 	.word	0x4684d000
24001344:	435c0000 	.word	0x435c0000
24001348:	200051f0 	.word	0x200051f0
2400134c:	200179b4 	.word	0x200179b4
24001350:	3f7ff972 	.word	0x3f7ff972
24001354:	3f666666 	.word	0x3f666666
24001358:	3e99999a 	.word	0x3e99999a
2400135c:	3f19999a 	.word	0x3f19999a
24001360:	42c80000 	.word	0x42c80000
24001364:	3f7d70a4 	.word	0x3f7d70a4
24001368:	3ecccccd 	.word	0x3ecccccd
2400136c:	20005038 	.word	0x20005038
24001370:	43480000 	.word	0x43480000
24001374:	42480000 	.word	0x42480000
24001378:	44bb8000 	.word	0x44bb8000
2400137c:	20005494 	.word	0x20005494
24001380:	20005498 	.word	0x20005498
24001384:	44480000 	.word	0x44480000
24001388:	20005478 	.word	0x20005478
2400138c:	3f333333 	.word	0x3f333333
24001390:	44fa0000 	.word	0x44fa0000
24001394:	20005320 	.word	0x20005320
24001398:	2000510c 	.word	0x2000510c
2400139c:	20000afc 	.word	0x20000afc
240013a0:	20004ff0 	.word	0x20004ff0
240013a4:	200009c4 	.word	0x200009c4
240013a8:	200009b4 	.word	0x200009b4
240013ac:	200009a4 	.word	0x200009a4
240013b0:	20000994 	.word	0x20000994
240013b4:	20000984 	.word	0x20000984
240013b8:	20005040 	.word	0x20005040
240013bc:	20005268 	.word	0x20005268
240013c0:	20005248 	.word	0x20005248
240013c4:	200052b8 	.word	0x200052b8
240013c8:	200052f8 	.word	0x200052f8
240013cc:	200052d8 	.word	0x200052d8
240013d0:	20005288 	.word	0x20005288
240013d4:	200054ac 	.word	0x200054ac
240013d8:	42a00000 	.word	0x42a00000
240013dc:	200054b4 	.word	0x200054b4
240013e0:	463b8000 	.word	0x463b8000
240013e4:	3dcccccd 	.word	0x3dcccccd
240013e8:	20005434 	.word	0x20005434
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240013ec:	4ba2      	ldr	r3, [pc, #648]	; (24001678 <audioInit+0x1018>)
240013ee:	9f00      	ldr	r7, [sp, #0]
240013f0:	eeb0 0a6a 	vmov.f32	s0, s21
240013f4:	4622      	mov	r2, r4
240013f6:	eddf 0aa1 	vldr	s1, [pc, #644]	; 2400167c <audioInit+0x101c>
240013fa:	2105      	movs	r1, #5
240013fc:	1998      	adds	r0, r3, r6
240013fe:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001402:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 24001680 <audioInit+0x1020>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001406:	f011 f86f 	bl	240124e8 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
2400140a:	4628      	mov	r0, r5
2400140c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24001410:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24001414:	4623      	mov	r3, r4
24001416:	eef0 0a6a 	vmov.f32	s1, s21
2400141a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400141e:	eeb0 0a69 	vmov.f32	s0, s19
24001422:	4998      	ldr	r1, [pc, #608]	; (24001684 <audioInit+0x1024>)
24001424:	f00f ffbe 	bl	240113a4 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001428:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
2400142a:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
2400142c:	eeb0 0a48 	vmov.f32	s0, s16
24001430:	f010 f8d2 	bl	240115d8 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
24001434:	42af      	cmp	r7, r5
24001436:	d1e8      	bne.n	2400140a <audioInit+0xdaa>
24001438:	4b93      	ldr	r3, [pc, #588]	; (24001688 <audioInit+0x1028>)
2400143a:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
2400143c:	ed9f ba93 	vldr	s22, [pc, #588]	; 2400168c <audioInit+0x102c>
24001440:	eb03 0806 	add.w	r8, r3, r6
24001444:	4b92      	ldr	r3, [pc, #584]	; (24001690 <audioInit+0x1030>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
24001446:	ed9f aa93 	vldr	s20, [pc, #588]	; 24001694 <audioInit+0x1034>
2400144a:	199f      	adds	r7, r3, r6
2400144c:	f106 0320 	add.w	r3, r6, #32
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001450:	eddf 9a91 	vldr	s19, [pc, #580]	; 24001698 <audioInit+0x1038>
24001454:	ed9f 8a91 	vldr	s16, [pc, #580]	; 2400169c <audioInit+0x103c>
24001458:	e9cd b602 	strd	fp, r6, [sp, #8]
2400145c:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
2400145e:	4640      	mov	r0, r8
24001460:	4621      	mov	r1, r4
24001462:	f00f fddd 	bl	24011020 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24001466:	4638      	mov	r0, r7
24001468:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400146c:	4621      	mov	r1, r4
2400146e:	f010 fdc9 	bl	24012004 <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001472:	4b8b      	ldr	r3, [pc, #556]	; (240016a0 <audioInit+0x1040>)
24001474:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001478:	4621      	mov	r1, r4
2400147a:	195e      	adds	r6, r3, r5
2400147c:	4b89      	ldr	r3, [pc, #548]	; (240016a4 <audioInit+0x1044>)
		for (int i = 0; i < NUM_EFFECT; i++)
2400147e:	f108 0808 	add.w	r8, r8, #8
24001482:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001484:	1958      	adds	r0, r3, r5
24001486:	f010 fdbd 	bl	24012004 <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
2400148a:	4b87      	ldr	r3, [pc, #540]	; (240016a8 <audioInit+0x1048>)
2400148c:	eef0 0a4b 	vmov.f32	s1, s22
24001490:	ed9f 0a86 	vldr	s0, [pc, #536]	; 240016ac <audioInit+0x104c>
24001494:	eb03 0a05 	add.w	sl, r3, r5
24001498:	4b85      	ldr	r3, [pc, #532]	; (240016b0 <audioInit+0x1050>)
2400149a:	4622      	mov	r2, r4
2400149c:	2106      	movs	r1, #6
2400149e:	eb03 0905 	add.w	r9, r3, r5
240014a2:	4630      	mov	r0, r6
240014a4:	f011 f820 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
240014a8:	4650      	mov	r0, sl
240014aa:	eef0 0a4b 	vmov.f32	s1, s22
240014ae:	ed9f 0a81 	vldr	s0, [pc, #516]	; 240016b4 <audioInit+0x1054>
240014b2:	4622      	mov	r2, r4
240014b4:	2107      	movs	r1, #7
240014b6:	f011 f817 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
240014ba:	eddf 0a70 	vldr	s1, [pc, #448]	; 2400167c <audioInit+0x101c>
240014be:	4622      	mov	r2, r4
240014c0:	2105      	movs	r1, #5
240014c2:	4648      	mov	r0, r9
240014c4:	eeb0 0a6a 	vmov.f32	s0, s21
240014c8:	f011 f80e 	bl	240124e8 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014cc:	eeb0 0a4a 	vmov.f32	s0, s20
240014d0:	4630      	mov	r0, r6
240014d2:	f011 f9bb 	bl	2401284c <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
240014d6:	4650      	mov	r0, sl
240014d8:	eeb0 0a4a 	vmov.f32	s0, s20
240014dc:	f011 f9b6 	bl	2401284c <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014e0:	eeb0 0a4a 	vmov.f32	s0, s20
240014e4:	4648      	mov	r0, r9
240014e6:	f011 f9b1 	bl	2401284c <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
240014ea:	4b73      	ldr	r3, [pc, #460]	; (240016b8 <audioInit+0x1058>)
240014ec:	4621      	mov	r1, r4
240014ee:	eb03 0a05 	add.w	sl, r3, r5
240014f2:	4b72      	ldr	r3, [pc, #456]	; (240016bc <audioInit+0x105c>)
240014f4:	1958      	adds	r0, r3, r5
240014f6:	f00f fe4f 	bl	24011198 <tCompressor_init>
			tCycle_init(&mod1[i][v], &leaf);
240014fa:	4b71      	ldr	r3, [pc, #452]	; (240016c0 <audioInit+0x1060>)
240014fc:	4621      	mov	r1, r4
240014fe:	4650      	mov	r0, sl
24001500:	eb03 0905 	add.w	r9, r3, r5
24001504:	f012 fbb6 	bl	24013c74 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001508:	4621      	mov	r1, r4
2400150a:	4648      	mov	r0, r9
2400150c:	f012 fbb2 	bl	24013c74 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24001510:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 240016c4 <audioInit+0x1064>
24001514:	4650      	mov	r0, sl
24001516:	f012 fc0b 	bl	24013d30 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
2400151a:	4648      	mov	r0, r9
2400151c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 240016c8 <audioInit+0x1068>
24001520:	f012 fc06 	bl	24013d30 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001524:	4b69      	ldr	r3, [pc, #420]	; (240016cc <audioInit+0x106c>)
24001526:	eef0 0a69 	vmov.f32	s1, s19
2400152a:	4622      	mov	r2, r4
2400152c:	1958      	adds	r0, r3, r5
2400152e:	eeb0 0a48 	vmov.f32	s0, s16
24001532:	2101      	movs	r1, #1
24001534:	f010 fc6c 	bl	24011e10 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001538:	4b65      	ldr	r3, [pc, #404]	; (240016d0 <audioInit+0x1070>)
2400153a:	eef0 0a69 	vmov.f32	s1, s19
2400153e:	4622      	mov	r2, r4
24001540:	1958      	adds	r0, r3, r5
24001542:	eeb0 0a48 	vmov.f32	s0, s16
24001546:	2100      	movs	r1, #0
24001548:	f010 fc62 	bl	24011e10 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
2400154c:	4b61      	ldr	r3, [pc, #388]	; (240016d4 <audioInit+0x1074>)
2400154e:	4622      	mov	r2, r4
24001550:	eef0 0a69 	vmov.f32	s1, s19
24001554:	1958      	adds	r0, r3, r5
24001556:	eeb0 0a48 	vmov.f32	s0, s16
2400155a:	2102      	movs	r1, #2
2400155c:	f010 fc58 	bl	24011e10 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
24001560:	4b5d      	ldr	r3, [pc, #372]	; (240016d8 <audioInit+0x1078>)
24001562:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001566:	4621      	mov	r1, r4
24001568:	1958      	adds	r0, r3, r5
2400156a:	eeb0 0a48 	vmov.f32	s0, s16
2400156e:	f011 faab 	bl	24012ac8 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
24001572:	4b5a      	ldr	r3, [pc, #360]	; (240016dc <audioInit+0x107c>)
24001574:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001578:	4622      	mov	r2, r4
2400157a:	1958      	adds	r0, r3, r5
2400157c:	eeb0 0a48 	vmov.f32	s0, s16
24001580:	2105      	movs	r1, #5
24001582:	f010 ffb1 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
24001586:	4b56      	ldr	r3, [pc, #344]	; (240016e0 <audioInit+0x1080>)
24001588:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400158c:	4622      	mov	r2, r4
2400158e:	1958      	adds	r0, r3, r5
24001590:	eeb0 0a48 	vmov.f32	s0, s16
24001594:	2106      	movs	r1, #6
24001596:	f010 ffa7 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
2400159a:	4b52      	ldr	r3, [pc, #328]	; (240016e4 <audioInit+0x1084>)
2400159c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015a0:	4622      	mov	r2, r4
240015a2:	1958      	adds	r0, r3, r5
240015a4:	eeb0 0a48 	vmov.f32	s0, s16
240015a8:	2107      	movs	r1, #7
240015aa:	f010 ff9d 	bl	240124e8 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240015ae:	4b4e      	ldr	r3, [pc, #312]	; (240016e8 <audioInit+0x1088>)
240015b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015b4:	4622      	mov	r2, r4
240015b6:	1958      	adds	r0, r3, r5
240015b8:	eeb0 0a48 	vmov.f32	s0, s16
240015bc:	2104      	movs	r1, #4
240015be:	f010 ff93 	bl	240124e8 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240015c2:	4b4a      	ldr	r3, [pc, #296]	; (240016ec <audioInit+0x108c>)
240015c4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015c8:	4621      	mov	r1, r4
240015ca:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
240015cc:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240015ce:	eeb0 0a48 	vmov.f32	s0, s16
240015d2:	f011 fe0d 	bl	240131f0 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
240015d6:	45ab      	cmp	fp, r5
240015d8:	f47f af41 	bne.w	2400145e <audioInit+0xdfe>
240015dc:	e9dd b602 	ldrd	fp, r6, [sp, #8]
240015e0:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
240015e4:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
240015e6:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
240015e8:	eef0 0a49 	vmov.f32	s1, s18
240015ec:	4621      	mov	r1, r4
240015ee:	eeb0 0a68 	vmov.f32	s0, s17
240015f2:	f010 fa39 	bl	24011a68 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
240015f6:	455d      	cmp	r5, fp
240015f8:	d1f4      	bne.n	240015e4 <audioInit+0xf84>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240015fa:	9b00      	ldr	r3, [sp, #0]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
240015fc:	2102      	movs	r1, #2
240015fe:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001600:	f10b 0b04 	add.w	fp, fp, #4
24001604:	3304      	adds	r3, #4
24001606:	9300      	str	r3, [sp, #0]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24001608:	4b39      	ldr	r3, [pc, #228]	; (240016f0 <audioInit+0x1090>)
2400160a:	1998      	adds	r0, r3, r6
2400160c:	4623      	mov	r3, r4
2400160e:	f00f fcaf 	bl	24010f70 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001612:	4b38      	ldr	r3, [pc, #224]	; (240016f4 <audioInit+0x1094>)
24001614:	4622      	mov	r2, r4
24001616:	eddf 0a38 	vldr	s1, [pc, #224]	; 240016f8 <audioInit+0x1098>
2400161a:	1998      	adds	r0, r3, r6
2400161c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 240016fc <audioInit+0x109c>
24001620:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001622:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001624:	f010 fbf4 	bl	24011e10 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001628:	9b01      	ldr	r3, [sp, #4]
2400162a:	b99b      	cbnz	r3, 24001654 <audioInit+0xff4>
2400162c:	2301      	movs	r3, #1
2400162e:	9301      	str	r3, [sp, #4]
24001630:	e50c      	b.n	2400104c <audioInit+0x9ec>
		if (boardNumber == 0)
24001632:	b14b      	cbz	r3, 24001648 <audioInit+0xfe8>
		else if (boardNumber == 1)
24001634:	2b01      	cmp	r3, #1
24001636:	d01a      	beq.n	2400166e <audioInit+0x100e>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001638:	3b01      	subs	r3, #1
2400163a:	4a31      	ldr	r2, [pc, #196]	; (24001700 <audioInit+0x10a0>)
			numStringsThisBoard = 2;
2400163c:	4931      	ldr	r1, [pc, #196]	; (24001704 <audioInit+0x10a4>)
2400163e:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001640:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
24001642:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001644:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
24001646:	e42d      	b.n	24000ea4 <audioInit+0x844>
			firstString = 0;
24001648:	482d      	ldr	r0, [pc, #180]	; (24001700 <audioInit+0x10a0>)
			numStringsThisBoard = 1;
2400164a:	2101      	movs	r1, #1
2400164c:	4a2d      	ldr	r2, [pc, #180]	; (24001704 <audioInit+0x10a4>)
			firstString = 0;
2400164e:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
24001650:	7011      	strb	r1, [r2, #0]
24001652:	e427      	b.n	24000ea4 <audioInit+0x844>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
24001654:	2220      	movs	r2, #32
24001656:	2100      	movs	r1, #0
24001658:	482b      	ldr	r0, [pc, #172]	; (24001708 <audioInit+0x10a8>)
2400165a:	f017 f951 	bl	24018900 <memset>
	}
	HAL_Delay(1);
2400165e:	9801      	ldr	r0, [sp, #4]

}
24001660:	b005      	add	sp, #20
24001662:	ecbd 8b10 	vpop	{d8-d15}
24001666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
2400166a:	f004 ba01 	b.w	24005a70 <HAL_Delay>
			firstString = 1;
2400166e:	4924      	ldr	r1, [pc, #144]	; (24001700 <audioInit+0x10a0>)
			numStringsThisBoard = 1;
24001670:	4a24      	ldr	r2, [pc, #144]	; (24001704 <audioInit+0x10a4>)
			firstString = 1;
24001672:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
24001674:	7013      	strb	r3, [r2, #0]
24001676:	e415      	b.n	24000ea4 <audioInit+0x844>
24001678:	2000548c 	.word	0x2000548c
2400167c:	3ff33333 	.word	0x3ff33333
24001680:	3f7fffac 	.word	0x3f7fffac
24001684:	20000fec 	.word	0x20000fec
24001688:	20000b14 	.word	0x20000b14
2400168c:	42000000 	.word	0x42000000
24001690:	20000ed4 	.word	0x20000ed4
24001694:	47bb8000 	.word	0x47bb8000
24001698:	3f333333 	.word	0x3f333333
2400169c:	44fa0000 	.word	0x44fa0000
240016a0:	20005abc 	.word	0x20005abc
240016a4:	20000ef4 	.word	0x20000ef4
240016a8:	20005adc 	.word	0x20005adc
240016ac:	42a00000 	.word	0x42a00000
240016b0:	20000b34 	.word	0x20000b34
240016b4:	463b8000 	.word	0x463b8000
240016b8:	20005438 	.word	0x20005438
240016bc:	20000b54 	.word	0x20000b54
240016c0:	20005458 	.word	0x20005458
240016c4:	3e4ccccd 	.word	0x3e4ccccd
240016c8:	3e638e39 	.word	0x3e638e39
240016cc:	20000964 	.word	0x20000964
240016d0:	20000944 	.word	0x20000944
240016d4:	20000904 	.word	0x20000904
240016d8:	20000924 	.word	0x20000924
240016dc:	200008e4 	.word	0x200008e4
240016e0:	200008c4 	.word	0x200008c4
240016e4:	200008a4 	.word	0x200008a4
240016e8:	20000884 	.word	0x20000884
240016ec:	20000864 	.word	0x20000864
240016f0:	200054c0 	.word	0x200054c0
240016f4:	20005068 	.word	0x20005068
240016f8:	3e99999a 	.word	0x3e99999a
240016fc:	46947000 	.word	0x46947000
24001700:	20005078 	.word	0x20005078
24001704:	20000052 	.word	0x20000052
24001708:	30000000 	.word	0x30000000

2400170c <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
2400170c:	b570      	push	{r4, r5, r6, lr}
2400170e:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001710:	4e0a      	ldr	r6, [pc, #40]	; (2400173c <audioStart+0x30>)
	HAL_Delay(1);
24001712:	2001      	movs	r0, #1
{
24001714:	460c      	mov	r4, r1
	HAL_Delay(1);
24001716:	f004 f9ab 	bl	24005a70 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400171a:	2208      	movs	r2, #8
2400171c:	4631      	mov	r1, r6
2400171e:	4628      	mov	r0, r5
24001720:	f008 fe44 	bl	2400a3ac <HAL_SAI_Transmit_DMA>
24001724:	4b06      	ldr	r3, [pc, #24]	; (24001740 <audioStart+0x34>)
24001726:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001728:	2208      	movs	r2, #8
2400172a:	f106 0120 	add.w	r1, r6, #32
2400172e:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001730:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001732:	f008 fecd 	bl	2400a4d0 <HAL_SAI_Receive_DMA>
24001736:	4b03      	ldr	r3, [pc, #12]	; (24001744 <audioStart+0x38>)
24001738:	7018      	strb	r0, [r3, #0]
}
2400173a:	bd70      	pop	{r4, r5, r6, pc}
2400173c:	30000000 	.word	0x30000000
24001740:	20017a10 	.word	0x20017a10
24001744:	20005a3d 	.word	0x20005a3d

24001748 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};
float pluckPos = 0.5f;

void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
24001748:	4a2c      	ldr	r2, [pc, #176]	; (240017fc <updateStateFromSPIMessage+0xb4>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
2400174a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 24001838 <updateStateFromSPIMessage+0xf0>
	int modeBit = SPI_LEVERS[24 + offset];
2400174e:	1811      	adds	r1, r2, r0
{
24001750:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS[24 + offset];
24001752:	7e0b      	ldrb	r3, [r1, #24]
	voice = SPI_LEVERS[25 + offset];
24001754:	7e49      	ldrb	r1, [r1, #25]
	neck = (modeBit >> 6) & 1;
24001756:	4f2a      	ldr	r7, [pc, #168]	; (24001800 <updateStateFromSPIMessage+0xb8>)
	voice = SPI_LEVERS[25 + offset];
24001758:	f8cc 1000 	str.w	r1, [ip]
	neck = (modeBit >> 6) & 1;
2400175c:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	dualSlider = (modeBit >> 5) & 1;
24001760:	4e28      	ldr	r6, [pc, #160]	; (24001804 <updateStateFromSPIMessage+0xbc>)
	neck = (modeBit >> 6) & 1;
24001762:	f8c7 c000 	str.w	ip, [r7]
	dualSlider = (modeBit >> 5) & 1;
24001766:	f3c3 1740 	ubfx	r7, r3, #5, #1
	edit = (modeBit >> 4) & 1;
2400176a:	4d27      	ldr	r5, [pc, #156]	; (24001808 <updateStateFromSPIMessage+0xc0>)

	if (voice != prevVoice)
2400176c:	4c27      	ldr	r4, [pc, #156]	; (2400180c <updateStateFromSPIMessage+0xc4>)
	dualSlider = (modeBit >> 5) & 1;
2400176e:	6037      	str	r7, [r6, #0]
	edit = (modeBit >> 4) & 1;
24001770:	f3c3 1600 	ubfx	r6, r3, #4, #1
24001774:	602e      	str	r6, [r5, #0]
	if (voice != prevVoice)
24001776:	6825      	ldr	r5, [r4, #0]
24001778:	42a9      	cmp	r1, r5
2400177a:	d005      	beq.n	24001788 <updateStateFromSPIMessage+0x40>
	{
		if ((voice == 63) || (voice == 62) || (voice == 61))
2400177c:	f1a1 053d 	sub.w	r5, r1, #61	; 0x3d
24001780:	2d02      	cmp	r5, #2
24001782:	d834      	bhi.n	240017ee <updateStateFromSPIMessage+0xa6>
		{
			currentActivePreset = voice;
24001784:	4d22      	ldr	r5, [pc, #136]	; (24001810 <updateStateFromSPIMessage+0xc8>)
24001786:	7029      	strb	r1, [r5, #0]
		}

	}
	prevVoice = voice;

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
24001788:	f003 030f 	and.w	r3, r3, #15
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
2400178c:	4410      	add	r0, r2
2400178e:	4a21      	ldr	r2, [pc, #132]	; (24001814 <updateStateFromSPIMessage+0xcc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
24001790:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
24001794:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
24001796:	f890 c01a 	ldrb.w	ip, [r0, #26]
	volumePedal = volumePedalInt * 0.0002442002442f;
2400179a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24001818 <updateStateFromSPIMessage+0xd0>
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
2400179e:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
240017a2:	7ec3      	ldrb	r3, [r0, #27]
	prevVoice = voice;
240017a4:	6021      	str	r1, [r4, #0]
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
240017a6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
240017aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
240017ae:	f890 c01c 	ldrb.w	ip, [r0, #28]
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
240017b2:	b29b      	uxth	r3, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
240017b4:	4c19      	ldr	r4, [pc, #100]	; (2400181c <updateStateFromSPIMessage+0xd4>)
240017b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
240017ba:	4919      	ldr	r1, [pc, #100]	; (24001820 <updateStateFromSPIMessage+0xd8>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
240017bc:	8013      	strh	r3, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
240017be:	8813      	ldrh	r3, [r2, #0]
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
240017c0:	7f42      	ldrb	r2, [r0, #29]
	volumePedal = volumePedalInt * 0.0002442002442f;
240017c2:	b29b      	uxth	r3, r3
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
240017c4:	4817      	ldr	r0, [pc, #92]	; (24001824 <updateStateFromSPIMessage+0xdc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
240017c6:	edc4 7a00 	vstr	s15, [r4]
	volumePedal = volumePedalInt * 0.0002442002442f;
240017ca:	ee00 3a10 	vmov	s0, r3
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
240017ce:	eb02 230c 	add.w	r3, r2, ip, lsl #8
	newBar = 1;
240017d2:	4a15      	ldr	r2, [pc, #84]	; (24001828 <updateStateFromSPIMessage+0xe0>)
	volumePedal = volumePedalInt * 0.0002442002442f;
240017d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[0] = ((uint16_t)SPI_LEVERS[28 + offset] << 8) + ((uint16_t)SPI_LEVERS[29 + offset] & 0xff);
240017d8:	6003      	str	r3, [r0, #0]
	newBar = 1;
240017da:	2301      	movs	r3, #1
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
240017dc:	4813      	ldr	r0, [pc, #76]	; (2400182c <updateStateFromSPIMessage+0xe4>)
	volumePedal = volumePedalInt * 0.0002442002442f;
240017de:	ee20 0a07 	vmul.f32	s0, s0, s14
	newBar = 1;
240017e2:	6013      	str	r3, [r2, #0]
}
240017e4:	bcf0      	pop	{r4, r5, r6, r7}
	volumePedal = volumePedalInt * 0.0002442002442f;
240017e6:	ed81 0a00 	vstr	s0, [r1]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
240017ea:	f010 b995 	b.w	24011b18 <tExpSmooth_setDest>
			presetWaitingToLoad = 1;
240017ee:	4d10      	ldr	r5, [pc, #64]	; (24001830 <updateStateFromSPIMessage+0xe8>)
240017f0:	2601      	movs	r6, #1
240017f2:	602e      	str	r6, [r5, #0]
			presetNumberToLoad = voice;
240017f4:	4d0f      	ldr	r5, [pc, #60]	; (24001834 <updateStateFromSPIMessage+0xec>)
240017f6:	7029      	strb	r1, [r5, #0]
240017f8:	e7c6      	b.n	24001788 <updateStateFromSPIMessage+0x40>
240017fa:	bf00      	nop
240017fc:	30014040 	.word	0x30014040
24001800:	2000547c 	.word	0x2000547c
24001804:	20005000 	.word	0x20005000
24001808:	20005004 	.word	0x20005004
2400180c:	200055f0 	.word	0x200055f0
24001810:	20018b4b 	.word	0x20018b4b
24001814:	20017a3c 	.word	0x20017a3c
24001818:	39800801 	.word	0x39800801
2400181c:	200054bc 	.word	0x200054bc
24001820:	20017a38 	.word	0x20017a38
24001824:	200179a4 	.word	0x200179a4
24001828:	20005480 	.word	0x20005480
2400182c:	20017a40 	.word	0x20017a40
24001830:	2001c7d0 	.word	0x2001c7d0
24001834:	2000074c 	.word	0x2000074c
24001838:	20017a30 	.word	0x20017a30

2400183c <audioTickString>:




float  audioTickString(void)
{
2400183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
24001840:	f8df 9210 	ldr.w	r9, [pc, #528]	; 24001a54 <audioTickString+0x218>
24001844:	4d74      	ldr	r5, [pc, #464]	; (24001a18 <audioTickString+0x1dc>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24001846:	4875      	ldr	r0, [pc, #468]	; (24001a1c <audioTickString+0x1e0>)
24001848:	f8df 820c 	ldr.w	r8, [pc, #524]	; 24001a58 <audioTickString+0x21c>
2400184c:	462c      	mov	r4, r5
2400184e:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
24001852:	ed2d 8b0c 	vpush	{d8-d13}
24001856:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
24001858:	f899 3000 	ldrb.w	r3, [r9]
{
2400185c:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
2400185e:	009b      	lsls	r3, r3, #2
24001860:	3307      	adds	r3, #7
24001862:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
24001866:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
2400186a:	f010 f959 	bl	24011b20 <tExpSmooth_tick>
2400186e:	eeb0 ba40 	vmov.f32	s22, s0
	float note[numStringsThisBoard];
24001872:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001874:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
24001876:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
2400187a:	f010 f951 	bl	24011b20 <tExpSmooth_tick>
2400187e:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
24001882:	4554      	cmp	r4, sl
24001884:	d1f6      	bne.n	24001874 <audioTickString+0x38>
	}
	pluckPos = knobScaled[9];
24001886:	4a66      	ldr	r2, [pc, #408]	; (24001a20 <audioTickString+0x1e4>)
24001888:	6a69      	ldr	r1, [r5, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
2400188a:	f899 3000 	ldrb.w	r3, [r9]
	float temp = 0.0f;
2400188e:	eddf 9a65 	vldr	s19, [pc, #404]	; 24001a24 <audioTickString+0x1e8>
	pluckPos = knobScaled[9];
24001892:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
24001894:	2b00      	cmp	r3, #0
24001896:	f000 8088 	beq.w	240019aa <audioTickString+0x16e>
2400189a:	4b63      	ldr	r3, [pc, #396]	; (24001a28 <audioTickString+0x1ec>)
		float finalFreq = mtof(note[i]) * invMapping[i] ;
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
2400189c:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
		if (note[i] < 0.0f)
240018a0:	eef0 aa69 	vmov.f32	s21, s19
240018a4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 24001a5c <audioTickString+0x220>
240018a8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
240018aa:	f04f 0800 	mov.w	r8, #0
240018ae:	4b5f      	ldr	r3, [pc, #380]	; (24001a2c <audioTickString+0x1f0>)
240018b0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 24001a60 <audioTickString+0x224>
240018b4:	4c5e      	ldr	r4, [pc, #376]	; (24001a30 <audioTickString+0x1f4>)
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
240018b6:	eddf ca5f 	vldr	s25, [pc, #380]	; 24001a34 <audioTickString+0x1f8>
240018ba:	ed9f ca5f 	vldr	s24, [pc, #380]	; 24001a38 <audioTickString+0x1fc>
		float decay = 0.1f;
240018be:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 24001a3c <audioTickString+0x200>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
240018c2:	ed9f da5f 	vldr	s26, [pc, #380]	; 24001a40 <audioTickString+0x204>
240018c6:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
240018c8:	ecfb 7a01 	vldmia	fp!, {s15}
240018cc:	ecba 0a01 	vldmia	sl!, {s0}
240018d0:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
240018d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240018dc:	f100 8097 	bmi.w	24001a0e <audioTickString+0x1d2>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
240018e0:	ed86 0a00 	vstr	s0, [r6]
		float finalFreq = mtof(note[i]) * invMapping[i] ;
240018e4:	f012 f800 	bl	240138e8 <mtof>
240018e8:	683b      	ldr	r3, [r7, #0]
240018ea:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
240018ee:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
240018f2:	eeb0 0a4c 	vmov.f32	s0, s24
		float finalFreq = mtof(note[i]) * invMapping[i] ;
240018f6:	ecf3 7a01 	vldmia	r3!, {s15}
		float decay = 0.1f;
240018fa:	eeb0 aa49 	vmov.f32	s20, s18
		float finalFreq = mtof(note[i]) * invMapping[i] ;
240018fe:	603b      	str	r3, [r7, #0]
24001900:	ee28 8a27 	vmul.f32	s16, s16, s15
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
24001904:	eea7 0a2c 	vfma.f32	s0, s14, s25
24001908:	f012 f818 	bl	2401393c <faster_mtof>
		if (lsDecay[i])
2400190c:	687a      	ldr	r2, [r7, #4]
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
2400190e:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
24001912:	f812 3b01 	ldrb.w	r3, [r2], #1
24001916:	607a      	str	r2, [r7, #4]
24001918:	b12b      	cbz	r3, 24001926 <audioTickString+0xea>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
2400191a:	eeb0 aa6b 	vmov.f32	s20, s23
2400191e:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
24001922:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
24001926:	4620      	mov	r0, r4
24001928:	ed95 0a08 	vldr	s0, [r5, #32]
2400192c:	f016 fa94 	bl	24017e58 <tSimpleLivingString3_setPickupPoint>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
24001930:	4620      	mov	r0, r4
24001932:	eeb0 0a4a 	vmov.f32	s0, s20
	for (int i = 0; i < numStringsThisBoard; i++)
24001936:	f108 0801 	add.w	r8, r8, #1
		tSimpleLivingString3_setDecay(&livStr[i], decay);
2400193a:	f016 f8ed 	bl	24017b18 <tSimpleLivingString3_setDecay>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
2400193e:	4620      	mov	r0, r4
24001940:	eeb0 0a68 	vmov.f32	s0, s17
	for (int i = 0; i < numStringsThisBoard; i++)
24001944:	3604      	adds	r6, #4
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
24001946:	f016 f8e3 	bl	24017b10 <tSimpleLivingString3_setDampFreq>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
2400194a:	4620      	mov	r0, r4
2400194c:	ed95 0a00 	vldr	s0, [r5]
24001950:	f016 f908 	bl	24017b64 <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
24001954:	ed95 0a01 	vldr	s0, [r5, #4]
24001958:	4620      	mov	r0, r4
2400195a:	ee20 0a09 	vmul.f32	s0, s0, s18
2400195e:	f016 f905 	bl	24017b6c <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
24001962:	ed95 0a02 	vldr	s0, [r5, #8]
24001966:	4620      	mov	r0, r4
24001968:	ee20 0a09 	vmul.f32	s0, s0, s18
2400196c:	f016 f902 	bl	24017b74 <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
24001970:	edd5 7a03 	vldr	s15, [r5, #12]
24001974:	4620      	mov	r0, r4
24001976:	eef4 7aeb 	vcmpe.f32	s15, s23
2400197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400197e:	bfcc      	ite	gt
24001980:	2101      	movgt	r1, #1
24001982:	2100      	movle	r1, #0
24001984:	f016 f8fa 	bl	24017b7c <tSimpleLivingString3_setLevMode>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
24001988:	4620      	mov	r0, r4
2400198a:	eeb0 0a48 	vmov.f32	s0, s16
2400198e:	f016 f86f 	bl	24017a70 <tSimpleLivingString3_setFreq>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
24001992:	4620      	mov	r0, r4
24001994:	eeb0 0a6a 	vmov.f32	s0, s21
	for (int i = 0; i < numStringsThisBoard; i++)
24001998:	3404      	adds	r4, #4
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
2400199a:	f016 f99f 	bl	24017cdc <tSimpleLivingString3_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
2400199e:	f899 3000 	ldrb.w	r3, [r9]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
240019a2:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
240019a6:	4543      	cmp	r3, r8
240019a8:	dc8e      	bgt.n	240018c8 <audioTickString+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240019aa:	ed9f 0a26 	vldr	s0, [pc, #152]	; 24001a44 <audioTickString+0x208>
240019ae:	eddf 7a26 	vldr	s15, [pc, #152]	; 24001a48 <audioTickString+0x20c>
240019b2:	eef0 0a40 	vmov.f32	s1, s0
240019b6:	ed9f 1a25 	vldr	s2, [pc, #148]	; 24001a4c <audioTickString+0x210>
240019ba:	eeeb 0a27 	vfma.f32	s1, s22, s15
240019be:	f032 f9cf 	bl	24033d60 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
240019c2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
240019c6:	4a22      	ldr	r2, [pc, #136]	; (24001a50 <audioTickString+0x214>)
	float omAlpha = 1.0f - alpha;
240019c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return temp;
}
240019cc:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
240019ce:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
240019d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
240019d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
240019da:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
240019dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
240019e0:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
240019e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
240019e8:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
240019ec:	ed93 7a00 	vldr	s14, [r3]
240019f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240019f4:	edd2 6a00 	vldr	s13, [r2]
240019f8:	ee20 0a26 	vmul.f32	s0, s0, s13
240019fc:	eea7 0a27 	vfma.f32	s0, s14, s15
}
24001a00:	ee20 0a29 	vmul.f32	s0, s0, s19
24001a04:	46bd      	mov	sp, r7
24001a06:	ecbd 8b0c 	vpop	{d8-d13}
24001a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
24001a0e:	eeb0 0a6a 	vmov.f32	s0, s21
24001a12:	edc6 aa00 	vstr	s21, [r6]
24001a16:	e765      	b.n	240018e4 <audioTickString+0xa8>
24001a18:	2000514c 	.word	0x2000514c
24001a1c:	20017a40 	.word	0x20017a40
24001a20:	2000018c 	.word	0x2000018c
24001a24:	00000000 	.word	0x00000000
24001a28:	20005140 	.word	0x20005140
24001a2c:	20005330 	.word	0x20005330
24001a30:	20005318 	.word	0x20005318
24001a34:	430c0000 	.word	0x430c0000
24001a38:	42700000 	.word	0x42700000
24001a3c:	3dcccccd 	.word	0x3dcccccd
24001a40:	44480000 	.word	0x44480000
24001a44:	423c0000 	.word	0x423c0000
24001a48:	42a00000 	.word	0x42a00000
24001a4c:	42fe0000 	.word	0x42fe0000
24001a50:	20000544 	.word	0x20000544
24001a54:	20000052 	.word	0x20000052
24001a58:	200051c0 	.word	0x200051c0
24001a5c:	20017994 	.word	0x20017994
24001a60:	2001799c 	.word	0x2001799c

24001a64 <audioTickString2>:



float  audioTickString2(void)
{
24001a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
24001a68:	4ba8      	ldr	r3, [pc, #672]	; (24001d0c <audioTickString2+0x2a8>)
24001a6a:	4da9      	ldr	r5, [pc, #676]	; (24001d10 <audioTickString2+0x2ac>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24001a6c:	48a9      	ldr	r0, [pc, #676]	; (24001d14 <audioTickString2+0x2b0>)
24001a6e:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 24001d68 <audioTickString2+0x304>
24001a72:	462c      	mov	r4, r5
24001a74:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
24001a78:	ed2d 8b08 	vpush	{d8-d11}
24001a7c:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
24001a7e:	781b      	ldrb	r3, [r3, #0]
{
24001a80:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
24001a82:	009b      	lsls	r3, r3, #2
24001a84:	3307      	adds	r3, #7
24001a86:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
24001a8a:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24001a8e:	f010 f847 	bl	24011b20 <tExpSmooth_tick>
24001a92:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
24001a96:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001a98:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
24001a9a:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001a9e:	f010 f83f 	bl	24011b20 <tExpSmooth_tick>
24001aa2:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
24001aa6:	454c      	cmp	r4, r9
24001aa8:	d1f6      	bne.n	24001a98 <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
24001aaa:	4b98      	ldr	r3, [pc, #608]	; (24001d0c <audioTickString2+0x2a8>)
	float temp = 0.0f;
24001aac:	eddf 8a9a 	vldr	s17, [pc, #616]	; 24001d18 <audioTickString2+0x2b4>
	for (int i = 0; i < numStringsThisBoard; i++)
24001ab0:	781b      	ldrb	r3, [r3, #0]
24001ab2:	2b00      	cmp	r3, #0
24001ab4:	f000 80e8 	beq.w	24001c88 <audioTickString2+0x224>
24001ab8:	4b98      	ldr	r3, [pc, #608]	; (24001d1c <audioTickString2+0x2b8>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
24001aba:	eeb0 aa68 	vmov.f32	s20, s17
24001abe:	617e      	str	r6, [r7, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
24001ac0:	2600      	movs	r6, #0
24001ac2:	60bb      	str	r3, [r7, #8]
24001ac4:	4b96      	ldr	r3, [pc, #600]	; (24001d20 <audioTickString2+0x2bc>)
24001ac6:	4c97      	ldr	r4, [pc, #604]	; (24001d24 <audioTickString2+0x2c0>)
24001ac8:	60fb      	str	r3, [r7, #12]
24001aca:	4b97      	ldr	r3, [pc, #604]	; (24001d28 <audioTickString2+0x2c4>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
24001acc:	eddf 9a97 	vldr	s19, [pc, #604]	; 24001d2c <audioTickString2+0x2c8>
24001ad0:	607b      	str	r3, [r7, #4]
24001ad2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 24001d6c <audioTickString2+0x308>
24001ad6:	4b96      	ldr	r3, [pc, #600]	; (24001d30 <audioTickString2+0x2cc>)
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001ad8:	f8df b294 	ldr.w	fp, [pc, #660]	; 24001d70 <audioTickString2+0x30c>
24001adc:	f8df a294 	ldr.w	sl, [pc, #660]	; 24001d74 <audioTickString2+0x310>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001ae0:	f8df 9294 	ldr.w	r9, [pc, #660]	; 24001d78 <audioTickString2+0x314>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001ae4:	eddf aa93 	vldr	s21, [pc, #588]	; 24001d34 <audioTickString2+0x2d0>
24001ae8:	613b      	str	r3, [r7, #16]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001aea:	68bb      	ldr	r3, [r7, #8]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001aec:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
24001aee:	eddf ba92 	vldr	s23, [pc, #584]	; 24001d38 <audioTickString2+0x2d4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001af2:	ecf3 7a01 	vldmia	r3!, {s15}
24001af6:	60bb      	str	r3, [r7, #8]
24001af8:	68fb      	ldr	r3, [r7, #12]
24001afa:	ecb3 7a01 	vldmia	r3!, {s14}
24001afe:	ee77 7a87 	vadd.f32	s15, s15, s14
24001b02:	60fb      	str	r3, [r7, #12]
			note[i] = 0.0f;
24001b04:	697b      	ldr	r3, [r7, #20]
		if (note[i] < 0.0f)
24001b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001b0e:	bf54      	ite	pl
24001b10:	edc3 7a00 	vstrpl	s15, [r3]
			note[i] = 0.0f;
24001b14:	ed83 aa00 	vstrmi	s20, [r3]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001b18:	f012 f938 	bl	24013d8c <tNoise_tick>
24001b1c:	4650      	mov	r0, sl
24001b1e:	f010 fadf 	bl	240120e0 <tVZFilter_tickEfficient>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001b22:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001b24:	eeb0 8a40 	vmov.f32	s16, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001b28:	f012 f930 	bl	24013d8c <tNoise_tick>
24001b2c:	4648      	mov	r0, r9
24001b2e:	f010 fad7 	bl	240120e0 <tVZFilter_tickEfficient>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001b32:	4640      	mov	r0, r8
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001b34:	ee38 8a00 	vadd.f32	s16, s16, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001b38:	f00f fd7a 	bl	24011630 <tADSRT_tick>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001b3c:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001b3e:	eeb0 ba40 	vmov.f32	s22, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001b42:	eeb0 0a6a 	vmov.f32	s0, s21
24001b46:	f016 fb19 	bl	2401817c <tLivingString2_setPickupPos>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
24001b4a:	ed95 0a05 	vldr	s0, [r5, #20]
24001b4e:	ee20 0a29 	vmul.f32	s0, s0, s19
24001b52:	f011 fef3 	bl	2401393c <faster_mtof>
24001b56:	4650      	mov	r0, sl
24001b58:	f010 fcca 	bl	240124f0 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
24001b5c:	ed95 0a06 	vldr	s0, [r5, #24]
24001b60:	ee20 0a29 	vmul.f32	s0, s0, s19
24001b64:	f011 feea 	bl	2401393c <faster_mtof>
24001b68:	4648      	mov	r0, r9
24001b6a:	f010 fcc1 	bl	240124f0 <tVZFilter_setFreq>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
24001b6e:	ed95 0a07 	vldr	s0, [r5, #28]
24001b72:	4620      	mov	r0, r4
24001b74:	ee20 0a2b 	vmul.f32	s0, s0, s23
24001b78:	f016 fb8e 	bl	24018298 <tLivingString2_setLevSmoothFactor>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
24001b7c:	ed95 0a08 	vldr	s0, [r5, #32]
24001b80:	4620      	mov	r0, r4
24001b82:	ee20 0a2b 	vmul.f32	s0, s0, s23
24001b86:	f016 fb9b 	bl	240182c0 <tLivingString2_setLevStrength>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
24001b8a:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
24001b8e:	4620      	mov	r0, r4
24001b90:	f016 fb14 	bl	240181bc <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
24001b94:	ed95 0a02 	vldr	s0, [r5, #8]
24001b98:	4620      	mov	r0, r4
24001b9a:	f016 facb 	bl	24018134 <tLivingString2_setPickPos>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
24001b9e:	eeb0 0a6b 	vmov.f32	s0, s23
24001ba2:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
24001ba6:	4620      	mov	r0, r4
24001ba8:	eddf 7a64 	vldr	s15, [pc, #400]	; 24001d3c <audioTickString2+0x2d8>
24001bac:	eea7 0a27 	vfma.f32	s0, s14, s15
24001bb0:	f016 fad2 	bl	24018158 <tLivingString2_setPrepPos>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001bb4:	697b      	ldr	r3, [r7, #20]
24001bb6:	ed9f 1a62 	vldr	s2, [pc, #392]	; 24001d40 <audioTickString2+0x2dc>
24001bba:	ecf3 0a01 	vldmia	r3!, {s1}
24001bbe:	ed9f 0a61 	vldr	s0, [pc, #388]	; 24001d44 <audioTickString2+0x2e0>
24001bc2:	617b      	str	r3, [r7, #20]
24001bc4:	f032 f8cc 	bl	24033d60 <__LEAF_clip_veneer>
24001bc8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 24001d48 <audioTickString2+0x2e4>
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
		float finalFreq = freqToSmooth * invMapping[i] ;

		tLivingString2_setFreq(&strings[i], finalFreq);
24001bcc:	4620      	mov	r0, r4
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001bce:	eddf 7a5f 	vldr	s15, [pc, #380]	; 24001d4c <audioTickString2+0x2e8>
		float finalFreq = freqToSmooth * invMapping[i] ;
24001bd2:	687b      	ldr	r3, [r7, #4]
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001bd4:	eee0 7a07 	vfma.f32	s15, s0, s14
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001bd8:	495d      	ldr	r1, [pc, #372]	; (24001d50 <audioTickString2+0x2ec>)
		float finalFreq = freqToSmooth * invMapping[i] ;
24001bda:	ecb3 0a01 	vldmia	r3!, {s0}
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		float finalFreq = freqToSmooth * invMapping[i] ;
24001be2:	607b      	str	r3, [r7, #4]
		int tempIndexI = (int)tempIndexF;
24001be4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001be8:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
24001bec:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
24001bf0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001bf4:	1c5a      	adds	r2, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001bf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001bfa:	ee37 7a26 	vadd.f32	s14, s14, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001bfe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001c02:	f3c2 020e 	ubfx	r2, r2, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
24001c06:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001c0a:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001c0e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001c12:	ed93 6a00 	vldr	s12, [r3]
24001c16:	ee67 7a86 	vmul.f32	s15, s15, s12
24001c1a:	eee7 7a26 	vfma.f32	s15, s14, s13
		tLivingString2_setFreq(&strings[i], finalFreq);
24001c1e:	ee20 0a27 	vmul.f32	s0, s0, s15
24001c22:	f016 fa69 	bl	240180f8 <tLivingString2_setFreq>


		if (knobScaled[4] > 0.5f)
24001c26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24001c2a:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
24001c2e:	4620      	mov	r0, r4
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
24001c30:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
24001c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
24001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
24001c3c:	bfc8      	it	gt
24001c3e:	ee2b 0a00 	vmulgt.f32	s0, s22, s0
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
24001c42:	f016 faad 	bl	240181a0 <tLivingString2_setPrepIndex>
			tempSamp += (tSawtooth_tick(&Ssaws[i][j]) * 0.5f);//filtNoise * theEnv) * env);
		}
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
24001c46:	ee28 0a0b 	vmul.f32	s0, s16, s22
24001c4a:	4620      	mov	r0, r4
24001c4c:	f016 fb5a 	bl	24018304 <tLivingString2_tick>
		prevSamp[i] = 0.0f;
24001c50:	693b      	ldr	r3, [r7, #16]
24001c52:	eca3 aa01 	vstmia	r3!, {s20}
24001c56:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
24001c58:	2e00      	cmp	r6, #0
24001c5a:	d14f      	bne.n	24001cfc <audioTickString2+0x298>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
24001c5c:	4b34      	ldr	r3, [pc, #208]	; (24001d30 <audioTickString2+0x2cc>)
24001c5e:	edd3 7a01 	vldr	s15, [r3, #4]
24001c62:	eee9 7a00 	vfma.f32	s15, s18, s0
24001c66:	edc3 7a01 	vstr	s15, [r3, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
24001c6a:	4b28      	ldr	r3, [pc, #160]	; (24001d0c <audioTickString2+0x2a8>)
24001c6c:	3601      	adds	r6, #1
			}
		}


		temp += tempSamp;
24001c6e:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
24001c72:	3404      	adds	r4, #4
24001c74:	781b      	ldrb	r3, [r3, #0]
24001c76:	f108 0804 	add.w	r8, r8, #4
24001c7a:	42b3      	cmp	r3, r6
24001c7c:	f73f af35 	bgt.w	24001aea <audioTickString2+0x86>
24001c80:	eddf 7a34 	vldr	s15, [pc, #208]	; 24001d54 <audioTickString2+0x2f0>
24001c84:	ee68 8aa7 	vmul.f32	s17, s17, s15
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24001c88:	ed9f 0a33 	vldr	s0, [pc, #204]	; 24001d58 <audioTickString2+0x2f4>
24001c8c:	eddf 7a33 	vldr	s15, [pc, #204]	; 24001d5c <audioTickString2+0x2f8>
24001c90:	eef0 0a40 	vmov.f32	s1, s0
24001c94:	ed9f 1a32 	vldr	s2, [pc, #200]	; 24001d60 <audioTickString2+0x2fc>
24001c98:	eee9 0a27 	vfma.f32	s1, s18, s15
24001c9c:	f032 f860 	bl	24033d60 <__LEAF_clip_veneer>
24001ca0:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
24001ca4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001ca8:	4a2e      	ldr	r2, [pc, #184]	; (24001d64 <audioTickString2+0x300>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
24001caa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
24001cae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24001cb2:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
24001cb6:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001cba:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
24001cbc:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
24001cc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001cc8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001ccc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
24001cd0:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001cd4:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
24001cd8:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001cdc:	edd3 6a00 	vldr	s13, [r3]
24001ce0:	ee60 0aa7 	vmul.f32	s1, s1, s15
24001ce4:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
24001ce8:	ee60 0aa8 	vmul.f32	s1, s1, s17
24001cec:	f032 f838 	bl	24033d60 <__LEAF_clip_veneer>
}
24001cf0:	371c      	adds	r7, #28
24001cf2:	46bd      	mov	sp, r7
24001cf4:	ecbd 8b08 	vpop	{d8-d11}
24001cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				prevSamp[j]+=tempSamp * volumeSmoothed;
24001cfc:	4b0c      	ldr	r3, [pc, #48]	; (24001d30 <audioTickString2+0x2cc>)
24001cfe:	edd3 7a00 	vldr	s15, [r3]
24001d02:	eee9 7a00 	vfma.f32	s15, s18, s0
24001d06:	edc3 7a00 	vstr	s15, [r3]
			if (j != i) //put sympathetic resonance in all strings but yourself
24001d0a:	e7ae      	b.n	24001c6a <audioTickString2+0x206>
24001d0c:	20000052 	.word	0x20000052
24001d10:	2000514c 	.word	0x2000514c
24001d14:	20017a40 	.word	0x20017a40
24001d18:	00000000 	.word	0x00000000
24001d1c:	20017994 	.word	0x20017994
24001d20:	2001799c 	.word	0x2001799c
24001d24:	200179b4 	.word	0x200179b4
24001d28:	20005140 	.word	0x20005140
24001d2c:	43000000 	.word	0x43000000
24001d30:	200055e8 	.word	0x200055e8
24001d34:	3f7ff972 	.word	0x3f7ff972
24001d38:	3dcccccd 	.word	0x3dcccccd
24001d3c:	3f4ccccd 	.word	0x3f4ccccd
24001d40:	43480000 	.word	0x43480000
24001d44:	c3480000 	.word	0xc3480000
24001d48:	42c80000 	.word	0x42c80000
24001d4c:	46800000 	.word	0x46800000
24001d50:	30004040 	.word	0x30004040
24001d54:	3f666666 	.word	0x3f666666
24001d58:	423c0000 	.word	0x423c0000
24001d5c:	42a00000 	.word	0x42a00000
24001d60:	42fe0000 	.word	0x42fe0000
24001d64:	20000544 	.word	0x20000544
24001d68:	200051c0 	.word	0x200051c0
24001d6c:	20005038 	.word	0x20005038
24001d70:	20005478 	.word	0x20005478
24001d74:	20005494 	.word	0x20005494
24001d78:	20005498 	.word	0x20005498

24001d7c <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
24001d7c:	4b05      	ldr	r3, [pc, #20]	; (24001d94 <lfoSawSquareTick+0x18>)
24001d7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d82:	b510      	push	{r4, lr}
24001d84:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
24001d86:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001d8a:	f015 fb73 	bl	24017474 <tSawSquareLFO_tick>
24001d8e:	ed84 0a00 	vstr	s0, [r4]
}
24001d92:	bd10      	pop	{r4, pc}
24001d94:	20005288 	.word	0x20005288

24001d98 <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
24001d98:	4b05      	ldr	r3, [pc, #20]	; (24001db0 <lfoSineTriTick+0x18>)
24001d9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d9e:	b510      	push	{r4, lr}
24001da0:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
24001da2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001da6:	f015 fc99 	bl	240176dc <tSineTriLFO_tick>
24001daa:	ed84 0a00 	vstr	s0, [r4]
}
24001dae:	bd10      	pop	{r4, pc}
24001db0:	200052d8 	.word	0x200052d8

24001db4 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
24001db4:	4b05      	ldr	r3, [pc, #20]	; (24001dcc <lfoSineTick+0x18>)
24001db6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001dba:	b510      	push	{r4, lr}
24001dbc:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
24001dbe:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001dc2:	f011 ff8f 	bl	24013ce4 <tCycle_tick>
24001dc6:	ed84 0a00 	vstr	s0, [r4]
}
24001dca:	bd10      	pop	{r4, pc}
24001dcc:	200052b8 	.word	0x200052b8

24001dd0 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
24001dd0:	4b05      	ldr	r3, [pc, #20]	; (24001de8 <lfoTriTick+0x18>)
24001dd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001dd6:	b510      	push	{r4, lr}
24001dd8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
24001dda:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001dde:	f015 fc05 	bl	240175ec <tTriLFO_tick>
24001de2:	ed84 0a00 	vstr	s0, [r4]
}
24001de6:	bd10      	pop	{r4, pc}
24001de8:	200052f8 	.word	0x200052f8

24001dec <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
24001dec:	4b08      	ldr	r3, [pc, #32]	; (24001e10 <lfoSawTick+0x24>)
24001dee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001df2:	b510      	push	{r4, lr}
24001df4:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
24001df6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001dfa:	f015 f9bb 	bl	24017174 <tIntPhasor_tick>
24001dfe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24001e02:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24001e06:	eee0 7a07 	vfma.f32	s15, s0, s14
24001e0a:	edc4 7a00 	vstr	s15, [r4]
}
24001e0e:	bd10      	pop	{r4, pc}
24001e10:	20005268 	.word	0x20005268

24001e14 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
24001e14:	4b05      	ldr	r3, [pc, #20]	; (24001e2c <lfoPulseTick+0x18>)
24001e16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001e1a:	b510      	push	{r4, lr}
24001e1c:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
24001e1e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001e22:	f015 fa75 	bl	24017310 <tSquareLFO_tick>
24001e26:	ed84 0a00 	vstr	s0, [r4]
}
24001e2a:	bd10      	pop	{r4, pc}
24001e2c:	20005248 	.word	0x20005248

24001e30 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
24001e30:	4b03      	ldr	r3, [pc, #12]	; (24001e40 <lfoSawSquareSetRate+0x10>)
24001e32:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e3a:	f015 bb5b 	b.w	240174f4 <tSawSquareLFO_setFreq>
24001e3e:	bf00      	nop
24001e40:	20005288 	.word	0x20005288

24001e44 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
24001e44:	4b03      	ldr	r3, [pc, #12]	; (24001e54 <lfoSineTriSetRate+0x10>)
24001e46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e4e:	f015 bc91 	b.w	24017774 <tSineTriLFO_setFreq>
24001e52:	bf00      	nop
24001e54:	200052d8 	.word	0x200052d8

24001e58 <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
24001e58:	4b03      	ldr	r3, [pc, #12]	; (24001e68 <lfoSineSetRate+0x10>)
24001e5a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e62:	f011 bf65 	b.w	24013d30 <tCycle_setFreq>
24001e66:	bf00      	nop
24001e68:	200052b8 	.word	0x200052b8

24001e6c <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
24001e6c:	4b03      	ldr	r3, [pc, #12]	; (24001e7c <lfoTriSetRate+0x10>)
24001e6e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e76:	f015 bbd3 	b.w	24017620 <tTriLFO_setFreq>
24001e7a:	bf00      	nop
24001e7c:	200052f8 	.word	0x200052f8

24001e80 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
24001e80:	4b03      	ldr	r3, [pc, #12]	; (24001e90 <lfoSawSetRate+0x10>)
24001e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e8a:	f015 b983 	b.w	24017194 <tIntPhasor_setFreq>
24001e8e:	bf00      	nop
24001e90:	20005268 	.word	0x20005268

24001e94 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
24001e94:	4b03      	ldr	r3, [pc, #12]	; (24001ea4 <lfoPulseSetRate+0x10>)
24001e96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e9e:	f015 ba5f 	b.w	24017360 <tSquareLFO_setFreq>
24001ea2:	bf00      	nop
24001ea4:	20005248 	.word	0x20005248

24001ea8 <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
24001ea8:	4b03      	ldr	r3, [pc, #12]	; (24001eb8 <lfoSawSquareSetPhase+0x10>)
24001eaa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001eae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001eb2:	f015 bb43 	b.w	2401753c <tSawSquareLFO_setPhase>
24001eb6:	bf00      	nop
24001eb8:	20005288 	.word	0x20005288

24001ebc <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
24001ebc:	4b03      	ldr	r3, [pc, #12]	; (24001ecc <lfoSineTriSetPhase+0x10>)
24001ebe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001ec2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001ec6:	f015 bc6d 	b.w	240177a4 <tSineTriLFO_setPhase>
24001eca:	bf00      	nop
24001ecc:	200052d8 	.word	0x200052d8

24001ed0 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
24001ed0:	4b03      	ldr	r3, [pc, #12]	; (24001ee0 <lfoSineSetPhase+0x10>)
24001ed2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001ed6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001eda:	f011 bf35 	b.w	24013d48 <tCycle_setPhase>
24001ede:	bf00      	nop
24001ee0:	200052b8 	.word	0x200052b8

24001ee4 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
24001ee4:	4b03      	ldr	r3, [pc, #12]	; (24001ef4 <lfoTriSetPhase+0x10>)
24001ee6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001eea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001eee:	f015 bba3 	b.w	24017638 <tTriLFO_setPhase>
24001ef2:	bf00      	nop
24001ef4:	200052f8 	.word	0x200052f8

24001ef8 <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
24001ef8:	4b03      	ldr	r3, [pc, #12]	; (24001f08 <lfoSawSetPhase+0x10>)
24001efa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001efe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f02:	f015 b953 	b.w	240171ac <tIntPhasor_setPhase>
24001f06:	bf00      	nop
24001f08:	20005268 	.word	0x20005268

24001f0c <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
24001f0c:	4b03      	ldr	r3, [pc, #12]	; (24001f1c <lfoPulseSetPhase+0x10>)
24001f0e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f16:	f015 ba5b 	b.w	240173d0 <tSquareLFO_setPhase>
24001f1a:	bf00      	nop
24001f1c:	20005248 	.word	0x20005248

24001f20 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
24001f20:	4b03      	ldr	r3, [pc, #12]	; (24001f30 <lfoSawSquareSetShape+0x10>)
24001f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f2a:	f015 bb35 	b.w	24017598 <tSawSquareLFO_setShape>
24001f2e:	bf00      	nop
24001f30:	20005288 	.word	0x20005288

24001f34 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
24001f34:	4b03      	ldr	r3, [pc, #12]	; (24001f44 <lfoSineTriSetShape+0x10>)
24001f36:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f3e:	f015 bc49 	b.w	240177d4 <tSineTriLFO_setShape>
24001f42:	bf00      	nop
24001f44:	200052d8 	.word	0x200052d8

24001f48 <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
24001f48:	4770      	bx	lr
24001f4a:	bf00      	nop

24001f4c <lfoTriSetShape>:
24001f4c:	4770      	bx	lr
24001f4e:	bf00      	nop

24001f50 <lfoSawSetShape>:
24001f50:	4770      	bx	lr
24001f52:	bf00      	nop

24001f54 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
24001f54:	4b03      	ldr	r3, [pc, #12]	; (24001f64 <lfoPulseSetShape+0x10>)
24001f56:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001f5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001f5e:	f015 ba17 	b.w	24017390 <tSquareLFO_setPulseWidth>
24001f62:	bf00      	nop
24001f64:	20005248 	.word	0x20005248

24001f68 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f68:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24001f6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24001fa0 <FXLowpassParam1+0x38>
24001f70:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24001fa4 <FXLowpassParam1+0x3c>
24001f74:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24001fa8 <FXLowpassParam1+0x40>
24001f78:	eee0 7a07 	vfma.f32	s15, s0, s14
24001f7c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24001fac <FXLowpassParam1+0x44>
{
24001f80:	b538      	push	{r3, r4, r5, lr}
24001f82:	4605      	mov	r5, r0
24001f84:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f86:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24001f8a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f8e:	f031 fee7 	bl	24033d60 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24001f92:	4807      	ldr	r0, [pc, #28]	; (24001fb0 <FXLowpassParam1+0x48>)
24001f94:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24001f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24001f9c:	f00f bfde 	b.w	24011f5c <tSVF_setFreqFast>
24001fa0:	429a0000 	.word	0x429a0000
24001fa4:	420fb824 	.word	0x420fb824
24001fa8:	457ff000 	.word	0x457ff000
24001fac:	00000000 	.word	0x00000000
24001fb0:	20000964 	.word	0x20000964

24001fb4 <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001fb4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24001fb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24001fec <FXHighpassParam1+0x38>
24001fbc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24001ff0 <FXHighpassParam1+0x3c>
24001fc0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24001ff4 <FXHighpassParam1+0x40>
24001fc4:	eee0 7a07 	vfma.f32	s15, s0, s14
24001fc8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24001ff8 <FXHighpassParam1+0x44>
{
24001fcc:	b538      	push	{r3, r4, r5, lr}
24001fce:	4605      	mov	r5, r0
24001fd0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001fd2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24001fd6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001fda:	f031 fec1 	bl	24033d60 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24001fde:	4807      	ldr	r0, [pc, #28]	; (24001ffc <FXHighpassParam1+0x48>)
24001fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24001fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24001fe8:	f00f bfb8 	b.w	24011f5c <tSVF_setFreqFast>
24001fec:	429a0000 	.word	0x429a0000
24001ff0:	420fb824 	.word	0x420fb824
24001ff4:	457ff000 	.word	0x457ff000
24001ff8:	00000000 	.word	0x00000000
24001ffc:	20000944 	.word	0x20000944

24002000 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002000:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002004:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002038 <FXBandpassParam1+0x38>
24002008:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2400203c <FXBandpassParam1+0x3c>
2400200c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002040 <FXBandpassParam1+0x40>
24002010:	eee0 7a07 	vfma.f32	s15, s0, s14
24002014:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002044 <FXBandpassParam1+0x44>
{
24002018:	b538      	push	{r3, r4, r5, lr}
2400201a:	4605      	mov	r5, r0
2400201c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400201e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
24002022:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002026:	f031 fe9b 	bl	24033d60 <__LEAF_clip_veneer>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
2400202a:	4807      	ldr	r0, [pc, #28]	; (24002048 <FXBandpassParam1+0x48>)
2400202c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
24002034:	f00f bf92 	b.w	24011f5c <tSVF_setFreqFast>
24002038:	429a0000 	.word	0x429a0000
2400203c:	420fb824 	.word	0x420fb824
24002040:	457ff000 	.word	0x457ff000
24002044:	00000000 	.word	0x00000000
24002048:	20000904 	.word	0x20000904

2400204c <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400204c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002050:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002084 <FXDiodeParam1+0x38>
24002054:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002088 <FXDiodeParam1+0x3c>
24002058:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2400208c <FXDiodeParam1+0x40>
2400205c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002060:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002090 <FXDiodeParam1+0x44>
{
24002064:	b538      	push	{r3, r4, r5, lr}
24002066:	4605      	mov	r5, r0
24002068:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400206a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
2400206e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002072:	f031 fe75 	bl	24033d60 <__LEAF_clip_veneer>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24002076:	4807      	ldr	r0, [pc, #28]	; (24002094 <FXDiodeParam1+0x48>)
24002078:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400207c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24002080:	f011 b882 	b.w	24013188 <tDiodeFilter_setFreqFast>
24002084:	429a0000 	.word	0x429a0000
24002088:	420fb824 	.word	0x420fb824
2400208c:	457ff000 	.word	0x457ff000
24002090:	00000000 	.word	0x00000000
24002094:	20000924 	.word	0x20000924

24002098 <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002098:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
2400209c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240020d0 <FXPeakParam1+0x38>
240020a0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 240020d4 <FXPeakParam1+0x3c>
240020a4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 240020d8 <FXPeakParam1+0x40>
240020a8:	eee0 7a07 	vfma.f32	s15, s0, s14
240020ac:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240020dc <FXPeakParam1+0x44>
{
240020b0:	b538      	push	{r3, r4, r5, lr}
240020b2:	4605      	mov	r5, r0
240020b4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020b6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
240020ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020be:	f031 fe4f 	bl	24033d60 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
240020c2:	4807      	ldr	r0, [pc, #28]	; (240020e0 <FXPeakParam1+0x48>)
240020c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240020c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
240020cc:	f010 ba28 	b.w	24012520 <tVZFilter_setFreqFast>
240020d0:	429a0000 	.word	0x429a0000
240020d4:	420fb824 	.word	0x420fb824
240020d8:	457ff000 	.word	0x457ff000
240020dc:	00000000 	.word	0x00000000
240020e0:	200008e4 	.word	0x200008e4

240020e4 <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020e4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240020e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2400211c <FXLowShelfParam1+0x38>
240020ec:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002120 <FXLowShelfParam1+0x3c>
240020f0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002124 <FXLowShelfParam1+0x40>
240020f4:	eee0 7a07 	vfma.f32	s15, s0, s14
240020f8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002128 <FXLowShelfParam1+0x44>
{
240020fc:	b538      	push	{r3, r4, r5, lr}
240020fe:	4605      	mov	r5, r0
24002100:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002102:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
24002106:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400210a:	f031 fe29 	bl	24033d60 <__LEAF_clip_veneer>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
2400210e:	4807      	ldr	r0, [pc, #28]	; (2400212c <FXLowShelfParam1+0x48>)
24002110:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
24002118:	f010 ba02 	b.w	24012520 <tVZFilter_setFreqFast>
2400211c:	429a0000 	.word	0x429a0000
24002120:	420fb824 	.word	0x420fb824
24002124:	457ff000 	.word	0x457ff000
24002128:	00000000 	.word	0x00000000
2400212c:	200008c4 	.word	0x200008c4

24002130 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002130:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002134:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002168 <FXHighShelfParam1+0x38>
24002138:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2400216c <FXHighShelfParam1+0x3c>
2400213c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002170 <FXHighShelfParam1+0x40>
24002140:	eee0 7a07 	vfma.f32	s15, s0, s14
24002144:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002174 <FXHighShelfParam1+0x44>
{
24002148:	b538      	push	{r3, r4, r5, lr}
2400214a:	4605      	mov	r5, r0
2400214c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400214e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
24002152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002156:	f031 fe03 	bl	24033d60 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
2400215a:	4807      	ldr	r0, [pc, #28]	; (24002178 <FXHighShelfParam1+0x48>)
2400215c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
24002164:	f010 b9dc 	b.w	24012520 <tVZFilter_setFreqFast>
24002168:	429a0000 	.word	0x429a0000
2400216c:	420fb824 	.word	0x420fb824
24002170:	457ff000 	.word	0x457ff000
24002174:	00000000 	.word	0x00000000
24002178:	200008a4 	.word	0x200008a4

2400217c <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400217c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002180:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240021b4 <FXNotchParam1+0x38>
24002184:	eddf 0a0c 	vldr	s1, [pc, #48]	; 240021b8 <FXNotchParam1+0x3c>
24002188:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 240021bc <FXNotchParam1+0x40>
2400218c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002190:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240021c0 <FXNotchParam1+0x44>
{
24002194:	b538      	push	{r3, r4, r5, lr}
24002196:	4605      	mov	r5, r0
24002198:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400219a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
2400219e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021a2:	f031 fddd 	bl	24033d60 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
240021a6:	4807      	ldr	r0, [pc, #28]	; (240021c4 <FXNotchParam1+0x48>)
240021a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240021ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
240021b0:	f010 b9b6 	b.w	24012520 <tVZFilter_setFreqFast>
240021b4:	429a0000 	.word	0x429a0000
240021b8:	420fb824 	.word	0x420fb824
240021bc:	457ff000 	.word	0x457ff000
240021c0:	00000000 	.word	0x00000000
240021c4:	20000884 	.word	0x20000884

240021c8 <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021c8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240021cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002200 <FXLadderParam1+0x38>
240021d0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002204 <FXLadderParam1+0x3c>
240021d4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002208 <FXLadderParam1+0x40>
240021d8:	eee0 7a07 	vfma.f32	s15, s0, s14
240021dc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2400220c <FXLadderParam1+0x44>
{
240021e0:	b538      	push	{r3, r4, r5, lr}
240021e2:	4605      	mov	r5, r0
240021e4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021e6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
240021ea:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240021ee:	f031 fdb7 	bl	24033d60 <__LEAF_clip_veneer>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
240021f2:	4807      	ldr	r0, [pc, #28]	; (24002210 <FXLadderParam1+0x48>)
240021f4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240021f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
240021fc:	f011 b962 	b.w	240134c4 <tLadderFilter_setFreqFast>
24002200:	429a0000 	.word	0x429a0000
24002204:	420fb824 	.word	0x420fb824
24002208:	457ff000 	.word	0x457ff000
2400220c:	00000000 	.word	0x00000000
24002210:	20000864 	.word	0x20000864

24002214 <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002214:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24002218:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24002240 <FXPeakParam2+0x2c>
{
2400221c:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400221e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
24002222:	4605      	mov	r5, r0
24002224:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002226:	eb04 0445 	add.w	r4, r4, r5, lsl #1
2400222a:	eeb0 0a67 	vmov.f32	s0, s15
2400222e:	f011 fbf3 	bl	24013a18 <fasterdbtoa>
24002232:	4804      	ldr	r0, [pc, #16]	; (24002244 <FXPeakParam2+0x30>)
24002234:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400223c:	f010 bace 	b.w	240127dc <tVZFilter_setGain>
24002240:	42480000 	.word	0x42480000
24002244:	200008e4 	.word	0x200008e4

24002248 <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002248:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
2400224c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24002274 <FXLowShelfParam2+0x2c>
{
24002250:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002252:	eee0 7a07 	vfma.f32	s15, s0, s14
{
24002256:	4605      	mov	r5, r0
24002258:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400225a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
2400225e:	eeb0 0a67 	vmov.f32	s0, s15
24002262:	f011 fbd9 	bl	24013a18 <fasterdbtoa>
24002266:	4804      	ldr	r0, [pc, #16]	; (24002278 <FXLowShelfParam2+0x30>)
24002268:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400226c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002270:	f010 bab4 	b.w	240127dc <tVZFilter_setGain>
24002274:	42480000 	.word	0x42480000
24002278:	200008c4 	.word	0x200008c4

2400227c <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400227c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24002280:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240022a8 <FXHighShelfParam2+0x2c>
{
24002284:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002286:	eee0 7a07 	vfma.f32	s15, s0, s14
{
2400228a:	4605      	mov	r5, r0
2400228c:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400228e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24002292:	eeb0 0a67 	vmov.f32	s0, s15
24002296:	f011 fbbf 	bl	24013a18 <fasterdbtoa>
2400229a:	4804      	ldr	r0, [pc, #16]	; (240022ac <FXHighShelfParam2+0x30>)
2400229c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240022a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022a4:	f010 ba9a 	b.w	240127dc <tVZFilter_setGain>
240022a8:	42480000 	.word	0x42480000
240022ac:	200008a4 	.word	0x200008a4

240022b0 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022b0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240022b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240022dc <FXNotchParam2+0x2c>
{
240022b8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022ba:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240022be:	4605      	mov	r5, r0
240022c0:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022c2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
240022c6:	eeb0 0a67 	vmov.f32	s0, s15
240022ca:	f011 fba5 	bl	24013a18 <fasterdbtoa>
240022ce:	4804      	ldr	r0, [pc, #16]	; (240022e0 <FXNotchParam2+0x30>)
240022d0:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
240022d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
240022d8:	f010 ba80 	b.w	240127dc <tVZFilter_setGain>
240022dc:	42480000 	.word	0x42480000
240022e0:	20000884 	.word	0x20000884

240022e4 <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
240022e4:	4b03      	ldr	r3, [pc, #12]	; (240022f4 <FXLowpassParam3+0x10>)
240022e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240022ee:	f00f be6b 	b.w	24011fc8 <tSVF_setQ>
240022f2:	bf00      	nop
240022f4:	20000964 	.word	0x20000964

240022f8 <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
240022f8:	4b03      	ldr	r3, [pc, #12]	; (24002308 <FXHighpassParam3+0x10>)
240022fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002302:	f00f be61 	b.w	24011fc8 <tSVF_setQ>
24002306:	bf00      	nop
24002308:	20000944 	.word	0x20000944

2400230c <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
2400230c:	4b03      	ldr	r3, [pc, #12]	; (2400231c <FXBandpassParam3+0x10>)
2400230e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002312:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002316:	f00f be57 	b.w	24011fc8 <tSVF_setQ>
2400231a:	bf00      	nop
2400231c:	20000904 	.word	0x20000904

24002320 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
24002320:	4b03      	ldr	r3, [pc, #12]	; (24002330 <FXDiodeParam3+0x10>)
24002322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400232a:	f010 bf4d 	b.w	240131c8 <tDiodeFilter_setQ>
2400232e:	bf00      	nop
24002330:	20000924 	.word	0x20000924

24002334 <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
24002334:	4b03      	ldr	r3, [pc, #12]	; (24002344 <FXPeakParam3+0x10>)
24002336:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400233a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400233e:	f010 ba69 	b.w	24012814 <tVZFilter_setResonance>
24002342:	bf00      	nop
24002344:	200008e4 	.word	0x200008e4

24002348 <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
24002348:	4b03      	ldr	r3, [pc, #12]	; (24002358 <FXLowShelfParam3+0x10>)
2400234a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400234e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002352:	f010 ba5f 	b.w	24012814 <tVZFilter_setResonance>
24002356:	bf00      	nop
24002358:	200008c4 	.word	0x200008c4

2400235c <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
2400235c:	4b03      	ldr	r3, [pc, #12]	; (2400236c <FXHighShelfParam3+0x10>)
2400235e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002362:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002366:	f010 ba55 	b.w	24012814 <tVZFilter_setResonance>
2400236a:	bf00      	nop
2400236c:	200008a4 	.word	0x200008a4

24002370 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
24002370:	4b03      	ldr	r3, [pc, #12]	; (24002380 <FXNotchParam3+0x10>)
24002372:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002376:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400237a:	f010 ba4b 	b.w	24012814 <tVZFilter_setResonance>
2400237e:	bf00      	nop
24002380:	20000884 	.word	0x20000884

24002384 <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
24002384:	4b03      	ldr	r3, [pc, #12]	; (24002394 <FXLadderParam3+0x10>)
24002386:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400238a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400238e:	f011 b8bd 	b.w	2401350c <tLadderFilter_setQ>
24002392:	bf00      	nop
24002394:	20000864 	.word	0x20000864

24002398 <audioTickL>:
{
24002398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
2400239c:	2100      	movs	r1, #0
2400239e:	48c5      	ldr	r0, [pc, #788]	; (240026b4 <audioTickL+0x31c>)
	uint32_t tempCount5 = DWT->CYCCNT;
240023a0:	4ac5      	ldr	r2, [pc, #788]	; (240026b8 <audioTickL+0x320>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
240023a2:	4bc6      	ldr	r3, [pc, #792]	; (240026bc <audioTickL+0x324>)
240023a4:	4dc6      	ldr	r5, [pc, #792]	; (240026c0 <audioTickL+0x328>)
240023a6:	4ec7      	ldr	r6, [pc, #796]	; (240026c4 <audioTickL+0x32c>)
240023a8:	f105 0830 	add.w	r8, r5, #48	; 0x30
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
240023ac:	4cc6      	ldr	r4, [pc, #792]	; (240026c8 <audioTickL+0x330>)
{
240023ae:	ed2d 8b0a 	vpush	{d8-d12}
240023b2:	b08d      	sub	sp, #52	; 0x34
	interrupted = 0;
240023b4:	7001      	strb	r1, [r0, #0]
{
240023b6:	af00      	add	r7, sp, #0
	uint32_t tempCount5 = DWT->CYCCNT;
240023b8:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
240023ba:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
240023be:	60ba      	str	r2, [r7, #8]
	tickMappings();
240023c0:	f031 fcee 	bl	24033da0 <__tickMappings_veneer>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
240023c4:	48c1      	ldr	r0, [pc, #772]	; (240026cc <audioTickL+0x334>)
240023c6:	f00f fbab 	bl	24011b20 <tExpSmooth_tick>
240023ca:	eeb0 8a40 	vmov.f32	s16, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
240023ce:	4630      	mov	r0, r6
240023d0:	f00f fba6 	bl	24011b20 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
240023d4:	4bbe      	ldr	r3, [pc, #760]	; (240026d0 <audioTickL+0x338>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
240023d6:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
240023da:	781b      	ldrb	r3, [r3, #0]
240023dc:	b12b      	cbz	r3, 240023ea <audioTickL+0x52>
240023de:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
240023e0:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
240023e4:	d001      	beq.n	240023ea <audioTickL+0x52>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
240023e6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
240023ea:	4545      	cmp	r5, r8
240023ec:	f106 0604 	add.w	r6, r6, #4
240023f0:	f104 0408 	add.w	r4, r4, #8
240023f4:	d1eb      	bne.n	240023ce <audioTickL+0x36>
	float note[numStringsThisBoard];
240023f6:	009a      	lsls	r2, r3, #2
240023f8:	3207      	adds	r2, #7
240023fa:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
240023fe:	ebad 0d02 	sub.w	sp, sp, r2
24002402:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
24002404:	2b00      	cmp	r3, #0
24002406:	f000 823b 	beq.w	24002880 <audioTickL+0x4e8>
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
2400240a:	ed9f aab2 	vldr	s20, [pc, #712]	; 240026d4 <audioTickL+0x33c>
2400240e:	2300      	movs	r3, #0
24002410:	eddf 7ab1 	vldr	s15, [pc, #708]	; 240026d8 <audioTickL+0x340>
24002414:	eeb0 ba4a 	vmov.f32	s22, s20
24002418:	617a      	str	r2, [r7, #20]
2400241a:	4ab0      	ldr	r2, [pc, #704]	; (240026dc <audioTickL+0x344>)
	for (int v = 0; v < numStringsThisBoard; v++)
2400241c:	469a      	mov	sl, r3
	float masterSample = 0.0f;
2400241e:	eddf 8ab0 	vldr	s17, [pc, #704]	; 240026e0 <audioTickL+0x348>
24002422:	61ba      	str	r2, [r7, #24]
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24002424:	eea8 ba27 	vfma.f32	s22, s16, s15
24002428:	4aae      	ldr	r2, [pc, #696]	; (240026e4 <audioTickL+0x34c>)
		if (note[v] < 0.0f)
2400242a:	eeb0 9a68 	vmov.f32	s18, s17
2400242e:	f8df b30c 	ldr.w	fp, [pc, #780]	; 2400273c <audioTickL+0x3a4>
24002432:	623a      	str	r2, [r7, #32]
24002434:	4aac      	ldr	r2, [pc, #688]	; (240026e8 <audioTickL+0x350>)
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24002436:	eddf aaad 	vldr	s21, [pc, #692]	; 240026ec <audioTickL+0x354>
2400243a:	613a      	str	r2, [r7, #16]
2400243c:	4aac      	ldr	r2, [pc, #688]	; (240026f0 <audioTickL+0x358>)
2400243e:	627b      	str	r3, [r7, #36]	; 0x24
24002440:	61fa      	str	r2, [r7, #28]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
24002442:	69bb      	ldr	r3, [r7, #24]
24002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24002446:	ecb3 8a01 	vldmia	r3!, {s16}
2400244a:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
2400244c:	4ba9      	ldr	r3, [pc, #676]	; (240026f4 <audioTickL+0x35c>)
2400244e:	edd3 7a00 	vldr	s15, [r3]
24002452:	4ba9      	ldr	r3, [pc, #676]	; (240026f8 <audioTickL+0x360>)
24002454:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
24002458:	4ba8      	ldr	r3, [pc, #672]	; (240026fc <audioTickL+0x364>)
2400245a:	4413      	add	r3, r2
2400245c:	edd3 6a00 	vldr	s13, [r3]
24002460:	697b      	ldr	r3, [r7, #20]
24002462:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
24002466:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
2400246a:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
2400246e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
24002472:	617b      	str	r3, [r7, #20]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
24002474:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
24002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
2400247c:	edcb 7a1a 	vstr	s15, [fp, #104]	; 0x68
		if (note[v] < 0.0f)
24002480:	d503      	bpl.n	2400248a <audioTickL+0xf2>
			note[v] = 0.0f;
24002482:	eeb0 8a49 	vmov.f32	s16, s18
24002486:	ed03 9a01 	vstr	s18, [r3, #-4]
	interruptChecker = 0;
2400248a:	2300      	movs	r3, #0
2400248c:	4a9c      	ldr	r2, [pc, #624]	; (24002700 <audioTickL+0x368>)
2400248e:	f1ab 0520 	sub.w	r5, fp, #32
24002492:	7013      	strb	r3, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
24002494:	4b88      	ldr	r3, [pc, #544]	; (240026b8 <audioTickL+0x320>)
24002496:	462e      	mov	r6, r5
24002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2400249a:	685c      	ldr	r4, [r3, #4]
	for (int v = 0; v < NUM_ENV; v++)
2400249c:	4b99      	ldr	r3, [pc, #612]	; (24002704 <audioTickL+0x36c>)
2400249e:	eb03 0802 	add.w	r8, r3, r2
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
240024a2:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
240024a4:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
240024a6:	f00f fa19 	bl	240118dc <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
240024aa:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
240024ae:	455e      	cmp	r6, fp
240024b0:	f108 0808 	add.w	r8, r8, #8
240024b4:	d1f5      	bne.n	240024a2 <audioTickL+0x10a>
	timeEnv = DWT->CYCCNT - tempCount1;
240024b6:	4a80      	ldr	r2, [pc, #512]	; (240026b8 <audioTickL+0x320>)
240024b8:	4e93      	ldr	r6, [pc, #588]	; (24002708 <audioTickL+0x370>)
240024ba:	6853      	ldr	r3, [r2, #4]
240024bc:	1b1c      	subs	r4, r3, r4
240024be:	4b93      	ldr	r3, [pc, #588]	; (2400270c <audioTickL+0x374>)
240024c0:	601c      	str	r4, [r3, #0]
	interruptChecker = 0;
240024c2:	2400      	movs	r4, #0
240024c4:	4b8e      	ldr	r3, [pc, #568]	; (24002700 <audioTickL+0x368>)
240024c6:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
240024c8:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
240024cc:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
240024d0:	4621      	mov	r1, r4
240024d2:	4652      	mov	r2, sl
240024d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
240024d8:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
240024dc:	2b00      	cmp	r3, #0
240024de:	f000 8165 	beq.w	240027ac <audioTickL+0x414>
			lfoShapeTick[i](&sample,i, string);
240024e2:	4b8b      	ldr	r3, [pc, #556]	; (24002710 <audioTickL+0x378>)
	for (int i = 0; i < NUM_LFOS; i++)
240024e4:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
240024e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
240024ea:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
240024ec:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
240024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
240024f0:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
240024f2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
240024f6:	d1e9      	bne.n	240024cc <audioTickL+0x134>
	timeLFO = DWT->CYCCNT - tempCount1;
240024f8:	4b6f      	ldr	r3, [pc, #444]	; (240026b8 <audioTickL+0x320>)
		oscillator_tick(note[v], v);
240024fa:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
240024fe:	4a85      	ldr	r2, [pc, #532]	; (24002714 <audioTickL+0x37c>)
		oscillator_tick(note[v], v);
24002500:	4650      	mov	r0, sl
	timeLFO = DWT->CYCCNT - tempCount1;
24002502:	685b      	ldr	r3, [r3, #4]
24002504:	eba3 0308 	sub.w	r3, r3, r8
24002508:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
2400250a:	f031 fc3d 	bl	24033d88 <__oscillator_tick_veneer>
		noise_tick(v);
2400250e:	4650      	mov	r0, sl
24002510:	f031 fc42 	bl	24033d98 <__noise_tick_veneer>
		for (int i = 0; i < oscToTick; i++)
24002514:	4b80      	ldr	r3, [pc, #512]	; (24002718 <audioTickL+0x380>)
24002516:	781b      	ldrb	r3, [r3, #0]
24002518:	2b00      	cmp	r3, #0
2400251a:	f000 81ac 	beq.w	24002876 <audioTickL+0x4de>
			filterSamps[0] += oscOuts[0][i][v];
2400251e:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
24002520:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
24002522:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
24002526:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
2400252a:	d011      	beq.n	24002550 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
2400252c:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
24002530:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
24002532:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
24002536:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
2400253a:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
2400253e:	d007      	beq.n	24002550 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
24002540:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
24002544:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
24002548:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
2400254c:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
24002550:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
24002552:	eeb0 0a48 	vmov.f32	s0, s16
24002556:	4651      	mov	r1, sl
24002558:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
2400255c:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
24002560:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
24002564:	ee76 6a86 	vadd.f32	s13, s13, s12
24002568:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
2400256a:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
2400256e:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
24002572:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
24002576:	f031 fbfb 	bl	24033d70 <__filter_tick_veneer>
		if (fxPre)
2400257a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
2400257e:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
24002582:	eef4 9ae7 	vcmpe.f32	s19, s15
24002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400258a:	dd04      	ble.n	24002596 <audioTickL+0x1fe>
			sample *= amplitude[v];
2400258c:	6a3b      	ldr	r3, [r7, #32]
2400258e:	edd3 7a00 	vldr	s15, [r3]
24002592:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
24002596:	4b61      	ldr	r3, [pc, #388]	; (2400271c <audioTickL+0x384>)
24002598:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
2400259a:	4b47      	ldr	r3, [pc, #284]	; (240026b8 <audioTickL+0x320>)
2400259c:	685b      	ldr	r3, [r3, #4]
2400259e:	60fb      	str	r3, [r7, #12]
		if (overSampled)
240025a0:	2c00      	cmp	r4, #0
240025a2:	f040 810b 	bne.w	240027bc <audioTickL+0x424>
			for (int i = 0; i < numEffectToTick; i++)
240025a6:	4b5e      	ldr	r3, [pc, #376]	; (24002720 <audioTickL+0x388>)
240025a8:	781b      	ldrb	r3, [r3, #0]
240025aa:	b32b      	cbz	r3, 240025f8 <audioTickL+0x260>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
240025ac:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
240025b0:	f8df 918c 	ldr.w	r9, [pc, #396]	; 24002740 <audioTickL+0x3a8>
			for (int i = 0; i < numEffectToTick; i++)
240025b4:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
240025b8:	4e5a      	ldr	r6, [pc, #360]	; (24002724 <audioTickL+0x38c>)
240025ba:	4d5b      	ldr	r5, [pc, #364]	; (24002728 <audioTickL+0x390>)
				sample = effectTick[i](sample, i, v); //run the effect
240025bc:	eeb0 0a48 	vmov.f32	s0, s16
240025c0:	4620      	mov	r0, r4
240025c2:	f859 3b04 	ldr.w	r3, [r9], #4
240025c6:	4651      	mov	r1, sl
240025c8:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
240025ca:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
240025ce:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
240025d0:	ed93 7a00 	vldr	s14, [r3]
				sample *= fxPostGain[i][v];
240025d4:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
240025d8:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
240025dc:	ee67 7a00 	vmul.f32	s15, s14, s0
240025e0:	ee3b 7ac7 	vsub.f32	s14, s23, s14
240025e4:	eee7 7a08 	vfma.f32	s15, s14, s16
				sample *= fxPostGain[i][v];
240025e8:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
240025ec:	4b4c      	ldr	r3, [pc, #304]	; (24002720 <audioTickL+0x388>)
240025ee:	781b      	ldrb	r3, [r3, #0]
240025f0:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
240025f2:	ee27 8a88 	vmul.f32	s16, s15, s16
			for (int i = 0; i < numEffectToTick; i++)
240025f6:	dce1      	bgt.n	240025bc <audioTickL+0x224>
		if (!fxPre)
240025f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
240025fc:	4b2e      	ldr	r3, [pc, #184]	; (240026b8 <audioTickL+0x320>)
		oversampleCount = tempCount2-tempCount1;
240025fe:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
24002600:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
24002602:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
24002606:	1a9b      	subs	r3, r3, r2
24002608:	4a48      	ldr	r2, [pc, #288]	; (2400272c <audioTickL+0x394>)
		if (!fxPre)
2400260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
2400260e:	6013      	str	r3, [r2, #0]
		if (!fxPre)
24002610:	d804      	bhi.n	2400261c <audioTickL+0x284>
			sample *= amplitude[v];
24002612:	6a3b      	ldr	r3, [r7, #32]
24002614:	edd3 7a00 	vldr	s15, [r3]
24002618:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
2400261c:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
2400261e:	eeb0 0a48 	vmov.f32	s0, s16
24002622:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
24002624:	f10a 0a01 	add.w	sl, sl, #1
24002628:	3304      	adds	r3, #4
2400262a:	f10b 0b04 	add.w	fp, fp, #4
2400262e:	623b      	str	r3, [r7, #32]
24002630:	69fb      	ldr	r3, [r7, #28]
24002632:	3304      	adds	r3, #4
24002634:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
24002636:	4b3e      	ldr	r3, [pc, #248]	; (24002730 <audioTickL+0x398>)
24002638:	1918      	adds	r0, r3, r4
2400263a:	f00f fc59 	bl	24011ef0 <tSVF_tick>
		masterSample += sample;
2400263e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24002642:	eeb0 1a6a 	vmov.f32	s2, s21
24002646:	eef0 0a4b 	vmov.f32	s1, s22
		masterSample += sample;
2400264a:	eee0 8a27 	vfma.f32	s17, s0, s15
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
2400264e:	eeb0 0a4a 	vmov.f32	s0, s20
24002652:	f031 fb85 	bl	24033d60 <__LEAF_clip_veneer>
24002656:	eef0 7a40 	vmov.f32	s15, s0
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
2400265a:	4936      	ldr	r1, [pc, #216]	; (24002734 <audioTickL+0x39c>)
		float omAlpha = 1.0f - alpha;
2400265c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
24002660:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		int volIdxInt = (int) volIdx;
24002664:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float omAlpha = 1.0f - alpha;
24002668:	ee31 7a67 	vsub.f32	s14, s2, s15
		int volIdxInt = (int) volIdx;
2400266c:	ee16 2a90 	vmov	r2, s13
		float alpha = volIdx-volIdxInt;
24002670:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
24002674:	1c53      	adds	r3, r2, #1
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
24002676:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float alpha = volIdx-volIdxInt;
2400267a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
2400267e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
24002682:	ee37 7a26 	vadd.f32	s14, s14, s13
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
24002686:	edd2 6a00 	vldr	s13, [r2]
2400268a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
2400268e:	edd3 0a00 	vldr	s1, [r3]
		masterSample *= finalMaster[v] ;
24002692:	4b29      	ldr	r3, [pc, #164]	; (24002738 <audioTickL+0x3a0>)
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
24002694:	ee67 7aa0 	vmul.f32	s15, s15, s1
		masterSample *= finalMaster[v] ;
24002698:	4423      	add	r3, r4
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
2400269a:	eee6 7a87 	vfma.f32	s15, s13, s14
		masterSample *= finalMaster[v] ;
2400269e:	edd3 0a00 	vldr	s1, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
240026a2:	1d23      	adds	r3, r4, #4
240026a4:	ee68 0aa0 	vmul.f32	s1, s17, s1
240026a8:	627b      	str	r3, [r7, #36]	; 0x24
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
240026aa:	ee60 0aa7 	vmul.f32	s1, s1, s15
240026ae:	f031 fb57 	bl	24033d60 <__LEAF_clip_veneer>
240026b2:	e047      	b.n	24002744 <audioTickL+0x3ac>
240026b4:	2000511c 	.word	0x2000511c
240026b8:	e0001000 	.word	0xe0001000
240026bc:	2001c6cc 	.word	0x2001c6cc
240026c0:	2000514c 	.word	0x2000514c
240026c4:	200051c0 	.word	0x200051c0
240026c8:	20017854 	.word	0x20017854
240026cc:	20017a40 	.word	0x20017a40
240026d0:	20000052 	.word	0x20000052
240026d4:	423c0000 	.word	0x423c0000
240026d8:	42a00000 	.word	0x42a00000
240026dc:	20017994 	.word	0x20017994
240026e0:	00000000 	.word	0x00000000
240026e4:	20000af4 	.word	0x20000af4
240026e8:	2000549c 	.word	0x2000549c
240026ec:	42fe0000 	.word	0x42fe0000
240026f0:	200054c8 	.word	0x200054c8
240026f4:	2001b6c0 	.word	0x2001b6c0
240026f8:	2001b6bc 	.word	0x2001b6bc
240026fc:	2001799c 	.word	0x2001799c
24002700:	2001ad05 	.word	0x2001ad05
24002704:	20005018 	.word	0x20005018
24002708:	20005244 	.word	0x20005244
2400270c:	200179c4 	.word	0x200179c4
24002710:	200052a8 	.word	0x200052a8
24002714:	200179d0 	.word	0x200179d0
24002718:	20000068 	.word	0x20000068
2400271c:	20000069 	.word	0x20000069
24002720:	20000050 	.word	0x20000050
24002724:	200050a0 	.word	0x200050a0
24002728:	200050c0 	.word	0x200050c0
2400272c:	200054f8 	.word	0x200054f8
24002730:	20005068 	.word	0x20005068
24002734:	20000544 	.word	0x20000544
24002738:	20005070 	.word	0x20005070
2400273c:	20017874 	.word	0x20017874
24002740:	20005008 	.word	0x20005008
	for (int v = 0; v < numStringsThisBoard; v++)
24002744:	4b51      	ldr	r3, [pc, #324]	; (2400288c <audioTickL+0x4f4>)
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
24002746:	eef0 8a40 	vmov.f32	s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
2400274a:	781b      	ldrb	r3, [r3, #0]
2400274c:	4553      	cmp	r3, sl
2400274e:	f73f ae78 	bgt.w	24002442 <audioTickL+0xaa>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
24002752:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24002756:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2400275a:	eef0 0a68 	vmov.f32	s1, s17
2400275e:	f031 faff 	bl	24033d60 <__LEAF_clip_veneer>
	uint32_t tempCount6 = DWT->CYCCNT;
24002762:	4b4b      	ldr	r3, [pc, #300]	; (24002890 <audioTickL+0x4f8>)
	timeTick = tempCount6-tempCount5;
24002764:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
24002766:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
2400276a:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
2400276c:	4949      	ldr	r1, [pc, #292]	; (24002894 <audioTickL+0x4fc>)
2400276e:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
24002770:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
24002772:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
24002774:	d90b      	bls.n	2400278e <audioTickL+0x3f6>
24002776:	4b48      	ldr	r3, [pc, #288]	; (24002898 <audioTickL+0x500>)
24002778:	781b      	ldrb	r3, [r3, #0]
2400277a:	b943      	cbnz	r3, 2400278e <audioTickL+0x3f6>
		if (overSampled)
2400277c:	4a47      	ldr	r2, [pc, #284]	; (2400289c <audioTickL+0x504>)
2400277e:	7811      	ldrb	r1, [r2, #0]
24002780:	b921      	cbnz	r1, 2400278c <audioTickL+0x3f4>
		else if (oscToTick > 1)
24002782:	4a47      	ldr	r2, [pc, #284]	; (240028a0 <audioTickL+0x508>)
24002784:	7813      	ldrb	r3, [r2, #0]
24002786:	2b01      	cmp	r3, #1
24002788:	d901      	bls.n	2400278e <audioTickL+0x3f6>
			oscToTick--;
2400278a:	3b01      	subs	r3, #1
2400278c:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
2400278e:	4b45      	ldr	r3, [pc, #276]	; (240028a4 <audioTickL+0x50c>)
}
24002790:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
24002792:	ed9f 7a45 	vldr	s14, [pc, #276]	; 240028a8 <audioTickL+0x510>
24002796:	edd3 7a00 	vldr	s15, [r3]
2400279a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
2400279e:	ee27 0a80 	vmul.f32	s0, s15, s0
240027a2:	46bd      	mov	sp, r7
240027a4:	ecbd 8b0a 	vpop	{d8-d12}
240027a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
240027ac:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
240027ae:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
240027b2:	3508      	adds	r5, #8
240027b4:	2c04      	cmp	r4, #4
240027b6:	f47f ae89 	bne.w	240024cc <audioTickL+0x134>
240027ba:	e69d      	b.n	240024f8 <audioTickL+0x160>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
240027bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240027be:	eeb0 0a48 	vmov.f32	s0, s16
240027c2:	4b3a      	ldr	r3, [pc, #232]	; (240028ac <audioTickL+0x514>)
240027c4:	493a      	ldr	r1, [pc, #232]	; (240028b0 <audioTickL+0x518>)
240027c6:	4413      	add	r3, r2
240027c8:	4618      	mov	r0, r3
240027ca:	ee0c 3a10 	vmov	s24, r3
240027ce:	f031 facb 	bl	24033d68 <__tOversampler_upsample_veneer>
			for (int i = 0; i < numEffectToTick; i++)
240027d2:	4b38      	ldr	r3, [pc, #224]	; (240028b4 <audioTickL+0x51c>)
240027d4:	781b      	ldrb	r3, [r3, #0]
240027d6:	2b00      	cmp	r3, #0
240027d8:	d055      	beq.n	24002886 <audioTickL+0x4ee>
240027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
240027dc:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
240027e0:	4e35      	ldr	r6, [pc, #212]	; (240028b8 <audioTickL+0x520>)
			for (int i = 0; i < numEffectToTick; i++)
240027e2:	f04f 0800 	mov.w	r8, #0
240027e6:	4d35      	ldr	r5, [pc, #212]	; (240028bc <audioTickL+0x524>)
240027e8:	eb06 0903 	add.w	r9, r6, r3
240027ec:	4e34      	ldr	r6, [pc, #208]	; (240028c0 <audioTickL+0x528>)
240027ee:	441d      	add	r5, r3
240027f0:	4b2f      	ldr	r3, [pc, #188]	; (240028b0 <audioTickL+0x518>)
240027f2:	607b      	str	r3, [r7, #4]
240027f4:	4c2e      	ldr	r4, [pc, #184]	; (240028b0 <audioTickL+0x518>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
240027f6:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
240027fa:	4651      	mov	r1, sl
240027fc:	6833      	ldr	r3, [r6, #0]
240027fe:	4640      	mov	r0, r8
24002800:	eeb0 0a48 	vmov.f32	s0, s16
24002804:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
24002806:	ed99 7a00 	vldr	s14, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
2400280a:	edd5 6a00 	vldr	s13, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
2400280e:	ee60 7a07 	vmul.f32	s15, s0, s14
				for (int j = 0; j < OVERSAMPLE; j++)
24002812:	4b2c      	ldr	r3, [pc, #176]	; (240028c4 <audioTickL+0x52c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
24002814:	ee3b 7ac7 	vsub.f32	s14, s23, s14
24002818:	eee7 7a08 	vfma.f32	s15, s14, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
2400281c:	ee66 7aa7 	vmul.f32	s15, s13, s15
24002820:	ece4 7a01 	vstmia	r4!, {s15}
				for (int j = 0; j < OVERSAMPLE; j++)
24002824:	42a3      	cmp	r3, r4
24002826:	d1e6      	bne.n	240027f6 <audioTickL+0x45e>
			for (int i = 0; i < numEffectToTick; i++)
24002828:	4b22      	ldr	r3, [pc, #136]	; (240028b4 <audioTickL+0x51c>)
2400282a:	f108 0801 	add.w	r8, r8, #1
2400282e:	3604      	adds	r6, #4
24002830:	f109 0908 	add.w	r9, r9, #8
24002834:	781b      	ldrb	r3, [r3, #0]
24002836:	3508      	adds	r5, #8
24002838:	4543      	cmp	r3, r8
2400283a:	dcdb      	bgt.n	240027f4 <audioTickL+0x45c>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
2400283c:	687c      	ldr	r4, [r7, #4]
2400283e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24002842:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24002846:	edd4 0a00 	vldr	s1, [r4]
2400284a:	f031 fa89 	bl	24033d60 <__LEAF_clip_veneer>
2400284e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24002852:	edd4 0a01 	vldr	s1, [r4, #4]
24002856:	ed84 0a00 	vstr	s0, [r4]
2400285a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2400285e:	f031 fa7f 	bl	24033d60 <__LEAF_clip_veneer>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
24002862:	ee1c 0a10 	vmov	r0, s24
24002866:	4912      	ldr	r1, [pc, #72]	; (240028b0 <audioTickL+0x518>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
24002868:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
2400286c:	f031 faa0 	bl	24033db0 <__tOversampler_downsample_veneer>
24002870:	eeb0 8a40 	vmov.f32	s16, s0
24002874:	e6c0      	b.n	240025f8 <audioTickL+0x260>
		for (int i = 0; i < oscToTick; i++)
24002876:	eddf 7a14 	vldr	s15, [pc, #80]	; 240028c8 <audioTickL+0x530>
2400287a:	eeb0 6a67 	vmov.f32	s12, s15
2400287e:	e667      	b.n	24002550 <audioTickL+0x1b8>
	float masterSample = 0.0f;
24002880:	eddf 8a11 	vldr	s17, [pc, #68]	; 240028c8 <audioTickL+0x530>
24002884:	e765      	b.n	24002752 <audioTickL+0x3ba>
24002886:	4b0a      	ldr	r3, [pc, #40]	; (240028b0 <audioTickL+0x518>)
24002888:	607b      	str	r3, [r7, #4]
2400288a:	e7d7      	b.n	2400283c <audioTickL+0x4a4>
2400288c:	20000052 	.word	0x20000052
24002890:	e0001000 	.word	0xe0001000
24002894:	200179e0 	.word	0x200179e0
24002898:	2000511c 	.word	0x2000511c
2400289c:	20000069 	.word	0x20000069
240028a0:	20000068 	.word	0x20000068
240028a4:	20000744 	.word	0x20000744
240028a8:	3f7ae148 	.word	0x3f7ae148
240028ac:	200054c0 	.word	0x200054c0
240028b0:	200054fc 	.word	0x200054fc
240028b4:	20000050 	.word	0x20000050
240028b8:	200050a0 	.word	0x200050a0
240028bc:	200050c0 	.word	0x200050c0
240028c0:	20005008 	.word	0x20005008
240028c4:	20005504 	.word	0x20005504
240028c8:	00000000 	.word	0x00000000

240028cc <audioFrame>:
{
240028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
240028d0:	49c0      	ldr	r1, [pc, #768]	; (24002bd4 <audioFrame+0x308>)
	if (newBar)
240028d2:	f8df a36c 	ldr.w	sl, [pc, #876]	; 24002c40 <audioFrame+0x374>
	uint32_t tempCountFrame = DWT->CYCCNT;
240028d6:	684b      	ldr	r3, [r1, #4]
	if (newBar)
240028d8:	f8da 2000 	ldr.w	r2, [sl]
{
240028dc:	ed2d 8b10 	vpush	{d8-d15}
240028e0:	b08d      	sub	sp, #52	; 0x34
240028e2:	9007      	str	r0, [sp, #28]
	uint32_t tempCountFrame = DWT->CYCCNT;
240028e4:	9306      	str	r3, [sp, #24]
	if (newBar)
240028e6:	2a00      	cmp	r2, #0
240028e8:	f000 8096 	beq.w	24002a18 <audioFrame+0x14c>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
240028ec:	4aba      	ldr	r2, [pc, #744]	; (24002bd8 <audioFrame+0x30c>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
240028ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
240028f2:	49ba      	ldr	r1, [pc, #744]	; (24002bdc <audioFrame+0x310>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
240028f4:	ed92 7a03 	vldr	s14, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
240028f8:	ed92 6a02 	vldr	s12, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
240028fc:	edd2 6a01 	vldr	s13, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002900:	edd2 7a04 	vldr	s15, [r2, #16]
24002904:	ee77 2a46 	vsub.f32	s5, s14, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002908:	edd2 5a00 	vldr	s11, [r2]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400290c:	ee36 3a66 	vsub.f32	s6, s12, s13
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002910:	680a      	ldr	r2, [r1, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002912:	ee37 5ac7 	vsub.f32	s10, s15, s14
24002916:	ee36 4ae5 	vsub.f32	s8, s13, s11
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
2400291a:	4282      	cmp	r2, r0
2400291c:	d00c      	beq.n	24002938 <audioFrame+0x6c>
2400291e:	ee07 2a90 	vmov	s15, r2
24002922:	4aaf      	ldr	r2, [pc, #700]	; (24002be0 <audioFrame+0x314>)
24002924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24002928:	edd2 4a00 	vldr	s9, [r2]
2400292c:	eef4 4ae7 	vcmpe.f32	s9, s15
24002930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002934:	f140 8192 	bpl.w	24002c5c <audioFrame+0x390>
				stringMappedPositions[j] = 1.0f;
24002938:	f8df b308 	ldr.w	fp, [pc, #776]	; 24002c44 <audioFrame+0x378>
2400293c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
24002940:	f8cb 2000 	str.w	r2, [fp]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
24002944:	684a      	ldr	r2, [r1, #4]
24002946:	f64f 71ff 	movw	r1, #65535	; 0xffff
2400294a:	428a      	cmp	r2, r1
2400294c:	d00c      	beq.n	24002968 <audioFrame+0x9c>
2400294e:	ee07 2a90 	vmov	s15, r2
24002952:	4aa3      	ldr	r2, [pc, #652]	; (24002be0 <audioFrame+0x314>)
24002954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24002958:	edd2 4a01 	vldr	s9, [r2, #4]
2400295c:	eef4 7ae4 	vcmpe.f32	s15, s9
24002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002964:	f340 8123 	ble.w	24002bae <audioFrame+0x2e2>
				stringMappedPositions[j] = 1.0f;
24002968:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
2400296c:	f8cb 2004 	str.w	r2, [fp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
24002970:	4b9c      	ldr	r3, [pc, #624]	; (24002be4 <audioFrame+0x318>)
24002972:	781a      	ldrb	r2, [r3, #0]
24002974:	9305      	str	r3, [sp, #20]
24002976:	2a00      	cmp	r2, #0
24002978:	d04b      	beq.n	24002a12 <audioFrame+0x146>
2400297a:	4f9b      	ldr	r7, [pc, #620]	; (24002be8 <audioFrame+0x31c>)
2400297c:	2400      	movs	r4, #0
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
2400297e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
24002982:	eddf 8a9a 	vldr	s17, [pc, #616]	; 24002bec <audioFrame+0x320>
24002986:	463b      	mov	r3, r7
24002988:	4e99      	ldr	r6, [pc, #612]	; (24002bf0 <audioFrame+0x324>)
2400298a:	4627      	mov	r7, r4
2400298c:	4d99      	ldr	r5, [pc, #612]	; (24002bf4 <audioFrame+0x328>)
2400298e:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 24002c48 <audioFrame+0x37c>
24002992:	461c      	mov	r4, r3
24002994:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 24002c4c <audioFrame+0x380>
			if (dualSlider)
24002998:	f8d9 3000 	ldr.w	r3, [r9]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
2400299c:	ed9b 0a00 	vldr	s0, [fp]
			if (dualSlider)
240029a0:	b1c3      	cbz	r3, 240029d4 <audioFrame+0x108>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
240029a2:	eeb4 0a48 	vcmp.f32	s0, s16
240029a6:	eddb 0a01 	vldr	s1, [fp, #4]
240029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240029ae:	f040 80ed 	bne.w	24002b8c <audioFrame+0x2c0>
240029b2:	eef4 0ac8 	vcmpe.f32	s1, s16
240029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240029ba:	f100 816d 	bmi.w	24002c98 <audioFrame+0x3cc>
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
240029be:	4b8e      	ldr	r3, [pc, #568]	; (24002bf8 <audioFrame+0x32c>)
240029c0:	681b      	ldr	r3, [r3, #0]
240029c2:	443b      	add	r3, r7
240029c4:	ee07 3a90 	vmov	s15, r3
240029c8:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
240029cc:	ee21 1a28 	vmul.f32	s2, s2, s17
240029d0:	f010 ff76 	bl	240138c0 <LEAF_interpolation_linear>
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
240029d4:	4620      	mov	r0, r4
		for (int i = 0; i < numStringsThisBoard; i++)
240029d6:	3701      	adds	r7, #1
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
240029d8:	f00f f8d8 	bl	24011b8c <tSlide_tick>
			invMapping[i] = (1.0f / myMappedPos);
240029dc:	ee88 7a00 	vdiv.f32	s14, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
240029e0:	edd8 6a00 	vldr	s13, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
240029e4:	3404      	adds	r4, #4
240029e6:	9b05      	ldr	r3, [sp, #20]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
240029e8:	4984      	ldr	r1, [pc, #528]	; (24002bfc <audioFrame+0x330>)
		for (int i = 0; i < numStringsThisBoard; i++)
240029ea:	781a      	ldrb	r2, [r3, #0]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
240029ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
240029f0:	42ba      	cmp	r2, r7
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
240029f2:	ee37 6a48 	vsub.f32	s12, s14, s16
			invMapping[i] = (1.0f / myMappedPos);
240029f6:	eca6 7a01 	vstmia	r6!, {s14}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
240029fa:	eee6 7a26 	vfma.f32	s15, s12, s13
240029fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24002a02:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
24002a06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24002a0a:	681b      	ldr	r3, [r3, #0]
24002a0c:	f845 3b04 	str.w	r3, [r5], #4
		for (int i = 0; i < numStringsThisBoard; i++)
24002a10:	dcc2      	bgt.n	24002998 <audioFrame+0xcc>
		newBar = 0;
24002a12:	2200      	movs	r2, #0
24002a14:	f8ca 2000 	str.w	r2, [sl]
	if (newPluck)
24002a18:	f8df b234 	ldr.w	fp, [pc, #564]	; 24002c50 <audioFrame+0x384>
24002a1c:	f8db 3000 	ldr.w	r3, [fp]
24002a20:	2b00      	cmp	r3, #0
24002a22:	d03f      	beq.n	24002aa4 <audioFrame+0x1d8>
		for (int i = 0; i < numStringsThisBoard; i++)
24002a24:	4b6f      	ldr	r3, [pc, #444]	; (24002be4 <audioFrame+0x318>)
24002a26:	7819      	ldrb	r1, [r3, #0]
24002a28:	9305      	str	r3, [sp, #20]
24002a2a:	2900      	cmp	r1, #0
24002a2c:	d037      	beq.n	24002a9e <audioFrame+0x1d2>
24002a2e:	4a74      	ldr	r2, [pc, #464]	; (24002c00 <audioFrame+0x334>)
24002a30:	2700      	movs	r7, #0
24002a32:	4b74      	ldr	r3, [pc, #464]	; (24002c04 <audioFrame+0x338>)
24002a34:	9203      	str	r2, [sp, #12]
24002a36:	4a74      	ldr	r2, [pc, #464]	; (24002c08 <audioFrame+0x33c>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
24002a38:	461d      	mov	r5, r3
					tLivingString2_setDecay(&strings[i], 0.2f);
24002a3a:	ed9f ba74 	vldr	s22, [pc, #464]	; 24002c0c <audioFrame+0x340>
24002a3e:	9202      	str	r2, [sp, #8]
24002a40:	4a73      	ldr	r2, [pc, #460]	; (24002c10 <audioFrame+0x344>)
				float amplitz = stringInputs[i] * 0.000025f;
24002a42:	ed9f ca74 	vldr	s24, [pc, #464]	; 24002c14 <audioFrame+0x348>
24002a46:	9201      	str	r2, [sp, #4]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24002a48:	eddf aa73 	vldr	s21, [pc, #460]	; 24002c18 <audioFrame+0x34c>
24002a4c:	4a73      	ldr	r2, [pc, #460]	; (24002c1c <audioFrame+0x350>)
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
24002a4e:	eddf ba74 	vldr	s23, [pc, #464]	; 24002c20 <audioFrame+0x354>
24002a52:	f8df a200 	ldr.w	sl, [pc, #512]	; 24002c54 <audioFrame+0x388>
24002a56:	f8df 9200 	ldr.w	r9, [pc, #512]	; 24002c58 <audioFrame+0x38c>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
24002a5a:	ed9f aa72 	vldr	s20, [pc, #456]	; 24002c24 <audioFrame+0x358>
24002a5e:	9204      	str	r2, [sp, #16]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
24002a60:	f85a 4b04 	ldr.w	r4, [sl], #4
24002a64:	682e      	ldr	r6, [r5, #0]
24002a66:	2c00      	cmp	r4, #0
24002a68:	d16f      	bne.n	24002b4a <audioFrame+0x27e>
24002a6a:	2e00      	cmp	r6, #0
24002a6c:	f040 81a7 	bne.w	24002dbe <audioFrame+0x4f2>
		for (int i = 0; i < numStringsThisBoard; i++)
24002a70:	9b03      	ldr	r3, [sp, #12]
24002a72:	3701      	adds	r7, #1
24002a74:	3504      	adds	r5, #4
24002a76:	f109 0904 	add.w	r9, r9, #4
24002a7a:	3304      	adds	r3, #4
24002a7c:	42b9      	cmp	r1, r7
			previousStringInputs[i] = stringInputs[i];
24002a7e:	f84a 6c04 	str.w	r6, [sl, #-4]
		for (int i = 0; i < numStringsThisBoard; i++)
24002a82:	9303      	str	r3, [sp, #12]
24002a84:	9b02      	ldr	r3, [sp, #8]
24002a86:	f103 0304 	add.w	r3, r3, #4
24002a8a:	9302      	str	r3, [sp, #8]
24002a8c:	9b01      	ldr	r3, [sp, #4]
24002a8e:	f103 0304 	add.w	r3, r3, #4
24002a92:	9301      	str	r3, [sp, #4]
24002a94:	9b04      	ldr	r3, [sp, #16]
24002a96:	f103 0348 	add.w	r3, r3, #72	; 0x48
24002a9a:	9304      	str	r3, [sp, #16]
24002a9c:	dce0      	bgt.n	24002a60 <audioFrame+0x194>
		newPluck = 0;
24002a9e:	2300      	movs	r3, #0
24002aa0:	f8cb 3000 	str.w	r3, [fp]
	if (presetReady)
24002aa4:	4b60      	ldr	r3, [pc, #384]	; (24002c28 <audioFrame+0x35c>)
24002aa6:	681b      	ldr	r3, [r3, #0]
24002aa8:	b3c3      	cbz	r3, 24002b1c <audioFrame+0x250>
		if (currentActivePreset == 63)
24002aaa:	4b60      	ldr	r3, [pc, #384]	; (24002c2c <audioFrame+0x360>)
24002aac:	781b      	ldrb	r3, [r3, #0]
24002aae:	2b3f      	cmp	r3, #63	; 0x3f
24002ab0:	d017      	beq.n	24002ae2 <audioFrame+0x216>
		else if (currentActivePreset == 62)
24002ab2:	2b3e      	cmp	r3, #62	; 0x3e
24002ab4:	f000 813b 	beq.w	24002d2e <audioFrame+0x462>
		else if (currentActivePreset == 61)
24002ab8:	2b3d      	cmp	r3, #61	; 0x3d
24002aba:	f000 80f2 	beq.w	24002ca2 <audioFrame+0x3d6>
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002abe:	f7ff fc6b 	bl	24002398 <audioTickL>
24002ac2:	eef0 7a40 	vmov.f32	s15, s0
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002ac6:	9d07      	ldr	r5, [sp, #28]
				audioOutBuffer[buffer_offset + i] = current_sample;
24002ac8:	4c59      	ldr	r4, [pc, #356]	; (24002c30 <audioFrame+0x364>)
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002aca:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002ace:	1c6a      	adds	r2, r5, #1
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002ad0:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i] = current_sample;
24002ad4:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002ad8:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002adc:	f7ff fc5c 	bl	24002398 <audioTickL>
24002ae0:	e010      	b.n	24002b04 <audioFrame+0x238>
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002ae2:	f7fe feab 	bl	2400183c <audioTickString>
24002ae6:	eef0 7a40 	vmov.f32	s15, s0
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002aea:	9d07      	ldr	r5, [sp, #28]
				audioOutBuffer[buffer_offset + i] = current_sample;
24002aec:	4c50      	ldr	r4, [pc, #320]	; (24002c30 <audioFrame+0x364>)
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002aee:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002af2:	1c6a      	adds	r2, r5, #1
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002af4:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i] = current_sample;
24002af8:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002afc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
24002b00:	f7fe fe9c 	bl	2400183c <audioTickString>
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002b04:	eef0 7a40 	vmov.f32	s15, s0
				audioOutBuffer[buffer_offset + i] = current_sample;
24002b08:	1caa      	adds	r2, r5, #2
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002b0a:	1ce8      	adds	r0, r5, #3
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
24002b0c:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
24002b10:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i] = current_sample;
24002b14:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002b18:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002b1c:	4845      	ldr	r0, [pc, #276]	; (24002c34 <audioFrame+0x368>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
24002b1e:	4b2d      	ldr	r3, [pc, #180]	; (24002bd4 <audioFrame+0x308>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002b20:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
24002b24:	685b      	ldr	r3, [r3, #4]
24002b26:	9806      	ldr	r0, [sp, #24]
24002b28:	4943      	ldr	r1, [pc, #268]	; (24002c38 <audioFrame+0x36c>)
24002b2a:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002b2c:	4a43      	ldr	r2, [pc, #268]	; (24002c3c <audioFrame+0x370>)
24002b2e:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
24002b32:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
24002b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002b38:	ee67 7a87 	vmul.f32	s15, s15, s14
24002b3c:	edc2 7a00 	vstr	s15, [r2]
}
24002b40:	b00d      	add	sp, #52	; 0x34
24002b42:	ecbd 8b10 	vpop	{d8-d15}
24002b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
24002b4a:	dd91      	ble.n	24002a70 <audioFrame+0x1a4>
24002b4c:	2e00      	cmp	r6, #0
24002b4e:	d18f      	bne.n	24002a70 <audioFrame+0x1a4>
					tADSRT_off(&envs[v][i]);
24002b50:	4648      	mov	r0, r9
24002b52:	f00e fd65 	bl	24011620 <tADSRT_off>
24002b56:	f109 0008 	add.w	r0, r9, #8
24002b5a:	f00e fd61 	bl	24011620 <tADSRT_off>
24002b5e:	f109 0010 	add.w	r0, r9, #16
24002b62:	f00e fd5d 	bl	24011620 <tADSRT_off>
24002b66:	f109 0018 	add.w	r0, r9, #24
24002b6a:	f00e fd59 	bl	24011620 <tADSRT_off>
				if (currentActivePreset == 63)
24002b6e:	4a2f      	ldr	r2, [pc, #188]	; (24002c2c <audioFrame+0x360>)
24002b70:	7812      	ldrb	r2, [r2, #0]
24002b72:	2a3f      	cmp	r2, #63	; 0x3f
24002b74:	f000 838f 	beq.w	24003296 <audioFrame+0x9ca>
				else if (currentActivePreset == 62)
24002b78:	2a3e      	cmp	r2, #62	; 0x3e
24002b7a:	f000 83e5 	beq.w	24003348 <audioFrame+0xa7c>
				else if (currentActivePreset == 61)
24002b7e:	2a3d      	cmp	r2, #61	; 0x3d
24002b80:	f000 840a 	beq.w	24003398 <audioFrame+0xacc>
		for (int i = 0; i < numStringsThisBoard; i++)
24002b84:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
24002b86:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
24002b88:	7819      	ldrb	r1, [r3, #0]
24002b8a:	e771      	b.n	24002a70 <audioFrame+0x1a4>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
24002b8c:	eeb4 0a48 	vcmp.f32	s0, s16
24002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002b94:	f57f af13 	bpl.w	240029be <audioFrame+0xf2>
24002b98:	eef4 0a48 	vcmp.f32	s1, s16
24002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002ba0:	f47f af0d 	bne.w	240029be <audioFrame+0xf2>
					stringMappedPositions[1] = stringMappedPositions[0];
24002ba4:	eef0 0a40 	vmov.f32	s1, s0
24002ba8:	ed8b 0a01 	vstr	s0, [fp, #4]
24002bac:	e707      	b.n	240029be <audioFrame+0xf2>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
24002bae:	edd2 3a03 	vldr	s7, [r2, #12]
24002bb2:	eef4 7ae3 	vcmpe.f32	s15, s7
24002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002bba:	f2c0 80ca 	blt.w	24002d52 <audioFrame+0x486>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002bbe:	ee77 7ae4 	vsub.f32	s15, s15, s9
24002bc2:	ee73 4ae4 	vsub.f32	s9, s7, s9
24002bc6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
24002bca:	eee4 5a07 	vfma.f32	s11, s8, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002bce:	edcb 5a01 	vstr	s11, [fp, #4]
24002bd2:	e6cd      	b.n	24002970 <audioFrame+0xa4>
24002bd4:	e0001000 	.word	0xe0001000
24002bd8:	20000034 	.word	0x20000034
24002bdc:	200179a4 	.word	0x200179a4
24002be0:	2000000c 	.word	0x2000000c
24002be4:	20000052 	.word	0x20000052
24002be8:	20005098 	.word	0x20005098
24002bec:	3dcccccd 	.word	0x3dcccccd
24002bf0:	20005140 	.word	0x20005140
24002bf4:	20000b0c 	.word	0x20000b0c
24002bf8:	20005078 	.word	0x20005078
24002bfc:	30000040 	.word	0x30000040
24002c00:	200179b4 	.word	0x200179b4
24002c04:	20017964 	.word	0x20017964
24002c08:	200178e4 	.word	0x200178e4
24002c0c:	3e4ccccd 	.word	0x3e4ccccd
24002c10:	2001c57c 	.word	0x2001c57c
24002c14:	37d1b717 	.word	0x37d1b717
24002c18:	3ffeb852 	.word	0x3ffeb852
24002c1c:	20000a64 	.word	0x20000a64
24002c20:	44fa0000 	.word	0x44fa0000
24002c24:	00000000 	.word	0x00000000
24002c28:	200055e4 	.word	0x200055e4
24002c2c:	20018b4b 	.word	0x20018b4b
24002c30:	30000000 	.word	0x30000000
24002c34:	20000008 	.word	0x20000008
24002c38:	200179cc 	.word	0x200179cc
24002c3c:	2000507c 	.word	0x2000507c
24002c40:	20005480 	.word	0x20005480
24002c44:	20000364 	.word	0x20000364
24002c48:	20005000 	.word	0x20005000
24002c4c:	2000004c 	.word	0x2000004c
24002c50:	20005488 	.word	0x20005488
24002c54:	200055f4 	.word	0x200055f4
24002c58:	20005018 	.word	0x20005018
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
24002c5c:	edd2 3a02 	vldr	s7, [r2, #8]
24002c60:	eef4 3ae7 	vcmpe.f32	s7, s15
24002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002c68:	f240 809a 	bls.w	24002da0 <audioFrame+0x4d4>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
24002c6c:	ed92 2a04 	vldr	s4, [r2, #16]
24002c70:	eeb4 2ae7 	vcmpe.f32	s4, s15
24002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002c78:	d840      	bhi.n	24002cfc <audioFrame+0x430>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002c7a:	ee77 7ae3 	vsub.f32	s15, s15, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002c7e:	f8df b294 	ldr.w	fp, [pc, #660]	; 24002f14 <audioFrame+0x648>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002c82:	ee72 4a63 	vsub.f32	s9, s4, s7
24002c86:	eec7 3aa4 	vdiv.f32	s7, s15, s9
24002c8a:	eef0 7a66 	vmov.f32	s15, s13
24002c8e:	eee3 7a83 	vfma.f32	s15, s7, s6
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002c92:	edcb 7a00 	vstr	s15, [fp]
24002c96:	e655      	b.n	24002944 <audioFrame+0x78>
					stringMappedPositions[0] = stringMappedPositions[1];
24002c98:	eeb0 0a60 	vmov.f32	s0, s1
24002c9c:	edcb 0a00 	vstr	s1, [fp]
24002ca0:	e68d      	b.n	240029be <audioFrame+0xf2>
24002ca2:	4e8c      	ldr	r6, [pc, #560]	; (24002ed4 <audioFrame+0x608>)
24002ca4:	4d8c      	ldr	r5, [pc, #560]	; (24002ed8 <audioFrame+0x60c>)
						tCycle_setFreq(&additive[i][j], tempFreq);
24002ca6:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 24002edc <audioFrame+0x610>
		else if (currentActivePreset == 61)
24002caa:	f1a6 042c 	sub.w	r4, r6, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002cae:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
24002cb0:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002cb2:	f00e fe13 	bl	240118dc <tADSRT_tickNoInterp>
						tCycle_setFreq(&additive[i][j], tempFreq);
24002cb6:	4628      	mov	r0, r5
24002cb8:	eeb0 0a48 	vmov.f32	s0, s16
24002cbc:	f011 f838 	bl	24013d30 <tCycle_setFreq>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
24002cc0:	4628      	mov	r0, r5
24002cc2:	f011 f80f 	bl	24013ce4 <tCycle_tick>
				for (int j = 0; j < NUM_OVERTONES; j++)
24002cc6:	42a6      	cmp	r6, r4
24002cc8:	f105 0504 	add.w	r5, r5, #4
24002ccc:	d1ef      	bne.n	24002cae <audioFrame+0x3e2>
24002cce:	4c84      	ldr	r4, [pc, #528]	; (24002ee0 <audioFrame+0x614>)
24002cd0:	4d84      	ldr	r5, [pc, #528]	; (24002ee4 <audioFrame+0x618>)
						tCycle_setFreq(&additive[i][j], tempFreq);
24002cd2:	ed9f 8a82 	vldr	s16, [pc, #520]	; 24002edc <audioFrame+0x610>
24002cd6:	f104 062c 	add.w	r6, r4, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002cda:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
24002cdc:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
24002cde:	f00e fdfd 	bl	240118dc <tADSRT_tickNoInterp>
						tCycle_setFreq(&additive[i][j], tempFreq);
24002ce2:	4628      	mov	r0, r5
24002ce4:	eeb0 0a48 	vmov.f32	s0, s16
24002ce8:	f011 f822 	bl	24013d30 <tCycle_setFreq>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
24002cec:	4628      	mov	r0, r5
24002cee:	f010 fff9 	bl	24013ce4 <tCycle_tick>
				for (int j = 0; j < NUM_OVERTONES; j++)
24002cf2:	42b4      	cmp	r4, r6
24002cf4:	f105 0504 	add.w	r5, r5, #4
24002cf8:	d1ef      	bne.n	24002cda <audioFrame+0x40e>
24002cfa:	e70f      	b.n	24002b1c <audioFrame+0x250>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
24002cfc:	edd2 4a06 	vldr	s9, [r2, #24]
24002d00:	eef4 4ae7 	vcmpe.f32	s9, s15
24002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002d08:	f240 82b5 	bls.w	24003276 <audioFrame+0x9aa>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002d0c:	edd2 3a08 	vldr	s7, [r2, #32]
24002d10:	ee77 7ae4 	vsub.f32	s15, s15, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
24002d14:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 24002f14 <audioFrame+0x648>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002d18:	ee73 4ae4 	vsub.f32	s9, s7, s9
24002d1c:	eec7 3aa4 	vdiv.f32	s7, s15, s9
24002d20:	eef0 7a47 	vmov.f32	s15, s14
24002d24:	eee3 7a85 	vfma.f32	s15, s7, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
24002d28:	edcb 7a00 	vstr	s15, [fp]
24002d2c:	e60a      	b.n	24002944 <audioFrame+0x78>
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002d2e:	f7fe fe99 	bl	24001a64 <audioTickString2>
24002d32:	eef0 7a40 	vmov.f32	s15, s0
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002d36:	9d07      	ldr	r5, [sp, #28]
				audioOutBuffer[buffer_offset + i] = current_sample;
24002d38:	4c6b      	ldr	r4, [pc, #428]	; (24002ee8 <audioFrame+0x61c>)
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002d3a:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002d3e:	1c6a      	adds	r2, r5, #1
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002d40:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i] = current_sample;
24002d44:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
24002d48:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
24002d4c:	f7fe fe8a 	bl	24001a64 <audioTickString2>
24002d50:	e6d8      	b.n	24002b04 <audioFrame+0x238>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
24002d52:	edd2 5a05 	vldr	s11, [r2, #20]
24002d56:	eef4 7ae5 	vcmpe.f32	s15, s11
24002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002d5e:	db0a      	blt.n	24002d76 <audioFrame+0x4aa>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002d60:	ee77 7ae3 	vsub.f32	s15, s15, s7
24002d64:	ee75 5ae3 	vsub.f32	s11, s11, s7
24002d68:	ee87 7aa5 	vdiv.f32	s14, s15, s11
24002d6c:	eee3 6a07 	vfma.f32	s13, s6, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
24002d70:	edcb 6a01 	vstr	s13, [fp, #4]
24002d74:	e5fc      	b.n	24002970 <audioFrame+0xa4>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
24002d76:	edd2 6a07 	vldr	s13, [r2, #28]
24002d7a:	eef4 7ae6 	vcmpe.f32	s15, s13
24002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002d82:	f280 826c 	bge.w	2400325e <audioFrame+0x992>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002d86:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
24002d8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
24002d8e:	ee76 6a66 	vsub.f32	s13, s12, s13
24002d92:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24002d96:	eea5 7a06 	vfma.f32	s14, s10, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
24002d9a:	ed8b 7a01 	vstr	s14, [fp, #4]
24002d9e:	e5e7      	b.n	24002970 <audioFrame+0xa4>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002da0:	ee77 7ae4 	vsub.f32	s15, s15, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002da4:	f8df b16c 	ldr.w	fp, [pc, #364]	; 24002f14 <audioFrame+0x648>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002da8:	ee73 4ae4 	vsub.f32	s9, s7, s9
24002dac:	eec7 3aa4 	vdiv.f32	s7, s15, s9
24002db0:	eef0 7a65 	vmov.f32	s15, s11
24002db4:	eee4 7a23 	vfma.f32	s15, s8, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
24002db8:	edcb 7a00 	vstr	s15, [fp]
24002dbc:	e5c2      	b.n	24002944 <audioFrame+0x78>
				float amplitz = stringInputs[i] * 0.000025f;
24002dbe:	ee07 6a90 	vmov	s15, r6
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
24002dc2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24002dc6:	eeb0 0a4a 	vmov.f32	s0, s20
				stringOctave[i] = octave;
24002dca:	464e      	mov	r6, r9
				float amplitz = stringInputs[i] * 0.000025f;
24002dcc:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
24002dd0:	ee60 0a8c 	vmul.f32	s1, s1, s24
24002dd4:	f030 ffc4 	bl	24033d60 <__LEAF_clip_veneer>
				stringOctave[i] = octave;
24002dd8:	4a44      	ldr	r2, [pc, #272]	; (24002eec <audioFrame+0x620>)
24002dda:	00bb      	lsls	r3, r7, #2
24002ddc:	4944      	ldr	r1, [pc, #272]	; (24002ef0 <audioFrame+0x624>)
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
24002dde:	eef0 9a40 	vmov.f32	s19, s0
				stringOctave[i] = octave;
24002de2:	eb02 0287 	add.w	r2, r2, r7, lsl #2
24002de6:	9309      	str	r3, [sp, #36]	; 0x24
24002de8:	9b01      	ldr	r3, [sp, #4]
24002dea:	6809      	ldr	r1, [r1, #0]
24002dec:	f5a3 7813 	sub.w	r8, r3, #588	; 0x24c
24002df0:	3354      	adds	r3, #84	; 0x54
24002df2:	6011      	str	r1, [r2, #0]
				for (int v = 0; v < NUM_ENV; v++)
24002df4:	9308      	str	r3, [sp, #32]
					if (useVelocity == 0) envVel = 1.f;
24002df6:	edd8 7a00 	vldr	s15, [r8]
				    tADSRT_on(&envs[v][i], envVel);
24002dfa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24002dfe:	4630      	mov	r0, r6
				for (int v = 0; v < NUM_ENV; v++)
24002e00:	f108 08a8 	add.w	r8, r8, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
24002e04:	eef5 7a40 	vcmp.f32	s15, #0.0
24002e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002e0c:	f000 821b 	beq.w	24003246 <audioFrame+0x97a>
				    tADSRT_on(&envs[v][i], envVel);
24002e10:	eeb0 0a69 	vmov.f32	s0, s19
				for (int v = 0; v < NUM_ENV; v++)
24002e14:	3608      	adds	r6, #8
				    tADSRT_on(&envs[v][i], envVel);
24002e16:	f00e fbf1 	bl	240115fc <tADSRT_on>
				    voiceSounding = 1;
24002e1a:	4b36      	ldr	r3, [pc, #216]	; (24002ef4 <audioFrame+0x628>)
24002e1c:	f04f 0201 	mov.w	r2, #1
24002e20:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
24002e22:	9b08      	ldr	r3, [sp, #32]
24002e24:	4598      	cmp	r8, r3
24002e26:	d1e6      	bne.n	24002df6 <audioFrame+0x52a>
24002e28:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
					if (noteOnSync > 0.5f)
24002e2c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_LFOS; v++)
24002e30:	9408      	str	r4, [sp, #32]
24002e32:	2600      	movs	r6, #0
24002e34:	009b      	lsls	r3, r3, #2
				stringOctave[i] = octave;
24002e36:	f8dd 8004 	ldr.w	r8, [sp, #4]
24002e3a:	330c      	adds	r3, #12
				for (int v = 0; v < NUM_LFOS; v++)
24002e3c:	461c      	mov	r4, r3
					if (noteOnSync > 0.5f)
24002e3e:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
24002e42:	4630      	mov	r0, r6
24002e44:	4639      	mov	r1, r7
				for (int v = 0; v < NUM_LFOS; v++)
24002e46:	3601      	adds	r6, #1
					if (noteOnSync > 0.5f)
24002e48:	eef4 7ac8 	vcmpe.f32	s15, s16
24002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002e50:	dd04      	ble.n	24002e5c <audioFrame+0x590>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
24002e52:	ed98 0a00 	vldr	s0, [r8]
24002e56:	f858 2004 	ldr.w	r2, [r8, r4]
24002e5a:	4790      	blx	r2
				for (int v = 0; v < NUM_LFOS; v++)
24002e5c:	2e04      	cmp	r6, #4
24002e5e:	f108 088c 	add.w	r8, r8, #140	; 0x8c
24002e62:	d1ec      	bne.n	24002e3e <audioFrame+0x572>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
24002e64:	4924      	ldr	r1, [pc, #144]	; (24002ef8 <audioFrame+0x62c>)
24002e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24002e6a:	4824      	ldr	r0, [pc, #144]	; (24002efc <audioFrame+0x630>)
24002e6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24002e70:	780a      	ldrb	r2, [r1, #0]
				if (currentActivePreset == 63)
24002e72:	4e23      	ldr	r6, [pc, #140]	; (24002f00 <audioFrame+0x634>)
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
24002e74:	eb00 0082 	add.w	r0, r0, r2, lsl #2
24002e78:	3201      	adds	r2, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
24002e7a:	9b02      	ldr	r3, [sp, #8]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
24002e7c:	edd0 7a00 	vldr	s15, [r0]
24002e80:	700a      	strb	r2, [r1, #0]
24002e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if (currentActivePreset == 63)
24002e86:	7832      	ldrb	r2, [r6, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
24002e88:	9c08      	ldr	r4, [sp, #32]
				if (currentActivePreset == 63)
24002e8a:	2a3f      	cmp	r2, #63	; 0x3f
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
24002e8c:	edc3 9a00 	vstr	s19, [r3]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
24002e90:	ee67 7a87 	vmul.f32	s15, s15, s14
24002e94:	edc3 7a02 	vstr	s15, [r3, #8]
				if (currentActivePreset == 63)
24002e98:	f000 826f 	beq.w	2400337a <audioFrame+0xaae>
				if (currentActivePreset == 62)
24002e9c:	2a3e      	cmp	r2, #62	; 0x3e
24002e9e:	f000 8290 	beq.w	240033c2 <audioFrame+0xaf6>
				else if (currentActivePreset == 61)
24002ea2:	2a3d      	cmp	r2, #61	; 0x3d
24002ea4:	f47f ae6e 	bne.w	24002b84 <audioFrame+0x2b8>
24002ea8:	4a16      	ldr	r2, [pc, #88]	; (24002f04 <audioFrame+0x638>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
24002eaa:	eef1 ca00 	vmov.f32	s25, #16	; 0x40800000  4.0
24002eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
							stringFade = (float)(thisString - 6.0f) * 0.2f;
24002eb0:	eeb1 da08 	vmov.f32	s26, #24	; 0x40c00000  6.0
				else if (currentActivePreset == 61)
24002eb4:	9904      	ldr	r1, [sp, #16]
24002eb6:	4413      	add	r3, r2
24002eb8:	4813      	ldr	r0, [pc, #76]	; (24002f08 <audioFrame+0x63c>)
24002eba:	4a14      	ldr	r2, [pc, #80]	; (24002f0c <audioFrame+0x640>)
24002ebc:	4e14      	ldr	r6, [pc, #80]	; (24002f10 <audioFrame+0x644>)
24002ebe:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24002f18 <audioFrame+0x64c>
24002ec2:	e9cd 7908 	strd	r7, r9, [sp, #32]
24002ec6:	e9cd 5a0a 	strd	r5, sl, [sp, #40]	; 0x28
24002eca:	4617      	mov	r7, r2
24002ecc:	460d      	mov	r5, r1
24002ece:	469a      	mov	sl, r3
24002ed0:	4681      	mov	r9, r0
24002ed2:	e100      	b.n	240030d6 <audioFrame+0x80a>
24002ed4:	20000a90 	.word	0x20000a90
24002ed8:	200009d4 	.word	0x200009d4
24002edc:	00000000 	.word	0x00000000
24002ee0:	20000aac 	.word	0x20000aac
24002ee4:	20000a1c 	.word	0x20000a1c
24002ee8:	30000000 	.word	0x30000000
24002eec:	2001799c 	.word	0x2001799c
24002ef0:	200054bc 	.word	0x200054bc
24002ef4:	20017a34 	.word	0x20017a34
24002ef8:	20005a3c 	.word	0x20005a3c
24002efc:	2001c7dc 	.word	0x2001c7dc
24002f00:	20018b4b 	.word	0x20018b4b
24002f04:	20017934 	.word	0x20017934
24002f08:	2000514c 	.word	0x2000514c
24002f0c:	20000c94 	.word	0x20000c94
24002f10:	20000db4 	.word	0x20000db4
24002f14:	20000364 	.word	0x20000364
24002f18:	20000340 	.word	0x20000340
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24002f1c:	ed98 7a06 	vldr	s14, [r8, #24]
24002f20:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f24:	edd8 7a08 	vldr	s15, [r8, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24002f28:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f2c:	ee78 6a47 	vsub.f32	s13, s16, s14
24002f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24002f34:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
24002f38:	ee68 8a8b 	vmul.f32	s17, s17, s22
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f3c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24002f40:	ee7f da68 	vsub.f32	s27, s30, s17
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24002f44:	ee70 0aa0 	vadd.f32	s1, s1, s1
24002f48:	f030 ff0a 	bl	24033d60 <__LEAF_clip_veneer>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24002f4c:	ed98 7a03 	vldr	s14, [r8, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f50:	edd8 7a05 	vldr	s15, [r8, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
24002f54:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f58:	ee78 6a47 	vsub.f32	s13, s16, s14
24002f5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24002f60:	eeb0 1a6a 	vmov.f32	s2, s21
24002f64:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24002f68:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24002f6c:	ee70 0aa0 	vadd.f32	s1, s1, s1
24002f70:	f030 fef6 	bl	24033d60 <__LEAF_clip_veneer>
							int height2Int = floor(height2);
24002f74:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002f78:	48ec      	ldr	r0, [pc, #944]	; (2400332c <audioFrame+0xa60>)
							int height1Int = floor(height1);
24002f7a:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							if (height2 < 1.0f)
24002f7e:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
24002f82:	febb 6b46 	vrintm.f64	d6, d6
24002f86:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
24002f8a:	febb 7b47 	vrintm.f64	d7, d7
24002f8e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
24002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
24002f96:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
24002f9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
24002f9e:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
24002fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002fa6:	f102 0101 	add.w	r1, r2, #1
24002faa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
24002fae:	ee3e 9ae6 	vsub.f32	s18, s29, s13
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002fb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24002fb6:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002fba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24002fbe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
24002fc2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
24002fc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
24002fca:	ed92 5a48 	vldr	s10, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24002fce:	f103 0201 	add.w	r2, r3, #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002fd2:	ed91 7a48 	vldr	s14, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24002fd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24002fda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002fde:	ee29 9a07 	vmul.f32	s18, s18, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24002fe2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002fe6:	ee3f 7a6e 	vsub.f32	s14, s30, s29
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24002fea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24002fee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
24002ff2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24002ff6:	ee37 7a26 	vadd.f32	s14, s14, s13
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24002ffa:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
24002ffe:	edd2 5a24 	vldr	s11, [r2, #144]	; 0x90
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24003002:	eea5 9a07 	vfma.f32	s18, s10, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003006:	ee3f 7a40 	vsub.f32	s14, s30, s0
2400300a:	ee37 7a27 	vadd.f32	s14, s14, s15
							float height1Float = height1 - height1Int;
2400300e:	ee70 7a67 	vsub.f32	s15, s0, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24003012:	ee2d 9a89 	vmul.f32	s18, s27, s18
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
24003016:	ee67 7aa5 	vmul.f32	s15, s15, s11
2400301a:	eee6 7a07 	vfma.f32	s15, s12, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
2400301e:	eea8 9aa7 	vfma.f32	s18, s17, s15
							if (height2 < 1.0f)
24003022:	f100 8150 	bmi.w	240032c6 <audioFrame+0x9fa>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
24003026:	eef0 0a48 	vmov.f32	s1, s16
2400302a:	ed98 1a08 	vldr	s2, [r8, #32]
2400302e:	ed98 0a07 	vldr	s0, [r8, #28]
24003032:	edd7 ea3c 	vldr	s29, [r7, #240]	; 0xf0
24003036:	f030 fe93 	bl	24033d60 <__LEAF_clip_veneer>
2400303a:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
2400303e:	eeae 7a80 	vfma.f32	s14, s29, s0
24003042:	eecf fa07 	vdiv.f32	s31, s30, s14
							if (height1 < 1.0f)
24003046:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
2400304a:	eeb4 eaee 	vcmpe.f32	s28, s29
2400304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003052:	f100 8127 	bmi.w	240032a4 <audioFrame+0x9d8>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
24003056:	eef0 0a48 	vmov.f32	s1, s16
2400305a:	ed98 1a05 	vldr	s2, [r8, #20]
2400305e:	ed98 0a04 	vldr	s0, [r8, #16]
24003062:	ed97 8a24 	vldr	s16, [r7, #144]	; 0x90
24003066:	f030 fe7b 	bl	24033d60 <__LEAF_clip_veneer>
2400306a:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
2400306e:	eea8 7a00 	vfma.f32	s14, s16, s0
24003072:	eece 6a87 	vdiv.f32	s13, s29, s14
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
24003076:	4aae      	ldr	r2, [pc, #696]	; (24003330 <audioFrame+0xa64>)
24003078:	4628      	mov	r0, r5
2400307a:	49ae      	ldr	r1, [pc, #696]	; (24003334 <audioFrame+0xa68>)
					for (int j = 0; j < NUM_OVERTONES; j++)
2400307c:	3401      	adds	r4, #1
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
2400307e:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
24003080:	3704      	adds	r7, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
24003082:	ed99 0a01 	vldr	s0, [r9, #4]
					for (int j = 0; j < NUM_OVERTONES; j++)
24003086:	3604      	adds	r6, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
24003088:	ee6d 7aaf 	vmul.f32	s15, s27, s31
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
2400308c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24003090:	ee20 0a2b 	vmul.f32	s0, s0, s23
24003094:	ed93 7a00 	vldr	s14, [r3]
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
24003098:	eee6 7aa8 	vfma.f32	s15, s13, s17
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
2400309c:	ee20 0a07 	vmul.f32	s0, s0, s14
240030a0:	ee20 0a27 	vmul.f32	s0, s0, s15
240030a4:	f00e fa5a 	bl	2401155c <tADSRT_setDecay>
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
240030a8:	4aa1      	ldr	r2, [pc, #644]	; (24003330 <audioFrame+0xa64>)
240030aa:	49a2      	ldr	r1, [pc, #648]	; (24003334 <audioFrame+0xa68>)
240030ac:	4628      	mov	r0, r5
240030ae:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
240030b0:	3504      	adds	r5, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
240030b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
240030b6:	ed93 0a00 	vldr	s0, [r3]
240030ba:	ee29 0a80 	vmul.f32	s0, s19, s0
240030be:	ee20 0a09 	vmul.f32	s0, s0, s18
240030c2:	f00e fa9b 	bl	240115fc <tADSRT_on>
						currentRandom++;
240030c6:	4a9a      	ldr	r2, [pc, #616]	; (24003330 <audioFrame+0xa64>)
					for (int j = 0; j < NUM_OVERTONES; j++)
240030c8:	2c0b      	cmp	r4, #11
						currentRandom++;
240030ca:	7813      	ldrb	r3, [r2, #0]
240030cc:	f103 0301 	add.w	r3, r3, #1
240030d0:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
240030d2:	f000 816d 	beq.w	240033b0 <audioFrame+0xae4>
						int thisString = i + firstString;
240030d6:	4b98      	ldr	r3, [pc, #608]	; (24003338 <audioFrame+0xa6c>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
240030d8:	ed99 8a02 	vldr	s16, [r9, #8]
						int thisString = i + firstString;
240030dc:	681b      	ldr	r3, [r3, #0]
240030de:	9a08      	ldr	r2, [sp, #32]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
240030e0:	ee28 8a2c 	vmul.f32	s16, s16, s25
240030e4:	edda 7a00 	vldr	s15, [sl]
						int thisString = i + firstString;
240030e8:	4413      	add	r3, r2
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
240030ea:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (thisString < 6)
240030ee:	2b05      	cmp	r3, #5
							stringFade = (float)thisString * 0.2f;
240030f0:	ee07 3a90 	vmov	s15, r3
240030f4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
						if (thisString < 6)
240030f8:	f77f af10 	ble.w	24002f1c <audioFrame+0x650>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
240030fc:	ed98 7a03 	vldr	s14, [r8, #12]
24003100:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003104:	edd8 7a05 	vldr	s15, [r8, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003108:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400310c:	ee78 6a47 	vsub.f32	s13, s16, s14
24003110:	ee77 7ac7 	vsub.f32	s15, s15, s14
							stringFade = (float)(thisString - 6.0f) * 0.2f;
24003114:	ee78 8acd 	vsub.f32	s17, s17, s26
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24003118:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400311c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							stringFade = (float)(thisString - 6.0f) * 0.2f;
24003120:	ee68 8a8b 	vmul.f32	s17, s17, s22
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
24003124:	ee7f da68 	vsub.f32	s27, s30, s17
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003128:	ee70 0aa0 	vadd.f32	s1, s1, s1
2400312c:	f030 fe18 	bl	24033d60 <__LEAF_clip_veneer>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003130:	ed98 7a00 	vldr	s14, [r8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003134:	edd8 7a02 	vldr	s15, [r8, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
24003138:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400313c:	ee78 6a47 	vsub.f32	s13, s16, s14
24003140:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003144:	eeb0 1a6a 	vmov.f32	s2, s21
24003148:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400314c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003150:	ee70 0aa0 	vadd.f32	s1, s1, s1
24003154:	f030 fe04 	bl	24033d60 <__LEAF_clip_veneer>
							int height2Int = floor(height2);
24003158:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							int height1Int = floor(height1);
2400315c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24003160:	4872      	ldr	r0, [pc, #456]	; (2400332c <audioFrame+0xa60>)
							if (height2 < 1.0f)
24003162:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
24003166:	febb 6b46 	vrintm.f64	d6, d6
2400316a:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
2400316e:	febb 7b47 	vrintm.f64	d7, d7
24003172:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
24003176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
2400317a:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
2400317e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
24003182:	ee17 3a90 	vmov	r3, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
24003186:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
2400318a:	f102 0101 	add.w	r1, r2, #1
2400318e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
24003192:	ee7e 6ae6 	vsub.f32	s13, s29, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
24003196:	eb01 0141 	add.w	r1, r1, r1, lsl #1
2400319a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
2400319e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
240031a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
240031a6:	ed92 9a24 	vldr	s18, [r2, #144]	; 0x90
240031aa:	eb00 0281 	add.w	r2, r0, r1, lsl #2
240031ae:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031b2:	f103 0201 	add.w	r2, r3, #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
240031b6:	eea7 9aa6 	vfma.f32	s18, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height1Float = height1 - height1Int;
240031be:	ee07 3a90 	vmov	s15, r3
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240031c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
							float height1Float = height1 - height1Int;
240031ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240031d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
240031d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
							float height1Float = height1 - height1Int;
240031da:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031de:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
240031e2:	edd3 7a00 	vldr	s15, [r3]
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
240031e6:	ee2d 9a89 	vmul.f32	s18, s27, s18
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
240031ea:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
240031ee:	eea8 9aa7 	vfma.f32	s18, s17, s15
							if (height2 < 1.0f)
240031f2:	f100 808a 	bmi.w	2400330a <audioFrame+0xa3e>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
240031f6:	eef0 0a48 	vmov.f32	s1, s16
240031fa:	ed98 1a05 	vldr	s2, [r8, #20]
240031fe:	ed98 0a04 	vldr	s0, [r8, #16]
24003202:	edd7 ea24 	vldr	s29, [r7, #144]	; 0x90
24003206:	f030 fdab 	bl	24033d60 <__LEAF_clip_veneer>
2400320a:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
2400320e:	eeae 7a80 	vfma.f32	s14, s29, s0
24003212:	eecf fa07 	vdiv.f32	s31, s30, s14
							if (height1 < 1.0f)
24003216:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
2400321a:	eeb4 eaee 	vcmpe.f32	s28, s29
2400321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003222:	d461      	bmi.n	240032e8 <audioFrame+0xa1c>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
24003224:	eef0 0a48 	vmov.f32	s1, s16
24003228:	ed98 1a02 	vldr	s2, [r8, #8]
2400322c:	ed98 0a01 	vldr	s0, [r8, #4]
24003230:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
24003234:	f030 fd94 	bl	24033d60 <__LEAF_clip_veneer>
24003238:	ed96 7a0c 	vldr	s14, [r6, #48]	; 0x30
2400323c:	eea8 7a00 	vfma.f32	s14, s16, s0
24003240:	eece 6a87 	vdiv.f32	s13, s29, s14
24003244:	e717      	b.n	24003076 <audioFrame+0x7aa>
				    tADSRT_on(&envs[v][i], envVel);
24003246:	f00e f9d9 	bl	240115fc <tADSRT_on>
				    voiceSounding = 1;
2400324a:	4b3c      	ldr	r3, [pc, #240]	; (2400333c <audioFrame+0xa70>)
2400324c:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
24003250:	3608      	adds	r6, #8
				    voiceSounding = 1;
24003252:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
24003254:	9b08      	ldr	r3, [sp, #32]
24003256:	4543      	cmp	r3, r8
24003258:	f47f adcd 	bne.w	24002df6 <audioFrame+0x52a>
2400325c:	e5e4      	b.n	24002e28 <audioFrame+0x55c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400325e:	ee77 7ae5 	vsub.f32	s15, s15, s11
24003262:	ee76 6ae5 	vsub.f32	s13, s13, s11
24003266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
2400326a:	eea2 6a87 	vfma.f32	s12, s5, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
2400326e:	ed8b 6a01 	vstr	s12, [fp, #4]
24003272:	f7ff bb7d 	b.w	24002970 <audioFrame+0xa4>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24003276:	ee77 7ac2 	vsub.f32	s15, s15, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
2400327a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 24003344 <audioFrame+0xa78>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
2400327e:	ee74 4ac2 	vsub.f32	s9, s9, s4
24003282:	eec7 3aa4 	vdiv.f32	s7, s15, s9
24003286:	eef0 7a46 	vmov.f32	s15, s12
2400328a:	eee3 7aa2 	vfma.f32	s15, s7, s5
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
2400328e:	edcb 7a00 	vstr	s15, [fp]
24003292:	f7ff bb57 	b.w	24002944 <audioFrame+0x78>
					lsDecay[i] = 0;
24003296:	4a2a      	ldr	r2, [pc, #168]	; (24003340 <audioFrame+0xa74>)
		for (int i = 0; i < numStringsThisBoard; i++)
24003298:	9b05      	ldr	r3, [sp, #20]
					lsDecay[i] = 0;
2400329a:	54be      	strb	r6, [r7, r2]
		for (int i = 0; i < numStringsThisBoard; i++)
2400329c:	7819      	ldrb	r1, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
2400329e:	682e      	ldr	r6, [r5, #0]
240032a0:	f7ff bbe6 	b.w	24002a70 <audioFrame+0x1a4>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
240032a4:	eef0 0a48 	vmov.f32	s1, s16
240032a8:	ed98 1a04 	vldr	s2, [r8, #16]
240032ac:	ed98 0a03 	vldr	s0, [r8, #12]
240032b0:	ed97 8a18 	vldr	s16, [r7, #96]	; 0x60
240032b4:	f030 fd54 	bl	24033d60 <__LEAF_clip_veneer>
240032b8:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
240032bc:	eee8 7a00 	vfma.f32	s15, s16, s0
240032c0:	eece 6aa7 	vdiv.f32	s13, s29, s15
240032c4:	e6d7      	b.n	24003076 <audioFrame+0x7aa>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
240032c6:	eef0 0a48 	vmov.f32	s1, s16
240032ca:	ed98 1a07 	vldr	s2, [r8, #28]
240032ce:	ed98 0a06 	vldr	s0, [r8, #24]
240032d2:	edd7 ea30 	vldr	s29, [r7, #192]	; 0xc0
240032d6:	f030 fd43 	bl	24033d60 <__LEAF_clip_veneer>
240032da:	edd6 7a30 	vldr	s15, [r6, #192]	; 0xc0
240032de:	eeee 7a80 	vfma.f32	s15, s29, s0
240032e2:	eecf fa27 	vdiv.f32	s31, s30, s15
240032e6:	e6ae      	b.n	24003046 <audioFrame+0x77a>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
240032e8:	eef0 0a48 	vmov.f32	s1, s16
240032ec:	ed98 1a01 	vldr	s2, [r8, #4]
240032f0:	ed98 0a00 	vldr	s0, [r8]
240032f4:	ed97 8a00 	vldr	s16, [r7]
240032f8:	f030 fd32 	bl	24033d60 <__LEAF_clip_veneer>
240032fc:	edd6 7a00 	vldr	s15, [r6]
24003300:	eee8 7a00 	vfma.f32	s15, s16, s0
24003304:	eece 6aa7 	vdiv.f32	s13, s29, s15
24003308:	e6b5      	b.n	24003076 <audioFrame+0x7aa>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
2400330a:	eef0 0a48 	vmov.f32	s1, s16
2400330e:	ed98 1a04 	vldr	s2, [r8, #16]
24003312:	ed98 0a03 	vldr	s0, [r8, #12]
24003316:	edd7 ea18 	vldr	s29, [r7, #96]	; 0x60
2400331a:	f030 fd21 	bl	24033d60 <__LEAF_clip_veneer>
2400331e:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
24003322:	eeee 7a80 	vfma.f32	s15, s29, s0
24003326:	eecf fa27 	vdiv.f32	s31, s30, s15
2400332a:	e774      	b.n	24003216 <audioFrame+0x94a>
2400332c:	20000394 	.word	0x20000394
24003330:	20018b4c 	.word	0x20018b4c
24003334:	2000563c 	.word	0x2000563c
24003338:	20005078 	.word	0x20005078
2400333c:	20017a34 	.word	0x20017a34
24003340:	20005330 	.word	0x20005330
24003344:	20000364 	.word	0x20000364
					tLivingString2_setTargetLev(&strings[i], 0.0f);
24003348:	9c03      	ldr	r4, [sp, #12]
2400334a:	eeb0 0a4a 	vmov.f32	s0, s20
2400334e:	4620      	mov	r0, r4
24003350:	f014 ff8e 	bl	24018270 <tLivingString2_setTargetLev>
					tLivingString2_setLevMode(&strings[i], 0);
24003354:	4631      	mov	r1, r6
24003356:	4620      	mov	r0, r4
24003358:	f014 ffc6 	bl	240182e8 <tLivingString2_setLevMode>
					tLivingString2_setDecay(&strings[i], 0.2f);
2400335c:	eeb0 0a4b 	vmov.f32	s0, s22
24003360:	4620      	mov	r0, r4
24003362:	f014 ff6f 	bl	24018244 <tLivingString2_setDecay>
					tADSRT_off(&fenvelopes[i]);
24003366:	4870      	ldr	r0, [pc, #448]	; (24003528 <audioFrame+0xc5c>)
24003368:	eb00 0087 	add.w	r0, r0, r7, lsl #2
2400336c:	f00e f958 	bl	24011620 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
24003370:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
24003372:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
24003374:	7819      	ldrb	r1, [r3, #0]
24003376:	f7ff bb7b 	b.w	24002a70 <audioFrame+0x1a4>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
2400337a:	4a6c      	ldr	r2, [pc, #432]	; (2400352c <audioFrame+0xc60>)
2400337c:	eeb0 0a69 	vmov.f32	s0, s19
24003380:	9b09      	ldr	r3, [sp, #36]	; 0x24
24003382:	486b      	ldr	r0, [pc, #428]	; (24003530 <audioFrame+0xc64>)
24003384:	edd2 0a00 	vldr	s1, [r2]
24003388:	4418      	add	r0, r3
2400338a:	f014 fc01 	bl	24017b90 <tSimpleLivingString3_pluck>
					lsDecay[i] = 1;
2400338e:	4969      	ldr	r1, [pc, #420]	; (24003534 <audioFrame+0xc68>)
24003390:	2001      	movs	r0, #1
				if (currentActivePreset == 62)
24003392:	7832      	ldrb	r2, [r6, #0]
					lsDecay[i] = 1;
24003394:	55c8      	strb	r0, [r1, r7]
24003396:	e581      	b.n	24002e9c <audioFrame+0x5d0>
24003398:	9b04      	ldr	r3, [sp, #16]
2400339a:	461e      	mov	r6, r3
2400339c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
						tADSRT_off(&additiveEnv[i][j]);
240033a0:	4630      	mov	r0, r6
					for (int j = 0; j < NUM_OVERTONES; j++)
240033a2:	3604      	adds	r6, #4
						tADSRT_off(&additiveEnv[i][j]);
240033a4:	f00e f93c 	bl	24011620 <tADSRT_off>
					for (int j = 0; j < NUM_OVERTONES; j++)
240033a8:	42a6      	cmp	r6, r4
240033aa:	d1f9      	bne.n	240033a0 <audioFrame+0xad4>
240033ac:	f7ff bbea 	b.w	24002b84 <audioFrame+0x2b8>
			previousStringInputs[i] = stringInputs[i];
240033b0:	e9dd 5a0a 	ldrd	r5, sl, [sp, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
240033b4:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
240033b6:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
240033b8:	7819      	ldrb	r1, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
240033ba:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
240033be:	f7ff bb57 	b.w	24002a70 <audioFrame+0x1a4>
					tADSRT_on(&fenvelopes[i], amplitz);
240033c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
240033c4:	eeb0 0a69 	vmov.f32	s0, s19
240033c8:	4857      	ldr	r0, [pc, #348]	; (24003528 <audioFrame+0xc5c>)
					float pluckAmp = amplitz * 2.0f; //was 4
240033ca:	ee79 9aa9 	vadd.f32	s19, s19, s19
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
240033ce:	4e5a      	ldr	r6, [pc, #360]	; (24003538 <audioFrame+0xc6c>)
					tADSRT_on(&fenvelopes[i], amplitz);
240033d0:	4418      	add	r0, r3
240033d2:	f00e f913 	bl	240115fc <tADSRT_on>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
240033d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240033da:	ed96 7a00 	vldr	s14, [r6]
240033de:	f8dd 800c 	ldr.w	r8, [sp, #12]
240033e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
240033e6:	960a      	str	r6, [sp, #40]	; 0x28
240033e8:	4640      	mov	r0, r8
240033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240033ee:	bfcc      	ite	gt
240033f0:	2101      	movgt	r1, #1
240033f2:	2100      	movle	r1, #0
240033f4:	f014 ff78 	bl	240182e8 <tLivingString2_setLevMode>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
240033f8:	ed96 0a01 	vldr	s0, [r6, #4]
240033fc:	4640      	mov	r0, r8
240033fe:	f014 ff37 	bl	24018270 <tLivingString2_setTargetLev>
					int delayLength = (int)strings[i]->waveLengthInSamples;
24003402:	f8d8 3000 	ldr.w	r3, [r8]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003406:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
2400340a:	ed96 7a02 	vldr	s14, [r6, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
2400340e:	edd3 6a02 	vldr	s13, [r3, #8]
24003412:	9308      	str	r3, [sp, #32]
24003414:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003418:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
2400341c:	ee16 ca90 	vmov	ip, s13
					int beforeLength = (delayLength * knobScaled[2]);
24003420:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24003424:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003428:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
2400342c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
24003430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
24003434:	ee17 3a10 	vmov	r3, s14
					if (beforeLength > 0)
24003438:	2b00      	cmp	r3, #0
2400343a:	dd72      	ble.n	24003522 <audioFrame+0xc56>
						beforePickIncrement = pluckAmp / beforeLength;
2400343c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24003440:	ee89 6a87 	vdiv.f32	s12, s19, s14
					if (afterLength > 0)
24003444:	ee17 2a90 	vmov	r2, s15
24003448:	2a00      	cmp	r2, #0
2400344a:	dd03      	ble.n	24003454 <audioFrame+0xb88>
						afterPickIncrement = pluckAmp / afterLength;
2400344c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24003450:	eec9 9aa7 	vdiv.f32	s19, s19, s15
					for (int j = 0; j < delayLength; j++)
24003454:	f1bc 0f00 	cmp.w	ip, #0
24003458:	dd51      	ble.n	240034fe <audioFrame+0xc32>
2400345a:	2b00      	cmp	r3, #0
2400345c:	dd5e      	ble.n	2400351c <audioFrame+0xc50>
2400345e:	4563      	cmp	r3, ip
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
24003460:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
24003464:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
24003468:	bfa8      	it	ge
2400346a:	4663      	movge	r3, ip
					float value = 0.0f;
2400346c:	eddf 7a33 	vldr	s15, [pc, #204]	; 2400353c <audioFrame+0xc70>
24003470:	469e      	mov	lr, r3
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
24003472:	9b08      	ldr	r3, [sp, #32]
24003474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
24003476:	6b99      	ldr	r1, [r3, #56]	; 0x38
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
24003478:	6853      	ldr	r3, [r2, #4]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
2400347a:	684e      	ldr	r6, [r1, #4]
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
2400347c:	9309      	str	r3, [sp, #36]	; 0x24
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
2400347e:	6988      	ldr	r0, [r1, #24]
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
24003480:	f8d2 8018 	ldr.w	r8, [r2, #24]
24003484:	6893      	ldr	r3, [r2, #8]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
24003486:	6889      	ldr	r1, [r1, #8]
24003488:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
2400348c:	eb08 0204 	add.w	r2, r8, r4
							value += beforePickIncrement;
24003490:	ee77 7a86 	vadd.f32	s15, s15, s12
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
24003494:	401a      	ands	r2, r3
24003496:	ee27 7aa6 	vmul.f32	s14, s15, s13
2400349a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
2400349e:	ed82 7a00 	vstr	s14, [r2]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
240034a2:	1902      	adds	r2, r0, r4
					for (int j = 0; j < delayLength; j++)
240034a4:	3401      	adds	r4, #1
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
240034a6:	400a      	ands	r2, r1
					for (int j = 0; j < delayLength; j++)
240034a8:	4574      	cmp	r4, lr
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
240034aa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
240034ae:	ed82 7a00 	vstr	s14, [r2]
					for (int j = 0; j < delayLength; j++)
240034b2:	dbeb      	blt.n	2400348c <audioFrame+0xbc0>
240034b4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
240034b8:	45a4      	cmp	ip, r4
240034ba:	dd20      	ble.n	240034fe <audioFrame+0xc32>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240034bc:	9b08      	ldr	r3, [sp, #32]
240034be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240034c2:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240034c6:	f8d1 e004 	ldr.w	lr, [r1, #4]
240034ca:	f8d1 8018 	ldr.w	r8, [r1, #24]
240034ce:	688b      	ldr	r3, [r1, #8]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240034d0:	6856      	ldr	r6, [r2, #4]
240034d2:	6990      	ldr	r0, [r2, #24]
240034d4:	6891      	ldr	r1, [r2, #8]
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240034d6:	eb04 0208 	add.w	r2, r4, r8
							value -= afterPickIncrement;
240034da:	ee77 7ae9 	vsub.f32	s15, s15, s19
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
240034de:	401a      	ands	r2, r3
240034e0:	ee27 7aa6 	vmul.f32	s14, s15, s13
240034e4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
240034e8:	ed82 7a00 	vstr	s14, [r2]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240034ec:	1822      	adds	r2, r4, r0
					for (int j = 0; j < delayLength; j++)
240034ee:	3401      	adds	r4, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240034f0:	400a      	ands	r2, r1
					for (int j = 0; j < delayLength; j++)
240034f2:	45a4      	cmp	ip, r4
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
240034f4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
240034f8:	ed82 7a00 	vstr	s14, [r2]
					for (int j = 0; j < delayLength; j++)
240034fc:	dceb      	bgt.n	240034d6 <audioFrame+0xc0a>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
240034fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24003500:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24003540 <audioFrame+0xc74>
24003504:	ed93 0a03 	vldr	s0, [r3, #12]
24003508:	9803      	ldr	r0, [sp, #12]
2400350a:	ee20 0a27 	vmul.f32	s0, s0, s15
2400350e:	f014 fe99 	bl	24018244 <tLivingString2_setDecay>
		for (int i = 0; i < numStringsThisBoard; i++)
24003512:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
24003514:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
24003516:	7819      	ldrb	r1, [r3, #0]
24003518:	f7ff baaa 	b.w	24002a70 <audioFrame+0x1a4>
					for (int j = 0; j < delayLength; j++)
2400351c:	eddf 7a07 	vldr	s15, [pc, #28]	; 2400353c <audioFrame+0xc70>
24003520:	e7cc      	b.n	240034bc <audioFrame+0xbf0>
						beforePickIncrement = pluckAmp;
24003522:	eeb0 6a69 	vmov.f32	s12, s19
24003526:	e78d      	b.n	24003444 <audioFrame+0xb78>
24003528:	20005038 	.word	0x20005038
2400352c:	2000018c 	.word	0x2000018c
24003530:	20005318 	.word	0x20005318
24003534:	20005330 	.word	0x20005330
24003538:	2000514c 	.word	0x2000514c
2400353c:	00000000 	.word	0x00000000
24003540:	43fa0000 	.word	0x43fa0000

24003544 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if (hspi == &hspi6)
24003544:	4b6b      	ldr	r3, [pc, #428]	; (240036f4 <HAL_SPI_RxCpltCallback+0x1b0>)
	interrupted = 1;
24003546:	2101      	movs	r1, #1
24003548:	4a6b      	ldr	r2, [pc, #428]	; (240036f8 <HAL_SPI_RxCpltCallback+0x1b4>)
	if (hspi == &hspi6)
2400354a:	4283      	cmp	r3, r0
	interrupted = 1;
2400354c:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi6)
2400354e:	d000      	beq.n	24003552 <HAL_SPI_RxCpltCallback+0xe>
24003550:	4770      	bx	lr
	{
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
24003552:	4b6a      	ldr	r3, [pc, #424]	; (240036fc <HAL_SPI_RxCpltCallback+0x1b8>)
24003554:	7e9a      	ldrb	r2, [r3, #26]
24003556:	2afe      	cmp	r2, #254	; 0xfe
24003558:	d103      	bne.n	24003562 <HAL_SPI_RxCpltCallback+0x1e>
2400355a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
2400355e:	2afd      	cmp	r2, #253	; 0xfd
24003560:	d003      	beq.n	2400356a <HAL_SPI_RxCpltCallback+0x26>
			{

				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
			}
		}
		newPluck = 1;
24003562:	4b67      	ldr	r3, [pc, #412]	; (24003700 <HAL_SPI_RxCpltCallback+0x1bc>)
24003564:	2201      	movs	r2, #1
24003566:	601a      	str	r2, [r3, #0]
24003568:	4770      	bx	lr
			for (int i = 0; i < numStringsThisBoard; i++)
2400356a:	4a66      	ldr	r2, [pc, #408]	; (24003704 <HAL_SPI_RxCpltCallback+0x1c0>)
2400356c:	7811      	ldrb	r1, [r2, #0]
2400356e:	2900      	cmp	r1, #0
24003570:	d0f7      	beq.n	24003562 <HAL_SPI_RxCpltCallback+0x1e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003572:	4a65      	ldr	r2, [pc, #404]	; (24003708 <HAL_SPI_RxCpltCallback+0x1c4>)
			for (int i = 0; i < numStringsThisBoard; i++)
24003574:	2901      	cmp	r1, #1
{
24003576:	b510      	push	{r4, lr}
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003578:	6814      	ldr	r4, [r2, #0]
2400357a:	6810      	ldr	r0, [r2, #0]
2400357c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003580:	f100 000e 	add.w	r0, r0, #14
24003584:	f894 c01b 	ldrb.w	ip, [r4, #27]
24003588:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
2400358c:	485f      	ldr	r0, [pc, #380]	; (2400370c <HAL_SPI_RxCpltCallback+0x1c8>)
2400358e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003592:	6004      	str	r4, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003594:	f000 80a9 	beq.w	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003598:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400359a:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
2400359c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240035a0:	f894 e01d 	ldrb.w	lr, [r4, #29]
240035a4:	6814      	ldr	r4, [r2, #0]
240035a6:	f104 0c0f 	add.w	ip, r4, #15
240035aa:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240035ae:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240035b2:	6044      	str	r4, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
240035b4:	f000 8099 	beq.w	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240035b8:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240035ba:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240035bc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240035c0:	f894 e01f 	ldrb.w	lr, [r4, #31]
240035c4:	6814      	ldr	r4, [r2, #0]
240035c6:	f104 0c10 	add.w	ip, r4, #16
240035ca:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240035ce:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240035d2:	6084      	str	r4, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
240035d4:	f000 8089 	beq.w	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240035d8:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240035da:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240035dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240035e0:	f894 e021 	ldrb.w	lr, [r4, #33]	; 0x21
240035e4:	6814      	ldr	r4, [r2, #0]
240035e6:	f104 0c11 	add.w	ip, r4, #17
240035ea:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240035ee:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240035f2:	60c4      	str	r4, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
240035f4:	d079      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240035f6:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240035f8:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240035fa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240035fe:	f894 e023 	ldrb.w	lr, [r4, #35]	; 0x23
24003602:	6814      	ldr	r4, [r2, #0]
24003604:	f104 0c12 	add.w	ip, r4, #18
24003608:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
2400360c:	eb04 240e 	add.w	r4, r4, lr, lsl #8
24003610:	6104      	str	r4, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
24003612:	d06a      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003614:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003616:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003618:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400361c:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
24003620:	6814      	ldr	r4, [r2, #0]
24003622:	f104 0c13 	add.w	ip, r4, #19
24003626:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
2400362a:	eb04 240e 	add.w	r4, r4, lr, lsl #8
2400362e:	6144      	str	r4, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
24003630:	d05b      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003632:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003634:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003636:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400363a:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
2400363e:	6814      	ldr	r4, [r2, #0]
24003640:	f104 0414 	add.w	r4, r4, #20
24003644:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003648:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400364c:	6184      	str	r4, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
2400364e:	d04c      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003650:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003652:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003654:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003658:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
2400365c:	6814      	ldr	r4, [r2, #0]
2400365e:	f104 0415 	add.w	r4, r4, #21
24003662:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003666:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400366a:	61c4      	str	r4, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
2400366c:	d03d      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
2400366e:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003670:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003672:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003676:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
2400367a:	6814      	ldr	r4, [r2, #0]
2400367c:	f104 0416 	add.w	r4, r4, #22
24003680:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003684:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003688:	6204      	str	r4, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
2400368a:	d02e      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
2400368c:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400368e:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
24003690:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003694:	f894 c02d 	ldrb.w	ip, [r4, #45]	; 0x2d
24003698:	6814      	ldr	r4, [r2, #0]
2400369a:	f104 0417 	add.w	r4, r4, #23
2400369e:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240036a2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240036a6:	6244      	str	r4, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
240036a8:	d01f      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240036aa:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240036ac:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240036ae:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240036b2:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
240036b6:	6814      	ldr	r4, [r2, #0]
240036b8:	f104 0418 	add.w	r4, r4, #24
240036bc:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
240036c0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
240036c4:	6284      	str	r4, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
240036c6:	d010      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240036c8:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240036ca:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240036cc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240036d0:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
240036d4:	6814      	ldr	r4, [r2, #0]
240036d6:	f104 0419 	add.w	r4, r4, #25
240036da:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
240036de:	eb03 230c 	add.w	r3, r3, ip, lsl #8
240036e2:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
240036e4:	d001      	beq.n	240036ea <HAL_SPI_RxCpltCallback+0x1a6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
240036e6:	6813      	ldr	r3, [r2, #0]
240036e8:	6813      	ldr	r3, [r2, #0]
		newPluck = 1;
240036ea:	4b05      	ldr	r3, [pc, #20]	; (24003700 <HAL_SPI_RxCpltCallback+0x1bc>)
240036ec:	2201      	movs	r2, #1
240036ee:	601a      	str	r2, [r3, #0]
		newBar = 1;

	}
#endif

}
240036f0:	bd10      	pop	{r4, pc}
240036f2:	bf00      	nop
240036f4:	2001f0e8 	.word	0x2001f0e8
240036f8:	2000511c 	.word	0x2000511c
240036fc:	38000000 	.word	0x38000000
24003700:	20005488 	.word	0x20005488
24003704:	20000052 	.word	0x20000052
24003708:	20005078 	.word	0x20005078
2400370c:	20017964 	.word	0x20017964

24003710 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;

	if (hspi == &hspi6)
24003710:	4b6a      	ldr	r3, [pc, #424]	; (240038bc <HAL_SPI_RxHalfCpltCallback+0x1ac>)
	interrupted = 1;
24003712:	2101      	movs	r1, #1
24003714:	4a6a      	ldr	r2, [pc, #424]	; (240038c0 <HAL_SPI_RxHalfCpltCallback+0x1b0>)
	if (hspi == &hspi6)
24003716:	4283      	cmp	r3, r0
	interrupted = 1;
24003718:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi6)
2400371a:	d000      	beq.n	2400371e <HAL_SPI_RxHalfCpltCallback+0xe>
2400371c:	4770      	bx	lr
	{
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
2400371e:	4b69      	ldr	r3, [pc, #420]	; (240038c4 <HAL_SPI_RxHalfCpltCallback+0x1b4>)
24003720:	781a      	ldrb	r2, [r3, #0]
24003722:	2afe      	cmp	r2, #254	; 0xfe
24003724:	d102      	bne.n	2400372c <HAL_SPI_RxHalfCpltCallback+0x1c>
24003726:	7e5a      	ldrb	r2, [r3, #25]
24003728:	2afd      	cmp	r2, #253	; 0xfd
2400372a:	d003      	beq.n	24003734 <HAL_SPI_RxHalfCpltCallback+0x24>
			{

				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
			}
		}
		newPluck = 1;
2400372c:	4b66      	ldr	r3, [pc, #408]	; (240038c8 <HAL_SPI_RxHalfCpltCallback+0x1b8>)
2400372e:	2201      	movs	r2, #1
24003730:	601a      	str	r2, [r3, #0]
24003732:	4770      	bx	lr
			for (int i = 0; i < numStringsThisBoard; i++)
24003734:	4a65      	ldr	r2, [pc, #404]	; (240038cc <HAL_SPI_RxHalfCpltCallback+0x1bc>)
24003736:	7811      	ldrb	r1, [r2, #0]
24003738:	2900      	cmp	r1, #0
2400373a:	d0f7      	beq.n	2400372c <HAL_SPI_RxHalfCpltCallback+0x1c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400373c:	4a64      	ldr	r2, [pc, #400]	; (240038d0 <HAL_SPI_RxHalfCpltCallback+0x1c0>)
			for (int i = 0; i < numStringsThisBoard; i++)
2400373e:	2901      	cmp	r1, #1
{
24003740:	b510      	push	{r4, lr}
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003742:	6814      	ldr	r4, [r2, #0]
24003744:	6810      	ldr	r0, [r2, #0]
24003746:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400374a:	f100 0001 	add.w	r0, r0, #1
2400374e:	f894 c001 	ldrb.w	ip, [r4, #1]
24003752:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
24003756:	485f      	ldr	r0, [pc, #380]	; (240038d4 <HAL_SPI_RxHalfCpltCallback+0x1c4>)
24003758:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400375c:	6004      	str	r4, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400375e:	f000 80a9 	beq.w	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003762:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003764:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003766:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400376a:	f894 e003 	ldrb.w	lr, [r4, #3]
2400376e:	6814      	ldr	r4, [r2, #0]
24003770:	f104 0c02 	add.w	ip, r4, #2
24003774:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
24003778:	eb04 240e 	add.w	r4, r4, lr, lsl #8
2400377c:	6044      	str	r4, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
2400377e:	f000 8099 	beq.w	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003782:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003784:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003786:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400378a:	f894 e005 	ldrb.w	lr, [r4, #5]
2400378e:	6814      	ldr	r4, [r2, #0]
24003790:	f104 0c03 	add.w	ip, r4, #3
24003794:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
24003798:	eb04 240e 	add.w	r4, r4, lr, lsl #8
2400379c:	6084      	str	r4, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
2400379e:	f000 8089 	beq.w	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037a2:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037a4:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240037aa:	f894 e007 	ldrb.w	lr, [r4, #7]
240037ae:	6814      	ldr	r4, [r2, #0]
240037b0:	f104 0c04 	add.w	ip, r4, #4
240037b4:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240037b8:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240037bc:	60c4      	str	r4, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
240037be:	d079      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037c0:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037c2:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037c4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240037c8:	f894 e009 	ldrb.w	lr, [r4, #9]
240037cc:	6814      	ldr	r4, [r2, #0]
240037ce:	f104 0c05 	add.w	ip, r4, #5
240037d2:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240037d6:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240037da:	6104      	str	r4, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
240037dc:	d06a      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037de:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037e0:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037e2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
240037e6:	f894 e00b 	ldrb.w	lr, [r4, #11]
240037ea:	6814      	ldr	r4, [r2, #0]
240037ec:	f104 0c06 	add.w	ip, r4, #6
240037f0:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
240037f4:	eb04 240e 	add.w	r4, r4, lr, lsl #8
240037f8:	6144      	str	r4, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
240037fa:	d05b      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240037fc:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
240037fe:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003800:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003804:	f894 c00d 	ldrb.w	ip, [r4, #13]
24003808:	6814      	ldr	r4, [r2, #0]
2400380a:	f104 0407 	add.w	r4, r4, #7
2400380e:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003812:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003816:	6184      	str	r4, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
24003818:	d04c      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400381a:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400381c:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400381e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003822:	f894 c00f 	ldrb.w	ip, [r4, #15]
24003826:	6814      	ldr	r4, [r2, #0]
24003828:	f104 0408 	add.w	r4, r4, #8
2400382c:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
24003830:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003834:	61c4      	str	r4, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
24003836:	d03d      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003838:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
2400383a:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400383c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
24003840:	f894 c011 	ldrb.w	ip, [r4, #17]
24003844:	6814      	ldr	r4, [r2, #0]
24003846:	f104 0409 	add.w	r4, r4, #9
2400384a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
2400384e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003852:	6204      	str	r4, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
24003854:	d02e      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003856:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003858:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
2400385a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400385e:	f894 c013 	ldrb.w	ip, [r4, #19]
24003862:	6814      	ldr	r4, [r2, #0]
24003864:	f104 040a 	add.w	r4, r4, #10
24003868:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
2400386c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
24003870:	6244      	str	r4, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
24003872:	d01f      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003874:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003876:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003878:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400387c:	f894 c015 	ldrb.w	ip, [r4, #21]
24003880:	6814      	ldr	r4, [r2, #0]
24003882:	f104 040b 	add.w	r4, r4, #11
24003886:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
2400388a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
2400388e:	6284      	str	r4, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
24003890:	d010      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003892:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
24003894:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
24003896:	eb03 0444 	add.w	r4, r3, r4, lsl #1
2400389a:	f894 c017 	ldrb.w	ip, [r4, #23]
2400389e:	6814      	ldr	r4, [r2, #0]
240038a0:	f104 040c 	add.w	r4, r4, #12
240038a4:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
240038a8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
240038ac:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
240038ae:	d001      	beq.n	240038b4 <HAL_SPI_RxHalfCpltCallback+0x1a4>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
240038b0:	6813      	ldr	r3, [r2, #0]
240038b2:	6813      	ldr	r3, [r2, #0]
		newPluck = 1;
240038b4:	4b04      	ldr	r3, [pc, #16]	; (240038c8 <HAL_SPI_RxHalfCpltCallback+0x1b8>)
240038b6:	2201      	movs	r2, #1
240038b8:	601a      	str	r2, [r3, #0]
		newBar = 1;

	}
#endif

}
240038ba:	bd10      	pop	{r4, pc}
240038bc:	2001f0e8 	.word	0x2001f0e8
240038c0:	2000511c 	.word	0x2000511c
240038c4:	38000000 	.word	0x38000000
240038c8:	20005488 	.word	0x20005488
240038cc:	20000052 	.word	0x20000052
240038d0:	20005078 	.word	0x20005078
240038d4:	20017964 	.word	0x20017964

240038d8 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
240038d8:	b508      	push	{r3, lr}
	interrupted = 1;

	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
240038da:	4b0a      	ldr	r3, [pc, #40]	; (24003904 <HAL_SPI_TxRxCpltCallback+0x2c>)
	interrupted = 1;
240038dc:	2001      	movs	r0, #1
240038de:	490a      	ldr	r1, [pc, #40]	; (24003908 <HAL_SPI_TxRxCpltCallback+0x30>)
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
240038e0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	interrupted = 1;
240038e4:	7008      	strb	r0, [r1, #0]
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
240038e6:	2afe      	cmp	r2, #254	; 0xfe
240038e8:	d003      	beq.n	240038f2 <HAL_SPI_TxRxCpltCallback+0x1a>
	{
		handleSPI(LEVER_BUFFER_SIZE);
		newLevers = 1;
	}
	newLevers = 1;
240038ea:	4b08      	ldr	r3, [pc, #32]	; (2400390c <HAL_SPI_TxRxCpltCallback+0x34>)
240038ec:	2201      	movs	r2, #1
240038ee:	601a      	str	r2, [r3, #0]
}
240038f0:	bd08      	pop	{r3, pc}
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
240038f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
240038f6:	2bfd      	cmp	r3, #253	; 0xfd
240038f8:	d1f7      	bne.n	240038ea <HAL_SPI_TxRxCpltCallback+0x12>
		handleSPI(LEVER_BUFFER_SIZE);
240038fa:	2020      	movs	r0, #32
240038fc:	f030 fa54 	bl	24033da8 <__handleSPI_veneer>
		newLevers = 1;
24003900:	e7f3      	b.n	240038ea <HAL_SPI_TxRxCpltCallback+0x12>
24003902:	bf00      	nop
24003904:	30014040 	.word	0x30014040
24003908:	2000511c 	.word	0x2000511c
2400390c:	20005484 	.word	0x20005484

24003910 <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
24003910:	4b08      	ldr	r3, [pc, #32]	; (24003934 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
	interrupted = 1;
24003912:	4909      	ldr	r1, [pc, #36]	; (24003938 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
{
24003914:	b510      	push	{r4, lr}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
24003916:	7f9a      	ldrb	r2, [r3, #30]
	interrupted = 1;
24003918:	2401      	movs	r4, #1
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
2400391a:	2afe      	cmp	r2, #254	; 0xfe
	interrupted = 1;
2400391c:	700c      	strb	r4, [r1, #0]
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
2400391e:	d000      	beq.n	24003922 <HAL_SPI_TxRxHalfCpltCallback+0x12>
	{
		handleSPI(0);
		newLevers = 1;
	}
}
24003920:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
24003922:	7fdb      	ldrb	r3, [r3, #31]
24003924:	2bfd      	cmp	r3, #253	; 0xfd
24003926:	d1fb      	bne.n	24003920 <HAL_SPI_TxRxHalfCpltCallback+0x10>
		handleSPI(0);
24003928:	2000      	movs	r0, #0
2400392a:	f030 fa3d 	bl	24033da8 <__handleSPI_veneer>
		newLevers = 1;
2400392e:	4b03      	ldr	r3, [pc, #12]	; (2400393c <HAL_SPI_TxRxHalfCpltCallback+0x2c>)
24003930:	601c      	str	r4, [r3, #0]
}
24003932:	bd10      	pop	{r4, pc}
24003934:	30014040 	.word	0x30014040
24003938:	2000511c 	.word	0x2000511c
2400393c:	20005484 	.word	0x20005484

24003940 <HAL_SAI_ErrorCallback>:
	audioFrame(0);
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
24003940:	4770      	bx	lr
24003942:	bf00      	nop

24003944 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24003944:	4b0c      	ldr	r3, [pc, #48]	; (24003978 <MX_BDMA_Init+0x34>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
24003946:	2200      	movs	r2, #0
24003948:	2081      	movs	r0, #129	; 0x81
2400394a:	4611      	mov	r1, r2
{
2400394c:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
2400394e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24003952:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24003954:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24003958:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
2400395c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24003964:	9301      	str	r3, [sp, #4]
24003966:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
24003968:	f002 f8ac 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
2400396c:	2081      	movs	r0, #129	; 0x81

}
2400396e:	b002      	add	sp, #8
24003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24003974:	f002 b8e4 	b.w	24005b40 <HAL_NVIC_EnableIRQ>
24003978:	58024400 	.word	0x58024400

2400397c <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
2400397c:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
2400397e:	231e      	movs	r3, #30
{
24003980:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003982:	25fa      	movs	r5, #250	; 0xfa
24003984:	2134      	movs	r1, #52	; 0x34
24003986:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24003988:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400398c:	9500      	str	r5, [sp, #0]
2400398e:	2302      	movs	r3, #2
{
24003990:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003992:	f003 fea3 	bl	240076dc <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24003996:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24003998:	260a      	movs	r6, #10
    HAL_Delay(10);
2400399a:	f002 f869 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400399e:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039a2:	2302      	movs	r3, #2
240039a4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240039a6:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039aa:	4620      	mov	r0, r4
240039ac:	aa03      	add	r2, sp, #12
240039ae:	9500      	str	r5, [sp, #0]
240039b0:	f003 fe94 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240039b4:	200a      	movs	r0, #10
240039b6:	f002 f85b 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240039ba:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039be:	2302      	movs	r3, #2
240039c0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240039c2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039c6:	4620      	mov	r0, r4
240039c8:	aa03      	add	r2, sp, #12
240039ca:	9500      	str	r5, [sp, #0]
240039cc:	f003 fe86 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240039d0:	200a      	movs	r0, #10
240039d2:	f002 f84d 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240039d6:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039d8:	2302      	movs	r3, #2
240039da:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240039dc:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039e0:	4620      	mov	r0, r4
240039e2:	aa03      	add	r2, sp, #12
240039e4:	9500      	str	r5, [sp, #0]
240039e6:	f003 fe79 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240039ea:	200a      	movs	r0, #10
240039ec:	f002 f840 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240039f0:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039f2:	2302      	movs	r3, #2
240039f4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240039f6:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240039fa:	4620      	mov	r0, r4
240039fc:	aa03      	add	r2, sp, #12
240039fe:	9500      	str	r5, [sp, #0]
24003a00:	f003 fe6c 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003a04:	200a      	movs	r0, #10
24003a06:	f002 f833 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003a0a:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a0e:	2302      	movs	r3, #2
24003a10:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003a12:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a16:	4620      	mov	r0, r4
24003a18:	aa03      	add	r2, sp, #12
24003a1a:	9500      	str	r5, [sp, #0]
24003a1c:	f003 fe5e 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003a20:	4630      	mov	r0, r6
24003a22:	f002 f825 	bl	24005a70 <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a26:	aa03      	add	r2, sp, #12
24003a28:	2302      	movs	r3, #2
24003a2a:	2134      	movs	r1, #52	; 0x34
24003a2c:	4620      	mov	r0, r4
24003a2e:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24003a30:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a34:	f003 fe52 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003a38:	4630      	mov	r0, r6
24003a3a:	f002 f819 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003a3e:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a42:	aa03      	add	r2, sp, #12
24003a44:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003a46:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a4a:	4620      	mov	r0, r4
24003a4c:	2302      	movs	r3, #2
24003a4e:	9500      	str	r5, [sp, #0]
24003a50:	f003 fe44 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003a54:	4630      	mov	r0, r6
24003a56:	f002 f80b 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003a5a:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a5e:	aa03      	add	r2, sp, #12
24003a60:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003a62:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a66:	4620      	mov	r0, r4
24003a68:	2302      	movs	r3, #2
24003a6a:	9500      	str	r5, [sp, #0]
24003a6c:	f003 fe36 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003a70:	4630      	mov	r0, r6
24003a72:	f001 fffd 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003a76:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a78:	aa03      	add	r2, sp, #12
24003a7a:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003a7c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a80:	4620      	mov	r0, r4
24003a82:	2302      	movs	r3, #2
24003a84:	9500      	str	r5, [sp, #0]
24003a86:	f003 fe29 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003a8a:	4630      	mov	r0, r6
24003a8c:	f001 fff0 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003a90:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a92:	aa03      	add	r2, sp, #12
24003a94:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24003a96:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003a9a:	4620      	mov	r0, r4
24003a9c:	2302      	movs	r3, #2
24003a9e:	9500      	str	r5, [sp, #0]
24003aa0:	f003 fe1c 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003aa4:	4630      	mov	r0, r6
24003aa6:	f001 ffe3 	bl	24005a70 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24003aaa:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003aae:	aa03      	add	r2, sp, #12
24003ab0:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24003ab2:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24003ab6:	4620      	mov	r0, r4
24003ab8:	2134      	movs	r1, #52	; 0x34
24003aba:	9500      	str	r5, [sp, #0]
24003abc:	f003 fe0e 	bl	240076dc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24003ac0:	4630      	mov	r0, r6
24003ac2:	f001 ffd5 	bl	24005a70 <HAL_Delay>
}
24003ac6:	b004      	add	sp, #16
24003ac8:	bd70      	pop	{r4, r5, r6, pc}
24003aca:	bf00      	nop

24003acc <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24003acc:	4b1c      	ldr	r3, [pc, #112]	; (24003b40 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
24003ace:	2200      	movs	r2, #0
24003ad0:	200b      	movs	r0, #11
24003ad2:	4611      	mov	r1, r2
{
24003ad4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
24003ad6:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
24003ada:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24003adc:	f044 0401 	orr.w	r4, r4, #1
24003ae0:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24003ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24003ae8:	f003 0301 	and.w	r3, r3, #1
24003aec:	9301      	str	r3, [sp, #4]
24003aee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
24003af0:	f001 ffe8 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24003af4:	200b      	movs	r0, #11
24003af6:	f002 f823 	bl	24005b40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
24003afa:	2200      	movs	r2, #0
24003afc:	2103      	movs	r1, #3
24003afe:	200c      	movs	r0, #12
24003b00:	f001 ffe0 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24003b04:	200c      	movs	r0, #12
24003b06:	f002 f81b 	bl	24005b40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
24003b0a:	2200      	movs	r2, #0
24003b0c:	2103      	movs	r1, #3
24003b0e:	200d      	movs	r0, #13
24003b10:	f001 ffd8 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24003b14:	200d      	movs	r0, #13
24003b16:	f002 f813 	bl	24005b40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 2, 0);
24003b1a:	2200      	movs	r2, #0
24003b1c:	2102      	movs	r1, #2
24003b1e:	2011      	movs	r0, #17
24003b20:	f001 ffd0 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24003b24:	2011      	movs	r0, #17
24003b26:	f002 f80b 	bl	24005b40 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
24003b2a:	2066      	movs	r0, #102	; 0x66
24003b2c:	2200      	movs	r2, #0
24003b2e:	2105      	movs	r1, #5
24003b30:	f001 ffc8 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24003b34:	2066      	movs	r0, #102	; 0x66

}
24003b36:	b002      	add	sp, #8
24003b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24003b3c:	f002 b800 	b.w	24005b40 <HAL_NVIC_EnableIRQ>
24003b40:	58024400 	.word	0x58024400
24003b44:	00000000 	.word	0x00000000

24003b48 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24003b48:	481b      	ldr	r0, [pc, #108]	; (24003bb8 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24003b4a:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24003b4c:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24003b4e:	2108      	movs	r1, #8
{
24003b50:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24003b52:	4c1a      	ldr	r4, [pc, #104]	; (24003bbc <MX_FMC_Init+0x74>)
{
24003b54:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24003b56:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24003b58:	2220      	movs	r2, #32
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24003b5a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24003b5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24003b60:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24003b62:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24003b66:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
24003b68:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24003b6a:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
24003b6e:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24003b70:	2308      	movs	r3, #8
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24003b72:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24003b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 7;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 8;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 10;
24003b7a:	240a      	movs	r4, #10
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24003b7c:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
24003b80:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24003b82:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 10;
24003b84:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
24003b86:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24003bb0 <MX_FMC_Init+0x68>
24003b8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003b8e:	2203      	movs	r2, #3
24003b90:	2310      	movs	r3, #16
24003b92:	ed8d 7b00 	vstr	d7, [sp]
24003b96:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24003b9a:	f007 fe9b 	bl	2400b8d4 <HAL_SDRAM_Init>
24003b9e:	b908      	cbnz	r0, 24003ba4 <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24003ba0:	b008      	add	sp, #32
24003ba2:	bd10      	pop	{r4, pc}
    Error_Handler( );
24003ba4:	f001 f9fc 	bl	24004fa0 <Error_Handler>
}
24003ba8:	b008      	add	sp, #32
24003baa:	bd10      	pop	{r4, pc}
24003bac:	f3af 8000 	nop.w
24003bb0:	00000002 	.word	0x00000002
24003bb4:	00000007 	.word	0x00000007
24003bb8:	20017a68 	.word	0x20017a68
24003bbc:	52004140 	.word	0x52004140

24003bc0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24003bc0:	4b31      	ldr	r3, [pc, #196]	; (24003c88 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003bc2:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24003bc4:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
24003bc6:	681a      	ldr	r2, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24003bc8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003bca:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
24003bcc:	2a00      	cmp	r2, #0
24003bce:	d159      	bne.n	24003c84 <HAL_SDRAM_MspInit+0xc4>
  __HAL_RCC_FMC_CLK_ENABLE();
24003bd0:	4a2e      	ldr	r2, [pc, #184]	; (24003c8c <HAL_SDRAM_MspInit+0xcc>)
  FMC_Initialized = 1;
24003bd2:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24003bd4:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003bd8:	240c      	movs	r4, #12
  FMC_Initialized = 1;
24003bda:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24003bdc:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24003bde:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24003be2:	2600      	movs	r6, #0
24003be4:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24003be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24003bea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24003bee:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003bf2:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24003bf8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24003bfa:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24003bfc:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24003bfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24003c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003c04:	a902      	add	r1, sp, #8
24003c06:	4822      	ldr	r0, [pc, #136]	; (24003c90 <HAL_SDRAM_MspInit+0xd0>)
24003c08:	f003 fb02 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24003c0c:	f248 1237 	movw	r2, #33079	; 0x8137
24003c10:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003c12:	a902      	add	r1, sp, #8
24003c14:	481f      	ldr	r0, [pc, #124]	; (24003c94 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003c16:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24003c18:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003c1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003c20:	f003 faf6 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24003c24:	f24c 7203 	movw	r2, #50947	; 0xc703
24003c28:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003c2a:	a902      	add	r1, sp, #8
24003c2c:	481a      	ldr	r0, [pc, #104]	; (24003c98 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003c2e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24003c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003c34:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003c38:	f003 faea 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24003c3c:	f240 62ff 	movw	r2, #1791	; 0x6ff
24003c40:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24003c42:	a902      	add	r1, sp, #8
24003c44:	4815      	ldr	r0, [pc, #84]	; (24003c9c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003c46:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24003c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003c4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24003c50:	f003 fade 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24003c54:	f64f 722c 	movw	r2, #65324	; 0xff2c
24003c58:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003c5a:	a902      	add	r1, sp, #8
24003c5c:	4810      	ldr	r0, [pc, #64]	; (24003ca0 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003c5e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24003c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
24003c64:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003c68:	f003 fad2 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24003c6c:	f64f 023f 	movw	r2, #63551	; 0xf83f
24003c70:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24003c72:	a902      	add	r1, sp, #8
24003c74:	480b      	ldr	r0, [pc, #44]	; (24003ca4 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24003c76:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24003c78:	e9cd 6704 	strd	r6, r7, [sp, #16]
24003c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24003c80:	f003 fac6 	bl	24007210 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24003c84:	b008      	add	sp, #32
24003c86:	bdd0      	pop	{r4, r6, r7, pc}
24003c88:	20017a64 	.word	0x20017a64
24003c8c:	58024400 	.word	0x58024400
24003c90:	58021000 	.word	0x58021000
24003c94:	58021800 	.word	0x58021800
24003c98:	58020c00 	.word	0x58020c00
24003c9c:	58022000 	.word	0x58022000
24003ca0:	58021c00 	.word	0x58021c00
24003ca4:	58021400 	.word	0x58021400

24003ca8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24003cac:	4b85      	ldr	r3, [pc, #532]	; (24003ec4 <MX_GPIO_Init+0x21c>)
{
24003cae:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003cb0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003cb2:	4f85      	ldr	r7, [pc, #532]	; (24003ec8 <MX_GPIO_Init+0x220>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003cb4:	4d85      	ldr	r5, [pc, #532]	; (24003ecc <MX_GPIO_Init+0x224>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003cb6:	2180      	movs	r1, #128	; 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003cb8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003cba:	4638      	mov	r0, r7
                           PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003cbc:	f8df b21c 	ldr.w	fp, [pc, #540]	; 24003edc <MX_GPIO_Init+0x234>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB6 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24003cc0:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24003cc2:	f8df a21c 	ldr.w	sl, [pc, #540]	; 24003ee0 <MX_GPIO_Init+0x238>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24003cc6:	f04f 0800 	mov.w	r8, #0
24003cca:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003cce:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24003cd2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24003cd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003cda:	f042 0210 	orr.w	r2, r2, #16
24003cde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003ce2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003ce6:	f002 0210 	and.w	r2, r2, #16
24003cea:	9201      	str	r2, [sp, #4]
24003cec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24003cee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003cf2:	f042 0202 	orr.w	r2, r2, #2
24003cf6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003cfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003cfe:	f002 0202 	and.w	r2, r2, #2
24003d02:	9202      	str	r2, [sp, #8]
24003d04:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24003d06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003d0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003d12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d16:	f002 0240 	and.w	r2, r2, #64	; 0x40
24003d1a:	9203      	str	r2, [sp, #12]
24003d1c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24003d1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d22:	f042 0208 	orr.w	r2, r2, #8
24003d26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003d2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d2e:	f002 0208 	and.w	r2, r2, #8
24003d32:	9204      	str	r2, [sp, #16]
24003d34:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24003d36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d3a:	f042 0204 	orr.w	r2, r2, #4
24003d3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003d42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d46:	f002 0204 	and.w	r2, r2, #4
24003d4a:	9205      	str	r2, [sp, #20]
24003d4c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24003d4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d52:	f042 0201 	orr.w	r2, r2, #1
24003d56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003d5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d5e:	f002 0201 	and.w	r2, r2, #1
24003d62:	9206      	str	r2, [sp, #24]
24003d64:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24003d66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24003d6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003d72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d76:	f402 7280 	and.w	r2, r2, #256	; 0x100
24003d7a:	9207      	str	r2, [sp, #28]
24003d7c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24003d7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24003d86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003d8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d8e:	f002 0280 	and.w	r2, r2, #128	; 0x80
24003d92:	9208      	str	r2, [sp, #32]
24003d94:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24003d96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003d9a:	f042 0220 	orr.w	r2, r2, #32
24003d9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003da2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003da8:	f003 0320 	and.w	r3, r3, #32
24003dac:	9309      	str	r3, [sp, #36]	; 0x24
24003dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003db0:	f003 fb6e 	bl	24007490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003db4:	4622      	mov	r2, r4
24003db6:	4628      	mov	r0, r5
24003db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24003dbc:	f003 fb68 	bl	24007490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
24003dc0:	f44f 42e5 	mov.w	r2, #29312	; 0x7280
24003dc4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003dc6:	a90a      	add	r1, sp, #40	; 0x28
24003dc8:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003dca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
24003dcc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003dd0:	f003 fa1e 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24003dd4:	f643 02f8 	movw	r2, #14584	; 0x38f8
24003dd8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003dda:	a90a      	add	r1, sp, #40	; 0x28
24003ddc:	483c      	ldr	r0, [pc, #240]	; (24003ed0 <MX_GPIO_Init+0x228>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003dde:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24003de0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24003de4:	f003 fa14 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24003de8:	f649 7249 	movw	r2, #40777	; 0x9f49
24003dec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24003dee:	a90a      	add	r1, sp, #40	; 0x28
24003df0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003df2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24003df4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24003df8:	f003 fa0a 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_1
24003dfc:	f242 4287 	movw	r2, #9351	; 0x2487
24003e00:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003e02:	a90a      	add	r1, sp, #40	; 0x28
24003e04:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003e06:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_1
24003e08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003e0c:	f003 fa00 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_14|GPIO_PIN_15;
24003e10:	f24c 0240 	movw	r2, #49216	; 0xc040
24003e14:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003e16:	a90a      	add	r1, sp, #40	; 0x28
24003e18:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24003e1a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_14|GPIO_PIN_15;
24003e1c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003e20:	f003 f9f6 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24003e24:	f24e 027f 	movw	r2, #57471	; 0xe07f
24003e28:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003e2a:	a90a      	add	r1, sp, #40	; 0x28
24003e2c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003e2e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24003e30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003e34:	f003 f9ec 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24003e38:	f44f 6210 	mov.w	r2, #2304	; 0x900
24003e3c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24003e3e:	a90a      	add	r1, sp, #40	; 0x28
24003e40:	4824      	ldr	r0, [pc, #144]	; (24003ed4 <MX_GPIO_Init+0x22c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003e42:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24003e44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24003e48:	f003 f9e2 	bl	24007210 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24003e4c:	2280      	movs	r2, #128	; 0x80
24003e4e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003e50:	4638      	mov	r0, r7
24003e52:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24003e54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24003e58:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003e5c:	f003 f9d8 	bl	24007210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24003e60:	2208      	movs	r2, #8
24003e62:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003e66:	4658      	mov	r0, fp
24003e68:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003e6a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24003e6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003e70:	f003 f9ce 	bl	24007210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24003e74:	22c0      	movs	r2, #192	; 0xc0
24003e76:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003e78:	a90a      	add	r1, sp, #40	; 0x28
24003e7a:	4817      	ldr	r0, [pc, #92]	; (24003ed8 <MX_GPIO_Init+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24003e7c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24003e7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003e82:	f003 f9c5 	bl	24007210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
24003e86:	2206      	movs	r2, #6
24003e88:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24003e8a:	4650      	mov	r0, sl
24003e8c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24003e8e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
24003e90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24003e94:	f003 f9bc 	bl	24007210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003e98:	2301      	movs	r3, #1
24003e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003e9e:	4628      	mov	r0, r5
24003ea0:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003ea2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24003ea6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003eaa:	f003 f9b1 	bl	24007210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
24003eae:	4622      	mov	r2, r4
24003eb0:	4631      	mov	r1, r6
24003eb2:	2009      	movs	r0, #9
24003eb4:	f001 fe06 	bl	24005ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
24003eb8:	2009      	movs	r0, #9
24003eba:	f001 fe41 	bl	24005b40 <HAL_NVIC_EnableIRQ>

}
24003ebe:	b011      	add	sp, #68	; 0x44
24003ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24003ec4:	58024400 	.word	0x58024400
24003ec8:	58020800 	.word	0x58020800
24003ecc:	58020400 	.word	0x58020400
24003ed0:	58020c00 	.word	0x58020c00
24003ed4:	58022000 	.word	0x58022000
24003ed8:	58021c00 	.word	0x58021c00
24003edc:	58021800 	.word	0x58021800
24003ee0:	58020000 	.word	0x58020000

24003ee4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24003ee4:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24003ee6:	4817      	ldr	r0, [pc, #92]	; (24003f44 <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x30B00F2D;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24003ee8:	2300      	movs	r3, #0
24003eea:	4917      	ldr	r1, [pc, #92]	; (24003f48 <MX_I2C1_Init+0x64>)
24003eec:	2401      	movs	r4, #1
24003eee:	4a17      	ldr	r2, [pc, #92]	; (24003f4c <MX_I2C1_Init+0x68>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24003ef0:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24003ef2:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c1.Init.OwnAddress2 = 0;
24003ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24003efa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24003efe:	f003 fb97 	bl	24007630 <HAL_I2C_Init>
24003f02:	b950      	cbnz	r0, 24003f1a <MX_I2C1_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24003f04:	2100      	movs	r1, #0
24003f06:	480f      	ldr	r0, [pc, #60]	; (24003f44 <MX_I2C1_Init+0x60>)
24003f08:	f003 fd88 	bl	24007a1c <HAL_I2CEx_ConfigAnalogFilter>
24003f0c:	b968      	cbnz	r0, 24003f2a <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24003f0e:	2100      	movs	r1, #0
24003f10:	480c      	ldr	r0, [pc, #48]	; (24003f44 <MX_I2C1_Init+0x60>)
24003f12:	f003 fdad 	bl	24007a70 <HAL_I2CEx_ConfigDigitalFilter>
24003f16:	b980      	cbnz	r0, 24003f3a <MX_I2C1_Init+0x56>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24003f18:	bd10      	pop	{r4, pc}
    Error_Handler();
24003f1a:	f001 f841 	bl	24004fa0 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24003f1e:	2100      	movs	r1, #0
24003f20:	4808      	ldr	r0, [pc, #32]	; (24003f44 <MX_I2C1_Init+0x60>)
24003f22:	f003 fd7b 	bl	24007a1c <HAL_I2CEx_ConfigAnalogFilter>
24003f26:	2800      	cmp	r0, #0
24003f28:	d0f1      	beq.n	24003f0e <MX_I2C1_Init+0x2a>
    Error_Handler();
24003f2a:	f001 f839 	bl	24004fa0 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24003f2e:	2100      	movs	r1, #0
24003f30:	4804      	ldr	r0, [pc, #16]	; (24003f44 <MX_I2C1_Init+0x60>)
24003f32:	f003 fd9d 	bl	24007a70 <HAL_I2CEx_ConfigDigitalFilter>
24003f36:	2800      	cmp	r0, #0
24003f38:	d0ee      	beq.n	24003f18 <MX_I2C1_Init+0x34>
}
24003f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003f3e:	f001 b82f 	b.w	24004fa0 <Error_Handler>
24003f42:	bf00      	nop
24003f44:	20017a9c 	.word	0x20017a9c
24003f48:	40005400 	.word	0x40005400
24003f4c:	30b00f2d 	.word	0x30b00f2d

24003f50 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24003f50:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24003f52:	4817      	ldr	r0, [pc, #92]	; (24003fb0 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24003f54:	2300      	movs	r3, #0
24003f56:	4917      	ldr	r1, [pc, #92]	; (24003fb4 <MX_I2C2_Init+0x64>)
24003f58:	2401      	movs	r4, #1
24003f5a:	4a17      	ldr	r2, [pc, #92]	; (24003fb8 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24003f5c:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24003f5e:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24003f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24003f66:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24003f6a:	f003 fb61 	bl	24007630 <HAL_I2C_Init>
24003f6e:	b950      	cbnz	r0, 24003f86 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24003f70:	2100      	movs	r1, #0
24003f72:	480f      	ldr	r0, [pc, #60]	; (24003fb0 <MX_I2C2_Init+0x60>)
24003f74:	f003 fd52 	bl	24007a1c <HAL_I2CEx_ConfigAnalogFilter>
24003f78:	b968      	cbnz	r0, 24003f96 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24003f7a:	2100      	movs	r1, #0
24003f7c:	480c      	ldr	r0, [pc, #48]	; (24003fb0 <MX_I2C2_Init+0x60>)
24003f7e:	f003 fd77 	bl	24007a70 <HAL_I2CEx_ConfigDigitalFilter>
24003f82:	b980      	cbnz	r0, 24003fa6 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24003f84:	bd10      	pop	{r4, pc}
    Error_Handler();
24003f86:	f001 f80b 	bl	24004fa0 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24003f8a:	2100      	movs	r1, #0
24003f8c:	4808      	ldr	r0, [pc, #32]	; (24003fb0 <MX_I2C2_Init+0x60>)
24003f8e:	f003 fd45 	bl	24007a1c <HAL_I2CEx_ConfigAnalogFilter>
24003f92:	2800      	cmp	r0, #0
24003f94:	d0f1      	beq.n	24003f7a <MX_I2C2_Init+0x2a>
    Error_Handler();
24003f96:	f001 f803 	bl	24004fa0 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24003f9a:	2100      	movs	r1, #0
24003f9c:	4804      	ldr	r0, [pc, #16]	; (24003fb0 <MX_I2C2_Init+0x60>)
24003f9e:	f003 fd67 	bl	24007a70 <HAL_I2CEx_ConfigDigitalFilter>
24003fa2:	2800      	cmp	r0, #0
24003fa4:	d0ee      	beq.n	24003f84 <MX_I2C2_Init+0x34>
}
24003fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003faa:	f000 bff9 	b.w	24004fa0 <Error_Handler>
24003fae:	bf00      	nop
24003fb0:	20017af0 	.word	0x20017af0
24003fb4:	40005800 	.word	0x40005800
24003fb8:	00b03fdb 	.word	0x00b03fdb

24003fbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
24003fbe:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003fc0:	2100      	movs	r1, #0
{
24003fc2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003fc4:	22c0      	movs	r2, #192	; 0xc0
24003fc6:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003fc8:	910a      	str	r1, [sp, #40]	; 0x28
24003fca:	e9cd 1106 	strd	r1, r1, [sp, #24]
24003fce:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003fd2:	f014 fc95 	bl	24018900 <memset>
  if(i2cHandle->Instance==I2C1)
24003fd6:	6823      	ldr	r3, [r4, #0]
24003fd8:	4a45      	ldr	r2, [pc, #276]	; (240040f0 <HAL_I2C_MspInit+0x134>)
24003fda:	4293      	cmp	r3, r2
24003fdc:	d004      	beq.n	24003fe8 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24003fde:	4a45      	ldr	r2, [pc, #276]	; (240040f4 <HAL_I2C_MspInit+0x138>)
24003fe0:	4293      	cmp	r3, r2
24003fe2:	d034      	beq.n	2400404e <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24003fe4:	b03d      	add	sp, #244	; 0xf4
24003fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24003fe8:	2208      	movs	r2, #8
24003fea:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003fec:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24003fee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003ff2:	f004 fca5 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
24003ff6:	2800      	cmp	r0, #0
24003ff8:	d173      	bne.n	240040e2 <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOB_CLK_ENABLE();
24003ffa:	4c3f      	ldr	r4, [pc, #252]	; (240040f8 <HAL_I2C_MspInit+0x13c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24003ffc:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24003ffe:	f44f 7640 	mov.w	r6, #768	; 0x300
24004002:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004004:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004008:	a906      	add	r1, sp, #24
2400400a:	483c      	ldr	r0, [pc, #240]	; (240040fc <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400400c:	f043 0302 	orr.w	r3, r3, #2
24004010:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24004014:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24004018:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400401a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400401c:	f003 0302 	and.w	r3, r3, #2
24004020:	9301      	str	r3, [sp, #4]
24004022:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24004024:	2301      	movs	r3, #1
24004026:	e9cd 6706 	strd	r6, r7, [sp, #24]
2400402a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400402e:	f003 f8ef 	bl	24007210 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24004032:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
24004036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2400403a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
2400403e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
24004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24004046:	9302      	str	r3, [sp, #8]
24004048:	9b02      	ldr	r3, [sp, #8]
}
2400404a:	b03d      	add	sp, #244	; 0xf4
2400404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
2400404e:	2208      	movs	r2, #8
24004050:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004052:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24004054:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004058:	f004 fc72 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
2400405c:	2800      	cmp	r0, #0
2400405e:	d143      	bne.n	240040e8 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
24004060:	4c25      	ldr	r4, [pc, #148]	; (240040f8 <HAL_I2C_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24004062:	2010      	movs	r0, #16
24004064:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24004066:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
24004068:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400406c:	2600      	movs	r6, #0
2400406e:	2701      	movs	r7, #1
    __HAL_RCC_GPIOH_CLK_ENABLE();
24004070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24004074:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24004078:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
2400407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
24004080:	9303      	str	r3, [sp, #12]
24004082:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004084:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24004088:	f043 0302 	orr.w	r3, r3, #2
2400408c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24004090:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24004094:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24004096:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400409a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400409e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240040a0:	a906      	add	r1, sp, #24
240040a2:	4817      	ldr	r0, [pc, #92]	; (24004100 <HAL_I2C_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
240040a4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240040a6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240040aa:	f003 f8b1 	bl	24007210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240040ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
240040b2:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240040b4:	a906      	add	r1, sp, #24
240040b6:	4811      	ldr	r0, [pc, #68]	; (240040fc <HAL_I2C_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240040b8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240040ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
240040be:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240040c2:	f003 f8a5 	bl	24007210 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
240040c6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240040ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240040ce:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
240040d2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240040da:	9305      	str	r3, [sp, #20]
240040dc:	9b05      	ldr	r3, [sp, #20]
}
240040de:	b03d      	add	sp, #244	; 0xf4
240040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240040e2:	f000 ff5d 	bl	24004fa0 <Error_Handler>
240040e6:	e788      	b.n	24003ffa <HAL_I2C_MspInit+0x3e>
      Error_Handler();
240040e8:	f000 ff5a 	bl	24004fa0 <Error_Handler>
240040ec:	e7b8      	b.n	24004060 <HAL_I2C_MspInit+0xa4>
240040ee:	bf00      	nop
240040f0:	40005400 	.word	0x40005400
240040f4:	40005800 	.word	0x40005800
240040f8:	58024400 	.word	0x58024400
240040fc:	58020400 	.word	0x58020400
24004100:	58021c00 	.word	0x58021c00

24004104 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
24004104:	4770      	bx	lr
24004106:	bf00      	nop

24004108 <checkForSDCardPreset>:
{
24004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
2400410c:	2301      	movs	r3, #1
{
2400410e:	b08a      	sub	sp, #40	; 0x28
24004110:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
24004112:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() == 0x0)
24004116:	f009 fc29 	bl	2400d96c <BSP_PlatformIsDetected>
2400411a:	b908      	cbnz	r0, 24004120 <checkForSDCardPreset+0x18>
    status = SD_NOT_PRESENT;
2400411c:	f88d 000b 	strb.w	r0, [sp, #11]
  return status;
24004120:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
24004124:	b95b      	cbnz	r3, 2400413e <checkForSDCardPreset+0x36>
24004126:	4c39      	ldr	r4, [pc, #228]	; (2400420c <checkForSDCardPreset+0x104>)
24004128:	4d39      	ldr	r5, [pc, #228]	; (24004210 <checkForSDCardPreset+0x108>)
		loadFailed = 1;
2400412a:	2301      	movs	r3, #1
2400412c:	2000      	movs	r0, #0
2400412e:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
24004130:	2300      	movs	r3, #0
24004132:	4a38      	ldr	r2, [pc, #224]	; (24004214 <checkForSDCardPreset+0x10c>)
24004134:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24004136:	7023      	strb	r3, [r4, #0]
}
24004138:	b00a      	add	sp, #40	; 0x28
2400413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
2400413e:	2700      	movs	r7, #0
		diskBusy = 1;
24004140:	f04f 0801 	mov.w	r8, #1
24004144:	4c31      	ldr	r4, [pc, #196]	; (2400420c <checkForSDCardPreset+0x104>)
		loadFailed = 0;
24004146:	4d32      	ldr	r5, [pc, #200]	; (24004210 <checkForSDCardPreset+0x108>)
		disk_initialize(0);
24004148:	4638      	mov	r0, r7
		diskBusy = 1;
2400414a:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
2400414e:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
24004150:	f009 fca6 	bl	2400daa0 <disk_initialize>
	    disk_status(0);
24004154:	4638      	mov	r0, r7
24004156:	f009 fc99 	bl	2400da8c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400415a:	4642      	mov	r2, r8
2400415c:	492e      	ldr	r1, [pc, #184]	; (24004218 <checkForSDCardPreset+0x110>)
2400415e:	482f      	ldr	r0, [pc, #188]	; (2400421c <checkForSDCardPreset+0x114>)
24004160:	f00b feae 	bl	2400fec0 <f_mount>
24004164:	2800      	cmp	r0, #0
24004166:	d1e0      	bne.n	2400412a <checkForSDCardPreset+0x22>
			itoa(numberToLoad, charBuf, 10);
24004168:	a904      	add	r1, sp, #16
2400416a:	220a      	movs	r2, #10
2400416c:	4630      	mov	r0, r6
2400416e:	f014 fb9d 	bl	240188ac <itoa>
			int len = ((strlen(charBuf)));
24004172:	a804      	add	r0, sp, #16
24004174:	f7fc f8b0 	bl	240002d8 <strlen>
			if (len == 1)
24004178:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
2400417a:	4601      	mov	r1, r0
			if (len == 1)
2400417c:	d02d      	beq.n	240041da <checkForSDCardPreset+0xd2>
				strcat(charBuf, ".ebp");
2400417e:	ab04      	add	r3, sp, #16
24004180:	4e27      	ldr	r6, [pc, #156]	; (24004220 <checkForSDCardPreset+0x118>)
24004182:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
24004186:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
24004188:	181f      	adds	r7, r3, r0
2400418a:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
2400418c:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
2400418e:	f84c 0001 	str.w	r0, [ip, r1]
24004192:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
24004194:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
24004196:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
24004198:	4661      	mov	r1, ip
2400419a:	f014 fb89 	bl	240188b0 <memcpy>
2400419e:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
240041a0:	4a1d      	ldr	r2, [pc, #116]	; (24004218 <checkForSDCardPreset+0x110>)
240041a2:	4920      	ldr	r1, [pc, #128]	; (24004224 <checkForSDCardPreset+0x11c>)
240041a4:	4820      	ldr	r0, [pc, #128]	; (24004228 <checkForSDCardPreset+0x120>)
240041a6:	f00c fbb9 	bl	2401091c <f_findfirst>
			if(res == FR_OK)
240041aa:	2800      	cmp	r0, #0
240041ac:	d1bd      	bne.n	2400412a <checkForSDCardPreset+0x22>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
240041ae:	4e1f      	ldr	r6, [pc, #124]	; (2400422c <checkForSDCardPreset+0x124>)
240041b0:	2211      	movs	r2, #17
240041b2:	491f      	ldr	r1, [pc, #124]	; (24004230 <checkForSDCardPreset+0x128>)
240041b4:	4630      	mov	r0, r6
240041b6:	f00b fecf 	bl	2400ff58 <f_open>
240041ba:	2800      	cmp	r0, #0
240041bc:	d1b5      	bne.n	2400412a <checkForSDCardPreset+0x22>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
240041be:	ab03      	add	r3, sp, #12
240041c0:	68f2      	ldr	r2, [r6, #12]
240041c2:	491c      	ldr	r1, [pc, #112]	; (24004234 <checkForSDCardPreset+0x12c>)
240041c4:	4630      	mov	r0, r6
240041c6:	f00c f843 	bl	24010250 <f_read>
					presetWaitingToParse = bytesRead;
240041ca:	9a03      	ldr	r2, [sp, #12]
240041cc:	4b1a      	ldr	r3, [pc, #104]	; (24004238 <checkForSDCardPreset+0x130>)
					f_close(&SDFile);
240041ce:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
240041d0:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
240041d2:	f00c fa99 	bl	24010708 <f_close>
					found = 1;
240041d6:	2001      	movs	r0, #1
240041d8:	e7aa      	b.n	24004130 <checkForSDCardPreset+0x28>
				finalString[1] = charBuf[0];
240041da:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
240041de:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
240041e0:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
240041e4:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
240041e8:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
240041ea:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
240041ec:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
240041f0:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
240041f2:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
240041f6:	f7fc f86f 	bl	240002d8 <strlen>
240041fa:	4909      	ldr	r1, [pc, #36]	; (24004220 <checkForSDCardPreset+0x118>)
240041fc:	4602      	mov	r2, r0
240041fe:	9b01      	ldr	r3, [sp, #4]
24004200:	181e      	adds	r6, r3, r0
24004202:	6808      	ldr	r0, [r1, #0]
24004204:	5098      	str	r0, [r3, r2]
24004206:	790a      	ldrb	r2, [r1, #4]
24004208:	7132      	strb	r2, [r6, #4]
2400420a:	e7c9      	b.n	240041a0 <checkForSDCardPreset+0x98>
2400420c:	20018b88 	.word	0x20018b88
24004210:	2001ad38 	.word	0x2001ad38
24004214:	2001c7d0 	.word	0x2001c7d0
24004218:	2001f5e8 	.word	0x2001f5e8
2400421c:	2001f188 	.word	0x2001f188
24004220:	2401ae78 	.word	0x2401ae78
24004224:	2001abec 	.word	0x2001abec
24004228:	20018b50 	.word	0x20018b50
2400422c:	2001f3bc 	.word	0x2001f3bc
24004230:	2001ac02 	.word	0x2001ac02
24004234:	20017b48 	.word	0x20017b48
24004238:	2001c7d4 	.word	0x2001c7d4
2400423c:	00000000 	.word	0x00000000

24004240 <SystemClock_Config>:
{
24004240:	b500      	push	{lr}
24004242:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24004244:	224c      	movs	r2, #76	; 0x4c
24004246:	2100      	movs	r1, #0
24004248:	a80c      	add	r0, sp, #48	; 0x30
2400424a:	f014 fb59 	bl	24018900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2400424e:	2220      	movs	r2, #32
24004250:	2100      	movs	r1, #0
24004252:	a804      	add	r0, sp, #16
24004254:	f014 fb54 	bl	24018900 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24004258:	2002      	movs	r0, #2
2400425a:	f003 fc35 	bl	24007ac8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2400425e:	4b40      	ldr	r3, [pc, #256]	; (24004360 <SystemClock_Config+0x120>)
24004260:	2100      	movs	r1, #0
24004262:	4a40      	ldr	r2, [pc, #256]	; (24004364 <SystemClock_Config+0x124>)
24004264:	9101      	str	r1, [sp, #4]
24004266:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24004268:	f021 0101 	bic.w	r1, r1, #1
2400426c:	62d9      	str	r1, [r3, #44]	; 0x2c
2400426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004270:	f003 0301 	and.w	r3, r3, #1
24004274:	9301      	str	r3, [sp, #4]
24004276:	6993      	ldr	r3, [r2, #24]
24004278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
2400427c:	6193      	str	r3, [r2, #24]
2400427e:	6993      	ldr	r3, [r2, #24]
24004280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24004284:	9301      	str	r3, [sp, #4]
24004286:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24004288:	6993      	ldr	r3, [r2, #24]
2400428a:	0499      	lsls	r1, r3, #18
2400428c:	d5fc      	bpl.n	24004288 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400428e:	4b36      	ldr	r3, [pc, #216]	; (24004368 <SystemClock_Config+0x128>)
24004290:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
24004294:	f041 0102 	orr.w	r1, r1, #2
24004298:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400429c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400429e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240042a2:	f003 0302 	and.w	r3, r3, #2
240042a6:	9302      	str	r3, [sp, #8]
240042a8:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240042aa:	9103      	str	r1, [sp, #12]
240042ac:	6991      	ldr	r1, [r2, #24]
240042ae:	4b2c      	ldr	r3, [pc, #176]	; (24004360 <SystemClock_Config+0x120>)
240042b0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
240042b4:	6191      	str	r1, [r2, #24]
240042b6:	6992      	ldr	r2, [r2, #24]
240042b8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240042bc:	9203      	str	r2, [sp, #12]
240042be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240042c0:	4a28      	ldr	r2, [pc, #160]	; (24004364 <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240042c2:	f041 0101 	orr.w	r1, r1, #1
240042c6:	62d9      	str	r1, [r3, #44]	; 0x2c
240042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240042ca:	f003 0301 	and.w	r3, r3, #1
240042ce:	9303      	str	r3, [sp, #12]
240042d0:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240042d2:	6993      	ldr	r3, [r2, #24]
240042d4:	049b      	lsls	r3, r3, #18
240042d6:	d5fc      	bpl.n	240042d2 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
240042d8:	4a23      	ldr	r2, [pc, #140]	; (24004368 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240042da:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240042dc:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
240042de:	6a93      	ldr	r3, [r2, #40]	; 0x28
240042e0:	f023 0303 	bic.w	r3, r3, #3
240042e4:	f043 0302 	orr.w	r3, r3, #2
240042e8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240042ea:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240042ec:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240042ee:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
240042f0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 1;
240042f2:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
240042f4:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240042f6:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
240042f8:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
240042fa:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240042fc:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
24004300:	2306      	movs	r3, #6
24004302:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
24004304:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24004306:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004348 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLR = 8;
2400430a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400430c:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400430e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24004312:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24004314:	f003 fcdc 	bl	24007cd0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24004318:	2200      	movs	r2, #0
2400431a:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400431c:	2104      	movs	r1, #4
2400431e:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24004320:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 24004350 <SystemClock_Config+0x110>
24004324:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004328:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400432c:	2340      	movs	r3, #64	; 0x40
2400432e:	ed8d 7b04 	vstr	d7, [sp, #16]
24004332:	ed9f 7b09 	vldr	d7, [pc, #36]	; 24004358 <SystemClock_Config+0x118>
24004336:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
2400433a:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400433e:	f004 f85b 	bl	240083f8 <HAL_RCC_ClockConfig>
}
24004342:	b021      	add	sp, #132	; 0x84
24004344:	f85d fb04 	ldr.w	pc, [sp], #4
24004348:	00000021 	.word	0x00000021
2400434c:	00010000 	.word	0x00010000
24004350:	0000003f 	.word	0x0000003f
24004354:	00000003 	.word	0x00000003
24004358:	00000040 	.word	0x00000040
2400435c:	00000040 	.word	0x00000040
24004360:	58000400 	.word	0x58000400
24004364:	58024800 	.word	0x58024800
24004368:	58024400 	.word	0x58024400
2400436c:	00000000 	.word	0x00000000

24004370 <PeriphCommonClock_Config>:
{
24004370:	b500      	push	{lr}
24004372:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004374:	2100      	movs	r1, #0
24004376:	2280      	movs	r2, #128	; 0x80
24004378:	a810      	add	r0, sp, #64	; 0x40
2400437a:	f014 fac1 	bl	24018900 <memset>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
2400437e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24004380:	2201      	movs	r2, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004382:	4668      	mov	r0, sp
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24004384:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
24004386:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24004388:	23c0      	movs	r3, #192	; 0xc0
2400438a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 240043e0 <PeriphCommonClock_Config+0x70>
2400438e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004392:	2201      	movs	r2, #1
24004394:	230c      	movs	r3, #12
24004396:	ed8d 7b02 	vstr	d7, [sp, #8]
2400439a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 240043e8 <PeriphCommonClock_Config+0x78>
2400439e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
240043a2:	2210      	movs	r2, #16
240043a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240043a8:	ed8d 7b04 	vstr	d7, [sp, #16]
240043ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240043f0 <PeriphCommonClock_Config+0x80>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240043b0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 240043f8 <PeriphCommonClock_Config+0x88>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
240043b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
240043b8:	ed8d 7b08 	vstr	d7, [sp, #32]
240043bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004400 <PeriphCommonClock_Config+0x90>
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240043c0:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240043c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240043c8:	ed8d 6b00 	vstr	d6, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
240043cc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240043d0:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240043d2:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240043d4:	f004 fab4 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
}
240043d8:	b031      	add	sp, #196	; 0xc4
240043da:	f85d fb04 	ldr.w	pc, [sp], #4
240043de:	bf00      	nop
240043e0:	00000001 	.word	0x00000001
240043e4:	0000000a 	.word	0x0000000a
240043e8:	00000008 	.word	0x00000008
240043ec:	00000002 	.word	0x00000002
240043f0:	00000020 	.word	0x00000020
240043f4:	00001000 	.word	0x00001000
240043f8:	01010100 	.word	0x01010100
240043fc:	00000000 	.word	0x00000000
24004400:	00000004 	.word	0x00000004
24004404:	00000008 	.word	0x00000008

24004408 <randomNumber>:
float randomNumber(void) {
24004408:	b500      	push	{lr}
2400440a:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
2400440c:	4807      	ldr	r0, [pc, #28]	; (2400442c <randomNumber+0x24>)
2400440e:	a901      	add	r1, sp, #4
24004410:	f005 fc9c 	bl	24009d4c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
24004414:	eddd 7a01 	vldr	s15, [sp, #4]
24004418:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24004430 <randomNumber+0x28>
2400441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
24004420:	ee27 0a80 	vmul.f32	s0, s15, s0
24004424:	b003      	add	sp, #12
24004426:	f85d fb04 	ldr.w	pc, [sp], #4
2400442a:	bf00      	nop
2400442c:	2001ec2c 	.word	0x2001ec2c
24004430:	2f80000d 	.word	0x2f80000d

24004434 <BSP_SD_IsDetected>:
{
24004434:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
24004436:	2301      	movs	r3, #1
{
24004438:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
2400443a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() == 0x0)
2400443e:	f009 fa95 	bl	2400d96c <BSP_PlatformIsDetected>
24004442:	b908      	cbnz	r0, 24004448 <BSP_SD_IsDetected+0x14>
    status = SD_NOT_PRESENT;
24004444:	f88d 0007 	strb.w	r0, [sp, #7]
  return status;
24004448:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
2400444c:	b003      	add	sp, #12
2400444e:	f85d fb04 	ldr.w	pc, [sp], #4
24004452:	bf00      	nop

24004454 <getPresetNamesFromSDCard>:
{
24004454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
24004458:	2301      	movs	r3, #1
{
2400445a:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
2400445c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() == 0x0)
24004460:	f009 fa84 	bl	2400d96c <BSP_PlatformIsDetected>
24004464:	b908      	cbnz	r0, 2400446a <getPresetNamesFromSDCard+0x16>
    status = SD_NOT_PRESENT;
24004466:	f88d 0003 	strb.w	r0, [sp, #3]
  return status;
2400446a:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
2400446e:	b93b      	cbnz	r3, 24004480 <getPresetNamesFromSDCard+0x2c>
24004470:	f8df a05c 	ldr.w	sl, [pc, #92]	; 240044d0 <getPresetNamesFromSDCard+0x7c>
	diskBusy = 0;
24004474:	2300      	movs	r3, #0
24004476:	f88a 3000 	strb.w	r3, [sl]
}
2400447a:	b009      	add	sp, #36	; 0x24
2400447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
24004480:	2400      	movs	r4, #0
24004482:	4b0e      	ldr	r3, [pc, #56]	; (240044bc <getPresetNamesFromSDCard+0x68>)
		diskBusy = 1;
24004484:	2501      	movs	r5, #1
24004486:	f8df a048 	ldr.w	sl, [pc, #72]	; 240044d0 <getPresetNamesFromSDCard+0x7c>
		disk_initialize(0);
2400448a:	4620      	mov	r0, r4
		loadFailed = 0;
2400448c:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
2400448e:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
24004492:	f009 fb05 	bl	2400daa0 <disk_initialize>
	    disk_status(0);
24004496:	4620      	mov	r0, r4
24004498:	f009 faf8 	bl	2400da8c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400449c:	462a      	mov	r2, r5
2400449e:	4908      	ldr	r1, [pc, #32]	; (240044c0 <getPresetNamesFromSDCard+0x6c>)
240044a0:	4808      	ldr	r0, [pc, #32]	; (240044c4 <getPresetNamesFromSDCard+0x70>)
240044a2:	f00b fd0d 	bl	2400fec0 <f_mount>
240044a6:	2800      	cmp	r0, #0
240044a8:	d1e4      	bne.n	24004474 <getPresetNamesFromSDCard+0x20>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240044aa:	4605      	mov	r5, r0
240044ac:	4e06      	ldr	r6, [pc, #24]	; (240044c8 <getPresetNamesFromSDCard+0x74>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240044ae:	f8df 9010 	ldr.w	r9, [pc, #16]	; 240044c0 <getPresetNamesFromSDCard+0x6c>
240044b2:	f8df 8020 	ldr.w	r8, [pc, #32]	; 240044d4 <getPresetNamesFromSDCard+0x80>
240044b6:	4f05      	ldr	r7, [pc, #20]	; (240044cc <getPresetNamesFromSDCard+0x78>)
240044b8:	e024      	b.n	24004504 <getPresetNamesFromSDCard+0xb0>
240044ba:	bf00      	nop
240044bc:	2001ad38 	.word	0x2001ad38
240044c0:	2001f5e8 	.word	0x2001f5e8
240044c4:	2001f188 	.word	0x2001f188
240044c8:	2401ae78 	.word	0x2401ae78
240044cc:	20018b50 	.word	0x20018b50
240044d0:	20018b88 	.word	0x20018b88
240044d4:	2001abec 	.word	0x2001abec
					strcat(charBuf, ".ebp");
240044d8:	ab02      	add	r3, sp, #8
240044da:	6830      	ldr	r0, [r6, #0]
240044dc:	ac02      	add	r4, sp, #8
240044de:	1899      	adds	r1, r3, r2
240044e0:	7933      	ldrb	r3, [r6, #4]
240044e2:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
240044e4:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
240044e6:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
240044e8:	a805      	add	r0, sp, #20
240044ea:	4621      	mov	r1, r4
240044ec:	f014 f9e0 	bl	240188b0 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240044f0:	ab05      	add	r3, sp, #20
240044f2:	464a      	mov	r2, r9
240044f4:	4641      	mov	r1, r8
240044f6:	4638      	mov	r0, r7
240044f8:	f00c fa10 	bl	2401091c <f_findfirst>
				if(res == FR_OK)
240044fc:	b358      	cbz	r0, 24004556 <getPresetNamesFromSDCard+0x102>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240044fe:	3501      	adds	r5, #1
24004500:	2d40      	cmp	r5, #64	; 0x40
24004502:	d0b7      	beq.n	24004474 <getPresetNamesFromSDCard+0x20>
				itoa(i, charBuf, 10);
24004504:	220a      	movs	r2, #10
24004506:	a902      	add	r1, sp, #8
24004508:	4628      	mov	r0, r5
2400450a:	f014 f9cf 	bl	240188ac <itoa>
				int len = ((strlen(charBuf)));
2400450e:	a802      	add	r0, sp, #8
24004510:	f7fb fee2 	bl	240002d8 <strlen>
				if (len == 1)
24004514:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24004516:	4602      	mov	r2, r0
				if (len == 1)
24004518:	d1de      	bne.n	240044d8 <getPresetNamesFromSDCard+0x84>
					finalString[2] = charBuf[1];
2400451a:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
2400451e:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
24004520:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
24004524:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24004526:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
2400452a:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
2400452e:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
24004532:	f7fb fed1 	bl	240002d8 <strlen>
24004536:	aa05      	add	r2, sp, #20
24004538:	4603      	mov	r3, r0
2400453a:	a905      	add	r1, sp, #20
2400453c:	4402      	add	r2, r0
2400453e:	6830      	ldr	r0, [r6, #0]
24004540:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24004542:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
24004544:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24004546:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
24004548:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400454a:	ab05      	add	r3, sp, #20
2400454c:	464a      	mov	r2, r9
2400454e:	f00c f9e5 	bl	2401091c <f_findfirst>
				if(res == FR_OK)
24004552:	2800      	cmp	r0, #0
24004554:	d1d3      	bne.n	240044fe <getPresetNamesFromSDCard+0xaa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24004556:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 2400492c <getPresetNamesFromSDCard+0x4d8>
2400455a:	2211      	movs	r2, #17
2400455c:	49ef      	ldr	r1, [pc, #956]	; (2400491c <getPresetNamesFromSDCard+0x4c8>)
2400455e:	4658      	mov	r0, fp
24004560:	f00b fcfa 	bl	2400ff58 <f_open>
24004564:	2800      	cmp	r0, #0
24004566:	d1ca      	bne.n	240044fe <getPresetNamesFromSDCard+0xaa>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24004568:	4ced      	ldr	r4, [pc, #948]	; (24004920 <getPresetNamesFromSDCard+0x4cc>)
2400456a:	ab01      	add	r3, sp, #4
2400456c:	f8db 200c 	ldr.w	r2, [fp, #12]
24004570:	4658      	mov	r0, fp
24004572:	4621      	mov	r1, r4
24004574:	f00b fe6c 	bl	24010250 <f_read>
						f_close(&SDFile);
24004578:	4658      	mov	r0, fp
2400457a:	f00c f8c5 	bl	24010708 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
2400457e:	7823      	ldrb	r3, [r4, #0]
24004580:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
24004584:	4ae7      	ldr	r2, [pc, #924]	; (24004924 <getPresetNamesFromSDCard+0x4d0>)
24004586:	f894 c001 	ldrb.w	ip, [r4, #1]
2400458a:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
2400458e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24004592:	48e5      	ldr	r0, [pc, #916]	; (24004928 <getPresetNamesFromSDCard+0x4d4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
24004594:	f882 c001 	strb.w	ip, [r2, #1]
24004598:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400459c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
240045a0:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
240045a2:	f882 c002 	strb.w	ip, [r2, #2]
240045a6:	f894 c003 	ldrb.w	ip, [r4, #3]
240045aa:	f882 c003 	strb.w	ip, [r2, #3]
240045ae:	f894 c004 	ldrb.w	ip, [r4, #4]
240045b2:	f882 c004 	strb.w	ip, [r2, #4]
240045b6:	f894 c005 	ldrb.w	ip, [r4, #5]
240045ba:	f882 c005 	strb.w	ip, [r2, #5]
240045be:	f894 c006 	ldrb.w	ip, [r4, #6]
240045c2:	f882 c006 	strb.w	ip, [r2, #6]
240045c6:	f894 c007 	ldrb.w	ip, [r4, #7]
240045ca:	f882 c007 	strb.w	ip, [r2, #7]
240045ce:	f894 c008 	ldrb.w	ip, [r4, #8]
240045d2:	f882 c008 	strb.w	ip, [r2, #8]
240045d6:	f894 c009 	ldrb.w	ip, [r4, #9]
240045da:	f882 c009 	strb.w	ip, [r2, #9]
240045de:	f894 c00a 	ldrb.w	ip, [r4, #10]
240045e2:	f882 c00a 	strb.w	ip, [r2, #10]
240045e6:	f894 c00b 	ldrb.w	ip, [r4, #11]
240045ea:	f882 c00b 	strb.w	ip, [r2, #11]
240045ee:	f894 c00c 	ldrb.w	ip, [r4, #12]
240045f2:	f882 c00c 	strb.w	ip, [r2, #12]
240045f6:	f894 c00d 	ldrb.w	ip, [r4, #13]
240045fa:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240045fe:	7ba2      	ldrb	r2, [r4, #14]
24004600:	5442      	strb	r2, [r0, r1]
24004602:	7be2      	ldrb	r2, [r4, #15]
24004604:	705a      	strb	r2, [r3, #1]
24004606:	7c22      	ldrb	r2, [r4, #16]
24004608:	709a      	strb	r2, [r3, #2]
2400460a:	7c62      	ldrb	r2, [r4, #17]
2400460c:	70da      	strb	r2, [r3, #3]
2400460e:	7ca2      	ldrb	r2, [r4, #18]
24004610:	711a      	strb	r2, [r3, #4]
24004612:	7ce2      	ldrb	r2, [r4, #19]
24004614:	715a      	strb	r2, [r3, #5]
24004616:	7d22      	ldrb	r2, [r4, #20]
24004618:	719a      	strb	r2, [r3, #6]
2400461a:	7d62      	ldrb	r2, [r4, #21]
2400461c:	71da      	strb	r2, [r3, #7]
2400461e:	7da2      	ldrb	r2, [r4, #22]
24004620:	721a      	strb	r2, [r3, #8]
24004622:	7de2      	ldrb	r2, [r4, #23]
24004624:	725a      	strb	r2, [r3, #9]
24004626:	7e22      	ldrb	r2, [r4, #24]
24004628:	729a      	strb	r2, [r3, #10]
2400462a:	7e62      	ldrb	r2, [r4, #25]
2400462c:	72da      	strb	r2, [r3, #11]
2400462e:	7ea2      	ldrb	r2, [r4, #26]
24004630:	731a      	strb	r2, [r3, #12]
24004632:	7ee2      	ldrb	r2, [r4, #27]
24004634:	735a      	strb	r2, [r3, #13]
24004636:	7f22      	ldrb	r2, [r4, #28]
24004638:	739a      	strb	r2, [r3, #14]
2400463a:	7f62      	ldrb	r2, [r4, #29]
2400463c:	73da      	strb	r2, [r3, #15]
2400463e:	7fa2      	ldrb	r2, [r4, #30]
24004640:	741a      	strb	r2, [r3, #16]
24004642:	7fe2      	ldrb	r2, [r4, #31]
24004644:	745a      	strb	r2, [r3, #17]
24004646:	f894 2020 	ldrb.w	r2, [r4, #32]
2400464a:	749a      	strb	r2, [r3, #18]
2400464c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
24004650:	74da      	strb	r2, [r3, #19]
24004652:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
24004656:	751a      	strb	r2, [r3, #20]
24004658:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
2400465c:	755a      	strb	r2, [r3, #21]
2400465e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
24004662:	759a      	strb	r2, [r3, #22]
24004664:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24004668:	75da      	strb	r2, [r3, #23]
2400466a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400466e:	761a      	strb	r2, [r3, #24]
24004670:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
24004674:	765a      	strb	r2, [r3, #25]
24004676:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
2400467a:	769a      	strb	r2, [r3, #26]
2400467c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
24004680:	76da      	strb	r2, [r3, #27]
24004682:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
24004686:	771a      	strb	r2, [r3, #28]
24004688:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400468c:	775a      	strb	r2, [r3, #29]
2400468e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
24004692:	779a      	strb	r2, [r3, #30]
24004694:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
24004698:	77da      	strb	r2, [r3, #31]
2400469a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400469e:	f883 2020 	strb.w	r2, [r3, #32]
240046a2:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
240046a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
240046aa:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
240046ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
240046b2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
240046b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
240046ba:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
240046be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
240046c2:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
240046c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
240046ca:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
240046ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
240046d2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
240046d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
240046da:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
240046de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
240046e2:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
240046e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
240046ea:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
240046ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
240046f2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
240046f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
240046fa:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
240046fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
24004702:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
24004706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
2400470a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
2400470e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
24004712:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
24004716:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
2400471a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
2400471e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
24004722:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
24004726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
2400472a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
2400472e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
24004732:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24004736:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
2400473a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
2400473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
24004742:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
24004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
2400474a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
2400474e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
24004752:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
24004756:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
2400475a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
2400475e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
24004762:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
24004766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
2400476a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
2400476e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
24004772:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
24004776:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
2400477a:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
2400477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
24004782:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
24004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
2400478a:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
2400478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
24004792:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
24004796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
2400479a:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
2400479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240047a2:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
240047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240047aa:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
240047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
240047b2:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
240047b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
240047ba:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
240047be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
240047c2:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
240047c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
240047ca:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
240047ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
240047d2:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
240047d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
240047da:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
240047de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
240047e2:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
240047e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
240047ea:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
240047ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
240047f2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
240047f6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
240047fa:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
240047fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
24004802:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
24004806:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
2400480a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
2400480e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
24004812:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
24004816:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
2400481a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
2400481e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24004822:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
24004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
2400482a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
2400482e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
24004832:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
24004836:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
2400483a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
2400483e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
24004842:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
24004846:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
2400484a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
2400484e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
24004852:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
24004856:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
2400485a:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
2400485e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
24004862:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
24004866:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
2400486a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
2400486e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
24004872:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
24004876:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
2400487a:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
2400487e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
24004882:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
24004886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
2400488a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
2400488e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
24004892:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
24004896:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
2400489a:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
2400489e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
240048a2:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
240048a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
240048aa:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
240048ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
240048b2:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
240048b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
240048ba:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
240048be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
240048c2:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
240048c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
240048ca:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
240048ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
240048d2:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
240048d6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
240048da:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
240048de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
240048e2:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
240048e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
240048ea:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
240048ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
240048f2:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
240048f6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
240048fa:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
240048fe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
24004902:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
24004906:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
2400490a:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
2400490e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
24004912:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
24004916:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
2400491a:	e5f0      	b.n	240044fe <getPresetNamesFromSDCard+0xaa>
2400491c:	2001ac02 	.word	0x2001ac02
24004920:	20017b48 	.word	0x20017b48
24004924:	300386a0 	.word	0x300386a0
24004928:	3003aa20 	.word	0x3003aa20
2400492c:	2001f3bc 	.word	0x2001f3bc

24004930 <SDRAM_init>:
{
24004930:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
24004932:	2300      	movs	r3, #0
{
24004934:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004936:	4c22      	ldr	r4, [pc, #136]	; (240049c0 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24004938:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
2400493a:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
2400493c:	2310      	movs	r3, #16
2400493e:	2601      	movs	r6, #1
24004940:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004942:	a902      	add	r1, sp, #8
24004944:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24004946:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400494a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
2400494e:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004952:	f006 ffe9 	bl	2400b928 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
24004956:	2064      	movs	r0, #100	; 0x64
24004958:	f001 f88a 	bl	24005a70 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400495c:	a902      	add	r1, sp, #8
2400495e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24004962:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24004964:	e9cd 6704 	strd	r6, r7, [sp, #16]
24004968:	2602      	movs	r6, #2
2400496a:	2710      	movs	r7, #16
2400496c:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004970:	f006 ffda 	bl	2400b928 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24004974:	2003      	movs	r0, #3
24004976:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
2400497c:	e9cd 0102 	strd	r0, r1, [sp, #8]
24004980:	2004      	movs	r0, #4
24004982:	2100      	movs	r1, #0
24004984:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24004988:	a902      	add	r1, sp, #8
2400498a:	4620      	mov	r0, r4
2400498c:	f006 ffcc 	bl	2400b928 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24004990:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24004994:	2204      	movs	r2, #4
24004996:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24004998:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
2400499a:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400499c:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
2400499e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
240049a2:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240049a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
240049a8:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240049ac:	4620      	mov	r0, r4
240049ae:	f006 ffbb 	bl	2400b928 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
240049b2:	f640 0106 	movw	r1, #2054	; 0x806
240049b6:	4620      	mov	r0, r4
240049b8:	f006 ffd6 	bl	2400b968 <HAL_SDRAM_ProgramRefreshRate>
}
240049bc:	b006      	add	sp, #24
240049be:	bdd0      	pop	{r4, r6, r7, pc}
240049c0:	20017a68 	.word	0x20017a68

240049c4 <MPU_Conf>:

}


void MPU_Conf(void)
{
240049c4:	b570      	push	{r4, r5, r6, lr}
240049c6:	b084      	sub	sp, #16

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240049c8:	2401      	movs	r4, #1
	  HAL_MPU_Disable();
240049ca:	f001 f8ef 	bl	24005bac <HAL_MPU_Disable>
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
240049ce:	f04f 2601 	mov.w	r6, #16777472	; 0x1000100
	  MPU_InitStruct.BaseAddress = 0x30000000;
240049d2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
240049d6:	4b28      	ldr	r3, [pc, #160]	; (24004a78 <MPU_Conf+0xb4>)


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240049d8:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240049da:	f8ad 4000 	strh.w	r4, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
240049de:	9603      	str	r6, [sp, #12]


	  //SDRAM as strongly ordered to avoid speculative fetches that might stall the external memory if interrupted
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	  MPU_InitStruct.BaseAddress = 0xc0000000;
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240049e0:	4d26      	ldr	r5, [pc, #152]	; (24004a7c <MPU_Conf+0xb8>)
	  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
240049e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240049e6:	f001 f8ff 	bl	24005be8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x38000000;
240049ea:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240049ee:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
240049f0:	9603      	str	r6, [sp, #12]
	  MPU_InitStruct.BaseAddress = 0x38000000;
240049f2:	9301      	str	r3, [sp, #4]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240049f4:	f240 1301 	movw	r3, #257	; 0x101
240049f8:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
240049fc:	4b20      	ldr	r3, [pc, #128]	; (24004a80 <MPU_Conf+0xbc>)
240049fe:	9302      	str	r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a00:	f001 f8f2 	bl	24005be8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x38800000;
24004a04:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a08:	f240 2301 	movw	r3, #513	; 0x201
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a0c:	4668      	mov	r0, sp
	  MPU_InitStruct.BaseAddress = 0x38800000;
24004a0e:	9201      	str	r2, [sp, #4]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a10:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24004a14:	f44f 7380 	mov.w	r3, #256	; 0x100
24004a18:	4a1a      	ldr	r2, [pc, #104]	; (24004a84 <MPU_Conf+0xc0>)
24004a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a1e:	f001 f8e3 	bl	24005be8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x24000000;
24004a22:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a26:	f240 3301 	movw	r3, #769	; 0x301
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a2a:	4668      	mov	r0, sp
	  MPU_InitStruct.BaseAddress = 0x24000000;
24004a2c:	9201      	str	r2, [sp, #4]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a2e:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
24004a32:	4a15      	ldr	r2, [pc, #84]	; (24004a88 <MPU_Conf+0xc4>)
24004a34:	4b15      	ldr	r3, [pc, #84]	; (24004a8c <MPU_Conf+0xc8>)
24004a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a3a:	f001 f8d5 	bl	24005be8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0xc0000000;
24004a3e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a42:	f240 4301 	movw	r3, #1025	; 0x401
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

	  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
	  MPU_InitStruct.SubRegionDisable = 0x00;
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a46:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24004a48:	9403      	str	r4, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a4a:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0xc0000000;
24004a4e:	e9cd 2501 	strd	r2, r5, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a52:	f001 f8c9 	bl	24005be8 <HAL_MPU_ConfigRegion>


	  //QSPI as strongly ordered to avoid speculative fetches that might stall the external memory if interrupted
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
	  MPU_InitStruct.BaseAddress = 0x90040000;
24004a56:	4a0e      	ldr	r2, [pc, #56]	; (24004a90 <MPU_Conf+0xcc>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a58:	f240 5301 	movw	r3, #1281	; 0x501
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
	  MPU_InitStruct.SubRegionDisable = 0x00;
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a5c:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24004a5e:	9403      	str	r4, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24004a60:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24004a64:	e9cd 2501 	strd	r2, r5, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24004a68:	f001 f8be 	bl	24005be8 <HAL_MPU_ConfigRegion>

	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
24004a6c:	2004      	movs	r0, #4
24004a6e:	f001 f8ab 	bl	24005bc8 <HAL_MPU_Enable>
}
24004a72:	b004      	add	sp, #16
24004a74:	bd70      	pop	{r4, r5, r6, pc}
24004a76:	bf00      	nop
24004a78:	03000010 	.word	0x03000010
24004a7c:	03000019 	.word	0x03000019
24004a80:	0300000f 	.word	0x0300000f
24004a84:	0300000b 	.word	0x0300000b
24004a88:	03010012 	.word	0x03010012
24004a8c:	01010000 	.word	0x01010000
24004a90:	90040000 	.word	0x90040000

24004a94 <main>:
{
24004a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24004a98:	ed2d 8b02 	vpush	{d8}
24004a9c:	b08d      	sub	sp, #52	; 0x34
  MPU_Conf();
24004a9e:	f7ff ff91 	bl	240049c4 <MPU_Conf>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24004aa2:	48a9      	ldr	r0, [pc, #676]	; (24004d48 <main+0x2b4>)
24004aa4:	6943      	ldr	r3, [r0, #20]
24004aa6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
24004aaa:	d124      	bne.n	24004af6 <main+0x62>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24004aac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24004ab0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24004ab4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004ab8:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24004abc:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24004ac0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24004ac4:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004ac6:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24004aca:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004acc:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24004ad0:	3b01      	subs	r3, #1
24004ad2:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24004ad4:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
24004ad8:	d1f8      	bne.n	24004acc <main+0x38>
    } while(sets-- != 0U);
24004ada:	3c20      	subs	r4, #32
24004adc:	f114 0f20 	cmn.w	r4, #32
24004ae0:	d1f1      	bne.n	24004ac6 <main+0x32>
24004ae2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24004ae6:	6943      	ldr	r3, [r0, #20]
24004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004aec:	6143      	str	r3, [r0, #20]
24004aee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004af2:	f3bf 8f6f 	isb	sy
  HAL_Init();
24004af6:	f000 ff79 	bl	240059ec <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
24004afa:	b662      	cpsie	i
  SystemClock_Config();
24004afc:	f7ff fba0 	bl	24004240 <SystemClock_Config>
  PeriphCommonClock_Config();
24004b00:	f7ff fc36 	bl	24004370 <PeriphCommonClock_Config>
  HAL_Delay(500);
24004b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24004b08:	f000 ffb2 	bl	24005a70 <HAL_Delay>
  MX_GPIO_Init();
24004b0c:	f7ff f8cc 	bl	24003ca8 <MX_GPIO_Init>
  MX_DMA_Init();
24004b10:	f7fe ffdc 	bl	24003acc <MX_DMA_Init>
  MX_BDMA_Init();
24004b14:	f7fe ff16 	bl	24003944 <MX_BDMA_Init>
  MX_I2C2_Init();
24004b18:	f7ff fa1a 	bl	24003f50 <MX_I2C2_Init>
  MX_QUADSPI_Init();
24004b1c:	f000 fa42 	bl	24004fa4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
24004b20:	f000 fb14 	bl	2400514c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24004b24:	f000 fc2a 	bl	2400537c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24004b28:	f000 fc9e 	bl	24005468 <MX_SPI1_Init>
  MX_I2C1_Init();
24004b2c:	f7ff f9da 	bl	24003ee4 <MX_I2C1_Init>
  MX_FMC_Init();
24004b30:	f7ff f80a 	bl	24003b48 <MX_FMC_Init>
  MX_FATFS_Init();
24004b34:	f008 feb2 	bl	2400d89c <MX_FATFS_Init>
  MX_SPI6_Init();
24004b38:	f000 fcc2 	bl	240054c0 <MX_SPI6_Init>
  MX_RNG_Init();
24004b3c:	f000 fac6 	bl	240050cc <MX_RNG_Init>
   PWR->CR1 |= PWR_CR1_DBP;
24004b40:	4a82      	ldr	r2, [pc, #520]	; (24004d4c <main+0x2b8>)
24004b42:	6813      	ldr	r3, [r2, #0]
24004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24004b48:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24004b4a:	6813      	ldr	r3, [r2, #0]
24004b4c:	05d9      	lsls	r1, r3, #23
24004b4e:	d5fc      	bpl.n	24004b4a <main+0xb6>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24004b50:	4b7f      	ldr	r3, [pc, #508]	; (24004d50 <main+0x2bc>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24004b52:	2200      	movs	r2, #0
24004b54:	2180      	movs	r1, #128	; 0x80
24004b56:	487f      	ldr	r0, [pc, #508]	; (24004d54 <main+0x2c0>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24004b58:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
24004b5c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
24004b60:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24004b64:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
24004b68:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
24004b6c:	9401      	str	r4, [sp, #4]
24004b6e:	9c01      	ldr	r4, [sp, #4]
   __HAL_RCC_D2SRAM1_CLK_ENABLE();
24004b70:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
24004b74:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
24004b78:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
24004b7c:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
24004b80:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
24004b84:	9402      	str	r4, [sp, #8]
24004b86:	9c02      	ldr	r4, [sp, #8]
   __HAL_RCC_D2SRAM2_CLK_ENABLE();
24004b88:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
24004b8c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
24004b90:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
24004b94:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
24004b98:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
24004b9c:	9403      	str	r4, [sp, #12]
24004b9e:	9c03      	ldr	r4, [sp, #12]
   __HAL_RCC_D2SRAM3_CLK_ENABLE();
24004ba0:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
24004ba4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
24004ba8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
24004bac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24004bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24004bb4:	9304      	str	r3, [sp, #16]
24004bb6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24004bb8:	f002 fc6a 	bl	24007490 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
24004bbc:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24004bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24004bc4:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24004bc8:	4a5f      	ldr	r2, [pc, #380]	; (24004d48 <main+0x2b4>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
24004bca:	4963      	ldr	r1, [pc, #396]	; (24004d58 <main+0x2c4>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24004bcc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24004bd0:	f8d1 0fb4 	ldr.w	r0, [r1, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24004bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24004bd8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24004bdc:	07c3      	lsls	r3, r0, #31
24004bde:	d502      	bpl.n	24004be6 <main+0x152>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
24004be0:	4b5e      	ldr	r3, [pc, #376]	; (24004d5c <main+0x2c8>)
24004be2:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0
	  buffer[i] = 0;
24004be6:	4b5e      	ldr	r3, [pc, #376]	; (24004d60 <main+0x2cc>)
  DWT->CYCCNT = 0;
24004be8:	2100      	movs	r1, #0
24004bea:	485b      	ldr	r0, [pc, #364]	; (24004d58 <main+0x2c4>)
	  buffer[i] = 0;
24004bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  DWT->CTRL = 0x40000001;
24004bf0:	4c5c      	ldr	r4, [pc, #368]	; (24004d64 <main+0x2d0>)
  DWT->CYCCNT = 0;
24004bf2:	6041      	str	r1, [r0, #4]
  DWT->CTRL = 0x40000001;
24004bf4:	6004      	str	r4, [r0, #0]
	  buffer[i] = 0;
24004bf6:	4618      	mov	r0, r3
24004bf8:	f013 fe82 	bl	24018900 <memset>
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24004bfc:	f64e 74ef 	movw	r4, #61423	; 0xefef
	  buffer[i] = 0;
24004c00:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24004c02:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[15+112] = NUM_PARAMS;
24004c06:	219b      	movs	r1, #155	; 0x9b
  buffer[NUM_PARAMS*2+19+112] = 1;
24004c08:	2001      	movs	r0, #1
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24004c0a:	f8a3 21bf 	strh.w	r2, [r3, #447]	; 0x1bf
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004c0e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
24004c12:	f883 107f 	strb.w	r1, [r3, #127]	; 0x7f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004c16:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24004c1a:	f8a3 41b6 	strh.w	r4, [r3, #438]	; 0x1b6
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+19+112] = 1;
24004c22:	f883 01b9 	strb.w	r0, [r3, #441]	; 0x1b9
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24004c26:	ed9f 0a50 	vldr	s0, [pc, #320]	; 24004d68 <main+0x2d4>
24004c2a:	4850      	ldr	r0, [pc, #320]	; (24004d6c <main+0x2d8>)
24004c2c:	f00e fd9c 	bl	24013768 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24004c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
24004c34:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 24004d70 <main+0x2dc>
24004c38:	eddf 0a4e 	vldr	s1, [pc, #312]	; 24004d74 <main+0x2e0>
24004c3c:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 24004d78 <main+0x2e4>
24004c40:	484e      	ldr	r0, [pc, #312]	; (24004d7c <main+0x2e8>)
24004c42:	f00e fd91 	bl	24013768 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24004c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
24004c4a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24004c4e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 24004d78 <main+0x2e4>
24004c52:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24004c56:	484a      	ldr	r0, [pc, #296]	; (24004d80 <main+0x2ec>)
24004c58:	f00e fd86 	bl	24013768 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
24004c5c:	4c49      	ldr	r4, [pc, #292]	; (24004d84 <main+0x2f0>)
  getPresetNamesFromSDCard();
24004c5e:	f7ff fbf9 	bl	24004454 <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
24004c62:	4b49      	ldr	r3, [pc, #292]	; (24004d88 <main+0x2f4>)
24004c64:	7818      	ldrb	r0, [r3, #0]
24004c66:	f7ff fa4f 	bl	24004108 <checkForSDCardPreset>
24004c6a:	b2c3      	uxtb	r3, r0
24004c6c:	7023      	strb	r3, [r4, #0]
  SDRAM_init();
24004c6e:	f7ff fe5f 	bl	24004930 <SDRAM_init>
  codec_init(&hi2c2);
24004c72:	4846      	ldr	r0, [pc, #280]	; (24004d8c <main+0x2f8>)
24004c74:	f7fe fe82 	bl	2400397c <codec_init>
  audioInit();
24004c78:	f7fb fcf2 	bl	24000660 <audioInit>
  	if (foundOne == 0)
24004c7c:	7823      	ldrb	r3, [r4, #0]
24004c7e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24004c82:	2b00      	cmp	r3, #0
24004c84:	f040 8105 	bne.w	24004e92 <main+0x3fe>
	  parsePreset((NUM_PARAMS*2)+27+(8*14), 0); //default preset binary
24004c88:	f240 10c1 	movw	r0, #449	; 0x1c1
24004c8c:	4e40      	ldr	r6, [pc, #256]	; (24004d90 <main+0x2fc>)
24004c8e:	f02f f873 	bl	24033d78 <__parsePreset_veneer>
    HAL_SPI_Receive_DMA(&hspi6, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24004c92:	2234      	movs	r2, #52	; 0x34
24004c94:	493f      	ldr	r1, [pc, #252]	; (24004d94 <main+0x300>)
24004c96:	4840      	ldr	r0, [pc, #256]	; (24004d98 <main+0x304>)
24004c98:	f006 ffae 	bl	2400bbf8 <HAL_SPI_Receive_DMA>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24004c9c:	4a3f      	ldr	r2, [pc, #252]	; (24004d9c <main+0x308>)
24004c9e:	2340      	movs	r3, #64	; 0x40
24004ca0:	483f      	ldr	r0, [pc, #252]	; (24004da0 <main+0x30c>)
	  if (rand > TWO_TO_31)
24004ca2:	eddf 8a40 	vldr	s17, [pc, #256]	; 24004da4 <main+0x310>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24004ca6:	18d1      	adds	r1, r2, r3
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24004ca8:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 24004da8 <main+0x314>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24004cac:	f007 f86e 	bl	2400bd8c <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24004cb0:	493e      	ldr	r1, [pc, #248]	; (24004dac <main+0x318>)
24004cb2:	483f      	ldr	r0, [pc, #252]	; (24004db0 <main+0x31c>)
24004cb4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 24004dc4 <main+0x330>
24004cb8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 24004dc8 <main+0x334>
24004cbc:	4d3d      	ldr	r5, [pc, #244]	; (24004db4 <main+0x320>)
24004cbe:	f8df 810c 	ldr.w	r8, [pc, #268]	; 24004dcc <main+0x338>
24004cc2:	4c3d      	ldr	r4, [pc, #244]	; (24004db8 <main+0x324>)
24004cc4:	4f3d      	ldr	r7, [pc, #244]	; (24004dbc <main+0x328>)
24004cc6:	f7fc fd21 	bl	2400170c <audioStart>
24004cca:	e02c      	b.n	24004d26 <main+0x292>
	  if (presetWaitingToParse > 0)
24004ccc:	6830      	ldr	r0, [r6, #0]
24004cce:	2800      	cmp	r0, #0
24004cd0:	d134      	bne.n	24004d3c <main+0x2a8>
	  else if (presetWaitingToWrite > 0)
24004cd2:	f8da b000 	ldr.w	fp, [sl]
24004cd6:	f1bb 0f00 	cmp.w	fp, #0
24004cda:	d179      	bne.n	24004dd0 <main+0x33c>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24004cdc:	a909      	add	r1, sp, #36	; 0x24
24004cde:	4838      	ldr	r0, [pc, #224]	; (24004dc0 <main+0x32c>)
24004ce0:	f005 f834 	bl	24009d4c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24004ce4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
24004ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
24004cec:	eef4 7ae8 	vcmpe.f32	s15, s17
24004cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24004cf4:	dd0c      	ble.n	24004d10 <main+0x27c>
		  myTestInt++;
24004cf6:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
24004cfa:	2180      	movs	r1, #128	; 0x80
24004cfc:	4815      	ldr	r0, [pc, #84]	; (24004d54 <main+0x2c0>)
		  myTestInt++;
24004cfe:	3301      	adds	r3, #1
24004d00:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
24004d04:	f002 fbc8 	bl	24007498 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
24004d08:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
24004d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24004d10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24004d14:	7823      	ldrb	r3, [r4, #0]
24004d16:	1c5a      	adds	r2, r3, #1
24004d18:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24004d1c:	eea7 7a88 	vfma.f32	s14, s15, s16
24004d20:	7022      	strb	r2, [r4, #0]
24004d22:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
24004d26:	f8d9 3000 	ldr.w	r3, [r9]
24004d2a:	2b00      	cmp	r3, #0
24004d2c:	d0ce      	beq.n	24004ccc <main+0x238>
		  checkForSDCardPreset(presetNumberToLoad);
24004d2e:	4b16      	ldr	r3, [pc, #88]	; (24004d88 <main+0x2f4>)
24004d30:	7818      	ldrb	r0, [r3, #0]
24004d32:	f7ff f9e9 	bl	24004108 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
24004d36:	6830      	ldr	r0, [r6, #0]
24004d38:	2800      	cmp	r0, #0
24004d3a:	d0ca      	beq.n	24004cd2 <main+0x23e>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24004d3c:	4b12      	ldr	r3, [pc, #72]	; (24004d88 <main+0x2f4>)
24004d3e:	7819      	ldrb	r1, [r3, #0]
24004d40:	f02f f81a 	bl	24033d78 <__parsePreset_veneer>
24004d44:	e7ca      	b.n	24004cdc <main+0x248>
24004d46:	bf00      	nop
24004d48:	e000ed00 	.word	0xe000ed00
24004d4c:	58024800 	.word	0x58024800
24004d50:	58024400 	.word	0x58024400
24004d54:	58020800 	.word	0x58020800
24004d58:	e0001000 	.word	0xe0001000
24004d5c:	c5acce55 	.word	0xc5acce55
24004d60:	20017b48 	.word	0x20017b48
24004d64:	40000001 	.word	0x40000001
24004d68:	3c23d70a 	.word	0x3c23d70a
24004d6c:	2001cbdc 	.word	0x2001cbdc
24004d70:	457a0000 	.word	0x457a0000
24004d74:	469c4000 	.word	0x469c4000
24004d78:	00000000 	.word	0x00000000
24004d7c:	20018bdc 	.word	0x20018bdc
24004d80:	30038a20 	.word	0x30038a20
24004d84:	2001ad04 	.word	0x2001ad04
24004d88:	2000074c 	.word	0x2000074c
24004d8c:	20017af0 	.word	0x20017af0
24004d90:	2001c7d4 	.word	0x2001c7d4
24004d94:	38000000 	.word	0x38000000
24004d98:	2001f0e8 	.word	0x2001f0e8
24004d9c:	30014040 	.word	0x30014040
24004da0:	2001f048 	.word	0x2001f048
24004da4:	4f000000 	.word	0x4f000000
24004da8:	3000000d 	.word	0x3000000d
24004dac:	2001ed34 	.word	0x2001ed34
24004db0:	2001edcc 	.word	0x2001edcc
24004db4:	30000000 	.word	0x30000000
24004db8:	20018b4c 	.word	0x20018b4c
24004dbc:	2001c7dc 	.word	0x2001c7dc
24004dc0:	2001ec2c 	.word	0x2001ec2c
24004dc4:	2001c7d0 	.word	0x2001c7d0
24004dc8:	2001c7d8 	.word	0x2001c7d8
24004dcc:	2001b6c4 	.word	0x2001b6c4
  __ASM volatile ("cpsid i" : : : "memory");
24004dd0:	b672      	cpsid	i
  __IO uint8_t status = SD_PRESENT;
24004dd2:	2301      	movs	r3, #1
		 audioOutBuffer[i] = 0;
24004dd4:	e9c5 0000 	strd	r0, r0, [r5]
24004dd8:	e9c5 0002 	strd	r0, r0, [r5, #8]
24004ddc:	e9c5 0004 	strd	r0, r0, [r5, #16]
24004de0:	e9c5 0006 	strd	r0, r0, [r5, #24]
  __IO uint8_t status = SD_PRESENT;
24004de4:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() == 0x0)
24004de8:	f008 fdc0 	bl	2400d96c <BSP_PlatformIsDetected>
24004dec:	b908      	cbnz	r0, 24004df2 <main+0x35e>
    status = SD_NOT_PRESENT;
24004dee:	f88d 0003 	strb.w	r0, [sp, #3]
  return status;
24004df2:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
24004df6:	b323      	cbz	r3, 24004e42 <main+0x3ae>
				diskBusy = 1;
24004df8:	2301      	movs	r3, #1
24004dfa:	4a29      	ldr	r2, [pc, #164]	; (24004ea0 <main+0x40c>)
24004dfc:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24004dfe:	4b29      	ldr	r3, [pc, #164]	; (24004ea4 <main+0x410>)
24004e00:	7818      	ldrb	r0, [r3, #0]
24004e02:	2863      	cmp	r0, #99	; 0x63
24004e04:	d901      	bls.n	24004e0a <main+0x376>
			        presetNumberToSave = 99;
24004e06:	2063      	movs	r0, #99	; 0x63
24004e08:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
24004e0a:	220a      	movs	r2, #10
24004e0c:	a906      	add	r1, sp, #24
24004e0e:	f013 fd4d 	bl	240188ac <itoa>
				int len = ((strlen(charBuf)));
24004e12:	a806      	add	r0, sp, #24
24004e14:	f7fb fa60 	bl	240002d8 <strlen>
				if (len == 1)
24004e18:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24004e1a:	4602      	mov	r2, r0
				if (len == 1)
24004e1c:	d018      	beq.n	24004e50 <main+0x3bc>
					strcat(charBuf, ".ebp");
24004e1e:	4922      	ldr	r1, [pc, #136]	; (24004ea8 <main+0x414>)
24004e20:	ab06      	add	r3, sp, #24
24004e22:	6808      	ldr	r0, [r1, #0]
24004e24:	7909      	ldrb	r1, [r1, #4]
24004e26:	5098      	str	r0, [r3, r2]
24004e28:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
24004e2a:	a809      	add	r0, sp, #36	; 0x24
24004e2c:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24004e2e:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
24004e30:	a906      	add	r1, sp, #24
24004e32:	f013 fd3d 	bl	240188b0 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24004e36:	220a      	movs	r2, #10
24004e38:	a909      	add	r1, sp, #36	; 0x24
24004e3a:	481c      	ldr	r0, [pc, #112]	; (24004eac <main+0x418>)
24004e3c:	f00b f88c 	bl	2400ff58 <f_open>
24004e40:	b1e8      	cbz	r0, 24004e7e <main+0x3ea>
	presetWaitingToWrite = 0;
24004e42:	2300      	movs	r3, #0
	diskBusy = 0;
24004e44:	4a16      	ldr	r2, [pc, #88]	; (24004ea0 <main+0x40c>)
	presetWaitingToWrite = 0;
24004e46:	f8ca 3000 	str.w	r3, [sl]
	diskBusy = 0;
24004e4a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24004e4c:	b662      	cpsie	i
}
24004e4e:	e745      	b.n	24004cdc <main+0x248>
					finalString[2] = charBuf[1];
24004e50:	f89d 3019 	ldrb.w	r3, [sp, #25]
					strcat(finalString, ".ebp");
24004e54:	a809      	add	r0, sp, #36	; 0x24
					finalString[2] = charBuf[1];
24004e56:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
					finalString[1] = charBuf[0];
24004e5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
24004e5e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
					finalString[0] = '0';
24004e62:	2330      	movs	r3, #48	; 0x30
24004e64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
					strcat(finalString, ".ebp");
24004e68:	f7fb fa36 	bl	240002d8 <strlen>
24004e6c:	4a0e      	ldr	r2, [pc, #56]	; (24004ea8 <main+0x414>)
24004e6e:	4603      	mov	r3, r0
24004e70:	a909      	add	r1, sp, #36	; 0x24
24004e72:	6810      	ldr	r0, [r2, #0]
24004e74:	7912      	ldrb	r2, [r2, #4]
24004e76:	50c8      	str	r0, [r1, r3]
24004e78:	440b      	add	r3, r1
24004e7a:	711a      	strb	r2, [r3, #4]
24004e7c:	e7db      	b.n	24004e36 <main+0x3a2>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24004e7e:	465a      	mov	r2, fp
24004e80:	ab05      	add	r3, sp, #20
24004e82:	490b      	ldr	r1, [pc, #44]	; (24004eb0 <main+0x41c>)
24004e84:	4809      	ldr	r0, [pc, #36]	; (24004eac <main+0x418>)
24004e86:	f00b fb03 	bl	24010490 <f_write>
					f_close(&SDFile);
24004e8a:	4808      	ldr	r0, [pc, #32]	; (24004eac <main+0x418>)
24004e8c:	f00b fc3c 	bl	24010708 <f_close>
24004e90:	e7d7      	b.n	24004e42 <main+0x3ae>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
24004e92:	4e08      	ldr	r6, [pc, #32]	; (24004eb4 <main+0x420>)
24004e94:	4b08      	ldr	r3, [pc, #32]	; (24004eb8 <main+0x424>)
24004e96:	6830      	ldr	r0, [r6, #0]
24004e98:	7819      	ldrb	r1, [r3, #0]
24004e9a:	f02e ff6d 	bl	24033d78 <__parsePreset_veneer>
24004e9e:	e6f8      	b.n	24004c92 <main+0x1fe>
24004ea0:	20018b88 	.word	0x20018b88
24004ea4:	2001c7ce 	.word	0x2001c7ce
24004ea8:	2401ae78 	.word	0x2401ae78
24004eac:	2001f3bc 	.word	0x2001f3bc
24004eb0:	20017b48 	.word	0x20017b48
24004eb4:	2001c7d4 	.word	0x2001c7d4
24004eb8:	2000074c 	.word	0x2000074c

24004ebc <HAL_GPIO_EXTI_Callback>:

			  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, 32);
    	  }
    }
    */
    if(GPIO_Pin == GPIO_PIN_3) // If The INT Source Is EXTI Line3
24004ebc:	2808      	cmp	r0, #8
24004ebe:	d000      	beq.n	24004ec2 <HAL_GPIO_EXTI_Callback+0x6>
24004ec0:	4770      	bx	lr
    {
    	  if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1) //button is pressed, wait
24004ec2:	4601      	mov	r1, r0
24004ec4:	4833      	ldr	r0, [pc, #204]	; (24004f94 <HAL_GPIO_EXTI_Callback+0xd8>)
{
24004ec6:	b510      	push	{r4, lr}
24004ec8:	b084      	sub	sp, #16
    	  if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1) //button is pressed, wait
24004eca:	f002 fadb 	bl	24007484 <HAL_GPIO_ReadPin>
24004ece:	2801      	cmp	r0, #1
24004ed0:	d005      	beq.n	24004ede <HAL_GPIO_EXTI_Callback+0x22>
    		  //*(__IO uint32_t*)(0x38800000+36) = 12345678;
    		  //SCB_CleanDCache_by_Addr (*(__IO uint32_t*)0x38800000+36, 1); //maybe needs different
    	  }
    	  else //button went up
    	  {
    		  if (buttonPressed == 1)
24004ed2:	4c31      	ldr	r4, [pc, #196]	; (24004f98 <HAL_GPIO_EXTI_Callback+0xdc>)
24004ed4:	7823      	ldrb	r3, [r4, #0]
24004ed6:	2b01      	cmp	r3, #1
24004ed8:	d004      	beq.n	24004ee4 <HAL_GPIO_EXTI_Callback+0x28>


    		  }
    	  }
    }
}
24004eda:	b004      	add	sp, #16
24004edc:	bd10      	pop	{r4, pc}
    		  buttonPressed = 1;
24004ede:	4b2e      	ldr	r3, [pc, #184]	; (24004f98 <HAL_GPIO_EXTI_Callback+0xdc>)
24004ee0:	7018      	strb	r0, [r3, #0]
24004ee2:	e7fa      	b.n	24004eda <HAL_GPIO_EXTI_Callback+0x1e>
    				  bootloaderFlag[i] = 231;
24004ee4:	4b2d      	ldr	r3, [pc, #180]	; (24004f9c <HAL_GPIO_EXTI_Callback+0xe0>)
24004ee6:	2220      	movs	r2, #32
24004ee8:	21e7      	movs	r1, #231	; 0xe7
24004eea:	4618      	mov	r0, r3
24004eec:	f013 fd08 	bl	24018900 <memset>
	if(addr >= 0x24000000 && addr < 0x24080000){
24004ef0:	f100 425c 	add.w	r2, r0, #3690987520	; 0xdc000000
    				  bootloaderFlag[i] = 231;
24004ef4:	4603      	mov	r3, r0
	if(addr >= 0x24000000 && addr < 0x24080000){
24004ef6:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
24004efa:	d229      	bcs.n	24004f50 <HAL_GPIO_EXTI_Callback+0x94>
			temp = *flush_ptr;
24004efc:	e9d0 0100 	ldrd	r0, r1, [r0]
24004f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24004f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24004f08:	e9c3 0100 	strd	r0, r1, [r3]
			temp = *flush_ptr;
24004f0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
24004f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24004f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24004f18:	e9c3 0102 	strd	r0, r1, [r3, #8]
			temp = *flush_ptr;
24004f1c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
24004f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24004f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24004f28:	e9c3 0104 	strd	r0, r1, [r3, #16]
			temp = *flush_ptr;
24004f2c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
24004f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24004f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24004f38:	e9c3 0106 	strd	r0, r1, [r3, #24]
				  buttonPressed = 0;
24004f3c:	2300      	movs	r3, #0
				  HAL_Delay(100);
24004f3e:	2064      	movs	r0, #100	; 0x64
				  buttonPressed = 0;
24004f40:	7023      	strb	r3, [r4, #0]
				  HAL_Delay(100);
24004f42:	f000 fd95 	bl	24005a70 <HAL_Delay>
}
24004f46:	b004      	add	sp, #16
24004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				  HAL_NVIC_SystemReset();
24004f4c:	f000 be06 	b.w	24005b5c <HAL_NVIC_SystemReset>
			temp = *flush_ptr;
24004f50:	6802      	ldr	r2, [r0, #0]
24004f52:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f54:	9a01      	ldr	r2, [sp, #4]
24004f56:	6002      	str	r2, [r0, #0]
			temp = *flush_ptr;
24004f58:	6842      	ldr	r2, [r0, #4]
24004f5a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f5c:	9a01      	ldr	r2, [sp, #4]
24004f5e:	6042      	str	r2, [r0, #4]
			temp = *flush_ptr;
24004f60:	6882      	ldr	r2, [r0, #8]
24004f62:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f64:	9a01      	ldr	r2, [sp, #4]
24004f66:	6082      	str	r2, [r0, #8]
			temp = *flush_ptr;
24004f68:	68c2      	ldr	r2, [r0, #12]
24004f6a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f6c:	9a01      	ldr	r2, [sp, #4]
24004f6e:	60c2      	str	r2, [r0, #12]
			temp = *flush_ptr;
24004f70:	6902      	ldr	r2, [r0, #16]
24004f72:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f74:	9a01      	ldr	r2, [sp, #4]
24004f76:	6102      	str	r2, [r0, #16]
			temp = *flush_ptr;
24004f78:	6942      	ldr	r2, [r0, #20]
24004f7a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f7c:	9a01      	ldr	r2, [sp, #4]
24004f7e:	6142      	str	r2, [r0, #20]
			temp = *flush_ptr;
24004f80:	6982      	ldr	r2, [r0, #24]
24004f82:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f84:	9a01      	ldr	r2, [sp, #4]
24004f86:	6182      	str	r2, [r0, #24]
			temp = *flush_ptr;
24004f88:	69c2      	ldr	r2, [r0, #28]
24004f8a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24004f8c:	9a01      	ldr	r2, [sp, #4]
24004f8e:	61c2      	str	r2, [r0, #28]
		}while(flush_ptr != end_ptr);
24004f90:	e7d4      	b.n	24004f3c <HAL_GPIO_EXTI_Callback+0x80>
24004f92:	bf00      	nop
24004f94:	58021800 	.word	0x58021800
24004f98:	20018b4a 	.word	0x20018b4a
24004f9c:	38800000 	.word	0x38800000

24004fa0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24004fa0:	4770      	bx	lr
24004fa2:	bf00      	nop

24004fa4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24004fa4:	b510      	push	{r4, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24004fa6:	480b      	ldr	r0, [pc, #44]	; (24004fd4 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 1;
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24004fa8:	2300      	movs	r3, #0
  hqspi.Init.ClockPrescaler = 1;
24004faa:	2201      	movs	r2, #1
  hqspi.Instance = QUADSPI;
24004fac:	4c0a      	ldr	r4, [pc, #40]	; (24004fd8 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.FlashSize = 19;
24004fae:	2113      	movs	r1, #19
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24004fb0:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
24004fb2:	6082      	str	r2, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24004fb4:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
24004fb6:	e9c0 4200 	strd	r4, r2, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
24004fba:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
24004fbe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24004fc2:	f002 fda5 	bl	24007b10 <HAL_QSPI_Init>
24004fc6:	b900      	cbnz	r0, 24004fca <MX_QUADSPI_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
24004fc8:	bd10      	pop	{r4, pc}
24004fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24004fce:	f7ff bfe7 	b.w	24004fa0 <Error_Handler>
24004fd2:	bf00      	nop
24004fd4:	2001ebe0 	.word	0x2001ebe0
24004fd8:	52005000 	.word	0x52005000

24004fdc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24004fdc:	b570      	push	{r4, r5, r6, lr}
24004fde:	b0ba      	sub	sp, #232	; 0xe8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004fe0:	2100      	movs	r1, #0
{
24004fe2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004fe4:	22c0      	movs	r2, #192	; 0xc0
24004fe6:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004fe8:	9108      	str	r1, [sp, #32]
24004fea:	e9cd 1104 	strd	r1, r1, [sp, #16]
24004fee:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004ff2:	f013 fc85 	bl	24018900 <memset>
  if(qspiHandle->Instance==QUADSPI)
24004ff6:	4b31      	ldr	r3, [pc, #196]	; (240050bc <HAL_QSPI_MspInit+0xe0>)
24004ff8:	6822      	ldr	r2, [r4, #0]
24004ffa:	429a      	cmp	r2, r3
24004ffc:	d001      	beq.n	24005002 <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
24004ffe:	b03a      	add	sp, #232	; 0xe8
24005000:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24005002:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
24005006:	2500      	movs	r5, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
24005008:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400500a:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
2400500c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
24005010:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005012:	f003 fc95 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
24005016:	2800      	cmp	r0, #0
24005018:	d14d      	bne.n	240050b6 <HAL_QSPI_MspInit+0xda>
    __HAL_RCC_QSPI_CLK_ENABLE();
2400501a:	4b29      	ldr	r3, [pc, #164]	; (240050c0 <HAL_QSPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
2400501c:	2040      	movs	r0, #64	; 0x40
2400501e:	2102      	movs	r1, #2
24005020:	2400      	movs	r4, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
24005022:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24005026:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24005028:	260a      	movs	r6, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
2400502a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400502e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
24005032:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24005036:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
2400503a:	9201      	str	r2, [sp, #4]
2400503c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400503e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24005046:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400504a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400504e:	f002 0240 	and.w	r2, r2, #64	; 0x40
24005052:	9202      	str	r2, [sp, #8]
24005054:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24005056:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400505a:	f042 0220 	orr.w	r2, r2, #32
2400505e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24005062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24005066:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24005068:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_6;
2400506c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24005070:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24005072:	a904      	add	r1, sp, #16
24005074:	4813      	ldr	r0, [pc, #76]	; (240050c4 <HAL_QSPI_MspInit+0xe8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
24005076:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24005078:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400507c:	f002 f8c8 	bl	24007210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24005080:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
24005084:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24005086:	a904      	add	r1, sp, #16
24005088:	480f      	ldr	r0, [pc, #60]	; (240050c8 <HAL_QSPI_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
2400508a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2400508e:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24005090:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24005094:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24005096:	f002 f8bb 	bl	24007210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
2400509a:	f44f 7240 	mov.w	r2, #768	; 0x300
2400509e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240050a0:	a904      	add	r1, sp, #16
240050a2:	4809      	ldr	r0, [pc, #36]	; (240050c8 <HAL_QSPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
240050a4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
240050a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
240050aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240050ae:	f002 f8af 	bl	24007210 <HAL_GPIO_Init>
}
240050b2:	b03a      	add	sp, #232	; 0xe8
240050b4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
240050b6:	f7ff ff73 	bl	24004fa0 <Error_Handler>
240050ba:	e7ae      	b.n	2400501a <HAL_QSPI_MspInit+0x3e>
240050bc:	52005000 	.word	0x52005000
240050c0:	58024400 	.word	0x58024400
240050c4:	58021800 	.word	0x58021800
240050c8:	58021400 	.word	0x58021400

240050cc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
240050cc:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
240050ce:	4806      	ldr	r0, [pc, #24]	; (240050e8 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
240050d0:	2300      	movs	r3, #0
240050d2:	4a06      	ldr	r2, [pc, #24]	; (240050ec <MX_RNG_Init+0x20>)
240050d4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
240050d8:	f004 fdfa 	bl	24009cd0 <HAL_RNG_Init>
240050dc:	b900      	cbnz	r0, 240050e0 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
240050de:	bd08      	pop	{r3, pc}
240050e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240050e4:	f7ff bf5c 	b.w	24004fa0 <Error_Handler>
240050e8:	2001ec2c 	.word	0x2001ec2c
240050ec:	48021800 	.word	0x48021800

240050f0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
240050f0:	b510      	push	{r4, lr}
240050f2:	b0b2      	sub	sp, #200	; 0xc8
240050f4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240050f6:	22c0      	movs	r2, #192	; 0xc0
240050f8:	2100      	movs	r1, #0
240050fa:	a802      	add	r0, sp, #8
240050fc:	f013 fc00 	bl	24018900 <memset>
  if(rngHandle->Instance==RNG)
24005100:	4b10      	ldr	r3, [pc, #64]	; (24005144 <HAL_RNG_MspInit+0x54>)
24005102:	6822      	ldr	r2, [r4, #0]
24005104:	429a      	cmp	r2, r3
24005106:	d001      	beq.n	2400510c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24005108:	b032      	add	sp, #200	; 0xc8
2400510a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
2400510c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24005110:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005112:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24005114:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005118:	f003 fc12 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
2400511c:	b970      	cbnz	r0, 2400513c <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
2400511e:	4b0a      	ldr	r3, [pc, #40]	; (24005148 <HAL_RNG_MspInit+0x58>)
24005120:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24005124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24005128:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
2400512c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
24005134:	9301      	str	r3, [sp, #4]
24005136:	9b01      	ldr	r3, [sp, #4]
}
24005138:	b032      	add	sp, #200	; 0xc8
2400513a:	bd10      	pop	{r4, pc}
      Error_Handler();
2400513c:	f7ff ff30 	bl	24004fa0 <Error_Handler>
24005140:	e7ed      	b.n	2400511e <HAL_RNG_MspInit+0x2e>
24005142:	bf00      	nop
24005144:	48021800 	.word	0x48021800
24005148:	58024400 	.word	0x58024400

2400514c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
2400514c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
2400514e:	4817      	ldr	r0, [pc, #92]	; (240051ac <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24005150:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24005152:	4c17      	ldr	r4, [pc, #92]	; (240051b0 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24005154:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24005156:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24005158:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
2400515a:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
2400515c:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24005160:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24005162:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24005164:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24005168:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
2400516c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24005170:	461a      	mov	r2, r3
24005172:	f004 ffe9 	bl	2400a148 <HAL_SAI_InitProtocol>
24005176:	b990      	cbnz	r0, 2400519e <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24005178:	480e      	ldr	r0, [pc, #56]	; (240051b4 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400517a:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
2400517c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
2400517e:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24005180:	4c0d      	ldr	r4, [pc, #52]	; (240051b8 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24005182:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24005184:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24005186:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24005188:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
2400518a:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
2400518c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24005190:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24005192:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24005196:	f004 ffd7 	bl	2400a148 <HAL_SAI_InitProtocol>
2400519a:	b918      	cbnz	r0, 240051a4 <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
2400519c:	bd10      	pop	{r4, pc}
    Error_Handler();
2400519e:	f7ff feff 	bl	24004fa0 <Error_Handler>
240051a2:	e7e9      	b.n	24005178 <MX_SAI1_Init+0x2c>
}
240051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240051a8:	f7ff befa 	b.w	24004fa0 <Error_Handler>
240051ac:	2001ed34 	.word	0x2001ed34
240051b0:	40015804 	.word	0x40015804
240051b4:	2001edcc 	.word	0x2001edcc
240051b8:	40015824 	.word	0x40015824
240051bc:	00000000 	.word	0x00000000

240051c0 <HAL_SAI_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
240051c0:	4a65      	ldr	r2, [pc, #404]	; (24005358 <HAL_SAI_MspInit+0x198>)
240051c2:	6803      	ldr	r3, [r0, #0]
240051c4:	4293      	cmp	r3, r2
{
240051c6:	b530      	push	{r4, r5, lr}
240051c8:	4604      	mov	r4, r0
240051ca:	b08d      	sub	sp, #52	; 0x34
    if(saiHandle->Instance==SAI1_Block_A)
240051cc:	d004      	beq.n	240051d8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
240051ce:	4a63      	ldr	r2, [pc, #396]	; (2400535c <HAL_SAI_MspInit+0x19c>)
240051d0:	4293      	cmp	r3, r2
240051d2:	d04d      	beq.n	24005270 <HAL_SAI_MspInit+0xb0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
240051d4:	b00d      	add	sp, #52	; 0x34
240051d6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
240051d8:	4d61      	ldr	r5, [pc, #388]	; (24005360 <HAL_SAI_MspInit+0x1a0>)
240051da:	682a      	ldr	r2, [r5, #0]
240051dc:	2a00      	cmp	r2, #0
240051de:	d07f      	beq.n	240052e0 <HAL_SAI_MspInit+0x120>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240051e0:	2074      	movs	r0, #116	; 0x74
240051e2:	2102      	movs	r1, #2
    SAI1_client ++;
240051e4:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240051e6:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240051e8:	ed9f 7b59 	vldr	d7, [pc, #356]	; 24005350 <HAL_SAI_MspInit+0x190>
240051ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240051f0:	a906      	add	r1, sp, #24
240051f2:	485c      	ldr	r0, [pc, #368]	; (24005364 <HAL_SAI_MspInit+0x1a4>)
    SAI1_client ++;
240051f4:	602a      	str	r2, [r5, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240051f6:	930a      	str	r3, [sp, #40]	; 0x28
    hdma_sai1_a.Instance = DMA1_Stream1;
240051f8:	4d5b      	ldr	r5, [pc, #364]	; (24005368 <HAL_SAI_MspInit+0x1a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240051fa:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240051fe:	f002 f807 	bl	24007210 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24005202:	495a      	ldr	r1, [pc, #360]	; (2400536c <HAL_SAI_MspInit+0x1ac>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24005204:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24005206:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24005208:	4628      	mov	r0, r5
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
2400520a:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
2400520c:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24005210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24005214:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24005218:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
2400521c:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24005220:	f44f 7380 	mov.w	r3, #256	; 0x100
24005224:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24005228:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
2400522c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24005230:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24005232:	f000 fdf1 	bl	24005e18 <HAL_DMA_Init>
24005236:	2800      	cmp	r0, #0
24005238:	f040 8084 	bne.w	24005344 <HAL_SAI_MspInit+0x184>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
2400523c:	2006      	movs	r0, #6
2400523e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
24005242:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
24005246:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24005248:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
2400524c:	a902      	add	r1, sp, #8
2400524e:	4846      	ldr	r0, [pc, #280]	; (24005368 <HAL_SAI_MspInit+0x1a8>)
    pSyncConfig.SyncEnable = DISABLE;
24005250:	f8ad 2010 	strh.w	r2, [sp, #16]
    pSyncConfig.RequestNumber = 1;
24005254:	9305      	str	r3, [sp, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24005256:	f001 ff79 	bl	2400714c <HAL_DMAEx_ConfigMuxSync>
2400525a:	2800      	cmp	r0, #0
2400525c:	d16f      	bne.n	2400533e <HAL_SAI_MspInit+0x17e>
    if(saiHandle->Instance==SAI1_Block_B)
2400525e:	6823      	ldr	r3, [r4, #0]
24005260:	4a3e      	ldr	r2, [pc, #248]	; (2400535c <HAL_SAI_MspInit+0x19c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24005262:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(saiHandle->Instance==SAI1_Block_B)
24005266:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24005268:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
2400526a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
2400526e:	d1b1      	bne.n	240051d4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24005270:	4d3b      	ldr	r5, [pc, #236]	; (24005360 <HAL_SAI_MspInit+0x1a0>)
24005272:	682a      	ldr	r2, [r5, #0]
24005274:	2a00      	cmp	r2, #0
24005276:	d04c      	beq.n	24005312 <HAL_SAI_MspInit+0x152>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24005278:	2008      	movs	r0, #8
2400527a:	2102      	movs	r1, #2
    SAI1_client ++;
2400527c:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400527e:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24005280:	ed9f 7b33 	vldr	d7, [pc, #204]	; 24005350 <HAL_SAI_MspInit+0x190>
24005284:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24005288:	a906      	add	r1, sp, #24
2400528a:	4836      	ldr	r0, [pc, #216]	; (24005364 <HAL_SAI_MspInit+0x1a4>)
    SAI1_client ++;
2400528c:	602a      	str	r2, [r5, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400528e:	930a      	str	r3, [sp, #40]	; 0x28
    hdma_sai1_b.Instance = DMA1_Stream2;
24005290:	4d37      	ldr	r5, [pc, #220]	; (24005370 <HAL_SAI_MspInit+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24005292:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24005296:	f001 ffbb 	bl	24007210 <HAL_GPIO_Init>
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
2400529a:	2300      	movs	r3, #0
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
2400529c:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Instance = DMA1_Stream2;
2400529e:	4935      	ldr	r1, [pc, #212]	; (24005374 <HAL_SAI_MspInit+0x1b4>)
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
240052a0:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
240052a2:	4628      	mov	r0, r5
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
240052a4:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240052a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
240052aa:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240052ae:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240052b0:	612b      	str	r3, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240052b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240052b6:	60aa      	str	r2, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240052b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240052bc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
240052c0:	f44f 7280 	mov.w	r2, #256	; 0x100
240052c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
240052c8:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
240052cc:	f000 fda4 	bl	24005e18 <HAL_DMA_Init>
240052d0:	b9e0      	cbnz	r0, 2400530c <HAL_SAI_MspInit+0x14c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
240052d2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
240052d6:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
240052d8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
240052dc:	b00d      	add	sp, #52	; 0x34
240052de:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
240052e0:	4b25      	ldr	r3, [pc, #148]	; (24005378 <HAL_SAI_MspInit+0x1b8>)
    HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240052e2:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
240052e4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
240052e8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
240052ec:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240052f0:	2103      	movs	r1, #3
       __HAL_RCC_SAI1_CLK_ENABLE();
240052f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
240052f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240052fa:	9300      	str	r3, [sp, #0]
240052fc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240052fe:	f000 fbe1 	bl	24005ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
24005302:	2057      	movs	r0, #87	; 0x57
24005304:	f000 fc1c 	bl	24005b40 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
24005308:	682a      	ldr	r2, [r5, #0]
2400530a:	e769      	b.n	240051e0 <HAL_SAI_MspInit+0x20>
      Error_Handler();
2400530c:	f7ff fe48 	bl	24004fa0 <Error_Handler>
24005310:	e7df      	b.n	240052d2 <HAL_SAI_MspInit+0x112>
       __HAL_RCC_SAI1_CLK_ENABLE();
24005312:	4b19      	ldr	r3, [pc, #100]	; (24005378 <HAL_SAI_MspInit+0x1b8>)
      HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
24005314:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
24005316:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
2400531a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
2400531e:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
      HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
24005322:	2103      	movs	r1, #3
       __HAL_RCC_SAI1_CLK_ENABLE();
24005324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
24005328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2400532c:	9301      	str	r3, [sp, #4]
2400532e:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
24005330:	f000 fbc8 	bl	24005ac4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
24005334:	2057      	movs	r0, #87	; 0x57
24005336:	f000 fc03 	bl	24005b40 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
2400533a:	682a      	ldr	r2, [r5, #0]
2400533c:	e79c      	b.n	24005278 <HAL_SAI_MspInit+0xb8>
      Error_Handler();
2400533e:	f7ff fe2f 	bl	24004fa0 <Error_Handler>
24005342:	e78c      	b.n	2400525e <HAL_SAI_MspInit+0x9e>
      Error_Handler();
24005344:	f7ff fe2c 	bl	24004fa0 <Error_Handler>
24005348:	e778      	b.n	2400523c <HAL_SAI_MspInit+0x7c>
2400534a:	bf00      	nop
2400534c:	f3af 8000 	nop.w
24005350:	00000000 	.word	0x00000000
24005354:	00000002 	.word	0x00000002
24005358:	40015804 	.word	0x40015804
2400535c:	40015824 	.word	0x40015824
24005360:	2001ec40 	.word	0x2001ec40
24005364:	58021000 	.word	0x58021000
24005368:	2001ec44 	.word	0x2001ec44
2400536c:	40020028 	.word	0x40020028
24005370:	2001ecbc 	.word	0x2001ecbc
24005374:	40020040 	.word	0x40020040
24005378:	58024400 	.word	0x58024400

2400537c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
2400537c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
2400537e:	4b07      	ldr	r3, [pc, #28]	; (2400539c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24005380:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
24005382:	4c07      	ldr	r4, [pc, #28]	; (240053a0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24005384:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24005388:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
2400538a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400538e:	e9c3 2002 	strd	r2, r0, [r3, #8]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24005392:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd1.Init.ClockDiv = 25;
24005396:	e9c3 2104 	strd	r2, r1, [r3, #16]
}
2400539a:	4770      	bx	lr
2400539c:	2001ee64 	.word	0x2001ee64
240053a0:	52007000 	.word	0x52007000

240053a4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
240053a4:	4b2b      	ldr	r3, [pc, #172]	; (24005454 <HAL_SD_MspInit+0xb0>)
240053a6:	6802      	ldr	r2, [r0, #0]
{
240053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(sdHandle->Instance==SDMMC1)
240053aa:	429a      	cmp	r2, r3
{
240053ac:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240053ae:	f04f 0400 	mov.w	r4, #0
240053b2:	e9cd 4404 	strd	r4, r4, [sp, #16]
240053b6:	e9cd 4406 	strd	r4, r4, [sp, #24]
240053ba:	9408      	str	r4, [sp, #32]
  if(sdHandle->Instance==SDMMC1)
240053bc:	d001      	beq.n	240053c2 <HAL_SD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
240053be:	b00b      	add	sp, #44	; 0x2c
240053c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240053c2:	4b25      	ldr	r3, [pc, #148]	; (24005458 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240053c4:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240053c6:	2601      	movs	r6, #1
240053c8:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240053ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240053ce:	4823      	ldr	r0, [pc, #140]	; (2400545c <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240053d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240053d4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240053d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240053dc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
240053e0:	9201      	str	r2, [sp, #4]
240053e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
240053e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240053e8:	f042 0204 	orr.w	r2, r2, #4
240053ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240053f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240053f4:	f002 0204 	and.w	r2, r2, #4
240053f8:	9202      	str	r2, [sp, #8]
240053fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240053fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005400:	f042 0208 	orr.w	r2, r2, #8
24005404:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24005408:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
2400540c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24005410:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24005412:	f003 0308 	and.w	r3, r3, #8
24005416:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24005418:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
2400541a:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400541c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400541e:	e9cd 2304 	strd	r2, r3, [sp, #16]
24005422:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24005426:	f001 fef3 	bl	24007210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400542a:	2302      	movs	r3, #2
2400542c:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400542e:	a904      	add	r1, sp, #16
24005430:	480b      	ldr	r0, [pc, #44]	; (24005460 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24005432:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24005434:	e9cd 2304 	strd	r2, r3, [sp, #16]
24005438:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400543c:	f001 fee8 	bl	24007210 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 4, 0);
24005440:	4622      	mov	r2, r4
24005442:	2104      	movs	r1, #4
24005444:	2031      	movs	r0, #49	; 0x31
24005446:	f000 fb3d 	bl	24005ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
2400544a:	2031      	movs	r0, #49	; 0x31
2400544c:	f000 fb78 	bl	24005b40 <HAL_NVIC_EnableIRQ>
}
24005450:	b00b      	add	sp, #44	; 0x2c
24005452:	bdf0      	pop	{r4, r5, r6, r7, pc}
24005454:	52007000 	.word	0x52007000
24005458:	58024400 	.word	0x58024400
2400545c:	58020800 	.word	0x58020800
24005460:	58020c00 	.word	0x58020c00
24005464:	00000000 	.word	0x00000000

24005468 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24005468:	4813      	ldr	r0, [pc, #76]	; (240054b8 <MX_SPI1_Init+0x50>)
2400546a:	4a14      	ldr	r2, [pc, #80]	; (240054bc <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
2400546c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240054b0 <MX_SPI1_Init+0x48>
{
24005470:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
24005472:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
24005474:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24005476:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24005478:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400547a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
2400547c:	ed80 7b08 	vstr	d7, [r0, #32]
24005480:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
24005484:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24005488:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
2400548c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24005490:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24005494:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24005498:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
2400549c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
240054a0:	f006 fad6 	bl	2400ba50 <HAL_SPI_Init>
240054a4:	b900      	cbnz	r0, 240054a8 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
240054a6:	bd08      	pop	{r3, pc}
240054a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240054ac:	f7ff bd78 	b.w	24004fa0 <Error_Handler>
	...
240054b8:	2001f048 	.word	0x2001f048
240054bc:	40013000 	.word	0x40013000

240054c0 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
240054c0:	4815      	ldr	r0, [pc, #84]	; (24005518 <MX_SPI6_Init+0x58>)
240054c2:	4a16      	ldr	r2, [pc, #88]	; (2400551c <MX_SPI6_Init+0x5c>)
{
240054c4:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240054c6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 24005510 <MX_SPI6_Init+0x50>
  hspi6.Instance = SPI6;
240054ca:	6002      	str	r2, [r0, #0]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
240054cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240054d0:	2300      	movs	r3, #0
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
240054d2:	6082      	str	r2, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240054d4:	2207      	movs	r2, #7
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240054d6:	6043      	str	r3, [r0, #4]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
240054d8:	6103      	str	r3, [r0, #16]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240054da:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240054dc:	ed80 7b08 	vstr	d7, [r0, #32]
240054e0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
240054e4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240054e8:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240054ec:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240054f0:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240054f4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240054f8:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
240054fc:	f006 faa8 	bl	2400ba50 <HAL_SPI_Init>
24005500:	b900      	cbnz	r0, 24005504 <MX_SPI6_Init+0x44>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
24005502:	bd08      	pop	{r3, pc}
24005504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24005508:	f7ff bd4a 	b.w	24004fa0 <Error_Handler>
2400550c:	f3af 8000 	nop.w
	...
24005518:	2001f0e8 	.word	0x2001f0e8
2400551c:	58001400 	.word	0x58001400

24005520 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24005520:	b5f0      	push	{r4, r5, r6, r7, lr}
24005522:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24005524:	2100      	movs	r1, #0
{
24005526:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24005528:	22c0      	movs	r2, #192	; 0xc0
2400552a:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400552c:	910a      	str	r1, [sp, #40]	; 0x28
2400552e:	e9cd 1106 	strd	r1, r1, [sp, #24]
24005532:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24005536:	f013 f9e3 	bl	24018900 <memset>
  if(spiHandle->Instance==SPI1)
2400553a:	6823      	ldr	r3, [r4, #0]
2400553c:	4a7f      	ldr	r2, [pc, #508]	; (2400573c <HAL_SPI_MspInit+0x21c>)
2400553e:	4293      	cmp	r3, r2
24005540:	d005      	beq.n	2400554e <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
24005542:	4a7f      	ldr	r2, [pc, #508]	; (24005740 <HAL_SPI_MspInit+0x220>)
24005544:	4293      	cmp	r3, r2
24005546:	f000 8095 	beq.w	24005674 <HAL_SPI_MspInit+0x154>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
2400554a:	b03d      	add	sp, #244	; 0xf4
2400554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
2400554e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24005552:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005554:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24005556:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400555a:	f003 f9f1 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
2400555e:	2800      	cmp	r0, #0
24005560:	f040 80e2 	bne.w	24005728 <HAL_SPI_MspInit+0x208>
    __HAL_RCC_SPI1_CLK_ENABLE();
24005564:	4b77      	ldr	r3, [pc, #476]	; (24005744 <HAL_SPI_MspInit+0x224>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24005566:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24005568:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400556a:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
2400556c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24005570:	4875      	ldr	r0, [pc, #468]	; (24005748 <HAL_SPI_MspInit+0x228>)
    __HAL_RCC_SPI1_CLK_ENABLE();
24005572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
24005576:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
2400557a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
2400557e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
24005582:	9201      	str	r2, [sp, #4]
24005584:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24005586:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400558a:	f042 0202 	orr.w	r2, r2, #2
2400558e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24005592:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24005596:	f002 0202 	and.w	r2, r2, #2
2400559a:	9202      	str	r2, [sp, #8]
2400559c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400559e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240055a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240055a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240055aa:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
240055ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240055b0:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
240055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
240055b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240055b8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
240055ba:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240055bc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240055be:	e9cd 2306 	strd	r2, r3, [sp, #24]
240055c2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240055c6:	f001 fe23 	bl	24007210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240055ca:	f44f 6240 	mov.w	r2, #3072	; 0xc00
240055ce:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240055d0:	a906      	add	r1, sp, #24
240055d2:	485e      	ldr	r0, [pc, #376]	; (2400574c <HAL_SPI_MspInit+0x22c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240055d4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240055d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
240055da:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240055de:	f001 fe17 	bl	24007210 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
240055e2:	4e5b      	ldr	r6, [pc, #364]	; (24005750 <HAL_SPI_MspInit+0x230>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240055e4:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
240055e6:	495b      	ldr	r1, [pc, #364]	; (24005754 <HAL_SPI_MspInit+0x234>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240055e8:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240055ea:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240055ec:	6333      	str	r3, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240055ee:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240055f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240055f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240055fa:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240055fe:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24005600:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24005604:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24005606:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
2400560a:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400560e:	e9c6 1208 	strd	r1, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24005612:	f000 fc01 	bl	24005e18 <HAL_DMA_Init>
24005616:	2800      	cmp	r0, #0
24005618:	f040 8083 	bne.w	24005722 <HAL_SPI_MspInit+0x202>
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400561c:	4d4e      	ldr	r5, [pc, #312]	; (24005758 <HAL_SPI_MspInit+0x238>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
2400561e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
24005620:	494e      	ldr	r1, [pc, #312]	; (2400575c <HAL_SPI_MspInit+0x23c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24005622:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24005624:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24005626:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400562a:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400562c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
2400562e:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24005630:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24005634:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24005636:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400563a:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400563c:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
2400563e:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
24005640:	67e6      	str	r6, [r4, #124]	; 0x7c
24005642:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24005644:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24005646:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24005648:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
2400564a:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
2400564c:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
2400564e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24005650:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24005652:	626a      	str	r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24005654:	f000 fbe0 	bl	24005e18 <HAL_DMA_Init>
24005658:	2800      	cmp	r0, #0
2400565a:	d15f      	bne.n	2400571c <HAL_SPI_MspInit+0x1fc>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
2400565c:	2200      	movs	r2, #0
2400565e:	2102      	movs	r1, #2
24005660:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
24005662:	67a5      	str	r5, [r4, #120]	; 0x78
24005664:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
24005666:	f000 fa2d 	bl	24005ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
2400566a:	2023      	movs	r0, #35	; 0x23
2400566c:	f000 fa68 	bl	24005b40 <HAL_NVIC_EnableIRQ>
}
24005670:	b03d      	add	sp, #244	; 0xf4
24005672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24005674:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24005678:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400567a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
2400567c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24005680:	f003 f95e 	bl	24008940 <HAL_RCCEx_PeriphCLKConfig>
24005684:	2800      	cmp	r0, #0
24005686:	d152      	bne.n	2400572e <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI6_CLK_ENABLE();
24005688:	4b2e      	ldr	r3, [pc, #184]	; (24005744 <HAL_SPI_MspInit+0x224>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
2400568a:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400568c:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI6_CLK_ENABLE();
2400568e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24005692:	f042 0220 	orr.w	r2, r2, #32
24005696:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
2400569a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400569e:	f002 0220 	and.w	r2, r2, #32
240056a2:	9204      	str	r2, [sp, #16]
240056a4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240056a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240056aa:	f042 0201 	orr.w	r2, r2, #1
240056ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240056b2:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
240056b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240056b8:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
240056ba:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240056be:	4828      	ldr	r0, [pc, #160]	; (24005760 <HAL_SPI_MspInit+0x240>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
240056c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240056c2:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
240056c4:	9d05      	ldr	r5, [sp, #20]
    hdma_spi6_rx.Instance = BDMA_Channel0;
240056c6:	4d27      	ldr	r5, [pc, #156]	; (24005764 <HAL_SPI_MspInit+0x244>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240056c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
240056cc:	2200      	movs	r2, #0
240056ce:	2302      	movs	r3, #2
240056d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240056d4:	f001 fd9c 	bl	24007210 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240056d8:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
240056da:	4923      	ldr	r1, [pc, #140]	; (24005768 <HAL_SPI_MspInit+0x248>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240056dc:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240056de:	4628      	mov	r0, r5
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240056e0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240056e4:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240056e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240056ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240056f0:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240056f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240056f8:	6129      	str	r1, [r5, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240056fa:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240056fe:	f000 fb8b 	bl	24005e18 <HAL_DMA_Init>
24005702:	b9b8      	cbnz	r0, 24005734 <HAL_SPI_MspInit+0x214>
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
24005704:	2200      	movs	r2, #0
24005706:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24005708:	67e5      	str	r5, [r4, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
2400570a:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
2400570c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
2400570e:	f000 f9d9 	bl	24005ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
24005712:	2056      	movs	r0, #86	; 0x56
24005714:	f000 fa14 	bl	24005b40 <HAL_NVIC_EnableIRQ>
}
24005718:	b03d      	add	sp, #244	; 0xf4
2400571a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
2400571c:	f7ff fc40 	bl	24004fa0 <Error_Handler>
24005720:	e79c      	b.n	2400565c <HAL_SPI_MspInit+0x13c>
      Error_Handler();
24005722:	f7ff fc3d 	bl	24004fa0 <Error_Handler>
24005726:	e779      	b.n	2400561c <HAL_SPI_MspInit+0xfc>
      Error_Handler();
24005728:	f7ff fc3a 	bl	24004fa0 <Error_Handler>
2400572c:	e71a      	b.n	24005564 <HAL_SPI_MspInit+0x44>
      Error_Handler();
2400572e:	f7ff fc37 	bl	24004fa0 <Error_Handler>
24005732:	e7a9      	b.n	24005688 <HAL_SPI_MspInit+0x168>
      Error_Handler();
24005734:	f7ff fc34 	bl	24004fa0 <Error_Handler>
24005738:	e7e4      	b.n	24005704 <HAL_SPI_MspInit+0x1e4>
2400573a:	bf00      	nop
2400573c:	40013000 	.word	0x40013000
24005740:	58001400 	.word	0x58001400
24005744:	58024400 	.word	0x58024400
24005748:	58020400 	.word	0x58020400
2400574c:	58021800 	.word	0x58021800
24005750:	2001eee0 	.word	0x2001eee0
24005754:	400200a0 	.word	0x400200a0
24005758:	2001ef58 	.word	0x2001ef58
2400575c:	40020010 	.word	0x40020010
24005760:	58020000 	.word	0x58020000
24005764:	2001efd0 	.word	0x2001efd0
24005768:	58025408 	.word	0x58025408

2400576c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
2400576c:	e7fe      	b.n	2400576c <Default_Handler>
2400576e:	bf00      	nop

24005770 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24005770:	f8df d060 	ldr.w	sp, [pc, #96]	; 240057d4 <Reset_Handler+0x64>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24005774:	480f      	ldr	r0, [pc, #60]	; (240057b4 <Reset_Handler+0x44>)
24005776:	4a10      	ldr	r2, [pc, #64]	; (240057b8 <Reset_Handler+0x48>)
24005778:	4290      	cmp	r0, r2
2400577a:	d003      	beq.n	24005784 <Reset_Handler+0x14>
		*pDest = *pSource;
2400577c:	1a12      	subs	r2, r2, r0
2400577e:	490f      	ldr	r1, [pc, #60]	; (240057bc <Reset_Handler+0x4c>)
24005780:	f013 f896 	bl	240188b0 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24005784:	480e      	ldr	r0, [pc, #56]	; (240057c0 <Reset_Handler+0x50>)
24005786:	4a0f      	ldr	r2, [pc, #60]	; (240057c4 <Reset_Handler+0x54>)
24005788:	4290      	cmp	r0, r2
2400578a:	d003      	beq.n	24005794 <Reset_Handler+0x24>
		*pDest = 0;
2400578c:	1a12      	subs	r2, r2, r0
2400578e:	2100      	movs	r1, #0
24005790:	f013 f8b6 	bl	24018900 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24005794:	480c      	ldr	r0, [pc, #48]	; (240057c8 <Reset_Handler+0x58>)
24005796:	4a0d      	ldr	r2, [pc, #52]	; (240057cc <Reset_Handler+0x5c>)
24005798:	4290      	cmp	r0, r2
2400579a:	d003      	beq.n	240057a4 <Reset_Handler+0x34>
		*pDest = *pSource;
2400579c:	1a12      	subs	r2, r2, r0
2400579e:	490c      	ldr	r1, [pc, #48]	; (240057d0 <Reset_Handler+0x60>)
240057a0:	f013 f886 	bl	240188b0 <memcpy>
	SystemInit();
240057a4:	f000 f884 	bl	240058b0 <SystemInit>
	__libc_init_array();
240057a8:	f013 f844 	bl	24018834 <__libc_init_array>
	(void)main();
240057ac:	f7ff f972 	bl	24004a94 <main>
	for (;;) ;
240057b0:	e7fe      	b.n	240057b0 <Reset_Handler+0x40>
240057b2:	bf00      	nop
240057b4:	20000000 	.word	0x20000000
240057b8:	20000848 	.word	0x20000848
240057bc:	24033dc0 	.word	0x24033dc0
240057c0:	20000848 	.word	0x20000848
240057c4:	2001f824 	.word	0x2001f824
240057c8:	00000400 	.word	0x00000400
240057cc:	00005a28 	.word	0x00005a28
240057d0:	24034608 	.word	0x24034608
240057d4:	20020000 	.word	0x20020000

240057d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240057d8:	4b07      	ldr	r3, [pc, #28]	; (240057f8 <HAL_MspInit+0x20>)
{
240057da:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240057dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240057e0:	f042 0202 	orr.w	r2, r2, #2
240057e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
240057e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240057ec:	f003 0302 	and.w	r3, r3, #2
240057f0:	9301      	str	r3, [sp, #4]
240057f2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
240057f4:	b002      	add	sp, #8
240057f6:	4770      	bx	lr
240057f8:	58024400 	.word	0x58024400

240057fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
240057fc:	e7fe      	b.n	240057fc <NMI_Handler>
240057fe:	bf00      	nop

24005800 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24005800:	e7fe      	b.n	24005800 <HardFault_Handler>
24005802:	bf00      	nop

24005804 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24005804:	e7fe      	b.n	24005804 <MemManage_Handler>
24005806:	bf00      	nop

24005808 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24005808:	e7fe      	b.n	24005808 <BusFault_Handler>
2400580a:	bf00      	nop

2400580c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2400580c:	e7fe      	b.n	2400580c <UsageFault_Handler>
2400580e:	bf00      	nop

24005810 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24005810:	4770      	bx	lr
24005812:	bf00      	nop

24005814 <DebugMon_Handler>:
24005814:	4770      	bx	lr
24005816:	bf00      	nop

24005818 <PendSV_Handler>:
24005818:	4770      	bx	lr
2400581a:	bf00      	nop

2400581c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2400581c:	f000 b916 	b.w	24005a4c <HAL_IncTick>

24005820 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
24005820:	2008      	movs	r0, #8
24005822:	f001 be43 	b.w	240074ac <HAL_GPIO_EXTI_IRQHandler>
24005826:	bf00      	nop

24005828 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24005828:	4801      	ldr	r0, [pc, #4]	; (24005830 <DMA1_Stream0_IRQHandler+0x8>)
2400582a:	f001 b93d 	b.w	24006aa8 <HAL_DMA_IRQHandler>
2400582e:	bf00      	nop
24005830:	2001ef58 	.word	0x2001ef58

24005834 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24005834:	4801      	ldr	r0, [pc, #4]	; (2400583c <DMA1_Stream1_IRQHandler+0x8>)
24005836:	f001 b937 	b.w	24006aa8 <HAL_DMA_IRQHandler>
2400583a:	bf00      	nop
2400583c:	2001ec44 	.word	0x2001ec44

24005840 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24005840:	4801      	ldr	r0, [pc, #4]	; (24005848 <DMA1_Stream2_IRQHandler+0x8>)
24005842:	f001 b931 	b.w	24006aa8 <HAL_DMA_IRQHandler>
24005846:	bf00      	nop
24005848:	2001ecbc 	.word	0x2001ecbc

2400584c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
2400584c:	4801      	ldr	r0, [pc, #4]	; (24005854 <DMA1_Stream6_IRQHandler+0x8>)
2400584e:	f001 b92b 	b.w	24006aa8 <HAL_DMA_IRQHandler>
24005852:	bf00      	nop
24005854:	2001eee0 	.word	0x2001eee0

24005858 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24005858:	4801      	ldr	r0, [pc, #4]	; (24005860 <SPI1_IRQHandler+0x8>)
2400585a:	f006 bc51 	b.w	2400c100 <HAL_SPI_IRQHandler>
2400585e:	bf00      	nop
24005860:	2001f048 	.word	0x2001f048

24005864 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
24005864:	4801      	ldr	r0, [pc, #4]	; (2400586c <SDMMC1_IRQHandler+0x8>)
24005866:	f005 beeb 	b.w	2400b640 <HAL_SD_IRQHandler>
2400586a:	bf00      	nop
2400586c:	2001ee64 	.word	0x2001ee64

24005870 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24005870:	4801      	ldr	r0, [pc, #4]	; (24005878 <SPI6_IRQHandler+0x8>)
24005872:	f006 bc45 	b.w	2400c100 <HAL_SPI_IRQHandler>
24005876:	bf00      	nop
24005878:	2001f0e8 	.word	0x2001f0e8

2400587c <SAI1_IRQHandler>:
void SAI1_IRQHandler(void)
{
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
2400587c:	4804      	ldr	r0, [pc, #16]	; (24005890 <SAI1_IRQHandler+0x14>)
{
2400587e:	b508      	push	{r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24005880:	f004 ff38 	bl	2400a6f4 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
24005884:	4803      	ldr	r0, [pc, #12]	; (24005894 <SAI1_IRQHandler+0x18>)
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
24005886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
2400588a:	f004 bf33 	b.w	2400a6f4 <HAL_SAI_IRQHandler>
2400588e:	bf00      	nop
24005890:	2001ed34 	.word	0x2001ed34
24005894:	2001edcc 	.word	0x2001edcc

24005898 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24005898:	4801      	ldr	r0, [pc, #4]	; (240058a0 <DMAMUX1_OVR_IRQHandler+0x8>)
2400589a:	f001 bc8d 	b.w	240071b8 <HAL_DMAEx_MUX_IRQHandler>
2400589e:	bf00      	nop
240058a0:	2001ec44 	.word	0x2001ec44

240058a4 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
240058a4:	4801      	ldr	r0, [pc, #4]	; (240058ac <BDMA_Channel0_IRQHandler+0x8>)
240058a6:	f001 b8ff 	b.w	24006aa8 <HAL_DMA_IRQHandler>
240058aa:	bf00      	nop
240058ac:	2001efd0 	.word	0x2001efd0

240058b0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240058b0:	4930      	ldr	r1, [pc, #192]	; (24005974 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240058b2:	4a31      	ldr	r2, [pc, #196]	; (24005978 <SystemInit+0xc8>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240058b4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
240058b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
240058bc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
{
240058c2:	b083      	sub	sp, #12
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240058c4:	6813      	ldr	r3, [r2, #0]
240058c6:	f003 030f 	and.w	r3, r3, #15
240058ca:	2b06      	cmp	r3, #6
240058cc:	d805      	bhi.n	240058da <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240058ce:	6813      	ldr	r3, [r2, #0]
240058d0:	f023 030f 	bic.w	r3, r3, #15
240058d4:	f043 0307 	orr.w	r3, r3, #7
240058d8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
240058da:	4b28      	ldr	r3, [pc, #160]	; (2400597c <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
240058dc:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
240058de:	4a28      	ldr	r2, [pc, #160]	; (24005980 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
240058e0:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240058e2:	4825      	ldr	r0, [pc, #148]	; (24005978 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
240058e4:	f041 0101 	orr.w	r1, r1, #1
240058e8:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
240058ea:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
240058ec:	6819      	ldr	r1, [r3, #0]
240058ee:	400a      	ands	r2, r1
240058f0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240058f2:	6803      	ldr	r3, [r0, #0]
240058f4:	071b      	lsls	r3, r3, #28
240058f6:	d505      	bpl.n	24005904 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240058f8:	6803      	ldr	r3, [r0, #0]
240058fa:	f023 030f 	bic.w	r3, r3, #15
240058fe:	f043 0307 	orr.w	r3, r3, #7
24005902:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24005904:	4b1d      	ldr	r3, [pc, #116]	; (2400597c <SystemInit+0xcc>)
24005906:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24005908:	491e      	ldr	r1, [pc, #120]	; (24005984 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
2400590a:	4c1f      	ldr	r4, [pc, #124]	; (24005988 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
2400590c:	481f      	ldr	r0, [pc, #124]	; (2400598c <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
2400590e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24005910:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24005912:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24005914:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24005916:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24005918:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
2400591a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
2400591c:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
2400591e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24005920:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24005922:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24005924:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005926:	4c1a      	ldr	r4, [pc, #104]	; (24005990 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24005928:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400592c:	4919      	ldr	r1, [pc, #100]	; (24005994 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
2400592e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
24005930:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24005932:	6823      	ldr	r3, [r4, #0]
24005934:	4019      	ands	r1, r3
24005936:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400593a:	d203      	bcs.n	24005944 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
2400593c:	4b16      	ldr	r3, [pc, #88]	; (24005998 <SystemInit+0xe8>)
2400593e:	2201      	movs	r2, #1
24005940:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005944:	4b0d      	ldr	r3, [pc, #52]	; (2400597c <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24005946:	f243 04d2 	movw	r4, #12498	; 0x30d2
2400594a:	4814      	ldr	r0, [pc, #80]	; (2400599c <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
2400594c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005950:	4908      	ldr	r1, [pc, #32]	; (24005974 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24005952:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
24005956:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
2400595a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
2400595e:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005960:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
24005964:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24005966:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24005968:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
2400596a:	b003      	add	sp, #12
2400596c:	f85d 4b04 	ldr.w	r4, [sp], #4
24005970:	4770      	bx	lr
24005972:	bf00      	nop
24005974:	e000ed00 	.word	0xe000ed00
24005978:	52002000 	.word	0x52002000
2400597c:	58024400 	.word	0x58024400
24005980:	eaf6ed7f 	.word	0xeaf6ed7f
24005984:	01010280 	.word	0x01010280
24005988:	02020200 	.word	0x02020200
2400598c:	01ff0000 	.word	0x01ff0000
24005990:	5c001000 	.word	0x5c001000
24005994:	ffff0000 	.word	0xffff0000
24005998:	51008000 	.word	0x51008000
2400599c:	52004000 	.word	0x52004000

240059a0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240059a0:	4b0f      	ldr	r3, [pc, #60]	; (240059e0 <HAL_InitTick+0x40>)
240059a2:	781b      	ldrb	r3, [r3, #0]
240059a4:	b90b      	cbnz	r3, 240059aa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
240059a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
240059a8:	4770      	bx	lr
{
240059aa:	b510      	push	{r4, lr}
240059ac:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
240059ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
240059b2:	4a0c      	ldr	r2, [pc, #48]	; (240059e4 <HAL_InitTick+0x44>)
240059b4:	fbb0 f3f3 	udiv	r3, r0, r3
240059b8:	6810      	ldr	r0, [r2, #0]
240059ba:	fbb0 f0f3 	udiv	r0, r0, r3
240059be:	f000 f8df 	bl	24005b80 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240059c2:	2c0f      	cmp	r4, #15
240059c4:	d800      	bhi.n	240059c8 <HAL_InitTick+0x28>
240059c6:	b108      	cbz	r0, 240059cc <HAL_InitTick+0x2c>
    return HAL_ERROR;
240059c8:	2001      	movs	r0, #1
}
240059ca:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240059cc:	2200      	movs	r2, #0
240059ce:	4621      	mov	r1, r4
240059d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240059d4:	f000 f876 	bl	24005ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
240059d8:	4b03      	ldr	r3, [pc, #12]	; (240059e8 <HAL_InitTick+0x48>)
240059da:	2000      	movs	r0, #0
240059dc:	601c      	str	r4, [r3, #0]
}
240059de:	bd10      	pop	{r4, pc}
240059e0:	20000758 	.word	0x20000758
240059e4:	20000750 	.word	0x20000750
240059e8:	2000075c 	.word	0x2000075c

240059ec <HAL_Init>:
{
240059ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240059ee:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240059f0:	4c12      	ldr	r4, [pc, #72]	; (24005a3c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240059f2:	f000 f855 	bl	24005aa0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240059f6:	f002 fc5f 	bl	240082b8 <HAL_RCC_GetSysClockFreq>
240059fa:	4b11      	ldr	r3, [pc, #68]	; (24005a40 <HAL_Init+0x54>)
240059fc:	4911      	ldr	r1, [pc, #68]	; (24005a44 <HAL_Init+0x58>)
240059fe:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005a00:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005a02:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005a06:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005a0a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005a0c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005a0e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
24005a12:	490d      	ldr	r1, [pc, #52]	; (24005a48 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005a14:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24005a18:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005a1a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
24005a1e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24005a20:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005a22:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24005a24:	f7ff ffbc 	bl	240059a0 <HAL_InitTick>
24005a28:	b110      	cbz	r0, 24005a30 <HAL_Init+0x44>
    return HAL_ERROR;
24005a2a:	2401      	movs	r4, #1
}
24005a2c:	4620      	mov	r0, r4
24005a2e:	bd10      	pop	{r4, pc}
24005a30:	4604      	mov	r4, r0
  HAL_MspInit();
24005a32:	f7ff fed1 	bl	240057d8 <HAL_MspInit>
}
24005a36:	4620      	mov	r0, r4
24005a38:	bd10      	pop	{r4, pc}
24005a3a:	bf00      	nop
24005a3c:	20000754 	.word	0x20000754
24005a40:	58024400 	.word	0x58024400
24005a44:	2401ae80 	.word	0x2401ae80
24005a48:	20000750 	.word	0x20000750

24005a4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24005a4c:	4a03      	ldr	r2, [pc, #12]	; (24005a5c <HAL_IncTick+0x10>)
24005a4e:	4b04      	ldr	r3, [pc, #16]	; (24005a60 <HAL_IncTick+0x14>)
24005a50:	6811      	ldr	r1, [r2, #0]
24005a52:	781b      	ldrb	r3, [r3, #0]
24005a54:	440b      	add	r3, r1
24005a56:	6013      	str	r3, [r2, #0]
}
24005a58:	4770      	bx	lr
24005a5a:	bf00      	nop
24005a5c:	2001f184 	.word	0x2001f184
24005a60:	20000758 	.word	0x20000758

24005a64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
24005a64:	4b01      	ldr	r3, [pc, #4]	; (24005a6c <HAL_GetTick+0x8>)
24005a66:	6818      	ldr	r0, [r3, #0]
}
24005a68:	4770      	bx	lr
24005a6a:	bf00      	nop
24005a6c:	2001f184 	.word	0x2001f184

24005a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24005a70:	b538      	push	{r3, r4, r5, lr}
24005a72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24005a74:	f7ff fff6 	bl	24005a64 <HAL_GetTick>
24005a78:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24005a7a:	1c63      	adds	r3, r4, #1
24005a7c:	d002      	beq.n	24005a84 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
24005a7e:	4b04      	ldr	r3, [pc, #16]	; (24005a90 <HAL_Delay+0x20>)
24005a80:	781b      	ldrb	r3, [r3, #0]
24005a82:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
24005a84:	f7ff ffee 	bl	24005a64 <HAL_GetTick>
24005a88:	1b43      	subs	r3, r0, r5
24005a8a:	42a3      	cmp	r3, r4
24005a8c:	d3fa      	bcc.n	24005a84 <HAL_Delay+0x14>
  {
  }
}
24005a8e:	bd38      	pop	{r3, r4, r5, pc}
24005a90:	20000758 	.word	0x20000758

24005a94 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24005a94:	4b01      	ldr	r3, [pc, #4]	; (24005a9c <HAL_GetREVID+0x8>)
24005a96:	6818      	ldr	r0, [r3, #0]
}
24005a98:	0c00      	lsrs	r0, r0, #16
24005a9a:	4770      	bx	lr
24005a9c:	5c001000 	.word	0x5c001000

24005aa0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24005aa0:	4906      	ldr	r1, [pc, #24]	; (24005abc <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24005aa2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24005aa6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24005aa8:	4b05      	ldr	r3, [pc, #20]	; (24005ac0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24005aaa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24005aac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24005ab0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24005ab4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24005ab6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24005ab8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24005aba:	4770      	bx	lr
24005abc:	e000ed00 	.word	0xe000ed00
24005ac0:	05fa0000 	.word	0x05fa0000

24005ac4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24005ac4:	4b1b      	ldr	r3, [pc, #108]	; (24005b34 <HAL_NVIC_SetPriority+0x70>)
24005ac6:	68db      	ldr	r3, [r3, #12]
24005ac8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24005acc:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24005ace:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005ad2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24005ad6:	f1be 0f04 	cmp.w	lr, #4
24005ada:	bf28      	it	cs
24005adc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005ae0:	f1bc 0f06 	cmp.w	ip, #6
24005ae4:	d91a      	bls.n	24005b1c <HAL_NVIC_SetPriority+0x58>
24005ae6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24005ae8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
24005aec:	fa0c fc03 	lsl.w	ip, ip, r3
24005af0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24005af4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24005af8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24005afa:	fa0c fc0e 	lsl.w	ip, ip, lr
24005afe:	ea21 010c 	bic.w	r1, r1, ip
24005b02:	fa01 f103 	lsl.w	r1, r1, r3
24005b06:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24005b0a:	db0a      	blt.n	24005b22 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005b0c:	0109      	lsls	r1, r1, #4
24005b0e:	4b0a      	ldr	r3, [pc, #40]	; (24005b38 <HAL_NVIC_SetPriority+0x74>)
24005b10:	b2c9      	uxtb	r1, r1
24005b12:	4403      	add	r3, r0
24005b14:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24005b18:	f85d fb04 	ldr.w	pc, [sp], #4
24005b1c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24005b1e:	4613      	mov	r3, r2
24005b20:	e7e8      	b.n	24005af4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005b22:	f000 000f 	and.w	r0, r0, #15
24005b26:	0109      	lsls	r1, r1, #4
24005b28:	4b04      	ldr	r3, [pc, #16]	; (24005b3c <HAL_NVIC_SetPriority+0x78>)
24005b2a:	b2c9      	uxtb	r1, r1
24005b2c:	4403      	add	r3, r0
24005b2e:	7619      	strb	r1, [r3, #24]
24005b30:	f85d fb04 	ldr.w	pc, [sp], #4
24005b34:	e000ed00 	.word	0xe000ed00
24005b38:	e000e100 	.word	0xe000e100
24005b3c:	e000ecfc 	.word	0xe000ecfc

24005b40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24005b40:	2800      	cmp	r0, #0
24005b42:	db07      	blt.n	24005b54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24005b44:	2301      	movs	r3, #1
24005b46:	f000 011f 	and.w	r1, r0, #31
24005b4a:	4a03      	ldr	r2, [pc, #12]	; (24005b58 <HAL_NVIC_EnableIRQ+0x18>)
24005b4c:	0940      	lsrs	r0, r0, #5
24005b4e:	408b      	lsls	r3, r1
24005b50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24005b54:	4770      	bx	lr
24005b56:	bf00      	nop
24005b58:	e000e100 	.word	0xe000e100

24005b5c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
24005b5c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24005b60:	4905      	ldr	r1, [pc, #20]	; (24005b78 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24005b62:	4b06      	ldr	r3, [pc, #24]	; (24005b7c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24005b64:	68ca      	ldr	r2, [r1, #12]
24005b66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24005b6a:	4313      	orrs	r3, r2
24005b6c:	60cb      	str	r3, [r1, #12]
24005b6e:	f3bf 8f4f 	dsb	sy
    __NOP();
24005b72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
24005b74:	e7fd      	b.n	24005b72 <HAL_NVIC_SystemReset+0x16>
24005b76:	bf00      	nop
24005b78:	e000ed00 	.word	0xe000ed00
24005b7c:	05fa0004 	.word	0x05fa0004

24005b80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24005b80:	1e43      	subs	r3, r0, #1
24005b82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24005b86:	d20c      	bcs.n	24005ba2 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24005b88:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24005b8c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005b8e:	4906      	ldr	r1, [pc, #24]	; (24005ba8 <HAL_SYSTICK_Config+0x28>)
24005b90:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24005b94:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24005b96:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24005b98:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24005b9c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24005b9e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24005ba0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24005ba2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24005ba4:	4770      	bx	lr
24005ba6:	bf00      	nop
24005ba8:	e000ed00 	.word	0xe000ed00

24005bac <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24005bac:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24005bb0:	4b04      	ldr	r3, [pc, #16]	; (24005bc4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24005bb2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24005bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24005bb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24005bba:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24005bbc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24005bc0:	4770      	bx	lr
24005bc2:	bf00      	nop
24005bc4:	e000ed00 	.word	0xe000ed00

24005bc8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24005bc8:	4b06      	ldr	r3, [pc, #24]	; (24005be4 <HAL_MPU_Enable+0x1c>)
24005bca:	f040 0001 	orr.w	r0, r0, #1
24005bce:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24005bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24005bd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24005bd8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24005bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24005bde:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24005be2:	4770      	bx	lr
24005be4:	e000ed00 	.word	0xe000ed00

24005be8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24005be8:	4a17      	ldr	r2, [pc, #92]	; (24005c48 <HAL_MPU_ConfigRegion+0x60>)
24005bea:	7843      	ldrb	r3, [r0, #1]
24005bec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24005bf0:	7801      	ldrb	r1, [r0, #0]
24005bf2:	b321      	cbz	r1, 24005c3e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24005bf4:	6843      	ldr	r3, [r0, #4]
{
24005bf6:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
24005bf8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24005bfc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005bfe:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24005c02:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24005c04:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005c08:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24005c0c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005c10:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24005c12:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005c14:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24005c18:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005c1c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24005c20:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24005c24:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
24005c28:	7a01      	ldrb	r1, [r0, #8]
24005c2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
24005c2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24005c32:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24005c36:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24005c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
24005c3e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24005c42:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
24005c46:	4770      	bx	lr
24005c48:	e000ed00 	.word	0xe000ed00

24005c4c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005c4c:	6802      	ldr	r2, [r0, #0]
24005c4e:	4b34      	ldr	r3, [pc, #208]	; (24005d20 <DMA_CalcBaseAndBitshift+0xd4>)
24005c50:	4934      	ldr	r1, [pc, #208]	; (24005d24 <DMA_CalcBaseAndBitshift+0xd8>)
{
24005c52:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005c54:	4d34      	ldr	r5, [pc, #208]	; (24005d28 <DMA_CalcBaseAndBitshift+0xdc>)
24005c56:	4c35      	ldr	r4, [pc, #212]	; (24005d2c <DMA_CalcBaseAndBitshift+0xe0>)
24005c58:	42aa      	cmp	r2, r5
24005c5a:	bf18      	it	ne
24005c5c:	429a      	cmpne	r2, r3
24005c5e:	bf0c      	ite	eq
24005c60:	2301      	moveq	r3, #1
24005c62:	2300      	movne	r3, #0
24005c64:	428a      	cmp	r2, r1
24005c66:	bf08      	it	eq
24005c68:	f043 0301 	orreq.w	r3, r3, #1
24005c6c:	3130      	adds	r1, #48	; 0x30
24005c6e:	42a2      	cmp	r2, r4
24005c70:	bf08      	it	eq
24005c72:	f043 0301 	orreq.w	r3, r3, #1
24005c76:	3430      	adds	r4, #48	; 0x30
24005c78:	428a      	cmp	r2, r1
24005c7a:	bf08      	it	eq
24005c7c:	f043 0301 	orreq.w	r3, r3, #1
24005c80:	3130      	adds	r1, #48	; 0x30
24005c82:	42a2      	cmp	r2, r4
24005c84:	bf08      	it	eq
24005c86:	f043 0301 	orreq.w	r3, r3, #1
24005c8a:	3430      	adds	r4, #48	; 0x30
24005c8c:	428a      	cmp	r2, r1
24005c8e:	bf08      	it	eq
24005c90:	f043 0301 	orreq.w	r3, r3, #1
24005c94:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005c98:	42a2      	cmp	r2, r4
24005c9a:	bf08      	it	eq
24005c9c:	f043 0301 	orreq.w	r3, r3, #1
24005ca0:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005ca4:	428a      	cmp	r2, r1
24005ca6:	bf08      	it	eq
24005ca8:	f043 0301 	orreq.w	r3, r3, #1
24005cac:	3130      	adds	r1, #48	; 0x30
24005cae:	42a2      	cmp	r2, r4
24005cb0:	bf08      	it	eq
24005cb2:	f043 0301 	orreq.w	r3, r3, #1
24005cb6:	3430      	adds	r4, #48	; 0x30
24005cb8:	428a      	cmp	r2, r1
24005cba:	bf08      	it	eq
24005cbc:	f043 0301 	orreq.w	r3, r3, #1
24005cc0:	3130      	adds	r1, #48	; 0x30
24005cc2:	42a2      	cmp	r2, r4
24005cc4:	bf08      	it	eq
24005cc6:	f043 0301 	orreq.w	r3, r3, #1
24005cca:	3430      	adds	r4, #48	; 0x30
24005ccc:	428a      	cmp	r2, r1
24005cce:	bf08      	it	eq
24005cd0:	f043 0301 	orreq.w	r3, r3, #1
24005cd4:	3130      	adds	r1, #48	; 0x30
24005cd6:	42a2      	cmp	r2, r4
24005cd8:	bf08      	it	eq
24005cda:	f043 0301 	orreq.w	r3, r3, #1
24005cde:	428a      	cmp	r2, r1
24005ce0:	bf08      	it	eq
24005ce2:	f043 0301 	orreq.w	r3, r3, #1
24005ce6:	b913      	cbnz	r3, 24005cee <DMA_CalcBaseAndBitshift+0xa2>
24005ce8:	4b11      	ldr	r3, [pc, #68]	; (24005d30 <DMA_CalcBaseAndBitshift+0xe4>)
24005cea:	429a      	cmp	r2, r3
24005cec:	d113      	bne.n	24005d16 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005cee:	b2d3      	uxtb	r3, r2
24005cf0:	4910      	ldr	r1, [pc, #64]	; (24005d34 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005cf2:	4c11      	ldr	r4, [pc, #68]	; (24005d38 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005cf4:	3b10      	subs	r3, #16
24005cf6:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
24005cfa:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24005cfc:	4b0f      	ldr	r3, [pc, #60]	; (24005d3c <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005cfe:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24005d02:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005d06:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24005d08:	bf88      	it	hi
24005d0a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24005d0c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24005d0e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24005d10:	4618      	mov	r0, r3
24005d12:	bc30      	pop	{r4, r5}
24005d14:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24005d16:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
24005d1a:	6583      	str	r3, [r0, #88]	; 0x58
24005d1c:	e7f8      	b.n	24005d10 <DMA_CalcBaseAndBitshift+0xc4>
24005d1e:	bf00      	nop
24005d20:	40020010 	.word	0x40020010
24005d24:	40020040 	.word	0x40020040
24005d28:	40020028 	.word	0x40020028
24005d2c:	40020058 	.word	0x40020058
24005d30:	400204b8 	.word	0x400204b8
24005d34:	aaaaaaab 	.word	0xaaaaaaab
24005d38:	2401ae90 	.word	0x2401ae90
24005d3c:	fffffc00 	.word	0xfffffc00

24005d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24005d40:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005d42:	4a29      	ldr	r2, [pc, #164]	; (24005de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24005d44:	4929      	ldr	r1, [pc, #164]	; (24005dec <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
24005d46:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005d48:	4d29      	ldr	r5, [pc, #164]	; (24005df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
24005d4a:	4c2a      	ldr	r4, [pc, #168]	; (24005df4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
24005d4c:	42ab      	cmp	r3, r5
24005d4e:	bf18      	it	ne
24005d50:	4293      	cmpne	r3, r2
24005d52:	bf0c      	ite	eq
24005d54:	2201      	moveq	r2, #1
24005d56:	2200      	movne	r2, #0
24005d58:	428b      	cmp	r3, r1
24005d5a:	bf08      	it	eq
24005d5c:	f042 0201 	orreq.w	r2, r2, #1
24005d60:	3128      	adds	r1, #40	; 0x28
24005d62:	42a3      	cmp	r3, r4
24005d64:	bf08      	it	eq
24005d66:	f042 0201 	orreq.w	r2, r2, #1
24005d6a:	3428      	adds	r4, #40	; 0x28
24005d6c:	428b      	cmp	r3, r1
24005d6e:	bf08      	it	eq
24005d70:	f042 0201 	orreq.w	r2, r2, #1
24005d74:	3128      	adds	r1, #40	; 0x28
24005d76:	42a3      	cmp	r3, r4
24005d78:	bf08      	it	eq
24005d7a:	f042 0201 	orreq.w	r2, r2, #1
24005d7e:	428b      	cmp	r3, r1
24005d80:	bf08      	it	eq
24005d82:	f042 0201 	orreq.w	r2, r2, #1
24005d86:	b912      	cbnz	r2, 24005d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24005d88:	4a1b      	ldr	r2, [pc, #108]	; (24005df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
24005d8a:	4293      	cmp	r3, r2
24005d8c:	d113      	bne.n	24005db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24005d8e:	b2db      	uxtb	r3, r3
24005d90:	4c1a      	ldr	r4, [pc, #104]	; (24005dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005d92:	4a1b      	ldr	r2, [pc, #108]	; (24005e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005d94:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24005d96:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24005d98:	4d1a      	ldr	r5, [pc, #104]	; (24005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24005d9a:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24005d9e:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005da0:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005da4:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005da8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005daa:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24005dae:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005db0:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24005db2:	bc30      	pop	{r4, r5}
24005db4:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005db6:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24005db8:	4913      	ldr	r1, [pc, #76]	; (24005e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005dba:	4c14      	ldr	r4, [pc, #80]	; (24005e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24005dbc:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005dbe:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24005dc0:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24005dc2:	fba4 2302 	umull	r2, r3, r4, r2
24005dc6:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24005dca:	d800      	bhi.n	24005dce <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24005dcc:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005dce:	4a10      	ldr	r2, [pc, #64]	; (24005e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005dd0:	f003 051f 	and.w	r5, r3, #31
24005dd4:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24005dd6:	4c0f      	ldr	r4, [pc, #60]	; (24005e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005dd8:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005dda:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24005ddc:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005dde:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24005de0:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24005de2:	6602      	str	r2, [r0, #96]	; 0x60
}
24005de4:	e7e5      	b.n	24005db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
24005de6:	bf00      	nop
24005de8:	58025408 	.word	0x58025408
24005dec:	58025430 	.word	0x58025430
24005df0:	5802541c 	.word	0x5802541c
24005df4:	58025444 	.word	0x58025444
24005df8:	58025494 	.word	0x58025494
24005dfc:	cccccccd 	.word	0xcccccccd
24005e00:	16009600 	.word	0x16009600
24005e04:	58025880 	.word	0x58025880
24005e08:	bffdfbf0 	.word	0xbffdfbf0
24005e0c:	aaaaaaab 	.word	0xaaaaaaab
24005e10:	10008200 	.word	0x10008200
24005e14:	40020880 	.word	0x40020880

24005e18 <HAL_DMA_Init>:
{
24005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24005e1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24005e1c:	f7ff fe22 	bl	24005a64 <HAL_GetTick>
  if(hdma == NULL)
24005e20:	2c00      	cmp	r4, #0
24005e22:	f000 8177 	beq.w	24006114 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005e26:	6823      	ldr	r3, [r4, #0]
24005e28:	4605      	mov	r5, r0
24005e2a:	4a92      	ldr	r2, [pc, #584]	; (24006074 <HAL_DMA_Init+0x25c>)
24005e2c:	4293      	cmp	r3, r2
24005e2e:	d048      	beq.n	24005ec2 <HAL_DMA_Init+0xaa>
24005e30:	3218      	adds	r2, #24
24005e32:	4293      	cmp	r3, r2
24005e34:	d045      	beq.n	24005ec2 <HAL_DMA_Init+0xaa>
24005e36:	3230      	adds	r2, #48	; 0x30
24005e38:	498f      	ldr	r1, [pc, #572]	; (24006078 <HAL_DMA_Init+0x260>)
24005e3a:	428b      	cmp	r3, r1
24005e3c:	bf18      	it	ne
24005e3e:	4293      	cmpne	r3, r2
24005e40:	f101 0130 	add.w	r1, r1, #48	; 0x30
24005e44:	bf0c      	ite	eq
24005e46:	2201      	moveq	r2, #1
24005e48:	2200      	movne	r2, #0
24005e4a:	428b      	cmp	r3, r1
24005e4c:	bf08      	it	eq
24005e4e:	f042 0201 	orreq.w	r2, r2, #1
24005e52:	3118      	adds	r1, #24
24005e54:	428b      	cmp	r3, r1
24005e56:	bf08      	it	eq
24005e58:	f042 0201 	orreq.w	r2, r2, #1
24005e5c:	3118      	adds	r1, #24
24005e5e:	428b      	cmp	r3, r1
24005e60:	bf08      	it	eq
24005e62:	f042 0201 	orreq.w	r2, r2, #1
24005e66:	3118      	adds	r1, #24
24005e68:	428b      	cmp	r3, r1
24005e6a:	bf08      	it	eq
24005e6c:	f042 0201 	orreq.w	r2, r2, #1
24005e70:	f501 7156 	add.w	r1, r1, #856	; 0x358
24005e74:	428b      	cmp	r3, r1
24005e76:	bf08      	it	eq
24005e78:	f042 0201 	orreq.w	r2, r2, #1
24005e7c:	3118      	adds	r1, #24
24005e7e:	428b      	cmp	r3, r1
24005e80:	bf08      	it	eq
24005e82:	f042 0201 	orreq.w	r2, r2, #1
24005e86:	3118      	adds	r1, #24
24005e88:	428b      	cmp	r3, r1
24005e8a:	bf08      	it	eq
24005e8c:	f042 0201 	orreq.w	r2, r2, #1
24005e90:	3118      	adds	r1, #24
24005e92:	428b      	cmp	r3, r1
24005e94:	bf08      	it	eq
24005e96:	f042 0201 	orreq.w	r2, r2, #1
24005e9a:	3118      	adds	r1, #24
24005e9c:	428b      	cmp	r3, r1
24005e9e:	bf08      	it	eq
24005ea0:	f042 0201 	orreq.w	r2, r2, #1
24005ea4:	3118      	adds	r1, #24
24005ea6:	428b      	cmp	r3, r1
24005ea8:	bf08      	it	eq
24005eaa:	f042 0201 	orreq.w	r2, r2, #1
24005eae:	3118      	adds	r1, #24
24005eb0:	428b      	cmp	r3, r1
24005eb2:	bf08      	it	eq
24005eb4:	f042 0201 	orreq.w	r2, r2, #1
24005eb8:	b91a      	cbnz	r2, 24005ec2 <HAL_DMA_Init+0xaa>
24005eba:	4a70      	ldr	r2, [pc, #448]	; (2400607c <HAL_DMA_Init+0x264>)
24005ebc:	4293      	cmp	r3, r2
24005ebe:	f040 8198 	bne.w	240061f2 <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
24005ec2:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24005ec4:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
24005ec6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
24005eca:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
24005ece:	681a      	ldr	r2, [r3, #0]
24005ed0:	f022 0201 	bic.w	r2, r2, #1
24005ed4:	601a      	str	r2, [r3, #0]
24005ed6:	e006      	b.n	24005ee6 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24005ed8:	f7ff fdc4 	bl	24005a64 <HAL_GetTick>
24005edc:	1b43      	subs	r3, r0, r5
24005ede:	2b05      	cmp	r3, #5
24005ee0:	f200 80ff 	bhi.w	240060e2 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005ee4:	6823      	ldr	r3, [r4, #0]
24005ee6:	681a      	ldr	r2, [r3, #0]
24005ee8:	07d6      	lsls	r6, r2, #31
24005eea:	d4f5      	bmi.n	24005ed8 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24005eec:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24005ef0:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24005ef2:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24005ef4:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24005ef6:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24005ef8:	4302      	orrs	r2, r0
24005efa:	6960      	ldr	r0, [r4, #20]
24005efc:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24005efe:	69e0      	ldr	r0, [r4, #28]
24005f00:	430a      	orrs	r2, r1
24005f02:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24005f04:	485e      	ldr	r0, [pc, #376]	; (24006080 <HAL_DMA_Init+0x268>)
24005f06:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
24005f08:	6a25      	ldr	r5, [r4, #32]
24005f0a:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24005f0c:	4d5d      	ldr	r5, [pc, #372]	; (24006084 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
24005f0e:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24005f10:	6a60      	ldr	r0, [r4, #36]	; 0x24
24005f12:	2804      	cmp	r0, #4
24005f14:	f000 8100 	beq.w	24006118 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24005f18:	682e      	ldr	r6, [r5, #0]
24005f1a:	4d5b      	ldr	r5, [pc, #364]	; (24006088 <HAL_DMA_Init+0x270>)
24005f1c:	4035      	ands	r5, r6
24005f1e:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
24005f22:	f080 80bb 	bcs.w	2400609c <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24005f26:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24005f28:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24005f2a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
24005f2e:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24005f30:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24005f32:	4620      	mov	r0, r4
24005f34:	f7ff fe8a 	bl	24005c4c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005f38:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005f3a:	233f      	movs	r3, #63	; 0x3f
24005f3c:	f002 021f 	and.w	r2, r2, #31
24005f40:	4093      	lsls	r3, r2
24005f42:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005f44:	6822      	ldr	r2, [r4, #0]
24005f46:	4b4b      	ldr	r3, [pc, #300]	; (24006074 <HAL_DMA_Init+0x25c>)
24005f48:	4850      	ldr	r0, [pc, #320]	; (2400608c <HAL_DMA_Init+0x274>)
24005f4a:	494b      	ldr	r1, [pc, #300]	; (24006078 <HAL_DMA_Init+0x260>)
24005f4c:	4282      	cmp	r2, r0
24005f4e:	bf18      	it	ne
24005f50:	429a      	cmpne	r2, r3
24005f52:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005f56:	bf0c      	ite	eq
24005f58:	2301      	moveq	r3, #1
24005f5a:	2300      	movne	r3, #0
24005f5c:	428a      	cmp	r2, r1
24005f5e:	bf08      	it	eq
24005f60:	f043 0301 	orreq.w	r3, r3, #1
24005f64:	3130      	adds	r1, #48	; 0x30
24005f66:	4282      	cmp	r2, r0
24005f68:	bf08      	it	eq
24005f6a:	f043 0301 	orreq.w	r3, r3, #1
24005f6e:	3030      	adds	r0, #48	; 0x30
24005f70:	428a      	cmp	r2, r1
24005f72:	bf08      	it	eq
24005f74:	f043 0301 	orreq.w	r3, r3, #1
24005f78:	3130      	adds	r1, #48	; 0x30
24005f7a:	4282      	cmp	r2, r0
24005f7c:	bf08      	it	eq
24005f7e:	f043 0301 	orreq.w	r3, r3, #1
24005f82:	3030      	adds	r0, #48	; 0x30
24005f84:	428a      	cmp	r2, r1
24005f86:	bf08      	it	eq
24005f88:	f043 0301 	orreq.w	r3, r3, #1
24005f8c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005f90:	4282      	cmp	r2, r0
24005f92:	bf08      	it	eq
24005f94:	f043 0301 	orreq.w	r3, r3, #1
24005f98:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005f9c:	428a      	cmp	r2, r1
24005f9e:	bf08      	it	eq
24005fa0:	f043 0301 	orreq.w	r3, r3, #1
24005fa4:	3130      	adds	r1, #48	; 0x30
24005fa6:	4282      	cmp	r2, r0
24005fa8:	bf08      	it	eq
24005faa:	f043 0301 	orreq.w	r3, r3, #1
24005fae:	3030      	adds	r0, #48	; 0x30
24005fb0:	428a      	cmp	r2, r1
24005fb2:	bf08      	it	eq
24005fb4:	f043 0301 	orreq.w	r3, r3, #1
24005fb8:	3130      	adds	r1, #48	; 0x30
24005fba:	4282      	cmp	r2, r0
24005fbc:	bf08      	it	eq
24005fbe:	f043 0301 	orreq.w	r3, r3, #1
24005fc2:	3030      	adds	r0, #48	; 0x30
24005fc4:	428a      	cmp	r2, r1
24005fc6:	bf08      	it	eq
24005fc8:	f043 0301 	orreq.w	r3, r3, #1
24005fcc:	3130      	adds	r1, #48	; 0x30
24005fce:	4282      	cmp	r2, r0
24005fd0:	bf08      	it	eq
24005fd2:	f043 0301 	orreq.w	r3, r3, #1
24005fd6:	3030      	adds	r0, #48	; 0x30
24005fd8:	428a      	cmp	r2, r1
24005fda:	bf08      	it	eq
24005fdc:	f043 0301 	orreq.w	r3, r3, #1
24005fe0:	492b      	ldr	r1, [pc, #172]	; (24006090 <HAL_DMA_Init+0x278>)
24005fe2:	4282      	cmp	r2, r0
24005fe4:	bf08      	it	eq
24005fe6:	f043 0301 	orreq.w	r3, r3, #1
24005fea:	482a      	ldr	r0, [pc, #168]	; (24006094 <HAL_DMA_Init+0x27c>)
24005fec:	428a      	cmp	r2, r1
24005fee:	bf08      	it	eq
24005ff0:	f043 0301 	orreq.w	r3, r3, #1
24005ff4:	3128      	adds	r1, #40	; 0x28
24005ff6:	4282      	cmp	r2, r0
24005ff8:	bf08      	it	eq
24005ffa:	f043 0301 	orreq.w	r3, r3, #1
24005ffe:	3028      	adds	r0, #40	; 0x28
24006000:	428a      	cmp	r2, r1
24006002:	bf08      	it	eq
24006004:	f043 0301 	orreq.w	r3, r3, #1
24006008:	3128      	adds	r1, #40	; 0x28
2400600a:	4282      	cmp	r2, r0
2400600c:	bf08      	it	eq
2400600e:	f043 0301 	orreq.w	r3, r3, #1
24006012:	3028      	adds	r0, #40	; 0x28
24006014:	428a      	cmp	r2, r1
24006016:	bf08      	it	eq
24006018:	f043 0301 	orreq.w	r3, r3, #1
2400601c:	3128      	adds	r1, #40	; 0x28
2400601e:	4282      	cmp	r2, r0
24006020:	bf08      	it	eq
24006022:	f043 0301 	orreq.w	r3, r3, #1
24006026:	428a      	cmp	r2, r1
24006028:	bf08      	it	eq
2400602a:	f043 0301 	orreq.w	r3, r3, #1
2400602e:	b913      	cbnz	r3, 24006036 <HAL_DMA_Init+0x21e>
24006030:	4b19      	ldr	r3, [pc, #100]	; (24006098 <HAL_DMA_Init+0x280>)
24006032:	429a      	cmp	r2, r3
24006034:	d118      	bne.n	24006068 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24006036:	4620      	mov	r0, r4
24006038:	f7ff fe82 	bl	24005d40 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2400603c:	68a3      	ldr	r3, [r4, #8]
2400603e:	2b80      	cmp	r3, #128	; 0x80
24006040:	d05c      	beq.n	240060fc <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24006042:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006044:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24006046:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24006048:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400604a:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2400604e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24006050:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006052:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24006054:	d859      	bhi.n	2400610a <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24006056:	1e50      	subs	r0, r2, #1
24006058:	2807      	cmp	r0, #7
2400605a:	d96e      	bls.n	2400613a <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400605c:	6f62      	ldr	r2, [r4, #116]	; 0x74
2400605e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
24006062:	2000      	movs	r0, #0
24006064:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006066:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006068:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
2400606a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400606c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
2400606e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24006074:	40020010 	.word	0x40020010
24006078:	40020040 	.word	0x40020040
2400607c:	400204b8 	.word	0x400204b8
24006080:	fe10803f 	.word	0xfe10803f
24006084:	5c001000 	.word	0x5c001000
24006088:	ffff0000 	.word	0xffff0000
2400608c:	40020028 	.word	0x40020028
24006090:	58025408 	.word	0x58025408
24006094:	5802541c 	.word	0x5802541c
24006098:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
2400609c:	6865      	ldr	r5, [r4, #4]
2400609e:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
240060a2:	2e1f      	cmp	r6, #31
240060a4:	d924      	bls.n	240060f0 <HAL_DMA_Init+0x2d8>
240060a6:	3d4f      	subs	r5, #79	; 0x4f
240060a8:	2d03      	cmp	r5, #3
240060aa:	d801      	bhi.n	240060b0 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
240060ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
240060b0:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240060b2:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240060b4:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
240060b6:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
240060ba:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240060be:	f47f af37 	bne.w	24005f30 <HAL_DMA_Init+0x118>
240060c2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
240060c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
240060c6:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240060c8:	2d00      	cmp	r5, #0
240060ca:	f43f af31 	beq.w	24005f30 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
240060ce:	2900      	cmp	r1, #0
240060d0:	d169      	bne.n	240061a6 <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
240060d2:	2801      	cmp	r0, #1
240060d4:	f000 8088 	beq.w	240061e8 <HAL_DMA_Init+0x3d0>
240060d8:	f030 0102 	bics.w	r1, r0, #2
240060dc:	f47f af28 	bne.w	24005f30 <HAL_DMA_Init+0x118>
240060e0:	e069      	b.n	240061b6 <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240060e2:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
240060e4:	2303      	movs	r3, #3
        return HAL_ERROR;
240060e6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240060e8:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
240060ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240060ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240060f0:	4d73      	ldr	r5, [pc, #460]	; (240062c0 <HAL_DMA_Init+0x4a8>)
240060f2:	fa25 f606 	lsr.w	r6, r5, r6
240060f6:	07f5      	lsls	r5, r6, #31
240060f8:	d5da      	bpl.n	240060b0 <HAL_DMA_Init+0x298>
240060fa:	e7d7      	b.n	240060ac <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240060fc:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240060fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24006100:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24006104:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24006106:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006108:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
2400610a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
2400610c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24006110:	6763      	str	r3, [r4, #116]	; 0x74
24006112:	e7a9      	b.n	24006068 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
24006114:	2001      	movs	r0, #1
}
24006116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24006118:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
2400611a:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
2400611e:	432e      	orrs	r6, r5
24006120:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24006122:	4e68      	ldr	r6, [pc, #416]	; (240062c4 <HAL_DMA_Init+0x4ac>)
24006124:	403e      	ands	r6, r7
24006126:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
2400612a:	d2b7      	bcs.n	2400609c <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
2400612c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
2400612e:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24006130:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
24006134:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24006138:	e7c4      	b.n	240060c4 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400613a:	6821      	ldr	r1, [r4, #0]
2400613c:	4b62      	ldr	r3, [pc, #392]	; (240062c8 <HAL_DMA_Init+0x4b0>)
2400613e:	4d63      	ldr	r5, [pc, #396]	; (240062cc <HAL_DMA_Init+0x4b4>)
24006140:	42a9      	cmp	r1, r5
24006142:	bf18      	it	ne
24006144:	4299      	cmpne	r1, r3
24006146:	f105 0514 	add.w	r5, r5, #20
2400614a:	bf0c      	ite	eq
2400614c:	2301      	moveq	r3, #1
2400614e:	2300      	movne	r3, #0
24006150:	42a9      	cmp	r1, r5
24006152:	bf08      	it	eq
24006154:	f043 0301 	orreq.w	r3, r3, #1
24006158:	3514      	adds	r5, #20
2400615a:	42a9      	cmp	r1, r5
2400615c:	bf08      	it	eq
2400615e:	f043 0301 	orreq.w	r3, r3, #1
24006162:	3514      	adds	r5, #20
24006164:	42a9      	cmp	r1, r5
24006166:	bf08      	it	eq
24006168:	f043 0301 	orreq.w	r3, r3, #1
2400616c:	3514      	adds	r5, #20
2400616e:	42a9      	cmp	r1, r5
24006170:	bf08      	it	eq
24006172:	f043 0301 	orreq.w	r3, r3, #1
24006176:	3514      	adds	r5, #20
24006178:	42a9      	cmp	r1, r5
2400617a:	bf08      	it	eq
2400617c:	f043 0301 	orreq.w	r3, r3, #1
24006180:	b93b      	cbnz	r3, 24006192 <HAL_DMA_Init+0x37a>
24006182:	4b53      	ldr	r3, [pc, #332]	; (240062d0 <HAL_DMA_Init+0x4b8>)
24006184:	4299      	cmp	r1, r3
24006186:	d004      	beq.n	24006192 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24006188:	4b52      	ldr	r3, [pc, #328]	; (240062d4 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
2400618a:	4953      	ldr	r1, [pc, #332]	; (240062d8 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
2400618c:	4413      	add	r3, r2
2400618e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24006190:	e003      	b.n	2400619a <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24006192:	4b52      	ldr	r3, [pc, #328]	; (240062dc <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24006194:	4952      	ldr	r1, [pc, #328]	; (240062e0 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24006196:	4413      	add	r3, r2
24006198:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
2400619a:	2201      	movs	r2, #1
2400619c:	4082      	lsls	r2, r0
2400619e:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
240061a2:	6762      	str	r2, [r4, #116]	; 0x74
240061a4:	e75d      	b.n	24006062 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
240061a6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240061aa:	d00e      	beq.n	240061ca <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
240061ac:	2802      	cmp	r0, #2
240061ae:	d905      	bls.n	240061bc <HAL_DMA_Init+0x3a4>
240061b0:	2803      	cmp	r0, #3
240061b2:	f47f aebd 	bne.w	24005f30 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240061b6:	01e9      	lsls	r1, r5, #7
240061b8:	f57f aeba 	bpl.w	24005f30 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
240061bc:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240061be:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
240061c0:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240061c2:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
240061c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240061c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
240061ca:	2803      	cmp	r0, #3
240061cc:	f63f aeb0 	bhi.w	24005f30 <HAL_DMA_Init+0x118>
240061d0:	a101      	add	r1, pc, #4	; (adr r1, 240061d8 <HAL_DMA_Init+0x3c0>)
240061d2:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
240061d6:	bf00      	nop
240061d8:	240061bd 	.word	0x240061bd
240061dc:	240061b7 	.word	0x240061b7
240061e0:	240061bd 	.word	0x240061bd
240061e4:	240061e9 	.word	0x240061e9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240061e8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
240061ec:	f47f aea0 	bne.w	24005f30 <HAL_DMA_Init+0x118>
240061f0:	e7e4      	b.n	240061bc <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240061f2:	4a35      	ldr	r2, [pc, #212]	; (240062c8 <HAL_DMA_Init+0x4b0>)
240061f4:	4835      	ldr	r0, [pc, #212]	; (240062cc <HAL_DMA_Init+0x4b4>)
240061f6:	493b      	ldr	r1, [pc, #236]	; (240062e4 <HAL_DMA_Init+0x4cc>)
240061f8:	4283      	cmp	r3, r0
240061fa:	bf18      	it	ne
240061fc:	4293      	cmpne	r3, r2
240061fe:	f100 0028 	add.w	r0, r0, #40	; 0x28
24006202:	bf0c      	ite	eq
24006204:	2201      	moveq	r2, #1
24006206:	2200      	movne	r2, #0
24006208:	428b      	cmp	r3, r1
2400620a:	bf08      	it	eq
2400620c:	f042 0201 	orreq.w	r2, r2, #1
24006210:	3128      	adds	r1, #40	; 0x28
24006212:	4283      	cmp	r3, r0
24006214:	bf08      	it	eq
24006216:	f042 0201 	orreq.w	r2, r2, #1
2400621a:	3028      	adds	r0, #40	; 0x28
2400621c:	428b      	cmp	r3, r1
2400621e:	bf08      	it	eq
24006220:	f042 0201 	orreq.w	r2, r2, #1
24006224:	3128      	adds	r1, #40	; 0x28
24006226:	4283      	cmp	r3, r0
24006228:	bf08      	it	eq
2400622a:	f042 0201 	orreq.w	r2, r2, #1
2400622e:	428b      	cmp	r3, r1
24006230:	bf08      	it	eq
24006232:	f042 0201 	orreq.w	r2, r2, #1
24006236:	b912      	cbnz	r2, 2400623e <HAL_DMA_Init+0x426>
24006238:	4a25      	ldr	r2, [pc, #148]	; (240062d0 <HAL_DMA_Init+0x4b8>)
2400623a:	4293      	cmp	r3, r2
2400623c:	d138      	bne.n	240062b0 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
2400623e:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24006240:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24006242:	4d29      	ldr	r5, [pc, #164]	; (240062e8 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
24006244:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24006248:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
2400624c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2400624e:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24006250:	68a2      	ldr	r2, [r4, #8]
24006252:	2a40      	cmp	r2, #64	; 0x40
24006254:	d02a      	beq.n	240062ac <HAL_DMA_Init+0x494>
24006256:	2a80      	cmp	r2, #128	; 0x80
24006258:	bf0c      	ite	eq
2400625a:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
2400625e:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24006260:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24006262:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
24006266:	08d2      	lsrs	r2, r2, #3
24006268:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2400626c:	6961      	ldr	r1, [r4, #20]
2400626e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24006272:	69a1      	ldr	r1, [r4, #24]
24006274:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24006278:	69e1      	ldr	r1, [r4, #28]
2400627a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400627e:	491b      	ldr	r1, [pc, #108]	; (240062ec <HAL_DMA_Init+0x4d4>)
24006280:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
24006284:	4419      	add	r1, r3
24006286:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24006288:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400628a:	4819      	ldr	r0, [pc, #100]	; (240062f0 <HAL_DMA_Init+0x4d8>)
2400628c:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24006290:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24006292:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24006294:	090b      	lsrs	r3, r1, #4
24006296:	009b      	lsls	r3, r3, #2
24006298:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400629a:	f7ff fcd7 	bl	24005c4c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400629e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240062a0:	2301      	movs	r3, #1
240062a2:	f002 021f 	and.w	r2, r2, #31
240062a6:	4093      	lsls	r3, r2
240062a8:	6043      	str	r3, [r0, #4]
240062aa:	e64b      	b.n	24005f44 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240062ac:	2010      	movs	r0, #16
240062ae:	e7d7      	b.n	24006260 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240062b0:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
240062b2:	2303      	movs	r3, #3
    return HAL_ERROR;
240062b4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240062b6:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
240062b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240062bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240062be:	bf00      	nop
240062c0:	c3c0003f 	.word	0xc3c0003f
240062c4:	ffff0000 	.word	0xffff0000
240062c8:	58025408 	.word	0x58025408
240062cc:	5802541c 	.word	0x5802541c
240062d0:	58025494 	.word	0x58025494
240062d4:	1000823f 	.word	0x1000823f
240062d8:	40020940 	.word	0x40020940
240062dc:	1600963f 	.word	0x1600963f
240062e0:	58025940 	.word	0x58025940
240062e4:	58025430 	.word	0x58025430
240062e8:	fffe000f 	.word	0xfffe000f
240062ec:	a7fdabf8 	.word	0xa7fdabf8
240062f0:	cccccccd 	.word	0xcccccccd

240062f4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
240062f4:	2800      	cmp	r0, #0
240062f6:	f000 8177 	beq.w	240065e8 <HAL_DMA_Start_IT+0x2f4>
240062fa:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
240062fc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24006300:	2801      	cmp	r0, #1
24006302:	f000 8173 	beq.w	240065ec <HAL_DMA_Start_IT+0x2f8>
24006306:	2001      	movs	r0, #1
{
24006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
2400630c:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24006310:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24006314:	4284      	cmp	r4, r0
24006316:	d008      	beq.n	2400632a <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006318:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
2400631c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400631e:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24006322:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24006326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
2400632a:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
2400632c:	f8dc 4000 	ldr.w	r4, [ip]
24006330:	4d53      	ldr	r5, [pc, #332]	; (24006480 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
24006332:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006336:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
24006338:	4e52      	ldr	r6, [pc, #328]	; (24006484 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400633a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
2400633e:	4852      	ldr	r0, [pc, #328]	; (24006488 <HAL_DMA_Start_IT+0x194>)
24006340:	42ac      	cmp	r4, r5
24006342:	bf18      	it	ne
24006344:	4284      	cmpne	r4, r0
24006346:	f105 0518 	add.w	r5, r5, #24
2400634a:	bf0c      	ite	eq
2400634c:	2001      	moveq	r0, #1
2400634e:	2000      	movne	r0, #0
24006350:	42ac      	cmp	r4, r5
24006352:	bf08      	it	eq
24006354:	f040 0001 	orreq.w	r0, r0, #1
24006358:	3518      	adds	r5, #24
2400635a:	42ac      	cmp	r4, r5
2400635c:	bf08      	it	eq
2400635e:	f040 0001 	orreq.w	r0, r0, #1
24006362:	3518      	adds	r5, #24
24006364:	42ac      	cmp	r4, r5
24006366:	bf08      	it	eq
24006368:	f040 0001 	orreq.w	r0, r0, #1
2400636c:	3518      	adds	r5, #24
2400636e:	42ac      	cmp	r4, r5
24006370:	bf08      	it	eq
24006372:	f040 0001 	orreq.w	r0, r0, #1
24006376:	f505 7556 	add.w	r5, r5, #856	; 0x358
2400637a:	42ac      	cmp	r4, r5
2400637c:	bf08      	it	eq
2400637e:	f040 0001 	orreq.w	r0, r0, #1
24006382:	3518      	adds	r5, #24
24006384:	42ac      	cmp	r4, r5
24006386:	bf08      	it	eq
24006388:	f040 0001 	orreq.w	r0, r0, #1
2400638c:	3518      	adds	r5, #24
2400638e:	42ac      	cmp	r4, r5
24006390:	bf08      	it	eq
24006392:	f040 0001 	orreq.w	r0, r0, #1
24006396:	3518      	adds	r5, #24
24006398:	42ac      	cmp	r4, r5
2400639a:	bf08      	it	eq
2400639c:	f040 0001 	orreq.w	r0, r0, #1
240063a0:	3518      	adds	r5, #24
240063a2:	42ac      	cmp	r4, r5
240063a4:	bf08      	it	eq
240063a6:	f040 0001 	orreq.w	r0, r0, #1
240063aa:	3518      	adds	r5, #24
240063ac:	42ac      	cmp	r4, r5
240063ae:	bf08      	it	eq
240063b0:	f040 0001 	orreq.w	r0, r0, #1
240063b4:	3518      	adds	r5, #24
240063b6:	42ac      	cmp	r4, r5
240063b8:	bf08      	it	eq
240063ba:	f040 0001 	orreq.w	r0, r0, #1
240063be:	3518      	adds	r5, #24
240063c0:	42ac      	cmp	r4, r5
240063c2:	bf14      	ite	ne
240063c4:	4681      	movne	r9, r0
240063c6:	f040 0901 	orreq.w	r9, r0, #1
240063ca:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
240063ce:	42ac      	cmp	r4, r5
240063d0:	bf18      	it	ne
240063d2:	42b4      	cmpne	r4, r6
240063d4:	bf0c      	ite	eq
240063d6:	2501      	moveq	r5, #1
240063d8:	2500      	movne	r5, #0
240063da:	d002      	beq.n	240063e2 <HAL_DMA_Start_IT+0xee>
240063dc:	f1b9 0f00 	cmp.w	r9, #0
240063e0:	d054      	beq.n	2400648c <HAL_DMA_Start_IT+0x198>
240063e2:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240063e4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
240063e8:	f026 0601 	bic.w	r6, r6, #1
240063ec:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240063ee:	2d00      	cmp	r5, #0
240063f0:	d078      	beq.n	240064e4 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240063f2:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
240063f6:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
240063f8:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
240063fc:	b117      	cbz	r7, 24006404 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240063fe:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
24006402:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006404:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
24006408:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
2400640c:	f006 081f 	and.w	r8, r6, #31
24006410:	fa0e fe08 	lsl.w	lr, lr, r8
24006414:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24006418:	6826      	ldr	r6, [r4, #0]
2400641a:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
2400641e:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
24006420:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006422:	f8dc 3008 	ldr.w	r3, [ip, #8]
24006426:	2b40      	cmp	r3, #64	; 0x40
24006428:	f000 80e2 	beq.w	240065f0 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
2400642c:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
2400642e:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006430:	b91d      	cbnz	r5, 2400643a <HAL_DMA_Start_IT+0x146>
24006432:	f1b9 0f00 	cmp.w	r9, #0
24006436:	f000 80e1 	beq.w	240065fc <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
2400643a:	6823      	ldr	r3, [r4, #0]
2400643c:	f023 031e 	bic.w	r3, r3, #30
24006440:	f043 0316 	orr.w	r3, r3, #22
24006444:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24006446:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400644a:	b11b      	cbz	r3, 24006454 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
2400644c:	6823      	ldr	r3, [r4, #0]
2400644e:	f043 0308 	orr.w	r3, r3, #8
24006452:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24006454:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
24006458:	681a      	ldr	r2, [r3, #0]
2400645a:	03d2      	lsls	r2, r2, #15
2400645c:	d503      	bpl.n	24006466 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
2400645e:	681a      	ldr	r2, [r3, #0]
24006460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24006464:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
24006466:	b11f      	cbz	r7, 24006470 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24006468:	683b      	ldr	r3, [r7, #0]
2400646a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400646e:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
24006470:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006472:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
24006474:	f043 0301 	orr.w	r3, r3, #1
24006478:	6023      	str	r3, [r4, #0]
}
2400647a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400647e:	bf00      	nop
24006480:	40020058 	.word	0x40020058
24006484:	40020010 	.word	0x40020010
24006488:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400648c:	4f61      	ldr	r7, [pc, #388]	; (24006614 <HAL_DMA_Start_IT+0x320>)
2400648e:	4e62      	ldr	r6, [pc, #392]	; (24006618 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006490:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006494:	42b4      	cmp	r4, r6
24006496:	bf18      	it	ne
24006498:	42bc      	cmpne	r4, r7
2400649a:	f106 0628 	add.w	r6, r6, #40	; 0x28
2400649e:	bf0c      	ite	eq
240064a0:	2701      	moveq	r7, #1
240064a2:	2700      	movne	r7, #0
240064a4:	42b4      	cmp	r4, r6
240064a6:	bf08      	it	eq
240064a8:	f047 0701 	orreq.w	r7, r7, #1
240064ac:	3614      	adds	r6, #20
240064ae:	42b4      	cmp	r4, r6
240064b0:	bf08      	it	eq
240064b2:	f047 0701 	orreq.w	r7, r7, #1
240064b6:	3614      	adds	r6, #20
240064b8:	42b4      	cmp	r4, r6
240064ba:	bf08      	it	eq
240064bc:	f047 0701 	orreq.w	r7, r7, #1
240064c0:	3614      	adds	r6, #20
240064c2:	42b4      	cmp	r4, r6
240064c4:	bf08      	it	eq
240064c6:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
240064ca:	6826      	ldr	r6, [r4, #0]
240064cc:	f026 0601 	bic.w	r6, r6, #1
240064d0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240064d2:	4e52      	ldr	r6, [pc, #328]	; (2400661c <HAL_DMA_Start_IT+0x328>)
240064d4:	42b4      	cmp	r4, r6
240064d6:	bf08      	it	eq
240064d8:	f047 0701 	orreq.w	r7, r7, #1
240064dc:	b917      	cbnz	r7, 240064e4 <HAL_DMA_Start_IT+0x1f0>
240064de:	4f50      	ldr	r7, [pc, #320]	; (24006620 <HAL_DMA_Start_IT+0x32c>)
240064e0:	42bc      	cmp	r4, r7
240064e2:	d10b      	bne.n	240064fc <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240064e4:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
240064e8:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
240064ea:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
240064ee:	b117      	cbz	r7, 240064f6 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240064f0:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
240064f4:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240064f6:	f1b9 0f00 	cmp.w	r9, #0
240064fa:	d183      	bne.n	24006404 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240064fc:	4f46      	ldr	r7, [pc, #280]	; (24006618 <HAL_DMA_Start_IT+0x324>)
240064fe:	f8df e114 	ldr.w	lr, [pc, #276]	; 24006614 <HAL_DMA_Start_IT+0x320>
24006502:	4574      	cmp	r4, lr
24006504:	bf18      	it	ne
24006506:	42bc      	cmpne	r4, r7
24006508:	f10e 0e14 	add.w	lr, lr, #20
2400650c:	bf0c      	ite	eq
2400650e:	2701      	moveq	r7, #1
24006510:	2700      	movne	r7, #0
24006512:	4574      	cmp	r4, lr
24006514:	bf08      	it	eq
24006516:	f047 0701 	orreq.w	r7, r7, #1
2400651a:	f10e 0e14 	add.w	lr, lr, #20
2400651e:	4574      	cmp	r4, lr
24006520:	bf08      	it	eq
24006522:	f047 0701 	orreq.w	r7, r7, #1
24006526:	f10e 0e14 	add.w	lr, lr, #20
2400652a:	4574      	cmp	r4, lr
2400652c:	bf08      	it	eq
2400652e:	f047 0701 	orreq.w	r7, r7, #1
24006532:	f10e 0e14 	add.w	lr, lr, #20
24006536:	4574      	cmp	r4, lr
24006538:	bf08      	it	eq
2400653a:	f047 0701 	orreq.w	r7, r7, #1
2400653e:	f10e 0e14 	add.w	lr, lr, #20
24006542:	4574      	cmp	r4, lr
24006544:	bf08      	it	eq
24006546:	f047 0701 	orreq.w	r7, r7, #1
2400654a:	b917      	cbnz	r7, 24006552 <HAL_DMA_Start_IT+0x25e>
2400654c:	4f34      	ldr	r7, [pc, #208]	; (24006620 <HAL_DMA_Start_IT+0x32c>)
2400654e:	42bc      	cmp	r4, r7
24006550:	d154      	bne.n	240065fc <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006552:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24006556:	2701      	movs	r7, #1
24006558:	f000 0e1f 	and.w	lr, r0, #31
2400655c:	fa07 f70e 	lsl.w	r7, r7, lr
24006560:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24006564:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006566:	f8dc 3008 	ldr.w	r3, [ip, #8]
2400656a:	2b40      	cmp	r3, #64	; 0x40
2400656c:	d043      	beq.n	240065f6 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2400656e:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24006570:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24006572:	6823      	ldr	r3, [r4, #0]
24006574:	f023 030e 	bic.w	r3, r3, #14
24006578:	f043 030a 	orr.w	r3, r3, #10
2400657c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400657e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24006582:	2b00      	cmp	r3, #0
24006584:	d02d      	beq.n	240065e2 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24006586:	6823      	ldr	r3, [r4, #0]
24006588:	f043 0304 	orr.w	r3, r3, #4
2400658c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400658e:	4b21      	ldr	r3, [pc, #132]	; (24006614 <HAL_DMA_Start_IT+0x320>)
24006590:	4a21      	ldr	r2, [pc, #132]	; (24006618 <HAL_DMA_Start_IT+0x324>)
24006592:	4294      	cmp	r4, r2
24006594:	bf18      	it	ne
24006596:	429c      	cmpne	r4, r3
24006598:	f102 0228 	add.w	r2, r2, #40	; 0x28
2400659c:	bf0c      	ite	eq
2400659e:	2301      	moveq	r3, #1
240065a0:	2300      	movne	r3, #0
240065a2:	4294      	cmp	r4, r2
240065a4:	bf08      	it	eq
240065a6:	f043 0301 	orreq.w	r3, r3, #1
240065aa:	3214      	adds	r2, #20
240065ac:	4294      	cmp	r4, r2
240065ae:	bf08      	it	eq
240065b0:	f043 0301 	orreq.w	r3, r3, #1
240065b4:	3214      	adds	r2, #20
240065b6:	4294      	cmp	r4, r2
240065b8:	bf08      	it	eq
240065ba:	f043 0301 	orreq.w	r3, r3, #1
240065be:	3214      	adds	r2, #20
240065c0:	4294      	cmp	r4, r2
240065c2:	bf08      	it	eq
240065c4:	f043 0301 	orreq.w	r3, r3, #1
240065c8:	3214      	adds	r2, #20
240065ca:	4294      	cmp	r4, r2
240065cc:	bf08      	it	eq
240065ce:	f043 0301 	orreq.w	r3, r3, #1
240065d2:	3214      	adds	r2, #20
240065d4:	4294      	cmp	r4, r2
240065d6:	bf08      	it	eq
240065d8:	f043 0301 	orreq.w	r3, r3, #1
240065dc:	2b00      	cmp	r3, #0
240065de:	f43f af47 	beq.w	24006470 <HAL_DMA_Start_IT+0x17c>
240065e2:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
240065e6:	e735      	b.n	24006454 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
240065e8:	2001      	movs	r0, #1
240065ea:	4770      	bx	lr
  __HAL_LOCK(hdma);
240065ec:	2002      	movs	r0, #2
}
240065ee:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
240065f0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
240065f2:	60e1      	str	r1, [r4, #12]
240065f4:	e71c      	b.n	24006430 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240065f6:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
240065f8:	60e1      	str	r1, [r4, #12]
240065fa:	e7ba      	b.n	24006572 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
240065fc:	6823      	ldr	r3, [r4, #0]
240065fe:	f023 030e 	bic.w	r3, r3, #14
24006602:	f043 030a 	orr.w	r3, r3, #10
24006606:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24006608:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400660c:	2b00      	cmp	r3, #0
2400660e:	d1ba      	bne.n	24006586 <HAL_DMA_Start_IT+0x292>
24006610:	e7bd      	b.n	2400658e <HAL_DMA_Start_IT+0x29a>
24006612:	bf00      	nop
24006614:	5802541c 	.word	0x5802541c
24006618:	58025408 	.word	0x58025408
2400661c:	58025480 	.word	0x58025480
24006620:	58025494 	.word	0x58025494

24006624 <HAL_DMA_Abort>:
{
24006624:	b570      	push	{r4, r5, r6, lr}
24006626:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
24006628:	f7ff fa1c 	bl	24005a64 <HAL_GetTick>
  if(hdma == NULL)
2400662c:	2d00      	cmp	r5, #0
2400662e:	f000 8124 	beq.w	2400687a <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
24006632:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
24006636:	2b02      	cmp	r3, #2
24006638:	f040 80dd 	bne.w	240067f6 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400663c:	682c      	ldr	r4, [r5, #0]
2400663e:	4606      	mov	r6, r0
24006640:	4b8f      	ldr	r3, [pc, #572]	; (24006880 <HAL_DMA_Abort+0x25c>)
24006642:	4890      	ldr	r0, [pc, #576]	; (24006884 <HAL_DMA_Abort+0x260>)
24006644:	4a90      	ldr	r2, [pc, #576]	; (24006888 <HAL_DMA_Abort+0x264>)
24006646:	4284      	cmp	r4, r0
24006648:	bf18      	it	ne
2400664a:	429c      	cmpne	r4, r3
2400664c:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006650:	498e      	ldr	r1, [pc, #568]	; (2400688c <HAL_DMA_Abort+0x268>)
24006652:	bf0c      	ite	eq
24006654:	2301      	moveq	r3, #1
24006656:	2300      	movne	r3, #0
24006658:	4284      	cmp	r4, r0
2400665a:	bf08      	it	eq
2400665c:	f043 0301 	orreq.w	r3, r3, #1
24006660:	3018      	adds	r0, #24
24006662:	4284      	cmp	r4, r0
24006664:	bf08      	it	eq
24006666:	f043 0301 	orreq.w	r3, r3, #1
2400666a:	3018      	adds	r0, #24
2400666c:	4284      	cmp	r4, r0
2400666e:	bf08      	it	eq
24006670:	f043 0301 	orreq.w	r3, r3, #1
24006674:	3018      	adds	r0, #24
24006676:	4284      	cmp	r4, r0
24006678:	bf08      	it	eq
2400667a:	f043 0301 	orreq.w	r3, r3, #1
2400667e:	f500 7056 	add.w	r0, r0, #856	; 0x358
24006682:	4284      	cmp	r4, r0
24006684:	bf08      	it	eq
24006686:	f043 0301 	orreq.w	r3, r3, #1
2400668a:	3018      	adds	r0, #24
2400668c:	4284      	cmp	r4, r0
2400668e:	bf08      	it	eq
24006690:	f043 0301 	orreq.w	r3, r3, #1
24006694:	3018      	adds	r0, #24
24006696:	4284      	cmp	r4, r0
24006698:	bf08      	it	eq
2400669a:	f043 0301 	orreq.w	r3, r3, #1
2400669e:	3018      	adds	r0, #24
240066a0:	4284      	cmp	r4, r0
240066a2:	bf08      	it	eq
240066a4:	f043 0301 	orreq.w	r3, r3, #1
240066a8:	3018      	adds	r0, #24
240066aa:	4284      	cmp	r4, r0
240066ac:	bf08      	it	eq
240066ae:	f043 0301 	orreq.w	r3, r3, #1
240066b2:	3018      	adds	r0, #24
240066b4:	4284      	cmp	r4, r0
240066b6:	bf08      	it	eq
240066b8:	f043 0301 	orreq.w	r3, r3, #1
240066bc:	3018      	adds	r0, #24
240066be:	4284      	cmp	r4, r0
240066c0:	bf08      	it	eq
240066c2:	f043 0301 	orreq.w	r3, r3, #1
240066c6:	3018      	adds	r0, #24
240066c8:	4284      	cmp	r4, r0
240066ca:	bf08      	it	eq
240066cc:	f043 0301 	orreq.w	r3, r3, #1
240066d0:	428c      	cmp	r4, r1
240066d2:	bf18      	it	ne
240066d4:	4294      	cmpne	r4, r2
240066d6:	bf0c      	ite	eq
240066d8:	2201      	moveq	r2, #1
240066da:	2200      	movne	r2, #0
240066dc:	d002      	beq.n	240066e4 <HAL_DMA_Abort+0xc0>
240066de:	2b00      	cmp	r3, #0
240066e0:	f000 8090 	beq.w	24006804 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240066e4:	6821      	ldr	r1, [r4, #0]
240066e6:	f021 011e 	bic.w	r1, r1, #30
240066ea:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240066ec:	6961      	ldr	r1, [r4, #20]
240066ee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
240066f2:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240066f4:	2a00      	cmp	r2, #0
240066f6:	f000 80b0 	beq.w	2400685a <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240066fa:	6e2a      	ldr	r2, [r5, #96]	; 0x60
240066fc:	6813      	ldr	r3, [r2, #0]
240066fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24006702:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
24006704:	6823      	ldr	r3, [r4, #0]
24006706:	f023 0301 	bic.w	r3, r3, #1
2400670a:	6023      	str	r3, [r4, #0]
2400670c:	e005      	b.n	2400671a <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400670e:	f7ff f9a9 	bl	24005a64 <HAL_GetTick>
24006712:	1b83      	subs	r3, r0, r6
24006714:	2b05      	cmp	r3, #5
24006716:	f200 80a6 	bhi.w	24006866 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
2400671a:	6823      	ldr	r3, [r4, #0]
2400671c:	07db      	lsls	r3, r3, #31
2400671e:	d4f6      	bmi.n	2400670e <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006720:	682a      	ldr	r2, [r5, #0]
24006722:	4b57      	ldr	r3, [pc, #348]	; (24006880 <HAL_DMA_Abort+0x25c>)
24006724:	4857      	ldr	r0, [pc, #348]	; (24006884 <HAL_DMA_Abort+0x260>)
24006726:	495a      	ldr	r1, [pc, #360]	; (24006890 <HAL_DMA_Abort+0x26c>)
24006728:	4282      	cmp	r2, r0
2400672a:	bf18      	it	ne
2400672c:	429a      	cmpne	r2, r3
2400672e:	f100 0048 	add.w	r0, r0, #72	; 0x48
24006732:	bf0c      	ite	eq
24006734:	2301      	moveq	r3, #1
24006736:	2300      	movne	r3, #0
24006738:	428a      	cmp	r2, r1
2400673a:	bf08      	it	eq
2400673c:	f043 0301 	orreq.w	r3, r3, #1
24006740:	3130      	adds	r1, #48	; 0x30
24006742:	4282      	cmp	r2, r0
24006744:	bf08      	it	eq
24006746:	f043 0301 	orreq.w	r3, r3, #1
2400674a:	3030      	adds	r0, #48	; 0x30
2400674c:	428a      	cmp	r2, r1
2400674e:	bf08      	it	eq
24006750:	f043 0301 	orreq.w	r3, r3, #1
24006754:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006758:	4282      	cmp	r2, r0
2400675a:	bf08      	it	eq
2400675c:	f043 0301 	orreq.w	r3, r3, #1
24006760:	f500 705c 	add.w	r0, r0, #880	; 0x370
24006764:	428a      	cmp	r2, r1
24006766:	bf08      	it	eq
24006768:	f043 0301 	orreq.w	r3, r3, #1
2400676c:	3130      	adds	r1, #48	; 0x30
2400676e:	4282      	cmp	r2, r0
24006770:	bf08      	it	eq
24006772:	f043 0301 	orreq.w	r3, r3, #1
24006776:	3030      	adds	r0, #48	; 0x30
24006778:	428a      	cmp	r2, r1
2400677a:	bf08      	it	eq
2400677c:	f043 0301 	orreq.w	r3, r3, #1
24006780:	3130      	adds	r1, #48	; 0x30
24006782:	4282      	cmp	r2, r0
24006784:	bf08      	it	eq
24006786:	f043 0301 	orreq.w	r3, r3, #1
2400678a:	3030      	adds	r0, #48	; 0x30
2400678c:	428a      	cmp	r2, r1
2400678e:	bf08      	it	eq
24006790:	f043 0301 	orreq.w	r3, r3, #1
24006794:	3130      	adds	r1, #48	; 0x30
24006796:	4282      	cmp	r2, r0
24006798:	bf08      	it	eq
2400679a:	f043 0301 	orreq.w	r3, r3, #1
2400679e:	428a      	cmp	r2, r1
240067a0:	bf08      	it	eq
240067a2:	f043 0301 	orreq.w	r3, r3, #1
240067a6:	3118      	adds	r1, #24
240067a8:	428a      	cmp	r2, r1
240067aa:	bf08      	it	eq
240067ac:	f043 0301 	orreq.w	r3, r3, #1
240067b0:	b933      	cbnz	r3, 240067c0 <HAL_DMA_Abort+0x19c>
240067b2:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
240067b6:	4b35      	ldr	r3, [pc, #212]	; (2400688c <HAL_DMA_Abort+0x268>)
240067b8:	429a      	cmp	r2, r3
240067ba:	bf18      	it	ne
240067bc:	428a      	cmpne	r2, r1
240067be:	d16f      	bne.n	240068a0 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240067c0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
240067c2:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240067c4:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240067c6:	f002 021f 	and.w	r2, r2, #31
240067ca:	4093      	lsls	r3, r2
240067cc:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
240067ce:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240067d0:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
240067d4:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
240067d6:	b133      	cbz	r3, 240067e6 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240067d8:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240067da:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240067de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240067e2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240067e4:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
240067e6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
240067e8:	2201      	movs	r2, #1
  return HAL_OK;
240067ea:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
240067ec:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240067f0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
240067f4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240067f6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
240067f8:	2300      	movs	r3, #0
    return HAL_ERROR;
240067fa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240067fc:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
240067fe:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
24006802:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006804:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006806:	4923      	ldr	r1, [pc, #140]	; (24006894 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24006808:	f022 020e 	bic.w	r2, r2, #14
2400680c:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400680e:	4a22      	ldr	r2, [pc, #136]	; (24006898 <HAL_DMA_Abort+0x274>)
24006810:	428c      	cmp	r4, r1
24006812:	bf18      	it	ne
24006814:	4294      	cmpne	r4, r2
24006816:	f101 0128 	add.w	r1, r1, #40	; 0x28
2400681a:	bf0c      	ite	eq
2400681c:	2201      	moveq	r2, #1
2400681e:	2200      	movne	r2, #0
24006820:	428c      	cmp	r4, r1
24006822:	bf08      	it	eq
24006824:	f042 0201 	orreq.w	r2, r2, #1
24006828:	3114      	adds	r1, #20
2400682a:	428c      	cmp	r4, r1
2400682c:	bf08      	it	eq
2400682e:	f042 0201 	orreq.w	r2, r2, #1
24006832:	3114      	adds	r1, #20
24006834:	428c      	cmp	r4, r1
24006836:	bf08      	it	eq
24006838:	f042 0201 	orreq.w	r2, r2, #1
2400683c:	3114      	adds	r1, #20
2400683e:	428c      	cmp	r4, r1
24006840:	bf08      	it	eq
24006842:	f042 0201 	orreq.w	r2, r2, #1
24006846:	3114      	adds	r1, #20
24006848:	428c      	cmp	r4, r1
2400684a:	bf08      	it	eq
2400684c:	f042 0201 	orreq.w	r2, r2, #1
24006850:	b91a      	cbnz	r2, 2400685a <HAL_DMA_Abort+0x236>
24006852:	4a12      	ldr	r2, [pc, #72]	; (2400689c <HAL_DMA_Abort+0x278>)
24006854:	4294      	cmp	r4, r2
24006856:	f47f af55 	bne.w	24006704 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400685a:	6e29      	ldr	r1, [r5, #96]	; 0x60
2400685c:	680a      	ldr	r2, [r1, #0]
2400685e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24006862:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
24006864:	e74e      	b.n	24006704 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24006866:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24006868:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
2400686a:	2300      	movs	r3, #0
        return HAL_ERROR;
2400686c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400686e:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
24006870:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
24006874:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
24006878:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
2400687a:	2001      	movs	r0, #1
}
2400687c:	bd70      	pop	{r4, r5, r6, pc}
2400687e:	bf00      	nop
24006880:	40020058 	.word	0x40020058
24006884:	40020040 	.word	0x40020040
24006888:	40020010 	.word	0x40020010
2400688c:	40020028 	.word	0x40020028
24006890:	40020070 	.word	0x40020070
24006894:	58025408 	.word	0x58025408
24006898:	5802541c 	.word	0x5802541c
2400689c:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240068a0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
240068a2:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240068a4:	4b16      	ldr	r3, [pc, #88]	; (24006900 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240068a6:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240068aa:	4c16      	ldr	r4, [pc, #88]	; (24006904 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240068ac:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240068ae:	42a2      	cmp	r2, r4
240068b0:	bf18      	it	ne
240068b2:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240068b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240068b6:	bf0c      	ite	eq
240068b8:	2301      	moveq	r3, #1
240068ba:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240068bc:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240068be:	4812      	ldr	r0, [pc, #72]	; (24006908 <HAL_DMA_Abort+0x2e4>)
240068c0:	4912      	ldr	r1, [pc, #72]	; (2400690c <HAL_DMA_Abort+0x2e8>)
240068c2:	4282      	cmp	r2, r0
240068c4:	bf08      	it	eq
240068c6:	f043 0301 	orreq.w	r3, r3, #1
240068ca:	3028      	adds	r0, #40	; 0x28
240068cc:	428a      	cmp	r2, r1
240068ce:	bf08      	it	eq
240068d0:	f043 0301 	orreq.w	r3, r3, #1
240068d4:	3128      	adds	r1, #40	; 0x28
240068d6:	4282      	cmp	r2, r0
240068d8:	bf08      	it	eq
240068da:	f043 0301 	orreq.w	r3, r3, #1
240068de:	428a      	cmp	r2, r1
240068e0:	bf08      	it	eq
240068e2:	f043 0301 	orreq.w	r3, r3, #1
240068e6:	3114      	adds	r1, #20
240068e8:	428a      	cmp	r2, r1
240068ea:	bf08      	it	eq
240068ec:	f043 0301 	orreq.w	r3, r3, #1
240068f0:	2b00      	cmp	r3, #0
240068f2:	f47f af6c 	bne.w	240067ce <HAL_DMA_Abort+0x1aa>
240068f6:	4b06      	ldr	r3, [pc, #24]	; (24006910 <HAL_DMA_Abort+0x2ec>)
240068f8:	429a      	cmp	r2, r3
240068fa:	f43f af68 	beq.w	240067ce <HAL_DMA_Abort+0x1aa>
240068fe:	e772      	b.n	240067e6 <HAL_DMA_Abort+0x1c2>
24006900:	5802541c 	.word	0x5802541c
24006904:	58025408 	.word	0x58025408
24006908:	58025430 	.word	0x58025430
2400690c:	58025444 	.word	0x58025444
24006910:	58025494 	.word	0x58025494

24006914 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24006914:	2800      	cmp	r0, #0
24006916:	d05f      	beq.n	240069d8 <HAL_DMA_Abort_IT+0xc4>
{
24006918:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
2400691a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
2400691e:	4603      	mov	r3, r0
24006920:	2a02      	cmp	r2, #2
24006922:	d155      	bne.n	240069d0 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006924:	6801      	ldr	r1, [r0, #0]
24006926:	4a57      	ldr	r2, [pc, #348]	; (24006a84 <HAL_DMA_Abort_IT+0x170>)
24006928:	4291      	cmp	r1, r2
2400692a:	d048      	beq.n	240069be <HAL_DMA_Abort_IT+0xaa>
2400692c:	3218      	adds	r2, #24
2400692e:	4291      	cmp	r1, r2
24006930:	d045      	beq.n	240069be <HAL_DMA_Abort_IT+0xaa>
24006932:	3230      	adds	r2, #48	; 0x30
24006934:	4c54      	ldr	r4, [pc, #336]	; (24006a88 <HAL_DMA_Abort_IT+0x174>)
24006936:	4855      	ldr	r0, [pc, #340]	; (24006a8c <HAL_DMA_Abort_IT+0x178>)
24006938:	42a1      	cmp	r1, r4
2400693a:	bf18      	it	ne
2400693c:	4291      	cmpne	r1, r2
2400693e:	f104 0448 	add.w	r4, r4, #72	; 0x48
24006942:	bf0c      	ite	eq
24006944:	2201      	moveq	r2, #1
24006946:	2200      	movne	r2, #0
24006948:	4281      	cmp	r1, r0
2400694a:	bf08      	it	eq
2400694c:	f042 0201 	orreq.w	r2, r2, #1
24006950:	3030      	adds	r0, #48	; 0x30
24006952:	42a1      	cmp	r1, r4
24006954:	bf08      	it	eq
24006956:	f042 0201 	orreq.w	r2, r2, #1
2400695a:	3430      	adds	r4, #48	; 0x30
2400695c:	4281      	cmp	r1, r0
2400695e:	bf08      	it	eq
24006960:	f042 0201 	orreq.w	r2, r2, #1
24006964:	f500 705c 	add.w	r0, r0, #880	; 0x370
24006968:	42a1      	cmp	r1, r4
2400696a:	bf08      	it	eq
2400696c:	f042 0201 	orreq.w	r2, r2, #1
24006970:	f504 745c 	add.w	r4, r4, #880	; 0x370
24006974:	4281      	cmp	r1, r0
24006976:	bf08      	it	eq
24006978:	f042 0201 	orreq.w	r2, r2, #1
2400697c:	3030      	adds	r0, #48	; 0x30
2400697e:	42a1      	cmp	r1, r4
24006980:	bf08      	it	eq
24006982:	f042 0201 	orreq.w	r2, r2, #1
24006986:	3430      	adds	r4, #48	; 0x30
24006988:	4281      	cmp	r1, r0
2400698a:	bf08      	it	eq
2400698c:	f042 0201 	orreq.w	r2, r2, #1
24006990:	3030      	adds	r0, #48	; 0x30
24006992:	42a1      	cmp	r1, r4
24006994:	bf08      	it	eq
24006996:	f042 0201 	orreq.w	r2, r2, #1
2400699a:	3430      	adds	r4, #48	; 0x30
2400699c:	4281      	cmp	r1, r0
2400699e:	bf08      	it	eq
240069a0:	f042 0201 	orreq.w	r2, r2, #1
240069a4:	3030      	adds	r0, #48	; 0x30
240069a6:	42a1      	cmp	r1, r4
240069a8:	bf08      	it	eq
240069aa:	f042 0201 	orreq.w	r2, r2, #1
240069ae:	4281      	cmp	r1, r0
240069b0:	bf08      	it	eq
240069b2:	f042 0201 	orreq.w	r2, r2, #1
240069b6:	b912      	cbnz	r2, 240069be <HAL_DMA_Abort_IT+0xaa>
240069b8:	4a35      	ldr	r2, [pc, #212]	; (24006a90 <HAL_DMA_Abort_IT+0x17c>)
240069ba:	4291      	cmp	r1, r2
240069bc:	d10e      	bne.n	240069dc <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
240069be:	2204      	movs	r2, #4
  return HAL_OK;
240069c0:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
240069c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
240069c6:	680b      	ldr	r3, [r1, #0]
240069c8:	f023 0301 	bic.w	r3, r3, #1
240069cc:	600b      	str	r3, [r1, #0]
}
240069ce:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240069d0:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
240069d2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240069d4:	655a      	str	r2, [r3, #84]	; 0x54
}
240069d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
240069d8:	2001      	movs	r0, #1
}
240069da:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240069dc:	4a2d      	ldr	r2, [pc, #180]	; (24006a94 <HAL_DMA_Abort_IT+0x180>)
240069de:	4d2e      	ldr	r5, [pc, #184]	; (24006a98 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240069e0:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240069e2:	42a9      	cmp	r1, r5
240069e4:	bf18      	it	ne
240069e6:	4291      	cmpne	r1, r2
240069e8:	4c2c      	ldr	r4, [pc, #176]	; (24006a9c <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240069ea:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240069ee:	f105 053c 	add.w	r5, r5, #60	; 0x3c
240069f2:	bf0c      	ite	eq
240069f4:	2201      	moveq	r2, #1
240069f6:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240069f8:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240069fa:	42a1      	cmp	r1, r4
240069fc:	bf08      	it	eq
240069fe:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
24006a02:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006a04:	3428      	adds	r4, #40	; 0x28
24006a06:	42a9      	cmp	r1, r5
24006a08:	bf08      	it	eq
24006a0a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
24006a0e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006a12:	42a1      	cmp	r1, r4
24006a14:	bf08      	it	eq
24006a16:	f042 0201 	orreq.w	r2, r2, #1
24006a1a:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
24006a1c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006a1e:	42a1      	cmp	r1, r4
24006a20:	bf08      	it	eq
24006a22:	f042 0201 	orreq.w	r2, r2, #1
24006a26:	481e      	ldr	r0, [pc, #120]	; (24006aa0 <HAL_DMA_Abort_IT+0x18c>)
24006a28:	4281      	cmp	r1, r0
24006a2a:	bf08      	it	eq
24006a2c:	f042 0201 	orreq.w	r2, r2, #1
24006a30:	b912      	cbnz	r2, 24006a38 <HAL_DMA_Abort_IT+0x124>
24006a32:	4a1c      	ldr	r2, [pc, #112]	; (24006aa4 <HAL_DMA_Abort_IT+0x190>)
24006a34:	4291      	cmp	r1, r2
24006a36:	d117      	bne.n	24006a68 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a38:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24006a3a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a3c:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006a40:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a42:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006a46:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a4a:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006a4c:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24006a4e:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24006a50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006a52:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
24006a56:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24006a58:	b132      	cbz	r2, 24006a68 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006a5a:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006a5c:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24006a60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24006a64:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006a66:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
24006a68:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
24006a6a:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24006a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24006a6e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24006a72:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24006a76:	b11a      	cbz	r2, 24006a80 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
24006a78:	4618      	mov	r0, r3
24006a7a:	4790      	blx	r2
  return HAL_OK;
24006a7c:	4620      	mov	r0, r4
}
24006a7e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
24006a80:	4610      	mov	r0, r2
}
24006a82:	bd38      	pop	{r3, r4, r5, pc}
24006a84:	40020010 	.word	0x40020010
24006a88:	40020040 	.word	0x40020040
24006a8c:	40020070 	.word	0x40020070
24006a90:	400204b8 	.word	0x400204b8
24006a94:	5802541c 	.word	0x5802541c
24006a98:	58025408 	.word	0x58025408
24006a9c:	58025430 	.word	0x58025430
24006aa0:	58025480 	.word	0x58025480
24006aa4:	58025494 	.word	0x58025494

24006aa8 <HAL_DMA_IRQHandler>:
{
24006aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
24006aac:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24006aae:	4b9c      	ldr	r3, [pc, #624]	; (24006d20 <HAL_DMA_IRQHandler+0x278>)
{
24006ab0:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006ab2:	4e9c      	ldr	r6, [pc, #624]	; (24006d24 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
24006ab4:	681d      	ldr	r5, [r3, #0]
{
24006ab6:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
24006ab8:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006aba:	6803      	ldr	r3, [r0, #0]
24006abc:	4a9a      	ldr	r2, [pc, #616]	; (24006d28 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006abe:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006ac0:	4293      	cmp	r3, r2
24006ac2:	bf18      	it	ne
24006ac4:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
24006ac6:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006ac8:	bf08      	it	eq
24006aca:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
24006acc:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24006ace:	bf18      	it	ne
24006ad0:	2600      	movne	r6, #0
24006ad2:	d045      	beq.n	24006b60 <HAL_DMA_IRQHandler+0xb8>
24006ad4:	3218      	adds	r2, #24
24006ad6:	4895      	ldr	r0, [pc, #596]	; (24006d2c <HAL_DMA_IRQHandler+0x284>)
24006ad8:	4283      	cmp	r3, r0
24006ada:	bf18      	it	ne
24006adc:	4293      	cmpne	r3, r2
24006ade:	f100 0018 	add.w	r0, r0, #24
24006ae2:	bf0c      	ite	eq
24006ae4:	2201      	moveq	r2, #1
24006ae6:	2200      	movne	r2, #0
24006ae8:	4283      	cmp	r3, r0
24006aea:	bf08      	it	eq
24006aec:	f042 0201 	orreq.w	r2, r2, #1
24006af0:	3018      	adds	r0, #24
24006af2:	4283      	cmp	r3, r0
24006af4:	bf08      	it	eq
24006af6:	f042 0201 	orreq.w	r2, r2, #1
24006afa:	3018      	adds	r0, #24
24006afc:	4283      	cmp	r3, r0
24006afe:	bf08      	it	eq
24006b00:	f042 0201 	orreq.w	r2, r2, #1
24006b04:	3018      	adds	r0, #24
24006b06:	4283      	cmp	r3, r0
24006b08:	bf08      	it	eq
24006b0a:	f042 0201 	orreq.w	r2, r2, #1
24006b0e:	f500 7056 	add.w	r0, r0, #856	; 0x358
24006b12:	4283      	cmp	r3, r0
24006b14:	bf08      	it	eq
24006b16:	f042 0201 	orreq.w	r2, r2, #1
24006b1a:	3018      	adds	r0, #24
24006b1c:	4283      	cmp	r3, r0
24006b1e:	bf08      	it	eq
24006b20:	f042 0201 	orreq.w	r2, r2, #1
24006b24:	3018      	adds	r0, #24
24006b26:	4283      	cmp	r3, r0
24006b28:	bf08      	it	eq
24006b2a:	f042 0201 	orreq.w	r2, r2, #1
24006b2e:	3018      	adds	r0, #24
24006b30:	4283      	cmp	r3, r0
24006b32:	bf08      	it	eq
24006b34:	f042 0201 	orreq.w	r2, r2, #1
24006b38:	3018      	adds	r0, #24
24006b3a:	4283      	cmp	r3, r0
24006b3c:	bf08      	it	eq
24006b3e:	f042 0201 	orreq.w	r2, r2, #1
24006b42:	3018      	adds	r0, #24
24006b44:	4283      	cmp	r3, r0
24006b46:	bf08      	it	eq
24006b48:	f042 0201 	orreq.w	r2, r2, #1
24006b4c:	3018      	adds	r0, #24
24006b4e:	4283      	cmp	r3, r0
24006b50:	bf08      	it	eq
24006b52:	f042 0201 	orreq.w	r2, r2, #1
24006b56:	b91a      	cbnz	r2, 24006b60 <HAL_DMA_IRQHandler+0xb8>
24006b58:	4a75      	ldr	r2, [pc, #468]	; (24006d30 <HAL_DMA_IRQHandler+0x288>)
24006b5a:	4293      	cmp	r3, r2
24006b5c:	f040 8250 	bne.w	24007000 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006b60:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
24006b64:	2208      	movs	r2, #8
24006b66:	f001 0c1f 	and.w	ip, r1, #31
24006b6a:	fa02 f20c 	lsl.w	r2, r2, ip
24006b6e:	4217      	tst	r7, r2
24006b70:	f040 8188 	bne.w	24006e84 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006b74:	fa27 f20c 	lsr.w	r2, r7, ip
24006b78:	07d2      	lsls	r2, r2, #31
24006b7a:	d50c      	bpl.n	24006b96 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24006b7c:	695a      	ldr	r2, [r3, #20]
24006b7e:	0610      	lsls	r0, r2, #24
24006b80:	d509      	bpl.n	24006b96 <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006b82:	2201      	movs	r2, #1
24006b84:	fa02 f20c 	lsl.w	r2, r2, ip
24006b88:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24006b8a:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
24006b8e:	f042 0202 	orr.w	r2, r2, #2
24006b92:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006b96:	f04f 0e04 	mov.w	lr, #4
24006b9a:	fa0e f00c 	lsl.w	r0, lr, ip
24006b9e:	4238      	tst	r0, r7
24006ba0:	d05b      	beq.n	24006c5a <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006ba2:	2e00      	cmp	r6, #0
24006ba4:	d14f      	bne.n	24006c46 <HAL_DMA_IRQHandler+0x19e>
24006ba6:	4a61      	ldr	r2, [pc, #388]	; (24006d2c <HAL_DMA_IRQHandler+0x284>)
24006ba8:	f8df 8188 	ldr.w	r8, [pc, #392]	; 24006d34 <HAL_DMA_IRQHandler+0x28c>
24006bac:	4543      	cmp	r3, r8
24006bae:	bf18      	it	ne
24006bb0:	4293      	cmpne	r3, r2
24006bb2:	f108 0830 	add.w	r8, r8, #48	; 0x30
24006bb6:	bf0c      	ite	eq
24006bb8:	2201      	moveq	r2, #1
24006bba:	2200      	movne	r2, #0
24006bbc:	4543      	cmp	r3, r8
24006bbe:	bf08      	it	eq
24006bc0:	f042 0201 	orreq.w	r2, r2, #1
24006bc4:	f108 0818 	add.w	r8, r8, #24
24006bc8:	4543      	cmp	r3, r8
24006bca:	bf08      	it	eq
24006bcc:	f042 0201 	orreq.w	r2, r2, #1
24006bd0:	f108 0818 	add.w	r8, r8, #24
24006bd4:	4543      	cmp	r3, r8
24006bd6:	bf08      	it	eq
24006bd8:	f042 0201 	orreq.w	r2, r2, #1
24006bdc:	f108 0818 	add.w	r8, r8, #24
24006be0:	4543      	cmp	r3, r8
24006be2:	bf08      	it	eq
24006be4:	f042 0201 	orreq.w	r2, r2, #1
24006be8:	f508 7856 	add.w	r8, r8, #856	; 0x358
24006bec:	4543      	cmp	r3, r8
24006bee:	bf08      	it	eq
24006bf0:	f042 0201 	orreq.w	r2, r2, #1
24006bf4:	f108 0818 	add.w	r8, r8, #24
24006bf8:	4543      	cmp	r3, r8
24006bfa:	bf08      	it	eq
24006bfc:	f042 0201 	orreq.w	r2, r2, #1
24006c00:	f108 0818 	add.w	r8, r8, #24
24006c04:	4543      	cmp	r3, r8
24006c06:	bf08      	it	eq
24006c08:	f042 0201 	orreq.w	r2, r2, #1
24006c0c:	f108 0818 	add.w	r8, r8, #24
24006c10:	4543      	cmp	r3, r8
24006c12:	bf08      	it	eq
24006c14:	f042 0201 	orreq.w	r2, r2, #1
24006c18:	f108 0818 	add.w	r8, r8, #24
24006c1c:	4543      	cmp	r3, r8
24006c1e:	bf08      	it	eq
24006c20:	f042 0201 	orreq.w	r2, r2, #1
24006c24:	f108 0818 	add.w	r8, r8, #24
24006c28:	4543      	cmp	r3, r8
24006c2a:	bf08      	it	eq
24006c2c:	f042 0201 	orreq.w	r2, r2, #1
24006c30:	f108 0818 	add.w	r8, r8, #24
24006c34:	4543      	cmp	r3, r8
24006c36:	bf08      	it	eq
24006c38:	f042 0201 	orreq.w	r2, r2, #1
24006c3c:	b91a      	cbnz	r2, 24006c46 <HAL_DMA_IRQHandler+0x19e>
24006c3e:	4a3c      	ldr	r2, [pc, #240]	; (24006d30 <HAL_DMA_IRQHandler+0x288>)
24006c40:	4293      	cmp	r3, r2
24006c42:	f040 8219 	bne.w	24007078 <HAL_DMA_IRQHandler+0x5d0>
24006c46:	681a      	ldr	r2, [r3, #0]
24006c48:	0792      	lsls	r2, r2, #30
24006c4a:	d506      	bpl.n	24006c5a <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006c4c:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24006c4e:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
24006c52:	f042 0204 	orr.w	r2, r2, #4
24006c56:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006c5a:	2210      	movs	r2, #16
24006c5c:	fa02 fc0c 	lsl.w	ip, r2, ip
24006c60:	ea1c 0f07 	tst.w	ip, r7
24006c64:	d06c      	beq.n	24006d40 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24006c66:	2e00      	cmp	r6, #0
24006c68:	d145      	bne.n	24006cf6 <HAL_DMA_IRQHandler+0x24e>
24006c6a:	4a30      	ldr	r2, [pc, #192]	; (24006d2c <HAL_DMA_IRQHandler+0x284>)
24006c6c:	4e31      	ldr	r6, [pc, #196]	; (24006d34 <HAL_DMA_IRQHandler+0x28c>)
24006c6e:	42b3      	cmp	r3, r6
24006c70:	bf18      	it	ne
24006c72:	4293      	cmpne	r3, r2
24006c74:	f106 0630 	add.w	r6, r6, #48	; 0x30
24006c78:	bf0c      	ite	eq
24006c7a:	2201      	moveq	r2, #1
24006c7c:	2200      	movne	r2, #0
24006c7e:	42b3      	cmp	r3, r6
24006c80:	bf08      	it	eq
24006c82:	f042 0201 	orreq.w	r2, r2, #1
24006c86:	3618      	adds	r6, #24
24006c88:	42b3      	cmp	r3, r6
24006c8a:	bf08      	it	eq
24006c8c:	f042 0201 	orreq.w	r2, r2, #1
24006c90:	3618      	adds	r6, #24
24006c92:	42b3      	cmp	r3, r6
24006c94:	bf08      	it	eq
24006c96:	f042 0201 	orreq.w	r2, r2, #1
24006c9a:	3618      	adds	r6, #24
24006c9c:	42b3      	cmp	r3, r6
24006c9e:	bf08      	it	eq
24006ca0:	f042 0201 	orreq.w	r2, r2, #1
24006ca4:	f506 7656 	add.w	r6, r6, #856	; 0x358
24006ca8:	42b3      	cmp	r3, r6
24006caa:	bf08      	it	eq
24006cac:	f042 0201 	orreq.w	r2, r2, #1
24006cb0:	3618      	adds	r6, #24
24006cb2:	42b3      	cmp	r3, r6
24006cb4:	bf08      	it	eq
24006cb6:	f042 0201 	orreq.w	r2, r2, #1
24006cba:	3618      	adds	r6, #24
24006cbc:	42b3      	cmp	r3, r6
24006cbe:	bf08      	it	eq
24006cc0:	f042 0201 	orreq.w	r2, r2, #1
24006cc4:	3618      	adds	r6, #24
24006cc6:	42b3      	cmp	r3, r6
24006cc8:	bf08      	it	eq
24006cca:	f042 0201 	orreq.w	r2, r2, #1
24006cce:	3618      	adds	r6, #24
24006cd0:	42b3      	cmp	r3, r6
24006cd2:	bf08      	it	eq
24006cd4:	f042 0201 	orreq.w	r2, r2, #1
24006cd8:	3618      	adds	r6, #24
24006cda:	42b3      	cmp	r3, r6
24006cdc:	bf08      	it	eq
24006cde:	f042 0201 	orreq.w	r2, r2, #1
24006ce2:	3618      	adds	r6, #24
24006ce4:	42b3      	cmp	r3, r6
24006ce6:	bf08      	it	eq
24006ce8:	f042 0201 	orreq.w	r2, r2, #1
24006cec:	b91a      	cbnz	r2, 24006cf6 <HAL_DMA_IRQHandler+0x24e>
24006cee:	4a10      	ldr	r2, [pc, #64]	; (24006d30 <HAL_DMA_IRQHandler+0x288>)
24006cf0:	4293      	cmp	r3, r2
24006cf2:	f040 81c9 	bne.w	24007088 <HAL_DMA_IRQHandler+0x5e0>
24006cf6:	681a      	ldr	r2, [r3, #0]
24006cf8:	0710      	lsls	r0, r2, #28
24006cfa:	d521      	bpl.n	24006d40 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24006cfc:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006d00:	681a      	ldr	r2, [r3, #0]
24006d02:	0356      	lsls	r6, r2, #13
24006d04:	f100 814c 	bmi.w	24006fa0 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24006d08:	681a      	ldr	r2, [r3, #0]
24006d0a:	05d2      	lsls	r2, r2, #23
24006d0c:	d403      	bmi.n	24006d16 <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006d0e:	681a      	ldr	r2, [r3, #0]
24006d10:	f022 0208 	bic.w	r2, r2, #8
24006d14:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24006d16:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
24006d1a:	b18b      	cbz	r3, 24006d40 <HAL_DMA_IRQHandler+0x298>
24006d1c:	e00c      	b.n	24006d38 <HAL_DMA_IRQHandler+0x290>
24006d1e:	bf00      	nop
24006d20:	20000750 	.word	0x20000750
24006d24:	40020010 	.word	0x40020010
24006d28:	40020028 	.word	0x40020028
24006d2c:	40020058 	.word	0x40020058
24006d30:	400204b8 	.word	0x400204b8
24006d34:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
24006d38:	4648      	mov	r0, r9
24006d3a:	4798      	blx	r3
24006d3c:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006d40:	f001 011f 	and.w	r1, r1, #31
24006d44:	2620      	movs	r6, #32
24006d46:	408e      	lsls	r6, r1
24006d48:	423e      	tst	r6, r7
24006d4a:	d068      	beq.n	24006e1e <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24006d4c:	f8d9 2000 	ldr.w	r2, [r9]
24006d50:	4ba5      	ldr	r3, [pc, #660]	; (24006fe8 <HAL_DMA_IRQHandler+0x540>)
24006d52:	4fa6      	ldr	r7, [pc, #664]	; (24006fec <HAL_DMA_IRQHandler+0x544>)
24006d54:	42ba      	cmp	r2, r7
24006d56:	bf18      	it	ne
24006d58:	429a      	cmpne	r2, r3
24006d5a:	f107 0718 	add.w	r7, r7, #24
24006d5e:	bf0c      	ite	eq
24006d60:	2301      	moveq	r3, #1
24006d62:	2300      	movne	r3, #0
24006d64:	42ba      	cmp	r2, r7
24006d66:	bf08      	it	eq
24006d68:	f043 0301 	orreq.w	r3, r3, #1
24006d6c:	3718      	adds	r7, #24
24006d6e:	42ba      	cmp	r2, r7
24006d70:	bf08      	it	eq
24006d72:	f043 0301 	orreq.w	r3, r3, #1
24006d76:	3718      	adds	r7, #24
24006d78:	42ba      	cmp	r2, r7
24006d7a:	bf08      	it	eq
24006d7c:	f043 0301 	orreq.w	r3, r3, #1
24006d80:	3718      	adds	r7, #24
24006d82:	42ba      	cmp	r2, r7
24006d84:	bf08      	it	eq
24006d86:	f043 0301 	orreq.w	r3, r3, #1
24006d8a:	3718      	adds	r7, #24
24006d8c:	42ba      	cmp	r2, r7
24006d8e:	bf08      	it	eq
24006d90:	f043 0301 	orreq.w	r3, r3, #1
24006d94:	3718      	adds	r7, #24
24006d96:	42ba      	cmp	r2, r7
24006d98:	bf08      	it	eq
24006d9a:	f043 0301 	orreq.w	r3, r3, #1
24006d9e:	f507 7756 	add.w	r7, r7, #856	; 0x358
24006da2:	42ba      	cmp	r2, r7
24006da4:	bf08      	it	eq
24006da6:	f043 0301 	orreq.w	r3, r3, #1
24006daa:	3718      	adds	r7, #24
24006dac:	42ba      	cmp	r2, r7
24006dae:	bf08      	it	eq
24006db0:	f043 0301 	orreq.w	r3, r3, #1
24006db4:	3718      	adds	r7, #24
24006db6:	42ba      	cmp	r2, r7
24006db8:	bf08      	it	eq
24006dba:	f043 0301 	orreq.w	r3, r3, #1
24006dbe:	3718      	adds	r7, #24
24006dc0:	42ba      	cmp	r2, r7
24006dc2:	bf08      	it	eq
24006dc4:	f043 0301 	orreq.w	r3, r3, #1
24006dc8:	3718      	adds	r7, #24
24006dca:	42ba      	cmp	r2, r7
24006dcc:	bf08      	it	eq
24006dce:	f043 0301 	orreq.w	r3, r3, #1
24006dd2:	3718      	adds	r7, #24
24006dd4:	42ba      	cmp	r2, r7
24006dd6:	bf08      	it	eq
24006dd8:	f043 0301 	orreq.w	r3, r3, #1
24006ddc:	3718      	adds	r7, #24
24006dde:	42ba      	cmp	r2, r7
24006de0:	bf08      	it	eq
24006de2:	f043 0301 	orreq.w	r3, r3, #1
24006de6:	b91b      	cbnz	r3, 24006df0 <HAL_DMA_IRQHandler+0x348>
24006de8:	4b81      	ldr	r3, [pc, #516]	; (24006ff0 <HAL_DMA_IRQHandler+0x548>)
24006dea:	429a      	cmp	r2, r3
24006dec:	f040 8162 	bne.w	240070b4 <HAL_DMA_IRQHandler+0x60c>
24006df0:	6813      	ldr	r3, [r2, #0]
24006df2:	06db      	lsls	r3, r3, #27
24006df4:	d513      	bpl.n	24006e1e <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24006df6:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24006df8:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
24006dfc:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24006dfe:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24006e00:	f000 80ae 	beq.w	24006f60 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006e04:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006e08:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006e0a:	f000 80d3 	beq.w	24006fb4 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006e0e:	031c      	lsls	r4, r3, #12
24006e10:	f140 80de 	bpl.w	24006fd0 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
24006e14:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
24006e18:	b10b      	cbz	r3, 24006e1e <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
24006e1a:	4648      	mov	r0, r9
24006e1c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24006e1e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
24006e22:	2b00      	cmp	r3, #0
24006e24:	f000 80b9 	beq.w	24006f9a <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24006e28:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
24006e2c:	07d8      	lsls	r0, r3, #31
24006e2e:	d51f      	bpl.n	24006e70 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
24006e30:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
24006e34:	2104      	movs	r1, #4
24006e36:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24006e3a:	6813      	ldr	r3, [r2, #0]
24006e3c:	f023 0301 	bic.w	r3, r3, #1
24006e40:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24006e42:	4b6c      	ldr	r3, [pc, #432]	; (24006ff4 <HAL_DMA_IRQHandler+0x54c>)
24006e44:	fba3 3505 	umull	r3, r5, r3, r5
24006e48:	0aad      	lsrs	r5, r5, #10
24006e4a:	e002      	b.n	24006e52 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24006e4c:	6813      	ldr	r3, [r2, #0]
24006e4e:	07d9      	lsls	r1, r3, #31
24006e50:	d504      	bpl.n	24006e5c <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
24006e52:	9b01      	ldr	r3, [sp, #4]
24006e54:	3301      	adds	r3, #1
24006e56:	42ab      	cmp	r3, r5
24006e58:	9301      	str	r3, [sp, #4]
24006e5a:	d9f7      	bls.n	24006e4c <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24006e5c:	6813      	ldr	r3, [r2, #0]
24006e5e:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24006e60:	bf4c      	ite	mi
24006e62:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24006e64:	2301      	movpl	r3, #1
24006e66:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24006e6a:	2300      	movs	r3, #0
24006e6c:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24006e70:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
24006e74:	2b00      	cmp	r3, #0
24006e76:	f000 8090 	beq.w	24006f9a <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
24006e7a:	4648      	mov	r0, r9
}
24006e7c:	b003      	add	sp, #12
24006e7e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
24006e82:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24006e84:	6818      	ldr	r0, [r3, #0]
24006e86:	0740      	lsls	r0, r0, #29
24006e88:	d50a      	bpl.n	24006ea0 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24006e8a:	6818      	ldr	r0, [r3, #0]
24006e8c:	f020 0004 	bic.w	r0, r0, #4
24006e90:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006e92:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24006e94:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
24006e98:	f042 0201 	orr.w	r2, r2, #1
24006e9c:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006ea0:	fa27 f20c 	lsr.w	r2, r7, ip
24006ea4:	07d2      	lsls	r2, r2, #31
24006ea6:	f57f ae76 	bpl.w	24006b96 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24006eaa:	4a53      	ldr	r2, [pc, #332]	; (24006ff8 <HAL_DMA_IRQHandler+0x550>)
24006eac:	4853      	ldr	r0, [pc, #332]	; (24006ffc <HAL_DMA_IRQHandler+0x554>)
24006eae:	4283      	cmp	r3, r0
24006eb0:	bf18      	it	ne
24006eb2:	4293      	cmpne	r3, r2
24006eb4:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006eb8:	bf0c      	ite	eq
24006eba:	2201      	moveq	r2, #1
24006ebc:	2200      	movne	r2, #0
24006ebe:	4283      	cmp	r3, r0
24006ec0:	bf08      	it	eq
24006ec2:	f042 0201 	orreq.w	r2, r2, #1
24006ec6:	3018      	adds	r0, #24
24006ec8:	4283      	cmp	r3, r0
24006eca:	bf08      	it	eq
24006ecc:	f042 0201 	orreq.w	r2, r2, #1
24006ed0:	3018      	adds	r0, #24
24006ed2:	4283      	cmp	r3, r0
24006ed4:	bf08      	it	eq
24006ed6:	f042 0201 	orreq.w	r2, r2, #1
24006eda:	3018      	adds	r0, #24
24006edc:	4283      	cmp	r3, r0
24006ede:	bf08      	it	eq
24006ee0:	f042 0201 	orreq.w	r2, r2, #1
24006ee4:	f500 7056 	add.w	r0, r0, #856	; 0x358
24006ee8:	4283      	cmp	r3, r0
24006eea:	bf08      	it	eq
24006eec:	f042 0201 	orreq.w	r2, r2, #1
24006ef0:	3018      	adds	r0, #24
24006ef2:	4283      	cmp	r3, r0
24006ef4:	bf08      	it	eq
24006ef6:	f042 0201 	orreq.w	r2, r2, #1
24006efa:	3018      	adds	r0, #24
24006efc:	4283      	cmp	r3, r0
24006efe:	bf08      	it	eq
24006f00:	f042 0201 	orreq.w	r2, r2, #1
24006f04:	3018      	adds	r0, #24
24006f06:	4283      	cmp	r3, r0
24006f08:	bf08      	it	eq
24006f0a:	f042 0201 	orreq.w	r2, r2, #1
24006f0e:	3018      	adds	r0, #24
24006f10:	4283      	cmp	r3, r0
24006f12:	bf08      	it	eq
24006f14:	f042 0201 	orreq.w	r2, r2, #1
24006f18:	3018      	adds	r0, #24
24006f1a:	4283      	cmp	r3, r0
24006f1c:	bf08      	it	eq
24006f1e:	f042 0201 	orreq.w	r2, r2, #1
24006f22:	3018      	adds	r0, #24
24006f24:	4283      	cmp	r3, r0
24006f26:	bf08      	it	eq
24006f28:	f042 0201 	orreq.w	r2, r2, #1
24006f2c:	3018      	adds	r0, #24
24006f2e:	4283      	cmp	r3, r0
24006f30:	bf08      	it	eq
24006f32:	f042 0201 	orreq.w	r2, r2, #1
24006f36:	2a00      	cmp	r2, #0
24006f38:	f47f ae20 	bne.w	24006b7c <HAL_DMA_IRQHandler+0xd4>
24006f3c:	2e00      	cmp	r6, #0
24006f3e:	f47f ae1d 	bne.w	24006b7c <HAL_DMA_IRQHandler+0xd4>
24006f42:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006f44:	2204      	movs	r2, #4
24006f46:	fa02 f20c 	lsl.w	r2, r2, ip
24006f4a:	423a      	tst	r2, r7
24006f4c:	f040 8094 	bne.w	24007078 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006f50:	2210      	movs	r2, #16
24006f52:	fa02 fc0c 	lsl.w	ip, r2, ip
24006f56:	ea17 0f0c 	tst.w	r7, ip
24006f5a:	f43f aef1 	beq.w	24006d40 <HAL_DMA_IRQHandler+0x298>
24006f5e:	e684      	b.n	24006c6a <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24006f60:	f023 0316 	bic.w	r3, r3, #22
24006f64:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24006f66:	6953      	ldr	r3, [r2, #20]
24006f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006f6c:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006f6e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
24006f72:	b39b      	cbz	r3, 24006fdc <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006f74:	6813      	ldr	r3, [r2, #0]
24006f76:	f023 0308 	bic.w	r3, r3, #8
24006f7a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006f7c:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24006f7e:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
24006f80:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006f82:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
24006f86:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006f8a:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
24006f8c:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24006f90:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24006f94:	2b00      	cmp	r3, #0
24006f96:	f47f af70 	bne.w	24006e7a <HAL_DMA_IRQHandler+0x3d2>
}
24006f9a:	b003      	add	sp, #12
24006f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006fa0:	681b      	ldr	r3, [r3, #0]
24006fa2:	0318      	lsls	r0, r3, #12
24006fa4:	f57f aeb7 	bpl.w	24006d16 <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
24006fa8:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
24006fac:	2b00      	cmp	r3, #0
24006fae:	f47f aec3 	bne.w	24006d38 <HAL_DMA_IRQHandler+0x290>
24006fb2:	e6c5      	b.n	24006d40 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24006fb4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
24006fb8:	f47f af2c 	bne.w	24006e14 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24006fbc:	6811      	ldr	r1, [r2, #0]
24006fbe:	f021 0110 	bic.w	r1, r1, #16
24006fc2:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
24006fc4:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
24006fc6:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24006fca:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24006fce:	e721      	b.n	24006e14 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
24006fd0:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
24006fd4:	2b00      	cmp	r3, #0
24006fd6:	f47f af20 	bne.w	24006e1a <HAL_DMA_IRQHandler+0x372>
24006fda:	e720      	b.n	24006e1e <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006fdc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
24006fe0:	2b00      	cmp	r3, #0
24006fe2:	d1c7      	bne.n	24006f74 <HAL_DMA_IRQHandler+0x4cc>
24006fe4:	e7ca      	b.n	24006f7c <HAL_DMA_IRQHandler+0x4d4>
24006fe6:	bf00      	nop
24006fe8:	40020010 	.word	0x40020010
24006fec:	40020028 	.word	0x40020028
24006ff0:	400204b8 	.word	0x400204b8
24006ff4:	1b4e81b5 	.word	0x1b4e81b5
24006ff8:	40020058 	.word	0x40020058
24006ffc:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24007000:	4a4e      	ldr	r2, [pc, #312]	; (2400713c <HAL_DMA_IRQHandler+0x694>)
24007002:	4d4f      	ldr	r5, [pc, #316]	; (24007140 <HAL_DMA_IRQHandler+0x698>)
24007004:	42ab      	cmp	r3, r5
24007006:	bf18      	it	ne
24007008:	4293      	cmpne	r3, r2
2400700a:	f105 0514 	add.w	r5, r5, #20
2400700e:	bf0c      	ite	eq
24007010:	2201      	moveq	r2, #1
24007012:	2200      	movne	r2, #0
24007014:	42ab      	cmp	r3, r5
24007016:	bf08      	it	eq
24007018:	f042 0201 	orreq.w	r2, r2, #1
2400701c:	3514      	adds	r5, #20
2400701e:	42ab      	cmp	r3, r5
24007020:	bf08      	it	eq
24007022:	f042 0201 	orreq.w	r2, r2, #1
24007026:	3514      	adds	r5, #20
24007028:	42ab      	cmp	r3, r5
2400702a:	bf08      	it	eq
2400702c:	f042 0201 	orreq.w	r2, r2, #1
24007030:	3514      	adds	r5, #20
24007032:	42ab      	cmp	r3, r5
24007034:	bf08      	it	eq
24007036:	f042 0201 	orreq.w	r2, r2, #1
2400703a:	3514      	adds	r5, #20
2400703c:	42ab      	cmp	r3, r5
2400703e:	bf08      	it	eq
24007040:	f042 0201 	orreq.w	r2, r2, #1
24007044:	b912      	cbnz	r2, 2400704c <HAL_DMA_IRQHandler+0x5a4>
24007046:	4a3f      	ldr	r2, [pc, #252]	; (24007144 <HAL_DMA_IRQHandler+0x69c>)
24007048:	4293      	cmp	r3, r2
2400704a:	d1a6      	bne.n	24006f9a <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
2400704c:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
24007050:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24007052:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24007054:	f005 051f 	and.w	r5, r5, #31
24007058:	40ae      	lsls	r6, r5
2400705a:	420e      	tst	r6, r1
2400705c:	d019      	beq.n	24007092 <HAL_DMA_IRQHandler+0x5ea>
2400705e:	0757      	lsls	r7, r2, #29
24007060:	d517      	bpl.n	24007092 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007062:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24007064:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24007066:	d54b      	bpl.n	24007100 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24007068:	03d1      	lsls	r1, r2, #15
2400706a:	d44f      	bmi.n	2400710c <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
2400706c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
24007070:	2b00      	cmp	r3, #0
24007072:	f47f af02 	bne.w	24006e7a <HAL_DMA_IRQHandler+0x3d2>
24007076:	e790      	b.n	24006f9a <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24007078:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400707a:	2210      	movs	r2, #16
2400707c:	fa02 fc0c 	lsl.w	ip, r2, ip
24007080:	ea17 0f0c 	tst.w	r7, ip
24007084:	f43f ae5c 	beq.w	24006d40 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24007088:	681a      	ldr	r2, [r3, #0]
2400708a:	0752      	lsls	r2, r2, #29
2400708c:	f57f ae58 	bpl.w	24006d40 <HAL_DMA_IRQHandler+0x298>
24007090:	e634      	b.n	24006cfc <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24007092:	2602      	movs	r6, #2
24007094:	40ae      	lsls	r6, r5
24007096:	420e      	tst	r6, r1
24007098:	d011      	beq.n	240070be <HAL_DMA_IRQHandler+0x616>
2400709a:	0797      	lsls	r7, r2, #30
2400709c:	d50f      	bpl.n	240070be <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
2400709e:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240070a0:	0414      	lsls	r4, r2, #16
240070a2:	d539      	bpl.n	24007118 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
240070a4:	03d0      	lsls	r0, r2, #15
240070a6:	d443      	bmi.n	24007130 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
240070a8:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
240070ac:	2b00      	cmp	r3, #0
240070ae:	f47f aee4 	bne.w	24006e7a <HAL_DMA_IRQHandler+0x3d2>
240070b2:	e772      	b.n	24006f9a <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240070b4:	6813      	ldr	r3, [r2, #0]
240070b6:	079f      	lsls	r7, r3, #30
240070b8:	f57f aeb1 	bpl.w	24006e1e <HAL_DMA_IRQHandler+0x376>
240070bc:	e69b      	b.n	24006df6 <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
240070be:	2608      	movs	r6, #8
240070c0:	40ae      	lsls	r6, r5
240070c2:	420e      	tst	r6, r1
240070c4:	f43f af69 	beq.w	24006f9a <HAL_DMA_IRQHandler+0x4f2>
240070c8:	0711      	lsls	r1, r2, #28
240070ca:	f57f af66 	bpl.w	24006f9a <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
240070ce:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
240070d0:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
240070d2:	f022 020e 	bic.w	r2, r2, #14
240070d6:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240070d8:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
240070da:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240070de:	fa03 f505 	lsl.w	r5, r3, r5
240070e2:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240070e4:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
240070e8:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
240070ec:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
240070f0:	2a00      	cmp	r2, #0
240070f2:	f43f af52 	beq.w	24006f9a <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
240070f6:	4648      	mov	r0, r9
}
240070f8:	b003      	add	sp, #12
240070fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
240070fe:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24007100:	0692      	lsls	r2, r2, #26
24007102:	d403      	bmi.n	2400710c <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24007104:	681a      	ldr	r2, [r3, #0]
24007106:	f022 0204 	bic.w	r2, r2, #4
2400710a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
2400710c:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
24007110:	2b00      	cmp	r3, #0
24007112:	f47f aeb2 	bne.w	24006e7a <HAL_DMA_IRQHandler+0x3d2>
24007116:	e740      	b.n	24006f9a <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24007118:	f012 0220 	ands.w	r2, r2, #32
2400711c:	d108      	bne.n	24007130 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2400711e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
24007120:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24007122:	f021 010a 	bic.w	r1, r1, #10
24007126:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
24007128:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
2400712c:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24007130:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
24007134:	2b00      	cmp	r3, #0
24007136:	f47f aea0 	bne.w	24006e7a <HAL_DMA_IRQHandler+0x3d2>
2400713a:	e72e      	b.n	24006f9a <HAL_DMA_IRQHandler+0x4f2>
2400713c:	58025408 	.word	0x58025408
24007140:	5802541c 	.word	0x5802541c
24007144:	58025494 	.word	0x58025494

24007148 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24007148:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
2400714a:	4770      	bx	lr

2400714c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
2400714c:	b470      	push	{r4, r5, r6}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
2400714e:	7a0b      	ldrb	r3, [r1, #8]
{
24007150:	4602      	mov	r2, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24007152:	2b01      	cmp	r3, #1
24007154:	d029      	beq.n	240071aa <HAL_DMAEx_ConfigMuxSync+0x5e>
  uint32_t syncPolarity = 0;
24007156:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24007158:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
2400715a:	f892 0035 	ldrb.w	r0, [r2, #53]	; 0x35
2400715e:	2801      	cmp	r0, #1
24007160:	d11d      	bne.n	2400719e <HAL_DMAEx_ConfigMuxSync+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24007162:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
24007166:	2801      	cmp	r0, #1
24007168:	d022      	beq.n	240071b0 <HAL_DMAEx_ConfigMuxSync+0x64>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400716a:	68ce      	ldr	r6, [r1, #12]
2400716c:	041b      	lsls	r3, r3, #16
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
2400716e:	6e10      	ldr	r0, [r2, #96]	; 0x60
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007170:	3e01      	subs	r6, #1
24007172:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24007176:	6806      	ldr	r6, [r0, #0]
24007178:	f426 3681 	bic.w	r6, r6, #66048	; 0x10200
2400717c:	6006      	str	r6, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400717e:	7a4e      	ldrb	r6, [r1, #9]
24007180:	6801      	ldr	r1, [r0, #0]
24007182:	b2c9      	uxtb	r1, r1
24007184:	430b      	orrs	r3, r1
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24007186:	2100      	movs	r1, #0
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007188:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
2400718c:	4323      	orrs	r3, r4
2400718e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
24007192:	6003      	str	r3, [r0, #0]

    return HAL_OK;
24007194:	4608      	mov	r0, r1
    __HAL_UNLOCK(hdma);
24007196:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
2400719a:	bc70      	pop	{r4, r5, r6}
2400719c:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400719e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    return HAL_ERROR;
240071a2:	2001      	movs	r0, #1
}
240071a4:	bc70      	pop	{r4, r5, r6}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240071a6:	6553      	str	r3, [r2, #84]	; 0x54
}
240071a8:	4770      	bx	lr
    syncPolarity = pSyncConfig->SyncPolarity;
240071aa:	e9d1 5400 	ldrd	r5, r4, [r1]
240071ae:	e7d4      	b.n	2400715a <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
240071b0:	2002      	movs	r0, #2
}
240071b2:	bc70      	pop	{r4, r5, r6}
240071b4:	4770      	bx	lr
240071b6:	bf00      	nop

240071b8 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240071b8:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
{
240071bc:	b570      	push	{r4, r5, r6, lr}
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240071be:	6819      	ldr	r1, [r3, #0]
{
240071c0:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240071c2:	4211      	tst	r1, r2
240071c4:	d00c      	beq.n	240071e0 <HAL_DMAEx_MUX_IRQHandler+0x28>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240071c6:	6e05      	ldr	r5, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;

    if(hdma->XferErrorCallback != NULL)
240071c8:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240071ca:	6829      	ldr	r1, [r5, #0]
240071cc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240071d0:	6029      	str	r1, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240071d2:	605a      	str	r2, [r3, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240071d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
240071d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240071da:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
240071dc:	b106      	cbz	r6, 240071e0 <HAL_DMAEx_MUX_IRQHandler+0x28>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
240071de:	47b0      	blx	r6
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
240071e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
240071e2:	b19b      	cbz	r3, 2400720c <HAL_DMAEx_MUX_IRQHandler+0x54>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240071e4:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
240071e8:	6810      	ldr	r0, [r2, #0]
240071ea:	4208      	tst	r0, r1
240071ec:	d00e      	beq.n	2400720c <HAL_DMAEx_MUX_IRQHandler+0x54>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240071ee:	6818      	ldr	r0, [r3, #0]
240071f0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
240071f4:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240071f6:	6051      	str	r1, [r2, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240071f8:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
240071fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240071fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24007200:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
24007202:	b11a      	cbz	r2, 2400720c <HAL_DMAEx_MUX_IRQHandler+0x54>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24007204:	4620      	mov	r0, r4
      }
    }
  }
}
24007206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hdma->XferErrorCallback(hdma);
2400720a:	4710      	bx	r2
}
2400720c:	bd70      	pop	{r4, r5, r6, pc}
2400720e:	bf00      	nop

24007210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24007214:	680c      	ldr	r4, [r1, #0]
{
24007216:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24007218:	2c00      	cmp	r4, #0
2400721a:	f000 80a6 	beq.w	2400736a <HAL_GPIO_Init+0x15a>
2400721e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007222:	4f8e      	ldr	r7, [pc, #568]	; (2400745c <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
24007224:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24007226:	2201      	movs	r2, #1
24007228:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
2400722a:	ea12 0e04 	ands.w	lr, r2, r4
2400722e:	f000 8095 	beq.w	2400735c <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24007232:	684d      	ldr	r5, [r1, #4]
24007234:	f005 0903 	and.w	r9, r5, #3
24007238:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
2400723c:	2e01      	cmp	r6, #1
2400723e:	f240 8097 	bls.w	24007370 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24007242:	f1b9 0f03 	cmp.w	r9, #3
24007246:	f040 80d1 	bne.w	240073ec <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400724a:	fa09 f20c 	lsl.w	r2, r9, ip
2400724e:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
24007252:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24007254:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24007258:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400725c:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
24007260:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24007262:	d07b      	beq.n	2400735c <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007264:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
24007268:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400726c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24007270:	f042 0202 	orr.w	r2, r2, #2
24007274:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007278:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400727c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
24007280:	f508 6880 	add.w	r8, r8, #1024	; 0x400
24007284:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
24007288:	f002 0202 	and.w	r2, r2, #2
2400728c:	9201      	str	r2, [sp, #4]
2400728e:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007290:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
24007292:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24007296:	fa02 f209 	lsl.w	r2, r2, r9
2400729a:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400729e:	4e70      	ldr	r6, [pc, #448]	; (24007460 <HAL_GPIO_Init+0x250>)
240072a0:	42b0      	cmp	r0, r6
240072a2:	d029      	beq.n	240072f8 <HAL_GPIO_Init+0xe8>
240072a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
240072a8:	42b0      	cmp	r0, r6
240072aa:	f000 80ac 	beq.w	24007406 <HAL_GPIO_Init+0x1f6>
240072ae:	4e6d      	ldr	r6, [pc, #436]	; (24007464 <HAL_GPIO_Init+0x254>)
240072b0:	42b0      	cmp	r0, r6
240072b2:	f000 80ae 	beq.w	24007412 <HAL_GPIO_Init+0x202>
240072b6:	4e6c      	ldr	r6, [pc, #432]	; (24007468 <HAL_GPIO_Init+0x258>)
240072b8:	42b0      	cmp	r0, r6
240072ba:	f000 809e 	beq.w	240073fa <HAL_GPIO_Init+0x1ea>
240072be:	4e6b      	ldr	r6, [pc, #428]	; (2400746c <HAL_GPIO_Init+0x25c>)
240072c0:	42b0      	cmp	r0, r6
240072c2:	f000 80b2 	beq.w	2400742a <HAL_GPIO_Init+0x21a>
240072c6:	4e6a      	ldr	r6, [pc, #424]	; (24007470 <HAL_GPIO_Init+0x260>)
240072c8:	42b0      	cmp	r0, r6
240072ca:	f000 80b4 	beq.w	24007436 <HAL_GPIO_Init+0x226>
240072ce:	4e69      	ldr	r6, [pc, #420]	; (24007474 <HAL_GPIO_Init+0x264>)
240072d0:	42b0      	cmp	r0, r6
240072d2:	f000 80a4 	beq.w	2400741e <HAL_GPIO_Init+0x20e>
240072d6:	4e68      	ldr	r6, [pc, #416]	; (24007478 <HAL_GPIO_Init+0x268>)
240072d8:	42b0      	cmp	r0, r6
240072da:	f000 80b2 	beq.w	24007442 <HAL_GPIO_Init+0x232>
240072de:	4e67      	ldr	r6, [pc, #412]	; (2400747c <HAL_GPIO_Init+0x26c>)
240072e0:	42b0      	cmp	r0, r6
240072e2:	f000 80b4 	beq.w	2400744e <HAL_GPIO_Init+0x23e>
240072e6:	4e66      	ldr	r6, [pc, #408]	; (24007480 <HAL_GPIO_Init+0x270>)
240072e8:	42b0      	cmp	r0, r6
240072ea:	bf0c      	ite	eq
240072ec:	2609      	moveq	r6, #9
240072ee:	260a      	movne	r6, #10
240072f0:	fa06 f909 	lsl.w	r9, r6, r9
240072f4:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
240072f8:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240072fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24007300:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
24007302:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
24007306:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
24007308:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
2400730c:	bf54      	ite	pl
2400730e:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
24007312:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
24007316:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24007318:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
2400731a:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
2400731c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
24007320:	bf54      	ite	pl
24007322:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
24007326:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
2400732a:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
2400732c:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24007330:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
24007332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
24007336:	bf54      	ite	pl
24007338:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
2400733c:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24007340:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
24007342:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
24007346:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
2400734a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
2400734e:	bf54      	ite	pl
24007350:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
24007354:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
24007358:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
2400735c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400735e:	f10c 0c02 	add.w	ip, ip, #2
24007362:	fa34 f203 	lsrs.w	r2, r4, r3
24007366:	f47f af5e 	bne.w	24007226 <HAL_GPIO_Init+0x16>
  }
}
2400736a:	b003      	add	sp, #12
2400736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007370:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
24007374:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007376:	fa08 f80c 	lsl.w	r8, r8, ip
2400737a:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
2400737e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24007380:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
24007384:	fa06 f60c 	lsl.w	r6, r6, ip
24007388:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
2400738c:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400738e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
24007392:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24007396:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24007398:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400739c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
2400739e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
240073a0:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240073a2:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240073a6:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240073a8:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240073ac:	fa06 f60c 	lsl.w	r6, r6, ip
240073b0:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
240073b4:	fa09 f20c 	lsl.w	r2, r9, ip
240073b8:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240073ba:	f47f af4a 	bne.w	24007252 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240073be:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
240073c2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240073c6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
240073ca:	260f      	movs	r6, #15
240073cc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
240073d0:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
240073d4:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240073d8:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
240073dc:	690e      	ldr	r6, [r1, #16]
240073de:	fa06 f60b 	lsl.w	r6, r6, fp
240073e2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
240073e6:	f8c9 6020 	str.w	r6, [r9, #32]
240073ea:	e732      	b.n	24007252 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240073ec:	f04f 0803 	mov.w	r8, #3
240073f0:	fa08 f80c 	lsl.w	r8, r8, ip
240073f4:	ea6f 0808 	mvn.w	r8, r8
240073f8:	e7d2      	b.n	240073a0 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240073fa:	2603      	movs	r6, #3
240073fc:	fa06 f909 	lsl.w	r9, r6, r9
24007400:	ea42 0209 	orr.w	r2, r2, r9
24007404:	e778      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
24007406:	2601      	movs	r6, #1
24007408:	fa06 f909 	lsl.w	r9, r6, r9
2400740c:	ea42 0209 	orr.w	r2, r2, r9
24007410:	e772      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
24007412:	2602      	movs	r6, #2
24007414:	fa06 f909 	lsl.w	r9, r6, r9
24007418:	ea42 0209 	orr.w	r2, r2, r9
2400741c:	e76c      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
2400741e:	2606      	movs	r6, #6
24007420:	fa06 f909 	lsl.w	r9, r6, r9
24007424:	ea42 0209 	orr.w	r2, r2, r9
24007428:	e766      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
2400742a:	2604      	movs	r6, #4
2400742c:	fa06 f909 	lsl.w	r9, r6, r9
24007430:	ea42 0209 	orr.w	r2, r2, r9
24007434:	e760      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
24007436:	2605      	movs	r6, #5
24007438:	fa06 f909 	lsl.w	r9, r6, r9
2400743c:	ea42 0209 	orr.w	r2, r2, r9
24007440:	e75a      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
24007442:	2607      	movs	r6, #7
24007444:	fa06 f909 	lsl.w	r9, r6, r9
24007448:	ea42 0209 	orr.w	r2, r2, r9
2400744c:	e754      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
2400744e:	2608      	movs	r6, #8
24007450:	fa06 f909 	lsl.w	r9, r6, r9
24007454:	ea42 0209 	orr.w	r2, r2, r9
24007458:	e74e      	b.n	240072f8 <HAL_GPIO_Init+0xe8>
2400745a:	bf00      	nop
2400745c:	58024400 	.word	0x58024400
24007460:	58020000 	.word	0x58020000
24007464:	58020800 	.word	0x58020800
24007468:	58020c00 	.word	0x58020c00
2400746c:	58021000 	.word	0x58021000
24007470:	58021400 	.word	0x58021400
24007474:	58021800 	.word	0x58021800
24007478:	58021c00 	.word	0x58021c00
2400747c:	58022000 	.word	0x58022000
24007480:	58022400 	.word	0x58022400

24007484 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24007484:	6903      	ldr	r3, [r0, #16]
24007486:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24007488:	bf14      	ite	ne
2400748a:	2001      	movne	r0, #1
2400748c:	2000      	moveq	r0, #0
2400748e:	4770      	bx	lr

24007490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24007490:	b902      	cbnz	r2, 24007494 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24007492:	0409      	lsls	r1, r1, #16
24007494:	6181      	str	r1, [r0, #24]
  }
}
24007496:	4770      	bx	lr

24007498 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
24007498:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
2400749a:	ea01 0203 	and.w	r2, r1, r3
2400749e:	ea21 0103 	bic.w	r1, r1, r3
240074a2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
240074a6:	6181      	str	r1, [r0, #24]
}
240074a8:	4770      	bx	lr
240074aa:	bf00      	nop

240074ac <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240074ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240074b0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
240074b4:	4201      	tst	r1, r0
240074b6:	d100      	bne.n	240074ba <HAL_GPIO_EXTI_IRQHandler+0xe>
240074b8:	4770      	bx	lr
{
240074ba:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240074bc:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240074c0:	f7fd fcfc 	bl	24004ebc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240074c4:	bd08      	pop	{r3, pc}
240074c6:	bf00      	nop

240074c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240074c8:	6803      	ldr	r3, [r0, #0]
{
240074ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240074ce:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240074d0:	699a      	ldr	r2, [r3, #24]
240074d2:	0694      	lsls	r4, r2, #26
240074d4:	d465      	bmi.n	240075a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
240074d6:	4606      	mov	r6, r0
240074d8:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240074da:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
240074de:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240074e0:	f014 0410 	ands.w	r4, r4, #16
240074e4:	d060      	beq.n	240075a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
  uint32_t error_code = 0;
240074e6:	2500      	movs	r5, #0
  uint32_t tickstart = Tickstart;
240074e8:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240074ea:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
240074ee:	46aa      	mov	sl, r5
240074f0:	1c79      	adds	r1, r7, #1

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240074f2:	699a      	ldr	r2, [r3, #24]
240074f4:	d15a      	bne.n	240075ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
240074f6:	0690      	lsls	r0, r2, #26
240074f8:	d47d      	bmi.n	240075f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
240074fa:	f1ba 0f00 	cmp.w	sl, #0
240074fe:	d104      	bne.n	2400750a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24007500:	699c      	ldr	r4, [r3, #24]
24007502:	06a1      	lsls	r1, r4, #26
24007504:	d5fc      	bpl.n	24007500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007506:	2220      	movs	r2, #32
24007508:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
2400750a:	f045 0404 	orr.w	r4, r5, #4

    status = HAL_ERROR;
2400750e:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24007510:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24007512:	05d0      	lsls	r0, r2, #23
24007514:	d530      	bpl.n	24007578 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007516:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400751a:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400751c:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007520:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007522:	d504      	bpl.n	2400752e <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007524:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24007528:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400752c:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400752e:	0597      	lsls	r7, r2, #22
24007530:	d504      	bpl.n	2400753c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007532:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24007536:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400753a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400753c:	699a      	ldr	r2, [r3, #24]
2400753e:	0790      	lsls	r0, r2, #30
24007540:	d501      	bpl.n	24007546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
24007542:	2200      	movs	r2, #0
24007544:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007546:	699a      	ldr	r2, [r3, #24]
24007548:	07d1      	lsls	r1, r2, #31
2400754a:	d403      	bmi.n	24007554 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400754c:	699a      	ldr	r2, [r3, #24]
2400754e:	f042 0201 	orr.w	r2, r2, #1
24007552:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24007554:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007556:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
24007558:	4834      	ldr	r0, [pc, #208]	; (2400762c <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->State = HAL_I2C_STATE_READY;
2400755a:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
2400755c:	4002      	ands	r2, r0
      return HAL_ERROR;
2400755e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24007560:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
24007562:	6c73      	ldr	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007564:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24007568:	431c      	orrs	r4, r3
2400756a:	6474      	str	r4, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2400756c:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007570:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
24007574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24007578:	0550      	lsls	r0, r2, #21
2400757a:	d4d3      	bmi.n	24007524 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400757c:	0595      	lsls	r5, r2, #22
2400757e:	d4d8      	bmi.n	24007532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
24007580:	2900      	cmp	r1, #0
24007582:	d1db      	bne.n	2400753c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007584:	f7fe fa6e 	bl	24005a64 <HAL_GetTick>
24007588:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
2400758c:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400758e:	42b8      	cmp	r0, r7
24007590:	d800      	bhi.n	24007594 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
24007592:	b91f      	cbnz	r7, 2400759c <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24007594:	699a      	ldr	r2, [r3, #24]
24007596:	f012 0220 	ands.w	r2, r2, #32
2400759a:	d030      	beq.n	240075fe <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400759c:	699a      	ldr	r2, [r3, #24]
2400759e:	0692      	lsls	r2, r2, #26
240075a0:	d59d      	bpl.n	240074de <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
240075a2:	2000      	movs	r0, #0
}
240075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
240075a8:	4621      	mov	r1, r4
240075aa:	e7b1      	b.n	24007510 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240075ac:	0692      	lsls	r2, r2, #26
240075ae:	d422      	bmi.n	240075f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
240075b0:	f1ba 0f00 	cmp.w	sl, #0
240075b4:	d1a9      	bne.n	2400750a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240075b6:	f7fe fa55 	bl	24005a64 <HAL_GetTick>
240075ba:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240075bc:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240075be:	4287      	cmp	r7, r0
240075c0:	d301      	bcc.n	240075c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
240075c2:	2f00      	cmp	r7, #0
240075c4:	d194      	bne.n	240074f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240075c6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240075c8:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240075cc:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240075ce:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240075d0:	0409      	lsls	r1, r1, #16
240075d2:	d503      	bpl.n	240075dc <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              (tmp1 != I2C_CR2_STOP) && \
240075d4:	0441      	lsls	r1, r0, #17
240075d6:	d401      	bmi.n	240075dc <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
240075d8:	2a20      	cmp	r2, #32
240075da:	d11d      	bne.n	24007618 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240075dc:	699a      	ldr	r2, [r3, #24]
240075de:	0690      	lsls	r0, r2, #26
240075e0:	d486      	bmi.n	240074f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240075e2:	f7fe fa3f 	bl	24005a64 <HAL_GetTick>
240075e6:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240075e8:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240075ea:	2819      	cmp	r0, #25
240075ec:	d9f6      	bls.n	240075dc <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240075ee:	2520      	movs	r5, #32
              status = HAL_ERROR;
240075f0:	f04f 0a01 	mov.w	sl, #1
240075f4:	e77c      	b.n	240074f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (status == HAL_OK)
240075f6:	f1ba 0f00 	cmp.w	sl, #0
240075fa:	d084      	beq.n	24007506 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
240075fc:	e785      	b.n	2400750a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240075fe:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24007600:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
24007602:	2001      	movs	r0, #1
24007604:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007608:	430b      	orrs	r3, r1
2400760a:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400760c:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24007610:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
24007614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24007618:	685a      	ldr	r2, [r3, #4]
2400761a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400761e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24007620:	f7fe fa20 	bl	24005a64 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24007624:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
24007626:	4604      	mov	r4, r0
24007628:	e7d8      	b.n	240075dc <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
2400762a:	bf00      	nop
2400762c:	fe00e800 	.word	0xfe00e800

24007630 <HAL_I2C_Init>:
  if (hi2c == NULL)
24007630:	2800      	cmp	r0, #0
24007632:	d04e      	beq.n	240076d2 <HAL_I2C_Init+0xa2>
{
24007634:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24007636:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400763a:	4604      	mov	r4, r0
2400763c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24007640:	2b00      	cmp	r3, #0
24007642:	d041      	beq.n	240076c8 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
24007644:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24007646:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24007648:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
2400764a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
2400764e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24007650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24007654:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
24007656:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400765a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
2400765c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
2400765e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24007660:	689a      	ldr	r2, [r3, #8]
24007662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24007666:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24007668:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400766a:	d029      	beq.n	240076c0 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2400766c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007670:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24007672:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24007674:	d102      	bne.n	2400767c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24007676:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400767a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400767c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
2400767e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24007682:	4915      	ldr	r1, [pc, #84]	; (240076d8 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24007684:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24007686:	4301      	orrs	r1, r0
24007688:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
2400768a:	68d9      	ldr	r1, [r3, #12]
2400768c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
24007690:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24007692:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24007696:	4302      	orrs	r2, r0
24007698:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400769c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240076a0:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240076a2:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240076a4:	4301      	orrs	r1, r0
  return HAL_OK;
240076a6:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240076a8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
240076aa:	6819      	ldr	r1, [r3, #0]
240076ac:	f041 0101 	orr.w	r1, r1, #1
240076b0:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240076b2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
240076b4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
240076b8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
240076ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
240076be:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240076c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
240076c4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240076c6:	e7d9      	b.n	2400767c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
240076c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
240076cc:	f7fc fc76 	bl	24003fbc <HAL_I2C_MspInit>
240076d0:	e7b8      	b.n	24007644 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
240076d2:	2001      	movs	r0, #1
}
240076d4:	4770      	bx	lr
240076d6:	bf00      	nop
240076d8:	02008000 	.word	0x02008000

240076dc <HAL_I2C_Master_Transmit>:
{
240076dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
240076e0:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
240076e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
240076e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
240076e8:	2b20      	cmp	r3, #32
240076ea:	d12c      	bne.n	24007746 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
240076ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240076f0:	4683      	mov	fp, r0
240076f2:	2b01      	cmp	r3, #1
240076f4:	d027      	beq.n	24007746 <HAL_I2C_Master_Transmit+0x6a>
240076f6:	2301      	movs	r3, #1
240076f8:	468a      	mov	sl, r1
240076fa:	4616      	mov	r6, r2
240076fc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
24007700:	f7fe f9b0 	bl	24005a64 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007704:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24007708:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400770a:	699a      	ldr	r2, [r3, #24]
2400770c:	0417      	lsls	r7, r2, #16
2400770e:	d51d      	bpl.n	2400774c <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007710:	f7fe f9a8 	bl	24005a64 <HAL_GetTick>
24007714:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007718:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400771c:	2819      	cmp	r0, #25
2400771e:	d9f4      	bls.n	2400770a <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24007720:	699a      	ldr	r2, [r3, #24]
24007722:	0410      	lsls	r0, r2, #16
24007724:	d5f1      	bpl.n	2400770a <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007726:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400772a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400772c:	2200      	movs	r2, #0
      return HAL_ERROR;
2400772e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007730:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
24007732:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007736:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400773a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400773e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
24007742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24007746:	2002      	movs	r0, #2
}
24007748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400774c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400774e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
24007750:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24007754:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24007758:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
2400775a:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400775e:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24007762:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
24007766:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400776a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
2400776e:	b292      	uxth	r2, r2
24007770:	2aff      	cmp	r2, #255	; 0xff
24007772:	d86c      	bhi.n	2400784e <HAL_I2C_Master_Transmit+0x172>
      hi2c->XferSize = hi2c->XferCount;
24007774:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24007778:	48a2      	ldr	r0, [pc, #648]	; (24007a04 <HAL_I2C_Master_Transmit+0x328>)
2400777a:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
2400777c:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
2400777e:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24007780:	f3ca 0109 	ubfx	r1, sl, #0, #10
      hi2c->XferSize = hi2c->XferCount;
24007784:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24007788:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
2400778a:	4301      	orrs	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400778c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24007790:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24007794:	499c      	ldr	r1, [pc, #624]	; (24007a08 <HAL_I2C_Master_Transmit+0x32c>)
24007796:	4311      	orrs	r1, r2
24007798:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
2400779a:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
2400779e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
240077a2:	b292      	uxth	r2, r2
240077a4:	2a00      	cmp	r2, #0
240077a6:	f000 80ee 	beq.w	24007986 <HAL_I2C_Master_Transmit+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
240077aa:	699c      	ldr	r4, [r3, #24]
240077ac:	f014 0402 	ands.w	r4, r4, #2
240077b0:	f040 80b2 	bne.w	24007918 <HAL_I2C_Master_Transmit+0x23c>
  uint32_t itflag   = hi2c->Instance->ISR;
240077b4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240077b6:	f012 0210 	ands.w	r2, r2, #16
240077ba:	d07b      	beq.n	240078b4 <HAL_I2C_Master_Transmit+0x1d8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240077bc:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
240077be:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
240077c0:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240077c2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240077c4:	1c69      	adds	r1, r5, #1
240077c6:	699a      	ldr	r2, [r3, #24]
240077c8:	d176      	bne.n	240078b8 <HAL_I2C_Master_Transmit+0x1dc>
240077ca:	0690      	lsls	r0, r2, #26
240077cc:	f100 80f1 	bmi.w	240079b2 <HAL_I2C_Master_Transmit+0x2d6>
240077d0:	b927      	cbnz	r7, 240077dc <HAL_I2C_Master_Transmit+0x100>
240077d2:	699a      	ldr	r2, [r3, #24]
240077d4:	0691      	lsls	r1, r2, #26
240077d6:	d5fc      	bpl.n	240077d2 <HAL_I2C_Master_Transmit+0xf6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240077d8:	f8c3 901c 	str.w	r9, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
240077dc:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
240077e0:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
240077e2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240077e4:	05ce      	lsls	r6, r1, #23
240077e6:	d541      	bpl.n	2400786c <HAL_I2C_Master_Transmit+0x190>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240077e8:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240077ec:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
240077ee:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240077f2:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240077f4:	d504      	bpl.n	24007800 <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240077f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
240077fa:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240077fe:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007800:	0589      	lsls	r1, r1, #22
24007802:	d504      	bpl.n	2400780e <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007804:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24007808:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400780c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400780e:	6999      	ldr	r1, [r3, #24]
24007810:	078e      	lsls	r6, r1, #30
24007812:	d501      	bpl.n	24007818 <HAL_I2C_Master_Transmit+0x13c>
    hi2c->Instance->TXDR = 0x00U;
24007814:	2100      	movs	r1, #0
24007816:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007818:	6999      	ldr	r1, [r3, #24]
2400781a:	07cd      	lsls	r5, r1, #31
2400781c:	d403      	bmi.n	24007826 <HAL_I2C_Master_Transmit+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400781e:	6999      	ldr	r1, [r3, #24]
24007820:	f041 0101 	orr.w	r1, r1, #1
24007824:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24007826:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007828:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
2400782a:	4878      	ldr	r0, [pc, #480]	; (24007a0c <HAL_I2C_Master_Transmit+0x330>)
    hi2c->State = HAL_I2C_STATE_READY;
2400782c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
2400782e:	4001      	ands	r1, r0
        return HAL_ERROR;
24007830:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24007832:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24007834:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
24007838:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
2400783c:	431a      	orrs	r2, r3
2400783e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24007842:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24007846:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
2400784a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
2400784e:	685a      	ldr	r2, [r3, #4]
24007850:	496c      	ldr	r1, [pc, #432]	; (24007a04 <HAL_I2C_Master_Transmit+0x328>)
24007852:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24007854:	f3ca 0109 	ubfx	r1, sl, #0, #10
24007858:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
2400785c:	4311      	orrs	r1, r2
2400785e:	4a6c      	ldr	r2, [pc, #432]	; (24007a10 <HAL_I2C_Master_Transmit+0x334>)
24007860:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
24007862:	21ff      	movs	r1, #255	; 0xff
24007864:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24007868:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2400786a:	e796      	b.n	2400779a <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400786c:	054c      	lsls	r4, r1, #21
2400786e:	d4c2      	bmi.n	240077f6 <HAL_I2C_Master_Transmit+0x11a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24007870:	058f      	lsls	r7, r1, #22
24007872:	d4c7      	bmi.n	24007804 <HAL_I2C_Master_Transmit+0x128>
  if (status != HAL_OK)
24007874:	2800      	cmp	r0, #0
24007876:	d1ca      	bne.n	2400780e <HAL_I2C_Master_Transmit+0x132>
    if (Timeout != HAL_MAX_DELAY)
24007878:	1c6a      	adds	r2, r5, #1
2400787a:	d096      	beq.n	240077aa <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400787c:	f7fe f8f2 	bl	24005a64 <HAL_GetTick>
24007880:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007884:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007888:	4285      	cmp	r5, r0
2400788a:	d301      	bcc.n	24007890 <HAL_I2C_Master_Transmit+0x1b4>
2400788c:	2d00      	cmp	r5, #0
2400788e:	d18c      	bne.n	240077aa <HAL_I2C_Master_Transmit+0xce>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24007890:	699a      	ldr	r2, [r3, #24]
24007892:	f012 0202 	ands.w	r2, r2, #2
24007896:	d188      	bne.n	240077aa <HAL_I2C_Master_Transmit+0xce>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24007898:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400789c:	2120      	movs	r1, #32
          return HAL_ERROR;
2400789e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
240078a0:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240078a4:	430b      	orrs	r3, r1
240078a6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240078aa:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240078ae:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
240078b2:	e749      	b.n	24007748 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
240078b4:	4610      	mov	r0, r2
240078b6:	e794      	b.n	240077e2 <HAL_I2C_Master_Transmit+0x106>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240078b8:	0692      	lsls	r2, r2, #26
240078ba:	d47a      	bmi.n	240079b2 <HAL_I2C_Master_Transmit+0x2d6>
240078bc:	2f00      	cmp	r7, #0
240078be:	d18d      	bne.n	240077dc <HAL_I2C_Master_Transmit+0x100>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240078c0:	f7fe f8d0 	bl	24005a64 <HAL_GetTick>
240078c4:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240078c6:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240078ca:	4285      	cmp	r5, r0
240078cc:	d302      	bcc.n	240078d4 <HAL_I2C_Master_Transmit+0x1f8>
240078ce:	2d00      	cmp	r5, #0
240078d0:	f47f af78 	bne.w	240077c4 <HAL_I2C_Master_Transmit+0xe8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240078d4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240078d6:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240078da:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240078dc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240078de:	0409      	lsls	r1, r1, #16
240078e0:	d50c      	bpl.n	240078fc <HAL_I2C_Master_Transmit+0x220>
              (tmp1 != I2C_CR2_STOP) && \
240078e2:	0441      	lsls	r1, r0, #17
240078e4:	d40a      	bmi.n	240078fc <HAL_I2C_Master_Transmit+0x220>
240078e6:	2a20      	cmp	r2, #32
240078e8:	d008      	beq.n	240078fc <HAL_I2C_Master_Transmit+0x220>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
240078ea:	685a      	ldr	r2, [r3, #4]
240078ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
240078f0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
240078f2:	f7fe f8b7 	bl	24005a64 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240078f6:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
240078fa:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240078fc:	699a      	ldr	r2, [r3, #24]
240078fe:	0690      	lsls	r0, r2, #26
24007900:	f53f af60 	bmi.w	240077c4 <HAL_I2C_Master_Transmit+0xe8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24007904:	f7fe f8ae 	bl	24005a64 <HAL_GetTick>
24007908:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400790a:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400790e:	2819      	cmp	r0, #25
24007910:	d9f4      	bls.n	240078fc <HAL_I2C_Master_Transmit+0x220>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24007912:	2420      	movs	r4, #32
              status = HAL_ERROR;
24007914:	2701      	movs	r7, #1
24007916:	e755      	b.n	240077c4 <HAL_I2C_Master_Transmit+0xe8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24007918:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
      hi2c->XferSize--;
2400791c:	f8bb 2028 	ldrh.w	r2, [fp, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24007920:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
24007924:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24007926:	6299      	str	r1, [r3, #40]	; 0x28
      hi2c->XferCount--;
24007928:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
      hi2c->XferSize--;
2400792c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
2400792e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
      hi2c->XferCount--;
24007932:	3901      	subs	r1, #1
      hi2c->XferSize--;
24007934:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
      hi2c->XferCount--;
24007938:	b289      	uxth	r1, r1
2400793a:	f8ab 102a 	strh.w	r1, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400793e:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
24007942:	b289      	uxth	r1, r1
24007944:	2900      	cmp	r1, #0
24007946:	f43f af2a 	beq.w	2400779e <HAL_I2C_Master_Transmit+0xc2>
2400794a:	2a00      	cmp	r2, #0
2400794c:	f47f af27 	bne.w	2400779e <HAL_I2C_Master_Transmit+0xc2>
24007950:	1c6c      	adds	r4, r5, #1
24007952:	d132      	bne.n	240079ba <HAL_I2C_Master_Transmit+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24007954:	699a      	ldr	r2, [r3, #24]
24007956:	0610      	lsls	r0, r2, #24
24007958:	d5fc      	bpl.n	24007954 <HAL_I2C_Master_Transmit+0x278>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400795a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
2400795e:	b292      	uxth	r2, r2
24007960:	2aff      	cmp	r2, #255	; 0xff
24007962:	d93c      	bls.n	240079de <HAL_I2C_Master_Transmit+0x302>
  MODIFY_REG(hi2c->Instance->CR2, \
24007964:	685a      	ldr	r2, [r3, #4]
24007966:	492b      	ldr	r1, [pc, #172]	; (24007a14 <HAL_I2C_Master_Transmit+0x338>)
24007968:	400a      	ands	r2, r1
2400796a:	492b      	ldr	r1, [pc, #172]	; (24007a18 <HAL_I2C_Master_Transmit+0x33c>)
2400796c:	ea4a 0202 	orr.w	r2, sl, r2
24007970:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
24007972:	22ff      	movs	r2, #255	; 0xff
24007974:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24007978:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
2400797a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
2400797e:	b292      	uxth	r2, r2
24007980:	2a00      	cmp	r2, #0
24007982:	f47f af12 	bne.w	240077aa <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24007986:	4642      	mov	r2, r8
24007988:	4629      	mov	r1, r5
2400798a:	4658      	mov	r0, fp
2400798c:	f7ff fd9c 	bl	240074c8 <I2C_WaitOnSTOPFlagUntilTimeout>
24007990:	2800      	cmp	r0, #0
24007992:	d135      	bne.n	24007a00 <HAL_I2C_Master_Transmit+0x324>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007994:	f8db 3000 	ldr.w	r3, [fp]
24007998:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
2400799a:	4c1c      	ldr	r4, [pc, #112]	; (24007a0c <HAL_I2C_Master_Transmit+0x330>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400799c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
2400799e:	685a      	ldr	r2, [r3, #4]
240079a0:	4022      	ands	r2, r4
240079a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
240079a4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
240079a8:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
240079ac:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
240079b0:	e6ca      	b.n	24007748 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
240079b2:	2f00      	cmp	r7, #0
240079b4:	f43f af10 	beq.w	240077d8 <HAL_I2C_Master_Transmit+0xfc>
240079b8:	e710      	b.n	240077dc <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240079ba:	699a      	ldr	r2, [r3, #24]
240079bc:	0611      	lsls	r1, r2, #24
240079be:	d4cc      	bmi.n	2400795a <HAL_I2C_Master_Transmit+0x27e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240079c0:	f7fe f850 	bl	24005a64 <HAL_GetTick>
240079c4:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240079c8:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240079cc:	4285      	cmp	r5, r0
240079ce:	d301      	bcc.n	240079d4 <HAL_I2C_Master_Transmit+0x2f8>
240079d0:	2d00      	cmp	r5, #0
240079d2:	d1bd      	bne.n	24007950 <HAL_I2C_Master_Transmit+0x274>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240079d4:	699a      	ldr	r2, [r3, #24]
240079d6:	f012 0280 	ands.w	r2, r2, #128	; 0x80
240079da:	d1b9      	bne.n	24007950 <HAL_I2C_Master_Transmit+0x274>
240079dc:	e75c      	b.n	24007898 <HAL_I2C_Master_Transmit+0x1bc>
          hi2c->XferSize = hi2c->XferCount;
240079de:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
240079e2:	480c      	ldr	r0, [pc, #48]	; (24007a14 <HAL_I2C_Master_Transmit+0x338>)
          hi2c->XferSize = hi2c->XferCount;
240079e4:	b292      	uxth	r2, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240079e6:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
240079e8:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240079ec:	685a      	ldr	r2, [r3, #4]
240079ee:	4002      	ands	r2, r0
240079f0:	ea4a 0202 	orr.w	r2, sl, r2
240079f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
240079f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
240079fc:	605a      	str	r2, [r3, #4]
}
240079fe:	e6ce      	b.n	2400779e <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
24007a00:	2001      	movs	r0, #1
24007a02:	e6a1      	b.n	24007748 <HAL_I2C_Master_Transmit+0x6c>
24007a04:	fc009800 	.word	0xfc009800
24007a08:	02002000 	.word	0x02002000
24007a0c:	fe00e800 	.word	0xfe00e800
24007a10:	01ff2000 	.word	0x01ff2000
24007a14:	fc009c00 	.word	0xfc009c00
24007a18:	01ff0000 	.word	0x01ff0000

24007a1c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007a1c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24007a20:	2a20      	cmp	r2, #32
24007a22:	d123      	bne.n	24007a6c <HAL_I2CEx_ConfigAnalogFilter+0x50>
24007a24:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007a28:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007a2c:	4603      	mov	r3, r0
24007a2e:	2a01      	cmp	r2, #1
24007a30:	d01c      	beq.n	24007a6c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007a32:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
24007a34:	2024      	movs	r0, #36	; 0x24
{
24007a36:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
24007a38:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007a3c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
24007a40:	6810      	ldr	r0, [r2, #0]
24007a42:	f020 0001 	bic.w	r0, r0, #1
24007a46:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24007a48:	6810      	ldr	r0, [r2, #0]
24007a4a:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
24007a4e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
24007a50:	6810      	ldr	r0, [r2, #0]
24007a52:	4301      	orrs	r1, r0

    return HAL_OK;
24007a54:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
24007a56:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
24007a58:	6811      	ldr	r1, [r2, #0]
24007a5a:	f041 0101 	orr.w	r1, r1, #1
24007a5e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24007a60:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007a64:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007a68:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007a6c:	2002      	movs	r0, #2
}
24007a6e:	4770      	bx	lr

24007a70 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007a70:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24007a74:	2a20      	cmp	r2, #32
24007a76:	d122      	bne.n	24007abe <HAL_I2CEx_ConfigDigitalFilter+0x4e>
24007a78:	4603      	mov	r3, r0
{
24007a7a:	b500      	push	{lr}
24007a7c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007a80:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007a84:	2a01      	cmp	r2, #1
24007a86:	d01c      	beq.n	24007ac2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007a88:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
24007a8a:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007a8c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
24007a90:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24007a94:	6810      	ldr	r0, [r2, #0]
24007a96:	f020 0001 	bic.w	r0, r0, #1
24007a9a:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
24007a9c:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
24007a9e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
24007aa2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
24007aa6:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
24007aa8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
24007aaa:	6811      	ldr	r1, [r2, #0]
24007aac:	f041 0101 	orr.w	r1, r1, #1
24007ab0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24007ab2:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007ab6:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007aba:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007abe:	2002      	movs	r0, #2
}
24007ac0:	4770      	bx	lr
    return HAL_BUSY;
24007ac2:	2002      	movs	r0, #2
}
24007ac4:	f85d fb04 	ldr.w	pc, [sp], #4

24007ac8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24007ac8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007aca:	4c10      	ldr	r4, [pc, #64]	; (24007b0c <HAL_PWREx_ConfigSupply+0x44>)
24007acc:	68e3      	ldr	r3, [r4, #12]
24007ace:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007ad2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007ad4:	d105      	bne.n	24007ae2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007ad6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24007ada:	1a18      	subs	r0, r3, r0
24007adc:	bf18      	it	ne
24007ade:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24007ae0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24007ae2:	f023 0307 	bic.w	r3, r3, #7
24007ae6:	4318      	orrs	r0, r3
24007ae8:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
24007aea:	f7fd ffbb 	bl	24005a64 <HAL_GetTick>
24007aee:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24007af0:	e005      	b.n	24007afe <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24007af2:	f7fd ffb7 	bl	24005a64 <HAL_GetTick>
24007af6:	1b40      	subs	r0, r0, r5
24007af8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24007afc:	d804      	bhi.n	24007b08 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24007afe:	6863      	ldr	r3, [r4, #4]
24007b00:	049b      	lsls	r3, r3, #18
24007b02:	d5f6      	bpl.n	24007af2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
24007b04:	2000      	movs	r0, #0
}
24007b06:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
24007b08:	2001      	movs	r0, #1
}
24007b0a:	bd38      	pop	{r3, r4, r5, pc}
24007b0c:	58024800 	.word	0x58024800

24007b10 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24007b10:	b570      	push	{r4, r5, r6, lr}
24007b12:	4605      	mov	r5, r0
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24007b14:	f7fd ffa6 	bl	24005a64 <HAL_GetTick>

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24007b18:	2d00      	cmp	r5, #0
24007b1a:	d046      	beq.n	24007baa <HAL_QSPI_Init+0x9a>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
24007b1c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
24007b20:	4606      	mov	r6, r0
24007b22:	2b00      	cmp	r3, #0
24007b24:	d039      	beq.n	24007b9a <HAL_QSPI_Init+0x8a>
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24007b26:	6cac      	ldr	r4, [r5, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24007b28:	682a      	ldr	r2, [r5, #0]
24007b2a:	68a9      	ldr	r1, [r5, #8]
24007b2c:	6813      	ldr	r3, [r2, #0]
24007b2e:	3901      	subs	r1, #1
24007b30:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
24007b34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
24007b38:	6013      	str	r3, [r2, #0]
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24007b3a:	e001      	b.n	24007b40 <HAL_QSPI_Init+0x30>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24007b3c:	1c63      	adds	r3, r4, #1
24007b3e:	d124      	bne.n	24007b8a <HAL_QSPI_Init+0x7a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24007b40:	6893      	ldr	r3, [r2, #8]
24007b42:	f013 0320 	ands.w	r3, r3, #32
24007b46:	d1f9      	bne.n	24007b3c <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24007b48:	69e8      	ldr	r0, [r5, #28]
24007b4a:	68e9      	ldr	r1, [r5, #12]
24007b4c:	6814      	ldr	r4, [r2, #0]
24007b4e:	4301      	orrs	r1, r0
24007b50:	6a28      	ldr	r0, [r5, #32]
24007b52:	4301      	orrs	r1, r0
24007b54:	6868      	ldr	r0, [r5, #4]
24007b56:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
24007b5a:	4819      	ldr	r0, [pc, #100]	; (24007bc0 <HAL_QSPI_Init+0xb0>)
24007b5c:	4020      	ands	r0, r4
24007b5e:	4301      	orrs	r1, r0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24007b60:	6968      	ldr	r0, [r5, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24007b62:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24007b64:	69a9      	ldr	r1, [r5, #24]
24007b66:	6854      	ldr	r4, [r2, #4]
24007b68:	4301      	orrs	r1, r0
24007b6a:	6928      	ldr	r0, [r5, #16]
24007b6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
24007b70:	4814      	ldr	r0, [pc, #80]	; (24007bc4 <HAL_QSPI_Init+0xb4>)
24007b72:	4020      	ands	r0, r4
    hqspi->State = HAL_QSPI_STATE_READY;
24007b74:	2401      	movs	r4, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24007b76:	4301      	orrs	r1, r0
    hqspi->State = HAL_QSPI_STATE_READY;
24007b78:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24007b7a:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
24007b7c:	6811      	ldr	r1, [r2, #0]
24007b7e:	4321      	orrs	r1, r4
24007b80:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24007b82:	646b      	str	r3, [r5, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
24007b84:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
}
24007b88:	bd70      	pop	{r4, r5, r6, pc}
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24007b8a:	f7fd ff6b 	bl	24005a64 <HAL_GetTick>
24007b8e:	1b80      	subs	r0, r0, r6
24007b90:	42a0      	cmp	r0, r4
24007b92:	d80c      	bhi.n	24007bae <HAL_QSPI_Init+0x9e>
24007b94:	b15c      	cbz	r4, 24007bae <HAL_QSPI_Init+0x9e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24007b96:	682a      	ldr	r2, [r5, #0]
24007b98:	e7d2      	b.n	24007b40 <HAL_QSPI_Init+0x30>
    HAL_QSPI_MspInit(hqspi);
24007b9a:	4628      	mov	r0, r5
24007b9c:	f7fd fa1e 	bl	24004fdc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
24007ba0:	f241 3388 	movw	r3, #5000	; 0x1388
}
24007ba4:	461c      	mov	r4, r3
  hqspi->Timeout = Timeout;
24007ba6:	64ab      	str	r3, [r5, #72]	; 0x48
}
24007ba8:	e7be      	b.n	24007b28 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
24007baa:	2001      	movs	r0, #1
}
24007bac:	bd70      	pop	{r4, r5, r6, pc}
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24007bae:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24007bb0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24007bb2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24007bb6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
24007bb8:	4303      	orrs	r3, r0
24007bba:	646b      	str	r3, [r5, #68]	; 0x44
}
24007bbc:	bd70      	pop	{r4, r5, r6, pc}
24007bbe:	bf00      	nop
24007bc0:	00ffff2f 	.word	0x00ffff2f
24007bc4:	ffe0f8fe 	.word	0xffe0f8fe

24007bc8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007bc8:	4b3b      	ldr	r3, [pc, #236]	; (24007cb8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
24007bca:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007bce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007bd0:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
24007bd2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007bd8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007bdc:	d038      	beq.n	24007c50 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007bde:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007be2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007be6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007bea:	fb05 f101 	mul.w	r1, r5, r1
24007bee:	2a01      	cmp	r2, #1
24007bf0:	ee07 1a90 	vmov	s15, r1
24007bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
24007bf8:	d002      	beq.n	24007c00 <HAL_RCC_GetSysClockFreq.part.0+0x38>
24007bfa:	2a02      	cmp	r2, #2
24007bfc:	d04e      	beq.n	24007c9c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
24007bfe:	b34a      	cbz	r2, 24007c54 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c00:	ee07 0a90 	vmov	s15, r0
24007c04:	eddf 6a2d 	vldr	s13, [pc, #180]	; 24007cbc <HAL_RCC_GetSysClockFreq.part.0+0xf4>
24007c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007c0e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24007c12:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24007cc0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007c1a:	ee06 3a90 	vmov	s13, r3
24007c1e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24007c22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24007c26:	ee76 6a85 	vadd.f32	s13, s13, s10
24007c2a:	eee7 6a25 	vfma.f32	s13, s14, s11
24007c2e:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007c32:	4b21      	ldr	r3, [pc, #132]	; (24007cb8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
24007c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007c36:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007c3a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007c3c:	ee07 3a90 	vmov	s15, r3
24007c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007c4c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24007c50:	bc30      	pop	{r4, r5}
24007c52:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007c54:	681a      	ldr	r2, [r3, #0]
24007c56:	0692      	lsls	r2, r2, #26
24007c58:	d527      	bpl.n	24007caa <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007c5a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c5c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007c60:	4a18      	ldr	r2, [pc, #96]	; (24007cc4 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c62:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24007c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007c68:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007c70:	ed9f 5a13 	vldr	s10, [pc, #76]	; 24007cc0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24007c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007c78:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c7a:	ee06 3a90 	vmov	s13, r3
24007c7e:	ee05 2a90 	vmov	s11, r2
24007c82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24007c86:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007c8a:	ee76 6a86 	vadd.f32	s13, s13, s12
24007c8e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24007c92:	eee7 6a05 	vfma.f32	s13, s14, s10
24007c96:	ee66 6a26 	vmul.f32	s13, s12, s13
24007c9a:	e7ca      	b.n	24007c32 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007c9c:	ee07 0a90 	vmov	s15, r0
24007ca0:	eddf 6a09 	vldr	s13, [pc, #36]	; 24007cc8 <HAL_RCC_GetSysClockFreq.part.0+0x100>
24007ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007ca8:	e7b0      	b.n	24007c0c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007caa:	ee07 0a90 	vmov	s15, r0
24007cae:	eddf 6a07 	vldr	s13, [pc, #28]	; 24007ccc <HAL_RCC_GetSysClockFreq.part.0+0x104>
24007cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007cb6:	e7a9      	b.n	24007c0c <HAL_RCC_GetSysClockFreq.part.0+0x44>
24007cb8:	58024400 	.word	0x58024400
24007cbc:	4a742400 	.word	0x4a742400
24007cc0:	39000000 	.word	0x39000000
24007cc4:	03d09000 	.word	0x03d09000
24007cc8:	4b742400 	.word	0x4b742400
24007ccc:	4c742400 	.word	0x4c742400

24007cd0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24007cd0:	2800      	cmp	r0, #0
24007cd2:	f000 81e8 	beq.w	240080a6 <HAL_RCC_OscConfig+0x3d6>
{
24007cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24007cd8:	6803      	ldr	r3, [r0, #0]
24007cda:	4604      	mov	r4, r0
24007cdc:	07d9      	lsls	r1, r3, #31
24007cde:	d52e      	bpl.n	24007d3e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007ce0:	49a4      	ldr	r1, [pc, #656]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007ce2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007ce4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007ce6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007cea:	2a10      	cmp	r2, #16
24007cec:	f000 8107 	beq.w	24007efe <HAL_RCC_OscConfig+0x22e>
24007cf0:	2a18      	cmp	r2, #24
24007cf2:	f000 80ff 	beq.w	24007ef4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007cf6:	6863      	ldr	r3, [r4, #4]
24007cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007cfc:	f000 812a 	beq.w	24007f54 <HAL_RCC_OscConfig+0x284>
24007d00:	2b00      	cmp	r3, #0
24007d02:	f000 8168 	beq.w	24007fd6 <HAL_RCC_OscConfig+0x306>
24007d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24007d0a:	4b9a      	ldr	r3, [pc, #616]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007d0c:	681a      	ldr	r2, [r3, #0]
24007d0e:	f000 8289 	beq.w	24008224 <HAL_RCC_OscConfig+0x554>
24007d12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007d16:	601a      	str	r2, [r3, #0]
24007d18:	681a      	ldr	r2, [r3, #0]
24007d1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24007d1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
24007d20:	f7fd fea0 	bl	24005a64 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007d24:	4e93      	ldr	r6, [pc, #588]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
24007d26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007d28:	e005      	b.n	24007d36 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007d2a:	f7fd fe9b 	bl	24005a64 <HAL_GetTick>
24007d2e:	1b40      	subs	r0, r0, r5
24007d30:	2864      	cmp	r0, #100	; 0x64
24007d32:	f200 814e 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007d36:	6833      	ldr	r3, [r6, #0]
24007d38:	039b      	lsls	r3, r3, #14
24007d3a:	d5f6      	bpl.n	24007d2a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007d3c:	6823      	ldr	r3, [r4, #0]
24007d3e:	079d      	lsls	r5, r3, #30
24007d40:	f100 808a 	bmi.w	24007e58 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007d44:	06d9      	lsls	r1, r3, #27
24007d46:	d533      	bpl.n	24007db0 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007d48:	4a8a      	ldr	r2, [pc, #552]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007d4a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007d4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007d52:	2b08      	cmp	r3, #8
24007d54:	f000 80e3 	beq.w	24007f1e <HAL_RCC_OscConfig+0x24e>
24007d58:	2b18      	cmp	r3, #24
24007d5a:	f000 80db 	beq.w	24007f14 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007d5e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24007d60:	4d84      	ldr	r5, [pc, #528]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007d62:	2b00      	cmp	r3, #0
24007d64:	f000 816f 	beq.w	24008046 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
24007d68:	682b      	ldr	r3, [r5, #0]
24007d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007d6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007d70:	f7fd fe78 	bl	24005a64 <HAL_GetTick>
24007d74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007d76:	e005      	b.n	24007d84 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007d78:	f7fd fe74 	bl	24005a64 <HAL_GetTick>
24007d7c:	1b80      	subs	r0, r0, r6
24007d7e:	2802      	cmp	r0, #2
24007d80:	f200 8127 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007d84:	682b      	ldr	r3, [r5, #0]
24007d86:	05db      	lsls	r3, r3, #23
24007d88:	d5f6      	bpl.n	24007d78 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007d8a:	f7fd fe83 	bl	24005a94 <HAL_GetREVID>
24007d8e:	f241 0303 	movw	r3, #4099	; 0x1003
24007d92:	4298      	cmp	r0, r3
24007d94:	f200 826d 	bhi.w	24008272 <HAL_RCC_OscConfig+0x5a2>
24007d98:	6a22      	ldr	r2, [r4, #32]
24007d9a:	686b      	ldr	r3, [r5, #4]
24007d9c:	2a20      	cmp	r2, #32
24007d9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007da2:	bf0c      	ite	eq
24007da4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
24007da8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24007dac:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007dae:	6823      	ldr	r3, [r4, #0]
24007db0:	071d      	lsls	r5, r3, #28
24007db2:	d516      	bpl.n	24007de2 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007db4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
24007db6:	4d6f      	ldr	r5, [pc, #444]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007db8:	2b00      	cmp	r3, #0
24007dba:	f000 8122 	beq.w	24008002 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
24007dbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007dc0:	f043 0301 	orr.w	r3, r3, #1
24007dc4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24007dc6:	f7fd fe4d 	bl	24005a64 <HAL_GetTick>
24007dca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007dcc:	e005      	b.n	24007dda <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007dce:	f7fd fe49 	bl	24005a64 <HAL_GetTick>
24007dd2:	1b80      	subs	r0, r0, r6
24007dd4:	2802      	cmp	r0, #2
24007dd6:	f200 80fc 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007dda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007ddc:	0798      	lsls	r0, r3, #30
24007dde:	d5f6      	bpl.n	24007dce <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24007de0:	6823      	ldr	r3, [r4, #0]
24007de2:	069a      	lsls	r2, r3, #26
24007de4:	d516      	bpl.n	24007e14 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24007de6:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24007de8:	4d62      	ldr	r5, [pc, #392]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24007dea:	2b00      	cmp	r3, #0
24007dec:	f000 811a 	beq.w	24008024 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
24007df0:	682b      	ldr	r3, [r5, #0]
24007df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24007df6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24007df8:	f7fd fe34 	bl	24005a64 <HAL_GetTick>
24007dfc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007dfe:	e005      	b.n	24007e0c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007e00:	f7fd fe30 	bl	24005a64 <HAL_GetTick>
24007e04:	1b80      	subs	r0, r0, r6
24007e06:	2802      	cmp	r0, #2
24007e08:	f200 80e3 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007e0c:	682b      	ldr	r3, [r5, #0]
24007e0e:	049f      	lsls	r7, r3, #18
24007e10:	d5f6      	bpl.n	24007e00 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24007e12:	6823      	ldr	r3, [r4, #0]
24007e14:	0759      	lsls	r1, r3, #29
24007e16:	f100 80a3 	bmi.w	24007f60 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24007e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
24007e1c:	b1d0      	cbz	r0, 24007e54 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24007e1e:	4d55      	ldr	r5, [pc, #340]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007e20:	692b      	ldr	r3, [r5, #16]
24007e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007e26:	2b18      	cmp	r3, #24
24007e28:	f000 81ae 	beq.w	24008188 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
24007e2c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007e2e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24007e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007e34:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007e36:	f000 8142 	beq.w	240080be <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
24007e3a:	f7fd fe13 	bl	24005a64 <HAL_GetTick>
24007e3e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007e40:	e005      	b.n	24007e4e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007e42:	f7fd fe0f 	bl	24005a64 <HAL_GetTick>
24007e46:	1b00      	subs	r0, r0, r4
24007e48:	2802      	cmp	r0, #2
24007e4a:	f200 80c2 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007e4e:	682b      	ldr	r3, [r5, #0]
24007e50:	019b      	lsls	r3, r3, #6
24007e52:	d4f6      	bmi.n	24007e42 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
24007e54:	2000      	movs	r0, #0
}
24007e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007e58:	4a46      	ldr	r2, [pc, #280]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007e5a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007e5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007e5e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24007e62:	d12d      	bne.n	24007ec0 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24007e64:	4b43      	ldr	r3, [pc, #268]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007e66:	68e2      	ldr	r2, [r4, #12]
24007e68:	681b      	ldr	r3, [r3, #0]
24007e6a:	0759      	lsls	r1, r3, #29
24007e6c:	d501      	bpl.n	24007e72 <HAL_RCC_OscConfig+0x1a2>
24007e6e:	2a00      	cmp	r2, #0
24007e70:	d04e      	beq.n	24007f10 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007e72:	4d40      	ldr	r5, [pc, #256]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007e74:	682b      	ldr	r3, [r5, #0]
24007e76:	f023 0319 	bic.w	r3, r3, #25
24007e7a:	4313      	orrs	r3, r2
24007e7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007e7e:	f7fd fdf1 	bl	24005a64 <HAL_GetTick>
24007e82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007e84:	e005      	b.n	24007e92 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007e86:	f7fd fded 	bl	24005a64 <HAL_GetTick>
24007e8a:	1b80      	subs	r0, r0, r6
24007e8c:	2802      	cmp	r0, #2
24007e8e:	f200 80a0 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007e92:	682b      	ldr	r3, [r5, #0]
24007e94:	075b      	lsls	r3, r3, #29
24007e96:	d5f6      	bpl.n	24007e86 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007e98:	f7fd fdfc 	bl	24005a94 <HAL_GetREVID>
24007e9c:	f241 0303 	movw	r3, #4099	; 0x1003
24007ea0:	4298      	cmp	r0, r3
24007ea2:	f200 80f7 	bhi.w	24008094 <HAL_RCC_OscConfig+0x3c4>
24007ea6:	6922      	ldr	r2, [r4, #16]
24007ea8:	686b      	ldr	r3, [r5, #4]
24007eaa:	2a40      	cmp	r2, #64	; 0x40
24007eac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007eb0:	bf0c      	ite	eq
24007eb2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
24007eb6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24007eba:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007ebc:	6823      	ldr	r3, [r4, #0]
24007ebe:	e741      	b.n	24007d44 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007ec0:	2b18      	cmp	r3, #24
24007ec2:	f000 80e3 	beq.w	2400808c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007ec6:	4d2b      	ldr	r5, [pc, #172]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24007ec8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007eca:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24007ecc:	2a00      	cmp	r2, #0
24007ece:	f000 80cc 	beq.w	2400806a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007ed2:	f023 0319 	bic.w	r3, r3, #25
24007ed6:	4313      	orrs	r3, r2
24007ed8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007eda:	f7fd fdc3 	bl	24005a64 <HAL_GetTick>
24007ede:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007ee0:	e004      	b.n	24007eec <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007ee2:	f7fd fdbf 	bl	24005a64 <HAL_GetTick>
24007ee6:	1b80      	subs	r0, r0, r6
24007ee8:	2802      	cmp	r0, #2
24007eea:	d872      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007eec:	682b      	ldr	r3, [r5, #0]
24007eee:	075f      	lsls	r7, r3, #29
24007ef0:	d5f7      	bpl.n	24007ee2 <HAL_RCC_OscConfig+0x212>
24007ef2:	e7d1      	b.n	24007e98 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007ef4:	f001 0103 	and.w	r1, r1, #3
24007ef8:	2902      	cmp	r1, #2
24007efa:	f47f aefc 	bne.w	24007cf6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24007efe:	4a1d      	ldr	r2, [pc, #116]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007f00:	6812      	ldr	r2, [r2, #0]
24007f02:	0392      	lsls	r2, r2, #14
24007f04:	f57f af1b 	bpl.w	24007d3e <HAL_RCC_OscConfig+0x6e>
24007f08:	6862      	ldr	r2, [r4, #4]
24007f0a:	2a00      	cmp	r2, #0
24007f0c:	f47f af17 	bne.w	24007d3e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24007f10:	2001      	movs	r0, #1
}
24007f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007f14:	f002 0203 	and.w	r2, r2, #3
24007f18:	2a01      	cmp	r2, #1
24007f1a:	f47f af20 	bne.w	24007d5e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007f1e:	4b15      	ldr	r3, [pc, #84]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007f20:	681b      	ldr	r3, [r3, #0]
24007f22:	05da      	lsls	r2, r3, #23
24007f24:	d502      	bpl.n	24007f2c <HAL_RCC_OscConfig+0x25c>
24007f26:	69e3      	ldr	r3, [r4, #28]
24007f28:	2b80      	cmp	r3, #128	; 0x80
24007f2a:	d1f1      	bne.n	24007f10 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007f2c:	f7fd fdb2 	bl	24005a94 <HAL_GetREVID>
24007f30:	f241 0303 	movw	r3, #4099	; 0x1003
24007f34:	4298      	cmp	r0, r3
24007f36:	f200 80b8 	bhi.w	240080aa <HAL_RCC_OscConfig+0x3da>
24007f3a:	6a22      	ldr	r2, [r4, #32]
24007f3c:	2a20      	cmp	r2, #32
24007f3e:	f000 81a7 	beq.w	24008290 <HAL_RCC_OscConfig+0x5c0>
24007f42:	490c      	ldr	r1, [pc, #48]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007f44:	684b      	ldr	r3, [r1, #4]
24007f46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007f4a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24007f4e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007f50:	6823      	ldr	r3, [r4, #0]
24007f52:	e72d      	b.n	24007db0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007f54:	4a07      	ldr	r2, [pc, #28]	; (24007f74 <HAL_RCC_OscConfig+0x2a4>)
24007f56:	6813      	ldr	r3, [r2, #0]
24007f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007f5c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24007f5e:	e6df      	b.n	24007d20 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
24007f60:	4d05      	ldr	r5, [pc, #20]	; (24007f78 <HAL_RCC_OscConfig+0x2a8>)
24007f62:	682b      	ldr	r3, [r5, #0]
24007f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007f68:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24007f6a:	f7fd fd7b 	bl	24005a64 <HAL_GetTick>
24007f6e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007f70:	e009      	b.n	24007f86 <HAL_RCC_OscConfig+0x2b6>
24007f72:	bf00      	nop
24007f74:	58024400 	.word	0x58024400
24007f78:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24007f7c:	f7fd fd72 	bl	24005a64 <HAL_GetTick>
24007f80:	1b80      	subs	r0, r0, r6
24007f82:	2864      	cmp	r0, #100	; 0x64
24007f84:	d825      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007f86:	682b      	ldr	r3, [r5, #0]
24007f88:	05da      	lsls	r2, r3, #23
24007f8a:	d5f7      	bpl.n	24007f7c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007f8c:	68a3      	ldr	r3, [r4, #8]
24007f8e:	2b01      	cmp	r3, #1
24007f90:	f000 8178 	beq.w	24008284 <HAL_RCC_OscConfig+0x5b4>
24007f94:	2b00      	cmp	r3, #0
24007f96:	f000 8153 	beq.w	24008240 <HAL_RCC_OscConfig+0x570>
24007f9a:	2b05      	cmp	r3, #5
24007f9c:	4ba5      	ldr	r3, [pc, #660]	; (24008234 <HAL_RCC_OscConfig+0x564>)
24007f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007fa0:	f000 817f 	beq.w	240082a2 <HAL_RCC_OscConfig+0x5d2>
24007fa4:	f022 0201 	bic.w	r2, r2, #1
24007fa8:	671a      	str	r2, [r3, #112]	; 0x70
24007faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007fac:	f022 0204 	bic.w	r2, r2, #4
24007fb0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
24007fb2:	f7fd fd57 	bl	24005a64 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007fb6:	4e9f      	ldr	r6, [pc, #636]	; (24008234 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007fb8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007fbc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007fbe:	e004      	b.n	24007fca <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007fc0:	f7fd fd50 	bl	24005a64 <HAL_GetTick>
24007fc4:	1b40      	subs	r0, r0, r5
24007fc6:	42b8      	cmp	r0, r7
24007fc8:	d803      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007fca:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007fcc:	079b      	lsls	r3, r3, #30
24007fce:	d5f7      	bpl.n	24007fc0 <HAL_RCC_OscConfig+0x2f0>
24007fd0:	e723      	b.n	24007e1a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24007fd2:	2003      	movs	r0, #3
}
24007fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007fd6:	4d97      	ldr	r5, [pc, #604]	; (24008234 <HAL_RCC_OscConfig+0x564>)
24007fd8:	682b      	ldr	r3, [r5, #0]
24007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24007fde:	602b      	str	r3, [r5, #0]
24007fe0:	682b      	ldr	r3, [r5, #0]
24007fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24007fe6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007fe8:	f7fd fd3c 	bl	24005a64 <HAL_GetTick>
24007fec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007fee:	e004      	b.n	24007ffa <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007ff0:	f7fd fd38 	bl	24005a64 <HAL_GetTick>
24007ff4:	1b80      	subs	r0, r0, r6
24007ff6:	2864      	cmp	r0, #100	; 0x64
24007ff8:	d8eb      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007ffa:	682b      	ldr	r3, [r5, #0]
24007ffc:	039f      	lsls	r7, r3, #14
24007ffe:	d4f7      	bmi.n	24007ff0 <HAL_RCC_OscConfig+0x320>
24008000:	e69c      	b.n	24007d3c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24008002:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24008004:	f023 0301 	bic.w	r3, r3, #1
24008008:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
2400800a:	f7fd fd2b 	bl	24005a64 <HAL_GetTick>
2400800e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24008010:	e004      	b.n	2400801c <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24008012:	f7fd fd27 	bl	24005a64 <HAL_GetTick>
24008016:	1b80      	subs	r0, r0, r6
24008018:	2802      	cmp	r0, #2
2400801a:	d8da      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400801c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400801e:	0799      	lsls	r1, r3, #30
24008020:	d4f7      	bmi.n	24008012 <HAL_RCC_OscConfig+0x342>
24008022:	e6dd      	b.n	24007de0 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
24008024:	682b      	ldr	r3, [r5, #0]
24008026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2400802a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
2400802c:	f7fd fd1a 	bl	24005a64 <HAL_GetTick>
24008030:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24008032:	e004      	b.n	2400803e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24008034:	f7fd fd16 	bl	24005a64 <HAL_GetTick>
24008038:	1b80      	subs	r0, r0, r6
2400803a:	2802      	cmp	r0, #2
2400803c:	d8c9      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2400803e:	682b      	ldr	r3, [r5, #0]
24008040:	0498      	lsls	r0, r3, #18
24008042:	d4f7      	bmi.n	24008034 <HAL_RCC_OscConfig+0x364>
24008044:	e6e5      	b.n	24007e12 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
24008046:	682b      	ldr	r3, [r5, #0]
24008048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400804c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400804e:	f7fd fd09 	bl	24005a64 <HAL_GetTick>
24008052:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24008054:	e004      	b.n	24008060 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24008056:	f7fd fd05 	bl	24005a64 <HAL_GetTick>
2400805a:	1b80      	subs	r0, r0, r6
2400805c:	2802      	cmp	r0, #2
2400805e:	d8b8      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24008060:	682b      	ldr	r3, [r5, #0]
24008062:	05df      	lsls	r7, r3, #23
24008064:	d4f7      	bmi.n	24008056 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008066:	6823      	ldr	r3, [r4, #0]
24008068:	e6a2      	b.n	24007db0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
2400806a:	f023 0301 	bic.w	r3, r3, #1
2400806e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24008070:	f7fd fcf8 	bl	24005a64 <HAL_GetTick>
24008074:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24008076:	e004      	b.n	24008082 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24008078:	f7fd fcf4 	bl	24005a64 <HAL_GetTick>
2400807c:	1b80      	subs	r0, r0, r6
2400807e:	2802      	cmp	r0, #2
24008080:	d8a7      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24008082:	682b      	ldr	r3, [r5, #0]
24008084:	0758      	lsls	r0, r3, #29
24008086:	d4f7      	bmi.n	24008078 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24008088:	6823      	ldr	r3, [r4, #0]
2400808a:	e65b      	b.n	24007d44 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400808c:	0790      	lsls	r0, r2, #30
2400808e:	f47f af1a 	bne.w	24007ec6 <HAL_RCC_OscConfig+0x1f6>
24008092:	e6e7      	b.n	24007e64 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24008094:	686b      	ldr	r3, [r5, #4]
24008096:	6922      	ldr	r2, [r4, #16]
24008098:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
2400809c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240080a0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240080a2:	6823      	ldr	r3, [r4, #0]
240080a4:	e64e      	b.n	24007d44 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
240080a6:	2001      	movs	r0, #1
}
240080a8:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240080aa:	4a62      	ldr	r2, [pc, #392]	; (24008234 <HAL_RCC_OscConfig+0x564>)
240080ac:	6a21      	ldr	r1, [r4, #32]
240080ae:	68d3      	ldr	r3, [r2, #12]
240080b0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240080b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
240080b8:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240080ba:	6823      	ldr	r3, [r4, #0]
240080bc:	e678      	b.n	24007db0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
240080be:	f7fd fcd1 	bl	24005a64 <HAL_GetTick>
240080c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240080c4:	e004      	b.n	240080d0 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240080c6:	f7fd fccd 	bl	24005a64 <HAL_GetTick>
240080ca:	1b80      	subs	r0, r0, r6
240080cc:	2802      	cmp	r0, #2
240080ce:	d880      	bhi.n	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240080d0:	682b      	ldr	r3, [r5, #0]
240080d2:	0199      	lsls	r1, r3, #6
240080d4:	d4f7      	bmi.n	240080c6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240080d6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
240080d8:	4b57      	ldr	r3, [pc, #348]	; (24008238 <HAL_RCC_OscConfig+0x568>)
240080da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
240080dc:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240080de:	4957      	ldr	r1, [pc, #348]	; (2400823c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240080e0:	4e54      	ldr	r6, [pc, #336]	; (24008234 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240080e2:	4313      	orrs	r3, r2
240080e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240080e6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
240080ea:	62ab      	str	r3, [r5, #40]	; 0x28
240080ec:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
240080f0:	3b01      	subs	r3, #1
240080f2:	3a01      	subs	r2, #1
240080f4:	025b      	lsls	r3, r3, #9
240080f6:	0412      	lsls	r2, r2, #16
240080f8:	b29b      	uxth	r3, r3
240080fa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240080fe:	4313      	orrs	r3, r2
24008100:	6b22      	ldr	r2, [r4, #48]	; 0x30
24008102:	3a01      	subs	r2, #1
24008104:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008108:	4313      	orrs	r3, r2
2400810a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
2400810c:	3a01      	subs	r2, #1
2400810e:	0612      	lsls	r2, r2, #24
24008110:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24008114:	4313      	orrs	r3, r2
24008116:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24008118:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400811a:	f023 0301 	bic.w	r3, r3, #1
2400811e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008120:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24008122:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24008124:	4011      	ands	r1, r2
24008126:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
2400812a:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2400812c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400812e:	6c22      	ldr	r2, [r4, #64]	; 0x40
24008130:	f023 030c 	bic.w	r3, r3, #12
24008134:	4313      	orrs	r3, r2
24008136:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24008138:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400813a:	6c62      	ldr	r2, [r4, #68]	; 0x44
2400813c:	f023 0302 	bic.w	r3, r3, #2
24008140:	4313      	orrs	r3, r2
24008142:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24008144:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24008146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400814a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400814c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400814e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008152:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24008154:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24008156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400815a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
2400815c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400815e:	f043 0301 	orr.w	r3, r3, #1
24008162:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24008164:	682b      	ldr	r3, [r5, #0]
24008166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400816a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400816c:	f7fd fc7a 	bl	24005a64 <HAL_GetTick>
24008170:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008172:	e005      	b.n	24008180 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24008174:	f7fd fc76 	bl	24005a64 <HAL_GetTick>
24008178:	1b00      	subs	r0, r0, r4
2400817a:	2802      	cmp	r0, #2
2400817c:	f63f af29 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008180:	6833      	ldr	r3, [r6, #0]
24008182:	019a      	lsls	r2, r3, #6
24008184:	d5f6      	bpl.n	24008174 <HAL_RCC_OscConfig+0x4a4>
24008186:	e665      	b.n	24007e54 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24008188:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
2400818a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
2400818c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400818e:	f43f ae62 	beq.w	24007e56 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24008192:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24008196:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24008198:	428b      	cmp	r3, r1
2400819a:	f47f aeb9 	bne.w	24007f10 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2400819e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240081a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240081a4:	429a      	cmp	r2, r3
240081a6:	f47f aeb3 	bne.w	24007f10 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240081aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
240081ac:	f3c6 0208 	ubfx	r2, r6, #0, #9
240081b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240081b2:	429a      	cmp	r2, r3
240081b4:	f47f aeac 	bne.w	24007f10 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240081b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
240081ba:	f3c6 2246 	ubfx	r2, r6, #9, #7
240081be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240081c0:	429a      	cmp	r2, r3
240081c2:	f47f aea5 	bne.w	24007f10 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240081c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240081c8:	f3c6 4206 	ubfx	r2, r6, #16, #7
240081cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240081ce:	429a      	cmp	r2, r3
240081d0:	f47f ae9e 	bne.w	24007f10 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240081d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240081d6:	f3c6 6606 	ubfx	r6, r6, #24, #7
240081da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240081dc:	429e      	cmp	r6, r3
240081de:	f47f ae97 	bne.w	24007f10 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240081e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240081e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240081e6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240081ea:	429a      	cmp	r2, r3
240081ec:	f43f ae32 	beq.w	24007e54 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
240081f0:	4a10      	ldr	r2, [pc, #64]	; (24008234 <HAL_RCC_OscConfig+0x564>)
240081f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240081f4:	f023 0301 	bic.w	r3, r3, #1
240081f8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
240081fa:	f7fd fc33 	bl	24005a64 <HAL_GetTick>
240081fe:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24008200:	f7fd fc30 	bl	24005a64 <HAL_GetTick>
24008204:	42a8      	cmp	r0, r5
24008206:	d0fb      	beq.n	24008200 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24008208:	4a0a      	ldr	r2, [pc, #40]	; (24008234 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
2400820a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400820c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400820e:	4b0b      	ldr	r3, [pc, #44]	; (2400823c <HAL_RCC_OscConfig+0x56c>)
24008210:	6b54      	ldr	r4, [r2, #52]	; 0x34
24008212:	4023      	ands	r3, r4
24008214:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24008218:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
2400821a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400821c:	f043 0301 	orr.w	r3, r3, #1
24008220:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24008222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24008224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24008228:	601a      	str	r2, [r3, #0]
2400822a:	681a      	ldr	r2, [r3, #0]
2400822c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24008230:	601a      	str	r2, [r3, #0]
24008232:	e575      	b.n	24007d20 <HAL_RCC_OscConfig+0x50>
24008234:	58024400 	.word	0x58024400
24008238:	fffffc0c 	.word	0xfffffc0c
2400823c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24008240:	4d1c      	ldr	r5, [pc, #112]	; (240082b4 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008242:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24008246:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24008248:	f023 0301 	bic.w	r3, r3, #1
2400824c:	672b      	str	r3, [r5, #112]	; 0x70
2400824e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24008250:	f023 0304 	bic.w	r3, r3, #4
24008254:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
24008256:	f7fd fc05 	bl	24005a64 <HAL_GetTick>
2400825a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400825c:	e005      	b.n	2400826a <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400825e:	f7fd fc01 	bl	24005a64 <HAL_GetTick>
24008262:	1b80      	subs	r0, r0, r6
24008264:	42b8      	cmp	r0, r7
24008266:	f63f aeb4 	bhi.w	24007fd2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400826a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
2400826c:	0798      	lsls	r0, r3, #30
2400826e:	d4f6      	bmi.n	2400825e <HAL_RCC_OscConfig+0x58e>
24008270:	e5d3      	b.n	24007e1a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008272:	68eb      	ldr	r3, [r5, #12]
24008274:	6a22      	ldr	r2, [r4, #32]
24008276:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
2400827a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400827e:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24008280:	6823      	ldr	r3, [r4, #0]
24008282:	e595      	b.n	24007db0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24008284:	4a0b      	ldr	r2, [pc, #44]	; (240082b4 <HAL_RCC_OscConfig+0x5e4>)
24008286:	6f13      	ldr	r3, [r2, #112]	; 0x70
24008288:	f043 0301 	orr.w	r3, r3, #1
2400828c:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2400828e:	e690      	b.n	24007fb2 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24008290:	4a08      	ldr	r2, [pc, #32]	; (240082b4 <HAL_RCC_OscConfig+0x5e4>)
24008292:	6853      	ldr	r3, [r2, #4]
24008294:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24008298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
2400829c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400829e:	6823      	ldr	r3, [r4, #0]
240082a0:	e586      	b.n	24007db0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240082a2:	f042 0204 	orr.w	r2, r2, #4
240082a6:	671a      	str	r2, [r3, #112]	; 0x70
240082a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240082aa:	f042 0201 	orr.w	r2, r2, #1
240082ae:	671a      	str	r2, [r3, #112]	; 0x70
240082b0:	e67f      	b.n	24007fb2 <HAL_RCC_OscConfig+0x2e2>
240082b2:	bf00      	nop
240082b4:	58024400 	.word	0x58024400

240082b8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240082b8:	4a47      	ldr	r2, [pc, #284]	; (240083d8 <HAL_RCC_GetSysClockFreq+0x120>)
240082ba:	6913      	ldr	r3, [r2, #16]
240082bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
240082c0:	2b10      	cmp	r3, #16
240082c2:	d004      	beq.n	240082ce <HAL_RCC_GetSysClockFreq+0x16>
240082c4:	2b18      	cmp	r3, #24
240082c6:	d00d      	beq.n	240082e4 <HAL_RCC_GetSysClockFreq+0x2c>
240082c8:	b11b      	cbz	r3, 240082d2 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
240082ca:	4844      	ldr	r0, [pc, #272]	; (240083dc <HAL_RCC_GetSysClockFreq+0x124>)
240082cc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
240082ce:	4844      	ldr	r0, [pc, #272]	; (240083e0 <HAL_RCC_GetSysClockFreq+0x128>)
240082d0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240082d2:	6813      	ldr	r3, [r2, #0]
240082d4:	0699      	lsls	r1, r3, #26
240082d6:	d54a      	bpl.n	2400836e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240082d8:	6813      	ldr	r3, [r2, #0]
240082da:	4842      	ldr	r0, [pc, #264]	; (240083e4 <HAL_RCC_GetSysClockFreq+0x12c>)
240082dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240082e0:	40d8      	lsrs	r0, r3
240082e2:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240082e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
240082e6:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240082e8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240082ea:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
240082ec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240082f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240082f2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
240082f6:	d038      	beq.n	2400836a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240082f8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240082fc:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008300:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008304:	fb05 f101 	mul.w	r1, r5, r1
24008308:	2b01      	cmp	r3, #1
2400830a:	ee07 1a90 	vmov	s15, r1
2400830e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
24008312:	d002      	beq.n	2400831a <HAL_RCC_GetSysClockFreq+0x62>
24008314:	2b02      	cmp	r3, #2
24008316:	d02c      	beq.n	24008372 <HAL_RCC_GetSysClockFreq+0xba>
24008318:	b393      	cbz	r3, 24008380 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400831a:	ee07 0a90 	vmov	s15, r0
2400831e:	eddf 6a32 	vldr	s13, [pc, #200]	; 240083e8 <HAL_RCC_GetSysClockFreq+0x130>
24008322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008326:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008328:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400832c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 240083ec <HAL_RCC_GetSysClockFreq+0x134>
24008330:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008334:	ee06 3a90 	vmov	s13, r3
24008338:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400833c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008340:	ee76 6a85 	vadd.f32	s13, s13, s10
24008344:	eee7 6a25 	vfma.f32	s13, s14, s11
24008348:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400834c:	4b22      	ldr	r3, [pc, #136]	; (240083d8 <HAL_RCC_GetSysClockFreq+0x120>)
2400834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008350:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008354:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24008356:	ee07 3a90 	vmov	s15, r3
2400835a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2400835e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008366:	ee17 0a90 	vmov	r0, s15
}
2400836a:	bc30      	pop	{r4, r5}
2400836c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
2400836e:	481d      	ldr	r0, [pc, #116]	; (240083e4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
24008370:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008372:	ee07 0a90 	vmov	s15, r0
24008376:	eddf 6a1e 	vldr	s13, [pc, #120]	; 240083f0 <HAL_RCC_GetSysClockFreq+0x138>
2400837a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400837e:	e7d2      	b.n	24008326 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008380:	6813      	ldr	r3, [r2, #0]
24008382:	069b      	lsls	r3, r3, #26
24008384:	d520      	bpl.n	240083c8 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008386:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008388:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400838c:	4915      	ldr	r1, [pc, #84]	; (240083e4 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400838e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008392:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008394:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400839c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 240083ec <HAL_RCC_GetSysClockFreq+0x134>
240083a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240083a4:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083a6:	ee06 3a90 	vmov	s13, r3
240083aa:	ee05 1a90 	vmov	s11, r1
240083ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240083b2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240083b6:	ee76 6a86 	vadd.f32	s13, s13, s12
240083ba:	ee85 6aa7 	vdiv.f32	s12, s11, s15
240083be:	eee7 6a05 	vfma.f32	s13, s14, s10
240083c2:	ee66 6a26 	vmul.f32	s13, s12, s13
240083c6:	e7c1      	b.n	2400834c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083c8:	ee07 0a90 	vmov	s15, r0
240083cc:	eddf 6a09 	vldr	s13, [pc, #36]	; 240083f4 <HAL_RCC_GetSysClockFreq+0x13c>
240083d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240083d4:	e7a7      	b.n	24008326 <HAL_RCC_GetSysClockFreq+0x6e>
240083d6:	bf00      	nop
240083d8:	58024400 	.word	0x58024400
240083dc:	003d0900 	.word	0x003d0900
240083e0:	00f42400 	.word	0x00f42400
240083e4:	03d09000 	.word	0x03d09000
240083e8:	4a742400 	.word	0x4a742400
240083ec:	39000000 	.word	0x39000000
240083f0:	4b742400 	.word	0x4b742400
240083f4:	4c742400 	.word	0x4c742400

240083f8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
240083f8:	2800      	cmp	r0, #0
240083fa:	f000 810c 	beq.w	24008616 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
240083fe:	4a8c      	ldr	r2, [pc, #560]	; (24008630 <HAL_RCC_ClockConfig+0x238>)
24008400:	6813      	ldr	r3, [r2, #0]
24008402:	f003 030f 	and.w	r3, r3, #15
24008406:	428b      	cmp	r3, r1
{
24008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400840c:	4604      	mov	r4, r0
2400840e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24008410:	d20c      	bcs.n	2400842c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24008412:	6813      	ldr	r3, [r2, #0]
24008414:	f023 030f 	bic.w	r3, r3, #15
24008418:	430b      	orrs	r3, r1
2400841a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2400841c:	6813      	ldr	r3, [r2, #0]
2400841e:	f003 030f 	and.w	r3, r3, #15
24008422:	428b      	cmp	r3, r1
24008424:	d002      	beq.n	2400842c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24008426:	2001      	movs	r0, #1
}
24008428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2400842c:	6823      	ldr	r3, [r4, #0]
2400842e:	075f      	lsls	r7, r3, #29
24008430:	d50b      	bpl.n	2400844a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24008432:	4980      	ldr	r1, [pc, #512]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
24008434:	6920      	ldr	r0, [r4, #16]
24008436:	698a      	ldr	r2, [r1, #24]
24008438:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400843c:	4290      	cmp	r0, r2
2400843e:	d904      	bls.n	2400844a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24008440:	698a      	ldr	r2, [r1, #24]
24008442:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24008446:	4302      	orrs	r2, r0
24008448:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400844a:	071e      	lsls	r6, r3, #28
2400844c:	d50b      	bpl.n	24008466 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400844e:	4979      	ldr	r1, [pc, #484]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
24008450:	6960      	ldr	r0, [r4, #20]
24008452:	69ca      	ldr	r2, [r1, #28]
24008454:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008458:	4290      	cmp	r0, r2
2400845a:	d904      	bls.n	24008466 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400845c:	69ca      	ldr	r2, [r1, #28]
2400845e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24008462:	4302      	orrs	r2, r0
24008464:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24008466:	06d8      	lsls	r0, r3, #27
24008468:	d50b      	bpl.n	24008482 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400846a:	4972      	ldr	r1, [pc, #456]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
2400846c:	69a0      	ldr	r0, [r4, #24]
2400846e:	69ca      	ldr	r2, [r1, #28]
24008470:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24008474:	4290      	cmp	r0, r2
24008476:	d904      	bls.n	24008482 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24008478:	69ca      	ldr	r2, [r1, #28]
2400847a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
2400847e:	4302      	orrs	r2, r0
24008480:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24008482:	0699      	lsls	r1, r3, #26
24008484:	d50b      	bpl.n	2400849e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24008486:	496b      	ldr	r1, [pc, #428]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
24008488:	69e0      	ldr	r0, [r4, #28]
2400848a:	6a0a      	ldr	r2, [r1, #32]
2400848c:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008490:	4290      	cmp	r0, r2
24008492:	d904      	bls.n	2400849e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24008494:	6a0a      	ldr	r2, [r1, #32]
24008496:	f022 0270 	bic.w	r2, r2, #112	; 0x70
2400849a:	4302      	orrs	r2, r0
2400849c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400849e:	079a      	lsls	r2, r3, #30
240084a0:	f140 80ab 	bpl.w	240085fa <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240084a4:	4863      	ldr	r0, [pc, #396]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
240084a6:	68e1      	ldr	r1, [r4, #12]
240084a8:	6982      	ldr	r2, [r0, #24]
240084aa:	f002 020f 	and.w	r2, r2, #15
240084ae:	4291      	cmp	r1, r2
240084b0:	d904      	bls.n	240084bc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240084b2:	6982      	ldr	r2, [r0, #24]
240084b4:	f022 020f 	bic.w	r2, r2, #15
240084b8:	430a      	orrs	r2, r1
240084ba:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240084bc:	07d8      	lsls	r0, r3, #31
240084be:	d530      	bpl.n	24008522 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
240084c0:	4a5c      	ldr	r2, [pc, #368]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
240084c2:	68a1      	ldr	r1, [r4, #8]
240084c4:	6993      	ldr	r3, [r2, #24]
240084c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
240084ca:	430b      	orrs	r3, r1
240084cc:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240084ce:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240084d0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240084d2:	2902      	cmp	r1, #2
240084d4:	f000 80a1 	beq.w	2400861a <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
240084d8:	2903      	cmp	r1, #3
240084da:	f000 8098 	beq.w	2400860e <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
240084de:	2901      	cmp	r1, #1
240084e0:	f000 80a1 	beq.w	24008626 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240084e4:	0758      	lsls	r0, r3, #29
240084e6:	d59e      	bpl.n	24008426 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240084e8:	4e52      	ldr	r6, [pc, #328]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240084ea:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240084ee:	6933      	ldr	r3, [r6, #16]
240084f0:	f023 0307 	bic.w	r3, r3, #7
240084f4:	430b      	orrs	r3, r1
240084f6:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
240084f8:	f7fd fab4 	bl	24005a64 <HAL_GetTick>
240084fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240084fe:	e005      	b.n	2400850c <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24008500:	f7fd fab0 	bl	24005a64 <HAL_GetTick>
24008504:	1bc0      	subs	r0, r0, r7
24008506:	4540      	cmp	r0, r8
24008508:	f200 808b 	bhi.w	24008622 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2400850c:	6933      	ldr	r3, [r6, #16]
2400850e:	6862      	ldr	r2, [r4, #4]
24008510:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008514:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24008518:	d1f2      	bne.n	24008500 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400851a:	6823      	ldr	r3, [r4, #0]
2400851c:	0799      	lsls	r1, r3, #30
2400851e:	d506      	bpl.n	2400852e <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24008520:	68e1      	ldr	r1, [r4, #12]
24008522:	4844      	ldr	r0, [pc, #272]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
24008524:	6982      	ldr	r2, [r0, #24]
24008526:	f002 020f 	and.w	r2, r2, #15
2400852a:	428a      	cmp	r2, r1
2400852c:	d869      	bhi.n	24008602 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2400852e:	4940      	ldr	r1, [pc, #256]	; (24008630 <HAL_RCC_ClockConfig+0x238>)
24008530:	680a      	ldr	r2, [r1, #0]
24008532:	f002 020f 	and.w	r2, r2, #15
24008536:	42aa      	cmp	r2, r5
24008538:	d90a      	bls.n	24008550 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400853a:	680a      	ldr	r2, [r1, #0]
2400853c:	f022 020f 	bic.w	r2, r2, #15
24008540:	432a      	orrs	r2, r5
24008542:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24008544:	680a      	ldr	r2, [r1, #0]
24008546:	f002 020f 	and.w	r2, r2, #15
2400854a:	42aa      	cmp	r2, r5
2400854c:	f47f af6b 	bne.w	24008426 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24008550:	075a      	lsls	r2, r3, #29
24008552:	d50b      	bpl.n	2400856c <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24008554:	4937      	ldr	r1, [pc, #220]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
24008556:	6920      	ldr	r0, [r4, #16]
24008558:	698a      	ldr	r2, [r1, #24]
2400855a:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400855e:	4290      	cmp	r0, r2
24008560:	d204      	bcs.n	2400856c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24008562:	698a      	ldr	r2, [r1, #24]
24008564:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24008568:	4302      	orrs	r2, r0
2400856a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400856c:	071f      	lsls	r7, r3, #28
2400856e:	d50b      	bpl.n	24008588 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24008570:	4930      	ldr	r1, [pc, #192]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
24008572:	6960      	ldr	r0, [r4, #20]
24008574:	69ca      	ldr	r2, [r1, #28]
24008576:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400857a:	4290      	cmp	r0, r2
2400857c:	d204      	bcs.n	24008588 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400857e:	69ca      	ldr	r2, [r1, #28]
24008580:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24008584:	4302      	orrs	r2, r0
24008586:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24008588:	06de      	lsls	r6, r3, #27
2400858a:	d50b      	bpl.n	240085a4 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400858c:	4929      	ldr	r1, [pc, #164]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
2400858e:	69a0      	ldr	r0, [r4, #24]
24008590:	69ca      	ldr	r2, [r1, #28]
24008592:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24008596:	4290      	cmp	r0, r2
24008598:	d204      	bcs.n	240085a4 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400859a:	69ca      	ldr	r2, [r1, #28]
2400859c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
240085a0:	4302      	orrs	r2, r0
240085a2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240085a4:	069d      	lsls	r5, r3, #26
240085a6:	d50b      	bpl.n	240085c0 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240085a8:	4a22      	ldr	r2, [pc, #136]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
240085aa:	69e1      	ldr	r1, [r4, #28]
240085ac:	6a13      	ldr	r3, [r2, #32]
240085ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
240085b2:	4299      	cmp	r1, r3
240085b4:	d204      	bcs.n	240085c0 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240085b6:	6a13      	ldr	r3, [r2, #32]
240085b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240085bc:	430b      	orrs	r3, r1
240085be:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085c0:	f7ff fe7a 	bl	240082b8 <HAL_RCC_GetSysClockFreq>
240085c4:	4a1b      	ldr	r2, [pc, #108]	; (24008634 <HAL_RCC_ClockConfig+0x23c>)
240085c6:	4603      	mov	r3, r0
240085c8:	481b      	ldr	r0, [pc, #108]	; (24008638 <HAL_RCC_ClockConfig+0x240>)
240085ca:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085cc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085ce:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
240085d2:	4d1a      	ldr	r5, [pc, #104]	; (2400863c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085d4:	f002 020f 	and.w	r2, r2, #15
240085d8:	4c19      	ldr	r4, [pc, #100]	; (24008640 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085da:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085dc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085de:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
240085e2:	4818      	ldr	r0, [pc, #96]	; (24008644 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085e4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240085e8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
240085ea:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
240085ec:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240085ee:	40d3      	lsrs	r3, r2
240085f0:	6023      	str	r3, [r4, #0]
}
240085f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
240085f6:	f7fd b9d3 	b.w	240059a0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240085fa:	07da      	lsls	r2, r3, #31
240085fc:	f53f af60 	bmi.w	240084c0 <HAL_RCC_ClockConfig+0xc8>
24008600:	e795      	b.n	2400852e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24008602:	6982      	ldr	r2, [r0, #24]
24008604:	f022 020f 	bic.w	r2, r2, #15
24008608:	4311      	orrs	r1, r2
2400860a:	6181      	str	r1, [r0, #24]
2400860c:	e78f      	b.n	2400852e <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2400860e:	019f      	lsls	r7, r3, #6
24008610:	f53f af6a 	bmi.w	240084e8 <HAL_RCC_ClockConfig+0xf0>
24008614:	e707      	b.n	24008426 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24008616:	2001      	movs	r0, #1
}
24008618:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400861a:	039b      	lsls	r3, r3, #14
2400861c:	f53f af64 	bmi.w	240084e8 <HAL_RCC_ClockConfig+0xf0>
24008620:	e701      	b.n	24008426 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24008622:	2003      	movs	r0, #3
24008624:	e700      	b.n	24008428 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008626:	05de      	lsls	r6, r3, #23
24008628:	f53f af5e 	bmi.w	240084e8 <HAL_RCC_ClockConfig+0xf0>
2400862c:	e6fb      	b.n	24008426 <HAL_RCC_ClockConfig+0x2e>
2400862e:	bf00      	nop
24008630:	52002000 	.word	0x52002000
24008634:	58024400 	.word	0x58024400
24008638:	2401ae80 	.word	0x2401ae80
2400863c:	20000750 	.word	0x20000750
24008640:	20000754 	.word	0x20000754
24008644:	2000075c 	.word	0x2000075c

24008648 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008648:	4a18      	ldr	r2, [pc, #96]	; (240086ac <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2400864a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400864c:	6913      	ldr	r3, [r2, #16]
2400864e:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008652:	2b10      	cmp	r3, #16
24008654:	d01a      	beq.n	2400868c <HAL_RCC_GetHCLKFreq+0x44>
24008656:	2b18      	cmp	r3, #24
24008658:	d023      	beq.n	240086a2 <HAL_RCC_GetHCLKFreq+0x5a>
2400865a:	b1cb      	cbz	r3, 24008690 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
2400865c:	4814      	ldr	r0, [pc, #80]	; (240086b0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400865e:	4b13      	ldr	r3, [pc, #76]	; (240086ac <HAL_RCC_GetHCLKFreq+0x64>)
24008660:	4914      	ldr	r1, [pc, #80]	; (240086b4 <HAL_RCC_GetHCLKFreq+0x6c>)
24008662:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008664:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008666:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400866a:	4c13      	ldr	r4, [pc, #76]	; (240086b8 <HAL_RCC_GetHCLKFreq+0x70>)
2400866c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24008670:	4d12      	ldr	r5, [pc, #72]	; (240086bc <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008672:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008674:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008676:	f002 021f 	and.w	r2, r2, #31
2400867a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400867e:	f003 001f 	and.w	r0, r3, #31
24008682:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
24008686:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008688:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
2400868a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400868c:	480c      	ldr	r0, [pc, #48]	; (240086c0 <HAL_RCC_GetHCLKFreq+0x78>)
2400868e:	e7e6      	b.n	2400865e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008690:	6813      	ldr	r3, [r2, #0]
24008692:	069b      	lsls	r3, r3, #26
24008694:	d508      	bpl.n	240086a8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008696:	6812      	ldr	r2, [r2, #0]
24008698:	480a      	ldr	r0, [pc, #40]	; (240086c4 <HAL_RCC_GetHCLKFreq+0x7c>)
2400869a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
2400869e:	40d0      	lsrs	r0, r2
240086a0:	e7dd      	b.n	2400865e <HAL_RCC_GetHCLKFreq+0x16>
240086a2:	f7ff fa91 	bl	24007bc8 <HAL_RCC_GetSysClockFreq.part.0>
240086a6:	e7da      	b.n	2400865e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
240086a8:	4806      	ldr	r0, [pc, #24]	; (240086c4 <HAL_RCC_GetHCLKFreq+0x7c>)
240086aa:	e7d8      	b.n	2400865e <HAL_RCC_GetHCLKFreq+0x16>
240086ac:	58024400 	.word	0x58024400
240086b0:	003d0900 	.word	0x003d0900
240086b4:	2401ae80 	.word	0x2401ae80
240086b8:	20000754 	.word	0x20000754
240086bc:	20000750 	.word	0x20000750
240086c0:	00f42400 	.word	0x00f42400
240086c4:	03d09000 	.word	0x03d09000

240086c8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240086c8:	4a1c      	ldr	r2, [pc, #112]	; (2400873c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
240086ca:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240086cc:	6913      	ldr	r3, [r2, #16]
240086ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
240086d2:	2b10      	cmp	r3, #16
240086d4:	d021      	beq.n	2400871a <HAL_RCC_GetPCLK1Freq+0x52>
240086d6:	2b18      	cmp	r3, #24
240086d8:	d02b      	beq.n	24008732 <HAL_RCC_GetPCLK1Freq+0x6a>
240086da:	b303      	cbz	r3, 2400871e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
240086dc:	4818      	ldr	r0, [pc, #96]	; (24008740 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086de:	4a17      	ldr	r2, [pc, #92]	; (2400873c <HAL_RCC_GetPCLK1Freq+0x74>)
240086e0:	4918      	ldr	r1, [pc, #96]	; (24008744 <HAL_RCC_GetPCLK1Freq+0x7c>)
240086e2:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
240086e4:	4d18      	ldr	r5, [pc, #96]	; (24008748 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086e6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086ea:	4c18      	ldr	r4, [pc, #96]	; (2400874c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240086ec:	5ccb      	ldrb	r3, [r1, r3]
240086ee:	f003 031f 	and.w	r3, r3, #31
240086f2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086f6:	6990      	ldr	r0, [r2, #24]
240086f8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
240086fc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240086fe:	5c08      	ldrb	r0, [r1, r0]
24008700:	f000 001f 	and.w	r0, r0, #31
24008704:	40c3      	lsrs	r3, r0
24008706:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24008708:	69d2      	ldr	r2, [r2, #28]
2400870a:	f3c2 1202 	ubfx	r2, r2, #4, #3
2400870e:	5c88      	ldrb	r0, [r1, r2]
24008710:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24008714:	fa23 f000 	lsr.w	r0, r3, r0
24008718:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400871a:	480d      	ldr	r0, [pc, #52]	; (24008750 <HAL_RCC_GetPCLK1Freq+0x88>)
2400871c:	e7df      	b.n	240086de <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400871e:	6813      	ldr	r3, [r2, #0]
24008720:	069b      	lsls	r3, r3, #26
24008722:	d509      	bpl.n	24008738 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008724:	6810      	ldr	r0, [r2, #0]
24008726:	4b0b      	ldr	r3, [pc, #44]	; (24008754 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008728:	f3c0 00c1 	ubfx	r0, r0, #3, #2
2400872c:	fa23 f000 	lsr.w	r0, r3, r0
24008730:	e7d5      	b.n	240086de <HAL_RCC_GetPCLK1Freq+0x16>
24008732:	f7ff fa49 	bl	24007bc8 <HAL_RCC_GetSysClockFreq.part.0>
24008736:	e7d2      	b.n	240086de <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008738:	4806      	ldr	r0, [pc, #24]	; (24008754 <HAL_RCC_GetPCLK1Freq+0x8c>)
2400873a:	e7d0      	b.n	240086de <HAL_RCC_GetPCLK1Freq+0x16>
2400873c:	58024400 	.word	0x58024400
24008740:	003d0900 	.word	0x003d0900
24008744:	2401ae80 	.word	0x2401ae80
24008748:	20000750 	.word	0x20000750
2400874c:	20000754 	.word	0x20000754
24008750:	00f42400 	.word	0x00f42400
24008754:	03d09000 	.word	0x03d09000

24008758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400875a:	4c3a      	ldr	r4, [pc, #232]	; (24008844 <RCCEx_PLL2_Config+0xec>)
2400875c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400875e:	f003 0303 	and.w	r3, r3, #3
24008762:	2b03      	cmp	r3, #3
24008764:	d067      	beq.n	24008836 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24008766:	6823      	ldr	r3, [r4, #0]
24008768:	4606      	mov	r6, r0
2400876a:	460f      	mov	r7, r1
2400876c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24008770:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008772:	f7fd f977 	bl	24005a64 <HAL_GetTick>
24008776:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24008778:	e004      	b.n	24008784 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400877a:	f7fd f973 	bl	24005a64 <HAL_GetTick>
2400877e:	1b43      	subs	r3, r0, r5
24008780:	2b02      	cmp	r3, #2
24008782:	d856      	bhi.n	24008832 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24008784:	6823      	ldr	r3, [r4, #0]
24008786:	011a      	lsls	r2, r3, #4
24008788:	d4f7      	bmi.n	2400877a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2400878a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400878c:	6832      	ldr	r2, [r6, #0]
2400878e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24008792:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24008796:	62a3      	str	r3, [r4, #40]	; 0x28
24008798:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
2400879c:	3b01      	subs	r3, #1
2400879e:	3a01      	subs	r2, #1
240087a0:	025b      	lsls	r3, r3, #9
240087a2:	0412      	lsls	r2, r2, #16
240087a4:	b29b      	uxth	r3, r3
240087a6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240087aa:	4313      	orrs	r3, r2
240087ac:	6872      	ldr	r2, [r6, #4]
240087ae:	3a01      	subs	r2, #1
240087b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
240087b4:	4313      	orrs	r3, r2
240087b6:	6932      	ldr	r2, [r6, #16]
240087b8:	3a01      	subs	r2, #1
240087ba:	0612      	lsls	r2, r2, #24
240087bc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240087c0:	4313      	orrs	r3, r2
240087c2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
240087c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240087c6:	6972      	ldr	r2, [r6, #20]
240087c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
240087cc:	4313      	orrs	r3, r2
240087ce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240087d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240087d2:	69b3      	ldr	r3, [r6, #24]
240087d4:	f022 0220 	bic.w	r2, r2, #32
240087d8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240087da:	4b1b      	ldr	r3, [pc, #108]	; (24008848 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240087dc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
240087de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240087e0:	f022 0210 	bic.w	r2, r2, #16
240087e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240087e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
240087e8:	69f2      	ldr	r2, [r6, #28]
240087ea:	400b      	ands	r3, r1
240087ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240087f0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
240087f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240087f4:	f043 0310 	orr.w	r3, r3, #16
240087f8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240087fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240087fc:	b1ef      	cbz	r7, 2400883a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240087fe:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24008800:	bf0c      	ite	eq
24008802:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24008806:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
2400880a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2400880c:	4c0d      	ldr	r4, [pc, #52]	; (24008844 <RCCEx_PLL2_Config+0xec>)
2400880e:	6823      	ldr	r3, [r4, #0]
24008810:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24008814:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008816:	f7fd f925 	bl	24005a64 <HAL_GetTick>
2400881a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400881c:	e004      	b.n	24008828 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400881e:	f7fd f921 	bl	24005a64 <HAL_GetTick>
24008822:	1b40      	subs	r0, r0, r5
24008824:	2802      	cmp	r0, #2
24008826:	d804      	bhi.n	24008832 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008828:	6823      	ldr	r3, [r4, #0]
2400882a:	011b      	lsls	r3, r3, #4
2400882c:	d5f7      	bpl.n	2400881e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
2400882e:	2000      	movs	r0, #0
}
24008830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008832:	2003      	movs	r0, #3
}
24008834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008836:	2001      	movs	r0, #1
}
24008838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400883a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400883e:	62e3      	str	r3, [r4, #44]	; 0x2c
24008840:	e7e4      	b.n	2400880c <RCCEx_PLL2_Config+0xb4>
24008842:	bf00      	nop
24008844:	58024400 	.word	0x58024400
24008848:	ffff0007 	.word	0xffff0007

2400884c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2400884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400884e:	4c3a      	ldr	r4, [pc, #232]	; (24008938 <RCCEx_PLL3_Config+0xec>)
24008850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008852:	f003 0303 	and.w	r3, r3, #3
24008856:	2b03      	cmp	r3, #3
24008858:	d067      	beq.n	2400892a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2400885a:	6823      	ldr	r3, [r4, #0]
2400885c:	4606      	mov	r6, r0
2400885e:	460f      	mov	r7, r1
24008860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24008864:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008866:	f7fd f8fd 	bl	24005a64 <HAL_GetTick>
2400886a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400886c:	e004      	b.n	24008878 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2400886e:	f7fd f8f9 	bl	24005a64 <HAL_GetTick>
24008872:	1b43      	subs	r3, r0, r5
24008874:	2b02      	cmp	r3, #2
24008876:	d856      	bhi.n	24008926 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24008878:	6823      	ldr	r3, [r4, #0]
2400887a:	009a      	lsls	r2, r3, #2
2400887c:	d4f7      	bmi.n	2400886e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2400887e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008880:	6832      	ldr	r2, [r6, #0]
24008882:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24008886:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400888a:	62a3      	str	r3, [r4, #40]	; 0x28
2400888c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24008890:	3b01      	subs	r3, #1
24008892:	3a01      	subs	r2, #1
24008894:	025b      	lsls	r3, r3, #9
24008896:	0412      	lsls	r2, r2, #16
24008898:	b29b      	uxth	r3, r3
2400889a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400889e:	4313      	orrs	r3, r2
240088a0:	6872      	ldr	r2, [r6, #4]
240088a2:	3a01      	subs	r2, #1
240088a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
240088a8:	4313      	orrs	r3, r2
240088aa:	6932      	ldr	r2, [r6, #16]
240088ac:	3a01      	subs	r2, #1
240088ae:	0612      	lsls	r2, r2, #24
240088b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240088b4:	4313      	orrs	r3, r2
240088b6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
240088b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240088ba:	6972      	ldr	r2, [r6, #20]
240088bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
240088c0:	4313      	orrs	r3, r2
240088c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240088c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240088c6:	69b3      	ldr	r3, [r6, #24]
240088c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
240088cc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240088ce:	4b1b      	ldr	r3, [pc, #108]	; (2400893c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240088d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
240088d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240088d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240088d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240088da:	6c61      	ldr	r1, [r4, #68]	; 0x44
240088dc:	69f2      	ldr	r2, [r6, #28]
240088de:	400b      	ands	r3, r1
240088e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240088e4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
240088e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240088e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240088ec:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
240088ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240088f0:	b1ef      	cbz	r7, 2400892e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240088f2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
240088f4:	bf0c      	ite	eq
240088f6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
240088fa:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
240088fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24008900:	4c0d      	ldr	r4, [pc, #52]	; (24008938 <RCCEx_PLL3_Config+0xec>)
24008902:	6823      	ldr	r3, [r4, #0]
24008904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008908:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400890a:	f7fd f8ab 	bl	24005a64 <HAL_GetTick>
2400890e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008910:	e004      	b.n	2400891c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24008912:	f7fd f8a7 	bl	24005a64 <HAL_GetTick>
24008916:	1b40      	subs	r0, r0, r5
24008918:	2802      	cmp	r0, #2
2400891a:	d804      	bhi.n	24008926 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2400891c:	6823      	ldr	r3, [r4, #0]
2400891e:	009b      	lsls	r3, r3, #2
24008920:	d5f7      	bpl.n	24008912 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24008922:	2000      	movs	r0, #0
}
24008924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008926:	2003      	movs	r0, #3
}
24008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400892a:	2001      	movs	r0, #1
}
2400892c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400892e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24008932:	62e3      	str	r3, [r4, #44]	; 0x2c
24008934:	e7e4      	b.n	24008900 <RCCEx_PLL3_Config+0xb4>
24008936:	bf00      	nop
24008938:	58024400 	.word	0x58024400
2400893c:	ffff0007 	.word	0xffff0007

24008940 <HAL_RCCEx_PeriphCLKConfig>:
{
24008940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24008944:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24008948:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2400894a:	011d      	lsls	r5, r3, #4
2400894c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24008950:	d523      	bpl.n	2400899a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008952:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008954:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008958:	f000 854f 	beq.w	240093fa <HAL_RCCEx_PeriphCLKConfig+0xaba>
2400895c:	d812      	bhi.n	24008984 <HAL_RCCEx_PeriphCLKConfig+0x44>
2400895e:	2900      	cmp	r1, #0
24008960:	f000 85a5 	beq.w	240094ae <HAL_RCCEx_PeriphCLKConfig+0xb6e>
24008964:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008968:	f040 859e 	bne.w	240094a8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400896c:	2102      	movs	r1, #2
2400896e:	3008      	adds	r0, #8
24008970:	f7ff fef2 	bl	24008758 <RCCEx_PLL2_Config>
24008974:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008976:	2e00      	cmp	r6, #0
24008978:	f040 851e 	bne.w	240093b8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400897c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2400897e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008982:	e003      	b.n	2400898c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008984:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24008988:	f040 858e 	bne.w	240094a8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400898c:	4dae      	ldr	r5, [pc, #696]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
2400898e:	2600      	movs	r6, #0
24008990:	6d28      	ldr	r0, [r5, #80]	; 0x50
24008992:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
24008996:	4301      	orrs	r1, r0
24008998:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2400899a:	05d8      	lsls	r0, r3, #23
2400899c:	d50a      	bpl.n	240089b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
2400899e:	6da1      	ldr	r1, [r4, #88]	; 0x58
240089a0:	2904      	cmp	r1, #4
240089a2:	d806      	bhi.n	240089b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
240089a4:	e8df f011 	tbh	[pc, r1, lsl #1]
240089a8:	05390532 	.word	0x05390532
240089ac:	03100516 	.word	0x03100516
240089b0:	0310      	.short	0x0310
240089b2:	2601      	movs	r6, #1
240089b4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240089b6:	0599      	lsls	r1, r3, #22
240089b8:	d51d      	bpl.n	240089f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
240089ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240089bc:	2980      	cmp	r1, #128	; 0x80
240089be:	f000 8512 	beq.w	240093e6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
240089c2:	f200 80f9 	bhi.w	24008bb8 <HAL_RCCEx_PeriphCLKConfig+0x278>
240089c6:	2900      	cmp	r1, #0
240089c8:	f000 8420 	beq.w	2400920c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
240089cc:	2940      	cmp	r1, #64	; 0x40
240089ce:	f040 80fa 	bne.w	24008bc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240089d2:	2100      	movs	r1, #0
240089d4:	f104 0008 	add.w	r0, r4, #8
240089d8:	f7ff febe 	bl	24008758 <RCCEx_PLL2_Config>
240089dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240089de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240089e2:	2d00      	cmp	r5, #0
240089e4:	f040 83eb 	bne.w	240091be <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
240089e8:	4f97      	ldr	r7, [pc, #604]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
240089ea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
240089ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
240089ee:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
240089f2:	4301      	orrs	r1, r0
240089f4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240089f6:	055f      	lsls	r7, r3, #21
240089f8:	d521      	bpl.n	24008a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
240089fa:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
240089fe:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24008a02:	f000 851d 	beq.w	24009440 <HAL_RCCEx_PeriphCLKConfig+0xb00>
24008a06:	f200 80e1 	bhi.w	24008bcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
24008a0a:	2900      	cmp	r1, #0
24008a0c:	f000 8405 	beq.w	2400921a <HAL_RCCEx_PeriphCLKConfig+0x8da>
24008a10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008a14:	f040 80e2 	bne.w	24008bdc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a18:	2100      	movs	r1, #0
24008a1a:	f104 0008 	add.w	r0, r4, #8
24008a1e:	f7ff fe9b 	bl	24008758 <RCCEx_PLL2_Config>
24008a22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008a24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008a28:	2d00      	cmp	r5, #0
24008a2a:	f040 83cf 	bne.w	240091cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24008a2e:	4f86      	ldr	r7, [pc, #536]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008a30:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
24008a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
24008a36:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
24008a3a:	4301      	orrs	r1, r0
24008a3c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008a3e:	0518      	lsls	r0, r3, #20
24008a40:	d521      	bpl.n	24008a86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
24008a42:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008a46:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24008a4a:	f000 84b9 	beq.w	240093c0 <HAL_RCCEx_PeriphCLKConfig+0xa80>
24008a4e:	f200 80c8 	bhi.w	24008be2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
24008a52:	2900      	cmp	r1, #0
24008a54:	f000 83d4 	beq.w	24009200 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
24008a58:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24008a5c:	f040 80c9 	bne.w	24008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a60:	2100      	movs	r1, #0
24008a62:	f104 0008 	add.w	r0, r4, #8
24008a66:	f7ff fe77 	bl	24008758 <RCCEx_PLL2_Config>
24008a6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008a6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008a70:	2d00      	cmp	r5, #0
24008a72:	f040 83a2 	bne.w	240091ba <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24008a76:	4f74      	ldr	r7, [pc, #464]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008a78:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
24008a7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
24008a7e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
24008a82:	4301      	orrs	r1, r0
24008a84:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008a86:	0199      	lsls	r1, r3, #6
24008a88:	d518      	bpl.n	24008abc <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
24008a8a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008a8c:	2920      	cmp	r1, #32
24008a8e:	f000 841e 	beq.w	240092ce <HAL_RCCEx_PeriphCLKConfig+0x98e>
24008a92:	f200 80b1 	bhi.w	24008bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
24008a96:	b139      	cbz	r1, 24008aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>
24008a98:	2910      	cmp	r1, #16
24008a9a:	f040 80b0 	bne.w	24008bfe <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a9e:	486a      	ldr	r0, [pc, #424]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008aa0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24008aa2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24008aa6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
24008aa8:	2d00      	cmp	r5, #0
24008aaa:	f040 83d3 	bne.w	24009254 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24008aae:	4f66      	ldr	r7, [pc, #408]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008ab0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
24008ab2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
24008ab4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
24008ab8:	4301      	orrs	r1, r0
24008aba:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008abc:	04df      	lsls	r7, r3, #19
24008abe:	d51f      	bpl.n	24008b00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
24008ac0:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008ac2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008ac6:	f000 84b1 	beq.w	2400942c <HAL_RCCEx_PeriphCLKConfig+0xaec>
24008aca:	f200 809b 	bhi.w	24008c04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
24008ace:	2900      	cmp	r1, #0
24008ad0:	f000 8390 	beq.w	240091f4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
24008ad4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24008ad8:	f040 809c 	bne.w	24008c14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008adc:	2100      	movs	r1, #0
24008ade:	f104 0008 	add.w	r0, r4, #8
24008ae2:	f7ff fe39 	bl	24008758 <RCCEx_PLL2_Config>
24008ae6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008ae8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008aec:	2d00      	cmp	r5, #0
24008aee:	f040 8368 	bne.w	240091c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24008af2:	4f55      	ldr	r7, [pc, #340]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008af4:	6e20      	ldr	r0, [r4, #96]	; 0x60
24008af6:	6d39      	ldr	r1, [r7, #80]	; 0x50
24008af8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
24008afc:	4301      	orrs	r1, r0
24008afe:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008b00:	0498      	lsls	r0, r3, #18
24008b02:	d51d      	bpl.n	24008b40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
24008b04:	6e61      	ldr	r1, [r4, #100]	; 0x64
24008b06:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008b0a:	f000 840f 	beq.w	2400932c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
24008b0e:	f200 8084 	bhi.w	24008c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
24008b12:	b159      	cbz	r1, 24008b2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24008b14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008b18:	f040 8087 	bne.w	24008c2a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008b1c:	2101      	movs	r1, #1
24008b1e:	f104 0008 	add.w	r0, r4, #8
24008b22:	f7ff fe19 	bl	24008758 <RCCEx_PLL2_Config>
24008b26:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008b28:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008b2c:	2d00      	cmp	r5, #0
24008b2e:	f040 839b 	bne.w	24009268 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24008b32:	4f45      	ldr	r7, [pc, #276]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008b34:	6e60      	ldr	r0, [r4, #100]	; 0x64
24008b36:	6d39      	ldr	r1, [r7, #80]	; 0x50
24008b38:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
24008b3c:	4301      	orrs	r1, r0
24008b3e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008b40:	0459      	lsls	r1, r3, #17
24008b42:	d51d      	bpl.n	24008b80 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
24008b44:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008b48:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008b4c:	f000 83fa 	beq.w	24009344 <HAL_RCCEx_PeriphCLKConfig+0xa04>
24008b50:	d86e      	bhi.n	24008c30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
24008b52:	b151      	cbz	r1, 24008b6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
24008b54:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008b58:	d172      	bne.n	24008c40 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008b5a:	2101      	movs	r1, #1
24008b5c:	f104 0008 	add.w	r0, r4, #8
24008b60:	f7ff fdfa 	bl	24008758 <RCCEx_PLL2_Config>
24008b64:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008b66:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008b6a:	2d00      	cmp	r5, #0
24008b6c:	f040 8380 	bne.w	24009270 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24008b70:	4f35      	ldr	r7, [pc, #212]	; (24008c48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
24008b72:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
24008b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
24008b78:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
24008b7c:	4301      	orrs	r1, r0
24008b7e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008b80:	041f      	lsls	r7, r3, #16
24008b82:	d50d      	bpl.n	24008ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
24008b84:	6f21      	ldr	r1, [r4, #112]	; 0x70
24008b86:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008b8a:	f000 83c7 	beq.w	2400931c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
24008b8e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008b92:	f000 8225 	beq.w	24008fe0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
24008b96:	2900      	cmp	r1, #0
24008b98:	f000 822a 	beq.w	24008ff0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
24008b9c:	2601      	movs	r6, #1
24008b9e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008ba0:	01d8      	lsls	r0, r3, #7
24008ba2:	d55f      	bpl.n	24008c64 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
24008ba4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24008ba6:	2903      	cmp	r1, #3
24008ba8:	f200 84bb 	bhi.w	24009522 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
24008bac:	e8df f011 	tbh	[pc, r1, lsl #1]
24008bb0:	03e10056 	.word	0x03e10056
24008bb4:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
24008bb8:	29c0      	cmp	r1, #192	; 0xc0
24008bba:	f43f af12 	beq.w	240089e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
24008bbe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008bc2:	f43f af0e 	beq.w	240089e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
24008bc6:	2601      	movs	r6, #1
24008bc8:	4635      	mov	r5, r6
24008bca:	e714      	b.n	240089f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
24008bcc:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24008bd0:	f43f af2a 	beq.w	24008a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
24008bd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24008bd8:	f43f af26 	beq.w	24008a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
24008bdc:	2601      	movs	r6, #1
24008bde:	4635      	mov	r5, r6
24008be0:	e72d      	b.n	24008a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
24008be2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
24008be6:	f43f af43 	beq.w	24008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>
24008bea:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
24008bee:	f43f af3f 	beq.w	24008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>
24008bf2:	2601      	movs	r6, #1
24008bf4:	4635      	mov	r5, r6
24008bf6:	e746      	b.n	24008a86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
24008bf8:	2930      	cmp	r1, #48	; 0x30
24008bfa:	f43f af55 	beq.w	24008aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>
24008bfe:	2601      	movs	r6, #1
24008c00:	4635      	mov	r5, r6
24008c02:	e75b      	b.n	24008abc <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
24008c04:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24008c08:	f43f af70 	beq.w	24008aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
24008c0c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008c10:	f43f af6c 	beq.w	24008aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
24008c14:	2601      	movs	r6, #1
24008c16:	4635      	mov	r5, r6
24008c18:	e772      	b.n	24008b00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
24008c1a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
24008c1e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
24008c22:	d083      	beq.n	24008b2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24008c24:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24008c28:	d080      	beq.n	24008b2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24008c2a:	2601      	movs	r6, #1
24008c2c:	4635      	mov	r5, r6
24008c2e:	e787      	b.n	24008b40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
24008c30:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008c34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008c38:	d097      	beq.n	24008b6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
24008c3a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008c3e:	d094      	beq.n	24008b6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
24008c40:	2601      	movs	r6, #1
24008c42:	4635      	mov	r5, r6
24008c44:	e79c      	b.n	24008b80 <HAL_RCCEx_PeriphCLKConfig+0x240>
24008c46:	bf00      	nop
24008c48:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008c4c:	2102      	movs	r1, #2
24008c4e:	f104 0008 	add.w	r0, r4, #8
24008c52:	f7ff fd81 	bl	24008758 <RCCEx_PLL2_Config>
24008c56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008c58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008c5c:	2d00      	cmp	r5, #0
24008c5e:	f000 82fb 	beq.w	24009258 <HAL_RCCEx_PeriphCLKConfig+0x918>
24008c62:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008c64:	0259      	lsls	r1, r3, #9
24008c66:	f100 825a 	bmi.w	2400911e <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008c6a:	07d8      	lsls	r0, r3, #31
24008c6c:	d52f      	bpl.n	24008cce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
24008c6e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24008c70:	2928      	cmp	r1, #40	; 0x28
24008c72:	d82a      	bhi.n	24008cca <HAL_RCCEx_PeriphCLKConfig+0x38a>
24008c74:	e8df f011 	tbh	[pc, r1, lsl #1]
24008c78:	002901fa 	.word	0x002901fa
24008c7c:	00290029 	.word	0x00290029
24008c80:	00290029 	.word	0x00290029
24008c84:	00290029 	.word	0x00290029
24008c88:	00290406 	.word	0x00290406
24008c8c:	00290029 	.word	0x00290029
24008c90:	00290029 	.word	0x00290029
24008c94:	00290029 	.word	0x00290029
24008c98:	002901f2 	.word	0x002901f2
24008c9c:	00290029 	.word	0x00290029
24008ca0:	00290029 	.word	0x00290029
24008ca4:	00290029 	.word	0x00290029
24008ca8:	002901fa 	.word	0x002901fa
24008cac:	00290029 	.word	0x00290029
24008cb0:	00290029 	.word	0x00290029
24008cb4:	00290029 	.word	0x00290029
24008cb8:	002901fa 	.word	0x002901fa
24008cbc:	00290029 	.word	0x00290029
24008cc0:	00290029 	.word	0x00290029
24008cc4:	00290029 	.word	0x00290029
24008cc8:	01fa      	.short	0x01fa
24008cca:	2601      	movs	r6, #1
24008ccc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008cce:	0799      	lsls	r1, r3, #30
24008cd0:	d517      	bpl.n	24008d02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008cd2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008cd4:	2905      	cmp	r1, #5
24008cd6:	f200 8420 	bhi.w	2400951a <HAL_RCCEx_PeriphCLKConfig+0xbda>
24008cda:	e8df f011 	tbh	[pc, r1, lsl #1]
24008cde:	000e      	.short	0x000e
24008ce0:	000603bb 	.word	0x000603bb
24008ce4:	000e000e 	.word	0x000e000e
24008ce8:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008cea:	2101      	movs	r1, #1
24008cec:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008cf0:	f7ff fdac 	bl	2400884c <RCCEx_PLL3_Config>
24008cf4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008cf6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008cfa:	2d00      	cmp	r5, #0
24008cfc:	f000 8299 	beq.w	24009232 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
24008d00:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008d02:	075f      	lsls	r7, r3, #29
24008d04:	d518      	bpl.n	24008d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008d06:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008d0a:	2905      	cmp	r1, #5
24008d0c:	f200 840d 	bhi.w	2400952a <HAL_RCCEx_PeriphCLKConfig+0xbea>
24008d10:	e8df f011 	tbh	[pc, r1, lsl #1]
24008d14:	03ac000e 	.word	0x03ac000e
24008d18:	000e0006 	.word	0x000e0006
24008d1c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008d20:	2101      	movs	r1, #1
24008d22:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008d26:	f7ff fd91 	bl	2400884c <RCCEx_PLL3_Config>
24008d2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008d2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008d30:	2d00      	cmp	r5, #0
24008d32:	f000 8286 	beq.w	24009242 <HAL_RCCEx_PeriphCLKConfig+0x902>
24008d36:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008d38:	0698      	lsls	r0, r3, #26
24008d3a:	d51f      	bpl.n	24008d7c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
24008d3c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008d40:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008d44:	f000 8309 	beq.w	2400935a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
24008d48:	f200 810b 	bhi.w	24008f62 <HAL_RCCEx_PeriphCLKConfig+0x622>
24008d4c:	b159      	cbz	r1, 24008d66 <HAL_RCCEx_PeriphCLKConfig+0x426>
24008d4e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008d52:	f040 8110 	bne.w	24008f76 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008d56:	2100      	movs	r1, #0
24008d58:	f104 0008 	add.w	r0, r4, #8
24008d5c:	f7ff fcfc 	bl	24008758 <RCCEx_PLL2_Config>
24008d60:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008d62:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008d66:	2d00      	cmp	r5, #0
24008d68:	f040 825f 	bne.w	2400922a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24008d6c:	4fa6      	ldr	r7, [pc, #664]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008d6e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
24008d72:	6d79      	ldr	r1, [r7, #84]	; 0x54
24008d74:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
24008d78:	4301      	orrs	r1, r0
24008d7a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008d7c:	0659      	lsls	r1, r3, #25
24008d7e:	d51f      	bpl.n	24008dc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008d80:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008d84:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
24008d88:	f000 82b2 	beq.w	240092f0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
24008d8c:	f200 80f6 	bhi.w	24008f7c <HAL_RCCEx_PeriphCLKConfig+0x63c>
24008d90:	b159      	cbz	r1, 24008daa <HAL_RCCEx_PeriphCLKConfig+0x46a>
24008d92:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
24008d96:	f040 80fb 	bne.w	24008f90 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008d9a:	2100      	movs	r1, #0
24008d9c:	f104 0008 	add.w	r0, r4, #8
24008da0:	f7ff fcda 	bl	24008758 <RCCEx_PLL2_Config>
24008da4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008da6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008daa:	2d00      	cmp	r5, #0
24008dac:	f040 8262 	bne.w	24009274 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24008db0:	4f95      	ldr	r7, [pc, #596]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008db2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
24008db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
24008db8:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
24008dbc:	4301      	orrs	r1, r0
24008dbe:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008dc0:	061f      	lsls	r7, r3, #24
24008dc2:	d51f      	bpl.n	24008e04 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008dc4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24008dc8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008dcc:	f000 829b 	beq.w	24009306 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
24008dd0:	f200 80e1 	bhi.w	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x656>
24008dd4:	b159      	cbz	r1, 24008dee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
24008dd6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008dda:	f040 80e6 	bne.w	24008faa <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008dde:	2100      	movs	r1, #0
24008de0:	f104 0008 	add.w	r0, r4, #8
24008de4:	f7ff fcb8 	bl	24008758 <RCCEx_PLL2_Config>
24008de8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008dea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008dee:	2d00      	cmp	r5, #0
24008df0:	f040 823c 	bne.w	2400926c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24008df4:	4f84      	ldr	r7, [pc, #528]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008df6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
24008dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
24008dfc:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
24008e00:	4301      	orrs	r1, r0
24008e02:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008e04:	0718      	lsls	r0, r3, #28
24008e06:	d50b      	bpl.n	24008e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24008e08:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
24008e0c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24008e10:	f000 82b8 	beq.w	24009384 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008e14:	4f7c      	ldr	r7, [pc, #496]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
24008e18:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
24008e1c:	4301      	orrs	r1, r0
24008e1e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24008e20:	06d9      	lsls	r1, r3, #27
24008e22:	d50b      	bpl.n	24008e3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24008e24:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
24008e28:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
24008e2c:	f000 82b7 	beq.w	2400939e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008e30:	4f75      	ldr	r7, [pc, #468]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008e32:	6db9      	ldr	r1, [r7, #88]	; 0x58
24008e34:	f421 7140 	bic.w	r1, r1, #768	; 0x300
24008e38:	4301      	orrs	r1, r0
24008e3a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24008e3c:	031f      	lsls	r7, r3, #12
24008e3e:	d50e      	bpl.n	24008e5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
24008e40:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008e44:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008e48:	f000 80f4 	beq.w	24009034 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
24008e4c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008e50:	f000 80f8 	beq.w	24009044 <HAL_RCCEx_PeriphCLKConfig+0x704>
24008e54:	2900      	cmp	r1, #0
24008e56:	f000 822e 	beq.w	240092b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
24008e5a:	2601      	movs	r6, #1
24008e5c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008e5e:	0358      	lsls	r0, r3, #13
24008e60:	d50f      	bpl.n	24008e82 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
24008e62:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008e66:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008e6a:	f000 80cf 	beq.w	2400900c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
24008e6e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24008e72:	f000 80d3 	beq.w	2400901c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
24008e76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008e7a:	f000 8214 	beq.w	240092a6 <HAL_RCCEx_PeriphCLKConfig+0x966>
24008e7e:	2601      	movs	r6, #1
24008e80:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008e82:	03d9      	lsls	r1, r3, #15
24008e84:	d509      	bpl.n	24008e9a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
24008e86:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008e88:	2900      	cmp	r1, #0
24008e8a:	f000 8203 	beq.w	24009294 <HAL_RCCEx_PeriphCLKConfig+0x954>
24008e8e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008e92:	f000 819d 	beq.w	240091d0 <HAL_RCCEx_PeriphCLKConfig+0x890>
24008e96:	2601      	movs	r6, #1
24008e98:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008e9a:	009f      	lsls	r7, r3, #2
24008e9c:	f100 80f1 	bmi.w	24009082 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008ea0:	0398      	lsls	r0, r3, #14
24008ea2:	d50c      	bpl.n	24008ebe <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
24008ea4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008ea8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008eac:	f000 81ea 	beq.w	24009284 <HAL_RCCEx_PeriphCLKConfig+0x944>
24008eb0:	d97e      	bls.n	24008fb0 <HAL_RCCEx_PeriphCLKConfig+0x670>
24008eb2:	f421 7080 	bic.w	r0, r1, #256	; 0x100
24008eb6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
24008eba:	d07b      	beq.n	24008fb4 <HAL_RCCEx_PeriphCLKConfig+0x674>
24008ebc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008ebe:	02d9      	lsls	r1, r3, #11
24008ec0:	d506      	bpl.n	24008ed0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24008ec2:	4851      	ldr	r0, [pc, #324]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008ec4:	6f65      	ldr	r5, [r4, #116]	; 0x74
24008ec6:	6d01      	ldr	r1, [r0, #80]	; 0x50
24008ec8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24008ecc:	4329      	orrs	r1, r5
24008ece:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24008ed0:	00df      	lsls	r7, r3, #3
24008ed2:	d507      	bpl.n	24008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24008ed4:	484c      	ldr	r0, [pc, #304]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008ed6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
24008eda:	6901      	ldr	r1, [r0, #16]
24008edc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
24008ee0:	4329      	orrs	r1, r5
24008ee2:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24008ee4:	029d      	lsls	r5, r3, #10
24008ee6:	d506      	bpl.n	24008ef6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24008ee8:	4847      	ldr	r0, [pc, #284]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008eea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
24008eec:	6d01      	ldr	r1, [r0, #80]	; 0x50
24008eee:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
24008ef2:	4329      	orrs	r1, r5
24008ef4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24008ef6:	0058      	lsls	r0, r3, #1
24008ef8:	d509      	bpl.n	24008f0e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24008efa:	4943      	ldr	r1, [pc, #268]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008efc:	6908      	ldr	r0, [r1, #16]
24008efe:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
24008f02:	6108      	str	r0, [r1, #16]
24008f04:	6908      	ldr	r0, [r1, #16]
24008f06:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
24008f0a:	4328      	orrs	r0, r5
24008f0c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24008f0e:	2b00      	cmp	r3, #0
24008f10:	da06      	bge.n	24008f20 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24008f12:	483d      	ldr	r0, [pc, #244]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008f14:	6d65      	ldr	r5, [r4, #84]	; 0x54
24008f16:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
24008f18:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
24008f1c:	4329      	orrs	r1, r5
24008f1e:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24008f20:	0219      	lsls	r1, r3, #8
24008f22:	d507      	bpl.n	24008f34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24008f24:	4938      	ldr	r1, [pc, #224]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008f26:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
24008f2a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
24008f2c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24008f30:	4303      	orrs	r3, r0
24008f32:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24008f34:	07d3      	lsls	r3, r2, #31
24008f36:	f100 80b0 	bmi.w	2400909a <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008f3a:	0797      	lsls	r7, r2, #30
24008f3c:	f100 80ba 	bmi.w	240090b4 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008f40:	0755      	lsls	r5, r2, #29
24008f42:	f100 80c4 	bmi.w	240090ce <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008f46:	0710      	lsls	r0, r2, #28
24008f48:	f100 80ce 	bmi.w	240090e8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008f4c:	06d1      	lsls	r1, r2, #27
24008f4e:	f100 80d8 	bmi.w	24009102 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008f52:	0692      	lsls	r2, r2, #26
24008f54:	f100 8125 	bmi.w	240091a2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
24008f58:	1e30      	subs	r0, r6, #0
24008f5a:	bf18      	it	ne
24008f5c:	2001      	movne	r0, #1
}
24008f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24008f62:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008f66:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008f6a:	f43f aefc 	beq.w	24008d66 <HAL_RCCEx_PeriphCLKConfig+0x426>
24008f6e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008f72:	f43f aef8 	beq.w	24008d66 <HAL_RCCEx_PeriphCLKConfig+0x426>
24008f76:	2601      	movs	r6, #1
24008f78:	4635      	mov	r5, r6
24008f7a:	e6ff      	b.n	24008d7c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008f7c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24008f80:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24008f84:	f43f af11 	beq.w	24008daa <HAL_RCCEx_PeriphCLKConfig+0x46a>
24008f88:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24008f8c:	f43f af0d 	beq.w	24008daa <HAL_RCCEx_PeriphCLKConfig+0x46a>
24008f90:	2601      	movs	r6, #1
24008f92:	4635      	mov	r5, r6
24008f94:	e714      	b.n	24008dc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008f96:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24008f9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24008f9e:	f43f af26 	beq.w	24008dee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
24008fa2:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24008fa6:	f43f af22 	beq.w	24008dee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
24008faa:	2601      	movs	r6, #1
24008fac:	4635      	mov	r5, r6
24008fae:	e729      	b.n	24008e04 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
24008fb0:	2900      	cmp	r1, #0
24008fb2:	d183      	bne.n	24008ebc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
24008fb4:	2d00      	cmp	r5, #0
24008fb6:	f040 8163 	bne.w	24009280 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24008fba:	4d13      	ldr	r5, [pc, #76]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008fbc:	6d68      	ldr	r0, [r5, #84]	; 0x54
24008fbe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
24008fc2:	4301      	orrs	r1, r0
24008fc4:	6569      	str	r1, [r5, #84]	; 0x54
24008fc6:	e77a      	b.n	24008ebe <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
24008fc8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
24008fca:	2d00      	cmp	r5, #0
24008fcc:	f040 80fb 	bne.w	240091c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24008fd0:	4f0d      	ldr	r7, [pc, #52]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008fd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
24008fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
24008fd6:	f021 0107 	bic.w	r1, r1, #7
24008fda:	4301      	orrs	r1, r0
24008fdc:	6539      	str	r1, [r7, #80]	; 0x50
24008fde:	e4ea      	b.n	240089b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008fe0:	2101      	movs	r1, #1
24008fe2:	f104 0008 	add.w	r0, r4, #8
24008fe6:	f7ff fbb7 	bl	24008758 <RCCEx_PLL2_Config>
24008fea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008fec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24008ff0:	2d00      	cmp	r5, #0
24008ff2:	f040 811c 	bne.w	2400922e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24008ff6:	4f04      	ldr	r7, [pc, #16]	; (24009008 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24008ff8:	6f20      	ldr	r0, [r4, #112]	; 0x70
24008ffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
24008ffc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
24009000:	4301      	orrs	r1, r0
24009002:	6539      	str	r1, [r7, #80]	; 0x50
24009004:	e5cc      	b.n	24008ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>
24009006:	bf00      	nop
24009008:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400900c:	2101      	movs	r1, #1
2400900e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009012:	f7ff fc1b 	bl	2400884c <RCCEx_PLL3_Config>
24009016:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24009018:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400901c:	2d00      	cmp	r5, #0
2400901e:	f040 812d 	bne.w	2400927c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24009022:	4fb1      	ldr	r7, [pc, #708]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009024:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
24009028:	6d79      	ldr	r1, [r7, #84]	; 0x54
2400902a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
2400902e:	4301      	orrs	r1, r0
24009030:	6579      	str	r1, [r7, #84]	; 0x54
24009032:	e726      	b.n	24008e82 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24009034:	2102      	movs	r1, #2
24009036:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400903a:	f7ff fc07 	bl	2400884c <RCCEx_PLL3_Config>
2400903e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24009040:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24009044:	2d00      	cmp	r5, #0
24009046:	f040 8117 	bne.w	24009278 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2400904a:	4fa7      	ldr	r7, [pc, #668]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400904c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
24009050:	6db9      	ldr	r1, [r7, #88]	; 0x58
24009052:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
24009056:	4301      	orrs	r1, r0
24009058:	65b9      	str	r1, [r7, #88]	; 0x58
2400905a:	e700      	b.n	24008e5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400905c:	2101      	movs	r1, #1
2400905e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009062:	f7ff fbf3 	bl	2400884c <RCCEx_PLL3_Config>
24009066:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24009068:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400906c:	2d00      	cmp	r5, #0
2400906e:	f040 80da 	bne.w	24009226 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24009072:	4f9d      	ldr	r7, [pc, #628]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009074:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
24009076:	6d79      	ldr	r1, [r7, #84]	; 0x54
24009078:	f021 0138 	bic.w	r1, r1, #56	; 0x38
2400907c:	4301      	orrs	r1, r0
2400907e:	6579      	str	r1, [r7, #84]	; 0x54
24009080:	e625      	b.n	24008cce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009082:	2102      	movs	r1, #2
24009084:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009088:	f7ff fbe0 	bl	2400884c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400908c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009090:	2800      	cmp	r0, #0
24009092:	f43f af05 	beq.w	24008ea0 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
24009096:	2601      	movs	r6, #1
24009098:	e702      	b.n	24008ea0 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400909a:	2100      	movs	r1, #0
2400909c:	f104 0008 	add.w	r0, r4, #8
240090a0:	f7ff fb5a 	bl	24008758 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240090a4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240090a6:	2800      	cmp	r0, #0
240090a8:	f43f af47 	beq.w	24008f3a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240090ac:	0797      	lsls	r7, r2, #30
240090ae:	4606      	mov	r6, r0
240090b0:	f57f af46 	bpl.w	24008f40 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240090b4:	2101      	movs	r1, #1
240090b6:	f104 0008 	add.w	r0, r4, #8
240090ba:	f7ff fb4d 	bl	24008758 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240090be:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240090c0:	2800      	cmp	r0, #0
240090c2:	f43f af3d 	beq.w	24008f40 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240090c6:	0755      	lsls	r5, r2, #29
240090c8:	4606      	mov	r6, r0
240090ca:	f57f af3c 	bpl.w	24008f46 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240090ce:	2102      	movs	r1, #2
240090d0:	f104 0008 	add.w	r0, r4, #8
240090d4:	f7ff fb40 	bl	24008758 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240090d8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240090da:	2800      	cmp	r0, #0
240090dc:	f43f af33 	beq.w	24008f46 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240090e0:	4606      	mov	r6, r0
240090e2:	0710      	lsls	r0, r2, #28
240090e4:	f57f af32 	bpl.w	24008f4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240090e8:	2100      	movs	r1, #0
240090ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
240090ee:	f7ff fbad 	bl	2400884c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240090f2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240090f4:	2800      	cmp	r0, #0
240090f6:	f43f af29 	beq.w	24008f4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240090fa:	06d1      	lsls	r1, r2, #27
240090fc:	4606      	mov	r6, r0
240090fe:	f57f af28 	bpl.w	24008f52 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009102:	f104 0528 	add.w	r5, r4, #40	; 0x28
24009106:	2101      	movs	r1, #1
24009108:	4628      	mov	r0, r5
2400910a:	f7ff fb9f 	bl	2400884c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400910e:	2800      	cmp	r0, #0
24009110:	f000 80db 	beq.w	240092ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24009114:	6863      	ldr	r3, [r4, #4]
24009116:	069b      	lsls	r3, r3, #26
24009118:	d54c      	bpl.n	240091b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
2400911a:	4606      	mov	r6, r0
2400911c:	e043      	b.n	240091a6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400911e:	4f73      	ldr	r7, [pc, #460]	; (240092ec <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
24009120:	683b      	ldr	r3, [r7, #0]
24009122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24009126:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24009128:	f7fc fc9c 	bl	24005a64 <HAL_GetTick>
2400912c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400912e:	e006      	b.n	2400913e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24009130:	f7fc fc98 	bl	24005a64 <HAL_GetTick>
24009134:	eba0 0008 	sub.w	r0, r0, r8
24009138:	2864      	cmp	r0, #100	; 0x64
2400913a:	f200 81af 	bhi.w	2400949c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400913e:	683b      	ldr	r3, [r7, #0]
24009140:	05da      	lsls	r2, r3, #23
24009142:	d5f5      	bpl.n	24009130 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
24009144:	2d00      	cmp	r5, #0
24009146:	f040 81e3 	bne.w	24009510 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2400914a:	4a67      	ldr	r2, [pc, #412]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400914c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
24009150:	6f11      	ldr	r1, [r2, #112]	; 0x70
24009152:	4059      	eors	r1, r3
24009154:	f411 7f40 	tst.w	r1, #768	; 0x300
24009158:	d00b      	beq.n	24009172 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400915a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
2400915c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400915e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
24009162:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
24009166:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24009168:	6f10      	ldr	r0, [r2, #112]	; 0x70
2400916a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
2400916e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
24009170:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24009172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009176:	f000 81ad 	beq.w	240094d4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400917a:	f403 7240 	and.w	r2, r3, #768	; 0x300
2400917e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
24009182:	f000 81bb 	beq.w	240094fc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
24009186:	4958      	ldr	r1, [pc, #352]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009188:	690a      	ldr	r2, [r1, #16]
2400918a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
2400918e:	610a      	str	r2, [r1, #16]
24009190:	4855      	ldr	r0, [pc, #340]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009192:	f3c3 010b 	ubfx	r1, r3, #0, #12
24009196:	6f07      	ldr	r7, [r0, #112]	; 0x70
24009198:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400919a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400919e:	6701      	str	r1, [r0, #112]	; 0x70
240091a0:	e563      	b.n	24008c6a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240091a2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240091a6:	2102      	movs	r1, #2
240091a8:	4628      	mov	r0, r5
240091aa:	f7ff fb4f 	bl	2400884c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
240091ae:	2800      	cmp	r0, #0
240091b0:	f43f aed2 	beq.w	24008f58 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
240091b4:	2001      	movs	r0, #1
}
240091b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
240091ba:	462e      	mov	r6, r5
240091bc:	e463      	b.n	24008a86 <HAL_RCCEx_PeriphCLKConfig+0x146>
240091be:	462e      	mov	r6, r5
240091c0:	e419      	b.n	240089f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
240091c2:	462e      	mov	r6, r5
240091c4:	e49c      	b.n	24008b00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
240091c6:	462e      	mov	r6, r5
240091c8:	f7ff bbf5 	b.w	240089b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
240091cc:	462e      	mov	r6, r5
240091ce:	e436      	b.n	24008a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240091d0:	2102      	movs	r1, #2
240091d2:	f104 0008 	add.w	r0, r4, #8
240091d6:	f7ff fabf 	bl	24008758 <RCCEx_PLL2_Config>
240091da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240091dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240091e0:	2d00      	cmp	r5, #0
240091e2:	d15e      	bne.n	240092a2 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
240091e4:	4f40      	ldr	r7, [pc, #256]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
240091e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
240091e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
240091ea:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
240091ee:	4301      	orrs	r1, r0
240091f0:	64f9      	str	r1, [r7, #76]	; 0x4c
240091f2:	e652      	b.n	24008e9a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240091f4:	483c      	ldr	r0, [pc, #240]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
240091f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
240091f8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
240091fc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
240091fe:	e475      	b.n	24008aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009200:	4839      	ldr	r0, [pc, #228]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009202:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24009204:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24009208:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
2400920a:	e431      	b.n	24008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400920c:	4836      	ldr	r0, [pc, #216]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400920e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24009210:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24009214:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
24009216:	f7ff bbe4 	b.w	240089e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400921a:	4833      	ldr	r0, [pc, #204]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400921c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
2400921e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24009222:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
24009224:	e400      	b.n	24008a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
24009226:	462e      	mov	r6, r5
24009228:	e551      	b.n	24008cce <HAL_RCCEx_PeriphCLKConfig+0x38e>
2400922a:	462e      	mov	r6, r5
2400922c:	e5a6      	b.n	24008d7c <HAL_RCCEx_PeriphCLKConfig+0x43c>
2400922e:	462e      	mov	r6, r5
24009230:	e4b6      	b.n	24008ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24009232:	4f2d      	ldr	r7, [pc, #180]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009234:	6fa0      	ldr	r0, [r4, #120]	; 0x78
24009236:	6d79      	ldr	r1, [r7, #84]	; 0x54
24009238:	f021 0107 	bic.w	r1, r1, #7
2400923c:	4301      	orrs	r1, r0
2400923e:	6579      	str	r1, [r7, #84]	; 0x54
24009240:	e55f      	b.n	24008d02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24009242:	4f29      	ldr	r7, [pc, #164]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009244:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
24009248:	6db9      	ldr	r1, [r7, #88]	; 0x58
2400924a:	f021 0107 	bic.w	r1, r1, #7
2400924e:	4301      	orrs	r1, r0
24009250:	65b9      	str	r1, [r7, #88]	; 0x58
24009252:	e571      	b.n	24008d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24009254:	462e      	mov	r6, r5
24009256:	e431      	b.n	24008abc <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24009258:	4f23      	ldr	r7, [pc, #140]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400925a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
2400925c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
2400925e:	f021 0103 	bic.w	r1, r1, #3
24009262:	4301      	orrs	r1, r0
24009264:	64f9      	str	r1, [r7, #76]	; 0x4c
24009266:	e4fd      	b.n	24008c64 <HAL_RCCEx_PeriphCLKConfig+0x324>
24009268:	462e      	mov	r6, r5
2400926a:	e469      	b.n	24008b40 <HAL_RCCEx_PeriphCLKConfig+0x200>
2400926c:	462e      	mov	r6, r5
2400926e:	e5c9      	b.n	24008e04 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
24009270:	462e      	mov	r6, r5
24009272:	e485      	b.n	24008b80 <HAL_RCCEx_PeriphCLKConfig+0x240>
24009274:	462e      	mov	r6, r5
24009276:	e5a3      	b.n	24008dc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
24009278:	462e      	mov	r6, r5
2400927a:	e5f0      	b.n	24008e5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
2400927c:	462e      	mov	r6, r5
2400927e:	e600      	b.n	24008e82 <HAL_RCCEx_PeriphCLKConfig+0x542>
24009280:	462e      	mov	r6, r5
24009282:	e61c      	b.n	24008ebe <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009284:	4f18      	ldr	r7, [pc, #96]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
24009288:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
2400928c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
2400928e:	2d00      	cmp	r5, #0
24009290:	d1f6      	bne.n	24009280 <HAL_RCCEx_PeriphCLKConfig+0x940>
24009292:	e692      	b.n	24008fba <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009294:	4814      	ldr	r0, [pc, #80]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24009296:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24009298:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
2400929c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
2400929e:	2d00      	cmp	r5, #0
240092a0:	d0a0      	beq.n	240091e4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
240092a2:	462e      	mov	r6, r5
240092a4:	e5f9      	b.n	24008e9a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240092a6:	4810      	ldr	r0, [pc, #64]	; (240092e8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
240092a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
240092aa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
240092ae:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
240092b0:	2d00      	cmp	r5, #0
240092b2:	d1e3      	bne.n	2400927c <HAL_RCCEx_PeriphCLKConfig+0x93c>
240092b4:	e6b5      	b.n	24009022 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240092b6:	f104 0008 	add.w	r0, r4, #8
240092ba:	f7ff fa4d 	bl	24008758 <RCCEx_PLL2_Config>
240092be:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240092c0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240092c4:	2d00      	cmp	r5, #0
240092c6:	d1d7      	bne.n	24009278 <HAL_RCCEx_PeriphCLKConfig+0x938>
240092c8:	e6bf      	b.n	2400904a <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240092ca:	6862      	ldr	r2, [r4, #4]
240092cc:	e641      	b.n	24008f52 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240092ce:	2102      	movs	r1, #2
240092d0:	f104 0008 	add.w	r0, r4, #8
240092d4:	f7ff fa40 	bl	24008758 <RCCEx_PLL2_Config>
240092d8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240092da:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240092de:	2d00      	cmp	r5, #0
240092e0:	d1b8      	bne.n	24009254 <HAL_RCCEx_PeriphCLKConfig+0x914>
240092e2:	f7ff bbe4 	b.w	24008aae <HAL_RCCEx_PeriphCLKConfig+0x16e>
240092e6:	bf00      	nop
240092e8:	58024400 	.word	0x58024400
240092ec:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240092f0:	2102      	movs	r1, #2
240092f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
240092f6:	f7ff faa9 	bl	2400884c <RCCEx_PLL3_Config>
240092fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240092fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24009300:	2d00      	cmp	r5, #0
24009302:	d1b7      	bne.n	24009274 <HAL_RCCEx_PeriphCLKConfig+0x934>
24009304:	e554      	b.n	24008db0 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24009306:	2102      	movs	r1, #2
24009308:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400930c:	f7ff fa9e 	bl	2400884c <RCCEx_PLL3_Config>
24009310:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24009312:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24009316:	2d00      	cmp	r5, #0
24009318:	d1a8      	bne.n	2400926c <HAL_RCCEx_PeriphCLKConfig+0x92c>
2400931a:	e56b      	b.n	24008df4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400931c:	4884      	ldr	r0, [pc, #528]	; (24009530 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
2400931e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24009320:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24009324:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
24009326:	2d00      	cmp	r5, #0
24009328:	d181      	bne.n	2400922e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
2400932a:	e664      	b.n	24008ff6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400932c:	2101      	movs	r1, #1
2400932e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009332:	f7ff fa8b 	bl	2400884c <RCCEx_PLL3_Config>
24009336:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24009338:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400933c:	2d00      	cmp	r5, #0
2400933e:	d193      	bne.n	24009268 <HAL_RCCEx_PeriphCLKConfig+0x928>
24009340:	f7ff bbf7 	b.w	24008b32 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009344:	2101      	movs	r1, #1
24009346:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400934a:	f7ff fa7f 	bl	2400884c <RCCEx_PLL3_Config>
2400934e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24009350:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24009354:	2d00      	cmp	r5, #0
24009356:	d18b      	bne.n	24009270 <HAL_RCCEx_PeriphCLKConfig+0x930>
24009358:	e40a      	b.n	24008b70 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400935a:	2102      	movs	r1, #2
2400935c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009360:	f7ff fa74 	bl	2400884c <RCCEx_PLL3_Config>
24009364:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24009366:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400936a:	2d00      	cmp	r5, #0
2400936c:	f47f af5d 	bne.w	2400922a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
24009370:	e4fc      	b.n	24008d6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009372:	486f      	ldr	r0, [pc, #444]	; (24009530 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
24009374:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24009376:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
2400937a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
2400937c:	2d00      	cmp	r5, #0
2400937e:	f47f ac70 	bne.w	24008c62 <HAL_RCCEx_PeriphCLKConfig+0x322>
24009382:	e769      	b.n	24009258 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24009384:	2102      	movs	r1, #2
24009386:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400938a:	f7ff fa5f 	bl	2400884c <RCCEx_PLL3_Config>
2400938e:	2800      	cmp	r0, #0
24009390:	f040 8094 	bne.w	240094bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24009394:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24009398:	e9d4 3200 	ldrd	r3, r2, [r4]
2400939c:	e53a      	b.n	24008e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400939e:	2102      	movs	r1, #2
240093a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
240093a4:	f7ff fa52 	bl	2400884c <RCCEx_PLL3_Config>
240093a8:	2800      	cmp	r0, #0
240093aa:	f040 808d 	bne.w	240094c8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240093ae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240093b2:	e9d4 3200 	ldrd	r3, r2, [r4]
240093b6:	e53b      	b.n	24008e30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
240093b8:	e9d4 3200 	ldrd	r3, r2, [r4]
240093bc:	f7ff baed 	b.w	2400899a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240093c0:	2100      	movs	r1, #0
240093c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
240093c6:	f7ff fa41 	bl	2400884c <RCCEx_PLL3_Config>
240093ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
240093cc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
240093d0:	f7ff bb4e 	b.w	24008a70 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240093d4:	2100      	movs	r1, #0
240093d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240093da:	f7ff fa37 	bl	2400884c <RCCEx_PLL3_Config>
240093de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240093e0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
240093e4:	e5f1      	b.n	24008fca <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240093e6:	2100      	movs	r1, #0
240093e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
240093ec:	f7ff fa2e 	bl	2400884c <RCCEx_PLL3_Config>
240093f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240093f2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
240093f6:	f7ff baf4 	b.w	240089e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240093fa:	2102      	movs	r1, #2
240093fc:	3028      	adds	r0, #40	; 0x28
240093fe:	f7ff fa25 	bl	2400884c <RCCEx_PLL3_Config>
24009402:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24009404:	2e00      	cmp	r6, #0
24009406:	f43f aab9 	beq.w	2400897c <HAL_RCCEx_PeriphCLKConfig+0x3c>
2400940a:	e7d5      	b.n	240093b8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400940c:	4848      	ldr	r0, [pc, #288]	; (24009530 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
2400940e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009410:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24009412:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24009416:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
24009418:	e5d7      	b.n	24008fca <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400941a:	2100      	movs	r1, #0
2400941c:	f104 0008 	add.w	r0, r4, #8
24009420:	f7ff f99a 	bl	24008758 <RCCEx_PLL2_Config>
24009424:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24009426:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
2400942a:	e5ce      	b.n	24008fca <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2400942c:	2100      	movs	r1, #0
2400942e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009432:	f7ff fa0b 	bl	2400884c <RCCEx_PLL3_Config>
24009436:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24009438:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
2400943c:	f7ff bb56 	b.w	24008aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24009440:	2100      	movs	r1, #0
24009442:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009446:	f7ff fa01 	bl	2400884c <RCCEx_PLL3_Config>
2400944a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400944c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
24009450:	f7ff baea 	b.w	24008a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009454:	2101      	movs	r1, #1
24009456:	f104 0008 	add.w	r0, r4, #8
2400945a:	f7ff f97d 	bl	24008758 <RCCEx_PLL2_Config>
2400945e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24009460:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24009464:	2d00      	cmp	r5, #0
24009466:	f47f ac4b 	bne.w	24008d00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
2400946a:	e6e2      	b.n	24009232 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400946c:	2101      	movs	r1, #1
2400946e:	f104 0008 	add.w	r0, r4, #8
24009472:	f7ff f971 	bl	24008758 <RCCEx_PLL2_Config>
24009476:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24009478:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400947c:	2d00      	cmp	r5, #0
2400947e:	f47f ac5a 	bne.w	24008d36 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
24009482:	e6de      	b.n	24009242 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24009484:	2101      	movs	r1, #1
24009486:	f104 0008 	add.w	r0, r4, #8
2400948a:	f7ff f965 	bl	24008758 <RCCEx_PLL2_Config>
2400948e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24009490:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24009494:	2d00      	cmp	r5, #0
24009496:	f47f aec6 	bne.w	24009226 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
2400949a:	e5ea      	b.n	24009072 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
2400949c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400949e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
240094a2:	4635      	mov	r5, r6
240094a4:	f7ff bbe1 	b.w	24008c6a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
240094a8:	2601      	movs	r6, #1
240094aa:	f7ff ba76 	b.w	2400899a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240094ae:	4d20      	ldr	r5, [pc, #128]	; (24009530 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
240094b0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
240094b2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
240094b6:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
240094b8:	f7ff ba68 	b.w	2400898c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
240094bc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
240094c0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
240094c2:	e9d4 3200 	ldrd	r3, r2, [r4]
240094c6:	e4a5      	b.n	24008e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240094c8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
240094cc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240094ce:	e9d4 3200 	ldrd	r3, r2, [r4]
240094d2:	e4ad      	b.n	24008e30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
240094d4:	f7fc fac6 	bl	24005a64 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240094d8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 24009530 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
240094dc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240094de:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240094e2:	e004      	b.n	240094ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240094e4:	f7fc fabe 	bl	24005a64 <HAL_GetTick>
240094e8:	1bc0      	subs	r0, r0, r7
240094ea:	4548      	cmp	r0, r9
240094ec:	d8d6      	bhi.n	2400949c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240094ee:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
240094f2:	079b      	lsls	r3, r3, #30
240094f4:	d5f6      	bpl.n	240094e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240094f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240094fa:	e63e      	b.n	2400917a <HAL_RCCEx_PeriphCLKConfig+0x83a>
240094fc:	480c      	ldr	r0, [pc, #48]	; (24009530 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
240094fe:	4a0d      	ldr	r2, [pc, #52]	; (24009534 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
24009500:	6901      	ldr	r1, [r0, #16]
24009502:	ea02 1213 	and.w	r2, r2, r3, lsr #4
24009506:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
2400950a:	430a      	orrs	r2, r1
2400950c:	6102      	str	r2, [r0, #16]
2400950e:	e63f      	b.n	24009190 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009510:	e9d4 3200 	ldrd	r3, r2, [r4]
24009514:	462e      	mov	r6, r5
24009516:	f7ff bba8 	b.w	24008c6a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400951a:	2601      	movs	r6, #1
2400951c:	4635      	mov	r5, r6
2400951e:	f7ff bbf0 	b.w	24008d02 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
24009522:	2601      	movs	r6, #1
24009524:	4635      	mov	r5, r6
24009526:	f7ff bb9d 	b.w	24008c64 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400952a:	2601      	movs	r6, #1
2400952c:	4635      	mov	r5, r6
2400952e:	e403      	b.n	24008d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24009530:	58024400 	.word	0x58024400
24009534:	00ffffcf 	.word	0x00ffffcf

24009538 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009538:	4b4f      	ldr	r3, [pc, #316]	; (24009678 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
2400953a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400953c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2400953e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24009540:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
24009542:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24009546:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400954a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
2400954c:	d05c      	beq.n	24009608 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400954e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24009552:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009556:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400955a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400955e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24009560:	ee07 4a90 	vmov	s15, r4
24009564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009568:	d003      	beq.n	24009572 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
2400956a:	2902      	cmp	r1, #2
2400956c:	d075      	beq.n	2400965a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
2400956e:	2900      	cmp	r1, #0
24009570:	d04f      	beq.n	24009612 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009572:	ee07 2a90 	vmov	s15, r2
24009576:	eddf 6a41 	vldr	s13, [pc, #260]	; 2400967c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
2400957a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009580:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24009584:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24009680 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24009588:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400958c:	ee06 3a90 	vmov	s13, r3
24009590:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24009594:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009598:	ee76 6a85 	vadd.f32	s13, s13, s10
2400959c:	eee7 6a25 	vfma.f32	s13, s14, s11
240095a0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
240095a4:	4a34      	ldr	r2, [pc, #208]	; (24009678 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
240095a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240095aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
240095ac:	f3c3 2346 	ubfx	r3, r3, #9, #7
240095b0:	ee07 3a10 	vmov	s14, r3
240095b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
240095b8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
240095ba:	ee37 7a06 	vadd.f32	s14, s14, s12
240095be:	eec6 7a87 	vdiv.f32	s15, s13, s14
240095c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240095c6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
240095ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
240095cc:	f3c3 4306 	ubfx	r3, r3, #16, #7
240095d0:	ee07 3a10 	vmov	s14, r3
240095d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240095d8:	ee37 7a06 	vadd.f32	s14, s14, s12
240095dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
240095e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240095e4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
240095e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
240095ea:	f3c3 6306 	ubfx	r3, r3, #24, #7
240095ee:	ee07 3a90 	vmov	s15, r3
240095f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240095f6:	ee77 7a86 	vadd.f32	s15, s15, s12
240095fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240095fe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009602:	ed80 7a02 	vstr	s14, [r0, #8]
}
24009606:	4770      	bx	lr
24009608:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2400960a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2400960e:	6082      	str	r2, [r0, #8]
}
24009610:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009612:	6819      	ldr	r1, [r3, #0]
24009614:	0689      	lsls	r1, r1, #26
24009616:	d527      	bpl.n	24009668 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009618:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400961a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400961e:	4919      	ldr	r1, [pc, #100]	; (24009684 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009620:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009626:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400962a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400962e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009680 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24009632:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009636:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009638:	ee06 3a90 	vmov	s13, r3
2400963c:	ee05 1a90 	vmov	s11, r1
24009640:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009644:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009648:	ee76 6a86 	vadd.f32	s13, s13, s12
2400964c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24009650:	eee7 6a05 	vfma.f32	s13, s14, s10
24009654:	ee66 6a26 	vmul.f32	s13, s12, s13
24009658:	e7a4      	b.n	240095a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400965a:	ee07 2a90 	vmov	s15, r2
2400965e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24009688 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
24009662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009666:	e78a      	b.n	2400957e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009668:	ee07 2a90 	vmov	s15, r2
2400966c:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400968c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24009670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009674:	e783      	b.n	2400957e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
24009676:	bf00      	nop
24009678:	58024400 	.word	0x58024400
2400967c:	4a742400 	.word	0x4a742400
24009680:	39000000 	.word	0x39000000
24009684:	03d09000 	.word	0x03d09000
24009688:	4b742400 	.word	0x4b742400
2400968c:	4c742400 	.word	0x4c742400

24009690 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009690:	4b4f      	ldr	r3, [pc, #316]	; (240097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
24009692:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009694:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24009696:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24009698:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
2400969a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400969e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240096a2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
240096a4:	d05c      	beq.n	24009760 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240096a6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
240096aa:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240096ae:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240096b2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
240096b6:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240096b8:	ee07 4a90 	vmov	s15, r4
240096bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
240096c0:	d003      	beq.n	240096ca <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
240096c2:	2902      	cmp	r1, #2
240096c4:	d075      	beq.n	240097b2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
240096c6:	2900      	cmp	r1, #0
240096c8:	d04f      	beq.n	2400976a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240096ca:	ee07 2a90 	vmov	s15, r2
240096ce:	eddf 6a41 	vldr	s13, [pc, #260]	; 240097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
240096d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240096d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240096d8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
240096dc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 240097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
240096e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
240096e4:	ee06 3a90 	vmov	s13, r3
240096e8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
240096ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240096f0:	ee76 6a85 	vadd.f32	s13, s13, s10
240096f4:	eee7 6a25 	vfma.f32	s13, s14, s11
240096f8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
240096fc:	4a34      	ldr	r2, [pc, #208]	; (240097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
240096fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009702:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009704:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009708:	ee07 3a10 	vmov	s14, r3
2400970c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24009710:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24009712:	ee37 7a06 	vadd.f32	s14, s14, s12
24009716:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400971a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400971e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24009722:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009724:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009728:	ee07 3a10 	vmov	s14, r3
2400972c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009730:	ee37 7a06 	vadd.f32	s14, s14, s12
24009734:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400973c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24009740:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009742:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009746:	ee07 3a90 	vmov	s15, r3
2400974a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400974e:	ee77 7a86 	vadd.f32	s15, s15, s12
24009752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009756:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400975a:	ed80 7a02 	vstr	s14, [r0, #8]
}
2400975e:	4770      	bx	lr
24009760:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24009762:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
24009766:	6082      	str	r2, [r0, #8]
}
24009768:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400976a:	6819      	ldr	r1, [r3, #0]
2400976c:	0689      	lsls	r1, r1, #26
2400976e:	d527      	bpl.n	240097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009770:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009772:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009776:	4919      	ldr	r1, [pc, #100]	; (240097dc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009778:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400977e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009786:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
2400978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400978e:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009790:	ee06 3a90 	vmov	s13, r3
24009794:	ee05 1a90 	vmov	s11, r1
24009798:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400979c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240097a0:	ee76 6a86 	vadd.f32	s13, s13, s12
240097a4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
240097a8:	eee7 6a05 	vfma.f32	s13, s14, s10
240097ac:	ee66 6a26 	vmul.f32	s13, s12, s13
240097b0:	e7a4      	b.n	240096fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240097b2:	ee07 2a90 	vmov	s15, r2
240097b6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 240097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
240097ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240097be:	e78a      	b.n	240096d6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240097c0:	ee07 2a90 	vmov	s15, r2
240097c4:	eddf 6a07 	vldr	s13, [pc, #28]	; 240097e4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
240097c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240097cc:	e783      	b.n	240096d6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
240097ce:	bf00      	nop
240097d0:	58024400 	.word	0x58024400
240097d4:	4a742400 	.word	0x4a742400
240097d8:	39000000 	.word	0x39000000
240097dc:	03d09000 	.word	0x03d09000
240097e0:	4b742400 	.word	0x4b742400
240097e4:	4c742400 	.word	0x4c742400

240097e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240097e8:	4b4f      	ldr	r3, [pc, #316]	; (24009928 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
240097ea:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240097ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240097ee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240097f0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
240097f2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240097f6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240097fa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
240097fc:	d05c      	beq.n	240098b8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240097fe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24009802:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009806:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400980a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400980e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009810:	ee07 4a90 	vmov	s15, r4
24009814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009818:	d07e      	beq.n	24009918 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
2400981a:	2902      	cmp	r1, #2
2400981c:	d075      	beq.n	2400990a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
2400981e:	2900      	cmp	r1, #0
24009820:	d04f      	beq.n	240098c2 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009822:	ee07 2a90 	vmov	s15, r2
24009826:	eddf 6a41 	vldr	s13, [pc, #260]	; 2400992c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
2400982a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24009830:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24009834:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24009930 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24009838:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400983c:	ee06 3a90 	vmov	s13, r3
24009840:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24009844:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009848:	ee76 6a85 	vadd.f32	s13, s13, s10
2400984c:	eee7 6a25 	vfma.f32	s13, s14, s11
24009850:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24009854:	4a34      	ldr	r2, [pc, #208]	; (24009928 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
24009856:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400985a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400985c:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009860:	ee07 3a10 	vmov	s14, r3
24009864:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24009868:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400986a:	ee37 7a06 	vadd.f32	s14, s14, s12
2400986e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009876:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2400987a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400987c:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009880:	ee07 3a10 	vmov	s14, r3
24009884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009888:	ee37 7a06 	vadd.f32	s14, s14, s12
2400988c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009894:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24009898:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400989a:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400989e:	ee07 3a90 	vmov	s15, r3
240098a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240098a6:	ee77 7a86 	vadd.f32	s15, s15, s12
240098aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240098ae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240098b2:	ed80 7a02 	vstr	s14, [r0, #8]
}
240098b6:	4770      	bx	lr
240098b8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
240098ba:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
240098be:	6082      	str	r2, [r0, #8]
}
240098c0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240098c2:	6819      	ldr	r1, [r3, #0]
240098c4:	0689      	lsls	r1, r1, #26
240098c6:	d5ac      	bpl.n	24009822 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240098c8:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240098ca:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240098ce:	4919      	ldr	r1, [pc, #100]	; (24009934 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240098d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240098d6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240098da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240098de:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009930 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
240098e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240098e6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240098e8:	ee06 3a90 	vmov	s13, r3
240098ec:	ee05 1a90 	vmov	s11, r1
240098f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240098f4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240098f8:	ee76 6a86 	vadd.f32	s13, s13, s12
240098fc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24009900:	eee7 6a05 	vfma.f32	s13, s14, s10
24009904:	ee66 6a26 	vmul.f32	s13, s12, s13
24009908:	e7a4      	b.n	24009854 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400990a:	ee07 2a90 	vmov	s15, r2
2400990e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24009938 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24009912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009916:	e78a      	b.n	2400982e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009918:	ee07 2a90 	vmov	s15, r2
2400991c:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400993c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
24009920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009924:	e783      	b.n	2400982e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
24009926:	bf00      	nop
24009928:	58024400 	.word	0x58024400
2400992c:	4c742400 	.word	0x4c742400
24009930:	39000000 	.word	0x39000000
24009934:	03d09000 	.word	0x03d09000
24009938:	4b742400 	.word	0x4b742400
2400993c:	4a742400 	.word	0x4a742400

24009940 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009940:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24009944:	430b      	orrs	r3, r1
{
24009946:	b500      	push	{lr}
24009948:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400994a:	f000 8084 	beq.w	24009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
2400994e:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24009952:	430b      	orrs	r3, r1
24009954:	d039      	beq.n	240099ca <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24009956:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
2400995a:	430b      	orrs	r3, r1
2400995c:	f000 80e6 	beq.w	24009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24009960:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24009964:	430b      	orrs	r3, r1
24009966:	f000 8089 	beq.w	24009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400996a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
2400996e:	430b      	orrs	r3, r1
24009970:	d061      	beq.n	24009a36 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24009972:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
24009976:	430b      	orrs	r3, r1
24009978:	f000 8112 	beq.w	24009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2400997c:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24009980:	430b      	orrs	r3, r1
24009982:	f000 80a3 	beq.w	24009acc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24009986:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
2400998a:	430b      	orrs	r3, r1
2400998c:	f000 80fa 	beq.w	24009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24009990:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24009994:	430b      	orrs	r3, r1
24009996:	f000 8143 	beq.w	24009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2400999a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
2400999e:	ea50 0301 	orrs.w	r3, r0, r1
240099a2:	d137      	bne.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
240099a4:	4a99      	ldr	r2, [pc, #612]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240099a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
240099a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
240099ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240099b0:	f000 8083 	beq.w	24009aba <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240099b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240099b8:	f000 8156 	beq.w	24009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
240099bc:	bb53      	cbnz	r3, 24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240099be:	6810      	ldr	r0, [r2, #0]
240099c0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
240099c4:	d044      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
240099c6:	4892      	ldr	r0, [pc, #584]	; (24009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
240099c8:	e042      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
240099ca:	4a90      	ldr	r2, [pc, #576]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240099cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
240099ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
240099d2:	2b80      	cmp	r3, #128	; 0x80
240099d4:	f000 80a5 	beq.w	24009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240099d8:	d920      	bls.n	24009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
240099da:	2bc0      	cmp	r3, #192	; 0xc0
240099dc:	d037      	beq.n	24009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240099de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240099e2:	d117      	bne.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240099e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240099e6:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240099e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240099ec:	0749      	lsls	r1, r1, #29
240099ee:	d502      	bpl.n	240099f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
240099f0:	2b00      	cmp	r3, #0
240099f2:	f000 80c1 	beq.w	24009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240099f6:	4a85      	ldr	r2, [pc, #532]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240099f8:	6812      	ldr	r2, [r2, #0]
240099fa:	05d0      	lsls	r0, r2, #23
240099fc:	d503      	bpl.n	24009a06 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
240099fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009a02:	f000 8101 	beq.w	24009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24009a06:	4a81      	ldr	r2, [pc, #516]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009a08:	6812      	ldr	r2, [r2, #0]
24009a0a:	0391      	lsls	r1, r2, #14
24009a0c:	d502      	bpl.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009a12:	d0d8      	beq.n	240099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24009a14:	2000      	movs	r0, #0
}
24009a16:	b005      	add	sp, #20
24009a18:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24009a1c:	2b00      	cmp	r3, #0
24009a1e:	d04c      	beq.n	24009aba <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009a20:	2b40      	cmp	r3, #64	; 0x40
24009a22:	d1f7      	bne.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009a24:	6810      	ldr	r0, [r2, #0]
24009a26:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009a2a:	d011      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009a2c:	a801      	add	r0, sp, #4
24009a2e:	f7ff fd83 	bl	24009538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009a32:	9801      	ldr	r0, [sp, #4]
24009a34:	e00c      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
24009a36:	4a75      	ldr	r2, [pc, #468]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009a38:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009a3a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009a42:	d06e      	beq.n	24009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009a44:	d937      	bls.n	24009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
24009a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24009a4a:	f040 8087 	bne.w	24009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24009a4e:	4871      	ldr	r0, [pc, #452]	; (24009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24009a50:	b005      	add	sp, #20
24009a52:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
24009a56:	4b6d      	ldr	r3, [pc, #436]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009a5a:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
24009a5e:	2b04      	cmp	r3, #4
24009a60:	d8d8      	bhi.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009a62:	a201      	add	r2, pc, #4	; (adr r2, 24009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
24009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24009a68:	24009b0b 	.word	0x24009b0b
24009a6c:	24009ae7 	.word	0x24009ae7
24009a70:	24009af7 	.word	0x24009af7
24009a74:	24009a4f 	.word	0x24009a4f
24009a78:	24009af3 	.word	0x24009af3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24009a7c:	4a63      	ldr	r2, [pc, #396]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009a7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009a80:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
24009a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24009a88:	d04b      	beq.n	24009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009a8a:	d944      	bls.n	24009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
24009a8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24009a90:	d0dd      	beq.n	24009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24009a96:	d1bd      	bne.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009a98:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009a9a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009aa0:	0752      	lsls	r2, r2, #29
24009aa2:	d5a8      	bpl.n	240099f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
24009aa4:	2b00      	cmp	r3, #0
24009aa6:	d1a6      	bne.n	240099f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009aa8:	4b58      	ldr	r3, [pc, #352]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009aaa:	485b      	ldr	r0, [pc, #364]	; (24009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009aac:	681b      	ldr	r3, [r3, #0]
24009aae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009ab2:	40d8      	lsrs	r0, r3
24009ab4:	e7cc      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24009ab6:	2b00      	cmp	r3, #0
24009ab8:	d154      	bne.n	24009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009aba:	6810      	ldr	r0, [r2, #0]
24009abc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009ac0:	d0c6      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009ac2:	a801      	add	r0, sp, #4
24009ac4:	f7ff fe90 	bl	240097e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24009ac8:	9802      	ldr	r0, [sp, #8]
24009aca:	e7c1      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24009acc:	4a4f      	ldr	r2, [pc, #316]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ace:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
24009ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009ad8:	f000 80d0 	beq.w	24009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
24009adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009ae0:	d0da      	beq.n	24009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009ae2:	2b00      	cmp	r3, #0
24009ae4:	d196      	bne.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009ae6:	4b49      	ldr	r3, [pc, #292]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ae8:	6818      	ldr	r0, [r3, #0]
24009aea:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009aee:	d0af      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009af0:	e79c      	b.n	24009a2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009af2:	4a46      	ldr	r2, [pc, #280]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009af4:	e776      	b.n	240099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009af6:	4b45      	ldr	r3, [pc, #276]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009af8:	6818      	ldr	r0, [r3, #0]
24009afa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009afe:	d0a7      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009b00:	a801      	add	r0, sp, #4
24009b02:	f7ff fdc5 	bl	24009690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24009b06:	9801      	ldr	r0, [sp, #4]
24009b08:	e7a2      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009b0a:	4b40      	ldr	r3, [pc, #256]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b0c:	6818      	ldr	r0, [r3, #0]
24009b0e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009b12:	d09d      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009b14:	e7d5      	b.n	24009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
24009b16:	2b00      	cmp	r3, #0
24009b18:	d0cf      	beq.n	24009aba <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009b1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24009b1e:	d081      	beq.n	24009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009b20:	e778      	b.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009b22:	6810      	ldr	r0, [r2, #0]
24009b24:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009b28:	d092      	beq.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009b2a:	e7e9      	b.n	24009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24009b2c:	4a37      	ldr	r2, [pc, #220]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009b30:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
24009b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24009b38:	d0f3      	beq.n	24009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009b3a:	d806      	bhi.n	24009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24009b3c:	2b00      	cmp	r3, #0
24009b3e:	d0bc      	beq.n	24009aba <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24009b44:	f43f af6e 	beq.w	24009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009b48:	e764      	b.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009b4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24009b4e:	f43f af7e 	beq.w	24009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24009b56:	f43f af45 	beq.w	240099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
24009b5a:	e75b      	b.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
24009b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009b60:	d09a      	beq.n	24009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009b62:	e757      	b.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24009b68:	f43f af5c 	beq.w	24009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009b6c:	e752      	b.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009b6e:	6810      	ldr	r0, [r2, #0]
24009b70:	f010 0004 	ands.w	r0, r0, #4
24009b74:	f43f af6c 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009b78:	6813      	ldr	r3, [r2, #0]
24009b7a:	4827      	ldr	r0, [pc, #156]	; (24009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009b7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009b80:	40d8      	lsrs	r0, r3
24009b82:	e765      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24009b84:	4b21      	ldr	r3, [pc, #132]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
24009b88:	03d2      	lsls	r2, r2, #15
24009b8a:	d5bf      	bpl.n	24009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009b8c:	6818      	ldr	r0, [r3, #0]
24009b8e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009b92:	f43f af5d 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009b96:	a801      	add	r0, sp, #4
24009b98:	f7ff fcce 	bl	24009538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24009b9c:	9803      	ldr	r0, [sp, #12]
24009b9e:	e757      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24009ba0:	4a1a      	ldr	r2, [pc, #104]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009ba2:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009ba4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
24009ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24009bac:	d0df      	beq.n	24009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
24009bae:	d810      	bhi.n	24009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
24009bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009bb4:	d058      	beq.n	24009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24009bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009bba:	d118      	bne.n	24009bee <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009bbc:	4b13      	ldr	r3, [pc, #76]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009bbe:	6818      	ldr	r0, [r3, #0]
24009bc0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009bc4:	f43f af44 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009bc8:	a801      	add	r0, sp, #4
24009bca:	f7ff fd61 	bl	24009690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24009bce:	9802      	ldr	r0, [sp, #8]
24009bd0:	e73e      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24009bd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24009bd6:	d012      	beq.n	24009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
24009bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24009bdc:	f47f af1a 	bne.w	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009be0:	4b0a      	ldr	r3, [pc, #40]	; (24009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009be2:	6818      	ldr	r0, [r3, #0]
24009be4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009be8:	f43f af32 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009bec:	e6eb      	b.n	240099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24009bee:	2b00      	cmp	r3, #0
24009bf0:	f47f af10 	bne.w	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
24009bf4:	b005      	add	sp, #20
24009bf6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
24009bfa:	f7fe bd65 	b.w	240086c8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009bfe:	6810      	ldr	r0, [r2, #0]
24009c00:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24009c04:	f43f af24 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
24009c08:	4804      	ldr	r0, [pc, #16]	; (24009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
24009c0a:	e721      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009c0c:	58024400 	.word	0x58024400
24009c10:	00f42400 	.word	0x00f42400
24009c14:	00bb8000 	.word	0x00bb8000
24009c18:	03d09000 	.word	0x03d09000
24009c1c:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24009c20:	4b28      	ldr	r3, [pc, #160]	; (24009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009c24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
24009c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24009c2c:	d037      	beq.n	24009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
24009c2e:	d814      	bhi.n	24009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
24009c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009c34:	d03f      	beq.n	24009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
24009c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009c3a:	d0bf      	beq.n	24009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24009c3c:	2b00      	cmp	r3, #0
24009c3e:	f47f aee9 	bne.w	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24009c42:	f7fe fd01 	bl	24008648 <HAL_RCC_GetHCLKFreq>
24009c46:	4b1f      	ldr	r3, [pc, #124]	; (24009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009c48:	4a1f      	ldr	r2, [pc, #124]	; (24009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
24009c4a:	6a1b      	ldr	r3, [r3, #32]
24009c4c:	f3c3 1302 	ubfx	r3, r3, #4, #3
24009c50:	5cd3      	ldrb	r3, [r2, r3]
24009c52:	f003 031f 	and.w	r3, r3, #31
24009c56:	40d8      	lsrs	r0, r3
        break;
24009c58:	e6fa      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24009c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24009c5e:	d017      	beq.n	24009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
24009c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24009c64:	d0bc      	beq.n	24009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
24009c66:	e6d5      	b.n	24009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009c68:	6810      	ldr	r0, [r2, #0]
24009c6a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009c6e:	f43f aeef 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009c72:	a801      	add	r0, sp, #4
24009c74:	f7ff fc60 	bl	24009538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24009c78:	9802      	ldr	r0, [sp, #8]
24009c7a:	e6e9      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009c7c:	6810      	ldr	r0, [r2, #0]
24009c7e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009c82:	f43f aee5 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009c86:	a801      	add	r0, sp, #4
24009c88:	f7ff fd02 	bl	24009690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24009c8c:	9803      	ldr	r0, [sp, #12]
24009c8e:	e6df      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009c90:	4b0c      	ldr	r3, [pc, #48]	; (24009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009c92:	6818      	ldr	r0, [r3, #0]
24009c94:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24009c98:	f43f aeda 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009c9c:	e7b4      	b.n	24009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009c9e:	4b09      	ldr	r3, [pc, #36]	; (24009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009ca0:	6818      	ldr	r0, [r3, #0]
24009ca2:	f010 0004 	ands.w	r0, r0, #4
24009ca6:	f43f aed3 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009caa:	681b      	ldr	r3, [r3, #0]
24009cac:	4807      	ldr	r0, [pc, #28]	; (24009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
24009cae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009cb2:	40d8      	lsrs	r0, r3
24009cb4:	e6cc      	b.n	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009cb6:	4b03      	ldr	r3, [pc, #12]	; (24009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009cb8:	6818      	ldr	r0, [r3, #0]
24009cba:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009cbe:	f43f aec7 	beq.w	24009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009cc2:	e7d6      	b.n	24009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
24009cc4:	58024400 	.word	0x58024400
24009cc8:	2401ae80 	.word	0x2401ae80
24009ccc:	03d09000 	.word	0x03d09000

24009cd0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24009cd0:	2800      	cmp	r0, #0
24009cd2:	d039      	beq.n	24009d48 <HAL_RNG_Init+0x78>
{
24009cd4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
24009cd6:	7a43      	ldrb	r3, [r0, #9]
24009cd8:	4604      	mov	r4, r0
24009cda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009cde:	b37b      	cbz	r3, 24009d40 <HAL_RNG_Init+0x70>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009ce0:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
24009ce2:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009ce4:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
24009ce6:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009ce8:	681a      	ldr	r2, [r3, #0]
24009cea:	f022 0220 	bic.w	r2, r2, #32
24009cee:	430a      	orrs	r2, r1
24009cf0:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
24009cf2:	681a      	ldr	r2, [r3, #0]
24009cf4:	f042 0204 	orr.w	r2, r2, #4
24009cf8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24009cfa:	685b      	ldr	r3, [r3, #4]
24009cfc:	0658      	lsls	r0, r3, #25
24009cfe:	d503      	bpl.n	24009d08 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
24009d00:	2304      	movs	r3, #4
    return HAL_ERROR;
24009d02:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
24009d04:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24009d06:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24009d08:	f7fb feac 	bl	24005a64 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009d0c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
24009d0e:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009d10:	685b      	ldr	r3, [r3, #4]
24009d12:	0759      	lsls	r1, r3, #29
24009d14:	d50e      	bpl.n	24009d34 <HAL_RNG_Init+0x64>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009d16:	f7fb fea5 	bl	24005a64 <HAL_GetTick>
24009d1a:	1b43      	subs	r3, r0, r5
24009d1c:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009d1e:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009d20:	d9f6      	bls.n	24009d10 <HAL_RNG_Init+0x40>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009d22:	685a      	ldr	r2, [r3, #4]
24009d24:	0752      	lsls	r2, r2, #29
24009d26:	d5f3      	bpl.n	24009d10 <HAL_RNG_Init+0x40>
        hrng->State = HAL_RNG_STATE_ERROR;
24009d28:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009d2a:	2302      	movs	r3, #2
        return HAL_ERROR;
24009d2c:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
24009d2e:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009d30:	60e3      	str	r3, [r4, #12]
}
24009d32:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009d34:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24009d36:	2201      	movs	r2, #1
  return HAL_OK;
24009d38:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24009d3a:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009d3c:	60e3      	str	r3, [r4, #12]
}
24009d3e:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
24009d40:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
24009d42:	f7fb f9d5 	bl	240050f0 <HAL_RNG_MspInit>
24009d46:	e7cb      	b.n	24009ce0 <HAL_RNG_Init+0x10>
    return HAL_ERROR;
24009d48:	2001      	movs	r0, #1
}
24009d4a:	4770      	bx	lr

24009d4c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
24009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
24009d4e:	7a03      	ldrb	r3, [r0, #8]
24009d50:	2b01      	cmp	r3, #1
24009d52:	d027      	beq.n	24009da4 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24009d54:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
24009d56:	2201      	movs	r2, #1
24009d58:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
24009d5a:	4293      	cmp	r3, r2
24009d5c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
24009d5e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
24009d60:	d006      	beq.n	24009d70 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009d62:	2304      	movs	r3, #4
    status = HAL_ERROR;
24009d64:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009d66:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24009d68:	2300      	movs	r3, #0
24009d6a:	7223      	strb	r3, [r4, #8]

  return status;
}
24009d6c:	4630      	mov	r0, r6
24009d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
24009d70:	2302      	movs	r3, #2
24009d72:	460d      	mov	r5, r1
24009d74:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24009d76:	f7fb fe75 	bl	24005a64 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009d7a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
24009d7c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009d7e:	685a      	ldr	r2, [r3, #4]
24009d80:	07d2      	lsls	r2, r2, #31
24009d82:	d412      	bmi.n	24009daa <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009d84:	f7fb fe6e 	bl	24005a64 <HAL_GetTick>
24009d88:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009d8a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009d8c:	2802      	cmp	r0, #2
24009d8e:	d9f6      	bls.n	24009d7e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009d90:	685a      	ldr	r2, [r3, #4]
24009d92:	f012 0201 	ands.w	r2, r2, #1
24009d96:	d1f2      	bne.n	24009d7e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
24009d98:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009d9a:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
24009d9c:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
24009d9e:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009da0:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
24009da2:	e7e3      	b.n	24009d6c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
24009da4:	2602      	movs	r6, #2
}
24009da6:	4630      	mov	r0, r6
24009da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
24009daa:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
24009dac:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
24009dae:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
24009db0:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
24009db2:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
24009db4:	7262      	strb	r2, [r4, #9]
24009db6:	e7d7      	b.n	24009d68 <HAL_RNG_GenerateRandomNumber+0x1c>

24009db8 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009dba:	6801      	ldr	r1, [r0, #0]
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009dbc:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009dbe:	4bab      	ldr	r3, [pc, #684]	; (2400a06c <HAL_SAI_Init.part.0+0x2b4>)
24009dc0:	4299      	cmp	r1, r3
24009dc2:	d01c      	beq.n	24009dfe <HAL_SAI_Init.part.0+0x46>
24009dc4:	3320      	adds	r3, #32
24009dc6:	4299      	cmp	r1, r3
24009dc8:	d019      	beq.n	24009dfe <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009dca:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24009dce:	4299      	cmp	r1, r3
24009dd0:	d04e      	beq.n	24009e70 <HAL_SAI_Init.part.0+0xb8>
24009dd2:	3320      	adds	r3, #32
24009dd4:	4299      	cmp	r1, r3
24009dd6:	d04b      	beq.n	24009e70 <HAL_SAI_Init.part.0+0xb8>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009dd8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24009ddc:	4299      	cmp	r1, r3
24009dde:	f000 812e 	beq.w	2400a03e <HAL_SAI_Init.part.0+0x286>
24009de2:	3320      	adds	r3, #32
24009de4:	4299      	cmp	r1, r3
24009de6:	f000 812a 	beq.w	2400a03e <HAL_SAI_Init.part.0+0x286>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
24009dea:	4ba1      	ldr	r3, [pc, #644]	; (2400a070 <HAL_SAI_Init.part.0+0x2b8>)
24009dec:	4299      	cmp	r1, r3
24009dee:	f000 8128 	beq.w	2400a042 <HAL_SAI_Init.part.0+0x28a>
24009df2:	3320      	adds	r3, #32
24009df4:	4299      	cmp	r1, r3
24009df6:	f000 8124 	beq.w	2400a042 <HAL_SAI_Init.part.0+0x28a>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
24009dfa:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
24009dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
24009dfe:	4e9d      	ldr	r6, [pc, #628]	; (2400a074 <HAL_SAI_Init.part.0+0x2bc>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009e00:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
24009e04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009e08:	2b00      	cmp	r3, #0
24009e0a:	d038      	beq.n	24009e7e <HAL_SAI_Init.part.0+0xc6>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009e0c:	4b9a      	ldr	r3, [pc, #616]	; (2400a078 <HAL_SAI_Init.part.0+0x2c0>)
24009e0e:	4a9b      	ldr	r2, [pc, #620]	; (2400a07c <HAL_SAI_Init.part.0+0x2c4>)
24009e10:	681b      	ldr	r3, [r3, #0]
24009e12:	fba2 2303 	umull	r2, r3, r2, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24009e16:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009e18:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009e1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009e1e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24009e20:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24009e22:	2b00      	cmp	r3, #0
24009e24:	d032      	beq.n	24009e8c <HAL_SAI_Init.part.0+0xd4>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009e26:	680c      	ldr	r4, [r1, #0]
    count--;
24009e28:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009e2a:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
24009e2e:	d1f8      	bne.n	24009e22 <HAL_SAI_Init.part.0+0x6a>
  hsai->State = HAL_SAI_STATE_BUSY;
24009e30:	2302      	movs	r3, #2
24009e32:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24009e36:	68eb      	ldr	r3, [r5, #12]
24009e38:	2b01      	cmp	r3, #1
24009e3a:	f000 8144 	beq.w	2400a0c6 <HAL_SAI_Init.part.0+0x30e>
24009e3e:	2b02      	cmp	r3, #2
24009e40:	bf15      	itete	ne
24009e42:	2003      	movne	r0, #3
24009e44:	2023      	moveq	r0, #35	; 0x23
24009e46:	2702      	movne	r7, #2
24009e48:	2722      	moveq	r7, #34	; 0x22
24009e4a:	bf15      	itete	ne
24009e4c:	f04f 0c01 	movne.w	ip, #1
24009e50:	f04f 0c21 	moveq.w	ip, #33	; 0x21
24009e54:	2200      	movne	r2, #0
24009e56:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
24009e58:	68ab      	ldr	r3, [r5, #8]
24009e5a:	3b01      	subs	r3, #1
24009e5c:	2b04      	cmp	r3, #4
24009e5e:	f200 816e 	bhi.w	2400a13e <HAL_SAI_Init.part.0+0x386>
24009e62:	e8df f013 	tbh	[pc, r3, lsl #1]
24009e66:	00e1      	.short	0x00e1
24009e68:	00e8001c 	.word	0x00e8001c
24009e6c:	00e4001b 	.word	0x00e4001b
  if (hsai->State == HAL_SAI_STATE_RESET)
24009e70:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
24009e74:	4e82      	ldr	r6, [pc, #520]	; (2400a080 <HAL_SAI_Init.part.0+0x2c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009e76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009e7a:	2b00      	cmp	r3, #0
24009e7c:	d1c6      	bne.n	24009e0c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
24009e7e:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
24009e80:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
24009e84:	f7fb f99c 	bl	240051c0 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
24009e88:	6829      	ldr	r1, [r5, #0]
24009e8a:	e7bf      	b.n	24009e0c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009e8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
24009e90:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009e96:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
24009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24009e9c:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009e9e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24009ea2:	6a2b      	ldr	r3, [r5, #32]
  SaiBaseAddress->GCR = tmpregisterGCR;
24009ea4:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24009ea6:	2b00      	cmp	r3, #0
24009ea8:	d049      	beq.n	24009f3e <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009eaa:	4b70      	ldr	r3, [pc, #448]	; (2400a06c <HAL_SAI_Init.part.0+0x2b4>)
24009eac:	4299      	cmp	r1, r3
24009eae:	f000 811f 	beq.w	2400a0f0 <HAL_SAI_Init.part.0+0x338>
24009eb2:	4874      	ldr	r0, [pc, #464]	; (2400a084 <HAL_SAI_Init.part.0+0x2cc>)
24009eb4:	1a08      	subs	r0, r1, r0
24009eb6:	fab0 f080 	clz	r0, r0
24009eba:	0940      	lsrs	r0, r0, #5
24009ebc:	2800      	cmp	r0, #0
24009ebe:	f040 8117 	bne.w	2400a0f0 <HAL_SAI_Init.part.0+0x338>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009ec2:	4b71      	ldr	r3, [pc, #452]	; (2400a088 <HAL_SAI_Init.part.0+0x2d0>)
24009ec4:	4299      	cmp	r1, r3
24009ec6:	f000 8121 	beq.w	2400a10c <HAL_SAI_Init.part.0+0x354>
24009eca:	3320      	adds	r3, #32
24009ecc:	4299      	cmp	r1, r3
24009ece:	f000 811d 	beq.w	2400a10c <HAL_SAI_Init.part.0+0x354>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009ed2:	4b6e      	ldr	r3, [pc, #440]	; (2400a08c <HAL_SAI_Init.part.0+0x2d4>)
24009ed4:	4299      	cmp	r1, r3
24009ed6:	f000 8112 	beq.w	2400a0fe <HAL_SAI_Init.part.0+0x346>
24009eda:	3320      	adds	r3, #32
24009edc:	4299      	cmp	r1, r3
24009ede:	f000 810e 	beq.w	2400a0fe <HAL_SAI_Init.part.0+0x346>
    if (hsai->Instance == SAI4_Block_A)
24009ee2:	4b63      	ldr	r3, [pc, #396]	; (2400a070 <HAL_SAI_Init.part.0+0x2b8>)
24009ee4:	4299      	cmp	r1, r3
24009ee6:	f000 8121 	beq.w	2400a12c <HAL_SAI_Init.part.0+0x374>
    if (hsai->Instance == SAI4_Block_B)
24009eea:	4b69      	ldr	r3, [pc, #420]	; (2400a090 <HAL_SAI_Init.part.0+0x2d8>)
24009eec:	4299      	cmp	r1, r3
24009eee:	f000 8117 	beq.w	2400a120 <HAL_SAI_Init.part.0+0x368>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
24009ef2:	69ab      	ldr	r3, [r5, #24]
24009ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24009ef8:	f000 80eb 	beq.w	2400a0d2 <HAL_SAI_Init.part.0+0x31a>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009efc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009f02:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009f04:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009f08:	ea4f 0340 	mov.w	r3, r0, lsl #1
24009f0c:	6a28      	ldr	r0, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009f0e:	bf0c      	ite	eq
24009f10:	2202      	moveq	r2, #2
24009f12:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009f14:	fb00 f202 	mul.w	r2, r0, r2
24009f18:	0212      	lsls	r2, r2, #8
24009f1a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
24009f1e:	4a5d      	ldr	r2, [pc, #372]	; (2400a094 <HAL_SAI_Init.part.0+0x2dc>)
24009f20:	fba2 0203 	umull	r0, r2, r2, r3
24009f24:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24009f26:	eb02 0082 	add.w	r0, r2, r2, lsl #2
24009f2a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
24009f2e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
24009f30:	bf08      	it	eq
24009f32:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009f34:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24009f36:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009f38:	d101      	bne.n	24009f3e <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24009f3a:	0852      	lsrs	r2, r2, #1
24009f3c:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009f3e:	686b      	ldr	r3, [r5, #4]
24009f40:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009f44:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009f46:	f040 80b9 	bne.w	2400a0bc <HAL_SAI_Init.part.0+0x304>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009f4a:	2b01      	cmp	r3, #1
24009f4c:	bf14      	ite	ne
24009f4e:	f44f 7400 	movne.w	r4, #512	; 0x200
24009f52:	2400      	moveq	r4, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009f54:	f7fb fd9e 	bl	24005a94 <HAL_GetREVID>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f58:	6c69      	ldr	r1, [r5, #68]	; 0x44
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009f5a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f5e:	e9d5 3200 	ldrd	r3, r2, [r5]
24009f62:	ea42 0201 	orr.w	r2, r2, r1
24009f66:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24009f68:	ea42 0201 	orr.w	r2, r2, r1
24009f6c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
24009f6e:	ea42 0201 	orr.w	r2, r2, r1
24009f72:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
24009f74:	ea42 0201 	orr.w	r2, r2, r1
24009f78:	6969      	ldr	r1, [r5, #20]
24009f7a:	ea42 0201 	orr.w	r2, r2, r1
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009f7e:	f0c0 8095 	bcc.w	2400a0ac <HAL_SAI_Init.part.0+0x2f4>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f82:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009f84:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f86:	430a      	orrs	r2, r1
24009f88:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24009f8a:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009f8c:	4942      	ldr	r1, [pc, #264]	; (2400a098 <HAL_SAI_Init.part.0+0x2e0>)
24009f8e:	4001      	ands	r1, r0
24009f90:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f92:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f94:	430a      	orrs	r2, r1
24009f96:	6819      	ldr	r1, [r3, #0]
24009f98:	430a      	orrs	r2, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
24009f9a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009f9c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009fa0:	493e      	ldr	r1, [pc, #248]	; (2400a09c <HAL_SAI_Init.part.0+0x2e4>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009fa2:	433a      	orrs	r2, r7
24009fa4:	4322      	orrs	r2, r4
24009fa6:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009fa8:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009faa:	6b28      	ldr	r0, [r5, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009fac:	4011      	ands	r1, r2
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009fae:	69ea      	ldr	r2, [r5, #28]
24009fb0:	4302      	orrs	r2, r0
24009fb2:	6b68      	ldr	r0, [r5, #52]	; 0x34
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009fb4:	6059      	str	r1, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009fb6:	4302      	orrs	r2, r0
24009fb8:	6859      	ldr	r1, [r3, #4]
24009fba:	430a      	orrs	r2, r1
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24009fbc:	4938      	ldr	r1, [pc, #224]	; (2400a0a0 <HAL_SAI_Init.part.0+0x2e8>)
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009fbe:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24009fc0:	689a      	ldr	r2, [r3, #8]
24009fc2:	4011      	ands	r1, r2
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009fc4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24009fc6:	6099      	str	r1, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009fc8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
24009fca:	6898      	ldr	r0, [r3, #8]
24009fcc:	430a      	orrs	r2, r1
24009fce:	6e29      	ldr	r1, [r5, #96]	; 0x60
24009fd0:	430a      	orrs	r2, r1
24009fd2:	6d69      	ldr	r1, [r5, #84]	; 0x54
24009fd4:	3901      	subs	r1, #1
24009fd6:	430a      	orrs	r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
24009fd8:	6da9      	ldr	r1, [r5, #88]	; 0x58
24009fda:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009fdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
24009fe0:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009fe2:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009fe6:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009fe8:	68d9      	ldr	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009fea:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009fec:	4001      	ands	r1, r0
24009fee:	60d9      	str	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009ff0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
24009ff2:	68d8      	ldr	r0, [r3, #12]
24009ff4:	430a      	orrs	r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009ff6:	6f69      	ldr	r1, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009ff8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009ffc:	6f29      	ldr	r1, [r5, #112]	; 0x70
24009ffe:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a000:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a004:	4919      	ldr	r1, [pc, #100]	; (2400a06c <HAL_SAI_Init.part.0+0x2b4>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a006:	4302      	orrs	r2, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a008:	428b      	cmp	r3, r1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400a00a:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400a00c:	d01b      	beq.n	2400a046 <HAL_SAI_Init.part.0+0x28e>
2400a00e:	4a18      	ldr	r2, [pc, #96]	; (2400a070 <HAL_SAI_Init.part.0+0x2b8>)
2400a010:	4293      	cmp	r3, r2
2400a012:	d018      	beq.n	2400a046 <HAL_SAI_Init.part.0+0x28e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a014:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400a016:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a018:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
2400a01c:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
2400a01e:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400a022:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
2400a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
2400a028:	f44f 6780 	mov.w	r7, #1024	; 0x400
2400a02c:	e739      	b.n	24009ea2 <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
2400a02e:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a030:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
2400a034:	e735      	b.n	24009ea2 <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400a036:	4662      	mov	r2, ip
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400a038:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
2400a03c:	e731      	b.n	24009ea2 <HAL_SAI_Init.part.0+0xea>
    SaiBaseAddress = SAI3;
2400a03e:	4e19      	ldr	r6, [pc, #100]	; (2400a0a4 <HAL_SAI_Init.part.0+0x2ec>)
2400a040:	e6de      	b.n	24009e00 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
2400a042:	4e19      	ldr	r6, [pc, #100]	; (2400a0a8 <HAL_SAI_Init.part.0+0x2f0>)
2400a044:	e6dc      	b.n	24009e00 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2400a046:	6c73      	ldr	r3, [r6, #68]	; 0x44
2400a048:	f023 0301 	bic.w	r3, r3, #1
2400a04c:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2400a04e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
2400a052:	2b01      	cmp	r3, #1
2400a054:	d1de      	bne.n	2400a014 <HAL_SAI_Init.part.0+0x25c>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400a056:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2400a05a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400a05c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400a060:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400a062:	6c73      	ldr	r3, [r6, #68]	; 0x44
2400a064:	f043 0301 	orr.w	r3, r3, #1
2400a068:	6473      	str	r3, [r6, #68]	; 0x44
2400a06a:	e7d3      	b.n	2400a014 <HAL_SAI_Init.part.0+0x25c>
2400a06c:	40015804 	.word	0x40015804
2400a070:	58005404 	.word	0x58005404
2400a074:	40015800 	.word	0x40015800
2400a078:	20000750 	.word	0x20000750
2400a07c:	95cbec1b 	.word	0x95cbec1b
2400a080:	40015c00 	.word	0x40015c00
2400a084:	40015824 	.word	0x40015824
2400a088:	40015c04 	.word	0x40015c04
2400a08c:	40016004 	.word	0x40016004
2400a090:	58005424 	.word	0x58005424
2400a094:	cccccccd 	.word	0xcccccccd
2400a098:	f005c010 	.word	0xf005c010
2400a09c:	ffff1ff0 	.word	0xffff1ff0
2400a0a0:	fff88000 	.word	0xfff88000
2400a0a4:	40016000 	.word	0x40016000
2400a0a8:	58005400 	.word	0x58005400
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a0ac:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a0ae:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a0b0:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400a0b2:	4924      	ldr	r1, [pc, #144]	; (2400a144 <HAL_SAI_Init.part.0+0x38c>)
2400a0b4:	4001      	ands	r1, r0
2400a0b6:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400a0b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400a0ba:	e76b      	b.n	24009f94 <HAL_SAI_Init.part.0+0x1dc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400a0bc:	2b01      	cmp	r3, #1
2400a0be:	bf08      	it	eq
2400a0c0:	f44f 7400 	moveq.w	r4, #512	; 0x200
2400a0c4:	e746      	b.n	24009f54 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
2400a0c6:	2013      	movs	r0, #19
2400a0c8:	2712      	movs	r7, #18
2400a0ca:	f04f 0c11 	mov.w	ip, #17
2400a0ce:	2210      	movs	r2, #16
2400a0d0:	e6c2      	b.n	24009e58 <HAL_SAI_Init.part.0+0xa0>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400a0d2:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a0d4:	2904      	cmp	r1, #4
2400a0d6:	d030      	beq.n	2400a13a <HAL_SAI_Init.part.0+0x382>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2400a0d8:	2908      	cmp	r1, #8
2400a0da:	d01e      	beq.n	2400a11a <HAL_SAI_Init.part.0+0x362>
        tmpframelength = hsai->FrameInit.FrameLength;
2400a0dc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2400a0de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
2400a0e2:	0043      	lsls	r3, r0, #1
2400a0e4:	6a28      	ldr	r0, [r5, #32]
2400a0e6:	fb00 f202 	mul.w	r2, r0, r2
2400a0ea:	fbb3 f3f2 	udiv	r3, r3, r2
2400a0ee:	e716      	b.n	24009f1e <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2400a0f0:	2100      	movs	r1, #0
2400a0f2:	f44f 7080 	mov.w	r0, #256	; 0x100
2400a0f6:	f7ff fc23 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400a0fa:	6829      	ldr	r1, [r5, #0]
2400a0fc:	e6e1      	b.n	24009ec2 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400a0fe:	2100      	movs	r1, #0
2400a100:	f44f 7000 	mov.w	r0, #512	; 0x200
2400a104:	f7ff fc1c 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
2400a108:	6829      	ldr	r1, [r5, #0]
2400a10a:	e6ea      	b.n	24009ee2 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400a10c:	2100      	movs	r1, #0
2400a10e:	f44f 7000 	mov.w	r0, #512	; 0x200
2400a112:	f7ff fc15 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400a116:	6829      	ldr	r1, [r5, #0]
2400a118:	e6db      	b.n	24009ed2 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400a11a:	f44f 7280 	mov.w	r2, #256	; 0x100
2400a11e:	e7de      	b.n	2400a0de <HAL_SAI_Init.part.0+0x326>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
2400a120:	2100      	movs	r1, #0
2400a122:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a126:	f7ff fc0b 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
2400a12a:	e6e2      	b.n	24009ef2 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400a12c:	2100      	movs	r1, #0
2400a12e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400a132:	f7ff fc05 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
2400a136:	6829      	ldr	r1, [r5, #0]
2400a138:	e6d7      	b.n	24009eea <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400a13a:	2240      	movs	r2, #64	; 0x40
2400a13c:	e7cf      	b.n	2400a0de <HAL_SAI_Init.part.0+0x326>
      syncen_bits = 0;
2400a13e:	2700      	movs	r7, #0
2400a140:	e6af      	b.n	24009ea2 <HAL_SAI_Init.part.0+0xea>
2400a142:	bf00      	nop
2400a144:	f805c010 	.word	0xf805c010

2400a148 <HAL_SAI_InitProtocol>:
  switch (protocol)
2400a148:	2902      	cmp	r1, #2
{
2400a14a:	b538      	push	{r3, r4, r5, lr}
2400a14c:	4604      	mov	r4, r0
  switch (protocol)
2400a14e:	d935      	bls.n	2400a1bc <HAL_SAI_InitProtocol+0x74>
2400a150:	1ec8      	subs	r0, r1, #3
2400a152:	2801      	cmp	r0, #1
2400a154:	d830      	bhi.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a156:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400a158:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a15a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400a15c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400a15e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
2400a160:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400a162:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400a166:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a168:	6860      	ldr	r0, [r4, #4]
2400a16a:	f030 0002 	bics.w	r0, r0, #2
2400a16e:	bf0c      	ite	eq
2400a170:	2501      	moveq	r5, #1
2400a172:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
2400a174:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400a176:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400a17a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
2400a17c:	bf0c      	ite	eq
2400a17e:	2001      	moveq	r0, #1
2400a180:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400a182:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2400a184:	f44f 2180 	mov.w	r1, #262144	; 0x40000
2400a188:	65a0      	str	r0, [r4, #88]	; 0x58
2400a18a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
2400a18c:	2a03      	cmp	r2, #3
2400a18e:	d813      	bhi.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
2400a190:	e8df f002 	tbb	[pc, r2]
2400a194:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
2400a198:	6823      	ldr	r3, [r4, #0]
2400a19a:	4a47      	ldr	r2, [pc, #284]	; (2400a2b8 <HAL_SAI_InitProtocol+0x170>)
2400a19c:	4293      	cmp	r3, r2
2400a19e:	d005      	beq.n	2400a1ac <HAL_SAI_InitProtocol+0x64>
2400a1a0:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
2400a1a4:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400a1a8:	4293      	cmp	r3, r2
2400a1aa:	d105      	bne.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
2400a1ac:	6863      	ldr	r3, [r4, #4]
2400a1ae:	2b01      	cmp	r3, #1
2400a1b0:	d102      	bne.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2400a1b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a1b4:	2b00      	cmp	r3, #0
2400a1b6:	d037      	beq.n	2400a228 <HAL_SAI_InitProtocol+0xe0>
}
2400a1b8:	2001      	movs	r0, #1
2400a1ba:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a1bc:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400a1be:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400a1c0:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2400a1c2:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
2400a1c4:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a1c6:	6860      	ldr	r0, [r4, #4]
2400a1c8:	f030 0002 	bics.w	r0, r0, #2
2400a1cc:	bf14      	ite	ne
2400a1ce:	2001      	movne	r0, #1
2400a1d0:	2000      	moveq	r0, #0
2400a1d2:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2400a1d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a1d8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400a1da:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400a1de:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
2400a1e0:	f013 0001 	ands.w	r0, r3, #1
2400a1e4:	d1e8      	bne.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
2400a1e6:	b949      	cbnz	r1, 2400a1fc <HAL_SAI_InitProtocol+0xb4>
2400a1e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400a1ec:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
2400a1f0:	2a03      	cmp	r2, #3
2400a1f2:	d8e1      	bhi.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
2400a1f4:	e8df f002 	tbb	[pc, r2]
2400a1f8:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400a1fc:	6660      	str	r0, [r4, #100]	; 0x64
2400a1fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400a202:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
2400a204:	2a03      	cmp	r2, #3
2400a206:	d8d7      	bhi.n	2400a1b8 <HAL_SAI_InitProtocol+0x70>
2400a208:	e8df f002 	tbb	[pc, r2]
2400a20c:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a210:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400a212:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a214:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a216:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400a218:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a21a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400a21c:	f7fb fc3a 	bl	24005a94 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
2400a220:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
2400a224:	2b01      	cmp	r3, #1
2400a226:	d0b7      	beq.n	2400a198 <HAL_SAI_InitProtocol+0x50>
2400a228:	4620      	mov	r0, r4
}
2400a22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400a22e:	f7ff bdc3 	b.w	24009db8 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a232:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a234:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a236:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a238:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a23a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400a23c:	e7ee      	b.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a23e:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a240:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a242:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a244:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400a246:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a248:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400a24a:	e7e7      	b.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a24c:	21e0      	movs	r1, #224	; 0xe0
2400a24e:	e7f7      	b.n	2400a240 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a250:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a252:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a254:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a256:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400a258:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a25a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a25c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a25e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a262:	e7db      	b.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a264:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a266:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a268:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a26a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a26c:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400a270:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a272:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a276:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a278:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a27a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a27c:	d1ce      	bne.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
2400a27e:	2308      	movs	r3, #8
2400a280:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400a282:	e7cb      	b.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a284:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a286:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a288:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400a28a:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a28e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a290:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400a294:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400a296:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a29a:	d1bf      	bne.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
2400a29c:	2310      	movs	r3, #16
2400a29e:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400a2a0:	e7bc      	b.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400a2a2:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a2a4:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a2a6:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400a2a8:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400a2aa:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400a2ac:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400a2ae:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400a2b0:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400a2b4:	e7b2      	b.n	2400a21c <HAL_SAI_InitProtocol+0xd4>
2400a2b6:	bf00      	nop
2400a2b8:	40015804 	.word	0x40015804

2400a2bc <HAL_SAI_Abort>:
{
2400a2bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
2400a2be:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
2400a2c2:	2b01      	cmp	r3, #1
2400a2c4:	d06a      	beq.n	2400a39c <HAL_SAI_Abort+0xe0>
2400a2c6:	2601      	movs	r6, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a2c8:	6802      	ldr	r2, [r0, #0]
2400a2ca:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
2400a2cc:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a2d0:	6815      	ldr	r5, [r2, #0]
2400a2d2:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
2400a2d6:	d00d      	beq.n	2400a2f4 <HAL_SAI_Abort+0x38>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a2d8:	6813      	ldr	r3, [r2, #0]
2400a2da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a2de:	6013      	str	r3, [r2, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2400a2e0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
2400a2e4:	2b12      	cmp	r3, #18
2400a2e6:	d02e      	beq.n	2400a346 <HAL_SAI_Abort+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
2400a2e8:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2400a2ea:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400a2ee:	2b22      	cmp	r3, #34	; 0x22
2400a2f0:	d03e      	beq.n	2400a370 <HAL_SAI_Abort+0xb4>
  hsai->Instance->IMR = 0;
2400a2f2:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a2f4:	4b2b      	ldr	r3, [pc, #172]	; (2400a3a4 <HAL_SAI_Abort+0xe8>)
  hsai->Instance->IMR = 0;
2400a2f6:	2000      	movs	r0, #0
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a2f8:	492b      	ldr	r1, [pc, #172]	; (2400a3a8 <HAL_SAI_Abort+0xec>)
2400a2fa:	681b      	ldr	r3, [r3, #0]
  hsai->Instance->IMR = 0;
2400a2fc:	6110      	str	r0, [r2, #16]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a2fe:	fba1 1303 	umull	r1, r3, r1, r3
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400a302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a306:	0b1b      	lsrs	r3, r3, #12
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400a308:	6191      	str	r1, [r2, #24]
  __HAL_SAI_DISABLE(hsai);
2400a30a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a30c:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400a30e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
2400a312:	6011      	str	r1, [r2, #0]
    if (count == 0U)
2400a314:	b17b      	cbz	r3, 2400a336 <HAL_SAI_Abort+0x7a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a316:	6811      	ldr	r1, [r2, #0]
    count--;
2400a318:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a31a:	03c9      	lsls	r1, r1, #15
2400a31c:	d4fa      	bmi.n	2400a314 <HAL_SAI_Abort+0x58>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2400a31e:	6853      	ldr	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
2400a320:	2101      	movs	r1, #1
}
2400a322:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2400a324:	f043 0308 	orr.w	r3, r3, #8
2400a328:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hsai);
2400a32a:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400a32c:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400a330:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a334:	bd70      	pop	{r4, r5, r6, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a336:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
2400a33a:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a340:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
2400a344:	e7eb      	b.n	2400a31e <HAL_SAI_Abort+0x62>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2400a346:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
2400a34a:	2800      	cmp	r0, #0
2400a34c:	d0cc      	beq.n	2400a2e8 <HAL_SAI_Abort+0x2c>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2400a34e:	f7fc f969 	bl	24006624 <HAL_DMA_Abort>
2400a352:	2800      	cmp	r0, #0
2400a354:	d0c8      	beq.n	2400a2e8 <HAL_SAI_Abort+0x2c>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2400a356:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400a35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400a35c:	2b80      	cmp	r3, #128	; 0x80
2400a35e:	d0c3      	beq.n	2400a2e8 <HAL_SAI_Abort+0x2c>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a360:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
2400a364:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400a36a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
2400a36e:	e7bc      	b.n	2400a2ea <HAL_SAI_Abort+0x2e>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2400a370:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
2400a374:	2800      	cmp	r0, #0
2400a376:	d0bc      	beq.n	2400a2f2 <HAL_SAI_Abort+0x36>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2400a378:	f7fc f954 	bl	24006624 <HAL_DMA_Abort>
2400a37c:	2800      	cmp	r0, #0
2400a37e:	d0b8      	beq.n	2400a2f2 <HAL_SAI_Abort+0x36>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2400a380:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400a384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400a386:	2b80      	cmp	r3, #128	; 0x80
2400a388:	d0b3      	beq.n	2400a2f2 <HAL_SAI_Abort+0x36>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a38a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
2400a38e:	2501      	movs	r5, #1
  hsai->Instance->IMR = 0;
2400a390:	6822      	ldr	r2, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400a396:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
2400a39a:	e7ab      	b.n	2400a2f4 <HAL_SAI_Abort+0x38>
  __HAL_LOCK(hsai);
2400a39c:	2502      	movs	r5, #2
}
2400a39e:	4628      	mov	r0, r5
2400a3a0:	bd70      	pop	{r4, r5, r6, pc}
2400a3a2:	bf00      	nop
2400a3a4:	20000750 	.word	0x20000750
2400a3a8:	95cbec1b 	.word	0x95cbec1b

2400a3ac <HAL_SAI_Transmit_DMA>:
{
2400a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400a3b0:	460f      	mov	r7, r1
2400a3b2:	4604      	mov	r4, r0
2400a3b4:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
2400a3b6:	f7fb fb55 	bl	24005a64 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
2400a3ba:	2f00      	cmp	r7, #0
2400a3bc:	d061      	beq.n	2400a482 <HAL_SAI_Transmit_DMA+0xd6>
2400a3be:	fab5 f885 	clz	r8, r5
2400a3c2:	ea4f 1858 	mov.w	r8, r8, lsr #5
2400a3c6:	2d00      	cmp	r5, #0
2400a3c8:	d05b      	beq.n	2400a482 <HAL_SAI_Transmit_DMA+0xd6>
  if (hsai->State == HAL_SAI_STATE_READY)
2400a3ca:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400a3ce:	2b01      	cmp	r3, #1
2400a3d0:	fa5f f983 	uxtb.w	r9, r3
2400a3d4:	d150      	bne.n	2400a478 <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_LOCK(hsai);
2400a3d6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400a3da:	2b01      	cmp	r3, #1
2400a3dc:	d04c      	beq.n	2400a478 <HAL_SAI_Transmit_DMA+0xcc>
    hsai->XferSize = Size;
2400a3de:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a3e0:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
2400a3e4:	4606      	mov	r6, r0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a3e6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    hsai->XferSize = Size;
2400a3ea:	f365 030f 	bfi	r3, r5, #0, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a3ee:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hsai);
2400a3f0:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a3f4:	4639      	mov	r1, r7
    hsai->XferSize = Size;
2400a3f6:	f365 431f 	bfi	r3, r5, #16, #16
    hsai->pBuffPtr = pData;
2400a3fa:	67a7      	str	r7, [r4, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a3fc:	321c      	adds	r2, #28
    hsai->XferSize = Size;
2400a3fe:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a400:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2400a402:	2512      	movs	r5, #18
2400a404:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a408:	4d2e      	ldr	r5, [pc, #184]	; (2400a4c4 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferAbortCallback = NULL;
2400a40a:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400a40e:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2400a410:	4d2d      	ldr	r5, [pc, #180]	; (2400a4c8 <HAL_SAI_Transmit_DMA+0x11c>)
2400a412:	63c5      	str	r5, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400a414:	4d2d      	ldr	r5, [pc, #180]	; (2400a4cc <HAL_SAI_Transmit_DMA+0x120>)
2400a416:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400a418:	f7fb ff6c 	bl	240062f4 <HAL_DMA_Start_IT>
2400a41c:	2800      	cmp	r0, #0
2400a41e:	d13e      	bne.n	2400a49e <HAL_SAI_Transmit_DMA+0xf2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a420:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a422:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a424:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a426:	d031      	beq.n	2400a48c <HAL_SAI_Transmit_DMA+0xe0>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a428:	2105      	movs	r1, #5
2400a42a:	2261      	movs	r2, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a42c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400a42e:	2b01      	cmp	r3, #1
2400a430:	bf98      	it	ls
2400a432:	4611      	movls	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a434:	6822      	ldr	r2, [r4, #0]
2400a436:	6913      	ldr	r3, [r2, #16]
2400a438:	430b      	orrs	r3, r1
2400a43a:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400a43c:	6813      	ldr	r3, [r2, #0]
2400a43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a442:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400a444:	e006      	b.n	2400a454 <HAL_SAI_Transmit_DMA+0xa8>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400a446:	f7fb fb0d 	bl	24005a64 <HAL_GetTick>
2400a44a:	1b83      	subs	r3, r0, r6
2400a44c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2400a450:	d82a      	bhi.n	2400a4a8 <HAL_SAI_Transmit_DMA+0xfc>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2400a452:	6822      	ldr	r2, [r4, #0]
2400a454:	6955      	ldr	r5, [r2, #20]
2400a456:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400a45a:	d0f4      	beq.n	2400a446 <HAL_SAI_Transmit_DMA+0x9a>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400a45c:	6813      	ldr	r3, [r2, #0]
2400a45e:	03db      	lsls	r3, r3, #15
2400a460:	d403      	bmi.n	2400a46a <HAL_SAI_Transmit_DMA+0xbe>
      __HAL_SAI_ENABLE(hsai);
2400a462:	6813      	ldr	r3, [r2, #0]
2400a464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400a468:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
2400a46a:	2300      	movs	r3, #0
    return HAL_OK;
2400a46c:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
2400a46e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a472:	4648      	mov	r0, r9
2400a474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
2400a478:	f04f 0902 	mov.w	r9, #2
}
2400a47c:	4648      	mov	r0, r9
2400a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
2400a482:	f04f 0901 	mov.w	r9, #1
}
2400a486:	4648      	mov	r0, r9
2400a488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a48c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a490:	2a01      	cmp	r2, #1
2400a492:	bf0b      	itete	eq
2400a494:	2115      	moveq	r1, #21
2400a496:	2105      	movne	r1, #5
2400a498:	2271      	moveq	r2, #113	; 0x71
2400a49a:	2261      	movne	r2, #97	; 0x61
2400a49c:	e7c6      	b.n	2400a42c <HAL_SAI_Transmit_DMA+0x80>
}
2400a49e:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
2400a4a0:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
2400a4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a4a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
2400a4ac:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
2400a4b0:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
2400a4b8:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a4ba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
2400a4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400a4c2:	bf00      	nop
2400a4c4:	2400a605 	.word	0x2400a605
2400a4c8:	2400a5a1 	.word	0x2400a5a1
2400a4cc:	2400a689 	.word	0x2400a689

2400a4d0 <HAL_SAI_Receive_DMA>:
{
2400a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
2400a4d2:	2900      	cmp	r1, #0
2400a4d4:	d04e      	beq.n	2400a574 <HAL_SAI_Receive_DMA+0xa4>
2400a4d6:	fab2 f582 	clz	r5, r2
2400a4da:	4613      	mov	r3, r2
2400a4dc:	096d      	lsrs	r5, r5, #5
2400a4de:	2a00      	cmp	r2, #0
2400a4e0:	d048      	beq.n	2400a574 <HAL_SAI_Receive_DMA+0xa4>
  if (hsai->State == HAL_SAI_STATE_READY)
2400a4e2:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
2400a4e6:	4604      	mov	r4, r0
2400a4e8:	2a01      	cmp	r2, #1
2400a4ea:	b2d6      	uxtb	r6, r2
2400a4ec:	d13f      	bne.n	2400a56e <HAL_SAI_Receive_DMA+0x9e>
    __HAL_LOCK(hsai);
2400a4ee:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
2400a4f2:	2a01      	cmp	r2, #1
2400a4f4:	d03b      	beq.n	2400a56e <HAL_SAI_Receive_DMA+0x9e>
    hsai->pBuffPtr = pData;
2400a4f6:	6781      	str	r1, [r0, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400a4f8:	460a      	mov	r2, r1
    hsai->XferSize = Size;
2400a4fa:	4629      	mov	r1, r5
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400a4fc:	2722      	movs	r7, #34	; 0x22
    __HAL_LOCK(hsai);
2400a4fe:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->XferSize = Size;
2400a502:	f363 010f 	bfi	r1, r3, #0, #16
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400a506:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
2400a50a:	f363 411f 	bfi	r1, r3, #16, #16
2400a50e:	67c1      	str	r1, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400a510:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400a514:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400a518:	4f1e      	ldr	r7, [pc, #120]	; (2400a594 <HAL_SAI_Receive_DMA+0xc4>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400a51a:	6821      	ldr	r1, [r4, #0]
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400a51c:	6407      	str	r7, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400a51e:	4f1e      	ldr	r7, [pc, #120]	; (2400a598 <HAL_SAI_Receive_DMA+0xc8>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400a520:	311c      	adds	r1, #28
    hsai->hdmarx->XferAbortCallback = NULL;
2400a522:	6505      	str	r5, [r0, #80]	; 0x50
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
2400a524:	63c7      	str	r7, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
2400a526:	4f1d      	ldr	r7, [pc, #116]	; (2400a59c <HAL_SAI_Receive_DMA+0xcc>)
2400a528:	64c7      	str	r7, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400a52a:	f7fb fee3 	bl	240062f4 <HAL_DMA_Start_IT>
2400a52e:	bb20      	cbnz	r0, 2400a57a <HAL_SAI_Receive_DMA+0xaa>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a530:	6c63      	ldr	r3, [r4, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a532:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a534:	2b08      	cmp	r3, #8
2400a536:	d024      	beq.n	2400a582 <HAL_SAI_Receive_DMA+0xb2>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a538:	2105      	movs	r1, #5
2400a53a:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a53c:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a53e:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400a540:	2a01      	cmp	r2, #1
2400a542:	bf98      	it	ls
2400a544:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a546:	691a      	ldr	r2, [r3, #16]
2400a548:	430a      	orrs	r2, r1
2400a54a:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400a54c:	681a      	ldr	r2, [r3, #0]
2400a54e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400a552:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400a554:	681a      	ldr	r2, [r3, #0]
2400a556:	03d2      	lsls	r2, r2, #15
2400a558:	d403      	bmi.n	2400a562 <HAL_SAI_Receive_DMA+0x92>
      __HAL_SAI_ENABLE(hsai);
2400a55a:	681a      	ldr	r2, [r3, #0]
2400a55c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400a560:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400a562:	2300      	movs	r3, #0
    return HAL_OK;
2400a564:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400a566:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a56a:	4630      	mov	r0, r6
2400a56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
2400a56e:	2602      	movs	r6, #2
}
2400a570:	4630      	mov	r0, r6
2400a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
2400a574:	2601      	movs	r6, #1
}
2400a576:	4630      	mov	r0, r6
2400a578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400a57a:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
2400a57c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
2400a580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a582:	f022 0302 	bic.w	r3, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a586:	2b01      	cmp	r3, #1
2400a588:	bf0b      	itete	eq
2400a58a:	2115      	moveq	r1, #21
2400a58c:	2105      	movne	r1, #5
2400a58e:	2071      	moveq	r0, #113	; 0x71
2400a590:	2061      	movne	r0, #97	; 0x61
2400a592:	e7d3      	b.n	2400a53c <HAL_SAI_Receive_DMA+0x6c>
2400a594:	2400a67d 	.word	0x2400a67d
2400a598:	2400a615 	.word	0x2400a615
2400a59c:	2400a689 	.word	0x2400a689

2400a5a0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400a5a0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a5a2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a5a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a5aa:	d01b      	beq.n	2400a5e4 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a5ac:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
2400a5ae:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a5b4:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5b6:	2908      	cmp	r1, #8
    hsai->XferCount = 0;
2400a5b8:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a5bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2400a5c0:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a5c2:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5c4:	d011      	beq.n	2400a5ea <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a5c6:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400a5ca:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a5ce:	3a02      	subs	r2, #2
2400a5d0:	2a01      	cmp	r2, #1
2400a5d2:	bf98      	it	ls
2400a5d4:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a5d6:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400a5d8:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a5dc:	400a      	ands	r2, r1
2400a5de:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400a5e0:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400a5e4:	f029 fbcc 	bl	24033d80 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
2400a5e8:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a5ea:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a5ee:	2901      	cmp	r1, #1
2400a5f0:	bf0b      	itete	eq
2400a5f2:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400a5f6:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400a5fa:	f06f 0115 	mvneq.w	r1, #21
2400a5fe:	f06f 0105 	mvnne.w	r1, #5
2400a602:	e7e4      	b.n	2400a5ce <SAI_DMATxCplt+0x2e>

2400a604 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2400a604:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2400a606:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
2400a608:	f029 fbc2 	bl	24033d90 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400a60c:	bd08      	pop	{r3, pc}
2400a60e:	bf00      	nop

2400a610 <HAL_SAI_RxCpltCallback>:
2400a610:	4770      	bx	lr
2400a612:	bf00      	nop

2400a614 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400a614:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a616:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a618:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a61e:	d01b      	beq.n	2400a658 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a620:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
2400a622:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a626:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a628:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a62a:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a62c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2400a630:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a632:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0;
2400a634:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a638:	d011      	beq.n	2400a65e <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a63a:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400a63e:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a642:	3a02      	subs	r2, #2
2400a644:	2a01      	cmp	r2, #1
2400a646:	bf98      	it	ls
2400a648:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a64a:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400a64c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a650:	400a      	ands	r2, r1
2400a652:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400a654:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
2400a658:	f7ff ffda 	bl	2400a610 <HAL_SAI_RxCpltCallback>
#endif
}
2400a65c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a65e:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a662:	2901      	cmp	r1, #1
2400a664:	bf0b      	itete	eq
2400a666:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400a66a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400a66e:	f06f 0115 	mvneq.w	r1, #21
2400a672:	f06f 0105 	mvnne.w	r1, #5
2400a676:	e7e4      	b.n	2400a642 <SAI_DMARxCplt+0x2e>

2400a678 <HAL_SAI_RxHalfCpltCallback>:
2400a678:	4770      	bx	lr
2400a67a:	bf00      	nop

2400a67c <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400a67c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2400a67e:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
2400a680:	f7ff fffa 	bl	2400a678 <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400a684:	bd08      	pop	{r3, pc}
2400a686:	bf00      	nop

2400a688 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400a688:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a68a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400a68c:	f7fc fd5c 	bl	24007148 <HAL_DMA_GetError>
2400a690:	2802      	cmp	r0, #2
2400a692:	d023      	beq.n	2400a6dc <SAI_DMAError+0x54>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a694:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a698:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a69a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a69e:	4b13      	ldr	r3, [pc, #76]	; (2400a6ec <SAI_DMAError+0x64>)
2400a6a0:	4813      	ldr	r0, [pc, #76]	; (2400a6f0 <SAI_DMAError+0x68>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a6a2:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6a6:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a6a8:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6aa:	fba0 0303 	umull	r0, r3, r0, r3
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a6ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6b2:	0b1b      	lsrs	r3, r3, #12
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a6b4:	600a      	str	r2, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
2400a6b6:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a6b8:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400a6ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2400a6be:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400a6c0:	b16b      	cbz	r3, 2400a6de <SAI_DMAError+0x56>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a6c2:	680a      	ldr	r2, [r1, #0]
    count--;
2400a6c4:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a6c6:	03d2      	lsls	r2, r2, #15
2400a6c8:	d4fa      	bmi.n	2400a6c0 <SAI_DMAError+0x38>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400a6ca:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400a6cc:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400a6ce:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400a6d0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400a6d4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400a6d8:	f7f9 f932 	bl	24003940 <HAL_SAI_ErrorCallback>
#endif
  }
}
2400a6dc:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a6de:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a6e6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400a6ea:	e7ee      	b.n	2400a6ca <SAI_DMAError+0x42>
2400a6ec:	20000750 	.word	0x20000750
2400a6f0:	95cbec1b 	.word	0x95cbec1b

2400a6f4 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
2400a6f4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
2400a6f8:	b903      	cbnz	r3, 2400a6fc <HAL_SAI_IRQHandler+0x8>
2400a6fa:	4770      	bx	lr
    uint32_t itflags = hsai->Instance->SR;
2400a6fc:	6803      	ldr	r3, [r0, #0]
2400a6fe:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
2400a700:	6919      	ldr	r1, [r3, #16]
{
2400a702:	b570      	push	{r4, r5, r6, lr}
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2400a704:	0716      	lsls	r6, r2, #28
2400a706:	4604      	mov	r4, r0
    uint32_t cr1config = hsai->Instance->CR1;
2400a708:	681d      	ldr	r5, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2400a70a:	d506      	bpl.n	2400a71a <HAL_SAI_IRQHandler+0x26>
2400a70c:	070e      	lsls	r6, r1, #28
2400a70e:	d504      	bpl.n	2400a71a <HAL_SAI_IRQHandler+0x26>
      hsai->InterruptServiceRoutine(hsai);
2400a710:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
}
2400a714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
2400a718:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2400a71a:	07d6      	lsls	r6, r2, #31
2400a71c:	d514      	bpl.n	2400a748 <HAL_SAI_IRQHandler+0x54>
2400a71e:	f011 0c01 	ands.w	ip, r1, #1
2400a722:	d011      	beq.n	2400a748 <HAL_SAI_IRQHandler+0x54>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2400a724:	2201      	movs	r2, #1
      HAL_SAI_ErrorCallback(hsai);
2400a726:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2400a728:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2400a72a:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
      hsai->ErrorCode |= tmperror;
2400a72e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2400a732:	2a22      	cmp	r2, #34	; 0x22
2400a734:	bf18      	it	ne
2400a736:	f04f 0c02 	movne.w	ip, #2
      hsai->ErrorCode |= tmperror;
2400a73a:	ea43 030c 	orr.w	r3, r3, ip
2400a73e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
2400a742:	f7f9 f8fd 	bl	24003940 <HAL_SAI_ErrorCallback>
}
2400a746:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
2400a748:	0790      	lsls	r0, r2, #30
2400a74a:	d50a      	bpl.n	2400a762 <HAL_SAI_IRQHandler+0x6e>
2400a74c:	078e      	lsls	r6, r1, #30
2400a74e:	d508      	bpl.n	2400a762 <HAL_SAI_IRQHandler+0x6e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2400a750:	2102      	movs	r1, #2
      if (hsai->mutecallback != NULL)
2400a752:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2400a756:	6199      	str	r1, [r3, #24]
      if (hsai->mutecallback != NULL)
2400a758:	2a00      	cmp	r2, #0
2400a75a:	d0f4      	beq.n	2400a746 <HAL_SAI_IRQHandler+0x52>
}
2400a75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
2400a760:	4710      	bx	r2
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2400a762:	0690      	lsls	r0, r2, #26
2400a764:	d530      	bpl.n	2400a7c8 <HAL_SAI_IRQHandler+0xd4>
2400a766:	068e      	lsls	r6, r1, #26
2400a768:	d52e      	bpl.n	2400a7c8 <HAL_SAI_IRQHandler+0xd4>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2400a76a:	2220      	movs	r2, #32
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a76c:	03ad      	lsls	r5, r5, #14
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2400a76e:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
2400a770:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a774:	f043 0304 	orr.w	r3, r3, #4
2400a778:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a77c:	d532      	bpl.n	2400a7e4 <HAL_SAI_IRQHandler+0xf0>
        if (hsai->hdmatx != NULL)
2400a77e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400a782:	b168      	cbz	r0, 2400a7a0 <HAL_SAI_IRQHandler+0xac>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2400a784:	4b30      	ldr	r3, [pc, #192]	; (2400a848 <HAL_SAI_IRQHandler+0x154>)
2400a786:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2400a788:	f7fc f8c4 	bl	24006914 <HAL_DMA_Abort_IT>
2400a78c:	b140      	cbz	r0, 2400a7a0 <HAL_SAI_IRQHandler+0xac>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a78e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400a792:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400a798:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400a79c:	f7f9 f8d0 	bl	24003940 <HAL_SAI_ErrorCallback>
        if (hsai->hdmarx != NULL)
2400a7a0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
2400a7a4:	2800      	cmp	r0, #0
2400a7a6:	d0ce      	beq.n	2400a746 <HAL_SAI_IRQHandler+0x52>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2400a7a8:	4b27      	ldr	r3, [pc, #156]	; (2400a848 <HAL_SAI_IRQHandler+0x154>)
2400a7aa:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2400a7ac:	f7fc f8b2 	bl	24006914 <HAL_DMA_Abort_IT>
2400a7b0:	2800      	cmp	r0, #0
2400a7b2:	d0c8      	beq.n	2400a746 <HAL_SAI_IRQHandler+0x52>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a7b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400a7b8:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400a7be:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400a7c2:	f7f9 f8bd 	bl	24003940 <HAL_SAI_ErrorCallback>
}
2400a7c6:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2400a7c8:	0650      	lsls	r0, r2, #25
2400a7ca:	d512      	bpl.n	2400a7f2 <HAL_SAI_IRQHandler+0xfe>
2400a7cc:	064e      	lsls	r6, r1, #25
2400a7ce:	d510      	bpl.n	2400a7f2 <HAL_SAI_IRQHandler+0xfe>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2400a7d0:	2240      	movs	r2, #64	; 0x40
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a7d2:	03ad      	lsls	r5, r5, #14
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2400a7d4:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
2400a7d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a7da:	f043 0308 	orr.w	r3, r3, #8
2400a7de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a7e2:	d4cc      	bmi.n	2400a77e <HAL_SAI_IRQHandler+0x8a>
        (void) HAL_SAI_Abort(hsai);
2400a7e4:	4620      	mov	r0, r4
2400a7e6:	f7ff fd69 	bl	2400a2bc <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
2400a7ea:	4620      	mov	r0, r4
2400a7ec:	f7f9 f8a8 	bl	24003940 <HAL_SAI_ErrorCallback>
}
2400a7f0:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2400a7f2:	0750      	lsls	r0, r2, #29
2400a7f4:	d519      	bpl.n	2400a82a <HAL_SAI_IRQHandler+0x136>
2400a7f6:	074e      	lsls	r6, r1, #29
2400a7f8:	d517      	bpl.n	2400a82a <HAL_SAI_IRQHandler+0x136>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2400a7fa:	2204      	movs	r2, #4
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a7fc:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2400a800:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
2400a802:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
2400a806:	f042 0220 	orr.w	r2, r2, #32
2400a80a:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2400a80e:	d1b6      	bne.n	2400a77e <HAL_SAI_IRQHandler+0x8a>
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400a810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        hsai->State = HAL_SAI_STATE_READY;
2400a814:	2201      	movs	r2, #1
        hsai->Instance->IMR = 0U;
2400a816:	611d      	str	r5, [r3, #16]
        HAL_SAI_ErrorCallback(hsai);
2400a818:	4620      	mov	r0, r4
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400a81a:	6199      	str	r1, [r3, #24]
        hsai->State = HAL_SAI_STATE_READY;
2400a81c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
2400a820:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
2400a824:	f7f9 f88c 	bl	24003940 <HAL_SAI_ErrorCallback>
}
2400a828:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
2400a82a:	06d0      	lsls	r0, r2, #27
2400a82c:	d58b      	bpl.n	2400a746 <HAL_SAI_IRQHandler+0x52>
2400a82e:	06ca      	lsls	r2, r1, #27
2400a830:	d589      	bpl.n	2400a746 <HAL_SAI_IRQHandler+0x52>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2400a832:	2210      	movs	r2, #16
      HAL_SAI_ErrorCallback(hsai);
2400a834:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2400a836:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
2400a838:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a83c:	4313      	orrs	r3, r2
2400a83e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
2400a842:	f7f9 f87d 	bl	24003940 <HAL_SAI_ErrorCallback>
}
2400a846:	bd70      	pop	{r4, r5, r6, pc}
2400a848:	2400a84d 	.word	0x2400a84d

2400a84c <SAI_DMAAbort>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a84c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400a84e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a852:	6802      	ldr	r2, [r0, #0]
2400a854:	6813      	ldr	r3, [r2, #0]
{
2400a856:	b510      	push	{r4, lr}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a858:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  hsai->Instance->IMR = 0U;
2400a85c:	2400      	movs	r4, #0
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a85e:	6013      	str	r3, [r2, #0]
  hsai->Instance->IMR = 0U;
2400a860:	6114      	str	r4, [r2, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400a862:	6191      	str	r1, [r2, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
2400a864:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
2400a868:	2b20      	cmp	r3, #32
2400a86a:	d013      	beq.n	2400a894 <SAI_DMAAbort+0x48>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a86c:	4b11      	ldr	r3, [pc, #68]	; (2400a8b4 <SAI_DMAAbort+0x68>)
2400a86e:	4c12      	ldr	r4, [pc, #72]	; (2400a8b8 <SAI_DMAAbort+0x6c>)
2400a870:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
2400a872:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a874:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
2400a878:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a87c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400a87e:	6011      	str	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a880:	009b      	lsls	r3, r3, #2
    if (count == 0U)
2400a882:	b183      	cbz	r3, 2400a8a6 <SAI_DMAAbort+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a884:	6811      	ldr	r1, [r2, #0]
    count--;
2400a886:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a888:	03c9      	lsls	r1, r1, #15
2400a88a:	d4fa      	bmi.n	2400a882 <SAI_DMAAbort+0x36>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2400a88c:	6853      	ldr	r3, [r2, #4]
2400a88e:	f043 0308 	orr.w	r3, r3, #8
2400a892:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
2400a894:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
2400a896:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400a898:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
  hsai->XferCount = 0U;
2400a89c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
2400a8a0:	f7f9 f84e 	bl	24003940 <HAL_SAI_ErrorCallback>
#endif
}
2400a8a4:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a8a6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
2400a8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a8ae:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      break;
2400a8b2:	e7eb      	b.n	2400a88c <SAI_DMAAbort+0x40>
2400a8b4:	20000750 	.word	0x20000750
2400a8b8:	95cbec1b 	.word	0x95cbec1b

2400a8bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
2400a8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400a8c0:	4605      	mov	r5, r0
2400a8c2:	b086      	sub	sp, #24
2400a8c4:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400a8c6:	f7fb f8cd 	bl	24005a64 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a8ca:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400a8cc:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a8ce:	6828      	ldr	r0, [r5, #0]
2400a8d0:	f001 fe38 	bl	2400c544 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8d4:	4604      	mov	r4, r0
2400a8d6:	b118      	cbz	r0, 2400a8e0 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400a8d8:	4620      	mov	r0, r4
2400a8da:	b006      	add	sp, #24
2400a8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400a8e0:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a8e2:	6828      	ldr	r0, [r5, #0]
2400a8e4:	0409      	lsls	r1, r1, #16
2400a8e6:	f002 fb87 	bl	2400cff8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8ea:	4604      	mov	r4, r0
2400a8ec:	2800      	cmp	r0, #0
2400a8ee:	d1f3      	bne.n	2400a8d8 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a8f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a8f4:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a8f6:	4669      	mov	r1, sp
2400a8f8:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a8fa:	e9cd 2300 	strd	r2, r3, [sp]
2400a8fe:	2230      	movs	r2, #48	; 0x30
2400a900:	2302      	movs	r3, #2
2400a902:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400a906:	2200      	movs	r2, #0
2400a908:	2301      	movs	r3, #1
2400a90a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a90e:	f001 fe03 	bl	2400c518 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400a912:	6828      	ldr	r0, [r5, #0]
2400a914:	f002 fcf6 	bl	2400d304 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a918:	4604      	mov	r4, r0
2400a91a:	2800      	cmp	r0, #0
2400a91c:	d1dc      	bne.n	2400a8d8 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400a91e:	4682      	mov	sl, r0
2400a920:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a922:	f240 582a 	movw	r8, #1322	; 0x52a
2400a926:	e004      	b.n	2400a932 <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a928:	f7fb f89c 	bl	24005a64 <HAL_GetTick>
2400a92c:	1b83      	subs	r3, r0, r6
2400a92e:	3301      	adds	r3, #1
2400a930:	d024      	beq.n	2400a97c <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a932:	6828      	ldr	r0, [r5, #0]
2400a934:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a936:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a93a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a93c:	d10c      	bne.n	2400a958 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a93e:	0319      	lsls	r1, r3, #12
2400a940:	d4f2      	bmi.n	2400a928 <SD_FindSCR+0x6c>
2400a942:	2c00      	cmp	r4, #0
2400a944:	d1f0      	bne.n	2400a928 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400a946:	f001 fdcd 	bl	2400c4e4 <SDMMC_ReadFIFO>
2400a94a:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a94c:	6828      	ldr	r0, [r5, #0]
      index++;
2400a94e:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a950:	f001 fdc8 	bl	2400c4e4 <SDMMC_ReadFIFO>
2400a954:	4682      	mov	sl, r0
      index++;
2400a956:	e7e7      	b.n	2400a928 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a958:	071a      	lsls	r2, r3, #28
2400a95a:	d416      	bmi.n	2400a98a <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a95c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a95e:	079b      	lsls	r3, r3, #30
2400a960:	d40f      	bmi.n	2400a982 <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a962:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400a964:	f014 0420 	ands.w	r4, r4, #32
2400a968:	d113      	bne.n	2400a992 <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a96a:	fa9a f28a 	rev.w	r2, sl
2400a96e:	fa99 f389 	rev.w	r3, r9
2400a972:	490a      	ldr	r1, [pc, #40]	; (2400a99c <SD_FindSCR+0xe0>)
2400a974:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400a976:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400a97a:	e7ad      	b.n	2400a8d8 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400a97c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400a980:	e7aa      	b.n	2400a8d8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a982:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a984:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a986:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a988:	e7a6      	b.n	2400a8d8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a98a:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a98c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a98e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a990:	e7a2      	b.n	2400a8d8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a992:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400a994:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a996:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400a998:	e79e      	b.n	2400a8d8 <SD_FindSCR+0x1c>
2400a99a:	bf00      	nop
2400a99c:	18000f3a 	.word	0x18000f3a

2400a9a0 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400a9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2400a9a4:	4604      	mov	r4, r0
2400a9a6:	b097      	sub	sp, #92	; 0x5c
2400a9a8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
2400a9aa:	f7fb f85b 	bl	24005a64 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a9ae:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400a9b0:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a9b2:	6820      	ldr	r0, [r4, #0]
2400a9b4:	f001 fdac 	bl	2400c510 <SDMMC_GetResponse>
2400a9b8:	0182      	lsls	r2, r0, #6
2400a9ba:	d45b      	bmi.n	2400aa74 <HAL_SD_GetCardStatus.part.0+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400a9bc:	2140      	movs	r1, #64	; 0x40
2400a9be:	6820      	ldr	r0, [r4, #0]
2400a9c0:	f001 fdc0 	bl	2400c544 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a9c4:	4603      	mov	r3, r0
2400a9c6:	b1e0      	cbz	r0, 2400aa02 <HAL_SD_GetCardStatus.part.0+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400a9c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a9ca:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a9cc:	6820      	ldr	r0, [r4, #0]
2400a9ce:	4a5a      	ldr	r2, [pc, #360]	; (2400ab38 <HAL_SD_GetCardStatus.part.0+0x198>)
    hsd->State = HAL_SD_STATE_READY;
2400a9d0:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a9d2:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
2400a9d4:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
2400a9d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a9d8:	4313      	orrs	r3, r2
2400a9da:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a9dc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a9e4:	f001 fdae 	bl	2400c544 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a9e8:	b138      	cbz	r0, 2400a9fa <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
2400a9ea:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a9ec:	6822      	ldr	r2, [r4, #0]
2400a9ee:	4952      	ldr	r1, [pc, #328]	; (2400ab38 <HAL_SD_GetCardStatus.part.0+0x198>)
    status = HAL_ERROR;
2400a9f0:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a9f2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400a9f4:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a9f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a9fa:	4630      	mov	r0, r6
2400a9fc:	b017      	add	sp, #92	; 0x5c
2400a9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aa02:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400aa04:	6820      	ldr	r0, [r4, #0]
2400aa06:	0409      	lsls	r1, r1, #16
2400aa08:	f002 faf6 	bl	2400cff8 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa0c:	4603      	mov	r3, r0
2400aa0e:	2800      	cmp	r0, #0
2400aa10:	d1da      	bne.n	2400a9c8 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400aa12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400aa16:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400aa18:	4669      	mov	r1, sp
2400aa1a:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400aa1c:	e9cd 2300 	strd	r2, r3, [sp]
2400aa20:	2260      	movs	r2, #96	; 0x60
2400aa22:	2302      	movs	r3, #2
2400aa24:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400aa28:	2301      	movs	r3, #1
2400aa2a:	2200      	movs	r2, #0
2400aa2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400aa30:	f001 fd72 	bl	2400c518 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400aa34:	6820      	ldr	r0, [r4, #0]
2400aa36:	f002 fe89 	bl	2400d74c <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa3a:	4603      	mov	r3, r0
2400aa3c:	2800      	cmp	r0, #0
2400aa3e:	d1c3      	bne.n	2400a9c8 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
2400aa40:	ae06      	add	r6, sp, #24
2400aa42:	e004      	b.n	2400aa4e <HAL_SD_GetCardStatus.part.0+0xae>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400aa44:	f7fb f80e 	bl	24005a64 <HAL_GetTick>
2400aa48:	1bc0      	subs	r0, r0, r7
2400aa4a:	3001      	adds	r0, #1
2400aa4c:	d016      	beq.n	2400aa7c <HAL_SD_GetCardStatus.part.0+0xdc>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400aa4e:	6820      	ldr	r0, [r4, #0]
2400aa50:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aa52:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400aa56:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400aa58:	d113      	bne.n	2400aa82 <HAL_SD_GetCardStatus.part.0+0xe2>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400aa5a:	041b      	lsls	r3, r3, #16
2400aa5c:	d5f2      	bpl.n	2400aa44 <HAL_SD_GetCardStatus.part.0+0xa4>
2400aa5e:	f106 0820 	add.w	r8, r6, #32
2400aa62:	e000      	b.n	2400aa66 <HAL_SD_GetCardStatus.part.0+0xc6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400aa64:	6820      	ldr	r0, [r4, #0]
2400aa66:	f001 fd3d 	bl	2400c4e4 <SDMMC_ReadFIFO>
2400aa6a:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400aa6e:	4546      	cmp	r6, r8
2400aa70:	d1f8      	bne.n	2400aa64 <HAL_SD_GetCardStatus.part.0+0xc4>
2400aa72:	e7e7      	b.n	2400aa44 <HAL_SD_GetCardStatus.part.0+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aa74:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400aa76:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400aa7a:	e7a8      	b.n	2400a9ce <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
2400aa7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400aa80:	e7a4      	b.n	2400a9cc <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400aa82:	0719      	lsls	r1, r3, #28
2400aa84:	d451      	bmi.n	2400ab2a <HAL_SD_GetCardStatus.part.0+0x18a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400aa86:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aa88:	079a      	lsls	r2, r3, #30
2400aa8a:	d450      	bmi.n	2400ab2e <HAL_SD_GetCardStatus.part.0+0x18e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400aa8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aa8e:	069b      	lsls	r3, r3, #26
2400aa90:	d50a      	bpl.n	2400aaa8 <HAL_SD_GetCardStatus.part.0+0x108>
2400aa92:	e04e      	b.n	2400ab32 <HAL_SD_GetCardStatus.part.0+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400aa94:	f001 fd26 	bl	2400c4e4 <SDMMC_ReadFIFO>
2400aa98:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400aa9c:	f7fa ffe2 	bl	24005a64 <HAL_GetTick>
2400aaa0:	1bc0      	subs	r0, r0, r7
2400aaa2:	3001      	adds	r0, #1
2400aaa4:	d0ea      	beq.n	2400aa7c <HAL_SD_GetCardStatus.part.0+0xdc>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400aaa6:	6820      	ldr	r0, [r4, #0]
2400aaa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aaaa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
2400aaae:	d1f1      	bne.n	2400aa94 <HAL_SD_GetCardStatus.part.0+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400aab0:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
2400aab2:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400aab4:	4a21      	ldr	r2, [pc, #132]	; (2400ab3c <HAL_SD_GetCardStatus.part.0+0x19c>)
2400aab6:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400aab8:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400aaba:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400aabe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400aac2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400aac6:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400aaca:	fa5f f883 	uxtb.w	r8, r3
2400aace:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400aad2:	fa1f f982 	uxth.w	r9, r2
2400aad6:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400aad8:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400aadc:	f3c1 1881 	ubfx	r8, r1, #6, #2
2400aae0:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400aae4:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400aae8:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400aaec:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400aaf0:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400aaf2:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400aaf6:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400aafa:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400aafc:	f3cc 2207 	ubfx	r2, ip, #8, #8
2400ab00:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400ab02:	f3cc 5203 	ubfx	r2, ip, #20, #4
2400ab06:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400ab08:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400ab0c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400ab0e:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400ab10:	f3c3 2201 	ubfx	r2, r3, #8, #2
2400ab14:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ab16:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ab1a:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400ab1e:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400ab20:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400ab22:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
2400ab26:	74ab      	strb	r3, [r5, #18]
2400ab28:	e75a      	b.n	2400a9e0 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400ab2a:	2308      	movs	r3, #8
2400ab2c:	e74f      	b.n	2400a9ce <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400ab2e:	2302      	movs	r3, #2
2400ab30:	e74d      	b.n	2400a9ce <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
2400ab32:	2320      	movs	r3, #32
2400ab34:	e74b      	b.n	2400a9ce <HAL_SD_GetCardStatus.part.0+0x2e>
2400ab36:	bf00      	nop
2400ab38:	1fe00fff 	.word	0x1fe00fff
2400ab3c:	18000f3a 	.word	0x18000f3a

2400ab40 <HAL_SD_ReadBlocks>:
{
2400ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ab44:	460d      	mov	r5, r1
2400ab46:	b087      	sub	sp, #28
2400ab48:	4680      	mov	r8, r0
2400ab4a:	4614      	mov	r4, r2
2400ab4c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
2400ab4e:	f7fa ff89 	bl	24005a64 <HAL_GetTick>
  if (NULL == pData)
2400ab52:	2d00      	cmp	r5, #0
2400ab54:	f000 8099 	beq.w	2400ac8a <HAL_SD_ReadBlocks+0x14a>
  if (hsd->State == HAL_SD_STATE_READY)
2400ab58:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
2400ab5c:	2b01      	cmp	r3, #1
2400ab5e:	fa5f f983 	uxtb.w	r9, r3
2400ab62:	d17f      	bne.n	2400ac64 <HAL_SD_ReadBlocks+0x124>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ab64:	19e3      	adds	r3, r4, r7
2400ab66:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400ab6a:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ab6c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400ab6e:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ab72:	f200 8096 	bhi.w	2400aca2 <HAL_SD_ReadBlocks+0x162>
    hsd->State = HAL_SD_STATE_BUSY;
2400ab76:	2303      	movs	r3, #3
2400ab78:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
2400ab7a:	f8d8 0000 	ldr.w	r0, [r8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400ab7e:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
2400ab82:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400ab86:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
2400ab8a:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ab8c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400ab8e:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400ab90:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400ab94:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400ab98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400ab9c:	bf18      	it	ne
2400ab9e:	0264      	lslne	r4, r4, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400aba0:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400aba2:	027b      	lsls	r3, r7, #9
2400aba4:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400aba6:	2390      	movs	r3, #144	; 0x90
2400aba8:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400abac:	f001 fcb4 	bl	2400c518 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400abb0:	f8d8 0000 	ldr.w	r0, [r8]
    if (NumberOfBlocks > 1U)
2400abb4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400abb6:	68c3      	ldr	r3, [r0, #12]
2400abb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400abbc:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
2400abbe:	d95d      	bls.n	2400ac7c <HAL_SD_ReadBlocks+0x13c>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400abc0:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400abc2:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400abc6:	f001 fe09 	bl	2400c7dc <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400abca:	2800      	cmp	r0, #0
2400abcc:	d173      	bne.n	2400acb6 <HAL_SD_ReadBlocks+0x176>
    dataremaining = config.DataLength;
2400abce:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400abd2:	e005      	b.n	2400abe0 <HAL_SD_ReadBlocks+0xa0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400abd4:	f7fa ff46 	bl	24005a64 <HAL_GetTick>
2400abd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400abda:	1b80      	subs	r0, r0, r6
2400abdc:	4298      	cmp	r0, r3
2400abde:	d22b      	bcs.n	2400ac38 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400abe0:	f8d8 0000 	ldr.w	r0, [r8]
2400abe4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400abe6:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400abea:	d174      	bne.n	2400acd6 <HAL_SD_ReadBlocks+0x196>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400abec:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400abee:	041a      	lsls	r2, r3, #16
2400abf0:	d5f0      	bpl.n	2400abd4 <HAL_SD_ReadBlocks+0x94>
2400abf2:	f1bb 0f1f 	cmp.w	fp, #31
2400abf6:	d9ed      	bls.n	2400abd4 <HAL_SD_ReadBlocks+0x94>
2400abf8:	1d2c      	adds	r4, r5, #4
2400abfa:	f105 0a24 	add.w	sl, r5, #36	; 0x24
2400abfe:	e001      	b.n	2400ac04 <HAL_SD_ReadBlocks+0xc4>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400ac00:	f8d8 0000 	ldr.w	r0, [r8]
        for (count = 0U; count < 8U; count++)
2400ac04:	3404      	adds	r4, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
2400ac06:	f001 fc6d 	bl	2400c4e4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400ac0a:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400ac0c:	0c02      	lsrs	r2, r0, #16
        for (count = 0U; count < 8U; count++)
2400ac0e:	4554      	cmp	r4, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400ac10:	ea4f 6310 	mov.w	r3, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
2400ac14:	f804 0c08 	strb.w	r0, [r4, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400ac18:	f804 1c07 	strb.w	r1, [r4, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400ac1c:	f804 2c06 	strb.w	r2, [r4, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400ac20:	f804 3c05 	strb.w	r3, [r4, #-5]
        for (count = 0U; count < 8U; count++)
2400ac24:	d1ec      	bne.n	2400ac00 <HAL_SD_ReadBlocks+0xc0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400ac26:	f7fa ff1d 	bl	24005a64 <HAL_GetTick>
2400ac2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400ac2c:	1b80      	subs	r0, r0, r6
          tempbuff++;
2400ac2e:	3520      	adds	r5, #32
        dataremaining -= 32U;
2400ac30:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400ac34:	4298      	cmp	r0, r3
2400ac36:	d3d3      	bcc.n	2400abe0 <HAL_SD_ReadBlocks+0xa0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac38:	f8d8 3000 	ldr.w	r3, [r8]
        return HAL_TIMEOUT;
2400ac3c:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac40:	484d      	ldr	r0, [pc, #308]	; (2400ad78 <HAL_SD_ReadBlocks+0x238>)
        hsd->State = HAL_SD_STATE_READY;
2400ac42:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
2400ac44:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac46:	6398      	str	r0, [r3, #56]	; 0x38
}
2400ac48:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400ac4a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
2400ac4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400ac52:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400ac56:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400ac5a:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
}
2400ac5e:	b007      	add	sp, #28
2400ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400ac64:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    return HAL_ERROR;
2400ac68:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400ac6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400ac70:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
2400ac74:	4648      	mov	r0, r9
2400ac76:	b007      	add	sp, #28
2400ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400ac7c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400ac7e:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400ac80:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400ac84:	f001 fd04 	bl	2400c690 <SDMMC_CmdReadSingleBlock>
2400ac88:	e79f      	b.n	2400abca <HAL_SD_ReadBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ac8a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    return HAL_ERROR;
2400ac8e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ac92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400ac96:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ac98:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
2400ac9c:	b007      	add	sp, #28
2400ac9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400aca2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
}
2400aca6:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400aca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400acac:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
2400acb0:	b007      	add	sp, #28
2400acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400acb6:	f8d8 3000 	ldr.w	r3, [r8]
2400acba:	4a2f      	ldr	r2, [pc, #188]	; (2400ad78 <HAL_SD_ReadBlocks+0x238>)
2400acbc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400acbe:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400acc0:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
2400acc4:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400acc6:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400acc8:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400accc:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400acd0:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
          return HAL_ERROR;
2400acd4:	e7ce      	b.n	2400ac74 <HAL_SD_ReadBlocks+0x134>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400acd6:	68c3      	ldr	r3, [r0, #12]
2400acd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400acdc:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400acde:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ace0:	05db      	lsls	r3, r3, #23
2400ace2:	d50b      	bpl.n	2400acfc <HAL_SD_ReadBlocks+0x1bc>
2400ace4:	2f01      	cmp	r7, #1
2400ace6:	d909      	bls.n	2400acfc <HAL_SD_ReadBlocks+0x1bc>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400ace8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
2400acec:	2b03      	cmp	r3, #3
2400acee:	d005      	beq.n	2400acfc <HAL_SD_ReadBlocks+0x1bc>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400acf0:	f001 ff66 	bl	2400cbc0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400acf4:	2800      	cmp	r0, #0
2400acf6:	d1de      	bne.n	2400acb6 <HAL_SD_ReadBlocks+0x176>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400acf8:	f8d8 0000 	ldr.w	r0, [r8]
2400acfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400acfe:	f013 0308 	ands.w	r3, r3, #8
2400ad02:	d115      	bne.n	2400ad30 <HAL_SD_ReadBlocks+0x1f0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400ad04:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400ad06:	f012 0202 	ands.w	r2, r2, #2
2400ad0a:	d120      	bne.n	2400ad4e <HAL_SD_ReadBlocks+0x20e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400ad0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ad0e:	f013 0320 	ands.w	r3, r3, #32
2400ad12:	d02a      	beq.n	2400ad6a <HAL_SD_ReadBlocks+0x22a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad14:	4b18      	ldr	r3, [pc, #96]	; (2400ad78 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
2400ad16:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad18:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400ad1a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
2400ad1e:	f043 0320 	orr.w	r3, r3, #32
2400ad22:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400ad26:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ad2a:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
      return HAL_ERROR;
2400ad2e:	e7a1      	b.n	2400ac74 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad30:	4b11      	ldr	r3, [pc, #68]	; (2400ad78 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
2400ad32:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad34:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400ad36:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
2400ad3a:	f043 0308 	orr.w	r3, r3, #8
2400ad3e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400ad42:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400ad44:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ad48:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      return HAL_ERROR;
2400ad4c:	e792      	b.n	2400ac74 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad4e:	4a0a      	ldr	r2, [pc, #40]	; (2400ad78 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
2400ad50:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad52:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400ad54:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
2400ad58:	f042 0202 	orr.w	r2, r2, #2
2400ad5c:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400ad60:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400ad64:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      return HAL_ERROR;
2400ad68:	e784      	b.n	2400ac74 <HAL_SD_ReadBlocks+0x134>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ad6a:	4904      	ldr	r1, [pc, #16]	; (2400ad7c <HAL_SD_ReadBlocks+0x23c>)
    hsd->State = HAL_SD_STATE_READY;
2400ad6c:	2201      	movs	r2, #1
    return HAL_OK;
2400ad6e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400ad70:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400ad72:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    return HAL_OK;
2400ad76:	e77d      	b.n	2400ac74 <HAL_SD_ReadBlocks+0x134>
2400ad78:	1fe00fff 	.word	0x1fe00fff
2400ad7c:	18000f3a 	.word	0x18000f3a

2400ad80 <HAL_SD_WriteBlocks>:
{
2400ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ad84:	460d      	mov	r5, r1
2400ad86:	b089      	sub	sp, #36	; 0x24
2400ad88:	4604      	mov	r4, r0
2400ad8a:	4692      	mov	sl, r2
2400ad8c:	461f      	mov	r7, r3
2400ad8e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400ad92:	f7fa fe67 	bl	24005a64 <HAL_GetTick>
  if (NULL == pData)
2400ad96:	2d00      	cmp	r5, #0
2400ad98:	d079      	beq.n	2400ae8e <HAL_SD_WriteBlocks+0x10e>
  if (hsd->State == HAL_SD_STATE_READY)
2400ad9a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ad9e:	2b01      	cmp	r3, #1
2400ada0:	fa5f f983 	uxtb.w	r9, r3
2400ada4:	d164      	bne.n	2400ae70 <HAL_SD_WriteBlocks+0xf0>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400ada6:	eb0a 0307 	add.w	r3, sl, r7
2400adaa:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400adac:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400adae:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400adb0:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400adb2:	d876      	bhi.n	2400aea2 <HAL_SD_WriteBlocks+0x122>
    hsd->State = HAL_SD_STATE_BUSY;
2400adb4:	2303      	movs	r3, #3
2400adb6:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
2400adb8:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
2400adba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400adbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
2400adc0:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400adc2:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400adc4:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400adc6:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400adca:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400adce:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400add0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400add4:	bf18      	it	ne
2400add6:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400adda:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400addc:	027b      	lsls	r3, r7, #9
2400adde:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400ade0:	2390      	movs	r3, #144	; 0x90
2400ade2:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400ade4:	f001 fb98 	bl	2400c518 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400ade8:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
2400adea:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400adec:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400adee:	68c3      	ldr	r3, [r0, #12]
2400adf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400adf4:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
2400adf6:	d945      	bls.n	2400ae84 <HAL_SD_WriteBlocks+0x104>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400adf8:	2320      	movs	r3, #32
2400adfa:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400adfc:	f001 fe3a 	bl	2400ca74 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400ae00:	2800      	cmp	r0, #0
2400ae02:	d156      	bne.n	2400aeb2 <HAL_SD_WriteBlocks+0x132>
    dataremaining = config.DataLength;
2400ae04:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400ae08:	e004      	b.n	2400ae14 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400ae0a:	f7fa fe2b 	bl	24005a64 <HAL_GetTick>
2400ae0e:	1b80      	subs	r0, r0, r6
2400ae10:	4540      	cmp	r0, r8
2400ae12:	d21d      	bcs.n	2400ae50 <HAL_SD_WriteBlocks+0xd0>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400ae14:	6820      	ldr	r0, [r4, #0]
2400ae16:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ae18:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400ae1c:	d155      	bne.n	2400aeca <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400ae1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ae20:	045a      	lsls	r2, r3, #17
2400ae22:	d5f2      	bpl.n	2400ae0a <HAL_SD_WriteBlocks+0x8a>
2400ae24:	f1bb 0f1f 	cmp.w	fp, #31
2400ae28:	d9ef      	bls.n	2400ae0a <HAL_SD_WriteBlocks+0x8a>
2400ae2a:	f105 0a20 	add.w	sl, r5, #32
2400ae2e:	e000      	b.n	2400ae32 <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400ae30:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400ae32:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400ae36:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400ae38:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400ae3a:	f001 fb57 	bl	2400c4ec <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400ae3e:	4555      	cmp	r5, sl
2400ae40:	d1f6      	bne.n	2400ae30 <HAL_SD_WriteBlocks+0xb0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400ae42:	f7fa fe0f 	bl	24005a64 <HAL_GetTick>
2400ae46:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
2400ae48:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400ae4c:	4540      	cmp	r0, r8
2400ae4e:	d3e1      	bcc.n	2400ae14 <HAL_SD_WriteBlocks+0x94>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ae50:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
2400ae52:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ae56:	4840      	ldr	r0, [pc, #256]	; (2400af58 <HAL_SD_WriteBlocks+0x1d8>)
        hsd->State = HAL_SD_STATE_READY;
2400ae58:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
2400ae5a:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ae5c:	6388      	str	r0, [r1, #56]	; 0x38
}
2400ae5e:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
2400ae60:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400ae62:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400ae64:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400ae68:	62e3      	str	r3, [r4, #44]	; 0x2c
}
2400ae6a:	b009      	add	sp, #36	; 0x24
2400ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400ae70:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400ae72:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400ae76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400ae7a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ae7c:	4648      	mov	r0, r9
2400ae7e:	b009      	add	sp, #36	; 0x24
2400ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400ae84:	2310      	movs	r3, #16
2400ae86:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400ae88:	f001 fd4e 	bl	2400c928 <SDMMC_CmdWriteSingleBlock>
2400ae8c:	e7b8      	b.n	2400ae00 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ae8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400ae90:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ae94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400ae98:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ae9a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ae9c:	b009      	add	sp, #36	; 0x24
2400ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400aea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400aea4:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400aea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400aeaa:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aeac:	b009      	add	sp, #36	; 0x24
2400aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aeb2:	6823      	ldr	r3, [r4, #0]
2400aeb4:	4a28      	ldr	r2, [pc, #160]	; (2400af58 <HAL_SD_WriteBlocks+0x1d8>)
2400aeb6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400aeb8:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400aeba:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aebc:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400aebe:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400aec0:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400aec2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400aec6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400aec8:	e7d8      	b.n	2400ae7c <HAL_SD_WriteBlocks+0xfc>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400aeca:	68c3      	ldr	r3, [r0, #12]
2400aecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400aed0:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400aed2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aed4:	05db      	lsls	r3, r3, #23
2400aed6:	d509      	bpl.n	2400aeec <HAL_SD_WriteBlocks+0x16c>
2400aed8:	2f01      	cmp	r7, #1
2400aeda:	d907      	bls.n	2400aeec <HAL_SD_WriteBlocks+0x16c>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400aedc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400aede:	2b03      	cmp	r3, #3
2400aee0:	d004      	beq.n	2400aeec <HAL_SD_WriteBlocks+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400aee2:	f001 fe6d 	bl	2400cbc0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400aee6:	2800      	cmp	r0, #0
2400aee8:	d1e3      	bne.n	2400aeb2 <HAL_SD_WriteBlocks+0x132>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400aeea:	6820      	ldr	r0, [r4, #0]
2400aeec:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aeee:	f013 0308 	ands.w	r3, r3, #8
2400aef2:	d112      	bne.n	2400af1a <HAL_SD_WriteBlocks+0x19a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400aef4:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400aef6:	f012 0202 	ands.w	r2, r2, #2
2400aefa:	d11a      	bne.n	2400af32 <HAL_SD_WriteBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400aefc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aefe:	f013 0310 	ands.w	r3, r3, #16
2400af02:	d021      	beq.n	2400af48 <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af04:	4b14      	ldr	r3, [pc, #80]	; (2400af58 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400af06:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af08:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400af0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400af0c:	f043 0310 	orr.w	r3, r3, #16
2400af10:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400af12:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400af16:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400af18:	e7b0      	b.n	2400ae7c <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af1a:	4b0f      	ldr	r3, [pc, #60]	; (2400af58 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400af1c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af1e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400af20:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400af22:	f043 0308 	orr.w	r3, r3, #8
2400af26:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400af28:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400af2a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400af2e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400af30:	e7a4      	b.n	2400ae7c <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af32:	4a09      	ldr	r2, [pc, #36]	; (2400af58 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400af34:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400af36:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400af38:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400af3a:	f042 0202 	orr.w	r2, r2, #2
2400af3e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400af40:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400af44:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400af46:	e799      	b.n	2400ae7c <HAL_SD_WriteBlocks+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400af48:	4904      	ldr	r1, [pc, #16]	; (2400af5c <HAL_SD_WriteBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
2400af4a:	2201      	movs	r2, #1
    return HAL_OK;
2400af4c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400af4e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400af50:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400af54:	e792      	b.n	2400ae7c <HAL_SD_WriteBlocks+0xfc>
2400af56:	bf00      	nop
2400af58:	1fe00fff 	.word	0x1fe00fff
2400af5c:	18000f3a 	.word	0x18000f3a

2400af60 <HAL_SD_ErrorCallback>:
2400af60:	4770      	bx	lr
2400af62:	bf00      	nop

2400af64 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400af64:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
2400af66:	4603      	mov	r3, r0
2400af68:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400af6a:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400af6e:	0f94      	lsrs	r4, r2, #30
2400af70:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400af72:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400af76:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400af78:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400af7c:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400af7e:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400af80:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400af84:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400af86:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400af88:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400af8a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400af8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
2400af8e:	0d14      	lsrs	r4, r2, #20
2400af90:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400af92:	f3c2 4403 	ubfx	r4, r2, #16, #4
2400af96:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400af98:	f3c2 34c0 	ubfx	r4, r2, #15, #1
2400af9c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400af9e:	f3c2 3480 	ubfx	r4, r2, #14, #1
2400afa2:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400afa4:	f3c2 3440 	ubfx	r4, r2, #13, #1
2400afa8:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400afaa:	f3c2 3400 	ubfx	r4, r2, #12, #1
2400afae:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400afb0:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400afb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400afb4:	2800      	cmp	r0, #0
2400afb6:	d170      	bne.n	2400b09a <HAL_SD_GetCardCSD+0x136>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400afb8:	f640 74fc 	movw	r4, #4092	; 0xffc
2400afbc:	6e58      	ldr	r0, [r3, #100]	; 0x64
2400afbe:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400afc2:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400afc6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400afca:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400afcc:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400afd0:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400afd2:	f3c0 6402 	ubfx	r4, r0, #24, #3
2400afd6:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400afd8:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400afdc:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400afde:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400afe2:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400afe4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400afe6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400afe8:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400afea:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400afec:	f004 0407 	and.w	r4, r4, #7
2400aff0:	3402      	adds	r4, #2
2400aff2:	fa02 f404 	lsl.w	r4, r2, r4
2400aff6:	649c      	str	r4, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400aff8:	7a0a      	ldrb	r2, [r1, #8]
2400affa:	f002 0c0f 	and.w	ip, r2, #15
2400affe:	2201      	movs	r2, #1
2400b000:	fa02 f20c 	lsl.w	r2, r2, ip
2400b004:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400b006:	0a52      	lsrs	r2, r2, #9
2400b008:	fb04 f202 	mul.w	r2, r4, r2
    hsd->SdCard.LogBlockSize = 512U;
2400b00c:	f44f 7400 	mov.w	r4, #512	; 0x200
2400b010:	e9c3 2414 	strd	r2, r4, [r3, #80]	; 0x50
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400b014:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400b018:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400b01c:	f3c0 3c80 	ubfx	ip, r0, #14, #1
  pCSD->Reserved3 = 0;
2400b020:	2000      	movs	r0, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400b022:	f881 c019 	strb.w	ip, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400b026:	768c      	strb	r4, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400b028:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400b02a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400b02c:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400b02e:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400b032:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400b034:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400b038:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400b03a:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400b03e:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400b040:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400b044:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400b046:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400b04a:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400b04e:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
2400b052:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400b056:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400b05a:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400b05e:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400b062:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400b066:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400b06a:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400b06e:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400b072:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400b076:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400b07a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400b07e:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400b082:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400b086:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
2400b08a:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400b08c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400b090:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
2400b094:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b098:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400b09a:	2801      	cmp	r0, #1
2400b09c:	d110      	bne.n	2400b0c0 <HAL_SD_GetCardCSD+0x15c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400b09e:	0412      	lsls	r2, r2, #16
2400b0a0:	6e58      	ldr	r0, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
2400b0a2:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400b0a6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400b0aa:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
2400b0ae:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400b0b0:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400b0b2:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400b0b4:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400b0b6:	655c      	str	r4, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400b0b8:	0292      	lsls	r2, r2, #10
2400b0ba:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400b0bc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400b0be:	e7a9      	b.n	2400b014 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b0c0:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
2400b0c2:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b0c4:	4805      	ldr	r0, [pc, #20]	; (2400b0dc <HAL_SD_GetCardCSD+0x178>)
2400b0c6:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400b0c8:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b0ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400b0cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400b0d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b0d2:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400b0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b0da:	4770      	bx	lr
2400b0dc:	1fe00fff 	.word	0x1fe00fff

2400b0e0 <HAL_SD_InitCard>:
{
2400b0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400b0e2:	2200      	movs	r2, #0
{
2400b0e4:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400b0e6:	2300      	movs	r3, #0
{
2400b0e8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b0ea:	2100      	movs	r1, #0
2400b0ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400b0f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400b0f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b0f8:	f7fe fc22 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400b0fc:	b940      	cbnz	r0, 2400b110 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400b0fe:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400b100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400b104:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400b108:	6363      	str	r3, [r4, #52]	; 0x34
}
2400b10a:	4630      	mov	r0, r6
2400b10c:	b015      	add	sp, #84	; 0x54
2400b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400b110:	0a06      	lsrs	r6, r0, #8
2400b112:	4b8f      	ldr	r3, [pc, #572]	; (2400b350 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400b114:	aa07      	add	r2, sp, #28
2400b116:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400b118:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400b11c:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400b11e:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400b120:	9608      	str	r6, [sp, #32]
2400b122:	e892 0003 	ldmia.w	r2, {r0, r1}
2400b126:	e88d 0003 	stmia.w	sp, {r0, r1}
2400b12a:	cb0e      	ldmia	r3, {r1, r2, r3}
2400b12c:	6820      	ldr	r0, [r4, #0]
2400b12e:	f001 f9bd 	bl	2400c4ac <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400b132:	6820      	ldr	r0, [r4, #0]
2400b134:	f001 f9e0 	bl	2400c4f8 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400b138:	4b86      	ldr	r3, [pc, #536]	; (2400b354 <HAL_SD_InitCard+0x274>)
2400b13a:	429d      	cmp	r5, r3
2400b13c:	d902      	bls.n	2400b144 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400b13e:	0076      	lsls	r6, r6, #1
2400b140:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400b144:	4884      	ldr	r0, [pc, #528]	; (2400b358 <HAL_SD_InitCard+0x278>)
2400b146:	fbb0 f0f5 	udiv	r0, r0, r5
2400b14a:	3001      	adds	r0, #1
2400b14c:	f7fa fc90 	bl	24005a70 <HAL_Delay>
  __IO uint32_t count = 0U;
2400b150:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b152:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400b154:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b156:	f001 fee3 	bl	2400cf20 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b15a:	4605      	mov	r5, r0
2400b15c:	b140      	cbz	r0, 2400b170 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400b15e:	2601      	movs	r6, #1
2400b160:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400b164:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400b166:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b168:	431d      	orrs	r5, r3
2400b16a:	6365      	str	r5, [r4, #52]	; 0x34
}
2400b16c:	b015      	add	sp, #84	; 0x54
2400b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400b170:	6820      	ldr	r0, [r4, #0]
2400b172:	f001 ff01 	bl	2400cf78 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400b176:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400b17a:	d06c      	beq.n	2400b256 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400b17c:	2301      	movs	r3, #1
2400b17e:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400b180:	2100      	movs	r1, #0
2400b182:	6820      	ldr	r0, [r4, #0]
2400b184:	f001 ff38 	bl	2400cff8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b188:	bb08      	cbnz	r0, 2400b1ce <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400b18a:	9b03      	ldr	r3, [sp, #12]
2400b18c:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400b190:	42b3      	cmp	r3, r6
2400b192:	f200 80d6 	bhi.w	2400b342 <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400b196:	4f71      	ldr	r7, [pc, #452]	; (2400b35c <HAL_SD_InitCard+0x27c>)
2400b198:	e00b      	b.n	2400b1b2 <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b19a:	6820      	ldr	r0, [r4, #0]
2400b19c:	f001 f9b8 	bl	2400c510 <SDMMC_GetResponse>
    count++;
2400b1a0:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400b1a2:	2800      	cmp	r0, #0
    count++;
2400b1a4:	f103 0301 	add.w	r3, r3, #1
2400b1a8:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400b1aa:	9b03      	ldr	r3, [sp, #12]
2400b1ac:	db12      	blt.n	2400b1d4 <HAL_SD_InitCard+0xf4>
2400b1ae:	42b3      	cmp	r3, r6
2400b1b0:	d810      	bhi.n	2400b1d4 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400b1b2:	2100      	movs	r1, #0
2400b1b4:	6820      	ldr	r0, [r4, #0]
2400b1b6:	f001 ff1f 	bl	2400cff8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400b1ba:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400b1bc:	4605      	mov	r5, r0
2400b1be:	2800      	cmp	r0, #0
2400b1c0:	d1cd      	bne.n	2400b15e <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400b1c2:	6820      	ldr	r0, [r4, #0]
2400b1c4:	f001 ffbe 	bl	2400d144 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b1c8:	4601      	mov	r1, r0
2400b1ca:	2800      	cmp	r0, #0
2400b1cc:	d0e5      	beq.n	2400b19a <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b1ce:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400b1d2:	e7c4      	b.n	2400b15e <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400b1d4:	9a03      	ldr	r2, [sp, #12]
2400b1d6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400b1da:	429a      	cmp	r2, r3
2400b1dc:	f200 80ab 	bhi.w	2400b336 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400b1e0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
2400b1e4:	d043      	beq.n	2400b26e <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400b1e6:	2301      	movs	r3, #1
2400b1e8:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400b1ea:	2300      	movs	r3, #0
2400b1ec:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400b1f0:	f7fa fc38 	bl	24005a64 <HAL_GetTick>
2400b1f4:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400b1f6:	6820      	ldr	r0, [r4, #0]
2400b1f8:	f001 f986 	bl	2400c508 <SDMMC_GetPowerState>
2400b1fc:	2800      	cmp	r0, #0
2400b1fe:	d038      	beq.n	2400b272 <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b202:	2b03      	cmp	r3, #3
2400b204:	d140      	bne.n	2400b288 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400b206:	2104      	movs	r1, #4
2400b208:	6820      	ldr	r0, [r4, #0]
2400b20a:	f001 f981 	bl	2400c510 <SDMMC_GetResponse>
2400b20e:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400b210:	a909      	add	r1, sp, #36	; 0x24
2400b212:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400b214:	0d1b      	lsrs	r3, r3, #20
2400b216:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400b218:	f7ff fea4 	bl	2400af64 <HAL_SD_GetCardCSD>
2400b21c:	4606      	mov	r6, r0
2400b21e:	2800      	cmp	r0, #0
2400b220:	f040 808c 	bne.w	2400b33c <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400b224:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b226:	6820      	ldr	r0, [r4, #0]
2400b228:	0409      	lsls	r1, r1, #16
2400b22a:	f001 fdd3 	bl	2400cdd4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b22e:	bb10      	cbnz	r0, 2400b276 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b230:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b234:	6820      	ldr	r0, [r4, #0]
2400b236:	f001 f985 	bl	2400c544 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b23a:	2800      	cmp	r0, #0
2400b23c:	f43f af65 	beq.w	2400b10a <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b240:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400b242:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b244:	4946      	ldr	r1, [pc, #280]	; (2400b360 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
2400b246:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b248:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b24a:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400b24c:	4310      	orrs	r0, r2
2400b24e:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400b250:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400b254:	e759      	b.n	2400b10a <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400b256:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400b258:	6820      	ldr	r0, [r4, #0]
2400b25a:	f001 fe61 	bl	2400cf20 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b25e:	4605      	mov	r5, r0
2400b260:	2800      	cmp	r0, #0
2400b262:	f47f af7c 	bne.w	2400b15e <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400b266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400b268:	2b01      	cmp	r3, #1
2400b26a:	d18e      	bne.n	2400b18a <HAL_SD_InitCard+0xaa>
2400b26c:	e788      	b.n	2400b180 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
2400b26e:	63a0      	str	r0, [r4, #56]	; 0x38
2400b270:	e7bb      	b.n	2400b1ea <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400b272:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400b276:	2601      	movs	r6, #1
2400b278:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400b27c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b27e:	4318      	orrs	r0, r3
2400b280:	6360      	str	r0, [r4, #52]	; 0x34
}
2400b282:	4630      	mov	r0, r6
2400b284:	b015      	add	sp, #84	; 0x54
2400b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400b288:	6820      	ldr	r0, [r4, #0]
2400b28a:	f002 f8e3 	bl	2400d454 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b28e:	2800      	cmp	r0, #0
2400b290:	d1f1      	bne.n	2400b276 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b292:	4601      	mov	r1, r0
2400b294:	6820      	ldr	r0, [r4, #0]
2400b296:	f001 f93b 	bl	2400c510 <SDMMC_GetResponse>
2400b29a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b29c:	2104      	movs	r1, #4
2400b29e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b2a0:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b2a2:	f001 f935 	bl	2400c510 <SDMMC_GetResponse>
2400b2a6:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b2a8:	2108      	movs	r1, #8
2400b2aa:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b2ac:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b2ae:	f001 f92f 	bl	2400c510 <SDMMC_GetResponse>
2400b2b2:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b2b4:	210c      	movs	r1, #12
2400b2b6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b2b8:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b2ba:	f001 f929 	bl	2400c510 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b2be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b2c0:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b2c2:	2b03      	cmp	r3, #3
2400b2c4:	d09f      	beq.n	2400b206 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400b2c6:	f241 3687 	movw	r6, #4999	; 0x1387
2400b2ca:	e009      	b.n	2400b2e0 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400b2cc:	6820      	ldr	r0, [r4, #0]
2400b2ce:	f002 f93f 	bl	2400d550 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400b2d2:	2800      	cmp	r0, #0
2400b2d4:	d1cf      	bne.n	2400b276 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400b2d6:	f7fa fbc5 	bl	24005a64 <HAL_GetTick>
2400b2da:	1b43      	subs	r3, r0, r5
2400b2dc:	42b3      	cmp	r3, r6
2400b2de:	d827      	bhi.n	2400b330 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
2400b2e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400b2e4:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400b2e8:	2b00      	cmp	r3, #0
2400b2ea:	d0ef      	beq.n	2400b2cc <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b2ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400b2ee:	2a03      	cmp	r2, #3
2400b2f0:	d089      	beq.n	2400b206 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b2f2:	0419      	lsls	r1, r3, #16
2400b2f4:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400b2f6:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b2f8:	f002 f8ea 	bl	2400d4d0 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b2fc:	2800      	cmp	r0, #0
2400b2fe:	d1ba      	bne.n	2400b276 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b300:	4601      	mov	r1, r0
2400b302:	6820      	ldr	r0, [r4, #0]
2400b304:	f001 f904 	bl	2400c510 <SDMMC_GetResponse>
2400b308:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b30a:	2104      	movs	r1, #4
2400b30c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b30e:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b310:	f001 f8fe 	bl	2400c510 <SDMMC_GetResponse>
2400b314:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b316:	2108      	movs	r1, #8
2400b318:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400b31a:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b31c:	f001 f8f8 	bl	2400c510 <SDMMC_GetResponse>
2400b320:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b322:	210c      	movs	r1, #12
2400b324:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400b326:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400b328:	f001 f8f2 	bl	2400c510 <SDMMC_GetResponse>
2400b32c:	66a0      	str	r0, [r4, #104]	; 0x68
2400b32e:	e76a      	b.n	2400b206 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
2400b330:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400b334:	e79f      	b.n	2400b276 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400b336:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400b33a:	e710      	b.n	2400b15e <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b33c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400b340:	e799      	b.n	2400b276 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400b342:	9b03      	ldr	r3, [sp, #12]
2400b344:	42b3      	cmp	r3, r6
2400b346:	d8f6      	bhi.n	2400b336 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
2400b348:	2300      	movs	r3, #0
2400b34a:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400b34c:	e74d      	b.n	2400b1ea <HAL_SD_InitCard+0x10a>
2400b34e:	bf00      	nop
2400b350:	014f8b59 	.word	0x014f8b59
2400b354:	000c34ff 	.word	0x000c34ff
2400b358:	00012110 	.word	0x00012110
2400b35c:	c1100000 	.word	0xc1100000
2400b360:	1fe00fff 	.word	0x1fe00fff

2400b364 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400b364:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
2400b366:	b4f0      	push	{r4, r5, r6, r7}
2400b368:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	; 0x3c
2400b36c:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	; 0x44
2400b370:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	; 0x4c
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400b374:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b376:	61cb      	str	r3, [r1, #28]
2400b378:	6008      	str	r0, [r1, #0]
}
2400b37a:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400b37c:	e9c1 c701 	strd	ip, r7, [r1, #4]
2400b380:	e9c1 6503 	strd	r6, r5, [r1, #12]
2400b384:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
2400b388:	bcf0      	pop	{r4, r5, r6, r7}
2400b38a:	4770      	bx	lr

2400b38c <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
2400b38c:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b38e:	6b83      	ldr	r3, [r0, #56]	; 0x38
2400b390:	4293      	cmp	r3, r2
{
2400b392:	b530      	push	{r4, r5, lr}
2400b394:	4604      	mov	r4, r0
2400b396:	b089      	sub	sp, #36	; 0x24
2400b398:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400b39a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400b39e:	d034      	beq.n	2400b40a <HAL_SD_ConfigWideBusOperation+0x7e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400b3a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400b3a4:	d031      	beq.n	2400b40a <HAL_SD_ConfigWideBusOperation+0x7e>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400b3a6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b3aa:	f000 8086 	beq.w	2400b4ba <HAL_SD_ConfigWideBusOperation+0x12e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400b3ae:	2900      	cmp	r1, #0
2400b3b0:	d064      	beq.n	2400b47c <HAL_SD_ConfigWideBusOperation+0xf0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400b3b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b3b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400b3b8:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b3bc:	bb63      	cbnz	r3, 2400b418 <HAL_SD_ConfigWideBusOperation+0x8c>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400b3be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400b3c2:	2100      	movs	r1, #0
2400b3c4:	f7fe fabc 	bl	24009940 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400b3c8:	2800      	cmp	r0, #0
2400b3ca:	d03b      	beq.n	2400b444 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400b3cc:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b3ce:	4b56      	ldr	r3, [pc, #344]	; (2400b528 <HAL_SD_ConfigWideBusOperation+0x19c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400b3d0:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400b3d2:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400b3d4:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b3d6:	fba3 5300 	umull	r5, r3, r3, r0
2400b3da:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400b3dc:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b3de:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400b3e2:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b3e4:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400b3e8:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400b3ea:	d239      	bcs.n	2400b460 <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400b3ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b3ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400b3f2:	d035      	beq.n	2400b460 <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400b3f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400b3f8:	f000 8081 	beq.w	2400b4fe <HAL_SD_ConfigWideBusOperation+0x172>
        if (hsd->Init.ClockDiv == 0U)
2400b3fc:	bb4a      	cbnz	r2, 2400b452 <HAL_SD_ConfigWideBusOperation+0xc6>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
2400b3fe:	4b4b      	ldr	r3, [pc, #300]	; (2400b52c <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400b400:	4298      	cmp	r0, r3
2400b402:	f240 8086 	bls.w	2400b512 <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400b406:	9506      	str	r5, [sp, #24]
2400b408:	e02b      	b.n	2400b462 <HAL_SD_ConfigWideBusOperation+0xd6>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400b40a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b40c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400b410:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b412:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b414:	2b00      	cmp	r3, #0
2400b416:	d0d2      	beq.n	2400b3be <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b418:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
2400b41a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b41c:	4b44      	ldr	r3, [pc, #272]	; (2400b530 <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400b41e:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b420:	f44f 7100 	mov.w	r1, #512	; 0x200
2400b424:	f001 f88e 	bl	2400c544 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b428:	b130      	cbz	r0, 2400b438 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b42a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400b42c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400b42e:	4a40      	ldr	r2, [pc, #256]	; (2400b530 <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400b430:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400b432:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b434:	4318      	orrs	r0, r3
2400b436:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400b438:	2301      	movs	r3, #1
}
2400b43a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400b43c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400b440:	b009      	add	sp, #36	; 0x24
2400b442:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400b444:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400b446:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b448:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400b44a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400b44e:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400b450:	e7e6      	b.n	2400b420 <HAL_SD_ConfigWideBusOperation+0x94>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400b452:	0053      	lsls	r3, r2, #1
2400b454:	fbb0 f0f3 	udiv	r0, r0, r3
2400b458:	4b34      	ldr	r3, [pc, #208]	; (2400b52c <HAL_SD_ConfigWideBusOperation+0x1a0>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400b45a:	4298      	cmp	r0, r3
2400b45c:	bf88      	it	hi
2400b45e:	462a      	movhi	r2, r5
2400b460:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400b462:	aa05      	add	r2, sp, #20
2400b464:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400b466:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400b468:	e892 0003 	ldmia.w	r2, {r0, r1}
2400b46c:	e88d 0003 	stmia.w	sp, {r0, r1}
2400b470:	cb0e      	ldmia	r3, {r1, r2, r3}
2400b472:	6820      	ldr	r0, [r4, #0]
2400b474:	f001 f81a 	bl	2400c4ac <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400b478:	6820      	ldr	r0, [r4, #0]
2400b47a:	e7d1      	b.n	2400b420 <HAL_SD_ConfigWideBusOperation+0x94>
  uint32_t scr[2U] = {0UL, 0UL};
2400b47c:	2200      	movs	r2, #0
2400b47e:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b480:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400b482:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b486:	f001 f843 	bl	2400c510 <SDMMC_GetResponse>
2400b48a:	0182      	lsls	r2, r0, #6
2400b48c:	d434      	bmi.n	2400b4f8 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
2400b48e:	a902      	add	r1, sp, #8
2400b490:	4620      	mov	r0, r4
2400b492:	f7ff fa13 	bl	2400a8bc <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b496:	b960      	cbnz	r0, 2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400b498:	9b03      	ldr	r3, [sp, #12]
2400b49a:	03db      	lsls	r3, r3, #15
2400b49c:	d536      	bpl.n	2400b50c <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b49e:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b4a0:	6820      	ldr	r0, [r4, #0]
2400b4a2:	0409      	lsls	r1, r1, #16
2400b4a4:	f001 fda8 	bl	2400cff8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b4a8:	b918      	cbnz	r0, 2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400b4aa:	4601      	mov	r1, r0
2400b4ac:	6820      	ldr	r0, [r4, #0]
2400b4ae:	f001 fe83 	bl	2400d1b8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400b4b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b4b4:	4318      	orrs	r0, r3
2400b4b6:	6360      	str	r0, [r4, #52]	; 0x34
2400b4b8:	e7ab      	b.n	2400b412 <HAL_SD_ConfigWideBusOperation+0x86>
  uint32_t scr[2U] = {0UL, 0UL};
2400b4ba:	2200      	movs	r2, #0
2400b4bc:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b4be:	2100      	movs	r1, #0
2400b4c0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400b4c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400b4c6:	f001 f823 	bl	2400c510 <SDMMC_GetResponse>
2400b4ca:	0180      	lsls	r0, r0, #6
2400b4cc:	d414      	bmi.n	2400b4f8 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
2400b4ce:	a902      	add	r1, sp, #8
2400b4d0:	4620      	mov	r0, r4
2400b4d2:	f7ff f9f3 	bl	2400a8bc <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b4d6:	2800      	cmp	r0, #0
2400b4d8:	d1eb      	bne.n	2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400b4da:	9b03      	ldr	r3, [sp, #12]
2400b4dc:	0359      	lsls	r1, r3, #13
2400b4de:	d515      	bpl.n	2400b50c <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b4e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b4e2:	6820      	ldr	r0, [r4, #0]
2400b4e4:	0409      	lsls	r1, r1, #16
2400b4e6:	f001 fd87 	bl	2400cff8 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b4ea:	2800      	cmp	r0, #0
2400b4ec:	d1e1      	bne.n	2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400b4ee:	2102      	movs	r1, #2
2400b4f0:	6820      	ldr	r0, [r4, #0]
2400b4f2:	f001 fe61 	bl	2400d1b8 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400b4f6:	e7dc      	b.n	2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400b4f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b4fc:	e7d9      	b.n	2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
        if (hsd->Init.ClockDiv == 0U)
2400b4fe:	b95a      	cbnz	r2, 2400b518 <HAL_SD_ConfigWideBusOperation+0x18c>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400b500:	4a0c      	ldr	r2, [pc, #48]	; (2400b534 <HAL_SD_ConfigWideBusOperation+0x1a8>)
2400b502:	4290      	cmp	r0, r2
2400b504:	d905      	bls.n	2400b512 <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400b506:	0e5b      	lsrs	r3, r3, #25
2400b508:	9306      	str	r3, [sp, #24]
2400b50a:	e7aa      	b.n	2400b462 <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400b50c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400b510:	e7cf      	b.n	2400b4b2 <HAL_SD_ConfigWideBusOperation+0x126>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400b512:	2300      	movs	r3, #0
2400b514:	9306      	str	r3, [sp, #24]
2400b516:	e7a4      	b.n	2400b462 <HAL_SD_ConfigWideBusOperation+0xd6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400b518:	0051      	lsls	r1, r2, #1
2400b51a:	fbb0 f0f1 	udiv	r0, r0, r1
2400b51e:	4905      	ldr	r1, [pc, #20]	; (2400b534 <HAL_SD_ConfigWideBusOperation+0x1a8>)
2400b520:	4288      	cmp	r0, r1
2400b522:	d99d      	bls.n	2400b460 <HAL_SD_ConfigWideBusOperation+0xd4>
2400b524:	e7ef      	b.n	2400b506 <HAL_SD_ConfigWideBusOperation+0x17a>
2400b526:	bf00      	nop
2400b528:	55e63b89 	.word	0x55e63b89
2400b52c:	017d7840 	.word	0x017d7840
2400b530:	1fe00fff 	.word	0x1fe00fff
2400b534:	02faf080 	.word	0x02faf080

2400b538 <HAL_SD_Init>:
{
2400b538:	b5f0      	push	{r4, r5, r6, r7, lr}
2400b53a:	b087      	sub	sp, #28
  if (hsd == NULL)
2400b53c:	2800      	cmp	r0, #0
2400b53e:	d044      	beq.n	2400b5ca <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
2400b540:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400b544:	4604      	mov	r4, r0
2400b546:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400b54a:	2b00      	cmp	r3, #0
2400b54c:	d041      	beq.n	2400b5d2 <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400b54e:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400b550:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400b552:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400b556:	f7ff fdc3 	bl	2400b0e0 <HAL_SD_InitCard>
2400b55a:	2800      	cmp	r0, #0
2400b55c:	d135      	bne.n	2400b5ca <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400b55e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400b562:	2b03      	cmp	r3, #3
2400b564:	d031      	beq.n	2400b5ca <HAL_SD_Init+0x92>
2400b566:	a901      	add	r1, sp, #4
2400b568:	4620      	mov	r0, r4
2400b56a:	f7ff fa19 	bl	2400a9a0 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400b56e:	bb60      	cbnz	r0, 2400b5ca <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b570:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400b572:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b576:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400b578:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400b57c:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
2400b57e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b580:	d02b      	beq.n	2400b5da <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400b582:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400b584:	68e1      	ldr	r1, [r4, #12]
2400b586:	4620      	mov	r0, r4
2400b588:	f7ff ff00 	bl	2400b38c <HAL_SD_ConfigWideBusOperation>
2400b58c:	4606      	mov	r6, r0
2400b58e:	b9e0      	cbnz	r0, 2400b5ca <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
2400b590:	f7fa fa68 	bl	24005a64 <HAL_GetTick>
2400b594:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400b596:	e00c      	b.n	2400b5b2 <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b598:	6820      	ldr	r0, [r4, #0]
2400b59a:	4629      	mov	r1, r5
2400b59c:	f000 ffb8 	bl	2400c510 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400b5a0:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400b5a4:	2804      	cmp	r0, #4
2400b5a6:	d020      	beq.n	2400b5ea <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400b5a8:	f7fa fa5c 	bl	24005a64 <HAL_GetTick>
2400b5ac:	1bc3      	subs	r3, r0, r7
2400b5ae:	3301      	adds	r3, #1
2400b5b0:	d021      	beq.n	2400b5f6 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b5b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400b5b4:	6820      	ldr	r0, [r4, #0]
2400b5b6:	0409      	lsls	r1, r1, #16
2400b5b8:	f002 f822 	bl	2400d600 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b5bc:	4605      	mov	r5, r0
2400b5be:	2800      	cmp	r0, #0
2400b5c0:	d0ea      	beq.n	2400b598 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
2400b5c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b5c4:	4303      	orrs	r3, r0
2400b5c6:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400b5c8:	e7ee      	b.n	2400b5a8 <HAL_SD_Init+0x70>
    return HAL_ERROR;
2400b5ca:	2601      	movs	r6, #1
}
2400b5cc:	4630      	mov	r0, r6
2400b5ce:	b007      	add	sp, #28
2400b5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400b5d2:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400b5d4:	f7f9 fee6 	bl	240053a4 <HAL_SD_MspInit>
2400b5d8:	e7b9      	b.n	2400b54e <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400b5da:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400b5dc:	bf14      	ite	ne
2400b5de:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
2400b5e2:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400b5e6:	65a3      	str	r3, [r4, #88]	; 0x58
2400b5e8:	e7cc      	b.n	2400b584 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400b5ea:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400b5ec:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400b5ee:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400b5f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400b5f4:	e7ea      	b.n	2400b5cc <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400b5f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400b5fa:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400b5fc:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400b5fe:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400b600:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400b604:	e7e2      	b.n	2400b5cc <HAL_SD_Init+0x94>
2400b606:	bf00      	nop

2400b608 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b608:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400b60a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b60c:	0409      	lsls	r1, r1, #16
{
2400b60e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400b610:	6800      	ldr	r0, [r0, #0]
2400b612:	f001 fff5 	bl	2400d600 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400b616:	4601      	mov	r1, r0
2400b618:	b120      	cbz	r0, 2400b624 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400b61a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b61c:	2000      	movs	r0, #0
2400b61e:	4319      	orrs	r1, r3
2400b620:	6361      	str	r1, [r4, #52]	; 0x34
}
2400b622:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400b624:	6820      	ldr	r0, [r4, #0]
2400b626:	f000 ff73 	bl	2400c510 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400b62a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400b62e:	bd10      	pop	{r4, pc}

2400b630 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
2400b630:	4770      	bx	lr
2400b632:	bf00      	nop

2400b634 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
2400b634:	4770      	bx	lr
2400b636:	bf00      	nop

2400b638 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
2400b638:	4770      	bx	lr
2400b63a:	bf00      	nop

2400b63c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
2400b63c:	4770      	bx	lr
2400b63e:	bf00      	nop

2400b640 <HAL_SD_IRQHandler>:
{
2400b640:	b5f0      	push	{r4, r5, r6, r7, lr}
2400b642:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400b644:	6800      	ldr	r0, [r0, #0]
{
2400b646:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
2400b648:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400b64a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b64c:	041a      	lsls	r2, r3, #16
2400b64e:	d52b      	bpl.n	2400b6a8 <HAL_SD_IRQHandler+0x68>
2400b650:	072b      	lsls	r3, r5, #28
2400b652:	f100 80e2 	bmi.w	2400b81a <HAL_SD_IRQHandler+0x1da>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
2400b656:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b658:	05db      	lsls	r3, r3, #23
2400b65a:	d579      	bpl.n	2400b750 <HAL_SD_IRQHandler+0x110>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400b65c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400b660:	4b9a      	ldr	r3, [pc, #616]	; (2400b8cc <HAL_SD_IRQHandler+0x28c>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400b662:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400b664:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
2400b666:	4013      	ands	r3, r2
2400b668:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400b66a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2400b66c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400b670:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400b672:	68c3      	ldr	r3, [r0, #12]
2400b674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400b678:	60c3      	str	r3, [r0, #12]
    else if ((context & SD_CONTEXT_DMA) != 0U)
2400b67a:	0629      	lsls	r1, r5, #24
2400b67c:	d512      	bpl.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
      hsd->Instance->DLEN = 0;
2400b67e:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400b680:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
2400b684:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
2400b686:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
2400b688:	6503      	str	r3, [r0, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400b68a:	f040 810b 	bne.w	2400b8a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
2400b68e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
2400b690:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400b692:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
2400b696:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b69a:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400b69c:	f040 80fe 	bne.w	2400b89c <HAL_SD_IRQHandler+0x25c>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
2400b6a0:	07aa      	lsls	r2, r5, #30
2400b6a2:	d124      	bne.n	2400b6ee <HAL_SD_IRQHandler+0xae>
}
2400b6a4:	b003      	add	sp, #12
2400b6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
2400b6a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b6aa:	05df      	lsls	r7, r3, #23
2400b6ac:	d524      	bpl.n	2400b6f8 <HAL_SD_IRQHandler+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400b6ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400b6b2:	4b86      	ldr	r3, [pc, #536]	; (2400b8cc <HAL_SD_IRQHandler+0x28c>)
    if ((context & SD_CONTEXT_IT) != 0U)
2400b6b4:	072e      	lsls	r6, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400b6b6:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400b6b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
2400b6ba:	ea03 0302 	and.w	r3, r3, r2
2400b6be:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400b6c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2400b6c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400b6c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400b6c8:	68c3      	ldr	r3, [r0, #12]
2400b6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400b6ce:	60c3      	str	r3, [r0, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
2400b6d0:	d5d3      	bpl.n	2400b67a <HAL_SD_IRQHandler+0x3a>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400b6d2:	f015 0f22 	tst.w	r5, #34	; 0x22
2400b6d6:	f040 80c6 	bne.w	2400b866 <HAL_SD_IRQHandler+0x226>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b6da:	4b7d      	ldr	r3, [pc, #500]	; (2400b8d0 <HAL_SD_IRQHandler+0x290>)
      hsd->State = HAL_SD_STATE_READY;
2400b6dc:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b6de:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
2400b6e0:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
2400b6e2:	07a8      	lsls	r0, r5, #30
      hsd->State = HAL_SD_STATE_READY;
2400b6e4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b6e8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
2400b6ea:	f000 80b7 	beq.w	2400b85c <HAL_SD_IRQHandler+0x21c>
        HAL_SD_RxCpltCallback(hsd);
2400b6ee:	4620      	mov	r0, r4
2400b6f0:	f002 f920 	bl	2400d934 <HAL_SD_RxCpltCallback>
}
2400b6f4:	b003      	add	sp, #12
2400b6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400b6f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b6fa:	045b      	lsls	r3, r3, #17
2400b6fc:	d529      	bpl.n	2400b752 <HAL_SD_IRQHandler+0x112>
2400b6fe:	072f      	lsls	r7, r5, #28
2400b700:	d527      	bpl.n	2400b752 <HAL_SD_IRQHandler+0x112>
  if (hsd->TxXferSize >= 32U)
2400b702:	6a23      	ldr	r3, [r4, #32]
2400b704:	2b1f      	cmp	r3, #31
2400b706:	d9cd      	bls.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
  tmp = hsd->pTxBuffPtr;
2400b708:	69e6      	ldr	r6, [r4, #28]
2400b70a:	1d37      	adds	r7, r6, #4
2400b70c:	f106 0524 	add.w	r5, r6, #36	; 0x24
2400b710:	e000      	b.n	2400b714 <HAL_SD_IRQHandler+0xd4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400b712:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
2400b714:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
2400b718:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400b71a:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
2400b71c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
2400b71e:	f817 2c07 	ldrb.w	r2, [r7, #-7]
2400b722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400b726:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
2400b728:	f817 2c06 	ldrb.w	r2, [r7, #-6]
2400b72c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
2400b730:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
2400b732:	f817 2c05 	ldrb.w	r2, [r7, #-5]
2400b736:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400b73a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400b73c:	f000 fed6 	bl	2400c4ec <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
2400b740:	42af      	cmp	r7, r5
2400b742:	d1e6      	bne.n	2400b712 <HAL_SD_IRQHandler+0xd2>
    hsd->TxXferSize -= 32U;
2400b744:	6a23      	ldr	r3, [r4, #32]
      tmp++;
2400b746:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
2400b748:	3b20      	subs	r3, #32
2400b74a:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
2400b74e:	e7a9      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400b750:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
2400b752:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b754:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
2400b758:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
2400b75a:	d04f      	beq.n	2400b7fc <HAL_SD_IRQHandler+0x1bc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
2400b75c:	079e      	lsls	r6, r3, #30
2400b75e:	d503      	bpl.n	2400b768 <HAL_SD_IRQHandler+0x128>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400b760:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b762:	f043 0302 	orr.w	r3, r3, #2
2400b766:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
2400b768:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b76a:	0719      	lsls	r1, r3, #28
2400b76c:	d503      	bpl.n	2400b776 <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400b76e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b770:	f043 0308 	orr.w	r3, r3, #8
2400b774:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
2400b776:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b778:	069a      	lsls	r2, r3, #26
2400b77a:	d503      	bpl.n	2400b784 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400b77c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b77e:	f043 0320 	orr.w	r3, r3, #32
2400b782:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
2400b784:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b786:	06db      	lsls	r3, r3, #27
2400b788:	d503      	bpl.n	2400b792 <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400b78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400b78c:	f043 0310 	orr.w	r3, r3, #16
2400b790:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b792:	4b4f      	ldr	r3, [pc, #316]	; (2400b8d0 <HAL_SD_IRQHandler+0x290>)
2400b794:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400b796:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2400b798:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
2400b79c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400b79e:	68c3      	ldr	r3, [r0, #12]
2400b7a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400b7a4:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
2400b7a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
2400b7a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
2400b7ac:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
2400b7ae:	68c3      	ldr	r3, [r0, #12]
2400b7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b7b4:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2400b7b6:	f001 fa03 	bl	2400cbc0 <SDMMC_CmdStopTransfer>
2400b7ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
2400b7bc:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
2400b7be:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
2400b7c2:	4310      	orrs	r0, r2
2400b7c4:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
2400b7c6:	68da      	ldr	r2, [r3, #12]
2400b7c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400b7cc:	60da      	str	r2, [r3, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
2400b7ce:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
2400b7d2:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
2400b7d4:	d14d      	bne.n	2400b872 <HAL_SD_IRQHandler+0x232>
    else if ((context & SD_CONTEXT_DMA) != 0U)
2400b7d6:	062f      	lsls	r7, r5, #24
2400b7d8:	f57f af64 	bpl.w	2400b6a4 <HAL_SD_IRQHandler+0x64>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400b7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400b7de:	2900      	cmp	r1, #0
2400b7e0:	f43f af60 	beq.w	2400b6a4 <HAL_SD_IRQHandler+0x64>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400b7e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        hsd->State = HAL_SD_STATE_READY;
2400b7e6:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
2400b7e8:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
2400b7ea:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
2400b7ee:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
2400b7f0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
2400b7f2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
2400b7f6:	f7ff fbb3 	bl	2400af60 <HAL_SD_ErrorCallback>
2400b7fa:	e753      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
2400b7fc:	00de      	lsls	r6, r3, #3
2400b7fe:	f57f af51 	bpl.w	2400b6a4 <HAL_SD_IRQHandler+0x64>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
2400b802:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
2400b806:	6383      	str	r3, [r0, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
2400b808:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
2400b80a:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
2400b80c:	075c      	lsls	r4, r3, #29
2400b80e:	d439      	bmi.n	2400b884 <HAL_SD_IRQHandler+0x244>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
2400b810:	06a9      	lsls	r1, r5, #26
2400b812:	d557      	bpl.n	2400b8c4 <HAL_SD_IRQHandler+0x284>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
2400b814:	f7ff ff12 	bl	2400b63c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
2400b818:	e744      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
  if (hsd->RxXferSize >= 32U)
2400b81a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400b81c:	2b1f      	cmp	r3, #31
2400b81e:	f67f af41 	bls.w	2400b6a4 <HAL_SD_IRQHandler+0x64>
  tmp = hsd->pRxBuffPtr;
2400b822:	6a67      	ldr	r7, [r4, #36]	; 0x24
2400b824:	1d3d      	adds	r5, r7, #4
2400b826:	f107 0624 	add.w	r6, r7, #36	; 0x24
2400b82a:	e000      	b.n	2400b82e <HAL_SD_IRQHandler+0x1ee>
      data = SDMMC_ReadFIFO(hsd->Instance);
2400b82c:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
2400b82e:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
2400b830:	f000 fe58 	bl	2400c4e4 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
2400b834:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
2400b836:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
2400b838:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
2400b83c:	42ae      	cmp	r6, r5
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
2400b83e:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
2400b842:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
2400b846:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
2400b84a:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
2400b84e:	d1ed      	bne.n	2400b82c <HAL_SD_IRQHandler+0x1ec>
    hsd->RxXferSize -= 32U;
2400b850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
2400b852:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
2400b854:	3b20      	subs	r3, #32
2400b856:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
2400b85a:	e723      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
        HAL_SD_TxCpltCallback(hsd);
2400b85c:	4620      	mov	r0, r4
2400b85e:	f002 f863 	bl	2400d928 <HAL_SD_TxCpltCallback>
}
2400b862:	b003      	add	sp, #12
2400b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400b866:	f001 f9ab 	bl	2400cbc0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400b86a:	4603      	mov	r3, r0
2400b86c:	b978      	cbnz	r0, 2400b88e <HAL_SD_IRQHandler+0x24e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400b86e:	6820      	ldr	r0, [r4, #0]
2400b870:	e733      	b.n	2400b6da <HAL_SD_IRQHandler+0x9a>
      hsd->State = HAL_SD_STATE_READY;
2400b872:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
2400b874:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
2400b876:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
2400b878:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400b87c:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
2400b87e:	f7ff fb6f 	bl	2400af60 <HAL_SD_ErrorCallback>
2400b882:	e70f      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
2400b884:	06aa      	lsls	r2, r5, #26
2400b886:	d51a      	bpl.n	2400b8be <HAL_SD_IRQHandler+0x27e>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
2400b888:	f7ff fed6 	bl	2400b638 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
2400b88c:	e70a      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
          hsd->ErrorCode |= errorstate;
2400b88e:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400b890:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
2400b892:	4313      	orrs	r3, r2
2400b894:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400b896:	f7ff fb63 	bl	2400af60 <HAL_SD_ErrorCallback>
2400b89a:	e7e8      	b.n	2400b86e <HAL_SD_IRQHandler+0x22e>
        HAL_SD_TxCpltCallback(hsd);
2400b89c:	4620      	mov	r0, r4
2400b89e:	f002 f843 	bl	2400d928 <HAL_SD_TxCpltCallback>
2400b8a2:	e6fd      	b.n	2400b6a0 <HAL_SD_IRQHandler+0x60>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400b8a4:	f001 f98c 	bl	2400cbc0 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400b8a8:	4603      	mov	r3, r0
2400b8aa:	2800      	cmp	r0, #0
2400b8ac:	f43f aeef 	beq.w	2400b68e <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
2400b8b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400b8b2:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
2400b8b4:	4313      	orrs	r3, r2
2400b8b6:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400b8b8:	f7ff fb52 	bl	2400af60 <HAL_SD_ErrorCallback>
2400b8bc:	e6e7      	b.n	2400b68e <HAL_SD_IRQHandler+0x4e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
2400b8be:	f7ff feb7 	bl	2400b630 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
2400b8c2:	e6ef      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
2400b8c4:	f7ff feb6 	bl	2400b634 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
2400b8c8:	e6ec      	b.n	2400b6a4 <HAL_SD_IRQHandler+0x64>
2400b8ca:	bf00      	nop
2400b8cc:	ffff3ec5 	.word	0xffff3ec5
2400b8d0:	18000f3a 	.word	0x18000f3a

2400b8d4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400b8d4:	b318      	cbz	r0, 2400b91e <HAL_SDRAM_Init+0x4a>
{
2400b8d6:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400b8d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400b8dc:	4604      	mov	r4, r0
2400b8de:	460d      	mov	r5, r1
2400b8e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400b8e4:	b1b3      	cbz	r3, 2400b914 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400b8e6:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b8e8:	2302      	movs	r3, #2
2400b8ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400b8ee:	f851 0b04 	ldr.w	r0, [r1], #4
2400b8f2:	f000 fd2b 	bl	2400c34c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400b8f6:	6862      	ldr	r2, [r4, #4]
2400b8f8:	4629      	mov	r1, r5
2400b8fa:	6820      	ldr	r0, [r4, #0]
2400b8fc:	f000 fd64 	bl	2400c3c8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400b900:	4a08      	ldr	r2, [pc, #32]	; (2400b924 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400b902:	2101      	movs	r1, #1

  return HAL_OK;
2400b904:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400b906:	6813      	ldr	r3, [r2, #0]
2400b908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400b90c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400b90e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400b912:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400b914:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400b918:	f7f8 f952 	bl	24003bc0 <HAL_SDRAM_MspInit>
2400b91c:	e7e3      	b.n	2400b8e6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400b91e:	2001      	movs	r0, #1
}
2400b920:	4770      	bx	lr
2400b922:	bf00      	nop
2400b924:	52004000 	.word	0x52004000

2400b928 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400b928:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400b92a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400b92e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400b930:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400b932:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400b934:	d004      	beq.n	2400b940 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400b936:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400b93a:	2e01      	cmp	r6, #1
2400b93c:	d001      	beq.n	2400b942 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400b93e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400b940:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b942:	2302      	movs	r3, #2
2400b944:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400b946:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b948:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400b94c:	f000 fd88 	bl	2400c460 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400b950:	682b      	ldr	r3, [r5, #0]
2400b952:	2b02      	cmp	r3, #2
2400b954:	d003      	beq.n	2400b95e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400b956:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400b958:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400b95c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400b95e:	2305      	movs	r3, #5
  return HAL_OK;
2400b960:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400b962:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400b966:	bd70      	pop	{r4, r5, r6, pc}

2400b968 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400b968:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400b96a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400b96e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400b970:	2b02      	cmp	r3, #2
2400b972:	b2d8      	uxtb	r0, r3
2400b974:	d005      	beq.n	2400b982 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400b976:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400b97a:	2b01      	cmp	r3, #1
2400b97c:	b2dd      	uxtb	r5, r3
2400b97e:	d001      	beq.n	2400b984 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400b980:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400b982:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b984:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400b986:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400b988:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400b98c:	f000 fd80 	bl	2400c490 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400b990:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400b992:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400b996:	bd38      	pop	{r3, r4, r5, pc}

2400b998 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400b998:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b99a:	492c      	ldr	r1, [pc, #176]	; (2400ba4c <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
2400b99c:	695a      	ldr	r2, [r3, #20]
{
2400b99e:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b9a0:	699c      	ldr	r4, [r3, #24]
2400b9a2:	f044 0408 	orr.w	r4, r4, #8
2400b9a6:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b9a8:	699c      	ldr	r4, [r3, #24]
2400b9aa:	f044 0410 	orr.w	r4, r4, #16
2400b9ae:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
2400b9b0:	681c      	ldr	r4, [r3, #0]
2400b9b2:	f024 0401 	bic.w	r4, r4, #1
2400b9b6:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b9b8:	691c      	ldr	r4, [r3, #16]
2400b9ba:	4021      	ands	r1, r4
2400b9bc:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b9be:	6899      	ldr	r1, [r3, #8]
2400b9c0:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
2400b9c4:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b9c6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
2400b9ca:	2904      	cmp	r1, #4
2400b9cc:	d001      	beq.n	2400b9d2 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b9ce:	0691      	lsls	r1, r2, #26
2400b9d0:	d430      	bmi.n	2400ba34 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b9d2:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
2400b9d6:	2903      	cmp	r1, #3
2400b9d8:	d001      	beq.n	2400b9de <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b9da:	0654      	lsls	r4, r2, #25
2400b9dc:	d41f      	bmi.n	2400ba1e <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b9de:	0591      	lsls	r1, r2, #22
2400b9e0:	d509      	bpl.n	2400b9f6 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b9e2:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
2400b9e6:	f041 0101 	orr.w	r1, r1, #1
2400b9ea:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b9ee:	6999      	ldr	r1, [r3, #24]
2400b9f0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
2400b9f4:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b9f6:	05d2      	lsls	r2, r2, #23
2400b9f8:	d509      	bpl.n	2400ba0e <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b9fa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
2400b9fe:	f042 0208 	orr.w	r2, r2, #8
2400ba02:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ba06:	699a      	ldr	r2, [r3, #24]
2400ba08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400ba0c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400ba0e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400ba10:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400ba14:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400ba18:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400ba1c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ba1e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
2400ba22:	f041 0104 	orr.w	r1, r1, #4
2400ba26:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ba2a:	6999      	ldr	r1, [r3, #24]
2400ba2c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
2400ba30:	6199      	str	r1, [r3, #24]
2400ba32:	e7d4      	b.n	2400b9de <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400ba34:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
2400ba38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
2400ba3c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400ba40:	6999      	ldr	r1, [r3, #24]
2400ba42:	f041 0120 	orr.w	r1, r1, #32
2400ba46:	6199      	str	r1, [r3, #24]
2400ba48:	e7c3      	b.n	2400b9d2 <SPI_CloseTransfer+0x3a>
2400ba4a:	bf00      	nop
2400ba4c:	fffffc90 	.word	0xfffffc90

2400ba50 <HAL_SPI_Init>:
  if (hspi == NULL)
2400ba50:	2800      	cmp	r0, #0
2400ba52:	f000 80c9 	beq.w	2400bbe8 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400ba56:	4a66      	ldr	r2, [pc, #408]	; (2400bbf0 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400ba58:	2100      	movs	r1, #0
{
2400ba5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400ba5e:	6803      	ldr	r3, [r0, #0]
2400ba60:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400ba62:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400ba64:	4293      	cmp	r3, r2
2400ba66:	d017      	beq.n	2400ba98 <HAL_SPI_Init+0x48>
2400ba68:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400ba6c:	4293      	cmp	r3, r2
2400ba6e:	d013      	beq.n	2400ba98 <HAL_SPI_Init+0x48>
2400ba70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400ba74:	4293      	cmp	r3, r2
2400ba76:	68c2      	ldr	r2, [r0, #12]
2400ba78:	f000 80ae 	beq.w	2400bbd8 <HAL_SPI_Init+0x188>
2400ba7c:	2a0f      	cmp	r2, #15
2400ba7e:	d808      	bhi.n	2400ba92 <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ba80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400ba82:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ba86:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
2400ba88:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
2400ba8a:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ba8e:	2908      	cmp	r1, #8
2400ba90:	d916      	bls.n	2400bac0 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
2400ba92:	2001      	movs	r0, #1
}
2400ba94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
2400ba98:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ba9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400ba9c:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400baa0:	4e53      	ldr	r6, [pc, #332]	; (2400bbf0 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400baa2:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
2400baa4:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
2400baa6:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400baaa:	4d52      	ldr	r5, [pc, #328]	; (2400bbf4 <HAL_SPI_Init+0x1a4>)
2400baac:	42ab      	cmp	r3, r5
2400baae:	bf18      	it	ne
2400bab0:	42b3      	cmpne	r3, r6
2400bab2:	d003      	beq.n	2400babc <HAL_SPI_Init+0x6c>
2400bab4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
2400bab8:	42ab      	cmp	r3, r5
2400baba:	d101      	bne.n	2400bac0 <HAL_SPI_Init+0x70>
2400babc:	2910      	cmp	r1, #16
2400babe:	d8e8      	bhi.n	2400ba92 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400bac0:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
2400bac4:	f001 05ff 	and.w	r5, r1, #255	; 0xff
2400bac8:	2900      	cmp	r1, #0
2400baca:	d07a      	beq.n	2400bbc2 <HAL_SPI_Init+0x172>
2400bacc:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
2400bad0:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bad2:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400bad4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
2400bad6:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bada:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
2400bade:	6819      	ldr	r1, [r3, #0]
2400bae0:	f021 0101 	bic.w	r1, r1, #1
2400bae4:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400bae6:	6899      	ldr	r1, [r3, #8]
2400bae8:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400baec:	6861      	ldr	r1, [r4, #4]
2400baee:	d058      	beq.n	2400bba2 <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400baf0:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
2400baf4:	d001      	beq.n	2400bafa <HAL_SPI_Init+0xaa>
2400baf6:	2a06      	cmp	r2, #6
2400baf8:	d849      	bhi.n	2400bb8e <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400bafa:	f8d3 e000 	ldr.w	lr, [r3]
2400bafe:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
2400bb02:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400bb06:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400bb08:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400bb0c:	4337      	orrs	r7, r6
2400bb0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
2400bb10:	4337      	orrs	r7, r6
2400bb12:	6926      	ldr	r6, [r4, #16]
2400bb14:	4337      	orrs	r7, r6
2400bb16:	6966      	ldr	r6, [r4, #20]
2400bb18:	4337      	orrs	r7, r6
2400bb1a:	6a26      	ldr	r6, [r4, #32]
2400bb1c:	4337      	orrs	r7, r6
2400bb1e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
2400bb20:	4337      	orrs	r7, r6
2400bb22:	68a6      	ldr	r6, [r4, #8]
2400bb24:	4337      	orrs	r7, r6
2400bb26:	6ca6      	ldr	r6, [r4, #72]	; 0x48
2400bb28:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400bb2a:	69e6      	ldr	r6, [r4, #28]
2400bb2c:	4332      	orrs	r2, r6
2400bb2e:	4310      	orrs	r0, r2
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400bb30:	6da2      	ldr	r2, [r4, #88]	; 0x58
2400bb32:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400bb34:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400bb38:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400bb3a:	6098      	str	r0, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400bb3c:	4315      	orrs	r5, r2
2400bb3e:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400bb40:	b9b9      	cbnz	r1, 2400bb72 <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400bb42:	689a      	ldr	r2, [r3, #8]
2400bb44:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
2400bb48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2400bb4c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400bb4e:	689a      	ldr	r2, [r3, #8]
2400bb50:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
2400bb54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400bb58:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400bb5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400bb5c:	f022 0201 	bic.w	r2, r2, #1
2400bb60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400bb62:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400bb64:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400bb66:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400bb6a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400bb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400bb72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400bb74:	f022 0201 	bic.w	r2, r2, #1
2400bb78:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400bb7a:	f1b9 0f00 	cmp.w	r9, #0
2400bb7e:	d0f0      	beq.n	2400bb62 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400bb80:	68da      	ldr	r2, [r3, #12]
2400bb82:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400bb84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2400bb88:	430a      	orrs	r2, r1
2400bb8a:	60da      	str	r2, [r3, #12]
2400bb8c:	e7e9      	b.n	2400bb62 <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400bb8e:	f8d3 e000 	ldr.w	lr, [r3]
2400bb92:	6d26      	ldr	r6, [r4, #80]	; 0x50
2400bb94:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
2400bb98:	ea4e 0e06 	orr.w	lr, lr, r6
2400bb9c:	f8c3 e000 	str.w	lr, [r3]
2400bba0:	e7b1      	b.n	2400bb06 <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bba2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400bba6:	d006      	beq.n	2400bbb6 <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400bba8:	2900      	cmp	r1, #0
2400bbaa:	d1a1      	bne.n	2400baf0 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400bbac:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
2400bbb0:	d002      	beq.n	2400bbb8 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400bbb2:	4689      	mov	r9, r1
2400bbb4:	e7a1      	b.n	2400bafa <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400bbb6:	b9cd      	cbnz	r5, 2400bbec <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400bbb8:	681e      	ldr	r6, [r3, #0]
2400bbba:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
2400bbbe:	601e      	str	r6, [r3, #0]
2400bbc0:	e796      	b.n	2400baf0 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
2400bbc2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400bbc4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400bbc8:	f7f9 fcaa 	bl	24005520 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400bbcc:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400bbce:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400bbd0:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
2400bbd4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400bbd6:	e77b      	b.n	2400bad0 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bbd8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400bbda:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400bbde:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
2400bbe0:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
2400bbe2:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400bbe6:	e769      	b.n	2400babc <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
2400bbe8:	2001      	movs	r0, #1
}
2400bbea:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400bbec:	4689      	mov	r9, r1
2400bbee:	e782      	b.n	2400baf6 <HAL_SPI_Init+0xa6>
2400bbf0:	40013000 	.word	0x40013000
2400bbf4:	40003800 	.word	0x40003800

2400bbf8 <HAL_SPI_Receive_DMA>:
{
2400bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
2400bbfa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400bbfe:	2b01      	cmp	r3, #1
2400bc00:	f000 8096 	beq.w	2400bd30 <HAL_SPI_Receive_DMA+0x138>
  if (hspi->State != HAL_SPI_STATE_READY)
2400bc04:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400bc08:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
2400bc0a:	2201      	movs	r2, #1
2400bc0c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
2400bc0e:	b2de      	uxtb	r6, r3
2400bc10:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
2400bc12:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400bc16:	d16a      	bne.n	2400bcee <HAL_SPI_Receive_DMA+0xf6>
  if ((pData == NULL) || (Size == 0UL))
2400bc18:	2900      	cmp	r1, #0
2400bc1a:	d063      	beq.n	2400bce4 <HAL_SPI_Receive_DMA+0xec>
2400bc1c:	fab5 f385 	clz	r3, r5
2400bc20:	095b      	lsrs	r3, r3, #5
2400bc22:	2d00      	cmp	r5, #0
2400bc24:	d05e      	beq.n	2400bce4 <HAL_SPI_Receive_DMA+0xec>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400bc26:	2204      	movs	r2, #4
  hspi->TxXferSize  = (uint16_t) 0UL;
2400bc28:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2400bc2c:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400bc2e:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400bc32:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferCount = Size;
2400bc36:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400bc3a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferSize  = Size;
2400bc3e:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxISR       = NULL;
2400bc42:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400bc46:	6883      	ldr	r3, [r0, #8]
2400bc48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_RX(hspi);
2400bc4c:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400bc4e:	d06a      	beq.n	2400bd26 <HAL_SPI_Receive_DMA+0x12e>
    SPI_2LINES_RX(hspi);
2400bc50:	68da      	ldr	r2, [r3, #12]
2400bc52:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
2400bc56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400bc5a:	60da      	str	r2, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400bc5c:	68e2      	ldr	r2, [r4, #12]
2400bc5e:	2a0f      	cmp	r2, #15
2400bc60:	d94b      	bls.n	2400bcfa <HAL_SPI_Receive_DMA+0x102>
2400bc62:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bc64:	6982      	ldr	r2, [r0, #24]
2400bc66:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400bc6a:	d13b      	bne.n	2400bce4 <HAL_SPI_Receive_DMA+0xec>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bc6c:	689a      	ldr	r2, [r3, #8]
2400bc6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400bc72:	609a      	str	r2, [r3, #8]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400bc74:	4f41      	ldr	r7, [pc, #260]	; (2400bd7c <HAL_SPI_Receive_DMA+0x184>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400bc76:	460a      	mov	r2, r1
2400bc78:	f103 0130 	add.w	r1, r3, #48	; 0x30
                                 hspi->RxXferCount))
2400bc7c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400bc80:	6407      	str	r7, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400bc82:	4f3f      	ldr	r7, [pc, #252]	; (2400bd80 <HAL_SPI_Receive_DMA+0x188>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400bc84:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400bc86:	63c7      	str	r7, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400bc88:	4f3e      	ldr	r7, [pc, #248]	; (2400bd84 <HAL_SPI_Receive_DMA+0x18c>)
2400bc8a:	64c7      	str	r7, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400bc8c:	2700      	movs	r7, #0
2400bc8e:	6507      	str	r7, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400bc90:	f7fa fb30 	bl	240062f4 <HAL_DMA_Start_IT>
2400bc94:	2800      	cmp	r0, #0
2400bc96:	d14e      	bne.n	2400bd36 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400bc98:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400bc9a:	4a3b      	ldr	r2, [pc, #236]	; (2400bd88 <HAL_SPI_Receive_DMA+0x190>)
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400bc9c:	69db      	ldr	r3, [r3, #28]
2400bc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400bca2:	6823      	ldr	r3, [r4, #0]
2400bca4:	6859      	ldr	r1, [r3, #4]
2400bca6:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400bcaa:	bf18      	it	ne
2400bcac:	432a      	orrne	r2, r5
2400bcae:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bcb0:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400bcb2:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bcb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400bcb8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bcbc:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
2400bcbe:	691a      	ldr	r2, [r3, #16]
2400bcc0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
2400bcc4:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
2400bcc6:	681a      	ldr	r2, [r3, #0]
2400bcc8:	f042 0201 	orr.w	r2, r2, #1
2400bccc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400bcce:	d103      	bne.n	2400bcd8 <HAL_SPI_Receive_DMA+0xe0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400bcd0:	681a      	ldr	r2, [r3, #0]
2400bcd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400bcd6:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
2400bcd8:	2300      	movs	r3, #0
  return errorcode;
2400bcda:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400bcdc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400bce0:	4630      	mov	r0, r6
2400bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
2400bce4:	2300      	movs	r3, #0
2400bce6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400bcea:	4630      	mov	r0, r6
2400bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
2400bcee:	2300      	movs	r3, #0
    return errorcode;
2400bcf0:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400bcf2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400bcf6:	4630      	mov	r0, r6
2400bcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400bcfa:	2a07      	cmp	r2, #7
2400bcfc:	d827      	bhi.n	2400bd4e <HAL_SPI_Receive_DMA+0x156>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bcfe:	689a      	ldr	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400bd00:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bd02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400bd06:	609a      	str	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400bd08:	6982      	ldr	r2, [r0, #24]
2400bd0a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400bd0e:	d02d      	beq.n	2400bd6c <HAL_SPI_Receive_DMA+0x174>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bd10:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400bd14:	d1ae      	bne.n	2400bc74 <HAL_SPI_Receive_DMA+0x7c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400bd16:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400bd1a:	b292      	uxth	r2, r2
2400bd1c:	3203      	adds	r2, #3
2400bd1e:	0892      	lsrs	r2, r2, #2
2400bd20:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400bd24:	e7a6      	b.n	2400bc74 <HAL_SPI_Receive_DMA+0x7c>
    SPI_1LINE_RX(hspi);
2400bd26:	681a      	ldr	r2, [r3, #0]
2400bd28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
2400bd2c:	601a      	str	r2, [r3, #0]
2400bd2e:	e795      	b.n	2400bc5c <HAL_SPI_Receive_DMA+0x64>
  __HAL_LOCK(hspi);
2400bd30:	2602      	movs	r6, #2
}
2400bd32:	4630      	mov	r0, r6
2400bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bd36:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bd3a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400bd3c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bd40:	f043 0310 	orr.w	r3, r3, #16
2400bd44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bd48:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400bd4c:	e7cd      	b.n	2400bcea <HAL_SPI_Receive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400bd4e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bd50:	6987      	ldr	r7, [r0, #24]
2400bd52:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
2400bd56:	d002      	beq.n	2400bd5e <HAL_SPI_Receive_DMA+0x166>
2400bd58:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
2400bd5c:	d1c2      	bne.n	2400bce4 <HAL_SPI_Receive_DMA+0xec>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bd5e:	689a      	ldr	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bd60:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400bd64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400bd68:	609a      	str	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bd6a:	d183      	bne.n	2400bc74 <HAL_SPI_Receive_DMA+0x7c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400bd6c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400bd70:	b292      	uxth	r2, r2
2400bd72:	3201      	adds	r2, #1
2400bd74:	0852      	lsrs	r2, r2, #1
2400bd76:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400bd7a:	e77b      	b.n	2400bc74 <HAL_SPI_Receive_DMA+0x7c>
2400bd7c:	2400bfed 	.word	0x2400bfed
2400bd80:	2400bf9d 	.word	0x2400bf9d
2400bd84:	2400c009 	.word	0x2400c009
2400bd88:	ffff0000 	.word	0xffff0000

2400bd8c <HAL_SPI_TransmitReceive_DMA>:
{
2400bd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400bd90:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400bd92:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400bd96:	2b01      	cmp	r3, #1
2400bd98:	f000 8084 	beq.w	2400bea4 <HAL_SPI_TransmitReceive_DMA+0x118>
2400bd9c:	2301      	movs	r3, #1
2400bd9e:	4604      	mov	r4, r0
2400bda0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400bda4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400bda8:	2b01      	cmp	r3, #1
2400bdaa:	b2de      	uxtb	r6, r3
2400bdac:	d151      	bne.n	2400be52 <HAL_SPI_TransmitReceive_DMA+0xc6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400bdae:	2d00      	cmp	r5, #0
2400bdb0:	bf18      	it	ne
2400bdb2:	2a00      	cmpne	r2, #0
2400bdb4:	d047      	beq.n	2400be46 <HAL_SPI_TransmitReceive_DMA+0xba>
2400bdb6:	fab1 f381 	clz	r3, r1
2400bdba:	095b      	lsrs	r3, r3, #5
2400bdbc:	2900      	cmp	r1, #0
2400bdbe:	d042      	beq.n	2400be46 <HAL_SPI_TransmitReceive_DMA+0xba>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400bdc0:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
2400bdc2:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SPI_2LINES(hspi);
2400bdc6:	6801      	ldr	r1, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400bdc8:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
2400bdca:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxISR       = NULL;
2400bdce:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400bdd2:	2005      	movs	r0, #5
2400bdd4:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400bdd8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferCount = Size;
2400bddc:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
2400bde0:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  SPI_2LINES(hspi);
2400bde4:	68cb      	ldr	r3, [r1, #12]
2400bde6:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400bdea:	60cb      	str	r3, [r1, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400bdec:	688b      	ldr	r3, [r1, #8]
2400bdee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400bdf2:	608b      	str	r3, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400bdf4:	68e3      	ldr	r3, [r4, #12]
2400bdf6:	2b0f      	cmp	r3, #15
2400bdf8:	d932      	bls.n	2400be60 <HAL_SPI_TransmitReceive_DMA+0xd4>
2400bdfa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bdfc:	6983      	ldr	r3, [r0, #24]
2400bdfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400be02:	d120      	bne.n	2400be46 <HAL_SPI_TransmitReceive_DMA+0xba>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400be04:	4f60      	ldr	r7, [pc, #384]	; (2400bf88 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400be06:	f04f 0800 	mov.w	r8, #0
                                 hspi->RxXferCount))
2400be0a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400be0e:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400be10:	6407      	str	r7, [r0, #64]	; 0x40
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400be12:	f8df 9180 	ldr.w	r9, [pc, #384]	; 2400bf94 <HAL_SPI_TransmitReceive_DMA+0x208>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400be16:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400be18:	4f5c      	ldr	r7, [pc, #368]	; (2400bf8c <HAL_SPI_TransmitReceive_DMA+0x200>)
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400be1a:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400be1e:	63c7      	str	r7, [r0, #60]	; 0x3c
  hspi->hdmarx->XferAbortCallback = NULL;
2400be20:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400be24:	f7fa fa66 	bl	240062f4 <HAL_DMA_Start_IT>
2400be28:	4607      	mov	r7, r0
2400be2a:	2800      	cmp	r0, #0
2400be2c:	d03e      	beq.n	2400beac <HAL_SPI_TransmitReceive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400be2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400be32:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400be34:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400be38:	f043 0310 	orr.w	r3, r3, #16
2400be3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400be40:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400be44:	e002      	b.n	2400be4c <HAL_SPI_TransmitReceive_DMA+0xc0>
    __HAL_UNLOCK(hspi);
2400be46:	2300      	movs	r3, #0
2400be48:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400be4c:	4630      	mov	r0, r6
2400be4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400be52:	2300      	movs	r3, #0
    return errorcode;
2400be54:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400be56:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400be5a:	4630      	mov	r0, r6
2400be5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400be60:	2b07      	cmp	r3, #7
2400be62:	d868      	bhi.n	2400bf36 <HAL_SPI_TransmitReceive_DMA+0x1aa>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400be64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400be66:	699b      	ldr	r3, [r3, #24]
2400be68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400be6c:	f000 8084 	beq.w	2400bf78 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400be70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400be74:	d106      	bne.n	2400be84 <HAL_SPI_TransmitReceive_DMA+0xf8>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400be76:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400be7a:	b29b      	uxth	r3, r3
2400be7c:	3303      	adds	r3, #3
2400be7e:	089b      	lsrs	r3, r3, #2
2400be80:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400be84:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400be86:	6983      	ldr	r3, [r0, #24]
2400be88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400be8c:	d06c      	beq.n	2400bf68 <HAL_SPI_TransmitReceive_DMA+0x1dc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400be8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400be92:	d1b7      	bne.n	2400be04 <HAL_SPI_TransmitReceive_DMA+0x78>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400be94:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400be98:	b29b      	uxth	r3, r3
2400be9a:	3303      	adds	r3, #3
2400be9c:	089b      	lsrs	r3, r3, #2
2400be9e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
2400bea2:	e7af      	b.n	2400be04 <HAL_SPI_TransmitReceive_DMA+0x78>
  __HAL_LOCK(hspi);
2400bea4:	2602      	movs	r6, #2
}
2400bea6:	4630      	mov	r0, r6
2400bea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400beac:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400beae:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400beb0:	6893      	ldr	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400beb2:	3220      	adds	r2, #32
2400beb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400beb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400beba:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
2400bebe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400bec2:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400bec6:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferAbortCallback    = NULL;
2400bec8:	6507      	str	r7, [r0, #80]	; 0x50
  hspi->hdmatx->XferCpltCallback     = NULL;
2400beca:	e9c0 770f 	strd	r7, r7, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400bece:	f7fa fa11 	bl	240062f4 <HAL_DMA_Start_IT>
2400bed2:	bb20      	cbnz	r0, 2400bf1e <HAL_SPI_TransmitReceive_DMA+0x192>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400bed4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400bed6:	4a2e      	ldr	r2, [pc, #184]	; (2400bf90 <HAL_SPI_TransmitReceive_DMA+0x204>)
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400bed8:	69db      	ldr	r3, [r3, #28]
2400beda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400bede:	6823      	ldr	r3, [r4, #0]
2400bee0:	6859      	ldr	r1, [r3, #4]
2400bee2:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400bee6:	bf18      	it	ne
2400bee8:	432a      	orrne	r2, r5
2400beea:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400beec:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400beee:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400bef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400bef4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400bef8:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400befa:	691a      	ldr	r2, [r3, #16]
2400befc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
2400bf00:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
2400bf02:	681a      	ldr	r2, [r3, #0]
2400bf04:	f042 0201 	orr.w	r2, r2, #1
2400bf08:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400bf0a:	d103      	bne.n	2400bf14 <HAL_SPI_TransmitReceive_DMA+0x188>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400bf0c:	681a      	ldr	r2, [r3, #0]
2400bf0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400bf12:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
2400bf14:	2300      	movs	r3, #0
  return errorcode;
2400bf16:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400bf18:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400bf1c:	e796      	b.n	2400be4c <HAL_SPI_TransmitReceive_DMA+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bf1e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bf22:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400bf24:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400bf28:	f043 0310 	orr.w	r3, r3, #16
2400bf2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400bf30:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400bf34:	e78a      	b.n	2400be4c <HAL_SPI_TransmitReceive_DMA+0xc0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400bf36:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400bf38:	6983      	ldr	r3, [r0, #24]
2400bf3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400bf3e:	d003      	beq.n	2400bf48 <HAL_SPI_TransmitReceive_DMA+0x1bc>
2400bf40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400bf44:	f47f af7f 	bne.w	2400be46 <HAL_SPI_TransmitReceive_DMA+0xba>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bf48:	6fa7      	ldr	r7, [r4, #120]	; 0x78
2400bf4a:	69bf      	ldr	r7, [r7, #24]
2400bf4c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
2400bf50:	d106      	bne.n	2400bf60 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400bf52:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
2400bf56:	b2bf      	uxth	r7, r7
2400bf58:	3701      	adds	r7, #1
2400bf5a:	087f      	lsrs	r7, r7, #1
2400bf5c:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bf60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400bf64:	f47f af4e 	bne.w	2400be04 <HAL_SPI_TransmitReceive_DMA+0x78>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400bf68:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400bf6c:	b29b      	uxth	r3, r3
2400bf6e:	3301      	adds	r3, #1
2400bf70:	085b      	lsrs	r3, r3, #1
2400bf72:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
2400bf76:	e745      	b.n	2400be04 <HAL_SPI_TransmitReceive_DMA+0x78>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400bf78:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400bf7c:	b29b      	uxth	r3, r3
2400bf7e:	3301      	adds	r3, #1
2400bf80:	085b      	lsrs	r3, r3, #1
2400bf82:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400bf86:	e77d      	b.n	2400be84 <HAL_SPI_TransmitReceive_DMA+0xf8>
2400bf88:	2400bff9 	.word	0x2400bff9
2400bf8c:	2400bfc5 	.word	0x2400bfc5
2400bf90:	ffff0000 	.word	0xffff0000
2400bf94:	2400c009 	.word	0x2400c009

2400bf98 <HAL_SPI_TxCpltCallback>:
2400bf98:	4770      	bx	lr
2400bf9a:	bf00      	nop

2400bf9c <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400bf9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2400bf9e:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400bfa0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400bfa4:	2b07      	cmp	r3, #7
2400bfa6:	d009      	beq.n	2400bfbc <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400bfa8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400bfaa:	69db      	ldr	r3, [r3, #28]
2400bfac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400bfb0:	d005      	beq.n	2400bfbe <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400bfb2:	6802      	ldr	r2, [r0, #0]
2400bfb4:	6913      	ldr	r3, [r2, #16]
2400bfb6:	f043 0308 	orr.w	r3, r3, #8
2400bfba:	6113      	str	r3, [r2, #16]
}
2400bfbc:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
2400bfbe:	f7f7 fac1 	bl	24003544 <HAL_SPI_RxCpltCallback>
}
2400bfc2:	bd08      	pop	{r3, pc}

2400bfc4 <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400bfc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2400bfc6:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400bfc8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400bfcc:	2b07      	cmp	r3, #7
2400bfce:	d009      	beq.n	2400bfe4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400bfd0:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400bfd2:	69db      	ldr	r3, [r3, #28]
2400bfd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400bfd8:	d005      	beq.n	2400bfe6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400bfda:	6802      	ldr	r2, [r0, #0]
2400bfdc:	6913      	ldr	r3, [r2, #16]
2400bfde:	f043 0308 	orr.w	r3, r3, #8
2400bfe2:	6113      	str	r3, [r2, #16]
}
2400bfe4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400bfe6:	f7f7 fc77 	bl	240038d8 <HAL_SPI_TxRxCpltCallback>
}
2400bfea:	bd08      	pop	{r3, pc}

2400bfec <SPI_DMAHalfReceiveCplt>:
  HAL_SPI_RxHalfCpltCallback(hspi);
2400bfec:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2400bfee:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
2400bff0:	f7f7 fb8e 	bl	24003710 <HAL_SPI_RxHalfCpltCallback>
}
2400bff4:	bd08      	pop	{r3, pc}
2400bff6:	bf00      	nop

2400bff8 <SPI_DMAHalfTransmitReceiveCplt>:
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400bff8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
2400bffa:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400bffc:	f7f7 fc88 	bl	24003910 <HAL_SPI_TxRxHalfCpltCallback>
}
2400c000:	bd08      	pop	{r3, pc}
2400c002:	bf00      	nop

2400c004 <HAL_SPI_ErrorCallback>:
2400c004:	4770      	bx	lr
2400c006:	bf00      	nop

2400c008 <SPI_DMAError>:
{
2400c008:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c00a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400c00c:	f7fb f89c 	bl	24007148 <HAL_DMA_GetError>
2400c010:	2802      	cmp	r0, #2
2400c012:	d100      	bne.n	2400c016 <SPI_DMAError+0xe>
}
2400c014:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400c016:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c018:	4930      	ldr	r1, [pc, #192]	; (2400c0dc <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
2400c01a:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400c01c:	6998      	ldr	r0, [r3, #24]
2400c01e:	f040 0008 	orr.w	r0, r0, #8
2400c022:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400c024:	6998      	ldr	r0, [r3, #24]
2400c026:	f040 0010 	orr.w	r0, r0, #16
2400c02a:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
2400c02c:	6818      	ldr	r0, [r3, #0]
2400c02e:	f020 0001 	bic.w	r0, r0, #1
2400c032:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400c034:	6918      	ldr	r0, [r3, #16]
2400c036:	4001      	ands	r1, r0
2400c038:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c03a:	6899      	ldr	r1, [r3, #8]
2400c03c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
2400c040:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400c042:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
2400c046:	2904      	cmp	r1, #4
2400c048:	d001      	beq.n	2400c04e <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400c04a:	0691      	lsls	r1, r2, #26
2400c04c:	d43a      	bmi.n	2400c0c4 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400c04e:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
2400c052:	2903      	cmp	r1, #3
2400c054:	d001      	beq.n	2400c05a <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400c056:	0650      	lsls	r0, r2, #25
2400c058:	d429      	bmi.n	2400c0ae <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400c05a:	0591      	lsls	r1, r2, #22
2400c05c:	d509      	bpl.n	2400c072 <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c05e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
2400c062:	f041 0101 	orr.w	r1, r1, #1
2400c066:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c06a:	6999      	ldr	r1, [r3, #24]
2400c06c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
2400c070:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400c072:	05d2      	lsls	r2, r2, #23
2400c074:	d509      	bpl.n	2400c08a <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c076:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400c07a:	f042 0208 	orr.w	r2, r2, #8
2400c07e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c082:	699a      	ldr	r2, [r3, #24]
2400c084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400c088:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400c08a:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400c08c:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400c08e:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400c090:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400c094:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400c098:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c09c:	f043 0310 	orr.w	r3, r3, #16
2400c0a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400c0a4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400c0a8:	f7ff ffac 	bl	2400c004 <HAL_SPI_ErrorCallback>
}
2400c0ac:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c0ae:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
2400c0b2:	f041 0104 	orr.w	r1, r1, #4
2400c0b6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c0ba:	6999      	ldr	r1, [r3, #24]
2400c0bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
2400c0c0:	6199      	str	r1, [r3, #24]
2400c0c2:	e7ca      	b.n	2400c05a <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c0c4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
2400c0c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
2400c0cc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c0d0:	6999      	ldr	r1, [r3, #24]
2400c0d2:	f041 0120 	orr.w	r1, r1, #32
2400c0d6:	6199      	str	r1, [r3, #24]
2400c0d8:	e7b9      	b.n	2400c04e <SPI_DMAError+0x46>
2400c0da:	bf00      	nop
2400c0dc:	fffffc90 	.word	0xfffffc90

2400c0e0 <SPI_DMAAbortOnError>:
{
2400c0e0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400c0e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400c0e4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
2400c0e6:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
2400c0e8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400c0ec:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400c0f0:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400c0f4:	f7ff ff86 	bl	2400c004 <HAL_SPI_ErrorCallback>
}
2400c0f8:	bd08      	pop	{r3, pc}
2400c0fa:	bf00      	nop

2400c0fc <HAL_SPI_SuspendCallback>:
2400c0fc:	4770      	bx	lr
2400c0fe:	bf00      	nop

2400c100 <HAL_SPI_IRQHandler>:
{
2400c100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itsource = hspi->Instance->IER;
2400c104:	6807      	ldr	r7, [r0, #0]
{
2400c106:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400c108:	693a      	ldr	r2, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400c10a:	697b      	ldr	r3, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400c10c:	f8d7 9008 	ldr.w	r9, [r7, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400c110:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400c112:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400c116:	ea02 0503 	and.w	r5, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400c11a:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400c11c:	d502      	bpl.n	2400c124 <HAL_SPI_IRQHandler+0x24>
2400c11e:	0713      	lsls	r3, r2, #28
2400c120:	f100 8088 	bmi.w	2400c234 <HAL_SPI_IRQHandler+0x134>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400c124:	f005 0364 	and.w	r3, r5, #100	; 0x64
2400c128:	2b04      	cmp	r3, #4
2400c12a:	d07b      	beq.n	2400c224 <HAL_SPI_IRQHandler+0x124>
  uint32_t handled  = 0UL;
2400c12c:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400c12e:	f005 0845 	and.w	r8, r5, #69	; 0x45
2400c132:	f1b8 0f01 	cmp.w	r8, #1
2400c136:	d103      	bne.n	2400c140 <HAL_SPI_IRQHandler+0x40>
    hspi->RxISR(hspi);
2400c138:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400c13a:	4620      	mov	r0, r4
2400c13c:	4798      	blx	r3
    handled = 1UL;
2400c13e:	4643      	mov	r3, r8
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400c140:	f005 0226 	and.w	r2, r5, #38	; 0x26
2400c144:	2a02      	cmp	r2, #2
2400c146:	d05e      	beq.n	2400c206 <HAL_SPI_IRQHandler+0x106>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400c148:	056a      	lsls	r2, r5, #21
2400c14a:	d43d      	bmi.n	2400c1c8 <HAL_SPI_IRQHandler+0xc8>
  if (handled != 0UL)
2400c14c:	2b00      	cmp	r3, #0
2400c14e:	d139      	bne.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400c150:	072b      	lsls	r3, r5, #28
2400c152:	d534      	bpl.n	2400c1be <HAL_SPI_IRQHandler+0xbe>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400c154:	6823      	ldr	r3, [r4, #0]
2400c156:	699a      	ldr	r2, [r3, #24]
2400c158:	f042 0208 	orr.w	r2, r2, #8
2400c15c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400c15e:	699a      	ldr	r2, [r3, #24]
2400c160:	f042 0210 	orr.w	r2, r2, #16
2400c164:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400c166:	699a      	ldr	r2, [r3, #24]
2400c168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2400c16c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400c16e:	691a      	ldr	r2, [r3, #16]
2400c170:	f022 0208 	bic.w	r2, r2, #8
2400c174:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c176:	689b      	ldr	r3, [r3, #8]
2400c178:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400c17c:	d12d      	bne.n	2400c1da <HAL_SPI_IRQHandler+0xda>
      while (hspi->RxXferCount != 0UL)
2400c17e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400c182:	b29b      	uxth	r3, r3
2400c184:	b34b      	cbz	r3, 2400c1da <HAL_SPI_IRQHandler+0xda>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400c186:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400c188:	e00e      	b.n	2400c1a8 <HAL_SPI_IRQHandler+0xa8>
2400c18a:	6823      	ldr	r3, [r4, #0]
2400c18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c18e:	f842 3b04 	str.w	r3, [r2], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400c192:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400c194:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400c198:	3b01      	subs	r3, #1
2400c19a:	b29b      	uxth	r3, r3
2400c19c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400c1a0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400c1a4:	b29b      	uxth	r3, r3
2400c1a6:	b1c3      	cbz	r3, 2400c1da <HAL_SPI_IRQHandler+0xda>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400c1a8:	68e3      	ldr	r3, [r4, #12]
2400c1aa:	2b0f      	cmp	r3, #15
2400c1ac:	d8ed      	bhi.n	2400c18a <HAL_SPI_IRQHandler+0x8a>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400c1ae:	2b07      	cmp	r3, #7
2400c1b0:	f240 80ba 	bls.w	2400c328 <HAL_SPI_IRQHandler+0x228>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400c1b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
2400c1b6:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400c1ba:	6662      	str	r2, [r4, #100]	; 0x64
2400c1bc:	e7ea      	b.n	2400c194 <HAL_SPI_IRQHandler+0x94>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400c1be:	f415 7f58 	tst.w	r5, #864	; 0x360
2400c1c2:	d13f      	bne.n	2400c244 <HAL_SPI_IRQHandler+0x144>
}
2400c1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c1c8:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400c1ca:	2200      	movs	r2, #0
2400c1cc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c1d0:	698a      	ldr	r2, [r1, #24]
2400c1d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400c1d6:	618a      	str	r2, [r1, #24]
2400c1d8:	e7b8      	b.n	2400c14c <HAL_SPI_IRQHandler+0x4c>
    SPI_CloseTransfer(hspi);
2400c1da:	4620      	mov	r0, r4
2400c1dc:	f7ff fbdc 	bl	2400b998 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400c1e0:	2301      	movs	r3, #1
2400c1e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400c1e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c1ea:	2b00      	cmp	r3, #0
2400c1ec:	f040 8098 	bne.w	2400c320 <HAL_SPI_IRQHandler+0x220>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400c1f0:	2e05      	cmp	r6, #5
2400c1f2:	f000 80a1 	beq.w	2400c338 <HAL_SPI_IRQHandler+0x238>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400c1f6:	2e04      	cmp	r6, #4
2400c1f8:	f000 80a1 	beq.w	2400c33e <HAL_SPI_IRQHandler+0x23e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400c1fc:	2e03      	cmp	r6, #3
2400c1fe:	d1e1      	bne.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_TxCpltCallback(hspi);
2400c200:	f7ff feca 	bl	2400bf98 <HAL_SPI_TxCpltCallback>
2400c204:	e7de      	b.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
    hspi->TxISR(hspi);
2400c206:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400c208:	4620      	mov	r0, r4
2400c20a:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400c20c:	0569      	lsls	r1, r5, #21
2400c20e:	d5d9      	bpl.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c210:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400c212:	2100      	movs	r1, #0
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c214:	6993      	ldr	r3, [r2, #24]
    hspi->Reload.Requested = 0UL;
2400c216:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400c21a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400c21e:	6193      	str	r3, [r2, #24]
}
2400c220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->TxISR(hspi);
2400c224:	4620      	mov	r0, r4
2400c226:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400c228:	4798      	blx	r3
    hspi->RxISR(hspi);
2400c22a:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400c22c:	4620      	mov	r0, r4
2400c22e:	4798      	blx	r3
    handled = 1UL;
2400c230:	2301      	movs	r3, #1
2400c232:	e77c      	b.n	2400c12e <HAL_SPI_IRQHandler+0x2e>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400c234:	69bb      	ldr	r3, [r7, #24]
2400c236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400c23a:	61bb      	str	r3, [r7, #24]
    HAL_SPI_SuspendCallback(hspi);
2400c23c:	f7ff ff5e 	bl	2400c0fc <HAL_SPI_SuspendCallback>
}
2400c240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400c244:	0668      	lsls	r0, r5, #25
2400c246:	d50a      	bpl.n	2400c25e <HAL_SPI_IRQHandler+0x15e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c248:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c24c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400c24e:	f043 0304 	orr.w	r3, r3, #4
2400c252:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400c256:	6993      	ldr	r3, [r2, #24]
2400c258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c25c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400c25e:	05a9      	lsls	r1, r5, #22
2400c260:	d50a      	bpl.n	2400c278 <HAL_SPI_IRQHandler+0x178>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c262:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c266:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400c268:	f043 0301 	orr.w	r3, r3, #1
2400c26c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400c270:	6993      	ldr	r3, [r2, #24]
2400c272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400c276:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400c278:	05ea      	lsls	r2, r5, #23
2400c27a:	d50a      	bpl.n	2400c292 <HAL_SPI_IRQHandler+0x192>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c27c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c280:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400c282:	f043 0308 	orr.w	r3, r3, #8
2400c286:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400c28a:	6993      	ldr	r3, [r2, #24]
2400c28c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400c290:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400c292:	06ab      	lsls	r3, r5, #26
2400c294:	d50a      	bpl.n	2400c2ac <HAL_SPI_IRQHandler+0x1ac>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c296:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c29a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400c29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400c2a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400c2a4:	6993      	ldr	r3, [r2, #24]
2400c2a6:	f043 0320 	orr.w	r3, r3, #32
2400c2aa:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400c2ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c2b0:	2b00      	cmp	r3, #0
2400c2b2:	d087      	beq.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE(hspi);
2400c2b4:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c2b6:	f409 4940 	and.w	r9, r9, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400c2ba:	4a22      	ldr	r2, [pc, #136]	; (2400c344 <HAL_SPI_IRQHandler+0x244>)
      __HAL_SPI_DISABLE(hspi);
2400c2bc:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c2be:	f5b9 4f40 	cmp.w	r9, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400c2c2:	f021 0101 	bic.w	r1, r1, #1
2400c2c6:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400c2c8:	6919      	ldr	r1, [r3, #16]
2400c2ca:	ea02 0201 	and.w	r2, r2, r1
2400c2ce:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400c2d0:	d122      	bne.n	2400c318 <HAL_SPI_IRQHandler+0x218>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c2d2:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
2400c2d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400c2d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400c2da:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
2400c2dc:	b150      	cbz	r0, 2400c2f4 <HAL_SPI_IRQHandler+0x1f4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400c2de:	4b1a      	ldr	r3, [pc, #104]	; (2400c348 <HAL_SPI_IRQHandler+0x248>)
2400c2e0:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400c2e2:	f7fa fb17 	bl	24006914 <HAL_DMA_Abort_IT>
2400c2e6:	b128      	cbz	r0, 2400c2f4 <HAL_SPI_IRQHandler+0x1f4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400c2e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c2f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400c2f4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400c2f6:	2800      	cmp	r0, #0
2400c2f8:	f43f af64 	beq.w	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400c2fc:	4b12      	ldr	r3, [pc, #72]	; (2400c348 <HAL_SPI_IRQHandler+0x248>)
2400c2fe:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400c300:	f7fa fb08 	bl	24006914 <HAL_DMA_Abort_IT>
2400c304:	2800      	cmp	r0, #0
2400c306:	f43f af5d 	beq.w	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400c30a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400c30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400c312:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400c316:	e755      	b.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
        hspi->State = HAL_SPI_STATE_READY;
2400c318:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400c31a:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400c31c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400c320:	f7ff fe70 	bl	2400c004 <HAL_SPI_ErrorCallback>
}
2400c324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400c328:	6823      	ldr	r3, [r4, #0]
2400c32a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400c32e:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400c330:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400c332:	3201      	adds	r2, #1
2400c334:	6662      	str	r2, [r4, #100]	; 0x64
2400c336:	e72d      	b.n	2400c194 <HAL_SPI_IRQHandler+0x94>
      HAL_SPI_TxRxCpltCallback(hspi);
2400c338:	f7f7 face 	bl	240038d8 <HAL_SPI_TxRxCpltCallback>
2400c33c:	e742      	b.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_RxCpltCallback(hspi);
2400c33e:	f7f7 f901 	bl	24003544 <HAL_SPI_RxCpltCallback>
2400c342:	e73f      	b.n	2400c1c4 <HAL_SPI_IRQHandler+0xc4>
2400c344:	fffffc94 	.word	0xfffffc94
2400c348:	2400c0e1 	.word	0x2400c0e1

2400c34c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400c34c:	680b      	ldr	r3, [r1, #0]
{
2400c34e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400c350:	b9d3      	cbnz	r3, 2400c388 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c352:	6804      	ldr	r4, [r0, #0]
2400c354:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400c358:	684a      	ldr	r2, [r1, #4]
2400c35a:	4023      	ands	r3, r4
2400c35c:	4313      	orrs	r3, r2
2400c35e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400c362:	4323      	orrs	r3, r4
2400c364:	4313      	orrs	r3, r2
2400c366:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400c36a:	4323      	orrs	r3, r4
2400c36c:	4313      	orrs	r3, r2
2400c36e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400c372:	4323      	orrs	r3, r4
2400c374:	4313      	orrs	r3, r2
2400c376:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400c37a:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400c37c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c380:	4313      	orrs	r3, r2
2400c382:	6003      	str	r3, [r0, #0]
}
2400c384:	2000      	movs	r0, #0
2400c386:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c388:	6802      	ldr	r2, [r0, #0]
2400c38a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400c38e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400c392:	4322      	orrs	r2, r4
2400c394:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400c396:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400c398:	4b0a      	ldr	r3, [pc, #40]	; (2400c3c4 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400c39a:	4322      	orrs	r2, r4
2400c39c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400c39e:	6842      	ldr	r2, [r0, #4]
2400c3a0:	4013      	ands	r3, r2
2400c3a2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400c3a6:	4323      	orrs	r3, r4
2400c3a8:	4313      	orrs	r3, r2
2400c3aa:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400c3ae:	4323      	orrs	r3, r4
2400c3b0:	4313      	orrs	r3, r2
2400c3b2:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400c3b6:	4323      	orrs	r3, r4
}
2400c3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400c3bc:	4313      	orrs	r3, r2
2400c3be:	6043      	str	r3, [r0, #4]
}
2400c3c0:	2000      	movs	r0, #0
2400c3c2:	4770      	bx	lr
2400c3c4:	ffff8000 	.word	0xffff8000

2400c3c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400c3c8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400c3ca:	bb0a      	cbnz	r2, 2400c410 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400c3cc:	6883      	ldr	r3, [r0, #8]
2400c3ce:	e9d1 2400 	ldrd	r2, r4, [r1]
2400c3d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400c3d6:	3c01      	subs	r4, #1
2400c3d8:	3a01      	subs	r2, #1
2400c3da:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400c3de:	4313      	orrs	r3, r2
2400c3e0:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
2400c3e4:	3a01      	subs	r2, #1
2400c3e6:	3c01      	subs	r4, #1
2400c3e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400c3ec:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
2400c3f0:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
2400c3f4:	6989      	ldr	r1, [r1, #24]
2400c3f6:	3b01      	subs	r3, #1
2400c3f8:	3c01      	subs	r4, #1
2400c3fa:	3901      	subs	r1, #1
2400c3fc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
2400c400:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
2400c404:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400c408:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400c40a:	6083      	str	r3, [r0, #8]
}
2400c40c:	2000      	movs	r0, #0
2400c40e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400c410:	6882      	ldr	r2, [r0, #8]
2400c412:	68cc      	ldr	r4, [r1, #12]
2400c414:	4b11      	ldr	r3, [pc, #68]	; (2400c45c <FMC_SDRAM_Timing_Init+0x94>)
2400c416:	3c01      	subs	r4, #1
2400c418:	4013      	ands	r3, r2
2400c41a:	694a      	ldr	r2, [r1, #20]
2400c41c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400c420:	1e54      	subs	r4, r2, #1
2400c422:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400c426:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400c42a:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400c42c:	68c3      	ldr	r3, [r0, #12]
2400c42e:	1e6c      	subs	r4, r5, #1
2400c430:	3a01      	subs	r2, #1
2400c432:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400c436:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400c43a:	690c      	ldr	r4, [r1, #16]
2400c43c:	431a      	orrs	r2, r3
2400c43e:	688b      	ldr	r3, [r1, #8]
2400c440:	3c01      	subs	r4, #1
2400c442:	6989      	ldr	r1, [r1, #24]
2400c444:	3b01      	subs	r3, #1
2400c446:	3901      	subs	r1, #1
2400c448:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
2400c44c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2400c450:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
2400c454:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400c456:	60c3      	str	r3, [r0, #12]
}
2400c458:	2000      	movs	r0, #0
2400c45a:	4770      	bx	lr
2400c45c:	ff0f0fff 	.word	0xff0f0fff

2400c460 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400c460:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c462:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400c466:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c468:	6900      	ldr	r0, [r0, #16]
2400c46a:	4323      	orrs	r3, r4
2400c46c:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400c470:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400c474:	4c05      	ldr	r4, [pc, #20]	; (2400c48c <FMC_SDRAM_SendCommand+0x2c>)
2400c476:	3901      	subs	r1, #1
2400c478:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400c47a:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c47c:	4323      	orrs	r3, r4
}
2400c47e:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400c482:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400c486:	6113      	str	r3, [r2, #16]
}
2400c488:	4770      	bx	lr
2400c48a:	bf00      	nop
2400c48c:	ffc00000 	.word	0xffc00000

2400c490 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400c490:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c492:	4b05      	ldr	r3, [pc, #20]	; (2400c4a8 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400c494:	2000      	movs	r0, #0
{
2400c496:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c498:	6954      	ldr	r4, [r2, #20]
2400c49a:	4023      	ands	r3, r4
}
2400c49c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400c4a0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400c4a4:	6151      	str	r1, [r2, #20]
}
2400c4a6:	4770      	bx	lr
2400c4a8:	ffffc001 	.word	0xffffc001

2400c4ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400c4ac:	b084      	sub	sp, #16
2400c4ae:	b410      	push	{r4}
2400c4b0:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400c4b4:	4614      	mov	r4, r2
{
2400c4b6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400c4ba:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400c4bc:	9904      	ldr	r1, [sp, #16]
{
2400c4be:	4602      	mov	r2, r0
             Init.BusWide             | \
2400c4c0:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400c4c2:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c4c4:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400c4c6:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400c4c8:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400c4ca:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400c4cc:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400c4ce:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c4d0:	4903      	ldr	r1, [pc, #12]	; (2400c4e0 <SDMMC_Init+0x34>)
2400c4d2:	4021      	ands	r1, r4
}
2400c4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c4d8:	430b      	orrs	r3, r1
}
2400c4da:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400c4dc:	6053      	str	r3, [r2, #4]
}
2400c4de:	4770      	bx	lr
2400c4e0:	ffc02c00 	.word	0xffc02c00

2400c4e4 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400c4e4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400c4e8:	4770      	bx	lr
2400c4ea:	bf00      	nop

2400c4ec <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400c4ec:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400c4ee:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400c4f0:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400c4f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400c4f6:	4770      	bx	lr

2400c4f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400c4f8:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400c4fa:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400c4fc:	681a      	ldr	r2, [r3, #0]
2400c4fe:	f042 0203 	orr.w	r2, r2, #3
2400c502:	601a      	str	r2, [r3, #0]
}
2400c504:	4770      	bx	lr
2400c506:	bf00      	nop

2400c508 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400c508:	6800      	ldr	r0, [r0, #0]
}
2400c50a:	f000 0003 	and.w	r0, r0, #3
2400c50e:	4770      	bx	lr

2400c510 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400c510:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400c512:	5840      	ldr	r0, [r0, r1]
}
2400c514:	4770      	bx	lr
2400c516:	bf00      	nop

2400c518 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400c518:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400c51a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
2400c51e:	690d      	ldr	r5, [r1, #16]
{
2400c520:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400c522:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
2400c524:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
2400c526:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
2400c528:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   | \
2400c52a:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400c52c:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
2400c52e:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c530:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  | \
2400c532:	4303      	orrs	r3, r0

  return HAL_OK;

}
2400c534:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c536:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
2400c53a:	430b      	orrs	r3, r1
}
2400c53c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400c53e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400c540:	4770      	bx	lr
2400c542:	bf00      	nop

2400c544 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c544:	4a4c      	ldr	r2, [pc, #304]	; (2400c678 <SDMMC_CmdBlockLength+0x134>)
2400c546:	4b4d      	ldr	r3, [pc, #308]	; (2400c67c <SDMMC_CmdBlockLength+0x138>)
2400c548:	6812      	ldr	r2, [r2, #0]
{
2400c54a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c54c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c550:	4c4b      	ldr	r4, [pc, #300]	; (2400c680 <SDMMC_CmdBlockLength+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400c552:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c554:	f241 1310 	movw	r3, #4368	; 0x1110
2400c558:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c55a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c55c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c55e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c562:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c564:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c568:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
2400c56a:	b14a      	cbz	r2, 2400c580 <SDMMC_CmdBlockLength+0x3c>
2400c56c:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c56e:	4945      	ldr	r1, [pc, #276]	; (2400c684 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
2400c570:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c572:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c574:	420a      	tst	r2, r1
2400c576:	d001      	beq.n	2400c57c <SDMMC_CmdBlockLength+0x38>
2400c578:	0492      	lsls	r2, r2, #18
2400c57a:	d507      	bpl.n	2400c58c <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
2400c57c:	1c5c      	adds	r4, r3, #1
2400c57e:	d1f7      	bne.n	2400c570 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c584:	4618      	mov	r0, r3
2400c586:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c58a:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c58c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c58e:	075c      	lsls	r4, r3, #29
2400c590:	d43d      	bmi.n	2400c60e <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c592:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c594:	f013 0301 	ands.w	r3, r3, #1
2400c598:	d134      	bne.n	2400c604 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c59a:	4b3b      	ldr	r3, [pc, #236]	; (2400c688 <SDMMC_CmdBlockLength+0x144>)
2400c59c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c59e:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c5a0:	b2db      	uxtb	r3, r3
2400c5a2:	2b10      	cmp	r3, #16
2400c5a4:	d131      	bne.n	2400c60a <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c5a6:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c5a8:	4b38      	ldr	r3, [pc, #224]	; (2400c68c <SDMMC_CmdBlockLength+0x148>)
2400c5aa:	4013      	ands	r3, r2
2400c5ac:	2b00      	cmp	r3, #0
2400c5ae:	d0e9      	beq.n	2400c584 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c5b0:	2a00      	cmp	r2, #0
2400c5b2:	db30      	blt.n	2400c616 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c5b4:	0051      	lsls	r1, r2, #1
2400c5b6:	d431      	bmi.n	2400c61c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c5b8:	0094      	lsls	r4, r2, #2
2400c5ba:	d431      	bmi.n	2400c620 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c5bc:	00d0      	lsls	r0, r2, #3
2400c5be:	d431      	bmi.n	2400c624 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c5c0:	0111      	lsls	r1, r2, #4
2400c5c2:	d432      	bmi.n	2400c62a <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c5c4:	0154      	lsls	r4, r2, #5
2400c5c6:	d433      	bmi.n	2400c630 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c5c8:	01d0      	lsls	r0, r2, #7
2400c5ca:	d434      	bmi.n	2400c636 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c5cc:	0211      	lsls	r1, r2, #8
2400c5ce:	d435      	bmi.n	2400c63c <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c5d0:	0254      	lsls	r4, r2, #9
2400c5d2:	d436      	bmi.n	2400c642 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c5d4:	0290      	lsls	r0, r2, #10
2400c5d6:	d440      	bmi.n	2400c65a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c5d8:	02d1      	lsls	r1, r2, #11
2400c5da:	d43b      	bmi.n	2400c654 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c5dc:	0354      	lsls	r4, r2, #13
2400c5de:	d436      	bmi.n	2400c64e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c5e0:	0390      	lsls	r0, r2, #14
2400c5e2:	d431      	bmi.n	2400c648 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c5e4:	03d1      	lsls	r1, r2, #15
2400c5e6:	d444      	bmi.n	2400c672 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c5e8:	0414      	lsls	r4, r2, #16
2400c5ea:	d43f      	bmi.n	2400c66c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c5ec:	0450      	lsls	r0, r2, #17
2400c5ee:	d43a      	bmi.n	2400c666 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c5f0:	0491      	lsls	r1, r2, #18
2400c5f2:	d435      	bmi.n	2400c660 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c5f4:	f012 0f08 	tst.w	r2, #8
2400c5f8:	bf14      	ite	ne
2400c5fa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c5fe:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c602:	e7bf      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c604:	2201      	movs	r2, #1
2400c606:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c608:	e7bc      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c60a:	2301      	movs	r3, #1
2400c60c:	e7ba      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c60e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c610:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c612:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c614:	e7b6      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c61a:	e7b3      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c61c:	2340      	movs	r3, #64	; 0x40
2400c61e:	e7b1      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c620:	2380      	movs	r3, #128	; 0x80
2400c622:	e7af      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c624:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c628:	e7ac      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c62a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c62e:	e7a9      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c630:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c634:	e7a6      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c636:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c63a:	e7a3      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c63c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c640:	e7a0      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c646:	e79d      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c64c:	e79a      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c64e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c652:	e797      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c658:	e794      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c65a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c65e:	e791      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c664:	e78e      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c66a:	e78b      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c66c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c670:	e788      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c672:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c676:	e785      	b.n	2400c584 <SDMMC_CmdBlockLength+0x40>
2400c678:	20000750 	.word	0x20000750
2400c67c:	10624dd3 	.word	0x10624dd3
2400c680:	fffee0c0 	.word	0xfffee0c0
2400c684:	00200045 	.word	0x00200045
2400c688:	002000c5 	.word	0x002000c5
2400c68c:	fdffe008 	.word	0xfdffe008

2400c690 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c690:	4a4c      	ldr	r2, [pc, #304]	; (2400c7c4 <SDMMC_CmdReadSingleBlock+0x134>)
2400c692:	4b4d      	ldr	r3, [pc, #308]	; (2400c7c8 <SDMMC_CmdReadSingleBlock+0x138>)
2400c694:	6812      	ldr	r2, [r2, #0]
{
2400c696:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c698:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c69c:	4c4b      	ldr	r4, [pc, #300]	; (2400c7cc <SDMMC_CmdReadSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400c69e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6a0:	f241 1311 	movw	r3, #4369	; 0x1111
2400c6a4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6a6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6a8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6aa:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6ae:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6b0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6b4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c6b6:	b14a      	cbz	r2, 2400c6cc <SDMMC_CmdReadSingleBlock+0x3c>
2400c6b8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c6ba:	4945      	ldr	r1, [pc, #276]	; (2400c7d0 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400c6bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c6be:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c6c0:	420a      	tst	r2, r1
2400c6c2:	d001      	beq.n	2400c6c8 <SDMMC_CmdReadSingleBlock+0x38>
2400c6c4:	0492      	lsls	r2, r2, #18
2400c6c6:	d507      	bpl.n	2400c6d8 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
2400c6c8:	1c5c      	adds	r4, r3, #1
2400c6ca:	d1f7      	bne.n	2400c6bc <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c6cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c6d0:	4618      	mov	r0, r3
2400c6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c6d6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c6d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c6da:	075c      	lsls	r4, r3, #29
2400c6dc:	d43d      	bmi.n	2400c75a <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c6de:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c6e0:	f013 0301 	ands.w	r3, r3, #1
2400c6e4:	d134      	bne.n	2400c750 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c6e6:	4b3b      	ldr	r3, [pc, #236]	; (2400c7d4 <SDMMC_CmdReadSingleBlock+0x144>)
2400c6e8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c6ea:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c6ec:	b2db      	uxtb	r3, r3
2400c6ee:	2b11      	cmp	r3, #17
2400c6f0:	d131      	bne.n	2400c756 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c6f2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c6f4:	4b38      	ldr	r3, [pc, #224]	; (2400c7d8 <SDMMC_CmdReadSingleBlock+0x148>)
2400c6f6:	4013      	ands	r3, r2
2400c6f8:	2b00      	cmp	r3, #0
2400c6fa:	d0e9      	beq.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c6fc:	2a00      	cmp	r2, #0
2400c6fe:	db30      	blt.n	2400c762 <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c700:	0051      	lsls	r1, r2, #1
2400c702:	d431      	bmi.n	2400c768 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c704:	0094      	lsls	r4, r2, #2
2400c706:	d431      	bmi.n	2400c76c <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c708:	00d0      	lsls	r0, r2, #3
2400c70a:	d431      	bmi.n	2400c770 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c70c:	0111      	lsls	r1, r2, #4
2400c70e:	d432      	bmi.n	2400c776 <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c710:	0154      	lsls	r4, r2, #5
2400c712:	d433      	bmi.n	2400c77c <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c714:	01d0      	lsls	r0, r2, #7
2400c716:	d434      	bmi.n	2400c782 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c718:	0211      	lsls	r1, r2, #8
2400c71a:	d435      	bmi.n	2400c788 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c71c:	0254      	lsls	r4, r2, #9
2400c71e:	d436      	bmi.n	2400c78e <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c720:	0290      	lsls	r0, r2, #10
2400c722:	d440      	bmi.n	2400c7a6 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c724:	02d1      	lsls	r1, r2, #11
2400c726:	d43b      	bmi.n	2400c7a0 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c728:	0354      	lsls	r4, r2, #13
2400c72a:	d436      	bmi.n	2400c79a <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c72c:	0390      	lsls	r0, r2, #14
2400c72e:	d431      	bmi.n	2400c794 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c730:	03d1      	lsls	r1, r2, #15
2400c732:	d444      	bmi.n	2400c7be <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c734:	0414      	lsls	r4, r2, #16
2400c736:	d43f      	bmi.n	2400c7b8 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c738:	0450      	lsls	r0, r2, #17
2400c73a:	d43a      	bmi.n	2400c7b2 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c73c:	0491      	lsls	r1, r2, #18
2400c73e:	d435      	bmi.n	2400c7ac <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c740:	f012 0f08 	tst.w	r2, #8
2400c744:	bf14      	ite	ne
2400c746:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c74a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c74e:	e7bf      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c750:	2201      	movs	r2, #1
2400c752:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c754:	e7bc      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c756:	2301      	movs	r3, #1
2400c758:	e7ba      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c75a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c75c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c75e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c760:	e7b6      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c766:	e7b3      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c768:	2340      	movs	r3, #64	; 0x40
2400c76a:	e7b1      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c76c:	2380      	movs	r3, #128	; 0x80
2400c76e:	e7af      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c770:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c774:	e7ac      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c776:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c77a:	e7a9      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c780:	e7a6      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c782:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c786:	e7a3      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c78c:	e7a0      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c78e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c792:	e79d      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c798:	e79a      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c79a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c79e:	e797      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c7a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c7a4:	e794      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c7a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c7aa:	e791      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c7ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c7b0:	e78e      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c7b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c7b6:	e78b      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c7b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c7bc:	e788      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c7be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c7c2:	e785      	b.n	2400c6d0 <SDMMC_CmdReadSingleBlock+0x40>
2400c7c4:	20000750 	.word	0x20000750
2400c7c8:	10624dd3 	.word	0x10624dd3
2400c7cc:	fffee0c0 	.word	0xfffee0c0
2400c7d0:	00200045 	.word	0x00200045
2400c7d4:	002000c5 	.word	0x002000c5
2400c7d8:	fdffe008 	.word	0xfdffe008

2400c7dc <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7dc:	4a4c      	ldr	r2, [pc, #304]	; (2400c910 <SDMMC_CmdReadMultiBlock+0x134>)
2400c7de:	4b4d      	ldr	r3, [pc, #308]	; (2400c914 <SDMMC_CmdReadMultiBlock+0x138>)
2400c7e0:	6812      	ldr	r2, [r2, #0]
{
2400c7e2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7e4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7e8:	4c4b      	ldr	r4, [pc, #300]	; (2400c918 <SDMMC_CmdReadMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400c7ea:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7ec:	f241 1312 	movw	r3, #4370	; 0x1112
2400c7f0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7f4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7f6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7fa:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7fc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c800:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c802:	b14a      	cbz	r2, 2400c818 <SDMMC_CmdReadMultiBlock+0x3c>
2400c804:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c806:	4945      	ldr	r1, [pc, #276]	; (2400c91c <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400c808:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c80a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c80c:	420a      	tst	r2, r1
2400c80e:	d001      	beq.n	2400c814 <SDMMC_CmdReadMultiBlock+0x38>
2400c810:	0492      	lsls	r2, r2, #18
2400c812:	d507      	bpl.n	2400c824 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
2400c814:	1c5c      	adds	r4, r3, #1
2400c816:	d1f7      	bne.n	2400c808 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c81c:	4618      	mov	r0, r3
2400c81e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c822:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c824:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c826:	075c      	lsls	r4, r3, #29
2400c828:	d43d      	bmi.n	2400c8a6 <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c82a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c82c:	f013 0301 	ands.w	r3, r3, #1
2400c830:	d134      	bne.n	2400c89c <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c832:	4b3b      	ldr	r3, [pc, #236]	; (2400c920 <SDMMC_CmdReadMultiBlock+0x144>)
2400c834:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c836:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c838:	b2db      	uxtb	r3, r3
2400c83a:	2b12      	cmp	r3, #18
2400c83c:	d131      	bne.n	2400c8a2 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c83e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c840:	4b38      	ldr	r3, [pc, #224]	; (2400c924 <SDMMC_CmdReadMultiBlock+0x148>)
2400c842:	4013      	ands	r3, r2
2400c844:	2b00      	cmp	r3, #0
2400c846:	d0e9      	beq.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c848:	2a00      	cmp	r2, #0
2400c84a:	db30      	blt.n	2400c8ae <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c84c:	0051      	lsls	r1, r2, #1
2400c84e:	d431      	bmi.n	2400c8b4 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c850:	0094      	lsls	r4, r2, #2
2400c852:	d431      	bmi.n	2400c8b8 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c854:	00d0      	lsls	r0, r2, #3
2400c856:	d431      	bmi.n	2400c8bc <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c858:	0111      	lsls	r1, r2, #4
2400c85a:	d432      	bmi.n	2400c8c2 <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c85c:	0154      	lsls	r4, r2, #5
2400c85e:	d433      	bmi.n	2400c8c8 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c860:	01d0      	lsls	r0, r2, #7
2400c862:	d434      	bmi.n	2400c8ce <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c864:	0211      	lsls	r1, r2, #8
2400c866:	d435      	bmi.n	2400c8d4 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c868:	0254      	lsls	r4, r2, #9
2400c86a:	d436      	bmi.n	2400c8da <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c86c:	0290      	lsls	r0, r2, #10
2400c86e:	d440      	bmi.n	2400c8f2 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c870:	02d1      	lsls	r1, r2, #11
2400c872:	d43b      	bmi.n	2400c8ec <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c874:	0354      	lsls	r4, r2, #13
2400c876:	d436      	bmi.n	2400c8e6 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c878:	0390      	lsls	r0, r2, #14
2400c87a:	d431      	bmi.n	2400c8e0 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c87c:	03d1      	lsls	r1, r2, #15
2400c87e:	d444      	bmi.n	2400c90a <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c880:	0414      	lsls	r4, r2, #16
2400c882:	d43f      	bmi.n	2400c904 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c884:	0450      	lsls	r0, r2, #17
2400c886:	d43a      	bmi.n	2400c8fe <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c888:	0491      	lsls	r1, r2, #18
2400c88a:	d435      	bmi.n	2400c8f8 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c88c:	f012 0f08 	tst.w	r2, #8
2400c890:	bf14      	ite	ne
2400c892:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c896:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c89a:	e7bf      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c89c:	2201      	movs	r2, #1
2400c89e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8a0:	e7bc      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8a2:	2301      	movs	r3, #1
2400c8a4:	e7ba      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8a6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c8a8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8aa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c8ac:	e7b6      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c8ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c8b2:	e7b3      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c8b4:	2340      	movs	r3, #64	; 0x40
2400c8b6:	e7b1      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c8b8:	2380      	movs	r3, #128	; 0x80
2400c8ba:	e7af      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c8bc:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c8c0:	e7ac      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c8c6:	e7a9      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c8c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c8cc:	e7a6      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c8ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c8d2:	e7a3      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c8d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c8d8:	e7a0      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c8da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c8de:	e79d      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c8e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c8e4:	e79a      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c8e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c8ea:	e797      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c8ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c8f0:	e794      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c8f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c8f6:	e791      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c8f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c8fc:	e78e      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c8fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c902:	e78b      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c908:	e788      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c90a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c90e:	e785      	b.n	2400c81c <SDMMC_CmdReadMultiBlock+0x40>
2400c910:	20000750 	.word	0x20000750
2400c914:	10624dd3 	.word	0x10624dd3
2400c918:	fffee0c0 	.word	0xfffee0c0
2400c91c:	00200045 	.word	0x00200045
2400c920:	002000c5 	.word	0x002000c5
2400c924:	fdffe008 	.word	0xfdffe008

2400c928 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c928:	4a4c      	ldr	r2, [pc, #304]	; (2400ca5c <SDMMC_CmdWriteSingleBlock+0x134>)
2400c92a:	4b4d      	ldr	r3, [pc, #308]	; (2400ca60 <SDMMC_CmdWriteSingleBlock+0x138>)
2400c92c:	6812      	ldr	r2, [r2, #0]
{
2400c92e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c930:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c934:	4c4b      	ldr	r4, [pc, #300]	; (2400ca64 <SDMMC_CmdWriteSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400c936:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c938:	f241 1318 	movw	r3, #4376	; 0x1118
2400c93c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c93e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c940:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c942:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c946:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c948:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c94c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c94e:	b14a      	cbz	r2, 2400c964 <SDMMC_CmdWriteSingleBlock+0x3c>
2400c950:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c952:	4945      	ldr	r1, [pc, #276]	; (2400ca68 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400c954:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c956:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c958:	420a      	tst	r2, r1
2400c95a:	d001      	beq.n	2400c960 <SDMMC_CmdWriteSingleBlock+0x38>
2400c95c:	0492      	lsls	r2, r2, #18
2400c95e:	d507      	bpl.n	2400c970 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
2400c960:	1c5c      	adds	r4, r3, #1
2400c962:	d1f7      	bne.n	2400c954 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c968:	4618      	mov	r0, r3
2400c96a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c96e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c970:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c972:	075c      	lsls	r4, r3, #29
2400c974:	d43d      	bmi.n	2400c9f2 <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c976:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c978:	f013 0301 	ands.w	r3, r3, #1
2400c97c:	d134      	bne.n	2400c9e8 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c97e:	4b3b      	ldr	r3, [pc, #236]	; (2400ca6c <SDMMC_CmdWriteSingleBlock+0x144>)
2400c980:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c982:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c984:	b2db      	uxtb	r3, r3
2400c986:	2b18      	cmp	r3, #24
2400c988:	d131      	bne.n	2400c9ee <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c98a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c98c:	4b38      	ldr	r3, [pc, #224]	; (2400ca70 <SDMMC_CmdWriteSingleBlock+0x148>)
2400c98e:	4013      	ands	r3, r2
2400c990:	2b00      	cmp	r3, #0
2400c992:	d0e9      	beq.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c994:	2a00      	cmp	r2, #0
2400c996:	db30      	blt.n	2400c9fa <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c998:	0051      	lsls	r1, r2, #1
2400c99a:	d431      	bmi.n	2400ca00 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c99c:	0094      	lsls	r4, r2, #2
2400c99e:	d431      	bmi.n	2400ca04 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c9a0:	00d0      	lsls	r0, r2, #3
2400c9a2:	d431      	bmi.n	2400ca08 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c9a4:	0111      	lsls	r1, r2, #4
2400c9a6:	d432      	bmi.n	2400ca0e <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c9a8:	0154      	lsls	r4, r2, #5
2400c9aa:	d433      	bmi.n	2400ca14 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c9ac:	01d0      	lsls	r0, r2, #7
2400c9ae:	d434      	bmi.n	2400ca1a <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c9b0:	0211      	lsls	r1, r2, #8
2400c9b2:	d435      	bmi.n	2400ca20 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c9b4:	0254      	lsls	r4, r2, #9
2400c9b6:	d436      	bmi.n	2400ca26 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c9b8:	0290      	lsls	r0, r2, #10
2400c9ba:	d440      	bmi.n	2400ca3e <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c9bc:	02d1      	lsls	r1, r2, #11
2400c9be:	d43b      	bmi.n	2400ca38 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c9c0:	0354      	lsls	r4, r2, #13
2400c9c2:	d436      	bmi.n	2400ca32 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c9c4:	0390      	lsls	r0, r2, #14
2400c9c6:	d431      	bmi.n	2400ca2c <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c9c8:	03d1      	lsls	r1, r2, #15
2400c9ca:	d444      	bmi.n	2400ca56 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c9cc:	0414      	lsls	r4, r2, #16
2400c9ce:	d43f      	bmi.n	2400ca50 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c9d0:	0450      	lsls	r0, r2, #17
2400c9d2:	d43a      	bmi.n	2400ca4a <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c9d4:	0491      	lsls	r1, r2, #18
2400c9d6:	d435      	bmi.n	2400ca44 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c9d8:	f012 0f08 	tst.w	r2, #8
2400c9dc:	bf14      	ite	ne
2400c9de:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c9e2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c9e6:	e7bf      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c9e8:	2201      	movs	r2, #1
2400c9ea:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c9ec:	e7bc      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c9ee:	2301      	movs	r3, #1
2400c9f0:	e7ba      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c9f2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c9f4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c9f6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c9f8:	e7b6      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c9fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c9fe:	e7b3      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ca00:	2340      	movs	r3, #64	; 0x40
2400ca02:	e7b1      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ca04:	2380      	movs	r3, #128	; 0x80
2400ca06:	e7af      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ca08:	f44f 7380 	mov.w	r3, #256	; 0x100
2400ca0c:	e7ac      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ca0e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400ca12:	e7a9      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ca14:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400ca18:	e7a6      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ca1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ca1e:	e7a3      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ca20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ca24:	e7a0      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ca26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ca2a:	e79d      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ca2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400ca30:	e79a      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ca32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400ca36:	e797      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400ca38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400ca3c:	e794      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ca3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ca42:	e791      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400ca44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ca48:	e78e      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ca4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ca4e:	e78b      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ca50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400ca54:	e788      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ca56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ca5a:	e785      	b.n	2400c968 <SDMMC_CmdWriteSingleBlock+0x40>
2400ca5c:	20000750 	.word	0x20000750
2400ca60:	10624dd3 	.word	0x10624dd3
2400ca64:	fffee0c0 	.word	0xfffee0c0
2400ca68:	00200045 	.word	0x00200045
2400ca6c:	002000c5 	.word	0x002000c5
2400ca70:	fdffe008 	.word	0xfdffe008

2400ca74 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca74:	4a4c      	ldr	r2, [pc, #304]	; (2400cba8 <SDMMC_CmdWriteMultiBlock+0x134>)
2400ca76:	4b4d      	ldr	r3, [pc, #308]	; (2400cbac <SDMMC_CmdWriteMultiBlock+0x138>)
2400ca78:	6812      	ldr	r2, [r2, #0]
{
2400ca7a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca7c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca80:	4c4b      	ldr	r4, [pc, #300]	; (2400cbb0 <SDMMC_CmdWriteMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400ca82:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca84:	f241 1319 	movw	r3, #4377	; 0x1119
2400ca88:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca8a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca8c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca8e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca92:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca94:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca98:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400ca9a:	b14a      	cbz	r2, 2400cab0 <SDMMC_CmdWriteMultiBlock+0x3c>
2400ca9c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ca9e:	4945      	ldr	r1, [pc, #276]	; (2400cbb4 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400caa0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400caa2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400caa4:	420a      	tst	r2, r1
2400caa6:	d001      	beq.n	2400caac <SDMMC_CmdWriteMultiBlock+0x38>
2400caa8:	0492      	lsls	r2, r2, #18
2400caaa:	d507      	bpl.n	2400cabc <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
2400caac:	1c5c      	adds	r4, r3, #1
2400caae:	d1f7      	bne.n	2400caa0 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400cab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400cab4:	4618      	mov	r0, r3
2400cab6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400caba:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cabc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cabe:	075c      	lsls	r4, r3, #29
2400cac0:	d43d      	bmi.n	2400cb3e <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cac4:	f013 0301 	ands.w	r3, r3, #1
2400cac8:	d134      	bne.n	2400cb34 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400caca:	4b3b      	ldr	r3, [pc, #236]	; (2400cbb8 <SDMMC_CmdWriteMultiBlock+0x144>)
2400cacc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cace:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cad0:	b2db      	uxtb	r3, r3
2400cad2:	2b19      	cmp	r3, #25
2400cad4:	d131      	bne.n	2400cb3a <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400cad6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cad8:	4b38      	ldr	r3, [pc, #224]	; (2400cbbc <SDMMC_CmdWriteMultiBlock+0x148>)
2400cada:	4013      	ands	r3, r2
2400cadc:	2b00      	cmp	r3, #0
2400cade:	d0e9      	beq.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cae0:	2a00      	cmp	r2, #0
2400cae2:	db30      	blt.n	2400cb46 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cae4:	0051      	lsls	r1, r2, #1
2400cae6:	d431      	bmi.n	2400cb4c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cae8:	0094      	lsls	r4, r2, #2
2400caea:	d431      	bmi.n	2400cb50 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400caec:	00d0      	lsls	r0, r2, #3
2400caee:	d431      	bmi.n	2400cb54 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400caf0:	0111      	lsls	r1, r2, #4
2400caf2:	d432      	bmi.n	2400cb5a <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400caf4:	0154      	lsls	r4, r2, #5
2400caf6:	d433      	bmi.n	2400cb60 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400caf8:	01d0      	lsls	r0, r2, #7
2400cafa:	d434      	bmi.n	2400cb66 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cafc:	0211      	lsls	r1, r2, #8
2400cafe:	d435      	bmi.n	2400cb6c <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cb00:	0254      	lsls	r4, r2, #9
2400cb02:	d436      	bmi.n	2400cb72 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cb04:	0290      	lsls	r0, r2, #10
2400cb06:	d440      	bmi.n	2400cb8a <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cb08:	02d1      	lsls	r1, r2, #11
2400cb0a:	d43b      	bmi.n	2400cb84 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cb0c:	0354      	lsls	r4, r2, #13
2400cb0e:	d436      	bmi.n	2400cb7e <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cb10:	0390      	lsls	r0, r2, #14
2400cb12:	d431      	bmi.n	2400cb78 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cb14:	03d1      	lsls	r1, r2, #15
2400cb16:	d444      	bmi.n	2400cba2 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cb18:	0414      	lsls	r4, r2, #16
2400cb1a:	d43f      	bmi.n	2400cb9c <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cb1c:	0450      	lsls	r0, r2, #17
2400cb1e:	d43a      	bmi.n	2400cb96 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cb20:	0491      	lsls	r1, r2, #18
2400cb22:	d435      	bmi.n	2400cb90 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cb24:	f012 0f08 	tst.w	r2, #8
2400cb28:	bf14      	ite	ne
2400cb2a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400cb2e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400cb32:	e7bf      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cb34:	2201      	movs	r2, #1
2400cb36:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cb38:	e7bc      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cb3a:	2301      	movs	r3, #1
2400cb3c:	e7ba      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cb3e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cb40:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cb42:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cb44:	e7b6      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cb46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cb4a:	e7b3      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cb4c:	2340      	movs	r3, #64	; 0x40
2400cb4e:	e7b1      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cb50:	2380      	movs	r3, #128	; 0x80
2400cb52:	e7af      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cb54:	f44f 7380 	mov.w	r3, #256	; 0x100
2400cb58:	e7ac      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cb5a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400cb5e:	e7a9      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cb60:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400cb64:	e7a6      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cb66:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400cb6a:	e7a3      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cb6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400cb70:	e7a0      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cb72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400cb76:	e79d      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cb78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400cb7c:	e79a      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cb7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400cb82:	e797      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400cb84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400cb88:	e794      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cb8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400cb8e:	e791      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400cb90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400cb94:	e78e      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cb96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400cb9a:	e78b      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cb9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400cba0:	e788      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400cba6:	e785      	b.n	2400cab4 <SDMMC_CmdWriteMultiBlock+0x40>
2400cba8:	20000750 	.word	0x20000750
2400cbac:	10624dd3 	.word	0x10624dd3
2400cbb0:	fffee0c0 	.word	0xfffee0c0
2400cbb4:	00200045 	.word	0x00200045
2400cbb8:	002000c5 	.word	0x002000c5
2400cbbc:	fdffe008 	.word	0xfdffe008

2400cbc0 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbc0:	4b7d      	ldr	r3, [pc, #500]	; (2400cdb8 <SDMMC_CmdStopTransfer+0x1f8>)
2400cbc2:	497e      	ldr	r1, [pc, #504]	; (2400cdbc <SDMMC_CmdStopTransfer+0x1fc>)
2400cbc4:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbc6:	4b7e      	ldr	r3, [pc, #504]	; (2400cdc0 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbc8:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400cbcc:	68c1      	ldr	r1, [r0, #12]
2400cbce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbd2:	0a52      	lsrs	r2, r2, #9
{
2400cbd4:	b430      	push	{r4, r5}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400cbd6:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
2400cbd8:	2400      	movs	r4, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400cbda:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbdc:	4d79      	ldr	r5, [pc, #484]	; (2400cdc4 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400cbde:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbe2:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400cbe6:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbe8:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400cbec:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbee:	68c4      	ldr	r4, [r0, #12]
2400cbf0:	4023      	ands	r3, r4
2400cbf2:	4319      	orrs	r1, r3
2400cbf4:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
2400cbf6:	b14a      	cbz	r2, 2400cc0c <SDMMC_CmdStopTransfer+0x4c>
2400cbf8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cbfa:	4973      	ldr	r1, [pc, #460]	; (2400cdc8 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
2400cbfc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400cbfe:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cc00:	420a      	tst	r2, r1
2400cc02:	d001      	beq.n	2400cc08 <SDMMC_CmdStopTransfer+0x48>
2400cc04:	0492      	lsls	r2, r2, #18
2400cc06:	d50a      	bpl.n	2400cc1e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400cc08:	1c5c      	adds	r4, r3, #1
2400cc0a:	d1f7      	bne.n	2400cbfc <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cc0c:	68c2      	ldr	r2, [r0, #12]
2400cc0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400cc12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cc16:	60c2      	str	r2, [r0, #12]
}
2400cc18:	4618      	mov	r0, r3
2400cc1a:	bc30      	pop	{r4, r5}
2400cc1c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cc1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc20:	075b      	lsls	r3, r3, #29
2400cc22:	d454      	bmi.n	2400ccce <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cc24:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc26:	f013 0301 	ands.w	r3, r3, #1
2400cc2a:	d13c      	bne.n	2400cca6 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cc2c:	4a67      	ldr	r2, [pc, #412]	; (2400cdcc <SDMMC_CmdStopTransfer+0x20c>)
2400cc2e:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cc30:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cc32:	b2d2      	uxtb	r2, r2
2400cc34:	2a0c      	cmp	r2, #12
2400cc36:	d144      	bne.n	2400ccc2 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
2400cc38:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cc3a:	4965      	ldr	r1, [pc, #404]	; (2400cdd0 <SDMMC_CmdStopTransfer+0x210>)
2400cc3c:	4011      	ands	r1, r2
2400cc3e:	2900      	cmp	r1, #0
2400cc40:	d038      	beq.n	2400ccb4 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cc42:	2a00      	cmp	r2, #0
2400cc44:	db36      	blt.n	2400ccb4 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cc46:	0055      	lsls	r5, r2, #1
2400cc48:	d448      	bmi.n	2400ccdc <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cc4a:	0094      	lsls	r4, r2, #2
2400cc4c:	d44c      	bmi.n	2400cce8 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cc4e:	00d1      	lsls	r1, r2, #3
2400cc50:	d450      	bmi.n	2400ccf4 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cc52:	0113      	lsls	r3, r2, #4
2400cc54:	d455      	bmi.n	2400cd02 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cc56:	0155      	lsls	r5, r2, #5
2400cc58:	d45a      	bmi.n	2400cd10 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cc5a:	01d4      	lsls	r4, r2, #7
2400cc5c:	d466      	bmi.n	2400cd2c <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cc5e:	0211      	lsls	r1, r2, #8
2400cc60:	d45d      	bmi.n	2400cd1e <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cc62:	0253      	lsls	r3, r2, #9
2400cc64:	d470      	bmi.n	2400cd48 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cc66:	0295      	lsls	r5, r2, #10
2400cc68:	d467      	bmi.n	2400cd3a <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cc6a:	02d4      	lsls	r4, r2, #11
2400cc6c:	f100 8081 	bmi.w	2400cd72 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cc70:	0351      	lsls	r1, r2, #13
2400cc72:	d477      	bmi.n	2400cd64 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cc74:	0393      	lsls	r3, r2, #14
2400cc76:	d46e      	bmi.n	2400cd56 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cc78:	03d5      	lsls	r5, r2, #15
2400cc7a:	f100 8096 	bmi.w	2400cdaa <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cc7e:	0414      	lsls	r4, r2, #16
2400cc80:	f100 8085 	bmi.w	2400cd8e <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cc84:	0451      	lsls	r1, r2, #17
2400cc86:	d47b      	bmi.n	2400cd80 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cc88:	0493      	lsls	r3, r2, #18
2400cc8a:	f100 8087 	bmi.w	2400cd9c <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400cc8e:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cc92:	68c2      	ldr	r2, [r0, #12]
2400cc94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400cc98:	bf14      	ite	ne
2400cc9a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cc9e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cca2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cca4:	e7b8      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cca6:	2201      	movs	r2, #1
2400cca8:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccaa:	68c2      	ldr	r2, [r0, #12]
2400ccac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ccb0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ccb2:	e7b1      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccb4:	68c2      	ldr	r2, [r0, #12]
2400ccb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
2400ccba:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccbc:	60c2      	str	r2, [r0, #12]
}
2400ccbe:	4618      	mov	r0, r3
2400ccc0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccc2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ccc4:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ccca:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cccc:	e7a4      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ccce:	2304      	movs	r3, #4
2400ccd0:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccd2:	68c2      	ldr	r2, [r0, #12]
2400ccd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ccd8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ccda:	e79d      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccdc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ccde:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cce4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cce6:	e797      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cce8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ccea:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ccf0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400ccf2:	e791      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccf4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ccf6:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400ccfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400ccfe:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd00:	e78a      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd02:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cd04:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd0c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd0e:	e783      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd10:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cd12:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd1a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd1c:	e77c      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd1e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cd20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd28:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd2a:	e775      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd2c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cd2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd36:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd38:	e76e      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd3a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cd3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd44:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd46:	e767      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd48:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cd4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd52:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd54:	e760      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd56:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cd58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd60:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd62:	e759      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd64:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cd66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd6e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd70:	e752      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd72:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
2400cd74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd7c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd7e:	e74b      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd80:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cd82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd8a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd8c:	e744      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd8e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cd90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cd98:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cd9a:	e73d      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cd9c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400cd9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cda2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cda6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cda8:	e736      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdaa:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cdac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400cdb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400cdb4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400cdb6:	e72f      	b.n	2400cc18 <SDMMC_CmdStopTransfer+0x58>
2400cdb8:	20000750 	.word	0x20000750
2400cdbc:	10624dd3 	.word	0x10624dd3
2400cdc0:	fffee0c0 	.word	0xfffee0c0
2400cdc4:	05f5e100 	.word	0x05f5e100
2400cdc8:	00200045 	.word	0x00200045
2400cdcc:	002000c5 	.word	0x002000c5
2400cdd0:	fdffe008 	.word	0xfdffe008

2400cdd4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdd4:	4a4c      	ldr	r2, [pc, #304]	; (2400cf08 <SDMMC_CmdSelDesel+0x134>)
2400cdd6:	4b4d      	ldr	r3, [pc, #308]	; (2400cf0c <SDMMC_CmdSelDesel+0x138>)
2400cdd8:	6812      	ldr	r2, [r2, #0]
{
2400cdda:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cddc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cde0:	4c4b      	ldr	r4, [pc, #300]	; (2400cf10 <SDMMC_CmdSelDesel+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400cde2:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cde4:	f241 1307 	movw	r3, #4359	; 0x1107
2400cde8:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cdec:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdee:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cdf2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cdf4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cdf8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400cdfa:	b14a      	cbz	r2, 2400ce10 <SDMMC_CmdSelDesel+0x3c>
2400cdfc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cdfe:	4945      	ldr	r1, [pc, #276]	; (2400cf14 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
2400ce00:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400ce02:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ce04:	420a      	tst	r2, r1
2400ce06:	d001      	beq.n	2400ce0c <SDMMC_CmdSelDesel+0x38>
2400ce08:	0492      	lsls	r2, r2, #18
2400ce0a:	d507      	bpl.n	2400ce1c <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
2400ce0c:	1c5c      	adds	r4, r3, #1
2400ce0e:	d1f7      	bne.n	2400ce00 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400ce10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400ce14:	4618      	mov	r0, r3
2400ce16:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ce1a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ce1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ce1e:	075c      	lsls	r4, r3, #29
2400ce20:	d43d      	bmi.n	2400ce9e <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ce22:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ce24:	f013 0301 	ands.w	r3, r3, #1
2400ce28:	d134      	bne.n	2400ce94 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ce2a:	4b3b      	ldr	r3, [pc, #236]	; (2400cf18 <SDMMC_CmdSelDesel+0x144>)
2400ce2c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ce2e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ce30:	b2db      	uxtb	r3, r3
2400ce32:	2b07      	cmp	r3, #7
2400ce34:	d131      	bne.n	2400ce9a <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
2400ce36:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ce38:	4b38      	ldr	r3, [pc, #224]	; (2400cf1c <SDMMC_CmdSelDesel+0x148>)
2400ce3a:	4013      	ands	r3, r2
2400ce3c:	2b00      	cmp	r3, #0
2400ce3e:	d0e9      	beq.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ce40:	2a00      	cmp	r2, #0
2400ce42:	db30      	blt.n	2400cea6 <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ce44:	0051      	lsls	r1, r2, #1
2400ce46:	d431      	bmi.n	2400ceac <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ce48:	0094      	lsls	r4, r2, #2
2400ce4a:	d431      	bmi.n	2400ceb0 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ce4c:	00d0      	lsls	r0, r2, #3
2400ce4e:	d431      	bmi.n	2400ceb4 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ce50:	0111      	lsls	r1, r2, #4
2400ce52:	d432      	bmi.n	2400ceba <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ce54:	0154      	lsls	r4, r2, #5
2400ce56:	d433      	bmi.n	2400cec0 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ce58:	01d0      	lsls	r0, r2, #7
2400ce5a:	d434      	bmi.n	2400cec6 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ce5c:	0211      	lsls	r1, r2, #8
2400ce5e:	d435      	bmi.n	2400cecc <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ce60:	0254      	lsls	r4, r2, #9
2400ce62:	d436      	bmi.n	2400ced2 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ce64:	0290      	lsls	r0, r2, #10
2400ce66:	d440      	bmi.n	2400ceea <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ce68:	02d1      	lsls	r1, r2, #11
2400ce6a:	d43b      	bmi.n	2400cee4 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ce6c:	0354      	lsls	r4, r2, #13
2400ce6e:	d436      	bmi.n	2400cede <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ce70:	0390      	lsls	r0, r2, #14
2400ce72:	d431      	bmi.n	2400ced8 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ce74:	03d1      	lsls	r1, r2, #15
2400ce76:	d444      	bmi.n	2400cf02 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ce78:	0414      	lsls	r4, r2, #16
2400ce7a:	d43f      	bmi.n	2400cefc <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ce7c:	0450      	lsls	r0, r2, #17
2400ce7e:	d43a      	bmi.n	2400cef6 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ce80:	0491      	lsls	r1, r2, #18
2400ce82:	d435      	bmi.n	2400cef0 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ce84:	f012 0f08 	tst.w	r2, #8
2400ce88:	bf14      	ite	ne
2400ce8a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400ce8e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400ce92:	e7bf      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ce94:	2201      	movs	r2, #1
2400ce96:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ce98:	e7bc      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ce9a:	2301      	movs	r3, #1
2400ce9c:	e7ba      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ce9e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cea0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cea2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cea4:	e7b6      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ceaa:	e7b3      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ceac:	2340      	movs	r3, #64	; 0x40
2400ceae:	e7b1      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ceb0:	2380      	movs	r3, #128	; 0x80
2400ceb2:	e7af      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ceb4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400ceb8:	e7ac      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ceba:	f44f 7300 	mov.w	r3, #512	; 0x200
2400cebe:	e7a9      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400cec4:	e7a6      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ceca:	e7a3      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ced0:	e7a0      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ced2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ced6:	e79d      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ced8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400cedc:	e79a      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400cee2:	e797      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
2400cee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400cee8:	e794      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ceea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ceee:	e791      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400cef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400cef4:	e78e      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cef6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400cefa:	e78b      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cefc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400cf00:	e788      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cf02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400cf06:	e785      	b.n	2400ce14 <SDMMC_CmdSelDesel+0x40>
2400cf08:	20000750 	.word	0x20000750
2400cf0c:	10624dd3 	.word	0x10624dd3
2400cf10:	fffee0c0 	.word	0xfffee0c0
2400cf14:	00200045 	.word	0x00200045
2400cf18:	002000c5 	.word	0x002000c5
2400cf1c:	fdffe008 	.word	0xfdffe008

2400cf20 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf20:	4b11      	ldr	r3, [pc, #68]	; (2400cf68 <SDMMC_CmdGoIdleState+0x48>)
{
2400cf22:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf24:	4a11      	ldr	r2, [pc, #68]	; (2400cf6c <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf26:	681b      	ldr	r3, [r3, #0]
{
2400cf28:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf2a:	4c11      	ldr	r4, [pc, #68]	; (2400cf70 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400cf2c:	2500      	movs	r5, #0
2400cf2e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf30:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf34:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf36:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf3a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf3c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf42:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf46:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf48:	e002      	b.n	2400cf50 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400cf4a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400cf4c:	0612      	lsls	r2, r2, #24
2400cf4e:	d405      	bmi.n	2400cf5c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400cf50:	3b01      	subs	r3, #1
2400cf52:	d2fa      	bcs.n	2400cf4a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400cf54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cf58:	bc30      	pop	{r4, r5}
2400cf5a:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cf5c:	4b05      	ldr	r3, [pc, #20]	; (2400cf74 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400cf5e:	2000      	movs	r0, #0
}
2400cf60:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cf62:	638b      	str	r3, [r1, #56]	; 0x38
}
2400cf64:	4770      	bx	lr
2400cf66:	bf00      	nop
2400cf68:	20000750 	.word	0x20000750
2400cf6c:	fffee0c0 	.word	0xfffee0c0
2400cf70:	10624dd3 	.word	0x10624dd3
2400cf74:	002000c5 	.word	0x002000c5

2400cf78 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf78:	4a1c      	ldr	r2, [pc, #112]	; (2400cfec <SDMMC_CmdOperCond+0x74>)
{
2400cf7a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400cf7c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf80:	481b      	ldr	r0, [pc, #108]	; (2400cff0 <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf82:	6812      	ldr	r2, [r2, #0]
{
2400cf84:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf86:	4c1b      	ldr	r4, [pc, #108]	; (2400cff4 <SDMMC_CmdOperCond+0x7c>)
  SDMMCx->ARG = Command->Argument;
2400cf88:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf8a:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf8e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf92:	68cc      	ldr	r4, [r1, #12]
2400cf94:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf96:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cf98:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cf9a:	f241 3088 	movw	r0, #5000	; 0x1388
2400cf9e:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cfa2:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400cfa4:	b14a      	cbz	r2, 2400cfba <SDMMC_CmdOperCond+0x42>
2400cfa6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400cfa8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400cfaa:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cfac:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cfb0:	d001      	beq.n	2400cfb6 <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cfb2:	0490      	lsls	r0, r2, #18
2400cfb4:	d506      	bpl.n	2400cfc4 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400cfb6:	1c5c      	adds	r4, r3, #1
2400cfb8:	d1f6      	bne.n	2400cfa8 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cfba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cfbe:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cfc2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cfc4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cfc6:	075a      	lsls	r2, r3, #29
2400cfc8:	d40c      	bmi.n	2400cfe4 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cfca:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400cfcc:	f010 0001 	ands.w	r0, r0, #1
2400cfd0:	d105      	bne.n	2400cfde <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400cfd2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cfd4:	065b      	lsls	r3, r3, #25
2400cfd6:	d5f2      	bpl.n	2400cfbe <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400cfd8:	2340      	movs	r3, #64	; 0x40
2400cfda:	638b      	str	r3, [r1, #56]	; 0x38
2400cfdc:	e7ef      	b.n	2400cfbe <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cfde:	2301      	movs	r3, #1
2400cfe0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cfe2:	e7ec      	b.n	2400cfbe <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cfe4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cfe6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cfe8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cfea:	e7e8      	b.n	2400cfbe <SDMMC_CmdOperCond+0x46>
2400cfec:	20000750 	.word	0x20000750
2400cff0:	fffee0c0 	.word	0xfffee0c0
2400cff4:	10624dd3 	.word	0x10624dd3

2400cff8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cff8:	4a4c      	ldr	r2, [pc, #304]	; (2400d12c <SDMMC_CmdAppCommand+0x134>)
2400cffa:	4b4d      	ldr	r3, [pc, #308]	; (2400d130 <SDMMC_CmdAppCommand+0x138>)
2400cffc:	6812      	ldr	r2, [r2, #0]
{
2400cffe:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d000:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d004:	4c4b      	ldr	r4, [pc, #300]	; (2400d134 <SDMMC_CmdAppCommand+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400d006:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d008:	f241 1337 	movw	r3, #4407	; 0x1137
2400d00c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d00e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d010:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d012:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d016:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d018:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d01c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400d01e:	b14a      	cbz	r2, 2400d034 <SDMMC_CmdAppCommand+0x3c>
2400d020:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d022:	4945      	ldr	r1, [pc, #276]	; (2400d138 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
2400d024:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d026:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d028:	420a      	tst	r2, r1
2400d02a:	d001      	beq.n	2400d030 <SDMMC_CmdAppCommand+0x38>
2400d02c:	0492      	lsls	r2, r2, #18
2400d02e:	d507      	bpl.n	2400d040 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
2400d030:	1c5c      	adds	r4, r3, #1
2400d032:	d1f7      	bne.n	2400d024 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400d034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d038:	4618      	mov	r0, r3
2400d03a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d03e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d040:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d042:	075c      	lsls	r4, r3, #29
2400d044:	d43d      	bmi.n	2400d0c2 <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d046:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d048:	f013 0301 	ands.w	r3, r3, #1
2400d04c:	d134      	bne.n	2400d0b8 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d04e:	4b3b      	ldr	r3, [pc, #236]	; (2400d13c <SDMMC_CmdAppCommand+0x144>)
2400d050:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d052:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d054:	b2db      	uxtb	r3, r3
2400d056:	2b37      	cmp	r3, #55	; 0x37
2400d058:	d131      	bne.n	2400d0be <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
2400d05a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d05c:	4b38      	ldr	r3, [pc, #224]	; (2400d140 <SDMMC_CmdAppCommand+0x148>)
2400d05e:	4013      	ands	r3, r2
2400d060:	2b00      	cmp	r3, #0
2400d062:	d0e9      	beq.n	2400d038 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d064:	2a00      	cmp	r2, #0
2400d066:	db30      	blt.n	2400d0ca <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d068:	0051      	lsls	r1, r2, #1
2400d06a:	d431      	bmi.n	2400d0d0 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d06c:	0094      	lsls	r4, r2, #2
2400d06e:	d431      	bmi.n	2400d0d4 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d070:	00d0      	lsls	r0, r2, #3
2400d072:	d431      	bmi.n	2400d0d8 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d074:	0111      	lsls	r1, r2, #4
2400d076:	d432      	bmi.n	2400d0de <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d078:	0154      	lsls	r4, r2, #5
2400d07a:	d433      	bmi.n	2400d0e4 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d07c:	01d0      	lsls	r0, r2, #7
2400d07e:	d434      	bmi.n	2400d0ea <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d080:	0211      	lsls	r1, r2, #8
2400d082:	d435      	bmi.n	2400d0f0 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d084:	0254      	lsls	r4, r2, #9
2400d086:	d436      	bmi.n	2400d0f6 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d088:	0290      	lsls	r0, r2, #10
2400d08a:	d440      	bmi.n	2400d10e <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d08c:	02d1      	lsls	r1, r2, #11
2400d08e:	d43b      	bmi.n	2400d108 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d090:	0354      	lsls	r4, r2, #13
2400d092:	d436      	bmi.n	2400d102 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d094:	0390      	lsls	r0, r2, #14
2400d096:	d431      	bmi.n	2400d0fc <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d098:	03d1      	lsls	r1, r2, #15
2400d09a:	d444      	bmi.n	2400d126 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d09c:	0414      	lsls	r4, r2, #16
2400d09e:	d43f      	bmi.n	2400d120 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d0a0:	0450      	lsls	r0, r2, #17
2400d0a2:	d43a      	bmi.n	2400d11a <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d0a4:	0491      	lsls	r1, r2, #18
2400d0a6:	d435      	bmi.n	2400d114 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d0a8:	f012 0f08 	tst.w	r2, #8
2400d0ac:	bf14      	ite	ne
2400d0ae:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400d0b2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400d0b6:	e7bf      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d0b8:	2201      	movs	r2, #1
2400d0ba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d0bc:	e7bc      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d0be:	2301      	movs	r3, #1
2400d0c0:	e7ba      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d0c2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d0c4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d0c6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d0c8:	e7b6      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d0ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d0ce:	e7b3      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d0d0:	2340      	movs	r3, #64	; 0x40
2400d0d2:	e7b1      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d0d4:	2380      	movs	r3, #128	; 0x80
2400d0d6:	e7af      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
2400d0dc:	e7ac      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d0de:	f44f 7300 	mov.w	r3, #512	; 0x200
2400d0e2:	e7a9      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400d0e8:	e7a6      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d0ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400d0ee:	e7a3      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d0f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400d0f4:	e7a0      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d0f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400d0fa:	e79d      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d0fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400d100:	e79a      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400d106:	e797      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
2400d108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400d10c:	e794      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d10e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400d112:	e791      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400d114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400d118:	e78e      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d11a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400d11e:	e78b      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d120:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400d124:	e788      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d126:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400d12a:	e785      	b.n	2400d038 <SDMMC_CmdAppCommand+0x40>
2400d12c:	20000750 	.word	0x20000750
2400d130:	10624dd3 	.word	0x10624dd3
2400d134:	fffee0c0 	.word	0xfffee0c0
2400d138:	00200045 	.word	0x00200045
2400d13c:	002000c5 	.word	0x002000c5
2400d140:	fdffe008 	.word	0xfdffe008

2400d144 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d144:	4a18      	ldr	r2, [pc, #96]	; (2400d1a8 <SDMMC_CmdAppOperCommand+0x64>)
2400d146:	4b19      	ldr	r3, [pc, #100]	; (2400d1ac <SDMMC_CmdAppOperCommand+0x68>)
2400d148:	6812      	ldr	r2, [r2, #0]
{
2400d14a:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d14c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d150:	4c17      	ldr	r4, [pc, #92]	; (2400d1b0 <SDMMC_CmdAppOperCommand+0x6c>)
  SDMMCx->ARG = Command->Argument;
2400d152:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d154:	f241 1329 	movw	r3, #4393	; 0x1129
2400d158:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d15a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d15c:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d15e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d162:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d164:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d168:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400d16a:	b14a      	cbz	r2, 2400d180 <SDMMC_CmdAppOperCommand+0x3c>
2400d16c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d16e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d170:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d172:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d176:	d001      	beq.n	2400d17c <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d178:	0492      	lsls	r2, r2, #18
2400d17a:	d507      	bpl.n	2400d18c <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
2400d17c:	1c59      	adds	r1, r3, #1
2400d17e:	d1f6      	bne.n	2400d16e <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400d180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d184:	4618      	mov	r0, r3
2400d186:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d18a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d18c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d18e:	f013 0304 	ands.w	r3, r3, #4
2400d192:	d105      	bne.n	2400d1a0 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d194:	4a07      	ldr	r2, [pc, #28]	; (2400d1b4 <SDMMC_CmdAppOperCommand+0x70>)
}
2400d196:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d19a:	6382      	str	r2, [r0, #56]	; 0x38
}
2400d19c:	4618      	mov	r0, r3
2400d19e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d1a0:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d1a2:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d1a4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d1a6:	e7ed      	b.n	2400d184 <SDMMC_CmdAppOperCommand+0x40>
2400d1a8:	20000750 	.word	0x20000750
2400d1ac:	10624dd3 	.word	0x10624dd3
2400d1b0:	fffee0c0 	.word	0xfffee0c0
2400d1b4:	002000c5 	.word	0x002000c5

2400d1b8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d1b8:	4a4c      	ldr	r2, [pc, #304]	; (2400d2ec <SDMMC_CmdBusWidth+0x134>)
2400d1ba:	4b4d      	ldr	r3, [pc, #308]	; (2400d2f0 <SDMMC_CmdBusWidth+0x138>)
2400d1bc:	6812      	ldr	r2, [r2, #0]
{
2400d1be:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d1c0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1c4:	4c4b      	ldr	r4, [pc, #300]	; (2400d2f4 <SDMMC_CmdBusWidth+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400d1c6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1c8:	f241 1306 	movw	r3, #4358	; 0x1106
2400d1cc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d1ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1d0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d1d2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1d6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d1d8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d1dc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400d1de:	b14a      	cbz	r2, 2400d1f4 <SDMMC_CmdBusWidth+0x3c>
2400d1e0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d1e2:	4945      	ldr	r1, [pc, #276]	; (2400d2f8 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
2400d1e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d1e6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d1e8:	420a      	tst	r2, r1
2400d1ea:	d001      	beq.n	2400d1f0 <SDMMC_CmdBusWidth+0x38>
2400d1ec:	0492      	lsls	r2, r2, #18
2400d1ee:	d507      	bpl.n	2400d200 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
2400d1f0:	1c5c      	adds	r4, r3, #1
2400d1f2:	d1f7      	bne.n	2400d1e4 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400d1f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d1f8:	4618      	mov	r0, r3
2400d1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d1fe:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d200:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d202:	075c      	lsls	r4, r3, #29
2400d204:	d43d      	bmi.n	2400d282 <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d206:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d208:	f013 0301 	ands.w	r3, r3, #1
2400d20c:	d134      	bne.n	2400d278 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d20e:	4b3b      	ldr	r3, [pc, #236]	; (2400d2fc <SDMMC_CmdBusWidth+0x144>)
2400d210:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d212:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d214:	b2db      	uxtb	r3, r3
2400d216:	2b06      	cmp	r3, #6
2400d218:	d131      	bne.n	2400d27e <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
2400d21a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d21c:	4b38      	ldr	r3, [pc, #224]	; (2400d300 <SDMMC_CmdBusWidth+0x148>)
2400d21e:	4013      	ands	r3, r2
2400d220:	2b00      	cmp	r3, #0
2400d222:	d0e9      	beq.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d224:	2a00      	cmp	r2, #0
2400d226:	db30      	blt.n	2400d28a <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d228:	0051      	lsls	r1, r2, #1
2400d22a:	d431      	bmi.n	2400d290 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d22c:	0094      	lsls	r4, r2, #2
2400d22e:	d431      	bmi.n	2400d294 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d230:	00d0      	lsls	r0, r2, #3
2400d232:	d431      	bmi.n	2400d298 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d234:	0111      	lsls	r1, r2, #4
2400d236:	d432      	bmi.n	2400d29e <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d238:	0154      	lsls	r4, r2, #5
2400d23a:	d433      	bmi.n	2400d2a4 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d23c:	01d0      	lsls	r0, r2, #7
2400d23e:	d434      	bmi.n	2400d2aa <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d240:	0211      	lsls	r1, r2, #8
2400d242:	d435      	bmi.n	2400d2b0 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d244:	0254      	lsls	r4, r2, #9
2400d246:	d436      	bmi.n	2400d2b6 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d248:	0290      	lsls	r0, r2, #10
2400d24a:	d440      	bmi.n	2400d2ce <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d24c:	02d1      	lsls	r1, r2, #11
2400d24e:	d43b      	bmi.n	2400d2c8 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d250:	0354      	lsls	r4, r2, #13
2400d252:	d436      	bmi.n	2400d2c2 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d254:	0390      	lsls	r0, r2, #14
2400d256:	d431      	bmi.n	2400d2bc <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d258:	03d1      	lsls	r1, r2, #15
2400d25a:	d444      	bmi.n	2400d2e6 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d25c:	0414      	lsls	r4, r2, #16
2400d25e:	d43f      	bmi.n	2400d2e0 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d260:	0450      	lsls	r0, r2, #17
2400d262:	d43a      	bmi.n	2400d2da <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d264:	0491      	lsls	r1, r2, #18
2400d266:	d435      	bmi.n	2400d2d4 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d268:	f012 0f08 	tst.w	r2, #8
2400d26c:	bf14      	ite	ne
2400d26e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400d272:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400d276:	e7bf      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d278:	2201      	movs	r2, #1
2400d27a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d27c:	e7bc      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d27e:	2301      	movs	r3, #1
2400d280:	e7ba      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d282:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d284:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d286:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d288:	e7b6      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d28a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d28e:	e7b3      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d290:	2340      	movs	r3, #64	; 0x40
2400d292:	e7b1      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d294:	2380      	movs	r3, #128	; 0x80
2400d296:	e7af      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d298:	f44f 7380 	mov.w	r3, #256	; 0x100
2400d29c:	e7ac      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d29e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400d2a2:	e7a9      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400d2a8:	e7a6      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d2aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400d2ae:	e7a3      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400d2b4:	e7a0      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d2b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400d2ba:	e79d      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d2bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400d2c0:	e79a      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d2c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400d2c6:	e797      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
2400d2c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400d2cc:	e794      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d2ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400d2d2:	e791      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400d2d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400d2d8:	e78e      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d2da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400d2de:	e78b      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d2e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400d2e4:	e788      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d2e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400d2ea:	e785      	b.n	2400d1f8 <SDMMC_CmdBusWidth+0x40>
2400d2ec:	20000750 	.word	0x20000750
2400d2f0:	10624dd3 	.word	0x10624dd3
2400d2f4:	fffee0c0 	.word	0xfffee0c0
2400d2f8:	00200045 	.word	0x00200045
2400d2fc:	002000c5 	.word	0x002000c5
2400d300:	fdffe008 	.word	0xfdffe008

2400d304 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d304:	4a4d      	ldr	r2, [pc, #308]	; (2400d43c <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
2400d306:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d308:	494d      	ldr	r1, [pc, #308]	; (2400d440 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d30a:	6812      	ldr	r2, [r2, #0]
{
2400d30c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d30e:	4c4d      	ldr	r4, [pc, #308]	; (2400d444 <SDMMC_CmdSendSCR+0x140>)
  SDMMCx->ARG = Command->Argument;
2400d310:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d312:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d316:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d31a:	68c4      	ldr	r4, [r0, #12]
2400d31c:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d31e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d320:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d322:	f241 3188 	movw	r1, #5000	; 0x1388
2400d326:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d32a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400d32c:	b14a      	cbz	r2, 2400d342 <SDMMC_CmdSendSCR+0x3e>
2400d32e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d330:	4945      	ldr	r1, [pc, #276]	; (2400d448 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400d332:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d334:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d336:	420a      	tst	r2, r1
2400d338:	d001      	beq.n	2400d33e <SDMMC_CmdSendSCR+0x3a>
2400d33a:	0492      	lsls	r2, r2, #18
2400d33c:	d507      	bpl.n	2400d34e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400d33e:	1c5c      	adds	r4, r3, #1
2400d340:	d1f7      	bne.n	2400d332 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400d342:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d346:	4618      	mov	r0, r3
2400d348:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d34c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d34e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d350:	075c      	lsls	r4, r3, #29
2400d352:	d43d      	bmi.n	2400d3d0 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d354:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d356:	f013 0301 	ands.w	r3, r3, #1
2400d35a:	d134      	bne.n	2400d3c6 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d35c:	4b3b      	ldr	r3, [pc, #236]	; (2400d44c <SDMMC_CmdSendSCR+0x148>)
2400d35e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d360:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d362:	b2db      	uxtb	r3, r3
2400d364:	2b33      	cmp	r3, #51	; 0x33
2400d366:	d131      	bne.n	2400d3cc <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400d368:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d36a:	4b39      	ldr	r3, [pc, #228]	; (2400d450 <SDMMC_CmdSendSCR+0x14c>)
2400d36c:	4013      	ands	r3, r2
2400d36e:	2b00      	cmp	r3, #0
2400d370:	d0e9      	beq.n	2400d346 <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d372:	2a00      	cmp	r2, #0
2400d374:	db30      	blt.n	2400d3d8 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d376:	0051      	lsls	r1, r2, #1
2400d378:	d431      	bmi.n	2400d3de <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d37a:	0094      	lsls	r4, r2, #2
2400d37c:	d431      	bmi.n	2400d3e2 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d37e:	00d0      	lsls	r0, r2, #3
2400d380:	d431      	bmi.n	2400d3e6 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d382:	0111      	lsls	r1, r2, #4
2400d384:	d432      	bmi.n	2400d3ec <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d386:	0154      	lsls	r4, r2, #5
2400d388:	d433      	bmi.n	2400d3f2 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d38a:	01d0      	lsls	r0, r2, #7
2400d38c:	d434      	bmi.n	2400d3f8 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d38e:	0211      	lsls	r1, r2, #8
2400d390:	d435      	bmi.n	2400d3fe <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d392:	0254      	lsls	r4, r2, #9
2400d394:	d436      	bmi.n	2400d404 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d396:	0290      	lsls	r0, r2, #10
2400d398:	d440      	bmi.n	2400d41c <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d39a:	02d1      	lsls	r1, r2, #11
2400d39c:	d43b      	bmi.n	2400d416 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d39e:	0354      	lsls	r4, r2, #13
2400d3a0:	d436      	bmi.n	2400d410 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d3a2:	0390      	lsls	r0, r2, #14
2400d3a4:	d431      	bmi.n	2400d40a <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d3a6:	03d1      	lsls	r1, r2, #15
2400d3a8:	d444      	bmi.n	2400d434 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d3aa:	0414      	lsls	r4, r2, #16
2400d3ac:	d43f      	bmi.n	2400d42e <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d3ae:	0450      	lsls	r0, r2, #17
2400d3b0:	d43a      	bmi.n	2400d428 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d3b2:	0491      	lsls	r1, r2, #18
2400d3b4:	d435      	bmi.n	2400d422 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d3b6:	f012 0f08 	tst.w	r2, #8
2400d3ba:	bf14      	ite	ne
2400d3bc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400d3c0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400d3c4:	e7bf      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d3c6:	2201      	movs	r2, #1
2400d3c8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d3ca:	e7bc      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d3cc:	2301      	movs	r3, #1
2400d3ce:	e7ba      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d3d0:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d3d2:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d3d4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d3d6:	e7b6      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d3d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d3dc:	e7b3      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d3de:	2340      	movs	r3, #64	; 0x40
2400d3e0:	e7b1      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d3e2:	2380      	movs	r3, #128	; 0x80
2400d3e4:	e7af      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d3e6:	f44f 7380 	mov.w	r3, #256	; 0x100
2400d3ea:	e7ac      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
2400d3f0:	e7a9      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400d3f6:	e7a6      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d3f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400d3fc:	e7a3      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400d402:	e7a0      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400d408:	e79d      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d40a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400d40e:	e79a      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400d414:	e797      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
2400d416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400d41a:	e794      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d41c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400d420:	e791      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400d422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400d426:	e78e      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400d42c:	e78b      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d42e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400d432:	e788      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d434:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400d438:	e785      	b.n	2400d346 <SDMMC_CmdSendSCR+0x42>
2400d43a:	bf00      	nop
2400d43c:	20000750 	.word	0x20000750
2400d440:	fffee0c0 	.word	0xfffee0c0
2400d444:	10624dd3 	.word	0x10624dd3
2400d448:	00200045 	.word	0x00200045
2400d44c:	002000c5 	.word	0x002000c5
2400d450:	fdffe008 	.word	0xfdffe008

2400d454 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d454:	4a1a      	ldr	r2, [pc, #104]	; (2400d4c0 <SDMMC_CmdSendCID+0x6c>)
{
2400d456:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400d458:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d45a:	481a      	ldr	r0, [pc, #104]	; (2400d4c4 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d45c:	6812      	ldr	r2, [r2, #0]
{
2400d45e:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d460:	4c19      	ldr	r4, [pc, #100]	; (2400d4c8 <SDMMC_CmdSendCID+0x74>)
  SDMMCx->ARG = Command->Argument;
2400d462:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d464:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d468:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d46c:	68cc      	ldr	r4, [r1, #12]
2400d46e:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d470:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d472:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d474:	f241 3088 	movw	r0, #5000	; 0x1388
2400d478:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d47c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400d47e:	b14a      	cbz	r2, 2400d494 <SDMMC_CmdSendCID+0x40>
2400d480:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d482:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400d484:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d486:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d48a:	d001      	beq.n	2400d490 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d48c:	0492      	lsls	r2, r2, #18
2400d48e:	d506      	bpl.n	2400d49e <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400d490:	1c58      	adds	r0, r3, #1
2400d492:	d1f6      	bne.n	2400d482 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400d494:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d498:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d49c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d49e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400d4a0:	075b      	lsls	r3, r3, #29
2400d4a2:	d409      	bmi.n	2400d4b8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d4a4:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
2400d4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d4aa:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d4ae:	bf14      	ite	ne
2400d4b0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d4b2:	4b06      	ldreq	r3, [pc, #24]	; (2400d4cc <SDMMC_CmdSendCID+0x78>)
2400d4b4:	638b      	str	r3, [r1, #56]	; 0x38
}
2400d4b6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d4b8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d4ba:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d4bc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d4be:	e7eb      	b.n	2400d498 <SDMMC_CmdSendCID+0x44>
2400d4c0:	20000750 	.word	0x20000750
2400d4c4:	fffee0c0 	.word	0xfffee0c0
2400d4c8:	10624dd3 	.word	0x10624dd3
2400d4cc:	002000c5 	.word	0x002000c5

2400d4d0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d4d0:	4a1b      	ldr	r2, [pc, #108]	; (2400d540 <SDMMC_CmdSendCSD+0x70>)
{
2400d4d2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d4d4:	4b1b      	ldr	r3, [pc, #108]	; (2400d544 <SDMMC_CmdSendCSD+0x74>)
2400d4d6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400d4d8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d4dc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d4e0:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400d4e4:	4818      	ldr	r0, [pc, #96]	; (2400d548 <SDMMC_CmdSendCSD+0x78>)
2400d4e6:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d4ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d4ec:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d4ee:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d4f2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d4f4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d4f8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400d4fc:	1e53      	subs	r3, r2, #1
2400d4fe:	b14a      	cbz	r2, 2400d514 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400d500:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400d504:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d506:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d50a:	d001      	beq.n	2400d510 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d50c:	0492      	lsls	r2, r2, #18
2400d50e:	d504      	bpl.n	2400d51a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400d510:	1c59      	adds	r1, r3, #1
2400d512:	d1f5      	bne.n	2400d500 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400d514:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400d518:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d51a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400d51e:	075b      	lsls	r3, r3, #29
2400d520:	d409      	bmi.n	2400d536 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d522:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400d526:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d52a:	bf14      	ite	ne
2400d52c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d52e:	4b07      	ldreq	r3, [pc, #28]	; (2400d54c <SDMMC_CmdSendCSD+0x7c>)
2400d530:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400d534:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d536:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d538:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d53a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d53e:	4770      	bx	lr
2400d540:	20000750 	.word	0x20000750
2400d544:	10624dd3 	.word	0x10624dd3
2400d548:	fffee0c0 	.word	0xfffee0c0
2400d54c:	002000c5 	.word	0x002000c5

2400d550 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400d550:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d552:	4a27      	ldr	r2, [pc, #156]	; (2400d5f0 <SDMMC_CmdSetRelAdd+0xa0>)
{
2400d554:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400d556:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d558:	4c26      	ldr	r4, [pc, #152]	; (2400d5f4 <SDMMC_CmdSetRelAdd+0xa4>)
2400d55a:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d55c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d55e:	401c      	ands	r4, r3
2400d560:	f241 1303 	movw	r3, #4355	; 0x1103
2400d564:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d566:	4c24      	ldr	r4, [pc, #144]	; (2400d5f8 <SDMMC_CmdSetRelAdd+0xa8>)
2400d568:	fba4 4202 	umull	r4, r2, r4, r2
2400d56c:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d570:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400d572:	0a52      	lsrs	r2, r2, #9
2400d574:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
2400d578:	b14a      	cbz	r2, 2400d58e <SDMMC_CmdSetRelAdd+0x3e>
2400d57a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400d57c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d57e:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d580:	f012 0f45 	tst.w	r2, #69	; 0x45
2400d584:	d001      	beq.n	2400d58a <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400d586:	0492      	lsls	r2, r2, #18
2400d588:	d507      	bpl.n	2400d59a <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
2400d58a:	1c5c      	adds	r4, r3, #1
2400d58c:	d1f6      	bne.n	2400d57c <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400d58e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d592:	4618      	mov	r0, r3
2400d594:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d598:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d59a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d59c:	075c      	lsls	r4, r3, #29
2400d59e:	d41c      	bmi.n	2400d5da <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d5a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d5a2:	f013 0301 	ands.w	r3, r3, #1
2400d5a6:	d113      	bne.n	2400d5d0 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
2400d5a8:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d5aa:	b2db      	uxtb	r3, r3
2400d5ac:	2b03      	cmp	r3, #3
2400d5ae:	d112      	bne.n	2400d5d6 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d5b0:	4b12      	ldr	r3, [pc, #72]	; (2400d5fc <SDMMC_CmdSetRelAdd+0xac>)
2400d5b2:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400d5b4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400d5b6:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
2400d5ba:	d015      	beq.n	2400d5e8 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400d5bc:	0451      	lsls	r1, r2, #17
2400d5be:	d410      	bmi.n	2400d5e2 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d5c0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400d5c4:	bf14      	ite	ne
2400d5c6:	f44f 5380 	movne.w	r3, #4096	; 0x1000
2400d5ca:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400d5ce:	e7e0      	b.n	2400d592 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d5d0:	2201      	movs	r2, #1
2400d5d2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d5d4:	e7dd      	b.n	2400d592 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d5d6:	2301      	movs	r3, #1
2400d5d8:	e7db      	b.n	2400d592 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d5da:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d5dc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d5de:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d5e0:	e7d7      	b.n	2400d592 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d5e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400d5e6:	e7d4      	b.n	2400d592 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400d5e8:	0c12      	lsrs	r2, r2, #16
2400d5ea:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
2400d5ec:	e7d1      	b.n	2400d592 <SDMMC_CmdSetRelAdd+0x42>
2400d5ee:	bf00      	nop
2400d5f0:	20000750 	.word	0x20000750
2400d5f4:	fffee0c0 	.word	0xfffee0c0
2400d5f8:	10624dd3 	.word	0x10624dd3
2400d5fc:	002000c5 	.word	0x002000c5

2400d600 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d600:	4a4c      	ldr	r2, [pc, #304]	; (2400d734 <SDMMC_CmdSendStatus+0x134>)
2400d602:	4b4d      	ldr	r3, [pc, #308]	; (2400d738 <SDMMC_CmdSendStatus+0x138>)
2400d604:	6812      	ldr	r2, [r2, #0]
{
2400d606:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d608:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d60c:	4c4b      	ldr	r4, [pc, #300]	; (2400d73c <SDMMC_CmdSendStatus+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400d60e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d610:	f241 130d 	movw	r3, #4365	; 0x110d
2400d614:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d616:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d618:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d61a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d61e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d620:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d624:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400d626:	b14a      	cbz	r2, 2400d63c <SDMMC_CmdSendStatus+0x3c>
2400d628:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d62a:	4945      	ldr	r1, [pc, #276]	; (2400d740 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
2400d62c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d62e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d630:	420a      	tst	r2, r1
2400d632:	d001      	beq.n	2400d638 <SDMMC_CmdSendStatus+0x38>
2400d634:	0492      	lsls	r2, r2, #18
2400d636:	d507      	bpl.n	2400d648 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
2400d638:	1c5c      	adds	r4, r3, #1
2400d63a:	d1f7      	bne.n	2400d62c <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400d63c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d640:	4618      	mov	r0, r3
2400d642:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d646:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d648:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d64a:	075c      	lsls	r4, r3, #29
2400d64c:	d43d      	bmi.n	2400d6ca <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d64e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d650:	f013 0301 	ands.w	r3, r3, #1
2400d654:	d134      	bne.n	2400d6c0 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d656:	4b3b      	ldr	r3, [pc, #236]	; (2400d744 <SDMMC_CmdSendStatus+0x144>)
2400d658:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d65a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d65c:	b2db      	uxtb	r3, r3
2400d65e:	2b0d      	cmp	r3, #13
2400d660:	d131      	bne.n	2400d6c6 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
2400d662:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d664:	4b38      	ldr	r3, [pc, #224]	; (2400d748 <SDMMC_CmdSendStatus+0x148>)
2400d666:	4013      	ands	r3, r2
2400d668:	2b00      	cmp	r3, #0
2400d66a:	d0e9      	beq.n	2400d640 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d66c:	2a00      	cmp	r2, #0
2400d66e:	db30      	blt.n	2400d6d2 <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d670:	0051      	lsls	r1, r2, #1
2400d672:	d431      	bmi.n	2400d6d8 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d674:	0094      	lsls	r4, r2, #2
2400d676:	d431      	bmi.n	2400d6dc <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d678:	00d0      	lsls	r0, r2, #3
2400d67a:	d431      	bmi.n	2400d6e0 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d67c:	0111      	lsls	r1, r2, #4
2400d67e:	d432      	bmi.n	2400d6e6 <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d680:	0154      	lsls	r4, r2, #5
2400d682:	d433      	bmi.n	2400d6ec <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d684:	01d0      	lsls	r0, r2, #7
2400d686:	d434      	bmi.n	2400d6f2 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d688:	0211      	lsls	r1, r2, #8
2400d68a:	d435      	bmi.n	2400d6f8 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d68c:	0254      	lsls	r4, r2, #9
2400d68e:	d436      	bmi.n	2400d6fe <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d690:	0290      	lsls	r0, r2, #10
2400d692:	d440      	bmi.n	2400d716 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d694:	02d1      	lsls	r1, r2, #11
2400d696:	d43b      	bmi.n	2400d710 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d698:	0354      	lsls	r4, r2, #13
2400d69a:	d436      	bmi.n	2400d70a <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d69c:	0390      	lsls	r0, r2, #14
2400d69e:	d431      	bmi.n	2400d704 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d6a0:	03d1      	lsls	r1, r2, #15
2400d6a2:	d444      	bmi.n	2400d72e <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d6a4:	0414      	lsls	r4, r2, #16
2400d6a6:	d43f      	bmi.n	2400d728 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d6a8:	0450      	lsls	r0, r2, #17
2400d6aa:	d43a      	bmi.n	2400d722 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d6ac:	0491      	lsls	r1, r2, #18
2400d6ae:	d435      	bmi.n	2400d71c <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d6b0:	f012 0f08 	tst.w	r2, #8
2400d6b4:	bf14      	ite	ne
2400d6b6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400d6ba:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400d6be:	e7bf      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d6c0:	2201      	movs	r2, #1
2400d6c2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d6c4:	e7bc      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d6c6:	2301      	movs	r3, #1
2400d6c8:	e7ba      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d6ca:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d6cc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d6ce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d6d0:	e7b6      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d6d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d6d6:	e7b3      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d6d8:	2340      	movs	r3, #64	; 0x40
2400d6da:	e7b1      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d6dc:	2380      	movs	r3, #128	; 0x80
2400d6de:	e7af      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d6e0:	f44f 7380 	mov.w	r3, #256	; 0x100
2400d6e4:	e7ac      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
2400d6ea:	e7a9      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400d6f0:	e7a6      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d6f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400d6f6:	e7a3      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d6f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400d6fc:	e7a0      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d6fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400d702:	e79d      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400d708:	e79a      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d70a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400d70e:	e797      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
2400d710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400d714:	e794      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400d71a:	e791      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400d71c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400d720:	e78e      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d722:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400d726:	e78b      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400d72c:	e788      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d72e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400d732:	e785      	b.n	2400d640 <SDMMC_CmdSendStatus+0x40>
2400d734:	20000750 	.word	0x20000750
2400d738:	10624dd3 	.word	0x10624dd3
2400d73c:	fffee0c0 	.word	0xfffee0c0
2400d740:	00200045 	.word	0x00200045
2400d744:	002000c5 	.word	0x002000c5
2400d748:	fdffe008 	.word	0xfdffe008

2400d74c <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d74c:	4a4d      	ldr	r2, [pc, #308]	; (2400d884 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
2400d74e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d750:	494d      	ldr	r1, [pc, #308]	; (2400d888 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d752:	6812      	ldr	r2, [r2, #0]
{
2400d754:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d756:	4c4d      	ldr	r4, [pc, #308]	; (2400d88c <SDMMC_CmdStatusRegister+0x140>)
  SDMMCx->ARG = Command->Argument;
2400d758:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d75a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d75e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d762:	68c4      	ldr	r4, [r0, #12]
2400d764:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d766:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d768:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400d76a:	f241 3188 	movw	r1, #5000	; 0x1388
2400d76e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400d772:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400d774:	b14a      	cbz	r2, 2400d78a <SDMMC_CmdStatusRegister+0x3e>
2400d776:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400d778:	4945      	ldr	r1, [pc, #276]	; (2400d890 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400d77a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400d77c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400d77e:	420a      	tst	r2, r1
2400d780:	d001      	beq.n	2400d786 <SDMMC_CmdStatusRegister+0x3a>
2400d782:	0492      	lsls	r2, r2, #18
2400d784:	d507      	bpl.n	2400d796 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400d786:	1c5c      	adds	r4, r3, #1
2400d788:	d1f7      	bne.n	2400d77a <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400d78a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400d78e:	4618      	mov	r0, r3
2400d790:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d794:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400d796:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d798:	075c      	lsls	r4, r3, #29
2400d79a:	d43d      	bmi.n	2400d818 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400d79c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400d79e:	f013 0301 	ands.w	r3, r3, #1
2400d7a2:	d134      	bne.n	2400d80e <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400d7a4:	4b3b      	ldr	r3, [pc, #236]	; (2400d894 <SDMMC_CmdStatusRegister+0x148>)
2400d7a6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400d7a8:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400d7aa:	b2db      	uxtb	r3, r3
2400d7ac:	2b0d      	cmp	r3, #13
2400d7ae:	d131      	bne.n	2400d814 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400d7b0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400d7b2:	4b39      	ldr	r3, [pc, #228]	; (2400d898 <SDMMC_CmdStatusRegister+0x14c>)
2400d7b4:	4013      	ands	r3, r2
2400d7b6:	2b00      	cmp	r3, #0
2400d7b8:	d0e9      	beq.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400d7ba:	2a00      	cmp	r2, #0
2400d7bc:	db30      	blt.n	2400d820 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400d7be:	0051      	lsls	r1, r2, #1
2400d7c0:	d431      	bmi.n	2400d826 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400d7c2:	0094      	lsls	r4, r2, #2
2400d7c4:	d431      	bmi.n	2400d82a <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400d7c6:	00d0      	lsls	r0, r2, #3
2400d7c8:	d431      	bmi.n	2400d82e <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400d7ca:	0111      	lsls	r1, r2, #4
2400d7cc:	d432      	bmi.n	2400d834 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400d7ce:	0154      	lsls	r4, r2, #5
2400d7d0:	d433      	bmi.n	2400d83a <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400d7d2:	01d0      	lsls	r0, r2, #7
2400d7d4:	d434      	bmi.n	2400d840 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400d7d6:	0211      	lsls	r1, r2, #8
2400d7d8:	d435      	bmi.n	2400d846 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400d7da:	0254      	lsls	r4, r2, #9
2400d7dc:	d436      	bmi.n	2400d84c <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400d7de:	0290      	lsls	r0, r2, #10
2400d7e0:	d440      	bmi.n	2400d864 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400d7e2:	02d1      	lsls	r1, r2, #11
2400d7e4:	d43b      	bmi.n	2400d85e <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400d7e6:	0354      	lsls	r4, r2, #13
2400d7e8:	d436      	bmi.n	2400d858 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400d7ea:	0390      	lsls	r0, r2, #14
2400d7ec:	d431      	bmi.n	2400d852 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400d7ee:	03d1      	lsls	r1, r2, #15
2400d7f0:	d444      	bmi.n	2400d87c <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400d7f2:	0414      	lsls	r4, r2, #16
2400d7f4:	d43f      	bmi.n	2400d876 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400d7f6:	0450      	lsls	r0, r2, #17
2400d7f8:	d43a      	bmi.n	2400d870 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400d7fa:	0491      	lsls	r1, r2, #18
2400d7fc:	d435      	bmi.n	2400d86a <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400d7fe:	f012 0f08 	tst.w	r2, #8
2400d802:	bf14      	ite	ne
2400d804:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400d808:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400d80c:	e7bf      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400d80e:	2201      	movs	r2, #1
2400d810:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d812:	e7bc      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400d814:	2301      	movs	r3, #1
2400d816:	e7ba      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d818:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d81a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400d81c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400d81e:	e7b6      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400d820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d824:	e7b3      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400d826:	2340      	movs	r3, #64	; 0x40
2400d828:	e7b1      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400d82a:	2380      	movs	r3, #128	; 0x80
2400d82c:	e7af      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400d82e:	f44f 7380 	mov.w	r3, #256	; 0x100
2400d832:	e7ac      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400d834:	f44f 7300 	mov.w	r3, #512	; 0x200
2400d838:	e7a9      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400d83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400d83e:	e7a6      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400d840:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400d844:	e7a3      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400d846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400d84a:	e7a0      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400d84c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400d850:	e79d      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400d852:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400d856:	e79a      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400d858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400d85c:	e797      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
2400d85e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400d862:	e794      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400d864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400d868:	e791      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400d86a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400d86e:	e78e      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400d870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400d874:	e78b      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400d876:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400d87a:	e788      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400d87c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400d880:	e785      	b.n	2400d78e <SDMMC_CmdStatusRegister+0x42>
2400d882:	bf00      	nop
2400d884:	20000750 	.word	0x20000750
2400d888:	fffee0c0 	.word	0xfffee0c0
2400d88c:	10624dd3 	.word	0x10624dd3
2400d890:	00200045 	.word	0x00200045
2400d894:	002000c5 	.word	0x002000c5
2400d898:	fdffe008 	.word	0xfdffe008

2400d89c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400d89c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400d89e:	4903      	ldr	r1, [pc, #12]	; (2400d8ac <MX_FATFS_Init+0x10>)
2400d8a0:	4803      	ldr	r0, [pc, #12]	; (2400d8b0 <MX_FATFS_Init+0x14>)
2400d8a2:	f003 f889 	bl	240109b8 <FATFS_LinkDriver>
2400d8a6:	4b03      	ldr	r3, [pc, #12]	; (2400d8b4 <MX_FATFS_Init+0x18>)
2400d8a8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400d8aa:	bd08      	pop	{r3, pc}
2400d8ac:	2001f5e8 	.word	0x2001f5e8
2400d8b0:	2401ae98 	.word	0x2401ae98
2400d8b4:	2001f5ec 	.word	0x2001f5ec

2400d8b8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400d8b8:	2000      	movs	r0, #0
2400d8ba:	4770      	bx	lr

2400d8bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400d8bc:	b510      	push	{r4, lr}
2400d8be:	4694      	mov	ip, r2
2400d8c0:	b082      	sub	sp, #8
2400d8c2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400d8c4:	460a      	mov	r2, r1
2400d8c6:	4663      	mov	r3, ip
2400d8c8:	4601      	mov	r1, r0
2400d8ca:	9400      	str	r4, [sp, #0]
2400d8cc:	4803      	ldr	r0, [pc, #12]	; (2400d8dc <BSP_SD_ReadBlocks+0x20>)
2400d8ce:	f7fd f937 	bl	2400ab40 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400d8d2:	3800      	subs	r0, #0
2400d8d4:	bf18      	it	ne
2400d8d6:	2001      	movne	r0, #1
2400d8d8:	b002      	add	sp, #8
2400d8da:	bd10      	pop	{r4, pc}
2400d8dc:	2001ee64 	.word	0x2001ee64

2400d8e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400d8e0:	b510      	push	{r4, lr}
2400d8e2:	4694      	mov	ip, r2
2400d8e4:	b082      	sub	sp, #8
2400d8e6:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400d8e8:	460a      	mov	r2, r1
2400d8ea:	4663      	mov	r3, ip
2400d8ec:	4601      	mov	r1, r0
2400d8ee:	9400      	str	r4, [sp, #0]
2400d8f0:	4803      	ldr	r0, [pc, #12]	; (2400d900 <BSP_SD_WriteBlocks+0x20>)
2400d8f2:	f7fd fa45 	bl	2400ad80 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400d8f6:	3800      	subs	r0, #0
2400d8f8:	bf18      	it	ne
2400d8fa:	2001      	movne	r0, #1
2400d8fc:	b002      	add	sp, #8
2400d8fe:	bd10      	pop	{r4, pc}
2400d900:	2001ee64 	.word	0x2001ee64

2400d904 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400d904:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400d906:	4803      	ldr	r0, [pc, #12]	; (2400d914 <BSP_SD_GetCardState+0x10>)
2400d908:	f7fd fe7e 	bl	2400b608 <HAL_SD_GetCardState>
}
2400d90c:	3804      	subs	r0, #4
2400d90e:	bf18      	it	ne
2400d910:	2001      	movne	r0, #1
2400d912:	bd08      	pop	{r3, pc}
2400d914:	2001ee64 	.word	0x2001ee64

2400d918 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400d918:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400d91a:	4801      	ldr	r0, [pc, #4]	; (2400d920 <BSP_SD_GetCardInfo+0x8>)
2400d91c:	f7fd bd22 	b.w	2400b364 <HAL_SD_GetCardInfo>
2400d920:	2001ee64 	.word	0x2001ee64

2400d924 <BSP_SD_WriteCpltCallback>:
2400d924:	4770      	bx	lr
2400d926:	bf00      	nop

2400d928 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
2400d928:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
2400d92a:	f7ff fffb 	bl	2400d924 <BSP_SD_WriteCpltCallback>
}
2400d92e:	bd08      	pop	{r3, pc}

2400d930 <BSP_SD_ReadCpltCallback>:
2400d930:	4770      	bx	lr
2400d932:	bf00      	nop

2400d934 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
2400d934:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
2400d936:	f7ff fffb 	bl	2400d930 <BSP_SD_ReadCpltCallback>
}
2400d93a:	bd08      	pop	{r3, pc}

2400d93c <BSP_SD_Init>:
{
2400d93c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400d93e:	f7f6 fd79 	bl	24004434 <BSP_SD_IsDetected>
2400d942:	2801      	cmp	r0, #1
2400d944:	d001      	beq.n	2400d94a <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400d946:	2002      	movs	r0, #2
}
2400d948:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400d94a:	4807      	ldr	r0, [pc, #28]	; (2400d968 <BSP_SD_Init+0x2c>)
2400d94c:	f7fd fdf4 	bl	2400b538 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400d950:	2800      	cmp	r0, #0
2400d952:	d1f9      	bne.n	2400d948 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400d954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400d958:	4803      	ldr	r0, [pc, #12]	; (2400d968 <BSP_SD_Init+0x2c>)
2400d95a:	f7fd fd17 	bl	2400b38c <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400d95e:	3800      	subs	r0, #0
2400d960:	bf18      	it	ne
2400d962:	2001      	movne	r0, #1
}
2400d964:	bd08      	pop	{r3, pc}
2400d966:	bf00      	nop
2400d968:	2001ee64 	.word	0x2001ee64

2400d96c <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
2400d96c:	2102      	movs	r1, #2
2400d96e:	4804      	ldr	r0, [pc, #16]	; (2400d980 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
2400d970:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
2400d972:	f7f9 fd87 	bl	24007484 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
2400d976:	fab0 f080 	clz	r0, r0
2400d97a:	0940      	lsrs	r0, r0, #5
2400d97c:	bd08      	pop	{r3, pc}
2400d97e:	bf00      	nop
2400d980:	58020000 	.word	0x58020000

2400d984 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400d984:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400d986:	4c0a      	ldr	r4, [pc, #40]	; (2400d9b0 <SD_initialize+0x2c>)
2400d988:	2501      	movs	r5, #1
2400d98a:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400d98c:	f7ff ffd6 	bl	2400d93c <BSP_SD_Init>
2400d990:	b108      	cbz	r0, 2400d996 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400d992:	7820      	ldrb	r0, [r4, #0]
}
2400d994:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400d996:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400d998:	f7ff ffb4 	bl	2400d904 <BSP_SD_GetCardState>
2400d99c:	b918      	cbnz	r0, 2400d9a6 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400d99e:	7823      	ldrb	r3, [r4, #0]
2400d9a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400d9a4:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d9a6:	7823      	ldrb	r3, [r4, #0]
2400d9a8:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400d9aa:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d9ac:	7820      	ldrb	r0, [r4, #0]
}
2400d9ae:	bd38      	pop	{r3, r4, r5, pc}
2400d9b0:	20000760 	.word	0x20000760

2400d9b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400d9b4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400d9b6:	2301      	movs	r3, #1
2400d9b8:	4c05      	ldr	r4, [pc, #20]	; (2400d9d0 <SD_status+0x1c>)
2400d9ba:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400d9bc:	f7ff ffa2 	bl	2400d904 <BSP_SD_GetCardState>
2400d9c0:	b918      	cbnz	r0, 2400d9ca <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400d9c2:	7823      	ldrb	r3, [r4, #0]
2400d9c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400d9c8:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d9ca:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400d9cc:	bd10      	pop	{r4, pc}
2400d9ce:	bf00      	nop
2400d9d0:	20000760 	.word	0x20000760

2400d9d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400d9d4:	b508      	push	{r3, lr}
2400d9d6:	4608      	mov	r0, r1
2400d9d8:	4611      	mov	r1, r2
2400d9da:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400d9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d9e0:	f7ff ff6c 	bl	2400d8bc <BSP_SD_ReadBlocks>
2400d9e4:	b108      	cbz	r0, 2400d9ea <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400d9e6:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400d9e8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400d9ea:	f7ff ff8b 	bl	2400d904 <BSP_SD_GetCardState>
2400d9ee:	2800      	cmp	r0, #0
2400d9f0:	d0fa      	beq.n	2400d9e8 <SD_read+0x14>
2400d9f2:	f7ff ff87 	bl	2400d904 <BSP_SD_GetCardState>
2400d9f6:	2800      	cmp	r0, #0
2400d9f8:	d1f7      	bne.n	2400d9ea <SD_read+0x16>
2400d9fa:	e7f5      	b.n	2400d9e8 <SD_read+0x14>

2400d9fc <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d9fc:	4b18      	ldr	r3, [pc, #96]	; (2400da60 <SD_ioctl+0x64>)
{
2400d9fe:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400da00:	7818      	ldrb	r0, [r3, #0]
{
2400da02:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400da04:	f010 0401 	ands.w	r4, r0, #1
2400da08:	d106      	bne.n	2400da18 <SD_ioctl+0x1c>
2400da0a:	4615      	mov	r5, r2

  switch (cmd)
2400da0c:	2903      	cmp	r1, #3
2400da0e:	d824      	bhi.n	2400da5a <SD_ioctl+0x5e>
2400da10:	e8df f001 	tbb	[pc, r1]
2400da14:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400da18:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400da1a:	4620      	mov	r0, r4
2400da1c:	b00b      	add	sp, #44	; 0x2c
2400da1e:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400da20:	460c      	mov	r4, r1
}
2400da22:	4620      	mov	r0, r4
2400da24:	b00b      	add	sp, #44	; 0x2c
2400da26:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400da28:	a801      	add	r0, sp, #4
2400da2a:	f7ff ff75 	bl	2400d918 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400da2e:	9b07      	ldr	r3, [sp, #28]
}
2400da30:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400da32:	602b      	str	r3, [r5, #0]
}
2400da34:	b00b      	add	sp, #44	; 0x2c
2400da36:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400da38:	a801      	add	r0, sp, #4
2400da3a:	f7ff ff6d 	bl	2400d918 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400da3e:	9b08      	ldr	r3, [sp, #32]
}
2400da40:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400da42:	802b      	strh	r3, [r5, #0]
}
2400da44:	b00b      	add	sp, #44	; 0x2c
2400da46:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400da48:	a801      	add	r0, sp, #4
2400da4a:	f7ff ff65 	bl	2400d918 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400da4e:	9b08      	ldr	r3, [sp, #32]
}
2400da50:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400da52:	0a5b      	lsrs	r3, r3, #9
2400da54:	602b      	str	r3, [r5, #0]
}
2400da56:	b00b      	add	sp, #44	; 0x2c
2400da58:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400da5a:	2404      	movs	r4, #4
2400da5c:	e7dd      	b.n	2400da1a <SD_ioctl+0x1e>
2400da5e:	bf00      	nop
2400da60:	20000760 	.word	0x20000760

2400da64 <SD_write>:
{
2400da64:	b508      	push	{r3, lr}
2400da66:	4608      	mov	r0, r1
2400da68:	4611      	mov	r1, r2
2400da6a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400da6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400da70:	f7ff ff36 	bl	2400d8e0 <BSP_SD_WriteBlocks>
2400da74:	b108      	cbz	r0, 2400da7a <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400da76:	2001      	movs	r0, #1
}
2400da78:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400da7a:	f7ff ff43 	bl	2400d904 <BSP_SD_GetCardState>
2400da7e:	2800      	cmp	r0, #0
2400da80:	d0fa      	beq.n	2400da78 <SD_write+0x14>
2400da82:	f7ff ff3f 	bl	2400d904 <BSP_SD_GetCardState>
2400da86:	2800      	cmp	r0, #0
2400da88:	d1f7      	bne.n	2400da7a <SD_write+0x16>
2400da8a:	e7f5      	b.n	2400da78 <SD_write+0x14>

2400da8c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400da8c:	4b03      	ldr	r3, [pc, #12]	; (2400da9c <disk_status+0x10>)
2400da8e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400da92:	4403      	add	r3, r0
2400da94:	6852      	ldr	r2, [r2, #4]
2400da96:	7a18      	ldrb	r0, [r3, #8]
2400da98:	6853      	ldr	r3, [r2, #4]
2400da9a:	4718      	bx	r3
2400da9c:	2001f818 	.word	0x2001f818

2400daa0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400daa0:	4b07      	ldr	r3, [pc, #28]	; (2400dac0 <disk_initialize+0x20>)
2400daa2:	5c1a      	ldrb	r2, [r3, r0]
2400daa4:	b952      	cbnz	r2, 2400dabc <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400daa6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400daaa:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400daac:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400dab0:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400dab2:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400dab6:	7a08      	ldrb	r0, [r1, #8]
2400dab8:	6813      	ldr	r3, [r2, #0]
2400daba:	4718      	bx	r3
  }
  return stat;
}
2400dabc:	2000      	movs	r0, #0
2400dabe:	4770      	bx	lr
2400dac0:	2001f818 	.word	0x2001f818

2400dac4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400dac4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400dac6:	4c05      	ldr	r4, [pc, #20]	; (2400dadc <disk_read+0x18>)
2400dac8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400dacc:	4404      	add	r4, r0
2400dace:	686d      	ldr	r5, [r5, #4]
2400dad0:	7a20      	ldrb	r0, [r4, #8]
2400dad2:	68ac      	ldr	r4, [r5, #8]
2400dad4:	46a4      	mov	ip, r4
  return res;
}
2400dad6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400dad8:	4760      	bx	ip
2400dada:	bf00      	nop
2400dadc:	2001f818 	.word	0x2001f818

2400dae0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400dae0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400dae2:	4c05      	ldr	r4, [pc, #20]	; (2400daf8 <disk_write+0x18>)
2400dae4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400dae8:	4404      	add	r4, r0
2400daea:	686d      	ldr	r5, [r5, #4]
2400daec:	7a20      	ldrb	r0, [r4, #8]
2400daee:	68ec      	ldr	r4, [r5, #12]
2400daf0:	46a4      	mov	ip, r4
  return res;
}
2400daf2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400daf4:	4760      	bx	ip
2400daf6:	bf00      	nop
2400daf8:	2001f818 	.word	0x2001f818

2400dafc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400dafc:	4b04      	ldr	r3, [pc, #16]	; (2400db10 <disk_ioctl+0x14>)
2400dafe:	eb03 0c00 	add.w	ip, r3, r0
2400db02:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400db06:	685b      	ldr	r3, [r3, #4]
2400db08:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400db0c:	691b      	ldr	r3, [r3, #16]
2400db0e:	4718      	bx	r3
2400db10:	2001f818 	.word	0x2001f818

2400db14 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400db14:	4b27      	ldr	r3, [pc, #156]	; (2400dbb4 <inc_lock+0xa0>)
{
2400db16:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
2400db18:	681a      	ldr	r2, [r3, #0]
2400db1a:	6805      	ldr	r5, [r0, #0]
2400db1c:	4295      	cmp	r5, r2
2400db1e:	d01b      	beq.n	2400db58 <inc_lock+0x44>
2400db20:	691c      	ldr	r4, [r3, #16]
2400db22:	42ac      	cmp	r4, r5
2400db24:	d006      	beq.n	2400db34 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400db26:	b30a      	cbz	r2, 2400db6c <inc_lock+0x58>
2400db28:	2c00      	cmp	r4, #0
2400db2a:	d037      	beq.n	2400db9c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400db2c:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400db2e:	4620      	mov	r0, r4
2400db30:	bcf0      	pop	{r4, r5, r6, r7}
2400db32:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400db34:	695e      	ldr	r6, [r3, #20]
2400db36:	6887      	ldr	r7, [r0, #8]
2400db38:	42be      	cmp	r6, r7
2400db3a:	d1f4      	bne.n	2400db26 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
2400db3c:	699e      	ldr	r6, [r3, #24]
2400db3e:	6947      	ldr	r7, [r0, #20]
2400db40:	42be      	cmp	r6, r7
2400db42:	d1f0      	bne.n	2400db26 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400db44:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400db46:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400db4a:	bb51      	cbnz	r1, 2400dba2 <inc_lock+0x8e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400db4c:	0111      	lsls	r1, r2, #4
	return i + 1;
2400db4e:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400db50:	8982      	ldrh	r2, [r0, #12]
2400db52:	3201      	adds	r2, #1
2400db54:	b292      	uxth	r2, r2
2400db56:	e01c      	b.n	2400db92 <inc_lock+0x7e>
		if (Files[i].fs == dp->obj.fs &&
2400db58:	6884      	ldr	r4, [r0, #8]
2400db5a:	685e      	ldr	r6, [r3, #4]
2400db5c:	42a6      	cmp	r6, r4
2400db5e:	d1df      	bne.n	2400db20 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
2400db60:	689c      	ldr	r4, [r3, #8]
2400db62:	6946      	ldr	r6, [r0, #20]
2400db64:	42a6      	cmp	r6, r4
2400db66:	d1db      	bne.n	2400db20 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400db68:	2200      	movs	r2, #0
2400db6a:	e7ec      	b.n	2400db46 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400db6c:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400db6e:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400db70:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400db74:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
2400db78:	6882      	ldr	r2, [r0, #8]
		Files[i].fs = dp->obj.fs;
2400db7a:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400db7c:	6945      	ldr	r5, [r0, #20]
2400db7e:	e9cc 2501 	strd	r2, r5, [ip, #4]
		Files[i].ctr = 0;
2400db82:	f04f 0200 	mov.w	r2, #0
2400db86:	f8ac 200c 	strh.w	r2, [ip, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400db8a:	bf14      	ite	ne
2400db8c:	f44f 7280 	movne.w	r2, #256	; 0x100
2400db90:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400db92:	440b      	add	r3, r1
}
2400db94:	4620      	mov	r0, r4
2400db96:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400db98:	819a      	strh	r2, [r3, #12]
}
2400db9a:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400db9c:	2402      	movs	r4, #2
2400db9e:	2201      	movs	r2, #1
2400dba0:	e7e5      	b.n	2400db6e <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400dba2:	8980      	ldrh	r0, [r0, #12]
2400dba4:	0111      	lsls	r1, r2, #4
2400dba6:	2800      	cmp	r0, #0
2400dba8:	d1c0      	bne.n	2400db2c <inc_lock+0x18>
	return i + 1;
2400dbaa:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400dbac:	f44f 7280 	mov.w	r2, #256	; 0x100
2400dbb0:	e7ef      	b.n	2400db92 <inc_lock+0x7e>
2400dbb2:	bf00      	nop
2400dbb4:	2001f5f4 	.word	0x2001f5f4

2400dbb8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400dbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400dbbc:	440a      	add	r2, r1
2400dbbe:	460d      	mov	r5, r1
2400dbc0:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dbc2:	4f37      	ldr	r7, [pc, #220]	; (2400dca0 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400dbc4:	42aa      	cmp	r2, r5
2400dbc6:	d012      	beq.n	2400dbee <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dbc8:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dbcc:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dbd0:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dbd4:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dbd8:	2919      	cmp	r1, #25
2400dbda:	d9f3      	bls.n	2400dbc4 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dbdc:	2c7f      	cmp	r4, #127	; 0x7f
2400dbde:	bf88      	it	hi
2400dbe0:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400dbe4:	2c00      	cmp	r4, #0
2400dbe6:	d1ed      	bne.n	2400dbc4 <pattern_matching+0xc>
2400dbe8:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400dbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400dbee:	1e1f      	subs	r7, r3, #0
2400dbf0:	f896 8000 	ldrb.w	r8, [r6]
2400dbf4:	bf18      	it	ne
2400dbf6:	2701      	movne	r7, #1
2400dbf8:	f1b8 0f00 	cmp.w	r8, #0
2400dbfc:	d100      	bne.n	2400dc00 <pattern_matching+0x48>
2400dbfe:	bb8f      	cbnz	r7, 2400dc64 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dc00:	4c27      	ldr	r4, [pc, #156]	; (2400dca0 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400dc02:	4630      	mov	r0, r6
{
2400dc04:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400dc06:	46a9      	mov	r9, r5
2400dc08:	e010      	b.n	2400dc2c <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dc0a:	3a20      	subs	r2, #32
2400dc0c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dc0e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dc12:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dc16:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dc18:	f1bc 0f19 	cmp.w	ip, #25
2400dc1c:	d815      	bhi.n	2400dc4a <pattern_matching+0x92>
2400dc1e:	3b20      	subs	r3, #32
2400dc20:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400dc22:	4293      	cmp	r3, r2
2400dc24:	d118      	bne.n	2400dc58 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400dc26:	b1eb      	cbz	r3, 2400dc64 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400dc28:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400dc2c:	2b3f      	cmp	r3, #63	; 0x3f
2400dc2e:	d01c      	beq.n	2400dc6a <pattern_matching+0xb2>
2400dc30:	2b2a      	cmp	r3, #42	; 0x2a
2400dc32:	d01a      	beq.n	2400dc6a <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dc34:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dc38:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400dc3a:	2919      	cmp	r1, #25
2400dc3c:	d9e5      	bls.n	2400dc0a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400dc3e:	2a7f      	cmp	r2, #127	; 0x7f
2400dc40:	d9e5      	bls.n	2400dc0e <pattern_matching+0x56>
2400dc42:	4423      	add	r3, r4
2400dc44:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400dc48:	e7e1      	b.n	2400dc0e <pattern_matching+0x56>
2400dc4a:	2b7f      	cmp	r3, #127	; 0x7f
2400dc4c:	d9e9      	bls.n	2400dc22 <pattern_matching+0x6a>
2400dc4e:	4421      	add	r1, r4
2400dc50:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400dc54:	4293      	cmp	r3, r2
2400dc56:	d0e6      	beq.n	2400dc26 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400dc58:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400dc5a:	2b00      	cmp	r3, #0
2400dc5c:	d0c4      	beq.n	2400dbe8 <pattern_matching+0x30>
2400dc5e:	2f00      	cmp	r7, #0
2400dc60:	d1cf      	bne.n	2400dc02 <pattern_matching+0x4a>
2400dc62:	e7c1      	b.n	2400dbe8 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400dc64:	2001      	movs	r0, #1
}
2400dc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400dc6a:	4601      	mov	r1, r0
				nm = nx = 0;
2400dc6c:	2300      	movs	r3, #0
2400dc6e:	f811 cb01 	ldrb.w	ip, [r1], #1
2400dc72:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400dc74:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400dc78:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400dc7a:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400dc7e:	bf0c      	ite	eq
2400dc80:	3201      	addeq	r2, #1
2400dc82:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400dc84:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400dc88:	d0f4      	beq.n	2400dc74 <pattern_matching+0xbc>
2400dc8a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400dc8e:	d0f1      	beq.n	2400dc74 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400dc90:	4649      	mov	r1, r9
2400dc92:	f7ff ff91 	bl	2400dbb8 <pattern_matching>
2400dc96:	2800      	cmp	r0, #0
2400dc98:	d1e4      	bne.n	2400dc64 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400dc9a:	f899 3000 	ldrb.w	r3, [r9]
2400dc9e:	e7db      	b.n	2400dc58 <pattern_matching+0xa0>
2400dca0:	2401aec0 	.word	0x2401aec0

2400dca4 <get_fileinfo>:
{
2400dca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
2400dca8:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
2400dcaa:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400dcae:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400dcb0:	69c3      	ldr	r3, [r0, #28]
2400dcb2:	2b00      	cmp	r3, #0
2400dcb4:	d05a      	beq.n	2400dd6c <get_fileinfo+0xc8>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400dcb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
2400dcb8:	4607      	mov	r7, r0
2400dcba:	460d      	mov	r5, r1
2400dcbc:	3301      	adds	r3, #1
2400dcbe:	d01e      	beq.n	2400dcfe <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400dcc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400dcc4:	8818      	ldrh	r0, [r3, #0]
2400dcc6:	2800      	cmp	r0, #0
2400dcc8:	d061      	beq.n	2400dd8e <get_fileinfo+0xea>
2400dcca:	f101 0615 	add.w	r6, r1, #21
2400dcce:	2401      	movs	r4, #1
2400dcd0:	e000      	b.n	2400dcd4 <get_fileinfo+0x30>
2400dcd2:	461c      	mov	r4, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400dcd4:	2100      	movs	r1, #0
2400dcd6:	f002 fe93 	bl	24010a00 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400dcda:	1c63      	adds	r3, r4, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400dcdc:	2800      	cmp	r0, #0
2400dcde:	d056      	beq.n	2400dd8e <get_fileinfo+0xea>
2400dce0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400dce4:	d053      	beq.n	2400dd8e <get_fileinfo+0xea>
				fno->fname[i++] = (TCHAR)w;
2400dce6:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400dcea:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400dcee:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
2400dcf2:	2800      	cmp	r0, #0
2400dcf4:	d1ed      	bne.n	2400dcd2 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400dcf6:	442c      	add	r4, r5
2400dcf8:	2300      	movs	r3, #0
2400dcfa:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400dcfc:	7dae      	ldrb	r6, [r5, #22]
2400dcfe:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
2400dd02:	2000      	movs	r0, #0
			fno->altname[j++] = '.';
2400dd04:	f04f 082e 	mov.w	r8, #46	; 0x2e
2400dd08:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	i = j = 0;
2400dd0c:	4602      	mov	r2, r0
		c = (TCHAR)dp->dir[i++];
2400dd0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400dd12:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400dd14:	2b20      	cmp	r3, #32
2400dd16:	d018      	beq.n	2400dd4a <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400dd18:	2b05      	cmp	r3, #5
2400dd1a:	bf08      	it	eq
2400dd1c:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400dd1e:	2a09      	cmp	r2, #9
2400dd20:	d026      	beq.n	2400dd70 <get_fileinfo+0xcc>
		fno->altname[j] = c;
2400dd22:	182c      	adds	r4, r5, r0
2400dd24:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
2400dd26:	b97e      	cbnz	r6, 2400dd48 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400dd28:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
2400dd2c:	2f19      	cmp	r7, #25
2400dd2e:	d80a      	bhi.n	2400dd46 <get_fileinfo+0xa2>
2400dd30:	2a08      	cmp	r2, #8
2400dd32:	f89c e00c 	ldrb.w	lr, [ip, #12]
2400dd36:	bf8c      	ite	hi
2400dd38:	2710      	movhi	r7, #16
2400dd3a:	2708      	movls	r7, #8
2400dd3c:	ea1e 0f07 	tst.w	lr, r7
2400dd40:	d001      	beq.n	2400dd46 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400dd42:	3320      	adds	r3, #32
2400dd44:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400dd46:	75a3      	strb	r3, [r4, #22]
		j++;
2400dd48:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
2400dd4a:	2a0b      	cmp	r2, #11
2400dd4c:	d1df      	bne.n	2400dd0e <get_fileinfo+0x6a>
		fno->fname[j] = 0;
2400dd4e:	182c      	adds	r4, r5, r0
	if (!lfv) {
2400dd50:	b1b6      	cbz	r6, 2400dd80 <get_fileinfo+0xdc>
	fno->altname[j] = 0;	/* Terminate the SFN */
2400dd52:	2300      	movs	r3, #0
2400dd54:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400dd56:	f89c 300b 	ldrb.w	r3, [ip, #11]
2400dd5a:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400dd5c:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400dd60:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400dd62:	f8dc 3016 	ldr.w	r3, [ip, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400dd66:	0c1a      	lsrs	r2, r3, #16
2400dd68:	80eb      	strh	r3, [r5, #6]
2400dd6a:	80aa      	strh	r2, [r5, #4]
}
2400dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400dd70:	182c      	adds	r4, r5, r0
2400dd72:	b90e      	cbnz	r6, 2400dd78 <get_fileinfo+0xd4>
2400dd74:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
2400dd78:	3001      	adds	r0, #1
2400dd7a:	f884 8009 	strb.w	r8, [r4, #9]
2400dd7e:	e7d0      	b.n	2400dd22 <get_fileinfo+0x7e>
		fno->fname[j] = 0;
2400dd80:	75a6      	strb	r6, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400dd82:	f89c 300c 	ldrb.w	r3, [ip, #12]
2400dd86:	2b00      	cmp	r3, #0
2400dd88:	bf08      	it	eq
2400dd8a:	462c      	moveq	r4, r5
2400dd8c:	e7e1      	b.n	2400dd52 <get_fileinfo+0xae>
			i = j = 0;
2400dd8e:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400dd90:	2300      	movs	r3, #0
2400dd92:	442c      	add	r4, r5
2400dd94:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400dd96:	7dae      	ldrb	r6, [r5, #22]
2400dd98:	e7b1      	b.n	2400dcfe <get_fileinfo+0x5a>
2400dd9a:	bf00      	nop

2400dd9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400dd9c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400dd9e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400dda2:	2300      	movs	r3, #0
{
2400dda4:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dda6:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400dda8:	70c3      	strb	r3, [r0, #3]
2400ddaa:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ddac:	d00c      	beq.n	2400ddc8 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ddae:	460d      	mov	r5, r1
2400ddb0:	460a      	mov	r2, r1
2400ddb2:	2301      	movs	r3, #1
2400ddb4:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400ddb8:	7840      	ldrb	r0, [r0, #1]
2400ddba:	f7ff fe83 	bl	2400dac4 <disk_read>
2400ddbe:	b110      	cbz	r0, 2400ddc6 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400ddc0:	2004      	movs	r0, #4
			fs->winsect = sector;
2400ddc2:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400ddc4:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400ddc6:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400ddc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400ddcc:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400ddd0:	429a      	cmp	r2, r3
2400ddd2:	d11a      	bne.n	2400de0a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400ddd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400ddd8:	2be9      	cmp	r3, #233	; 0xe9
2400ddda:	d007      	beq.n	2400ddec <check_fs+0x50>
2400dddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ddde:	4a0d      	ldr	r2, [pc, #52]	; (2400de14 <check_fs+0x78>)
2400dde0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400dde4:	4293      	cmp	r3, r2
2400dde6:	d001      	beq.n	2400ddec <check_fs+0x50>
	return 2;
2400dde8:	2002      	movs	r0, #2
}
2400ddea:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400ddec:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400ddf0:	4a09      	ldr	r2, [pc, #36]	; (2400de18 <check_fs+0x7c>)
2400ddf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400ddf6:	4293      	cmp	r3, r2
2400ddf8:	d009      	beq.n	2400de0e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400ddfa:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400ddfe:	4b07      	ldr	r3, [pc, #28]	; (2400de1c <check_fs+0x80>)
2400de00:	4298      	cmp	r0, r3
2400de02:	bf14      	ite	ne
2400de04:	2002      	movne	r0, #2
2400de06:	2000      	moveq	r0, #0
}
2400de08:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400de0a:	2003      	movs	r0, #3
}
2400de0c:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400de0e:	2000      	movs	r0, #0
}
2400de10:	bd70      	pop	{r4, r5, r6, pc}
2400de12:	bf00      	nop
2400de14:	009000eb 	.word	0x009000eb
2400de18:	00544146 	.word	0x00544146
2400de1c:	33544146 	.word	0x33544146

2400de20 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400de20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400de22:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400de24:	b083      	sub	sp, #12
2400de26:	4604      	mov	r4, r0
2400de28:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400de2a:	b973      	cbnz	r3, 2400de4a <move_window.part.0+0x2a>
2400de2c:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400de30:	2301      	movs	r3, #1
2400de32:	462a      	mov	r2, r5
2400de34:	7860      	ldrb	r0, [r4, #1]
2400de36:	f7ff fe45 	bl	2400dac4 <disk_read>
2400de3a:	b910      	cbnz	r0, 2400de42 <move_window.part.0+0x22>
			fs->winsect = sector;
2400de3c:	6325      	str	r5, [r4, #48]	; 0x30
}
2400de3e:	b003      	add	sp, #12
2400de40:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400de42:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400de44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400de48:	e7f8      	b.n	2400de3c <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
2400de4a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400de4c:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400de50:	2301      	movs	r3, #1
2400de52:	7840      	ldrb	r0, [r0, #1]
2400de54:	4632      	mov	r2, r6
2400de56:	9101      	str	r1, [sp, #4]
2400de58:	f7ff fe42 	bl	2400dae0 <disk_write>
2400de5c:	b9b8      	cbnz	r0, 2400de8e <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400de5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400de60:	69e3      	ldr	r3, [r4, #28]
2400de62:	1ab2      	subs	r2, r6, r2
2400de64:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400de66:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400de68:	429a      	cmp	r2, r3
2400de6a:	d2e1      	bcs.n	2400de30 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de6c:	78a7      	ldrb	r7, [r4, #2]
2400de6e:	2f01      	cmp	r7, #1
2400de70:	d801      	bhi.n	2400de76 <move_window.part.0+0x56>
2400de72:	e7dd      	b.n	2400de30 <move_window.part.0+0x10>
					wsect += fs->fsize;
2400de74:	69e3      	ldr	r3, [r4, #28]
2400de76:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de78:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400de7a:	2301      	movs	r3, #1
2400de7c:	7860      	ldrb	r0, [r4, #1]
2400de7e:	4632      	mov	r2, r6
2400de80:	9101      	str	r1, [sp, #4]
2400de82:	f7ff fe2d 	bl	2400dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de86:	2f01      	cmp	r7, #1
2400de88:	9901      	ldr	r1, [sp, #4]
2400de8a:	d1f3      	bne.n	2400de74 <move_window.part.0+0x54>
2400de8c:	e7d0      	b.n	2400de30 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
2400de8e:	2001      	movs	r0, #1
}
2400de90:	b003      	add	sp, #12
2400de92:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400de94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
2400de94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400de98:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
2400de9a:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
2400de9c:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400de9e:	b18c      	cbz	r4, 2400dec4 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400dea0:	7825      	ldrb	r5, [r4, #0]
2400dea2:	2d1f      	cmp	r5, #31
2400dea4:	d912      	bls.n	2400decc <find_volume+0x38>
2400dea6:	2d3a      	cmp	r5, #58	; 0x3a
2400dea8:	d010      	beq.n	2400decc <find_volume+0x38>
2400deaa:	46a4      	mov	ip, r4
2400deac:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400deb0:	2b1f      	cmp	r3, #31
2400deb2:	d90d      	bls.n	2400ded0 <find_volume+0x3c>
2400deb4:	2b3a      	cmp	r3, #58	; 0x3a
2400deb6:	d1f9      	bne.n	2400deac <find_volume+0x18>
			i = *tp++ - '0';
2400deb8:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400deba:	45a4      	cmp	ip, r4
2400debc:	d102      	bne.n	2400dec4 <find_volume+0x30>
2400debe:	2d30      	cmp	r5, #48	; 0x30
2400dec0:	f000 80da 	beq.w	2400e078 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400dec4:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400dec6:	4620      	mov	r0, r4
2400dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400decc:	462b      	mov	r3, r5
2400dece:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400ded0:	2b3a      	cmp	r3, #58	; 0x3a
2400ded2:	d0f1      	beq.n	2400deb8 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400ded4:	4ba6      	ldr	r3, [pc, #664]	; (2400e170 <find_volume+0x2dc>)
2400ded6:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400ded8:	2d00      	cmp	r5, #0
2400deda:	f000 80c9 	beq.w	2400e070 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400dede:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400dee0:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400dee4:	782b      	ldrb	r3, [r5, #0]
2400dee6:	b17b      	cbz	r3, 2400df08 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400dee8:	7868      	ldrb	r0, [r5, #1]
2400deea:	f7ff fdcf 	bl	2400da8c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400deee:	07c1      	lsls	r1, r0, #31
2400def0:	d40a      	bmi.n	2400df08 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400def2:	2c00      	cmp	r4, #0
2400def4:	f000 80ab 	beq.w	2400e04e <find_volume+0x1ba>
2400def8:	f010 0404 	ands.w	r4, r0, #4
2400defc:	f000 80a7 	beq.w	2400e04e <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400df00:	240a      	movs	r4, #10
}
2400df02:	4620      	mov	r0, r4
2400df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400df08:	2000      	movs	r0, #0
2400df0a:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400df0c:	f7ff fdc8 	bl	2400daa0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400df10:	07c2      	lsls	r2, r0, #31
2400df12:	f100 809f 	bmi.w	2400e054 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400df16:	b10c      	cbz	r4, 2400df1c <find_volume+0x88>
2400df18:	0743      	lsls	r3, r0, #29
2400df1a:	d4f1      	bmi.n	2400df00 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400df1c:	2100      	movs	r1, #0
2400df1e:	4628      	mov	r0, r5
2400df20:	f7ff ff3c 	bl	2400dd9c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400df24:	2802      	cmp	r0, #2
2400df26:	d077      	beq.n	2400e018 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400df28:	2804      	cmp	r0, #4
2400df2a:	f000 809f 	beq.w	2400e06c <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400df2e:	2801      	cmp	r0, #1
2400df30:	f200 808c 	bhi.w	2400e04c <find_volume+0x1b8>
	bsect = 0;
2400df34:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400df36:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400df3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400df3e:	f040 8085 	bne.w	2400e04c <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400df42:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400df46:	b902      	cbnz	r2, 2400df4a <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400df48:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400df4a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400df4e:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400df50:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400df52:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400df54:	2901      	cmp	r1, #1
2400df56:	d879      	bhi.n	2400e04c <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400df58:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400df5c:	b288      	uxth	r0, r1
2400df5e:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400df60:	2800      	cmp	r0, #0
2400df62:	d073      	beq.n	2400e04c <find_volume+0x1b8>
2400df64:	1e48      	subs	r0, r1, #1
2400df66:	4208      	tst	r0, r1
2400df68:	d170      	bne.n	2400e04c <find_volume+0x1b8>
	rv = ptr[1];
2400df6a:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400df6e:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400df72:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400df76:	d169      	bne.n	2400e04c <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400df78:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400df7c:	b900      	cbnz	r0, 2400df80 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400df7e:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
2400df80:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400df84:	2f00      	cmp	r7, #0
2400df86:	d061      	beq.n	2400e04c <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400df88:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400df8c:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400df90:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400df92:	42b0      	cmp	r0, r6
2400df94:	d35a      	bcc.n	2400e04c <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400df96:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400df9a:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400df9c:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400dfa0:	d354      	bcc.n	2400e04c <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400dfa2:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400dfa6:	4288      	cmp	r0, r1
2400dfa8:	f200 8084 	bhi.w	2400e0b4 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400dfac:	f640 71f5 	movw	r1, #4085	; 0xff5
2400dfb0:	4288      	cmp	r0, r1
2400dfb2:	f200 80a3 	bhi.w	2400e0fc <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dfb6:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dfb8:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400dfba:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400dfbc:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400dfbe:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400dfc0:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400dfc2:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400dfc4:	f1bc 0f00 	cmp.w	ip, #0
2400dfc8:	d040      	beq.n	2400e04c <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400dfca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400dfce:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400dfd2:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400dfd4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400dfd8:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400dfda:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400dfdc:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
2400dfe0:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400dfe4:	d332      	bcc.n	2400e04c <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400dfe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400dfea:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400dfec:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400dff0:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400dff2:	4960      	ldr	r1, [pc, #384]	; (2400e174 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400dff4:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400dff6:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400dff8:	485f      	ldr	r0, [pc, #380]	; (2400e178 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400dffa:	4a60      	ldr	r2, [pc, #384]	; (2400e17c <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
2400dffc:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400dffe:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e000:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400e002:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e004:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400e006:	800b      	strh	r3, [r1, #0]
2400e008:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e00a:	f000 8086 	beq.w	2400e11a <find_volume+0x286>
2400e00e:	6913      	ldr	r3, [r2, #16]
2400e010:	429d      	cmp	r5, r3
2400e012:	d06f      	beq.n	2400e0f4 <find_volume+0x260>
	return FR_OK;
2400e014:	2400      	movs	r4, #0
2400e016:	e01a      	b.n	2400e04e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e018:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400e01c:	b10e      	cbz	r6, 2400e022 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400e01e:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e022:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400e026:	b10c      	cbz	r4, 2400e02c <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400e028:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e02c:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400e030:	b303      	cbz	r3, 2400e074 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400e032:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e036:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400e03a:	b10f      	cbz	r7, 2400e040 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400e03c:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e040:	b9f6      	cbnz	r6, 2400e080 <find_volume+0x1ec>
2400e042:	bb2c      	cbnz	r4, 2400e090 <find_volume+0x1fc>
2400e044:	f1b8 0f00 	cmp.w	r8, #0
2400e048:	d12c      	bne.n	2400e0a4 <find_volume+0x210>
2400e04a:	b93f      	cbnz	r7, 2400e05c <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400e04c:	240d      	movs	r4, #13
}
2400e04e:	4620      	mov	r0, r4
2400e050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400e054:	2403      	movs	r4, #3
}
2400e056:	4620      	mov	r0, r4
2400e058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e05c:	4639      	mov	r1, r7
2400e05e:	4628      	mov	r0, r5
2400e060:	f7ff fe9c 	bl	2400dd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e064:	2801      	cmp	r0, #1
2400e066:	d95b      	bls.n	2400e120 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400e068:	2804      	cmp	r0, #4
2400e06a:	d1ef      	bne.n	2400e04c <find_volume+0x1b8>
2400e06c:	2401      	movs	r4, #1
2400e06e:	e7ee      	b.n	2400e04e <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400e070:	240c      	movs	r4, #12
2400e072:	e7ec      	b.n	2400e04e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400e074:	4698      	mov	r8, r3
2400e076:	e7de      	b.n	2400e036 <find_volume+0x1a2>
					*path = ++tt;
2400e078:	f10c 0301 	add.w	r3, ip, #1
2400e07c:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400e07e:	e729      	b.n	2400ded4 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e080:	4631      	mov	r1, r6
2400e082:	4628      	mov	r0, r5
2400e084:	f7ff fe8a 	bl	2400dd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e088:	2801      	cmp	r0, #1
2400e08a:	d8da      	bhi.n	2400e042 <find_volume+0x1ae>
2400e08c:	4634      	mov	r4, r6
2400e08e:	e752      	b.n	2400df36 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e090:	4621      	mov	r1, r4
2400e092:	4628      	mov	r0, r5
2400e094:	f7ff fe82 	bl	2400dd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e098:	2801      	cmp	r0, #1
2400e09a:	f67f af4c 	bls.w	2400df36 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400e09e:	f1b8 0f00 	cmp.w	r8, #0
2400e0a2:	d0d2      	beq.n	2400e04a <find_volume+0x1b6>
2400e0a4:	4641      	mov	r1, r8
2400e0a6:	4628      	mov	r0, r5
2400e0a8:	f7ff fe78 	bl	2400dd9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400e0ac:	2801      	cmp	r0, #1
2400e0ae:	d8cc      	bhi.n	2400e04a <find_volume+0x1b6>
2400e0b0:	4644      	mov	r4, r8
2400e0b2:	e740      	b.n	2400df36 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
2400e0b4:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e0b8:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e0ba:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400e0bc:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400e0be:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e0c2:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e0c4:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400e0c6:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400e0c8:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400e0ca:	d1bf      	bne.n	2400e04c <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400e0cc:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400e0ce:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400e0d0:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400e0d4:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400e0d6:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400e0da:	d3b7      	bcc.n	2400e04c <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400e0dc:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400e0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400e0e4:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400e0e6:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400e0e8:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400e0ea:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400e0ee:	d019      	beq.n	2400e124 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400e0f0:	2003      	movs	r0, #3
2400e0f2:	e77e      	b.n	2400dff2 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e0f4:	2300      	movs	r3, #0
	return FR_OK;
2400e0f6:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e0f8:	6113      	str	r3, [r2, #16]
2400e0fa:	e7a8      	b.n	2400e04e <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e0fc:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e0fe:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400e100:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400e102:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400e104:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400e106:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400e108:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400e10a:	f1bc 0f00 	cmp.w	ip, #0
2400e10e:	d09d      	beq.n	2400e04c <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400e110:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400e112:	0049      	lsls	r1, r1, #1
2400e114:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400e116:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
2400e118:	e760      	b.n	2400dfdc <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400e11a:	2300      	movs	r3, #0
2400e11c:	6013      	str	r3, [r2, #0]
2400e11e:	e776      	b.n	2400e00e <find_volume+0x17a>
2400e120:	463c      	mov	r4, r7
2400e122:	e708      	b.n	2400df36 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400e124:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e126:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2400e128:	4299      	cmp	r1, r3
2400e12a:	d004      	beq.n	2400e136 <find_volume+0x2a2>
2400e12c:	4628      	mov	r0, r5
2400e12e:	f7ff fe77 	bl	2400de20 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
2400e132:	2800      	cmp	r0, #0
2400e134:	d1dc      	bne.n	2400e0f0 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400e136:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400e13a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400e13e:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400e140:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
2400e142:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400e144:	d1d4      	bne.n	2400e0f0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400e146:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400e148:	4b0d      	ldr	r3, [pc, #52]	; (2400e180 <find_volume+0x2ec>)
2400e14a:	429a      	cmp	r2, r3
2400e14c:	d1d0      	bne.n	2400e0f0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400e14e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400e152:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400e156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400e15a:	3320      	adds	r3, #32
2400e15c:	429a      	cmp	r2, r3
2400e15e:	d1c7      	bne.n	2400e0f0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400e160:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400e164:	2003      	movs	r0, #3
2400e166:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
2400e16a:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400e16e:	e740      	b.n	2400dff2 <find_volume+0x15e>
2400e170:	2001f5f0 	.word	0x2001f5f0
2400e174:	2001f614 	.word	0x2001f614
2400e178:	2001f618 	.word	0x2001f618
2400e17c:	2001f5f4 	.word	0x2001f5f4
2400e180:	41615252 	.word	0x41615252

2400e184 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400e184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
2400e188:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400e18a:	4604      	mov	r4, r0
2400e18c:	460d      	mov	r5, r1
2400e18e:	4616      	mov	r6, r2
		switch (fs->fs_type) {
2400e190:	2b02      	cmp	r3, #2
2400e192:	d006      	beq.n	2400e1a2 <put_fat.part.0+0x1e>
2400e194:	2b03      	cmp	r3, #3
2400e196:	d052      	beq.n	2400e23e <put_fat.part.0+0xba>
2400e198:	2b01      	cmp	r3, #1
2400e19a:	d01b      	beq.n	2400e1d4 <put_fat.part.0+0x50>
2400e19c:	2002      	movs	r0, #2
}
2400e19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400e1a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e1a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400e1a6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e1aa:	4299      	cmp	r1, r3
2400e1ac:	d003      	beq.n	2400e1b6 <put_fat.part.0+0x32>
2400e1ae:	f7ff fe37 	bl	2400de20 <move_window.part.0>
			if (res != FR_OK) break;
2400e1b2:	2800      	cmp	r0, #0
2400e1b4:	d1f3      	bne.n	2400e19e <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400e1b6:	006d      	lsls	r5, r5, #1
2400e1b8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400e1bc:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
2400e1c0:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400e1c2:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400e1c6:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400e1c8:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
2400e1ca:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
2400e1cc:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
2400e1ce:	70e3      	strb	r3, [r4, #3]
}
2400e1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
2400e1d4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e1d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e1da:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e1dc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e1e0:	4299      	cmp	r1, r3
2400e1e2:	d003      	beq.n	2400e1ec <put_fat.part.0+0x68>
2400e1e4:	f7ff fe1c 	bl	2400de20 <move_window.part.0>
			if (res != FR_OK) break;
2400e1e8:	2800      	cmp	r0, #0
2400e1ea:	d1d8      	bne.n	2400e19e <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e1ec:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400e1ee:	f107 0801 	add.w	r8, r7, #1
2400e1f2:	f104 0934 	add.w	r9, r4, #52	; 0x34
2400e1f6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e1fa:	d542      	bpl.n	2400e282 <put_fat.part.0+0xfe>
2400e1fc:	f819 3007 	ldrb.w	r3, [r9, r7]
2400e200:	f003 030f 	and.w	r3, r3, #15
2400e204:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
2400e208:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
2400e20c:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e20e:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400e210:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e212:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e216:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400e218:	4299      	cmp	r1, r3
2400e21a:	d004      	beq.n	2400e226 <put_fat.part.0+0xa2>
2400e21c:	4620      	mov	r0, r4
2400e21e:	f7ff fdff 	bl	2400de20 <move_window.part.0>
			if (res != FR_OK) break;
2400e222:	2800      	cmp	r0, #0
2400e224:	d1bb      	bne.n	2400e19e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400e226:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e22a:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
2400e22e:	44c8      	add	r8, r9
			fs->wflag = 1;
2400e230:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e232:	f888 2000 	strb.w	r2, [r8]
			break;
2400e236:	2000      	movs	r0, #0
			fs->wflag = 1;
2400e238:	70e3      	strb	r3, [r4, #3]
}
2400e23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400e23e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e240:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400e242:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e246:	4299      	cmp	r1, r3
2400e248:	d003      	beq.n	2400e252 <put_fat.part.0+0xce>
2400e24a:	f7ff fde9 	bl	2400de20 <move_window.part.0>
			if (res != FR_OK) break;
2400e24e:	2800      	cmp	r0, #0
2400e250:	d1a5      	bne.n	2400e19e <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400e252:	00ad      	lsls	r5, r5, #2
2400e254:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400e258:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
2400e25c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e260:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400e262:	1941      	adds	r1, r0, r5
2400e264:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400e268:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
2400e26a:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400e26c:	5542      	strb	r2, [r0, r5]
2400e26e:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400e270:	708b      	strb	r3, [r1, #2]
2400e272:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
2400e274:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400e276:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
2400e278:	70ca      	strb	r2, [r1, #3]
			break;
2400e27a:	2000      	movs	r0, #0
			fs->wflag = 1;
2400e27c:	70e3      	strb	r3, [r4, #3]
}
2400e27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400e282:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
2400e286:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e288:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400e28a:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400e28c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e290:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400e292:	4299      	cmp	r1, r3
2400e294:	d005      	beq.n	2400e2a2 <put_fat.part.0+0x11e>
2400e296:	4620      	mov	r0, r4
2400e298:	f7ff fdc2 	bl	2400de20 <move_window.part.0>
			if (res != FR_OK) break;
2400e29c:	2800      	cmp	r0, #0
2400e29e:	f47f af7e 	bne.w	2400e19e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400e2a2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e2a6:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
2400e2aa:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400e2ac:	f898 3000 	ldrb.w	r3, [r8]
2400e2b0:	f023 060f 	bic.w	r6, r3, #15
2400e2b4:	4332      	orrs	r2, r6
2400e2b6:	e7bb      	b.n	2400e230 <put_fat.part.0+0xac>

2400e2b8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e2b8:	2901      	cmp	r1, #1
2400e2ba:	d90e      	bls.n	2400e2da <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e2be:	6983      	ldr	r3, [r0, #24]
2400e2c0:	460c      	mov	r4, r1
2400e2c2:	4605      	mov	r5, r0
2400e2c4:	4299      	cmp	r1, r3
2400e2c6:	d206      	bcs.n	2400e2d6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400e2c8:	7803      	ldrb	r3, [r0, #0]
2400e2ca:	2b02      	cmp	r3, #2
2400e2cc:	d03e      	beq.n	2400e34c <get_fat.isra.0+0x94>
2400e2ce:	2b03      	cmp	r3, #3
2400e2d0:	d02b      	beq.n	2400e32a <get_fat.isra.0+0x72>
2400e2d2:	2b01      	cmp	r3, #1
2400e2d4:	d003      	beq.n	2400e2de <get_fat.isra.0+0x26>
2400e2d6:	2001      	movs	r0, #1
}
2400e2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400e2da:	2001      	movs	r0, #1
}
2400e2dc:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
2400e2de:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e2e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e2e4:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e2e6:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e2ea:	4291      	cmp	r1, r2
2400e2ec:	d004      	beq.n	2400e2f8 <get_fat.isra.0+0x40>
2400e2ee:	f7ff fd97 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e2f2:	bba0      	cbnz	r0, 2400e35e <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e2f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e2f6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400e2f8:	1c77      	adds	r7, r6, #1
2400e2fa:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e2fe:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e302:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e304:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400e306:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e30a:	d003      	beq.n	2400e314 <get_fat.isra.0+0x5c>
2400e30c:	4628      	mov	r0, r5
2400e30e:	f7ff fd87 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e312:	bb20      	cbnz	r0, 2400e35e <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e314:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e318:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400e31a:	443d      	add	r5, r7
2400e31c:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
2400e320:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e324:	d524      	bpl.n	2400e370 <get_fat.isra.0+0xb8>
2400e326:	0900      	lsrs	r0, r0, #4
}
2400e328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e32a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e32c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e32e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e332:	4299      	cmp	r1, r3
2400e334:	d002      	beq.n	2400e33c <get_fat.isra.0+0x84>
2400e336:	f7ff fd73 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e33a:	b980      	cbnz	r0, 2400e35e <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e33c:	00a4      	lsls	r4, r4, #2
2400e33e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e342:	4425      	add	r5, r4
2400e344:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e346:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400e34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e34c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e34e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e350:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e354:	4299      	cmp	r1, r3
2400e356:	d005      	beq.n	2400e364 <get_fat.isra.0+0xac>
2400e358:	f7ff fd62 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e35c:	b110      	cbz	r0, 2400e364 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400e35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400e362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e364:	0064      	lsls	r4, r4, #1
2400e366:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400e36a:	4425      	add	r5, r4
2400e36c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
2400e36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e370:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
2400e374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400e376:	bf00      	nop

2400e378 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
2400e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e37c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e37e:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e380:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e382:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e386:	d22c      	bcs.n	2400e3e2 <dir_next.constprop.0+0x6a>
2400e388:	b35b      	cbz	r3, 2400e3e2 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e38a:	f3c5 0708 	ubfx	r7, r5, #0, #9
2400e38e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e390:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e392:	b137      	cbz	r7, 2400e3a2 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e394:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
2400e396:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400e398:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e39a:	443e      	add	r6, r7
2400e39c:	6226      	str	r6, [r4, #32]
}
2400e39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
2400e3a2:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400e3a4:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400e3a6:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400e3a8:	b1f1      	cbz	r1, 2400e3e8 <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e3aa:	8973      	ldrh	r3, [r6, #10]
2400e3ac:	3b01      	subs	r3, #1
2400e3ae:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
2400e3b2:	d1ef      	bne.n	2400e394 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e3b4:	4630      	mov	r0, r6
2400e3b6:	f7ff ff7f 	bl	2400e2b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e3ba:	2801      	cmp	r0, #1
2400e3bc:	d91c      	bls.n	2400e3f8 <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e3be:	1c43      	adds	r3, r0, #1
2400e3c0:	d01c      	beq.n	2400e3fc <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e3c2:	69b3      	ldr	r3, [r6, #24]
2400e3c4:	4298      	cmp	r0, r3
2400e3c6:	d213      	bcs.n	2400e3f0 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e3c8:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
2400e3ca:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e3cc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e3ce:	4298      	cmp	r0, r3
2400e3d0:	d204      	bcs.n	2400e3dc <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
2400e3d2:	f8b6 800a 	ldrh.w	r8, [r6, #10]
2400e3d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
2400e3d8:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
2400e3dc:	f8c4 801c 	str.w	r8, [r4, #28]
2400e3e0:	e7d8      	b.n	2400e394 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e3e2:	2004      	movs	r0, #4
}
2400e3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e3e8:	8933      	ldrh	r3, [r6, #8]
2400e3ea:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400e3ee:	d8d1      	bhi.n	2400e394 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
2400e3f0:	2300      	movs	r3, #0
2400e3f2:	2004      	movs	r0, #4
2400e3f4:	61e3      	str	r3, [r4, #28]
2400e3f6:	e7d2      	b.n	2400e39e <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e3f8:	2002      	movs	r0, #2
2400e3fa:	e7d0      	b.n	2400e39e <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e3fc:	2001      	movs	r0, #1
2400e3fe:	e7ce      	b.n	2400e39e <dir_next.constprop.0+0x26>

2400e400 <dir_read.constprop.0>:
FRESULT dir_read (
2400e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400e404:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
2400e408:	b083      	sub	sp, #12
2400e40a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e40c:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
2400e40e:	f1ba 0f00 	cmp.w	sl, #0
2400e412:	d064      	beq.n	2400e4de <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
2400e414:	f04f 09ff 	mov.w	r9, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e418:	f106 0834 	add.w	r8, r6, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400e41c:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e41e:	6b35      	ldr	r5, [r6, #48]	; 0x30
2400e420:	4555      	cmp	r5, sl
2400e422:	d015      	beq.n	2400e450 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e424:	78f3      	ldrb	r3, [r6, #3]
2400e426:	2b00      	cmp	r3, #0
2400e428:	f040 80d6 	bne.w	2400e5d8 <dir_read.constprop.0+0x1d8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e42c:	2301      	movs	r3, #1
2400e42e:	4652      	mov	r2, sl
2400e430:	4641      	mov	r1, r8
2400e432:	7870      	ldrb	r0, [r6, #1]
2400e434:	f7ff fb46 	bl	2400dac4 <disk_read>
2400e438:	b140      	cbz	r0, 2400e44c <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
2400e43a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400e43e:	2001      	movs	r0, #1
			fs->winsect = sector;
2400e440:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400e442:	2300      	movs	r3, #0
2400e444:	61e3      	str	r3, [r4, #28]
}
2400e446:	b003      	add	sp, #12
2400e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400e44c:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400e450:	6a21      	ldr	r1, [r4, #32]
2400e452:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400e454:	2a00      	cmp	r2, #0
2400e456:	d042      	beq.n	2400e4de <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400e458:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400e45a:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400e45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400e460:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400e462:	d005      	beq.n	2400e470 <dir_read.constprop.0+0x70>
2400e464:	2a2e      	cmp	r2, #46	; 0x2e
2400e466:	d003      	beq.n	2400e470 <dir_read.constprop.0+0x70>
2400e468:	f023 0020 	bic.w	r0, r3, #32
2400e46c:	2808      	cmp	r0, #8
2400e46e:	d13d      	bne.n	2400e4ec <dir_read.constprop.0+0xec>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e470:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
2400e472:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e474:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e476:	f8d4 a01c 	ldr.w	sl, [r4, #28]
2400e47a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e47e:	d22e      	bcs.n	2400e4de <dir_read.constprop.0+0xde>
2400e480:	f1ba 0f00 	cmp.w	sl, #0
2400e484:	d02b      	beq.n	2400e4de <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e486:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400e48a:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e48c:	bb4a      	cbnz	r2, 2400e4e2 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
2400e48e:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
2400e492:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e494:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e498:	b969      	cbnz	r1, 2400e4b6 <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e49a:	891a      	ldrh	r2, [r3, #8]
2400e49c:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400e4a0:	d91d      	bls.n	2400e4de <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e4a2:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e4a4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e4a6:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400e4a8:	f1ba 0f00 	cmp.w	sl, #0
2400e4ac:	d1b7      	bne.n	2400e41e <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400e4ae:	2000      	movs	r0, #0
}
2400e4b0:	b003      	add	sp, #12
2400e4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e4b6:	895a      	ldrh	r2, [r3, #10]
2400e4b8:	3a01      	subs	r2, #1
2400e4ba:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
2400e4be:	d1f0      	bne.n	2400e4a2 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e4c0:	4618      	mov	r0, r3
2400e4c2:	9301      	str	r3, [sp, #4]
2400e4c4:	f7ff fef8 	bl	2400e2b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e4c8:	2801      	cmp	r0, #1
2400e4ca:	f240 80ba 	bls.w	2400e642 <dir_read.constprop.0+0x242>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e4ce:	1c43      	adds	r3, r0, #1
2400e4d0:	f000 8089 	beq.w	2400e5e6 <dir_read.constprop.0+0x1e6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e4d4:	9b01      	ldr	r3, [sp, #4]
2400e4d6:	699a      	ldr	r2, [r3, #24]
2400e4d8:	4290      	cmp	r0, r2
2400e4da:	f0c0 80a5 	bcc.w	2400e628 <dir_read.constprop.0+0x228>
	FRESULT res = FR_NO_FILE;
2400e4de:	2004      	movs	r0, #4
2400e4e0:	e7af      	b.n	2400e442 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e4e2:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e4e4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e4e6:	441a      	add	r2, r3
2400e4e8:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
2400e4ea:	e798      	b.n	2400e41e <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400e4ec:	2b0f      	cmp	r3, #15
2400e4ee:	f040 80b0 	bne.w	2400e652 <dir_read.constprop.0+0x252>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400e4f2:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
2400e4f4:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400e4f6:	d578      	bpl.n	2400e5ea <dir_read.constprop.0+0x1ea>
						c &= (BYTE)~LLEF; ord = c;
2400e4f8:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400e4fc:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400e500:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e502:	7b4b      	ldrb	r3, [r1, #13]
2400e504:	454b      	cmp	r3, r9
2400e506:	d1b4      	bne.n	2400e472 <dir_read.constprop.0+0x72>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400e508:	8b4b      	ldrh	r3, [r1, #26]
2400e50a:	2b00      	cmp	r3, #0
2400e50c:	d1b1      	bne.n	2400e472 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400e50e:	780b      	ldrb	r3, [r1, #0]
2400e510:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400e514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400e518:	3b01      	subs	r3, #1
2400e51a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400e51e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e522:	2bfe      	cmp	r3, #254	; 0xfe
2400e524:	d8a5      	bhi.n	2400e472 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e526:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e52a:	1c5a      	adds	r2, r3, #1
2400e52c:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
2400e530:	f8b1 e003 	ldrh.w	lr, [r1, #3]
		if (wc) {
2400e534:	2800      	cmp	r0, #0
2400e536:	f040 8094 	bne.w	2400e662 <dir_read.constprop.0+0x262>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e53e:	459e      	cmp	lr, r3
2400e540:	d197      	bne.n	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e542:	f8b1 b005 	ldrh.w	fp, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e546:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e54a:	459b      	cmp	fp, r3
2400e54c:	d191      	bne.n	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e54e:	f8b1 a007 	ldrh.w	sl, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e552:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e556:	459a      	cmp	sl, r3
2400e558:	d18b      	bne.n	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e55a:	f8b1 e009 	ldrh.w	lr, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e55e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e562:	459e      	cmp	lr, r3
2400e564:	d185      	bne.n	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e566:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e56a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e56e:	459a      	cmp	sl, r3
2400e570:	f47f af7f 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e574:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e578:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e57c:	459b      	cmp	fp, r3
2400e57e:	f47f af78 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e582:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e586:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e58a:	459e      	cmp	lr, r3
2400e58c:	f47f af71 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e590:	f8b1 a014 	ldrh.w	sl, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e594:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e598:	459a      	cmp	sl, r3
2400e59a:	f47f af6a 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e59e:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5a6:	459e      	cmp	lr, r3
2400e5a8:	f47f af63 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e5ac:	f8b1 a018 	ldrh.w	sl, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5b4:	459a      	cmp	sl, r3
2400e5b6:	f47f af5c 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e5ba:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5be:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5c2:	459e      	cmp	lr, r3
2400e5c4:	f47f af55 	bne.w	2400e472 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400e5c8:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e5cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e5d0:	459a      	cmp	sl, r3
2400e5d2:	f000 80d5 	beq.w	2400e780 <dir_read.constprop.0+0x380>
2400e5d6:	e74c      	b.n	2400e472 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e5d8:	2301      	movs	r3, #1
2400e5da:	462a      	mov	r2, r5
2400e5dc:	4641      	mov	r1, r8
2400e5de:	7870      	ldrb	r0, [r6, #1]
2400e5e0:	f7ff fa7e 	bl	2400dae0 <disk_write>
2400e5e4:	b128      	cbz	r0, 2400e5f2 <dir_read.constprop.0+0x1f2>
	FRESULT res = FR_NO_FILE;
2400e5e6:	2001      	movs	r0, #1
2400e5e8:	e72b      	b.n	2400e442 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e5ea:	42ba      	cmp	r2, r7
2400e5ec:	f47f af41 	bne.w	2400e472 <dir_read.constprop.0+0x72>
2400e5f0:	e787      	b.n	2400e502 <dir_read.constprop.0+0x102>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e5f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
2400e5f4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e5f6:	1aea      	subs	r2, r5, r3
2400e5f8:	69f3      	ldr	r3, [r6, #28]
2400e5fa:	429a      	cmp	r2, r3
2400e5fc:	f4bf af16 	bcs.w	2400e42c <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e600:	f896 b002 	ldrb.w	fp, [r6, #2]
2400e604:	f1bb 0f01 	cmp.w	fp, #1
2400e608:	d801      	bhi.n	2400e60e <dir_read.constprop.0+0x20e>
2400e60a:	e70f      	b.n	2400e42c <dir_read.constprop.0+0x2c>
					wsect += fs->fsize;
2400e60c:	69f3      	ldr	r3, [r6, #28]
2400e60e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e610:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400e614:	2301      	movs	r3, #1
2400e616:	4641      	mov	r1, r8
2400e618:	462a      	mov	r2, r5
2400e61a:	7870      	ldrb	r0, [r6, #1]
2400e61c:	f7ff fa60 	bl	2400dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e620:	f1bb 0f01 	cmp.w	fp, #1
2400e624:	d1f2      	bne.n	2400e60c <dir_read.constprop.0+0x20c>
2400e626:	e701      	b.n	2400e42c <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e628:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
2400e62a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e62c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e62e:	4290      	cmp	r0, r2
2400e630:	d209      	bcs.n	2400e646 <dir_read.constprop.0+0x246>
	return clst * fs->csize + fs->database;
2400e632:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
2400e636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400e638:	fb00 2a0a 	mla	sl, r0, sl, r2
				dp->sect = clust2sect(fs, clst);
2400e63c:	f8c4 a01c 	str.w	sl, [r4, #28]
2400e640:	e72f      	b.n	2400e4a2 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e642:	2002      	movs	r0, #2
2400e644:	e6fd      	b.n	2400e442 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e646:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400e648:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400e64c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e64e:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400e650:	e72d      	b.n	2400e4ae <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400e652:	2f00      	cmp	r7, #0
2400e654:	f000 809f 	beq.w	2400e796 <dir_read.constprop.0+0x396>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400e658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400e65c:	2000      	movs	r0, #0
2400e65e:	6323      	str	r3, [r4, #48]	; 0x30
2400e660:	e6f1      	b.n	2400e446 <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e662:	2aff      	cmp	r2, #255	; 0xff
2400e664:	f000 80e1 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e668:	f82c e012 	strh.w	lr, [ip, r2, lsl #1]
2400e66c:	0050      	lsls	r0, r2, #1
2400e66e:	f8b1 b005 	ldrh.w	fp, [r1, #5]
2400e672:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400e674:	f1be 0f00 	cmp.w	lr, #0
2400e678:	f43f af65 	beq.w	2400e546 <dir_read.constprop.0+0x146>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e67c:	2aff      	cmp	r2, #255	; 0xff
2400e67e:	f000 80d4 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e682:	4460      	add	r0, ip
2400e684:	1cda      	adds	r2, r3, #3
2400e686:	f8a0 b002 	strh.w	fp, [r0, #2]
2400e68a:	f8b1 a007 	ldrh.w	sl, [r1, #7]
		if (wc) {
2400e68e:	f1bb 0f00 	cmp.w	fp, #0
2400e692:	f43f af5e 	beq.w	2400e552 <dir_read.constprop.0+0x152>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e696:	2aff      	cmp	r2, #255	; 0xff
2400e698:	f000 80c7 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e69c:	f8a0 a004 	strh.w	sl, [r0, #4]
2400e6a0:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400e6a2:	f8b1 e009 	ldrh.w	lr, [r1, #9]
		if (wc) {
2400e6a6:	f1ba 0f00 	cmp.w	sl, #0
2400e6aa:	f43f af58 	beq.w	2400e55e <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6ae:	2aff      	cmp	r2, #255	; 0xff
2400e6b0:	f000 80bb 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6b4:	f8a0 e006 	strh.w	lr, [r0, #6]
2400e6b8:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400e6ba:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
		if (wc) {
2400e6be:	f1be 0f00 	cmp.w	lr, #0
2400e6c2:	f43f af52 	beq.w	2400e56a <dir_read.constprop.0+0x16a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6c6:	2aff      	cmp	r2, #255	; 0xff
2400e6c8:	f000 80af 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6cc:	f8a0 a008 	strh.w	sl, [r0, #8]
2400e6d0:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400e6d2:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
2400e6d6:	f1ba 0f00 	cmp.w	sl, #0
2400e6da:	f43f af4d 	beq.w	2400e578 <dir_read.constprop.0+0x178>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6de:	2aff      	cmp	r2, #255	; 0xff
2400e6e0:	f000 80a3 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6e4:	f8a0 b00a 	strh.w	fp, [r0, #10]
2400e6e8:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400e6ea:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc) {
2400e6ee:	f1bb 0f00 	cmp.w	fp, #0
2400e6f2:	f43f af48 	beq.w	2400e586 <dir_read.constprop.0+0x186>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e6f6:	2aff      	cmp	r2, #255	; 0xff
2400e6f8:	f000 8097 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e6fc:	f8a0 e00c 	strh.w	lr, [r0, #12]
2400e700:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400e704:	f8b1 a014 	ldrh.w	sl, [r1, #20]
		if (wc) {
2400e708:	f1be 0f00 	cmp.w	lr, #0
2400e70c:	f43f af42 	beq.w	2400e594 <dir_read.constprop.0+0x194>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e710:	2aff      	cmp	r2, #255	; 0xff
2400e712:	f000 808a 	beq.w	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e716:	f8a0 a00e 	strh.w	sl, [r0, #14]
2400e71a:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400e71e:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc) {
2400e722:	f1ba 0f00 	cmp.w	sl, #0
2400e726:	f43f af3c 	beq.w	2400e5a2 <dir_read.constprop.0+0x1a2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e72a:	2aff      	cmp	r2, #255	; 0xff
2400e72c:	f43f aea1 	beq.w	2400e472 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e730:	f8a0 e010 	strh.w	lr, [r0, #16]
2400e734:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400e738:	f8b1 a018 	ldrh.w	sl, [r1, #24]
		if (wc) {
2400e73c:	f1be 0f00 	cmp.w	lr, #0
2400e740:	f43f af36 	beq.w	2400e5b0 <dir_read.constprop.0+0x1b0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e744:	2aff      	cmp	r2, #255	; 0xff
2400e746:	d070      	beq.n	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e748:	f8a0 a012 	strh.w	sl, [r0, #18]
2400e74c:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400e750:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc) {
2400e754:	f1ba 0f00 	cmp.w	sl, #0
2400e758:	f43f af31 	beq.w	2400e5be <dir_read.constprop.0+0x1be>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e75c:	2aff      	cmp	r2, #255	; 0xff
2400e75e:	d064      	beq.n	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e760:	f8a0 e014 	strh.w	lr, [r0, #20]
2400e764:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400e768:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
		if (wc) {
2400e76c:	f1be 0f00 	cmp.w	lr, #0
2400e770:	f43f af2c 	beq.w	2400e5cc <dir_read.constprop.0+0x1cc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400e774:	2aff      	cmp	r2, #255	; 0xff
2400e776:	d058      	beq.n	2400e82a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400e778:	f103 020d 	add.w	r2, r3, #13
2400e77c:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400e780:	780b      	ldrb	r3, [r1, #0]
2400e782:	0659      	lsls	r1, r3, #25
2400e784:	d504      	bpl.n	2400e790 <dir_read.constprop.0+0x390>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400e786:	2aff      	cmp	r2, #255	; 0xff
2400e788:	d04f      	beq.n	2400e82a <dir_read.constprop.0+0x42a>
		lfnbuf[i] = 0;
2400e78a:	2300      	movs	r3, #0
2400e78c:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e790:	3f01      	subs	r7, #1
2400e792:	b2ff      	uxtb	r7, r7
2400e794:	e66e      	b.n	2400e474 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e796:	780a      	ldrb	r2, [r1, #0]
2400e798:	01d3      	lsls	r3, r2, #7
2400e79a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400e79e:	784a      	ldrb	r2, [r1, #1]
2400e7a0:	441a      	add	r2, r3
2400e7a2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7a6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7aa:	788a      	ldrb	r2, [r1, #2]
2400e7ac:	fa52 f283 	uxtab	r2, r2, r3
2400e7b0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7b4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7b8:	78ca      	ldrb	r2, [r1, #3]
2400e7ba:	fa52 f283 	uxtab	r2, r2, r3
2400e7be:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7c2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7c6:	790a      	ldrb	r2, [r1, #4]
2400e7c8:	fa52 f283 	uxtab	r2, r2, r3
2400e7cc:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7d4:	794a      	ldrb	r2, [r1, #5]
2400e7d6:	fa52 f283 	uxtab	r2, r2, r3
2400e7da:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7de:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7e2:	798a      	ldrb	r2, [r1, #6]
2400e7e4:	fa52 f283 	uxtab	r2, r2, r3
2400e7e8:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7ec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7f0:	79ca      	ldrb	r2, [r1, #7]
2400e7f2:	fa52 f283 	uxtab	r2, r2, r3
2400e7f6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e7fa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e7fe:	7a0a      	ldrb	r2, [r1, #8]
2400e800:	fa52 f283 	uxtab	r2, r2, r3
2400e804:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e808:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e80c:	7a4a      	ldrb	r2, [r1, #9]
2400e80e:	7a89      	ldrb	r1, [r1, #10]
2400e810:	fa52 f283 	uxtab	r2, r2, r3
2400e814:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e818:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e81c:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400e820:	b2db      	uxtb	r3, r3
2400e822:	4599      	cmp	r9, r3
2400e824:	f47f af18 	bne.w	2400e658 <dir_read.constprop.0+0x258>
2400e828:	e641      	b.n	2400e4ae <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e82a:	4617      	mov	r7, r2
2400e82c:	e622      	b.n	2400e474 <dir_read.constprop.0+0x74>
2400e82e:	bf00      	nop

2400e830 <sync_fs>:
{
2400e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e832:	78c3      	ldrb	r3, [r0, #3]
{
2400e834:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e836:	b95b      	cbnz	r3, 2400e850 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400e838:	7823      	ldrb	r3, [r4, #0]
2400e83a:	2b03      	cmp	r3, #3
2400e83c:	d029      	beq.n	2400e892 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400e83e:	2200      	movs	r2, #0
2400e840:	7860      	ldrb	r0, [r4, #1]
2400e842:	4611      	mov	r1, r2
2400e844:	f7ff f95a 	bl	2400dafc <disk_ioctl>
			res = FR_DISK_ERR;
2400e848:	3800      	subs	r0, #0
2400e84a:	bf18      	it	ne
2400e84c:	2001      	movne	r0, #1
}
2400e84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400e850:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e852:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400e856:	2301      	movs	r3, #1
2400e858:	7840      	ldrb	r0, [r0, #1]
2400e85a:	462a      	mov	r2, r5
2400e85c:	4639      	mov	r1, r7
2400e85e:	f7ff f93f 	bl	2400dae0 <disk_write>
2400e862:	2800      	cmp	r0, #0
2400e864:	d150      	bne.n	2400e908 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e866:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400e868:	69e3      	ldr	r3, [r4, #28]
2400e86a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400e86c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e86e:	429a      	cmp	r2, r3
2400e870:	d2e2      	bcs.n	2400e838 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e872:	78a6      	ldrb	r6, [r4, #2]
2400e874:	2e01      	cmp	r6, #1
2400e876:	d801      	bhi.n	2400e87c <sync_fs+0x4c>
2400e878:	e7de      	b.n	2400e838 <sync_fs+0x8>
					wsect += fs->fsize;
2400e87a:	69e3      	ldr	r3, [r4, #28]
2400e87c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e87e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e880:	2301      	movs	r3, #1
2400e882:	4639      	mov	r1, r7
2400e884:	462a      	mov	r2, r5
2400e886:	7860      	ldrb	r0, [r4, #1]
2400e888:	f7ff f92a 	bl	2400dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e88c:	2e01      	cmp	r6, #1
2400e88e:	d1f4      	bne.n	2400e87a <sync_fs+0x4a>
2400e890:	e7d2      	b.n	2400e838 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400e892:	7925      	ldrb	r5, [r4, #4]
2400e894:	2d01      	cmp	r5, #1
2400e896:	d1d2      	bne.n	2400e83e <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400e898:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400e89c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400e8a0:	2100      	movs	r1, #0
2400e8a2:	4630      	mov	r0, r6
2400e8a4:	f00a f82c 	bl	24018900 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400e8a8:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
2400e8ac:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8ae:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400e8b0:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8b4:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2400e8b6:	4815      	ldr	r0, [pc, #84]	; (2400e90c <sync_fs+0xdc>)
2400e8b8:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
2400e8bc:	6360      	str	r0, [r4, #52]	; 0x34
2400e8be:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
2400e8c2:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400e8c6:	3020      	adds	r0, #32
2400e8c8:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
2400e8cc:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400e8ce:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
2400e8d2:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400e8d4:	0e12      	lsrs	r2, r2, #24
2400e8d6:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
2400e8da:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
2400e8dc:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
2400e8e0:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
2400e8e2:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400e8e4:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
2400e8e8:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400e8ea:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
2400e8ee:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400e8f0:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
2400e8f2:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400e8f4:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
2400e8f8:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400e8fc:	7860      	ldrb	r0, [r4, #1]
2400e8fe:	f7ff f8ef 	bl	2400dae0 <disk_write>
			fs->fsi_flag = 0;
2400e902:	2300      	movs	r3, #0
2400e904:	7123      	strb	r3, [r4, #4]
2400e906:	e79a      	b.n	2400e83e <sync_fs+0xe>
			res = FR_DISK_ERR;
2400e908:	2001      	movs	r0, #1
}
2400e90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400e90c:	41615252 	.word	0x41615252

2400e910 <create_chain>:
{
2400e910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400e914:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
2400e916:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
2400e918:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
2400e91c:	2900      	cmp	r1, #0
2400e91e:	f040 80b4 	bne.w	2400ea8a <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400e922:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400e926:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400e92a:	b9ce      	cbnz	r6, 2400e960 <create_chain+0x50>
2400e92c:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
2400e92e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400e930:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400e932:	429c      	cmp	r4, r3
2400e934:	d318      	bcc.n	2400e968 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
2400e936:	2e01      	cmp	r6, #1
2400e938:	f000 80a3 	beq.w	2400ea82 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400e93c:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
2400e940:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e942:	69ab      	ldr	r3, [r5, #24]
2400e944:	42a3      	cmp	r3, r4
2400e946:	d907      	bls.n	2400e958 <create_chain+0x48>
		switch (fs->fs_type) {
2400e948:	782b      	ldrb	r3, [r5, #0]
2400e94a:	2b02      	cmp	r3, #2
2400e94c:	f000 8088 	beq.w	2400ea60 <create_chain+0x150>
2400e950:	2b03      	cmp	r3, #3
2400e952:	d044      	beq.n	2400e9de <create_chain+0xce>
2400e954:	2b01      	cmp	r3, #1
2400e956:	d00c      	beq.n	2400e972 <create_chain+0x62>
2400e958:	2401      	movs	r4, #1
}
2400e95a:	4620      	mov	r0, r4
2400e95c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400e960:	42b3      	cmp	r3, r6
2400e962:	bf98      	it	ls
2400e964:	2601      	movls	r6, #1
2400e966:	e7e2      	b.n	2400e92e <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e968:	2c01      	cmp	r4, #1
2400e96a:	f8da 5000 	ldr.w	r5, [sl]
2400e96e:	d9f3      	bls.n	2400e958 <create_chain+0x48>
2400e970:	e7e7      	b.n	2400e942 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
2400e972:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e978:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e97a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e97e:	4291      	cmp	r1, r2
2400e980:	d005      	beq.n	2400e98e <create_chain+0x7e>
2400e982:	4628      	mov	r0, r5
2400e984:	f7ff fa4c 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e988:	bb20      	cbnz	r0, 2400e9d4 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e98a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e98c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400e98e:	f107 0b01 	add.w	fp, r7, #1
2400e992:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e996:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e99a:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e99c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400e99e:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e9a2:	d003      	beq.n	2400e9ac <create_chain+0x9c>
2400e9a4:	4628      	mov	r0, r5
2400e9a6:	f7ff fa3b 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e9aa:	b998      	cbnz	r0, 2400e9d4 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e9ac:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e9b0:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400e9b2:	445d      	add	r5, fp
2400e9b4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
2400e9b8:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e9bc:	d575      	bpl.n	2400eaaa <create_chain+0x19a>
2400e9be:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
2400e9c0:	b30b      	cbz	r3, 2400ea06 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400e9c2:	2b01      	cmp	r3, #1
2400e9c4:	d0c8      	beq.n	2400e958 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
2400e9c6:	42a6      	cmp	r6, r4
2400e9c8:	d05b      	beq.n	2400ea82 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400e9ca:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400e9ce:	e7af      	b.n	2400e930 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400e9d0:	2801      	cmp	r0, #1
2400e9d2:	d1c1      	bne.n	2400e958 <create_chain+0x48>
2400e9d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400e9d8:	4620      	mov	r0, r4
2400e9da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e9de:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e9e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e9e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e9e6:	4299      	cmp	r1, r3
2400e9e8:	d004      	beq.n	2400e9f4 <create_chain+0xe4>
2400e9ea:	4628      	mov	r0, r5
2400e9ec:	f7ff fa18 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e9f0:	2800      	cmp	r0, #0
2400e9f2:	d1ef      	bne.n	2400e9d4 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e9f4:	00a3      	lsls	r3, r4, #2
2400e9f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e9fa:	441d      	add	r5, r3
2400e9fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e9fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400ea02:	2b00      	cmp	r3, #0
2400ea04:	d1dd      	bne.n	2400e9c2 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400ea06:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400ea0a:	42a3      	cmp	r3, r4
2400ea0c:	d9a4      	bls.n	2400e958 <create_chain+0x48>
2400ea0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400ea12:	4621      	mov	r1, r4
2400ea14:	4648      	mov	r0, r9
2400ea16:	f7ff fbb5 	bl	2400e184 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400ea1a:	b970      	cbnz	r0, 2400ea3a <create_chain+0x12a>
2400ea1c:	f1b8 0f00 	cmp.w	r8, #0
2400ea20:	d00b      	beq.n	2400ea3a <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400ea22:	f1b8 0f01 	cmp.w	r8, #1
2400ea26:	d097      	beq.n	2400e958 <create_chain+0x48>
2400ea28:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400ea2c:	4598      	cmp	r8, r3
2400ea2e:	d293      	bcs.n	2400e958 <create_chain+0x48>
2400ea30:	4622      	mov	r2, r4
2400ea32:	4641      	mov	r1, r8
2400ea34:	4648      	mov	r0, r9
2400ea36:	f7ff fba5 	bl	2400e184 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400ea3a:	2800      	cmp	r0, #0
2400ea3c:	d1c8      	bne.n	2400e9d0 <create_chain+0xc0>
		fs->last_clst = ncl;
2400ea3e:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400ea42:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
2400ea46:	3b02      	subs	r3, #2
2400ea48:	429a      	cmp	r2, r3
2400ea4a:	d802      	bhi.n	2400ea52 <create_chain+0x142>
2400ea4c:	3a01      	subs	r2, #1
2400ea4e:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
2400ea52:	f899 3004 	ldrb.w	r3, [r9, #4]
2400ea56:	f043 0301 	orr.w	r3, r3, #1
2400ea5a:	f889 3004 	strb.w	r3, [r9, #4]
2400ea5e:	e77c      	b.n	2400e95a <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ea60:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ea62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ea64:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ea68:	4299      	cmp	r1, r3
2400ea6a:	d004      	beq.n	2400ea76 <create_chain+0x166>
2400ea6c:	4628      	mov	r0, r5
2400ea6e:	f7ff f9d7 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ea72:	2800      	cmp	r0, #0
2400ea74:	d1ae      	bne.n	2400e9d4 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400ea76:	0063      	lsls	r3, r4, #1
2400ea78:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400ea7c:	441d      	add	r5, r3
2400ea7e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
2400ea80:	e79e      	b.n	2400e9c0 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
2400ea82:	2400      	movs	r4, #0
}
2400ea84:	4620      	mov	r0, r4
2400ea86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400ea8a:	4648      	mov	r0, r9
2400ea8c:	f7ff fc14 	bl	2400e2b8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400ea90:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400ea92:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400ea94:	f67f af60 	bls.w	2400e958 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400ea98:	1c41      	adds	r1, r0, #1
2400ea9a:	d09b      	beq.n	2400e9d4 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400ea9c:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400eaa0:	4283      	cmp	r3, r0
2400eaa2:	f63f af5a 	bhi.w	2400e95a <create_chain+0x4a>
2400eaa6:	4646      	mov	r6, r8
2400eaa8:	e741      	b.n	2400e92e <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400eaaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400eaae:	e787      	b.n	2400e9c0 <create_chain+0xb0>

2400eab0 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400eab0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400eab4:	d274      	bcs.n	2400eba0 <dir_sdi+0xf0>
2400eab6:	06ca      	lsls	r2, r1, #27
{
2400eab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400eabc:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400eabe:	d151      	bne.n	2400eb64 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400eac0:	6885      	ldr	r5, [r0, #8]
2400eac2:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
2400eac4:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
2400eac8:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400eaca:	2d00      	cmp	r5, #0
2400eacc:	d04d      	beq.n	2400eb6a <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400eace:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400ead2:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400ead6:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400eada:	f0c0 808e 	bcc.w	2400ebfa <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400eade:	2d01      	cmp	r5, #1
2400eae0:	d040      	beq.n	2400eb64 <dir_sdi+0xb4>
2400eae2:	4647      	mov	r7, r8
2400eae4:	e03b      	b.n	2400eb5e <dir_sdi+0xae>
		switch (fs->fs_type) {
2400eae6:	783b      	ldrb	r3, [r7, #0]
2400eae8:	2b02      	cmp	r3, #2
2400eaea:	d073      	beq.n	2400ebd4 <dir_sdi+0x124>
2400eaec:	2b03      	cmp	r3, #3
2400eaee:	d05f      	beq.n	2400ebb0 <dir_sdi+0x100>
2400eaf0:	2b01      	cmp	r3, #1
2400eaf2:	d137      	bne.n	2400eb64 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
2400eaf4:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400eafa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eafc:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400eb00:	4291      	cmp	r1, r2
2400eb02:	d006      	beq.n	2400eb12 <dir_sdi+0x62>
2400eb04:	4638      	mov	r0, r7
2400eb06:	f7ff f98b 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eb0a:	2800      	cmp	r0, #0
2400eb0c:	d172      	bne.n	2400ebf4 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400eb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400eb12:	f10a 0b01 	add.w	fp, sl, #1
2400eb16:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eb1a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400eb1e:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400eb20:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400eb22:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400eb26:	d004      	beq.n	2400eb32 <dir_sdi+0x82>
2400eb28:	4638      	mov	r0, r7
2400eb2a:	f7ff f979 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400eb2e:	2800      	cmp	r0, #0
2400eb30:	d160      	bne.n	2400ebf4 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
2400eb32:	f3cb 0b08 	ubfx	fp, fp, #0, #9
2400eb36:	445f      	add	r7, fp
2400eb38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400eb3c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400eb40:	07eb      	lsls	r3, r5, #31
2400eb42:	d568      	bpl.n	2400ec16 <dir_sdi+0x166>
2400eb44:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400eb48:	2d01      	cmp	r5, #1
2400eb4a:	d90b      	bls.n	2400eb64 <dir_sdi+0xb4>
2400eb4c:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400eb50:	42ab      	cmp	r3, r5
2400eb52:	d907      	bls.n	2400eb64 <dir_sdi+0xb4>
			ofs -= csz;
2400eb54:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400eb58:	45a1      	cmp	r9, r4
2400eb5a:	d850      	bhi.n	2400ebfe <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400eb5c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400eb5e:	69bb      	ldr	r3, [r7, #24]
2400eb60:	42ab      	cmp	r3, r5
2400eb62:	d8c0      	bhi.n	2400eae6 <dir_sdi+0x36>
		switch (fs->fs_type) {
2400eb64:	2002      	movs	r0, #2
}
2400eb66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400eb6a:	f898 3000 	ldrb.w	r3, [r8]
2400eb6e:	2b02      	cmp	r3, #2
2400eb70:	d818      	bhi.n	2400eba4 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400eb72:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400eb76:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400eb7a:	d9f3      	bls.n	2400eb64 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
2400eb7c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
2400eb80:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
2400eb82:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400eb84:	2a00      	cmp	r2, #0
2400eb86:	d0ed      	beq.n	2400eb64 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400eb88:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400eb8c:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400eb90:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
2400eb94:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400eb96:	4443      	add	r3, r8
2400eb98:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
2400eb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
2400eba0:	2002      	movs	r0, #2
}
2400eba2:	4770      	bx	lr
		clst = fs->dirbase;
2400eba4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400eba8:	2b00      	cmp	r3, #0
2400ebaa:	d0e2      	beq.n	2400eb72 <dir_sdi+0xc2>
2400ebac:	461d      	mov	r5, r3
2400ebae:	e78e      	b.n	2400eace <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400ebb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ebb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400ebb4:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ebb8:	4299      	cmp	r1, r3
2400ebba:	d003      	beq.n	2400ebc4 <dir_sdi+0x114>
2400ebbc:	4638      	mov	r0, r7
2400ebbe:	f7ff f92f 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400ebc2:	b9b8      	cbnz	r0, 2400ebf4 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400ebc4:	00ad      	lsls	r5, r5, #2
2400ebc6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400ebca:	442f      	add	r7, r5
2400ebcc:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400ebce:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400ebd2:	e7b9      	b.n	2400eb48 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ebd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ebd8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ebdc:	4299      	cmp	r1, r3
2400ebde:	d003      	beq.n	2400ebe8 <dir_sdi+0x138>
2400ebe0:	4638      	mov	r0, r7
2400ebe2:	f7ff f91d 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ebe6:	b928      	cbnz	r0, 2400ebf4 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400ebe8:	006d      	lsls	r5, r5, #1
2400ebea:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
2400ebee:	442f      	add	r7, r5
2400ebf0:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
2400ebf2:	e7a9      	b.n	2400eb48 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400ebf4:	2001      	movs	r0, #1
}
2400ebf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ebfa:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400ebfe:	3b02      	subs	r3, #2
	clst -= 2;
2400ec00:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ec02:	4299      	cmp	r1, r3
2400ec04:	d20a      	bcs.n	2400ec1c <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
2400ec06:	f8b8 300a 	ldrh.w	r3, [r8, #10]
2400ec0a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
2400ec0e:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
2400ec12:	61f2      	str	r2, [r6, #28]
2400ec14:	e7b5      	b.n	2400eb82 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400ec16:	f3ca 050b 	ubfx	r5, sl, #0, #12
2400ec1a:	e795      	b.n	2400eb48 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
2400ec1c:	2300      	movs	r3, #0
2400ec1e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400ec22:	e79f      	b.n	2400eb64 <dir_sdi+0xb4>

2400ec24 <dir_find>:
{
2400ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400ec28:	2100      	movs	r1, #0
{
2400ec2a:	b085      	sub	sp, #20
2400ec2c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400ec2e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400ec32:	f7ff ff3d 	bl	2400eab0 <dir_sdi>
	if (res != FR_OK) return res;
2400ec36:	4607      	mov	r7, r0
2400ec38:	b9e8      	cbnz	r0, 2400ec76 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ec3a:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400ec3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400ec42:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400ec44:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ec46:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ec48:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400ec4c:	42b5      	cmp	r5, r6
2400ec4e:	d018      	beq.n	2400ec82 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ec50:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ec54:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ec58:	2b00      	cmp	r3, #0
2400ec5a:	f040 8088 	bne.w	2400ed6e <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ec5e:	2301      	movs	r3, #1
2400ec60:	4632      	mov	r2, r6
2400ec62:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ec66:	f7fe ff2d 	bl	2400dac4 <disk_read>
2400ec6a:	b140      	cbz	r0, 2400ec7e <dir_find+0x5a>
			fs->winsect = sector;
2400ec6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400ec70:	2701      	movs	r7, #1
			fs->winsect = sector;
2400ec72:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400ec76:	4638      	mov	r0, r7
2400ec78:	b005      	add	sp, #20
2400ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400ec7e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400ec82:	6a26      	ldr	r6, [r4, #32]
2400ec84:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ec86:	b34d      	cbz	r5, 2400ecdc <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400ec88:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400ec8a:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400ec8c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
2400ec90:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400ec92:	d004      	beq.n	2400ec9e <dir_find+0x7a>
2400ec94:	0717      	lsls	r7, r2, #28
2400ec96:	d526      	bpl.n	2400ece6 <dir_find+0xc2>
2400ec98:	2b0f      	cmp	r3, #15
2400ec9a:	f000 8093 	beq.w	2400edc4 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ec9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400eca2:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400eca6:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400eca8:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ecaa:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ecac:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ecae:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400ecb2:	d213      	bcs.n	2400ecdc <dir_find+0xb8>
2400ecb4:	b196      	cbz	r6, 2400ecdc <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ecb6:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400ecba:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ecbc:	b94b      	cbnz	r3, 2400ecd2 <dir_find+0xae>
		dp->sect++;				/* Next sector */
2400ecbe:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400ecc0:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400ecc2:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400ecc4:	2900      	cmp	r1, #0
2400ecc6:	d15e      	bne.n	2400ed86 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400ecc8:	893a      	ldrh	r2, [r7, #8]
2400ecca:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400ecce:	f240 8133 	bls.w	2400ef38 <dir_find+0x314>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ecd2:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400ecd4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ecd6:	443b      	add	r3, r7
2400ecd8:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400ecda:	e7b5      	b.n	2400ec48 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ecdc:	2704      	movs	r7, #4
}
2400ecde:	4638      	mov	r0, r7
2400ece0:	b005      	add	sp, #20
2400ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400ece6:	2b0f      	cmp	r3, #15
2400ece8:	d06c      	beq.n	2400edc4 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400ecea:	f1ba 0f00 	cmp.w	sl, #0
2400ecee:	f000 80d5 	beq.w	2400ee9c <dir_find+0x278>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400ecf2:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
2400ecf6:	f01a 0a01 	ands.w	sl, sl, #1
2400ecfa:	d1d0      	bne.n	2400ec9e <dir_find+0x7a>
	} while (--cnt && r == 0);
2400ecfc:	7832      	ldrb	r2, [r6, #0]
2400ecfe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400ed02:	429a      	cmp	r2, r3
2400ed04:	d1cb      	bne.n	2400ec9e <dir_find+0x7a>
2400ed06:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400ed0a:	7873      	ldrb	r3, [r6, #1]
2400ed0c:	429a      	cmp	r2, r3
2400ed0e:	d1c6      	bne.n	2400ec9e <dir_find+0x7a>
2400ed10:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400ed14:	78b3      	ldrb	r3, [r6, #2]
2400ed16:	429a      	cmp	r2, r3
2400ed18:	d1c1      	bne.n	2400ec9e <dir_find+0x7a>
2400ed1a:	78f2      	ldrb	r2, [r6, #3]
2400ed1c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400ed20:	429a      	cmp	r2, r3
2400ed22:	d1bc      	bne.n	2400ec9e <dir_find+0x7a>
2400ed24:	7932      	ldrb	r2, [r6, #4]
2400ed26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400ed2a:	429a      	cmp	r2, r3
2400ed2c:	d1b7      	bne.n	2400ec9e <dir_find+0x7a>
2400ed2e:	7972      	ldrb	r2, [r6, #5]
2400ed30:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400ed34:	429a      	cmp	r2, r3
2400ed36:	d1b2      	bne.n	2400ec9e <dir_find+0x7a>
2400ed38:	79b2      	ldrb	r2, [r6, #6]
2400ed3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400ed3e:	429a      	cmp	r2, r3
2400ed40:	d1ad      	bne.n	2400ec9e <dir_find+0x7a>
2400ed42:	79f2      	ldrb	r2, [r6, #7]
2400ed44:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400ed48:	429a      	cmp	r2, r3
2400ed4a:	d1a8      	bne.n	2400ec9e <dir_find+0x7a>
2400ed4c:	7a32      	ldrb	r2, [r6, #8]
2400ed4e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400ed52:	429a      	cmp	r2, r3
2400ed54:	d1a3      	bne.n	2400ec9e <dir_find+0x7a>
2400ed56:	7a72      	ldrb	r2, [r6, #9]
2400ed58:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400ed5c:	429a      	cmp	r2, r3
2400ed5e:	d19e      	bne.n	2400ec9e <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400ed60:	7ab2      	ldrb	r2, [r6, #10]
2400ed62:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400ed66:	429a      	cmp	r2, r3
2400ed68:	d199      	bne.n	2400ec9e <dir_find+0x7a>
2400ed6a:	4657      	mov	r7, sl
2400ed6c:	e783      	b.n	2400ec76 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ed6e:	2301      	movs	r3, #1
2400ed70:	462a      	mov	r2, r5
2400ed72:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ed76:	9100      	str	r1, [sp, #0]
2400ed78:	f7fe feb2 	bl	2400dae0 <disk_write>
2400ed7c:	9900      	ldr	r1, [sp, #0]
2400ed7e:	2800      	cmp	r0, #0
2400ed80:	d06c      	beq.n	2400ee5c <dir_find+0x238>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ed82:	2701      	movs	r7, #1
2400ed84:	e777      	b.n	2400ec76 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400ed86:	897a      	ldrh	r2, [r7, #10]
2400ed88:	3a01      	subs	r2, #1
2400ed8a:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400ed8e:	d1a0      	bne.n	2400ecd2 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400ed90:	4638      	mov	r0, r7
2400ed92:	9300      	str	r3, [sp, #0]
2400ed94:	f7ff fa90 	bl	2400e2b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ed98:	2801      	cmp	r0, #1
2400ed9a:	f240 80d1 	bls.w	2400ef40 <dir_find+0x31c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ed9e:	1c43      	adds	r3, r0, #1
2400eda0:	d0ef      	beq.n	2400ed82 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400eda2:	69ba      	ldr	r2, [r7, #24]
2400eda4:	4290      	cmp	r0, r2
2400eda6:	f080 80c7 	bcs.w	2400ef38 <dir_find+0x314>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edaa:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
2400edac:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400edae:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edb0:	9b00      	ldr	r3, [sp, #0]
2400edb2:	4290      	cmp	r0, r2
2400edb4:	f080 80c6 	bcs.w	2400ef44 <dir_find+0x320>
	return clst * fs->csize + fs->database;
2400edb8:	897a      	ldrh	r2, [r7, #10]
2400edba:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400edbc:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400edc0:	61e6      	str	r6, [r4, #28]
2400edc2:	e786      	b.n	2400ecd2 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400edc4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400edc8:	0658      	lsls	r0, r3, #25
2400edca:	f53f af6d 	bmi.w	2400eca8 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400edce:	0669      	lsls	r1, r5, #25
2400edd0:	d53f      	bpl.n	2400ee52 <dir_find+0x22e>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400edd2:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400edd4:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400edd8:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400eddc:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400edde:	7b73      	ldrb	r3, [r6, #13]
2400ede0:	454b      	cmp	r3, r9
2400ede2:	d138      	bne.n	2400ee56 <dir_find+0x232>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400ede4:	8b73      	ldrh	r3, [r6, #26]
2400ede6:	bbb3      	cbnz	r3, 2400ee56 <dir_find+0x232>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400ede8:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400edea:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400edec:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400edf0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400edf4:	f8df a174 	ldr.w	sl, [pc, #372]	; 2400ef6c <dir_find+0x348>
2400edf8:	9502      	str	r5, [sp, #8]
2400edfa:	4615      	mov	r5, r2
2400edfc:	3f01      	subs	r7, #1
2400edfe:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ee02:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400ee04:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400ee08:	f8cd 8000 	str.w	r8, [sp]
2400ee0c:	9401      	str	r4, [sp, #4]
2400ee0e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400ee12:	e010      	b.n	2400ee36 <dir_find+0x212>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400ee14:	2ffe      	cmp	r7, #254	; 0xfe
2400ee16:	4620      	mov	r0, r4
2400ee18:	d816      	bhi.n	2400ee48 <dir_find+0x224>
2400ee1a:	f001 fe0f 	bl	24010a3c <ff_wtoupper>
2400ee1e:	4680      	mov	r8, r0
2400ee20:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400ee24:	3701      	adds	r7, #1
2400ee26:	f001 fe09 	bl	24010a3c <ff_wtoupper>
2400ee2a:	4580      	cmp	r8, r0
2400ee2c:	4621      	mov	r1, r4
2400ee2e:	d10b      	bne.n	2400ee48 <dir_find+0x224>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400ee30:	45d3      	cmp	fp, sl
2400ee32:	f000 8089 	beq.w	2400ef48 <dir_find+0x324>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400ee36:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
2400ee3a:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400ee3c:	2900      	cmp	r1, #0
2400ee3e:	d1e9      	bne.n	2400ee14 <dir_find+0x1f0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400ee40:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400ee44:	429c      	cmp	r4, r3
2400ee46:	d0f3      	beq.n	2400ee30 <dir_find+0x20c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ee48:	e9dd 8400 	ldrd	r8, r4, [sp]
2400ee4c:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400ee50:	e72a      	b.n	2400eca8 <dir_find+0x84>
2400ee52:	45aa      	cmp	sl, r5
2400ee54:	d0c3      	beq.n	2400edde <dir_find+0x1ba>
2400ee56:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400ee5a:	e725      	b.n	2400eca8 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee5c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400ee60:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee64:	1aea      	subs	r2, r5, r3
2400ee66:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400ee6a:	429a      	cmp	r2, r3
2400ee6c:	f4bf aef7 	bcs.w	2400ec5e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee70:	f898 7002 	ldrb.w	r7, [r8, #2]
2400ee74:	2f01      	cmp	r7, #1
2400ee76:	f67f aef2 	bls.w	2400ec5e <dir_find+0x3a>
2400ee7a:	468b      	mov	fp, r1
2400ee7c:	e001      	b.n	2400ee82 <dir_find+0x25e>
					wsect += fs->fsize;
2400ee7e:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400ee82:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee84:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ee86:	2301      	movs	r3, #1
2400ee88:	4659      	mov	r1, fp
2400ee8a:	462a      	mov	r2, r5
2400ee8c:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ee90:	f7fe fe26 	bl	2400dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee94:	2f01      	cmp	r7, #1
2400ee96:	d1f2      	bne.n	2400ee7e <dir_find+0x25a>
2400ee98:	4659      	mov	r1, fp
2400ee9a:	e6e0      	b.n	2400ec5e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ee9c:	7830      	ldrb	r0, [r6, #0]
2400ee9e:	7872      	ldrb	r2, [r6, #1]
2400eea0:	01c1      	lsls	r1, r0, #7
2400eea2:	78b3      	ldrb	r3, [r6, #2]
2400eea4:	f896 b003 	ldrb.w	fp, [r6, #3]
2400eea8:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
2400eeac:	7937      	ldrb	r7, [r6, #4]
2400eeae:	f896 e005 	ldrb.w	lr, [r6, #5]
2400eeb2:	4411      	add	r1, r2
2400eeb4:	f896 c006 	ldrb.w	ip, [r6, #6]
2400eeb8:	7a32      	ldrb	r2, [r6, #8]
2400eeba:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400eebe:	7a75      	ldrb	r5, [r6, #9]
2400eec0:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400eec4:	fa53 f180 	uxtab	r1, r3, r0
2400eec8:	79f3      	ldrb	r3, [r6, #7]
2400eeca:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400eece:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400eed2:	7ab1      	ldrb	r1, [r6, #10]
2400eed4:	fa5b fb80 	uxtab	fp, fp, r0
2400eed8:	f3cb 0046 	ubfx	r0, fp, #1, #7
2400eedc:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
2400eee0:	fa57 f780 	uxtab	r7, r7, r0
2400eee4:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400eee8:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400eeec:	fa5e f080 	uxtab	r0, lr, r0
2400eef0:	f3c0 0746 	ubfx	r7, r0, #1, #7
2400eef4:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
2400eef8:	fa5c f780 	uxtab	r7, ip, r0
2400eefc:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400ef00:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400ef04:	fa53 f080 	uxtab	r0, r3, r0
2400ef08:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400ef0c:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
2400ef10:	fa52 f383 	uxtab	r3, r2, r3
2400ef14:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400ef18:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
2400ef1c:	fa55 f283 	uxtab	r2, r5, r3
2400ef20:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ef24:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ef28:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400ef2c:	b2db      	uxtb	r3, r3
2400ef2e:	4599      	cmp	r9, r3
2400ef30:	f47f aedf 	bne.w	2400ecf2 <dir_find+0xce>
2400ef34:	4657      	mov	r7, sl
2400ef36:	e69e      	b.n	2400ec76 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
2400ef38:	2300      	movs	r3, #0
2400ef3a:	2704      	movs	r7, #4
2400ef3c:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400ef3e:	e69a      	b.n	2400ec76 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ef40:	2702      	movs	r7, #2
2400ef42:	e698      	b.n	2400ec76 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ef44:	461e      	mov	r6, r3
2400ef46:	e73b      	b.n	2400edc0 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400ef48:	7833      	ldrb	r3, [r6, #0]
2400ef4a:	f8dd 8000 	ldr.w	r8, [sp]
2400ef4e:	065a      	lsls	r2, r3, #25
2400ef50:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
2400ef54:	d500      	bpl.n	2400ef58 <dir_find+0x334>
2400ef56:	b919      	cbnz	r1, 2400ef60 <dir_find+0x33c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400ef58:	3d01      	subs	r5, #1
2400ef5a:	fa5f fa85 	uxtb.w	sl, r5
2400ef5e:	e6a3      	b.n	2400eca8 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400ef60:	9b03      	ldr	r3, [sp, #12]
2400ef62:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400ef66:	2b00      	cmp	r3, #0
2400ef68:	d0f6      	beq.n	2400ef58 <dir_find+0x334>
2400ef6a:	e774      	b.n	2400ee56 <dir_find+0x232>
2400ef6c:	2401af40 	.word	0x2401af40

2400ef70 <follow_path>:
{
2400ef70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ef74:	780b      	ldrb	r3, [r1, #0]
{
2400ef76:	b083      	sub	sp, #12
2400ef78:	4688      	mov	r8, r1
2400ef7a:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ef7c:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400ef7e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400ef82:	d103      	bne.n	2400ef8c <follow_path+0x1c>
2400ef84:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400ef88:	2b2f      	cmp	r3, #47	; 0x2f
2400ef8a:	d0fb      	beq.n	2400ef84 <follow_path+0x14>
2400ef8c:	2b5c      	cmp	r3, #92	; 0x5c
2400ef8e:	d0f9      	beq.n	2400ef84 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400ef90:	2100      	movs	r1, #0
2400ef92:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400ef94:	f898 3000 	ldrb.w	r3, [r8]
2400ef98:	2b1f      	cmp	r3, #31
2400ef9a:	f240 8148 	bls.w	2400f22e <follow_path+0x2be>
2400ef9e:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400efa0:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400efa2:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400efa4:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400efa6:	d929      	bls.n	2400effc <follow_path+0x8c>
2400efa8:	f1a5 0902 	sub.w	r9, r5, #2
2400efac:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400efae:	2401      	movs	r4, #1
2400efb0:	e008      	b.n	2400efc4 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400efb2:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400efb6:	1c63      	adds	r3, r4, #1
2400efb8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400efbc:	281f      	cmp	r0, #31
2400efbe:	f240 80f7 	bls.w	2400f1b0 <follow_path+0x240>
		w = p[si++];					/* Get a character */
2400efc2:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400efc4:	282f      	cmp	r0, #47	; 0x2f
2400efc6:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400efca:	d01d      	beq.n	2400f008 <follow_path+0x98>
2400efcc:	285c      	cmp	r0, #92	; 0x5c
2400efce:	d01b      	beq.n	2400f008 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400efd0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400efd4:	d00e      	beq.n	2400eff4 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400efd6:	2101      	movs	r1, #1
2400efd8:	f001 fd12 	bl	24010a00 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400efdc:	b150      	cbz	r0, 2400eff4 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400efde:	287f      	cmp	r0, #127	; 0x7f
2400efe0:	d8e7      	bhi.n	2400efb2 <follow_path+0x42>
	while (*str && *str != chr) str++;
2400efe2:	2322      	movs	r3, #34	; 0x22
2400efe4:	4aa5      	ldr	r2, [pc, #660]	; (2400f27c <follow_path+0x30c>)
2400efe6:	e003      	b.n	2400eff0 <follow_path+0x80>
2400efe8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400efec:	2b00      	cmp	r3, #0
2400efee:	d0e0      	beq.n	2400efb2 <follow_path+0x42>
2400eff0:	4298      	cmp	r0, r3
2400eff2:	d1f9      	bne.n	2400efe8 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400eff4:	2006      	movs	r0, #6
}
2400eff6:	b003      	add	sp, #12
2400eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400effc:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400effe:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400f000:	802b      	strh	r3, [r5, #0]
}
2400f002:	b003      	add	sp, #12
2400f004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400f008:	f818 3004 	ldrb.w	r3, [r8, r4]
2400f00c:	eb08 0204 	add.w	r2, r8, r4
2400f010:	2b5c      	cmp	r3, #92	; 0x5c
2400f012:	d002      	beq.n	2400f01a <follow_path+0xaa>
2400f014:	2b2f      	cmp	r3, #47	; 0x2f
2400f016:	f040 811f 	bne.w	2400f258 <follow_path+0x2e8>
2400f01a:	1c63      	adds	r3, r4, #1
2400f01c:	4443      	add	r3, r8
2400f01e:	4698      	mov	r8, r3
2400f020:	f813 2b01 	ldrb.w	r2, [r3], #1
2400f024:	2a2f      	cmp	r2, #47	; 0x2f
2400f026:	d0fa      	beq.n	2400f01e <follow_path+0xae>
2400f028:	2a5c      	cmp	r2, #92	; 0x5c
2400f02a:	d0f8      	beq.n	2400f01e <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400f02c:	f1ba 0f00 	cmp.w	sl, #0
2400f030:	d0e4      	beq.n	2400effc <follow_path+0x8c>
2400f032:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400f034:	2400      	movs	r4, #0
2400f036:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400f03a:	e002      	b.n	2400f042 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400f03c:	f1ba 0a01 	subs.w	sl, sl, #1
2400f040:	d0dc      	beq.n	2400effc <follow_path+0x8c>
		w = lfn[di - 1];
2400f042:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400f046:	2b20      	cmp	r3, #32
2400f048:	d0f8      	beq.n	2400f03c <follow_path+0xcc>
2400f04a:	2b2e      	cmp	r3, #46	; 0x2e
2400f04c:	d0f6      	beq.n	2400f03c <follow_path+0xcc>
		*d++ = (BYTE)val;
2400f04e:	2320      	movs	r3, #32
2400f050:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400f054:	2100      	movs	r1, #0
2400f056:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400f05a:	627a      	str	r2, [r7, #36]	; 0x24
2400f05c:	62ba      	str	r2, [r7, #40]	; 0x28
2400f05e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
2400f062:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
2400f066:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400f06a:	8828      	ldrh	r0, [r5, #0]
2400f06c:	282e      	cmp	r0, #46	; 0x2e
2400f06e:	d002      	beq.n	2400f076 <follow_path+0x106>
2400f070:	4298      	cmp	r0, r3
2400f072:	f040 80e5 	bne.w	2400f240 <follow_path+0x2d0>
2400f076:	462a      	mov	r2, r5
2400f078:	2300      	movs	r3, #0
2400f07a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400f07e:	461c      	mov	r4, r3
2400f080:	3301      	adds	r3, #1
2400f082:	2820      	cmp	r0, #32
2400f084:	d0f9      	beq.n	2400f07a <follow_path+0x10a>
2400f086:	282e      	cmp	r0, #46	; 0x2e
2400f088:	d0f7      	beq.n	2400f07a <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
2400f08a:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400f08c:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400f090:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400f094:	2a2e      	cmp	r2, #46	; 0x2e
2400f096:	d002      	beq.n	2400f09e <follow_path+0x12e>
2400f098:	f1ba 0a01 	subs.w	sl, sl, #1
2400f09c:	d1f8      	bne.n	2400f090 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
2400f09e:	b3b0      	cbz	r0, 2400f10e <follow_path+0x19e>
2400f0a0:	2208      	movs	r2, #8
2400f0a2:	4641      	mov	r1, r8
2400f0a4:	2300      	movs	r3, #0
2400f0a6:	46b8      	mov	r8, r7
2400f0a8:	462f      	mov	r7, r5
2400f0aa:	4615      	mov	r5, r2
2400f0ac:	4699      	mov	r9, r3
2400f0ae:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400f0b0:	2820      	cmp	r0, #32
2400f0b2:	d003      	beq.n	2400f0bc <follow_path+0x14c>
2400f0b4:	282e      	cmp	r0, #46	; 0x2e
2400f0b6:	d14d      	bne.n	2400f154 <follow_path+0x1e4>
2400f0b8:	45a2      	cmp	sl, r4
2400f0ba:	d04b      	beq.n	2400f154 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
2400f0bc:	f046 0603 	orr.w	r6, r6, #3
2400f0c0:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400f0c2:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400f0c6:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400f0c8:	2800      	cmp	r0, #0
2400f0ca:	d1f1      	bne.n	2400f0b0 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400f0cc:	4647      	mov	r7, r8
2400f0ce:	4690      	mov	r8, r2
2400f0d0:	462a      	mov	r2, r5
2400f0d2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400f0d6:	29e5      	cmp	r1, #229	; 0xe5
2400f0d8:	d102      	bne.n	2400f0e0 <follow_path+0x170>
2400f0da:	2105      	movs	r1, #5
2400f0dc:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400f0e0:	2a08      	cmp	r2, #8
2400f0e2:	f000 8093 	beq.w	2400f20c <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f0e6:	f003 020c 	and.w	r2, r3, #12
2400f0ea:	2a0c      	cmp	r2, #12
2400f0ec:	d065      	beq.n	2400f1ba <follow_path+0x24a>
2400f0ee:	f003 0303 	and.w	r3, r3, #3
2400f0f2:	2b03      	cmp	r3, #3
2400f0f4:	d061      	beq.n	2400f1ba <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400f0f6:	07b1      	lsls	r1, r6, #30
2400f0f8:	d409      	bmi.n	2400f10e <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400f0fa:	2b01      	cmp	r3, #1
2400f0fc:	d102      	bne.n	2400f104 <follow_path+0x194>
2400f0fe:	f046 0610 	orr.w	r6, r6, #16
2400f102:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400f104:	2a04      	cmp	r2, #4
2400f106:	d102      	bne.n	2400f10e <follow_path+0x19e>
2400f108:	f046 0608 	orr.w	r6, r6, #8
2400f10c:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400f10e:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400f110:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400f114:	f7ff fd86 	bl	2400ec24 <dir_find>
			ns = dp->fn[NSFLAG];
2400f118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400f11c:	2800      	cmp	r0, #0
2400f11e:	d158      	bne.n	2400f1d2 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400f120:	075a      	lsls	r2, r3, #29
2400f122:	f53f af68 	bmi.w	2400eff6 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400f126:	79bb      	ldrb	r3, [r7, #6]
2400f128:	06db      	lsls	r3, r3, #27
2400f12a:	f140 8097 	bpl.w	2400f25c <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f12e:	697a      	ldr	r2, [r7, #20]
2400f130:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400f134:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f138:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400f13c:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f13e:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400f140:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f142:	d102      	bne.n	2400f14a <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f144:	8a9b      	ldrh	r3, [r3, #20]
2400f146:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400f14a:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400f14c:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400f14e:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400f152:	e725      	b.n	2400efa0 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400f154:	454d      	cmp	r5, r9
2400f156:	d91c      	bls.n	2400f192 <follow_path+0x222>
2400f158:	ebaa 0104 	sub.w	r1, sl, r4
2400f15c:	fab1 f181 	clz	r1, r1
2400f160:	0949      	lsrs	r1, r1, #5
2400f162:	b9b1      	cbnz	r1, 2400f192 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
2400f164:	287f      	cmp	r0, #127	; 0x7f
2400f166:	d83c      	bhi.n	2400f1e2 <follow_path+0x272>
	while (*str && *str != chr) str++;
2400f168:	212b      	movs	r1, #43	; 0x2b
2400f16a:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400f284 <follow_path+0x314>
2400f16e:	e003      	b.n	2400f178 <follow_path+0x208>
2400f170:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400f174:	2900      	cmp	r1, #0
2400f176:	d052      	beq.n	2400f21e <follow_path+0x2ae>
2400f178:	4281      	cmp	r1, r0
2400f17a:	d1f9      	bne.n	2400f170 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400f17c:	f046 0603 	orr.w	r6, r6, #3
2400f180:	205f      	movs	r0, #95	; 0x5f
2400f182:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400f184:	eb08 0109 	add.w	r1, r8, r9
2400f188:	f109 0901 	add.w	r9, r9, #1
2400f18c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400f190:	e797      	b.n	2400f0c2 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
2400f192:	2d0b      	cmp	r5, #11
2400f194:	d064      	beq.n	2400f260 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400f196:	45a2      	cmp	sl, r4
2400f198:	d003      	beq.n	2400f1a2 <follow_path+0x232>
2400f19a:	f046 0603 	orr.w	r6, r6, #3
2400f19e:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400f1a0:	d394      	bcc.n	2400f0cc <follow_path+0x15c>
			b <<= 2; continue;
2400f1a2:	009b      	lsls	r3, r3, #2
2400f1a4:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400f1a6:	250b      	movs	r5, #11
2400f1a8:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400f1ac:	b2db      	uxtb	r3, r3
2400f1ae:	e788      	b.n	2400f0c2 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
2400f1b0:	46a2      	mov	sl, r4
2400f1b2:	4498      	add	r8, r3
2400f1b4:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400f1b6:	2404      	movs	r4, #4
2400f1b8:	e73d      	b.n	2400f036 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f1ba:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400f1be:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f1c0:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400f1c2:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400f1c6:	f7ff fd2d 	bl	2400ec24 <dir_find>
			ns = dp->fn[NSFLAG];
2400f1ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400f1ce:	2800      	cmp	r0, #0
2400f1d0:	d0a6      	beq.n	2400f120 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400f1d2:	2804      	cmp	r0, #4
2400f1d4:	f47f af0f 	bne.w	2400eff6 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400f1d8:	f013 0f04 	tst.w	r3, #4
2400f1dc:	bf08      	it	eq
2400f1de:	2005      	moveq	r0, #5
2400f1e0:	e709      	b.n	2400eff6 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400f1e2:	e9cd 3200 	strd	r3, r2, [sp]
2400f1e6:	f001 fc0b 	bl	24010a00 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1ea:	e9dd 3200 	ldrd	r3, r2, [sp]
2400f1ee:	b918      	cbnz	r0, 2400f1f8 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
2400f1f0:	f046 0602 	orr.w	r6, r6, #2
2400f1f4:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400f1f6:	e7c1      	b.n	2400f17c <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1f8:	4921      	ldr	r1, [pc, #132]	; (2400f280 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400f1fa:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f1fe:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
2400f200:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400f202:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400f206:	2800      	cmp	r0, #0
2400f208:	d0b8      	beq.n	2400f17c <follow_path+0x20c>
2400f20a:	e7ad      	b.n	2400f168 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
2400f20c:	009b      	lsls	r3, r3, #2
2400f20e:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400f212:	2a0c      	cmp	r2, #12
2400f214:	d0d1      	beq.n	2400f1ba <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400f216:	07b0      	lsls	r0, r6, #30
2400f218:	f57f af74 	bpl.w	2400f104 <follow_path+0x194>
2400f21c:	e777      	b.n	2400f10e <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
2400f21e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400f222:	2919      	cmp	r1, #25
2400f224:	d80f      	bhi.n	2400f246 <follow_path+0x2d6>
					b |= 2;
2400f226:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400f22a:	b2c0      	uxtb	r0, r0
2400f22c:	e7aa      	b.n	2400f184 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
2400f22e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400f230:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400f232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400f236:	b003      	add	sp, #12
2400f238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400f23c:	f7ff bc38 	b.w	2400eab0 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400f240:	4626      	mov	r6, r4
2400f242:	2401      	movs	r4, #1
2400f244:	e722      	b.n	2400f08c <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
2400f246:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400f24a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400f24c:	bf9c      	itt	ls
2400f24e:	3820      	subls	r0, #32
2400f250:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400f254:	b2c0      	uxtb	r0, r0
2400f256:	e795      	b.n	2400f184 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400f258:	4690      	mov	r8, r2
2400f25a:	e6e7      	b.n	2400f02c <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400f25c:	2005      	movs	r0, #5
2400f25e:	e6ca      	b.n	2400eff6 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400f260:	4647      	mov	r7, r8
2400f262:	4690      	mov	r8, r2
2400f264:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400f268:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400f26c:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400f26e:	2ae5      	cmp	r2, #229	; 0xe5
2400f270:	f47f af39 	bne.w	2400f0e6 <follow_path+0x176>
2400f274:	2205      	movs	r2, #5
2400f276:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400f27a:	e734      	b.n	2400f0e6 <follow_path+0x176>
2400f27c:	2401aeac 	.word	0x2401aeac
2400f280:	2401aec0 	.word	0x2401aec0
2400f284:	2401aeb8 	.word	0x2401aeb8

2400f288 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400f288:	2901      	cmp	r1, #1
{
2400f28a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400f28e:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2400f290:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400f292:	d90f      	bls.n	2400f2b4 <remove_chain+0x2c>
2400f294:	69ab      	ldr	r3, [r5, #24]
2400f296:	428b      	cmp	r3, r1
2400f298:	d90c      	bls.n	2400f2b4 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400f29a:	4606      	mov	r6, r0
2400f29c:	4611      	mov	r1, r2
2400f29e:	b962      	cbnz	r2, 2400f2ba <remove_chain+0x32>
2400f2a0:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f2a2:	429c      	cmp	r4, r3
2400f2a4:	d206      	bcs.n	2400f2b4 <remove_chain+0x2c>
		switch (fs->fs_type) {
2400f2a6:	783b      	ldrb	r3, [r7, #0]
2400f2a8:	2b02      	cmp	r3, #2
2400f2aa:	d072      	beq.n	2400f392 <remove_chain+0x10a>
2400f2ac:	2b03      	cmp	r3, #3
2400f2ae:	d05d      	beq.n	2400f36c <remove_chain+0xe4>
2400f2b0:	2b01      	cmp	r3, #1
2400f2b2:	d010      	beq.n	2400f2d6 <remove_chain+0x4e>
2400f2b4:	2002      	movs	r0, #2
}
2400f2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f2ba:	4293      	cmp	r3, r2
2400f2bc:	d9fa      	bls.n	2400f2b4 <remove_chain+0x2c>
2400f2be:	2a01      	cmp	r2, #1
2400f2c0:	d0f8      	beq.n	2400f2b4 <remove_chain+0x2c>
2400f2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400f2c6:	4628      	mov	r0, r5
2400f2c8:	f7fe ff5c 	bl	2400e184 <put_fat.part.0>
		if (res != FR_OK) return res;
2400f2cc:	2800      	cmp	r0, #0
2400f2ce:	d1f2      	bne.n	2400f2b6 <remove_chain+0x2e>
2400f2d0:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f2d2:	69bb      	ldr	r3, [r7, #24]
2400f2d4:	e7e5      	b.n	2400f2a2 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
2400f2d6:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2de:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f2e2:	4291      	cmp	r1, r2
2400f2e4:	d006      	beq.n	2400f2f4 <remove_chain+0x6c>
2400f2e6:	4638      	mov	r0, r7
2400f2e8:	f7fe fd9a 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2ec:	2800      	cmp	r0, #0
2400f2ee:	d161      	bne.n	2400f3b4 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f2f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400f2f4:	f108 0901 	add.w	r9, r8, #1
2400f2f8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f2fc:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400f300:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f302:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400f304:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f308:	d004      	beq.n	2400f314 <remove_chain+0x8c>
2400f30a:	4638      	mov	r0, r7
2400f30c:	f7fe fd88 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f310:	2800      	cmp	r0, #0
2400f312:	d14f      	bne.n	2400f3b4 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
2400f314:	f3c9 0908 	ubfx	r9, r9, #0, #9
2400f318:	444f      	add	r7, r9
2400f31a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400f31e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f322:	07e3      	lsls	r3, r4, #31
2400f324:	d548      	bpl.n	2400f3b8 <remove_chain+0x130>
2400f326:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
2400f32a:	f1b8 0f00 	cmp.w	r8, #0
2400f32e:	d046      	beq.n	2400f3be <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400f330:	f1b8 0f01 	cmp.w	r8, #1
2400f334:	d0be      	beq.n	2400f2b4 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f336:	69ab      	ldr	r3, [r5, #24]
2400f338:	42a3      	cmp	r3, r4
2400f33a:	d9bb      	bls.n	2400f2b4 <remove_chain+0x2c>
2400f33c:	2200      	movs	r2, #0
2400f33e:	4621      	mov	r1, r4
2400f340:	4628      	mov	r0, r5
2400f342:	f7fe ff1f 	bl	2400e184 <put_fat.part.0>
			if (res != FR_OK) return res;
2400f346:	2800      	cmp	r0, #0
2400f348:	d1b5      	bne.n	2400f2b6 <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400f34a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400f34e:	1e91      	subs	r1, r2, #2
2400f350:	428b      	cmp	r3, r1
2400f352:	d205      	bcs.n	2400f360 <remove_chain+0xd8>
			fs->free_clst++;
2400f354:	3301      	adds	r3, #1
2400f356:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400f358:	792b      	ldrb	r3, [r5, #4]
2400f35a:	f043 0301 	orr.w	r3, r3, #1
2400f35e:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400f360:	4542      	cmp	r2, r8
2400f362:	d92c      	bls.n	2400f3be <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f364:	6837      	ldr	r7, [r6, #0]
2400f366:	4644      	mov	r4, r8
2400f368:	69bb      	ldr	r3, [r7, #24]
2400f36a:	e79a      	b.n	2400f2a2 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f36c:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f370:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f374:	4299      	cmp	r1, r3
2400f376:	d003      	beq.n	2400f380 <remove_chain+0xf8>
2400f378:	4638      	mov	r0, r7
2400f37a:	f7fe fd51 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f37e:	b9c8      	cbnz	r0, 2400f3b4 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f380:	00a3      	lsls	r3, r4, #2
2400f382:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f386:	441f      	add	r7, r3
2400f388:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f38c:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
2400f390:	e7cb      	b.n	2400f32a <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f392:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f396:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f39a:	4299      	cmp	r1, r3
2400f39c:	d003      	beq.n	2400f3a6 <remove_chain+0x11e>
2400f39e:	4638      	mov	r0, r7
2400f3a0:	f7fe fd3e 	bl	2400de20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f3a4:	b930      	cbnz	r0, 2400f3b4 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400f3a6:	0063      	lsls	r3, r4, #1
2400f3a8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400f3ac:	441f      	add	r7, r3
2400f3ae:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
2400f3b2:	e7ba      	b.n	2400f32a <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400f3b4:	2001      	movs	r0, #1
2400f3b6:	e77e      	b.n	2400f2b6 <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f3b8:	f3c8 080b 	ubfx	r8, r8, #0, #12
2400f3bc:	e7b5      	b.n	2400f32a <remove_chain+0xa2>
	return FR_OK;
2400f3be:	2000      	movs	r0, #0
2400f3c0:	e779      	b.n	2400f2b6 <remove_chain+0x2e>
2400f3c2:	bf00      	nop

2400f3c4 <dir_register>:
{
2400f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f3c8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400f3cc:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f3ce:	930a      	str	r3, [sp, #40]	; 0x28
2400f3d0:	f013 03a0 	ands.w	r3, r3, #160	; 0xa0
2400f3d4:	f040 835a 	bne.w	2400fa8c <dir_register+0x6c8>
	FATFS *fs = dp->obj.fs;
2400f3d8:	6802      	ldr	r2, [r0, #0]
2400f3da:	4682      	mov	sl, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400f3dc:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	FATFS *fs = dp->obj.fs;
2400f3e0:	9201      	str	r2, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400f3e2:	f8bc 7000 	ldrh.w	r7, [ip]
2400f3e6:	b137      	cbz	r7, 2400f3f6 <dir_register+0x32>
2400f3e8:	461f      	mov	r7, r3
2400f3ea:	4663      	mov	r3, ip
2400f3ec:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400f3f0:	3701      	adds	r7, #1
2400f3f2:	2a00      	cmp	r2, #0
2400f3f4:	d1fa      	bne.n	2400f3ec <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
2400f3f6:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
2400f3fa:	ab12      	add	r3, sp, #72	; 0x48
2400f3fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
2400f400:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400f406:	07d8      	lsls	r0, r3, #31
2400f408:	f100 8097 	bmi.w	2400f53a <dir_register+0x176>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f40c:	f013 0302 	ands.w	r3, r3, #2
2400f410:	f8dd 9004 	ldr.w	r9, [sp, #4]
2400f414:	f000 829b 	beq.w	2400f94e <dir_register+0x58a>
2400f418:	4a76      	ldr	r2, [pc, #472]	; (2400f5f4 <dir_register+0x230>)
2400f41a:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
2400f41e:	2100      	movs	r1, #0
2400f420:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f422:	fba2 2303 	umull	r2, r3, r2, r3
2400f426:	089b      	lsrs	r3, r3, #2
2400f428:	9302      	str	r3, [sp, #8]
2400f42a:	3301      	adds	r3, #1
2400f42c:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400f42e:	f7ff fb3f 	bl	2400eab0 <dir_sdi>
	if (res == FR_OK) {
2400f432:	4683      	mov	fp, r0
2400f434:	2800      	cmp	r0, #0
2400f436:	f040 8295 	bne.w	2400f964 <dir_register+0x5a0>
			res = move_window(fs, dp->sect);
2400f43a:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
2400f43e:	4680      	mov	r8, r0
						fs->wflag = 1;
2400f440:	9006      	str	r0, [sp, #24]
2400f442:	e029      	b.n	2400f498 <dir_register+0xd4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400f444:	fab3 f283 	clz	r2, r3
2400f448:	0952      	lsrs	r2, r2, #5
2400f44a:	b3a3      	cbz	r3, 2400f4b6 <dir_register+0xf2>
				n = 0;					/* Not a blank entry. Restart to search */
2400f44c:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400f44e:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400f452:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400f456:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400f458:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400f45c:	f080 8285 	bcs.w	2400f96a <dir_register+0x5a6>
2400f460:	2900      	cmp	r1, #0
2400f462:	f000 8282 	beq.w	2400f96a <dir_register+0x5a6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400f466:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400f46a:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400f46e:	b967      	cbnz	r7, 2400f48a <dir_register+0xc6>
		dp->sect++;				/* Next sector */
2400f470:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
2400f472:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
2400f476:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
2400f47a:	2b00      	cmp	r3, #0
2400f47c:	f040 82cd 	bne.w	2400fa1a <dir_register+0x656>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400f480:	8922      	ldrh	r2, [r4, #8]
2400f482:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400f486:	f240 83bb 	bls.w	2400fc00 <dir_register+0x83c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f48a:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f48e:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
2400f490:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400f494:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f498:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
2400f49c:	428b      	cmp	r3, r1
2400f49e:	d005      	beq.n	2400f4ac <dir_register+0xe8>
2400f4a0:	4648      	mov	r0, r9
2400f4a2:	f7fe fcbd 	bl	2400de20 <move_window.part.0>
			if (res != FR_OK) break;
2400f4a6:	2800      	cmp	r0, #0
2400f4a8:	f040 83b2 	bne.w	2400fc10 <dir_register+0x84c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400f4ac:	f8da 3020 	ldr.w	r3, [sl, #32]
2400f4b0:	781b      	ldrb	r3, [r3, #0]
2400f4b2:	2be5      	cmp	r3, #229	; 0xe5
2400f4b4:	d1c6      	bne.n	2400f444 <dir_register+0x80>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400f4b6:	f108 0801 	add.w	r8, r8, #1
2400f4ba:	9b03      	ldr	r3, [sp, #12]
2400f4bc:	4543      	cmp	r3, r8
2400f4be:	d1c6      	bne.n	2400f44e <dir_register+0x8a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400f4c0:	9b02      	ldr	r3, [sp, #8]
2400f4c2:	f8dd b018 	ldr.w	fp, [sp, #24]
2400f4c6:	2b00      	cmp	r3, #0
2400f4c8:	f040 82eb 	bne.w	2400faa2 <dir_register+0x6de>
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f4cc:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
2400f4ce:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f4d4:	4299      	cmp	r1, r3
2400f4d6:	d005      	beq.n	2400f4e4 <dir_register+0x120>
2400f4d8:	9801      	ldr	r0, [sp, #4]
2400f4da:	f7fe fca1 	bl	2400de20 <move_window.part.0>
		if (res == FR_OK) {
2400f4de:	2800      	cmp	r0, #0
2400f4e0:	f040 82da 	bne.w	2400fa98 <dir_register+0x6d4>
		*d++ = (BYTE)val;
2400f4e4:	2220      	movs	r2, #32
2400f4e6:	2100      	movs	r1, #0
2400f4e8:	f8da 0020 	ldr.w	r0, [sl, #32]
2400f4ec:	f009 fa08 	bl	24018900 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400f4f0:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f4f4:	f10a 0225 	add.w	r2, sl, #37	; 0x25
2400f4f8:	1a9a      	subs	r2, r3, r2
2400f4fa:	2a02      	cmp	r2, #2
2400f4fc:	f240 8486 	bls.w	2400fe0c <dir_register+0xa48>
			*d++ = *s++;
2400f500:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
2400f504:	601a      	str	r2, [r3, #0]
2400f506:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
2400f50a:	605a      	str	r2, [r3, #4]
2400f50c:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
2400f510:	4658      	mov	r0, fp
			*d++ = *s++;
2400f512:	721a      	strb	r2, [r3, #8]
2400f514:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
2400f518:	725a      	strb	r2, [r3, #9]
2400f51a:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
2400f51e:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400f520:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400f522:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
2400f526:	f8da 1020 	ldr.w	r1, [sl, #32]
2400f52a:	f003 0318 	and.w	r3, r3, #24
2400f52e:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
2400f530:	9b01      	ldr	r3, [sp, #4]
2400f532:	70da      	strb	r2, [r3, #3]
}
2400f534:	b013      	add	sp, #76	; 0x4c
2400f536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400f53a:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
2400f53c:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
2400f540:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
2400f544:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400f546:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f54a:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
2400f54e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
2400f552:	9208      	str	r2, [sp, #32]
2400f554:	9302      	str	r3, [sp, #8]
2400f556:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
2400f55a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
2400f55e:	9303      	str	r3, [sp, #12]
2400f560:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
2400f564:	9207      	str	r2, [sp, #28]
2400f566:	9306      	str	r3, [sp, #24]
2400f568:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
2400f56c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
2400f570:	9305      	str	r3, [sp, #20]
2400f572:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f576:	4693      	mov	fp, r2
			*d++ = *s++;
2400f578:	9109      	str	r1, [sp, #36]	; 0x24
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f57a:	4661      	mov	r1, ip
			*d++ = *s++;
2400f57c:	9304      	str	r3, [sp, #16]
2400f57e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f582:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
2400f584:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f588:	461f      	mov	r7, r3
				if (sr & 0x10000) sr ^= 0x11021;
2400f58a:	4c1b      	ldr	r4, [pc, #108]	; (2400f5f8 <dir_register+0x234>)
			*d++ = *s++;
2400f58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400f58e:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400f590:	2e05      	cmp	r6, #5
			*d++ = *s++;
2400f592:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
2400f596:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
2400f59a:	9b02      	ldr	r3, [sp, #8]
2400f59c:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
2400f5a0:	f363 0207 	bfi	r2, r3, #0, #8
2400f5a4:	9b03      	ldr	r3, [sp, #12]
2400f5a6:	f363 220f 	bfi	r2, r3, #8, #8
2400f5aa:	9b06      	ldr	r3, [sp, #24]
2400f5ac:	f363 4217 	bfi	r2, r3, #16, #8
2400f5b0:	9b05      	ldr	r3, [sp, #20]
2400f5b2:	f363 621f 	bfi	r2, r3, #24, #8
2400f5b6:	9b04      	ldr	r3, [sp, #16]
2400f5b8:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
2400f5bc:	f04f 0200 	mov.w	r2, #0
2400f5c0:	f363 0207 	bfi	r2, r3, #0, #8
2400f5c4:	9b08      	ldr	r3, [sp, #32]
2400f5c6:	f367 220f 	bfi	r2, r7, #8, #8
2400f5ca:	f363 4217 	bfi	r2, r3, #16, #8
2400f5ce:	9b07      	ldr	r3, [sp, #28]
2400f5d0:	f363 621f 	bfi	r2, r3, #24, #8
2400f5d4:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400f5d8:	f240 8135 	bls.w	2400f846 <dir_register+0x482>
		while (*lfn) {	/* Create a CRC */
2400f5dc:	880a      	ldrh	r2, [r1, #0]
2400f5de:	2a00      	cmp	r2, #0
2400f5e0:	f000 8131 	beq.w	2400f846 <dir_register+0x482>
				sr = (sr << 1) + (wc & 1);
2400f5e4:	468c      	mov	ip, r1
2400f5e6:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2400f5ea:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400f5ec:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f5f0:	e00e      	b.n	2400f610 <dir_register+0x24c>
2400f5f2:	bf00      	nop
2400f5f4:	4ec4ec4f 	.word	0x4ec4ec4f
2400f5f8:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
2400f5fc:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f600:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400f604:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400f608:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f60c:	bf18      	it	ne
2400f60e:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
2400f610:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400f614:	0893      	lsrs	r3, r2, #2
2400f616:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400f618:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f61c:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400f61e:	f003 0301 	and.w	r3, r3, #1
2400f622:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f626:	bf48      	it	mi
2400f628:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
2400f62c:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400f62e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f632:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400f636:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f63a:	bf18      	it	ne
2400f63c:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
2400f63e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f642:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f644:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400f648:	bf48      	it	mi
2400f64a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400f64c:	f003 0301 	and.w	r3, r3, #1
2400f650:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f654:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f656:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400f65a:	bf48      	it	mi
2400f65c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400f65e:	f000 0001 	and.w	r0, r0, #1
2400f662:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f666:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f668:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400f66c:	bf48      	it	mi
2400f66e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400f670:	f001 0101 	and.w	r1, r1, #1
2400f674:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f678:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f67a:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400f67e:	bf48      	it	mi
2400f680:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400f682:	f003 0301 	and.w	r3, r3, #1
2400f686:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f68a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f68c:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400f690:	bf48      	it	mi
2400f692:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400f694:	f000 0001 	and.w	r0, r0, #1
2400f698:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f69c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f69e:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400f6a2:	bf48      	it	mi
2400f6a4:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400f6a6:	f001 0101 	and.w	r1, r1, #1
2400f6aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f6ae:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f6b0:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400f6b4:	bf48      	it	mi
2400f6b6:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400f6b8:	f003 0301 	and.w	r3, r3, #1
2400f6bc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f6c0:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400f6c2:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400f6c6:	bf48      	it	mi
2400f6c8:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400f6ca:	f000 0001 	and.w	r0, r0, #1
2400f6ce:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f6d2:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400f6d4:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400f6d8:	bf48      	it	mi
2400f6da:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400f6dc:	f001 0101 	and.w	r1, r1, #1
2400f6e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f6e4:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400f6e6:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400f6ea:	bf48      	it	mi
2400f6ec:	4060      	eormi	r0, r4
				wc >>= 1;
2400f6ee:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
2400f6f0:	f003 0301 	and.w	r3, r3, #1
2400f6f4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f6f8:	0400      	lsls	r0, r0, #16
2400f6fa:	bf48      	it	mi
2400f6fc:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400f6fe:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f702:	0408      	lsls	r0, r1, #16
2400f704:	bf48      	it	mi
2400f706:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400f708:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400f70c:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
2400f70e:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400f712:	bf48      	it	mi
2400f714:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
2400f718:	2a00      	cmp	r2, #0
2400f71a:	f47f af6f 	bne.w	2400f5fc <dir_register+0x238>
		c = (BYTE)((seq % 16) + '0');
2400f71e:	f00e 010f 	and.w	r1, lr, #15
2400f722:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f726:	2a39      	cmp	r2, #57	; 0x39
2400f728:	bf88      	it	hi
2400f72a:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f72e:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400f732:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400f736:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
2400f73a:	f240 8153 	bls.w	2400f9e4 <dir_register+0x620>
		c = (BYTE)((seq % 16) + '0');
2400f73e:	f001 000f 	and.w	r0, r1, #15
2400f742:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f746:	2a39      	cmp	r2, #57	; 0x39
2400f748:	bf88      	it	hi
2400f74a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f74e:	290f      	cmp	r1, #15
		seq /= 16;
2400f750:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400f754:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
2400f758:	f240 814a 	bls.w	2400f9f0 <dir_register+0x62c>
		c = (BYTE)((seq % 16) + '0');
2400f75c:	f000 010f 	and.w	r1, r0, #15
2400f760:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f764:	2a39      	cmp	r2, #57	; 0x39
2400f766:	bf88      	it	hi
2400f768:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f76c:	280f      	cmp	r0, #15
		seq /= 16;
2400f76e:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400f772:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
2400f776:	f240 814a 	bls.w	2400fa0e <dir_register+0x64a>
		c = (BYTE)((seq % 16) + '0');
2400f77a:	f001 000f 	and.w	r0, r1, #15
2400f77e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f782:	2a39      	cmp	r2, #57	; 0x39
2400f784:	bf88      	it	hi
2400f786:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f78a:	290f      	cmp	r1, #15
		seq /= 16;
2400f78c:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400f790:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
2400f794:	f240 8168 	bls.w	2400fa68 <dir_register+0x6a4>
		c = (BYTE)((seq % 16) + '0');
2400f798:	f000 010f 	and.w	r1, r0, #15
2400f79c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f7a0:	2a39      	cmp	r2, #57	; 0x39
2400f7a2:	bf88      	it	hi
2400f7a4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f7a8:	280f      	cmp	r0, #15
		seq /= 16;
2400f7aa:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400f7ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
2400f7b2:	f240 815f 	bls.w	2400fa74 <dir_register+0x6b0>
		c = (BYTE)((seq % 16) + '0');
2400f7b6:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400f7ba:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400f7be:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400f7c2:	2a39      	cmp	r2, #57	; 0x39
2400f7c4:	bf88      	it	hi
2400f7c6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400f7ca:	290f      	cmp	r1, #15
		ns[i--] = c;
2400f7cc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
2400f7d0:	f240 8156 	bls.w	2400fa80 <dir_register+0x6bc>
		c = (BYTE)((seq % 16) + '0');
2400f7d4:	f00e 010f 	and.w	r1, lr, #15
2400f7d8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400f7dc:	2a39      	cmp	r2, #57	; 0x39
2400f7de:	bf88      	it	hi
2400f7e0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400f7e4:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400f7e8:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
2400f7ec:	f240 8106 	bls.w	2400f9fc <dir_register+0x638>
		ns[i--] = c;
2400f7f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400f7f4:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f7f8:	2200      	movs	r2, #0
2400f7fa:	e002      	b.n	2400f802 <dir_register+0x43e>
2400f7fc:	3201      	adds	r2, #1
2400f7fe:	4562      	cmp	r2, ip
2400f800:	d003      	beq.n	2400f80a <dir_register+0x446>
2400f802:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400f806:	2b20      	cmp	r3, #32
2400f808:	d1f8      	bne.n	2400f7fc <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f80a:	f1bc 0f07 	cmp.w	ip, #7
2400f80e:	d91c      	bls.n	2400f84a <dir_register+0x486>
2400f810:	1c50      	adds	r0, r2, #1
2400f812:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400f816:	2807      	cmp	r0, #7
2400f818:	d809      	bhi.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f81a:	1c42      	adds	r2, r0, #1
2400f81c:	2120      	movs	r1, #32
2400f81e:	2a08      	cmp	r2, #8
2400f820:	f1c0 0208 	rsb	r2, r0, #8
2400f824:	4428      	add	r0, r5
2400f826:	bf88      	it	hi
2400f828:	2201      	movhi	r2, #1
2400f82a:	f009 f869 	bl	24018900 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f82e:	4650      	mov	r0, sl
2400f830:	f7ff f9f8 	bl	2400ec24 <dir_find>
			if (res != FR_OK) break;
2400f834:	2800      	cmp	r0, #0
2400f836:	d17d      	bne.n	2400f934 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
2400f838:	3601      	adds	r6, #1
2400f83a:	2e64      	cmp	r6, #100	; 0x64
2400f83c:	f000 8095 	beq.w	2400f96a <dir_register+0x5a6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400f840:	9b01      	ldr	r3, [sp, #4]
2400f842:	68d9      	ldr	r1, [r3, #12]
2400f844:	e6a2      	b.n	2400f58c <dir_register+0x1c8>
2400f846:	46b6      	mov	lr, r6
2400f848:	e769      	b.n	2400f71e <dir_register+0x35a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f84a:	f10c 0348 	add.w	r3, ip, #72	; 0x48
2400f84e:	f10c 0c01 	add.w	ip, ip, #1
2400f852:	eb0d 0103 	add.w	r1, sp, r3
2400f856:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f85a:	54a9      	strb	r1, [r5, r2]
2400f85c:	3201      	adds	r2, #1
	} while (j < 8);
2400f85e:	2a07      	cmp	r2, #7
2400f860:	d8e5      	bhi.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f862:	f1bc 0f08 	cmp.w	ip, #8
2400f866:	f000 8086 	beq.w	2400f976 <dir_register+0x5b2>
2400f86a:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
2400f86e:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f870:	f102 0001 	add.w	r0, r2, #1
2400f874:	eb0d 0103 	add.w	r1, sp, r3
2400f878:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f87c:	54a9      	strb	r1, [r5, r2]
2400f87e:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400f882:	d0d4      	beq.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f884:	2908      	cmp	r1, #8
2400f886:	d07e      	beq.n	2400f986 <dir_register+0x5c2>
2400f888:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
2400f88c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f88e:	eb0d 0103 	add.w	r1, sp, r3
2400f892:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f896:	5429      	strb	r1, [r5, r0]
2400f898:	f10c 0102 	add.w	r1, ip, #2
2400f89c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400f8a0:	d0c5      	beq.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8a2:	2908      	cmp	r1, #8
2400f8a4:	d077      	beq.n	2400f996 <dir_register+0x5d2>
2400f8a6:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
2400f8aa:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8ac:	eb0d 0103 	add.w	r1, sp, r3
2400f8b0:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f8b4:	5429      	strb	r1, [r5, r0]
2400f8b6:	f10c 0103 	add.w	r1, ip, #3
2400f8ba:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400f8be:	d0b6      	beq.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8c0:	2908      	cmp	r1, #8
2400f8c2:	d070      	beq.n	2400f9a6 <dir_register+0x5e2>
2400f8c4:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
2400f8c8:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8ca:	eb0d 0103 	add.w	r1, sp, r3
2400f8ce:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f8d2:	5429      	strb	r1, [r5, r0]
2400f8d4:	f10c 0104 	add.w	r1, ip, #4
2400f8d8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400f8dc:	d0a7      	beq.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8de:	2908      	cmp	r1, #8
2400f8e0:	d069      	beq.n	2400f9b6 <dir_register+0x5f2>
2400f8e2:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
2400f8e6:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8e8:	eb0d 0103 	add.w	r1, sp, r3
2400f8ec:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f8f0:	5429      	strb	r1, [r5, r0]
2400f8f2:	f10c 0105 	add.w	r1, ip, #5
2400f8f6:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f8fa:	d098      	beq.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f8fc:	2908      	cmp	r1, #8
2400f8fe:	d062      	beq.n	2400f9c6 <dir_register+0x602>
2400f900:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
2400f904:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f906:	eb0d 0103 	add.w	r1, sp, r3
2400f90a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400f90e:	5429      	strb	r1, [r5, r0]
2400f910:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400f914:	d08b      	beq.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f916:	f1bc 0f01 	cmp.w	ip, #1
2400f91a:	d15c      	bne.n	2400f9d6 <dir_register+0x612>
2400f91c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
2400f920:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f922:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
2400f924:	d183      	bne.n	2400f82e <dir_register+0x46a>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f926:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f928:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400f92c:	f7ff f97a 	bl	2400ec24 <dir_find>
			if (res != FR_OK) break;
2400f930:	2800      	cmp	r0, #0
2400f932:	d081      	beq.n	2400f838 <dir_register+0x474>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400f934:	2804      	cmp	r0, #4
2400f936:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
2400f938:	4683      	mov	fp, r0
2400f93a:	d118      	bne.n	2400f96e <dir_register+0x5aa>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400f93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
2400f93e:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
2400f942:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f946:	f013 0302 	ands.w	r3, r3, #2
2400f94a:	f47f ad65 	bne.w	2400f418 <dir_register+0x54>
2400f94e:	9302      	str	r3, [sp, #8]
2400f950:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
2400f952:	2100      	movs	r1, #0
2400f954:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400f956:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400f958:	f7ff f8aa 	bl	2400eab0 <dir_sdi>
	if (res == FR_OK) {
2400f95c:	4683      	mov	fp, r0
2400f95e:	2800      	cmp	r0, #0
2400f960:	f43f ad6b 	beq.w	2400f43a <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400f964:	f1bb 0f04 	cmp.w	fp, #4
2400f968:	d101      	bne.n	2400f96e <dir_register+0x5aa>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400f96a:	f04f 0b07 	mov.w	fp, #7
}
2400f96e:	4658      	mov	r0, fp
2400f970:	b013      	add	sp, #76	; 0x4c
2400f972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2400f976:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f978:	f102 0001 	add.w	r0, r2, #1
2400f97c:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400f980:	f47f af4b 	bne.w	2400f81a <dir_register+0x456>
2400f984:	e753      	b.n	2400f82e <dir_register+0x46a>
2400f986:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f988:	f805 9000 	strb.w	r9, [r5, r0]
2400f98c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400f990:	f47f af43 	bne.w	2400f81a <dir_register+0x456>
2400f994:	e74b      	b.n	2400f82e <dir_register+0x46a>
2400f996:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f998:	f805 9000 	strb.w	r9, [r5, r0]
2400f99c:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400f9a0:	f47f af3b 	bne.w	2400f81a <dir_register+0x456>
2400f9a4:	e743      	b.n	2400f82e <dir_register+0x46a>
2400f9a6:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f9a8:	f805 9000 	strb.w	r9, [r5, r0]
2400f9ac:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400f9b0:	f47f af33 	bne.w	2400f81a <dir_register+0x456>
2400f9b4:	e73b      	b.n	2400f82e <dir_register+0x46a>
2400f9b6:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f9b8:	f805 9000 	strb.w	r9, [r5, r0]
2400f9bc:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f9c0:	f47f af2b 	bne.w	2400f81a <dir_register+0x456>
2400f9c4:	e733      	b.n	2400f82e <dir_register+0x46a>
2400f9c6:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f9c8:	f805 9000 	strb.w	r9, [r5, r0]
2400f9cc:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400f9d0:	f47f af23 	bne.w	2400f81a <dir_register+0x456>
2400f9d4:	e72b      	b.n	2400f82e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f9d6:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
2400f9da:	2a00      	cmp	r2, #0
2400f9dc:	f47f af27 	bne.w	2400f82e <dir_register+0x46a>
2400f9e0:	2007      	movs	r0, #7
2400f9e2:	e71a      	b.n	2400f81a <dir_register+0x456>
	ns[i] = '~';
2400f9e4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f9e6:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400f9ea:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f9ee:	e701      	b.n	2400f7f4 <dir_register+0x430>
	ns[i] = '~';
2400f9f0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f9f2:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400f9f6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f9fa:	e6fb      	b.n	2400f7f4 <dir_register+0x430>
	ns[i] = '~';
2400f9fc:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f9fe:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400fa02:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400fa06:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
2400fa0a:	4662      	mov	r2, ip
2400fa0c:	e72d      	b.n	2400f86a <dir_register+0x4a6>
	ns[i] = '~';
2400fa0e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400fa10:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400fa14:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400fa18:	e6ec      	b.n	2400f7f4 <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400fa1a:	8962      	ldrh	r2, [r4, #10]
2400fa1c:	3a01      	subs	r2, #1
2400fa1e:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400fa22:	f47f ad32 	bne.w	2400f48a <dir_register+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400fa26:	4619      	mov	r1, r3
2400fa28:	4620      	mov	r0, r4
2400fa2a:	f7fe fc45 	bl	2400e2b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400fa2e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400fa30:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400fa32:	f240 8205 	bls.w	2400fe40 <dir_register+0xa7c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400fa36:	1c42      	adds	r2, r0, #1
2400fa38:	f000 80dc 	beq.w	2400fbf4 <dir_register+0x830>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400fa3c:	69a3      	ldr	r3, [r4, #24]
2400fa3e:	4602      	mov	r2, r0
2400fa40:	4298      	cmp	r0, r3
2400fa42:	f080 80e7 	bcs.w	2400fc14 <dir_register+0x850>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa46:	3b02      	subs	r3, #2
	clst -= 2;
2400fa48:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fa4c:	f104 0634 	add.w	r6, r4, #52	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa50:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
2400fa52:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa56:	f240 813b 	bls.w	2400fcd0 <dir_register+0x90c>
	return clst * fs->csize + fs->database;
2400fa5a:	8963      	ldrh	r3, [r4, #10]
2400fa5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400fa5e:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
2400fa62:	f8ca 101c 	str.w	r1, [sl, #28]
2400fa66:	e512      	b.n	2400f48e <dir_register+0xca>
	ns[i] = '~';
2400fa68:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400fa6a:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400fa6e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400fa72:	e6bf      	b.n	2400f7f4 <dir_register+0x430>
	ns[i] = '~';
2400fa74:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400fa76:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400fa7a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400fa7e:	e6b9      	b.n	2400f7f4 <dir_register+0x430>
	ns[i] = '~';
2400fa80:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400fa82:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400fa86:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400fa8a:	e6b3      	b.n	2400f7f4 <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400fa8c:	f04f 0b06 	mov.w	fp, #6
}
2400fa90:	4658      	mov	r0, fp
2400fa92:	b013      	add	sp, #76	; 0x4c
2400fa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400fa98:	4683      	mov	fp, r0
2400fa9a:	4658      	mov	r0, fp
2400fa9c:	b013      	add	sp, #76	; 0x4c
2400fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400faa2:	f8da 1014 	ldr.w	r1, [sl, #20]
2400faa6:	4650      	mov	r0, sl
2400faa8:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
2400faac:	f7ff f800 	bl	2400eab0 <dir_sdi>
		if (res == FR_OK) {
2400fab0:	4605      	mov	r5, r0
2400fab2:	2800      	cmp	r0, #0
2400fab4:	f040 810a 	bne.w	2400fccc <dir_register+0x908>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fab8:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400fabc:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fac0:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
2400fac4:	01cb      	lsls	r3, r1, #7
2400fac6:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
2400faca:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400face:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
2400fad2:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
2400fad6:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
2400fada:	1919      	adds	r1, r3, r4
2400fadc:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
2400fae0:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
2400fae4:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400fae8:	f3c1 0346 	ubfx	r3, r1, #1, #7
2400faec:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
2400faf0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
2400faf4:	fa50 f383 	uxtab	r3, r0, r3
2400faf8:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
2400fafc:	f3c3 0146 	ubfx	r1, r3, #1, #7
2400fb00:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
2400fb04:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
2400fb08:	fa52 f283 	uxtab	r2, r2, r3
2400fb0c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400fb10:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400fb14:	fa58 f883 	uxtab	r8, r8, r3
2400fb18:	f3c8 0346 	ubfx	r3, r8, #1, #7
2400fb1c:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
2400fb20:	fa5e fe83 	uxtab	lr, lr, r3
2400fb24:	f3ce 0346 	ubfx	r3, lr, #1, #7
2400fb28:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
2400fb2c:	fa5c fc83 	uxtab	ip, ip, r3
2400fb30:	f3cc 0346 	ubfx	r3, ip, #1, #7
2400fb34:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
2400fb38:	fa57 f783 	uxtab	r7, r7, r3
2400fb3c:	f3c7 0346 	ubfx	r3, r7, #1, #7
2400fb40:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
2400fb44:	fa56 f683 	uxtab	r6, r6, r3
2400fb48:	f3c6 0346 	ubfx	r3, r6, #1, #7
2400fb4c:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
2400fb50:	9e01      	ldr	r6, [sp, #4]
2400fb52:	fa50 f083 	uxtab	r0, r0, r3
2400fb56:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400fb5a:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
2400fb5e:	fa51 f180 	uxtab	r1, r1, r0
2400fb62:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
2400fb66:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fb6a:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400fb6c:	4299      	cmp	r1, r3
2400fb6e:	d004      	beq.n	2400fb7a <dir_register+0x7b6>
2400fb70:	4630      	mov	r0, r6
2400fb72:	f7fe f955 	bl	2400de20 <move_window.part.0>
				if (res != FR_OK) break;
2400fb76:	2800      	cmp	r0, #0
2400fb78:	d18e      	bne.n	2400fa98 <dir_register+0x6d4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400fb7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
2400fb7e:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400fb80:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400fb82:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400fb86:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400fb8a:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400fb8e:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400fb92:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
2400fb96:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400fb98:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
2400fb9a:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fb9c:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
2400fba0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
2400fba4:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
2400fba6:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fbaa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fbae:	2f00      	cmp	r7, #0
2400fbb0:	f040 8090 	bne.w	2400fcd4 <dir_register+0x910>
	*ptr++ = (BYTE)val; val >>= 8;
2400fbb4:	f8a3 4003 	strh.w	r4, [r3, #3]
2400fbb8:	f8a3 4005 	strh.w	r4, [r3, #5]
2400fbbc:	f8a3 4007 	strh.w	r4, [r3, #7]
2400fbc0:	f8a3 4009 	strh.w	r4, [r3, #9]
2400fbc4:	81dc      	strh	r4, [r3, #14]
2400fbc6:	821c      	strh	r4, [r3, #16]
2400fbc8:	825c      	strh	r4, [r3, #18]
2400fbca:	829c      	strh	r4, [r3, #20]
2400fbcc:	82dc      	strh	r4, [r3, #22]
2400fbce:	831c      	strh	r4, [r3, #24]
2400fbd0:	839c      	strh	r4, [r3, #28]
2400fbd2:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400fbd4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400fbd8:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
2400fbda:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400fbdc:	4650      	mov	r0, sl
				fs->wflag = 1;
2400fbde:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400fbe0:	f7fe fbca 	bl	2400e378 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
2400fbe4:	2800      	cmp	r0, #0
2400fbe6:	f47f af57 	bne.w	2400fa98 <dir_register+0x6d4>
2400fbea:	9b02      	ldr	r3, [sp, #8]
2400fbec:	3b01      	subs	r3, #1
2400fbee:	9302      	str	r3, [sp, #8]
2400fbf0:	d1b9      	bne.n	2400fb66 <dir_register+0x7a2>
2400fbf2:	e46b      	b.n	2400f4cc <dir_register+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400fbf4:	f04f 0b01 	mov.w	fp, #1
}
2400fbf8:	4658      	mov	r0, fp
2400fbfa:	b013      	add	sp, #76	; 0x4c
2400fbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400fc00:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
2400fc04:	f8ca 301c 	str.w	r3, [sl, #28]
}
2400fc08:	4658      	mov	r0, fp
2400fc0a:	b013      	add	sp, #76	; 0x4c
2400fc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400fc10:	4683      	mov	fp, r0
2400fc12:	e6a7      	b.n	2400f964 <dir_register+0x5a0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400fc14:	f8da 1018 	ldr.w	r1, [sl, #24]
2400fc18:	4650      	mov	r0, sl
2400fc1a:	f7fe fe79 	bl	2400e910 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400fc1e:	4603      	mov	r3, r0
2400fc20:	9004      	str	r0, [sp, #16]
2400fc22:	2800      	cmp	r0, #0
2400fc24:	f43f aea1 	beq.w	2400f96a <dir_register+0x5a6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400fc28:	2801      	cmp	r0, #1
2400fc2a:	f000 8109 	beq.w	2400fe40 <dir_register+0xa7c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400fc2e:	3301      	adds	r3, #1
2400fc30:	d0e0      	beq.n	2400fbf4 <dir_register+0x830>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400fc32:	78e3      	ldrb	r3, [r4, #3]
2400fc34:	2b00      	cmp	r3, #0
2400fc36:	f040 8111 	bne.w	2400fe5c <dir_register+0xa98>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fc3a:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400fc3e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400fc42:	2100      	movs	r1, #0
2400fc44:	4630      	mov	r0, r6
2400fc46:	f008 fe5b 	bl	24018900 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fc4a:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
2400fc4c:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fc4e:	3b02      	subs	r3, #2
	return clst * fs->csize + fs->database;
2400fc50:	8961      	ldrh	r1, [r4, #10]
	clst -= 2;
2400fc52:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fc56:	459b      	cmp	fp, r3
2400fc58:	f080 80fe 	bcs.w	2400fe58 <dir_register+0xa94>
	return clst * fs->csize + fs->database;
2400fc5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400fc5e:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400fc62:	6322      	str	r2, [r4, #48]	; 0x30
2400fc64:	2900      	cmp	r1, #0
2400fc66:	f000 80f4 	beq.w	2400fe52 <dir_register+0xa8e>
2400fc6a:	2300      	movs	r3, #0
2400fc6c:	e9cd 5707 	strd	r5, r7, [sp, #28]
2400fc70:	4637      	mov	r7, r6
2400fc72:	4616      	mov	r6, r2
2400fc74:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
2400fc76:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fc7a:	4632      	mov	r2, r6
2400fc7c:	4639      	mov	r1, r7
2400fc7e:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
2400fc80:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fc82:	2301      	movs	r3, #1
2400fc84:	f7fd ff2c 	bl	2400dae0 <disk_write>
2400fc88:	2800      	cmp	r0, #0
2400fc8a:	d1b3      	bne.n	2400fbf4 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fc8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
2400fc8e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fc90:	1af0      	subs	r0, r6, r3
2400fc92:	69e3      	ldr	r3, [r4, #28]
2400fc94:	4298      	cmp	r0, r3
2400fc96:	d20e      	bcs.n	2400fcb6 <dir_register+0x8f2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fc98:	78a5      	ldrb	r5, [r4, #2]
2400fc9a:	2d01      	cmp	r5, #1
2400fc9c:	d801      	bhi.n	2400fca2 <dir_register+0x8de>
2400fc9e:	e00a      	b.n	2400fcb6 <dir_register+0x8f2>
					wsect += fs->fsize;
2400fca0:	69e3      	ldr	r3, [r4, #28]
2400fca2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fca4:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400fca6:	2301      	movs	r3, #1
2400fca8:	4639      	mov	r1, r7
2400fcaa:	4632      	mov	r2, r6
2400fcac:	7860      	ldrb	r0, [r4, #1]
2400fcae:	f7fd ff17 	bl	2400dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fcb2:	2d01      	cmp	r5, #1
2400fcb4:	d1f4      	bne.n	2400fca0 <dir_register+0x8dc>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400fcb6:	9a05      	ldr	r2, [sp, #20]
2400fcb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400fcba:	1c50      	adds	r0, r2, #1
2400fcbc:	8965      	ldrh	r5, [r4, #10]
2400fcbe:	1c5e      	adds	r6, r3, #1
2400fcc0:	42a8      	cmp	r0, r5
2400fcc2:	6326      	str	r6, [r4, #48]	; 0x30
2400fcc4:	f080 80bf 	bcs.w	2400fe46 <dir_register+0xa82>
2400fcc8:	9005      	str	r0, [sp, #20]
2400fcca:	e7d4      	b.n	2400fc76 <dir_register+0x8b2>
2400fccc:	4683      	mov	fp, r0
2400fcce:	e64e      	b.n	2400f96e <dir_register+0x5aa>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fcd0:	2100      	movs	r1, #0
2400fcd2:	e6c6      	b.n	2400fa62 <dir_register+0x69e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcd4:	42a7      	cmp	r7, r4
2400fcd6:	f43f af6d 	beq.w	2400fbb4 <dir_register+0x7f0>
2400fcda:	3201      	adds	r2, #1
2400fcdc:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
2400fce0:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400fce2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fce6:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
2400fce8:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fcec:	2f00      	cmp	r7, #0
2400fcee:	f43f af63 	beq.w	2400fbb8 <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fcf2:	42a7      	cmp	r7, r4
2400fcf4:	f43f af60 	beq.w	2400fbb8 <dir_register+0x7f4>
2400fcf8:	440a      	add	r2, r1
2400fcfa:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
2400fcfc:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd00:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
2400fd02:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd06:	2f00      	cmp	r7, #0
2400fd08:	f43f af58 	beq.w	2400fbbc <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd0c:	42a7      	cmp	r7, r4
2400fd0e:	f43f af55 	beq.w	2400fbbc <dir_register+0x7f8>
2400fd12:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd14:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd18:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
2400fd1a:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd1e:	2f00      	cmp	r7, #0
2400fd20:	f43f af4e 	beq.w	2400fbc0 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd24:	42a7      	cmp	r7, r4
2400fd26:	f43f af4b 	beq.w	2400fbc0 <dir_register+0x7fc>
2400fd2a:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd2c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd30:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
2400fd32:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd36:	2f00      	cmp	r7, #0
2400fd38:	f43f af44 	beq.w	2400fbc4 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd3c:	42a7      	cmp	r7, r4
2400fd3e:	f43f af41 	beq.w	2400fbc4 <dir_register+0x800>
2400fd42:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd44:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd48:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
2400fd4a:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd4e:	2f00      	cmp	r7, #0
2400fd50:	f43f af39 	beq.w	2400fbc6 <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd54:	42a7      	cmp	r7, r4
2400fd56:	f43f af36 	beq.w	2400fbc6 <dir_register+0x802>
2400fd5a:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd5c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd60:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
2400fd62:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd66:	2f00      	cmp	r7, #0
2400fd68:	f43f af2e 	beq.w	2400fbc8 <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd6c:	42a7      	cmp	r7, r4
2400fd6e:	f43f af2b 	beq.w	2400fbc8 <dir_register+0x804>
2400fd72:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd74:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd78:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
2400fd7a:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd7e:	2f00      	cmp	r7, #0
2400fd80:	f43f af23 	beq.w	2400fbca <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd84:	42a7      	cmp	r7, r4
2400fd86:	f43f af20 	beq.w	2400fbca <dir_register+0x806>
2400fd8a:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd8c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fd90:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
2400fd92:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fd96:	2f00      	cmp	r7, #0
2400fd98:	f43f af18 	beq.w	2400fbcc <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fd9c:	42a7      	cmp	r7, r4
2400fd9e:	f43f af15 	beq.w	2400fbcc <dir_register+0x808>
2400fda2:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
2400fda4:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fda8:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
2400fdaa:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fdae:	2f00      	cmp	r7, #0
2400fdb0:	f43f af0d 	beq.w	2400fbce <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fdb4:	42a7      	cmp	r7, r4
2400fdb6:	f43f af0a 	beq.w	2400fbce <dir_register+0x80a>
2400fdba:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
2400fdbc:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fdc0:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
2400fdc2:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fdc6:	2f00      	cmp	r7, #0
2400fdc8:	f43f af02 	beq.w	2400fbd0 <dir_register+0x80c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fdcc:	42a7      	cmp	r7, r4
2400fdce:	f43f aeff 	beq.w	2400fbd0 <dir_register+0x80c>
2400fdd2:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
2400fdd4:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400fdd8:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
2400fdda:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fdde:	2f00      	cmp	r7, #0
2400fde0:	f43f aef7 	beq.w	2400fbd2 <dir_register+0x80e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400fde4:	42a7      	cmp	r7, r4
2400fde6:	f43f aef4 	beq.w	2400fbd2 <dir_register+0x80e>
2400fdea:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fdec:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400fdee:	779a      	strb	r2, [r3, #30]
2400fdf0:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fdf2:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
2400fdf4:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400fdf6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
2400fdfa:	4297      	cmp	r7, r2
2400fdfc:	f63f aeea 	bhi.w	2400fbd4 <dir_register+0x810>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400fe00:	4461      	add	r1, ip
2400fe02:	8b4a      	ldrh	r2, [r1, #26]
2400fe04:	2a00      	cmp	r2, #0
2400fe06:	f47f aee7 	bne.w	2400fbd8 <dir_register+0x814>
2400fe0a:	e6e3      	b.n	2400fbd4 <dir_register+0x810>
			*d++ = *s++;
2400fe0c:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
2400fe10:	701a      	strb	r2, [r3, #0]
2400fe12:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
2400fe16:	705a      	strb	r2, [r3, #1]
2400fe18:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
2400fe1c:	709a      	strb	r2, [r3, #2]
2400fe1e:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400fe22:	70da      	strb	r2, [r3, #3]
2400fe24:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
2400fe28:	711a      	strb	r2, [r3, #4]
2400fe2a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
2400fe2e:	715a      	strb	r2, [r3, #5]
2400fe30:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
2400fe34:	719a      	strb	r2, [r3, #6]
2400fe36:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
2400fe3a:	71da      	strb	r2, [r3, #7]
2400fe3c:	f7ff bb66 	b.w	2400f50c <dir_register+0x148>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400fe40:	f04f 0b02 	mov.w	fp, #2
2400fe44:	e593      	b.n	2400f96e <dir_register+0x5aa>
					fs->winsect -= n;							/* Restore window offset */
2400fe46:	1a9a      	subs	r2, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fe48:	69a3      	ldr	r3, [r4, #24]
					fs->winsect -= n;							/* Restore window offset */
2400fe4a:	463e      	mov	r6, r7
2400fe4c:	9d07      	ldr	r5, [sp, #28]
2400fe4e:	9f08      	ldr	r7, [sp, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fe50:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
2400fe52:	6322      	str	r2, [r4, #48]	; 0x30
2400fe54:	9a04      	ldr	r2, [sp, #16]
2400fe56:	e5fb      	b.n	2400fa50 <dir_register+0x68c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fe58:	2200      	movs	r2, #0
2400fe5a:	e702      	b.n	2400fc62 <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fe5c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
2400fe60:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400fe62:	2301      	movs	r3, #1
2400fe64:	7860      	ldrb	r0, [r4, #1]
2400fe66:	4631      	mov	r1, r6
2400fe68:	9205      	str	r2, [sp, #20]
2400fe6a:	f7fd fe39 	bl	2400dae0 <disk_write>
2400fe6e:	2800      	cmp	r0, #0
2400fe70:	f47f aec0 	bne.w	2400fbf4 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fe74:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400fe76:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
2400fe78:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400fe7a:	1ad1      	subs	r1, r2, r3
2400fe7c:	69e3      	ldr	r3, [r4, #28]
2400fe7e:	4299      	cmp	r1, r3
2400fe80:	f4bf aedd 	bcs.w	2400fc3e <dir_register+0x87a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe84:	f894 b002 	ldrb.w	fp, [r4, #2]
2400fe88:	f1bb 0f01 	cmp.w	fp, #1
2400fe8c:	f67f aed7 	bls.w	2400fc3e <dir_register+0x87a>
2400fe90:	4631      	mov	r1, r6
2400fe92:	462e      	mov	r6, r5
2400fe94:	4625      	mov	r5, r4
2400fe96:	4614      	mov	r4, r2
2400fe98:	e000      	b.n	2400fe9c <dir_register+0xad8>
					wsect += fs->fsize;
2400fe9a:	69eb      	ldr	r3, [r5, #28]
2400fe9c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400fe9e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400fea2:	2301      	movs	r3, #1
2400fea4:	7868      	ldrb	r0, [r5, #1]
2400fea6:	4622      	mov	r2, r4
2400fea8:	9105      	str	r1, [sp, #20]
2400feaa:	f7fd fe19 	bl	2400dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400feae:	f1bb 0f01 	cmp.w	fp, #1
2400feb2:	9905      	ldr	r1, [sp, #20]
2400feb4:	d1f1      	bne.n	2400fe9a <dir_register+0xad6>
2400feb6:	462c      	mov	r4, r5
2400feb8:	4635      	mov	r5, r6
2400feba:	460e      	mov	r6, r1
2400febc:	e6bf      	b.n	2400fc3e <dir_register+0x87a>
2400febe:	bf00      	nop

2400fec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400fec0:	b510      	push	{r4, lr}
2400fec2:	b082      	sub	sp, #8
2400fec4:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400fec8:	b1a1      	cbz	r1, 2400fef4 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400feca:	f891 c000 	ldrb.w	ip, [r1]
2400fece:	f1bc 0f1f 	cmp.w	ip, #31
2400fed2:	d912      	bls.n	2400fefa <f_mount+0x3a>
2400fed4:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400fed8:	d00f      	beq.n	2400fefa <f_mount+0x3a>
2400feda:	4608      	mov	r0, r1
2400fedc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400fee0:	2b1f      	cmp	r3, #31
2400fee2:	d90c      	bls.n	2400fefe <f_mount+0x3e>
2400fee4:	2b3a      	cmp	r3, #58	; 0x3a
2400fee6:	d1f9      	bne.n	2400fedc <f_mount+0x1c>
			i = *tp++ - '0';
2400fee8:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400feea:	4288      	cmp	r0, r1
2400feec:	d102      	bne.n	2400fef4 <f_mount+0x34>
2400feee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400fef2:	d006      	beq.n	2400ff02 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400fef4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400fef6:	b002      	add	sp, #8
2400fef8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400fefa:	4663      	mov	r3, ip
2400fefc:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400fefe:	2b3a      	cmp	r3, #58	; 0x3a
2400ff00:	d0f2      	beq.n	2400fee8 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400ff02:	4913      	ldr	r1, [pc, #76]	; (2400ff50 <f_mount+0x90>)
2400ff04:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400ff06:	b143      	cbz	r3, 2400ff1a <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ff08:	4812      	ldr	r0, [pc, #72]	; (2400ff54 <f_mount+0x94>)
2400ff0a:	6804      	ldr	r4, [r0, #0]
2400ff0c:	42a3      	cmp	r3, r4
2400ff0e:	d019      	beq.n	2400ff44 <f_mount+0x84>
2400ff10:	6904      	ldr	r4, [r0, #16]
2400ff12:	429c      	cmp	r4, r3
2400ff14:	d013      	beq.n	2400ff3e <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
2400ff16:	2000      	movs	r0, #0
2400ff18:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400ff1a:	9b01      	ldr	r3, [sp, #4]
2400ff1c:	b15b      	cbz	r3, 2400ff36 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
2400ff1e:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ff20:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
2400ff22:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
2400ff24:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ff26:	d1e6      	bne.n	2400fef6 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400ff28:	4602      	mov	r2, r0
2400ff2a:	a901      	add	r1, sp, #4
2400ff2c:	4668      	mov	r0, sp
2400ff2e:	f7fd ffb1 	bl	2400de94 <find_volume>
}
2400ff32:	b002      	add	sp, #8
2400ff34:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ff36:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400ff38:	600b      	str	r3, [r1, #0]
}
2400ff3a:	b002      	add	sp, #8
2400ff3c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ff3e:	2400      	movs	r4, #0
2400ff40:	6104      	str	r4, [r0, #16]
2400ff42:	e7e8      	b.n	2400ff16 <f_mount+0x56>
2400ff44:	2400      	movs	r4, #0
2400ff46:	6004      	str	r4, [r0, #0]
2400ff48:	6904      	ldr	r4, [r0, #16]
2400ff4a:	429c      	cmp	r4, r3
2400ff4c:	d1e3      	bne.n	2400ff16 <f_mount+0x56>
2400ff4e:	e7f6      	b.n	2400ff3e <f_mount+0x7e>
2400ff50:	2001f5f0 	.word	0x2001f5f0
2400ff54:	2001f5f4 	.word	0x2001f5f4

2400ff58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400ff58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400ff5c:	b092      	sub	sp, #72	; 0x48
2400ff5e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400ff60:	2800      	cmp	r0, #0
2400ff62:	f000 80a0 	beq.w	240100a6 <f_open+0x14e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400ff66:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400ff6a:	4616      	mov	r6, r2
2400ff6c:	4604      	mov	r4, r0
2400ff6e:	a903      	add	r1, sp, #12
2400ff70:	a801      	add	r0, sp, #4
2400ff72:	463a      	mov	r2, r7
2400ff74:	f7fd ff8e 	bl	2400de94 <find_volume>
	if (res == FR_OK) {
2400ff78:	4605      	mov	r5, r0
2400ff7a:	b128      	cbz	r0, 2400ff88 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400ff7c:	2300      	movs	r3, #0
2400ff7e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400ff80:	4628      	mov	r0, r5
2400ff82:	b012      	add	sp, #72	; 0x48
2400ff84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400ff88:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400ff8a:	a804      	add	r0, sp, #16
2400ff8c:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400ff8e:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400ff90:	f7fe ffee 	bl	2400ef70 <follow_path>
		if (res == FR_OK) {
2400ff94:	bb00      	cbnz	r0, 2400ffd8 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400ff96:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400ff9a:	2b00      	cmp	r3, #0
2400ff9c:	f2c0 808a 	blt.w	240100b4 <f_open+0x15c>
		if (Files[i].fs) {	/* Existing entry */
2400ffa0:	4ba6      	ldr	r3, [pc, #664]	; (2401023c <f_open+0x2e4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400ffa2:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400ffa6:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400ffa8:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400ffac:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
2400ffae:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400ffb2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400ffb6:	f1b8 0f00 	cmp.w	r8, #0
2400ffba:	f000 80fc 	beq.w	240101b6 <f_open+0x25e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400ffbe:	4580      	cmp	r8, r0
2400ffc0:	d07a      	beq.n	240100b8 <f_open+0x160>
		if (Files[i].fs) {	/* Existing entry */
2400ffc2:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400ffc6:	f1b8 0f00 	cmp.w	r8, #0
2400ffca:	f000 808d 	beq.w	240100e8 <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400ffce:	4580      	cmp	r8, r0
2400ffd0:	f000 8101 	beq.w	240101d6 <f_open+0x27e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400ffd4:	2512      	movs	r5, #18
2400ffd6:	e7d1      	b.n	2400ff7c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400ffd8:	f016 0f1c 	tst.w	r6, #28
2400ffdc:	d068      	beq.n	240100b0 <f_open+0x158>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400ffde:	2804      	cmp	r0, #4
2400ffe0:	d166      	bne.n	240100b0 <f_open+0x158>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400ffe2:	4b96      	ldr	r3, [pc, #600]	; (2401023c <f_open+0x2e4>)
2400ffe4:	681a      	ldr	r2, [r3, #0]
2400ffe6:	b112      	cbz	r2, 2400ffee <f_open+0x96>
2400ffe8:	691b      	ldr	r3, [r3, #16]
2400ffea:	2b00      	cmp	r3, #0
2400ffec:	d1f2      	bne.n	2400ffd4 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400ffee:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400fff0:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400fff4:	f7ff f9e6 	bl	2400f3c4 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400fff8:	2800      	cmp	r0, #0
2400fffa:	d159      	bne.n	240100b0 <f_open+0x158>
				dw = GET_FATTIME();
2400fffc:	f7fd fc5c 	bl	2400d8b8 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
24010000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
24010002:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
24010006:	f3c0 4107 	ubfx	r1, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
2401000a:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2401000e:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
24010012:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
24010014:	73d6      	strb	r6, [r2, #15]
	*ptr++ = (BYTE)val; val >>= 8;
24010016:	f882 c00e 	strb.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2401001a:	7411      	strb	r1, [r2, #16]
	*ptr++ = (BYTE)val;
2401001c:	7450      	strb	r0, [r2, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2401001e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
24010020:	9b03      	ldr	r3, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
24010022:	75d6      	strb	r6, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
24010024:	f882 c016 	strb.w	ip, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
24010028:	7611      	strb	r1, [r2, #24]
	*ptr++ = (BYTE)val;
2401002a:	7650      	strb	r0, [r2, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2401002c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2401002e:	f882 e00b 	strb.w	lr, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
24010032:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
24010034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
24010036:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
24010038:	8b56      	ldrh	r6, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
2401003a:	d102      	bne.n	24010042 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2401003c:	8a91      	ldrh	r1, [r2, #20]
2401003e:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
24010042:	2100      	movs	r1, #0
24010044:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
24010046:	7818      	ldrb	r0, [r3, #0]
24010048:	2803      	cmp	r0, #3
2401004a:	d100      	bne.n	2401004e <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
2401004c:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2401004e:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
24010050:	2200      	movs	r2, #0
24010052:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
24010054:	2101      	movs	r1, #1
24010056:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
24010058:	b19e      	cbz	r6, 24010082 <f_open+0x12a>
						res = remove_chain(&dj.obj, cl, 0);
2401005a:	4631      	mov	r1, r6
2401005c:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2401005e:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
24010062:	f7ff f911 	bl	2400f288 <remove_chain>
						if (res == FR_OK) {
24010066:	bb18      	cbnz	r0, 240100b0 <f_open+0x158>
							res = move_window(fs, dw);
24010068:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
2401006a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2401006c:	4590      	cmp	r8, r2
2401006e:	f000 80e2 	beq.w	24010236 <f_open+0x2de>
24010072:	4618      	mov	r0, r3
24010074:	4641      	mov	r1, r8
24010076:	f7fd fed3 	bl	2400de20 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2401007a:	3e01      	subs	r6, #1
2401007c:	9b03      	ldr	r3, [sp, #12]
2401007e:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
24010080:	b9b0      	cbnz	r0, 240100b0 <f_open+0x158>
				mode |= FA_MODIFIED;
24010082:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24010086:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2401008a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401008c:	3900      	subs	r1, #0
2401008e:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
24010090:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
24010092:	bf18      	it	ne
24010094:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
24010096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24010098:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2401009a:	f7fd fd3b 	bl	2400db14 <inc_lock>
2401009e:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
240100a0:	bb70      	cbnz	r0, 24010100 <f_open+0x1a8>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
240100a2:	2502      	movs	r5, #2
240100a4:	e76a      	b.n	2400ff7c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
240100a6:	2509      	movs	r5, #9
}
240100a8:	4628      	mov	r0, r5
240100aa:	b012      	add	sp, #72	; 0x48
240100ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
240100b0:	4605      	mov	r5, r0
240100b2:	e763      	b.n	2400ff7c <f_open+0x24>
				res = FR_INVALID_NAME;
240100b4:	2506      	movs	r5, #6
240100b6:	e761      	b.n	2400ff7c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240100b8:	6858      	ldr	r0, [r3, #4]
240100ba:	4560      	cmp	r0, ip
240100bc:	f000 8094 	beq.w	240101e8 <f_open+0x290>
		if (Files[i].fs) {	/* Existing entry */
240100c0:	6918      	ldr	r0, [r3, #16]
240100c2:	b188      	cbz	r0, 240100e8 <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240100c4:	4540      	cmp	r0, r8
240100c6:	d185      	bne.n	2400ffd4 <f_open+0x7c>
240100c8:	6958      	ldr	r0, [r3, #20]
240100ca:	4560      	cmp	r0, ip
240100cc:	d182      	bne.n	2400ffd4 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
240100ce:	6998      	ldr	r0, [r3, #24]
240100d0:	4570      	cmp	r0, lr
240100d2:	f47f af7f 	bne.w	2400ffd4 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
240100d6:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
240100d8:	2a00      	cmp	r2, #0
240100da:	d163      	bne.n	240101a4 <f_open+0x24c>
240100dc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
240100e0:	899b      	ldrh	r3, [r3, #12]
240100e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240100e6:	d05d      	beq.n	240101a4 <f_open+0x24c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
240100e8:	f016 0f1c 	tst.w	r6, #28
240100ec:	d04a      	beq.n	24010184 <f_open+0x22c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
240100ee:	f89d 3016 	ldrb.w	r3, [sp, #22]
240100f2:	f013 0f11 	tst.w	r3, #17
240100f6:	d15c      	bne.n	240101b2 <f_open+0x25a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
240100f8:	0773      	lsls	r3, r6, #29
240100fa:	d555      	bpl.n	240101a8 <f_open+0x250>
240100fc:	2508      	movs	r5, #8
240100fe:	e73d      	b.n	2400ff7c <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
24010100:	f8dd 900c 	ldr.w	r9, [sp, #12]
24010104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
24010106:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
2401010a:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2401010c:	2a03      	cmp	r2, #3
2401010e:	d102      	bne.n	24010116 <f_open+0x1be>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24010110:	8a9a      	ldrh	r2, [r3, #20]
24010112:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->err = 0;			/* Clear error flag */
24010116:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
24010118:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2401011a:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
	rv = rv << 8 | ptr[0];
2401011e:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
24010122:	f8b9 3006 	ldrh.w	r3, [r9, #6]
		*d++ = (BYTE)val;
24010126:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
2401012a:	7561      	strb	r1, [r4, #21]
		*d++ = (BYTE)val;
2401012c:	4650      	mov	r0, sl
			fp->sect = 0;			/* Invalidate current data sector */
2401012e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
24010130:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
24010132:	f8c4 9000 	str.w	r9, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
24010136:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
2401013a:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
2401013c:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
2401013e:	f008 fbdf 	bl	24018900 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
24010142:	06b9      	lsls	r1, r7, #26
24010144:	f57f af1c 	bpl.w	2400ff80 <f_open+0x28>
24010148:	f1b8 0f00 	cmp.w	r8, #0
2401014c:	f43f af18 	beq.w	2400ff80 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
24010150:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
24010154:	f8c4 8018 	str.w	r8, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
24010158:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2401015c:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
24010160:	d804      	bhi.n	2401016c <f_open+0x214>
24010162:	e047      	b.n	240101f4 <f_open+0x29c>
24010164:	1c42      	adds	r2, r0, #1
24010166:	d06b      	beq.n	24010240 <f_open+0x2e8>
24010168:	4547      	cmp	r7, r8
2401016a:	d269      	bcs.n	24010240 <f_open+0x2e8>
					clst = get_fat(&fp->obj, clst);
2401016c:	4631      	mov	r1, r6
2401016e:	6820      	ldr	r0, [r4, #0]
24010170:	f7fe f8a2 	bl	2400e2b8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
24010174:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
24010176:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
2401017a:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2401017c:	d8f2      	bhi.n	24010164 <f_open+0x20c>
2401017e:	2502      	movs	r5, #2
				fp->clust = clst;
24010180:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
24010182:	e6fb      	b.n	2400ff7c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
24010184:	f89d 3016 	ldrb.w	r3, [sp, #22]
24010188:	06d9      	lsls	r1, r3, #27
2401018a:	d422      	bmi.n	240101d2 <f_open+0x27a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2401018c:	07b1      	lsls	r1, r6, #30
2401018e:	d501      	bpl.n	24010194 <f_open+0x23c>
24010190:	07d8      	lsls	r0, r3, #31
24010192:	d40e      	bmi.n	240101b2 <f_open+0x25a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
24010194:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
24010198:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2401019a:	2e00      	cmp	r6, #0
2401019c:	f47f af71 	bne.w	24010082 <f_open+0x12a>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
240101a0:	4611      	mov	r1, r2
240101a2:	e772      	b.n	2401008a <f_open+0x132>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
240101a4:	2510      	movs	r5, #16
240101a6:	e6e9      	b.n	2400ff7c <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
240101a8:	0730      	lsls	r0, r6, #28
240101aa:	f53f af27 	bmi.w	2400fffc <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
240101ae:	9b03      	ldr	r3, [sp, #12]
240101b0:	e76b      	b.n	2401008a <f_open+0x132>
						res = FR_DENIED;
240101b2:	2507      	movs	r5, #7
240101b4:	e6e2      	b.n	2400ff7c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
240101b6:	f8d3 8010 	ldr.w	r8, [r3, #16]
240101ba:	f1b8 0f00 	cmp.w	r8, #0
240101be:	d093      	beq.n	240100e8 <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240101c0:	4540      	cmp	r0, r8
240101c2:	d191      	bne.n	240100e8 <f_open+0x190>
240101c4:	6958      	ldr	r0, [r3, #20]
240101c6:	4560      	cmp	r0, ip
240101c8:	d18e      	bne.n	240100e8 <f_open+0x190>
				Files[i].clu == dp->obj.sclust &&
240101ca:	6998      	ldr	r0, [r3, #24]
240101cc:	4586      	cmp	lr, r0
240101ce:	d18b      	bne.n	240100e8 <f_open+0x190>
240101d0:	e781      	b.n	240100d6 <f_open+0x17e>
					res = FR_NO_FILE;
240101d2:	2504      	movs	r5, #4
240101d4:	e6d2      	b.n	2400ff7c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240101d6:	6958      	ldr	r0, [r3, #20]
240101d8:	4560      	cmp	r0, ip
240101da:	f47f aefb 	bne.w	2400ffd4 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
240101de:	6998      	ldr	r0, [r3, #24]
240101e0:	4586      	cmp	lr, r0
240101e2:	f47f aef7 	bne.w	2400ffd4 <f_open+0x7c>
240101e6:	e776      	b.n	240100d6 <f_open+0x17e>
240101e8:	6898      	ldr	r0, [r3, #8]
240101ea:	4570      	cmp	r0, lr
240101ec:	f47f af68 	bne.w	240100c0 <f_open+0x168>
	for (i = be = 0; i < _FS_LOCK; i++) {
240101f0:	4628      	mov	r0, r5
240101f2:	e771      	b.n	240100d8 <f_open+0x180>
				fp->clust = clst;
240101f4:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
240101f6:	f3c8 0308 	ubfx	r3, r8, #0, #9
240101fa:	2b00      	cmp	r3, #0
240101fc:	f43f aec0 	beq.w	2400ff80 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
24010200:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
24010202:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010204:	6983      	ldr	r3, [r0, #24]
24010206:	3b02      	subs	r3, #2
24010208:	429e      	cmp	r6, r3
2401020a:	f4bf af4a 	bcs.w	240100a2 <f_open+0x14a>
	return clst * fs->csize + fs->database;
2401020e:	8942      	ldrh	r2, [r0, #10]
24010210:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
24010212:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
24010216:	2a00      	cmp	r2, #0
24010218:	f43f af43 	beq.w	240100a2 <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2401021c:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
24010220:	4651      	mov	r1, sl
24010222:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
24010224:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
24010226:	7840      	ldrb	r0, [r0, #1]
24010228:	f7fd fc4c 	bl	2400dac4 <disk_read>
2401022c:	2800      	cmp	r0, #0
2401022e:	f43f aea7 	beq.w	2400ff80 <f_open+0x28>
24010232:	2501      	movs	r5, #1
24010234:	e6a2      	b.n	2400ff7c <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
24010236:	3e01      	subs	r6, #1
24010238:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2401023a:	e722      	b.n	24010082 <f_open+0x12a>
2401023c:	2001f5f4 	.word	0x2001f5f4
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
24010240:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
24010242:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
24010244:	bf0c      	ite	eq
24010246:	2301      	moveq	r3, #1
24010248:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2401024a:	d1d4      	bne.n	240101f6 <f_open+0x29e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2401024c:	461d      	mov	r5, r3
2401024e:	e695      	b.n	2400ff7c <f_open+0x24>

24010250 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
24010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010254:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
24010256:	2300      	movs	r3, #0
{
24010258:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2401025a:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401025c:	b150      	cbz	r0, 24010274 <f_read+0x24>
2401025e:	6803      	ldr	r3, [r0, #0]
24010260:	4604      	mov	r4, r0
24010262:	b13b      	cbz	r3, 24010274 <f_read+0x24>
24010264:	4617      	mov	r7, r2
24010266:	781a      	ldrb	r2, [r3, #0]
24010268:	b122      	cbz	r2, 24010274 <f_read+0x24>
2401026a:	460d      	mov	r5, r1
2401026c:	88da      	ldrh	r2, [r3, #6]
2401026e:	8881      	ldrh	r1, [r0, #4]
24010270:	4291      	cmp	r1, r2
24010272:	d005      	beq.n	24010280 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
24010274:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
24010278:	4640      	mov	r0, r8
2401027a:	b005      	add	sp, #20
2401027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24010280:	7858      	ldrb	r0, [r3, #1]
24010282:	f7fd fc03 	bl	2400da8c <disk_status>
24010286:	07c2      	lsls	r2, r0, #31
24010288:	d4f4      	bmi.n	24010274 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2401028a:	f894 8015 	ldrb.w	r8, [r4, #21]
2401028e:	f1b8 0f00 	cmp.w	r8, #0
24010292:	d1f1      	bne.n	24010278 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
24010294:	7d23      	ldrb	r3, [r4, #20]
24010296:	f013 0301 	ands.w	r3, r3, #1
2401029a:	9300      	str	r3, [sp, #0]
2401029c:	f000 80c8 	beq.w	24010430 <f_read+0x1e0>
	remain = fp->obj.objsize - fp->fptr;
240102a0:	69a3      	ldr	r3, [r4, #24]
240102a2:	68e2      	ldr	r2, [r4, #12]
240102a4:	1ad2      	subs	r2, r2, r3
240102a6:	4297      	cmp	r7, r2
240102a8:	bf28      	it	cs
240102aa:	4617      	movcs	r7, r2
	for ( ;  btr;								/* Repeat until all data read */
240102ac:	2f00      	cmp	r7, #0
240102ae:	d0e3      	beq.n	24010278 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240102b0:	46a2      	mov	sl, r4
240102b2:	f104 022d 	add.w	r2, r4, #45	; 0x2d
240102b6:	f8cd 8008 	str.w	r8, [sp, #8]
240102ba:	f85a 9b2c 	ldr.w	r9, [sl], #44
240102be:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
240102c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
240102c4:	2a00      	cmp	r2, #0
240102c6:	d154      	bne.n	24010372 <f_read+0x122>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
240102c8:	f8b9 200a 	ldrh.w	r2, [r9, #10]
240102cc:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
240102ce:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
240102d2:	d07f      	beq.n	240103d4 <f_read+0x184>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
240102d4:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240102d6:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
240102da:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240102dc:	3b02      	subs	r3, #2
240102de:	4298      	cmp	r0, r3
240102e0:	f080 8086 	bcs.w	240103f0 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
240102e4:	f8b9 100a 	ldrh.w	r1, [r9, #10]
240102e8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
240102ec:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
240102f0:	2800      	cmp	r0, #0
240102f2:	d07d      	beq.n	240103f0 <f_read+0x1a0>
			if (cc) {							/* Read maximum contiguous sectors directly */
240102f4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
240102f8:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
240102fc:	d324      	bcc.n	24010348 <f_read+0xf8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
240102fe:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
24010302:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
24010306:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010308:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2401030c:	bf88      	it	hi
2401030e:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010312:	465a      	mov	r2, fp
24010314:	4629      	mov	r1, r5
24010316:	4643      	mov	r3, r8
24010318:	f7fd fbd4 	bl	2400dac4 <disk_read>
2401031c:	2800      	cmp	r0, #0
2401031e:	d16e      	bne.n	240103fe <f_read+0x1ae>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
24010320:	f994 2014 	ldrsb.w	r2, [r4, #20]
24010324:	2a00      	cmp	r2, #0
24010326:	f2c0 8093 	blt.w	24010450 <f_read+0x200>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2401032a:	ea4f 2c48 	mov.w	ip, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2401032e:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
24010330:	ebb7 070c 	subs.w	r7, r7, ip
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
24010334:	6832      	ldr	r2, [r6, #0]
24010336:	4465      	add	r5, ip
24010338:	4463      	add	r3, ip
2401033a:	4462      	add	r2, ip
2401033c:	61a3      	str	r3, [r4, #24]
2401033e:	6032      	str	r2, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
24010340:	d1be      	bne.n	240102c0 <f_read+0x70>
24010342:	f8dd 8008 	ldr.w	r8, [sp, #8]
24010346:	e797      	b.n	24010278 <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
24010348:	6a22      	ldr	r2, [r4, #32]
2401034a:	455a      	cmp	r2, fp
2401034c:	d00c      	beq.n	24010368 <f_read+0x118>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2401034e:	f994 3014 	ldrsb.w	r3, [r4, #20]
24010352:	2b00      	cmp	r3, #0
24010354:	db6f      	blt.n	24010436 <f_read+0x1e6>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
24010356:	2301      	movs	r3, #1
24010358:	465a      	mov	r2, fp
2401035a:	4651      	mov	r1, sl
2401035c:	f899 0001 	ldrb.w	r0, [r9, #1]
24010360:	f7fd fbb0 	bl	2400dac4 <disk_read>
24010364:	2800      	cmp	r0, #0
24010366:	d14a      	bne.n	240103fe <f_read+0x1ae>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
24010368:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2401036a:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2401036e:	f3c3 0208 	ubfx	r2, r3, #0, #9
24010372:	1c51      	adds	r1, r2, #1
24010374:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
24010378:	eb0a 0302 	add.w	r3, sl, r2
2401037c:	4451      	add	r1, sl
2401037e:	45bc      	cmp	ip, r7
24010380:	eba5 0101 	sub.w	r1, r5, r1
24010384:	bf28      	it	cs
24010386:	46bc      	movcs	ip, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
24010388:	2902      	cmp	r1, #2
2401038a:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2401038e:	d945      	bls.n	2401041c <f_read+0x1cc>
24010390:	f1bb 0f07 	cmp.w	fp, #7
24010394:	d942      	bls.n	2401041c <f_read+0x1cc>
24010396:	f02c 0e03 	bic.w	lr, ip, #3
2401039a:	461a      	mov	r2, r3
2401039c:	4629      	mov	r1, r5
2401039e:	449e      	add	lr, r3
			*d++ = *s++;
240103a0:	f852 0b04 	ldr.w	r0, [r2], #4
240103a4:	4572      	cmp	r2, lr
240103a6:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
240103aa:	d1f9      	bne.n	240103a0 <f_read+0x150>
240103ac:	f02c 0203 	bic.w	r2, ip, #3
240103b0:	4594      	cmp	ip, r2
240103b2:	eb05 0102 	add.w	r1, r5, r2
240103b6:	eb03 0002 	add.w	r0, r3, r2
240103ba:	d0b8      	beq.n	2401032e <f_read+0xde>
			*d++ = *s++;
240103bc:	5c9b      	ldrb	r3, [r3, r2]
240103be:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
240103c0:	ebbb 0202 	subs.w	r2, fp, r2
240103c4:	d0b3      	beq.n	2401032e <f_read+0xde>
			*d++ = *s++;
240103c6:	7843      	ldrb	r3, [r0, #1]
		} while (--cnt);
240103c8:	2a01      	cmp	r2, #1
			*d++ = *s++;
240103ca:	704b      	strb	r3, [r1, #1]
		} while (--cnt);
240103cc:	d0af      	beq.n	2401032e <f_read+0xde>
			*d++ = *s++;
240103ce:	7883      	ldrb	r3, [r0, #2]
240103d0:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
240103d2:	e7ac      	b.n	2401032e <f_read+0xde>
				if (fp->fptr == 0) {			/* On the top of the file? */
240103d4:	b9db      	cbnz	r3, 2401040e <f_read+0x1be>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
240103d6:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
240103d8:	2801      	cmp	r0, #1
240103da:	d909      	bls.n	240103f0 <f_read+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240103dc:	1c43      	adds	r3, r0, #1
240103de:	d00e      	beq.n	240103fe <f_read+0x1ae>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240103e0:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
240103e4:	61e0      	str	r0, [r4, #28]
	clst -= 2;
240103e6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
240103e8:	3b02      	subs	r3, #2
240103ea:	4298      	cmp	r0, r3
240103ec:	f4ff af7a 	bcc.w	240102e4 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
240103f0:	2302      	movs	r3, #2
240103f2:	4698      	mov	r8, r3
240103f4:	7563      	strb	r3, [r4, #21]
}
240103f6:	4640      	mov	r0, r8
240103f8:	b005      	add	sp, #20
240103fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
240103fe:	f8dd 8000 	ldr.w	r8, [sp]
24010402:	2301      	movs	r3, #1
}
24010404:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24010406:	7563      	strb	r3, [r4, #21]
}
24010408:	b005      	add	sp, #20
2401040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2401040e:	69e1      	ldr	r1, [r4, #28]
24010410:	6820      	ldr	r0, [r4, #0]
24010412:	9203      	str	r2, [sp, #12]
24010414:	f7fd ff50 	bl	2400e2b8 <get_fat.isra.0>
24010418:	9a03      	ldr	r2, [sp, #12]
2401041a:	e7dd      	b.n	240103d8 <f_read+0x188>
2401041c:	1e6a      	subs	r2, r5, #1
2401041e:	eb03 000c 	add.w	r0, r3, ip
			*d++ = *s++;
24010422:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
24010426:	4283      	cmp	r3, r0
			*d++ = *s++;
24010428:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
2401042c:	d1f9      	bne.n	24010422 <f_read+0x1d2>
2401042e:	e77e      	b.n	2401032e <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
24010430:	f04f 0807 	mov.w	r8, #7
24010434:	e720      	b.n	24010278 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010436:	2301      	movs	r3, #1
24010438:	4651      	mov	r1, sl
2401043a:	f899 0001 	ldrb.w	r0, [r9, #1]
2401043e:	f7fd fb4f 	bl	2400dae0 <disk_write>
24010442:	2800      	cmp	r0, #0
24010444:	d1db      	bne.n	240103fe <f_read+0x1ae>
					fp->flag &= (BYTE)~FA_DIRTY;
24010446:	7d23      	ldrb	r3, [r4, #20]
24010448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401044c:	7523      	strb	r3, [r4, #20]
2401044e:	e782      	b.n	24010356 <f_read+0x106>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
24010450:	6a22      	ldr	r2, [r4, #32]
24010452:	eba2 0b0b 	sub.w	fp, r2, fp
24010456:	45c3      	cmp	fp, r8
24010458:	f4bf af67 	bcs.w	2401032a <f_read+0xda>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2401045c:	eb05 224b 	add.w	r2, r5, fp, lsl #9
24010460:	9b01      	ldr	r3, [sp, #4]
24010462:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
24010464:	1ad0      	subs	r0, r2, r3
24010466:	2802      	cmp	r0, #2
24010468:	d908      	bls.n	2401047c <f_read+0x22c>
2401046a:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2401046e:	f851 3b04 	ldr.w	r3, [r1], #4
24010472:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
24010476:	4562      	cmp	r2, ip
24010478:	d1f9      	bne.n	2401046e <f_read+0x21e>
2401047a:	e756      	b.n	2401032a <f_read+0xda>
2401047c:	3a01      	subs	r2, #1
2401047e:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
24010482:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
24010486:	458c      	cmp	ip, r1
			*d++ = *s++;
24010488:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2401048c:	d1f9      	bne.n	24010482 <f_read+0x232>
2401048e:	e74c      	b.n	2401032a <f_read+0xda>

24010490 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
24010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24010494:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
24010496:	2300      	movs	r3, #0
{
24010498:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2401049a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401049c:	b150      	cbz	r0, 240104b4 <f_write+0x24>
2401049e:	6803      	ldr	r3, [r0, #0]
240104a0:	4604      	mov	r4, r0
240104a2:	b13b      	cbz	r3, 240104b4 <f_write+0x24>
240104a4:	4616      	mov	r6, r2
240104a6:	781a      	ldrb	r2, [r3, #0]
240104a8:	b122      	cbz	r2, 240104b4 <f_write+0x24>
240104aa:	460d      	mov	r5, r1
240104ac:	88da      	ldrh	r2, [r3, #6]
240104ae:	8881      	ldrh	r1, [r0, #4]
240104b0:	4291      	cmp	r1, r2
240104b2:	d005      	beq.n	240104c0 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
240104b4:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
240104b8:	4640      	mov	r0, r8
240104ba:	b005      	add	sp, #20
240104bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240104c0:	7858      	ldrb	r0, [r3, #1]
240104c2:	f7fd fae3 	bl	2400da8c <disk_status>
240104c6:	07c0      	lsls	r0, r0, #31
240104c8:	d4f4      	bmi.n	240104b4 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
240104ca:	f894 8015 	ldrb.w	r8, [r4, #21]
240104ce:	f1b8 0f00 	cmp.w	r8, #0
240104d2:	d1f1      	bne.n	240104b8 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
240104d4:	7d22      	ldrb	r2, [r4, #20]
240104d6:	0791      	lsls	r1, r2, #30
240104d8:	f140 80de 	bpl.w	24010698 <f_write+0x208>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
240104dc:	69a3      	ldr	r3, [r4, #24]
240104de:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
240104e0:	bf28      	it	cs
240104e2:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
240104e4:	2e00      	cmp	r6, #0
240104e6:	d064      	beq.n	240105b2 <f_write+0x122>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
240104e8:	46a2      	mov	sl, r4
240104ea:	f504 720b 	add.w	r2, r4, #556	; 0x22c
240104ee:	f85a 9b2c 	ldr.w	r9, [sl], #44
240104f2:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
240104f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
240104f8:	2a00      	cmp	r2, #0
240104fa:	d168      	bne.n	240105ce <f_write+0x13e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
240104fc:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
24010500:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
24010504:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
24010508:	d110      	bne.n	2401052c <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
2401050a:	2b00      	cmp	r3, #0
2401050c:	f040 80b2 	bne.w	24010674 <f_write+0x1e4>
					clst = fp->obj.sclust;	/* Follow from the origin */
24010510:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
24010512:	2800      	cmp	r0, #0
24010514:	f000 80c3 	beq.w	2401069e <f_write+0x20e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
24010518:	2801      	cmp	r0, #1
2401051a:	f000 8090 	beq.w	2401063e <f_write+0x1ae>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2401051e:	1c43      	adds	r3, r0, #1
24010520:	f000 80a1 	beq.w	24010666 <f_write+0x1d6>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
24010524:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
24010526:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
24010528:	b903      	cbnz	r3, 2401052c <f_write+0x9c>
2401052a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2401052c:	f994 3014 	ldrsb.w	r3, [r4, #20]
24010530:	2b00      	cmp	r3, #0
24010532:	f2c0 808b 	blt.w	2401064c <f_write+0x1bc>
	clst -= 2;
24010536:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
24010538:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2401053c:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2401053e:	3b02      	subs	r3, #2
24010540:	429a      	cmp	r2, r3
24010542:	d27c      	bcs.n	2401063e <f_write+0x1ae>
	return clst * fs->csize + fs->database;
24010544:	f8b9 100a 	ldrh.w	r1, [r9, #10]
24010548:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2401054c:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
24010550:	2a00      	cmp	r2, #0
24010552:	d074      	beq.n	2401063e <f_write+0x1ae>
			if (cc) {						/* Write maximum contiguous sectors directly */
24010554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
24010558:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2401055a:	d32e      	bcc.n	240105ba <f_write+0x12a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2401055c:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
24010560:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
24010562:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
24010564:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
24010568:	bf88      	it	hi
2401056a:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401056e:	4629      	mov	r1, r5
24010570:	e9cd 2302 	strd	r2, r3, [sp, #8]
24010574:	f7fd fab4 	bl	2400dae0 <disk_write>
24010578:	2800      	cmp	r0, #0
2401057a:	d174      	bne.n	24010666 <f_write+0x1d6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2401057c:	6a21      	ldr	r1, [r4, #32]
2401057e:	9a02      	ldr	r2, [sp, #8]
24010580:	9b03      	ldr	r3, [sp, #12]
24010582:	1a8a      	subs	r2, r1, r2
24010584:	429a      	cmp	r2, r3
24010586:	f0c0 809e 	bcc.w	240106c6 <f_write+0x236>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2401058a:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2401058e:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
24010592:	69a3      	ldr	r3, [r4, #24]
24010594:	4615      	mov	r5, r2
24010596:	68e2      	ldr	r2, [r4, #12]
24010598:	4463      	add	r3, ip
2401059a:	429a      	cmp	r2, r3
2401059c:	61a3      	str	r3, [r4, #24]
2401059e:	bf38      	it	cc
240105a0:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
240105a2:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
240105a6:	60e2      	str	r2, [r4, #12]
240105a8:	683a      	ldr	r2, [r7, #0]
240105aa:	4462      	add	r2, ip
240105ac:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
240105ae:	d1a1      	bne.n	240104f4 <f_write+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
240105b0:	7d22      	ldrb	r2, [r4, #20]
240105b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240105b6:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
240105b8:	e77e      	b.n	240104b8 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
240105ba:	6a23      	ldr	r3, [r4, #32]
240105bc:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
240105be:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
240105c0:	d002      	beq.n	240105c8 <f_write+0x138>
240105c2:	68e1      	ldr	r1, [r4, #12]
240105c4:	428b      	cmp	r3, r1
240105c6:	d372      	bcc.n	240106ae <f_write+0x21e>
			fp->sect = sect;
240105c8:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240105ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
240105ce:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
240105d2:	eb0a 0302 	add.w	r3, sl, r2
240105d6:	1c6a      	adds	r2, r5, #1
240105d8:	45b4      	cmp	ip, r6
240105da:	eba3 0202 	sub.w	r2, r3, r2
240105de:	bf28      	it	cs
240105e0:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
240105e2:	2a02      	cmp	r2, #2
240105e4:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
240105e8:	d94c      	bls.n	24010684 <f_write+0x1f4>
240105ea:	f1bb 0f07 	cmp.w	fp, #7
240105ee:	d949      	bls.n	24010684 <f_write+0x1f4>
240105f0:	f02c 0e03 	bic.w	lr, ip, #3
240105f4:	461a      	mov	r2, r3
240105f6:	4629      	mov	r1, r5
240105f8:	449e      	add	lr, r3
			*d++ = *s++;
240105fa:	f851 0b04 	ldr.w	r0, [r1], #4
240105fe:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
24010602:	4596      	cmp	lr, r2
24010604:	d1f9      	bne.n	240105fa <f_write+0x16a>
24010606:	f02c 0103 	bic.w	r1, ip, #3
2401060a:	458c      	cmp	ip, r1
2401060c:	eb03 0001 	add.w	r0, r3, r1
24010610:	eb05 0201 	add.w	r2, r5, r1
24010614:	d00e      	beq.n	24010634 <f_write+0x1a4>
			*d++ = *s++;
24010616:	f815 e001 	ldrb.w	lr, [r5, r1]
2401061a:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2401061e:	ebbb 0101 	subs.w	r1, fp, r1
24010622:	d005      	beq.n	24010630 <f_write+0x1a0>
			*d++ = *s++;
24010624:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
24010626:	2901      	cmp	r1, #1
			*d++ = *s++;
24010628:	7043      	strb	r3, [r0, #1]
2401062a:	bf1c      	itt	ne
2401062c:	7893      	ldrbne	r3, [r2, #2]
2401062e:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
24010630:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
24010634:	7d23      	ldrb	r3, [r4, #20]
24010636:	f063 037f 	orn	r3, r3, #127	; 0x7f
2401063a:	7523      	strb	r3, [r4, #20]
2401063c:	e7a9      	b.n	24010592 <f_write+0x102>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2401063e:	2302      	movs	r3, #2
24010640:	4698      	mov	r8, r3
24010642:	7563      	strb	r3, [r4, #21]
}
24010644:	4640      	mov	r0, r8
24010646:	b005      	add	sp, #20
24010648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2401064c:	2301      	movs	r3, #1
2401064e:	6a22      	ldr	r2, [r4, #32]
24010650:	4651      	mov	r1, sl
24010652:	f899 0001 	ldrb.w	r0, [r9, #1]
24010656:	f7fd fa43 	bl	2400dae0 <disk_write>
2401065a:	b920      	cbnz	r0, 24010666 <f_write+0x1d6>
				fp->flag &= (BYTE)~FA_DIRTY;
2401065c:	7d23      	ldrb	r3, [r4, #20]
2401065e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24010662:	7523      	strb	r3, [r4, #20]
24010664:	e767      	b.n	24010536 <f_write+0xa6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
24010666:	2301      	movs	r3, #1
24010668:	4698      	mov	r8, r3
2401066a:	7563      	strb	r3, [r4, #21]
}
2401066c:	4640      	mov	r0, r8
2401066e:	b005      	add	sp, #20
24010670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
24010674:	69e1      	ldr	r1, [r4, #28]
24010676:	4620      	mov	r0, r4
24010678:	f7fe f94a 	bl	2400e910 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2401067c:	2800      	cmp	r0, #0
2401067e:	f47f af4b 	bne.w	24010518 <f_write+0x88>
24010682:	e795      	b.n	240105b0 <f_write+0x120>
24010684:	3b01      	subs	r3, #1
24010686:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2401068a:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2401068e:	4295      	cmp	r5, r2
			*d++ = *s++;
24010690:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
24010694:	d1f9      	bne.n	2401068a <f_write+0x1fa>
24010696:	e7cd      	b.n	24010634 <f_write+0x1a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
24010698:	f04f 0807 	mov.w	r8, #7
2401069c:	e70c      	b.n	240104b8 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2401069e:	4659      	mov	r1, fp
240106a0:	4620      	mov	r0, r4
240106a2:	f7fe f935 	bl	2400e910 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
240106a6:	2800      	cmp	r0, #0
240106a8:	f47f af36 	bne.w	24010518 <f_write+0x88>
240106ac:	e780      	b.n	240105b0 <f_write+0x120>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
240106ae:	2301      	movs	r3, #1
240106b0:	4651      	mov	r1, sl
240106b2:	f899 0001 	ldrb.w	r0, [r9, #1]
240106b6:	9202      	str	r2, [sp, #8]
240106b8:	f7fd fa04 	bl	2400dac4 <disk_read>
				fp->fptr < fp->obj.objsize &&
240106bc:	2800      	cmp	r0, #0
240106be:	d1d2      	bne.n	24010666 <f_write+0x1d6>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
240106c0:	69a3      	ldr	r3, [r4, #24]
240106c2:	9a02      	ldr	r2, [sp, #8]
240106c4:	e780      	b.n	240105c8 <f_write+0x138>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
240106c6:	eb05 2042 	add.w	r0, r5, r2, lsl #9
240106ca:	1c42      	adds	r2, r0, #1
240106cc:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
240106ce:	ebaa 0202 	sub.w	r2, sl, r2
240106d2:	2a02      	cmp	r2, #2
240106d4:	d90d      	bls.n	240106f2 <f_write+0x262>
240106d6:	4652      	mov	r2, sl
240106d8:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
240106dc:	f851 0b04 	ldr.w	r0, [r1], #4
240106e0:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
240106e4:	4562      	cmp	r2, ip
240106e6:	d1f9      	bne.n	240106dc <f_write+0x24c>
					fp->flag &= (BYTE)~FA_DIRTY;
240106e8:	7d22      	ldrb	r2, [r4, #20]
240106ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
240106ee:	7522      	strb	r2, [r4, #20]
240106f0:	e74b      	b.n	2401058a <f_write+0xfa>
240106f2:	f104 022b 	add.w	r2, r4, #43	; 0x2b
240106f6:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
240106fa:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
240106fe:	458c      	cmp	ip, r1
			*d++ = *s++;
24010700:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
24010704:	d1f9      	bne.n	240106fa <f_write+0x26a>
24010706:	e7ef      	b.n	240106e8 <f_write+0x258>

24010708 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010708:	b158      	cbz	r0, 24010722 <f_close+0x1a>
2401070a:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2401070c:	b570      	push	{r4, r5, r6, lr}
2401070e:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010710:	b12b      	cbz	r3, 2401071e <f_close+0x16>
24010712:	781a      	ldrb	r2, [r3, #0]
24010714:	b11a      	cbz	r2, 2401071e <f_close+0x16>
24010716:	8881      	ldrh	r1, [r0, #4]
24010718:	88da      	ldrh	r2, [r3, #6]
2401071a:	4291      	cmp	r1, r2
2401071c:	d003      	beq.n	24010726 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2401071e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
24010720:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
24010722:	2009      	movs	r0, #9
}
24010724:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24010726:	7858      	ldrb	r0, [r3, #1]
24010728:	f7fd f9b0 	bl	2400da8c <disk_status>
2401072c:	07c1      	lsls	r1, r0, #31
2401072e:	d4f6      	bmi.n	2401071e <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
24010730:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
24010732:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
24010734:	065a      	lsls	r2, r3, #25
24010736:	d53c      	bpl.n	240107b2 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
24010738:	061b      	lsls	r3, r3, #24
2401073a:	d45d      	bmi.n	240107f8 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
2401073c:	f7fd f8bc 	bl	2400d8b8 <get_fattime>
				res = move_window(fs, fp->dir_sect);
24010740:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
24010742:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
24010744:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
24010746:	4299      	cmp	r1, r3
24010748:	d004      	beq.n	24010754 <f_close+0x4c>
2401074a:	4628      	mov	r0, r5
2401074c:	f7fd fb68 	bl	2400de20 <move_window.part.0>
				if (res == FR_OK) {
24010750:	2800      	cmp	r0, #0
24010752:	d1e5      	bne.n	24010720 <f_close+0x18>
					dir = fp->dir_ptr;
24010754:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
24010756:	7ad3      	ldrb	r3, [r2, #11]
24010758:	f043 0320 	orr.w	r3, r3, #32
2401075c:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2401075e:	68a3      	ldr	r3, [r4, #8]
24010760:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
24010762:	f3c3 2007 	ubfx	r0, r3, #8, #8
24010766:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
24010768:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
2401076a:	7809      	ldrb	r1, [r1, #0]
2401076c:	2903      	cmp	r1, #3
2401076e:	d103      	bne.n	24010778 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
24010770:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
24010772:	7513      	strb	r3, [r2, #20]
24010774:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
24010776:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
24010778:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
2401077a:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2401077c:	7596      	strb	r6, [r2, #22]
2401077e:	0a19      	lsrs	r1, r3, #8
24010780:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
24010782:	7751      	strb	r1, [r2, #29]
24010784:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
24010786:	0e1b      	lsrs	r3, r3, #24
24010788:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
2401078a:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
2401078c:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
2401078e:	75d3      	strb	r3, [r2, #23]
24010790:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
24010792:	0e36      	lsrs	r6, r6, #24
24010794:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
24010796:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
24010798:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
2401079a:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
2401079c:	2301      	movs	r3, #1
2401079e:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
240107a0:	f7fe f846 	bl	2400e830 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
240107a4:	7d23      	ldrb	r3, [r4, #20]
240107a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
240107aa:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
240107ac:	2800      	cmp	r0, #0
240107ae:	d1b7      	bne.n	24010720 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
240107b0:	6825      	ldr	r5, [r4, #0]
240107b2:	2d00      	cmp	r5, #0
240107b4:	d0b3      	beq.n	2401071e <f_close+0x16>
240107b6:	782b      	ldrb	r3, [r5, #0]
240107b8:	2b00      	cmp	r3, #0
240107ba:	d0b0      	beq.n	2401071e <f_close+0x16>
240107bc:	88a2      	ldrh	r2, [r4, #4]
240107be:	88eb      	ldrh	r3, [r5, #6]
240107c0:	429a      	cmp	r2, r3
240107c2:	d1ac      	bne.n	2401071e <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
240107c4:	7868      	ldrb	r0, [r5, #1]
240107c6:	f7fd f961 	bl	2400da8c <disk_status>
240107ca:	f010 0001 	ands.w	r0, r0, #1
240107ce:	d1a6      	bne.n	2401071e <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
240107d0:	6923      	ldr	r3, [r4, #16]
240107d2:	3b01      	subs	r3, #1
240107d4:	2b01      	cmp	r3, #1
240107d6:	d81c      	bhi.n	24010812 <f_close+0x10a>
		n = Files[i].ctr;
240107d8:	4912      	ldr	r1, [pc, #72]	; (24010824 <f_close+0x11c>)
240107da:	011d      	lsls	r5, r3, #4
240107dc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
240107e0:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
240107e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240107e6:	d016      	beq.n	24010816 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
240107e8:	b1b2      	cbz	r2, 24010818 <f_close+0x110>
240107ea:	3a01      	subs	r2, #1
240107ec:	b292      	uxth	r2, r2
		Files[i].ctr = n;
240107ee:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
240107f0:	b192      	cbz	r2, 24010818 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
240107f2:	2300      	movs	r3, #0
240107f4:	6023      	str	r3, [r4, #0]
}
240107f6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
240107f8:	2301      	movs	r3, #1
240107fa:	6a22      	ldr	r2, [r4, #32]
240107fc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
24010800:	7868      	ldrb	r0, [r5, #1]
24010802:	f7fd f96d 	bl	2400dae0 <disk_write>
24010806:	b950      	cbnz	r0, 2401081e <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
24010808:	7d23      	ldrb	r3, [r4, #20]
2401080a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401080e:	7523      	strb	r3, [r4, #20]
24010810:	e794      	b.n	2401073c <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
24010812:	2002      	movs	r0, #2
}
24010814:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
24010816:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
24010818:	2300      	movs	r3, #0
2401081a:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
2401081c:	e7e9      	b.n	240107f2 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2401081e:	2001      	movs	r0, #1
}
24010820:	bd70      	pop	{r4, r5, r6, pc}
24010822:	bf00      	nop
24010824:	2001f5f4 	.word	0x2001f5f4

24010828 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
24010828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2401082a:	b150      	cbz	r0, 24010842 <f_findnext+0x1a>
2401082c:	4605      	mov	r5, r0
2401082e:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
24010830:	4c39      	ldr	r4, [pc, #228]	; (24010918 <f_findnext+0xf0>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
24010832:	682b      	ldr	r3, [r5, #0]
24010834:	b12b      	cbz	r3, 24010842 <f_findnext+0x1a>
24010836:	781a      	ldrb	r2, [r3, #0]
24010838:	b11a      	cbz	r2, 24010842 <f_findnext+0x1a>
2401083a:	88a9      	ldrh	r1, [r5, #4]
2401083c:	88da      	ldrh	r2, [r3, #6]
2401083e:	4291      	cmp	r1, r2
24010840:	d002      	beq.n	24010848 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
24010842:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
24010844:	4638      	mov	r0, r7
24010846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
24010848:	7858      	ldrb	r0, [r3, #1]
2401084a:	f7fd f91f 	bl	2400da8c <disk_status>
2401084e:	07c3      	lsls	r3, r0, #31
24010850:	d4f7      	bmi.n	24010842 <f_findnext+0x1a>
		if (!fno) {
24010852:	2e00      	cmp	r6, #0
24010854:	d058      	beq.n	24010908 <f_findnext+0xe0>
			res = dir_read(dp, 0);			/* Read an item */
24010856:	4628      	mov	r0, r5
24010858:	f7fd fdd2 	bl	2400e400 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2401085c:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
24010860:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
24010862:	d1ef      	bne.n	24010844 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
24010864:	4631      	mov	r1, r6
24010866:	4628      	mov	r0, r5
24010868:	f7fd fa1c 	bl	2400dca4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2401086c:	4628      	mov	r0, r5
2401086e:	f7fd fd83 	bl	2400e378 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
24010872:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
24010876:	d14d      	bne.n	24010914 <f_findnext+0xec>
24010878:	7db3      	ldrb	r3, [r6, #22]
2401087a:	2b00      	cmp	r3, #0
2401087c:	d0e2      	beq.n	24010844 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2401087e:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
24010882:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
24010886:	e00f      	b.n	240108a8 <f_findnext+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010888:	3a20      	subs	r2, #32
2401088a:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2401088c:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010890:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24010894:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010896:	f1be 0f19 	cmp.w	lr, #25
2401089a:	d817      	bhi.n	240108cc <f_findnext+0xa4>
2401089c:	3b20      	subs	r3, #32
2401089e:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
240108a0:	4293      	cmp	r3, r2
240108a2:	d1c6      	bne.n	24010832 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
240108a4:	2b00      	cmp	r3, #0
240108a6:	d0cd      	beq.n	24010844 <f_findnext+0x1c>
240108a8:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
240108aa:	f81c 3b01 	ldrb.w	r3, [ip], #1
240108ae:	2b3f      	cmp	r3, #63	; 0x3f
240108b0:	d012      	beq.n	240108d8 <f_findnext+0xb0>
240108b2:	2b2a      	cmp	r3, #42	; 0x2a
240108b4:	d010      	beq.n	240108d8 <f_findnext+0xb0>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240108b6:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
240108ba:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
240108bc:	2819      	cmp	r0, #25
240108be:	d9e3      	bls.n	24010888 <f_findnext+0x60>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
240108c0:	2a7f      	cmp	r2, #127	; 0x7f
240108c2:	d9e3      	bls.n	2401088c <f_findnext+0x64>
240108c4:	4423      	add	r3, r4
240108c6:	f813 2c80 	ldrb.w	r2, [r3, #-128]
240108ca:	e7df      	b.n	2401088c <f_findnext+0x64>
240108cc:	2b7f      	cmp	r3, #127	; 0x7f
240108ce:	d9e7      	bls.n	240108a0 <f_findnext+0x78>
240108d0:	4420      	add	r0, r4
240108d2:	f810 3c80 	ldrb.w	r3, [r0, #-128]
240108d6:	e7e3      	b.n	240108a0 <f_findnext+0x78>
240108d8:	4694      	mov	ip, r2
				nm = nx = 0;
240108da:	2300      	movs	r3, #0
240108dc:	f81c eb01 	ldrb.w	lr, [ip], #1
240108e0:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
240108e2:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
240108e6:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
240108e8:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
240108ec:	bf0c      	ite	eq
240108ee:	3201      	addeq	r2, #1
240108f0:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
240108f2:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
240108f6:	d0f4      	beq.n	240108e2 <f_findnext+0xba>
240108f8:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
240108fc:	d0f1      	beq.n	240108e2 <f_findnext+0xba>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
240108fe:	f7fd f95b 	bl	2400dbb8 <pattern_matching>
24010902:	2800      	cmp	r0, #0
24010904:	d095      	beq.n	24010832 <f_findnext+0xa>
24010906:	e79d      	b.n	24010844 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24010908:	4631      	mov	r1, r6
2401090a:	4628      	mov	r0, r5
}
2401090c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24010910:	f7fe b8ce 	b.w	2400eab0 <dir_sdi>
24010914:	4607      	mov	r7, r0
24010916:	e795      	b.n	24010844 <f_findnext+0x1c>
24010918:	2401aec0 	.word	0x2401aec0

2401091c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2401091c:	b570      	push	{r4, r5, r6, lr}
2401091e:	b082      	sub	sp, #8
24010920:	4615      	mov	r5, r2
24010922:	4604      	mov	r4, r0
24010924:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
24010926:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
24010928:	2200      	movs	r2, #0
2401092a:	a901      	add	r1, sp, #4
2401092c:	4668      	mov	r0, sp
2401092e:	9500      	str	r5, [sp, #0]
24010930:	f7fd fab0 	bl	2400de94 <find_volume>
	if (res == FR_OK) {
24010934:	b118      	cbz	r0, 2401093e <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010936:	2300      	movs	r3, #0
24010938:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2401093a:	b002      	add	sp, #8
2401093c:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
2401093e:	e9dd 1300 	ldrd	r1, r3, [sp]
24010942:	4620      	mov	r0, r4
		obj->fs = fs;
24010944:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
24010946:	f7fe fb13 	bl	2400ef70 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2401094a:	bb08      	cbnz	r0, 24010990 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2401094c:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
24010950:	2b00      	cmp	r3, #0
24010952:	db25      	blt.n	240109a0 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
24010954:	79a3      	ldrb	r3, [r4, #6]
24010956:	06db      	lsls	r3, r3, #27
24010958:	d520      	bpl.n	2401099c <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2401095a:	9b01      	ldr	r3, [sp, #4]
2401095c:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
2401095e:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
24010960:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
24010962:	2803      	cmp	r0, #3
24010964:	d102      	bne.n	2401096c <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
24010966:	8a89      	ldrh	r1, [r1, #20]
24010968:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2401096c:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
2401096e:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
24010970:	2100      	movs	r1, #0
24010972:	4620      	mov	r0, r4
				obj->id = fs->id;
24010974:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
24010976:	f7fe f89b 	bl	2400eab0 <dir_sdi>
				if (res == FR_OK) {
2401097a:	b948      	cbnz	r0, 24010990 <f_findfirst+0x74>
					if (obj->sclust) {
2401097c:	68a3      	ldr	r3, [r4, #8]
2401097e:	b98b      	cbnz	r3, 240109a4 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
24010980:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
24010982:	4631      	mov	r1, r6
24010984:	4620      	mov	r0, r4
}
24010986:	b002      	add	sp, #8
24010988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2401098c:	f7ff bf4c 	b.w	24010828 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
24010990:	2804      	cmp	r0, #4
24010992:	d1d0      	bne.n	24010936 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010994:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
24010996:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010998:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2401099a:	e7ce      	b.n	2401093a <f_findfirst+0x1e>
					res = FR_NO_PATH;
2401099c:	2005      	movs	r0, #5
2401099e:	e7ca      	b.n	24010936 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240109a0:	9b01      	ldr	r3, [sp, #4]
240109a2:	e7e4      	b.n	2401096e <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
240109a4:	4601      	mov	r1, r0
240109a6:	4620      	mov	r0, r4
240109a8:	f7fd f8b4 	bl	2400db14 <inc_lock>
240109ac:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
240109ae:	2800      	cmp	r0, #0
240109b0:	d1e7      	bne.n	24010982 <f_findfirst+0x66>
240109b2:	2012      	movs	r0, #18
240109b4:	e7bf      	b.n	24010936 <f_findfirst+0x1a>
240109b6:	bf00      	nop

240109b8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
240109b8:	4b10      	ldr	r3, [pc, #64]	; (240109fc <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
240109ba:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
240109bc:	7a5c      	ldrb	r4, [r3, #9]
240109be:	b9cc      	cbnz	r4, 240109f4 <FATFS_LinkDriver+0x3c>
240109c0:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
240109c2:	f004 00ff 	and.w	r0, r4, #255	; 0xff
240109c6:	7a5c      	ldrb	r4, [r3, #9]
240109c8:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
240109ca:	7a5c      	ldrb	r4, [r3, #9]
240109cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
240109d0:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
240109d2:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
240109d4:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
240109d6:	441c      	add	r4, r3
240109d8:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
240109da:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
240109dc:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
240109de:	b2e4      	uxtb	r4, r4
240109e0:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
240109e2:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
240109e4:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
240109e6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
240109e8:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
240109ea:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
240109ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
240109f0:	708b      	strb	r3, [r1, #2]
}
240109f2:	4770      	bx	lr
  uint8_t ret = 1;
240109f4:	2001      	movs	r0, #1
}
240109f6:	f85d 4b04 	ldr.w	r4, [sp], #4
240109fa:	4770      	bx	lr
240109fc:	2001f818 	.word	0x2001f818

24010a00 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
24010a00:	287f      	cmp	r0, #127	; 0x7f
24010a02:	d912      	bls.n	24010a2a <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
24010a04:	b971      	cbnz	r1, 24010a24 <ff_convert+0x24>
24010a06:	4b0c      	ldr	r3, [pc, #48]	; (24010a38 <ff_convert+0x38>)
24010a08:	e001      	b.n	24010a0e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
24010a0a:	2980      	cmp	r1, #128	; 0x80
24010a0c:	d00c      	beq.n	24010a28 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
24010a0e:	f833 2b02 	ldrh.w	r2, [r3], #2
24010a12:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
24010a16:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
24010a18:	4282      	cmp	r2, r0
24010a1a:	d1f6      	bne.n	24010a0a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
24010a1c:	f10c 0080 	add.w	r0, ip, #128	; 0x80
24010a20:	b280      	uxth	r0, r0
24010a22:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24010a24:	28ff      	cmp	r0, #255	; 0xff
24010a26:	d901      	bls.n	24010a2c <ff_convert+0x2c>
24010a28:	2000      	movs	r0, #0
		}
	}

	return c;
}
24010a2a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24010a2c:	4b02      	ldr	r3, [pc, #8]	; (24010a38 <ff_convert+0x38>)
24010a2e:	3880      	subs	r0, #128	; 0x80
24010a30:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
24010a34:	4770      	bx	lr
24010a36:	bf00      	nop
24010a38:	2401af50 	.word	0x2401af50

24010a3c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
24010a3c:	4b22      	ldr	r3, [pc, #136]	; (24010ac8 <ff_wtoupper+0x8c>)
24010a3e:	4a23      	ldr	r2, [pc, #140]	; (24010acc <ff_wtoupper+0x90>)
24010a40:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24010a44:	bf28      	it	cs
24010a46:	4613      	movcs	r3, r2
{
24010a48:	b510      	push	{r4, lr}
24010a4a:	3304      	adds	r3, #4
24010a4c:	e001      	b.n	24010a52 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
24010a4e:	3304      	adds	r3, #4
24010a50:	b1da      	cbz	r2, 24010a8a <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
24010a52:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
24010a56:	461c      	mov	r4, r3
24010a58:	b1b1      	cbz	r1, 24010a88 <ff_wtoupper+0x4c>
24010a5a:	4288      	cmp	r0, r1
24010a5c:	d314      	bcc.n	24010a88 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
24010a5e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
24010a62:	fa5f fc82 	uxtb.w	ip, r2
24010a66:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
24010a68:	eb0c 0e01 	add.w	lr, ip, r1
24010a6c:	4570      	cmp	r0, lr
24010a6e:	daee      	bge.n	24010a4e <ff_wtoupper+0x12>
			switch (cmd) {
24010a70:	2a08      	cmp	r2, #8
24010a72:	d809      	bhi.n	24010a88 <ff_wtoupper+0x4c>
24010a74:	e8df f002 	tbb	[pc, r2]
24010a78:	19161005 	.word	0x19161005
24010a7c:	25221f1c 	.word	0x25221f1c
24010a80:	0c          	.byte	0x0c
24010a81:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
24010a82:	1a41      	subs	r1, r0, r1
24010a84:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
24010a88:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
24010a8a:	eb04 034c 	add.w	r3, r4, ip, lsl #1
24010a8e:	e7dc      	b.n	24010a4a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
24010a90:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
24010a94:	b280      	uxth	r0, r0
}
24010a96:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
24010a98:	1a43      	subs	r3, r0, r1
24010a9a:	f003 0301 	and.w	r3, r3, #1
24010a9e:	1ac0      	subs	r0, r0, r3
24010aa0:	b280      	uxth	r0, r0
}
24010aa2:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
24010aa4:	3810      	subs	r0, #16
24010aa6:	b280      	uxth	r0, r0
}
24010aa8:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
24010aaa:	3820      	subs	r0, #32
24010aac:	b280      	uxth	r0, r0
}
24010aae:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24010ab0:	3830      	subs	r0, #48	; 0x30
24010ab2:	b280      	uxth	r0, r0
}
24010ab4:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
24010ab6:	381a      	subs	r0, #26
24010ab8:	b280      	uxth	r0, r0
}
24010aba:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
24010abc:	3008      	adds	r0, #8
24010abe:	b280      	uxth	r0, r0
}
24010ac0:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24010ac2:	3850      	subs	r0, #80	; 0x50
24010ac4:	b280      	uxth	r0, r0
}
24010ac6:	bd10      	pop	{r4, pc}
24010ac8:	2401b050 	.word	0x2401b050
24010acc:	2401b244 	.word	0x2401b244

24010ad0 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
24010ad0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24010ad2:	680d      	ldr	r5, [r1, #0]
{
24010ad4:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010ad6:	2010      	movs	r0, #16
24010ad8:	4629      	mov	r1, r5
{
24010ada:	ed2d 8b02 	vpush	{d8}
24010ade:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010ae2:	f002 ffcf 	bl	24013a84 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24010ae6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010aea:	6020      	str	r0, [r4, #0]
    p->curr=0.0f;
24010aec:	2300      	movs	r3, #0
    p->mempool = m;
24010aee:	6005      	str	r5, [r0, #0]
    p->factor=factor;
24010af0:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
24010af4:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
24010af8:	60c3      	str	r3, [r0, #12]
}
24010afa:	ecbd 8b02 	vpop	{d8}
    p->oneminusfactor=1.0f-factor;
24010afe:	edc0 7a02 	vstr	s15, [r0, #8]
}
24010b02:	bd38      	pop	{r3, r4, r5, pc}

24010b04 <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
24010b04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010b08:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24010b24 <tPowerFollower_setFactor+0x20>
24010b0c:	6803      	ldr	r3, [r0, #0]
24010b0e:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
24010b12:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24010b16:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
24010b1a:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
24010b1e:	edc3 7a02 	vstr	s15, [r3, #8]
}
24010b22:	4770      	bx	lr
24010b24:	00000000 	.word	0x00000000

24010b28 <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
24010b28:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
24010b2a:	ee60 7a00 	vmul.f32	s15, s0, s0
24010b2e:	edd3 6a03 	vldr	s13, [r3, #12]
24010b32:	ed93 0a02 	vldr	s0, [r3, #8]
24010b36:	ed93 7a01 	vldr	s14, [r3, #4]
24010b3a:	ee20 0a26 	vmul.f32	s0, s0, s13
24010b3e:	eea7 0a27 	vfma.f32	s0, s14, s15
24010b42:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
24010b46:	4770      	bx	lr

24010b48 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
24010b48:	b570      	push	{r4, r5, r6, lr}
24010b4a:	460d      	mov	r5, r1
    _tMempool* m = *mp;
24010b4c:	6811      	ldr	r1, [r2, #0]
{
24010b4e:	4606      	mov	r6, r0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010b50:	202c      	movs	r0, #44	; 0x2c
{
24010b52:	ed2d 8b02 	vpush	{d8}
24010b56:	b082      	sub	sp, #8
24010b58:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010b5c:	9101      	str	r1, [sp, #4]
24010b5e:	f002 ff91 	bl	24013a84 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24010b62:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
24010b66:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010b68:	6030      	str	r0, [r6, #0]
24010b6a:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24010b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
24010b70:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24010b72:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24010b74:	eef4 7ac8 	vcmpe.f32	s15, s16
24010b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b7c:	d550      	bpl.n	24010c20 <tLinearDelay_initToPool+0xd8>
24010b7e:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010b82:	00a8      	lsls	r0, r5, #2
24010b84:	f002 ff7e 	bl	24013a84 <mpool_alloc>
    return d->lastOut;
}

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;
24010b88:	6835      	ldr	r5, [r6, #0]
    d->gain = 1.0f;
24010b8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->lastIn = 0.0f;
24010b8e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 24010c34 <tLinearDelay_initToPool+0xec>

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010b92:	ed95 1a07 	vldr	s2, [r5, #28]
    d->inPoint = 0;
24010b96:	2300      	movs	r3, #0
    d->gain = 1.0f;
24010b98:	6062      	str	r2, [r4, #4]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010b9a:	eeb8 1a41 	vcvt.f32.u32	s2, s2
24010b9e:	edd4 0a08 	vldr	s1, [r4, #32]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010ba2:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
24010ba4:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
24010ba8:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = 0;
24010bac:	e9c4 3305 	strd	r3, r3, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010bb0:	f023 f8d6 	bl	24033d60 <__LEAF_clip_veneer>

    float outPointer = d->inPoint - d->delay;
24010bb4:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010bb8:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
24010bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
24010bc0:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
24010bc2:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24010bc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010bce:	d50a      	bpl.n	24010be6 <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
24010bd0:	ee07 2a90 	vmov	s15, r2
24010bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010bd8:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24010bdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010be4:	d4f8      	bmi.n	24010bd8 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
24010be6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24010bea:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
24010bee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010bf2:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010bf6:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
24010bf8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
24010bfc:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010bfe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010c02:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24010c06:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
24010c0a:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24010c0e:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010c12:	d101      	bne.n	24010c18 <tLinearDelay_initToPool+0xd0>
24010c14:	2300      	movs	r3, #0
24010c16:	61ab      	str	r3, [r5, #24]
}
24010c18:	b002      	add	sp, #8
24010c1a:	ecbd 8b02 	vpop	{d8}
24010c1e:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
24010c20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24010c24:	2300      	movs	r3, #0
24010c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010c2a:	bf4c      	ite	mi
24010c2c:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
24010c2e:	ed80 8a08 	vstrpl	s16, [r0, #32]
24010c32:	e7a6      	b.n	24010b82 <tLinearDelay_initToPool+0x3a>
24010c34:	00000000 	.word	0x00000000

24010c38 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
24010c38:	6803      	ldr	r3, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010c3a:	69da      	ldr	r2, [r3, #28]
24010c3c:	b122      	cbz	r2, 24010c48 <tLinearDelay_clear+0x10>
        d->buff[i] = 0;
24010c3e:	0092      	lsls	r2, r2, #2
24010c40:	2100      	movs	r1, #0
24010c42:	6898      	ldr	r0, [r3, #8]
24010c44:	f007 be5c 	b.w	24018900 <memset>
}
24010c48:	4770      	bx	lr
24010c4a:	bf00      	nop

24010c4c <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
24010c4c:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24010c4e:	6958      	ldr	r0, [r3, #20]
24010c50:	edd3 7a01 	vldr	s15, [r3, #4]
24010c54:	689a      	ldr	r2, [r3, #8]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010c56:	1c41      	adds	r1, r0, #1
    d->buff[d->inPoint] = input * d->gain;
24010c58:	ee27 0a80 	vmul.f32	s0, s15, s0
24010c5c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
{
24010c60:	b410      	push	{r4}
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010c62:	69dc      	ldr	r4, [r3, #28]
    d->buff[d->inPoint] = input * d->gain;
24010c64:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010c68:	42a1      	cmp	r1, r4
24010c6a:	6159      	str	r1, [r3, #20]
24010c6c:	d101      	bne.n	24010c72 <tLinearDelay_tickIn+0x26>
24010c6e:	2200      	movs	r2, #0
24010c70:	615a      	str	r2, [r3, #20]
}
24010c72:	f85d 4b04 	ldr.w	r4, [sp], #4
24010c76:	4770      	bx	lr

24010c78 <tLinearDelay_tickOut>:
    _tLinearDelay* d = *dl;
24010c78:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24010c7a:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010c7c:	6899      	ldr	r1, [r3, #8]
24010c7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24010c82:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
24010c86:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
24010c88:	ed90 0a00 	vldr	s0, [r0]
{
24010c8c:	b410      	push	{r4}
    if ((idx + 1) < d->maxDelay)
24010c8e:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010c90:	ee20 0a27 	vmul.f32	s0, s0, s15
    if ((idx + 1) < d->maxDelay)
24010c94:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
24010c96:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24010c9a:	d20b      	bcs.n	24010cb4 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24010c9c:	ed90 7a01 	vldr	s14, [r0, #4]
24010ca0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
}
24010ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
        d->lastOut += d->buff[idx+1] * d->alpha;
24010ca8:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010cac:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24010cae:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010cb2:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24010cb4:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010cb8:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
24010cba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
}
24010cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
        d->lastOut += d->buff[0] * d->alpha;
24010cc2:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010cc6:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24010cc8:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010ccc:	4770      	bx	lr
24010cce:	bf00      	nop

24010cd0 <tLinearDelay_setDelay>:
{
24010cd0:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24010cd2:	6804      	ldr	r4, [r0, #0]
{
24010cd4:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010cd8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 24010d50 <tLinearDelay_setDelay+0x80>
24010cdc:	edd4 7a07 	vldr	s15, [r4, #28]
24010ce0:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010ce4:	f023 f83c 	bl	24033d60 <__LEAF_clip_veneer>
    float outPointer = d->inPoint - d->delay;
24010ce8:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010cec:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
24010cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
24010cf4:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
24010cf6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24010cfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d02:	d50a      	bpl.n	24010d1a <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
24010d04:	ee07 2a90 	vmov	s15, r2
24010d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010d0c:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24010d10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d18:	d4f8      	bmi.n	24010d0c <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
24010d1a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24010d1e:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
24010d22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010d26:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010d2a:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
24010d2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
24010d30:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010d32:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010d36:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24010d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
24010d3e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24010d42:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010d46:	d000      	beq.n	24010d4a <tLinearDelay_setDelay+0x7a>
}
24010d48:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010d4a:	2300      	movs	r3, #0
24010d4c:	61a3      	str	r3, [r4, #24]
}
24010d4e:	bd10      	pop	{r4, pc}
24010d50:	00000000 	.word	0x00000000

24010d54 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
24010d54:	b570      	push	{r4, r5, r6, lr}
24010d56:	460d      	mov	r5, r1
    _tMempool* m = *mp;
24010d58:	6811      	ldr	r1, [r2, #0]
{
24010d5a:	4606      	mov	r6, r0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24010d5c:	2030      	movs	r0, #48	; 0x30
{
24010d5e:	ed2d 8b02 	vpush	{d8}
24010d62:	b082      	sub	sp, #8
24010d64:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24010d68:	9101      	str	r1, [sp, #4]
24010d6a:	f002 fe8b 	bl	24013a84 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24010d6e:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
24010d72:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24010d74:	6030      	str	r0, [r6, #0]
24010d76:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24010d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
24010d7c:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24010d7e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24010d80:	eef4 7ac8 	vcmpe.f32	s15, s16
24010d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d88:	d558      	bpl.n	24010e3c <tHermiteDelay_initToPool+0xe8>
24010d8a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24010d8e:	2d00      	cmp	r5, #0
24010d90:	d14f      	bne.n	24010e32 <tHermiteDelay_initToPool+0xde>
24010d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
24010d96:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
24010d9a:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
24010d9e:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
24010da2:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
24010da6:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
24010daa:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
24010dac:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010dae:	00a8      	lsls	r0, r5, #2
24010db0:	60a2      	str	r2, [r4, #8]
24010db2:	f002 fe67 	bl	24013a84 <mpool_alloc>
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
24010db6:	6833      	ldr	r3, [r6, #0]
    d->inPoint = 0;
24010db8:	2100      	movs	r1, #0
    tHermiteDelay_setDelay(dl, d->delay);
24010dba:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->lastIn = 0.0f;
24010dbe:	2200      	movs	r2, #0
    d->gain = 1.0f;
24010dc0:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    d->inPoint = 0;
24010dc4:	6161      	str	r1, [r4, #20]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
24010dc6:	edd3 7a05 	vldr	s15, [r3, #20]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010dca:	6060      	str	r0, [r4, #4]
    float outPointer = d->inPoint - d->delay;
24010dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->outPoint = 0;
24010dd0:	61a1      	str	r1, [r4, #24]
    d->gain = 1.0f;
24010dd2:	6225      	str	r5, [r4, #32]
    d->lastIn = 0.0f;
24010dd4:	6122      	str	r2, [r4, #16]
    float outPointer = d->inPoint - d->delay;
24010dd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    d->lastOut = 0.0f;
24010dda:	60e2      	str	r2, [r4, #12]
    d->delay = delay; // not safe but faster
24010ddc:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    while ( outPointer < 0 )
24010de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010de8:	d50a      	bpl.n	24010e00 <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
24010dea:	ed93 7a07 	vldr	s14, [r3, #28]
24010dee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010df2:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
24010df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010dfe:	d4f8      	bmi.n	24010df2 <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
24010e00:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
24010e04:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
24010e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010e0a:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
24010e0e:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
24010e12:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
24010e16:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
24010e18:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24010e1c:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
24010e20:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010e22:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
24010e26:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
24010e2a:	b002      	add	sp, #8
24010e2c:	ecbd 8b02 	vpop	{d8}
24010e30:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24010e32:	1e6b      	subs	r3, r5, #1
24010e34:	422b      	tst	r3, r5
24010e36:	461a      	mov	r2, r3
24010e38:	d1ad      	bne.n	24010d96 <tHermiteDelay_initToPool+0x42>
24010e3a:	e7b8      	b.n	24010dae <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
24010e3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24010e40:	2300      	movs	r3, #0
24010e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e46:	bf4c      	ite	mi
24010e48:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
24010e4a:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
24010e4e:	e79e      	b.n	24010d8e <tHermiteDelay_initToPool+0x3a>

24010e50 <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
24010e50:	6803      	ldr	r3, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010e52:	69da      	ldr	r2, [r3, #28]
24010e54:	b122      	cbz	r2, 24010e60 <tHermiteDelay_clear+0x10>
        d->buff[i] = 0;
24010e56:	0092      	lsls	r2, r2, #2
24010e58:	2100      	movs	r1, #0
24010e5a:	6858      	ldr	r0, [r3, #4]
24010e5c:	f007 bd50 	b.w	24018900 <memset>
}
24010e60:	4770      	bx	lr
24010e62:	bf00      	nop

24010e64 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
24010e64:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
24010e66:	6958      	ldr	r0, [r3, #20]
24010e68:	6859      	ldr	r1, [r3, #4]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010e6a:	1c42      	adds	r2, r0, #1
    d->buff[d->inPoint] = input;
24010e6c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
{
24010e70:	b410      	push	{r4}
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010e72:	689c      	ldr	r4, [r3, #8]
    d->buff[d->inPoint] = input;
24010e74:	ed81 0a00 	vstr	s0, [r1]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010e78:	4022      	ands	r2, r4
}
24010e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010e7e:	615a      	str	r2, [r3, #20]
}
24010e80:	4770      	bx	lr
24010e82:	bf00      	nop

24010e84 <tHermiteDelay_tickOut>:
{
24010e84:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
24010e86:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24010e88:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010e8a:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
24010e8e:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010e90:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
24010e94:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010e9a:	edd3 1a00 	vldr	s3, [r3]
24010e9e:	69e3      	ldr	r3, [r4, #28]
24010ea0:	440b      	add	r3, r1
24010ea2:	3b01      	subs	r3, #1
24010ea4:	4003      	ands	r3, r0
24010ea6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010eaa:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
24010eae:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010eb0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
24010eb4:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010eb6:	edd1 0a00 	vldr	s1, [r1]
24010eba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010ebe:	ed92 1a00 	vldr	s2, [r2]
24010ec2:	f002 fcdb 	bl	2401387c <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010ec6:	69a3      	ldr	r3, [r4, #24]
24010ec8:	68a2      	ldr	r2, [r4, #8]
24010eca:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010ecc:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010ed0:	4013      	ands	r3, r2
24010ed2:	61a3      	str	r3, [r4, #24]
}
24010ed4:	bd10      	pop	{r4, pc}
24010ed6:	bf00      	nop

24010ed8 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
24010ed8:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
24010eda:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
24010ede:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
24010ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010ee6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24010eea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ef2:	d50a      	bpl.n	24010f0a <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
24010ef4:	edd3 7a07 	vldr	s15, [r3, #28]
24010ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010efc:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24010f00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010f08:	d4f8      	bmi.n	24010efc <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
24010f0a:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
24010f0e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
24010f10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010f14:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
24010f18:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
24010f1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
24010f20:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
24010f22:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24010f26:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
24010f2a:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010f2c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
24010f30:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24010f34:	4770      	bx	lr
24010f36:	bf00      	nop

24010f38 <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
24010f38:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
24010f3a:	43c9      	mvns	r1, r1
24010f3c:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
24010f3e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
24010f42:	4401      	add	r1, r0
24010f44:	4011      	ands	r1, r2
    return d->buff[tap];
24010f46:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
24010f4a:	ed91 0a00 	vldr	s0, [r1]
24010f4e:	4770      	bx	lr

24010f50 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
24010f50:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24010f52:	43c9      	mvns	r1, r1
24010f54:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
24010f56:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
24010f5a:	4401      	add	r1, r0
24010f5c:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
24010f5e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
24010f62:	edd1 7a00 	vldr	s15, [r1]
24010f66:	ee30 0a27 	vadd.f32	s0, s0, s15
24010f6a:	ed81 0a00 	vstr	s0, [r1]
}
24010f6e:	4770      	bx	lr

24010f70 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
24010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24010f74:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
24010f76:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
24010f78:	6999      	ldr	r1, [r3, #24]
{
24010f7a:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24010f7c:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
24010f80:	bf0c      	ite	eq
24010f82:	2700      	moveq	r7, #0
24010f84:	2706      	movne	r7, #6
{
24010f86:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24010f88:	2b1e      	cmp	r3, #30
24010f8a:	d93a      	bls.n	24011002 <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
24010f8c:	2d40      	cmp	r5, #64	; 0x40
24010f8e:	d135      	bne.n	24010ffc <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
24010f90:	2028      	movs	r0, #40	; 0x28
24010f92:	9101      	str	r1, [sp, #4]
24010f94:	f002 fd76 	bl	24013a84 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24010f98:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
24010f9c:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
24010f9e:	4604      	mov	r4, r0
24010fa0:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24010fa4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
24010fa8:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
24010faa:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
24010fac:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
24010fae:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24010fb2:	f008 f863 	bl	2401907c <log2f>
24010fb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010fba:	4a16      	ldr	r2, [pc, #88]	; (24011014 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010fbc:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24010fbe:	ee17 3a90 	vmov	r3, s15
24010fc2:	3b01      	subs	r3, #1
24010fc4:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010fc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010fca:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
24010fce:	4a12      	ldr	r2, [pc, #72]	; (24011018 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
24010fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010fd8:	ee17 0a90 	vmov	r0, s15
24010fdc:	edc4 7a08 	vstr	s15, [r4, #32]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
24010fe0:	6163      	str	r3, [r4, #20]
        os->phaseLength = os->numTaps / os->ratio;
24010fe2:	fb90 f5f5 	sdiv	r5, r0, r5
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010fe6:	00c0      	lsls	r0, r0, #3
        os->phaseLength = os->numTaps / os->ratio;
24010fe8:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010fea:	f002 fd4b 	bl	24013a84 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010fee:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010ff0:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010ff2:	9901      	ldr	r1, [sp, #4]
24010ff4:	00d8      	lsls	r0, r3, #3
24010ff6:	f002 fd45 	bl	24013a84 <mpool_alloc>
24010ffa:	61e0      	str	r0, [r4, #28]
}
24010ffc:	b002      	add	sp, #8
24010ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24011002:	4a06      	ldr	r2, [pc, #24]	; (2401101c <tOversampler_init+0xac>)
24011004:	fa22 f303 	lsr.w	r3, r2, r3
24011008:	07db      	lsls	r3, r3, #31
2401100a:	d4c1      	bmi.n	24010f90 <tOversampler_init+0x20>
}
2401100c:	b002      	add	sp, #8
2401100e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24011012:	bf00      	nop
24011014:	24024980 	.word	0x24024980
24011018:	20000764 	.word	0x20000764
2401101c:	40004045 	.word	0x40004045

24011020 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
24011020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
24011022:	698f      	ldr	r7, [r1, #24]
{
24011024:	4606      	mov	r6, r0
24011026:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24011028:	2020      	movs	r0, #32
2401102a:	4639      	mov	r1, r7
2401102c:	f002 fd2a 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
24011030:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24011034:	6030      	str	r0, [r6, #0]
24011036:	4604      	mov	r4, r0
    c->mempool = m;
24011038:	6007      	str	r7, [r0, #0]
    c->op = 4;
2401103a:	2104      	movs	r1, #4
    _tMempool* m = *mp;
2401103c:	69ad      	ldr	r5, [r5, #24]
    c->div = 1.0f / SCALAR;
2401103e:	4a0e      	ldr	r2, [pc, #56]	; (24011078 <tCrusher_init+0x58>)
    c->op = 4;
24011040:	6141      	str	r1, [r0, #20]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24011042:	4629      	mov	r1, r5
    c->rnd = 0.25f;
24011044:	6103      	str	r3, [r0, #16]
    c->div = 1.0f / SCALAR;
24011046:	60c2      	str	r2, [r0, #12]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24011048:	2010      	movs	r0, #16
    c->srr = 0.25f;
2401104a:	6063      	str	r3, [r4, #4]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2401104c:	f002 fd1a 	bl	24013a84 <mpool_alloc>
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24011050:	edd4 6a03 	vldr	s13, [r4, #12]
24011054:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2401107c <tCrusher_init+0x5c>
    s->invRatio = 1.0f;
24011058:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401105c:	eddf 7a08 	vldr	s15, [pc, #32]	; 24011080 <tCrusher_init+0x60>
    s->hold = 0.0f;
24011060:	2200      	movs	r2, #0
    s->count = 0;
24011062:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24011064:	61e0      	str	r0, [r4, #28]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24011066:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->mempool = m;
2401106a:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
2401106c:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
2401106e:	6082      	str	r2, [r0, #8]
    s->count = 0;
24011070:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24011072:	edc4 7a06 	vstr	s15, [r4, #24]
}
24011076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24011078:	3951b717 	.word	0x3951b717
2401107c:	3912ccf6 	.word	0x3912ccf6
24011080:	3e99999a 	.word	0x3e99999a

24011084 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24011084:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24011100 <tCrusher_tick+0x7c>
24011088:	ee20 0a27 	vmul.f32	s0, s0, s15
{
2401108c:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
2401108e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
24011092:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24011094:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24011098:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2401109c:	6960      	ldr	r0, [r4, #20]
2401109e:	05c0      	lsls	r0, r0, #23
240110a0:	ee20 0a27 	vmul.f32	s0, s0, s15
240110a4:	f002 fb0e 	bl	240136c4 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
240110a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
240110ac:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
240110b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240110b4:	f022 fe54 	bl	24033d60 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
240110b8:	edd4 0a04 	vldr	s1, [r4, #16]
240110bc:	f002 faf0 	bl	240136a0 <LEAF_round>
    _tSampleReducer* s = *sr;
240110c0:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
240110c2:	68da      	ldr	r2, [r3, #12]
240110c4:	edd3 7a01 	vldr	s15, [r3, #4]
240110c8:	ee07 2a10 	vmov	s14, r2
240110cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240110d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
240110d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240110d8:	dc08      	bgt.n	240110ec <tCrusher_tick+0x68>
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
240110da:	edd4 7a06 	vldr	s15, [r4, #24]
    s->count++;
240110de:	3201      	adds	r2, #1
    return s->hold;
240110e0:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
240110e4:	60da      	str	r2, [r3, #12]
    
}
240110e6:	ee20 0a27 	vmul.f32	s0, s0, s15
240110ea:	bd10      	pop	{r4, pc}
    return sample * c->gain;
240110ec:	edd4 7a06 	vldr	s15, [r4, #24]
        s->hold = input;
240110f0:	2201      	movs	r2, #1
240110f2:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
240110f6:	60da      	str	r2, [r3, #12]
}
240110f8:	ee20 0a27 	vmul.f32	s0, s0, s15
240110fc:	bd10      	pop	{r4, pc}
240110fe:	bf00      	nop
24011100:	459c4000 	.word	0x459c4000

24011104 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
24011104:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
24011108:	6803      	ldr	r3, [r0, #0]
2401110a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401110e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24011112:	ed83 0a05 	vstr	s0, [r3, #20]
}
24011116:	4770      	bx	lr

24011118 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
24011118:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
2401111c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24011150 <tCrusher_setQuality+0x38>
24011120:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24011124:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
24011126:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
24011128:	f022 fe1a 	bl	24033d60 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
2401112c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24011154 <tCrusher_setQuality+0x3c>
24011130:	eddf 7a09 	vldr	s15, [pc, #36]	; 24011158 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24011134:	eddf 6a09 	vldr	s13, [pc, #36]	; 2401115c <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
24011138:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2401113c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24011160 <tCrusher_setQuality+0x48>
24011140:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24011144:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24011148:	ed84 7a06 	vstr	s14, [r4, #24]
}
2401114c:	bd10      	pop	{r4, pc}
2401114e:	bf00      	nop
24011150:	00000000 	.word	0x00000000
24011154:	459c4000 	.word	0x459c4000
24011158:	3c23d70a 	.word	0x3c23d70a
2401115c:	3912ccf6 	.word	0x3912ccf6
24011160:	3e99999a 	.word	0x3e99999a

24011164 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
    c->rnd = rnd;
24011164:	6803      	ldr	r3, [r0, #0]
24011166:	ed83 0a04 	vstr	s0, [r3, #16]
}
2401116a:	4770      	bx	lr

2401116c <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2401116c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
24011170:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24011172:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24011176:	eeb4 0a67 	vcmp.f32	s0, s15
2401117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401117e:	d809      	bhi.n	24011194 <tCrusher_setSamplingRatio+0x28>
24011180:	eeb5 0a40 	vcmp.f32	s0, #0.0
24011184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011188:	db04      	blt.n	24011194 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
2401118a:	ee87 7a80 	vdiv.f32	s14, s15, s0
2401118e:	69db      	ldr	r3, [r3, #28]
24011190:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24011194:	4770      	bx	lr
24011196:	bf00      	nop

24011198 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24011198:	b570      	push	{r4, r5, r6, lr}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
2401119a:	698d      	ldr	r5, [r1, #24]
{
2401119c:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
2401119e:	206c      	movs	r0, #108	; 0x6c
240111a0:	4629      	mov	r1, r5
{
240111a2:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
240111a6:	f002 fc6d 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
240111aa:	686b      	ldr	r3, [r5, #4]
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
240111ac:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
240111b0:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
240111b2:	ed93 8a00 	vldr	s16, [r3]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
240111b6:	6030      	str	r0, [r6, #0]
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
240111b8:	ee80 0a08 	vdiv.f32	s0, s0, s16
    c->sampleRate = leaf->sampleRate;
240111bc:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->mempool = m;
240111c0:	6005      	str	r5, [r0, #0]
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
240111c2:	f007 fe79 	bl	24018eb8 <expf>
240111c6:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240111ca:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
240111ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
240111d2:	f007 fe71 	bl	24018eb8 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
240111d6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240111da:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
240111dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
240111e0:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
240111e2:	2200      	movs	r2, #0
    c->M = 3.0f; // decibel Make-up gain
240111e4:	490b      	ldr	r1, [pc, #44]	; (24011214 <tCompressor_init+0x7c>)
    c->isActive = 0;
240111e6:	6462      	str	r2, [r4, #68]	; 0x44
    c->W = 1.5f; // decibel Width of knee transition
240111e8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240111ec:	6263      	str	r3, [r4, #36]	; 0x24
240111ee:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
240111f0:	62e3      	str	r3, [r4, #44]	; 0x2c
240111f2:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
240111f4:	6363      	str	r3, [r4, #52]	; 0x34
240111f6:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
240111f8:	63e3      	str	r3, [r4, #60]	; 0x3c
240111fa:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
240111fc:	60e3      	str	r3, [r4, #12]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240111fe:	4b06      	ldr	r3, [pc, #24]	; (24011218 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24011200:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
24011204:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
24011206:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
24011208:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
2401120a:	6223      	str	r3, [r4, #32]
}
2401120c:	ecbd 8b02 	vpop	{d8}
24011210:	bd70      	pop	{r4, r5, r6, pc}
24011212:	bf00      	nop
24011214:	40400000 	.word	0x40400000
24011218:	3e2aaaab 	.word	0x3e2aaaab

2401121c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
2401121c:	b510      	push	{r4, lr}
2401121e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
24011222:	6804      	ldr	r4, [r0, #0]
{
24011224:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
24011228:	f002 f9b6 	bl	24013598 <fastabsf>
2401122c:	f002 fbc0 	bl	240139b0 <fasteratodb>
24011230:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 240112e4 <tCompressor_tick+0xc8>
24011234:	eef0 0a40 	vmov.f32	s1, s0
24011238:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 240112e8 <tCompressor_tick+0xcc>
2401123c:	f022 fd90 	bl	24033d60 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
24011240:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
24011244:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
24011248:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
2401124c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
24011250:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
24011254:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
24011258:	eef4 7ac7 	vcmpe.f32	s15, s14
2401125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011260:	db23      	blt.n	240112aa <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
24011262:	2300      	movs	r3, #0
24011264:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 240112e4 <tCompressor_tick+0xc8>
24011268:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
2401126a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
2401126e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24011272:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
24011276:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
2401127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401127e:	bf4c      	ite	mi
24011280:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24011284:	ed94 6a02 	vldrpl	s12, [r4, #8]
24011288:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401128c:	ee67 7a87 	vmul.f32	s15, s15, s14
24011290:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
24011294:	ee30 0a67 	vsub.f32	s0, s0, s15
24011298:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
2401129c:	f002 fbbc 	bl	24013a18 <fasterdbtoa>
    return attenuation * in;
}
240112a0:	ee28 0a00 	vmul.f32	s0, s16, s0
240112a4:	ecbd 8b02 	vpop	{d8}
240112a8:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
240112aa:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
240112ae:	edd4 5a07 	vldr	s11, [r4, #28]
240112b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
240112b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
240112ba:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
240112be:	dd0c      	ble.n	240112da <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
240112c0:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
240112c4:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
240112c8:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
240112ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
240112ce:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
240112d0:	ee67 7a87 	vmul.f32	s15, s15, s14
240112d4:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
240112d8:	e7c7      	b.n	2401126a <tCompressor_tick+0x4e>
        c->isActive = 1;
240112da:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
240112dc:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
240112e0:	6463      	str	r3, [r4, #68]	; 0x44
240112e2:	e7c2      	b.n	2401126a <tCompressor_tick+0x4e>
240112e4:	00000000 	.word	0x00000000
240112e8:	c2b40000 	.word	0xc2b40000

240112ec <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
240112ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
240112ee:	6817      	ldr	r7, [r2, #0]
{
240112f0:	4614      	mov	r4, r2
240112f2:	4606      	mov	r6, r0
240112f4:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240112f6:	2018      	movs	r0, #24
240112f8:	4639      	mov	r1, r7
{
240112fa:	ed2d 8b02 	vpush	{d8}
240112fe:	eef0 8a40 	vmov.f32	s17, s0
24011302:	b083      	sub	sp, #12
24011304:	eeb0 8a41 	vmov.f32	s16, s2
24011308:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401130c:	f002 fbba 	bl	24013a84 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011310:	4621      	mov	r1, r4
    p->curr=0.0f;
24011312:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011314:	4604      	mov	r4, r0
24011316:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011318:	ed9d 0a01 	vldr	s0, [sp, #4]
2401131c:	3014      	adds	r0, #20
    p->mempool = m;
2401131e:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24011322:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24011326:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011328:	f7ff fbd2 	bl	24010ad0 <tPowerFollower_initToPool>
    p->mode=mode;
2401132c:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
2401132e:	ed84 8a02 	vstr	s16, [r4, #8]
}
24011332:	b003      	add	sp, #12
24011334:	ecbd 8b02 	vpop	{d8}
24011338:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401133a:	bf00      	nop

2401133c <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
    p->strength=strength;
2401133c:	6803      	ldr	r3, [r0, #0]
2401133e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24011342:	4770      	bx	lr

24011344 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24011344:	6800      	ldr	r0, [r0, #0]
24011346:	3014      	adds	r0, #20
24011348:	f7ff bbdc 	b.w	24010b04 <tPowerFollower_setFactor>

2401134c <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
    p->mode=mode;
2401134c:	6803      	ldr	r3, [r0, #0]
2401134e:	60d9      	str	r1, [r3, #12]
}
24011350:	4770      	bx	lr
24011352:	bf00      	nop

24011354 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
24011354:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
24011356:	6804      	ldr	r4, [r0, #0]
{
24011358:	ed2d 8b02 	vpush	{d8}
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401135c:	f104 0014 	add.w	r0, r4, #20
{
24011360:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24011364:	f7ff fbe0 	bl	24010b28 <tPowerFollower_tick>
24011368:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2401136c:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401136e:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24011372:	b91b      	cbnz	r3, 2401137c <tFeedbackLeveler_tick+0x28>
24011374:	eddf 7a08 	vldr	s15, [pc, #32]	; 24011398 <tFeedbackLeveler_tick+0x44>
24011378:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
2401137c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011380:	edd4 6a02 	vldr	s13, [r4, #8]
24011384:	eee6 7ac7 	vfms.f32	s15, s13, s14
24011388:	ee27 0a88 	vmul.f32	s0, s15, s16
    return p->curr;
}
2401138c:	ecbd 8b02 	vpop	{d8}
    p->curr=input*(1.0f-p->strength*levdiff);
24011390:	ed84 0a04 	vstr	s0, [r4, #16]
}
24011394:	bd10      	pop	{r4, pc}
24011396:	bf00      	nop
24011398:	00000000 	.word	0x00000000

2401139c <tFeedbackLeveler_setTargetLevel>:


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
    p->targetLevel=TargetLevel;
2401139c:	6803      	ldr	r3, [r0, #0]
2401139e:	ed83 0a01 	vstr	s0, [r3, #4]
}
240113a2:	4770      	bx	lr

240113a4 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
240113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
240113a6:	699e      	ldr	r6, [r3, #24]
{
240113a8:	4614      	mov	r4, r2
240113aa:	4607      	mov	r7, r0
240113ac:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240113ae:	2068      	movs	r0, #104	; 0x68
240113b0:	4631      	mov	r1, r6
{
240113b2:	ed2d 8b04 	vpush	{d8-d9}
240113b6:	eef0 9a40 	vmov.f32	s19, s0
240113ba:	eeb0 9a60 	vmov.f32	s18, s1
240113be:	eef0 8a61 	vmov.f32	s17, s3
240113c2:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240113c6:	f002 fb5d 	bl	24013a84 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240113ca:	ee07 4a90 	vmov	s15, r4
    LEAF* leaf = adsr->mempool->leaf;
240113ce:	6873      	ldr	r3, [r6, #4]
240113d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240113d4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 24011464 <tADSRT_init+0xc0>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240113d8:	eef8 5a67 	vcvt.f32.u32	s11, s15
240113dc:	eddf 7a22 	vldr	s15, [pc, #136]	; 24011468 <tADSRT_init+0xc4>
    adsr->sampleRate = leaf->sampleRate;
240113e0:	ed93 5a00 	vldr	s10, [r3]
240113e4:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240113e8:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
240113ea:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240113ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;

    adsr->baseLeakFactor = 1.0f;
    adsr->leakFactor = 1.0f;
    adsr->invSampleRate = leaf->invSampleRate;
240113f2:	685b      	ldr	r3, [r3, #4]
240113f4:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
240113f8:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
240113fc:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011400:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011404:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->baseLeakFactor = 1.0f;
24011408:	ed80 6a17 	vstr	s12, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
2401140c:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->sustain = sustain;
24011410:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
24011414:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
24011418:	2200      	movs	r2, #0
    adsr->buff_sizeMinusOne = bufferSize - 1;
2401141a:	1e61      	subs	r1, r4, #1
    adsr->sustain = sustain;
2401141c:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->mempool = m;
24011420:	6006      	str	r6, [r0, #0]
    adsr->exp_buff = expBuffer;
24011422:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
24011424:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24011426:	60c1      	str	r1, [r0, #12]
    adsr->whichStage = env_idle;
24011428:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
2401142a:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->decay = decay;
2401142e:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
24011432:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->invSampleRate = leaf->invSampleRate;
24011436:	6643      	str	r3, [r0, #100]	; 0x64
}
24011438:	ecbd 8b04 	vpop	{d8-d9}
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401143c:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011440:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011444:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011448:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401144c:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011450:	ed80 5a0a 	vstr	s10, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011454:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011458:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401145c:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
}
24011460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24011462:	bf00      	nop
24011464:	00000000 	.word	0x00000000
24011468:	4479ffff 	.word	0x4479ffff

2401146c <tADSRT_initToPool>:
{
2401146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
2401146e:	681e      	ldr	r6, [r3, #0]
{
24011470:	4614      	mov	r4, r2
24011472:	4607      	mov	r7, r0
24011474:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24011476:	2068      	movs	r0, #104	; 0x68
24011478:	4631      	mov	r1, r6
{
2401147a:	ed2d 8b04 	vpush	{d8-d9}
2401147e:	eef0 9a40 	vmov.f32	s19, s0
24011482:	eeb0 9a60 	vmov.f32	s18, s1
24011486:	eef0 8a61 	vmov.f32	s17, s3
2401148a:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401148e:	f002 faf9 	bl	24013a84 <mpool_alloc>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011492:	ee07 4a90 	vmov	s15, r4
    LEAF* leaf = adsr->mempool->leaf;
24011496:	6873      	ldr	r3, [r6, #4]
24011498:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401149c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 2401152c <tADSRT_initToPool+0xc0>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240114a0:	eef8 5a67 	vcvt.f32.u32	s11, s15
240114a4:	eddf 7a22 	vldr	s15, [pc, #136]	; 24011530 <tADSRT_initToPool+0xc4>
    adsr->sampleRate = leaf->sampleRate;
240114a8:	ed93 5a00 	vldr	s10, [r3]
240114ac:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240114b0:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
240114b2:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240114b6:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->invSampleRate = leaf->invSampleRate;
240114ba:	685b      	ldr	r3, [r3, #4]
240114bc:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
240114c0:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
240114c4:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
240114c8:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240114cc:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->baseLeakFactor = 1.0f;
240114d0:	ed80 6a17 	vstr	s12, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
240114d4:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->sustain = sustain;
240114d8:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
240114dc:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
240114e0:	2200      	movs	r2, #0
    adsr->buff_sizeMinusOne = bufferSize - 1;
240114e2:	1e61      	subs	r1, r4, #1
    adsr->sustain = sustain;
240114e4:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->mempool = m;
240114e8:	6006      	str	r6, [r0, #0]
    adsr->exp_buff = expBuffer;
240114ea:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
240114ec:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
240114ee:	60c1      	str	r1, [r0, #12]
    adsr->whichStage = env_idle;
240114f0:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
240114f2:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->decay = decay;
240114f6:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
240114fa:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->invSampleRate = leaf->invSampleRate;
240114fe:	6643      	str	r3, [r0, #100]	; 0x64
}
24011500:	ecbd 8b04 	vpop	{d8-d9}
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011504:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011508:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2401150c:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011510:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011514:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011518:	ed80 5a0a 	vstr	s10, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401151c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011520:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011524:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
}
24011528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401152a:	bf00      	nop
2401152c:	00000000 	.word	0x00000000
24011530:	4479ffff 	.word	0x4479ffff

24011534 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
24011534:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24011538:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401153a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
2401153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
24011542:	bf48      	it	mi
24011544:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24011558 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011548:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
2401154c:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011550:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24011554:	4770      	bx	lr
24011556:	bf00      	nop
24011558:	3c23d70a 	.word	0x3c23d70a

2401155c <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
2401155c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24011560:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011562:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
24011566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
2401156a:	bf48      	it	mi
2401156c:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24011580 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011570:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
24011574:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011578:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
2401157c:	4770      	bx	lr
2401157e:	bf00      	nop
24011580:	3c23d70a 	.word	0x3c23d70a

24011584 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24011584:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
24011588:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
2401158a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011592:	dd02      	ble.n	2401159a <tADSRT_setSustain+0x16>
24011594:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
24011598:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
2401159a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401159e:	2200      	movs	r2, #0
240115a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240115a4:	bf4c      	ite	mi
240115a6:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
240115a8:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
240115ac:	4770      	bx	lr
240115ae:	bf00      	nop

240115b0 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
240115b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240115b4:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240115b6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
240115ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
240115be:	bf48      	it	mi
240115c0:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240115d4 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240115c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
240115c8:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
240115cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
240115d0:	4770      	bx	lr
240115d2:	bf00      	nop
240115d4:	3c23d70a 	.word	0x3c23d70a

240115d8 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
240115d8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
240115da:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
240115dc:	eddf 7a06 	vldr	s15, [pc, #24]	; 240115f8 <tADSRT_setLeakFactor+0x20>
240115e0:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
240115e4:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
240115e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
240115ec:	f007 fe04 	bl	240191f8 <powf>
240115f0:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
240115f4:	bd10      	pop	{r4, pc}
240115f6:	bf00      	nop
240115f8:	472c4400 	.word	0x472c4400

240115fc <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
240115fc:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
240115fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24011600:	b162      	cbz	r2, 2401161c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
24011602:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
24011604:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
24011606:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
24011608:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
2401160a:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
2401160c:	2200      	movs	r2, #0
2401160e:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24011610:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
24011614:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
24011616:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
24011618:	655a      	str	r2, [r3, #84]	; 0x54
}
2401161a:	4770      	bx	lr
        adsr->whichStage = env_attack;
2401161c:	2101      	movs	r1, #1
2401161e:	e7f5      	b.n	2401160c <tADSRT_on+0x10>

24011620 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24011620:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
24011622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24011624:	b11a      	cbz	r2, 2401162e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
24011626:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
24011628:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
2401162a:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
2401162c:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
2401162e:	4770      	bx	lr

24011630 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
24011630:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24011632:	6804      	ldr	r4, [r0, #0]

    switch (adsr->whichStage)
24011634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24011636:	3b01      	subs	r3, #1
{
24011638:	ed2d 8b02 	vpush	{d8}
    switch (adsr->whichStage)
2401163c:	2b04      	cmp	r3, #4
2401163e:	f200 8148 	bhi.w	240118d2 <tADSRT_tick+0x2a2>
24011642:	e8df f003 	tbb	[pc, r3]
24011646:	441f      	.short	0x441f
24011648:	6339      	.short	0x6339
2401164a:	03          	.byte	0x03
2401164b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2401164c:	edd4 7a03 	vldr	s15, [r4, #12]
24011650:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
24011654:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011658:	eeb4 1ae7 	vcmpe.f32	s2, s15
2401165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011660:	dd71      	ble.n	24011746 <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
24011662:	eddf 7a9d 	vldr	s15, [pc, #628]	; 240118d8 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
24011666:	2301      	movs	r3, #1
24011668:	eeb0 0a67 	vmov.f32	s0, s15
2401166c:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
2401166e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
24011672:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
24011676:	ee37 1a81 	vadd.f32	s2, s15, s2
2401167a:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
2401167e:	ecbd 8b02 	vpop	{d8}
24011682:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24011684:	edd4 7a03 	vldr	s15, [r4, #12]
24011688:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
2401168c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011690:	eeb4 1ae7 	vcmpe.f32	s2, s15
24011694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011698:	dd7f      	ble.n	2401179a <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
2401169a:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
2401169c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
240116a0:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
240116a2:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
240116a6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
240116aa:	ee37 1a81 	vadd.f32	s2, s15, s2
}
240116ae:	ecbd 8b02 	vpop	{d8}
            adsr->attackPhase += adsr->attackInc;
240116b2:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
240116b6:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
240116b8:	ed94 0a06 	vldr	s0, [r4, #24]
240116bc:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
240116c0:	ee20 0a27 	vmul.f32	s0, s0, s15
}
240116c4:	ecbd 8b02 	vpop	{d8}
            adsr->next = adsr->next * adsr->leakFactor;
240116c8:	ed84 0a06 	vstr	s0, [r4, #24]
}
240116cc:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
240116ce:	edd4 7a03 	vldr	s15, [r4, #12]
240116d2:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
240116d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240116da:	eeb4 1ae7 	vcmpe.f32	s2, s15
240116de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240116e2:	f340 8088 	ble.w	240117f6 <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
240116e6:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
240116ea:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
240116ec:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
240116f0:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
240116f2:	ee20 0a27 	vmul.f32	s0, s0, s15
240116f6:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
240116fa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
240116fe:	ee37 1a81 	vadd.f32	s2, s15, s2
}
24011702:	ecbd 8b02 	vpop	{d8}
            adsr->decayPhase += adsr->decayInc;
24011706:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
2401170a:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
2401170c:	edd4 7a03 	vldr	s15, [r4, #12]
24011710:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
24011714:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011718:	eeb4 1ae7 	vcmpe.f32	s2, s15
2401171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011720:	f340 809e 	ble.w	24011860 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
24011724:	eddf 7a6c 	vldr	s15, [pc, #432]	; 240118d8 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
24011728:	2300      	movs	r3, #0
2401172a:	eeb0 0a67 	vmov.f32	s0, s15
2401172e:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
24011730:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
24011734:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24011738:	ee37 1a81 	vadd.f32	s2, s15, s2
}
2401173c:	ecbd 8b02 	vpop	{d8}
            adsr->releasePhase += adsr->releaseInc;
24011740:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
24011744:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24011746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
2401174a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2401174e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
24011752:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24011756:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
2401175a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2401175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011762:	f100 80b2 	bmi.w	240118ca <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011766:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2401176a:	6862      	ldr	r2, [r4, #4]
2401176c:	ee17 3a90 	vmov	r3, s15
24011770:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011774:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
24011778:	ee16 3a90 	vmov	r3, s13
2401177c:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
24011780:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011784:	ed92 0a00 	vldr	s0, [r2]
24011788:	f002 f89a 	bl	240138c0 <LEAF_interpolation_linear>
2401178c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
24011790:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
24011794:	ed84 0a06 	vstr	s0, [r4, #24]
24011798:	e76b      	b.n	24011672 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401179a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
2401179e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240117a2:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
240117a6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240117aa:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
240117ae:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
240117b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240117b6:	f100 8084 	bmi.w	240118c2 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
240117ba:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240117be:	6862      	ldr	r2, [r4, #4]
240117c0:	ee17 3a90 	vmov	r3, s15
240117c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240117c8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
240117cc:	ee16 3a90 	vmov	r3, s13
240117d0:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
240117d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240117d8:	ed92 0a00 	vldr	s0, [r2]
240117dc:	f002 f870 	bl	240138c0 <LEAF_interpolation_linear>
240117e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
240117e4:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
240117e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
240117ec:	ee20 0a08 	vmul.f32	s0, s0, s16
240117f0:	ed84 0a06 	vstr	s0, [r4, #24]
240117f4:	e757      	b.n	240116a6 <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
240117f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
240117fa:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
240117fe:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
24011802:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011806:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
2401180a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011812:	d452      	bmi.n	240118ba <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
24011814:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011818:	6862      	ldr	r2, [r4, #4]
2401181a:	ee17 3a90 	vmov	r3, s15
2401181e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011822:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
24011826:	ee16 3a90 	vmov	r3, s13
2401182a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401182e:	ed92 0a00 	vldr	s0, [r2]
24011832:	f002 f845 	bl	240138c0 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24011836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401183a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2401183e:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
24011842:	ee76 6ac7 	vsub.f32	s13, s13, s14
24011846:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
2401184a:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
2401184e:	ee67 7a86 	vmul.f32	s15, s15, s12
24011852:	eea6 7a80 	vfma.f32	s14, s13, s0
24011856:	ee27 0a87 	vmul.f32	s0, s15, s14
2401185a:	ed84 0a06 	vstr	s0, [r4, #24]
2401185e:	e74c      	b.n	240116fa <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
24011864:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011868:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
2401186c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011870:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
24011874:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24011878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401187c:	d419      	bmi.n	240118b2 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
2401187e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011882:	6862      	ldr	r2, [r4, #4]
24011884:	ee17 3a90 	vmov	r3, s15
24011888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401188c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
24011890:	ee16 3a90 	vmov	r3, s13
24011894:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
24011898:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401189c:	ed92 0a00 	vldr	s0, [r2]
240118a0:	f002 f80e 	bl	240138c0 <LEAF_interpolation_linear>
240118a4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
240118a8:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
240118ac:	ed84 0a06 	vstr	s0, [r4, #24]
240118b0:	e740      	b.n	24011734 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240118b2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240118b4:	eddf 0a08 	vldr	s1, [pc, #32]	; 240118d8 <tADSRT_tick+0x2a8>
240118b8:	e7ea      	b.n	24011890 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240118ba:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240118bc:	eddf 0a06 	vldr	s1, [pc, #24]	; 240118d8 <tADSRT_tick+0x2a8>
240118c0:	e7b1      	b.n	24011826 <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240118c2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240118c4:	eddf 0a04 	vldr	s1, [pc, #16]	; 240118d8 <tADSRT_tick+0x2a8>
240118c8:	e780      	b.n	240117cc <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240118ca:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
240118cc:	eddf 0a02 	vldr	s1, [pc, #8]	; 240118d8 <tADSRT_tick+0x2a8>
240118d0:	e752      	b.n	24011778 <tADSRT_tick+0x148>
    return adsr->next;
240118d2:	ed94 0a06 	vldr	s0, [r4, #24]
240118d6:	e6d2      	b.n	2401167e <tADSRT_tick+0x4e>
240118d8:	00000000 	.word	0x00000000

240118dc <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
240118dc:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
240118de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
240118e0:	3a01      	subs	r2, #1
240118e2:	2a04      	cmp	r2, #4
240118e4:	f200 80ba 	bhi.w	24011a5c <tADSRT_tickNoInterp+0x180>
240118e8:	e8df f002 	tbb	[pc, r2]
240118ec:	58333c1b 	.word	0x58333c1b
240118f0:	03          	.byte	0x03
240118f1:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
240118f2:	edd3 7a03 	vldr	s15, [r3, #12]
240118f6:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
240118fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
240118fe:	eef4 6ac7 	vcmpe.f32	s13, s14
24011902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011906:	dd61      	ble.n	240119cc <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
24011908:	2201      	movs	r2, #1
                adsr->next = 0.0f;
2401190a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 24011a64 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
2401190e:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24011910:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
24011914:	ed83 0a06 	vstr	s0, [r3, #24]
24011918:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401191c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
24011920:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24011922:	edd3 7a03 	vldr	s15, [r3, #12]
24011926:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
2401192a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2401192e:	eef4 6ac7 	vcmpe.f32	s13, s14
24011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011936:	dd57      	ble.n	240119e8 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
24011938:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
2401193a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
2401193e:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
24011940:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24011944:	ed83 0a06 	vstr	s0, [r3, #24]
24011948:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401194c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
24011950:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
24011952:	ed93 0a06 	vldr	s0, [r3, #24]
24011956:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
2401195a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401195e:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
24011962:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24011964:	edd3 7a03 	vldr	s15, [r3, #12]
24011968:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
2401196c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24011970:	eef4 6ac7 	vcmpe.f32	s13, s14
24011974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011978:	dd48      	ble.n	24011a0c <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
2401197a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
2401197e:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
24011980:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
24011984:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
24011986:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
2401198a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
2401198e:	ed83 0a06 	vstr	s0, [r3, #24]
24011992:	ee77 7aa6 	vadd.f32	s15, s15, s13
24011996:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
2401199a:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
2401199c:	edd3 7a03 	vldr	s15, [r3, #12]
240119a0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
240119a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
240119a8:	eef4 6ac7 	vcmpe.f32	s13, s14
240119ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240119b0:	dd46      	ble.n	24011a40 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
240119b2:	2200      	movs	r2, #0
                adsr->next = 0.0f;
240119b4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24011a64 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
240119b8:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
240119ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
240119be:	ed83 0a06 	vstr	s0, [r3, #24]
240119c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240119c6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
240119ca:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
240119cc:	eebc 7ae6 	vcvt.u32.f32	s14, s13
240119d0:	685a      	ldr	r2, [r3, #4]
240119d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
240119d6:	ee17 1a10 	vmov	r1, s14
240119da:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240119de:	ed92 0a00 	vldr	s0, [r2]
240119e2:	ee20 0a27 	vmul.f32	s0, s0, s15
240119e6:	e793      	b.n	24011910 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
240119e8:	eebc 7ae6 	vcvt.u32.f32	s14, s13
240119ec:	685a      	ldr	r2, [r3, #4]
240119ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240119f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
240119f6:	ee17 1a10 	vmov	r1, s14
240119fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240119fe:	ed92 7a00 	vldr	s14, [r2]
24011a02:	ee30 0a47 	vsub.f32	s0, s0, s14
24011a06:	ee20 0a27 	vmul.f32	s0, s0, s15
24011a0a:	e799      	b.n	24011940 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
24011a0c:	eefc 5ae6 	vcvt.u32.f32	s11, s13
24011a10:	685a      	ldr	r2, [r3, #4]
24011a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24011a16:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24011a1a:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
24011a1e:	ee15 1a90 	vmov	r1, s11
24011a22:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
24011a26:	ee37 7a40 	vsub.f32	s14, s14, s0
24011a2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011a2e:	ee67 7a86 	vmul.f32	s15, s15, s12
24011a32:	ed92 6a00 	vldr	s12, [r2]
24011a36:	eea6 0a07 	vfma.f32	s0, s12, s14
24011a3a:	ee27 0a80 	vmul.f32	s0, s15, s0
24011a3e:	e7a4      	b.n	2401198a <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
24011a40:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24011a44:	685a      	ldr	r2, [r3, #4]
24011a46:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
24011a4a:	ee17 1a10 	vmov	r1, s14
24011a4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011a52:	ed92 0a00 	vldr	s0, [r2]
24011a56:	ee20 0a27 	vmul.f32	s0, s0, s15
24011a5a:	e7ae      	b.n	240119ba <tADSRT_tickNoInterp+0xde>
    return adsr->next;
24011a5c:	ed93 0a06 	vldr	s0, [r3, #24]
24011a60:	4770      	bx	lr
24011a62:	bf00      	nop
24011a64:	00000000 	.word	0x00000000

24011a68 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011a68:	b538      	push	{r3, r4, r5, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
24011a6a:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011a6c:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011a6e:	201c      	movs	r0, #28
24011a70:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011a72:	ed2d 8b02 	vpush	{d8}
24011a76:	eef0 8a40 	vmov.f32	s17, s0
24011a7a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011a7e:	f002 f801 	bl	24013a84 <mpool_alloc>
24011a82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011a86:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24011abc <tExpSmooth_init+0x54>
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011a8a:	6863      	ldr	r3, [r4, #4]
24011a8c:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
24011a90:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24011a94:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011a98:	685b      	ldr	r3, [r3, #4]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011a9a:	6028      	str	r0, [r5, #0]
    smooth->curr = val;
24011a9c:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24011aa0:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->mempool = m;
24011aa4:	6004      	str	r4, [r0, #0]
    smooth->baseFactor = factor;
24011aa6:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24011aaa:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24011aae:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011ab2:	6183      	str	r3, [r0, #24]
}
24011ab4:	ecbd 8b02 	vpop	{d8}
24011ab8:	bd38      	pop	{r3, r4, r5, pc}
24011aba:	bf00      	nop
24011abc:	00000000 	.word	0x00000000

24011ac0 <tExpSmooth_initToPool>:
{
24011ac0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24011ac2:	680c      	ldr	r4, [r1, #0]
{
24011ac4:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011ac6:	201c      	movs	r0, #28
24011ac8:	4621      	mov	r1, r4
{
24011aca:	ed2d 8b02 	vpush	{d8}
24011ace:	eef0 8a40 	vmov.f32	s17, s0
24011ad2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011ad6:	f001 ffd5 	bl	24013a84 <mpool_alloc>
24011ada:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011ade:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24011b14 <tExpSmooth_initToPool+0x54>
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011ae2:	6863      	ldr	r3, [r4, #4]
24011ae4:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
24011ae8:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24011aec:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011af0:	685b      	ldr	r3, [r3, #4]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011af2:	6028      	str	r0, [r5, #0]
    smooth->curr = val;
24011af4:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24011af8:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->mempool = m;
24011afc:	6004      	str	r4, [r0, #0]
    smooth->baseFactor = factor;
24011afe:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24011b02:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24011b06:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24011b0a:	6183      	str	r3, [r0, #24]
}
24011b0c:	ecbd 8b02 	vpop	{d8}
24011b10:	bd38      	pop	{r3, r4, r5, pc}
24011b12:	bf00      	nop
24011b14:	00000000 	.word	0x00000000

24011b18 <tExpSmooth_setDest>:
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
    smooth->dest=dest;
24011b18:	6803      	ldr	r3, [r0, #0]
24011b1a:	ed83 0a05 	vstr	s0, [r3, #20]
}
24011b1e:	4770      	bx	lr

24011b20 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24011b20:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
24011b22:	edd3 6a04 	vldr	s13, [r3, #16]
24011b26:	ed93 0a03 	vldr	s0, [r3, #12]
24011b2a:	ed93 7a02 	vldr	s14, [r3, #8]
24011b2e:	ee20 0a26 	vmul.f32	s0, s0, s13
24011b32:	edd3 7a05 	vldr	s15, [r3, #20]
24011b36:	eea7 0a27 	vfma.f32	s0, s14, s15
24011b3a:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
24011b3e:	4770      	bx	lr

24011b40 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
24011b40:	b538      	push	{r3, r4, r5, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
24011b42:	698d      	ldr	r5, [r1, #24]
{
24011b44:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011b46:	201c      	movs	r0, #28
24011b48:	4629      	mov	r1, r5
{
24011b4a:	ed2d 8b02 	vpush	{d8}
24011b4e:	eef0 8a40 	vmov.f32	s17, s0
24011b52:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011b56:	f001 ff95 	bl	24013a84 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
24011b5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
24011b5e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011b60:	6020      	str	r0, [r4, #0]
    s->mempool = m;
24011b62:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
24011b64:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
24011b68:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
24011b6c:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
24011b70:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
24011b72:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
24011b74:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
24011b76:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
24011b78:	ee87 7aa0 	vdiv.f32	s14, s15, s1
}
24011b7c:	ecbd 8b02 	vpop	{d8}
    s->invUpSlide = 1.0f / upSlide;
24011b80:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
24011b84:	ed80 7a05 	vstr	s14, [r0, #20]
}
24011b88:	bd38      	pop	{r3, r4, r5, pc}
24011b8a:	bf00      	nop

24011b8c <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
24011b8c:	6803      	ldr	r3, [r0, #0]
{
24011b8e:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
24011b92:	edd3 7a01 	vldr	s15, [r3, #4]
24011b96:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011b9a:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
24011b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011ba2:	bf94      	ite	ls
24011ba4:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
24011ba8:	edd3 6a05 	vldrhi	s13, [r3, #20]
24011bac:	eee6 7a26 	vfma.f32	s15, s12, s13
24011bb0:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011bb4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24011be8 <tSlide_tick+0x5c>
24011bb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
24011bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011bc0:	d406      	bmi.n	24011bd0 <tSlide_tick+0x44>
24011bc2:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
24011bc6:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
24011bca:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
24011bce:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011bd0:	eddf 7a06 	vldr	s15, [pc, #24]	; 24011bec <tSlide_tick+0x60>
    s->prevIn = in;
24011bd4:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011bd8:	eeb0 0a67 	vmov.f32	s0, s15
24011bdc:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
24011be0:	ed83 0a01 	vstr	s0, [r3, #4]
}
24011be4:	4770      	bx	lr
24011be6:	bf00      	nop
24011be8:	006ce3ee 	.word	0x006ce3ee
24011bec:	00000000 	.word	0x00000000

24011bf0 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
24011bf0:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
24011bf2:	680d      	ldr	r5, [r1, #0]
{
24011bf4:	4606      	mov	r6, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011bf6:	2028      	movs	r0, #40	; 0x28
24011bf8:	4629      	mov	r1, r5
{
24011bfa:	ed2d 8b02 	vpush	{d8}
24011bfe:	eef0 8a40 	vmov.f32	s17, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011c02:	f001 ff3f 	bl	24013a84 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
24011c06:	686b      	ldr	r3, [r5, #4]
    
    f->gain = 1.0f;
24011c08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
24011c0c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 24011c54 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011c10:	4604      	mov	r4, r0
    f->lastOut = 0.0f;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011c12:	edd3 7a03 	vldr	s15, [r3, #12]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011c16:	eeb0 1a48 	vmov.f32	s2, s16
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011c1a:	6030      	str	r0, [r6, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011c1c:	ee67 0aa8 	vmul.f32	s1, s15, s17
    f->gain = 1.0f;
24011c20:	ed80 8a02 	vstr	s16, [r0, #8]
    f->a0 = 1.0;
24011c24:	ed80 8a03 	vstr	s16, [r0, #12]
    f->freq = freq;
24011c28:	edc0 8a01 	vstr	s17, [r0, #4]
    f->mempool = m;
24011c2c:	6005      	str	r5, [r0, #0]
    f->lastIn = 0.0f;
24011c2e:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24011c32:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011c36:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011c3a:	edc0 0a05 	vstr	s1, [r0, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011c3e:	f022 f88f 	bl	24033d60 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24011c42:	ee38 8a40 	vsub.f32	s16, s16, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011c46:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24011c4a:	ed84 8a04 	vstr	s16, [r4, #16]
}
24011c4e:	ecbd 8b02 	vpop	{d8}
24011c52:	bd70      	pop	{r4, r5, r6, pc}
24011c54:	00000000 	.word	0x00000000

24011c58 <tOnePole_setFreq>:
{
24011c58:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24011c5a:	6804      	ldr	r4, [r0, #0]
{
24011c5c:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011c60:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24011c64:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011c90 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011c68:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24011c6c:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011c70:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011c74:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011c78:	f022 f872 	bl	24033d60 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24011c7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011c80:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24011c84:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011c88:	edc4 7a04 	vstr	s15, [r4, #16]
}
24011c8c:	bd10      	pop	{r4, pc}
24011c8e:	bf00      	nop
24011c90:	00000000 	.word	0x00000000

24011c94 <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
24011c94:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24011c96:	ed93 6a08 	vldr	s12, [r3, #32]
    float in = input * f->gain;
24011c9a:	ed93 7a02 	vldr	s14, [r3, #8]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24011c9e:	edd3 7a04 	vldr	s15, [r3, #16]
    float in = input * f->gain;
24011ca2:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24011ca6:	edd3 6a05 	vldr	s13, [r3, #20]
24011caa:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24011cae:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24011cb2:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24011cb6:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
24011cba:	4770      	bx	lr

24011cbc <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, float sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011cbc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24011cf8 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011cc0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011cc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011cc8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24011cfc <tOnePole_setSampleRate+0x40>
{
24011ccc:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24011cce:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011cd0:	edd4 0a01 	vldr	s1, [r4, #4]
24011cd4:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011cd8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011cdc:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011ce0:	f022 f83e 	bl	24033d60 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24011ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011ce8:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24011cec:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011cf0:	edc4 7a04 	vstr	s15, [r4, #16]
}
24011cf4:	bd10      	pop	{r4, pc}
24011cf6:	bf00      	nop
24011cf8:	40c90fdb 	.word	0x40c90fdb
24011cfc:	00000000 	.word	0x00000000

24011d00 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
24011d00:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24011d02:	680c      	ldr	r4, [r1, #0]
{
24011d04:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
24011d06:	2028      	movs	r0, #40	; 0x28
24011d08:	4621      	mov	r1, r4
24011d0a:	f001 febb 	bl	24013a84 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011d0e:	6863      	ldr	r3, [r4, #4]
    f->gain = 1.0f;
24011d10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011d14:	68db      	ldr	r3, [r3, #12]
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
24011d16:	6028      	str	r0, [r5, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011d18:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastIn[0] = 0.0f;
24011d1a:	2300      	movs	r3, #0
    f->mempool = m;
24011d1c:	6004      	str	r4, [r0, #0]
    f->gain = 1.0f;
24011d1e:	6042      	str	r2, [r0, #4]
    f->lastIn[0] = 0.0f;
24011d20:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
24011d22:	6203      	str	r3, [r0, #32]
}
24011d24:	bd38      	pop	{r3, r4, r5, pc}
24011d26:	bf00      	nop

24011d28 <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
24011d28:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24011d2a:	edd3 6a07 	vldr	s13, [r3, #28]
24011d2e:	edd3 7a03 	vldr	s15, [r3, #12]
24011d32:	edd3 5a08 	vldr	s11, [r3, #32]
24011d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
24011d3a:	ed93 5a04 	vldr	s10, [r3, #16]
    float in = input * f->gain;
24011d3e:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24011d42:	ed93 6a02 	vldr	s12, [r3, #8]
24011d46:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
24011d4a:	edc3 6a08 	vstr	s13, [r3, #32]
    float in = input * f->gain;
24011d4e:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
24011d52:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24011d56:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
24011d5a:	eea6 0a07 	vfma.f32	s0, s12, s14
24011d5e:	4770      	bx	lr

24011d60 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
24011d60:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
24011d62:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
24011d66:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
24011d6a:	ed83 1a04 	vstr	s2, [r3, #16]
}
24011d6e:	4770      	bx	lr

24011d70 <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
24011d70:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24011d72:	680c      	ldr	r4, [r1, #0]
{
24011d74:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24011d76:	2044      	movs	r0, #68	; 0x44
24011d78:	4621      	mov	r1, r4
24011d7a:	f001 fe83 	bl	24013a84 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
24011d7e:	6862      	ldr	r2, [r4, #4]
    
    f->gain = 1.0f;
24011d80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f->lastIn[0] = 0.0f;
    f->lastIn[1] = 0.0f;
    f->lastOut[0] = 0.0f;
    f->lastOut[1] = 0.0f;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011d84:	68d2      	ldr	r2, [r2, #12]
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24011d86:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
24011d88:	6043      	str	r3, [r0, #4]
    f->b0 = 0.0f;
24011d8a:	2300      	movs	r3, #0
    f->mempool = m;
24011d8c:	6004      	str	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011d8e:	6402      	str	r2, [r0, #64]	; 0x40
    f->b0 = 0.0f;
24011d90:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
24011d92:	6083      	str	r3, [r0, #8]
    f->lastIn[0] = 0.0f;
24011d94:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
24011d96:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
24011d98:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
24011d9a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
24011d9c:	bd38      	pop	{r3, r4, r5, pc}
24011d9e:	bf00      	nop

24011da0 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, float sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24011da0:	eddf 7a1a 	vldr	s15, [pc, #104]	; 24011e0c <tBiQuad_setSampleRate+0x6c>
24011da4:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
24011da8:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
24011daa:	6804      	ldr	r4, [r0, #0]
{
24011dac:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
24011db0:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011db4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
24011db8:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
24011dbc:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
24011dc0:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011dc4:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24011dc8:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011dcc:	f006 fe34 	bl	24018a38 <cosf>
24011dd0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
24011dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011dd6:	ee28 8a27 	vmul.f32	s16, s16, s15
24011dda:	ee28 8a00 	vmul.f32	s16, s16, s0
24011dde:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
24011de2:	b17b      	cbz	r3, 24011e04 <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
24011de4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
24011de8:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
24011dea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
24011dee:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
24011df0:	ee77 7ae8 	vsub.f32	s15, s15, s17
24011df4:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
24011df8:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
24011dfc:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
24011e00:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
24011e04:	ecbd 8b02 	vpop	{d8}
24011e08:	bd10      	pop	{r4, pc}
24011e0a:	bf00      	nop
24011e0c:	40c90fdb 	.word	0x40c90fdb

24011e10 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
24011e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24011e12:	6997      	ldr	r7, [r2, #24]
{
24011e14:	4606      	mov	r6, r0
24011e16:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011e18:	2044      	movs	r0, #68	; 0x44
24011e1a:	4639      	mov	r1, r7
{
24011e1c:	ed2d 8b02 	vpush	{d8}
24011e20:	eef0 8a40 	vmov.f32	s17, s0
24011e24:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011e28:	f001 fe2c 	bl	24013a84 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011e2c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 24011ee8 <tSVF_init+0xd8>
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011e30:	4604      	mov	r4, r0
    LEAF* leaf = svf->mempool->leaf;
24011e32:	687b      	ldr	r3, [r7, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011e34:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->invSampleRate = leaf->invSampleRate;
24011e38:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->sampleRate = leaf->sampleRate;
24011e3c:	681b      	ldr	r3, [r3, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011e3e:	6030      	str	r0, [r6, #0]
    svf->ic1eq = 0;
24011e40:	2600      	movs	r6, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011e42:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24011e46:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->mempool = m;
24011e4a:	6007      	str	r7, [r0, #0]
    svf->sampleRate = leaf->sampleRate;
24011e4c:	63c3      	str	r3, [r0, #60]	; 0x3c
    svf->type = type;
24011e4e:	7105      	strb	r5, [r0, #4]
    svf->ic1eq = 0;
24011e50:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
24011e52:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
24011e54:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24011e58:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011e5c:	f007 fb2c 	bl	240194b8 <tanf>
    svf->k = 1.0f/Q;
24011e60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011e64:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24011e68:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
24011e6a:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
24011e6c:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
24011e70:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
24011e72:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
24011e74:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011e78:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
24011e7c:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011e80:	eeb0 7a67 	vmov.f32	s14, s15
24011e84:	eea0 7a26 	vfma.f32	s14, s0, s13
24011e88:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
24011e8c:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011e90:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
24011e94:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
24011e98:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24011e9c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
24011ea0:	d007      	beq.n	24011eb2 <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24011ea2:	2d02      	cmp	r5, #2
24011ea4:	d008      	beq.n	24011eb8 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
24011ea6:	b96d      	cbnz	r5, 24011ec4 <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24011ea8:	4b10      	ldr	r3, [pc, #64]	; (24011eec <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24011eaa:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24011eae:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
24011eb0:	6363      	str	r3, [r4, #52]	; 0x34
}
24011eb2:	ecbd 8b02 	vpop	{d8}
24011eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24011eb8:	ecbd 8b02 	vpop	{d8}
        svf->cB = 1.0f;
24011ebc:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
24011ec0:	6366      	str	r6, [r4, #52]	; 0x34
}
24011ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
24011ec4:	2d03      	cmp	r5, #3
24011ec6:	d009      	beq.n	24011edc <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
24011ec8:	2d04      	cmp	r5, #4
24011eca:	d1f2      	bne.n	24011eb2 <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24011ecc:	4a07      	ldr	r2, [pc, #28]	; (24011eec <tSVF_init+0xdc>)
        svf->cL = -2.0f;
24011ece:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24011ed2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24011ed6:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
24011ed8:	6363      	str	r3, [r4, #52]	; 0x34
}
24011eda:	e7ea      	b.n	24011eb2 <tSVF_init+0xa2>
        svf->cBK = -1.0f;
24011edc:	4b03      	ldr	r3, [pc, #12]	; (24011eec <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24011ede:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
24011ee2:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
24011ee4:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
24011ee6:	e7e4      	b.n	24011eb2 <tSVF_init+0xa2>
24011ee8:	40490fdb 	.word	0x40490fdb
24011eec:	bf800000 	.word	0xbf800000

24011ef0 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
24011ef0:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24011ef2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
24011ef6:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011efa:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24011efe:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011f02:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
24011f06:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24011f0a:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
24011f0e:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
24011f12:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011f16:	edd3 2a08 	vldr	s5, [r3, #32]
24011f1a:	ee67 7a84 	vmul.f32	s15, s15, s8
24011f1e:	ed93 2a07 	vldr	s4, [r3, #28]
24011f22:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24011f26:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
24011f2a:	eea2 5a23 	vfma.f32	s10, s4, s7
24011f2e:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011f32:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24011f36:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24011f3a:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24011f3e:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24011f42:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24011f46:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24011f4a:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24011f4e:	edc3 6a05 	vstr	s13, [r3, #20]
}
24011f52:	eea3 7a80 	vfma.f32	s14, s7, s0
24011f56:	eeb0 0a47 	vmov.f32	s0, s14
24011f5a:	4770      	bx	lr

24011f5c <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
24011f5c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011f60:	4a18      	ldr	r2, [pc, #96]	; (24011fc4 <tSVF_setFreqFast+0x68>)
24011f62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
24011f66:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
24011f68:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011f6c:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011f70:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
24011f74:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011f78:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
24011f7c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011f80:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
24011f84:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011f88:	ee76 6a86 	vadd.f32	s13, s13, s12
24011f8c:	ed90 6a00 	vldr	s12, [r0]
24011f90:	ee20 0a25 	vmul.f32	s0, s0, s11
24011f94:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011f98:	eef0 6a67 	vmov.f32	s13, s15
24011f9c:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011fa0:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011fa4:	eee0 6a07 	vfma.f32	s13, s0, s14
24011fa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
24011fac:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011fb0:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
24011fb4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
24011fb8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24011fbc:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
24011fc0:	4770      	bx	lr
24011fc2:	bf00      	nop
24011fc4:	2401b300 	.word	0x2401b300

24011fc8 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24011fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24011fcc:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011fce:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
24011fd2:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
24011fd6:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011fda:	eeb0 6a47 	vmov.f32	s12, s14
24011fde:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
24011fe2:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011fe6:	eea7 6aa5 	vfma.f32	s12, s15, s11
24011fea:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24011fee:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011ff2:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
24011ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24011ffa:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24011ffe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24012002:	4770      	bx	lr

24012004 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
24012004:	b538      	push	{r3, r4, r5, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
24012006:	698c      	ldr	r4, [r1, #24]
{
24012008:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401200a:	2018      	movs	r0, #24
2401200c:	4621      	mov	r1, r4
{
2401200e:	ed2d 8b02 	vpush	{d8}
24012012:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24012016:	f001 fda9 	bl	24013b6c <mpool_calloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401201a:	6862      	ldr	r2, [r4, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401201c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->ys = 0.0f;
24012020:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012022:	ed92 7a03 	vldr	s14, [r2, #12]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24012026:	6028      	str	r0, [r5, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012028:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
    
    f->frequency = freq;
2401202c:	ed80 8a04 	vstr	s16, [r0, #16]
    f->mempool = m;
24012030:	6004      	str	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012032:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
24012036:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
24012038:	6043      	str	r3, [r0, #4]
}
2401203a:	ecbd 8b02 	vpop	{d8}
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401203e:	edc0 7a03 	vstr	s15, [r0, #12]
}
24012042:	bd38      	pop	{r3, r4, r5, pc}

24012044 <tHighpass_initToPool>:
{
24012044:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24012046:	680c      	ldr	r4, [r1, #0]
{
24012048:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401204a:	2018      	movs	r0, #24
2401204c:	4621      	mov	r1, r4
{
2401204e:	ed2d 8b02 	vpush	{d8}
24012052:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24012056:	f001 fd89 	bl	24013b6c <mpool_calloc>
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401205a:	6862      	ldr	r2, [r4, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401205c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->ys = 0.0f;
24012060:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012062:	ed92 7a03 	vldr	s14, [r2, #12]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24012066:	6028      	str	r0, [r5, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012068:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->frequency = freq;
2401206c:	ed80 8a04 	vstr	s16, [r0, #16]
    f->mempool = m;
24012070:	6004      	str	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012072:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
24012076:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
24012078:	6043      	str	r3, [r0, #4]
}
2401207a:	ecbd 8b02 	vpop	{d8}
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401207e:	edc0 7a03 	vstr	s15, [r0, #12]
}
24012082:	bd38      	pop	{r3, r4, r5, pc}

24012084 <tHighpass_setFreq>:
    mpool_free((char*)f, f->mempool);
}

void tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
24012084:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012086:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401208a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
2401208e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24012092:	eee7 7a40 	vfms.f32	s15, s14, s0
24012096:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401209a:	4770      	bx	lr

2401209c <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
2401209c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
2401209e:	edd3 7a01 	vldr	s15, [r3, #4]
240120a2:	ed93 7a02 	vldr	s14, [r3, #8]
240120a6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
240120aa:	ed83 0a01 	vstr	s0, [r3, #4]
240120ae:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
240120b2:	ee30 0a27 	vadd.f32	s0, s0, s15
240120b6:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
240120ba:	4770      	bx	lr

240120bc <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, float sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240120bc:	eddf 6a07 	vldr	s13, [pc, #28]	; 240120dc <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240120c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
240120c4:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240120c6:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240120ca:	edd3 6a04 	vldr	s13, [r3, #16]
240120ce:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240120d2:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240120d6:	edc3 7a03 	vstr	s15, [r3, #12]
}
240120da:	4770      	bx	lr
240120dc:	40c90fdb 	.word	0x40c90fdb

240120e0 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
240120e0:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240120e2:	edd3 6a03 	vldr	s13, [r3, #12]
240120e6:	ed93 7a02 	vldr	s14, [r3, #8]
240120ea:	ee70 7a66 	vsub.f32	s15, s0, s13
240120ee:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
240120f2:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240120f6:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240120fa:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
240120fe:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24012102:	edd3 4a08 	vldr	s9, [r3, #32]
24012106:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401210a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2401210e:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24012112:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
24012116:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401211a:	eeb0 5a47 	vmov.f32	s10, s14
2401211e:	eea4 0a87 	vfma.f32	s0, s9, s14
24012122:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24012126:	eef0 7a66 	vmov.f32	s15, s13
}
2401212a:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
2401212e:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24012132:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
24012136:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401213a:	4770      	bx	lr

2401213c <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
2401213c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
2401213e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012140:	eddf 7a98 	vldr	s15, [pc, #608]	; 240123a4 <tVZFilter_calcCoeffs+0x268>
24012144:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
{
24012148:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401214c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24012150:	ee68 8a87 	vmul.f32	s17, s17, s14
24012154:	ee68 8aa7 	vmul.f32	s17, s17, s15
24012158:	eeb0 0a68 	vmov.f32	s0, s17
2401215c:	f007 f9ac 	bl	240194b8 <tanf>
    
    switch( f->type )
24012160:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012162:	eeb0 8a40 	vmov.f32	s16, s0
24012166:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
2401216a:	2b0a      	cmp	r3, #10
2401216c:	f200 8117 	bhi.w	2401239e <tVZFilter_calcCoeffs+0x262>
24012170:	e8df f013 	tbh	[pc, r3, lsl #1]
24012174:	002f0026 	.word	0x002f0026
24012178:	00410038 	.word	0x00410038
2401217c:	0056004d 	.word	0x0056004d
24012180:	00a1008b 	.word	0x00a1008b
24012184:	010a00b7 	.word	0x010a00b7
24012188:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
2401218a:	edd4 7a05 	vldr	s15, [r4, #20]
2401218e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012192:	eeb1 7a67 	vneg.f32	s14, s15
24012196:	61e3      	str	r3, [r4, #28]
24012198:	6263      	str	r3, [r4, #36]	; 0x24
2401219a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401219e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240121a2:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240121a6:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
240121aa:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240121ae:	eee7 6a88 	vfma.f32	s13, s15, s16
}
240121b2:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240121b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
240121ba:	edc4 7a06 	vstr	s15, [r4, #24]
}
240121be:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240121c0:	2300      	movs	r3, #0
240121c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240121c6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240121ca:	61e3      	str	r3, [r4, #28]
240121cc:	6223      	str	r3, [r4, #32]
240121ce:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240121d0:	e7e5      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240121d2:	2300      	movs	r3, #0
240121d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240121d8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240121dc:	6223      	str	r3, [r4, #32]
240121de:	6263      	str	r3, [r4, #36]	; 0x24
240121e0:	61e2      	str	r2, [r4, #28]
            break;
240121e2:	e7dc      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240121e4:	2300      	movs	r3, #0
240121e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240121ea:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240121ee:	61e3      	str	r3, [r4, #28]
240121f0:	6263      	str	r3, [r4, #36]	; 0x24
240121f2:	6222      	str	r2, [r4, #32]
            break;
240121f4:	e7d3      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240121f6:	edd4 7a05 	vldr	s15, [r4, #20]
240121fa:	2300      	movs	r3, #0
240121fc:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24012200:	61e3      	str	r3, [r4, #28]
24012202:	ee27 7a27 	vmul.f32	s14, s14, s15
24012206:	6263      	str	r3, [r4, #36]	; 0x24
24012208:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2401220c:	e7c7      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401220e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012212:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24012214:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012218:	6222      	str	r2, [r4, #32]
2401221a:	61e3      	str	r3, [r4, #28]
2401221c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401221e:	e7be      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012220:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012224:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012228:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401222c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012230:	f006 ffe2 	bl	240191f8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012234:	ee28 0a80 	vmul.f32	s0, s17, s0
24012238:	f007 f93e 	bl	240194b8 <tanf>
            float r  = f->g/wl;
2401223c:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012240:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24012244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012248:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
2401224c:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012250:	ed84 7a07 	vstr	s14, [r4, #28]
24012254:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012258:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401225c:	eea7 7aa7 	vfma.f32	s14, s15, s15
24012260:	eef0 6a47 	vmov.f32	s13, s14
24012264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24012268:	ee77 7a45 	vsub.f32	s15, s14, s10
2401226c:	ee67 7aa5 	vmul.f32	s15, s15, s11
24012270:	ee87 7a86 	vdiv.f32	s14, s15, s12
24012274:	eef1 7ac7 	vsqrt.f32	s15, s14
24012278:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401227c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012280:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012284:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24012288:	e789      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
2401228a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401228e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24012292:	edd4 7a05 	vldr	s15, [r4, #20]
24012296:	eef1 6ac7 	vsqrt.f32	s13, s14
2401229a:	ed84 7a07 	vstr	s14, [r4, #28]
2401229e:	6263      	str	r3, [r4, #36]	; 0x24
240122a0:	ee27 6a27 	vmul.f32	s12, s14, s15
240122a4:	ed84 6a08 	vstr	s12, [r4, #32]
240122a8:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240122ac:	ee80 8a07 	vdiv.f32	s16, s0, s14
240122b0:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240122b4:	e773      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
240122b6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240122ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240122be:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240122c2:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240122c6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240122ca:	61e3      	str	r3, [r4, #28]
240122cc:	ee27 6a27 	vmul.f32	s12, s14, s15
240122d0:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240122d4:	eeb1 7ae6 	vsqrt.f32	s14, s13
240122d8:	ee20 8a07 	vmul.f32	s16, s0, s14
240122dc:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240122e0:	e75d      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
240122e2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240122e6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240122ea:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240122ee:	eddf 0a2e 	vldr	s1, [pc, #184]	; 240123a8 <tVZFilter_calcCoeffs+0x26c>
240122f2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
240122f6:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240122fa:	eeb0 0a48 	vmov.f32	s0, s16
240122fe:	eea7 0a67 	vfms.f32	s0, s14, s15
24012302:	f001 fba3 	bl	24013a4c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012306:	eddf 0a28 	vldr	s1, [pc, #160]	; 240123a8 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401230a:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401230e:	eeb0 0a68 	vmov.f32	s0, s17
24012312:	f001 fb9f 	bl	24013a54 <minimum>
            f->cB = 1.0f-x*x;
24012316:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401231a:	edd4 7a05 	vldr	s15, [r4, #20]
2401231e:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24012322:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012326:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
2401232a:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401232e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012332:	ee76 5a06 	vadd.f32	s11, s12, s12
24012336:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
2401233a:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401233e:	eee6 7a06 	vfma.f32	s15, s12, s12
24012342:	eee0 7a00 	vfma.f32	s15, s0, s0
24012346:	eee0 7a65 	vfms.f32	s15, s0, s11
2401234a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
2401234e:	f001 f901 	bl	24013554 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24012352:	edd4 5a07 	vldr	s11, [r4, #28]
24012356:	ed94 6a08 	vldr	s12, [r4, #32]
2401235a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
2401235e:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012362:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24012366:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401236a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
2401236e:	ee65 5a80 	vmul.f32	s11, s11, s0
24012372:	ee26 6a00 	vmul.f32	s12, s12, s0
24012376:	ee26 0a80 	vmul.f32	s0, s13, s0
2401237a:	edc4 5a07 	vstr	s11, [r4, #28]
2401237e:	ed84 6a08 	vstr	s12, [r4, #32]
24012382:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24012386:	e70a      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24012388:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2401238c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24012390:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24012392:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24012396:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
2401239a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401239c:	e6ff      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
2401239e:	edd4 7a05 	vldr	s15, [r4, #20]
240123a2:	e6fc      	b.n	2401219e <tVZFilter_calcCoeffs+0x62>
240123a4:	40490fdb 	.word	0x40490fdb
240123a8:	00000000 	.word	0x00000000

240123ac <tVZFilter_initToPool>:
{
240123ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
240123ae:	6817      	ldr	r7, [r2, #0]
{
240123b0:	4605      	mov	r5, r0
240123b2:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240123b4:	204c      	movs	r0, #76	; 0x4c
240123b6:	4639      	mov	r1, r7
{
240123b8:	ed2d 8b04 	vpush	{d8-d9}
240123bc:	b083      	sub	sp, #12
240123be:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240123c2:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
240123c6:	ed9f 8a43 	vldr	s16, [pc, #268]	; 240124d4 <tVZFilter_initToPool+0x128>
{
240123ca:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240123ce:	f001 fb59 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
240123d2:	687b      	ldr	r3, [r7, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240123d4:	4604      	mov	r4, r0
240123d6:	6028      	str	r0, [r5, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240123d8:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
240123dc:	edd3 7a00 	vldr	s15, [r3]
    f->invSampleRate = leaf->invSampleRate;
240123e0:	685b      	ldr	r3, [r3, #4]
    f->mempool = m;
240123e2:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240123e4:	ee27 1aa9 	vmul.f32	s2, s15, s19
    f->sampleRate = leaf->sampleRate;
240123e8:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
240123ec:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240123ee:	eddd 0a01 	vldr	s1, [sp, #4]
240123f2:	f021 fcb5 	bl	24033d60 <__LEAF_clip_veneer>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240123f6:	ed9f 9a38 	vldr	s18, [pc, #224]	; 240124d8 <tVZFilter_initToPool+0x12c>
    f->invG = 1.0f/ONE_OVER_SQRT2;
240123fa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 240124dc <tVZFilter_initToPool+0x130>
    f->R2Plusg = f->R2 + f->g;
240123fe:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012402:	ee20 6a09 	vmul.f32	s12, s0, s18
24012406:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
2401240a:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
2401240e:	4b34      	ldr	r3, [pc, #208]	; (240124e0 <tVZFilter_initToPool+0x134>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
24012410:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
24012414:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
24012416:	ed84 7a05 	vstr	s14, [r4, #20]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401241a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401241e:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
24012422:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
24012424:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
24012428:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
2401242c:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
24012430:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
24012434:	ed84 8a03 	vstr	s16, [r4, #12]
    f->R2Plusg = f->R2 + f->g;
24012438:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401243c:	f007 f83c 	bl	240194b8 <tanf>
24012440:	eef0 7a40 	vmov.f32	s15, s0
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012444:	ed9f 1a27 	vldr	s2, [pc, #156]	; 240124e4 <tVZFilter_initToPool+0x138>
24012448:	eef0 0a68 	vmov.f32	s1, s17
2401244c:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24012450:	682e      	ldr	r6, [r5, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012452:	edc4 7a04 	vstr	s15, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012456:	f021 fc83 	bl	24033d60 <__LEAF_clip_veneer>
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
2401245a:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401245e:	eef0 7a40 	vmov.f32	s15, s0
    _tVZFilter* f = *vf;
24012462:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24012464:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012468:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401246c:	edc6 7a0e 	vstr	s15, [r6, #56]	; 0x38
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24012470:	f006 fec2 	bl	240191f8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012474:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24012478:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
2401247c:	ee67 7a87 	vmul.f32	s15, s15, s14
24012480:	ee67 7a89 	vmul.f32	s15, s15, s18
24012484:	ee27 0a80 	vmul.f32	s0, s15, s0
24012488:	f007 f816 	bl	240194b8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
2401248c:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24012490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24012494:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24012496:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401249a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
2401249e:	ee27 7a07 	vmul.f32	s14, s14, s14
240124a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
240124a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
240124aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
240124ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
240124b2:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
240124b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
240124ba:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
240124be:	f7ff fe3d 	bl	2401213c <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
240124c2:	4628      	mov	r0, r5
}
240124c4:	b003      	add	sp, #12
240124c6:	ecbd 8b04 	vpop	{d8-d9}
240124ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
240124ce:	f7ff be35 	b.w	2401213c <tVZFilter_calcCoeffs>
240124d2:	bf00      	nop
240124d4:	00000000 	.word	0x00000000
240124d8:	40490fdb 	.word	0x40490fdb
240124dc:	3fb504f3 	.word	0x3fb504f3
240124e0:	3f3504f3 	.word	0x3f3504f3
240124e4:	42c80000 	.word	0x42c80000

240124e8 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
240124e8:	3218      	adds	r2, #24
240124ea:	f7ff bf5f 	b.w	240123ac <tVZFilter_initToPool>
240124ee:	bf00      	nop

240124f0 <tVZFilter_setFreq>:
{
240124f0:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
240124f2:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240124f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
240124f8:	4604      	mov	r4, r0
240124fa:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240124fe:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
24012502:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2401251c <tVZFilter_setFreq+0x2c>
24012506:	ee21 1a27 	vmul.f32	s2, s2, s15
2401250a:	f021 fc29 	bl	24033d60 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
2401250e:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012510:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
24012514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012518:	f7ff be10 	b.w	2401213c <tVZFilter_calcCoeffs>
2401251c:	00000000 	.word	0x00000000

24012520 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
24012520:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012524:	4baa      	ldr	r3, [pc, #680]	; (240127d0 <tVZFilter_setFreqFast+0x2b0>)
24012526:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
2401252a:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401252e:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
24012532:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012536:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
2401253a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401253e:	ed91 6a01 	vldr	s12, [r1, #4]
{
24012542:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
24012544:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
24012548:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401254a:	ee37 7a26 	vadd.f32	s14, s14, s13
2401254e:	edd1 6a00 	vldr	s13, [r1]
24012552:	ee67 7a86 	vmul.f32	s15, s15, s12
{
24012556:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401255a:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
2401255e:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012560:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24012564:	2a0a      	cmp	r2, #10
24012566:	f200 812f 	bhi.w	240127c8 <tVZFilter_setFreqFast+0x2a8>
2401256a:	e8df f012 	tbh	[pc, r2, lsl #1]
2401256e:	0026      	.short	0x0026
24012570:	0038002f 	.word	0x0038002f
24012574:	004d0041 	.word	0x004d0041
24012578:	009b0056 	.word	0x009b0056
2401257c:	00cf00b5 	.word	0x00cf00b5
24012580:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24012584:	ed94 7a05 	vldr	s14, [r4, #20]
24012588:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401258c:	eef1 6a47 	vneg.f32	s13, s14
24012590:	61e3      	str	r3, [r4, #28]
24012592:	6263      	str	r3, [r4, #36]	; 0x24
24012594:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
24012598:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401259c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
}
240125a0:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240125a4:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
240125a8:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240125ac:	eee0 6a27 	vfma.f32	s13, s0, s15
240125b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
240125b4:	edc4 7a06 	vstr	s15, [r4, #24]
}
240125b8:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240125ba:	2300      	movs	r3, #0
240125bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240125c0:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240125c4:	61e3      	str	r3, [r4, #28]
240125c6:	6223      	str	r3, [r4, #32]
240125c8:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240125ca:	e7e5      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240125cc:	2300      	movs	r3, #0
240125ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240125d2:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240125d6:	6223      	str	r3, [r4, #32]
240125d8:	6263      	str	r3, [r4, #36]	; 0x24
240125da:	61e2      	str	r2, [r4, #28]
            break;
240125dc:	e7dc      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240125de:	2300      	movs	r3, #0
240125e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240125e4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240125e8:	61e3      	str	r3, [r4, #28]
240125ea:	6263      	str	r3, [r4, #36]	; 0x24
240125ec:	6222      	str	r2, [r4, #32]
            break;
240125ee:	e7d3      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240125f0:	ed94 7a05 	vldr	s14, [r4, #20]
240125f4:	2300      	movs	r3, #0
240125f6:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240125fa:	61e3      	str	r3, [r4, #28]
240125fc:	ee66 6a87 	vmul.f32	s13, s13, s14
24012600:	6263      	str	r3, [r4, #36]	; 0x24
24012602:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24012606:	e7c7      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012608:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401260c:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
2401260e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012612:	6222      	str	r2, [r4, #32]
24012614:	61e3      	str	r3, [r4, #28]
24012616:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012618:	e7be      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401261a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2401261e:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012622:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012626:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401262a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401262e:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012632:	f000 ffd3 	bl	240135dc <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012636:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401263a:	eddf 7a66 	vldr	s15, [pc, #408]	; 240127d4 <tVZFilter_setFreqFast+0x2b4>
2401263e:	ee28 8a07 	vmul.f32	s16, s16, s14
24012642:	ee28 8a27 	vmul.f32	s16, s16, s15
24012646:	ee28 0a00 	vmul.f32	s0, s16, s0
2401264a:	f000 ff6f 	bl	2401352c <fastertanf>
            float r  = f->g/wl;
2401264e:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012652:	eeb0 5a68 	vmov.f32	s10, s17
24012656:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
2401265a:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401265e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24012662:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012666:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401266a:	eea7 5aa7 	vfma.f32	s10, s15, s15
2401266e:	ee85 7a27 	vdiv.f32	s14, s10, s15
24012672:	ee77 7a65 	vsub.f32	s15, s14, s11
24012676:	ee67 7a86 	vmul.f32	s15, s15, s12
2401267a:	ee87 0aa6 	vdiv.f32	s0, s15, s13
2401267e:	f000 ff69 	bl	24013554 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012682:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24012686:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401268a:	edc4 8a07 	vstr	s17, [r4, #28]
2401268e:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012692:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012696:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401269a:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401269e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240126a2:	e779      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
240126a4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
240126a8:	f000 ff54 	bl	24013554 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240126ac:	f000 ff52 	bl	24013554 <fastsqrtf>
240126b0:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240126b4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240126b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240126bc:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240126c0:	ed94 7a05 	vldr	s14, [r4, #20]
240126c4:	edc4 6a07 	vstr	s13, [r4, #28]
240126c8:	6263      	str	r3, [r4, #36]	; 0x24
240126ca:	ee66 6a87 	vmul.f32	s13, s13, s14
240126ce:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240126d2:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
240126d6:	e75f      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
240126d8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
240126dc:	f000 ff3a 	bl	24013554 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240126e0:	f000 ff38 	bl	24013554 <fastsqrtf>
240126e4:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240126e8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240126ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240126f0:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240126f4:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240126f8:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
240126fc:	ee67 6a26 	vmul.f32	s13, s14, s13
24012700:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012702:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012706:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
2401270a:	e745      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
2401270c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012710:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24012714:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012718:	eddf 0a2f 	vldr	s1, [pc, #188]	; 240127d8 <tVZFilter_setFreqFast+0x2b8>
2401271c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
24012720:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012724:	eeb0 0a48 	vmov.f32	s0, s16
24012728:	eea7 0a67 	vfms.f32	s0, s14, s15
2401272c:	f001 f98e 	bl	24013a4c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012730:	eddf 0a29 	vldr	s1, [pc, #164]	; 240127d8 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012734:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012738:	eeb0 0a68 	vmov.f32	s0, s17
2401273c:	f001 f98a 	bl	24013a54 <minimum>
            f->cB = 1.0f-x*x;
24012740:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012744:	edd4 7a05 	vldr	s15, [r4, #20]
24012748:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
2401274c:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012750:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24012754:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012758:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401275c:	ee76 5a06 	vadd.f32	s11, s12, s12
24012760:	ee38 8a08 	vadd.f32	s16, s16, s16
24012764:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24012768:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401276c:	eee6 7a06 	vfma.f32	s15, s12, s12
24012770:	eee0 7a00 	vfma.f32	s15, s0, s0
24012774:	eee0 7a65 	vfms.f32	s15, s0, s11
24012778:	ee86 0aa7 	vdiv.f32	s0, s13, s15
2401277c:	f000 feea 	bl	24013554 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24012780:	edd4 5a07 	vldr	s11, [r4, #28]
24012784:	ed94 6a08 	vldr	s12, [r4, #32]
24012788:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
2401278c:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012790:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24012794:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24012798:	ee65 5a80 	vmul.f32	s11, s11, s0
2401279c:	ee26 6a00 	vmul.f32	s12, s12, s0
240127a0:	ee26 0a80 	vmul.f32	s0, s13, s0
240127a4:	edc4 5a07 	vstr	s11, [r4, #28]
240127a8:	ed84 6a08 	vstr	s12, [r4, #32]
240127ac:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
240127b0:	e6f2      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
240127b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
240127b6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
240127ba:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
240127bc:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
240127c0:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
240127c4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240127c6:	e6e7      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
240127c8:	ed94 7a05 	vldr	s14, [r4, #20]
240127cc:	e6e4      	b.n	24012598 <tVZFilter_setFreqFast+0x78>
240127ce:	bf00      	nop
240127d0:	2401b300 	.word	0x2401b300
240127d4:	40490fdb 	.word	0x40490fdb
240127d8:	00000000 	.word	0x00000000

240127dc <tVZFilter_setGain>:
{
240127dc:	b538      	push	{r3, r4, r5, lr}
240127de:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240127e2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 2401280c <tVZFilter_setGain+0x30>
240127e6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24012810 <tVZFilter_setGain+0x34>
{
240127ea:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240127ec:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240127ee:	f021 fab7 	bl	24033d60 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
240127f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240127f6:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240127f8:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
240127fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012800:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
24012804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012808:	f7ff bc98 	b.w	2401213c <tVZFilter_calcCoeffs>
2401280c:	457a0000 	.word	0x457a0000
24012810:	358637bd 	.word	0x358637bd

24012814 <tVZFilter_setResonance>:
{
24012814:	b538      	push	{r3, r4, r5, lr}
24012816:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2401281a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24012844 <tVZFilter_setResonance+0x30>
2401281e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24012848 <tVZFilter_setResonance+0x34>
{
24012822:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24012824:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012826:	f021 fa9b 	bl	24033d60 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
2401282a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
2401282e:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012830:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24012834:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012838:	edc5 7a05 	vstr	s15, [r5, #20]
}
2401283c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012840:	f7ff bc7c 	b.w	2401213c <tVZFilter_calcCoeffs>
24012844:	42c80000 	.word	0x42c80000
24012848:	3c23d70a 	.word	0x3c23d70a

2401284c <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
2401284c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
24012850:	b510      	push	{r4, lr}
    f->invSampleRate = 1.0f/f->sampleRate;
24012852:	eec7 7a00 	vdiv.f32	s15, s14, s0
    _tVZFilter* f = *vf;
24012856:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012858:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
{
2401285c:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012860:	eddf 8a97 	vldr	s17, [pc, #604]	; 24012ac0 <tVZFilter_setSampleRate+0x274>
    f->sampleRate = sr;
24012864:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012868:	ee67 8aa8 	vmul.f32	s17, s15, s17
    f->invSampleRate = 1.0f/f->sampleRate;
2401286c:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012870:	ee68 8a87 	vmul.f32	s17, s17, s14
24012874:	eeb0 0a68 	vmov.f32	s0, s17
24012878:	f006 fe1e 	bl	240194b8 <tanf>
    switch( f->type )
2401287c:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401287e:	eeb0 8a40 	vmov.f32	s16, s0
24012882:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24012886:	2b0a      	cmp	r3, #10
24012888:	f200 8117 	bhi.w	24012aba <tVZFilter_setSampleRate+0x26e>
2401288c:	e8df f013 	tbh	[pc, r3, lsl #1]
24012890:	002f0026 	.word	0x002f0026
24012894:	00410038 	.word	0x00410038
24012898:	0056004d 	.word	0x0056004d
2401289c:	00a1008b 	.word	0x00a1008b
240128a0:	010a00b7 	.word	0x010a00b7
240128a4:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
240128a6:	edd4 7a05 	vldr	s15, [r4, #20]
240128aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240128ae:	eeb1 7a67 	vneg.f32	s14, s15
240128b2:	61e3      	str	r3, [r4, #28]
240128b4:	6263      	str	r3, [r4, #36]	; 0x24
240128b6:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240128ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240128be:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240128c2:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
240128c6:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240128ca:	eee7 6a88 	vfma.f32	s13, s15, s16
    tVZFilter_calcCoeffs(vf);
}
240128ce:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240128d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
240128d6:	edc4 7a06 	vstr	s15, [r4, #24]
}
240128da:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240128dc:	2300      	movs	r3, #0
240128de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240128e2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240128e6:	61e3      	str	r3, [r4, #28]
240128e8:	6223      	str	r3, [r4, #32]
240128ea:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240128ec:	e7e5      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240128ee:	2300      	movs	r3, #0
240128f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240128f4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240128f8:	6223      	str	r3, [r4, #32]
240128fa:	6263      	str	r3, [r4, #36]	; 0x24
240128fc:	61e2      	str	r2, [r4, #28]
            break;
240128fe:	e7dc      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24012900:	2300      	movs	r3, #0
24012902:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24012906:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401290a:	61e3      	str	r3, [r4, #28]
2401290c:	6263      	str	r3, [r4, #36]	; 0x24
2401290e:	6222      	str	r2, [r4, #32]
            break;
24012910:	e7d3      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012912:	edd4 7a05 	vldr	s15, [r4, #20]
24012916:	2300      	movs	r3, #0
24012918:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2401291c:	61e3      	str	r3, [r4, #28]
2401291e:	ee27 7a27 	vmul.f32	s14, s14, s15
24012922:	6263      	str	r3, [r4, #36]	; 0x24
24012924:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24012928:	e7c7      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401292a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401292e:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24012930:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012934:	6222      	str	r2, [r4, #32]
24012936:	61e3      	str	r3, [r4, #28]
24012938:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401293a:	e7be      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401293c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012940:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012944:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012948:	ee60 0aa7 	vmul.f32	s1, s1, s15
2401294c:	f006 fc54 	bl	240191f8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012950:	ee28 0a80 	vmul.f32	s0, s17, s0
24012954:	f006 fdb0 	bl	240194b8 <tanf>
            float r  = f->g/wl;
24012958:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401295c:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24012960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012964:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24012968:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401296c:	ed84 7a07 	vstr	s14, [r4, #28]
24012970:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012974:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012978:	eea7 7aa7 	vfma.f32	s14, s15, s15
2401297c:	eef0 6a47 	vmov.f32	s13, s14
24012980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24012984:	ee77 7a45 	vsub.f32	s15, s14, s10
24012988:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401298c:	ee87 7a86 	vdiv.f32	s14, s15, s12
24012990:	eef1 7ac7 	vsqrt.f32	s15, s14
24012994:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012998:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401299c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240129a0:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
240129a4:	e789      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            float A = sqrtf(f->G);
240129a6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240129aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240129ae:	edd4 7a05 	vldr	s15, [r4, #20]
240129b2:	eef1 6ac7 	vsqrt.f32	s13, s14
240129b6:	ed84 7a07 	vstr	s14, [r4, #28]
240129ba:	6263      	str	r3, [r4, #36]	; 0x24
240129bc:	ee27 6a27 	vmul.f32	s12, s14, s15
240129c0:	ed84 6a08 	vstr	s12, [r4, #32]
240129c4:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240129c8:	ee80 8a07 	vdiv.f32	s16, s0, s14
240129cc:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240129d0:	e773      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            float A = sqrtf(f->G);
240129d2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240129d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240129da:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240129de:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240129e2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240129e6:	61e3      	str	r3, [r4, #28]
240129e8:	ee27 6a27 	vmul.f32	s12, s14, s15
240129ec:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240129f0:	eeb1 7ae6 	vsqrt.f32	s14, s13
240129f4:	ee20 8a07 	vmul.f32	s16, s0, s14
240129f8:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240129fc:	e75d      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            float x  = (2.0f*f->m-1.0f);
240129fe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012a02:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24012a06:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012a0a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24012ac4 <tVZFilter_setSampleRate+0x278>
24012a0e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
24012a12:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012a16:	eeb0 0a48 	vmov.f32	s0, s16
24012a1a:	eea7 0a67 	vfms.f32	s0, s14, s15
24012a1e:	f001 f815 	bl	24013a4c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012a22:	eddf 0a28 	vldr	s1, [pc, #160]	; 24012ac4 <tVZFilter_setSampleRate+0x278>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012a26:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012a2a:	eeb0 0a68 	vmov.f32	s0, s17
24012a2e:	f001 f811 	bl	24013a54 <minimum>
            f->cB = 1.0f-x*x;
24012a32:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a36:	edd4 7a05 	vldr	s15, [r4, #20]
24012a3a:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24012a3e:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a42:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24012a46:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012a4a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a4e:	ee76 5a06 	vadd.f32	s11, s12, s12
24012a52:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24012a56:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a5a:	eee6 7a06 	vfma.f32	s15, s12, s12
24012a5e:	eee0 7a00 	vfma.f32	s15, s0, s0
24012a62:	eee0 7a65 	vfms.f32	s15, s0, s11
24012a66:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24012a6a:	f000 fd73 	bl	24013554 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24012a6e:	edd4 5a07 	vldr	s11, [r4, #28]
24012a72:	ed94 6a08 	vldr	s12, [r4, #32]
24012a76:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24012a7a:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a7e:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24012a82:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a86:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24012a8a:	ee65 5a80 	vmul.f32	s11, s11, s0
24012a8e:	ee26 6a00 	vmul.f32	s12, s12, s0
24012a92:	ee26 0a80 	vmul.f32	s0, s13, s0
24012a96:	edc4 5a07 	vstr	s11, [r4, #28]
24012a9a:	ed84 6a08 	vstr	s12, [r4, #32]
24012a9e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24012aa2:	e70a      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
            f->cL = 1.0f;
24012aa4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24012aa8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24012aac:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24012aae:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24012ab2:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24012ab6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012ab8:	e6ff      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
    f->R2Plusg = f->R2+f->g;
24012aba:	edd4 7a05 	vldr	s15, [r4, #20]
24012abe:	e6fc      	b.n	240128ba <tVZFilter_setSampleRate+0x6e>
24012ac0:	40490fdb 	.word	0x40490fdb
24012ac4:	00000000 	.word	0x00000000

24012ac8 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
24012ac8:	b570      	push	{r4, r5, r6, lr}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24012aca:	698d      	ldr	r5, [r1, #24]
{
24012acc:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012ace:	2040      	movs	r0, #64	; 0x40
24012ad0:	4629      	mov	r1, r5
{
24012ad2:	ed2d 8b02 	vpush	{d8}
24012ad6:	eeb0 8a40 	vmov.f32	s16, s0
24012ada:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012ade:	f000 ffd1 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24012ae2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24012b5c <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012ae6:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
24012ae8:	686b      	ldr	r3, [r5, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24012aea:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
24012aee:	ed93 0a01 	vldr	s0, [r3, #4]
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24012af2:	6030      	str	r0, [r6, #0]
    f->invSampleRate = leaf->invSampleRate;
24012af4:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24012af8:	ee27 0a80 	vmul.f32	s0, s15, s0
    f->cutoff = cutoff;
24012afc:	ed80 8a01 	vstr	s16, [r0, #4]
    f->mempool = m;
24012b00:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24012b02:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24012b06:	f006 f9a3 	bl	24018e50 <tan>
    f->r = (7.f * resonance + 0.5f);
24012b0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012b0e:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24012b12:	4913      	ldr	r1, [pc, #76]	; (24012b60 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
24012b14:	4b13      	ldr	r3, [pc, #76]	; (24012b64 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24012b16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
24012b1a:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
24012b1e:	2000      	movs	r0, #0
    f->n = 1.836f;
24012b20:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24012b22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
24012b26:	4910      	ldr	r1, [pc, #64]	; (24012b68 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
24012b28:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
24012b2c:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
24012b2e:	4b0f      	ldr	r3, [pc, #60]	; (24012b6c <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
24012b30:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
24012b32:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
24012b34:	480e      	ldr	r0, [pc, #56]	; (24012b70 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
24012b36:	490f      	ldr	r1, [pc, #60]	; (24012b74 <tDiodeFilter_init+0xac>)
    f->g0inv = 1.f/(2.f*f->Vt);
24012b38:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
24012b3a:	6323      	str	r3, [r4, #48]	; 0x30
    f->g2inv = 1.f/(6.f*f->gamma);
24012b3c:	4a0e      	ldr	r2, [pc, #56]	; (24012b78 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
24012b3e:	4b0f      	ldr	r3, [pc, #60]	; (24012b7c <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24012b40:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
24012b44:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24012b48:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
24012b4c:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
24012b4e:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24012b50:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
24012b52:	63a3      	str	r3, [r4, #56]	; 0x38
}
24012b54:	ecbd 8b02 	vpop	{d8}
24012b58:	bd70      	pop	{r4, r5, r6, pc}
24012b5a:	bf00      	nop
24012b5c:	40490fdb 	.word	0x40490fdb
24012b60:	3feb020c 	.word	0x3feb020c
24012b64:	3f6b020c 	.word	0x3f6b020c
24012b68:	3c23d70a 	.word	0x3c23d70a
24012b6c:	3ca3d70a 	.word	0x3ca3d70a
24012b70:	3cf5c28f 	.word	0x3cf5c28f
24012b74:	3f0b6efd 	.word	0x3f0b6efd
24012b78:	3e39e952 	.word	0x3e39e952
24012b7c:	3d23d70a 	.word	0x3d23d70a

24012b80 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
24012b80:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012b82:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012b86:	ed9f 2aba 	vldr	s4, [pc, #744]	; 24012e70 <tDiodeFilter_tick+0x2f0>
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012b8a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
24012b8e:	edd3 1a03 	vldr	s3, [r3, #12]
    float ih = 0.5f * (in + f->zi);
24012b92:	edd3 4a07 	vldr	s9, [r3, #28]
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012b96:	ee26 7ae1 	vnmul.f32	s14, s13, s3
24012b9a:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
24012b9e:	ee70 4a24 	vadd.f32	s9, s0, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012ba2:	eddf 7ab4 	vldr	s15, [pc, #720]	; 24012e74 <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012ba6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 24012e78 <tDiodeFilter_tick+0x2f8>
24012baa:	eeb0 1a67 	vmov.f32	s2, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bae:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bb2:	eea4 7a84 	vfma.f32	s14, s9, s8
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bb6:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012bba:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bbe:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
24012bc2:	ee73 5ac3 	vsub.f32	s11, s7, s6
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bc6:	ed93 5a02 	vldr	s10, [r3, #8]
{
24012bca:	ed2d 8b06 	vpush	{d8-d10}
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012bce:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bd2:	ee27 7a22 	vmul.f32	s14, s14, s5
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012bd6:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012bda:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
24012bde:	ee27 7a07 	vmul.f32	s14, s14, s14
24012be2:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012be6:	eeb0 9a42 	vmov.f32	s18, s4
24012bea:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012bee:	ee77 4a20 	vadd.f32	s9, s14, s1
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012bf2:	eef0 9a42 	vmov.f32	s19, s4
24012bf6:	eef0 8a67 	vmov.f32	s17, s15
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012bfa:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012bfe:	eef0 4a67 	vmov.f32	s9, s15
24012c02:	eee7 4a04 	vfma.f32	s9, s14, s8
24012c06:	eeb0 7a42 	vmov.f32	s14, s4
24012c0a:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012c0e:	ee81 4a24 	vdiv.f32	s8, s2, s9
24012c12:	ee75 4aa0 	vadd.f32	s9, s11, s1
24012c16:	eeb0 1a67 	vmov.f32	s2, s15
24012c1a:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c1e:	eef0 4a67 	vmov.f32	s9, s15
24012c22:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012c26:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012c2a:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012c2e:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012c32:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
24012c36:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012c3a:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012c3e:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012c42:	ee24 4a06 	vmul.f32	s8, s8, s12
24012c46:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
24012c4a:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012c4e:	ee25 5a25 	vmul.f32	s10, s10, s11
24012c52:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
24012c56:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c5a:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
24012c5e:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c62:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012c66:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c6a:	eee5 9a88 	vfma.f32	s19, s11, s16
24012c6e:	eeb0 8a67 	vmov.f32	s16, s15
24012c72:	eee1 8a09 	vfma.f32	s17, s2, s18
24012c76:	eeb0 9a67 	vmov.f32	s18, s15
24012c7a:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012c7e:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012c82:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012c86:	ee75 9aa0 	vadd.f32	s19, s11, s1
24012c8a:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012c8e:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012c92:	eec2 5a09 	vdiv.f32	s11, s4, s18
24012c96:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012c9a:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012c9e:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012ca2:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012ca6:	eea1 9a25 	vfma.f32	s18, s2, s11
24012caa:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012cae:	eee1 aaa2 	vfma.f32	s21, s3, s5
24012cb2:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012cb6:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012cba:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012cbe:	ee89 2a28 	vdiv.f32	s4, s18, s17
24012cc2:	eec7 5a88 	vdiv.f32	s11, s15, s16
24012cc6:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012cca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012cce:	ee31 1a20 	vadd.f32	s2, s2, s1
24012cd2:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012cd6:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012cda:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012cde:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012ce2:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012ce6:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012cea:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012cee:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012cf2:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012cf6:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012cfa:	eeaa aa87 	vfma.f32	s20, s21, s14
24012cfe:	ee68 aa07 	vmul.f32	s21, s16, s14
24012d02:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d06:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012d0a:	eeea 5a82 	vfma.f32	s11, s21, s4
24012d0e:	eeb0 1a65 	vmov.f32	s2, s11
24012d12:	eef0 5a45 	vmov.f32	s11, s10
24012d16:	eeea 5a89 	vfma.f32	s11, s21, s18
24012d1a:	eee1 5a27 	vfma.f32	s11, s2, s15
24012d1e:	ee35 1a09 	vadd.f32	s2, s10, s18
24012d22:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d26:	ee66 9a87 	vmul.f32	s19, s13, s14
24012d2a:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012d2e:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d32:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012d36:	eee1 5a06 	vfma.f32	s11, s2, s12
24012d3a:	eeb0 1a66 	vmov.f32	s2, s13
24012d3e:	eea9 1a89 	vfma.f32	s2, s19, s18
24012d42:	eea2 1a27 	vfma.f32	s2, s4, s15
24012d46:	ee34 2a04 	vadd.f32	s4, s8, s8
24012d4a:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012d4e:	eeb0 2a41 	vmov.f32	s4, s2
24012d52:	eea0 4aa7 	vfma.f32	s8, s1, s15
24012d56:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24012d5a:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
24012d5e:	eef4 5a44 	vcmp.f32	s11, s8
24012d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24012d66:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012d6a:	bf14      	ite	ne
24012d6c:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
24012d70:	eddf 5a42 	vldreq	s11, [pc, #264]	; 24012e7c <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
24012d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24012d78:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
24012d7c:	d069      	beq.n	24012e52 <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24012d7e:	eef5 7a40 	vcmp.f32	s15, #0.0
24012d82:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24012d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d8a:	ee37 2a02 	vadd.f32	s4, s14, s4
24012d8e:	d069      	beq.n	24012e64 <tDiodeFilter_tick+0x2e4>
24012d90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24012d94:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24012d98:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
24012d9c:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012da0:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
24012da4:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
24012da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012dac:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
24012db0:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
24012db4:	bf08      	it	eq
24012db6:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 24012e7c <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
24012dba:	eeb0 0a61 	vmov.f32	s0, s3
24012dbe:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012dc2:	ee38 4a06 	vadd.f32	s8, s16, s12
24012dc6:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012dca:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012dce:	eed4 8a20 	vfnms.f32	s17, s8, s1
24012dd2:	eea6 8a20 	vfma.f32	s16, s12, s1
24012dd6:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012dda:	ee95 8a84 	vfnms.f32	s16, s11, s8
24012dde:	eee7 1a84 	vfma.f32	s3, s15, s8
24012de2:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012de6:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012dea:	ee35 2ac4 	vsub.f32	s4, s11, s8
24012dee:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012df2:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012df6:	ee74 1a60 	vsub.f32	s3, s8, s1
24012dfa:	ee61 1a86 	vmul.f32	s3, s3, s12
24012dfe:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012e02:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012e06:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012e0a:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012e0e:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012e12:	ee75 5ac8 	vsub.f32	s11, s11, s16
24012e16:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24012e1a:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012e1e:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012e22:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012e26:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012e2a:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012e2e:	eee2 4a05 	vfma.f32	s9, s4, s10
}
24012e32:	ecbd 8b06 	vpop	{d8-d10}
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012e36:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012e3a:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012e3e:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012e42:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012e46:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012e4a:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    return tanhf(y3*f->r);
24012e4e:	f006 bb5f 	b.w	24019510 <tanhf>
    if (t2 == 0.0f)
24012e52:	eef5 7a40 	vcmp.f32	s15, #0.0
24012e56:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24012e80 <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
24012e5a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24012e7c <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
24012e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e62:	d195      	bne.n	24012d90 <tDiodeFilter_tick+0x210>
24012e64:	eddf 5a06 	vldr	s11, [pc, #24]	; 24012e80 <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
24012e68:	eddf 7a04 	vldr	s15, [pc, #16]	; 24012e7c <tDiodeFilter_tick+0x2fc>
24012e6c:	e794      	b.n	24012d98 <tDiodeFilter_tick+0x218>
24012e6e:	bf00      	nop
24012e70:	43d20000 	.word	0x43d20000
24012e74:	446c4000 	.word	0x446c4000
24012e78:	42d20000 	.word	0x42d20000
24012e7c:	358637bd 	.word	0x358637bd
24012e80:	3f800008 	.word	0x3f800008

24012e84 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
24012e84:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012e86:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012e8a:	ed9f 2aba 	vldr	s4, [pc, #744]	; 24013174 <tDiodeFilter_tickEfficient+0x2f0>
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012e8e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
24012e92:	edd3 1a03 	vldr	s3, [r3, #12]
    float ih = 0.5f * (in + f->zi);
24012e96:	edd3 4a07 	vldr	s9, [r3, #28]
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012e9a:	ee26 7ae1 	vnmul.f32	s14, s13, s3
24012e9e:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
24012ea2:	ee70 4a24 	vadd.f32	s9, s0, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012ea6:	eddf 7ab4 	vldr	s15, [pc, #720]	; 24013178 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012eaa:	eddf 0ab4 	vldr	s1, [pc, #720]	; 2401317c <tDiodeFilter_tickEfficient+0x2f8>
24012eae:	eeb0 1a67 	vmov.f32	s2, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012eb2:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012eb6:	eea4 7a84 	vfma.f32	s14, s9, s8
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012eba:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012ebe:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012ec2:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
24012ec6:	ee73 5ac3 	vsub.f32	s11, s7, s6
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012eca:	ed93 5a02 	vldr	s10, [r3, #8]
{
24012ece:	ed2d 8b06 	vpush	{d8-d10}
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012ed2:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012ed6:	ee27 7a22 	vmul.f32	s14, s14, s5
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012eda:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012ede:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
24012ee2:	ee27 7a07 	vmul.f32	s14, s14, s14
24012ee6:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012eea:	eeb0 9a42 	vmov.f32	s18, s4
24012eee:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012ef2:	ee77 4a20 	vadd.f32	s9, s14, s1
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012ef6:	eef0 9a42 	vmov.f32	s19, s4
24012efa:	eef0 8a67 	vmov.f32	s17, s15
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012efe:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f02:	eef0 4a67 	vmov.f32	s9, s15
24012f06:	eee7 4a04 	vfma.f32	s9, s14, s8
24012f0a:	eeb0 7a42 	vmov.f32	s14, s4
24012f0e:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012f12:	ee81 4a24 	vdiv.f32	s8, s2, s9
24012f16:	ee75 4aa0 	vadd.f32	s9, s11, s1
24012f1a:	eeb0 1a67 	vmov.f32	s2, s15
24012f1e:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f22:	eef0 4a67 	vmov.f32	s9, s15
24012f26:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012f2a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012f2e:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012f32:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012f36:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
24012f3a:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012f3e:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012f42:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012f46:	ee24 4a06 	vmul.f32	s8, s8, s12
24012f4a:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
24012f4e:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012f52:	ee25 5a25 	vmul.f32	s10, s10, s11
24012f56:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
24012f5a:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f5e:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
24012f62:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f66:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012f6a:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f6e:	eee5 9a88 	vfma.f32	s19, s11, s16
24012f72:	eeb0 8a67 	vmov.f32	s16, s15
24012f76:	eee1 8a09 	vfma.f32	s17, s2, s18
24012f7a:	eeb0 9a67 	vmov.f32	s18, s15
24012f7e:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012f82:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012f86:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012f8a:	ee75 9aa0 	vadd.f32	s19, s11, s1
24012f8e:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012f92:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012f96:	eec2 5a09 	vdiv.f32	s11, s4, s18
24012f9a:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012f9e:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012fa2:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012fa6:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012faa:	eea1 9a25 	vfma.f32	s18, s2, s11
24012fae:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012fb2:	eee1 aaa2 	vfma.f32	s21, s3, s5
24012fb6:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012fba:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012fbe:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012fc2:	ee89 2a28 	vdiv.f32	s4, s18, s17
24012fc6:	eec7 5a88 	vdiv.f32	s11, s15, s16
24012fca:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012fce:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012fd2:	ee31 1a20 	vadd.f32	s2, s2, s1
24012fd6:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012fda:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012fde:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012fe2:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012fe6:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012fea:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012fee:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012ff2:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012ff6:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012ffa:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012ffe:	eeaa aa87 	vfma.f32	s20, s21, s14
24013002:	ee68 aa07 	vmul.f32	s21, s16, s14
24013006:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401300a:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401300e:	eeea 5a82 	vfma.f32	s11, s21, s4
24013012:	eeb0 1a65 	vmov.f32	s2, s11
24013016:	eef0 5a45 	vmov.f32	s11, s10
2401301a:	eeea 5a89 	vfma.f32	s11, s21, s18
2401301e:	eee1 5a27 	vfma.f32	s11, s2, s15
24013022:	ee35 1a09 	vadd.f32	s2, s10, s18
24013026:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401302a:	ee66 9a87 	vmul.f32	s19, s13, s14
2401302e:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013032:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013036:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401303a:	eee1 5a06 	vfma.f32	s11, s2, s12
2401303e:	eeb0 1a66 	vmov.f32	s2, s13
24013042:	eea9 1a89 	vfma.f32	s2, s19, s18
24013046:	eea2 1a27 	vfma.f32	s2, s4, s15
2401304a:	ee34 2a04 	vadd.f32	s4, s8, s8
2401304e:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013052:	eeb0 2a41 	vmov.f32	s4, s2
24013056:	eea0 4aa7 	vfma.f32	s8, s1, s15
2401305a:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
2401305e:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
24013062:	eef4 5a44 	vcmp.f32	s11, s8
24013066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
2401306a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401306e:	bf14      	ite	ne
24013070:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
24013074:	eddf 5a42 	vldreq	s11, [pc, #264]	; 24013180 <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
24013078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
2401307c:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
24013080:	d069      	beq.n	24013156 <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24013082:	eef5 7a40 	vcmp.f32	s15, #0.0
24013086:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
2401308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401308e:	ee37 2a02 	vadd.f32	s4, s14, s4
24013092:	d069      	beq.n	24013168 <tDiodeFilter_tickEfficient+0x2e4>
24013094:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013098:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
2401309c:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
240130a0:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240130a4:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
240130a8:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
240130ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240130b0:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
240130b4:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
240130b8:	bf08      	it	eq
240130ba:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 24013180 <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
240130be:	eeb0 0a61 	vmov.f32	s0, s3
240130c2:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240130c6:	ee38 4a06 	vadd.f32	s8, s16, s12
240130ca:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
240130ce:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240130d2:	eed4 8a20 	vfnms.f32	s17, s8, s1
240130d6:	eea6 8a20 	vfma.f32	s16, s12, s1
240130da:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
240130de:	ee95 8a84 	vfnms.f32	s16, s11, s8
240130e2:	eee7 1a84 	vfma.f32	s3, s15, s8
240130e6:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240130ea:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240130ee:	ee35 2ac4 	vsub.f32	s4, s11, s8
240130f2:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240130f6:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
240130fa:	ee74 1a60 	vsub.f32	s3, s8, s1
240130fe:	ee61 1a86 	vmul.f32	s3, s3, s12
24013102:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013106:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401310a:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401310e:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013112:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013116:	ee75 5ac8 	vsub.f32	s11, s11, s16
2401311a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
2401311e:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013122:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24013126:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401312a:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401312e:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013132:	eee2 4a05 	vfma.f32	s9, s4, s10
}
24013136:	ecbd 8b06 	vpop	{d8-d10}
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401313a:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401313e:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013142:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013146:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401314a:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401314e:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    return LEAF_tanh(y3*f->r);
24013152:	f000 babd 	b.w	240136d0 <LEAF_tanh>
    if (t2 == 0.0f)
24013156:	eef5 7a40 	vcmp.f32	s15, #0.0
2401315a:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24013184 <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
2401315e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013180 <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
24013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013166:	d195      	bne.n	24013094 <tDiodeFilter_tickEfficient+0x210>
24013168:	eddf 5a06 	vldr	s11, [pc, #24]	; 24013184 <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
2401316c:	eddf 7a04 	vldr	s15, [pc, #16]	; 24013180 <tDiodeFilter_tickEfficient+0x2fc>
24013170:	e794      	b.n	2401309c <tDiodeFilter_tickEfficient+0x218>
24013172:	bf00      	nop
24013174:	43d20000 	.word	0x43d20000
24013178:	446c4000 	.word	0x446c4000
2401317c:	42d20000 	.word	0x42d20000
24013180:	358637bd 	.word	0x358637bd
24013184:	3f800008 	.word	0x3f800008

24013188 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
24013188:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401318c:	4b0d      	ldr	r3, [pc, #52]	; (240131c4 <tDiodeFilter_setFreqFast+0x3c>)
2401318e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013192:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24013194:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
24013198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401319c:	ee77 7ac0 	vsub.f32	s15, s15, s0
240131a0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
240131a4:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240131a8:	edd0 6a01 	vldr	s13, [r0, #4]
240131ac:	ee77 7a87 	vadd.f32	s15, s15, s14
240131b0:	ed90 7a00 	vldr	s14, [r0]
240131b4:	ee20 0a26 	vmul.f32	s0, s0, s13
240131b8:	eea7 0a27 	vfma.f32	s0, s14, s15
240131bc:	ed81 0a02 	vstr	s0, [r1, #8]
}
240131c0:	4770      	bx	lr
240131c2:	bf00      	nop
240131c4:	2401b300 	.word	0x2401b300

240131c8 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
240131c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240131cc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
240131d0:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
240131d4:	eef0 0a67 	vmov.f32	s1, s15
{
240131d8:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
240131da:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
240131dc:	eee0 0a07 	vfma.f32	s1, s0, s14
240131e0:	eeb0 0a67 	vmov.f32	s0, s15
240131e4:	f020 fdbc 	bl	24033d60 <__LEAF_clip_veneer>
240131e8:	ed84 0a03 	vstr	s0, [r4, #12]
}
240131ec:	bd10      	pop	{r4, pc}
240131ee:	bf00      	nop

240131f0 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
240131f0:	b570      	push	{r4, r5, r6, lr}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
240131f2:	698d      	ldr	r5, [r1, #24]
{
240131f4:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
240131f6:	2038      	movs	r0, #56	; 0x38
240131f8:	4629      	mov	r1, r5
{
240131fa:	ed2d 8b02 	vpush	{d8}
240131fe:	eef0 8a40 	vmov.f32	s17, s0
24013202:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24013206:	f000 fc3d 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
2401320a:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401326c <tLadderFilter_init+0x7c>
    f->oversampling = 1;
2401320e:	2301      	movs	r3, #1
    f->invSampleRate = leaf->invSampleRate;
24013210:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24013212:	4604      	mov	r4, r0
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
24013214:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
24013218:	ed92 0a01 	vldr	s0, [r2, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401321c:	6030      	str	r0, [r6, #0]
    f->invSampleRate = leaf->invSampleRate;
2401321e:	ed80 0a02 	vstr	s0, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
24013222:	ee27 0a80 	vmul.f32	s0, s15, s0
    f->cutoff = cutoff;
24013226:	edc0 8a01 	vstr	s17, [r0, #4]
    f->oversampling = 1;
2401322a:	60c3      	str	r3, [r0, #12]
    f->mempool = m;
2401322c:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
2401322e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24013232:	f005 fe0d 	bl	24018e50 <tan>
24013236:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
2401323a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
2401323e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
24013242:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
24013246:	490a      	ldr	r1, [pc, #40]	; (24013270 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
24013248:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
2401324c:	4b09      	ldr	r3, [pc, #36]	; (24013274 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
2401324e:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
24013252:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
24013256:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
24013258:	6221      	str	r1, [r4, #32]
    f->fb = (resonance * 8.0f);
2401325a:	ed84 8a05 	vstr	s16, [r4, #20]
    f->d = 1.0f;
2401325e:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
24013260:	edc4 7a06 	vstr	s15, [r4, #24]
    f->b[0] = 0.04f;
24013264:	62a3      	str	r3, [r4, #40]	; 0x28
}
24013266:	ecbd 8b02 	vpop	{d8}
2401326a:	bd70      	pop	{r4, r5, r6, pc}
2401326c:	40490fdb 	.word	0x40490fdb
24013270:	3dcccccd 	.word	0x3dcccccd
24013274:	3d23d70a 	.word	0x3d23d70a

24013278 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
24013278:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
2401327a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 240134b8 <tLadderFilter_tick+0x240>
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
2401327e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24013280:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24013284:	2900      	cmp	r1, #0
{
24013286:	ed2d 8b10 	vpush	{d8-d15}
    for (int i = 0; i < f->oversampling; i++) {
2401328a:	f340 8110 	ble.w	240134ae <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401328e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
24013292:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24013296:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
2401329a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
2401329e:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240132a2:	ed92 7a08 	vldr	s14, [r2, #32]
240132a6:	ee72 2a27 	vadd.f32	s5, s4, s15
240132aa:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
240132ae:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240132b2:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240132b6:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
240132ba:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
240132be:	ee25 9a28 	vmul.f32	s18, s10, s17
240132c2:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240132c6:	ee62 2a87 	vmul.f32	s5, s5, s14
240132ca:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240132ce:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
240132d2:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
240132d4:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240132d8:	ed9f 8a78 	vldr	s16, [pc, #480]	; 240134bc <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240132dc:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
240132e0:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
240132e2:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
240132e6:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
240132ea:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240132ec:	ee65 5aa5 	vmul.f32	s11, s11, s11
240132f0:	ee26 6a06 	vmul.f32	s12, s12, s12
240132f4:	ee66 6aa6 	vmul.f32	s13, s13, s13
240132f8:	ee22 baa5 	vmul.f32	s22, s5, s11
240132fc:	ee26 ca22 	vmul.f32	s24, s12, s5
24013300:	ee72 5a25 	vadd.f32	s11, s4, s11
24013304:	ee32 6a06 	vadd.f32	s12, s4, s12
24013308:	ee66 baa2 	vmul.f32	s23, s13, s5
2401330c:	eecb ea25 	vdiv.f32	s29, s22, s11
24013310:	ee8c ba06 	vdiv.f32	s22, s24, s12
24013314:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
24013318:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401331c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
24013320:	ee27 7a07 	vmul.f32	s14, s14, s14
24013324:	ee77 eaee 	vsub.f32	s29, s15, s29
24013328:	ee77 6acb 	vsub.f32	s13, s15, s22
2401332c:	ee62 5a87 	vmul.f32	s11, s5, s14
24013330:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
24013334:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24013338:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
2401333c:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24013340:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
24013344:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
24013348:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
2401334c:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
24013350:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
24013354:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
24013358:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401335c:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
24013360:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
24013364:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
24013368:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401336c:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
24013370:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
24013374:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24013378:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
2401337c:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24013380:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
24013384:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
24013388:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
2401338c:	ee73 5a2a 	vadd.f32	s11, s6, s21
24013390:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
24013394:	ee66 6a26 	vmul.f32	s13, s12, s13
24013398:	ee65 5a89 	vmul.f32	s11, s11, s18
2401339c:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
240133a0:	ee2f 6a2e 	vmul.f32	s12, s30, s29
240133a4:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
240133a8:	ee2d 7a07 	vmul.f32	s14, s26, s14
240133ac:	ee65 5a8f 	vmul.f32	s11, s11, s30
240133b0:	ee60 ea8e 	vmul.f32	s29, s1, s28
240133b4:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240133b8:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240133bc:	eeb0 ea67 	vmov.f32	s28, s15
240133c0:	eeab eaad 	vfma.f32	s28, s23, s27
240133c4:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
240133c8:	eeb0 ba67 	vmov.f32	s22, s15
240133cc:	eeec 5a84 	vfma.f32	s11, s25, s8
240133d0:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240133d4:	eec9 ba8e 	vdiv.f32	s23, s19, s28
240133d8:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
240133dc:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240133e0:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
240133e4:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
240133e8:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240133ec:	eef0 ca48 	vmov.f32	s25, s16
240133f0:	eeab da0b 	vfma.f32	s26, s22, s22
240133f4:	eee5 caa5 	vfma.f32	s25, s11, s11
240133f8:	eef1 5acd 	vsqrt.f32	s11, s26
240133fc:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24013400:	ee3b ba65 	vsub.f32	s22, s22, s11
24013404:	eef0 5a40 	vmov.f32	s11, s0
24013408:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
2401340c:	eeb0 ba43 	vmov.f32	s22, s6
24013410:	eea5 ba25 	vfma.f32	s22, s10, s11
24013414:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
24013418:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
2401341c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
24013420:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
24013424:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
24013428:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
2401342c:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
24013430:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
24013434:	ee36 6a66 	vsub.f32	s12, s12, s13
24013438:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401343c:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
24013440:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24013444:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
24013448:	ee76 6ac7 	vsub.f32	s13, s13, s14
2401344c:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24013450:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24013454:	ee37 7a4c 	vsub.f32	s14, s14, s24
24013458:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
2401345c:	f47f af3e 	bne.w	240132dc <tLadderFilter_tick+0x64>
24013460:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
24013464:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
24013468:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
2401346c:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013470:	ed9f 7a12 	vldr	s14, [pc, #72]	; 240134bc <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
24013474:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24013478:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401347c:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24013480:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24013484:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
24013488:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401348c:	eea0 7aa0 	vfma.f32	s14, s1, s1
24013490:	eef1 7ae5 	vsqrt.f32	s15, s11
24013494:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
24013498:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401349c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240134a0:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
240134a4:	ee20 0a0c 	vmul.f32	s0, s0, s24
240134a8:	ecbd 8b10 	vpop	{d8-d15}
240134ac:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240134ae:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
240134b2:	ed9f ca03 	vldr	s24, [pc, #12]	; 240134c0 <tLadderFilter_tick+0x248>
240134b6:	e7db      	b.n	24013470 <tLadderFilter_tick+0x1f8>
240134b8:	3c75c28f 	.word	0x3c75c28f
240134bc:	3c23d70a 	.word	0x3c23d70a
240134c0:	00000000 	.word	0x00000000

240134c4 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
240134c4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240134c8:	4b0f      	ldr	r3, [pc, #60]	; (24013508 <tLadderFilter_setFreqFast+0x44>)
240134ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
240134ce:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
240134d0:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
240134d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240134d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
240134dc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
240134e0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240134e4:	edd0 6a01 	vldr	s13, [r0, #4]
240134e8:	ee77 7a87 	vadd.f32	s15, s15, s14
240134ec:	ed90 7a00 	vldr	s14, [r0]
240134f0:	ee20 0a26 	vmul.f32	s0, s0, s13
240134f4:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
240134f8:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240134fc:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
24013500:	edc1 7a06 	vstr	s15, [r1, #24]
}
24013504:	4770      	bx	lr
24013506:	bf00      	nop
24013508:	2401b300 	.word	0x2401b300

2401350c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
2401350c:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
2401350e:	6804      	ldr	r4, [r0, #0]
{
24013510:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
24013514:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
24013518:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24013528 <tLadderFilter_setQ+0x1c>
2401351c:	f020 fc20 	bl	24033d60 <__LEAF_clip_veneer>
24013520:	ed84 0a05 	vstr	s0, [r4, #20]
}
24013524:	bd10      	pop	{r4, pc}
24013526:	bf00      	nop
24013528:	3e4ccccd 	.word	0x3e4ccccd

2401352c <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
2401352c:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
24013530:	ed9f 6a06 	vldr	s12, [pc, #24]	; 2401354c <fastertanf+0x20>
24013534:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013550 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
24013538:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
2401353c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
24013540:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24013544:	ee20 0a27 	vmul.f32	s0, s0, s15
24013548:	4770      	bx	lr
2401354a:	bf00      	nop
2401354c:	3e502de0 	.word	0x3e502de0
24013550:	3ea295ea 	.word	0x3ea295ea

24013554 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24013554:	ee10 2a10 	vmov	r2, s0
24013558:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
2401355c:	4b0d      	ldr	r3, [pc, #52]	; (24013594 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401355e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
24013562:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24013566:	ee60 7a27 	vmul.f32	s15, s0, s15
2401356a:	ee00 3a10 	vmov	s0, r3
2401356e:	ee67 7a80 	vmul.f32	s15, s15, s0
24013572:	eea0 7a67 	vfms.f32	s14, s0, s15
24013576:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
2401357a:	ee10 3a10 	vmov	r3, s0
2401357e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
24013582:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24013586:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
2401358a:	336e      	adds	r3, #110	; 0x6e
}
2401358c:	ee00 3a10 	vmov	s0, r3
24013590:	4770      	bx	lr
24013592:	bf00      	nop
24013594:	5f3759df 	.word	0x5f3759df

24013598 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
24013598:	ee10 3a10 	vmov	r3, s0
2401359c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240135a0:	ee00 3a10 	vmov	s0, r3
}
240135a4:	4770      	bx	lr
240135a6:	bf00      	nop

240135a8 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
240135a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240135ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240135d8 <fasterexpf+0x30>
240135b0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
240135b4:	ee27 0aa7 	vmul.f32	s0, s15, s15
240135b8:	ee20 0a00 	vmul.f32	s0, s0, s0
240135bc:	ee20 0a00 	vmul.f32	s0, s0, s0
240135c0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
240135c4:	ee20 0a00 	vmul.f32	s0, s0, s0
240135c8:	ee20 0a00 	vmul.f32	s0, s0, s0
240135cc:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
240135d0:	ee20 0a00 	vmul.f32	s0, s0, s0
240135d4:	4770      	bx	lr
240135d6:	bf00      	nop
240135d8:	3b800000 	.word	0x3b800000

240135dc <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240135dc:	ee10 3a10 	vmov	r3, s0
240135e0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013604 <fastPowf+0x28>
240135e4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
240135e8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
240135ec:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
240135f0:	330b      	adds	r3, #11
240135f2:	ee07 3a90 	vmov	s15, r3
240135f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240135fa:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
240135fe:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
24013602:	4770      	bx	lr
24013604:	4e7de250 	.word	0x4e7de250

24013608 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
24013608:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24013688 <LEAF_shaper+0x80>
2401360c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013614:	d406      	bmi.n	24013624 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
24013616:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2401368c <LEAF_shaper+0x84>
2401361a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013622:	dd02      	ble.n	2401362a <LEAF_shaper+0x22>
24013624:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 24013690 <LEAF_shaper+0x88>
}
24013628:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
2401362a:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401362e:	ed9f 5a19 	vldr	s10, [pc, #100]	; 24013694 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
24013632:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
24013636:	ed9f 4a18 	vldr	s8, [pc, #96]	; 24013698 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401363a:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
2401363e:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24013642:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
24013646:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
2401364a:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401364e:	eddf 5a13 	vldr	s11, [pc, #76]	; 2401369c <LEAF_shaper+0x94>
24013652:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
24013656:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401365a:	ee66 4aa6 	vmul.f32	s9, s13, s13
2401365e:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
24013662:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24013666:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401366a:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401366e:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
24013672:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24013676:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401367a:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
2401367e:	ee20 0a80 	vmul.f32	s0, s1, s0
24013682:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
24013686:	4770      	bx	lr
24013688:	bfb504f3 	.word	0xbfb504f3
2401368c:	3fb504f3 	.word	0x3fb504f3
24013690:	00000000 	.word	0x00000000
24013694:	3c800000 	.word	0x3c800000
24013698:	3f272f05 	.word	0x3f272f05
2401369c:	3d4ccccd 	.word	0x3d4ccccd

240136a0 <LEAF_round>:
    rnd = fabsf(rnd);
240136a0:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
240136a4:	eddf 7a06 	vldr	s15, [pc, #24]	; 240136c0 <LEAF_round+0x20>
240136a8:	eef4 0ae7 	vcmpe.f32	s1, s15
240136ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240136b0:	d905      	bls.n	240136be <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
240136b2:	eec0 7a20 	vdiv.f32	s15, s0, s1
240136b6:	feb8 0a67 	vrinta.f32	s0, s15
240136ba:	ee20 0a20 	vmul.f32	s0, s0, s1
}
240136be:	4770      	bx	lr
240136c0:	33d6bf95 	.word	0x33d6bf95

240136c4 <LEAF_bitwise_xor>:
    return unholy.f;
240136c4:	ee10 3a10 	vmov	r3, s0
240136c8:	4043      	eors	r3, r0
240136ca:	ee00 3a10 	vmov	s0, r3
}
240136ce:	4770      	bx	lr

240136d0 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
240136d0:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
240136d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240136d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240136dc:	d418      	bmi.n	24013710 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
240136de:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
240136e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
240136e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240136ea:	dd02      	ble.n	240136f2 <LEAF_tanh+0x22>
        return 1.0f;
240136ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
240136f0:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
240136f2:	ee60 6a00 	vmul.f32	s13, s0, s0
240136f6:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
240136fa:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
240136fe:	ee36 7aa7 	vadd.f32	s14, s13, s15
24013702:	eee6 7a86 	vfma.f32	s15, s13, s12
24013706:	ee27 7a00 	vmul.f32	s14, s14, s0
2401370a:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401370e:	4770      	bx	lr
        return -1.0f;
24013710:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24013714:	4770      	bx	lr
24013716:	bf00      	nop

24013718 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
24013718:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
2401371a:	1e4b      	subs	r3, r1, #1
2401371c:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
24013720:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
24013722:	ee07 3a90 	vmov	s15, r3
24013726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
2401372a:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
2401372e:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24013732:	dd16      	ble.n	24013762 <LEAF_generate_exp+0x4a>
24013734:	4604      	mov	r4, r0
24013736:	eb00 0581 	add.w	r5, r0, r1, lsl #2
2401373a:	eeb0 8a60 	vmov.f32	s16, s1
2401373e:	eef0 8a40 	vmov.f32	s17, s0
24013742:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24013746:	eef0 0a48 	vmov.f32	s1, s16
2401374a:	eeb0 0a68 	vmov.f32	s0, s17
2401374e:	f005 fd53 	bl	240191f8 <powf>
24013752:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24013756:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
2401375a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
2401375e:	42a5      	cmp	r5, r4
24013760:	d1f1      	bne.n	24013746 <LEAF_generate_exp+0x2e>
    }
}
24013762:	ecbd 8b04 	vpop	{d8-d9}
24013766:	bd38      	pop	{r3, r4, r5, pc}

24013768 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
24013768:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
2401376a:	ee31 1a40 	vsub.f32	s2, s2, s0
{
2401376e:	460d      	mov	r5, r1
24013770:	4604      	mov	r4, r0
24013772:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
24013776:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
2401377a:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
2401377e:	ee81 0a29 	vdiv.f32	s0, s2, s19
24013782:	f005 fc15 	bl	24018fb0 <logf>
    float increment = 1.0 / (float)(size-1);
24013786:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
24013788:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
2401378a:	ee07 3a90 	vmov	s15, r3
2401378e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013796:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
2401379a:	dd19      	ble.n	240137d0 <LEAF_generate_table_skew_non_sym+0x68>
2401379c:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 240137d8 <LEAF_generate_table_skew_non_sym+0x70>
240137a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
240137a4:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 240137dc <LEAF_generate_table_skew_non_sym+0x74>
240137a8:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
240137ac:	eeb0 0a48 	vmov.f32	s0, s16
240137b0:	f005 fbfe 	bl	24018fb0 <logf>
240137b4:	ee20 0a09 	vmul.f32	s0, s0, s18
240137b8:	f005 fb7e 	bl	24018eb8 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
240137bc:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
240137c0:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
240137c4:	eee9 7a80 	vfma.f32	s15, s19, s0
240137c8:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
240137cc:	42a5      	cmp	r5, r4
240137ce:	d1ed      	bne.n	240137ac <LEAF_generate_table_skew_non_sym+0x44>
    }
}
240137d0:	ecbd 8b06 	vpop	{d8-d10}
240137d4:	bd38      	pop	{r3, r4, r5, pc}
240137d6:	bf00      	nop
240137d8:	bfb8aa3b 	.word	0xbfb8aa3b
240137dc:	00000000 	.word	0x00000000

240137e0 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
240137e0:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
240137e2:	1e4b      	subs	r3, r1, #1
240137e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
240137e8:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
240137ea:	ee07 3a90 	vmov	s15, r3
240137ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240137f2:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
240137f6:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
240137fa:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
240137fe:	dd29      	ble.n	24013854 <LEAF_generate_mtof+0x74>
    float x = 0.0f;
24013800:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24013868 <LEAF_generate_mtof+0x88>
24013804:	eef0 9a40 	vmov.f32	s19, s0
24013808:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
2401380a:	eddf 8a18 	vldr	s17, [pc, #96]	; 2401386c <LEAF_generate_mtof+0x8c>
2401380e:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24013812:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24013870 <LEAF_generate_mtof+0x90>
24013816:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
2401381a:	ed9f ca16 	vldr	s24, [pc, #88]	; 24013874 <LEAF_generate_mtof+0x94>
2401381e:	eddf ba16 	vldr	s23, [pc, #88]	; 24013878 <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
24013822:	eeb0 0a69 	vmov.f32	s0, s19
24013826:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
2401382a:	e006      	b.n	2401383a <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
2401382c:	eeb4 0ac8 	vcmpe.f32	s0, s16
24013830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013834:	dd11      	ble.n	2401385a <LEAF_generate_mtof+0x7a>
24013836:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
2401383a:	eeb4 0ae8 	vcmpe.f32	s0, s17
2401383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013842:	d8f3      	bhi.n	2401382c <LEAF_generate_mtof+0x4c>
24013844:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24013848:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
2401384c:	42a5      	cmp	r5, r4
        x += increment;
2401384e:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24013852:	d1e6      	bne.n	24013822 <LEAF_generate_mtof+0x42>
}
24013854:	ecbd 8b0a 	vpop	{d8-d12}
24013858:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
2401385a:	ee20 0a0c 	vmul.f32	s0, s0, s24
2401385e:	f005 fb2b 	bl	24018eb8 <expf>
24013862:	ee60 7a2b 	vmul.f32	s15, s0, s23
24013866:	e7ef      	b.n	24013848 <LEAF_generate_mtof+0x68>
24013868:	00000000 	.word	0x00000000
2401386c:	c4bb8000 	.word	0xc4bb8000
24013870:	44bb6000 	.word	0x44bb6000
24013874:	3d6c9820 	.word	0x3d6c9820
24013878:	4102d013 	.word	0x4102d013

2401387c <LEAF_interpolate_hermite_x>:
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
2401387c:	ee71 1ac0 	vsub.f32	s3, s3, s0
24013880:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c1 = 0.5f * (yy2 - yy0);
24013884:	ee31 6a40 	vsub.f32	s12, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24013888:	ee71 1aa0 	vadd.f32	s3, s3, s1
2401388c:	eef0 7a60 	vmov.f32	s15, s1
24013890:	ee30 7ac1 	vsub.f32	s14, s1, s2
24013894:	ee71 1ac1 	vsub.f32	s3, s3, s2
24013898:	eed6 7a26 	vfnms.f32	s15, s12, s13
2401389c:	eea1 7aa6 	vfma.f32	s14, s3, s13
    float c2 = y0my1 + c1 - c3;
240138a0:	ee70 7a27 	vadd.f32	s15, s0, s15
240138a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
240138a8:	eee7 7a02 	vfma.f32	s15, s14, s4
240138ac:	ee67 7a82 	vmul.f32	s15, s15, s4
240138b0:	eee6 7a26 	vfma.f32	s15, s12, s13
}
240138b4:	eee7 0a82 	vfma.f32	s1, s15, s4
240138b8:	eeb0 0a60 	vmov.f32	s0, s1
240138bc:	4770      	bx	lr
240138be:	bf00      	nop

240138c0 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
240138c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
240138c4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 240138e4 <LEAF_interpolation_linear+0x24>
240138c8:	fe81 1a67 	vminnm.f32	s2, s2, s15
240138cc:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
240138d0:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
240138d4:	ee61 0a20 	vmul.f32	s1, s2, s1
}
240138d8:	eee7 0a80 	vfma.f32	s1, s15, s0
240138dc:	eeb0 0a60 	vmov.f32	s0, s1
240138e0:	4770      	bx	lr
240138e2:	bf00      	nop
240138e4:	00000000 	.word	0x00000000

240138e8 <mtof>:
    if (f <= -1500.0f) return(0);
240138e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24013928 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
240138ec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2401392c <mtof+0x44>
240138f0:	e006      	b.n	24013900 <mtof+0x18>
240138f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
240138f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138fa:	dd09      	ble.n	24013910 <mtof+0x28>
240138fc:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24013900:	eeb4 0ac7 	vcmpe.f32	s0, s14
24013904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013908:	d8f3      	bhi.n	240138f2 <mtof+0xa>
2401390a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24013930 <mtof+0x48>
}
2401390e:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24013910:	eddf 7a08 	vldr	s15, [pc, #32]	; 24013934 <mtof+0x4c>
{
24013914:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
24013916:	ee20 0a27 	vmul.f32	s0, s0, s15
2401391a:	f005 facd 	bl	24018eb8 <expf>
2401391e:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013938 <mtof+0x50>
24013922:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24013926:	bd08      	pop	{r3, pc}
24013928:	c4bb8000 	.word	0xc4bb8000
2401392c:	44bb6000 	.word	0x44bb6000
24013930:	00000000 	.word	0x00000000
24013934:	3d6c9820 	.word	0x3d6c9820
24013938:	4102d013 	.word	0x4102d013

2401393c <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
2401393c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013940:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24013974 <faster_mtof+0x38>
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

float faster_mtof(float f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24013944:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24013978 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24013948:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
2401394c:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013950:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013954:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013958:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
2401395c:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013960:	ee67 7aa7 	vmul.f32	s15, s15, s15
24013964:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24013968:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
2401396c:	ee27 0a87 	vmul.f32	s0, s15, s14
24013970:	4770      	bx	lr
24013972:	bf00      	nop
24013974:	396c9820 	.word	0x396c9820
24013978:	4102d013 	.word	0x4102d013

2401397c <ftom>:

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
2401397c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013984:	dd0b      	ble.n	2401399e <ftom+0x22>
24013986:	eddf 7a07 	vldr	s15, [pc, #28]	; 240139a4 <ftom+0x28>
{
2401398a:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
2401398c:	ee20 0a27 	vmul.f32	s0, s0, s15
24013990:	f005 fb0e 	bl	24018fb0 <logf>
24013994:	eddf 7a04 	vldr	s15, [pc, #16]	; 240139a8 <ftom+0x2c>
24013998:	ee20 0a27 	vmul.f32	s0, s0, s15
}
2401399c:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
2401399e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240139ac <ftom+0x30>
}
240139a2:	4770      	bx	lr
240139a4:	3dfa7ed2 	.word	0x3dfa7ed2
240139a8:	418a7fac 	.word	0x418a7fac
240139ac:	c4bb8000 	.word	0xc4bb8000

240139b0 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
240139b0:	b500      	push	{lr}
240139b2:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
240139b4:	eeb0 0ac0 	vabs.f32	s0, s0
240139b8:	a801      	add	r0, sp, #4
240139ba:	f004 ffa9 	bl	24018910 <frexpf>
    Y += -4.11852516267426f;
240139be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 240139f4 <fasteratodb+0x44>
240139c2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240139f8 <fasteratodb+0x48>
    Y += 6.02197014179219f;
240139c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 240139fc <fasteratodb+0x4c>
    Y += -4.11852516267426f;
240139ca:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
240139ce:	eddd 7a01 	vldr	s15, [sp, #4]
240139d2:	eddf 5a0b 	vldr	s11, [pc, #44]	; 24013a00 <fasteratodb+0x50>
240139d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
240139da:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 24013a04 <fasteratodb+0x54>
    Y += E;
240139de:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
240139e2:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
240139e6:	eee0 7a07 	vfma.f32	s15, s0, s14
}
240139ea:	ee27 0a86 	vmul.f32	s0, s15, s12
240139ee:	b003      	add	sp, #12
240139f0:	f85d fb04 	ldr.w	pc, [sp], #4
240139f4:	3f9da1a8 	.word	0x3f9da1a8
240139f8:	c083caf5 	.word	0xc083caf5
240139fc:	40c0b3fb 	.word	0x40c0b3fb
24013a00:	404892e0 	.word	0x404892e0
24013a04:	40c0a8c2 	.word	0x40c0a8c2

24013a08 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
24013a08:	eddf 7a02 	vldr	s15, [pc, #8]	; 24013a14 <fastdbtoa+0xc>
24013a0c:	ee20 0a27 	vmul.f32	s0, s0, s15
24013a10:	f005 ba52 	b.w	24018eb8 <expf>
24013a14:	3debc8e3 	.word	0x3debc8e3

24013a18 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24013a18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013a1c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24013a48 <fasterdbtoa+0x30>
24013a20:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24013a24:	ee27 0aa7 	vmul.f32	s0, s15, s15
24013a28:	ee20 0a00 	vmul.f32	s0, s0, s0
24013a2c:	ee20 0a00 	vmul.f32	s0, s0, s0
24013a30:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24013a34:	ee20 0a00 	vmul.f32	s0, s0, s0
24013a38:	ee20 0a00 	vmul.f32	s0, s0, s0
24013a3c:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
24013a40:	ee20 0a00 	vmul.f32	s0, s0, s0
24013a44:	4770      	bx	lr
24013a46:	bf00      	nop
24013a48:	39ebc8e3 	.word	0x39ebc8e3

24013a4c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
24013a4c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
24013a50:	4770      	bx	lr
24013a52:	bf00      	nop

24013a54 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24013a54:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24013a58:	4770      	bx	lr
24013a5a:	bf00      	nop

24013a5c <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24013a5c:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013a5e:	6a04      	ldr	r4, [r0, #32]
24013a60:	2510      	movs	r5, #16
    pool->usize  = 0;
24013a62:	2300      	movs	r3, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013a64:	6365      	str	r5, [r4, #52]	; 0x34
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24013a66:	194c      	adds	r4, r1, r5
    pool->msize  = size;
24013a68:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013a6a:	3a10      	subs	r2, #16
    pool->usize  = 0;
24013a6c:	e9c0 1309 	strd	r1, r3, [r0, #36]	; 0x24
    node->pool = block_location + header_size;
24013a70:	600c      	str	r4, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24013a72:	f100 041c 	add.w	r4, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24013a76:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24013a78:	e9c1 3301 	strd	r3, r3, [r1, #4]
    leaf->mempool = &leaf->_internal_mempool;
24013a7c:	6184      	str	r4, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013a7e:	6301      	str	r1, [r0, #48]	; 0x30
}
24013a80:	bc30      	pop	{r4, r5}
24013a82:	4770      	bx	lr

24013a84 <mpool_alloc>:
{
24013a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pool->leaf->allocCount++;
24013a88:	684d      	ldr	r5, [r1, #4]
    if (pool->head == NULL)
24013a8a:	694e      	ldr	r6, [r1, #20]
    pool->leaf->allocCount++;
24013a8c:	6cab      	ldr	r3, [r5, #72]	; 0x48
24013a8e:	3301      	adds	r3, #1
24013a90:	64ab      	str	r3, [r5, #72]	; 0x48
    if (pool->head == NULL)
24013a92:	2e00      	cmp	r6, #0
24013a94:	d056      	beq.n	24013b44 <mpool_alloc+0xc0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013a96:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
24013a98:	4634      	mov	r4, r6
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013a9a:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
24013a9e:	e002      	b.n	24013aa6 <mpool_alloc+0x22>
        node_to_alloc = node_to_alloc->next;
24013aa0:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
24013aa2:	2c00      	cmp	r4, #0
24013aa4:	d03d      	beq.n	24013b22 <mpool_alloc+0x9e>
    while (node_to_alloc->size < size_to_alloc)
24013aa6:	68e3      	ldr	r3, [r4, #12]
24013aa8:	4293      	cmp	r3, r2
24013aaa:	d3f9      	bcc.n	24013aa0 <mpool_alloc+0x1c>
    size_t leftover = node_to_alloc->size - size_to_alloc;
24013aac:	1a9f      	subs	r7, r3, r2
    if (leftover > pool->leaf->header_size)
24013aae:	6b68      	ldr	r0, [r5, #52]	; 0x34
    node_to_alloc->size = size_to_alloc;
24013ab0:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
24013ab2:	42b8      	cmp	r0, r7
24013ab4:	d242      	bcs.n	24013b3c <mpool_alloc+0xb8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013ab6:	f8d1 c008 	ldr.w	ip, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
24013aba:	1a3b      	subs	r3, r7, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
24013abc:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013abe:	eba4 070c 	sub.w	r7, r4, ip
        offset += pool->leaf->header_size + node_to_alloc->size;
24013ac2:	443a      	add	r2, r7
        new_node = create_node(&pool->mpool[offset],
24013ac4:	eb0c 0702 	add.w	r7, ip, r2
                               node_to_alloc->next,
24013ac8:	e9d4 8e01 	ldrd	r8, lr, [r4, #4]
    node->pool = block_location + header_size;
24013acc:	eb07 0900 	add.w	r9, r7, r0
24013ad0:	f84c 9002 	str.w	r9, [ip, r2]
    node->size = size;
24013ad4:	60fb      	str	r3, [r7, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013ad6:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
24013ad8:	e9c7 8e01 	strd	r8, lr, [r7, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24013adc:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
24013ade:	42a6      	cmp	r6, r4
        pool->head = new_node;
24013ae0:	bf08      	it	eq
24013ae2:	614f      	streq	r7, [r1, #20]
    if (node->next != NULL)
24013ae4:	b10a      	cbz	r2, 24013aea <mpool_alloc+0x66>
    {
        // Close the link
        node->next->prev = node->prev;
24013ae6:	68a6      	ldr	r6, [r4, #8]
24013ae8:	6096      	str	r6, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24013aea:	68a6      	ldr	r6, [r4, #8]
24013aec:	b106      	cbz	r6, 24013af0 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24013aee:	6072      	str	r2, [r6, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013af0:	68ca      	ldr	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
24013af2:	696d      	ldr	r5, [r5, #20]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013af4:	4402      	add	r2, r0
    }
    
    node->next = NULL;
24013af6:	2000      	movs	r0, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013af8:	441a      	add	r2, r3
    if (pool->leaf->clearOnAllocation > 0)
24013afa:	4285      	cmp	r5, r0
    node->prev = NULL;
24013afc:	e9c4 0001 	strd	r0, r0, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013b00:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
24013b02:	dd0a      	ble.n	24013b1a <mpool_alloc+0x96>
        char* new_pool = (char*)node_to_alloc->pool;
24013b04:	6825      	ldr	r5, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24013b06:	b373      	cbz	r3, 24013b66 <mpool_alloc+0xe2>
24013b08:	1e6a      	subs	r2, r5, #1
24013b0a:	4613      	mov	r3, r2
24013b0c:	f802 0f01 	strb.w	r0, [r2, #1]!
24013b10:	68e1      	ldr	r1, [r4, #12]
24013b12:	3302      	adds	r3, #2
24013b14:	1b5b      	subs	r3, r3, r5
24013b16:	4299      	cmp	r1, r3
24013b18:	d8f7      	bhi.n	24013b0a <mpool_alloc+0x86>
    return node_to_alloc->pool;
24013b1a:	6824      	ldr	r4, [r4, #0]
}
24013b1c:	4620      	mov	r0, r4
24013b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
24013b22:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
24013b26:	1a9b      	subs	r3, r3, r2
24013b28:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013b2a:	4628      	mov	r0, r5
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013b2c:	bf8c      	ite	hi
24013b2e:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013b30:	4621      	movls	r1, r4
24013b32:	f004 fe29 	bl	24018788 <LEAF_internalErrorCallback>
}
24013b36:	4620      	mov	r0, r4
24013b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_node = node_to_alloc->next;
24013b3c:	6867      	ldr	r7, [r4, #4]
        node_to_alloc->size += leftover;
24013b3e:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
24013b40:	463a      	mov	r2, r7
24013b42:	e7cc      	b.n	24013ade <mpool_alloc+0x5a>
        if ((pool->msize - pool->usize) > asize)
24013b44:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
24013b48:	1a9b      	subs	r3, r3, r2
24013b4a:	4283      	cmp	r3, r0
24013b4c:	d905      	bls.n	24013b5a <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013b4e:	2101      	movs	r1, #1
24013b50:	4628      	mov	r0, r5
        return NULL;
24013b52:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013b54:	f004 fe18 	bl	24018788 <LEAF_internalErrorCallback>
24013b58:	e7e0      	b.n	24013b1c <mpool_alloc+0x98>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013b5a:	4631      	mov	r1, r6
24013b5c:	4628      	mov	r0, r5
        return NULL;
24013b5e:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013b60:	f004 fe12 	bl	24018788 <LEAF_internalErrorCallback>
24013b64:	e7da      	b.n	24013b1c <mpool_alloc+0x98>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24013b66:	462c      	mov	r4, r5
    return node_to_alloc->pool;
24013b68:	e7d8      	b.n	24013b1c <mpool_alloc+0x98>
24013b6a:	bf00      	nop

24013b6c <mpool_calloc>:
{
24013b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pool->leaf->allocCount++;
24013b70:	684e      	ldr	r6, [r1, #4]
    if (pool->head == NULL)
24013b72:	694d      	ldr	r5, [r1, #20]
    pool->leaf->allocCount++;
24013b74:	6cb3      	ldr	r3, [r6, #72]	; 0x48
24013b76:	3301      	adds	r3, #1
24013b78:	64b3      	str	r3, [r6, #72]	; 0x48
    if (pool->head == NULL)
24013b7a:	2d00      	cmp	r5, #0
24013b7c:	d04e      	beq.n	24013c1c <mpool_calloc+0xb0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013b7e:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
24013b80:	462c      	mov	r4, r5
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013b82:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
24013b86:	e002      	b.n	24013b8e <mpool_calloc+0x22>
        node_to_alloc = node_to_alloc->next;
24013b88:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
24013b8a:	2c00      	cmp	r4, #0
24013b8c:	d035      	beq.n	24013bfa <mpool_calloc+0x8e>
    while (node_to_alloc->size < size_to_alloc)
24013b8e:	68e3      	ldr	r3, [r4, #12]
24013b90:	4293      	cmp	r3, r2
24013b92:	d3f9      	bcc.n	24013b88 <mpool_calloc+0x1c>
    if (leftover > pool->leaf->header_size)
24013b94:	6b70      	ldr	r0, [r6, #52]	; 0x34
    size_t leftover = node_to_alloc->size - size_to_alloc;
24013b96:	1a9e      	subs	r6, r3, r2
    node_to_alloc->size = size_to_alloc;
24013b98:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
24013b9a:	42b0      	cmp	r0, r6
24013b9c:	d23a      	bcs.n	24013c14 <mpool_calloc+0xa8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013b9e:	688f      	ldr	r7, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
24013ba0:	1a33      	subs	r3, r6, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
24013ba2:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013ba4:	1be6      	subs	r6, r4, r7
        offset += pool->leaf->header_size + node_to_alloc->size;
24013ba6:	4432      	add	r2, r6
        new_node = create_node(&pool->mpool[offset],
24013ba8:	18be      	adds	r6, r7, r2
                               node_to_alloc->next,
24013baa:	e9d4 ec01 	ldrd	lr, ip, [r4, #4]
    node->pool = block_location + header_size;
24013bae:	eb06 0800 	add.w	r8, r6, r0
24013bb2:	f847 8002 	str.w	r8, [r7, r2]
    node->size = size;
24013bb6:	60f3      	str	r3, [r6, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013bb8:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
24013bba:	e9c6 ec01 	strd	lr, ip, [r6, #4]
    if (node->next != NULL)
24013bbe:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
24013bc0:	42a5      	cmp	r5, r4
        pool->head = new_node;
24013bc2:	bf08      	it	eq
24013bc4:	614e      	streq	r6, [r1, #20]
    if (node->next != NULL)
24013bc6:	b10a      	cbz	r2, 24013bcc <mpool_calloc+0x60>
        node->next->prev = node->prev;
24013bc8:	68a5      	ldr	r5, [r4, #8]
24013bca:	6095      	str	r5, [r2, #8]
    if (node->prev != NULL)
24013bcc:	68a5      	ldr	r5, [r4, #8]
24013bce:	b105      	cbz	r5, 24013bd2 <mpool_calloc+0x66>
        node->prev->next = node->next;
24013bd0:	606a      	str	r2, [r5, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013bd2:	68cd      	ldr	r5, [r1, #12]
    node->next = NULL;
24013bd4:	2200      	movs	r2, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013bd6:	4428      	add	r0, r5
24013bd8:	4418      	add	r0, r3
    node->prev = NULL;
24013bda:	e9c4 2201 	strd	r2, r2, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013bde:	60c8      	str	r0, [r1, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24013be0:	b13b      	cbz	r3, 24013bf2 <mpool_calloc+0x86>
24013be2:	4613      	mov	r3, r2
24013be4:	4611      	mov	r1, r2
24013be6:	6822      	ldr	r2, [r4, #0]
24013be8:	54d1      	strb	r1, [r2, r3]
24013bea:	3301      	adds	r3, #1
24013bec:	68e2      	ldr	r2, [r4, #12]
24013bee:	429a      	cmp	r2, r3
24013bf0:	d8f9      	bhi.n	24013be6 <mpool_calloc+0x7a>
    return node_to_alloc->pool;
24013bf2:	6824      	ldr	r4, [r4, #0]
}
24013bf4:	4620      	mov	r0, r4
24013bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((pool->msize - pool->usize) > asize)
24013bfa:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
24013bfe:	1a9b      	subs	r3, r3, r2
24013c00:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013c02:	4630      	mov	r0, r6
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013c04:	bf8c      	ite	hi
24013c06:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013c08:	4621      	movls	r1, r4
24013c0a:	f004 fdbd 	bl	24018788 <LEAF_internalErrorCallback>
}
24013c0e:	4620      	mov	r0, r4
24013c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_node = node_to_alloc->next;
24013c14:	6866      	ldr	r6, [r4, #4]
        node_to_alloc->size += leftover;
24013c16:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
24013c18:	4632      	mov	r2, r6
24013c1a:	e7d1      	b.n	24013bc0 <mpool_calloc+0x54>
        if ((pool->msize - pool->usize) > asize)
24013c1c:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
24013c20:	1a9b      	subs	r3, r3, r2
24013c22:	4283      	cmp	r3, r0
24013c24:	d905      	bls.n	24013c32 <mpool_calloc+0xc6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013c26:	2101      	movs	r1, #1
24013c28:	4630      	mov	r0, r6
        return NULL;
24013c2a:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013c2c:	f004 fdac 	bl	24018788 <LEAF_internalErrorCallback>
24013c30:	e7e0      	b.n	24013bf4 <mpool_calloc+0x88>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013c32:	4629      	mov	r1, r5
24013c34:	4630      	mov	r0, r6
        return NULL;
24013c36:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013c38:	f004 fda6 	bl	24018788 <LEAF_internalErrorCallback>
24013c3c:	e7da      	b.n	24013bf4 <mpool_calloc+0x88>
24013c3e:	bf00      	nop

24013c40 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24013c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24013c42:	699f      	ldr	r7, [r3, #24]
{
24013c44:	460c      	mov	r4, r1
24013c46:	4606      	mov	r6, r0
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24013c48:	2018      	movs	r0, #24
24013c4a:	4639      	mov	r1, r7
{
24013c4c:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24013c4e:	f7ff ff19 	bl	24013a84 <mpool_alloc>
    m->leaf = mm->leaf;
24013c52:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013c54:	2210      	movs	r2, #16
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24013c56:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
24013c58:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013c5a:	635a      	str	r2, [r3, #52]	; 0x34
    pool->usize  = 0;
24013c5c:	2300      	movs	r3, #0
    pool->msize  = size;
24013c5e:	6105      	str	r5, [r0, #16]
    node->pool = block_location + header_size;
24013c60:	18a2      	adds	r2, r4, r2
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013c62:	3d10      	subs	r5, #16
    pool->usize  = 0;
24013c64:	e9c0 4302 	strd	r4, r3, [r0, #8]
    node->next = next;
24013c68:	e9c4 2300 	strd	r2, r3, [r4]
    node->size = size;
24013c6c:	e9c4 3502 	strd	r3, r5, [r4, #8]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013c70:	6144      	str	r4, [r0, #20]
}
24013c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24013c74 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
24013c74:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013c76:	698c      	ldr	r4, [r1, #24]
{
24013c78:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013c7a:	2018      	movs	r0, #24
24013c7c:	4621      	mov	r1, r4
24013c7e:	f7ff ff01 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
24013c82:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013c84:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013ca8 <tCycle_init+0x34>
    c->inc      =  0;
24013c88:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013c8a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24013c8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013c92:	6028      	str	r0, [r5, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013c94:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
24013c98:	6004      	str	r4, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24013c9a:	6142      	str	r2, [r0, #20]
    c->phase    =  0;
24013c9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013ca0:	edc0 7a04 	vstr	s15, [r0, #16]
}
24013ca4:	bd38      	pop	{r3, r4, r5, pc}
24013ca6:	bf00      	nop
24013ca8:	4f800000 	.word	0x4f800000

24013cac <tCycle_initToPool>:
{
24013cac:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24013cae:	680c      	ldr	r4, [r1, #0]
{
24013cb0:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013cb2:	2018      	movs	r0, #24
24013cb4:	4621      	mov	r1, r4
24013cb6:	f7ff fee5 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
24013cba:	6862      	ldr	r2, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013cbc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24013ce0 <tCycle_initToPool+0x34>
    c->inc      =  0;
24013cc0:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013cc2:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24013cc6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013cca:	6028      	str	r0, [r5, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
24013cd0:	6004      	str	r4, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24013cd2:	6142      	str	r2, [r0, #20]
    c->phase    =  0;
24013cd4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013cd8:	edc0 7a04 	vstr	s15, [r0, #16]
}
24013cdc:	bd38      	pop	{r3, r4, r5, pc}
24013cde:	bf00      	nop
24013ce0:	4f800000 	.word	0x4f800000

24013ce4 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24013ce4:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
24013ce6:	4910      	ldr	r1, [pc, #64]	; (24013d28 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24013ce8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24013d2c <tCycle_tick+0x48>
    c->phase += c->inc;
24013cec:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
24013cf0:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
24013cf2:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
24013cf4:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24013cf6:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
24013cfa:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24013cfc:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
24013d00:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
24013d04:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24013d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24013d0a:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
24013d0e:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
24013d10:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24013d14:	ee67 7a87 	vmul.f32	s15, s15, s14
24013d18:	ed92 7a00 	vldr	s14, [r2]
24013d1c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24013d20:	eea7 0a27 	vfma.f32	s0, s14, s15
24013d24:	4770      	bx	lr
24013d26:	bf00      	nop
24013d28:	24022980 	.word	0x24022980
24013d2c:	35000004 	.word	0x35000004

24013d30 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
24013d30:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013d32:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24013d36:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013d3a:	ee20 0a27 	vmul.f32	s0, s0, s15
24013d3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24013d42:	ed83 0a02 	vstr	s0, [r3, #8]
}
24013d46:	4770      	bx	lr

24013d48 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
24013d48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24013d4c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013d68 <tCycle_setPhase+0x20>
24013d50:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013d56:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24013d5a:	ee20 0a07 	vmul.f32	s0, s0, s14
24013d5e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013d62:	ed83 0a01 	vstr	s0, [r3, #4]
}
24013d66:	4770      	bx	lr
24013d68:	4f800000 	.word	0x4f800000

24013d6c <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24013d6c:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
24013d6e:	6994      	ldr	r4, [r2, #24]
{
24013d70:	4606      	mov	r6, r0
24013d72:	460d      	mov	r5, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24013d74:	2018      	movs	r0, #24
24013d76:	4621      	mov	r1, r4
24013d78:	f7ff fe84 	bl	24013a84 <mpool_alloc>
    n->mempool = m;
    LEAF* leaf = n->mempool->leaf;
24013d7c:	6863      	ldr	r3, [r4, #4]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24013d7e:	6030      	str	r0, [r6, #0]
    
    n->type = type;
24013d80:	7105      	strb	r5, [r0, #4]
    n->rand = leaf->random;
24013d82:	691b      	ldr	r3, [r3, #16]
    n->mempool = m;
24013d84:	6004      	str	r4, [r0, #0]
    n->rand = leaf->random;
24013d86:	6143      	str	r3, [r0, #20]
}
24013d88:	bd70      	pop	{r4, r5, r6, pc}
24013d8a:	bf00      	nop

24013d8c <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
24013d8c:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24013d8e:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
24013d90:	6963      	ldr	r3, [r4, #20]
24013d92:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24013d94:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
24013d96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24013d9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24013d9e:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
24013da0:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24013da4:	d12f      	bne.n	24013e06 <tNoise_tick+0x7a>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013da6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 24013e0c <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013daa:	eddf 6a19 	vldr	s13, [pc, #100]	; 24013e10 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013dae:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013db2:	ed94 5a03 	vldr	s10, [r4, #12]
24013db6:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013dba:	edd4 3a02 	vldr	s7, [r4, #8]
24013dbe:	eddf 4a15 	vldr	s9, [pc, #84]	; 24013e14 <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013dc2:	eddf 5a15 	vldr	s11, [pc, #84]	; 24013e18 <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013dc6:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013dca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 24013e1c <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013dce:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013dd2:	ed94 4a04 	vldr	s8, [r4, #16]
24013dd6:	ee27 7a87 	vmul.f32	s14, s15, s14
24013dda:	eddf 4a11 	vldr	s9, [pc, #68]	; 24013e20 <tNoise_tick+0x94>
24013dde:	ed9f 5a11 	vldr	s10, [pc, #68]	; 24013e24 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24013de2:	eddf 5a11 	vldr	s11, [pc, #68]	; 24013e28 <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013de6:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013dea:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24013dee:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013df2:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013df6:	eea7 0a85 	vfma.f32	s0, s15, s10
24013dfa:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24013dfe:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
24013e02:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24013e06:	eeb0 0a67 	vmov.f32	s0, s15
24013e0a:	bd10      	pop	{r4, pc}
24013e0c:	3dcad8a1 	.word	0x3dcad8a1
24013e10:	3e97d0ff 	.word	0x3e97d0ff
24013e14:	3f7f65fe 	.word	0x3f7f65fe
24013e18:	3f76872b 	.word	0x3f76872b
24013e1c:	3f86be97 	.word	0x3f86be97
24013e20:	3f11eb85 	.word	0x3f11eb85
24013e24:	3e3d3c36 	.word	0x3e3d3c36
24013e28:	3d4ccccd 	.word	0x3d4ccccd

24013e2c <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
24013e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24013e2e:	698e      	ldr	r6, [r1, #24]
{
24013e30:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24013e32:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24013e36:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24013e38:	4631      	mov	r1, r6
24013e3a:	f7ff fe23 	bl	24013a84 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
24013e3e:	6873      	ldr	r3, [r6, #4]
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24013e40:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 24013eb0 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24013e44:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
24013e46:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
24013e4a:	2300      	movs	r3, #0
    c->freq = 440.f;
24013e4c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 24013eb4 <tMBPulse_init+0x88>
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24013e50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->_inv_w = 1.0f / c->_w;
24013e54:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
24013e58:	6038      	str	r0, [r7, #0]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24013e5a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
    c->lastsyncin = 0.0f;
24013e5e:	6103      	str	r3, [r0, #16]
    c->sync = 0.0f;
24013e60:	6143      	str	r3, [r0, #20]
    c->waveform = 0.0f;
24013e62:	60c3      	str	r3, [r0, #12]
    c->_z = 0.0f;
24013e64:	6303      	str	r3, [r0, #48]	; 0x30
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013e66:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->_p = 0.0f;  /* phase [0, 1) */
24013e6a:	6203      	str	r3, [r0, #32]
    c->syncdir = 1.0f;
24013e6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->mempool = m;
24013e70:	6006      	str	r6, [r0, #0]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24013e72:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013e76:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
24013e78:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
24013e7a:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24013e7c:	6281      	str	r1, [r0, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
24013e7e:	62c1      	str	r1, [r0, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013e80:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
24013e82:	edc0 7aba 	vstr	s15, [r0, #744]	; 0x2e8
    c->freq = 440.f;
24013e86:	ed80 7a02 	vstr	s14, [r0, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013e8a:	ed80 6a09 	vstr	s12, [r0, #36]	; 0x24
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013e8e:	3066      	adds	r0, #102	; 0x66
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24013e90:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
24013e92:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
24013e94:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    c->syncdir = 1.0f;
24013e98:	61a3      	str	r3, [r4, #24]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013e9a:	f004 fd31 	bl	24018900 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24013e9e:	4629      	mov	r1, r5
24013ea0:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013ea4:	2220      	movs	r2, #32
}
24013ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24013eaa:	f004 bd29 	b.w	24018900 <memset>
24013eae:	bf00      	nop
24013eb0:	3b14f209 	.word	0x3b14f209
24013eb4:	43dc0000 	.word	0x43dc0000

24013eb8 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
24013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tMBPulse* c = *osc;
24013ebc:	6804      	ldr	r4, [r0, #0]
{
24013ebe:	ed2d 8b0a 	vpush	{d8-d12}
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
24013ec2:	ed94 8a05 	vldr	s16, [r4, #20]
{
24013ec6:	b083      	sub	sp, #12


    p = c->_p;  /* phase [0, 1) */
24013ec8:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013ecc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
24013ed0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
24013ed4:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
24013ed8:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
24013ee0:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24013ee4:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013ee8:	dd63      	ble.n	24013fb2 <tMBPulse_tick+0xfa>
24013eea:	f8d4 801c 	ldr.w	r8, [r4, #28]
24013eee:	f1b8 0f00 	cmp.w	r8, #0
24013ef2:	dd2e      	ble.n	24013f52 <tMBPulse_tick+0x9a>
24013ef4:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24013ef8:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013efc:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
24013f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013f04:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24013f08:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
24013f0c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
24013f10:	ee37 7a27 	vadd.f32	s14, s14, s15
24013f14:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24013f18:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
24013f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
24013f20:	2f00      	cmp	r7, #0
24013f22:	d15a      	bne.n	24013fda <tMBPulse_tick+0x122>
        if (sw > 0)
24013f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f28:	f340 81c2 	ble.w	240142b0 <tMBPulse_tick+0x3f8>
        {
            if (p >= b) {
24013f2c:	eef4 aac8 	vcmpe.f32	s21, s16
24013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f34:	f240 8154 	bls.w	240141e0 <tMBPulse_tick+0x328>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013f38:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24013f3c:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
24013f3e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24013f42:	eeb4 8ae8 	vcmpe.f32	s16, s17
24013f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f4a:	f280 8266 	bge.w	2401441a <tMBPulse_tick+0x562>
24013f4e:	461f      	mov	r7, r3
24013f50:	e051      	b.n	24013ff6 <tMBPulse_tick+0x13e>
    sw = w * c->syncdir;
24013f52:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24013f56:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
24013f5a:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
24013f5e:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
24013f62:	eefd 8ae7 	vcvt.s32.f32	s17, s15
24013f66:	ee37 7a27 	vadd.f32	s14, s14, s15
24013f6a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
24013f6e:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24013f72:	f040 84dd 	bne.w	24014930 <tMBPulse_tick+0xa78>
        if (sw > 0) p = eof_offset;
24013f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        float eof_offset = sync * sw;
24013f7a:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
24013f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24013f82:	ee38 aac8 	vsub.f32	s20, s17, s16
        if (sw > 0) p = eof_offset;
24013f86:	f340 80c7 	ble.w	24014118 <tMBPulse_tick+0x260>
        if (!k) {
24013f8a:	2f00      	cmp	r7, #0
24013f8c:	f040 8208 	bne.w	240143a0 <tMBPulse_tick+0x4e8>
                if (p_at_reset >= b) {
24013f90:	eef4 aaca 	vcmpe.f32	s21, s20
24013f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f98:	f240 8395 	bls.w	240146c6 <tMBPulse_tick+0x80e>
                if (p_at_reset >= 1.0f) {
24013f9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013fa0:	eeb4 aae7 	vcmpe.f32	s20, s15
24013fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013fa8:	f280 8287 	bge.w	240144ba <tMBPulse_tick+0x602>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013fac:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
24013fb0:	e22c      	b.n	2401440c <tMBPulse_tick+0x554>
    sw = w * c->syncdir;
24013fb2:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24013fb6:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
24013fba:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
24013fbe:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
24013fc2:	eebd 8ae7 	vcvt.s32.f32	s16, s15
24013fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
24013fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
24013fce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24013fd2:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
24013fd6:	2f00      	cmp	r7, #0
24013fd8:	d0a4      	beq.n	24013f24 <tMBPulse_tick+0x6c>
            }
        }
        
    } else {  /* normal operation, signal currently low */
        
        if (sw > 0)
24013fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013fde:	f340 8132 	ble.w	24014246 <tMBPulse_tick+0x38e>
        {
            if (p >= 1.0f) {
24013fe2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24013fe6:	eeb4 8ae8 	vcmpe.f32	s16, s17
24013fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013fee:	f280 809a 	bge.w	24014126 <tMBPulse_tick+0x26e>

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    
    c->_f[currentSamp] = x;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24013ff2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24013ff6:	1d33      	adds	r3, r6, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24013ff8:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24013ffa:	f003 0307 	and.w	r3, r3, #7
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24013ffe:	f88d 2005 	strb.w	r2, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014002:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = x;
24014006:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401400a:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401400e:	2a00      	cmp	r2, #0
24014010:	f000 81bb 	beq.w	2401438a <tMBPulse_tick+0x4d2>
24014014:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24014018:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401401c:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014020:	f04f 0c00 	mov.w	ip, #0
24014024:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
24014028:	4dda      	ldr	r5, [pc, #872]	; (24014394 <tMBPulse_tick+0x4dc>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
2401402a:	eba8 030c 	sub.w	r3, r8, ip
2401402e:	b29b      	uxth	r3, r3
24014030:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
24014034:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24014038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401403c:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014040:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24014044:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24014048:	f8bd 0006 	ldrh.w	r0, [sp, #6]
2401404c:	b289      	uxth	r1, r1
2401404e:	f8bd a006 	ldrh.w	sl, [sp, #6]
24014052:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014054:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014058:	b280      	uxth	r0, r0
2401405a:	fa1f fa8a 	uxth.w	sl, sl
2401405e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24014062:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
24014066:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401406a:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401406c:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
24014070:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24014074:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014078:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401407c:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
24014080:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
24014084:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014088:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401408c:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014090:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014092:	edda 6a01 	vldr	s13, [sl, #4]
24014096:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401409a:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401409c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240140a0:	eee6 7a26 	vfma.f32	s15, s12, s13
240140a4:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240140a8:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240140ac:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
240140b0:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240140b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240140b6:	d328      	bcc.n	2401410a <tMBPulse_tick+0x252>
		{
			c->numBLEPs--;
240140b8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240140bc:	f10c 0c01 	add.w	ip, ip, #1
240140c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
240140c4:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240140c6:	4562      	cmp	r2, ip
			c->numBLEPs--;
240140c8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240140cc:	dcad      	bgt.n	2401402a <tMBPulse_tick+0x172>
240140ce:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
240140d2:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
240140d6:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
240140d8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
240140dc:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
240140e0:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
240140e4:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    c->_b = b;
    c->_x = x;
240140e8:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
    c->_k = k;
240140ec:	63e7      	str	r7, [r4, #60]	; 0x3c
    z += 0.5f * (c->_f[j] - z);
240140ee:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_j = j;
240140f2:	63a6      	str	r6, [r4, #56]	; 0x38
    
    return -c->out;
240140f4:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
240140f8:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
240140fc:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
24014100:	b003      	add	sp, #12
24014102:	ecbd 8b0a 	vpop	{d8-d12}
24014106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401410a:	f89d 3005 	ldrb.w	r3, [sp, #5]
2401410e:	f10c 0c01 	add.w	ip, ip, #1
24014112:	4563      	cmp	r3, ip
24014114:	dc89      	bgt.n	2401402a <tMBPulse_tick+0x172>
24014116:	e7da      	b.n	240140ce <tMBPulse_tick+0x216>
        else if (sw < 0) p = 1.0f - eof_offset;
24014118:	f100 8232 	bmi.w	24014580 <tMBPulse_tick+0x6c8>
    p += sw - (int)sw;
2401411c:	eeb0 8a68 	vmov.f32	s16, s17
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24014120:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
24014124:	e767      	b.n	24013ff6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
24014126:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
2401412a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 2401439c <tMBPulse_tick+0x4e4>
                p -= 1.0f;
2401412e:	ee38 8a68 	vsub.f32	s16, s16, s17
	r = MINBLEP_PHASES * phase * inv_w;
24014132:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
24014136:	eeb0 0a4a 	vmov.f32	s0, s20
2401413a:	eea8 0a09 	vfma.f32	s0, s16, s18
2401413e:	f005 f803 	bl	24019148 <lrintf>
	r -= (float)i;
24014142:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014146:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            if (!k && p >= b) {
2401414a:	eef4 aac8 	vcmpe.f32	s21, s16
	r -= (float)i;
2401414e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014152:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014156:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014158:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401415c:	3201      	adds	r2, #1
            if (!k && p >= b) {
2401415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014162:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
24014166:	eed8 7a09 	vfnms.f32	s15, s16, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401416a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401416e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014172:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24014176:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401417a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
2401417e:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014182:	edc3 8a3b 	vstr	s17, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014186:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (!k && p >= b) {
2401418a:	f200 82e1 	bhi.w	24014750 <tMBPulse_tick+0x898>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
2401418e:	ee78 aa6a 	vsub.f32	s21, s16, s21
	i = lrintf(r - 0.5f);
24014192:	eeb0 0a4a 	vmov.f32	s0, s20
24014196:	eeaa 0a89 	vfma.f32	s0, s21, s18
2401419a:	f004 ffd5 	bl	24019148 <lrintf>
	r -= (float)i;
2401419e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240141a2:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240141a4:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
240141a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240141aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                x = -0.5f;
240141ae:	eef0 5a4a 	vmov.f32	s11, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240141b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240141b6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
240141ba:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240141be:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240141c2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240141c6:	4a74      	ldr	r2, [pc, #464]	; (24014398 <tMBPulse_tick+0x4e0>)
                k = 1;
240141c8:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240141ca:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240141ce:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
240141d2:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240141d6:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240141da:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
240141de:	e70a      	b.n	24013ff6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
240141e0:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
240141e4:	eddf 8a6d 	vldr	s17, [pc, #436]	; 2401439c <tMBPulse_tick+0x4e4>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
240141e8:	ee78 aa6a 	vsub.f32	s21, s16, s21
	r = MINBLEP_PHASES * phase * inv_w;
240141ec:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
240141f0:	eeb0 0a4a 	vmov.f32	s0, s20
240141f4:	eeaa 0aa8 	vfma.f32	s0, s21, s17
240141f8:	f004 ffa6 	bl	24019148 <lrintf>
	r -= (float)i;
240141fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014200:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014204:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401420c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014210:	3301      	adds	r3, #1
                x = -0.5f;
24014212:	eef0 5a4a 	vmov.f32	s11, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014216:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401421c:	eeda 7aa8 	vfnms.f32	s15, s21, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014220:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014224:	4a5c      	ldr	r2, [pc, #368]	; (24014398 <tMBPulse_tick+0x4e0>)
	c->BLEPindices[c->mostRecentBLEP] = i;
24014226:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401422a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401422e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014232:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
                k = 1;
24014236:	2301      	movs	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014238:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401423c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014240:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
24014244:	e67b      	b.n	24013f3e <tMBPulse_tick+0x86>
        else if (sw < 0)
24014246:	f57f aed4 	bpl.w	24013ff2 <tMBPulse_tick+0x13a>
            if (p < b) {
2401424a:	eef4 aac8 	vcmpe.f32	s21, s16
2401424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014252:	f300 8163 	bgt.w	2401451c <tMBPulse_tick+0x664>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014256:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
            if (p < 0.0f) {
2401425a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2401425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014262:	f57f aec8 	bpl.w	24013ff6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
24014266:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
2401426a:	eddf 8a4c 	vldr	s17, [pc, #304]	; 2401439c <tMBPulse_tick+0x4e4>
	r = MINBLEP_PHASES * phase * inv_w;
2401426e:	ee28 9a09 	vmul.f32	s18, s16, s18
                p += 1.0f;
24014272:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24014276:	eeb0 0a4a 	vmov.f32	s0, s20
                p += 1.0f;
2401427a:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
2401427e:	eea9 0a28 	vfma.f32	s0, s18, s17
24014282:	f004 ff61 	bl	24019148 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014286:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
2401428a:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401428e:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014290:	3301      	adds	r3, #1
                x = -0.5f;
24014292:	eef0 5a4a 	vmov.f32	s11, s20
	r -= (float)i;
24014296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401429a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401429e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240142a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240142a6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240142aa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
240142ae:	e788      	b.n	240141c2 <tMBPulse_tick+0x30a>
            if (p < 0.0f) {
240142b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
240142b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240142b8:	f57f ae9b 	bpl.w	24013ff2 <tMBPulse_tick+0x13a>
240142bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240142c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240142c4:	f57f ae95 	bpl.w	24013ff2 <tMBPulse_tick+0x13a>
	i = lrintf(r - 0.5f);
240142c8:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
240142cc:	eddf 8a33 	vldr	s17, [pc, #204]	; 2401439c <tMBPulse_tick+0x4e4>
	r = MINBLEP_PHASES * phase * inv_w;
240142d0:	ee68 ba09 	vmul.f32	s23, s16, s18
                p += 1.0f;
240142d4:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
240142d8:	eeb0 0a4a 	vmov.f32	s0, s20
                p += 1.0f;
240142dc:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
240142e0:	eeab 0aa8 	vfma.f32	s0, s23, s17
240142e4:	f004 ff30 	bl	24019148 <lrintf>
	r -= (float)i;
240142e8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240142ec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            if (k && p < b) {
240142f0:	eef4 aac8 	vcmpe.f32	s21, s16
	r -= (float)i;
240142f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240142f8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240142fc:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240142fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014302:	3201      	adds	r2, #1
            if (k && p < b) {
24014304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014308:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
2401430c:	eedb 7aa8 	vfnms.f32	s15, s23, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014310:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014314:	4a20      	ldr	r2, [pc, #128]	; (24014398 <tMBPulse_tick+0x4e0>)
	c->BLEPindices[c->mostRecentBLEP] = i;
24014316:	eb04 0348 	add.w	r3, r4, r8, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401431a:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401431e:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014322:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
24014326:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401432a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401432e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (k && p < b) {
24014332:	f340 82f8 	ble.w	24014926 <tMBPulse_tick+0xa6e>
	r = MINBLEP_PHASES * phase * inv_w;
24014336:	ee78 aa6a 	vsub.f32	s21, s16, s21
2401433a:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
2401433e:	eeb0 0a4a 	vmov.f32	s0, s20
24014342:	eea8 0aaa 	vfma.f32	s0, s17, s21
24014346:	f004 feff 	bl	24019148 <lrintf>
	r -= (float)i;
2401434a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401434e:	f108 0301 	add.w	r3, r8, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014352:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
24014354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014358:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401435c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014360:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                x = 0.5f;
24014364:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	r -= (float)i;
24014368:	eed8 7aaa 	vfnms.f32	s15, s17, s21
	c->BLEPindices[c->mostRecentBLEP] = i;
2401436c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014370:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24014374:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014378:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401437c:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014380:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014384:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
24014388:	e635      	b.n	24013ff6 <tMBPulse_tick+0x13e>
    z += 0.5f * (c->_f[j] - z);
2401438a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
2401438e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
24014392:	e69e      	b.n	240140d2 <tMBPulse_tick+0x21a>
24014394:	24029104 	.word	0x24029104
24014398:	bf800000 	.word	0xbf800000
2401439c:	42800000 	.word	0x42800000
                if (p_at_reset >= 1.0f) {
240143a0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
240143a4:	eeb4 aae8 	vcmpe.f32	s20, s17
240143a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240143ac:	f280 8131 	bge.w	24014612 <tMBPulse_tick+0x75a>
240143b0:	ed5f ba06 	vldr	s23, [pc, #-24]	; 2401439c <tMBPulse_tick+0x4e4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143b4:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
240143b8:	ee69 ba2b 	vmul.f32	s23, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240143bc:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
	i = lrintf(r - 0.5f);
240143c0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240143c4:	eea8 0a2b 	vfma.f32	s0, s16, s23
240143c8:	f004 febe 	bl	24019148 <lrintf>
	r -= (float)i;
240143cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143d0:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240143d2:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
240143d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240143d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = 0.5f;
240143e0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240143e4:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240143e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	r -= (float)i;
240143ec:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240143f0:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143f4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240143f8:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240143fc:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014400:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014404:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014408:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (p >= b) {
2401440c:	eef4 aac8 	vcmpe.f32	s21, s16
24014410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014414:	d92e      	bls.n	24014474 <tMBPulse_tick+0x5bc>
24014416:	4647      	mov	r7, r8
24014418:	e5ed      	b.n	24013ff6 <tMBPulse_tick+0x13e>
                p -= 1.0f;
2401441a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 2401439c <tMBPulse_tick+0x4e4>
2401441e:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
24014422:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014426:	ee29 9a27 	vmul.f32	s18, s18, s15
2401442a:	eea8 0a09 	vfma.f32	s0, s16, s18
2401442e:	f004 fe8b 	bl	24019148 <lrintf>
	r -= (float)i;
24014432:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014436:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401443a:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2401443c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014440:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014444:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014446:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                x = 0.5f;
2401444a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401444e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014452:	eed8 7a09 	vfnms.f32	s15, s16, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
24014456:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401445a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401445e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014462:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24014466:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401446a:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401446e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
24014472:	e5c0      	b.n	24013ff6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
24014474:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
24014478:	ed5f 7a38 	vldr	s15, [pc, #-224]	; 2401439c <tMBPulse_tick+0x4e4>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
2401447c:	ee78 aa6a 	vsub.f32	s21, s16, s21
	r = MINBLEP_PHASES * phase * inv_w;
24014480:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
24014484:	eeb0 0a68 	vmov.f32	s0, s17
24014488:	eeaa 0a89 	vfma.f32	s0, s21, s18
2401448c:	f004 fe5c 	bl	24019148 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014490:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
24014494:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014498:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401449a:	3301      	adds	r3, #1
                x = -0.5f;
2401449c:	eef0 5a68 	vmov.f32	s11, s17
	r -= (float)i;
240144a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240144a4:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240144a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240144ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240144b0:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240144b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240144b8:	e683      	b.n	240141c2 <tMBPulse_tick+0x30a>
240144ba:	ed5f ba48 	vldr	s23, [pc, #-288]	; 2401439c <tMBPulse_tick+0x4e4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240144be:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
240144c2:	ee69 ba2b 	vmul.f32	s23, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240144c6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
240144ca:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
240144ce:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
240144d2:	ee78 8aca 	vsub.f32	s17, s17, s20
	i = lrintf(r - 0.5f);
240144d6:	eea8 0aab 	vfma.f32	s0, s17, s23
240144da:	f004 fe35 	bl	24019148 <lrintf>
	r -= (float)i;
240144de:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240144e2:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240144e4:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
240144e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240144ea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240144ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240144f2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                    x = 0.5f;
240144f6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	r -= (float)i;
240144fa:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240144fe:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014502:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24014506:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401450a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401450e:	ed82 aa3b 	vstr	s20, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014512:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014516:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
        if (sw > 0)
2401451a:	e777      	b.n	2401440c <tMBPulse_tick+0x554>
	r = MINBLEP_PHASES * phase * inv_w;
2401451c:	ed5f 8a61 	vldr	s17, [pc, #-388]	; 2401439c <tMBPulse_tick+0x4e4>
24014520:	ee78 aa6a 	vsub.f32	s21, s16, s21
	i = lrintf(r - 0.5f);
24014524:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 0;
24014528:	2700      	movs	r7, #0
2401452a:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
2401452e:	eea8 0aaa 	vfma.f32	s0, s17, s21
24014532:	f004 fe09 	bl	24019148 <lrintf>
	r -= (float)i;
24014536:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401453a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401453e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014546:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401454a:	3301      	adds	r3, #1
                x = 0.5f;
2401454c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014550:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014556:	eed8 7aaa 	vfnms.f32	s15, s17, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401455a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401455e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->BLEPindices[c->mostRecentBLEP] = i;
24014562:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014566:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401456a:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401456e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
24014572:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014576:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401457a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2401457e:	e66c      	b.n	2401425a <tMBPulse_tick+0x3a2>
        else if (sw < 0) p = 1.0f - eof_offset;
24014580:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24014584:	ee7b cac8 	vsub.f32	s25, s23, s16
        if (!k) {
24014588:	2f00      	cmp	r7, #0
2401458a:	f040 80d2 	bne.w	24014732 <tMBPulse_tick+0x87a>
                if (p_at_reset < 0.0f) {
2401458e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24014592:	ed1f ba7e 	vldr	s22, [pc, #-504]	; 2401439c <tMBPulse_tick+0x4e4>
24014596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401459a:	f100 810f 	bmi.w	240147bc <tMBPulse_tick+0x904>
2401459e:	ee29 ba0b 	vmul.f32	s22, s18, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240145a2:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240145a6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
	i = lrintf(r - 0.5f);
240145aa:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
240145ae:	2701      	movs	r7, #1
240145b0:	eeb1 aa48 	vneg.f32	s20, s16
	i = lrintf(r - 0.5f);
240145b4:	eeb0 0a68 	vmov.f32	s0, s17
240145b8:	eea8 0a4b 	vfms.f32	s0, s16, s22
240145bc:	f004 fdc4 	bl	24019148 <lrintf>
	r -= (float)i;
240145c0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240145c4:	eb09 0307 	add.w	r3, r9, r7
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240145c8:	19ea      	adds	r2, r5, r7
	r -= (float)i;
240145ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240145ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                x = -0.5f;
240145d2:	eef0 5a68 	vmov.f32	s11, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240145d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240145da:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
240145de:	eeda 7a0b 	vfnms.f32	s15, s20, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240145e2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240145e6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240145ea:	4ad3      	ldr	r2, [pc, #844]	; (24014938 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
240145ec:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240145f0:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
240145f4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240145f8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240145fc:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (p < b) {
24014600:	eef4 aaec 	vcmpe.f32	s21, s25
24014604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014608:	f300 80a6 	bgt.w	24014758 <tMBPulse_tick+0x8a0>
2401460c:	eeb0 8a6c 	vmov.f32	s16, s25
24014610:	e4f1      	b.n	24013ff6 <tMBPulse_tick+0x13e>
                    p_at_reset -= 1.0f;
24014612:	ee3a aa68 	vsub.f32	s20, s20, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24014616:	eddf bac9 	vldr	s23, [pc, #804]	; 2401493c <tMBPulse_tick+0xa84>
	i = lrintf(r - 0.5f);
2401461a:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
2401461e:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24014622:	ee38 ba0a 	vadd.f32	s22, s16, s20
	i = lrintf(r - 0.5f);
24014626:	eeb0 0a4c 	vmov.f32	s0, s24
2401462a:	eeab 0a8b 	vfma.f32	s0, s23, s22
2401462e:	f004 fd8b 	bl	24019148 <lrintf>
	r -= (float)i;
24014632:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014636:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (!k && p_at_reset >= b) {
2401463a:	eef4 aaca 	vcmpe.f32	s21, s20
	r -= (float)i;
2401463e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014642:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014646:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014648:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401464c:	3201      	adds	r2, #1
                if (!k && p_at_reset >= b) {
2401464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014652:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
24014656:	eedb 7a8b 	vfnms.f32	s15, s23, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401465a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401465e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014662:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24014666:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401466a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
2401466e:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014672:	edc3 8a3b 	vstr	s17, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014676:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
2401467a:	f200 8144 	bhi.w	24014906 <tMBPulse_tick+0xa4e>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
2401467e:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
24014682:	eeb0 0a4c 	vmov.f32	s0, s24
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
24014686:	ee78 8a8a 	vadd.f32	s17, s17, s20
	i = lrintf(r - 0.5f);
2401468a:	eeab 0aa8 	vfma.f32	s0, s23, s17
2401468e:	f004 fd5b 	bl	24019148 <lrintf>
	r -= (float)i;
24014692:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014696:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014698:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2401469a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401469e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146a2:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240146a6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240146aa:	4aa3      	ldr	r2, [pc, #652]	; (24014938 <tMBPulse_tick+0xa80>)
	r -= (float)i;
240146ac:	eedb 7aa8 	vfnms.f32	s15, s23, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
240146b0:	eb04 0347 	add.w	r3, r4, r7, lsl #1
240146b4:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240146b8:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240146bc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240146c0:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
        if (sw > 0)
240146c4:	e67c      	b.n	240143c0 <tMBPulse_tick+0x508>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
240146c6:	eddf ba9d 	vldr	s23, [pc, #628]	; 2401493c <tMBPulse_tick+0xa84>
240146ca:	ee38 baea 	vsub.f32	s22, s17, s21
	i = lrintf(r - 0.5f);
240146ce:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240146d2:	ee69 ba2b 	vmul.f32	s23, s18, s23
240146d6:	eeab 0a2b 	vfma.f32	s0, s22, s23
240146da:	f004 fd35 	bl	24019148 <lrintf>
	r -= (float)i;
240146de:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (p_at_reset >= 1.0f) {
240146e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	r -= (float)i;
240146ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240146ee:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146f2:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240146f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
240146f8:	eeb4 aac7 	vcmpe.f32	s20, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240146fc:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146fe:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
24014702:	eedb 7a2b 	vfnms.f32	s15, s22, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014706:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401470a:	4a8b      	ldr	r2, [pc, #556]	; (24014938 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
2401470c:	eb04 0347 	add.w	r3, r4, r7, lsl #1
                if (p_at_reset >= 1.0f) {
24014710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014714:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24014718:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401471c:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
24014720:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014724:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014728:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
2401472c:	f6ff ae48 	blt.w	240143c0 <tMBPulse_tick+0x508>
24014730:	e6cb      	b.n	240144ca <tMBPulse_tick+0x612>
                if (p_at_reset < b) {
24014732:	eef4 aaca 	vcmpe.f32	s21, s20
24014736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401473a:	f300 8095 	bgt.w	24014868 <tMBPulse_tick+0x9b0>
                if (p_at_reset < 0.0f) {
2401473e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24014742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014746:	f100 80e1 	bmi.w	2401490c <tMBPulse_tick+0xa54>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401474a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
2401474e:	e757      	b.n	24014600 <tMBPulse_tick+0x748>
                x = 0.5f;
24014750:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
24014754:	2700      	movs	r7, #0
24014756:	e44e      	b.n	24013ff6 <tMBPulse_tick+0x13e>
	r = MINBLEP_PHASES * phase * inv_w;
24014758:	eddf 7a78 	vldr	s15, [pc, #480]	; 2401493c <tMBPulse_tick+0xa84>
2401475c:	ee7c aaea 	vsub.f32	s21, s25, s21
	i = lrintf(r - 0.5f);
24014760:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 0;
24014764:	4647      	mov	r7, r8
24014766:	ee29 9a27 	vmul.f32	s18, s18, s15
}
2401476a:	eeb0 8a6c 	vmov.f32	s16, s25
	i = lrintf(r - 0.5f);
2401476e:	eeaa 0a89 	vfma.f32	s0, s21, s18
24014772:	f004 fce9 	bl	24019148 <lrintf>
	r -= (float)i;
24014776:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401477a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401477e:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
24014780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014784:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014788:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401478a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401478e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                x = 0.5f;
24014792:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401479a:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
2401479e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147a2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240147a6:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240147aa:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
240147ae:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240147b2:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240147b6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
240147ba:	e41c      	b.n	24013ff6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
240147bc:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
240147c0:	ee29 ba0b 	vmul.f32	s22, s18, s22
                    p_at_reset += 1.0f;
240147c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
	i = lrintf(r - 0.5f);
240147c8:	eeb0 0a4c 	vmov.f32	s0, s24
240147cc:	eea8 0a8b 	vfma.f32	s0, s17, s22
240147d0:	f004 fcba 	bl	24019148 <lrintf>
	r -= (float)i;
240147d4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147d8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (k && p_at_reset < b) {
240147dc:	eef4 aaca 	vcmpe.f32	s21, s20
	r -= (float)i;
240147e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240147e4:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147e8:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240147ea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240147ee:	3201      	adds	r2, #1
                if (k && p_at_reset < b) {
240147f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147f4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
	r -= (float)i;
240147f8:	eed8 7a8b 	vfnms.f32	s15, s17, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240147fc:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014800:	4a4d      	ldr	r2, [pc, #308]	; (24014938 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
24014802:	eb04 0349 	add.w	r3, r4, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014806:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2401480a:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401480e:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
24014812:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014816:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401481a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
2401481e:	dd7e      	ble.n	2401491e <tMBPulse_tick+0xa66>
	r = MINBLEP_PHASES * phase * inv_w;
24014820:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
24014824:	eeb0 0a4c 	vmov.f32	s0, s24
24014828:	ee78 8a8a 	vadd.f32	s17, s17, s20
2401482c:	eeab 0a28 	vfma.f32	s0, s22, s17
24014830:	f004 fc8a 	bl	24019148 <lrintf>
	r -= (float)i;
24014834:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014838:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401483c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014844:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014846:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401484a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
2401484e:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24014852:	eb04 0349 	add.w	r3, r4, r9, lsl #1
24014856:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401485a:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401485e:	edc3 ba3b 	vstr	s23, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014862:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
        else if (sw < 0)
24014866:	e6a0      	b.n	240145aa <tMBPulse_tick+0x6f2>
	r = MINBLEP_PHASES * phase * inv_w;
24014868:	ed9f ba34 	vldr	s22, [pc, #208]	; 2401493c <tMBPulse_tick+0xa84>
2401486c:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
24014870:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014874:	ee29 ba0b 	vmul.f32	s22, s18, s22
24014878:	eeac 0a0b 	vfma.f32	s0, s24, s22
2401487c:	f004 fc64 	bl	24019148 <lrintf>
	r -= (float)i;
24014880:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014884:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (p_at_reset < 0.0f) {
24014888:	eeb5 aac0 	vcmpe.f32	s20, #0.0
	r -= (float)i;
2401488c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014890:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014894:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014896:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401489a:	3201      	adds	r2, #1
                if (p_at_reset < 0.0f) {
2401489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148a0:	f003 093f 	and.w	r9, r3, #63	; 0x3f
	r -= (float)i;
240148a4:	eedc 7a0b 	vfnms.f32	s15, s24, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240148a8:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240148ac:	eb04 0349 	add.w	r3, r4, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148b0:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240148b4:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240148b8:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
240148bc:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240148c0:	edc3 ba3b 	vstr	s23, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240148c4:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
240148c8:	f57f ae6f 	bpl.w	240145aa <tMBPulse_tick+0x6f2>
	i = lrintf(r - 0.5f);
240148cc:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
240148d0:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
240148d2:	eeb0 0a48 	vmov.f32	s0, s16
240148d6:	eea8 0a8b 	vfma.f32	s0, s17, s22
240148da:	f004 fc35 	bl	24019148 <lrintf>
	r -= (float)i;
240148de:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148e2:	eb09 0307 	add.w	r3, r9, r7
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240148e6:	19ea      	adds	r2, r5, r7
	r -= (float)i;
240148e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240148ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                    x = -0.5f;
240148f4:	eef0 5a48 	vmov.f32	s11, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240148f8:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
240148fc:	eed8 7a8b 	vfnms.f32	s15, s17, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014900:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
24014904:	e66f      	b.n	240145e6 <tMBPulse_tick+0x72e>
                    x = 0.5f;
24014906:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401490a:	e57f      	b.n	2401440c <tMBPulse_tick+0x554>
2401490c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 2401493c <tMBPulse_tick+0xa84>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014910:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
24014914:	ee29 ba0b 	vmul.f32	s22, s18, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014918:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
2401491c:	e7d6      	b.n	240148cc <tMBPulse_tick+0xa14>
                    x = -0.5f;
2401491e:	eef0 5a4c 	vmov.f32	s11, s24
                    k = 1;
24014922:	2701      	movs	r7, #1
24014924:	e66c      	b.n	24014600 <tMBPulse_tick+0x748>
                x = -0.5f;
24014926:	eef0 5a4a 	vmov.f32	s11, s20
                k = 1;
2401492a:	2701      	movs	r7, #1
2401492c:	f7ff bb63 	b.w	24013ff6 <tMBPulse_tick+0x13e>
    p += sw - (int)sw;
24014930:	eeb0 8a68 	vmov.f32	s16, s17
24014934:	f7ff baf2 	b.w	24013f1c <tMBPulse_tick+0x64>
24014938:	bf800000 	.word	0xbf800000
2401493c:	42800000 	.word	0x42800000

24014940 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
24014940:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24014942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014946:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
2401494a:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401494e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24014952:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014956:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
2401495a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
2401495e:	4770      	bx	lr

24014960 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
24014960:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
24014964:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
24014966:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
2401496a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
2401496e:	ee70 7a27 	vadd.f32	s15, s0, s15
24014972:	ee67 7a87 	vmul.f32	s15, s15, s14
24014976:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2401497a:	4770      	bx	lr

2401497c <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
2401497c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401497e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24014982:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24014986:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
2401498a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401498e:	eef1 7a67 	vneg.f32	s15, s15
24014992:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24014996:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401499e:	eef4 6ac7 	vcmpe.f32	s13, s14
240149a2:	bfcc      	ite	gt
240149a4:	2201      	movgt	r2, #1
240149a6:	2200      	movle	r2, #0
240149a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240149ac:	f002 0201 	and.w	r2, r2, #1
240149b0:	bf88      	it	hi
240149b2:	2200      	movhi	r2, #0
240149b4:	b122      	cbz	r2, 240149c0 <tMBPulse_sync+0x44>
240149b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
240149ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240149be:	da04      	bge.n	240149ca <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
240149c0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240149d8 <tMBPulse_sync+0x5c>
240149c4:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
240149c8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
240149ca:	ee37 7a66 	vsub.f32	s14, s14, s13
240149ce:	ee27 7a06 	vmul.f32	s14, s14, s12
240149d2:	ed83 7a05 	vstr	s14, [r3, #20]
}
240149d6:	4770      	bx	lr
240149d8:	00000000 	.word	0x00000000

240149dc <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
240149dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
240149de:	698e      	ldr	r6, [r1, #24]
{
240149e0:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
240149e2:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
240149e6:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
240149e8:	4631      	mov	r1, r6
240149ea:	f7ff f84b 	bl	24013a84 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
240149ee:	6873      	ldr	r3, [r6, #4]
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
240149f0:	ed9f 6a20 	vldr	s12, [pc, #128]	; 24014a74 <tMBTriangle_init+0x98>
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240149f4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
240149f8:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
240149fc:	2300      	movs	r3, #0
    c->freq = 440.f;
240149fe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 24014a78 <tMBTriangle_init+0x9c>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
24014a02:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
24014a04:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
24014a08:	6038      	str	r0, [r7, #0]
    c->lastsyncin = 0.0f;
24014a0a:	6103      	str	r3, [r0, #16]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24014a0c:	306c      	adds	r0, #108	; 0x6c
    c->sync = 0.0f;
24014a0e:	f840 3c58 	str.w	r3, [r0, #-88]
    c->waveform = 0.0f;
24014a12:	f840 3c60 	str.w	r3, [r0, #-96]
    c->_z = 0.0f;
24014a16:	f840 3c40 	str.w	r3, [r0, #-64]
    c->_p = 0.25f;  /* phase [0, 1) */
24014a1a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014a1e:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24014a22:	4916      	ldr	r1, [pc, #88]	; (24014a7c <tMBTriangle_init+0xa0>)
    c->_p = 0.25f;  /* phase [0, 1) */
24014a24:	f840 3c4c 	str.w	r3, [r0, #-76]
    c->syncdir = 1.0f;
24014a28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->mempool = m;
24014a2c:	f840 6c6c 	str.w	r6, [r0, #-108]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24014a30:	f840 1c04 	str.w	r1, [r0, #-4]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24014a34:	4629      	mov	r1, r5
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24014a36:	f840 2c44 	str.w	r2, [r0, #-68]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24014a3a:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
24014a3c:	f840 5c50 	str.w	r5, [r0, #-80]
    c->_j = 0;
24014a40:	f840 5c38 	str.w	r5, [r0, #-56]
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24014a44:	f840 5c34 	str.w	r5, [r0, #-52]
    c->numBLEPs = 0;
24014a48:	f840 5c08 	str.w	r5, [r0, #-8]
    c->syncdir = 1.0f;
24014a4c:	f840 3c54 	str.w	r3, [r0, #-84]
    c->invSampleRate = leaf->invSampleRate;
24014a50:	edc0 7ae0 	vstr	s15, [r0, #896]	; 0x380
    c->freq = 440.f;
24014a54:	ed00 7a19 	vstr	s14, [r0, #-100]	; 0xffffff9c
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014a58:	ed00 6a12 	vstr	s12, [r0, #-72]	; 0xffffffb8
    c->_inv_w = 1.0f / c->_w;
24014a5c:	ed40 6a0c 	vstr	s13, [r0, #-48]	; 0xffffffd0
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24014a60:	f003 ff4e 	bl	24018900 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24014a64:	4629      	mov	r1, r5
24014a66:	f104 0044 	add.w	r0, r4, #68	; 0x44
24014a6a:	2220      	movs	r2, #32
}
24014a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24014a70:	f003 bf46 	b.w	24018900 <memset>
24014a74:	3b14f209 	.word	0x3b14f209
24014a78:	43dc0000 	.word	0x43dc0000
24014a7c:	11c01200 	.word	0x11c01200

24014a80 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
24014a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tMBTriangle* c = *osc;
24014a84:	6804      	ldr	r4, [r0, #0]
{
24014a86:	ed2d 8b10 	vpush	{d8-d15}
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
24014a8a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
24014a8e:	edd4 6a03 	vldr	s13, [r4, #12]
24014a92:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    sync = c->sync;
24014a96:	ed94 8a05 	vldr	s16, [r4, #20]
    invB = 1.0f / b;
24014a9a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
{
24014a9e:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
24014aa0:	ee76 6a89 	vadd.f32	s13, s13, s18
    p = c->_p;  /* phase [0, 1) */
24014aa4:	edd4 7a08 	vldr	s15, [r4, #32]
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014aa8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
24014aac:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
    invB = 1.0f / b;
24014ab0:	eec9 ca07 	vdiv.f32	s25, s18, s14
    z = c->_z;  /* low pass filter state */
24014ab4:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
24014ab8:	ee26 aa8b 	vmul.f32	s20, s13, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
24014ac0:	ee39 7a4a 	vsub.f32	s14, s18, s20
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24014ac4:	e9d4 560d 	ldrd	r5, r6, [r4, #52]	; 0x34
    invB1 = 1.0f / b1;
24014ac8:	ee89 da07 	vdiv.f32	s26, s18, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014acc:	dd7f      	ble.n	24014bce <tMBTriangle_tick+0x14e>
24014ace:	f8d4 801c 	ldr.w	r8, [r4, #28]
24014ad2:	f1b8 0f00 	cmp.w	r8, #0
24014ad6:	dd34      	ble.n	24014b42 <tMBTriangle_tick+0xc2>
24014ad8:	ed94 7a06 	vldr	s14, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24014adc:	edd4 ba0f 	vldr	s23, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014ae0:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
24014ae4:	ee67 8a28 	vmul.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014ae8:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24014aec:	ee67 ba2b 	vmul.f32	s23, s14, s23
    p += sw - (int)sw;
24014af0:	eebd 8ae8 	vcvt.s32.f32	s16, s17
24014af4:	ee77 7aa8 	vadd.f32	s15, s15, s17
24014af8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24014afc:	ee37 8ac8 	vsub.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
24014b00:	2e00      	cmp	r6, #0
24014b02:	d176      	bne.n	24014bf2 <tMBTriangle_tick+0x172>
        
        x = -0.5f + p * invB;
24014b04:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
        if (sw > 0)
24014b08:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        x = -0.5f + p * invB;
24014b0c:	eeb0 9a69 	vmov.f32	s18, s19
        if (sw > 0)
24014b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
24014b14:	eea8 9a2c 	vfma.f32	s18, s16, s25
        if (sw > 0)
24014b18:	f340 8296 	ble.w	24015048 <tMBTriangle_tick+0x5c8>
        {
            if (p >= b) {
24014b1c:	eeb4 8aca 	vcmpe.f32	s16, s20
24014b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b24:	f280 8206 	bge.w	24014f34 <tMBTriangle_tick+0x4b4>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014b28:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24014b2c:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
24014b2e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
24014b32:	eeb4 8ae9 	vcmpe.f32	s16, s19
24014b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b3a:	f280 836d 	bge.w	24015218 <tMBTriangle_tick+0x798>
24014b3e:	461e      	mov	r6, r3
24014b40:	e06f      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
    sw = w * c->syncdir;
24014b42:	edd4 ba06 	vldr	s23, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24014b46:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24014b4a:	ee68 8aab 	vmul.f32	s17, s17, s23
    float inv_sw = c->_inv_w * c->syncdir;
24014b4e:	ee6b ba87 	vmul.f32	s23, s23, s14
    p += sw - (int)sw;
24014b52:	eebd cae8 	vcvt.s32.f32	s24, s17
24014b56:	ee77 9aa8 	vadd.f32	s19, s15, s17
24014b5a:	eeb8 cacc 	vcvt.f32.s32	s24, s24
24014b5e:	ee39 eacc 	vsub.f32	s28, s19, s24
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24014b62:	f040 8712 	bne.w	2401598a <tMBTriangle_tick+0xf0a>
        if (sw > 0) p = eof_offset;
24014b66:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        float eof_offset = sync * sw;
24014b6a:	ee28 8a28 	vmul.f32	s16, s16, s17
        if (sw > 0) p = eof_offset;
24014b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24014b72:	ee7e da48 	vsub.f32	s27, s28, s16
        if (sw > 0) p = eof_offset;
24014b76:	f340 8150 	ble.w	24014e1a <tMBTriangle_tick+0x39a>
        if (!k) {
24014b7a:	2e00      	cmp	r6, #0
24014b7c:	f040 82e3 	bne.w	24015146 <tMBTriangle_tick+0x6c6>
                if (p_at_reset >= b) {
24014b80:	eeb4 aaed 	vcmpe.f32	s20, s27
24014b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b88:	f240 8522 	bls.w	240155d0 <tMBTriangle_tick+0xb50>
                if (p_at_reset >= 1.0f) {
24014b8c:	eef4 dac9 	vcmpe.f32	s27, s18
24014b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b94:	f280 83b8 	bge.w	24015308 <tMBTriangle_tick+0x888>
24014b98:	eddf 7ae5 	vldr	s15, [pc, #916]	; 24014f30 <tMBTriangle_tick+0x4b0>
            x = -0.5f + p_at_reset * invB;
24014b9c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014ba0:	ee6b baa7 	vmul.f32	s23, s23, s15
24014ba4:	eeb0 ca40 	vmov.f32	s24, s0
	i = lrintf(r - 0.5f);
24014ba8:	eea8 0a2b 	vfma.f32	s0, s16, s23
24014bac:	f004 facc 	bl	24019148 <lrintf>
	r -= (float)i;
24014bb0:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
24014bb4:	eeac caad 	vfma.f32	s24, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014bb8:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	r -= (float)i;
24014bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
24014bc0:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014bc4:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
24014bc8:	eed8 7a2b 	vfnms.f32	s15, s16, s23
24014bcc:	e2fb      	b.n	240151c6 <tMBTriangle_tick+0x746>
    sw = w * c->syncdir;
24014bce:	edd4 ba06 	vldr	s23, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24014bd2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24014bd6:	ee6b 8aa8 	vmul.f32	s17, s23, s17
    float inv_sw = c->_inv_w * c->syncdir;
24014bda:	ee6b ba87 	vmul.f32	s23, s23, s14
    p += sw - (int)sw;
24014bde:	eebd 8ae8 	vcvt.s32.f32	s16, s17
24014be2:	ee78 7aa7 	vadd.f32	s15, s17, s15
24014be6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24014bea:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (!k) {  /* normal operation, slope currently up */
24014bee:	2e00      	cmp	r6, #0
24014bf0:	d088      	beq.n	24014b04 <tMBTriangle_tick+0x84>
            }
        }
        
    } else {  /* normal operation, slope currently down */
        
        x = 0.5f - (p - b) * invB1;
24014bf2:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
        if (sw > 0)
24014bf6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        x = 0.5f - (p - b) * invB1;
24014bfa:	ee7a 7a48 	vsub.f32	s15, s20, s16
24014bfe:	eeb0 9a69 	vmov.f32	s18, s19
        if (sw > 0)
24014c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
24014c06:	eea7 9a8d 	vfma.f32	s18, s15, s26
        if (sw > 0)
24014c0a:	f340 81d1 	ble.w	24014fb0 <tMBTriangle_tick+0x530>
        {
            if (p >= 1.0f) {
24014c0e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24014c12:	eeb4 8acb 	vcmpe.f32	s16, s22
24014c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c1a:	f280 8112 	bge.w	24014e42 <tMBTriangle_tick+0x3c2>
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    
    c->_f[currentSamp] = x;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24014c1e:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24014c22:	1d2b      	adds	r3, r5, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24014c24:	b2ff      	uxtb	r7, r7
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24014c26:	f003 0307 	and.w	r3, r3, #7
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24014c2a:	f88d 7005 	strb.w	r7, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014c2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = x;
24014c32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24014c36:	ed83 9a11 	vstr	s18, [r3, #68]	; 0x44
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014c3a:	2a00      	cmp	r2, #0
24014c3c:	f000 827e 	beq.w	2401513c <tMBTriangle_tick+0x6bc>
24014c40:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24014c44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24014c48:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014c4c:	2200      	movs	r2, #0
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014c4e:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014c52:	49b5      	ldr	r1, [pc, #724]	; (24014f28 <tMBTriangle_tick+0x4a8>)
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014c54:	4fb5      	ldr	r7, [pc, #724]	; (24014f2c <tMBTriangle_tick+0x4ac>)
24014c56:	e051      	b.n	24014cfc <tMBTriangle_tick+0x27c>
24014c58:	f8bd e006 	ldrh.w	lr, [sp, #6]
24014c5c:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24014c60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24014c64:	fa1f fe8e 	uxth.w	lr, lr
24014c68:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24014c6c:	fa1f f989 	uxth.w	r9, r9
24014c70:	b29b      	uxth	r3, r3
24014c72:	fa1f f888 	uxth.w	r8, r8
24014c76:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24014c7a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
24014c7e:	eb04 0848 	add.w	r8, r4, r8, lsl #1
24014c82:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24014c86:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
24014c8a:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
24014c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014c92:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
24014c96:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
24014c9a:	eb07 0ec8 	add.w	lr, r7, r8, lsl #3
24014c9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24014ca2:	ed99 7a00 	vldr	s14, [r9]
24014ca6:	edde 5a01 	vldr	s11, [lr, #4]
24014caa:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014cae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014cb2:	eea5 7a25 	vfma.f32	s14, s10, s11
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014cb6:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014cba:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014cbc:	fa1f fe8e 	uxth.w	lr, lr
24014cc0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24014cc4:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014cc8:	eee6 7a87 	vfma.f32	s15, s13, s14
24014ccc:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014cd0:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24014cd4:	f108 0840 	add.w	r8, r8, #64	; 0x40
24014cd8:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014cdc:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24014ce0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24014ce4:	459e      	cmp	lr, r3
24014ce6:	d304      	bcc.n	24014cf2 <tMBTriangle_tick+0x272>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
24014ce8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
24014cec:	3b01      	subs	r3, #1
24014cee:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014cf2:	f89d 3005 	ldrb.w	r3, [sp, #5]
24014cf6:	3201      	adds	r2, #1
24014cf8:	4293      	cmp	r3, r2
24014cfa:	dd72      	ble.n	24014de2 <tMBTriangle_tick+0x362>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24014cfc:	ebac 0302 	sub.w	r3, ip, r2
24014d00:	b29b      	uxth	r3, r3
24014d02:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24014d06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24014d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014d0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24014d12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24014d16:	b29b      	uxth	r3, r3
24014d18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014d1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24014d20:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
24014d24:	eeb4 7ac6 	vcmpe.f32	s14, s12
24014d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014d2c:	d494      	bmi.n	24014c58 <tMBTriangle_tick+0x1d8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014d2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24014d32:	f8bd e006 	ldrh.w	lr, [sp, #6]
24014d36:	b29b      	uxth	r3, r3
24014d38:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24014d3c:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24014d40:	fa1f fe8e 	uxth.w	lr, lr
24014d44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014d48:	fa1f f989 	uxth.w	r9, r9
24014d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24014d50:	fa1f f888 	uxth.w	r8, r8
24014d54:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
24014d58:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24014d5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24014d60:	eb08 0848 	add.w	r8, r8, r8, lsl #1
24014d64:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24014d68:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
24014d6c:	b29b      	uxth	r3, r3
24014d6e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
24014d72:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24014d76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24014d7a:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
24014d7e:	eb01 0889 	add.w	r8, r1, r9, lsl #2
24014d82:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
24014d86:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
24014d8a:	edd8 6a01 	vldr	s13, [r8, #4]
24014d8e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24014d92:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014d96:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014d9a:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014d9e:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24014da2:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014da6:	ee76 6ae4 	vsub.f32	s13, s13, s9
24014daa:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24014dae:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014db2:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24014db6:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014dba:	eee5 7a87 	vfma.f32	s15, s11, s14
24014dbe:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014dc2:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
24014dc6:	3340      	adds	r3, #64	; 0x40
24014dc8:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24014dcc:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
24014dd0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24014dd4:	459e      	cmp	lr, r3
24014dd6:	d287      	bcs.n	24014ce8 <tMBTriangle_tick+0x268>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014dd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
24014ddc:	3201      	adds	r2, #1
24014dde:	4293      	cmp	r3, r2
24014de0:	dc8c      	bgt.n	24014cfc <tMBTriangle_tick+0x27c>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
24014de2:	ee77 7aea 	vsub.f32	s15, s15, s21
    c->out = z;
    j = (j+1) & 7;
24014de6:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
24014de8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    c->_p = p;
24014dec:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
24014df0:	eeb0 7a6a 	vmov.f32	s14, s21
    j = (j+1) & 7;
24014df4:	f005 0507 	and.w	r5, r5, #7
    c->_w = w;
    c->_b = b;
24014df8:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
24014dfc:	63a6      	str	r6, [r4, #56]	; 0x38
    z += 0.5f * (c->_f[j] - z);
24014dfe:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->_j = j;
24014e02:	6365      	str	r5, [r4, #52]	; 0x34
    
    return -c->out;
24014e04:	eeb1 0a47 	vneg.f32	s0, s14
    c->out = z;
24014e08:	ed84 7a01 	vstr	s14, [r4, #4]
    c->_z = z;
24014e0c:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
24014e10:	b003      	add	sp, #12
24014e12:	ecbd 8b10 	vpop	{d8-d15}
24014e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (sw < 0) p = 1.0f - eof_offset;
24014e1a:	f100 82fa 	bmi.w	24015412 <tMBTriangle_tick+0x992>
        if (!k) {
24014e1e:	2e00      	cmp	r6, #0
24014e20:	f000 8269 	beq.w	240152f6 <tMBTriangle_tick+0x876>
            x = 0.5f - (p_at_reset - b) * invB1;
24014e24:	ee3a 7a08 	vadd.f32	s14, s20, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24014e28:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            x = 0.5f - (p_at_reset - b) * invB1;
24014e2c:	ee7c 7a69 	vsub.f32	s15, s24, s19
24014e30:	eeb0 9a4b 	vmov.f32	s18, s22
    p += sw - (int)sw;
24014e34:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
24014e38:	ee77 7a27 	vadd.f32	s15, s14, s15
24014e3c:	eead 9a27 	vfma.f32	s18, s26, s15
            if (sw > 0)
24014e40:	e6ef      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
	i = lrintf(r - 0.5f);
24014e42:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
24014e46:	eddf 7a3a 	vldr	s15, [pc, #232]	; 24014f30 <tMBTriangle_tick+0x4b0>
                p -= 1.0f;
24014e4a:	ee38 ca4b 	vsub.f32	s24, s16, s22
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24014e4e:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
24014e52:	eeb0 0a49 	vmov.f32	s0, s18
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24014e56:	ee3c 7a8d 	vadd.f32	s14, s25, s26
	i = lrintf(r - 0.5f);
24014e5a:	eeab 0a8c 	vfma.f32	s0, s23, s24
	scale *= w;
24014e5e:	ee68 8a87 	vmul.f32	s17, s17, s14
	i = lrintf(r - 0.5f);
24014e62:	f004 f971 	bl	24019148 <lrintf>
	r -= (float)i;
24014e66:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e6a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014e6e:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
24014e72:	eeb4 aacc 	vcmpe.f32	s20, s24
	r -= (float)i;
24014e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e7a:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014e7c:	3701      	adds	r7, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014e7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e82:	f003 063f 	and.w	r6, r3, #63	; 0x3f
            if (!k && p >= b) {
24014e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24014e8a:	eedb 7a8c 	vfnms.f32	s15, s23, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014e8e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014e92:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e96:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24014e9a:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014e9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24014ea2:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014ea6:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014eaa:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014eae:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014eb2:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
24014eb6:	f200 8403 	bhi.w	240156c0 <tMBTriangle_tick+0xc40>
                x = 0.5f - (p - b) * invB1;
24014eba:	ee7a 7a0b 	vadd.f32	s15, s20, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014ebe:	3701      	adds	r7, #1
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24014ec0:	ee7c ca4a 	vsub.f32	s25, s24, s20
	i = lrintf(r - 0.5f);
24014ec4:	eeb0 0a49 	vmov.f32	s0, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014ec8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24014ecc:	ee77 7ac8 	vsub.f32	s15, s15, s16
24014ed0:	eeb0 9a69 	vmov.f32	s18, s19
	i = lrintf(r - 0.5f);
24014ed4:	eeab 0aac 	vfma.f32	s0, s23, s25
                p -= 1.0f;
24014ed8:	eeb0 8a4c 	vmov.f32	s16, s24
                x = 0.5f - (p - b) * invB1;
24014edc:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
24014ee0:	f004 f932 	bl	24019148 <lrintf>
	r -= (float)i;
24014ee4:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014ee8:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014eea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014eee:	eef1 7a68 	vneg.f32	s15, s17
	r -= (float)i;
24014ef2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
24014efa:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014efc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f00:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
24014f04:	ee9b 7aac 	vfnms.f32	s14, s23, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
24014f08:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24014f0c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014f14:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014f18:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f1c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014f20:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24014f24:	e67d      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
24014f26:	bf00      	nop
24014f28:	24024a00 	.word	0x24024a00
24014f2c:	24029104 	.word	0x24029104
24014f30:	42800000 	.word	0x42800000
                x = 0.5f - (p - b) * invB1;;
24014f34:	ed1f ca02 	vldr	s24, [pc, #-8]	; 24014f30 <tMBTriangle_tick+0x4b0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24014f38:	ee78 da4a 	vsub.f32	s27, s16, s20
	i = lrintf(r - 0.5f);
24014f3c:	eeb0 0a69 	vmov.f32	s0, s19
24014f40:	ee2b ca8c 	vmul.f32	s24, s23, s24
                x = 0.5f - (p - b) * invB1;;
24014f44:	ee7a 7a48 	vsub.f32	s15, s20, s16
24014f48:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24014f4c:	eead 0a8c 	vfma.f32	s0, s27, s24
24014f50:	ee3c ba8d 	vadd.f32	s22, s25, s26
                x = 0.5f - (p - b) * invB1;;
24014f54:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
24014f58:	f004 f8f6 	bl	24019148 <lrintf>
	r -= (float)i;
24014f5c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f60:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014f64:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014f68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f70:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014f72:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014f74:	ee68 7acb 	vnmul.f32	s15, s17, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014f7c:	ee9d 7a8c 	vfnms.f32	s14, s27, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014f80:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f84:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014f8c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24014f90:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014f98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f9c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014fa0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014fa4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
                k = 1;
24014fa8:	2301      	movs	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014faa:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24014fae:	e5be      	b.n	24014b2e <tMBTriangle_tick+0xae>
        else if (sw < 0)
24014fb0:	f57f ae35 	bpl.w	24014c1e <tMBTriangle_tick+0x19e>
            if (p < b) {
24014fb4:	eeb4 8aca 	vcmpe.f32	s16, s20
24014fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014fbc:	f100 81ed 	bmi.w	2401539a <tMBTriangle_tick+0x91a>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014fc0:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (p < 0.0f) {
24014fc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24014fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014fcc:	f57f ae29 	bpl.w	24014c22 <tMBTriangle_tick+0x1a2>
                p += 1.0f;
24014fd0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24014fd4:	ed1f ba2a 	vldr	s22, [pc, #-168]	; 24014f30 <tMBTriangle_tick+0x4b0>
	r = MINBLEP_PHASES * phase * inv_w;
24014fd8:	ee6b ba88 	vmul.f32	s23, s23, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014fdc:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24014fde:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 1;
24014fe2:	2601      	movs	r6, #1
                p += 1.0f;
24014fe4:	ee38 8a29 	vadd.f32	s16, s16, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014fe8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24014fec:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24014ff0:	eeab 0a8b 	vfma.f32	s0, s23, s22
                x = 0.5f - (p - b) * invB1;
24014ff4:	ee7a 7a48 	vsub.f32	s15, s20, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24014ff8:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
24014ffc:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
24015000:	f004 f8a2 	bl	24019148 <lrintf>
	r -= (float)i;
24015004:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015008:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401500c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015010:	ee6c cae8 	vnmul.f32	s25, s25, s17
	r -= (float)i;
24015014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015018:	3301      	adds	r3, #1
2401501a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401501e:	eedb 7a8b 	vfnms.f32	s15, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015022:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015026:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401502a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401502e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015032:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015036:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401503a:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401503e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015042:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24015046:	e5ec      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
            if (p < 0.0f) {
24015048:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401504c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015050:	f57f ade5 	bpl.w	24014c1e <tMBTriangle_tick+0x19e>
24015054:	eef5 8ac0 	vcmpe.f32	s17, #0.0
24015058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401505c:	f57f addf 	bpl.w	24014c1e <tMBTriangle_tick+0x19e>
	r = MINBLEP_PHASES * phase * inv_w;
24015060:	ee6b da88 	vmul.f32	s27, s23, s16
	i = lrintf(r - 0.5f);
24015064:	ed1f ba4e 	vldr	s22, [pc, #-312]	; 24014f30 <tMBTriangle_tick+0x4b0>
24015068:	eeb0 0a69 	vmov.f32	s0, s19
                p += 1.0f;
2401506c:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24015070:	ee3c 9a8d 	vadd.f32	s18, s25, s26
	i = lrintf(r - 0.5f);
24015074:	eead 0a8b 	vfma.f32	s0, s27, s22
24015078:	f004 f866 	bl	24019148 <lrintf>
	r -= (float)i;
2401507c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015080:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                p += 1.0f;
24015084:	ee38 8a0c 	vadd.f32	s16, s16, s24
	r -= (float)i;
24015088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401508c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015090:	3301      	adds	r3, #1
24015092:	ee69 8a28 	vmul.f32	s17, s18, s17
            if (k && p < b) {
24015096:	eeb4 aac8 	vcmpe.f32	s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401509a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401509c:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
240150a0:	eedd 7a8b 	vfnms.f32	s15, s27, s22
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240150a4:	eeb1 7a68 	vneg.f32	s14, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240150a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240150ac:	eb08 0348 	add.w	r3, r8, r8, lsl #1
            if (k && p < b) {
240150b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240150b4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240150b8:	eb04 0248 	add.w	r2, r4, r8, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240150bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240150c0:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240150c4:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240150c8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240150cc:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240150d0:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240150d4:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (k && p < b) {
240150d8:	f340 844e 	ble.w	24015978 <tMBTriangle_tick+0xef8>
                x = -0.5f + p * invB;
240150dc:	ee38 da4a 	vsub.f32	s26, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240150e0:	3701      	adds	r7, #1
240150e2:	ee2b ba8b 	vmul.f32	s22, s23, s22
	i = lrintf(r - 0.5f);
240150e6:	eeb0 0a69 	vmov.f32	s0, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240150ea:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
240150ee:	eeb0 9a69 	vmov.f32	s18, s19
	i = lrintf(r - 0.5f);
240150f2:	eeab 0a0d 	vfma.f32	s0, s22, s26
240150f6:	f004 f827 	bl	24019148 <lrintf>
	r -= (float)i;
240150fa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240150fe:	f108 0301 	add.w	r3, r8, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015102:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401510a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = -0.5f + p * invB;
2401510e:	eeac 9a88 	vfma.f32	s18, s25, s16
	r -= (float)i;
24015112:	eedb 7a0d 	vfnms.f32	s15, s22, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015116:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401511a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401511e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24015122:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015126:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401512a:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401512e:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015132:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015136:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
2401513a:	e572      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
    z += 0.5f * (c->_f[j] - z);
2401513c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
24015140:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24015144:	e64d      	b.n	24014de2 <tMBTriangle_tick+0x362>
            x = 0.5f - (p_at_reset - b) * invB1;
24015146:	ee7c 9a69 	vsub.f32	s19, s24, s19
2401514a:	ee7a 7a08 	vadd.f32	s15, s20, s16
                if (p_at_reset >= 1.0f) {
2401514e:	eef4 dac9 	vcmpe.f32	s27, s18
            x = 0.5f - (p_at_reset - b) * invB1;
24015152:	eeb0 ca4b 	vmov.f32	s24, s22
24015156:	ee77 7aa9 	vadd.f32	s15, s15, s19
                if (p_at_reset >= 1.0f) {
2401515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
2401515e:	eea7 ca8d 	vfma.f32	s24, s15, s26
                if (p_at_reset >= 1.0f) {
24015162:	f280 81c6 	bge.w	240154f2 <tMBTriangle_tick+0xa72>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015166:	ee3c ea8d 	vadd.f32	s28, s25, s26
2401516a:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 24014f30 <tMBTriangle_tick+0x4b0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401516e:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24015172:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015176:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
2401517a:	ee2e ea28 	vmul.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
2401517e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015182:	3601      	adds	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015184:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015186:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
2401518a:	eea8 0a2b 	vfma.f32	s0, s16, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401518e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24015192:	f003 ffd9 	bl	24019148 <lrintf>
	r -= (float)i;
24015196:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401519a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401519e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240151a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240151a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240151aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240151ae:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
240151b2:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240151b6:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240151ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240151be:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240151c2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
240151c6:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240151ca:	3601      	adds	r6, #1
            if (p >= b) {
240151cc:	eeb4 aac8 	vcmpe.f32	s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240151d0:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240151d2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
240151d6:	ee39 ca4c 	vsub.f32	s24, s18, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240151da:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240151de:	eb04 0346 	add.w	r3, r4, r6, lsl #1
            if (p >= b) {
240151e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240151e6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240151ea:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	scale *= w;
240151ee:	ee2c ca28 	vmul.f32	s24, s24, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
240151f2:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240151f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240151fa:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240151fe:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015202:	ed82 ca3c 	vstr	s24, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015206:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401520a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p >= b) {
2401520e:	d93a      	bls.n	24015286 <tMBTriangle_tick+0x806>
            x = -0.5f + p * invB;
24015210:	eeac 9a88 	vfma.f32	s18, s25, s16
            k = 0;
24015214:	4646      	mov	r6, r8
24015216:	e504      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
                p -= 1.0f;
24015218:	ed5f 7abb 	vldr	s15, [pc, #-748]	; 24014f30 <tMBTriangle_tick+0x4b0>
2401521c:	ee38 8a69 	vsub.f32	s16, s16, s19
                x = -0.5f + p * invB;
24015220:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015224:	3701      	adds	r7, #1
24015226:	ee6b baa7 	vmul.f32	s23, s23, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
2401522a:	ee3c da8d 	vadd.f32	s26, s25, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401522e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
24015232:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
24015236:	eeab 0a88 	vfma.f32	s0, s23, s16
2401523a:	f003 ff85 	bl	24019148 <lrintf>
	r -= (float)i;
2401523e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015242:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015246:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401524a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401524e:	3301      	adds	r3, #1
	scale *= w;
24015250:	ee2d da28 	vmul.f32	s26, s26, s17
                x = -0.5f + p * invB;
24015254:	eeac 9a88 	vfma.f32	s18, s25, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401525c:	eedb 7a88 	vfnms.f32	s15, s23, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015260:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015264:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015268:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401526c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
24015274:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015278:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401527c:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015280:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24015284:	e4cd      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
                x = 0.5f - (p - b) * invB1;
24015286:	ee3a 7a48 	vsub.f32	s14, s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401528a:	3701      	adds	r7, #1
                x = 0.5f - (p - b) * invB1;
2401528c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24015290:	ee78 9a4a 	vsub.f32	s19, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015294:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24015298:	eeb0 0a49 	vmov.f32	s0, s18
                x = 0.5f - (p - b) * invB1;
2401529c:	eee7 7a0d 	vfma.f32	s15, s14, s26
240152a0:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
240152a4:	eea9 0aab 	vfma.f32	s0, s19, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240152a8:	ee68 caec 	vnmul.f32	s25, s17, s25
                x = 0.5f - (p - b) * invB1;
240152ac:	eeb0 9a67 	vmov.f32	s18, s15
	i = lrintf(r - 0.5f);
240152b0:	f003 ff4a 	bl	24019148 <lrintf>
	r -= (float)i;
240152b4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240152b8:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240152ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240152be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
240152c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240152c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
240152ca:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240152cc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240152d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
240152d4:	eed9 7aab 	vfnms.f32	s15, s19, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240152d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240152dc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240152e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240152e4:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240152e8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240152ec:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240152f0:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240152f4:	e495      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
            x = -0.5f + p_at_reset * invB;
240152f6:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
240152fa:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    p += sw - (int)sw;
240152fe:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
24015302:	eeac 9aad 	vfma.f32	s18, s25, s27
            else if (sw < 0)
24015306:	e48c      	b.n	24014c22 <tMBTriangle_tick+0x1a2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015308:	ee7c 7a8d 	vadd.f32	s15, s25, s26
2401530c:	ed9f 7af0 	vldr	s14, [pc, #960]	; 240156d0 <tMBTriangle_tick+0xc50>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015310:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24015314:	ee6b ba87 	vmul.f32	s23, s23, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015318:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
2401531c:	ee67 eaa8 	vmul.f32	s29, s15, s17
                    p_at_reset -= 1.0f;
24015320:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015324:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
24015326:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401532a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401532c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    p_at_reset -= 1.0f;
24015330:	ee7d dae9 	vsub.f32	s27, s27, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015334:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24015338:	eeb0 0a49 	vmov.f32	s0, s18
                    x = -0.5f + p_at_reset * invB;
2401533c:	eeb0 ca49 	vmov.f32	s24, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24015340:	ee38 ba2d 	vadd.f32	s22, s16, s27
                    x = -0.5f + p_at_reset * invB;
24015344:	eeac caad 	vfma.f32	s24, s25, s27
	i = lrintf(r - 0.5f);
24015348:	eeab 0a2b 	vfma.f32	s0, s22, s23
2401534c:	f003 fefc 	bl	24019148 <lrintf>
	r -= (float)i;
24015350:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015354:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
24015358:	eeb0 0a49 	vmov.f32	s0, s18
	r -= (float)i;
2401535c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015360:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24015368:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	i = lrintf(r - 0.5f);
2401536c:	eea8 0a2b 	vfma.f32	s0, s16, s23
	r -= (float)i;
24015370:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24015374:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015378:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401537c:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015380:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24015384:	f003 fee0 	bl	24019148 <lrintf>
	r -= (float)i;
24015388:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
2401538c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24015390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015394:	eed8 7a2b 	vfnms.f32	s15, s16, s23
24015398:	e715      	b.n	240151c6 <tMBTriangle_tick+0x746>
                x = -0.5f + p * invB;
2401539a:	ed9f bacd 	vldr	s22, [pc, #820]	; 240156d0 <tMBTriangle_tick+0xc50>
2401539e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240153a2:	ee78 9a4a 	vsub.f32	s19, s16, s20
                k = 0;
240153a6:	2600      	movs	r6, #0
240153a8:	ee2b ba8b 	vmul.f32	s22, s23, s22
                x = -0.5f + p * invB;
240153ac:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
240153b0:	eeab 0a29 	vfma.f32	s0, s22, s19
240153b4:	f003 fec8 	bl	24019148 <lrintf>
	r -= (float)i;
240153b8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240153bc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
240153c0:	ee7c 7a8d 	vadd.f32	s15, s25, s26
	r -= (float)i;
240153c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240153c8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240153cc:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240153ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240153d2:	3701      	adds	r7, #1
	scale *= w;
240153d4:	ee67 7aa8 	vmul.f32	s15, s15, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240153d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240153dc:	ee9b 7a29 	vfnms.f32	s14, s22, s19
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240153e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240153e4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240153e8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240153ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240153f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
                x = -0.5f + p * invB;
240153f4:	eea8 9a2c 	vfma.f32	s18, s16, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
240153f8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240153fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
24015400:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015404:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015408:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401540c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24015410:	e5d8      	b.n	24014fc4 <tMBTriangle_tick+0x544>
        else if (sw < 0) p = 1.0f - eof_offset;
24015412:	ee79 ea48 	vsub.f32	s29, s18, s16
        if (!k) {
24015416:	2e00      	cmp	r6, #0
24015418:	f040 8123 	bne.w	24015662 <tMBTriangle_tick+0xbe2>
                if (p_at_reset < 0.0f) {
2401541c:	eef5 dac0 	vcmpe.f32	s27, #0.0
24015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015424:	f100 818e 	bmi.w	24015744 <tMBTriangle_tick+0xcc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015428:	ee7c 9a8d 	vadd.f32	s19, s25, s26
2401542c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 240156d0 <tMBTriangle_tick+0xc50>
            x = -0.5f + p_at_reset * invB;
24015430:	ee6c daad 	vmul.f32	s27, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015434:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24015438:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401543c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
24015440:	ee68 9ae9 	vnmul.f32	s19, s17, s19
	i = lrintf(r - 0.5f);
24015444:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015448:	3601      	adds	r6, #1
2401544a:	eeb1 9a48 	vneg.f32	s18, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401544e:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015450:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
24015454:	eea8 0a6b 	vfms.f32	s0, s16, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015458:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
2401545c:	f003 fe74 	bl	24019148 <lrintf>
	r -= (float)i;
24015460:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015464:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015468:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
2401546c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015470:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015474:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24015478:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
2401547c:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24015480:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015484:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015488:	edc2 9a3c 	vstr	s19, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401548c:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015490:	3601      	adds	r6, #1
            if (p < b) {
24015492:	eeb4 aaee 	vcmpe.f32	s20, s29
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015496:	3701      	adds	r7, #1
	scale *= w;
24015498:	ee28 7aad 	vmul.f32	s14, s17, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401549c:	f006 093f 	and.w	r9, r6, #63	; 0x3f
            if (p < b) {
240154a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240154a4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240154a8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240154ac:	f8a4 9066 	strh.w	r9, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240154b0:	eb04 0149 	add.w	r1, r4, r9, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240154b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240154b8:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240154bc:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240154c0:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240154c4:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240154c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240154cc:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p < b) {
240154d0:	f300 8100 	bgt.w	240156d4 <tMBTriangle_tick+0xc54>
            x = 0.5f - (p - b) * invB1;
240154d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
240154d8:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
240154da:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
240154de:	ee78 7a67 	vsub.f32	s15, s16, s15
240154e2:	eeb0 8a6e 	vmov.f32	s16, s29
240154e6:	ee77 7a8a 	vadd.f32	s15, s15, s20
240154ea:	eea7 9a8d 	vfma.f32	s18, s15, s26
240154ee:	f7ff bb98 	b.w	24014c22 <tMBTriangle_tick+0x1a2>
                    p_at_reset -= 1.0f;
240154f2:	ee7d dac9 	vsub.f32	s27, s27, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240154f6:	eddf 7a76 	vldr	s15, [pc, #472]	; 240156d0 <tMBTriangle_tick+0xc50>
	i = lrintf(r - 0.5f);
240154fa:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
240154fe:	ee6b baa7 	vmul.f32	s23, s23, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24015502:	ee78 ea2d 	vadd.f32	s29, s16, s27
	i = lrintf(r - 0.5f);
24015506:	eeb0 0a4c 	vmov.f32	s0, s24
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401550a:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
2401550e:	eeae 0aab 	vfma.f32	s0, s29, s23
24015512:	f003 fe19 	bl	24019148 <lrintf>
	r -= (float)i;
24015516:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401551a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (!k && p_at_reset >= b) {
2401551e:	eeb4 aaed 	vcmpe.f32	s20, s27
	r -= (float)i;
24015522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015526:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401552a:	3301      	adds	r3, #1
	scale *= w;
2401552c:	ee2e ea28 	vmul.f32	s28, s28, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015530:	3701      	adds	r7, #1
                if (!k && p_at_reset >= b) {
24015532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015536:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
2401553a:	eede 7aab 	vfnms.f32	s15, s29, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401553e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015542:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015546:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401554a:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401554e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24015552:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015556:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401555a:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401555e:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015562:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24015566:	f200 8190 	bhi.w	2401588a <tMBTriangle_tick+0xe0a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
2401556a:	ee78 7a4a 	vsub.f32	s15, s16, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401556e:	3601      	adds	r6, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24015570:	ee3a 7a09 	vadd.f32	s14, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015574:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24015576:	eeb0 0a4c 	vmov.f32	s0, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401557a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
2401557e:	ee77 daad 	vadd.f32	s27, s15, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015582:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
24015586:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
2401558a:	eead 0aab 	vfma.f32	s0, s27, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
2401558e:	ee77 9a29 	vadd.f32	s19, s14, s19
	i = lrintf(r - 0.5f);
24015592:	f003 fdd9 	bl	24019148 <lrintf>
	r -= (float)i;
24015596:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401559a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401559e:	eeb1 7a4e 	vneg.f32	s14, s28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240155a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240155a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240155aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
240155ae:	eea9 ba8d 	vfma.f32	s22, s19, s26
	c->BLEPindices[c->mostRecentBLEP] = i;
240155b2:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
240155b6:	eedd 7aab 	vfnms.f32	s15, s27, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240155ba:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240155be:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240155c2:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
                    x = 0.5f - (p_at_reset - b) * invB1;
240155c6:	eeb0 ca4b 	vmov.f32	s24, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240155ca:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        if (sw > 0)
240155ce:	e5d6      	b.n	2401517e <tMBTriangle_tick+0x6fe>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
240155d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 240156d0 <tMBTriangle_tick+0xc50>
240155d4:	ee3e fa4a 	vsub.f32	s30, s28, s20
	i = lrintf(r - 0.5f);
240155d8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240155dc:	ee6b ba87 	vmul.f32	s23, s23, s14
240155e0:	ee7c 7a8d 	vadd.f32	s15, s25, s26
240155e4:	eeaf 0a2b 	vfma.f32	s0, s30, s23
240155e8:	ee27 eaa8 	vmul.f32	s28, s15, s17
240155ec:	f003 fdac 	bl	24019148 <lrintf>
	r -= (float)i;
240155f0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240155f4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240155f8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
240155fc:	eef4 dac9 	vcmpe.f32	s27, s18
	r -= (float)i;
24015600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015604:	1c5e      	adds	r6, r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015606:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015608:	eeb1 7a4e 	vneg.f32	s14, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401560c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
24015610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24015614:	eedf 7a2b 	vfnms.f32	s15, s30, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015618:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401561c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015620:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24015624:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015628:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401562c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015630:	eef0 ea4e 	vmov.f32	s29, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
24015634:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015638:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401563c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015640:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015644:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24015648:	f6bf ae6a 	bge.w	24015320 <tMBTriangle_tick+0x8a0>
                    x = 0.5f - (p_at_reset - b) * invB1;
2401564c:	ee7a 7a08 	vadd.f32	s15, s20, s16
24015650:	ee77 7a8c 	vadd.f32	s15, s15, s24
24015654:	ee77 7ae9 	vsub.f32	s15, s15, s19
24015658:	eea7 ba8d 	vfma.f32	s22, s15, s26
2401565c:	eeb0 ca4b 	vmov.f32	s24, s22
24015660:	e58d      	b.n	2401517e <tMBTriangle_tick+0x6fe>
            x = 0.5f - (p_at_reset - b) * invB1;
24015662:	ee7c 9a69 	vsub.f32	s19, s24, s19
24015666:	ee3a 7a08 	vadd.f32	s14, s20, s16
                if (p_at_reset < b) {
2401566a:	eeb4 aaed 	vcmpe.f32	s20, s27
            x = 0.5f - (p_at_reset - b) * invB1;
2401566e:	ee39 7a87 	vadd.f32	s14, s19, s14
                if (p_at_reset < b) {
24015672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24015676:	ee6d 7a07 	vmul.f32	s15, s26, s14
                if (p_at_reset < b) {
2401567a:	f300 80c8 	bgt.w	2401580e <tMBTriangle_tick+0xd8e>
                if (p_at_reset < 0.0f) {
2401567e:	eef5 dac0 	vcmpe.f32	s27, #0.0
24015682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015686:	f100 8111 	bmi.w	240158ac <tMBTriangle_tick+0xe2c>
        else if (sw < 0)
2401568a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 240156d0 <tMBTriangle_tick+0xc50>
	i = lrintf(r - 0.5f);
2401568e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015692:	ee77 da89 	vadd.f32	s27, s15, s18
24015696:	ee6b ba87 	vmul.f32	s23, s23, s14
2401569a:	eeb1 9a48 	vneg.f32	s18, s16
2401569e:	eea8 0a6b 	vfms.f32	s0, s16, s23
240156a2:	f003 fd51 	bl	24019148 <lrintf>
	r -= (float)i;
240156a6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240156aa:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240156ae:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
240156b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240156b6:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
240156ba:	eed9 7a2b 	vfnms.f32	s15, s18, s23
240156be:	e6e7      	b.n	24015490 <tMBTriangle_tick+0xa10>
                x = -0.5f + p * invB;
240156c0:	eeac 9a8c 	vfma.f32	s18, s25, s24
                k = 0;
240156c4:	2600      	movs	r6, #0
                p -= 1.0f;
240156c6:	eeb0 8a4c 	vmov.f32	s16, s24
240156ca:	f7ff baaa 	b.w	24014c22 <tMBTriangle_tick+0x1a2>
240156ce:	bf00      	nop
240156d0:	42800000 	.word	0x42800000
                x = -0.5f + p * invB;
240156d4:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240156d8:	3701      	adds	r7, #1
240156da:	ee7e 9aca 	vsub.f32	s19, s29, s20
                k = 0;
240156de:	4646      	mov	r6, r8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240156e0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
}
240156e4:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
240156e8:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
240156ec:	eeac 9aae 	vfma.f32	s18, s25, s29
	scale *= w;
240156f0:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
240156f4:	eea9 0aab 	vfma.f32	s0, s19, s23
240156f8:	f003 fd26 	bl	24019148 <lrintf>
	r -= (float)i;
240156fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015700:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015704:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
24015710:	ee6c 8aa8 	vmul.f32	s17, s25, s17
	r -= (float)i;
24015714:	eed9 7aab 	vfnms.f32	s15, s19, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015718:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401571c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015720:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24015724:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015728:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401572c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015730:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015734:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015738:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401573c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24015740:	f7ff ba6f 	b.w	24014c22 <tMBTriangle_tick+0x1a2>
	i = lrintf(r - 0.5f);
24015744:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
24015748:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 240156d0 <tMBTriangle_tick+0xc50>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401574c:	ee3c ba8d 	vadd.f32	s22, s25, s26
24015750:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
24015754:	eeb0 0a6f 	vmov.f32	s0, s31
                    p_at_reset += 1.0f;
24015758:	ee3d fa89 	vadd.f32	s30, s27, s18
	i = lrintf(r - 0.5f);
2401575c:	ee2b ba28 	vmul.f32	s22, s22, s17
24015760:	eeae 0a2b 	vfma.f32	s0, s28, s23
24015764:	f003 fcf0 	bl	24019148 <lrintf>
	r -= (float)i;
24015768:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401576c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (k && p_at_reset < b) {
24015770:	eeb4 aacf 	vcmpe.f32	s20, s30
	r -= (float)i;
24015774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015778:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401577c:	3301      	adds	r3, #1
2401577e:	eef1 9a4b 	vneg.f32	s19, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015782:	3701      	adds	r7, #1
                if (k && p_at_reset < b) {
24015784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015788:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
2401578c:	eede 7a2b 	vfnms.f32	s15, s28, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015790:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015794:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015798:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401579c:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240157a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240157a4:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240157a8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240157ac:	edc3 9a3c 	vstr	s19, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240157b0:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240157b4:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (k && p_at_reset < b) {
240157b8:	f340 80c7 	ble.w	2401594a <tMBTriangle_tick+0xeca>
                    x = -0.5f + p_at_reset * invB;
240157bc:	ee38 ca4a 	vsub.f32	s24, s16, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240157c0:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
240157c2:	eeb0 0a6f 	vmov.f32	s0, s31
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240157c6:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240157c8:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = -0.5f + p_at_reset * invB;
240157cc:	ee6c da8f 	vmul.f32	s27, s25, s30
	r = MINBLEP_PHASES * phase * inv_w;
240157d0:	ee3c ca0f 	vadd.f32	s24, s24, s30
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240157d4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
240157d8:	eeac 0a2b 	vfma.f32	s0, s24, s23
240157dc:	f003 fcb4 	bl	24019148 <lrintf>
	r -= (float)i;
240157e0:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240157e4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240157e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240157ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
240157f0:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240157f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240157f8:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
	r -= (float)i;
240157fc:	eedc 7a2b 	vfnms.f32	s15, s24, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015800:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015804:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015808:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        else if (sw < 0)
2401580c:	e61a      	b.n	24015444 <tMBTriangle_tick+0x9c4>
	r = MINBLEP_PHASES * phase * inv_w;
2401580e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 240156d0 <tMBTriangle_tick+0xc50>
24015812:	ee38 ca47 	vsub.f32	s24, s16, s14
	i = lrintf(r - 0.5f);
24015816:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401581a:	ee6b baa7 	vmul.f32	s23, s23, s15
	scale *= w;
2401581e:	ee3c ba8d 	vadd.f32	s22, s25, s26
	i = lrintf(r - 0.5f);
24015822:	eeac 0a2b 	vfma.f32	s0, s24, s23
24015826:	f003 fc8f 	bl	24019148 <lrintf>
	r -= (float)i;
2401582a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401582e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (p_at_reset < 0.0f) {
24015832:	eef5 dac0 	vcmpe.f32	s27, #0.0
	r -= (float)i;
24015836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401583a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401583e:	3301      	adds	r3, #1
	scale *= w;
24015840:	ee2b ba28 	vmul.f32	s22, s22, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015844:	3701      	adds	r7, #1
                if (p_at_reset < 0.0f) {
24015846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401584a:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
2401584e:	eedc 7a2b 	vfnms.f32	s15, s24, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015852:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015856:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401585a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401585e:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24015862:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015866:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
2401586a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401586e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015872:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015876:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401587a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset < 0.0f) {
2401587e:	d421      	bmi.n	240158c4 <tMBTriangle_tick+0xe44>
                    x = -0.5f + p_at_reset * invB;
24015880:	ee6c daad 	vmul.f32	s27, s25, s27
        else if (sw < 0)
24015884:	eef1 9a4b 	vneg.f32	s19, s22
24015888:	e5dc      	b.n	24015444 <tMBTriangle_tick+0x9c4>
	i = lrintf(r - 0.5f);
2401588a:	eeb0 0a4c 	vmov.f32	s0, s24
                    x = -0.5f + p_at_reset * invB;
2401588e:	eeac caad 	vfma.f32	s24, s25, s27
	i = lrintf(r - 0.5f);
24015892:	eeab 0a88 	vfma.f32	s0, s23, s16
24015896:	f003 fc57 	bl	24019148 <lrintf>
	r -= (float)i;
2401589a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
2401589e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240158a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240158a6:	eedb 7a88 	vfnms.f32	s15, s23, s16
240158aa:	e48c      	b.n	240151c6 <tMBTriangle_tick+0x746>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240158ac:	ee3c ba8d 	vadd.f32	s22, s25, s26
240158b0:	ed5f 7a79 	vldr	s15, [pc, #-484]	; 240156d0 <tMBTriangle_tick+0xc50>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158b4:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
240158b8:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240158bc:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
240158c0:	ee2b ba28 	vmul.f32	s22, s22, s17
                    x = 0.5f - (p_at_reset - b) * invB1;
240158c4:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158c8:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
240158ca:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240158ce:	3701      	adds	r7, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
240158d0:	ee79 9a88 	vadd.f32	s19, s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158d4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
240158d8:	ee7a 7a4c 	vsub.f32	s15, s20, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240158dc:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
240158e0:	eeb0 0a4f 	vmov.f32	s0, s30
240158e4:	eef0 da4c 	vmov.f32	s27, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
240158e8:	ee79 7aa7 	vadd.f32	s15, s19, s15
	i = lrintf(r - 0.5f);
240158ec:	eeae 0a2b 	vfma.f32	s0, s28, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240158f0:	eef1 9a4b 	vneg.f32	s19, s22
240158f4:	eee7 da8d 	vfma.f32	s27, s15, s26
	i = lrintf(r - 0.5f);
240158f8:	f003 fc26 	bl	24019148 <lrintf>
	r -= (float)i;
240158fc:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015900:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
24015904:	eeb0 0a4f 	vmov.f32	s0, s30
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015908:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401590c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24015914:	eb04 0246 	add.w	r2, r4, r6, lsl #1
24015918:	eeb1 9a48 	vneg.f32	s18, s16
	i = lrintf(r - 0.5f);
2401591c:	eea8 0a6b 	vfms.f32	s0, s16, s23
	r -= (float)i;
24015920:	eede 7a2b 	vfnms.f32	s15, s28, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24015924:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015928:	edc3 9a3c 	vstr	s19, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401592c:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015930:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24015934:	f003 fc08 	bl	24019148 <lrintf>
	r -= (float)i;
24015938:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
2401593c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24015940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015944:	eedb 7a89 	vfnms.f32	s15, s23, s18
24015948:	e5a2      	b.n	24015490 <tMBTriangle_tick+0xa10>
                    x = 0.5f - (p_at_reset - b)  * invB1;
2401594a:	ee3a ca4f 	vsub.f32	s24, s20, s30
	i = lrintf(r - 0.5f);
2401594e:	eeb0 0a6f 	vmov.f32	s0, s31
24015952:	eef1 9a48 	vneg.f32	s19, s16
24015956:	eeac 9a0d 	vfma.f32	s18, s24, s26
2401595a:	eea8 0a6b 	vfms.f32	s0, s16, s23
2401595e:	f003 fbf3 	bl	24019148 <lrintf>
	r -= (float)i;
24015962:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24015966:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
2401596a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401596e:	eef0 da49 	vmov.f32	s27, s18
24015972:	eedb 7aa9 	vfnms.f32	s15, s23, s19
24015976:	e58b      	b.n	24015490 <tMBTriangle_tick+0xa10>
                x = 0.5f - (p - b) * invB1;
24015978:	ee7a 7a48 	vsub.f32	s15, s20, s16
                k = 1;
2401597c:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
2401597e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
24015982:	eea7 9a8d 	vfma.f32	s18, s15, s26
24015986:	f7ff b94c 	b.w	24014c22 <tMBTriangle_tick+0x1a2>
    p += sw - (int)sw;
2401598a:	eeb0 8a4e 	vmov.f32	s16, s28
2401598e:	f7ff b8b7 	b.w	24014b00 <tMBTriangle_tick+0x80>
24015992:	bf00      	nop

24015994 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
24015994:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24015996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401599a:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
2401599e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240159a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
240159a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240159aa:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
240159ae:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
240159b2:	4770      	bx	lr

240159b4 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
240159b4:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
240159b6:	6804      	ldr	r4, [r0, #0]
{
240159b8:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
240159bc:	ed9f 1a04 	vldr	s2, [pc, #16]	; 240159d0 <tMBTriangle_setWidth+0x1c>
240159c0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 240159d4 <tMBTriangle_setWidth+0x20>
240159c4:	f01e f9cc 	bl	24033d60 <__LEAF_clip_veneer>
    c->waveform = w;
240159c8:	ed84 0a03 	vstr	s0, [r4, #12]
}
240159cc:	bd10      	pop	{r4, pc}
240159ce:	bf00      	nop
240159d0:	3f7d70a4 	.word	0x3f7d70a4
240159d4:	00000000 	.word	0x00000000

240159d8 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
240159d8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
240159da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
240159de:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
240159e2:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
240159e6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
240159ea:	eef1 7a67 	vneg.f32	s15, s15
240159ee:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
240159f2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
240159f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240159fa:	eef4 6ac7 	vcmpe.f32	s13, s14
240159fe:	bfcc      	ite	gt
24015a00:	2201      	movgt	r2, #1
24015a02:	2200      	movle	r2, #0
24015a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015a08:	f002 0201 	and.w	r2, r2, #1
24015a0c:	bf88      	it	hi
24015a0e:	2200      	movhi	r2, #0
24015a10:	b122      	cbz	r2, 24015a1c <tMBTriangle_sync+0x44>
24015a12:	eeb5 0a40 	vcmp.f32	s0, #0.0
24015a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015a1a:	da04      	bge.n	24015a26 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24015a1c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24015a34 <tMBTriangle_sync+0x5c>
24015a20:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
24015a24:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24015a26:	ee37 7a66 	vsub.f32	s14, s14, s13
24015a2a:	ee27 7a06 	vmul.f32	s14, s14, s12
24015a2e:	ed83 7a05 	vstr	s14, [r3, #20]
}
24015a32:	4770      	bx	lr
24015a34:	00000000 	.word	0x00000000

24015a38 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
24015a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24015a3a:	698e      	ldr	r6, [r1, #24]
{
24015a3c:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24015a3e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24015a42:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24015a44:	4631      	mov	r1, r6
24015a46:	f7fe f81d 	bl	24013a84 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
24015a4a:	6873      	ldr	r3, [r6, #4]
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24015a4c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 24015ae4 <tMBSineTri_init+0xac>
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24015a50:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
24015a54:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
24015a58:	2300      	movs	r3, #0
    c->freq = 440.f;
24015a5a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 24015ae8 <tMBSineTri_init+0xb0>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24015a5e:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
24015a60:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24015a64:	6038      	str	r0, [r7, #0]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24015a66:	4921      	ldr	r1, [pc, #132]	; (24015aec <tMBSineTri_init+0xb4>)
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015a68:	306c      	adds	r0, #108	; 0x6c
    c->lastsyncin = 0.0f;
24015a6a:	f840 3c5c 	str.w	r3, [r0, #-92]
    c->sync = 0.0f;
24015a6e:	f840 3c58 	str.w	r3, [r0, #-88]
    c->waveform = 0.0f;
24015a72:	f840 3c60 	str.w	r3, [r0, #-96]
    c->shape = 0.0f;
24015a76:	f840 3c38 	str.w	r3, [r0, #-56]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24015a7a:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->_z = 0.0f;
24015a7e:	f840 3c40 	str.w	r3, [r0, #-64]
    c->_sinPhase = 0.0f;
24015a82:	f840 3c3c 	str.w	r3, [r0, #-60]
    c->_p = 0.25f;  /* phase [0, 1) */
24015a86:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24015a8a:	f840 1c04 	str.w	r1, [r0, #-4]
    c->sineMask = 2047;
24015a8e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
24015a92:	f840 3c4c 	str.w	r3, [r0, #-76]
    c->syncdir = 1.0f;
24015a96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->mempool = m;
24015a9a:	f840 6c6c 	str.w	r6, [r0, #-108]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24015a9e:	f840 2c44 	str.w	r2, [r0, #-68]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015aa2:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
24015aa4:	f840 5c50 	str.w	r5, [r0, #-80]
    c->_j = 0;
24015aa8:	f840 5c34 	str.w	r5, [r0, #-52]
    c->sineMask = 2047;
24015aac:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015ab0:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24015ab2:	f840 5c30 	str.w	r5, [r0, #-48]
    c->numBLEPs = 0;
24015ab6:	f840 5c08 	str.w	r5, [r0, #-8]
    c->syncdir = 1.0f;
24015aba:	f840 3c54 	str.w	r3, [r0, #-84]
    c->invSampleRate = leaf->invSampleRate;
24015abe:	edc0 7ae0 	vstr	s15, [r0, #896]	; 0x380
    c->freq = 440.f;
24015ac2:	ed00 7a19 	vstr	s14, [r0, #-100]	; 0xffffff9c
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24015ac6:	ed00 6a12 	vstr	s12, [r0, #-72]	; 0xffffffb8
    c->_inv_w = 1.0f / c->_w;
24015aca:	ed40 6a0b 	vstr	s13, [r0, #-44]	; 0xffffffd4
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24015ace:	f002 ff17 	bl	24018900 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24015ad2:	4629      	mov	r1, r5
24015ad4:	f104 0044 	add.w	r0, r4, #68	; 0x44
24015ad8:	2220      	movs	r2, #32
}
24015ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24015ade:	f002 bf0f 	b.w	24018900 <memset>
24015ae2:	bf00      	nop
24015ae4:	3b14f209 	.word	0x3b14f209
24015ae8:	43dc0000 	.word	0x43dc0000
24015aec:	11c01200 	.word	0x11c01200

24015af0 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
24015af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tMBSineTri* c = *osc;
24015af4:	6804      	ldr	r4, [r0, #0]
{
24015af6:	ed2d 8b10 	vpush	{d8-d15}

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
24015afa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
24015afe:	ed94 9a03 	vldr	s18, [r4, #12]
24015b02:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    sync = c->sync;
24015b06:	ed94 7a05 	vldr	s14, [r4, #20]
    invB = 1.0f / b;
24015b0a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
{
24015b0e:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
24015b10:	ee39 9a28 	vadd.f32	s18, s18, s17
    p = c->_p;  /* phase [0, 1) */
24015b14:	ed94 aa08 	vldr	s20, [r4, #32]
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015b18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    sinPhase = c->_sinPhase;
24015b1c:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    invB = 1.0f / b;
24015b20:	eec8 caa7 	vdiv.f32	s25, s17, s15
    w = c->_w;  /* phase increment */
24015b24:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
24015b28:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
24015b2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24015b2e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
    b = 0.5f * (1.0f + c->waveform);
24015b30:	ee29 9a0b 	vmul.f32	s18, s18, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
24015b38:	ee78 7ac9 	vsub.f32	s15, s17, s18
    invB1 = 1.0f / b1;
24015b3c:	ee88 daa7 	vdiv.f32	s26, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015b40:	f340 8088 	ble.w	24015c54 <tMBSineTri_tick+0x164>
24015b44:	f8d4 801c 	ldr.w	r8, [r4, #28]
24015b48:	f1b8 0f00 	cmp.w	r8, #0
24015b4c:	dd36      	ble.n	24015bbc <tMBSineTri_tick+0xcc>
24015b4e:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24015b52:	ed94 ca10 	vldr	s24, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015b56:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
24015b5a:	ee67 ba2b 	vmul.f32	s23, s14, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015b5e:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015b62:	ee27 ca0c 	vmul.f32	s24, s14, s24
    float inc_amount = sw - (int)sw;
24015b66:	eefd 7aeb 	vcvt.s32.f32	s15, s23
24015b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015b6e:	ee7b 7ae7 	vsub.f32	s15, s23, s15
    p += inc_amount;
24015b72:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
24015b76:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
24015b7a:	2e00      	cmp	r6, #0
24015b7c:	d173      	bne.n	24015c66 <tMBSineTri_tick+0x176>

        x = -0.5f + p * invB;
24015b7e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
        if (sw > 0)
24015b82:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
24015b86:	eef0 8a6a 	vmov.f32	s17, s21
        if (sw > 0)
24015b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
24015b8e:	eeea 8a2c 	vfma.f32	s17, s20, s25
        if (sw > 0)
24015b92:	f340 82e5 	ble.w	24016160 <tMBSineTri_tick+0x670>
        {
            if (p >= b) {
24015b96:	eeb4 aac9 	vcmpe.f32	s20, s18
24015b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015b9e:	f280 8255 	bge.w	2401604c <tMBSineTri_tick+0x55c>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015ba2:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24015ba6:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
24015ba8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
24015bac:	eeb4 aaea 	vcmpe.f32	s20, s21
24015bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015bb4:	f280 83b8 	bge.w	24016328 <tMBSineTri_tick+0x838>
24015bb8:	461e      	mov	r6, r3
24015bba:	e06c      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
    sw = w * c->syncdir;
24015bbc:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015bc0:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
24015bc4:	ee6b ba8c 	vmul.f32	s23, s23, s24
    float inv_sw = c->_inv_w * c->syncdir;
24015bc8:	ee2c ca27 	vmul.f32	s24, s24, s15
    float inc_amount = sw - (int)sw;
24015bcc:	eefd 7aeb 	vcvt.s32.f32	s15, s23
24015bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015bd4:	ee7b 7ae7 	vsub.f32	s15, s23, s15
    p += inc_amount;
24015bd8:	ee77 aa8a 	vadd.f32	s21, s15, s20
    sinPhase += inc_amount;
24015bdc:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24015be0:	f040 875b 	bne.w	24016a9a <tMBSineTri_tick+0xfaa>
        if (sw > 0)
24015be4:	eef5 bac0 	vcmpe.f32	s23, #0.0
        float eof_offset = sync * sw;
24015be8:	ee2b 8a87 	vmul.f32	s16, s23, s14
        if (sw > 0)
24015bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24015bf0:	ee7a dac8 	vsub.f32	s27, s21, s16
        if (sw > 0)
24015bf4:	f340 819a 	ble.w	24015f2c <tMBSineTri_tick+0x43c>
        	p = eof_offset + 0.25f;
24015bf8:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
24015bfc:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
24015c00:	2e00      	cmp	r6, #0
24015c02:	f040 832c 	bne.w	2401625e <tMBSineTri_tick+0x76e>
                if (p_at_reset >= b) {
24015c06:	eeb4 9aed 	vcmpe.f32	s18, s27
24015c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015c0e:	f240 856f 	bls.w	240166f0 <tMBSineTri_tick+0xc00>
                if (p_at_reset >= 1.0f) {
24015c12:	eef4 dae8 	vcmpe.f32	s27, s17
24015c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015c1a:	f280 83fd 	bge.w	24016418 <tMBSineTri_tick+0x928>
24015c1e:	eddf 7ad1 	vldr	s15, [pc, #836]	; 24015f64 <tMBSineTri_tick+0x474>
            x = -0.5f + p_at_reset * invB;
24015c22:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015c26:	ee2c ca27 	vmul.f32	s24, s24, s15
24015c2a:	eeb0 fa40 	vmov.f32	s30, s0
	i = lrintf(r - 0.5f);
24015c2e:	eeaa 0a0c 	vfma.f32	s0, s20, s24
24015c32:	f003 fa89 	bl	24019148 <lrintf>
	r -= (float)i;
24015c36:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
24015c3a:	eeac faad 	vfma.f32	s30, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015c3e:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	r -= (float)i;
24015c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
24015c46:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015c4a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
24015c4e:	eeda 7a0c 	vfnms.f32	s15, s20, s24
24015c52:	e342      	b.n	240162da <tMBSineTri_tick+0x7ea>
    sw = w * c->syncdir;
24015c54:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015c58:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
24015c5c:	ee6b ba8c 	vmul.f32	s23, s23, s24
    float inv_sw = c->_inv_w * c->syncdir;
24015c60:	ee2c ca27 	vmul.f32	s24, s24, s15
24015c64:	e77f      	b.n	24015b66 <tMBSineTri_tick+0x76>
            }
        }

    } else {  /* normal operation, slope currently down */

        x = 0.5f - (p - b) * invB1;
24015c66:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        if (sw > 0)
24015c6a:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
24015c6e:	ee79 7a4a 	vsub.f32	s15, s18, s20
24015c72:	eef0 8a6a 	vmov.f32	s17, s21
        if (sw > 0)
24015c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
24015c7a:	eee7 8a8d 	vfma.f32	s17, s15, s26
        if (sw > 0)
24015c7e:	f340 8223 	ble.w	240160c8 <tMBSineTri_tick+0x5d8>
        {
            if (p >= 1.0f) {
24015c82:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24015c86:	eeb4 aacb 	vcmpe.f32	s20, s22
24015c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015c8e:	f280 816b 	bge.w	24015f68 <tMBSineTri_tick+0x478>
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24015c92:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    while (sinPhase >= 1.0f)
24015c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24015c9a:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
24015c9c:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24015ca0:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
24015ca4:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
24015ca8:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
24015cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015cb0:	db0a      	blt.n	24015cc8 <tMBSineTri_tick+0x1d8>
24015cb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    	sinPhase -= 1.0f;
24015cb6:	eef0 7a48 	vmov.f32	s15, s16
24015cba:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
24015cbe:	eef4 7ae6 	vcmpe.f32	s15, s13
24015cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015cc6:	daf6      	bge.n	24015cb6 <tMBSineTri_tick+0x1c6>
    while (sinPhase < 0.0f)
24015cc8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24015ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015cd0:	d50c      	bpl.n	24015cec <tMBSineTri_tick+0x1fc>
    	sinPhase += 1.0f;
24015cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
24015cd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
24015cda:	eef0 7a48 	vmov.f32	s15, s16
24015cde:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
24015ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
24015ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015cea:	d4f6      	bmi.n	24015cda <tMBSineTri_tick+0x1ea>
    float tempPhase = (sinPhase * 2048.0f);
24015cec:	eddf 7a99 	vldr	s15, [pc, #612]	; 24015f54 <tMBSineTri_tick+0x464>
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
24015cf4:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015cf8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
24015cfc:	ee68 7a27 	vmul.f32	s15, s16, s15
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24015d00:	b2ff      	uxtb	r7, r7
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015d02:	ee37 7a44 	vsub.f32	s14, s14, s8
24015d06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24015d0a:	f88d 7005 	strb.w	r7, [sp, #5]
    idx = (uint32_t)tempPhase; //11 bit table
24015d0e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015d12:	f89d 7005 	ldrb.w	r7, [sp, #5]
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015d16:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
24015d1a:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
24015d1e:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
24015d22:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
24015d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
24015d28:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
24015d2a:	498b      	ldr	r1, [pc, #556]	; (24015f58 <tMBSineTri_tick+0x468>)
24015d2c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
24015d30:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
24015d34:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
24015d38:	ed91 6a00 	vldr	s12, [r1]
24015d3c:	ee36 6a66 	vsub.f32	s12, s12, s13
24015d40:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015d44:	eee7 8a26 	vfma.f32	s17, s14, s13
24015d48:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015d4c:	2f00      	cmp	r7, #0
24015d4e:	f000 8281 	beq.w	24016254 <tMBSineTri_tick+0x764>
24015d52:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24015d56:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015d5a:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015d5c:	497f      	ldr	r1, [pc, #508]	; (24015f5c <tMBSineTri_tick+0x46c>)
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015d5e:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
24015d62:	4f7f      	ldr	r7, [pc, #508]	; (24015f60 <tMBSineTri_tick+0x470>)
24015d64:	e051      	b.n	24015e0a <tMBSineTri_tick+0x31a>
24015d66:	f8bd e006 	ldrh.w	lr, [sp, #6]
24015d6a:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24015d6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015d72:	fa1f fe8e 	uxth.w	lr, lr
24015d76:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24015d7a:	fa1f f989 	uxth.w	r9, r9
24015d7e:	b29b      	uxth	r3, r3
24015d80:	fa1f f888 	uxth.w	r8, r8
24015d84:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24015d88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
24015d8c:	eb04 0848 	add.w	r8, r4, r8, lsl #1
24015d90:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24015d94:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
24015d98:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
24015d9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24015da0:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
24015da4:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
24015da8:	eb07 0ec8 	add.w	lr, r7, r8, lsl #3
24015dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015db0:	ed99 7a00 	vldr	s14, [r9]
24015db4:	ed9e 6a01 	vldr	s12, [lr, #4]
24015db8:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015dbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015dc0:	eea5 7a06 	vfma.f32	s14, s10, s12
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015dc4:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015dc8:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015dca:	fa1f fe8e 	uxth.w	lr, lr
24015dce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24015dd2:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015dd6:	eee6 7a87 	vfma.f32	s15, s13, s14
24015dda:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015dde:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24015de2:	f108 0840 	add.w	r8, r8, #64	; 0x40
24015de6:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24015dea:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24015dee:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24015df2:	459e      	cmp	lr, r3
24015df4:	d304      	bcc.n	24015e00 <tMBSineTri_tick+0x310>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
24015df6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
24015dfa:	3b01      	subs	r3, #1
24015dfc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015e00:	f89d 3005 	ldrb.w	r3, [sp, #5]
24015e04:	3201      	adds	r2, #1
24015e06:	4293      	cmp	r3, r2
24015e08:	dd74      	ble.n	24015ef4 <tMBSineTri_tick+0x404>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24015e0a:	ebac 0302 	sub.w	r3, ip, r2
24015e0e:	b29b      	uxth	r3, r3
24015e10:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24015e14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015e1c:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24015e20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015e24:	b29b      	uxth	r3, r3
24015e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24015e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015e2e:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
24015e32:	eeb4 7ae5 	vcmpe.f32	s14, s11
24015e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015e3a:	d494      	bmi.n	24015d66 <tMBSineTri_tick+0x276>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015e3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015e40:	f8bd e006 	ldrh.w	lr, [sp, #6]
24015e44:	b29b      	uxth	r3, r3
24015e46:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24015e4a:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24015e4e:	fa1f fe8e 	uxth.w	lr, lr
24015e52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24015e56:	fa1f f989 	uxth.w	r9, r9
24015e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015e5e:	fa1f f888 	uxth.w	r8, r8
24015e62:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
24015e66:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24015e6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015e6e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
24015e72:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24015e76:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
24015e7a:	b29b      	uxth	r3, r3
24015e7c:	ee24 7a07 	vmul.f32	s14, s8, s14
24015e80:	eb04 0888 	add.w	r8, r4, r8, lsl #2
24015e84:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24015e88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24015e8c:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
24015e90:	eb01 0889 	add.w	r8, r1, r9, lsl #2
24015e94:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
24015e98:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
24015e9c:	ed98 6a01 	vldr	s12, [r8, #4]
24015ea0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24015ea4:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015ea8:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015eac:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015eb0:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24015eb4:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015eb8:	ee36 6a64 	vsub.f32	s12, s12, s9
24015ebc:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24015ec0:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015ec4:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24015ec8:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015ecc:	eee6 7a87 	vfma.f32	s15, s13, s14
24015ed0:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015ed4:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
24015ed8:	3340      	adds	r3, #64	; 0x40
24015eda:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24015ede:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
24015ee2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24015ee6:	459e      	cmp	lr, r3
24015ee8:	d285      	bcs.n	24015df6 <tMBSineTri_tick+0x306>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015eea:	f89d 3005 	ldrb.w	r3, [sp, #5]
24015eee:	3201      	adds	r2, #1
24015ef0:	4293      	cmp	r3, r2
24015ef2:	dc8a      	bgt.n	24015e0a <tMBSineTri_tick+0x31a>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
24015ef4:	ee77 7ae9 	vsub.f32	s15, s15, s19
    j = (j+1) & 7;
24015ef8:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
24015efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->out = z;
    c->_p = p;
24015efe:	ed84 aa08 	vstr	s20, [r4, #32]
    j = (j+1) & 7;
24015f02:	f005 0507 	and.w	r5, r5, #7
    c->_w = w;
    c->_b = b;
24015f06:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
24015f0a:	63e6      	str	r6, [r4, #60]	; 0x3c
    z += 0.5f * (c->_f[j] - z);
24015f0c:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_sinPhase = sinPhase;
24015f10:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    c->_j = j;
24015f14:	63a5      	str	r5, [r4, #56]	; 0x38

    return -c->out;
24015f16:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
24015f1a:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
24015f1e:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
24015f22:	b003      	add	sp, #12
24015f24:	ecbd 8b10 	vpop	{d8-d15}
24015f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (sw < 0)
24015f2c:	f100 82f9 	bmi.w	24016522 <tMBSineTri_tick+0xa32>
        if (!k) {
24015f30:	2e00      	cmp	r6, #0
24015f32:	f000 8266 	beq.w	24016402 <tMBSineTri_tick+0x912>
            x = 0.5f - (p_at_reset - b) * invB1;
24015f36:	ee39 7a08 	vadd.f32	s14, s18, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24015f3a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    p += inc_amount;
24015f3e:	eeb0 aa6a 	vmov.f32	s20, s21
            x = 0.5f - (p_at_reset - b) * invB1;
24015f42:	eef0 8a4b 	vmov.f32	s17, s22
24015f46:	ee77 aa6a 	vsub.f32	s21, s14, s21
    sinPhase += inc_amount;
24015f4a:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
24015f4e:	eeed 8a2a 	vfma.f32	s17, s26, s21
            if (sw > 0)
24015f52:	e6a0      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
24015f54:	45000000 	.word	0x45000000
24015f58:	24022980 	.word	0x24022980
24015f5c:	24024a00 	.word	0x24024a00
24015f60:	24029104 	.word	0x24029104
24015f64:	42800000 	.word	0x42800000
	i = lrintf(r - 0.5f);
24015f68:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
24015f6c:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 24015f64 <tMBSineTri_tick+0x474>
                p -= 1.0f;
24015f70:	ee7a da4b 	vsub.f32	s27, s20, s22
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24015f74:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
24015f78:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24015f7c:	ee3c 7a8d 	vadd.f32	s14, s25, s26
	i = lrintf(r - 0.5f);
24015f80:	eeac 0a2d 	vfma.f32	s0, s24, s27
	scale *= w;
24015f84:	ee6b ba87 	vmul.f32	s23, s23, s14
	i = lrintf(r - 0.5f);
24015f88:	f003 f8de 	bl	24019148 <lrintf>
	r -= (float)i;
24015f8c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f90:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015f94:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
24015f98:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
24015f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015fa0:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015fa2:	3701      	adds	r7, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015fa4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015fa8:	f003 063f 	and.w	r6, r3, #63	; 0x3f
            if (!k && p >= b) {
24015fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24015fb0:	eedc 7a2d 	vfnms.f32	s15, s24, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015fb4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015fb8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015fbc:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24015fc0:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015fc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24015fc8:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015fcc:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015fd0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015fd4:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015fd8:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
24015fdc:	f200 83fc 	bhi.w	240167d8 <tMBSineTri_tick+0xce8>
                x = 0.5f - (p - b) * invB1;
24015fe0:	ee79 7a0b 	vadd.f32	s15, s18, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015fe4:	3701      	adds	r7, #1
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24015fe6:	ee7d cac9 	vsub.f32	s25, s27, s18
	i = lrintf(r - 0.5f);
24015fea:	eeb0 0a68 	vmov.f32	s0, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015fee:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24015ff2:	ee77 7aca 	vsub.f32	s15, s15, s20
24015ff6:	eef0 8a6a 	vmov.f32	s17, s21
	i = lrintf(r - 0.5f);
24015ffa:	eeac 0a8c 	vfma.f32	s0, s25, s24
                p -= 1.0f;
24015ffe:	eeb0 aa6d 	vmov.f32	s20, s27
                x = 0.5f - (p - b) * invB1;
24016002:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
24016006:	f003 f89f 	bl	24019148 <lrintf>
	r -= (float)i;
2401600a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401600e:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016010:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016014:	eef1 7a6b 	vneg.f32	s15, s23
	r -= (float)i;
24016018:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401601c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
24016020:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016022:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016026:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
2401602a:	ee9c 7a8c 	vfnms.f32	s14, s25, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
2401602e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24016032:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401603a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401603e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016042:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016046:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
2401604a:	e624      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
                x = 0.5f - (p - b) * invB1;;
2401604c:	ed1f ea3b 	vldr	s28, [pc, #-236]	; 24015f64 <tMBSineTri_tick+0x474>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24016050:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
24016054:	eeb0 0a6a 	vmov.f32	s0, s21
24016058:	ee2c ea0e 	vmul.f32	s28, s24, s28
                x = 0.5f - (p - b) * invB1;;
2401605c:	ee79 7a4a 	vsub.f32	s15, s18, s20
24016060:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24016064:	eeae 0a2d 	vfma.f32	s0, s28, s27
24016068:	ee3c ba8d 	vadd.f32	s22, s25, s26
                x = 0.5f - (p - b) * invB1;;
2401606c:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
24016070:	f003 f86a 	bl	24019148 <lrintf>
	r -= (float)i;
24016074:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016078:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401607c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016080:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016088:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401608a:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401608c:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016094:	ee9e 7a2d 	vfnms.f32	s14, s28, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016098:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401609c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240160a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240160a4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240160a8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240160ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240160b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240160b4:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240160b8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240160bc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
                k = 1;
240160c0:	2301      	movs	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240160c2:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240160c6:	e56f      	b.n	24015ba8 <tMBSineTri_tick+0xb8>
        else if (sw < 0)
240160c8:	f57f ade3 	bpl.w	24015c92 <tMBSineTri_tick+0x1a2>
            if (p < b) {
240160cc:	eeb4 aac9 	vcmpe.f32	s20, s18
240160d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160d4:	f100 81e9 	bmi.w	240164aa <tMBSineTri_tick+0x9ba>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240160d8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (p < 0.0f) {
240160dc:	eeb5 aac0 	vcmpe.f32	s20, #0.0
240160e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160e4:	f57f add7 	bpl.w	24015c96 <tMBSineTri_tick+0x1a6>
                p += 1.0f;
240160e8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
240160ec:	ed1f ba63 	vldr	s22, [pc, #-396]	; 24015f64 <tMBSineTri_tick+0x474>
	r = MINBLEP_PHASES * phase * inv_w;
240160f0:	ee2c ca0a 	vmul.f32	s24, s24, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240160f4:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
240160f6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 1;
240160fa:	2601      	movs	r6, #1
                p += 1.0f;
240160fc:	ee3a aa2a 	vadd.f32	s20, s20, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016100:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24016104:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24016108:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
2401610c:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24016110:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
24016114:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
24016118:	f003 f816 	bl	24019148 <lrintf>
	r -= (float)i;
2401611c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016120:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016124:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016128:	ee6c caeb 	vnmul.f32	s25, s25, s23
	r -= (float)i;
2401612c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016130:	3301      	adds	r3, #1
24016132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016136:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401613a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401613e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016142:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24016146:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401614a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401614e:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016152:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016156:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401615a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
2401615e:	e59a      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
            if (p < 0.0f) {
24016160:	eeb5 aa40 	vcmp.f32	s20, #0.0
24016164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016168:	f57f ad93 	bpl.w	24015c92 <tMBSineTri_tick+0x1a2>
2401616c:	eef5 bac0 	vcmpe.f32	s23, #0.0
24016170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016174:	f57f ad8d 	bpl.w	24015c92 <tMBSineTri_tick+0x1a2>
	r = MINBLEP_PHASES * phase * inv_w;
24016178:	ee2c ea0a 	vmul.f32	s28, s24, s20
	i = lrintf(r - 0.5f);
2401617c:	ed1f ba87 	vldr	s22, [pc, #-540]	; 24015f64 <tMBSineTri_tick+0x474>
24016180:	eeb0 0a6a 	vmov.f32	s0, s21
                p += 1.0f;
24016184:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24016188:	ee7c 8a8d 	vadd.f32	s17, s25, s26
	i = lrintf(r - 0.5f);
2401618c:	eeae 0a0b 	vfma.f32	s0, s28, s22
24016190:	f002 ffda 	bl	24019148 <lrintf>
	r -= (float)i;
24016194:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016198:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                p += 1.0f;
2401619c:	ee3a aa2d 	vadd.f32	s20, s20, s27
	r -= (float)i;
240161a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240161a4:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240161a8:	3301      	adds	r3, #1
240161aa:	ee6b baa8 	vmul.f32	s23, s23, s17
            if (k && p < b) {
240161ae:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240161b2:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240161b4:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
240161b8:	eede 7a0b 	vfnms.f32	s15, s28, s22
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240161bc:	eeb1 7a6b 	vneg.f32	s14, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240161c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240161c4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
            if (k && p < b) {
240161c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240161cc:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240161d0:	eb04 0248 	add.w	r2, r4, r8, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240161d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240161d8:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240161dc:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240161e0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240161e4:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240161e8:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240161ec:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (k && p < b) {
240161f0:	f340 844a 	ble.w	24016a88 <tMBSineTri_tick+0xf98>
                x = -0.5f + p * invB;
240161f4:	ee3a da49 	vsub.f32	s26, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240161f8:	3701      	adds	r7, #1
240161fa:	ee2c ba0b 	vmul.f32	s22, s24, s22
	i = lrintf(r - 0.5f);
240161fe:	eeb0 0a6a 	vmov.f32	s0, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016202:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
24016206:	eef0 8a6a 	vmov.f32	s17, s21
	i = lrintf(r - 0.5f);
2401620a:	eeab 0a0d 	vfma.f32	s0, s22, s26
2401620e:	f002 ff9b 	bl	24019148 <lrintf>
	r -= (float)i;
24016212:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016216:	f108 0301 	add.w	r3, r8, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401621a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401621e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = -0.5f + p * invB;
24016226:	eeec 8a8a 	vfma.f32	s17, s25, s20
	r -= (float)i;
2401622a:	eedb 7a0d 	vfnms.f32	s15, s22, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401622e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016232:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016236:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401623a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401623e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016242:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016246:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401624a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401624e:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24016252:	e520      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
    z += 0.5f * (c->_f[j] - z);
24016254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
24016258:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
2401625c:	e64a      	b.n	24015ef4 <tMBSineTri_tick+0x404>
            x = 0.5f - (p_at_reset - b) * invB1;
2401625e:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
24016262:	eef4 dae8 	vcmpe.f32	s27, s17
            x = 0.5f - (p_at_reset - b) * invB1;
24016266:	eeb0 fa4b 	vmov.f32	s30, s22
2401626a:	ee77 7aea 	vsub.f32	s15, s15, s21
                if (p_at_reset >= 1.0f) {
2401626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24016272:	eead fa27 	vfma.f32	s30, s26, s15
                if (p_at_reset >= 1.0f) {
24016276:	f280 81cc 	bge.w	24016612 <tMBSineTri_tick+0xb22>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401627a:	ee3c ea8d 	vadd.f32	s28, s25, s26
2401627e:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 24015f64 <tMBSineTri_tick+0x474>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016282:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24016286:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401628a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
2401628e:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
24016292:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016296:	3601      	adds	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016298:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401629a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
2401629e:	eeaa 0a0c 	vfma.f32	s0, s20, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240162a2:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
240162a6:	f002 ff4f 	bl	24019148 <lrintf>
	r -= (float)i;
240162aa:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240162ae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240162b2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240162b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240162ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240162be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240162c2:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
240162c6:	eeda 7a0c 	vfnms.f32	s15, s20, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240162ca:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240162ce:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240162d2:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240162d6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162da:	3601      	adds	r6, #1
            if (p >= b) {
240162dc:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240162e0:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240162e2:	ee2f 7a6b 	vnmul.f32	s14, s30, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162e6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            if (p >= b) {
240162ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240162ee:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240162f2:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240162f6:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240162fa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240162fe:	f8a2 106c 	strh.w	r1, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016302:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016306:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401630a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401630e:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016312:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016316:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p >= b) {
2401631a:	d93c      	bls.n	24016396 <tMBSineTri_tick+0x8a6>
            x = -0.5f + p * invB;
2401631c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
24016320:	4646      	mov	r6, r8
            x = -0.5f + p * invB;
24016322:	eeec 8a8a 	vfma.f32	s17, s25, s20
24016326:	e4b6      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
                p -= 1.0f;
24016328:	ed5f 7af2 	vldr	s15, [pc, #-968]	; 24015f64 <tMBSineTri_tick+0x474>
2401632c:	ee3a aa6a 	vsub.f32	s20, s20, s21
                x = -0.5f + p * invB;
24016330:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016334:	3701      	adds	r7, #1
24016336:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
2401633a:	ee3c da8d 	vadd.f32	s26, s25, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401633e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
24016342:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
24016346:	eeac 0a0a 	vfma.f32	s0, s24, s20
2401634a:	f002 fefd 	bl	24019148 <lrintf>
	r -= (float)i;
2401634e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016352:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016356:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401635a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401635e:	3301      	adds	r3, #1
	scale *= w;
24016360:	ee2b da8d 	vmul.f32	s26, s23, s26
                x = -0.5f + p * invB;
24016364:	eeec 8a8a 	vfma.f32	s17, s25, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401636c:	eedc 7a0a 	vfnms.f32	s15, s24, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016370:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016374:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016378:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401637c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
24016384:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016388:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401638c:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016390:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24016394:	e47f      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24016396:	ee7a aa49 	vsub.f32	s21, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401639a:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
2401639c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
240163a0:	ee79 7a4a 	vsub.f32	s15, s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240163a4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
240163a8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
240163ac:	eeaa 0a8c 	vfma.f32	s0, s21, s24
240163b0:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
240163b4:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
240163b8:	f002 fec6 	bl	24019148 <lrintf>
	r -= (float)i;
240163bc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163c0:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240163c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240163c6:	ee6c caeb 	vnmul.f32	s25, s25, s23
	r -= (float)i;
240163ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240163d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
                k = 1;
240163d6:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240163d8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240163dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
240163e0:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240163e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240163e8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240163ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240163f0:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240163f4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240163f8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240163fc:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24016400:	e449      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
            x = -0.5f + p_at_reset * invB;
24016402:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24016406:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    sinPhase += inc_amount;
2401640a:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
2401640e:	eeb0 aa6a 	vmov.f32	s20, s21
            x = -0.5f + p_at_reset * invB;
24016412:	eeec 8aad 	vfma.f32	s17, s25, s27
            else if (sw < 0)
24016416:	e43e      	b.n	24015c96 <tMBSineTri_tick+0x1a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24016418:	ee3c ea8d 	vadd.f32	s28, s25, s26
2401641c:	eddf 7af2 	vldr	s15, [pc, #968]	; 240167e8 <tMBSineTri_tick+0xcf8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016420:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24016424:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016428:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
2401642c:	ee6b ea8e 	vmul.f32	s29, s23, s28
                    p_at_reset -= 1.0f;
24016430:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016434:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
24016436:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401643a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401643c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    p_at_reset -= 1.0f;
24016440:	ee7d daea 	vsub.f32	s27, s27, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016444:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24016448:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
2401644c:	eeb0 fa68 	vmov.f32	s30, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24016450:	ee38 ba2d 	vadd.f32	s22, s16, s27
                    x = -0.5f + p_at_reset * invB;
24016454:	eeac faad 	vfma.f32	s30, s25, s27
	i = lrintf(r - 0.5f);
24016458:	eeab 0a0c 	vfma.f32	s0, s22, s24
2401645c:	f002 fe74 	bl	24019148 <lrintf>
	r -= (float)i;
24016460:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016464:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
24016468:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
2401646c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016470:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24016478:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	i = lrintf(r - 0.5f);
2401647c:	eeaa 0a0c 	vfma.f32	s0, s20, s24
	r -= (float)i;
24016480:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24016484:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016488:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401648c:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016490:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24016494:	f002 fe58 	bl	24019148 <lrintf>
	r -= (float)i;
24016498:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
2401649c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240164a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240164a4:	eeda 7a0c 	vfnms.f32	s15, s20, s24
240164a8:	e717      	b.n	240162da <tMBSineTri_tick+0x7ea>
                x = -0.5f + p * invB;
240164aa:	ed9f bacf 	vldr	s22, [pc, #828]	; 240167e8 <tMBSineTri_tick+0xcf8>
240164ae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240164b2:	ee7a aa49 	vsub.f32	s21, s20, s18
                k = 0;
240164b6:	2600      	movs	r6, #0
240164b8:	ee2c ba0b 	vmul.f32	s22, s24, s22
                x = -0.5f + p * invB;
240164bc:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
240164c0:	eeab 0a2a 	vfma.f32	s0, s22, s21
240164c4:	f002 fe40 	bl	24019148 <lrintf>
	r -= (float)i;
240164c8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164cc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
240164d0:	ee7c 7a8d 	vadd.f32	s15, s25, s26
	r -= (float)i;
240164d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240164d8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164dc:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240164de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240164e2:	3701      	adds	r7, #1
	scale *= w;
240164e4:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240164ec:	ee9b 7a2a 	vfnms.f32	s14, s22, s21
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240164f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240164f4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164f8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240164fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016500:	eb04 0343 	add.w	r3, r4, r3, lsl #1
                x = -0.5f + p * invB;
24016504:	eeea 8a2c 	vfma.f32	s17, s20, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
24016508:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401650c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
24016510:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016514:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016518:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401651c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24016520:	e5dc      	b.n	240160dc <tMBSineTri_tick+0x5ec>
        	p = (1.0f - eof_offset) + 0.25f;
24016522:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
24016526:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
2401652a:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
2401652e:	2e00      	cmp	r6, #0
24016530:	f040 8125 	bne.w	2401677e <tMBSineTri_tick+0xc8e>
                if (p_at_reset < 0.0f) {
24016534:	eef5 dac0 	vcmpe.f32	s27, #0.0
24016538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401653c:	f100 818e 	bmi.w	2401685c <tMBSineTri_tick+0xd6c>
            x = -0.5f + p_at_reset * invB;
24016540:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
24016544:	eddf 7aa8 	vldr	s15, [pc, #672]	; 240167e8 <tMBSineTri_tick+0xcf8>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24016548:	ee7c aa8d 	vadd.f32	s21, s25, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401654c:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24016550:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016554:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            x = -0.5f + p_at_reset * invB;
24016558:	eeac baad 	vfma.f32	s22, s25, s27
2401655c:	ee6b aaea 	vnmul.f32	s21, s23, s21
	r = MINBLEP_PHASES * phase * inv_w;
24016560:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016564:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
24016566:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401656a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401656c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
24016570:	ee78 8ac8 	vsub.f32	s17, s17, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016574:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24016578:	eea8 0a8c 	vfma.f32	s0, s17, s24
2401657c:	f002 fde4 	bl	24019148 <lrintf>
	r -= (float)i;
24016580:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016584:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016588:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
2401658c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016590:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016594:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24016598:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
2401659c:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240165a0:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240165a4:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240165a8:	edc2 aa3c 	vstr	s21, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240165ac:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165b0:	3601      	adds	r6, #1
            if (p < b) {
240165b2:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240165b6:	3701      	adds	r7, #1
	scale *= w;
240165b8:	ee2b 7a8b 	vmul.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165bc:	f006 093f 	and.w	r9, r6, #63	; 0x3f
            if (p < b) {
240165c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240165c4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240165c8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165cc:	f8a4 9066 	strh.w	r9, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240165d0:	eb04 0149 	add.w	r1, r4, r9, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240165d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240165d8:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240165dc:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240165e0:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240165e4:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240165e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240165ec:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p < b) {
240165f0:	f300 80fc 	bgt.w	240167ec <tMBSineTri_tick+0xcfc>
            x = 0.5f - (p - b) * invB1;
240165f4:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
240165f8:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
240165fa:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
240165fe:	ee78 7a67 	vsub.f32	s15, s16, s15
24016602:	eeb0 8a6e 	vmov.f32	s16, s29
24016606:	ee77 7a89 	vadd.f32	s15, s15, s18
2401660a:	eee7 8a8d 	vfma.f32	s17, s15, s26
2401660e:	f7ff bb42 	b.w	24015c96 <tMBSineTri_tick+0x1a6>
                    p_at_reset -= 1.0f;
24016612:	ee7d dae8 	vsub.f32	s27, s27, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24016616:	eddf 7a74 	vldr	s15, [pc, #464]	; 240167e8 <tMBSineTri_tick+0xcf8>
	i = lrintf(r - 0.5f);
2401661a:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
2401661e:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24016622:	ee78 ea2d 	vadd.f32	s29, s16, s27
	i = lrintf(r - 0.5f);
24016626:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401662a:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
2401662e:	eeae 0a8c 	vfma.f32	s0, s29, s24
24016632:	f002 fd89 	bl	24019148 <lrintf>
	r -= (float)i;
24016636:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401663a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (!k && p_at_reset >= b) {
2401663e:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
24016642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016646:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401664a:	3301      	adds	r3, #1
	scale *= w;
2401664c:	ee2e ea2b 	vmul.f32	s28, s28, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016650:	3701      	adds	r7, #1
                if (!k && p_at_reset >= b) {
24016652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016656:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
2401665a:	eede 7a8c 	vfnms.f32	s15, s29, s24
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401665e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016662:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016666:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401666a:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401666e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24016672:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016676:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401667a:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401667e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016682:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24016686:	f200 8190 	bhi.w	240169aa <tMBSineTri_tick+0xeba>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
2401668a:	ee78 7a49 	vsub.f32	s15, s16, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401668e:	3601      	adds	r6, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24016690:	ee39 7a28 	vadd.f32	s14, s18, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016694:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24016696:	eeb0 0a4f 	vmov.f32	s0, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401669a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
2401669e:	ee77 daad 	vadd.f32	s27, s15, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240166a2:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
240166a6:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
240166aa:	eead 0a8c 	vfma.f32	s0, s27, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
240166ae:	ee77 aa6a 	vsub.f32	s21, s14, s21
	i = lrintf(r - 0.5f);
240166b2:	f002 fd49 	bl	24019148 <lrintf>
	r -= (float)i;
240166b6:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240166ba:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240166be:	eeb1 7a4e 	vneg.f32	s14, s28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240166c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240166c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240166ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
240166ce:	eeaa ba8d 	vfma.f32	s22, s21, s26
	c->BLEPindices[c->mostRecentBLEP] = i;
240166d2:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
240166d6:	eedd 7a8c 	vfnms.f32	s15, s27, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240166da:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240166de:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240166e2:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
                    x = 0.5f - (p_at_reset - b) * invB1;
240166e6:	eeb0 fa4b 	vmov.f32	s30, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240166ea:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        if (sw > 0)
240166ee:	e5d0      	b.n	24016292 <tMBSineTri_tick+0x7a2>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
240166f0:	eddf 7a3d 	vldr	s15, [pc, #244]	; 240167e8 <tMBSineTri_tick+0xcf8>
240166f4:	ee3a fac9 	vsub.f32	s30, s21, s18
	i = lrintf(r - 0.5f);
240166f8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240166fc:	ee2c ca27 	vmul.f32	s24, s24, s15
24016700:	ee3c ea8d 	vadd.f32	s28, s25, s26
24016704:	eeaf 0a0c 	vfma.f32	s0, s30, s24
24016708:	f002 fd1e 	bl	24019148 <lrintf>
	r -= (float)i;
2401670c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016710:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
24016714:	ee2b ea8e 	vmul.f32	s28, s23, s28
	r -= (float)i;
24016718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401671c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016720:	1c5e      	adds	r6, r3, #1
                if (p_at_reset >= 1.0f) {
24016722:	eef4 dae8 	vcmpe.f32	s27, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016726:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016728:	eeb1 7a4e 	vneg.f32	s14, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401672c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	r -= (float)i;
24016730:	eedf 7a0c 	vfnms.f32	s15, s30, s24
                if (p_at_reset >= 1.0f) {
24016734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016738:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401673c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016740:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24016744:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016748:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401674c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016750:	eef0 ea4e 	vmov.f32	s29, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
24016754:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016758:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401675c:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016760:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016764:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24016768:	f6bf ae62 	bge.w	24016430 <tMBSineTri_tick+0x940>
                    x = 0.5f - (p_at_reset - b) * invB1;
2401676c:	ee79 7a08 	vadd.f32	s15, s18, s16
24016770:	ee77 aaea 	vsub.f32	s21, s15, s21
24016774:	eeaa ba8d 	vfma.f32	s22, s21, s26
24016778:	eeb0 fa4b 	vmov.f32	s30, s22
2401677c:	e589      	b.n	24016292 <tMBSineTri_tick+0x7a2>
            x = 0.5f - (p_at_reset - b) * invB1;
2401677e:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
24016782:	eeb4 9aed 	vcmpe.f32	s18, s27
            x = 0.5f - (p_at_reset - b) * invB1;
24016786:	ee77 7aea 	vsub.f32	s15, s15, s21
                if (p_at_reset < b) {
2401678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
2401678e:	eea7 ba8d 	vfma.f32	s22, s15, s26
                if (p_at_reset < b) {
24016792:	f300 80ca 	bgt.w	2401692a <tMBSineTri_tick+0xe3a>
                if (p_at_reset < 0.0f) {
24016796:	eef5 dac0 	vcmpe.f32	s27, #0.0
2401679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401679e:	f100 8115 	bmi.w	240169cc <tMBSineTri_tick+0xedc>
        else if (sw < 0)
240167a2:	eef5 aa00 	vmov.f32	s21, #80	; 0x3e800000  0.250
240167a6:	eddf 7a10 	vldr	s15, [pc, #64]	; 240167e8 <tMBSineTri_tick+0xcf8>
	i = lrintf(r - 0.5f);
240167aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240167ae:	ee2c ca27 	vmul.f32	s24, s24, s15
240167b2:	ee7a aac8 	vsub.f32	s21, s21, s16
240167b6:	eeac 0a2a 	vfma.f32	s0, s24, s21
240167ba:	f002 fcc5 	bl	24019148 <lrintf>
	r -= (float)i;
240167be:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240167c2:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240167c6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
240167ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240167ce:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
240167d2:	eedc 7a2a 	vfnms.f32	s15, s24, s21
240167d6:	e6eb      	b.n	240165b0 <tMBSineTri_tick+0xac0>
                x = -0.5f + p * invB;
240167d8:	eeec 8aad 	vfma.f32	s17, s25, s27
                k = 0;
240167dc:	2600      	movs	r6, #0
                p -= 1.0f;
240167de:	eeb0 aa6d 	vmov.f32	s20, s27
240167e2:	f7ff ba58 	b.w	24015c96 <tMBSineTri_tick+0x1a6>
240167e6:	bf00      	nop
240167e8:	42800000 	.word	0x42800000
                x = -0.5f + p * invB;
240167ec:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240167f0:	3701      	adds	r7, #1
240167f2:	ee7a aa49 	vsub.f32	s21, s20, s18
                k = 0;
240167f6:	4646      	mov	r6, r8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240167f8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
}
240167fc:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
24016800:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
24016804:	eeec 8a8a 	vfma.f32	s17, s25, s20
	scale *= w;
24016808:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
2401680c:	eeaa 0a8c 	vfma.f32	s0, s21, s24
24016810:	f002 fc9a 	bl	24019148 <lrintf>
	r -= (float)i;
24016814:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016818:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401681c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
24016828:	ee6c baab 	vmul.f32	s23, s25, s23
	r -= (float)i;
2401682c:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016830:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016834:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016838:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401683c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016840:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016844:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016848:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401684c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016850:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016854:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24016858:	f7ff ba1d 	b.w	24015c96 <tMBSineTri_tick+0x1a6>
	i = lrintf(r - 0.5f);
2401685c:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
24016860:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 240167e8 <tMBSineTri_tick+0xcf8>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24016864:	ee3c ea8d 	vadd.f32	s28, s25, s26
24016868:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
2401686c:	eeb0 0a4f 	vmov.f32	s0, s30
                    p_at_reset += 1.0f;
24016870:	ee7d daa8 	vadd.f32	s27, s27, s17
	i = lrintf(r - 0.5f);
24016874:	ee2e ea2b 	vmul.f32	s28, s28, s23
24016878:	eeac 0a2a 	vfma.f32	s0, s24, s21
2401687c:	f002 fc64 	bl	24019148 <lrintf>
	r -= (float)i;
24016880:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016884:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (k && p_at_reset < b) {
24016888:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
2401688c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016890:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016894:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016896:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401689a:	3701      	adds	r7, #1
                if (k && p_at_reset < b) {
2401689c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
240168a0:	eedc 7a2a 	vfnms.f32	s15, s24, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168a4:	f003 063f 	and.w	r6, r3, #63	; 0x3f
240168a8:	eef1 aa4e 	vneg.f32	s21, s28
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240168ac:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240168b0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240168b4:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240168b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240168bc:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240168c0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240168c4:	edc3 aa3c 	vstr	s21, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240168c8:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240168cc:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (k && p_at_reset < b) {
240168d0:	f340 80cd 	ble.w	24016a6e <tMBSineTri_tick+0xf7e>
                    x = -0.5f + p_at_reset * invB;
240168d4:	ee78 7a49 	vsub.f32	s15, s16, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168d8:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
240168da:	eeb0 ba4f 	vmov.f32	s22, s30
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240168de:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
240168e0:	eeb0 0a4f 	vmov.f32	s0, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240168e4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240168e8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = -0.5f + p_at_reset * invB;
240168ec:	eeac baad 	vfma.f32	s22, s25, s27
	r = MINBLEP_PHASES * phase * inv_w;
240168f0:	ee77 daad 	vadd.f32	s27, s15, s27
	i = lrintf(r - 0.5f);
240168f4:	eeac 0a2d 	vfma.f32	s0, s24, s27
240168f8:	f002 fc26 	bl	24019148 <lrintf>
	r -= (float)i;
240168fc:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016900:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016904:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
2401690c:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24016914:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
	r -= (float)i;
24016918:	eedc 7a2d 	vfnms.f32	s15, s24, s27
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401691c:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016920:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016924:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        else if (sw < 0)
24016928:	e61a      	b.n	24016560 <tMBSineTri_tick+0xa70>
	i = lrintf(r - 0.5f);
2401692a:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
2401692e:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 240167e8 <tMBSineTri_tick+0xcf8>
24016932:	ee3a fac9 	vsub.f32	s30, s21, s18
24016936:	ee2c ca27 	vmul.f32	s24, s24, s15
2401693a:	eeb0 0a4b 	vmov.f32	s0, s22
	scale *= w;
2401693e:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
24016942:	eeac 0a0f 	vfma.f32	s0, s24, s30
24016946:	f002 fbff 	bl	24019148 <lrintf>
	r -= (float)i;
2401694a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401694e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (p_at_reset < 0.0f) {
24016952:	eef5 dac0 	vcmpe.f32	s27, #0.0
	r -= (float)i;
24016956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401695a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401695e:	3301      	adds	r3, #1
	scale *= w;
24016960:	ee2e ea2b 	vmul.f32	s28, s28, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016964:	3701      	adds	r7, #1
                if (p_at_reset < 0.0f) {
24016966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401696a:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
2401696e:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016972:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016976:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401697a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401697e:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24016982:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016986:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
2401698a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401698e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016992:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016996:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401699a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset < 0.0f) {
2401699e:	d421      	bmi.n	240169e4 <tMBSineTri_tick+0xef4>
                    x = -0.5f + p_at_reset * invB;
240169a0:	eeac baad 	vfma.f32	s22, s25, s27
        else if (sw < 0)
240169a4:	eef1 aa4e 	vneg.f32	s21, s28
240169a8:	e5da      	b.n	24016560 <tMBSineTri_tick+0xa70>
	i = lrintf(r - 0.5f);
240169aa:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
240169ae:	eeac faad 	vfma.f32	s30, s25, s27
	i = lrintf(r - 0.5f);
240169b2:	eeaa 0a0c 	vfma.f32	s0, s20, s24
240169b6:	f002 fbc7 	bl	24019148 <lrintf>
	r -= (float)i;
240169ba:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
240169be:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240169c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240169c6:	eeda 7a0c 	vfnms.f32	s15, s20, s24
240169ca:	e486      	b.n	240162da <tMBSineTri_tick+0x7ea>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240169cc:	ee3c ea8d 	vadd.f32	s28, s25, s26
240169d0:	ed5f 7a7b 	vldr	s15, [pc, #-492]	; 240167e8 <tMBSineTri_tick+0xcf8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240169d4:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
240169d8:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240169dc:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
240169e0:	ee2e ea2b 	vmul.f32	s28, s28, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
240169e4:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240169e8:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
240169ea:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240169ee:	3701      	adds	r7, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
240169f0:	ee78 7a6a 	vsub.f32	s15, s16, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240169f4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
240169f8:	ee39 7a6d 	vsub.f32	s14, s18, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240169fc:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24016a00:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
24016a04:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
24016a08:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
24016a0c:	eeaa 0a8c 	vfma.f32	s0, s21, s24
24016a10:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
24016a14:	eea7 ba8d 	vfma.f32	s22, s15, s26
	i = lrintf(r - 0.5f);
24016a18:	f002 fb96 	bl	24019148 <lrintf>
	r -= (float)i;
24016a1c:	ee07 0a90 	vmov	s15, r0
	i = lrintf(r - 0.5f);
24016a20:	eeb0 0a4f 	vmov.f32	s0, s30
24016a24:	ee78 8ac8 	vsub.f32	s17, s17, s16
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016a28:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	r -= (float)i;
24016a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016a30:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016a34:	eeb1 ea4e 	vneg.f32	s28, s28
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016a38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	i = lrintf(r - 0.5f);
24016a3c:	eeac 0a28 	vfma.f32	s0, s24, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24016a40:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
24016a44:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24016a48:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016a4c:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24016a50:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016a54:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24016a58:	f002 fb76 	bl	24019148 <lrintf>
	r -= (float)i;
24016a5c:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24016a60:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24016a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016a68:	eedc 7a28 	vfnms.f32	s15, s24, s17
24016a6c:	e5a0      	b.n	240165b0 <tMBSineTri_tick+0xac0>
24016a6e:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
24016a72:	ee79 da6d 	vsub.f32	s27, s18, s27
	i = lrintf(r - 0.5f);
24016a76:	eeb0 0a4f 	vmov.f32	s0, s30
24016a7a:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
24016a7e:	eead ba8d 	vfma.f32	s22, s27, s26
	i = lrintf(r - 0.5f);
24016a82:	eeac 0a28 	vfma.f32	s0, s24, s17
24016a86:	e7e7      	b.n	24016a58 <tMBSineTri_tick+0xf68>
                x = 0.5f - (p - b) * invB1;
24016a88:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
24016a8c:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
24016a8e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24016a92:	eee7 8a8d 	vfma.f32	s17, s15, s26
24016a96:	f7ff b8fe 	b.w	24015c96 <tMBSineTri_tick+0x1a6>
    sinPhase += inc_amount;
24016a9a:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
24016a9e:	eeb0 aa6a 	vmov.f32	s20, s21
24016aa2:	f7ff b86a 	b.w	24015b7a <tMBSineTri_tick+0x8a>
24016aa6:	bf00      	nop

24016aa8 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
24016aa8:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24016aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016aae:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24016ab2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016ab6:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24016aba:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016abe:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24016ac2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
24016ac6:	4770      	bx	lr

24016ac8 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
24016ac8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24016aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24016ace:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24016ad2:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
24016ad6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24016ada:	eef1 7a67 	vneg.f32	s15, s15
24016ade:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24016ae2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24016ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016aea:	eef4 6ac7 	vcmpe.f32	s13, s14
24016aee:	bfcc      	ite	gt
24016af0:	2201      	movgt	r2, #1
24016af2:	2200      	movle	r2, #0
24016af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016af8:	f002 0201 	and.w	r2, r2, #1
24016afc:	bf88      	it	hi
24016afe:	2200      	movhi	r2, #0
24016b00:	b122      	cbz	r2, 24016b0c <tMBSineTri_sync+0x44>
24016b02:	eeb5 0a40 	vcmp.f32	s0, #0.0
24016b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016b0a:	da04      	bge.n	24016b16 <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24016b0c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24016b24 <tMBSineTri_sync+0x5c>
24016b10:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
24016b14:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24016b16:	ee37 7a66 	vsub.f32	s14, s14, s13
24016b1a:	ee27 7a06 	vmul.f32	s14, s14, s12
24016b1e:	ed83 7a05 	vstr	s14, [r3, #20]
}
24016b22:	4770      	bx	lr
24016b24:	00000000 	.word	0x00000000

24016b28 <tMBSineTri_setShape>:
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
    c->shape = shape;
24016b28:	6803      	ldr	r3, [r0, #0]
24016b2a:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
24016b2e:	4770      	bx	lr

24016b30 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
24016b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24016b32:	698e      	ldr	r6, [r1, #24]
{
24016b34:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24016b36:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24016b3a:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24016b3c:	4631      	mov	r1, r6
24016b3e:	f7fc ffa1 	bl	24013a84 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
24016b42:	6873      	ldr	r3, [r6, #4]
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24016b44:	ed9f 6a18 	vldr	s12, [pc, #96]	; 24016ba8 <tMBSaw_init+0x78>
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24016b48:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->invSampleRate = leaf->invSampleRate;
24016b4c:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
24016b50:	2300      	movs	r3, #0
    c->freq = 440.f;
24016b52:	ed9f 7a16 	vldr	s14, [pc, #88]	; 24016bac <tMBSaw_init+0x7c>
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24016b56:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
24016b58:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
24016b5c:	6038      	str	r0, [r7, #0]
    c->lastsyncin = 0.0f;
24016b5e:	60c3      	str	r3, [r0, #12]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016b60:	2280      	movs	r2, #128	; 0x80
    c->sync = 0.0f;
24016b62:	6103      	str	r3, [r0, #16]
    c->_z = 0.0f;
24016b64:	6243      	str	r3, [r0, #36]	; 0x24
    c->_p = 0.0f;  /* phase [0, 1) */
24016b66:	61c3      	str	r3, [r0, #28]
    c->syncdir = 1.0f;
24016b68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016b6c:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->mempool = m;
24016b70:	6006      	str	r6, [r0, #0]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24016b72:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016b76:	4629      	mov	r1, r5
    c->softsync = 0;
24016b78:	6185      	str	r5, [r0, #24]
    c->_j = 0;
24016b7a:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
24016b7c:	6505      	str	r5, [r0, #80]	; 0x50
    c->syncdir = 1.0f;
24016b7e:	6143      	str	r3, [r0, #20]
    c->invSampleRate = leaf->invSampleRate;
24016b80:	edc0 7ab6 	vstr	s15, [r0, #728]	; 0x2d8
    c->freq = 440.f;
24016b84:	ed80 7a02 	vstr	s14, [r0, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016b88:	ed80 6a08 	vstr	s12, [r0, #32]
    c->_inv_w = 1.0f / c->_w;
24016b8c:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016b90:	3056      	adds	r0, #86	; 0x56
24016b92:	f001 feb5 	bl	24018900 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24016b96:	4629      	mov	r1, r5
24016b98:	f104 0030 	add.w	r0, r4, #48	; 0x30
24016b9c:	2220      	movs	r2, #32
}
24016b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24016ba2:	f001 bead 	b.w	24018900 <memset>
24016ba6:	bf00      	nop
24016ba8:	3b14f209 	.word	0x3b14f209
24016bac:	43dc0000 	.word	0x43dc0000

24016bb0 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
24016bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tMBSaw* c = *osc;
24016bb4:	6804      	ldr	r4, [r0, #0]

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
24016bb6:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
24016bba:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016bbe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    j = c->_j;  /* index into buffer _f */
24016bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
{
24016bc4:	ed2d 8b08 	vpush	{d8-d11}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
24016bcc:	b082      	sub	sp, #8
    z = c->_z;  /* low pass filter state */
24016bce:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016bd2:	f340 8114 	ble.w	24016dfe <tMBSaw_tick+0x24e>
24016bd6:	69a3      	ldr	r3, [r4, #24]
24016bd8:	2b00      	cmp	r3, #0
24016bda:	f340 80b1 	ble.w	24016d40 <tMBSaw_tick+0x190>
24016bde:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
24016be2:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016be6:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
24016bea:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24016bee:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016bf2:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
24016bf6:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
24016bfa:	eefd 6ac7 	vcvt.s32.f32	s13, s14
24016bfe:	ee37 8a27 	vadd.f32	s16, s14, s15
24016c02:	eef8 7ae6 	vcvt.f32.s32	s15, s13
24016c06:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
24016c0a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24016c0e:	eeb4 8ac9 	vcmpe.f32	s16, s18
24016c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016c16:	f280 810c 	bge.w	24016e32 <tMBSaw_tick+0x282>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
24016c1a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24016c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016c22:	f100 8195 	bmi.w	24016f50 <tMBSaw_tick+0x3a0>

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24016c26:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    c->_f[currentSamp] = 0.5f - p;
24016c2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24016c2e:	1d33      	adds	r3, r6, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24016c30:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24016c32:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
24016c36:	ee37 7a48 	vsub.f32	s14, s14, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24016c3a:	f88d 2005 	strb.w	r2, [sp, #5]
    c->_f[currentSamp] = 0.5f - p;
24016c3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016c42:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = 0.5f - p;
24016c46:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016c4a:	2a00      	cmp	r2, #0
24016c4c:	f000 817b 	beq.w	24016f46 <tMBSaw_tick+0x396>
24016c50:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24016c54:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016c58:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016c5c:	2000      	movs	r0, #0
24016c5e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
24016c62:	4dec      	ldr	r5, [pc, #944]	; (24017014 <tMBSaw_tick+0x464>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24016c64:	ebae 0300 	sub.w	r3, lr, r0
24016c68:	b29b      	uxth	r3, r3
24016c6a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24016c6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24016c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016c76:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016c7a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24016c7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24016c82:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24016c86:	b289      	uxth	r1, r1
24016c88:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24016c8c:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016c8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016c92:	fa1f f888 	uxth.w	r8, r8
24016c96:	fa1f f989 	uxth.w	r9, r9
24016c9a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24016c9e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24016ca2:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
24016ca6:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
24016caa:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016cae:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016cb0:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
24016cb4:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
24016cb8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016cbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016cc0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
24016cc4:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016cc8:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016cca:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016cce:	edd9 6a01 	vldr	s13, [r9, #4]
24016cd2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016cd6:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016cda:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016cde:	eee6 7a26 	vfma.f32	s15, s12, s13
24016ce2:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016ce6:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016cea:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
24016cee:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016cf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016cf4:	d37c      	bcc.n	24016df0 <tMBSaw_tick+0x240>
		{
			c->numBLEPs--;
24016cf6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016cfa:	3001      	adds	r0, #1
24016cfc:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
24016d00:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016d02:	4290      	cmp	r0, r2
			c->numBLEPs--;
24016d04:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016d08:	dbac      	blt.n	24016c64 <tMBSaw_tick+0xb4>
24016d0a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
24016d0e:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
24016d12:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
24016d14:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
24016d18:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
24016d1c:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
24016d20:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
24016d24:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
24016d26:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
24016d2a:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
24016d2e:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
24016d32:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
24016d36:	b002      	add	sp, #8
24016d38:	ecbd 8b08 	vpop	{d8-d11}
24016d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
24016d40:	edd4 8a05 	vldr	s17, [r4, #20]
24016d44:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
24016d48:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24016d4c:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
24016d50:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
24016d54:	eebd 9aca 	vcvt.s32.f32	s18, s20
24016d58:	ee77 7a8a 	vadd.f32	s15, s15, s20
24016d5c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
24016d60:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24016d64:	f040 815c 	bne.w	24017020 <tMBSaw_tick+0x470>
        if (sw > 0) p = eof_offset;
24016d68:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
24016d6c:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
24016d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24016d74:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
24016d78:	f340 8088 	ble.w	24016e8c <tMBSaw_tick+0x2dc>
24016d7c:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
24016d80:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24016d84:	eef4 aacb 	vcmpe.f32	s21, s22
24016d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016d8c:	f280 80ac 	bge.w	24016ee8 <tMBSaw_tick+0x338>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016d90:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
24016d94:	eef5 aac0 	vcmpe.f32	s21, #0.0
24016d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016d9c:	f100 8106 	bmi.w	24016fac <tMBSaw_tick+0x3fc>
        if (sw > 0)
24016da0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24016da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016da8:	dc75      	bgt.n	24016e96 <tMBSaw_tick+0x2e6>
        else if (sw < 0)
24016daa:	f57f af3e 	bpl.w	24016c2a <tMBSaw_tick+0x7a>
	r = MINBLEP_PHASES * phase * inv_w;
24016dae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24016db2:	ed9f 9a99 	vldr	s18, [pc, #612]	; 24017018 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
24016db6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016dba:	ee28 9a89 	vmul.f32	s18, s17, s18
24016dbe:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
24016dc2:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
24016dc6:	eea9 0a28 	vfma.f32	s0, s18, s17
24016dca:	f002 f9bd 	bl	24019148 <lrintf>
	r -= (float)i;
24016dce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016dd2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016dd6:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
24016dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016ddc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016de0:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016de2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
24016de6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016dee:	e06c      	b.n	24016eca <tMBSaw_tick+0x31a>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016df0:	f89d 3005 	ldrb.w	r3, [sp, #5]
24016df4:	3001      	adds	r0, #1
24016df6:	4283      	cmp	r3, r0
24016df8:	f73f af34 	bgt.w	24016c64 <tMBSaw_tick+0xb4>
24016dfc:	e785      	b.n	24016d0a <tMBSaw_tick+0x15a>
    sw = c->_w * c->syncdir;
24016dfe:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
24016e02:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
24016e06:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
24016e0a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24016e0e:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
24016e12:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
24016e16:	eebd 7ac8 	vcvt.s32.f32	s14, s16
24016e1a:	ee77 7a88 	vadd.f32	s15, s15, s16
24016e1e:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
24016e22:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
24016e26:	eeb4 8ac9 	vcmpe.f32	s16, s18
24016e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e2e:	f6ff aef4 	blt.w	24016c1a <tMBSaw_tick+0x6a>
        p -= 1.0f;
24016e32:	eddf 7a79 	vldr	s15, [pc, #484]	; 24017018 <tMBSaw_tick+0x468>
24016e36:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24016e3a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016e3e:	ee68 8aa7 	vmul.f32	s17, s17, s15
24016e42:	eea8 0a88 	vfma.f32	s0, s17, s16
24016e46:	f002 f97f 	bl	24019148 <lrintf>
	r -= (float)i;
24016e4a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e4e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016e52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016e5a:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e5e:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016e60:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016e66:	eed8 7a88 	vfnms.f32	s15, s17, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016e6a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24016e6e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016e72:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016e76:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016e7a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24016e7e:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016e82:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016e86:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
24016e8a:	e6ce      	b.n	24016c2a <tMBSaw_tick+0x7a>
        else if (sw < 0) p = 1.0f - eof_offset;
24016e8c:	f100 80bc 	bmi.w	24017008 <tMBSaw_tick+0x458>
    p += sw - (int)sw;
24016e90:	eeb0 8a49 	vmov.f32	s16, s18
24016e94:	e774      	b.n	24016d80 <tMBSaw_tick+0x1d0>
	r = MINBLEP_PHASES * phase * inv_w;
24016e96:	eddf 7a60 	vldr	s15, [pc, #384]	; 24017018 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
24016e9a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016e9e:	ee68 8aa7 	vmul.f32	s17, s17, s15
24016ea2:	eea8 0a88 	vfma.f32	s0, s17, s16
24016ea6:	f002 f94f 	bl	24019148 <lrintf>
	r -= (float)i;
24016eaa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016eae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016eb2:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
24016eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016eb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ebc:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016ebe:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
24016ec2:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24016eca:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016ece:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016ed2:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016ed6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24016eda:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016ede:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016ee2:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
24016ee6:	e6a0      	b.n	24016c2a <tMBSaw_tick+0x7a>
            p_at_reset -= 1.0f;
24016ee8:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24016eec:	eddf ba4a 	vldr	s23, [pc, #296]	; 24017018 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
24016ef0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016ef4:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24016ef8:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
24016efc:	eea9 0a2b 	vfma.f32	s0, s18, s23
24016f00:	f002 f922 	bl	24019148 <lrintf>
	r -= (float)i;
24016f04:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f08:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016f0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f14:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f18:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f1a:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016f20:	eed9 7a2b 	vfnms.f32	s15, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f24:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24016f28:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f2c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016f30:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016f34:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24016f38:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016f3c:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f40:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
24016f44:	e726      	b.n	24016d94 <tMBSaw_tick+0x1e4>
    z += 0.5f * (c->_f[j] - z); // LP filtering
24016f46:	eb04 0386 	add.w	r3, r4, r6, lsl #2
24016f4a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
24016f4e:	e6de      	b.n	24016d0e <tMBSaw_tick+0x15e>
	r = MINBLEP_PHASES * phase * inv_w;
24016f50:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
24016f54:	ed9f aa30 	vldr	s20, [pc, #192]	; 24017018 <tMBSaw_tick+0x468>
24016f58:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
        p += 1.0f;
24016f5c:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24016f60:	eea8 0a8a 	vfma.f32	s0, s17, s20
24016f64:	f002 f8f0 	bl	24019148 <lrintf>
	r -= (float)i;
24016f68:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f6c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016f70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f78:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f7c:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f7e:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016f84:	eed8 7a8a 	vfnms.f32	s15, s17, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016f88:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016f8c:	4a23      	ldr	r2, [pc, #140]	; (2401701c <tMBSaw_tick+0x46c>)
	c->BLEPindices[c->mostRecentBLEP] = i;
24016f8e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016f92:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016f96:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016f9a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
24016f9e:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016fa2:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016fa6:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
24016faa:	e63e      	b.n	24016c2a <tMBSaw_tick+0x7a>
            p_at_reset += 1.0f;
24016fac:	ed9f ba1a 	vldr	s22, [pc, #104]	; 24017018 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
24016fb0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
24016fb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24016fb8:	ee28 ba8b 	vmul.f32	s22, s17, s22
24016fbc:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
24016fc0:	eeab 0a09 	vfma.f32	s0, s22, s18
24016fc4:	f002 f8c0 	bl	24019148 <lrintf>
	r -= (float)i;
24016fc8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016fcc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016fd0:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
24016fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016fd6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016fda:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016fdc:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016fe0:	4a0e      	ldr	r2, [pc, #56]	; (2401701c <tMBSaw_tick+0x46c>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24016fe6:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
24016fea:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016fee:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016ff2:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016ff6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
24016ffa:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016ffe:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24017002:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
24017006:	e6cb      	b.n	24016da0 <tMBSaw_tick+0x1f0>
        else if (sw < 0) p = 1.0f - eof_offset;
24017008:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
2401700c:	ee38 8a47 	vsub.f32	s16, s16, s14
24017010:	e6b6      	b.n	24016d80 <tMBSaw_tick+0x1d0>
24017012:	bf00      	nop
24017014:	24029104 	.word	0x24029104
24017018:	42800000 	.word	0x42800000
2401701c:	bf800000 	.word	0xbf800000
    p += sw - (int)sw;
24017020:	eeb0 8a49 	vmov.f32	s16, s18
24017024:	e5f1      	b.n	24016c0a <tMBSaw_tick+0x5a>
24017026:	bf00      	nop

24017028 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
24017028:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
2401702a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
2401702e:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
24017032:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
24017036:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
2401703a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
2401703e:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
24017042:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24017046:	4770      	bx	lr

24017048 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
24017048:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401704a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
2401704e:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
24017052:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
24017056:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401705a:	eef1 7a67 	vneg.f32	s15, s15
2401705e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24017062:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24017066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401706a:	eef4 6ac7 	vcmpe.f32	s13, s14
2401706e:	bfcc      	ite	gt
24017070:	2201      	movgt	r2, #1
24017072:	2200      	movle	r2, #0
24017074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017078:	f002 0201 	and.w	r2, r2, #1
2401707c:	bf88      	it	hi
2401707e:	2200      	movhi	r2, #0
24017080:	b122      	cbz	r2, 2401708c <tMBSaw_sync+0x44>
24017082:	eeb5 0a40 	vcmp.f32	s0, #0.0
24017086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401708a:	da04      	bge.n	24017096 <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
2401708c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240170a4 <tMBSaw_sync+0x5c>
24017090:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
24017094:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24017096:	ee37 7a66 	vsub.f32	s14, s14, s13
2401709a:	ee27 7a06 	vmul.f32	s14, s14, s12
2401709e:	ed83 7a04 	vstr	s14, [r3, #16]
}
240170a2:	4770      	bx	lr
240170a4:	00000000 	.word	0x00000000

240170a8 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
240170a8:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
240170aa:	698d      	ldr	r5, [r1, #24]
{
240170ac:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
240170ae:	f44f 703e 	mov.w	r0, #760	; 0x2f8
240170b2:	4629      	mov	r1, r5
240170b4:	f7fc fce6 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
240170b8:	686b      	ldr	r3, [r5, #4]
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
240170ba:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 24017134 <tMBSawPulse_init+0x8c>
    c->gain = 1.0f;
240170be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
240170c2:	edd3 7a01 	vldr	s15, [r3, #4]
    c->active = 1;
240170c6:	2301      	movs	r3, #1
    c->freq = 440.f;
240170c8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 24017138 <tMBSawPulse_init+0x90>
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
240170cc:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
240170ce:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
240170d2:	6030      	str	r0, [r6, #0]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240170d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->mempool = m;
240170d8:	6005      	str	r5, [r0, #0]
    c->gain = 1.0f;
240170da:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->softsync = 0;
240170de:	2500      	movs	r5, #0
    c->active = 1;
240170e0:	f8c0 32f4 	str.w	r3, [r0, #756]	; 0x2f4
    c->lastsyncin = 0.0f;
240170e4:	2300      	movs	r3, #0
    c->syncdir = 1.0f;
240170e6:	6141      	str	r1, [r0, #20]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240170e8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240170ec:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->softsync = 0;
240170f0:	6185      	str	r5, [r0, #24]
    c->_j = 0;
240170f2:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240170f4:	6282      	str	r2, [r0, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
240170f6:	62c2      	str	r2, [r0, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240170f8:	2280      	movs	r2, #128	; 0x80
    c->numBLEPs = 0;
240170fa:	6685      	str	r5, [r0, #104]	; 0x68
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240170fc:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24017100:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
24017102:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    c->freq = 440.f;
24017106:	ed80 7a02 	vstr	s14, [r0, #8]
    c->lastsyncin = 0.0f;
2401710a:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
2401710c:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
2401710e:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
24017110:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
24017112:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24017114:	ed80 6a09 	vstr	s12, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24017118:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
2401711a:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
2401711c:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24017120:	f001 fbee 	bl	24018900 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24017124:	4629      	mov	r1, r5
24017126:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401712a:	2220      	movs	r2, #32
}
2401712c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24017130:	f001 bbe6 	b.w	24018900 <memset>
24017134:	3b14f209 	.word	0x3b14f209
24017138:	43dc0000 	.word	0x43dc0000

2401713c <tMBSawPulse_setShape>:
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
    c->shape = shape;
2401713c:	6803      	ldr	r3, [r0, #0]
2401713e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
24017142:	4770      	bx	lr

24017144 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
24017144:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24017146:	698c      	ldr	r4, [r1, #24]
{
24017148:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401714a:	201c      	movs	r0, #28
2401714c:	4621      	mov	r1, r4
2401714e:	f7fc fc99 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
24017152:	6862      	ldr	r2, [r4, #4]
    
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017154:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24017170 <tIntPhasor_init+0x2c>
    c->phase    =  0;
24017158:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401715a:	edd2 7a01 	vldr	s15, [r2, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401715e:	6028      	str	r0, [r5, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017160:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
24017164:	6004      	str	r4, [r0, #0]
    c->phase    =  0;
24017166:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017168:	edc0 7a06 	vstr	s15, [r0, #24]
}
2401716c:	bd38      	pop	{r3, r4, r5, pc}
2401716e:	bf00      	nop
24017170:	4f800000 	.word	0x4f800000

24017174 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24017174:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24017176:	eddf 7a06 	vldr	s15, [pc, #24]	; 24017190 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
2401717a:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
2401717e:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
24017180:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24017184:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24017186:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
2401718a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401718e:	4770      	bx	lr
24017190:	2f80000d 	.word	0x2f80000d

24017194 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
24017194:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017196:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401719a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401719e:	ee20 0a27 	vmul.f32	s0, s0, s15
240171a2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240171a6:	ed83 0a02 	vstr	s0, [r3, #8]
}
240171aa:	4770      	bx	lr

240171ac <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
240171ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240171b0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240171cc <tIntPhasor_setPhase+0x20>
240171b4:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240171b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240171ba:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240171be:	ee20 0a07 	vmul.f32	s0, s0, s14
240171c2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240171c6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240171ca:	4770      	bx	lr
240171cc:	4f800000 	.word	0x4f800000

240171d0 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
240171d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240171d2:	698f      	ldr	r7, [r1, #24]
{
240171d4:	4606      	mov	r6, r0
240171d6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240171d8:	2010      	movs	r0, #16
240171da:	4639      	mov	r1, r7
{
240171dc:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240171e0:	f7fc fc50 	bl	24013a84 <mpool_alloc>
240171e4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
240171e6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240171e8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240171ea:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240171ec:	201c      	movs	r0, #28
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240171ee:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24017268 <tSquareLFO_init+0x98>
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240171f2:	4639      	mov	r1, r7
240171f4:	f7fc fc46 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
240171f8:	687b      	ldr	r3, [r7, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240171fa:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240171fc:	edd3 7a01 	vldr	s15, [r3, #4]
    c->mempool = m;
24017200:	6007      	str	r7, [r0, #0]
    c->phase    =  0;
24017202:	2700      	movs	r7, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017204:	ee67 7a88 	vmul.f32	s15, s15, s16
    _tMempool* m = *mp;
24017208:	69ad      	ldr	r5, [r5, #24]
    c->phase    =  0;
2401720a:	6047      	str	r7, [r0, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401720c:	4629      	mov	r1, r5
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401720e:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017212:	201c      	movs	r0, #28
24017214:	f7fc fc36 	bl	24013a84 <mpool_alloc>
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;
24017218:	6833      	ldr	r3, [r6, #0]
    LEAF* leaf = c->mempool->leaf;
2401721a:	6869      	ldr	r1, [r5, #4]

    c->pulsewidth = pw;
2401721c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017220:	60e0      	str	r0, [r4, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017222:	689a      	ldr	r2, [r3, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017224:	edd1 6a01 	vldr	s13, [r1, #4]
    c->phase    =  0;
24017228:	6047      	str	r7, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401722a:	ed92 7a01 	vldr	s14, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401722e:	ee66 6a88 	vmul.f32	s13, s13, s16
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017232:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 2401726c <tSquareLFO_init+0x9c>
24017236:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c->phase = phase * TWO_TO_32;
2401723a:	68da      	ldr	r2, [r3, #12]
    c->mempool = m;
2401723c:	6005      	str	r5, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401723e:	edc0 6a06 	vstr	s13, [r0, #24]
    c->pulsewidth = pw;
24017242:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017246:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
2401724a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401724e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24017252:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24017256:	ee67 7a88 	vmul.f32	s15, s15, s16
}
2401725a:	ecbd 8b02 	vpop	{d8}
    c->phase = phase * TWO_TO_32;
2401725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017262:	edc2 7a01 	vstr	s15, [r2, #4]
}
24017266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017268:	4f800000 	.word	0x4f800000
2401726c:	2f80000d 	.word	0x2f80000d

24017270 <tSquareLFO_initToPool>:
{
24017270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24017272:	680f      	ldr	r7, [r1, #0]
{
24017274:	4606      	mov	r6, r0
24017276:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017278:	2010      	movs	r0, #16
2401727a:	4639      	mov	r1, r7
{
2401727c:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017280:	f7fc fc00 	bl	24013a84 <mpool_alloc>
24017284:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24017286:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24017288:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2401728a:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401728c:	201c      	movs	r0, #28
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401728e:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24017308 <tSquareLFO_initToPool+0x98>
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017292:	4639      	mov	r1, r7
24017294:	f7fc fbf6 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
24017298:	687b      	ldr	r3, [r7, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401729a:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401729c:	edd3 7a01 	vldr	s15, [r3, #4]
    c->mempool = m;
240172a0:	6007      	str	r7, [r0, #0]
    c->phase    =  0;
240172a2:	2700      	movs	r7, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240172a4:	ee67 7a88 	vmul.f32	s15, s15, s16
    _tMempool* m = *mp;
240172a8:	682d      	ldr	r5, [r5, #0]
    c->phase    =  0;
240172aa:	6047      	str	r7, [r0, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240172ac:	4629      	mov	r1, r5
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240172ae:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240172b2:	201c      	movs	r0, #28
240172b4:	f7fc fbe6 	bl	24013a84 <mpool_alloc>
    _tSquareLFO *c = *cy;
240172b8:	6833      	ldr	r3, [r6, #0]
    LEAF* leaf = c->mempool->leaf;
240172ba:	6869      	ldr	r1, [r5, #4]
    c->pulsewidth = pw;
240172bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240172c0:	60e0      	str	r0, [r4, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240172c2:	689a      	ldr	r2, [r3, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240172c4:	edd1 6a01 	vldr	s13, [r1, #4]
    c->phase    =  0;
240172c8:	6047      	str	r7, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240172ca:	ed92 7a01 	vldr	s14, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240172ce:	ee66 6a88 	vmul.f32	s13, s13, s16
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240172d2:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 2401730c <tSquareLFO_initToPool+0x9c>
240172d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c->phase = phase * TWO_TO_32;
240172da:	68da      	ldr	r2, [r3, #12]
    c->mempool = m;
240172dc:	6005      	str	r5, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240172de:	edc0 6a06 	vstr	s13, [r0, #24]
    c->pulsewidth = pw;
240172e2:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240172e6:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
240172ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240172ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240172f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
240172f6:	ee67 7a88 	vmul.f32	s15, s15, s16
}
240172fa:	ecbd 8b02 	vpop	{d8}
    c->phase = phase * TWO_TO_32;
240172fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017302:	edc2 7a01 	vstr	s15, [r2, #4]
}
24017306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017308:	4f800000 	.word	0x4f800000
2401730c:	2f80000d 	.word	0x2f80000d

24017310 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24017310:	6803      	ldr	r3, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017312:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24017316:	ed9f 7a11 	vldr	s14, [pc, #68]	; 2401735c <tSquareLFO_tick+0x4c>
2401731a:	ed93 0a01 	vldr	s0, [r3, #4]
    _tIntPhasor* c = *cy;
2401731e:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
{
24017322:	b410      	push	{r4}
    c->phase = (c->phase + c->inc);
24017324:	6853      	ldr	r3, [r2, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017326:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = (c->phase + c->inc);
2401732a:	6894      	ldr	r4, [r2, #8]
2401732c:	6888      	ldr	r0, [r1, #8]
2401732e:	4423      	add	r3, r4
}
24017330:	f85d 4b04 	ldr.w	r4, [sp], #4
    c->phase = (c->phase + c->inc);
24017334:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24017336:	ee07 3a90 	vmov	s15, r3
    c->phase = (c->phase + c->inc);
2401733a:	684a      	ldr	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24017340:	4402      	add	r2, r0
    return c->phase * INV_TWO_TO_32; 
24017342:	ee06 2a90 	vmov	s13, r2
    c->phase = (c->phase + c->inc);
24017346:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24017348:	eef8 6a66 	vcvt.f32.u32	s13, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401734c:	ee77 7ae6 	vsub.f32	s15, s15, s13
24017350:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24017354:	ee30 0a00 	vadd.f32	s0, s0, s0
24017358:	4770      	bx	lr
2401735a:	bf00      	nop
2401735c:	2f80000d 	.word	0x2f80000d

24017360 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24017360:	6803      	ldr	r3, [r0, #0]
    _tIntPhasor* c = *cy;
24017362:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017366:	ed92 7a06 	vldr	s14, [r2, #24]
2401736a:	edd3 7a06 	vldr	s15, [r3, #24]
2401736e:	ee20 7a07 	vmul.f32	s14, s0, s14
    c->freq  = freq;
24017372:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017376:	ee60 7a27 	vmul.f32	s15, s0, s15
2401737a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2401737e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017382:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
24017386:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401738a:	edc3 7a02 	vstr	s15, [r3, #8]
}
2401738e:	4770      	bx	lr

24017390 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24017390:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017392:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240173c8 <tSquareLFO_setPulseWidth+0x38>
    c->pulsewidth = pw;
24017396:	ed83 0a01 	vstr	s0, [r3, #4]
    c->phase = phase * TWO_TO_32;
2401739a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240173cc <tSquareLFO_setPulseWidth+0x3c>
2401739e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240173a2:	edd1 7a01 	vldr	s15, [r1, #4]
240173a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240173aa:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
240173ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
240173b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240173b6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240173ba:	ee20 0a07 	vmul.f32	s0, s0, s14
240173be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240173c2:	ed82 0a01 	vstr	s0, [r2, #4]
}
240173c6:	4770      	bx	lr
240173c8:	2f80000d 	.word	0x2f80000d
240173cc:	4f800000 	.word	0x4f800000

240173d0 <tSquareLFO_setPhase>:
    int i = phase;
240173d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240173d4:	eddf 6a12 	vldr	s13, [pc, #72]	; 24017420 <tSquareLFO_setPhase+0x50>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
240173d8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240173da:	ed9f 6a12 	vldr	s12, [pc, #72]	; 24017424 <tSquareLFO_setPhase+0x54>
    phase -= i;
240173de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240173e2:	ed93 7a01 	vldr	s14, [r3, #4]
    c->phase = phase * TWO_TO_32;
240173e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    phase -= i;
240173ea:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->phase = phase * TWO_TO_32;
240173ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
240173f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240173f6:	eef8 5a67 	vcvt.f32.u32	s11, s15
    c->phase = phase * TWO_TO_32;
240173fa:	edc2 7a01 	vstr	s15, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240173fe:	eef0 7a47 	vmov.f32	s15, s14
24017402:	eee5 7a86 	vfma.f32	s15, s11, s12
    int i = phase;
24017406:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401740a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401740e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24017412:	ee67 7aa6 	vmul.f32	s15, s15, s13
24017416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401741a:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401741e:	4770      	bx	lr
24017420:	4f800000 	.word	0x4f800000
24017424:	2f80000d 	.word	0x2f80000d

24017428 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24017428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401742a:	460c      	mov	r4, r1
{
2401742c:	4606      	mov	r6, r0
2401742e:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24017430:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24017432:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24017436:	4639      	mov	r1, r7
24017438:	f7fc fb24 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
2401743c:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
2401743e:	6030      	str	r0, [r6, #0]
24017440:	4604      	mov	r4, r0
    c->mempool = m;
24017442:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24017446:	f7ff ff13 	bl	24017270 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
2401744a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401744c:	201c      	movs	r0, #28
2401744e:	4629      	mov	r1, r5
24017450:	f7fc fb18 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
24017454:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017456:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24017470 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
2401745a:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401745c:	edd2 7a01 	vldr	s15, [r2, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24017460:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24017462:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
24017466:	6005      	str	r5, [r0, #0]
    c->phase    =  0;
24017468:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401746a:	edc0 7a06 	vstr	s15, [r0, #24]
}
2401746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017470:	4f800000 	.word	0x4f800000

24017474 <tSawSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
    _tSawSquareLFO* c = *cy;
24017474:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24017476:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
2401747a:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
2401747e:	eddf 5a1c 	vldr	s11, [pc, #112]	; 240174f0 <tSawSquareLFO_tick+0x7c>
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
24017482:	ed92 0a01 	vldr	s0, [r2, #4]
24017486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
2401748a:	b430      	push	{r4, r5}
    _tSquareLFO* c = *cy;
2401748c:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
    return  (1 - c->shape) * a + c->shape * b; 
24017490:	ee37 7a40 	vsub.f32	s14, s14, s0
    _tIntPhasor* c = *cy;
24017494:	6898      	ldr	r0, [r3, #8]
    return  (1 - c->shape) * a + c->shape * b; 
24017496:	ee30 0a00 	vadd.f32	s0, s0, s0
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401749a:	edd3 6a01 	vldr	s13, [r3, #4]
    c->phase = (c->phase + c->inc);
2401749e:	6885      	ldr	r5, [r0, #8]
    return  (1 - c->shape) * a + c->shape * b; 
240174a0:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240174a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
    c->phase = (c->phase + c->inc);
240174a8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
240174ac:	440a      	add	r2, r1
    _tIntPhasor* c = *cy;
240174ae:	68d9      	ldr	r1, [r3, #12]
    c->phase = (c->phase + c->inc);
240174b0:	6062      	str	r2, [r4, #4]
    return c->phase * INV_TWO_TO_32; 
240174b2:	ee07 2a90 	vmov	s15, r2
    c->phase = (c->phase + c->inc);
240174b6:	6843      	ldr	r3, [r0, #4]
240174b8:	688c      	ldr	r4, [r1, #8]
    return c->phase * INV_TWO_TO_32; 
240174ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240174be:	442b      	add	r3, r5
240174c0:	6043      	str	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
240174c2:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
240174c6:	684a      	ldr	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
240174c8:	ee07 3a90 	vmov	s15, r3
    c->phase = (c->phase + c->inc);
240174cc:	4422      	add	r2, r4
    return c->phase * INV_TWO_TO_32; 
240174ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
240174d2:	ee05 2a10 	vmov	s10, r2
    c->phase = (c->phase + c->inc);
240174d6:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
240174d8:	eeb8 5a45 	vcvt.f32.u32	s10, s10
}
240174dc:	bc30      	pop	{r4, r5}
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240174de:	ee77 7ac5 	vsub.f32	s15, s15, s10
240174e2:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
240174e6:	ee20 0a26 	vmul.f32	s0, s0, s13
}
240174ea:	eea6 0a07 	vfma.f32	s0, s12, s14
240174ee:	4770      	bx	lr
240174f0:	2f80000d 	.word	0x2f80000d

240174f4 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
240174f4:	6803      	ldr	r3, [r0, #0]
    _tIntPhasor* c = *cy;
240174f6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
240174fa:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240174fe:	edd3 7a06 	vldr	s15, [r3, #24]
24017502:	edd1 6a06 	vldr	s13, [r1, #24]
24017506:	ed92 7a06 	vldr	s14, [r2, #24]
2401750a:	ee60 7a27 	vmul.f32	s15, s0, s15
2401750e:	ee60 6a26 	vmul.f32	s13, s0, s13
    c->freq  = freq;
24017512:	ed81 0a03 	vstr	s0, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017516:	ee20 7a07 	vmul.f32	s14, s0, s14
2401751a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401751e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
24017522:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24017526:	edc1 6a02 	vstr	s13, [r1, #8]
    c->freq  = freq;
2401752a:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401752e:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
24017532:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017536:	edc3 7a02 	vstr	s15, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
2401753a:	4770      	bx	lr

2401753c <tSawSquareLFO_setPhase>:
    int i = phase;
2401753c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
24017540:	eddf 6a13 	vldr	s13, [pc, #76]	; 24017590 <tSawSquareLFO_setPhase+0x54>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
24017544:	6802      	ldr	r2, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017546:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24017594 <tSawSquareLFO_setPhase+0x58>
    phase -= i;
2401754a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->phase = phase * TWO_TO_32;
2401754e:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
    phase -= i;
24017552:	ee30 0a47 	vsub.f32	s0, s0, s14
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017556:	edd3 7a01 	vldr	s15, [r3, #4]
    c->phase = phase * TWO_TO_32;
2401755a:	ee20 0a26 	vmul.f32	s0, s0, s13
2401755e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
24017562:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24017566:	eeb8 7a40 	vcvt.f32.u32	s14, s0
    c->phase = phase * TWO_TO_32;
2401756a:	ed81 0a01 	vstr	s0, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401756e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24017572:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24017576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401757a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
2401757e:	ee67 7aa6 	vmul.f32	s15, s15, s13
24017582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017586:	edc3 7a01 	vstr	s15, [r3, #4]
2401758a:	ed82 0a01 	vstr	s0, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
2401758e:	4770      	bx	lr
24017590:	4f800000 	.word	0x4f800000
24017594:	2f80000d 	.word	0x2f80000d

24017598 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
    c->shape = shape; 
24017598:	6803      	ldr	r3, [r0, #0]
2401759a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401759e:	4770      	bx	lr

240175a0 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
240175a0:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240175a2:	698c      	ldr	r4, [r1, #24]
{
240175a4:	4605      	mov	r5, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240175a6:	2018      	movs	r0, #24
240175a8:	4621      	mov	r1, r4
240175aa:	f7fc fa6b 	bl	24013a84 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
240175ae:	6863      	ldr	r3, [r4, #4]
    
    c->inc      =  0;
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240175b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240175e4 <tTriLFO_init+0x44>
    c->invSampleRate = leaf->invSampleRate;
240175b4:	edd3 6a01 	vldr	s13, [r3, #4]
    c->phase    =  0;
240175b8:	2300      	movs	r3, #0

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
240175ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 240175e8 <tTriLFO_init+0x48>
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240175be:	ee26 7a87 	vmul.f32	s14, s13, s14
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240175c2:	6028      	str	r0, [r5, #0]
    c->freq  = freq;
240175c4:	edc0 7a03 	vstr	s15, [r0, #12]
    c->mempool = m;
240175c8:	6004      	str	r4, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240175ca:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->phase    =  0;
240175ce:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240175d0:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240175d4:	ed80 7a05 	vstr	s14, [r0, #20]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240175d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240175dc:	edc0 7a02 	vstr	s15, [r0, #8]
}
240175e0:	bd38      	pop	{r3, r4, r5, pc}
240175e2:	bf00      	nop
240175e4:	4f800000 	.word	0x4f800000
240175e8:	435c0000 	.word	0x435c0000

240175ec <tTriLFO_tick>:
    _tTriLFO* c = *cy;
240175ec:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
240175ee:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240175f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2401761c <tTriLFO_tick+0x30>
    c->phase += c->inc;
240175f6:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
240175fa:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240175fc:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
24017600:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24017602:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24017606:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
2401760a:	ee07 3a90 	vmov	s15, r3
2401760e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017612:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24017616:	ee30 0a00 	vadd.f32	s0, s0, s0
2401761a:	4770      	bx	lr
2401761c:	2ffffff6 	.word	0x2ffffff6

24017620 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
24017620:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017622:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24017626:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401762a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401762e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017632:	ed83 0a02 	vstr	s0, [r3, #8]
}
24017636:	4770      	bx	lr

24017638 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24017638:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32_INT;
2401763c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401763e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017642:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24017646:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
2401764a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401764e:	4770      	bx	lr

24017650 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
24017650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24017652:	698f      	ldr	r7, [r1, #24]
{
24017654:	4606      	mov	r6, r0
24017656:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24017658:	2010      	movs	r0, #16
2401765a:	4639      	mov	r1, r7
{
2401765c:	ed2d 8b02 	vpush	{d8}
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24017660:	f7fc fa10 	bl	24013a84 <mpool_alloc>
24017664:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24017666:	2018      	movs	r0, #24
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24017668:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 240176d4 <tSineTriLFO_init+0x84>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
2401766c:	6034      	str	r4, [r6, #0]
    c->mempool = m;
2401766e:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24017670:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24017672:	4631      	mov	r1, r6
24017674:	f7fc fa06 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
24017678:	6873      	ldr	r3, [r6, #4]
    c->freq  = freq;
2401767a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 240176d8 <tSineTriLFO_init+0x88>
    c->invSampleRate = leaf->invSampleRate;
2401767e:	ed93 6a01 	vldr	s12, [r3, #4]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24017682:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24017684:	ee66 6a08 	vmul.f32	s13, s12, s16
    c->mempool = m;
24017688:	6006      	str	r6, [r0, #0]
    c->phase    =  0;
2401768a:	2600      	movs	r6, #0
    _tMempool* m = *mp;
2401768c:	69ad      	ldr	r5, [r5, #24]
    c->invSampleRate = leaf->invSampleRate;
2401768e:	ed80 6a04 	vstr	s12, [r0, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017692:	ee66 7a87 	vmul.f32	s15, s13, s14
    c->phase    =  0;
24017696:	6046      	str	r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24017698:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401769c:	4629      	mov	r1, r5
    c->freq  = freq;
2401769e:	ed80 7a03 	vstr	s14, [r0, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240176a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240176a6:	edc0 7a02 	vstr	s15, [r0, #8]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240176aa:	2018      	movs	r0, #24
240176ac:	f7fc f9ea 	bl	24013a84 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
240176b0:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240176b2:	edd3 7a01 	vldr	s15, [r3, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240176b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240176ba:	60e0      	str	r0, [r4, #12]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240176bc:	ee67 7a88 	vmul.f32	s15, s15, s16
    c->mempool = m;
240176c0:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
240176c2:	6143      	str	r3, [r0, #20]
}
240176c4:	ecbd 8b02 	vpop	{d8}
    c->phase    =  0;
240176c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240176cc:	edc0 7a04 	vstr	s15, [r0, #16]
}
240176d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240176d2:	bf00      	nop
240176d4:	4f800000 	.word	0x4f800000
240176d8:	435c0000 	.word	0x435c0000

240176dc <tSineTriLFO_tick>:
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
    _tSineTriLFO* c = *cy;
240176dc:	6803      	ldr	r3, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
240176de:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
240176e2:	4a21      	ldr	r2, [pc, #132]	; (24017768 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
240176e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
240176e8:	68d9      	ldr	r1, [r3, #12]
    return  (1.0f - c->shape) * a + c->shape * b;
240176ea:	ed93 7a01 	vldr	s14, [r3, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
240176ee:	eddf 6a1f 	vldr	s13, [pc, #124]	; 2401776c <tSineTriLFO_tick+0x90>
    return  (1.0f - c->shape) * a + c->shape * b;
240176f2:	ee37 6a07 	vadd.f32	s12, s14, s14
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
240176f6:	eddf 4a1e 	vldr	s9, [pc, #120]	; 24017770 <tSineTriLFO_tick+0x94>
    return  (1.0f - c->shape) * a + c->shape * b;
240176fa:	ee75 5ac7 	vsub.f32	s11, s11, s14
{
240176fe:	b430      	push	{r4, r5}
    _tTriLFO* c = *cy;
24017700:	689c      	ldr	r4, [r3, #8]
    idx = (idx + 1) & c->mask;
24017702:	694d      	ldr	r5, [r1, #20]
    c->phase += c->inc;
24017704:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24017708:	4403      	add	r3, r0
    idx = c->phase >> 21; //11 bit table 
2401770a:	0d58      	lsrs	r0, r3, #21
    c->phase += c->inc;
2401770c:	604b      	str	r3, [r1, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
2401770e:	f3c3 0314 	ubfx	r3, r3, #0, #21
    c->phase += c->inc;
24017712:	68a1      	ldr	r1, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24017714:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
24017718:	6863      	ldr	r3, [r4, #4]
2401771a:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
2401771c:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
2401771e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24017722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    idx = (idx + 1) & c->mask;
24017726:	4029      	ands	r1, r5
    c->phase += c->inc;
24017728:	6063      	str	r3, [r4, #4]
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
2401772a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    samp1 = __leaf_table_sinewave[idx];
2401772e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24017732:	ee67 7aa6 	vmul.f32	s15, s15, s13
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24017736:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
2401773a:	edd0 6a00 	vldr	s13, [r0]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401773e:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24017742:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24017746:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
2401774a:	ee07 3a10 	vmov	s14, r3
2401774e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24017752:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24017756:	eea7 0a24 	vfma.f32	s0, s14, s9
}
2401775a:	bc30      	pop	{r4, r5}
    return  (1.0f - c->shape) * a + c->shape * b;
2401775c:	ee26 0a00 	vmul.f32	s0, s12, s0
}
24017760:	eea5 0aa6 	vfma.f32	s0, s11, s13
24017764:	4770      	bx	lr
24017766:	bf00      	nop
24017768:	24022980 	.word	0x24022980
2401776c:	35000004 	.word	0x35000004
24017770:	2ffffff6 	.word	0x2ffffff6

24017774 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
24017774:	6803      	ldr	r3, [r0, #0]
    _tCycle* c = *cy;
24017776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401777a:	ed92 7a05 	vldr	s14, [r2, #20]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401777e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017782:	ee20 7a07 	vmul.f32	s14, s0, s14
    c->freq  = freq;
24017786:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401778a:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401778e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24017796:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
2401779a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401779e:	edc3 7a02 	vstr	s15, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
240177a2:	4770      	bx	lr

240177a4 <tSineTriLFO_setPhase>:
    int i = phase;
240177a4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
240177a8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240177d0 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
240177ac:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240177ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase = phase * TWO_TO_32;
240177b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    phase -= i;
240177b6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
240177ba:	ee20 0a07 	vmul.f32	s0, s0, s14
240177be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240177c2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
240177c6:	edc2 7a01 	vstr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
240177ca:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
240177ce:	4770      	bx	lr
240177d0:	4f800000 	.word	0x4f800000

240177d4 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
    c->shape = shape;
240177d4:	6803      	ldr	r3, [r0, #0]
240177d6:	ed83 0a01 	vstr	s0, [r3, #4]

 }
240177da:	4770      	bx	lr
240177dc:	0000      	movs	r0, r0
	...

240177e0 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, float freq, float dampFreq,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
240177e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tMempool* m = *mp;
240177e4:	f8d3 9000 	ldr.w	r9, [r3]
{
240177e8:	460e      	mov	r6, r1
240177ea:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240177ec:	2064      	movs	r0, #100	; 0x64
240177ee:	4649      	mov	r1, r9
{
240177f0:	461d      	mov	r5, r3
240177f2:	4617      	mov	r7, r2
240177f4:	ed2d 8b08 	vpush	{d8-d11}
240177f8:	b083      	sub	sp, #12
240177fa:	eeb0 8a40 	vmov.f32	s16, s0
240177fe:	eeb0 9a41 	vmov.f32	s18, s2
24017802:	eef0 9a61 	vmov.f32	s19, s3
24017806:	eeb0 aa42 	vmov.f32	s20, s4
2401780a:	eef0 aa62 	vmov.f32	s21, s5
2401780e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24017812:	f7fc f937 	bl	24013a84 <mpool_alloc>
24017816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
2401781a:	ee07 6a90 	vmov	s15, r6
    LEAF* leaf = p->mempool->leaf;
2401781e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017822:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->sampleRate = leaf->sampleRate * oversampling;
24017826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->maxLength = 2400 * oversampling;
2401782a:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401782e:	ee87 ba08 	vdiv.f32	s22, s14, s16
    p->sampleRate = leaf->sampleRate * oversampling;
24017832:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24017836:	f8c8 0000 	str.w	r0, [r8]
2401783a:	4604      	mov	r4, r0
    p->curr=0.0f;
2401783c:	2300      	movs	r3, #0
    p->oversampling = oversampling;
2401783e:	65c6      	str	r6, [r0, #92]	; 0x5c
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017840:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    p->maxLength = 2400 * oversampling;
24017844:	fb01 f606 	mul.w	r6, r1, r6
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24017848:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->curr=0.0f;
2401784c:	6243      	str	r3, [r0, #36]	; 0x24
    p->sampleRate = leaf->sampleRate * oversampling;
2401784e:	ee67 7a80 	vmul.f32	s15, s15, s0
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017852:	eddf 0a83 	vldr	s1, [pc, #524]	; 24017a60 <tSimpleLivingString3_initToPool+0x280>
    p->mempool = m;
24017856:	f8c0 9000 	str.w	r9, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401785a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
2401785c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
2401785e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24017862:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017866:	4650      	mov	r0, sl
24017868:	ee2b 0a2b 	vmul.f32	s0, s22, s23
2401786c:	ee20 0a27 	vmul.f32	s0, s0, s15
24017870:	f7fa f926 	bl	24011ac0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24017874:	ed94 0a02 	vldr	s0, [r4, #8]
24017878:	462a      	mov	r2, r5
2401787a:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401787c:	4658      	mov	r0, fp
2401787e:	f7f9 f963 	bl	24010b48 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24017882:	ed94 0a02 	vldr	s0, [r4, #8]
24017886:	462a      	mov	r2, r5
24017888:	6b21      	ldr	r1, [r4, #48]	; 0x30
2401788a:	4648      	mov	r0, r9
2401788c:	f7f9 f95c 	bl	24010b48 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, float freq)
{
    _tSimpleLivingString3* p = *pl;
24017890:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    float waveLength = (p->sampleRate/freq);
24017894:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
24017898:	ed86 8a01 	vstr	s16, [r6, #4]
    float waveLength = (p->sampleRate/freq);
2401789c:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
240178a0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 24017a50 <tSimpleLivingString3_initToPool+0x270>
240178a4:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
240178a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
240178ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240178b0:	f100 80c7 	bmi.w	24017a42 <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240178b4:	6b33      	ldr	r3, [r6, #48]	; 0x30
240178b6:	005b      	lsls	r3, r3, #1
240178b8:	ee07 3a90 	vmov	s15, r3
240178bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
240178c0:	fec7 7ac0 	vminnm.f32	s15, s15, s0
240178c4:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240178c8:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
240178cc:	ed86 0a02 	vstr	s0, [r6, #8]
    //float decay = p->userDecay;

    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240178d0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240178d4:	f7fa f920 	bl	24011b18 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240178d8:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
240178dc:	f104 0840 	add.w	r8, r4, #64	; 0x40
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240178e0:	eddf 7a60 	vldr	s15, [pc, #384]	; 24017a64 <tSimpleLivingString3_initToPool+0x284>
240178e4:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240178e8:	ed96 6a01 	vldr	s12, [r6, #4]
240178ec:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240178f0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240178f4:	ed9f 0b58 	vldr	d0, [pc, #352]	; 24017a58 <tSimpleLivingString3_initToPool+0x278>
240178f8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240178fc:	ee27 7b06 	vmul.f64	d7, d7, d6
24017900:	ee80 0b07 	vdiv.f64	d0, d0, d7
24017904:	f001 f93c 	bl	24018b80 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24017908:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
2401790a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401790e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24017912:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24017916:	ed94 0a02 	vldr	s0, [r4, #8]
2401791a:	f7f9 f9d9 	bl	24010cd0 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
2401791e:	ed94 0a02 	vldr	s0, [r4, #8]
24017922:	4648      	mov	r0, r9
24017924:	f7f9 f9d4 	bl	24010cd0 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24017928:	4658      	mov	r0, fp
2401792a:	f7f9 f985 	bl	24010c38 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
2401792e:	4648      	mov	r0, r9
24017930:	f7f9 f982 	bl	24010c38 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24017934:	f104 033c 	add.w	r3, r4, #60	; 0x3c
24017938:	4629      	mov	r1, r5
2401793a:	eeb0 0a68 	vmov.f32	s0, s17
2401793e:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
24017940:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24017944:	9301      	str	r3, [sp, #4]
24017946:	f7fa f953 	bl	24011bf0 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
2401794a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401794e:	9801      	ldr	r0, [sp, #4]
24017950:	f7fa f9b4 	bl	24011cbc <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24017954:	eeb0 0a68 	vmov.f32	s0, s17
24017958:	9801      	ldr	r0, [sp, #4]
2401795a:	f7fa f97d 	bl	24011c58 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
2401795e:	4629      	mov	r1, r5
24017960:	4640      	mov	r0, r8
24017962:	f8cd 8004 	str.w	r8, [sp, #4]
24017966:	f7fa fa03 	bl	24011d70 <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
2401796a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401796e:	9801      	ldr	r0, [sp, #4]
24017970:	f7fa fa16 	bl	24011da0 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24017974:	4629      	mov	r1, r5
24017976:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
2401797a:	4630      	mov	r0, r6
2401797c:	9601      	str	r6, [sp, #4]
2401797e:	f7fa fb61 	bl	24012044 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24017982:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24017986:	9801      	ldr	r0, [sp, #4]
24017988:	f7fa fb98 	bl	240120bc <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
2401798c:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24017990:	9801      	ldr	r0, [sp, #4]
24017992:	f7fa fb77 	bl	24012084 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24017996:	eeb0 0a69 	vmov.f32	s0, s19
2401799a:	eeb0 1a6a 	vmov.f32	s2, s21
2401799e:	462a      	mov	r2, r5
240179a0:	eef0 0a4a 	vmov.f32	s1, s20
240179a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
240179a8:	4639      	mov	r1, r7
    p->userDecay = decay;
240179aa:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
240179ae:	f7f9 fc9d 	bl	240112ec <tFeedbackLeveler_initToPool>
    float waveLength = (p->sampleRate/freq);
240179b2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
240179b6:	6227      	str	r7, [r4, #32]
    float waveLength = (p->sampleRate/freq);
240179b8:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
240179bc:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
240179c0:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
240179c4:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24017a50 <tSimpleLivingString3_initToPool+0x270>
240179c8:	eeb7 6acb 	vcvt.f64.f32	d6, s22
240179cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
240179d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240179d4:	d438      	bmi.n	24017a48 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240179d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
240179d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240179dc:	005b      	lsls	r3, r3, #1
240179de:	ee00 3a10 	vmov	s0, r3
240179e2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
240179e6:	fe80 0a4b 	vminnm.f32	s0, s0, s22
240179ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240179ee:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
240179f0:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240179f4:	f7fa f890 	bl	24011b18 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240179f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240179fc:	ed94 7a05 	vldr	s14, [r4, #20]
24017a00:	eddf 7a18 	vldr	s15, [pc, #96]	; 24017a64 <tSimpleLivingString3_initToPool+0x284>
24017a04:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017a08:	ed94 6a01 	vldr	s12, [r4, #4]
24017a0c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24017a10:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017a14:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24017a58 <tSimpleLivingString3_initToPool+0x278>
24017a18:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24017a1c:	ee27 7b06 	vmul.f64	d7, d7, d6
24017a20:	ee80 0b07 	vdiv.f64	d0, d0, d7
24017a24:	f001 f8ac 	bl	24018b80 <exp>
    p->pickupPoint = 0.9f;
24017a28:	4a0f      	ldr	r2, [pc, #60]	; (24017a68 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
24017a2a:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
24017a2c:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017a2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24017a32:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017a34:	ed84 0a04 	vstr	s0, [r4, #16]
}
24017a38:	b003      	add	sp, #12
24017a3a:	ecbd 8b08 	vpop	{d8-d11}
24017a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24017a42:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24017a6c <tSimpleLivingString3_initToPool+0x28c>
24017a46:	e73f      	b.n	240178c8 <tSimpleLivingString3_initToPool+0xe8>
24017a48:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24017a6c <tSimpleLivingString3_initToPool+0x28c>
24017a4c:	e7cf      	b.n	240179ee <tSimpleLivingString3_initToPool+0x20e>
24017a4e:	bf00      	nop
24017a50:	33333333 	.word	0x33333333
24017a54:	40133333 	.word	0x40133333
24017a58:	0a3d70a4 	.word	0x0a3d70a4
24017a5c:	c01ba3d7 	.word	0xc01ba3d7
24017a60:	3c23d70a 	.word	0x3c23d70a
24017a64:	3d8d78c4 	.word	0x3d8d78c4
24017a68:	3f666666 	.word	0x3f666666
24017a6c:	4019999a 	.word	0x4019999a

24017a70 <tSimpleLivingString3_setFreq>:
{
24017a70:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24017a72:	6804      	ldr	r4, [r0, #0]
    float waveLength = (p->sampleRate/freq);
24017a74:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24017a78:	ed84 0a01 	vstr	s0, [r4, #4]
    float waveLength = (p->sampleRate/freq);
24017a7c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24017a80:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24017af8 <tSimpleLivingString3_setFreq+0x88>
24017a84:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24017a88:	eeb4 5bc6 	vcmpe.f64	d5, d6
24017a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a90:	d42e      	bmi.n	24017af0 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24017a92:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24017a94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24017a98:	005b      	lsls	r3, r3, #1
24017a9a:	ee00 3a10 	vmov	s0, r3
24017a9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24017aa2:	fe80 0a67 	vminnm.f32	s0, s0, s15
24017aa6:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24017aaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24017aae:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24017ab2:	f7fa f831 	bl	24011b18 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24017ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24017aba:	ed94 7a05 	vldr	s14, [r4, #20]
24017abe:	eddf 7a12 	vldr	s15, [pc, #72]	; 24017b08 <tSimpleLivingString3_setFreq+0x98>
24017ac2:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017ac6:	ed94 6a01 	vldr	s12, [r4, #4]
24017aca:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24017ace:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017ad2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24017b00 <tSimpleLivingString3_setFreq+0x90>
24017ad6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24017ada:	ee27 7b06 	vmul.f64	d7, d7, d6
24017ade:	ee80 0b07 	vdiv.f64	d0, d0, d7
24017ae2:	f001 f84d 	bl	24018b80 <exp>
24017ae6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24017aea:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24017aee:	bd10      	pop	{r4, pc}
24017af0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24017b0c <tSimpleLivingString3_setFreq+0x9c>
24017af4:	e7d9      	b.n	24017aaa <tSimpleLivingString3_setFreq+0x3a>
24017af6:	bf00      	nop
24017af8:	33333333 	.word	0x33333333
24017afc:	40133333 	.word	0x40133333
24017b00:	0a3d70a4 	.word	0x0a3d70a4
24017b04:	c01ba3d7 	.word	0xc01ba3d7
24017b08:	3d8d78c4 	.word	0x3d8d78c4
24017b0c:	4019999a 	.word	0x4019999a

24017b10 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24017b10:	6800      	ldr	r0, [r0, #0]
24017b12:	303c      	adds	r0, #60	; 0x3c
24017b14:	f7fa b8a0 	b.w	24011c58 <tOnePole_setFreq>

24017b18 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, float decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24017b18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24017b1c:	eddf 6a10 	vldr	s13, [pc, #64]	; 24017b60 <tSimpleLivingString3_setDecay+0x48>
{
24017b20:	b510      	push	{r4, lr}
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24017b22:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
24017b26:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24017b28:	ed94 6a01 	vldr	s12, [r4, #4]
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24017b2c:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
24017b30:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24017b34:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24017b38:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24017b3c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24017b58 <tSimpleLivingString3_setDecay+0x40>
24017b40:	ee27 7b06 	vmul.f64	d7, d7, d6
24017b44:	ee85 0b07 	vdiv.f64	d0, d5, d7
24017b48:	f001 f81a 	bl	24018b80 <exp>
24017b4c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24017b50:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24017b54:	bd10      	pop	{r4, pc}
24017b56:	bf00      	nop
24017b58:	52bd3c36 	.word	0x52bd3c36
24017b5c:	c01ba196 	.word	0xc01ba196
24017b60:	3d8d78c4 	.word	0x3d8d78c4

24017b64 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, float targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24017b64:	6800      	ldr	r0, [r0, #0]
24017b66:	3054      	adds	r0, #84	; 0x54
24017b68:	f7f9 bc18 	b.w	2401139c <tFeedbackLeveler_setTargetLevel>

24017b6c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, float levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24017b6c:	6800      	ldr	r0, [r0, #0]
24017b6e:	3054      	adds	r0, #84	; 0x54
24017b70:	f7f9 bbe8 	b.w	24011344 <tFeedbackLeveler_setFactor>

24017b74 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, float levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24017b74:	6800      	ldr	r0, [r0, #0]
24017b76:	3054      	adds	r0, #84	; 0x54
24017b78:	f7f9 bbe0 	b.w	2401133c <tFeedbackLeveler_setStrength>

24017b7c <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24017b7c:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
24017b7e:	6805      	ldr	r5, [r0, #0]
{
24017b80:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24017b82:	f105 0054 	add.w	r0, r5, #84	; 0x54
24017b86:	f7f9 fbe1 	bl	2401134c <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24017b8a:	622c      	str	r4, [r5, #32]
}
24017b8c:	bd38      	pop	{r3, r4, r5, pc}
24017b8e:	bf00      	nop

24017b90 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, float input, float position)
{
24017b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tSimpleLivingString3* p = *pl;
24017b92:	6806      	ldr	r6, [r0, #0]
    int length = p->waveLengthInSamples;
24017b94:	edd6 7a02 	vldr	s15, [r6, #8]
24017b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017b9c:	ee17 ca90 	vmov	ip, s15
    int pluckPoint = (int)(length * position);
24017ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017ba4:	ee67 0aa0 	vmul.f32	s1, s15, s1
24017ba8:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24017bac:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
24017bb0:	2b00      	cmp	r3, #0
24017bb2:	dd7c      	ble.n	24017cae <tSimpleLivingString3_pluck+0x11e>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
24017bb4:	459c      	cmp	ip, r3
24017bb6:	dc15      	bgt.n	24017be4 <tSimpleLivingString3_pluck+0x54>
    {
    	pluckPoint = length-1;
24017bb8:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24017bbc:	f1bc 0f00 	cmp.w	ip, #0
    	pluckPoint = length-1;
24017bc0:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
24017bc2:	dd73      	ble.n	24017cac <tSimpleLivingString3_pluck+0x11c>
    {
        float val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((float)i/(float)pluckPoint);
24017bc4:	ee07 7a90 	vmov	s15, r7
24017bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        else
        {
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017bcc:	6b72      	ldr	r2, [r6, #52]	; 0x34
24017bce:	2f00      	cmp	r7, #0
            val = input * ((float)i/(float)pluckPoint);
24017bd0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        p->delayLineU->buff[bufWritePoint] = val;
24017bd4:	6894      	ldr	r4, [r2, #8]
24017bd6:	ee86 7a86 	vdiv.f32	s14, s13, s12
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017bda:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
24017bde:	da15      	bge.n	24017c0c <tSimpleLivingString3_pluck+0x7c>
        p->delayLineU->buff[bufWritePoint] = val;
24017be0:	2300      	movs	r3, #0
24017be2:	e02d      	b.n	24017c40 <tSimpleLivingString3_pluck+0xb0>
    int remainder = length-pluckPoint;
24017be4:	ebac 0203 	sub.w	r2, ip, r3
            val = input * ((float)i/(float)pluckPoint);
24017be8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24017bec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017bf0:	6b74      	ldr	r4, [r6, #52]	; 0x34
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017bf2:	ee07 2a90 	vmov	s15, r2
24017bf6:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017bfa:	69a0      	ldr	r0, [r4, #24]
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017c00:	69e1      	ldr	r1, [r4, #28]
24017c02:	ee85 7a86 	vdiv.f32	s14, s11, s12
        p->delayLineU->buff[bufWritePoint] = val;
24017c06:	68a4      	ldr	r4, [r4, #8]
24017c08:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24017c0c:	429f      	cmp	r7, r3
24017c0e:	bfa8      	it	ge
24017c10:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
24017c12:	2300      	movs	r3, #0
24017c14:	ee20 7a07 	vmul.f32	s14, s0, s14
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017c18:	181a      	adds	r2, r3, r0
            val = input * ((float)i/(float)pluckPoint);
24017c1a:	ee07 3a90 	vmov	s15, r3
    for (int i = 0; i < length; i++)
24017c1e:	3301      	adds	r3, #1
            val = input * ((float)i/(float)pluckPoint);
24017c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = 0; i < length; i++)
24017c24:	42bb      	cmp	r3, r7
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017c26:	fbb2 f5f1 	udiv	r5, r2, r1
24017c2a:	fb01 2215 	mls	r2, r1, r5, r2
            val = input * ((float)i/(float)pluckPoint);
24017c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
        p->delayLineU->buff[bufWritePoint] = val;
24017c32:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24017c36:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24017c3a:	dded      	ble.n	24017c18 <tSimpleLivingString3_pluck+0x88>
24017c3c:	459c      	cmp	ip, r3
24017c3e:	dd19      	ble.n	24017c74 <tSimpleLivingString3_pluck+0xe4>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017c40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24017c44:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017c48:	181a      	adds	r2, r3, r0
    for (int i = 0; i < length; i++)
24017c4a:	3301      	adds	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24017c50:	eef0 7a65 	vmov.f32	s15, s11
    for (int i = 0; i < length; i++)
24017c54:	459c      	cmp	ip, r3
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017c56:	ee36 7a47 	vsub.f32	s14, s12, s14
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017c5a:	fbb2 f5f1 	udiv	r5, r2, r1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017c5e:	eee6 7a87 	vfma.f32	s15, s13, s14
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017c62:	fb01 2215 	mls	r2, r1, r5, r2
        p->delayLineU->buff[bufWritePoint] = val;
24017c66:	eb04 0282 	add.w	r2, r4, r2, lsl #2
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017c6a:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24017c6e:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24017c72:	dce7      	bgt.n	24017c44 <tSimpleLivingString3_pluck+0xb4>
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24017c74:	6bb3      	ldr	r3, [r6, #56]	; 0x38
24017c76:	e9d3 7506 	ldrd	r7, r5, [r3, #24]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24017c7a:	689e      	ldr	r6, [r3, #8]
24017c7c:	4438      	add	r0, r7
24017c7e:	eb0c 0e07 	add.w	lr, ip, r7
24017c82:	463a      	mov	r2, r7
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24017c84:	4484      	add	ip, r0
24017c86:	ebac 0302 	sub.w	r3, ip, r2
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24017c8a:	fbb3 f7f1 	udiv	r7, r3, r1
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24017c8e:	fbb2 f0f5 	udiv	r0, r2, r5
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24017c92:	fb01 3317 	mls	r3, r1, r7, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24017c96:	fb05 2010 	mls	r0, r5, r0, r2
    for (int i = 0; i < length; i++)
24017c9a:	3201      	adds	r2, #1
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24017c9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24017ca0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    for (int i = 0; i < length; i++)
24017ca4:	4596      	cmp	lr, r2
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24017ca6:	681b      	ldr	r3, [r3, #0]
24017ca8:	6003      	str	r3, [r0, #0]
    for (int i = 0; i < length; i++)
24017caa:	d1ec      	bne.n	24017c86 <tSimpleLivingString3_pluck+0xf6>
    }
}
24017cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < length; i++)
24017cae:	f1bc 0f00 	cmp.w	ip, #0
24017cb2:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
24017cb6:	ddf9      	ble.n	24017cac <tSimpleLivingString3_pluck+0x11c>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017cb8:	ee07 7a10 	vmov	s14, r7
24017cbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017cc0:	6b72      	ldr	r2, [r6, #52]	; 0x34
    	pluckPoint = 1;
24017cc2:	2301      	movs	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017cc4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017cc8:	6990      	ldr	r0, [r2, #24]
        p->delayLineU->buff[bufWritePoint] = val;
24017cca:	eeb0 7a67 	vmov.f32	s14, s15
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017cce:	69d1      	ldr	r1, [r2, #28]
24017cd0:	eec7 6a86 	vdiv.f32	s13, s15, s12
        p->delayLineU->buff[bufWritePoint] = val;
24017cd4:	6894      	ldr	r4, [r2, #8]
            val = input * ((float)i/(float)pluckPoint);
24017cd6:	eeb0 6a67 	vmov.f32	s12, s15
24017cda:	e797      	b.n	24017c0c <tSimpleLivingString3_pluck+0x7c>

24017cdc <tSimpleLivingString3_tick>:

float   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, float input)
{
24017cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
24017ce0:	6804      	ldr	r4, [r0, #0]
{
24017ce2:	ed2d 8b02 	vpush	{d8}

    //p->changeGainCompensator = 1.0f;
    float wl = tExpSmooth_tick(&p->wlSmooth);
24017ce6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //float changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
24017cea:	f104 0634 	add.w	r6, r4, #52	; 0x34
    float wl = tExpSmooth_tick(&p->wlSmooth);
24017cee:	f7f9 ff17 	bl	24011b20 <tExpSmooth_tick>
24017cf2:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24017cf6:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
24017cfa:	4630      	mov	r0, r6
24017cfc:	f7f8 ffe8 	bl	24010cd0 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24017d00:	eeb0 0a48 	vmov.f32	s0, s16
24017d04:	4638      	mov	r0, r7
24017d06:	f7f8 ffe3 	bl	24010cd0 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
24017d0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24017d0c:	2b00      	cmp	r3, #0
24017d0e:	dd3c      	ble.n	24017d8a <tSimpleLivingString3_tick+0xae>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24017d10:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017d14:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
24017d18:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24017d1a:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
24017d1c:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24017d1e:	f7f8 ffab 	bl	24010c78 <tLinearDelay_tickOut>
24017d22:	4648      	mov	r0, r9
24017d24:	f7f9 ffb6 	bl	24011c94 <tOnePole_tick>
24017d28:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017d2c:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24017d2e:	ee20 0a27 	vmul.f32	s0, s0, s15
24017d32:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017d36:	f7f9 fb0d 	bl	24011354 <tFeedbackLeveler_tick>
24017d3a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017d3e:	eef0 0a40 	vmov.f32	s1, s0
24017d42:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017d46:	f01c f80b 	bl	24033d60 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24017d4a:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017d4c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24017d50:	f7f8 ff92 	bl	24010c78 <tLinearDelay_tickOut>
24017d54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017d58:	eef0 0a40 	vmov.f32	s1, s0
24017d5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017d60:	f01b fffe 	bl	24033d60 <__LEAF_clip_veneer>
24017d64:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
24017d68:	4630      	mov	r0, r6
24017d6a:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24017d6e:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
24017d72:	f7f8 ff6b 	bl	24010c4c <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24017d76:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
24017d7a:	4638      	mov	r0, r7
24017d7c:	eeb1 0a40 	vneg.f32	s0, s0
24017d80:	f7f8 ff64 	bl	24010c4c <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
24017d84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24017d86:	42ab      	cmp	r3, r5
24017d88:	dcc7      	bgt.n	24017d1a <tSimpleLivingString3_tick+0x3e>
    }
    
    //calculate pickup point
    float point = wl * p->pickupPoint;
    float reversePoint = wl * (1.0f - p->pickupPoint);
24017d8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float point = wl * p->pickupPoint;
24017d8e:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    float floatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24017d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24017d94:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    float point = wl * p->pickupPoint;
24017d98:	ee27 6a08 	vmul.f32	s12, s14, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24017d9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    float reversePoint = wl * (1.0f - p->pickupPoint);
24017d9e:	ee37 7ac7 	vsub.f32	s14, s15, s14
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24017da2:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24017da4:	fef8 6a46 	vrinta.f32	s13, s12
24017da8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    float reversePoint = wl * (1.0f - p->pickupPoint);
24017dac:	ee27 0a08 	vmul.f32	s0, s14, s16
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24017db0:	ee77 5ac6 	vsub.f32	s11, s15, s12
    whichPoint = (int32_t)roundf(reversePoint);
24017db4:	feb8 7a40 	vrinta.f32	s14, s0
24017db8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017dbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24017dc0:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24017dc4:	ee16 3a90 	vmov	r3, s13
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24017dc8:	ee17 0a10 	vmov	r0, s14
    float floatPart = point - whichPoint;
24017dcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24017dd0:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24017dd2:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24017dd4:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24017dd8:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24017dda:	fb07 2216 	mls	r2, r7, r6, r2
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24017dde:	ee75 5aa6 	vadd.f32	s11, s11, s13
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24017de2:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24017de4:	69c8      	ldr	r0, [r1, #28]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017de6:	6889      	ldr	r1, [r1, #8]
    float floatPart = point - whichPoint;
24017de8:	ee36 6a66 	vsub.f32	s12, s12, s13
    floatPart = reversePoint - whichPoint;
24017dec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24017df0:	fb93 f6f0 	sdiv	r6, r3, r0
24017df4:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24017df8:	1c56      	adds	r6, r2, #1
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24017dfa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
    floatPart = reversePoint - whichPoint;
24017e02:	ee70 6a66 	vsub.f32	s13, s0, s13
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24017e06:	ed92 7a00 	vldr	s14, [r2]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017e0a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24017e0e:	3301      	adds	r3, #1
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017e10:	ed92 0a00 	vldr	s0, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24017e14:	fb96 f2f7 	sdiv	r2, r6, r7
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017e18:	ee27 0a80 	vmul.f32	s0, s15, s0
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24017e1c:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24017e20:	68a2      	ldr	r2, [r4, #8]
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
24017e22:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24017e26:	eea7 0a25 	vfma.f32	s0, s14, s11
24017e2a:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24017e2e:	fb93 f5f0 	sdiv	r5, r3, r0
24017e32:	eea7 0a86 	vfma.f32	s0, s15, s12
24017e36:	fb00 3315 	mls	r3, r0, r5, r3
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017e3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24017e3e:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
24017e42:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24017e44:	eea7 0aa6 	vfma.f32	s0, s15, s13
    //float stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24017e48:	ecbd 8b02 	vpop	{d8}
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24017e4c:	ee20 0a05 	vmul.f32	s0, s0, s10
24017e50:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
}
24017e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

24017e58 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, float pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
    p->pickupPoint = pickupPoint;
24017e58:	6803      	ldr	r3, [r0, #0]
24017e5a:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24017e5e:	4770      	bx	lr

24017e60 <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
24017e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tMempool* m = *mp;
24017e64:	f8d2 8000 	ldr.w	r8, [r2]
{
24017e68:	4606      	mov	r6, r0
24017e6a:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24017e6c:	2070      	movs	r0, #112	; 0x70
24017e6e:	4641      	mov	r1, r8
{
24017e70:	4615      	mov	r5, r2
24017e72:	ed2d 8b0c 	vpush	{d8-d13}
24017e76:	b083      	sub	sp, #12
24017e78:	eef0 ca61 	vmov.f32	s25, s3
24017e7c:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
24017e80:	ed9f da99 	vldr	s26, [pc, #612]	; 240180e8 <tLivingString2_initToPool+0x288>
{
24017e84:	eef0 9a62 	vmov.f32	s19, s5
24017e88:	eef0 aa63 	vmov.f32	s21, s7
24017e8c:	eef0 ba44 	vmov.f32	s23, s8
24017e90:	eeb0 ca64 	vmov.f32	s24, s9
24017e94:	eeb0 ba43 	vmov.f32	s22, s6
24017e98:	eef0 8a41 	vmov.f32	s17, s2
24017e9c:	eeb0 aa40 	vmov.f32	s20, s0
24017ea0:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24017ea4:	f7fb fdee 	bl	24013a84 <mpool_alloc>
    p->sampleRate = leaf->sampleRate;
24017ea8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24017eac:	4604      	mov	r4, r0
24017eae:	6030      	str	r0, [r6, #0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017eb0:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
24017eb2:	edd3 7a00 	vldr	s15, [r3]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017eb6:	305c      	adds	r0, #92	; 0x5c
    p->mempool = m;
24017eb8:	f840 8c5c 	str.w	r8, [r0, #-92]
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24017ebc:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017ec0:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->curr=0.0f;
24017ec4:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    p->sampleRate = leaf->sampleRate;
24017ec8:	edc0 7a04 	vstr	s15, [r0, #16]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24017ecc:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017ed0:	eddf 0a86 	vldr	s1, [pc, #536]	; 240180ec <tLivingString2_initToPool+0x28c>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24017ed4:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017ed8:	f7f9 fdf2 	bl	24011ac0 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
24017edc:	eddf 7a84 	vldr	s15, [pc, #528]	; 240180f0 <tLivingString2_initToPool+0x290>
24017ee0:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
24017ee2:	f104 0934 	add.w	r9, r4, #52	; 0x34
24017ee6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
24017eea:	feca 7a67 	vminnm.f32	s15, s20, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24017eee:	305c      	adds	r0, #92	; 0x5c
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24017ef0:	f104 0838 	add.w	r8, r4, #56	; 0x38
24017ef4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
24017ef8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24017efc:	ed90 7a04 	vldr	s14, [r0, #16]
24017f00:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
24017f04:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24017f08:	ee30 0a6d 	vsub.f32	s0, s0, s27
24017f0c:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24017f10:	f7f9 fe02 	bl	24011b18 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24017f14:	eddf 0a77 	vldr	s1, [pc, #476]	; 240180f4 <tLivingString2_initToPool+0x294>
24017f18:	eeb0 0a49 	vmov.f32	s0, s18
24017f1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
24017f20:	4629      	mov	r1, r5
    p->freq = freq;
24017f22:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
24017f26:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24017f2a:	edcd 0a00 	vstr	s1, [sp]
24017f2e:	f7f9 fdc7 	bl	24011ac0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
24017f32:	eeb0 0a68 	vmov.f32	s0, s17
24017f36:	4629      	mov	r1, r5
24017f38:	eddd 0a00 	vldr	s1, [sp]
24017f3c:	f104 0064 	add.w	r0, r4, #100	; 0x64
24017f40:	f7f9 fdbe 	bl	24011ac0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
24017f44:	eddd 0a00 	vldr	s1, [sp]
24017f48:	4629      	mov	r1, r5
24017f4a:	eeb0 0a6c 	vmov.f32	s0, s25
24017f4e:	f104 0068 	add.w	r0, r4, #104	; 0x68
24017f52:	f7f9 fdb5 	bl	24011ac0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24017f56:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
24017f58:	fe89 0a6d 	vminnm.f32	s0, s18, s27
24017f5c:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24017f60:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
24017f62:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24017f66:	f7f9 fdd7 	bl	24011b18 <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24017f6a:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
24017f6c:	fe88 0aed 	vminnm.f32	s0, s17, s27
24017f70:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24017f74:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
24017f76:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24017f7a:	f7f9 fdcd 	bl	24011b18 <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24017f7e:	ed94 0a02 	vldr	s0, [r4, #8]
24017f82:	462a      	mov	r2, r5
24017f84:	4658      	mov	r0, fp
24017f86:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
24017f8a:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
24017f8e:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24017f92:	f7f8 fedf 	bl	24010d54 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24017f96:	ed94 0a02 	vldr	s0, [r4, #8]
24017f9a:	462a      	mov	r2, r5
24017f9c:	4650      	mov	r0, sl
24017f9e:	f44f 6116 	mov.w	r1, #2400	; 0x960
24017fa2:	f7f8 fed7 	bl	24010d54 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
24017fa6:	ed94 0a02 	vldr	s0, [r4, #8]
24017faa:	462a      	mov	r2, r5
24017fac:	4648      	mov	r0, r9
24017fae:	f44f 6116 	mov.w	r1, #2400	; 0x960
24017fb2:	f7f8 fecf 	bl	24010d54 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24017fb6:	462a      	mov	r2, r5
24017fb8:	ed94 0a02 	vldr	s0, [r4, #8]
24017fbc:	f44f 6116 	mov.w	r1, #2400	; 0x960
24017fc0:	4640      	mov	r0, r8
24017fc2:	f7f8 fec7 	bl	24010d54 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
24017fc6:	4658      	mov	r0, fp
24017fc8:	f7f8 ff42 	bl	24010e50 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
24017fcc:	4650      	mov	r0, sl
24017fce:	f7f8 ff3f 	bl	24010e50 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
24017fd2:	4648      	mov	r0, r9
24017fd4:	f7f8 ff3c 	bl	24010e50 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
24017fd8:	4640      	mov	r0, r8
24017fda:	f7f8 ff39 	bl	24010e50 <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
24017fde:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24017fe2:	4629      	mov	r1, r5
    p->brightness = brightness;
24017fe4:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
24017fe8:	f7f9 fe8a 	bl	24011d00 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
24017fec:	4629      	mov	r1, r5
24017fee:	f104 0040 	add.w	r0, r4, #64	; 0x40
24017ff2:	f7f9 fe85 	bl	24011d00 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
24017ff6:	4629      	mov	r1, r5
24017ff8:	f104 0044 	add.w	r0, r4, #68	; 0x44
24017ffc:	f7f9 fe80 	bl	24011d00 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
24018000:	4629      	mov	r1, r5
24018002:	f104 0048 	add.w	r0, r4, #72	; 0x48
24018006:	f7f9 fe7b 	bl	24011d00 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
2401800a:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
2401800e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
24018012:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
24018014:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
24018018:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
2401801c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
24018020:	ee05 6b06 	vmla.f64	d6, d5, d6
    float h1=(1.0 - brightness) * 0.25f;
24018024:	ee37 7b45 	vsub.f64	d7, d7, d5
24018028:	ee27 7b00 	vmul.f64	d7, d7, d0
    float h0=(1.0 + brightness) * 0.5f;
2401802c:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
24018030:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24018034:	edcd 0a00 	vstr	s1, [sp]
24018038:	eeb0 0a41 	vmov.f32	s0, s2
2401803c:	ed8d 1a01 	vstr	s2, [sp, #4]
24018040:	f7f9 fe8e 	bl	24011d60 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
24018044:	ed9d 1a01 	vldr	s2, [sp, #4]
24018048:	eddd 0a00 	vldr	s1, [sp]
2401804c:	f106 0040 	add.w	r0, r6, #64	; 0x40
24018050:	eeb0 0a41 	vmov.f32	s0, s2
24018054:	ed8d 1a00 	vstr	s2, [sp]
24018058:	edcd 0a01 	vstr	s1, [sp, #4]
2401805c:	f7f9 fe80 	bl	24011d60 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
24018060:	ed9d 1a00 	vldr	s2, [sp]
24018064:	f106 0044 	add.w	r0, r6, #68	; 0x44
24018068:	eddd 0a01 	vldr	s1, [sp, #4]
2401806c:	eeb0 0a41 	vmov.f32	s0, s2
24018070:	f7f9 fe76 	bl	24011d60 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24018074:	ed9d 1a00 	vldr	s2, [sp]
24018078:	eddd 0a01 	vldr	s1, [sp, #4]
2401807c:	f106 0048 	add.w	r0, r6, #72	; 0x48
24018080:	eeb0 0a41 	vmov.f32	s0, s2
24018084:	f7f9 fe6c 	bl	24011d60 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
24018088:	4629      	mov	r1, r5
2401808a:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401808e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24018092:	f7f9 ffd7 	bl	24012044 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
24018096:	4629      	mov	r1, r5
24018098:	f104 004c 	add.w	r0, r4, #76	; 0x4c
2401809c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
240180a0:	f7f9 ffd0 	bl	24012044 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
240180a4:	eeb0 1a4c 	vmov.f32	s2, s24
240180a8:	eef0 0a6b 	vmov.f32	s1, s23
240180ac:	f104 0054 	add.w	r0, r4, #84	; 0x54
240180b0:	eeb0 0a6a 	vmov.f32	s0, s21
240180b4:	462a      	mov	r2, r5
240180b6:	4639      	mov	r1, r7
    p->decay=decay;
240180b8:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
240180bc:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
240180c0:	f7f9 f914 	bl	240112ec <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
240180c4:	eeb0 1a4c 	vmov.f32	s2, s24
240180c8:	eef0 0a6b 	vmov.f32	s1, s23
240180cc:	462a      	mov	r2, r5
240180ce:	eeb0 0a6a 	vmov.f32	s0, s21
240180d2:	4639      	mov	r1, r7
240180d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
240180d8:	f7f9 f908 	bl	240112ec <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
240180dc:	6227      	str	r7, [r4, #32]
}
240180de:	b003      	add	sp, #12
240180e0:	ecbd 8b0c 	vpop	{d8-d13}
240180e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240180e8:	00000000 	.word	0x00000000
240180ec:	3dcccccd 	.word	0x3dcccccd
240180f0:	461c4000 	.word	0x461c4000
240180f4:	3c23d70a 	.word	0x3c23d70a

240180f8 <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
240180f8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
240180fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24018130 <tLivingString2_setFreq+0x38>
24018100:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24018102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018106:	fe80 0a66 	vminnm.f32	s0, s0, s13
2401810a:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
2401810e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24018112:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24018116:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401811a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
2401811e:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24018122:	ee30 0a47 	vsub.f32	s0, s0, s14
24018126:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401812a:	f7f9 bcf5 	b.w	24011b18 <tExpSmooth_setDest>
2401812e:	bf00      	nop
24018130:	461c4000 	.word	0x461c4000

24018134 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
24018134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018138:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
2401813a:	eddf 7a06 	vldr	s15, [pc, #24]	; 24018154 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401813e:	f103 0060 	add.w	r0, r3, #96	; 0x60
24018142:	fe80 0a47 	vminnm.f32	s0, s0, s14
24018146:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
2401814a:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401814e:	f7f9 bce3 	b.w	24011b18 <tExpSmooth_setDest>
24018152:	bf00      	nop
24018154:	00000000 	.word	0x00000000

24018158 <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
24018158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401815c:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
2401815e:	eddf 7a06 	vldr	s15, [pc, #24]	; 24018178 <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24018162:	f103 0064 	add.w	r0, r3, #100	; 0x64
24018166:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401816a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
2401816e:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24018172:	f7f9 bcd1 	b.w	24011b18 <tExpSmooth_setDest>
24018176:	bf00      	nop
24018178:	00000000 	.word	0x00000000

2401817c <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
2401817c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018180:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
24018182:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401819c <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24018186:	f103 0068 	add.w	r0, r3, #104	; 0x68
2401818a:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401818e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
24018192:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24018196:	f7f9 bcbf 	b.w	24011b18 <tExpSmooth_setDest>
2401819a:	bf00      	nop
2401819c:	00000000 	.word	0x00000000

240181a0 <tLivingString2_setPrepIndex>:
    if (prepIndex<0.f) prepIndex=0.f;
240181a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
240181a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 240181b8 <tLivingString2_setPrepIndex+0x18>
240181a8:	6803      	ldr	r3, [r0, #0]
240181aa:	fe80 0a47 	vminnm.f32	s0, s0, s14
240181ae:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
240181b2:	ed83 0a06 	vstr	s0, [r3, #24]
}
240181b6:	4770      	bx	lr
240181b8:	00000000 	.word	0x00000000

240181bc <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
240181bc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240181c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
240181c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
240181c8:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
240181cc:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
240181d0:	ee37 7b40 	vsub.f64	d7, d7, d0
{
240181d4:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
240181d6:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
240181da:	6804      	ldr	r4, [r0, #0]
{
240181dc:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240181de:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
240181e2:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
240181e6:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240181ea:	edcd 0a00 	vstr	s1, [sp]
240181ee:	eeb0 0a41 	vmov.f32	s0, s2
240181f2:	ed8d 1a01 	vstr	s2, [sp, #4]
240181f6:	f7f9 fdb3 	bl	24011d60 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
240181fa:	ed9d 1a01 	vldr	s2, [sp, #4]
240181fe:	eddd 0a00 	vldr	s1, [sp]
24018202:	f104 0040 	add.w	r0, r4, #64	; 0x40
24018206:	eeb0 0a41 	vmov.f32	s0, s2
2401820a:	ed8d 1a00 	vstr	s2, [sp]
2401820e:	edcd 0a01 	vstr	s1, [sp, #4]
24018212:	f7f9 fda5 	bl	24011d60 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
24018216:	ed9d 1a00 	vldr	s2, [sp]
2401821a:	f104 0044 	add.w	r0, r4, #68	; 0x44
2401821e:	eddd 0a01 	vldr	s1, [sp, #4]
24018222:	eeb0 0a41 	vmov.f32	s0, s2
24018226:	f7f9 fd9b 	bl	24011d60 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
2401822a:	ed9d 1a00 	vldr	s2, [sp]
2401822e:	eddd 0a01 	vldr	s1, [sp, #4]
24018232:	f104 0048 	add.w	r0, r4, #72	; 0x48
24018236:	eeb0 0a41 	vmov.f32	s0, s2
}
2401823a:	b002      	add	sp, #8
2401823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24018240:	f7f9 bd8e 	b.w	24011d60 <tTwoZero_setCoefficients>

24018244 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
24018244:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24018246:	6804      	ldr	r4, [r0, #0]
{
24018248:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
2401824c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24018250:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2401826c <tLivingString2_setDecay+0x28>
24018254:	ed94 7a01 	vldr	s14, [r4, #4]
24018258:	ee67 7a87 	vmul.f32	s15, s15, s14
2401825c:	eec0 0aa7 	vdiv.f32	s1, s1, s15
24018260:	f000 ffca 	bl	240191f8 <powf>
24018264:	ed84 0a07 	vstr	s0, [r4, #28]
}
24018268:	bd10      	pop	{r4, pc}
2401826a:	bf00      	nop
2401826c:	3a83126f 	.word	0x3a83126f

24018270 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
24018270:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24018272:	6804      	ldr	r4, [r0, #0]
{
24018274:	ed2d 8b02 	vpush	{d8}
24018278:	eeb0 8a40 	vmov.f32	s16, s0
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
2401827c:	f104 0054 	add.w	r0, r4, #84	; 0x54
24018280:	f7f9 f88c 	bl	2401139c <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24018284:	f104 0058 	add.w	r0, r4, #88	; 0x58
24018288:	eeb0 0a48 	vmov.f32	s0, s16
}
2401828c:	ecbd 8b02 	vpop	{d8}
24018290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24018294:	f7f9 b882 	b.w	2401139c <tFeedbackLeveler_setTargetLevel>

24018298 <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
24018298:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
2401829a:	6804      	ldr	r4, [r0, #0]
{
2401829c:	ed2d 8b02 	vpush	{d8}
240182a0:	eeb0 8a40 	vmov.f32	s16, s0
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
240182a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
240182a8:	f7f9 f84c 	bl	24011344 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
240182ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
240182b0:	eeb0 0a48 	vmov.f32	s0, s16
}
240182b4:	ecbd 8b02 	vpop	{d8}
240182b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
240182bc:	f7f9 b842 	b.w	24011344 <tFeedbackLeveler_setFactor>

240182c0 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
240182c0:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
240182c2:	6804      	ldr	r4, [r0, #0]
{
240182c4:	ed2d 8b02 	vpush	{d8}
240182c8:	eeb0 8a40 	vmov.f32	s16, s0
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
240182cc:	f104 0054 	add.w	r0, r4, #84	; 0x54
240182d0:	f7f9 f834 	bl	2401133c <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
240182d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
240182d8:	eeb0 0a48 	vmov.f32	s0, s16
}
240182dc:	ecbd 8b02 	vpop	{d8}
240182e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
240182e4:	f7f9 b82a 	b.w	2401133c <tFeedbackLeveler_setStrength>

240182e8 <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
240182e8:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
240182ea:	6805      	ldr	r5, [r0, #0]
{
240182ec:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
240182ee:	f105 0054 	add.w	r0, r5, #84	; 0x54
240182f2:	f7f9 f82b 	bl	2401134c <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
240182f6:	4621      	mov	r1, r4
240182f8:	f105 0058 	add.w	r0, r5, #88	; 0x58
240182fc:	f7f9 f826 	bl	2401134c <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24018300:	622c      	str	r4, [r5, #32]
}
24018302:	bd38      	pop	{r3, r4, r5, pc}

24018304 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
24018304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
24018308:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
2401830c:	6804      	ldr	r4, [r0, #0]
{
2401830e:	ed2d 8b0a 	vpush	{d8-d12}
    // from prepPos upwards=forwards
    float wLen=tExpSmooth_tick(&p->wlSmooth);
24018312:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
24018316:	ee60 aa27 	vmul.f32	s21, s0, s15
    float wLen=tExpSmooth_tick(&p->wlSmooth);
2401831a:	f7f9 fc01 	bl	24011b20 <tExpSmooth_tick>

    float pickP=tExpSmooth_tick(&p->ppSmooth);
2401831e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
24018322:	eef0 8a40 	vmov.f32	s17, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
24018326:	f7f9 fbfb 	bl	24011b20 <tExpSmooth_tick>
2401832a:	eeb0 8a40 	vmov.f32	s16, s0

    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
2401832e:	f104 0064 	add.w	r0, r4, #100	; 0x64
24018332:	f7f9 fbf5 	bl	24011b20 <tExpSmooth_tick>
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
24018336:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
2401833a:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
2401833e:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float upLen=(1.0f-prepP)*wLen;
24018342:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    float lowLen=prepP*wLen;
24018346:	ee28 9a80 	vmul.f32	s18, s17, s0
    if (pickP > prepP)
2401834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float upLen=(1.0f-prepP)*wLen;
2401834e:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
24018352:	f340 8170 	ble.w	24018636 <tLivingString2_tick+0x332>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
24018356:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
2401835a:	f104 0930 	add.w	r9, r4, #48	; 0x30
2401835e:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
24018362:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24018366:	4648      	mov	r0, r9
    {
         float fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24018368:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
2401836c:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24018370:	f104 0638 	add.w	r6, r4, #56	; 0x38
24018374:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24018378:	eebc bae6 	vcvt.u32.f32	s22, s13
        float pickPFloat = fullPickPoint - pickPInt;
2401837c:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24018380:	ee1b 1a10 	vmov	r1, s22
24018384:	ee77 ba2b 	vadd.f32	s23, s14, s23
        float pickPFloat = fullPickPoint - pickPInt;
24018388:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
2401838c:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24018390:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
24018394:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24018398:	eeb0 0a6b 	vmov.f32	s0, s23
2401839c:	f7f8 fdd8 	bl	24010f50 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
240183a0:	ee1b 1a10 	vmov	r1, s22
240183a4:	4648      	mov	r0, r9
240183a6:	eeb0 0a6a 	vmov.f32	s0, s21
240183aa:	3101      	adds	r1, #1
240183ac:	f7f8 fdd0 	bl	24010f50 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
240183b0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
240183b4:	4640      	mov	r0, r8
240183b6:	eeb0 0a6b 	vmov.f32	s0, s23
240183ba:	ee17 1a90 	vmov	r1, s15
240183be:	f7f8 fdc7 	bl	24010f50 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint32_t) (upLen - pickPInt - 1));
240183c2:	ee38 7a6c 	vsub.f32	s14, s16, s25
240183c6:	eeb0 0a6a 	vmov.f32	s0, s21
240183ca:	4640      	mov	r0, r8
240183cc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240183d0:	ee17 1a90 	vmov	r1, s15
240183d4:	f7f8 fdbc 	bl	24010f50 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
240183d8:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240183da:	f104 0554 	add.w	r5, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
240183de:	f7f8 fd51 	bl	24010e84 <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
240183e2:	4648      	mov	r0, r9
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
240183e4:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
240183e8:	f7f8 fd4c 	bl	24010e84 <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
240183ec:	4640      	mov	r0, r8
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
240183ee:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
240183f2:	f7f8 fd47 	bl	24010e84 <tHermiteDelay_tickOut>
240183f6:	eeb0 ba40 	vmov.f32	s22, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
240183fa:	4630      	mov	r0, r6
240183fc:	f7f8 fd42 	bl	24010e84 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24018400:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
24018404:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24018408:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401840c:	f01b fca8 	bl	24033d60 <__LEAF_clip_veneer>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24018410:	eef0 0a4b 	vmov.f32	s1, s22
24018414:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24018418:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
2401841c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24018420:	f01b fc9e 	bl	24033d60 <__LEAF_clip_veneer>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24018424:	eef0 0a48 	vmov.f32	s1, s16
24018428:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
2401842c:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24018430:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24018434:	f01b fc94 	bl	24033d60 <__LEAF_clip_veneer>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24018438:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
2401843c:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24018440:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24018444:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24018448:	f01b fc8a 	bl	24033d60 <__LEAF_clip_veneer>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401844c:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401844e:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24018452:	2b00      	cmp	r3, #0
24018454:	f040 80ec 	bne.w	24018630 <tLivingString2_tick+0x32c>
24018458:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
2401845c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24018460:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24018464:	eeb0 0a48 	vmov.f32	s0, s16
24018468:	f7f9 fc5e 	bl	24011d28 <tTwoZero_tick>
2401846c:	f104 0050 	add.w	r0, r4, #80	; 0x50
24018470:	f7f9 fe14 	bl	2401209c <tHighpass_tick>
24018474:	4628      	mov	r0, r5
24018476:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
2401847a:	f104 0558 	add.w	r5, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401847e:	f7f8 ff69 	bl	24011354 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24018482:	eeb0 1a6a 	vmov.f32	s2, s21
24018486:	eef1 0a40 	vneg.f32	s1, s0
2401848a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401848e:	f01b fc67 	bl	24033d60 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24018492:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24018494:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24018498:	f7f8 fce4 	bl	24010e64 <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
2401849c:	f104 0048 	add.w	r0, r4, #72	; 0x48
240184a0:	eeb0 0a4b 	vmov.f32	s0, s22
240184a4:	f7f9 fc40 	bl	24011d28 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
240184a8:	eeb0 1a6a 	vmov.f32	s2, s21
240184ac:	eef1 0a40 	vneg.f32	s1, s0
240184b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240184b4:	f01b fc54 	bl	24033d60 <__LEAF_clip_veneer>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240184b8:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
240184bc:	eeb0 7a40 	vmov.f32	s14, s0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240184c0:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
240184c4:	eeb0 1a6a 	vmov.f32	s2, s21
240184c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240184cc:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
240184d0:	eee7 0a87 	vfma.f32	s1, s15, s14
240184d4:	f01b fc44 	bl	24033d60 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
240184d8:	4630      	mov	r0, r6
240184da:	f7f8 fcc3 	bl	24010e64 <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240184de:	6a23      	ldr	r3, [r4, #32]
240184e0:	b90b      	cbnz	r3, 240184e6 <tLivingString2_tick+0x1e2>
240184e2:	edd4 aa07 	vldr	s21, [r4, #28]
240184e6:	eeb0 0a4c 	vmov.f32	s0, s24
240184ea:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
240184ee:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240184f2:	f7f9 fc19 	bl	24011d28 <tTwoZero_tick>
240184f6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240184fa:	f7f9 fdcf 	bl	2401209c <tHighpass_tick>
240184fe:	4628      	mov	r0, r5
24018500:	ee20 0a2a 	vmul.f32	s0, s0, s21
24018504:	f7f8 ff26 	bl	24011354 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
24018508:	eeb0 1a4c 	vmov.f32	s2, s24
2401850c:	eef1 0a40 	vneg.f32	s1, s0
24018510:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24018514:	f01b fc24 	bl	24033d60 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
24018518:	4638      	mov	r0, r7
2401851a:	f7f8 fca3 	bl	24010e64 <tHermiteDelay_tickIn>
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
2401851e:	f104 0044 	add.w	r0, r4, #68	; 0x44
24018522:	eeb0 0a6b 	vmov.f32	s0, s23
24018526:	f7f9 fbff 	bl	24011d28 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
2401852a:	eeb0 1a4c 	vmov.f32	s2, s24
2401852e:	eef1 0a40 	vneg.f32	s1, s0
24018532:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24018536:	f01b fc13 	bl	24033d60 <__LEAF_clip_veneer>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401853a:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
2401853e:	eeb0 7a40 	vmov.f32	s14, s0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24018542:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24018546:	eeb0 1a4c 	vmov.f32	s2, s24
2401854a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401854e:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24018552:	eee7 0a87 	vfma.f32	s1, s15, s14
24018556:	f01b fc03 	bl	24033d60 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
2401855a:	4648      	mov	r0, r9
2401855c:	f7f8 fc82 	bl	24010e64 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
24018560:	eeb0 0a49 	vmov.f32	s0, s18
24018564:	4638      	mov	r0, r7
24018566:	f7f8 fcb7 	bl	24010ed8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
2401856a:	eeb0 0a49 	vmov.f32	s0, s18
2401856e:	4630      	mov	r0, r6
24018570:	f7f8 fcb2 	bl	24010ed8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
24018574:	eeb0 0a69 	vmov.f32	s0, s19
24018578:	4648      	mov	r0, r9
2401857a:	f7f8 fcad 	bl	24010ed8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
2401857e:	eeb0 0a69 	vmov.f32	s0, s19
24018582:	4640      	mov	r0, r8
24018584:	f7f8 fca8 	bl	24010ed8 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
24018588:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401858c:	f7f9 fac8 	bl	24011b20 <tExpSmooth_tick>
    if (pupos < 0.9999f)
24018590:	eddf 7a66 	vldr	s15, [pc, #408]	; 2401872c <tLivingString2_tick+0x428>
    float pupos = tExpSmooth_tick(&p->puSmooth);
24018594:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
24018598:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401859c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185a0:	d53e      	bpl.n	24018620 <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
240185a2:	eeb4 aac0 	vcmpe.f32	s20, s0
240185a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185aa:	f140 8082 	bpl.w	240186b2 <tLivingString2_tick+0x3ae>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
240185ae:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
240185b2:	4648      	mov	r0, r9
240185b4:	ee39 9a0c 	vadd.f32	s18, s18, s24
            float fullPUPoint =  ((pupos*wLen) - lowLen);
240185b8:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
240185bc:	eea8 9aea 	vfms.f32	s18, s17, s21
240185c0:	eebc aac8 	vcvt.u32.f32	s20, s16
            float PUPFloat = fullPUPoint - PUPInt;
240185c4:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
240185c8:	ee1a 1a10 	vmov	r1, s20
240185cc:	f7f8 fcb4 	bl	24010f38 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
240185d0:	ee1a 1a10 	vmov	r1, s20
240185d4:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
240185d6:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
240185da:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
240185de:	3101      	adds	r1, #1
240185e0:	f7f8 fcaa 	bl	24010f38 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
240185e4:	4640      	mov	r0, r8
            float PUPFloat = fullPUPoint - PUPInt;
240185e6:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
240185ea:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
240185ee:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
240185f2:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
240185f6:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
240185fa:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
240185fe:	f7f8 fc9b 	bl	24010f38 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
24018602:	eefc 7ae9 	vcvt.u32.f32	s15, s19
24018606:	4640      	mov	r0, r8
24018608:	ee3a aa00 	vadd.f32	s20, s20, s0
2401860c:	ee17 1a90 	vmov	r1, s15
24018610:	f7f8 fc92 	bl	24010f38 <tHermiteDelay_tapOut>
24018614:	ee38 8a00 	vadd.f32	s16, s16, s0
24018618:	ee28 8a2b 	vmul.f32	s16, s16, s23
2401861c:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
24018620:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24018624:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24018628:	ecbd 8b0a 	vpop	{d8-d12}
2401862c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24018630:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
24018634:	e712      	b.n	2401845c <tLivingString2_tick+0x158>
         float fullPickPoint =  pickP * wLen;
24018636:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
2401863a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
2401863e:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24018642:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24018646:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
24018648:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
2401864c:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24018650:	ee7c bac8 	vsub.f32	s23, s25, s16
        float pickPFloat = fullPickPoint - pickPInt;
24018654:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24018658:	ee1c 1a10 	vmov	r1, s24
2401865c:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
24018660:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24018664:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24018668:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
2401866c:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24018670:	eeb0 0a6b 	vmov.f32	s0, s23
24018674:	f7f8 fc6c 	bl	24010f50 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
24018678:	ee1c 1a10 	vmov	r1, s24
2401867c:	4638      	mov	r0, r7
2401867e:	eeb0 0a48 	vmov.f32	s0, s16
24018682:	3101      	adds	r1, #1
24018684:	f7f8 fc64 	bl	24010f50 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24018688:	eefc 7acb 	vcvt.u32.f32	s15, s22
2401868c:	4630      	mov	r0, r6
2401868e:	eeb0 0a6b 	vmov.f32	s0, s23
24018692:	ee17 1a90 	vmov	r1, s15
24018696:	f7f8 fc5b 	bl	24010f50 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint32_t) (lowLen - pickPInt - 1));
2401869a:	ee7b 7a6c 	vsub.f32	s15, s22, s25
2401869e:	eeb0 0a48 	vmov.f32	s0, s16
240186a2:	4630      	mov	r0, r6
240186a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240186a8:	ee17 1a90 	vmov	r1, s15
240186ac:	f7f8 fc50 	bl	24010f50 <tHermiteDelay_addTo>
240186b0:	e692      	b.n	240183d8 <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
240186b2:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
240186b6:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
240186b8:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
240186bc:	ee3c aa68 	vsub.f32	s20, s24, s17
            float PUPFloat = fullPUPoint - PUPInt;
240186c0:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
240186c4:	ee19 1a90 	vmov	r1, s19
240186c8:	f7f8 fc36 	bl	24010f38 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
240186cc:	ee19 1a90 	vmov	r1, s19
240186d0:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
240186d2:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
240186d6:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
240186da:	3101      	adds	r1, #1
240186dc:	f7f8 fc2c 	bl	24010f38 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
240186e0:	4630      	mov	r0, r6
            float PUPFloat = fullPUPoint - PUPInt;
240186e2:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
240186e6:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
240186ea:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
240186ee:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
240186f2:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
240186f6:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
240186fa:	f7f8 fc1d 	bl	24010f38 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
240186fe:	eefc 7ac9 	vcvt.u32.f32	s15, s18
24018702:	4630      	mov	r0, r6
24018704:	ee79 9a80 	vadd.f32	s19, s19, s0
24018708:	ee17 1a90 	vmov	r1, s15
2401870c:	f7f8 fc14 	bl	24010f38 <tHermiteDelay_tapOut>
24018710:	ee38 8a00 	vadd.f32	s16, s16, s0
24018714:	ee28 8a28 	vmul.f32	s16, s16, s17
24018718:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
2401871c:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24018720:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24018724:	ecbd 8b0a 	vpop	{d8-d12}
24018728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2401872c:	3f7ff972 	.word	0x3f7ff972

24018730 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24018730:	4770      	bx	lr
24018732:	bf00      	nop

24018734 <LEAF_init>:
{
24018734:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
24018736:	6200      	str	r0, [r0, #32]
{
24018738:	4604      	mov	r4, r0
2401873a:	461d      	mov	r5, r3
2401873c:	ed2d 8b02 	vpush	{d8}
24018740:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24018744:	f7fb f98a 	bl	24013a5c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
24018748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
2401874c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24018780 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24018750:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24018752:	4b0c      	ldr	r3, [pc, #48]	; (24018784 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24018754:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24018758:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
2401875c:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
2401875e:	6162      	str	r2, [r4, #20]
}
24018760:	ecbd 8b02 	vpop	{d8}
        leaf->errorState[i] = 0;
24018764:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
24018768:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
2401876c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24018770:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
24018774:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24018778:	edc4 7a03 	vstr	s15, [r4, #12]
}
2401877c:	bd38      	pop	{r3, r4, r5, pc}
2401877e:	bf00      	nop
24018780:	40c90fdb 	.word	0x40c90fdb
24018784:	24018731 	.word	0x24018731

24018788 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24018788:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
2401878a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
2401878e:	2401      	movs	r4, #1
    leaf->errorCallback(leaf, whichone);
24018790:	6b83      	ldr	r3, [r0, #56]	; 0x38
    leaf->errorState[whichone] = 1;
24018792:	63d4      	str	r4, [r2, #60]	; 0x3c
}
24018794:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
24018798:	4718      	bx	r3
2401879a:	bf00      	nop

2401879c <arm_sin_f32>:
2401879c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401881c <arm_sin_f32+0x80>
240187a0:	ee20 0a27 	vmul.f32	s0, s0, s15
240187a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240187a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
240187ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240187b0:	d504      	bpl.n	240187bc <arm_sin_f32+0x20>
240187b2:	ee17 3a90 	vmov	r3, s15
240187b6:	3b01      	subs	r3, #1
240187b8:	ee07 3a90 	vmov	s15, r3
240187bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240187c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 24018820 <arm_sin_f32+0x84>
240187c4:	ee70 7a67 	vsub.f32	s15, s0, s15
240187c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
240187cc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240187d0:	ee17 3a10 	vmov	r3, s14
240187d4:	b29b      	uxth	r3, r3
240187d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240187da:	d21a      	bcs.n	24018812 <arm_sin_f32+0x76>
240187dc:	ee07 3a10 	vmov	s14, r3
240187e0:	1c59      	adds	r1, r3, #1
240187e2:	eeb8 0a47 	vcvt.f32.u32	s0, s14
240187e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
240187ea:	4a0e      	ldr	r2, [pc, #56]	; (24018824 <arm_sin_f32+0x88>)
240187ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240187f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240187f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240187f8:	ee30 0a67 	vsub.f32	s0, s0, s15
240187fc:	edd3 6a00 	vldr	s13, [r3]
24018800:	ed92 7a00 	vldr	s14, [r2]
24018804:	ee20 0a26 	vmul.f32	s0, s0, s13
24018808:	ee67 7a87 	vmul.f32	s15, s15, s14
2401880c:	ee30 0a27 	vadd.f32	s0, s0, s15
24018810:	4770      	bx	lr
24018812:	ee77 7ae6 	vsub.f32	s15, s15, s13
24018816:	2101      	movs	r1, #1
24018818:	2300      	movs	r3, #0
2401881a:	e7e6      	b.n	240187ea <arm_sin_f32+0x4e>
2401881c:	3e22f983 	.word	0x3e22f983
24018820:	44000000 	.word	0x44000000
24018824:	2403210c 	.word	0x2403210c

24018828 <__errno>:
24018828:	4b01      	ldr	r3, [pc, #4]	; (24018830 <__errno+0x8>)
2401882a:	6818      	ldr	r0, [r3, #0]
2401882c:	4770      	bx	lr
2401882e:	bf00      	nop
24018830:	200007e4 	.word	0x200007e4

24018834 <__libc_init_array>:
24018834:	b570      	push	{r4, r5, r6, lr}
24018836:	4d0d      	ldr	r5, [pc, #52]	; (2401886c <__libc_init_array+0x38>)
24018838:	4c0d      	ldr	r4, [pc, #52]	; (24018870 <__libc_init_array+0x3c>)
2401883a:	1b64      	subs	r4, r4, r5
2401883c:	10a4      	asrs	r4, r4, #2
2401883e:	2600      	movs	r6, #0
24018840:	42a6      	cmp	r6, r4
24018842:	d109      	bne.n	24018858 <__libc_init_array+0x24>
24018844:	4d0b      	ldr	r5, [pc, #44]	; (24018874 <__libc_init_array+0x40>)
24018846:	4c0c      	ldr	r4, [pc, #48]	; (24018878 <__libc_init_array+0x44>)
24018848:	f01b fa7e 	bl	24033d48 <_init>
2401884c:	1b64      	subs	r4, r4, r5
2401884e:	10a4      	asrs	r4, r4, #2
24018850:	2600      	movs	r6, #0
24018852:	42a6      	cmp	r6, r4
24018854:	d105      	bne.n	24018862 <__libc_init_array+0x2e>
24018856:	bd70      	pop	{r4, r5, r6, pc}
24018858:	f855 3b04 	ldr.w	r3, [r5], #4
2401885c:	4798      	blx	r3
2401885e:	3601      	adds	r6, #1
24018860:	e7ee      	b.n	24018840 <__libc_init_array+0xc>
24018862:	f855 3b04 	ldr.w	r3, [r5], #4
24018866:	4798      	blx	r3
24018868:	3601      	adds	r6, #1
2401886a:	e7f2      	b.n	24018852 <__libc_init_array+0x1e>
2401886c:	24033db8 	.word	0x24033db8
24018870:	24033db8 	.word	0x24033db8
24018874:	24033db8 	.word	0x24033db8
24018878:	24033dbc 	.word	0x24033dbc

2401887c <__itoa>:
2401887c:	1e93      	subs	r3, r2, #2
2401887e:	2b22      	cmp	r3, #34	; 0x22
24018880:	b510      	push	{r4, lr}
24018882:	460c      	mov	r4, r1
24018884:	d904      	bls.n	24018890 <__itoa+0x14>
24018886:	2300      	movs	r3, #0
24018888:	700b      	strb	r3, [r1, #0]
2401888a:	461c      	mov	r4, r3
2401888c:	4620      	mov	r0, r4
2401888e:	bd10      	pop	{r4, pc}
24018890:	2a0a      	cmp	r2, #10
24018892:	d109      	bne.n	240188a8 <__itoa+0x2c>
24018894:	2800      	cmp	r0, #0
24018896:	da07      	bge.n	240188a8 <__itoa+0x2c>
24018898:	232d      	movs	r3, #45	; 0x2d
2401889a:	700b      	strb	r3, [r1, #0]
2401889c:	4240      	negs	r0, r0
2401889e:	2101      	movs	r1, #1
240188a0:	4421      	add	r1, r4
240188a2:	f000 f85b 	bl	2401895c <__utoa>
240188a6:	e7f1      	b.n	2401888c <__itoa+0x10>
240188a8:	2100      	movs	r1, #0
240188aa:	e7f9      	b.n	240188a0 <__itoa+0x24>

240188ac <itoa>:
240188ac:	f7ff bfe6 	b.w	2401887c <__itoa>

240188b0 <memcpy>:
240188b0:	440a      	add	r2, r1
240188b2:	4291      	cmp	r1, r2
240188b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
240188b8:	d100      	bne.n	240188bc <memcpy+0xc>
240188ba:	4770      	bx	lr
240188bc:	b510      	push	{r4, lr}
240188be:	f811 4b01 	ldrb.w	r4, [r1], #1
240188c2:	f803 4f01 	strb.w	r4, [r3, #1]!
240188c6:	4291      	cmp	r1, r2
240188c8:	d1f9      	bne.n	240188be <memcpy+0xe>
240188ca:	bd10      	pop	{r4, pc}

240188cc <memmove>:
240188cc:	4288      	cmp	r0, r1
240188ce:	b510      	push	{r4, lr}
240188d0:	eb01 0402 	add.w	r4, r1, r2
240188d4:	d902      	bls.n	240188dc <memmove+0x10>
240188d6:	4284      	cmp	r4, r0
240188d8:	4623      	mov	r3, r4
240188da:	d807      	bhi.n	240188ec <memmove+0x20>
240188dc:	1e43      	subs	r3, r0, #1
240188de:	42a1      	cmp	r1, r4
240188e0:	d008      	beq.n	240188f4 <memmove+0x28>
240188e2:	f811 2b01 	ldrb.w	r2, [r1], #1
240188e6:	f803 2f01 	strb.w	r2, [r3, #1]!
240188ea:	e7f8      	b.n	240188de <memmove+0x12>
240188ec:	4402      	add	r2, r0
240188ee:	4601      	mov	r1, r0
240188f0:	428a      	cmp	r2, r1
240188f2:	d100      	bne.n	240188f6 <memmove+0x2a>
240188f4:	bd10      	pop	{r4, pc}
240188f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
240188fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
240188fe:	e7f7      	b.n	240188f0 <memmove+0x24>

24018900 <memset>:
24018900:	4402      	add	r2, r0
24018902:	4603      	mov	r3, r0
24018904:	4293      	cmp	r3, r2
24018906:	d100      	bne.n	2401890a <memset+0xa>
24018908:	4770      	bx	lr
2401890a:	f803 1b01 	strb.w	r1, [r3], #1
2401890e:	e7f9      	b.n	24018904 <memset+0x4>

24018910 <frexpf>:
24018910:	ee10 3a10 	vmov	r3, s0
24018914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24018918:	2100      	movs	r1, #0
2401891a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401891e:	6001      	str	r1, [r0, #0]
24018920:	da19      	bge.n	24018956 <frexpf+0x46>
24018922:	b1c2      	cbz	r2, 24018956 <frexpf+0x46>
24018924:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24018928:	d10a      	bne.n	24018940 <frexpf+0x30>
2401892a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24018958 <frexpf+0x48>
2401892e:	ee60 7a27 	vmul.f32	s15, s0, s15
24018932:	f06f 0118 	mvn.w	r1, #24
24018936:	ee17 3a90 	vmov	r3, s15
2401893a:	6001      	str	r1, [r0, #0]
2401893c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24018940:	6801      	ldr	r1, [r0, #0]
24018942:	15d2      	asrs	r2, r2, #23
24018944:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24018948:	3a7e      	subs	r2, #126	; 0x7e
2401894a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
2401894e:	440a      	add	r2, r1
24018950:	ee00 3a10 	vmov	s0, r3
24018954:	6002      	str	r2, [r0, #0]
24018956:	4770      	bx	lr
24018958:	4c000000 	.word	0x4c000000

2401895c <__utoa>:
2401895c:	b5f0      	push	{r4, r5, r6, r7, lr}
2401895e:	4c1f      	ldr	r4, [pc, #124]	; (240189dc <__utoa+0x80>)
24018960:	b08b      	sub	sp, #44	; 0x2c
24018962:	4605      	mov	r5, r0
24018964:	460b      	mov	r3, r1
24018966:	466e      	mov	r6, sp
24018968:	f104 0c20 	add.w	ip, r4, #32
2401896c:	6820      	ldr	r0, [r4, #0]
2401896e:	6861      	ldr	r1, [r4, #4]
24018970:	4637      	mov	r7, r6
24018972:	c703      	stmia	r7!, {r0, r1}
24018974:	3408      	adds	r4, #8
24018976:	4564      	cmp	r4, ip
24018978:	463e      	mov	r6, r7
2401897a:	d1f7      	bne.n	2401896c <__utoa+0x10>
2401897c:	7921      	ldrb	r1, [r4, #4]
2401897e:	7139      	strb	r1, [r7, #4]
24018980:	1e91      	subs	r1, r2, #2
24018982:	6820      	ldr	r0, [r4, #0]
24018984:	6038      	str	r0, [r7, #0]
24018986:	2922      	cmp	r1, #34	; 0x22
24018988:	f04f 0100 	mov.w	r1, #0
2401898c:	d904      	bls.n	24018998 <__utoa+0x3c>
2401898e:	7019      	strb	r1, [r3, #0]
24018990:	460b      	mov	r3, r1
24018992:	4618      	mov	r0, r3
24018994:	b00b      	add	sp, #44	; 0x2c
24018996:	bdf0      	pop	{r4, r5, r6, r7, pc}
24018998:	1e58      	subs	r0, r3, #1
2401899a:	4684      	mov	ip, r0
2401899c:	fbb5 f7f2 	udiv	r7, r5, r2
240189a0:	fb02 5617 	mls	r6, r2, r7, r5
240189a4:	3628      	adds	r6, #40	; 0x28
240189a6:	446e      	add	r6, sp
240189a8:	460c      	mov	r4, r1
240189aa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
240189ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
240189b2:	462e      	mov	r6, r5
240189b4:	42b2      	cmp	r2, r6
240189b6:	f101 0101 	add.w	r1, r1, #1
240189ba:	463d      	mov	r5, r7
240189bc:	d9ee      	bls.n	2401899c <__utoa+0x40>
240189be:	2200      	movs	r2, #0
240189c0:	545a      	strb	r2, [r3, r1]
240189c2:	1919      	adds	r1, r3, r4
240189c4:	1aa5      	subs	r5, r4, r2
240189c6:	42aa      	cmp	r2, r5
240189c8:	dae3      	bge.n	24018992 <__utoa+0x36>
240189ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
240189ce:	780e      	ldrb	r6, [r1, #0]
240189d0:	7006      	strb	r6, [r0, #0]
240189d2:	3201      	adds	r2, #1
240189d4:	f801 5901 	strb.w	r5, [r1], #-1
240189d8:	e7f4      	b.n	240189c4 <__utoa+0x68>
240189da:	bf00      	nop
240189dc:	24032910 	.word	0x24032910

240189e0 <sinf_poly>:
240189e0:	07cb      	lsls	r3, r1, #31
240189e2:	d412      	bmi.n	24018a0a <sinf_poly+0x2a>
240189e4:	ee21 5b00 	vmul.f64	d5, d1, d0
240189e8:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
240189ec:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
240189f0:	eea6 7b01 	vfma.f64	d7, d6, d1
240189f4:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
240189f8:	ee21 1b05 	vmul.f64	d1, d1, d5
240189fc:	eea6 0b05 	vfma.f64	d0, d6, d5
24018a00:	eea7 0b01 	vfma.f64	d0, d7, d1
24018a04:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018a08:	4770      	bx	lr
24018a0a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
24018a0e:	ee21 5b01 	vmul.f64	d5, d1, d1
24018a12:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
24018a16:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
24018a1a:	eea1 7b06 	vfma.f64	d7, d1, d6
24018a1e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
24018a22:	eea1 0b06 	vfma.f64	d0, d1, d6
24018a26:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
24018a2a:	ee21 1b05 	vmul.f64	d1, d1, d5
24018a2e:	eea5 0b06 	vfma.f64	d0, d5, d6
24018a32:	e7e5      	b.n	24018a00 <sinf_poly+0x20>
24018a34:	0000      	movs	r0, r0
	...

24018a38 <cosf>:
24018a38:	b538      	push	{r3, r4, r5, lr}
24018a3a:	ee10 4a10 	vmov	r4, s0
24018a3e:	f3c4 530a 	ubfx	r3, r4, #20, #11
24018a42:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
24018a46:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
24018a4a:	d21f      	bcs.n	24018a8c <cosf+0x54>
24018a4c:	ee27 0b07 	vmul.f64	d0, d7, d7
24018a50:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
24018a54:	f0c0 8088 	bcc.w	24018b68 <cosf+0x130>
24018a58:	ee20 4b00 	vmul.f64	d4, d0, d0
24018a5c:	4b46      	ldr	r3, [pc, #280]	; (24018b78 <cosf+0x140>)
24018a5e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
24018a62:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
24018a66:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
24018a6a:	eea0 6b05 	vfma.f64	d6, d0, d5
24018a6e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
24018a72:	eea0 7b05 	vfma.f64	d7, d0, d5
24018a76:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
24018a7a:	ee20 0b04 	vmul.f64	d0, d0, d4
24018a7e:	eea4 7b05 	vfma.f64	d7, d4, d5
24018a82:	eea6 7b00 	vfma.f64	d7, d6, d0
24018a86:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
24018a8a:	bd38      	pop	{r3, r4, r5, pc}
24018a8c:	f240 422e 	movw	r2, #1070	; 0x42e
24018a90:	4293      	cmp	r3, r2
24018a92:	d82b      	bhi.n	24018aec <cosf+0xb4>
24018a94:	4b38      	ldr	r3, [pc, #224]	; (24018b78 <cosf+0x140>)
24018a96:	ed93 6b08 	vldr	d6, [r3, #32]
24018a9a:	ee27 6b06 	vmul.f64	d6, d7, d6
24018a9e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
24018aa2:	f103 0070 	add.w	r0, r3, #112	; 0x70
24018aa6:	ee16 1a90 	vmov	r1, s13
24018aaa:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
24018aae:	1609      	asrs	r1, r1, #24
24018ab0:	ee06 1a90 	vmov	s13, r1
24018ab4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
24018ab8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
24018abc:	f001 0203 	and.w	r2, r1, #3
24018ac0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24018ac4:	eea5 7b46 	vfms.f64	d7, d5, d6
24018ac8:	eeb0 0b47 	vmov.f64	d0, d7
24018acc:	ed92 7b00 	vldr	d7, [r2]
24018ad0:	ee20 1b00 	vmul.f64	d1, d0, d0
24018ad4:	f011 0f02 	tst.w	r1, #2
24018ad8:	bf08      	it	eq
24018ada:	4618      	moveq	r0, r3
24018adc:	f081 0101 	eor.w	r1, r1, #1
24018ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24018ae4:	ee20 0b07 	vmul.f64	d0, d0, d7
24018ae8:	f7ff bf7a 	b.w	240189e0 <sinf_poly>
24018aec:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24018af0:	d236      	bcs.n	24018b60 <cosf+0x128>
24018af2:	4a22      	ldr	r2, [pc, #136]	; (24018b7c <cosf+0x144>)
24018af4:	f3c4 6183 	ubfx	r1, r4, #26, #4
24018af8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
24018afc:	f3c4 0316 	ubfx	r3, r4, #0, #23
24018b00:	f3c4 50c2 	ubfx	r0, r4, #23, #3
24018b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24018b08:	4083      	lsls	r3, r0
24018b0a:	6a28      	ldr	r0, [r5, #32]
24018b0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
24018b10:	fba3 1000 	umull	r1, r0, r3, r0
24018b14:	6929      	ldr	r1, [r5, #16]
24018b16:	435a      	muls	r2, r3
24018b18:	fbe3 0201 	umlal	r0, r2, r3, r1
24018b1c:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
24018b20:	0f8d      	lsrs	r5, r1, #30
24018b22:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
24018b26:	1a51      	subs	r1, r2, r1
24018b28:	f7e7 fd6c 	bl	24000604 <__aeabi_l2d>
24018b2c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
24018b30:	4b11      	ldr	r3, [pc, #68]	; (24018b78 <cosf+0x140>)
24018b32:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 24018b70 <cosf+0x138>
24018b36:	ec41 0b16 	vmov	d6, r0, r1
24018b3a:	f004 0203 	and.w	r2, r4, #3
24018b3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24018b42:	f014 0f02 	tst.w	r4, #2
24018b46:	f103 0070 	add.w	r0, r3, #112	; 0x70
24018b4a:	ee26 7b07 	vmul.f64	d7, d6, d7
24018b4e:	ed92 0b00 	vldr	d0, [r2]
24018b52:	ee27 1b07 	vmul.f64	d1, d7, d7
24018b56:	f085 0101 	eor.w	r1, r5, #1
24018b5a:	bf08      	it	eq
24018b5c:	4618      	moveq	r0, r3
24018b5e:	e7bf      	b.n	24018ae0 <cosf+0xa8>
24018b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24018b64:	f000 b964 	b.w	24018e30 <__math_invalidf>
24018b68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018b6c:	e78d      	b.n	24018a8a <cosf+0x52>
24018b6e:	bf00      	nop
24018b70:	54442d18 	.word	0x54442d18
24018b74:	3c1921fb 	.word	0x3c1921fb
24018b78:	240336c0 	.word	0x240336c0
24018b7c:	24033660 	.word	0x24033660

24018b80 <exp>:
24018b80:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
24018b82:	ee10 3a90 	vmov	r3, s1
24018b86:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
24018b8a:	f3c3 540a 	ubfx	r4, r3, #20, #11
24018b8e:	18a2      	adds	r2, r4, r2
24018b90:	2a3e      	cmp	r2, #62	; 0x3e
24018b92:	ee10 1a10 	vmov	r1, s0
24018b96:	d922      	bls.n	24018bde <exp+0x5e>
24018b98:	2a00      	cmp	r2, #0
24018b9a:	da06      	bge.n	24018baa <exp+0x2a>
24018b9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24018ba0:	ee30 0b07 	vadd.f64	d0, d0, d7
24018ba4:	b004      	add	sp, #16
24018ba6:	bcf0      	pop	{r4, r5, r6, r7}
24018ba8:	4770      	bx	lr
24018baa:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24018bae:	f04f 0000 	mov.w	r0, #0
24018bb2:	d913      	bls.n	24018bdc <exp+0x5c>
24018bb4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24018bb8:	bf08      	it	eq
24018bba:	4281      	cmpeq	r1, r0
24018bbc:	f000 80a0 	beq.w	24018d00 <exp+0x180>
24018bc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
24018bc4:	4294      	cmp	r4, r2
24018bc6:	d0e9      	beq.n	24018b9c <exp+0x1c>
24018bc8:	4283      	cmp	r3, r0
24018bca:	da03      	bge.n	24018bd4 <exp+0x54>
24018bcc:	b004      	add	sp, #16
24018bce:	bcf0      	pop	{r4, r5, r6, r7}
24018bd0:	f000 b8c6 	b.w	24018d60 <__math_uflow>
24018bd4:	b004      	add	sp, #16
24018bd6:	bcf0      	pop	{r4, r5, r6, r7}
24018bd8:	f000 b8ca 	b.w	24018d70 <__math_oflow>
24018bdc:	4604      	mov	r4, r0
24018bde:	4950      	ldr	r1, [pc, #320]	; (24018d20 <exp+0x1a0>)
24018be0:	ed91 6b02 	vldr	d6, [r1, #8]
24018be4:	ed91 5b00 	vldr	d5, [r1]
24018be8:	eeb0 7b46 	vmov.f64	d7, d6
24018bec:	eea5 7b00 	vfma.f64	d7, d5, d0
24018bf0:	ee17 5a10 	vmov	r5, s14
24018bf4:	ee37 7b46 	vsub.f64	d7, d7, d6
24018bf8:	ed91 6b04 	vldr	d6, [r1, #16]
24018bfc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24018c00:	eea6 0b07 	vfma.f64	d0, d6, d7
24018c04:	ed91 6b06 	vldr	d6, [r1, #24]
24018c08:	18d8      	adds	r0, r3, r3
24018c0a:	f100 030f 	add.w	r3, r0, #15
24018c0e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
24018c12:	eea6 0b07 	vfma.f64	d0, d6, d7
24018c16:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
24018c1a:	ee20 7b00 	vmul.f64	d7, d0, d0
24018c1e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
24018c22:	ed91 5b08 	vldr	d5, [r1, #32]
24018c26:	ee30 6b06 	vadd.f64	d6, d0, d6
24018c2a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
24018c2e:	eea4 5b00 	vfma.f64	d5, d4, d0
24018c32:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
24018c36:	eea5 6b07 	vfma.f64	d6, d5, d7
24018c3a:	ee27 7b07 	vmul.f64	d7, d7, d7
24018c3e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
24018c42:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
24018c46:	f8d2 c004 	ldr.w	ip, [r2, #4]
24018c4a:	eea4 5b00 	vfma.f64	d5, d4, d0
24018c4e:	2600      	movs	r6, #0
24018c50:	19f2      	adds	r2, r6, r7
24018c52:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
24018c56:	eea7 6b05 	vfma.f64	d6, d7, d5
24018c5a:	2c00      	cmp	r4, #0
24018c5c:	d14b      	bne.n	24018cf6 <exp+0x176>
24018c5e:	42b5      	cmp	r5, r6
24018c60:	db10      	blt.n	24018c84 <exp+0x104>
24018c62:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
24018c66:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24018d08 <exp+0x188>
24018c6a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
24018c6e:	4610      	mov	r0, r2
24018c70:	ec41 0b10 	vmov	d0, r0, r1
24018c74:	eea6 0b00 	vfma.f64	d0, d6, d0
24018c78:	ee20 0b07 	vmul.f64	d0, d0, d7
24018c7c:	b004      	add	sp, #16
24018c7e:	bcf0      	pop	{r4, r5, r6, r7}
24018c80:	f000 b88a 	b.w	24018d98 <__math_check_oflow>
24018c84:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24018c88:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
24018c8c:	4610      	mov	r0, r2
24018c8e:	ec41 0b17 	vmov	d7, r0, r1
24018c92:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24018c96:	ee26 6b07 	vmul.f64	d6, d6, d7
24018c9a:	ee37 5b06 	vadd.f64	d5, d7, d6
24018c9e:	eeb4 5bc4 	vcmpe.f64	d5, d4
24018ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018ca6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24018d10 <exp+0x190>
24018caa:	d51e      	bpl.n	24018cea <exp+0x16a>
24018cac:	ee35 3b04 	vadd.f64	d3, d5, d4
24018cb0:	ee37 7b45 	vsub.f64	d7, d7, d5
24018cb4:	ee37 7b06 	vadd.f64	d7, d7, d6
24018cb8:	ee34 6b43 	vsub.f64	d6, d4, d3
24018cbc:	ee36 5b05 	vadd.f64	d5, d6, d5
24018cc0:	ee35 5b07 	vadd.f64	d5, d5, d7
24018cc4:	ee35 5b03 	vadd.f64	d5, d5, d3
24018cc8:	ee35 5b44 	vsub.f64	d5, d5, d4
24018ccc:	eeb5 5b40 	vcmp.f64	d5, #0.0
24018cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018cd4:	d101      	bne.n	24018cda <exp+0x15a>
24018cd6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24018d18 <exp+0x198>
24018cda:	ed8d 0b00 	vstr	d0, [sp]
24018cde:	ed9d 7b00 	vldr	d7, [sp]
24018ce2:	ee27 7b00 	vmul.f64	d7, d7, d0
24018ce6:	ed8d 7b02 	vstr	d7, [sp, #8]
24018cea:	ee25 0b00 	vmul.f64	d0, d5, d0
24018cee:	b004      	add	sp, #16
24018cf0:	bcf0      	pop	{r4, r5, r6, r7}
24018cf2:	f000 b845 	b.w	24018d80 <__math_check_uflow>
24018cf6:	ec43 2b10 	vmov	d0, r2, r3
24018cfa:	eea6 0b00 	vfma.f64	d0, d6, d0
24018cfe:	e751      	b.n	24018ba4 <exp+0x24>
24018d00:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24018d18 <exp+0x198>
24018d04:	e74e      	b.n	24018ba4 <exp+0x24>
24018d06:	bf00      	nop
24018d08:	00000000 	.word	0x00000000
24018d0c:	7f000000 	.word	0x7f000000
24018d10:	00000000 	.word	0x00000000
24018d14:	00100000 	.word	0x00100000
	...
24018d20:	24032938 	.word	0x24032938

24018d24 <with_errno>:
24018d24:	b513      	push	{r0, r1, r4, lr}
24018d26:	4604      	mov	r4, r0
24018d28:	ed8d 0b00 	vstr	d0, [sp]
24018d2c:	f7ff fd7c 	bl	24018828 <__errno>
24018d30:	ed9d 0b00 	vldr	d0, [sp]
24018d34:	6004      	str	r4, [r0, #0]
24018d36:	b002      	add	sp, #8
24018d38:	bd10      	pop	{r4, pc}

24018d3a <xflow>:
24018d3a:	b082      	sub	sp, #8
24018d3c:	b158      	cbz	r0, 24018d56 <xflow+0x1c>
24018d3e:	eeb1 7b40 	vneg.f64	d7, d0
24018d42:	ed8d 7b00 	vstr	d7, [sp]
24018d46:	ed9d 7b00 	vldr	d7, [sp]
24018d4a:	2022      	movs	r0, #34	; 0x22
24018d4c:	ee20 0b07 	vmul.f64	d0, d0, d7
24018d50:	b002      	add	sp, #8
24018d52:	f7ff bfe7 	b.w	24018d24 <with_errno>
24018d56:	eeb0 7b40 	vmov.f64	d7, d0
24018d5a:	e7f2      	b.n	24018d42 <xflow+0x8>
24018d5c:	0000      	movs	r0, r0
	...

24018d60 <__math_uflow>:
24018d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24018d68 <__math_uflow+0x8>
24018d64:	f7ff bfe9 	b.w	24018d3a <xflow>
24018d68:	00000000 	.word	0x00000000
24018d6c:	10000000 	.word	0x10000000

24018d70 <__math_oflow>:
24018d70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24018d78 <__math_oflow+0x8>
24018d74:	f7ff bfe1 	b.w	24018d3a <xflow>
24018d78:	00000000 	.word	0x00000000
24018d7c:	70000000 	.word	0x70000000

24018d80 <__math_check_uflow>:
24018d80:	eeb5 0b40 	vcmp.f64	d0, #0.0
24018d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018d88:	d102      	bne.n	24018d90 <__math_check_uflow+0x10>
24018d8a:	2022      	movs	r0, #34	; 0x22
24018d8c:	f7ff bfca 	b.w	24018d24 <with_errno>
24018d90:	4770      	bx	lr
24018d92:	0000      	movs	r0, r0
24018d94:	0000      	movs	r0, r0
	...

24018d98 <__math_check_oflow>:
24018d98:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24018db8 <__math_check_oflow+0x20>
24018d9c:	eeb0 7bc0 	vabs.f64	d7, d0
24018da0:	eeb4 7b46 	vcmp.f64	d7, d6
24018da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018da8:	dd02      	ble.n	24018db0 <__math_check_oflow+0x18>
24018daa:	2022      	movs	r0, #34	; 0x22
24018dac:	f7ff bfba 	b.w	24018d24 <with_errno>
24018db0:	4770      	bx	lr
24018db2:	bf00      	nop
24018db4:	f3af 8000 	nop.w
24018db8:	ffffffff 	.word	0xffffffff
24018dbc:	7fefffff 	.word	0x7fefffff

24018dc0 <with_errnof>:
24018dc0:	b513      	push	{r0, r1, r4, lr}
24018dc2:	4604      	mov	r4, r0
24018dc4:	ed8d 0a01 	vstr	s0, [sp, #4]
24018dc8:	f7ff fd2e 	bl	24018828 <__errno>
24018dcc:	ed9d 0a01 	vldr	s0, [sp, #4]
24018dd0:	6004      	str	r4, [r0, #0]
24018dd2:	b002      	add	sp, #8
24018dd4:	bd10      	pop	{r4, pc}

24018dd6 <xflowf>:
24018dd6:	b130      	cbz	r0, 24018de6 <xflowf+0x10>
24018dd8:	eef1 7a40 	vneg.f32	s15, s0
24018ddc:	ee27 0a80 	vmul.f32	s0, s15, s0
24018de0:	2022      	movs	r0, #34	; 0x22
24018de2:	f7ff bfed 	b.w	24018dc0 <with_errnof>
24018de6:	eef0 7a40 	vmov.f32	s15, s0
24018dea:	e7f7      	b.n	24018ddc <xflowf+0x6>

24018dec <__math_uflowf>:
24018dec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24018df4 <__math_uflowf+0x8>
24018df0:	f7ff bff1 	b.w	24018dd6 <xflowf>
24018df4:	10000000 	.word	0x10000000

24018df8 <__math_may_uflowf>:
24018df8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24018e00 <__math_may_uflowf+0x8>
24018dfc:	f7ff bfeb 	b.w	24018dd6 <xflowf>
24018e00:	1a200000 	.word	0x1a200000

24018e04 <__math_oflowf>:
24018e04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24018e0c <__math_oflowf+0x8>
24018e08:	f7ff bfe5 	b.w	24018dd6 <xflowf>
24018e0c:	70000000 	.word	0x70000000

24018e10 <__math_divzerof>:
24018e10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018e14:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24018e18:	2800      	cmp	r0, #0
24018e1a:	fe40 7a27 	vseleq.f32	s15, s0, s15
24018e1e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24018e2c <__math_divzerof+0x1c>
24018e22:	2022      	movs	r0, #34	; 0x22
24018e24:	ee87 0a80 	vdiv.f32	s0, s15, s0
24018e28:	f7ff bfca 	b.w	24018dc0 <with_errnof>
24018e2c:	00000000 	.word	0x00000000

24018e30 <__math_invalidf>:
24018e30:	eef0 7a40 	vmov.f32	s15, s0
24018e34:	ee30 7a40 	vsub.f32	s14, s0, s0
24018e38:	eef4 7a67 	vcmp.f32	s15, s15
24018e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018e40:	ee87 0a07 	vdiv.f32	s0, s14, s14
24018e44:	d602      	bvs.n	24018e4c <__math_invalidf+0x1c>
24018e46:	2021      	movs	r0, #33	; 0x21
24018e48:	f7ff bfba 	b.w	24018dc0 <with_errnof>
24018e4c:	4770      	bx	lr
	...

24018e50 <tan>:
24018e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
24018e52:	eeb0 7b40 	vmov.f64	d7, d0
24018e56:	ee17 3a90 	vmov	r3, s15
24018e5a:	4a15      	ldr	r2, [pc, #84]	; (24018eb0 <tan+0x60>)
24018e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018e60:	4293      	cmp	r3, r2
24018e62:	dc07      	bgt.n	24018e74 <tan+0x24>
24018e64:	ed9f 1b10 	vldr	d1, [pc, #64]	; 24018ea8 <tan+0x58>
24018e68:	2001      	movs	r0, #1
24018e6a:	b005      	add	sp, #20
24018e6c:	f85d eb04 	ldr.w	lr, [sp], #4
24018e70:	f001 b8ba 	b.w	24019fe8 <__kernel_tan>
24018e74:	4a0f      	ldr	r2, [pc, #60]	; (24018eb4 <tan+0x64>)
24018e76:	4293      	cmp	r3, r2
24018e78:	dd04      	ble.n	24018e84 <tan+0x34>
24018e7a:	ee30 0b40 	vsub.f64	d0, d0, d0
24018e7e:	b005      	add	sp, #20
24018e80:	f85d fb04 	ldr.w	pc, [sp], #4
24018e84:	4668      	mov	r0, sp
24018e86:	f000 fb97 	bl	240195b8 <__ieee754_rem_pio2>
24018e8a:	0040      	lsls	r0, r0, #1
24018e8c:	f000 0002 	and.w	r0, r0, #2
24018e90:	ed9d 1b02 	vldr	d1, [sp, #8]
24018e94:	ed9d 0b00 	vldr	d0, [sp]
24018e98:	f1c0 0001 	rsb	r0, r0, #1
24018e9c:	f001 f8a4 	bl	24019fe8 <__kernel_tan>
24018ea0:	e7ed      	b.n	24018e7e <tan+0x2e>
24018ea2:	bf00      	nop
24018ea4:	f3af 8000 	nop.w
	...
24018eb0:	3fe921fb 	.word	0x3fe921fb
24018eb4:	7fefffff 	.word	0x7fefffff

24018eb8 <expf>:
24018eb8:	ee10 2a10 	vmov	r2, s0
24018ebc:	f240 412a 	movw	r1, #1066	; 0x42a
24018ec0:	f3c2 530a 	ubfx	r3, r2, #20, #11
24018ec4:	428b      	cmp	r3, r1
24018ec6:	b430      	push	{r4, r5}
24018ec8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24018ecc:	d92a      	bls.n	24018f24 <expf+0x6c>
24018ece:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24018ed2:	d058      	beq.n	24018f86 <expf+0xce>
24018ed4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24018ed8:	d303      	bcc.n	24018ee2 <expf+0x2a>
24018eda:	ee30 0a00 	vadd.f32	s0, s0, s0
24018ede:	bc30      	pop	{r4, r5}
24018ee0:	4770      	bx	lr
24018ee2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24018f8c <expf+0xd4>
24018ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
24018eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018eee:	dd03      	ble.n	24018ef8 <expf+0x40>
24018ef0:	bc30      	pop	{r4, r5}
24018ef2:	2000      	movs	r0, #0
24018ef4:	f7ff bf86 	b.w	24018e04 <__math_oflowf>
24018ef8:	eddf 7a25 	vldr	s15, [pc, #148]	; 24018f90 <expf+0xd8>
24018efc:	eeb4 0ae7 	vcmpe.f32	s0, s15
24018f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018f04:	d503      	bpl.n	24018f0e <expf+0x56>
24018f06:	bc30      	pop	{r4, r5}
24018f08:	2000      	movs	r0, #0
24018f0a:	f7ff bf6f 	b.w	24018dec <__math_uflowf>
24018f0e:	eddf 7a21 	vldr	s15, [pc, #132]	; 24018f94 <expf+0xdc>
24018f12:	eeb4 0ae7 	vcmpe.f32	s0, s15
24018f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018f1a:	d503      	bpl.n	24018f24 <expf+0x6c>
24018f1c:	bc30      	pop	{r4, r5}
24018f1e:	2000      	movs	r0, #0
24018f20:	f7ff bf6a 	b.w	24018df8 <__math_may_uflowf>
24018f24:	4b1c      	ldr	r3, [pc, #112]	; (24018f98 <expf+0xe0>)
24018f26:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24018f2a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24018f2e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24018f32:	eeb0 7b44 	vmov.f64	d7, d4
24018f36:	eea5 7b06 	vfma.f64	d7, d5, d6
24018f3a:	ee17 0a10 	vmov	r0, s14
24018f3e:	ee37 7b44 	vsub.f64	d7, d7, d4
24018f42:	f000 021f 	and.w	r2, r0, #31
24018f46:	ee95 7b06 	vfnms.f64	d7, d5, d6
24018f4a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24018f4e:	ee27 4b07 	vmul.f64	d4, d7, d7
24018f52:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24018f56:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24018f5a:	eea5 6b07 	vfma.f64	d6, d5, d7
24018f5e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24018f62:	684d      	ldr	r5, [r1, #4]
24018f64:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24018f68:	2100      	movs	r1, #0
24018f6a:	190a      	adds	r2, r1, r4
24018f6c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24018f70:	eea5 0b07 	vfma.f64	d0, d5, d7
24018f74:	ec43 2b17 	vmov	d7, r2, r3
24018f78:	eea6 0b04 	vfma.f64	d0, d6, d4
24018f7c:	ee20 0b07 	vmul.f64	d0, d0, d7
24018f80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018f84:	e7ab      	b.n	24018ede <expf+0x26>
24018f86:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24018f9c <expf+0xe4>
24018f8a:	e7a8      	b.n	24018ede <expf+0x26>
24018f8c:	42b17217 	.word	0x42b17217
24018f90:	c2cff1b4 	.word	0xc2cff1b4
24018f94:	c2ce8ecf 	.word	0xc2ce8ecf
24018f98:	240331a8 	.word	0x240331a8
24018f9c:	00000000 	.word	0x00000000

24018fa0 <fabsf>:
24018fa0:	ee10 3a10 	vmov	r3, s0
24018fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018fa8:	ee00 3a10 	vmov	s0, r3
24018fac:	4770      	bx	lr
	...

24018fb0 <logf>:
24018fb0:	ee10 3a10 	vmov	r3, s0
24018fb4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24018fb8:	b410      	push	{r4}
24018fba:	d055      	beq.n	24019068 <logf+0xb8>
24018fbc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24018fc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24018fc4:	d31a      	bcc.n	24018ffc <logf+0x4c>
24018fc6:	005a      	lsls	r2, r3, #1
24018fc8:	d104      	bne.n	24018fd4 <logf+0x24>
24018fca:	f85d 4b04 	ldr.w	r4, [sp], #4
24018fce:	2001      	movs	r0, #1
24018fd0:	f7ff bf1e 	b.w	24018e10 <__math_divzerof>
24018fd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24018fd8:	d043      	beq.n	24019062 <logf+0xb2>
24018fda:	2b00      	cmp	r3, #0
24018fdc:	db02      	blt.n	24018fe4 <logf+0x34>
24018fde:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24018fe2:	d303      	bcc.n	24018fec <logf+0x3c>
24018fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
24018fe8:	f7ff bf22 	b.w	24018e30 <__math_invalidf>
24018fec:	eddf 7a20 	vldr	s15, [pc, #128]	; 24019070 <logf+0xc0>
24018ff0:	ee20 0a27 	vmul.f32	s0, s0, s15
24018ff4:	ee10 3a10 	vmov	r3, s0
24018ff8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24018ffc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24019000:	491c      	ldr	r1, [pc, #112]	; (24019074 <logf+0xc4>)
24019002:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24019006:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
2401900a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
2401900e:	0dd4      	lsrs	r4, r2, #23
24019010:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24019014:	05e4      	lsls	r4, r4, #23
24019016:	ed90 6b00 	vldr	d6, [r0]
2401901a:	1b1b      	subs	r3, r3, r4
2401901c:	ee07 3a90 	vmov	s15, r3
24019020:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24019024:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019028:	15d2      	asrs	r2, r2, #23
2401902a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401902e:	ed90 6b02 	vldr	d6, [r0, #8]
24019032:	ee20 4b00 	vmul.f64	d4, d0, d0
24019036:	ee07 2a90 	vmov	s15, r2
2401903a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401903e:	eea7 6b05 	vfma.f64	d6, d7, d5
24019042:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24019046:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
2401904a:	eea5 7b00 	vfma.f64	d7, d5, d0
2401904e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24019052:	ee30 0b06 	vadd.f64	d0, d0, d6
24019056:	eea5 7b04 	vfma.f64	d7, d5, d4
2401905a:	eea4 0b07 	vfma.f64	d0, d4, d7
2401905e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019062:	f85d 4b04 	ldr.w	r4, [sp], #4
24019066:	4770      	bx	lr
24019068:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24019078 <logf+0xc8>
2401906c:	e7f9      	b.n	24019062 <logf+0xb2>
2401906e:	bf00      	nop
24019070:	4b000000 	.word	0x4b000000
24019074:	24033410 	.word	0x24033410
24019078:	00000000 	.word	0x00000000

2401907c <log2f>:
2401907c:	ee10 2a10 	vmov	r2, s0
24019080:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
24019084:	b410      	push	{r4}
24019086:	d055      	beq.n	24019134 <log2f+0xb8>
24019088:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
2401908c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24019090:	d31a      	bcc.n	240190c8 <log2f+0x4c>
24019092:	0053      	lsls	r3, r2, #1
24019094:	d104      	bne.n	240190a0 <log2f+0x24>
24019096:	f85d 4b04 	ldr.w	r4, [sp], #4
2401909a:	2001      	movs	r0, #1
2401909c:	f7ff beb8 	b.w	24018e10 <__math_divzerof>
240190a0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
240190a4:	d043      	beq.n	2401912e <log2f+0xb2>
240190a6:	2a00      	cmp	r2, #0
240190a8:	db02      	blt.n	240190b0 <log2f+0x34>
240190aa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
240190ae:	d303      	bcc.n	240190b8 <log2f+0x3c>
240190b0:	f85d 4b04 	ldr.w	r4, [sp], #4
240190b4:	f7ff bebc 	b.w	24018e30 <__math_invalidf>
240190b8:	eddf 7a20 	vldr	s15, [pc, #128]	; 2401913c <log2f+0xc0>
240190bc:	ee20 0a27 	vmul.f32	s0, s0, s15
240190c0:	ee10 3a10 	vmov	r3, s0
240190c4:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
240190c8:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
240190cc:	491c      	ldr	r1, [pc, #112]	; (24019140 <log2f+0xc4>)
240190ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
240190d2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
240190d6:	f3c3 40c3 	ubfx	r0, r3, #19, #4
240190da:	0ddc      	lsrs	r4, r3, #23
240190dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
240190e0:	05e4      	lsls	r4, r4, #23
240190e2:	ed90 5b00 	vldr	d5, [r0]
240190e6:	1b12      	subs	r2, r2, r4
240190e8:	ee07 2a90 	vmov	s15, r2
240190ec:	15db      	asrs	r3, r3, #23
240190ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
240190f2:	eea5 6b07 	vfma.f64	d6, d5, d7
240190f6:	ed90 7b02 	vldr	d7, [r0, #8]
240190fa:	ee26 4b06 	vmul.f64	d4, d6, d6
240190fe:	ee00 3a10 	vmov	s0, r3
24019102:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24019106:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
2401910a:	ee30 0b07 	vadd.f64	d0, d0, d7
2401910e:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
24019112:	eea5 7b06 	vfma.f64	d7, d5, d6
24019116:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
2401911a:	eea5 7b04 	vfma.f64	d7, d5, d4
2401911e:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
24019122:	eea5 0b06 	vfma.f64	d0, d5, d6
24019126:	eea4 0b07 	vfma.f64	d0, d4, d7
2401912a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401912e:	f85d 4b04 	ldr.w	r4, [sp], #4
24019132:	4770      	bx	lr
24019134:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24019144 <log2f+0xc8>
24019138:	e7f9      	b.n	2401912e <log2f+0xb2>
2401913a:	bf00      	nop
2401913c:	4b000000 	.word	0x4b000000
24019140:	240332f0 	.word	0x240332f0
24019144:	00000000 	.word	0x00000000

24019148 <lrintf>:
24019148:	ee10 3a10 	vmov	r3, s0
2401914c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24019150:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
24019154:	281e      	cmp	r0, #30
24019156:	b082      	sub	sp, #8
24019158:	dc2e      	bgt.n	240191b8 <lrintf+0x70>
2401915a:	1c41      	adds	r1, r0, #1
2401915c:	da02      	bge.n	24019164 <lrintf+0x1c>
2401915e:	2000      	movs	r0, #0
24019160:	b002      	add	sp, #8
24019162:	4770      	bx	lr
24019164:	2816      	cmp	r0, #22
24019166:	ea4f 71d3 	mov.w	r1, r3, lsr #31
2401916a:	dd09      	ble.n	24019180 <lrintf+0x38>
2401916c:	f3c3 0016 	ubfx	r0, r3, #0, #23
24019170:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24019174:	3a96      	subs	r2, #150	; 0x96
24019176:	4090      	lsls	r0, r2
24019178:	2900      	cmp	r1, #0
2401917a:	d0f1      	beq.n	24019160 <lrintf+0x18>
2401917c:	4240      	negs	r0, r0
2401917e:	e7ef      	b.n	24019160 <lrintf+0x18>
24019180:	4b10      	ldr	r3, [pc, #64]	; (240191c4 <lrintf+0x7c>)
24019182:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24019186:	ed93 7a00 	vldr	s14, [r3]
2401918a:	ee37 0a00 	vadd.f32	s0, s14, s0
2401918e:	ed8d 0a01 	vstr	s0, [sp, #4]
24019192:	eddd 7a01 	vldr	s15, [sp, #4]
24019196:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401919a:	ee17 3a90 	vmov	r3, s15
2401919e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
240191a2:	d0dc      	beq.n	2401915e <lrintf+0x16>
240191a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
240191a8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
240191ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
240191b0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
240191b4:	40d8      	lsrs	r0, r3
240191b6:	e7df      	b.n	24019178 <lrintf+0x30>
240191b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
240191bc:	ee17 0a90 	vmov	r0, s15
240191c0:	e7ce      	b.n	24019160 <lrintf+0x18>
240191c2:	bf00      	nop
240191c4:	24033530 	.word	0x24033530

240191c8 <checkint>:
240191c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
240191cc:	2b7e      	cmp	r3, #126	; 0x7e
240191ce:	dd10      	ble.n	240191f2 <checkint+0x2a>
240191d0:	2b96      	cmp	r3, #150	; 0x96
240191d2:	dc0c      	bgt.n	240191ee <checkint+0x26>
240191d4:	2201      	movs	r2, #1
240191d6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
240191da:	fa02 f303 	lsl.w	r3, r2, r3
240191de:	1e5a      	subs	r2, r3, #1
240191e0:	4202      	tst	r2, r0
240191e2:	d106      	bne.n	240191f2 <checkint+0x2a>
240191e4:	4203      	tst	r3, r0
240191e6:	bf0c      	ite	eq
240191e8:	2002      	moveq	r0, #2
240191ea:	2001      	movne	r0, #1
240191ec:	4770      	bx	lr
240191ee:	2002      	movs	r0, #2
240191f0:	4770      	bx	lr
240191f2:	2000      	movs	r0, #0
240191f4:	4770      	bx	lr
	...

240191f8 <powf>:
240191f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
240191fa:	ee10 1a10 	vmov	r1, s0
240191fe:	ee10 4a90 	vmov	r4, s1
24019202:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24019206:	0062      	lsls	r2, r4, #1
24019208:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
2401920c:	eef0 7a40 	vmov.f32	s15, s0
24019210:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24019214:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24019218:	d252      	bcs.n	240192c0 <powf+0xc8>
2401921a:	4298      	cmp	r0, r3
2401921c:	d252      	bcs.n	240192c4 <powf+0xcc>
2401921e:	2000      	movs	r0, #0
24019220:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
24019224:	4ca0      	ldr	r4, [pc, #640]	; (240194a8 <powf+0x2b0>)
24019226:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
2401922a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
2401922e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
24019232:	0dd2      	lsrs	r2, r2, #23
24019234:	05d2      	lsls	r2, r2, #23
24019236:	eb04 1505 	add.w	r5, r4, r5, lsl #4
2401923a:	1a8b      	subs	r3, r1, r2
2401923c:	ed95 6b00 	vldr	d6, [r5]
24019240:	ee07 3a90 	vmov	s15, r3
24019244:	15d2      	asrs	r2, r2, #23
24019246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401924a:	eea6 5b07 	vfma.f64	d5, d6, d7
2401924e:	ed95 6b02 	vldr	d6, [r5, #8]
24019252:	ee25 2b05 	vmul.f64	d2, d5, d5
24019256:	ee22 1b02 	vmul.f64	d1, d2, d2
2401925a:	ee07 2a90 	vmov	s15, r2
2401925e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
24019262:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019266:	ee37 7b06 	vadd.f64	d7, d7, d6
2401926a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
2401926e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
24019272:	eea5 3b06 	vfma.f64	d3, d5, d6
24019276:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
2401927a:	eea5 6b04 	vfma.f64	d6, d5, d4
2401927e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
24019282:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
24019286:	eea5 7b04 	vfma.f64	d7, d5, d4
2401928a:	eea2 7b06 	vfma.f64	d7, d2, d6
2401928e:	eea3 7b01 	vfma.f64	d7, d3, d1
24019292:	ee20 0b07 	vmul.f64	d0, d0, d7
24019296:	ee10 3a90 	vmov	r3, s1
2401929a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
2401929e:	f248 03bf 	movw	r3, #32959	; 0x80bf
240192a2:	429a      	cmp	r2, r3
240192a4:	f0c0 80b1 	bcc.w	2401940a <powf+0x212>
240192a8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 24019488 <powf+0x290>
240192ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
240192b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240192b4:	dd79      	ble.n	240193aa <powf+0x1b2>
240192b6:	b003      	add	sp, #12
240192b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240192bc:	f7ff bda2 	b.w	24018e04 <__math_oflowf>
240192c0:	4298      	cmp	r0, r3
240192c2:	d32d      	bcc.n	24019320 <powf+0x128>
240192c4:	b952      	cbnz	r2, 240192dc <powf+0xe4>
240192c6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
240192ca:	005b      	lsls	r3, r3, #1
240192cc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
240192d0:	f240 80c9 	bls.w	24019466 <powf+0x26e>
240192d4:	ee37 0aa0 	vadd.f32	s0, s15, s1
240192d8:	b003      	add	sp, #12
240192da:	bd30      	pop	{r4, r5, pc}
240192dc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
240192e0:	d105      	bne.n	240192ee <powf+0xf6>
240192e2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
240192e6:	0064      	lsls	r4, r4, #1
240192e8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
240192ec:	e7f0      	b.n	240192d0 <powf+0xd8>
240192ee:	004b      	lsls	r3, r1, #1
240192f0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
240192f4:	d8ee      	bhi.n	240192d4 <powf+0xdc>
240192f6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
240192fa:	d1eb      	bne.n	240192d4 <powf+0xdc>
240192fc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24019300:	f000 80b1 	beq.w	24019466 <powf+0x26e>
24019304:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24019308:	ea6f 0404 	mvn.w	r4, r4
2401930c:	bf34      	ite	cc
2401930e:	2300      	movcc	r3, #0
24019310:	2301      	movcs	r3, #1
24019312:	0fe4      	lsrs	r4, r4, #31
24019314:	42a3      	cmp	r3, r4
24019316:	f040 80a9 	bne.w	2401946c <powf+0x274>
2401931a:	ee20 0aa0 	vmul.f32	s0, s1, s1
2401931e:	e7db      	b.n	240192d8 <powf+0xe0>
24019320:	004d      	lsls	r5, r1, #1
24019322:	1e6a      	subs	r2, r5, #1
24019324:	429a      	cmp	r2, r3
24019326:	d31c      	bcc.n	24019362 <powf+0x16a>
24019328:	2900      	cmp	r1, #0
2401932a:	ee20 0a00 	vmul.f32	s0, s0, s0
2401932e:	da0f      	bge.n	24019350 <powf+0x158>
24019330:	ee10 0a90 	vmov	r0, s1
24019334:	f7ff ff48 	bl	240191c8 <checkint>
24019338:	2801      	cmp	r0, #1
2401933a:	d109      	bne.n	24019350 <powf+0x158>
2401933c:	eeb1 0a40 	vneg.f32	s0, s0
24019340:	b945      	cbnz	r5, 24019354 <powf+0x15c>
24019342:	2c00      	cmp	r4, #0
24019344:	dac8      	bge.n	240192d8 <powf+0xe0>
24019346:	b003      	add	sp, #12
24019348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401934c:	f7ff bd60 	b.w	24018e10 <__math_divzerof>
24019350:	2000      	movs	r0, #0
24019352:	e7f5      	b.n	24019340 <powf+0x148>
24019354:	2c00      	cmp	r4, #0
24019356:	dabf      	bge.n	240192d8 <powf+0xe0>
24019358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401935c:	ee87 0a80 	vdiv.f32	s0, s15, s0
24019360:	e7ba      	b.n	240192d8 <powf+0xe0>
24019362:	2900      	cmp	r1, #0
24019364:	da1f      	bge.n	240193a6 <powf+0x1ae>
24019366:	ee10 0a90 	vmov	r0, s1
2401936a:	f7ff ff2d 	bl	240191c8 <checkint>
2401936e:	b920      	cbnz	r0, 2401937a <powf+0x182>
24019370:	b003      	add	sp, #12
24019372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019376:	f7ff bd5b 	b.w	24018e30 <__math_invalidf>
2401937a:	2801      	cmp	r0, #1
2401937c:	bf14      	ite	ne
2401937e:	2000      	movne	r0, #0
24019380:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
24019384:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24019388:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
2401938c:	f4bf af48 	bcs.w	24019220 <powf+0x28>
24019390:	ed9f 0a46 	vldr	s0, [pc, #280]	; 240194ac <powf+0x2b4>
24019394:	ee27 0a80 	vmul.f32	s0, s15, s0
24019398:	ee10 3a10 	vmov	r3, s0
2401939c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240193a0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
240193a4:	e73c      	b.n	24019220 <powf+0x28>
240193a6:	2000      	movs	r0, #0
240193a8:	e7ee      	b.n	24019388 <powf+0x190>
240193aa:	ed9f 7b39 	vldr	d7, [pc, #228]	; 24019490 <powf+0x298>
240193ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
240193b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240193b6:	dd10      	ble.n	240193da <powf+0x1e2>
240193b8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
240193bc:	2800      	cmp	r0, #0
240193be:	d158      	bne.n	24019472 <powf+0x27a>
240193c0:	9300      	str	r3, [sp, #0]
240193c2:	eddd 7a00 	vldr	s15, [sp]
240193c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240193ca:	ee77 7a87 	vadd.f32	s15, s15, s14
240193ce:	eef4 7a47 	vcmp.f32	s15, s14
240193d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240193d6:	f47f af6e 	bne.w	240192b6 <powf+0xbe>
240193da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24019498 <powf+0x2a0>
240193de:	eeb4 0bc7 	vcmpe.f64	d0, d7
240193e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240193e6:	d804      	bhi.n	240193f2 <powf+0x1fa>
240193e8:	b003      	add	sp, #12
240193ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240193ee:	f7ff bcfd 	b.w	24018dec <__math_uflowf>
240193f2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 240194a0 <powf+0x2a8>
240193f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
240193fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240193fe:	d504      	bpl.n	2401940a <powf+0x212>
24019400:	b003      	add	sp, #12
24019402:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019406:	f7ff bcf7 	b.w	24018df8 <__math_may_uflowf>
2401940a:	4b29      	ldr	r3, [pc, #164]	; (240194b0 <powf+0x2b8>)
2401940c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
24019410:	ee30 6b07 	vadd.f64	d6, d0, d7
24019414:	ee16 2a10 	vmov	r2, s12
24019418:	ee36 7b47 	vsub.f64	d7, d6, d7
2401941c:	f002 011f 	and.w	r1, r2, #31
24019420:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24019424:	ee30 7b47 	vsub.f64	d7, d0, d7
24019428:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401942c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24019430:	ee27 4b07 	vmul.f64	d4, d7, d7
24019434:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
24019438:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
2401943c:	eea7 6b05 	vfma.f64	d6, d7, d5
24019440:	686d      	ldr	r5, [r5, #4]
24019442:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
24019446:	1882      	adds	r2, r0, r2
24019448:	2300      	movs	r3, #0
2401944a:	1918      	adds	r0, r3, r4
2401944c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24019450:	eea7 0b05 	vfma.f64	d0, d7, d5
24019454:	ec41 0b17 	vmov	d7, r0, r1
24019458:	eea6 0b04 	vfma.f64	d0, d6, d4
2401945c:	ee20 0b07 	vmul.f64	d0, d0, d7
24019460:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019464:	e738      	b.n	240192d8 <powf+0xe0>
24019466:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401946a:	e735      	b.n	240192d8 <powf+0xe0>
2401946c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 240194b4 <powf+0x2bc>
24019470:	e732      	b.n	240192d8 <powf+0xe0>
24019472:	9301      	str	r3, [sp, #4]
24019474:	eddd 7a01 	vldr	s15, [sp, #4]
24019478:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401947c:	ee77 7a67 	vsub.f32	s15, s14, s15
24019480:	e7a5      	b.n	240193ce <powf+0x1d6>
24019482:	bf00      	nop
24019484:	f3af 8000 	nop.w
24019488:	ffd1d571 	.word	0xffd1d571
2401948c:	405fffff 	.word	0x405fffff
24019490:	ffa3aae2 	.word	0xffa3aae2
24019494:	405fffff 	.word	0x405fffff
24019498:	00000000 	.word	0x00000000
2401949c:	c062c000 	.word	0xc062c000
240194a0:	00000000 	.word	0x00000000
240194a4:	c062a000 	.word	0xc062a000
240194a8:	24033538 	.word	0x24033538
240194ac:	4b000000 	.word	0x4b000000
240194b0:	240331a8 	.word	0x240331a8
240194b4:	00000000 	.word	0x00000000

240194b8 <tanf>:
240194b8:	ee10 3a10 	vmov	r3, s0
240194bc:	b507      	push	{r0, r1, r2, lr}
240194be:	4a12      	ldr	r2, [pc, #72]	; (24019508 <tanf+0x50>)
240194c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240194c4:	4293      	cmp	r3, r2
240194c6:	dc07      	bgt.n	240194d8 <tanf+0x20>
240194c8:	eddf 0a10 	vldr	s1, [pc, #64]	; 2401950c <tanf+0x54>
240194cc:	2001      	movs	r0, #1
240194ce:	b003      	add	sp, #12
240194d0:	f85d eb04 	ldr.w	lr, [sp], #4
240194d4:	f001 b916 	b.w	2401a704 <__kernel_tanf>
240194d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
240194dc:	db04      	blt.n	240194e8 <tanf+0x30>
240194de:	ee30 0a40 	vsub.f32	s0, s0, s0
240194e2:	b003      	add	sp, #12
240194e4:	f85d fb04 	ldr.w	pc, [sp], #4
240194e8:	4668      	mov	r0, sp
240194ea:	f000 f9a9 	bl	24019840 <__ieee754_rem_pio2f>
240194ee:	0040      	lsls	r0, r0, #1
240194f0:	f000 0002 	and.w	r0, r0, #2
240194f4:	eddd 0a01 	vldr	s1, [sp, #4]
240194f8:	ed9d 0a00 	vldr	s0, [sp]
240194fc:	f1c0 0001 	rsb	r0, r0, #1
24019500:	f001 f900 	bl	2401a704 <__kernel_tanf>
24019504:	e7ed      	b.n	240194e2 <tanf+0x2a>
24019506:	bf00      	nop
24019508:	3f490fda 	.word	0x3f490fda
2401950c:	00000000 	.word	0x00000000

24019510 <tanhf>:
24019510:	b510      	push	{r4, lr}
24019512:	ee10 4a10 	vmov	r4, s0
24019516:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
2401951a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401951e:	ed2d 8b02 	vpush	{d8}
24019522:	eeb0 7a40 	vmov.f32	s14, s0
24019526:	db0c      	blt.n	24019542 <tanhf+0x32>
24019528:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401952c:	eec0 7a07 	vdiv.f32	s15, s0, s14
24019530:	2c00      	cmp	r4, #0
24019532:	bfac      	ite	ge
24019534:	ee37 0a80 	vaddge.f32	s0, s15, s0
24019538:	ee37 0ac0 	vsublt.f32	s0, s15, s0
2401953c:	ecbd 8b02 	vpop	{d8}
24019540:	bd10      	pop	{r4, pc}
24019542:	4a1b      	ldr	r2, [pc, #108]	; (240195b0 <tanhf+0xa0>)
24019544:	4293      	cmp	r3, r2
24019546:	dc30      	bgt.n	240195aa <tanhf+0x9a>
24019548:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401954c:	da06      	bge.n	2401955c <tanhf+0x4c>
2401954e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24019552:	ee70 7a27 	vadd.f32	s15, s0, s15
24019556:	ee27 0a80 	vmul.f32	s0, s15, s0
2401955a:	e7ef      	b.n	2401953c <tanhf+0x2c>
2401955c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24019560:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
24019564:	db12      	blt.n	2401958c <tanhf+0x7c>
24019566:	f7ff fd1b 	bl	24018fa0 <fabsf>
2401956a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401956e:	f001 fab1 	bl	2401aad4 <expm1f>
24019572:	ee30 0a08 	vadd.f32	s0, s0, s16
24019576:	eec8 7a00 	vdiv.f32	s15, s16, s0
2401957a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401957e:	ee30 0a67 	vsub.f32	s0, s0, s15
24019582:	2c00      	cmp	r4, #0
24019584:	bfb8      	it	lt
24019586:	eeb1 0a40 	vneglt.f32	s0, s0
2401958a:	e7d7      	b.n	2401953c <tanhf+0x2c>
2401958c:	f7ff fd08 	bl	24018fa0 <fabsf>
24019590:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
24019594:	ee20 0a27 	vmul.f32	s0, s0, s15
24019598:	f001 fa9c 	bl	2401aad4 <expm1f>
2401959c:	ee70 7a08 	vadd.f32	s15, s0, s16
240195a0:	eeb1 7a40 	vneg.f32	s14, s0
240195a4:	ee87 0a27 	vdiv.f32	s0, s14, s15
240195a8:	e7eb      	b.n	24019582 <tanhf+0x72>
240195aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240195ae:	e7e8      	b.n	24019582 <tanhf+0x72>
240195b0:	41afffff 	.word	0x41afffff
240195b4:	00000000 	.word	0x00000000

240195b8 <__ieee754_rem_pio2>:
240195b8:	b570      	push	{r4, r5, r6, lr}
240195ba:	eeb0 7b40 	vmov.f64	d7, d0
240195be:	ee17 5a90 	vmov	r5, s15
240195c2:	4b99      	ldr	r3, [pc, #612]	; (24019828 <__ieee754_rem_pio2+0x270>)
240195c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
240195c8:	429e      	cmp	r6, r3
240195ca:	b088      	sub	sp, #32
240195cc:	4604      	mov	r4, r0
240195ce:	dc07      	bgt.n	240195e0 <__ieee754_rem_pio2+0x28>
240195d0:	2200      	movs	r2, #0
240195d2:	2300      	movs	r3, #0
240195d4:	ed84 0b00 	vstr	d0, [r4]
240195d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
240195dc:	2000      	movs	r0, #0
240195de:	e01b      	b.n	24019618 <__ieee754_rem_pio2+0x60>
240195e0:	4b92      	ldr	r3, [pc, #584]	; (2401982c <__ieee754_rem_pio2+0x274>)
240195e2:	429e      	cmp	r6, r3
240195e4:	dc3b      	bgt.n	2401965e <__ieee754_rem_pio2+0xa6>
240195e6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
240195ea:	2d00      	cmp	r5, #0
240195ec:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 240197e8 <__ieee754_rem_pio2+0x230>
240195f0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
240195f4:	dd19      	ble.n	2401962a <__ieee754_rem_pio2+0x72>
240195f6:	ee30 7b46 	vsub.f64	d7, d0, d6
240195fa:	429e      	cmp	r6, r3
240195fc:	d00e      	beq.n	2401961c <__ieee754_rem_pio2+0x64>
240195fe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 240197f0 <__ieee754_rem_pio2+0x238>
24019602:	ee37 5b46 	vsub.f64	d5, d7, d6
24019606:	ee37 7b45 	vsub.f64	d7, d7, d5
2401960a:	ed84 5b00 	vstr	d5, [r4]
2401960e:	ee37 7b46 	vsub.f64	d7, d7, d6
24019612:	ed84 7b02 	vstr	d7, [r4, #8]
24019616:	2001      	movs	r0, #1
24019618:	b008      	add	sp, #32
2401961a:	bd70      	pop	{r4, r5, r6, pc}
2401961c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 240197f8 <__ieee754_rem_pio2+0x240>
24019620:	ee37 7b46 	vsub.f64	d7, d7, d6
24019624:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24019800 <__ieee754_rem_pio2+0x248>
24019628:	e7eb      	b.n	24019602 <__ieee754_rem_pio2+0x4a>
2401962a:	429e      	cmp	r6, r3
2401962c:	ee30 7b06 	vadd.f64	d7, d0, d6
24019630:	d00e      	beq.n	24019650 <__ieee754_rem_pio2+0x98>
24019632:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 240197f0 <__ieee754_rem_pio2+0x238>
24019636:	ee37 5b06 	vadd.f64	d5, d7, d6
2401963a:	ee37 7b45 	vsub.f64	d7, d7, d5
2401963e:	ed84 5b00 	vstr	d5, [r4]
24019642:	ee37 7b06 	vadd.f64	d7, d7, d6
24019646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401964a:	ed84 7b02 	vstr	d7, [r4, #8]
2401964e:	e7e3      	b.n	24019618 <__ieee754_rem_pio2+0x60>
24019650:	ed9f 6b69 	vldr	d6, [pc, #420]	; 240197f8 <__ieee754_rem_pio2+0x240>
24019654:	ee37 7b06 	vadd.f64	d7, d7, d6
24019658:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24019800 <__ieee754_rem_pio2+0x248>
2401965c:	e7eb      	b.n	24019636 <__ieee754_rem_pio2+0x7e>
2401965e:	4b74      	ldr	r3, [pc, #464]	; (24019830 <__ieee754_rem_pio2+0x278>)
24019660:	429e      	cmp	r6, r3
24019662:	dc70      	bgt.n	24019746 <__ieee754_rem_pio2+0x18e>
24019664:	f001 f92e 	bl	2401a8c4 <fabs>
24019668:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401966c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 24019808 <__ieee754_rem_pio2+0x250>
24019670:	eea0 7b06 	vfma.f64	d7, d0, d6
24019674:	eefd 7bc7 	vcvt.s32.f64	s15, d7
24019678:	eeb8 5be7 	vcvt.f64.s32	d5, s15
2401967c:	ee17 0a90 	vmov	r0, s15
24019680:	eeb1 4b45 	vneg.f64	d4, d5
24019684:	ed9f 7b58 	vldr	d7, [pc, #352]	; 240197e8 <__ieee754_rem_pio2+0x230>
24019688:	eea5 0b47 	vfms.f64	d0, d5, d7
2401968c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 240197f0 <__ieee754_rem_pio2+0x238>
24019690:	281f      	cmp	r0, #31
24019692:	ee25 7b07 	vmul.f64	d7, d5, d7
24019696:	ee30 6b47 	vsub.f64	d6, d0, d7
2401969a:	dc08      	bgt.n	240196ae <__ieee754_rem_pio2+0xf6>
2401969c:	4b65      	ldr	r3, [pc, #404]	; (24019834 <__ieee754_rem_pio2+0x27c>)
2401969e:	1e42      	subs	r2, r0, #1
240196a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
240196a4:	42b3      	cmp	r3, r6
240196a6:	d002      	beq.n	240196ae <__ieee754_rem_pio2+0xf6>
240196a8:	ed84 6b00 	vstr	d6, [r4]
240196ac:	e026      	b.n	240196fc <__ieee754_rem_pio2+0x144>
240196ae:	ee16 3a90 	vmov	r3, s13
240196b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
240196b6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
240196ba:	2b10      	cmp	r3, #16
240196bc:	ea4f 5226 	mov.w	r2, r6, asr #20
240196c0:	ddf2      	ble.n	240196a8 <__ieee754_rem_pio2+0xf0>
240196c2:	eeb0 6b40 	vmov.f64	d6, d0
240196c6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 240197f8 <__ieee754_rem_pio2+0x240>
240196ca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 24019800 <__ieee754_rem_pio2+0x248>
240196ce:	eea4 6b07 	vfma.f64	d6, d4, d7
240196d2:	ee30 0b46 	vsub.f64	d0, d0, d6
240196d6:	eea4 0b07 	vfma.f64	d0, d4, d7
240196da:	eeb0 7b40 	vmov.f64	d7, d0
240196de:	ee95 7b03 	vfnms.f64	d7, d5, d3
240196e2:	ee36 3b47 	vsub.f64	d3, d6, d7
240196e6:	ee13 3a90 	vmov	r3, s7
240196ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
240196ee:	1ad3      	subs	r3, r2, r3
240196f0:	2b31      	cmp	r3, #49	; 0x31
240196f2:	dc17      	bgt.n	24019724 <__ieee754_rem_pio2+0x16c>
240196f4:	eeb0 0b46 	vmov.f64	d0, d6
240196f8:	ed84 3b00 	vstr	d3, [r4]
240196fc:	ed94 6b00 	vldr	d6, [r4]
24019700:	2d00      	cmp	r5, #0
24019702:	ee30 0b46 	vsub.f64	d0, d0, d6
24019706:	ee30 0b47 	vsub.f64	d0, d0, d7
2401970a:	ed84 0b02 	vstr	d0, [r4, #8]
2401970e:	da83      	bge.n	24019618 <__ieee754_rem_pio2+0x60>
24019710:	eeb1 6b46 	vneg.f64	d6, d6
24019714:	eeb1 0b40 	vneg.f64	d0, d0
24019718:	ed84 6b00 	vstr	d6, [r4]
2401971c:	ed84 0b02 	vstr	d0, [r4, #8]
24019720:	4240      	negs	r0, r0
24019722:	e779      	b.n	24019618 <__ieee754_rem_pio2+0x60>
24019724:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 24019810 <__ieee754_rem_pio2+0x258>
24019728:	eeb0 0b46 	vmov.f64	d0, d6
2401972c:	eea4 0b03 	vfma.f64	d0, d4, d3
24019730:	ee36 7b40 	vsub.f64	d7, d6, d0
24019734:	ed9f 6b38 	vldr	d6, [pc, #224]	; 24019818 <__ieee754_rem_pio2+0x260>
24019738:	eea4 7b03 	vfma.f64	d7, d4, d3
2401973c:	ee95 7b06 	vfnms.f64	d7, d5, d6
24019740:	ee30 6b47 	vsub.f64	d6, d0, d7
24019744:	e7b0      	b.n	240196a8 <__ieee754_rem_pio2+0xf0>
24019746:	4b3c      	ldr	r3, [pc, #240]	; (24019838 <__ieee754_rem_pio2+0x280>)
24019748:	429e      	cmp	r6, r3
2401974a:	dd06      	ble.n	2401975a <__ieee754_rem_pio2+0x1a2>
2401974c:	ee30 7b40 	vsub.f64	d7, d0, d0
24019750:	ed80 7b02 	vstr	d7, [r0, #8]
24019754:	ed80 7b00 	vstr	d7, [r0]
24019758:	e740      	b.n	240195dc <__ieee754_rem_pio2+0x24>
2401975a:	1532      	asrs	r2, r6, #20
2401975c:	ee10 0a10 	vmov	r0, s0
24019760:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
24019764:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
24019768:	ec41 0b17 	vmov	d7, r0, r1
2401976c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24019770:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 24019820 <__ieee754_rem_pio2+0x268>
24019774:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24019778:	ee37 7b46 	vsub.f64	d7, d7, d6
2401977c:	ed8d 6b02 	vstr	d6, [sp, #8]
24019780:	ee27 7b05 	vmul.f64	d7, d7, d5
24019784:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24019788:	a902      	add	r1, sp, #8
2401978a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401978e:	ee37 7b46 	vsub.f64	d7, d7, d6
24019792:	ed8d 6b04 	vstr	d6, [sp, #16]
24019796:	ee27 7b05 	vmul.f64	d7, d7, d5
2401979a:	ed8d 7b06 	vstr	d7, [sp, #24]
2401979e:	2603      	movs	r6, #3
240197a0:	4608      	mov	r0, r1
240197a2:	ed91 7b04 	vldr	d7, [r1, #16]
240197a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
240197aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240197ae:	4633      	mov	r3, r6
240197b0:	f1a1 0108 	sub.w	r1, r1, #8
240197b4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
240197b8:	d0f3      	beq.n	240197a2 <__ieee754_rem_pio2+0x1ea>
240197ba:	4920      	ldr	r1, [pc, #128]	; (2401983c <__ieee754_rem_pio2+0x284>)
240197bc:	9101      	str	r1, [sp, #4]
240197be:	2102      	movs	r1, #2
240197c0:	9100      	str	r1, [sp, #0]
240197c2:	4621      	mov	r1, r4
240197c4:	f000 f978 	bl	24019ab8 <__kernel_rem_pio2>
240197c8:	2d00      	cmp	r5, #0
240197ca:	f6bf af25 	bge.w	24019618 <__ieee754_rem_pio2+0x60>
240197ce:	ed94 7b00 	vldr	d7, [r4]
240197d2:	eeb1 7b47 	vneg.f64	d7, d7
240197d6:	ed84 7b00 	vstr	d7, [r4]
240197da:	ed94 7b02 	vldr	d7, [r4, #8]
240197de:	eeb1 7b47 	vneg.f64	d7, d7
240197e2:	ed84 7b02 	vstr	d7, [r4, #8]
240197e6:	e79b      	b.n	24019720 <__ieee754_rem_pio2+0x168>
240197e8:	54400000 	.word	0x54400000
240197ec:	3ff921fb 	.word	0x3ff921fb
240197f0:	1a626331 	.word	0x1a626331
240197f4:	3dd0b461 	.word	0x3dd0b461
240197f8:	1a600000 	.word	0x1a600000
240197fc:	3dd0b461 	.word	0x3dd0b461
24019800:	2e037073 	.word	0x2e037073
24019804:	3ba3198a 	.word	0x3ba3198a
24019808:	6dc9c883 	.word	0x6dc9c883
2401980c:	3fe45f30 	.word	0x3fe45f30
24019810:	2e000000 	.word	0x2e000000
24019814:	3ba3198a 	.word	0x3ba3198a
24019818:	252049c1 	.word	0x252049c1
2401981c:	397b839a 	.word	0x397b839a
24019820:	00000000 	.word	0x00000000
24019824:	41700000 	.word	0x41700000
24019828:	3fe921fb 	.word	0x3fe921fb
2401982c:	4002d97b 	.word	0x4002d97b
24019830:	413921fb 	.word	0x413921fb
24019834:	240337a0 	.word	0x240337a0
24019838:	7fefffff 	.word	0x7fefffff
2401983c:	24033820 	.word	0x24033820

24019840 <__ieee754_rem_pio2f>:
24019840:	b5f0      	push	{r4, r5, r6, r7, lr}
24019842:	ee10 6a10 	vmov	r6, s0
24019846:	4b8e      	ldr	r3, [pc, #568]	; (24019a80 <__ieee754_rem_pio2f+0x240>)
24019848:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
2401984c:	429d      	cmp	r5, r3
2401984e:	b087      	sub	sp, #28
24019850:	eef0 7a40 	vmov.f32	s15, s0
24019854:	4604      	mov	r4, r0
24019856:	dc05      	bgt.n	24019864 <__ieee754_rem_pio2f+0x24>
24019858:	2300      	movs	r3, #0
2401985a:	ed80 0a00 	vstr	s0, [r0]
2401985e:	6043      	str	r3, [r0, #4]
24019860:	2000      	movs	r0, #0
24019862:	e01a      	b.n	2401989a <__ieee754_rem_pio2f+0x5a>
24019864:	4b87      	ldr	r3, [pc, #540]	; (24019a84 <__ieee754_rem_pio2f+0x244>)
24019866:	429d      	cmp	r5, r3
24019868:	dc46      	bgt.n	240198f8 <__ieee754_rem_pio2f+0xb8>
2401986a:	2e00      	cmp	r6, #0
2401986c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 24019a88 <__ieee754_rem_pio2f+0x248>
24019870:	4b86      	ldr	r3, [pc, #536]	; (24019a8c <__ieee754_rem_pio2f+0x24c>)
24019872:	f025 050f 	bic.w	r5, r5, #15
24019876:	dd1f      	ble.n	240198b8 <__ieee754_rem_pio2f+0x78>
24019878:	429d      	cmp	r5, r3
2401987a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401987e:	d00e      	beq.n	2401989e <__ieee754_rem_pio2f+0x5e>
24019880:	ed9f 7a83 	vldr	s14, [pc, #524]	; 24019a90 <__ieee754_rem_pio2f+0x250>
24019884:	ee37 0ac7 	vsub.f32	s0, s15, s14
24019888:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401988c:	ed80 0a00 	vstr	s0, [r0]
24019890:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019894:	2001      	movs	r0, #1
24019896:	edc4 7a01 	vstr	s15, [r4, #4]
2401989a:	b007      	add	sp, #28
2401989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401989e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24019a94 <__ieee754_rem_pio2f+0x254>
240198a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 24019a98 <__ieee754_rem_pio2f+0x258>
240198a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
240198aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
240198ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
240198b2:	edc0 6a00 	vstr	s13, [r0]
240198b6:	e7eb      	b.n	24019890 <__ieee754_rem_pio2f+0x50>
240198b8:	429d      	cmp	r5, r3
240198ba:	ee77 7a80 	vadd.f32	s15, s15, s0
240198be:	d00e      	beq.n	240198de <__ieee754_rem_pio2f+0x9e>
240198c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 24019a90 <__ieee754_rem_pio2f+0x250>
240198c4:	ee37 0a87 	vadd.f32	s0, s15, s14
240198c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
240198cc:	ed80 0a00 	vstr	s0, [r0]
240198d0:	ee77 7a87 	vadd.f32	s15, s15, s14
240198d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240198d8:	edc4 7a01 	vstr	s15, [r4, #4]
240198dc:	e7dd      	b.n	2401989a <__ieee754_rem_pio2f+0x5a>
240198de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24019a94 <__ieee754_rem_pio2f+0x254>
240198e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 24019a98 <__ieee754_rem_pio2f+0x258>
240198e6:	ee77 7a80 	vadd.f32	s15, s15, s0
240198ea:	ee77 6a87 	vadd.f32	s13, s15, s14
240198ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
240198f2:	edc0 6a00 	vstr	s13, [r0]
240198f6:	e7eb      	b.n	240198d0 <__ieee754_rem_pio2f+0x90>
240198f8:	4b68      	ldr	r3, [pc, #416]	; (24019a9c <__ieee754_rem_pio2f+0x25c>)
240198fa:	429d      	cmp	r5, r3
240198fc:	dc72      	bgt.n	240199e4 <__ieee754_rem_pio2f+0x1a4>
240198fe:	f7ff fb4f 	bl	24018fa0 <fabsf>
24019902:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24019aa0 <__ieee754_rem_pio2f+0x260>
24019906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401990a:	eee0 7a07 	vfma.f32	s15, s0, s14
2401990e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24019916:	ee17 0a90 	vmov	r0, s15
2401991a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24019a88 <__ieee754_rem_pio2f+0x248>
2401991e:	eea7 0a67 	vfms.f32	s0, s14, s15
24019922:	281f      	cmp	r0, #31
24019924:	eddf 7a5a 	vldr	s15, [pc, #360]	; 24019a90 <__ieee754_rem_pio2f+0x250>
24019928:	ee67 7a27 	vmul.f32	s15, s14, s15
2401992c:	eeb1 6a47 	vneg.f32	s12, s14
24019930:	ee70 6a67 	vsub.f32	s13, s0, s15
24019934:	ee16 2a90 	vmov	r2, s13
24019938:	dc1c      	bgt.n	24019974 <__ieee754_rem_pio2f+0x134>
2401993a:	495a      	ldr	r1, [pc, #360]	; (24019aa4 <__ieee754_rem_pio2f+0x264>)
2401993c:	1e47      	subs	r7, r0, #1
2401993e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
24019942:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
24019946:	428b      	cmp	r3, r1
24019948:	d014      	beq.n	24019974 <__ieee754_rem_pio2f+0x134>
2401994a:	6022      	str	r2, [r4, #0]
2401994c:	ed94 7a00 	vldr	s14, [r4]
24019950:	ee30 0a47 	vsub.f32	s0, s0, s14
24019954:	2e00      	cmp	r6, #0
24019956:	ee30 0a67 	vsub.f32	s0, s0, s15
2401995a:	ed84 0a01 	vstr	s0, [r4, #4]
2401995e:	da9c      	bge.n	2401989a <__ieee754_rem_pio2f+0x5a>
24019960:	eeb1 7a47 	vneg.f32	s14, s14
24019964:	eeb1 0a40 	vneg.f32	s0, s0
24019968:	ed84 7a00 	vstr	s14, [r4]
2401996c:	ed84 0a01 	vstr	s0, [r4, #4]
24019970:	4240      	negs	r0, r0
24019972:	e792      	b.n	2401989a <__ieee754_rem_pio2f+0x5a>
24019974:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24019978:	15eb      	asrs	r3, r5, #23
2401997a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
2401997e:	2d08      	cmp	r5, #8
24019980:	dde3      	ble.n	2401994a <__ieee754_rem_pio2f+0x10a>
24019982:	eddf 7a44 	vldr	s15, [pc, #272]	; 24019a94 <__ieee754_rem_pio2f+0x254>
24019986:	eddf 5a44 	vldr	s11, [pc, #272]	; 24019a98 <__ieee754_rem_pio2f+0x258>
2401998a:	eef0 6a40 	vmov.f32	s13, s0
2401998e:	eee6 6a27 	vfma.f32	s13, s12, s15
24019992:	ee30 0a66 	vsub.f32	s0, s0, s13
24019996:	eea6 0a27 	vfma.f32	s0, s12, s15
2401999a:	eef0 7a40 	vmov.f32	s15, s0
2401999e:	eed7 7a25 	vfnms.f32	s15, s14, s11
240199a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
240199a6:	ee15 2a90 	vmov	r2, s11
240199aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
240199ae:	1a5b      	subs	r3, r3, r1
240199b0:	2b19      	cmp	r3, #25
240199b2:	dc04      	bgt.n	240199be <__ieee754_rem_pio2f+0x17e>
240199b4:	edc4 5a00 	vstr	s11, [r4]
240199b8:	eeb0 0a66 	vmov.f32	s0, s13
240199bc:	e7c6      	b.n	2401994c <__ieee754_rem_pio2f+0x10c>
240199be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24019aa8 <__ieee754_rem_pio2f+0x268>
240199c2:	eeb0 0a66 	vmov.f32	s0, s13
240199c6:	eea6 0a25 	vfma.f32	s0, s12, s11
240199ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
240199ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 24019aac <__ieee754_rem_pio2f+0x26c>
240199d2:	eee6 7a25 	vfma.f32	s15, s12, s11
240199d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
240199da:	ee30 7a67 	vsub.f32	s14, s0, s15
240199de:	ed84 7a00 	vstr	s14, [r4]
240199e2:	e7b3      	b.n	2401994c <__ieee754_rem_pio2f+0x10c>
240199e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
240199e8:	db06      	blt.n	240199f8 <__ieee754_rem_pio2f+0x1b8>
240199ea:	ee70 7a40 	vsub.f32	s15, s0, s0
240199ee:	edc0 7a01 	vstr	s15, [r0, #4]
240199f2:	edc0 7a00 	vstr	s15, [r0]
240199f6:	e733      	b.n	24019860 <__ieee754_rem_pio2f+0x20>
240199f8:	15ea      	asrs	r2, r5, #23
240199fa:	3a86      	subs	r2, #134	; 0x86
240199fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
24019a00:	ee07 3a90 	vmov	s15, r3
24019a04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24019a08:	eddf 6a29 	vldr	s13, [pc, #164]	; 24019ab0 <__ieee754_rem_pio2f+0x270>
24019a0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24019a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019a14:	ed8d 7a03 	vstr	s14, [sp, #12]
24019a18:	ee67 7aa6 	vmul.f32	s15, s15, s13
24019a1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24019a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24019a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019a28:	ed8d 7a04 	vstr	s14, [sp, #16]
24019a2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24019a30:	eef5 7a40 	vcmp.f32	s15, #0.0
24019a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a38:	edcd 7a05 	vstr	s15, [sp, #20]
24019a3c:	d11e      	bne.n	24019a7c <__ieee754_rem_pio2f+0x23c>
24019a3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
24019a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a46:	bf14      	ite	ne
24019a48:	2302      	movne	r3, #2
24019a4a:	2301      	moveq	r3, #1
24019a4c:	4919      	ldr	r1, [pc, #100]	; (24019ab4 <__ieee754_rem_pio2f+0x274>)
24019a4e:	9101      	str	r1, [sp, #4]
24019a50:	2102      	movs	r1, #2
24019a52:	9100      	str	r1, [sp, #0]
24019a54:	a803      	add	r0, sp, #12
24019a56:	4621      	mov	r1, r4
24019a58:	f000 fbde 	bl	2401a218 <__kernel_rem_pio2f>
24019a5c:	2e00      	cmp	r6, #0
24019a5e:	f6bf af1c 	bge.w	2401989a <__ieee754_rem_pio2f+0x5a>
24019a62:	edd4 7a00 	vldr	s15, [r4]
24019a66:	eef1 7a67 	vneg.f32	s15, s15
24019a6a:	edc4 7a00 	vstr	s15, [r4]
24019a6e:	edd4 7a01 	vldr	s15, [r4, #4]
24019a72:	eef1 7a67 	vneg.f32	s15, s15
24019a76:	edc4 7a01 	vstr	s15, [r4, #4]
24019a7a:	e779      	b.n	24019970 <__ieee754_rem_pio2f+0x130>
24019a7c:	2303      	movs	r3, #3
24019a7e:	e7e5      	b.n	24019a4c <__ieee754_rem_pio2f+0x20c>
24019a80:	3f490fd8 	.word	0x3f490fd8
24019a84:	4016cbe3 	.word	0x4016cbe3
24019a88:	3fc90f80 	.word	0x3fc90f80
24019a8c:	3fc90fd0 	.word	0x3fc90fd0
24019a90:	37354443 	.word	0x37354443
24019a94:	37354400 	.word	0x37354400
24019a98:	2e85a308 	.word	0x2e85a308
24019a9c:	43490f80 	.word	0x43490f80
24019aa0:	3f22f984 	.word	0x3f22f984
24019aa4:	24033928 	.word	0x24033928
24019aa8:	2e85a300 	.word	0x2e85a300
24019aac:	248d3132 	.word	0x248d3132
24019ab0:	43800000 	.word	0x43800000
24019ab4:	240339a8 	.word	0x240339a8

24019ab8 <__kernel_rem_pio2>:
24019ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24019abc:	ed2d 8b06 	vpush	{d8-d10}
24019ac0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
24019ac4:	460f      	mov	r7, r1
24019ac6:	9002      	str	r0, [sp, #8]
24019ac8:	49c5      	ldr	r1, [pc, #788]	; (24019de0 <__kernel_rem_pio2+0x328>)
24019aca:	98a2      	ldr	r0, [sp, #648]	; 0x288
24019acc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
24019ad0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
24019ad4:	9301      	str	r3, [sp, #4]
24019ad6:	f112 0f14 	cmn.w	r2, #20
24019ada:	bfa8      	it	ge
24019adc:	2018      	movge	r0, #24
24019ade:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
24019ae2:	bfb8      	it	lt
24019ae4:	2000      	movlt	r0, #0
24019ae6:	f06f 0417 	mvn.w	r4, #23
24019aea:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 24019dc8 <__kernel_rem_pio2+0x310>
24019aee:	bfa4      	itt	ge
24019af0:	f1a2 0a03 	subge.w	sl, r2, #3
24019af4:	fb9a f0f0 	sdivge	r0, sl, r0
24019af8:	fb00 4404 	mla	r4, r0, r4, r4
24019afc:	1a46      	subs	r6, r0, r1
24019afe:	4414      	add	r4, r2
24019b00:	eb09 0c01 	add.w	ip, r9, r1
24019b04:	ad1a      	add	r5, sp, #104	; 0x68
24019b06:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
24019b0a:	2200      	movs	r2, #0
24019b0c:	4562      	cmp	r2, ip
24019b0e:	dd10      	ble.n	24019b32 <__kernel_rem_pio2+0x7a>
24019b10:	9a01      	ldr	r2, [sp, #4]
24019b12:	ab1a      	add	r3, sp, #104	; 0x68
24019b14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24019b18:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
24019b1c:	f04f 0c00 	mov.w	ip, #0
24019b20:	45cc      	cmp	ip, r9
24019b22:	dc26      	bgt.n	24019b72 <__kernel_rem_pio2+0xba>
24019b24:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 24019dc8 <__kernel_rem_pio2+0x310>
24019b28:	f8dd 8008 	ldr.w	r8, [sp, #8]
24019b2c:	4616      	mov	r6, r2
24019b2e:	2500      	movs	r5, #0
24019b30:	e015      	b.n	24019b5e <__kernel_rem_pio2+0xa6>
24019b32:	42d6      	cmn	r6, r2
24019b34:	d409      	bmi.n	24019b4a <__kernel_rem_pio2+0x92>
24019b36:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
24019b3a:	ee07 3a90 	vmov	s15, r3
24019b3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019b42:	eca5 7b02 	vstmia	r5!, {d7}
24019b46:	3201      	adds	r2, #1
24019b48:	e7e0      	b.n	24019b0c <__kernel_rem_pio2+0x54>
24019b4a:	eeb0 7b46 	vmov.f64	d7, d6
24019b4e:	e7f8      	b.n	24019b42 <__kernel_rem_pio2+0x8a>
24019b50:	ecb8 5b02 	vldmia	r8!, {d5}
24019b54:	ed96 6b00 	vldr	d6, [r6]
24019b58:	3501      	adds	r5, #1
24019b5a:	eea5 7b06 	vfma.f64	d7, d5, d6
24019b5e:	428d      	cmp	r5, r1
24019b60:	f1a6 0608 	sub.w	r6, r6, #8
24019b64:	ddf4      	ble.n	24019b50 <__kernel_rem_pio2+0x98>
24019b66:	ecaa 7b02 	vstmia	sl!, {d7}
24019b6a:	f10c 0c01 	add.w	ip, ip, #1
24019b6e:	3208      	adds	r2, #8
24019b70:	e7d6      	b.n	24019b20 <__kernel_rem_pio2+0x68>
24019b72:	ab06      	add	r3, sp, #24
24019b74:	ed9f 9b96 	vldr	d9, [pc, #600]	; 24019dd0 <__kernel_rem_pio2+0x318>
24019b78:	ed9f ab97 	vldr	d10, [pc, #604]	; 24019dd8 <__kernel_rem_pio2+0x320>
24019b7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
24019b80:	9303      	str	r3, [sp, #12]
24019b82:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
24019b86:	464d      	mov	r5, r9
24019b88:	00eb      	lsls	r3, r5, #3
24019b8a:	9304      	str	r3, [sp, #16]
24019b8c:	ab92      	add	r3, sp, #584	; 0x248
24019b8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24019b92:	f10d 0b18 	add.w	fp, sp, #24
24019b96:	ab6a      	add	r3, sp, #424	; 0x1a8
24019b98:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
24019b9c:	465e      	mov	r6, fp
24019b9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24019ba2:	4628      	mov	r0, r5
24019ba4:	2800      	cmp	r0, #0
24019ba6:	f1a2 0208 	sub.w	r2, r2, #8
24019baa:	dc4c      	bgt.n	24019c46 <__kernel_rem_pio2+0x18e>
24019bac:	4620      	mov	r0, r4
24019bae:	9105      	str	r1, [sp, #20]
24019bb0:	f000 ff06 	bl	2401a9c0 <scalbn>
24019bb4:	eeb0 8b40 	vmov.f64	d8, d0
24019bb8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
24019bbc:	ee28 0b00 	vmul.f64	d0, d8, d0
24019bc0:	f000 fe8a 	bl	2401a8d8 <floor>
24019bc4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
24019bc8:	eea0 8b47 	vfms.f64	d8, d0, d7
24019bcc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
24019bd0:	2c00      	cmp	r4, #0
24019bd2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
24019bd6:	ee17 8a90 	vmov	r8, s15
24019bda:	ee38 8b40 	vsub.f64	d8, d8, d0
24019bde:	9905      	ldr	r1, [sp, #20]
24019be0:	dd43      	ble.n	24019c6a <__kernel_rem_pio2+0x1b2>
24019be2:	1e68      	subs	r0, r5, #1
24019be4:	ab06      	add	r3, sp, #24
24019be6:	f1c4 0c18 	rsb	ip, r4, #24
24019bea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
24019bee:	fa46 f20c 	asr.w	r2, r6, ip
24019bf2:	4490      	add	r8, r2
24019bf4:	fa02 f20c 	lsl.w	r2, r2, ip
24019bf8:	1ab6      	subs	r6, r6, r2
24019bfa:	f1c4 0217 	rsb	r2, r4, #23
24019bfe:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
24019c02:	4116      	asrs	r6, r2
24019c04:	2e00      	cmp	r6, #0
24019c06:	dd3f      	ble.n	24019c88 <__kernel_rem_pio2+0x1d0>
24019c08:	f04f 0c00 	mov.w	ip, #0
24019c0c:	f108 0801 	add.w	r8, r8, #1
24019c10:	4660      	mov	r0, ip
24019c12:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
24019c16:	4565      	cmp	r5, ip
24019c18:	dc6e      	bgt.n	24019cf8 <__kernel_rem_pio2+0x240>
24019c1a:	2c00      	cmp	r4, #0
24019c1c:	dd04      	ble.n	24019c28 <__kernel_rem_pio2+0x170>
24019c1e:	2c01      	cmp	r4, #1
24019c20:	d07f      	beq.n	24019d22 <__kernel_rem_pio2+0x26a>
24019c22:	2c02      	cmp	r4, #2
24019c24:	f000 8087 	beq.w	24019d36 <__kernel_rem_pio2+0x27e>
24019c28:	2e02      	cmp	r6, #2
24019c2a:	d12d      	bne.n	24019c88 <__kernel_rem_pio2+0x1d0>
24019c2c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24019c30:	ee30 8b48 	vsub.f64	d8, d0, d8
24019c34:	b340      	cbz	r0, 24019c88 <__kernel_rem_pio2+0x1d0>
24019c36:	4620      	mov	r0, r4
24019c38:	9105      	str	r1, [sp, #20]
24019c3a:	f000 fec1 	bl	2401a9c0 <scalbn>
24019c3e:	9905      	ldr	r1, [sp, #20]
24019c40:	ee38 8b40 	vsub.f64	d8, d8, d0
24019c44:	e020      	b.n	24019c88 <__kernel_rem_pio2+0x1d0>
24019c46:	ee20 7b09 	vmul.f64	d7, d0, d9
24019c4a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24019c4e:	3801      	subs	r0, #1
24019c50:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24019c54:	eea7 0b4a 	vfms.f64	d0, d7, d10
24019c58:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24019c5c:	eca6 0a01 	vstmia	r6!, {s0}
24019c60:	ed92 0b00 	vldr	d0, [r2]
24019c64:	ee37 0b00 	vadd.f64	d0, d7, d0
24019c68:	e79c      	b.n	24019ba4 <__kernel_rem_pio2+0xec>
24019c6a:	d105      	bne.n	24019c78 <__kernel_rem_pio2+0x1c0>
24019c6c:	1e6a      	subs	r2, r5, #1
24019c6e:	ab06      	add	r3, sp, #24
24019c70:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
24019c74:	15f6      	asrs	r6, r6, #23
24019c76:	e7c5      	b.n	24019c04 <__kernel_rem_pio2+0x14c>
24019c78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24019c7c:	eeb4 8bc7 	vcmpe.f64	d8, d7
24019c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019c84:	da36      	bge.n	24019cf4 <__kernel_rem_pio2+0x23c>
24019c86:	2600      	movs	r6, #0
24019c88:	eeb5 8b40 	vcmp.f64	d8, #0.0
24019c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019c90:	f040 80aa 	bne.w	24019de8 <__kernel_rem_pio2+0x330>
24019c94:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24019c98:	4658      	mov	r0, fp
24019c9a:	2200      	movs	r2, #0
24019c9c:	4548      	cmp	r0, r9
24019c9e:	da52      	bge.n	24019d46 <__kernel_rem_pio2+0x28e>
24019ca0:	2a00      	cmp	r2, #0
24019ca2:	f000 8081 	beq.w	24019da8 <__kernel_rem_pio2+0x2f0>
24019ca6:	ab06      	add	r3, sp, #24
24019ca8:	3c18      	subs	r4, #24
24019caa:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
24019cae:	2b00      	cmp	r3, #0
24019cb0:	f000 8087 	beq.w	24019dc2 <__kernel_rem_pio2+0x30a>
24019cb4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24019cb8:	4620      	mov	r0, r4
24019cba:	f000 fe81 	bl	2401a9c0 <scalbn>
24019cbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
24019cc2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 24019dd0 <__kernel_rem_pio2+0x318>
24019cc6:	a96a      	add	r1, sp, #424	; 0x1a8
24019cc8:	f103 0208 	add.w	r2, r3, #8
24019ccc:	1888      	adds	r0, r1, r2
24019cce:	4659      	mov	r1, fp
24019cd0:	2900      	cmp	r1, #0
24019cd2:	f280 80b7 	bge.w	24019e44 <__kernel_rem_pio2+0x38c>
24019cd6:	4659      	mov	r1, fp
24019cd8:	2900      	cmp	r1, #0
24019cda:	f2c0 80d5 	blt.w	24019e88 <__kernel_rem_pio2+0x3d0>
24019cde:	a86a      	add	r0, sp, #424	; 0x1a8
24019ce0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
24019ce4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 24019dc8 <__kernel_rem_pio2+0x310>
24019ce8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 24019de4 <__kernel_rem_pio2+0x32c>
24019cec:	2400      	movs	r4, #0
24019cee:	ebab 0001 	sub.w	r0, fp, r1
24019cf2:	e0be      	b.n	24019e72 <__kernel_rem_pio2+0x3ba>
24019cf4:	2602      	movs	r6, #2
24019cf6:	e787      	b.n	24019c08 <__kernel_rem_pio2+0x150>
24019cf8:	f8db 2000 	ldr.w	r2, [fp]
24019cfc:	b958      	cbnz	r0, 24019d16 <__kernel_rem_pio2+0x25e>
24019cfe:	b122      	cbz	r2, 24019d0a <__kernel_rem_pio2+0x252>
24019d00:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
24019d04:	f8cb 2000 	str.w	r2, [fp]
24019d08:	2201      	movs	r2, #1
24019d0a:	f10c 0c01 	add.w	ip, ip, #1
24019d0e:	f10b 0b04 	add.w	fp, fp, #4
24019d12:	4610      	mov	r0, r2
24019d14:	e77f      	b.n	24019c16 <__kernel_rem_pio2+0x15e>
24019d16:	ebae 0202 	sub.w	r2, lr, r2
24019d1a:	f8cb 2000 	str.w	r2, [fp]
24019d1e:	4602      	mov	r2, r0
24019d20:	e7f3      	b.n	24019d0a <__kernel_rem_pio2+0x252>
24019d22:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24019d26:	ab06      	add	r3, sp, #24
24019d28:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24019d2c:	f3c2 0216 	ubfx	r2, r2, #0, #23
24019d30:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
24019d34:	e778      	b.n	24019c28 <__kernel_rem_pio2+0x170>
24019d36:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24019d3a:	ab06      	add	r3, sp, #24
24019d3c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24019d40:	f3c2 0215 	ubfx	r2, r2, #0, #22
24019d44:	e7f4      	b.n	24019d30 <__kernel_rem_pio2+0x278>
24019d46:	ab06      	add	r3, sp, #24
24019d48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
24019d4c:	3801      	subs	r0, #1
24019d4e:	431a      	orrs	r2, r3
24019d50:	e7a4      	b.n	24019c9c <__kernel_rem_pio2+0x1e4>
24019d52:	f10c 0c01 	add.w	ip, ip, #1
24019d56:	f852 0d04 	ldr.w	r0, [r2, #-4]!
24019d5a:	2800      	cmp	r0, #0
24019d5c:	d0f9      	beq.n	24019d52 <__kernel_rem_pio2+0x29a>
24019d5e:	9b04      	ldr	r3, [sp, #16]
24019d60:	f503 7312 	add.w	r3, r3, #584	; 0x248
24019d64:	eb0d 0203 	add.w	r2, sp, r3
24019d68:	9b01      	ldr	r3, [sp, #4]
24019d6a:	18e8      	adds	r0, r5, r3
24019d6c:	ab1a      	add	r3, sp, #104	; 0x68
24019d6e:	1c6e      	adds	r6, r5, #1
24019d70:	3a98      	subs	r2, #152	; 0x98
24019d72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
24019d76:	4465      	add	r5, ip
24019d78:	42b5      	cmp	r5, r6
24019d7a:	f6ff af05 	blt.w	24019b88 <__kernel_rem_pio2+0xd0>
24019d7e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
24019d82:	f8dd e008 	ldr.w	lr, [sp, #8]
24019d86:	ee07 3a90 	vmov	s15, r3
24019d8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019d8e:	f04f 0c00 	mov.w	ip, #0
24019d92:	eca0 7b02 	vstmia	r0!, {d7}
24019d96:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24019dc8 <__kernel_rem_pio2+0x310>
24019d9a:	4680      	mov	r8, r0
24019d9c:	458c      	cmp	ip, r1
24019d9e:	dd07      	ble.n	24019db0 <__kernel_rem_pio2+0x2f8>
24019da0:	eca2 7b02 	vstmia	r2!, {d7}
24019da4:	3601      	adds	r6, #1
24019da6:	e7e7      	b.n	24019d78 <__kernel_rem_pio2+0x2c0>
24019da8:	9a03      	ldr	r2, [sp, #12]
24019daa:	f04f 0c01 	mov.w	ip, #1
24019dae:	e7d2      	b.n	24019d56 <__kernel_rem_pio2+0x29e>
24019db0:	ecbe 5b02 	vldmia	lr!, {d5}
24019db4:	ed38 6b02 	vldmdb	r8!, {d6}
24019db8:	f10c 0c01 	add.w	ip, ip, #1
24019dbc:	eea5 7b06 	vfma.f64	d7, d5, d6
24019dc0:	e7ec      	b.n	24019d9c <__kernel_rem_pio2+0x2e4>
24019dc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24019dc6:	e76e      	b.n	24019ca6 <__kernel_rem_pio2+0x1ee>
	...
24019dd4:	3e700000 	.word	0x3e700000
24019dd8:	00000000 	.word	0x00000000
24019ddc:	41700000 	.word	0x41700000
24019de0:	24033d00 	.word	0x24033d00
24019de4:	24033cc0 	.word	0x24033cc0
24019de8:	4260      	negs	r0, r4
24019dea:	eeb0 0b48 	vmov.f64	d0, d8
24019dee:	f000 fde7 	bl	2401a9c0 <scalbn>
24019df2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 24019fd0 <__kernel_rem_pio2+0x518>
24019df6:	eeb4 0bc6 	vcmpe.f64	d0, d6
24019dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019dfe:	db18      	blt.n	24019e32 <__kernel_rem_pio2+0x37a>
24019e00:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24019fd8 <__kernel_rem_pio2+0x520>
24019e04:	ee20 7b07 	vmul.f64	d7, d0, d7
24019e08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24019e0c:	aa06      	add	r2, sp, #24
24019e0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
24019e12:	eea5 0b46 	vfms.f64	d0, d5, d6
24019e16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24019e1a:	f105 0b01 	add.w	fp, r5, #1
24019e1e:	ee10 3a10 	vmov	r3, s0
24019e22:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24019e26:	ee17 3a10 	vmov	r3, s14
24019e2a:	3418      	adds	r4, #24
24019e2c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
24019e30:	e740      	b.n	24019cb4 <__kernel_rem_pio2+0x1fc>
24019e32:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24019e36:	aa06      	add	r2, sp, #24
24019e38:	ee10 3a10 	vmov	r3, s0
24019e3c:	46ab      	mov	fp, r5
24019e3e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24019e42:	e737      	b.n	24019cb4 <__kernel_rem_pio2+0x1fc>
24019e44:	ac06      	add	r4, sp, #24
24019e46:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
24019e4a:	9401      	str	r4, [sp, #4]
24019e4c:	ee07 4a90 	vmov	s15, r4
24019e50:	3901      	subs	r1, #1
24019e52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019e56:	ee27 7b00 	vmul.f64	d7, d7, d0
24019e5a:	ee20 0b06 	vmul.f64	d0, d0, d6
24019e5e:	ed20 7b02 	vstmdb	r0!, {d7}
24019e62:	e735      	b.n	24019cd0 <__kernel_rem_pio2+0x218>
24019e64:	ecbc 5b02 	vldmia	ip!, {d5}
24019e68:	ecb5 6b02 	vldmia	r5!, {d6}
24019e6c:	3401      	adds	r4, #1
24019e6e:	eea5 7b06 	vfma.f64	d7, d5, d6
24019e72:	454c      	cmp	r4, r9
24019e74:	dc01      	bgt.n	24019e7a <__kernel_rem_pio2+0x3c2>
24019e76:	4284      	cmp	r4, r0
24019e78:	ddf4      	ble.n	24019e64 <__kernel_rem_pio2+0x3ac>
24019e7a:	ac42      	add	r4, sp, #264	; 0x108
24019e7c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24019e80:	ed80 7b00 	vstr	d7, [r0]
24019e84:	3901      	subs	r1, #1
24019e86:	e727      	b.n	24019cd8 <__kernel_rem_pio2+0x220>
24019e88:	99a2      	ldr	r1, [sp, #648]	; 0x288
24019e8a:	2902      	cmp	r1, #2
24019e8c:	dc0a      	bgt.n	24019ea4 <__kernel_rem_pio2+0x3ec>
24019e8e:	2900      	cmp	r1, #0
24019e90:	dc2c      	bgt.n	24019eec <__kernel_rem_pio2+0x434>
24019e92:	d045      	beq.n	24019f20 <__kernel_rem_pio2+0x468>
24019e94:	f008 0007 	and.w	r0, r8, #7
24019e98:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
24019e9c:	ecbd 8b06 	vpop	{d8-d10}
24019ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24019ea4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
24019ea6:	2a03      	cmp	r2, #3
24019ea8:	d1f4      	bne.n	24019e94 <__kernel_rem_pio2+0x3dc>
24019eaa:	aa42      	add	r2, sp, #264	; 0x108
24019eac:	4413      	add	r3, r2
24019eae:	461a      	mov	r2, r3
24019eb0:	4619      	mov	r1, r3
24019eb2:	4658      	mov	r0, fp
24019eb4:	2800      	cmp	r0, #0
24019eb6:	f1a1 0108 	sub.w	r1, r1, #8
24019eba:	dc54      	bgt.n	24019f66 <__kernel_rem_pio2+0x4ae>
24019ebc:	4659      	mov	r1, fp
24019ebe:	2901      	cmp	r1, #1
24019ec0:	f1a2 0208 	sub.w	r2, r2, #8
24019ec4:	dc5f      	bgt.n	24019f86 <__kernel_rem_pio2+0x4ce>
24019ec6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 24019fe0 <__kernel_rem_pio2+0x528>
24019eca:	3308      	adds	r3, #8
24019ecc:	f1bb 0f01 	cmp.w	fp, #1
24019ed0:	dc69      	bgt.n	24019fa6 <__kernel_rem_pio2+0x4ee>
24019ed2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
24019ed6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
24019eda:	2e00      	cmp	r6, #0
24019edc:	d16a      	bne.n	24019fb4 <__kernel_rem_pio2+0x4fc>
24019ede:	ed87 5b00 	vstr	d5, [r7]
24019ee2:	ed87 6b02 	vstr	d6, [r7, #8]
24019ee6:	ed87 7b04 	vstr	d7, [r7, #16]
24019eea:	e7d3      	b.n	24019e94 <__kernel_rem_pio2+0x3dc>
24019eec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 24019fe0 <__kernel_rem_pio2+0x528>
24019ef0:	ab42      	add	r3, sp, #264	; 0x108
24019ef2:	441a      	add	r2, r3
24019ef4:	465b      	mov	r3, fp
24019ef6:	2b00      	cmp	r3, #0
24019ef8:	da26      	bge.n	24019f48 <__kernel_rem_pio2+0x490>
24019efa:	b35e      	cbz	r6, 24019f54 <__kernel_rem_pio2+0x49c>
24019efc:	eeb1 7b46 	vneg.f64	d7, d6
24019f00:	ed87 7b00 	vstr	d7, [r7]
24019f04:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
24019f08:	aa44      	add	r2, sp, #272	; 0x110
24019f0a:	2301      	movs	r3, #1
24019f0c:	ee37 7b46 	vsub.f64	d7, d7, d6
24019f10:	459b      	cmp	fp, r3
24019f12:	da22      	bge.n	24019f5a <__kernel_rem_pio2+0x4a2>
24019f14:	b10e      	cbz	r6, 24019f1a <__kernel_rem_pio2+0x462>
24019f16:	eeb1 7b47 	vneg.f64	d7, d7
24019f1a:	ed87 7b02 	vstr	d7, [r7, #8]
24019f1e:	e7b9      	b.n	24019e94 <__kernel_rem_pio2+0x3dc>
24019f20:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24019fe0 <__kernel_rem_pio2+0x528>
24019f24:	ab42      	add	r3, sp, #264	; 0x108
24019f26:	441a      	add	r2, r3
24019f28:	f1bb 0f00 	cmp.w	fp, #0
24019f2c:	da05      	bge.n	24019f3a <__kernel_rem_pio2+0x482>
24019f2e:	b10e      	cbz	r6, 24019f34 <__kernel_rem_pio2+0x47c>
24019f30:	eeb1 7b47 	vneg.f64	d7, d7
24019f34:	ed87 7b00 	vstr	d7, [r7]
24019f38:	e7ac      	b.n	24019e94 <__kernel_rem_pio2+0x3dc>
24019f3a:	ed32 6b02 	vldmdb	r2!, {d6}
24019f3e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24019f42:	ee37 7b06 	vadd.f64	d7, d7, d6
24019f46:	e7ef      	b.n	24019f28 <__kernel_rem_pio2+0x470>
24019f48:	ed32 7b02 	vldmdb	r2!, {d7}
24019f4c:	3b01      	subs	r3, #1
24019f4e:	ee36 6b07 	vadd.f64	d6, d6, d7
24019f52:	e7d0      	b.n	24019ef6 <__kernel_rem_pio2+0x43e>
24019f54:	eeb0 7b46 	vmov.f64	d7, d6
24019f58:	e7d2      	b.n	24019f00 <__kernel_rem_pio2+0x448>
24019f5a:	ecb2 6b02 	vldmia	r2!, {d6}
24019f5e:	3301      	adds	r3, #1
24019f60:	ee37 7b06 	vadd.f64	d7, d7, d6
24019f64:	e7d4      	b.n	24019f10 <__kernel_rem_pio2+0x458>
24019f66:	ed91 7b00 	vldr	d7, [r1]
24019f6a:	ed91 5b02 	vldr	d5, [r1, #8]
24019f6e:	3801      	subs	r0, #1
24019f70:	ee37 6b05 	vadd.f64	d6, d7, d5
24019f74:	ee37 7b46 	vsub.f64	d7, d7, d6
24019f78:	ed81 6b00 	vstr	d6, [r1]
24019f7c:	ee37 7b05 	vadd.f64	d7, d7, d5
24019f80:	ed81 7b02 	vstr	d7, [r1, #8]
24019f84:	e796      	b.n	24019eb4 <__kernel_rem_pio2+0x3fc>
24019f86:	ed92 7b00 	vldr	d7, [r2]
24019f8a:	ed92 5b02 	vldr	d5, [r2, #8]
24019f8e:	3901      	subs	r1, #1
24019f90:	ee37 6b05 	vadd.f64	d6, d7, d5
24019f94:	ee37 7b46 	vsub.f64	d7, d7, d6
24019f98:	ed82 6b00 	vstr	d6, [r2]
24019f9c:	ee37 7b05 	vadd.f64	d7, d7, d5
24019fa0:	ed82 7b02 	vstr	d7, [r2, #8]
24019fa4:	e78b      	b.n	24019ebe <__kernel_rem_pio2+0x406>
24019fa6:	ed33 6b02 	vldmdb	r3!, {d6}
24019faa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24019fae:	ee37 7b06 	vadd.f64	d7, d7, d6
24019fb2:	e78b      	b.n	24019ecc <__kernel_rem_pio2+0x414>
24019fb4:	eeb1 5b45 	vneg.f64	d5, d5
24019fb8:	eeb1 6b46 	vneg.f64	d6, d6
24019fbc:	ed87 5b00 	vstr	d5, [r7]
24019fc0:	eeb1 7b47 	vneg.f64	d7, d7
24019fc4:	ed87 6b02 	vstr	d6, [r7, #8]
24019fc8:	e78d      	b.n	24019ee6 <__kernel_rem_pio2+0x42e>
24019fca:	bf00      	nop
24019fcc:	f3af 8000 	nop.w
24019fd0:	00000000 	.word	0x00000000
24019fd4:	41700000 	.word	0x41700000
24019fd8:	00000000 	.word	0x00000000
24019fdc:	3e700000 	.word	0x3e700000
	...

24019fe8 <__kernel_tan>:
24019fe8:	eeb0 7b40 	vmov.f64	d7, d0
24019fec:	ee17 3a90 	vmov	r3, s15
24019ff0:	4987      	ldr	r1, [pc, #540]	; (2401a210 <__kernel_tan+0x228>)
24019ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24019ff6:	428a      	cmp	r2, r1
24019ff8:	b510      	push	{r4, lr}
24019ffa:	dc33      	bgt.n	2401a064 <__kernel_tan+0x7c>
24019ffc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
2401a000:	ee16 1a90 	vmov	r1, s13
2401a004:	2900      	cmp	r1, #0
2401a006:	d143      	bne.n	2401a090 <__kernel_tan+0xa8>
2401a008:	ee10 4a10 	vmov	r4, s0
2401a00c:	1c43      	adds	r3, r0, #1
2401a00e:	4323      	orrs	r3, r4
2401a010:	4313      	orrs	r3, r2
2401a012:	d108      	bne.n	2401a026 <__kernel_tan+0x3e>
2401a014:	f000 fc56 	bl	2401a8c4 <fabs>
2401a018:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401a01c:	ee86 7b00 	vdiv.f64	d7, d6, d0
2401a020:	eeb0 0b47 	vmov.f64	d0, d7
2401a024:	bd10      	pop	{r4, pc}
2401a026:	2801      	cmp	r0, #1
2401a028:	d0fa      	beq.n	2401a020 <__kernel_tan+0x38>
2401a02a:	ee30 6b01 	vadd.f64	d6, d0, d1
2401a02e:	ec53 2b16 	vmov	r2, r3, d6
2401a032:	460a      	mov	r2, r1
2401a034:	ec43 2b15 	vmov	d5, r2, r3
2401a038:	ee35 7b40 	vsub.f64	d7, d5, d0
2401a03c:	ee31 1b47 	vsub.f64	d1, d1, d7
2401a040:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401a044:	ee87 4b06 	vdiv.f64	d4, d7, d6
2401a048:	ec53 2b14 	vmov	r2, r3, d4
2401a04c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401a050:	460a      	mov	r2, r1
2401a052:	ec43 2b17 	vmov	d7, r2, r3
2401a056:	eea5 6b07 	vfma.f64	d6, d5, d7
2401a05a:	eea1 6b07 	vfma.f64	d6, d1, d7
2401a05e:	eea6 7b04 	vfma.f64	d7, d6, d4
2401a062:	e7dd      	b.n	2401a020 <__kernel_tan+0x38>
2401a064:	496b      	ldr	r1, [pc, #428]	; (2401a214 <__kernel_tan+0x22c>)
2401a066:	428a      	cmp	r2, r1
2401a068:	dd12      	ble.n	2401a090 <__kernel_tan+0xa8>
2401a06a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 2401a190 <__kernel_tan+0x1a8>
2401a06e:	2b00      	cmp	r3, #0
2401a070:	bfb8      	it	lt
2401a072:	eeb1 7b40 	vneglt.f64	d7, d0
2401a076:	ee36 7b47 	vsub.f64	d7, d6, d7
2401a07a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 2401a198 <__kernel_tan+0x1b0>
2401a07e:	bfb8      	it	lt
2401a080:	eeb1 1b41 	vneglt.f64	d1, d1
2401a084:	ee36 1b41 	vsub.f64	d1, d6, d1
2401a088:	ee31 7b07 	vadd.f64	d7, d1, d7
2401a08c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 2401a1a0 <__kernel_tan+0x1b8>
2401a090:	ee27 5b07 	vmul.f64	d5, d7, d7
2401a094:	ee25 6b05 	vmul.f64	d6, d5, d5
2401a098:	ed9f 3b43 	vldr	d3, [pc, #268]	; 2401a1a8 <__kernel_tan+0x1c0>
2401a09c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 2401a1b0 <__kernel_tan+0x1c8>
2401a0a0:	eea6 4b03 	vfma.f64	d4, d6, d3
2401a0a4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 2401a1b8 <__kernel_tan+0x1d0>
2401a0a8:	eea4 3b06 	vfma.f64	d3, d4, d6
2401a0ac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 2401a1c0 <__kernel_tan+0x1d8>
2401a0b0:	eea3 4b06 	vfma.f64	d4, d3, d6
2401a0b4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 2401a1c8 <__kernel_tan+0x1e0>
2401a0b8:	eea4 3b06 	vfma.f64	d3, d4, d6
2401a0bc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 2401a1d0 <__kernel_tan+0x1e8>
2401a0c0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 2401a1d8 <__kernel_tan+0x1f0>
2401a0c4:	eea3 4b06 	vfma.f64	d4, d3, d6
2401a0c8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 2401a1e0 <__kernel_tan+0x1f8>
2401a0cc:	eea6 3b02 	vfma.f64	d3, d6, d2
2401a0d0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 2401a1e8 <__kernel_tan+0x200>
2401a0d4:	eea3 2b06 	vfma.f64	d2, d3, d6
2401a0d8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 2401a1f0 <__kernel_tan+0x208>
2401a0dc:	eea2 3b06 	vfma.f64	d3, d2, d6
2401a0e0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 2401a1f8 <__kernel_tan+0x210>
2401a0e4:	eea3 2b06 	vfma.f64	d2, d3, d6
2401a0e8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 2401a200 <__kernel_tan+0x218>
2401a0ec:	4949      	ldr	r1, [pc, #292]	; (2401a214 <__kernel_tan+0x22c>)
2401a0ee:	eea2 3b06 	vfma.f64	d3, d2, d6
2401a0f2:	ee27 2b05 	vmul.f64	d2, d7, d5
2401a0f6:	eeb0 6b44 	vmov.f64	d6, d4
2401a0fa:	eeb0 4b41 	vmov.f64	d4, d1
2401a0fe:	eea3 6b05 	vfma.f64	d6, d3, d5
2401a102:	eea6 4b02 	vfma.f64	d4, d6, d2
2401a106:	ed9f 6b40 	vldr	d6, [pc, #256]	; 2401a208 <__kernel_tan+0x220>
2401a10a:	eea4 1b05 	vfma.f64	d1, d4, d5
2401a10e:	428a      	cmp	r2, r1
2401a110:	eea2 1b06 	vfma.f64	d1, d2, d6
2401a114:	ee37 5b01 	vadd.f64	d5, d7, d1
2401a118:	dd1d      	ble.n	2401a156 <__kernel_tan+0x16e>
2401a11a:	ee25 3b05 	vmul.f64	d3, d5, d5
2401a11e:	179b      	asrs	r3, r3, #30
2401a120:	ee06 0a90 	vmov	s13, r0
2401a124:	f003 0302 	and.w	r3, r3, #2
2401a128:	f1c3 0301 	rsb	r3, r3, #1
2401a12c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
2401a130:	ee35 5b06 	vadd.f64	d5, d5, d6
2401a134:	ee83 4b05 	vdiv.f64	d4, d3, d5
2401a138:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
2401a13c:	ee34 1b41 	vsub.f64	d1, d4, d1
2401a140:	ee37 7b41 	vsub.f64	d7, d7, d1
2401a144:	eea7 6b45 	vfms.f64	d6, d7, d5
2401a148:	ee07 3a10 	vmov	s14, r3
2401a14c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401a150:	ee27 7b06 	vmul.f64	d7, d7, d6
2401a154:	e764      	b.n	2401a020 <__kernel_tan+0x38>
2401a156:	2801      	cmp	r0, #1
2401a158:	d016      	beq.n	2401a188 <__kernel_tan+0x1a0>
2401a15a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401a15e:	ec51 0b15 	vmov	r0, r1, d5
2401a162:	2000      	movs	r0, #0
2401a164:	ec41 0b13 	vmov	d3, r0, r1
2401a168:	ee33 7b47 	vsub.f64	d7, d3, d7
2401a16c:	ee31 1b47 	vsub.f64	d1, d1, d7
2401a170:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401a174:	ee87 4b05 	vdiv.f64	d4, d7, d5
2401a178:	ec53 2b14 	vmov	r2, r3, d4
2401a17c:	4602      	mov	r2, r0
2401a17e:	ec43 2b17 	vmov	d7, r2, r3
2401a182:	eea3 6b07 	vfma.f64	d6, d3, d7
2401a186:	e768      	b.n	2401a05a <__kernel_tan+0x72>
2401a188:	eeb0 7b45 	vmov.f64	d7, d5
2401a18c:	e748      	b.n	2401a020 <__kernel_tan+0x38>
2401a18e:	bf00      	nop
2401a190:	54442d18 	.word	0x54442d18
2401a194:	3fe921fb 	.word	0x3fe921fb
2401a198:	33145c07 	.word	0x33145c07
2401a19c:	3c81a626 	.word	0x3c81a626
	...
2401a1a8:	db605373 	.word	0xdb605373
2401a1ac:	bef375cb 	.word	0xbef375cb
2401a1b0:	a03792a6 	.word	0xa03792a6
2401a1b4:	3f147e88 	.word	0x3f147e88
2401a1b8:	f2f26501 	.word	0xf2f26501
2401a1bc:	3f4344d8 	.word	0x3f4344d8
2401a1c0:	c9560328 	.word	0xc9560328
2401a1c4:	3f6d6d22 	.word	0x3f6d6d22
2401a1c8:	8406d637 	.word	0x8406d637
2401a1cc:	3f9664f4 	.word	0x3f9664f4
2401a1d0:	1110fe7a 	.word	0x1110fe7a
2401a1d4:	3fc11111 	.word	0x3fc11111
2401a1d8:	74bf7ad4 	.word	0x74bf7ad4
2401a1dc:	3efb2a70 	.word	0x3efb2a70
2401a1e0:	32f0a7e9 	.word	0x32f0a7e9
2401a1e4:	3f12b80f 	.word	0x3f12b80f
2401a1e8:	1a8d1068 	.word	0x1a8d1068
2401a1ec:	3f3026f7 	.word	0x3f3026f7
2401a1f0:	fee08315 	.word	0xfee08315
2401a1f4:	3f57dbc8 	.word	0x3f57dbc8
2401a1f8:	e96e8493 	.word	0xe96e8493
2401a1fc:	3f8226e3 	.word	0x3f8226e3
2401a200:	1bb341fe 	.word	0x1bb341fe
2401a204:	3faba1ba 	.word	0x3faba1ba
2401a208:	55555563 	.word	0x55555563
2401a20c:	3fd55555 	.word	0x3fd55555
2401a210:	3e2fffff 	.word	0x3e2fffff
2401a214:	3fe59427 	.word	0x3fe59427

2401a218 <__kernel_rem_pio2f>:
2401a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401a21c:	ed2d 8b04 	vpush	{d8-d9}
2401a220:	b0d9      	sub	sp, #356	; 0x164
2401a222:	4688      	mov	r8, r1
2401a224:	9002      	str	r0, [sp, #8]
2401a226:	49bb      	ldr	r1, [pc, #748]	; (2401a514 <__kernel_rem_pio2f+0x2fc>)
2401a228:	9866      	ldr	r0, [sp, #408]	; 0x198
2401a22a:	9301      	str	r3, [sp, #4]
2401a22c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
2401a230:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
2401a234:	1e59      	subs	r1, r3, #1
2401a236:	1d13      	adds	r3, r2, #4
2401a238:	db27      	blt.n	2401a28a <__kernel_rem_pio2f+0x72>
2401a23a:	f1b2 0b03 	subs.w	fp, r2, #3
2401a23e:	bf48      	it	mi
2401a240:	f102 0b04 	addmi.w	fp, r2, #4
2401a244:	ea4f 00eb 	mov.w	r0, fp, asr #3
2401a248:	1c45      	adds	r5, r0, #1
2401a24a:	00ec      	lsls	r4, r5, #3
2401a24c:	1a47      	subs	r7, r0, r1
2401a24e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a252:	9403      	str	r4, [sp, #12]
2401a254:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
2401a258:	eb0a 0c01 	add.w	ip, sl, r1
2401a25c:	ae1c      	add	r6, sp, #112	; 0x70
2401a25e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
2401a262:	2400      	movs	r4, #0
2401a264:	4564      	cmp	r4, ip
2401a266:	dd12      	ble.n	2401a28e <__kernel_rem_pio2f+0x76>
2401a268:	9b01      	ldr	r3, [sp, #4]
2401a26a:	ac1c      	add	r4, sp, #112	; 0x70
2401a26c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
2401a270:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
2401a274:	f04f 0c00 	mov.w	ip, #0
2401a278:	45d4      	cmp	ip, sl
2401a27a:	dc27      	bgt.n	2401a2cc <__kernel_rem_pio2f+0xb4>
2401a27c:	f8dd 9008 	ldr.w	r9, [sp, #8]
2401a280:	eddf 7aa8 	vldr	s15, [pc, #672]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a284:	4627      	mov	r7, r4
2401a286:	2600      	movs	r6, #0
2401a288:	e016      	b.n	2401a2b8 <__kernel_rem_pio2f+0xa0>
2401a28a:	2000      	movs	r0, #0
2401a28c:	e7dc      	b.n	2401a248 <__kernel_rem_pio2f+0x30>
2401a28e:	42e7      	cmn	r7, r4
2401a290:	bf5d      	ittte	pl
2401a292:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
2401a296:	ee07 3a90 	vmovpl	s15, r3
2401a29a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401a29e:	eef0 7a47 	vmovmi.f32	s15, s14
2401a2a2:	ece6 7a01 	vstmia	r6!, {s15}
2401a2a6:	3401      	adds	r4, #1
2401a2a8:	e7dc      	b.n	2401a264 <__kernel_rem_pio2f+0x4c>
2401a2aa:	ecf9 6a01 	vldmia	r9!, {s13}
2401a2ae:	ed97 7a00 	vldr	s14, [r7]
2401a2b2:	eee6 7a87 	vfma.f32	s15, s13, s14
2401a2b6:	3601      	adds	r6, #1
2401a2b8:	428e      	cmp	r6, r1
2401a2ba:	f1a7 0704 	sub.w	r7, r7, #4
2401a2be:	ddf4      	ble.n	2401a2aa <__kernel_rem_pio2f+0x92>
2401a2c0:	eceb 7a01 	vstmia	fp!, {s15}
2401a2c4:	f10c 0c01 	add.w	ip, ip, #1
2401a2c8:	3404      	adds	r4, #4
2401a2ca:	e7d5      	b.n	2401a278 <__kernel_rem_pio2f+0x60>
2401a2cc:	ab08      	add	r3, sp, #32
2401a2ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
2401a2d2:	eddf 8a93 	vldr	s17, [pc, #588]	; 2401a520 <__kernel_rem_pio2f+0x308>
2401a2d6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 2401a51c <__kernel_rem_pio2f+0x304>
2401a2da:	9304      	str	r3, [sp, #16]
2401a2dc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
2401a2e0:	4656      	mov	r6, sl
2401a2e2:	00b3      	lsls	r3, r6, #2
2401a2e4:	9305      	str	r3, [sp, #20]
2401a2e6:	ab58      	add	r3, sp, #352	; 0x160
2401a2e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401a2ec:	ac08      	add	r4, sp, #32
2401a2ee:	ab44      	add	r3, sp, #272	; 0x110
2401a2f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
2401a2f4:	46a4      	mov	ip, r4
2401a2f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401a2fa:	4637      	mov	r7, r6
2401a2fc:	2f00      	cmp	r7, #0
2401a2fe:	f1a0 0004 	sub.w	r0, r0, #4
2401a302:	dc4f      	bgt.n	2401a3a4 <__kernel_rem_pio2f+0x18c>
2401a304:	4628      	mov	r0, r5
2401a306:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401a30a:	f000 fd3f 	bl	2401ad8c <scalbnf>
2401a30e:	eeb0 8a40 	vmov.f32	s16, s0
2401a312:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
2401a316:	ee28 0a00 	vmul.f32	s0, s16, s0
2401a31a:	f000 fcf5 	bl	2401ad08 <floorf>
2401a31e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2401a322:	eea0 8a67 	vfms.f32	s16, s0, s15
2401a326:	2d00      	cmp	r5, #0
2401a328:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401a32c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
2401a330:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401a334:	ee17 9a90 	vmov	r9, s15
2401a338:	ee38 8a40 	vsub.f32	s16, s16, s0
2401a33c:	dd44      	ble.n	2401a3c8 <__kernel_rem_pio2f+0x1b0>
2401a33e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2401a342:	ab08      	add	r3, sp, #32
2401a344:	f1c5 0e08 	rsb	lr, r5, #8
2401a348:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
2401a34c:	fa47 f00e 	asr.w	r0, r7, lr
2401a350:	4481      	add	r9, r0
2401a352:	fa00 f00e 	lsl.w	r0, r0, lr
2401a356:	1a3f      	subs	r7, r7, r0
2401a358:	f1c5 0007 	rsb	r0, r5, #7
2401a35c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
2401a360:	4107      	asrs	r7, r0
2401a362:	2f00      	cmp	r7, #0
2401a364:	dd3f      	ble.n	2401a3e6 <__kernel_rem_pio2f+0x1ce>
2401a366:	f04f 0e00 	mov.w	lr, #0
2401a36a:	f109 0901 	add.w	r9, r9, #1
2401a36e:	4673      	mov	r3, lr
2401a370:	4576      	cmp	r6, lr
2401a372:	dc6b      	bgt.n	2401a44c <__kernel_rem_pio2f+0x234>
2401a374:	2d00      	cmp	r5, #0
2401a376:	dd04      	ble.n	2401a382 <__kernel_rem_pio2f+0x16a>
2401a378:	2d01      	cmp	r5, #1
2401a37a:	d078      	beq.n	2401a46e <__kernel_rem_pio2f+0x256>
2401a37c:	2d02      	cmp	r5, #2
2401a37e:	f000 8081 	beq.w	2401a484 <__kernel_rem_pio2f+0x26c>
2401a382:	2f02      	cmp	r7, #2
2401a384:	d12f      	bne.n	2401a3e6 <__kernel_rem_pio2f+0x1ce>
2401a386:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401a38a:	ee30 8a48 	vsub.f32	s16, s0, s16
2401a38e:	b353      	cbz	r3, 2401a3e6 <__kernel_rem_pio2f+0x1ce>
2401a390:	4628      	mov	r0, r5
2401a392:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401a396:	f000 fcf9 	bl	2401ad8c <scalbnf>
2401a39a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401a39e:	ee38 8a40 	vsub.f32	s16, s16, s0
2401a3a2:	e020      	b.n	2401a3e6 <__kernel_rem_pio2f+0x1ce>
2401a3a4:	ee60 7a28 	vmul.f32	s15, s0, s17
2401a3a8:	3f01      	subs	r7, #1
2401a3aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a3ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a3b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401a3b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401a3ba:	ecac 0a01 	vstmia	ip!, {s0}
2401a3be:	ed90 0a00 	vldr	s0, [r0]
2401a3c2:	ee37 0a80 	vadd.f32	s0, s15, s0
2401a3c6:	e799      	b.n	2401a2fc <__kernel_rem_pio2f+0xe4>
2401a3c8:	d105      	bne.n	2401a3d6 <__kernel_rem_pio2f+0x1be>
2401a3ca:	1e70      	subs	r0, r6, #1
2401a3cc:	ab08      	add	r3, sp, #32
2401a3ce:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
2401a3d2:	11ff      	asrs	r7, r7, #7
2401a3d4:	e7c5      	b.n	2401a362 <__kernel_rem_pio2f+0x14a>
2401a3d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401a3da:	eeb4 8ae7 	vcmpe.f32	s16, s15
2401a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a3e2:	da31      	bge.n	2401a448 <__kernel_rem_pio2f+0x230>
2401a3e4:	2700      	movs	r7, #0
2401a3e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401a3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a3ee:	f040 809b 	bne.w	2401a528 <__kernel_rem_pio2f+0x310>
2401a3f2:	1e74      	subs	r4, r6, #1
2401a3f4:	46a4      	mov	ip, r4
2401a3f6:	2000      	movs	r0, #0
2401a3f8:	45d4      	cmp	ip, sl
2401a3fa:	da4a      	bge.n	2401a492 <__kernel_rem_pio2f+0x27a>
2401a3fc:	2800      	cmp	r0, #0
2401a3fe:	d07a      	beq.n	2401a4f6 <__kernel_rem_pio2f+0x2de>
2401a400:	ab08      	add	r3, sp, #32
2401a402:	3d08      	subs	r5, #8
2401a404:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401a408:	2b00      	cmp	r3, #0
2401a40a:	f000 8081 	beq.w	2401a510 <__kernel_rem_pio2f+0x2f8>
2401a40e:	4628      	mov	r0, r5
2401a410:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401a414:	00a5      	lsls	r5, r4, #2
2401a416:	f000 fcb9 	bl	2401ad8c <scalbnf>
2401a41a:	aa44      	add	r2, sp, #272	; 0x110
2401a41c:	1d2b      	adds	r3, r5, #4
2401a41e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2401a520 <__kernel_rem_pio2f+0x308>
2401a422:	18d1      	adds	r1, r2, r3
2401a424:	4622      	mov	r2, r4
2401a426:	2a00      	cmp	r2, #0
2401a428:	f280 80ae 	bge.w	2401a588 <__kernel_rem_pio2f+0x370>
2401a42c:	4622      	mov	r2, r4
2401a42e:	2a00      	cmp	r2, #0
2401a430:	f2c0 80cc 	blt.w	2401a5cc <__kernel_rem_pio2f+0x3b4>
2401a434:	a944      	add	r1, sp, #272	; 0x110
2401a436:	eb01 0682 	add.w	r6, r1, r2, lsl #2
2401a43a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2401a518 <__kernel_rem_pio2f+0x300>
2401a43e:	eddf 7a39 	vldr	s15, [pc, #228]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a442:	2000      	movs	r0, #0
2401a444:	1aa1      	subs	r1, r4, r2
2401a446:	e0b6      	b.n	2401a5b6 <__kernel_rem_pio2f+0x39e>
2401a448:	2702      	movs	r7, #2
2401a44a:	e78c      	b.n	2401a366 <__kernel_rem_pio2f+0x14e>
2401a44c:	6820      	ldr	r0, [r4, #0]
2401a44e:	b94b      	cbnz	r3, 2401a464 <__kernel_rem_pio2f+0x24c>
2401a450:	b118      	cbz	r0, 2401a45a <__kernel_rem_pio2f+0x242>
2401a452:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
2401a456:	6020      	str	r0, [r4, #0]
2401a458:	2001      	movs	r0, #1
2401a45a:	f10e 0e01 	add.w	lr, lr, #1
2401a45e:	3404      	adds	r4, #4
2401a460:	4603      	mov	r3, r0
2401a462:	e785      	b.n	2401a370 <__kernel_rem_pio2f+0x158>
2401a464:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
2401a468:	6020      	str	r0, [r4, #0]
2401a46a:	4618      	mov	r0, r3
2401a46c:	e7f5      	b.n	2401a45a <__kernel_rem_pio2f+0x242>
2401a46e:	1e74      	subs	r4, r6, #1
2401a470:	a808      	add	r0, sp, #32
2401a472:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
2401a476:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2401a47a:	f10d 0c20 	add.w	ip, sp, #32
2401a47e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
2401a482:	e77e      	b.n	2401a382 <__kernel_rem_pio2f+0x16a>
2401a484:	1e74      	subs	r4, r6, #1
2401a486:	a808      	add	r0, sp, #32
2401a488:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
2401a48c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
2401a490:	e7f3      	b.n	2401a47a <__kernel_rem_pio2f+0x262>
2401a492:	ab08      	add	r3, sp, #32
2401a494:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401a498:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401a49c:	4318      	orrs	r0, r3
2401a49e:	e7ab      	b.n	2401a3f8 <__kernel_rem_pio2f+0x1e0>
2401a4a0:	f10c 0c01 	add.w	ip, ip, #1
2401a4a4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
2401a4a8:	2c00      	cmp	r4, #0
2401a4aa:	d0f9      	beq.n	2401a4a0 <__kernel_rem_pio2f+0x288>
2401a4ac:	9b05      	ldr	r3, [sp, #20]
2401a4ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2401a4b2:	eb0d 0003 	add.w	r0, sp, r3
2401a4b6:	9b01      	ldr	r3, [sp, #4]
2401a4b8:	18f4      	adds	r4, r6, r3
2401a4ba:	ab1c      	add	r3, sp, #112	; 0x70
2401a4bc:	1c77      	adds	r7, r6, #1
2401a4be:	384c      	subs	r0, #76	; 0x4c
2401a4c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2401a4c4:	4466      	add	r6, ip
2401a4c6:	42be      	cmp	r6, r7
2401a4c8:	f6ff af0b 	blt.w	2401a2e2 <__kernel_rem_pio2f+0xca>
2401a4cc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
2401a4d0:	f8dd e008 	ldr.w	lr, [sp, #8]
2401a4d4:	ee07 3a90 	vmov	s15, r3
2401a4d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a4dc:	f04f 0c00 	mov.w	ip, #0
2401a4e0:	ece4 7a01 	vstmia	r4!, {s15}
2401a4e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a4e8:	46a1      	mov	r9, r4
2401a4ea:	458c      	cmp	ip, r1
2401a4ec:	dd07      	ble.n	2401a4fe <__kernel_rem_pio2f+0x2e6>
2401a4ee:	ece0 7a01 	vstmia	r0!, {s15}
2401a4f2:	3701      	adds	r7, #1
2401a4f4:	e7e7      	b.n	2401a4c6 <__kernel_rem_pio2f+0x2ae>
2401a4f6:	9804      	ldr	r0, [sp, #16]
2401a4f8:	f04f 0c01 	mov.w	ip, #1
2401a4fc:	e7d2      	b.n	2401a4a4 <__kernel_rem_pio2f+0x28c>
2401a4fe:	ecfe 6a01 	vldmia	lr!, {s13}
2401a502:	ed39 7a01 	vldmdb	r9!, {s14}
2401a506:	f10c 0c01 	add.w	ip, ip, #1
2401a50a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401a50e:	e7ec      	b.n	2401a4ea <__kernel_rem_pio2f+0x2d2>
2401a510:	3c01      	subs	r4, #1
2401a512:	e775      	b.n	2401a400 <__kernel_rem_pio2f+0x1e8>
2401a514:	24033d3c 	.word	0x24033d3c
2401a518:	24033d10 	.word	0x24033d10
2401a51c:	43800000 	.word	0x43800000
2401a520:	3b800000 	.word	0x3b800000
2401a524:	00000000 	.word	0x00000000
2401a528:	9b03      	ldr	r3, [sp, #12]
2401a52a:	eeb0 0a48 	vmov.f32	s0, s16
2401a52e:	1a98      	subs	r0, r3, r2
2401a530:	f000 fc2c 	bl	2401ad8c <scalbnf>
2401a534:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401a51c <__kernel_rem_pio2f+0x304>
2401a538:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401a53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a540:	db19      	blt.n	2401a576 <__kernel_rem_pio2f+0x35e>
2401a542:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 2401a520 <__kernel_rem_pio2f+0x308>
2401a546:	ee60 7a27 	vmul.f32	s15, s0, s15
2401a54a:	aa08      	add	r2, sp, #32
2401a54c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a550:	1c74      	adds	r4, r6, #1
2401a552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a556:	3508      	adds	r5, #8
2401a558:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401a55c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a560:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401a564:	ee10 3a10 	vmov	r3, s0
2401a568:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401a56c:	ee17 3a90 	vmov	r3, s15
2401a570:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
2401a574:	e74b      	b.n	2401a40e <__kernel_rem_pio2f+0x1f6>
2401a576:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401a57a:	aa08      	add	r2, sp, #32
2401a57c:	ee10 3a10 	vmov	r3, s0
2401a580:	4634      	mov	r4, r6
2401a582:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401a586:	e742      	b.n	2401a40e <__kernel_rem_pio2f+0x1f6>
2401a588:	a808      	add	r0, sp, #32
2401a58a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
2401a58e:	9001      	str	r0, [sp, #4]
2401a590:	ee07 0a90 	vmov	s15, r0
2401a594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a598:	3a01      	subs	r2, #1
2401a59a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401a59e:	ee20 0a07 	vmul.f32	s0, s0, s14
2401a5a2:	ed61 7a01 	vstmdb	r1!, {s15}
2401a5a6:	e73e      	b.n	2401a426 <__kernel_rem_pio2f+0x20e>
2401a5a8:	ecfc 6a01 	vldmia	ip!, {s13}
2401a5ac:	ecb6 7a01 	vldmia	r6!, {s14}
2401a5b0:	eee6 7a87 	vfma.f32	s15, s13, s14
2401a5b4:	3001      	adds	r0, #1
2401a5b6:	4550      	cmp	r0, sl
2401a5b8:	dc01      	bgt.n	2401a5be <__kernel_rem_pio2f+0x3a6>
2401a5ba:	4288      	cmp	r0, r1
2401a5bc:	ddf4      	ble.n	2401a5a8 <__kernel_rem_pio2f+0x390>
2401a5be:	a858      	add	r0, sp, #352	; 0x160
2401a5c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
2401a5c4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
2401a5c8:	3a01      	subs	r2, #1
2401a5ca:	e730      	b.n	2401a42e <__kernel_rem_pio2f+0x216>
2401a5cc:	9a66      	ldr	r2, [sp, #408]	; 0x198
2401a5ce:	2a02      	cmp	r2, #2
2401a5d0:	dc09      	bgt.n	2401a5e6 <__kernel_rem_pio2f+0x3ce>
2401a5d2:	2a00      	cmp	r2, #0
2401a5d4:	dc2a      	bgt.n	2401a62c <__kernel_rem_pio2f+0x414>
2401a5d6:	d043      	beq.n	2401a660 <__kernel_rem_pio2f+0x448>
2401a5d8:	f009 0007 	and.w	r0, r9, #7
2401a5dc:	b059      	add	sp, #356	; 0x164
2401a5de:	ecbd 8b04 	vpop	{d8-d9}
2401a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401a5e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401a5e8:	2b03      	cmp	r3, #3
2401a5ea:	d1f5      	bne.n	2401a5d8 <__kernel_rem_pio2f+0x3c0>
2401a5ec:	ab30      	add	r3, sp, #192	; 0xc0
2401a5ee:	442b      	add	r3, r5
2401a5f0:	461a      	mov	r2, r3
2401a5f2:	4619      	mov	r1, r3
2401a5f4:	4620      	mov	r0, r4
2401a5f6:	2800      	cmp	r0, #0
2401a5f8:	f1a1 0104 	sub.w	r1, r1, #4
2401a5fc:	dc51      	bgt.n	2401a6a2 <__kernel_rem_pio2f+0x48a>
2401a5fe:	4621      	mov	r1, r4
2401a600:	2901      	cmp	r1, #1
2401a602:	f1a2 0204 	sub.w	r2, r2, #4
2401a606:	dc5c      	bgt.n	2401a6c2 <__kernel_rem_pio2f+0x4aa>
2401a608:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a60c:	3304      	adds	r3, #4
2401a60e:	2c01      	cmp	r4, #1
2401a610:	dc67      	bgt.n	2401a6e2 <__kernel_rem_pio2f+0x4ca>
2401a612:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
2401a616:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401a61a:	2f00      	cmp	r7, #0
2401a61c:	d167      	bne.n	2401a6ee <__kernel_rem_pio2f+0x4d6>
2401a61e:	edc8 6a00 	vstr	s13, [r8]
2401a622:	ed88 7a01 	vstr	s14, [r8, #4]
2401a626:	edc8 7a02 	vstr	s15, [r8, #8]
2401a62a:	e7d5      	b.n	2401a5d8 <__kernel_rem_pio2f+0x3c0>
2401a62c:	aa30      	add	r2, sp, #192	; 0xc0
2401a62e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a632:	4413      	add	r3, r2
2401a634:	4622      	mov	r2, r4
2401a636:	2a00      	cmp	r2, #0
2401a638:	da24      	bge.n	2401a684 <__kernel_rem_pio2f+0x46c>
2401a63a:	b34f      	cbz	r7, 2401a690 <__kernel_rem_pio2f+0x478>
2401a63c:	eef1 7a47 	vneg.f32	s15, s14
2401a640:	edc8 7a00 	vstr	s15, [r8]
2401a644:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
2401a648:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a64c:	aa31      	add	r2, sp, #196	; 0xc4
2401a64e:	2301      	movs	r3, #1
2401a650:	429c      	cmp	r4, r3
2401a652:	da20      	bge.n	2401a696 <__kernel_rem_pio2f+0x47e>
2401a654:	b10f      	cbz	r7, 2401a65a <__kernel_rem_pio2f+0x442>
2401a656:	eef1 7a67 	vneg.f32	s15, s15
2401a65a:	edc8 7a01 	vstr	s15, [r8, #4]
2401a65e:	e7bb      	b.n	2401a5d8 <__kernel_rem_pio2f+0x3c0>
2401a660:	aa30      	add	r2, sp, #192	; 0xc0
2401a662:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 2401a524 <__kernel_rem_pio2f+0x30c>
2401a666:	4413      	add	r3, r2
2401a668:	2c00      	cmp	r4, #0
2401a66a:	da05      	bge.n	2401a678 <__kernel_rem_pio2f+0x460>
2401a66c:	b10f      	cbz	r7, 2401a672 <__kernel_rem_pio2f+0x45a>
2401a66e:	eef1 7a67 	vneg.f32	s15, s15
2401a672:	edc8 7a00 	vstr	s15, [r8]
2401a676:	e7af      	b.n	2401a5d8 <__kernel_rem_pio2f+0x3c0>
2401a678:	ed33 7a01 	vldmdb	r3!, {s14}
2401a67c:	3c01      	subs	r4, #1
2401a67e:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a682:	e7f1      	b.n	2401a668 <__kernel_rem_pio2f+0x450>
2401a684:	ed73 7a01 	vldmdb	r3!, {s15}
2401a688:	3a01      	subs	r2, #1
2401a68a:	ee37 7a27 	vadd.f32	s14, s14, s15
2401a68e:	e7d2      	b.n	2401a636 <__kernel_rem_pio2f+0x41e>
2401a690:	eef0 7a47 	vmov.f32	s15, s14
2401a694:	e7d4      	b.n	2401a640 <__kernel_rem_pio2f+0x428>
2401a696:	ecb2 7a01 	vldmia	r2!, {s14}
2401a69a:	3301      	adds	r3, #1
2401a69c:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a6a0:	e7d6      	b.n	2401a650 <__kernel_rem_pio2f+0x438>
2401a6a2:	edd1 7a00 	vldr	s15, [r1]
2401a6a6:	edd1 6a01 	vldr	s13, [r1, #4]
2401a6aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401a6ae:	3801      	subs	r0, #1
2401a6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a6b4:	ed81 7a00 	vstr	s14, [r1]
2401a6b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401a6bc:	edc1 7a01 	vstr	s15, [r1, #4]
2401a6c0:	e799      	b.n	2401a5f6 <__kernel_rem_pio2f+0x3de>
2401a6c2:	edd2 7a00 	vldr	s15, [r2]
2401a6c6:	edd2 6a01 	vldr	s13, [r2, #4]
2401a6ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401a6ce:	3901      	subs	r1, #1
2401a6d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a6d4:	ed82 7a00 	vstr	s14, [r2]
2401a6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401a6dc:	edc2 7a01 	vstr	s15, [r2, #4]
2401a6e0:	e78e      	b.n	2401a600 <__kernel_rem_pio2f+0x3e8>
2401a6e2:	ed33 7a01 	vldmdb	r3!, {s14}
2401a6e6:	3c01      	subs	r4, #1
2401a6e8:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a6ec:	e78f      	b.n	2401a60e <__kernel_rem_pio2f+0x3f6>
2401a6ee:	eef1 6a66 	vneg.f32	s13, s13
2401a6f2:	eeb1 7a47 	vneg.f32	s14, s14
2401a6f6:	edc8 6a00 	vstr	s13, [r8]
2401a6fa:	ed88 7a01 	vstr	s14, [r8, #4]
2401a6fe:	eef1 7a67 	vneg.f32	s15, s15
2401a702:	e790      	b.n	2401a626 <__kernel_rem_pio2f+0x40e>

2401a704 <__kernel_tanf>:
2401a704:	b508      	push	{r3, lr}
2401a706:	ee10 3a10 	vmov	r3, s0
2401a70a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401a70e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
2401a712:	eef0 7a40 	vmov.f32	s15, s0
2401a716:	da17      	bge.n	2401a748 <__kernel_tanf+0x44>
2401a718:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401a71c:	ee17 1a10 	vmov	r1, s14
2401a720:	bb41      	cbnz	r1, 2401a774 <__kernel_tanf+0x70>
2401a722:	1c43      	adds	r3, r0, #1
2401a724:	4313      	orrs	r3, r2
2401a726:	d108      	bne.n	2401a73a <__kernel_tanf+0x36>
2401a728:	f7fe fc3a 	bl	24018fa0 <fabsf>
2401a72c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a730:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a734:	eeb0 0a67 	vmov.f32	s0, s15
2401a738:	bd08      	pop	{r3, pc}
2401a73a:	2801      	cmp	r0, #1
2401a73c:	d0fa      	beq.n	2401a734 <__kernel_tanf+0x30>
2401a73e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401a742:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a746:	e7f5      	b.n	2401a734 <__kernel_tanf+0x30>
2401a748:	494c      	ldr	r1, [pc, #304]	; (2401a87c <__kernel_tanf+0x178>)
2401a74a:	428a      	cmp	r2, r1
2401a74c:	db12      	blt.n	2401a774 <__kernel_tanf+0x70>
2401a74e:	2b00      	cmp	r3, #0
2401a750:	bfb8      	it	lt
2401a752:	eef1 7a40 	vneglt.f32	s15, s0
2401a756:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 2401a880 <__kernel_tanf+0x17c>
2401a75a:	ee70 7a67 	vsub.f32	s15, s0, s15
2401a75e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 2401a884 <__kernel_tanf+0x180>
2401a762:	bfb8      	it	lt
2401a764:	eef1 0a60 	vneglt.f32	s1, s1
2401a768:	ee70 0a60 	vsub.f32	s1, s0, s1
2401a76c:	ee70 7aa7 	vadd.f32	s15, s1, s15
2401a770:	eddf 0a45 	vldr	s1, [pc, #276]	; 2401a888 <__kernel_tanf+0x184>
2401a774:	eddf 5a45 	vldr	s11, [pc, #276]	; 2401a88c <__kernel_tanf+0x188>
2401a778:	ed9f 6a45 	vldr	s12, [pc, #276]	; 2401a890 <__kernel_tanf+0x18c>
2401a77c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 2401a894 <__kernel_tanf+0x190>
2401a780:	493e      	ldr	r1, [pc, #248]	; (2401a87c <__kernel_tanf+0x178>)
2401a782:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401a786:	428a      	cmp	r2, r1
2401a788:	ee26 7aa6 	vmul.f32	s14, s13, s13
2401a78c:	eea7 6a25 	vfma.f32	s12, s14, s11
2401a790:	eddf 5a41 	vldr	s11, [pc, #260]	; 2401a898 <__kernel_tanf+0x194>
2401a794:	eee6 5a07 	vfma.f32	s11, s12, s14
2401a798:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401a89c <__kernel_tanf+0x198>
2401a79c:	eea5 6a87 	vfma.f32	s12, s11, s14
2401a7a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401a8a0 <__kernel_tanf+0x19c>
2401a7a4:	eee6 5a07 	vfma.f32	s11, s12, s14
2401a7a8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401a8a4 <__kernel_tanf+0x1a0>
2401a7ac:	eea5 6a87 	vfma.f32	s12, s11, s14
2401a7b0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 2401a8a8 <__kernel_tanf+0x1a4>
2401a7b4:	eee7 5a05 	vfma.f32	s11, s14, s10
2401a7b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401a8ac <__kernel_tanf+0x1a8>
2401a7bc:	eea5 5a87 	vfma.f32	s10, s11, s14
2401a7c0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 2401a8b0 <__kernel_tanf+0x1ac>
2401a7c4:	eee5 5a07 	vfma.f32	s11, s10, s14
2401a7c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401a8b4 <__kernel_tanf+0x1b0>
2401a7cc:	eea5 5a87 	vfma.f32	s10, s11, s14
2401a7d0:	eddf 5a39 	vldr	s11, [pc, #228]	; 2401a8b8 <__kernel_tanf+0x1b4>
2401a7d4:	eee5 5a07 	vfma.f32	s11, s10, s14
2401a7d8:	eeb0 7a46 	vmov.f32	s14, s12
2401a7dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
2401a7e0:	ee27 5aa6 	vmul.f32	s10, s15, s13
2401a7e4:	eeb0 6a60 	vmov.f32	s12, s1
2401a7e8:	eea7 6a05 	vfma.f32	s12, s14, s10
2401a7ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401a8bc <__kernel_tanf+0x1b8>
2401a7f0:	eee6 0a26 	vfma.f32	s1, s12, s13
2401a7f4:	eee5 0a07 	vfma.f32	s1, s10, s14
2401a7f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
2401a7fc:	db1d      	blt.n	2401a83a <__kernel_tanf+0x136>
2401a7fe:	ee06 0a90 	vmov	s13, r0
2401a802:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
2401a806:	ee27 6a07 	vmul.f32	s12, s14, s14
2401a80a:	ee37 7a00 	vadd.f32	s14, s14, s0
2401a80e:	179b      	asrs	r3, r3, #30
2401a810:	eec6 6a07 	vdiv.f32	s13, s12, s14
2401a814:	f003 0302 	and.w	r3, r3, #2
2401a818:	f1c3 0301 	rsb	r3, r3, #1
2401a81c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401a820:	ee76 0ae0 	vsub.f32	s1, s13, s1
2401a824:	ee77 7ae0 	vsub.f32	s15, s15, s1
2401a828:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401a82c:	ee07 3a90 	vmov	s15, r3
2401a830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a834:	ee67 7a80 	vmul.f32	s15, s15, s0
2401a838:	e77c      	b.n	2401a734 <__kernel_tanf+0x30>
2401a83a:	2801      	cmp	r0, #1
2401a83c:	d01b      	beq.n	2401a876 <__kernel_tanf+0x172>
2401a83e:	4b20      	ldr	r3, [pc, #128]	; (2401a8c0 <__kernel_tanf+0x1bc>)
2401a840:	ee17 2a10 	vmov	r2, s14
2401a844:	401a      	ands	r2, r3
2401a846:	ee06 2a10 	vmov	s12, r2
2401a84a:	ee76 7a67 	vsub.f32	s15, s12, s15
2401a84e:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401a852:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a856:	eec7 6a87 	vdiv.f32	s13, s15, s14
2401a85a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a85e:	ee16 2a90 	vmov	r2, s13
2401a862:	4013      	ands	r3, r2
2401a864:	ee07 3a90 	vmov	s15, r3
2401a868:	eea6 7a27 	vfma.f32	s14, s12, s15
2401a86c:	eea0 7aa7 	vfma.f32	s14, s1, s15
2401a870:	eee7 7a26 	vfma.f32	s15, s14, s13
2401a874:	e75e      	b.n	2401a734 <__kernel_tanf+0x30>
2401a876:	eef0 7a47 	vmov.f32	s15, s14
2401a87a:	e75b      	b.n	2401a734 <__kernel_tanf+0x30>
2401a87c:	3f2ca140 	.word	0x3f2ca140
2401a880:	3f490fda 	.word	0x3f490fda
2401a884:	33222168 	.word	0x33222168
2401a888:	00000000 	.word	0x00000000
2401a88c:	b79bae5f 	.word	0xb79bae5f
2401a890:	38a3f445 	.word	0x38a3f445
2401a894:	37d95384 	.word	0x37d95384
2401a898:	3a1a26c8 	.word	0x3a1a26c8
2401a89c:	3b6b6916 	.word	0x3b6b6916
2401a8a0:	3cb327a4 	.word	0x3cb327a4
2401a8a4:	3e088889 	.word	0x3e088889
2401a8a8:	3895c07a 	.word	0x3895c07a
2401a8ac:	398137b9 	.word	0x398137b9
2401a8b0:	3abede48 	.word	0x3abede48
2401a8b4:	3c11371f 	.word	0x3c11371f
2401a8b8:	3d5d0dd1 	.word	0x3d5d0dd1
2401a8bc:	3eaaaaab 	.word	0x3eaaaaab
2401a8c0:	fffff000 	.word	0xfffff000

2401a8c4 <fabs>:
2401a8c4:	ec51 0b10 	vmov	r0, r1, d0
2401a8c8:	ee10 2a10 	vmov	r2, s0
2401a8cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401a8d0:	ec43 2b10 	vmov	d0, r2, r3
2401a8d4:	4770      	bx	lr
	...

2401a8d8 <floor>:
2401a8d8:	ee10 1a90 	vmov	r1, s1
2401a8dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
2401a8e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
2401a8e4:	2b13      	cmp	r3, #19
2401a8e6:	b530      	push	{r4, r5, lr}
2401a8e8:	ee10 0a10 	vmov	r0, s0
2401a8ec:	ee10 5a10 	vmov	r5, s0
2401a8f0:	dc31      	bgt.n	2401a956 <floor+0x7e>
2401a8f2:	2b00      	cmp	r3, #0
2401a8f4:	da15      	bge.n	2401a922 <floor+0x4a>
2401a8f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 2401a9b0 <floor+0xd8>
2401a8fa:	ee30 0b07 	vadd.f64	d0, d0, d7
2401a8fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a906:	dd07      	ble.n	2401a918 <floor+0x40>
2401a908:	2900      	cmp	r1, #0
2401a90a:	da4e      	bge.n	2401a9aa <floor+0xd2>
2401a90c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401a910:	4318      	orrs	r0, r3
2401a912:	d001      	beq.n	2401a918 <floor+0x40>
2401a914:	4928      	ldr	r1, [pc, #160]	; (2401a9b8 <floor+0xe0>)
2401a916:	2000      	movs	r0, #0
2401a918:	460b      	mov	r3, r1
2401a91a:	4602      	mov	r2, r0
2401a91c:	ec43 2b10 	vmov	d0, r2, r3
2401a920:	e020      	b.n	2401a964 <floor+0x8c>
2401a922:	4a26      	ldr	r2, [pc, #152]	; (2401a9bc <floor+0xe4>)
2401a924:	411a      	asrs	r2, r3
2401a926:	ea01 0402 	and.w	r4, r1, r2
2401a92a:	4304      	orrs	r4, r0
2401a92c:	d01a      	beq.n	2401a964 <floor+0x8c>
2401a92e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 2401a9b0 <floor+0xd8>
2401a932:	ee30 0b07 	vadd.f64	d0, d0, d7
2401a936:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401a93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a93e:	ddeb      	ble.n	2401a918 <floor+0x40>
2401a940:	2900      	cmp	r1, #0
2401a942:	bfbe      	ittt	lt
2401a944:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
2401a948:	fa40 f303 	asrlt.w	r3, r0, r3
2401a94c:	18c9      	addlt	r1, r1, r3
2401a94e:	ea21 0102 	bic.w	r1, r1, r2
2401a952:	2000      	movs	r0, #0
2401a954:	e7e0      	b.n	2401a918 <floor+0x40>
2401a956:	2b33      	cmp	r3, #51	; 0x33
2401a958:	dd05      	ble.n	2401a966 <floor+0x8e>
2401a95a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401a95e:	d101      	bne.n	2401a964 <floor+0x8c>
2401a960:	ee30 0b00 	vadd.f64	d0, d0, d0
2401a964:	bd30      	pop	{r4, r5, pc}
2401a966:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401a96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401a96e:	40e2      	lsrs	r2, r4
2401a970:	4202      	tst	r2, r0
2401a972:	d0f7      	beq.n	2401a964 <floor+0x8c>
2401a974:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2401a9b0 <floor+0xd8>
2401a978:	ee30 0b07 	vadd.f64	d0, d0, d7
2401a97c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a984:	ddc8      	ble.n	2401a918 <floor+0x40>
2401a986:	2900      	cmp	r1, #0
2401a988:	da02      	bge.n	2401a990 <floor+0xb8>
2401a98a:	2b14      	cmp	r3, #20
2401a98c:	d103      	bne.n	2401a996 <floor+0xbe>
2401a98e:	3101      	adds	r1, #1
2401a990:	ea20 0002 	bic.w	r0, r0, r2
2401a994:	e7c0      	b.n	2401a918 <floor+0x40>
2401a996:	2401      	movs	r4, #1
2401a998:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401a99c:	fa04 f303 	lsl.w	r3, r4, r3
2401a9a0:	4418      	add	r0, r3
2401a9a2:	42a8      	cmp	r0, r5
2401a9a4:	bf38      	it	cc
2401a9a6:	1909      	addcc	r1, r1, r4
2401a9a8:	e7f2      	b.n	2401a990 <floor+0xb8>
2401a9aa:	2000      	movs	r0, #0
2401a9ac:	4601      	mov	r1, r0
2401a9ae:	e7b3      	b.n	2401a918 <floor+0x40>
2401a9b0:	8800759c 	.word	0x8800759c
2401a9b4:	7e37e43c 	.word	0x7e37e43c
2401a9b8:	bff00000 	.word	0xbff00000
2401a9bc:	000fffff 	.word	0x000fffff

2401a9c0 <scalbn>:
2401a9c0:	ee10 1a90 	vmov	r1, s1
2401a9c4:	b510      	push	{r4, lr}
2401a9c6:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401a9ca:	b98c      	cbnz	r4, 2401a9f0 <scalbn+0x30>
2401a9cc:	ee10 3a10 	vmov	r3, s0
2401a9d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401a9d4:	430b      	orrs	r3, r1
2401a9d6:	d011      	beq.n	2401a9fc <scalbn+0x3c>
2401a9d8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 2401aaa0 <scalbn+0xe0>
2401a9dc:	4b3c      	ldr	r3, [pc, #240]	; (2401aad0 <scalbn+0x110>)
2401a9de:	ee20 0b07 	vmul.f64	d0, d0, d7
2401a9e2:	4298      	cmp	r0, r3
2401a9e4:	da0b      	bge.n	2401a9fe <scalbn+0x3e>
2401a9e6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 2401aaa8 <scalbn+0xe8>
2401a9ea:	ee20 0b07 	vmul.f64	d0, d0, d7
2401a9ee:	e005      	b.n	2401a9fc <scalbn+0x3c>
2401a9f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
2401a9f4:	429c      	cmp	r4, r3
2401a9f6:	d107      	bne.n	2401aa08 <scalbn+0x48>
2401a9f8:	ee30 0b00 	vadd.f64	d0, d0, d0
2401a9fc:	bd10      	pop	{r4, pc}
2401a9fe:	ee10 1a90 	vmov	r1, s1
2401aa02:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401aa06:	3c36      	subs	r4, #54	; 0x36
2401aa08:	4404      	add	r4, r0
2401aa0a:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401aa0e:	429c      	cmp	r4, r3
2401aa10:	dd0d      	ble.n	2401aa2e <scalbn+0x6e>
2401aa12:	ed9f 7b27 	vldr	d7, [pc, #156]	; 2401aab0 <scalbn+0xf0>
2401aa16:	ed9f 5b28 	vldr	d5, [pc, #160]	; 2401aab8 <scalbn+0xf8>
2401aa1a:	eeb0 6b47 	vmov.f64	d6, d7
2401aa1e:	ee10 3a90 	vmov	r3, s1
2401aa22:	2b00      	cmp	r3, #0
2401aa24:	fe27 7b05 	vselge.f64	d7, d7, d5
2401aa28:	ee27 0b06 	vmul.f64	d0, d7, d6
2401aa2c:	e7e6      	b.n	2401a9fc <scalbn+0x3c>
2401aa2e:	2c00      	cmp	r4, #0
2401aa30:	dd0a      	ble.n	2401aa48 <scalbn+0x88>
2401aa32:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401aa36:	ec53 2b10 	vmov	r2, r3, d0
2401aa3a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401aa3e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
2401aa42:	ec43 2b10 	vmov	d0, r2, r3
2401aa46:	e7d9      	b.n	2401a9fc <scalbn+0x3c>
2401aa48:	f114 0f35 	cmn.w	r4, #53	; 0x35
2401aa4c:	da19      	bge.n	2401aa82 <scalbn+0xc2>
2401aa4e:	f24c 3350 	movw	r3, #50000	; 0xc350
2401aa52:	4298      	cmp	r0, r3
2401aa54:	ee10 3a90 	vmov	r3, s1
2401aa58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2401aa5c:	dd09      	ble.n	2401aa72 <scalbn+0xb2>
2401aa5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 2401aab0 <scalbn+0xf0>
2401aa62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 2401aab8 <scalbn+0xf8>
2401aa66:	eeb0 7b40 	vmov.f64	d7, d0
2401aa6a:	2b00      	cmp	r3, #0
2401aa6c:	fe00 0b06 	vseleq.f64	d0, d0, d6
2401aa70:	e7bb      	b.n	2401a9ea <scalbn+0x2a>
2401aa72:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 2401aaa8 <scalbn+0xe8>
2401aa76:	ed9f 6b12 	vldr	d6, [pc, #72]	; 2401aac0 <scalbn+0x100>
2401aa7a:	eeb0 7b40 	vmov.f64	d7, d0
2401aa7e:	2b00      	cmp	r3, #0
2401aa80:	e7f4      	b.n	2401aa6c <scalbn+0xac>
2401aa82:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401aa86:	ec53 2b10 	vmov	r2, r3, d0
2401aa8a:	3436      	adds	r4, #54	; 0x36
2401aa8c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401aa90:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
2401aa94:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 2401aac8 <scalbn+0x108>
2401aa98:	ec43 2b10 	vmov	d0, r2, r3
2401aa9c:	e7a5      	b.n	2401a9ea <scalbn+0x2a>
2401aa9e:	bf00      	nop
2401aaa0:	00000000 	.word	0x00000000
2401aaa4:	43500000 	.word	0x43500000
2401aaa8:	c2f8f359 	.word	0xc2f8f359
2401aaac:	01a56e1f 	.word	0x01a56e1f
2401aab0:	8800759c 	.word	0x8800759c
2401aab4:	7e37e43c 	.word	0x7e37e43c
2401aab8:	8800759c 	.word	0x8800759c
2401aabc:	fe37e43c 	.word	0xfe37e43c
2401aac0:	c2f8f359 	.word	0xc2f8f359
2401aac4:	81a56e1f 	.word	0x81a56e1f
2401aac8:	00000000 	.word	0x00000000
2401aacc:	3c900000 	.word	0x3c900000
2401aad0:	ffff3cb0 	.word	0xffff3cb0

2401aad4 <expm1f>:
2401aad4:	ee10 2a10 	vmov	r2, s0
2401aad8:	497c      	ldr	r1, [pc, #496]	; (2401accc <expm1f+0x1f8>)
2401aada:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401aade:	428b      	cmp	r3, r1
2401aae0:	d920      	bls.n	2401ab24 <expm1f+0x50>
2401aae2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401aae6:	d902      	bls.n	2401aaee <expm1f+0x1a>
2401aae8:	ee30 0a00 	vadd.f32	s0, s0, s0
2401aaec:	4770      	bx	lr
2401aaee:	d105      	bne.n	2401aafc <expm1f+0x28>
2401aaf0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401aaf4:	2a00      	cmp	r2, #0
2401aaf6:	fe20 0a27 	vselge.f32	s0, s0, s15
2401aafa:	4770      	bx	lr
2401aafc:	2a00      	cmp	r2, #0
2401aafe:	db05      	blt.n	2401ab0c <expm1f+0x38>
2401ab00:	4973      	ldr	r1, [pc, #460]	; (2401acd0 <expm1f+0x1fc>)
2401ab02:	428b      	cmp	r3, r1
2401ab04:	d95c      	bls.n	2401abc0 <expm1f+0xec>
2401ab06:	2000      	movs	r0, #0
2401ab08:	f7fe b97c 	b.w	24018e04 <__math_oflowf>
2401ab0c:	eddf 7a71 	vldr	s15, [pc, #452]	; 2401acd4 <expm1f+0x200>
2401ab10:	ee70 7a27 	vadd.f32	s15, s0, s15
2401ab14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ab1c:	d550      	bpl.n	2401abc0 <expm1f+0xec>
2401ab1e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401ab22:	4770      	bx	lr
2401ab24:	496c      	ldr	r1, [pc, #432]	; (2401acd8 <expm1f+0x204>)
2401ab26:	428b      	cmp	r3, r1
2401ab28:	d966      	bls.n	2401abf8 <expm1f+0x124>
2401ab2a:	496c      	ldr	r1, [pc, #432]	; (2401acdc <expm1f+0x208>)
2401ab2c:	428b      	cmp	r3, r1
2401ab2e:	d847      	bhi.n	2401abc0 <expm1f+0xec>
2401ab30:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 2401ace0 <expm1f+0x20c>
2401ab34:	2a00      	cmp	r2, #0
2401ab36:	bfa7      	ittee	ge
2401ab38:	ee30 7a47 	vsubge.f32	s14, s0, s14
2401ab3c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 2401ace4 <expm1f+0x210>
2401ab40:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 2401ace8 <expm1f+0x214>
2401ab44:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401ab48:	bfac      	ite	ge
2401ab4a:	2301      	movge	r3, #1
2401ab4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2401ab50:	ee37 0a67 	vsub.f32	s0, s14, s15
2401ab54:	ee37 7a40 	vsub.f32	s14, s14, s0
2401ab58:	ee77 7a67 	vsub.f32	s15, s14, s15
2401ab5c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401ab60:	ee20 4a25 	vmul.f32	s8, s0, s11
2401ab64:	ed9f 6a61 	vldr	s12, [pc, #388]	; 2401acec <expm1f+0x218>
2401ab68:	eddf 6a61 	vldr	s13, [pc, #388]	; 2401acf0 <expm1f+0x21c>
2401ab6c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 2401acf4 <expm1f+0x220>
2401ab70:	ee20 7a04 	vmul.f32	s14, s0, s8
2401ab74:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
2401ab78:	eee7 6a06 	vfma.f32	s13, s14, s12
2401ab7c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 2401acf8 <expm1f+0x224>
2401ab80:	eea6 6a87 	vfma.f32	s12, s13, s14
2401ab84:	eddf 6a5d 	vldr	s13, [pc, #372]	; 2401acfc <expm1f+0x228>
2401ab88:	eee6 6a07 	vfma.f32	s13, s12, s14
2401ab8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401ab90:	eea6 5a87 	vfma.f32	s10, s13, s14
2401ab94:	eef0 6a46 	vmov.f32	s13, s12
2401ab98:	eee5 6a07 	vfma.f32	s13, s10, s14
2401ab9c:	eee4 4a66 	vfms.f32	s9, s8, s13
2401aba0:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
2401aba4:	eea0 4a64 	vfms.f32	s8, s0, s9
2401aba8:	ee36 5ae4 	vsub.f32	s10, s13, s9
2401abac:	eec5 6a04 	vdiv.f32	s13, s10, s8
2401abb0:	ee66 6a87 	vmul.f32	s13, s13, s14
2401abb4:	bb73      	cbnz	r3, 2401ac14 <expm1f+0x140>
2401abb6:	eef0 7a47 	vmov.f32	s15, s14
2401abba:	eed0 7a26 	vfnms.f32	s15, s0, s13
2401abbe:	e024      	b.n	2401ac0a <expm1f+0x136>
2401abc0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
2401abc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401abc8:	2a00      	cmp	r2, #0
2401abca:	fe67 7a87 	vselge.f32	s15, s15, s14
2401abce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2401ad00 <expm1f+0x22c>
2401abd2:	eddf 6a43 	vldr	s13, [pc, #268]	; 2401ace0 <expm1f+0x20c>
2401abd6:	ee40 7a07 	vmla.f32	s15, s0, s14
2401abda:	eeb0 7a40 	vmov.f32	s14, s0
2401abde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401abe2:	ee17 3a90 	vmov	r3, s15
2401abe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401abea:	eea7 7ae6 	vfms.f32	s14, s15, s13
2401abee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2401ace4 <expm1f+0x210>
2401abf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401abf6:	e7ab      	b.n	2401ab50 <expm1f+0x7c>
2401abf8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
2401abfc:	d208      	bcs.n	2401ac10 <expm1f+0x13c>
2401abfe:	eddf 7a41 	vldr	s15, [pc, #260]	; 2401ad04 <expm1f+0x230>
2401ac02:	ee70 7a27 	vadd.f32	s15, s0, s15
2401ac06:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401ac0a:	ee30 0a67 	vsub.f32	s0, s0, s15
2401ac0e:	4770      	bx	lr
2401ac10:	2300      	movs	r3, #0
2401ac12:	e7a3      	b.n	2401ab5c <expm1f+0x88>
2401ac14:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401ac18:	1c5a      	adds	r2, r3, #1
2401ac1a:	eed6 7a80 	vfnms.f32	s15, s13, s0
2401ac1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401ac22:	d106      	bne.n	2401ac32 <expm1f+0x15e>
2401ac24:	ee70 7a67 	vsub.f32	s15, s0, s15
2401ac28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401ac2c:	eea7 0aa5 	vfma.f32	s0, s15, s11
2401ac30:	4770      	bx	lr
2401ac32:	2b01      	cmp	r3, #1
2401ac34:	d118      	bne.n	2401ac68 <expm1f+0x194>
2401ac36:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
2401ac3a:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ac42:	bf5b      	ittet	pl
2401ac44:	ee70 7a67 	vsubpl.f32	s15, s0, s15
2401ac48:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
2401ac4c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
2401ac50:	eea7 6a87 	vfmapl.f32	s12, s15, s14
2401ac54:	bf43      	ittte	mi
2401ac56:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
2401ac5a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
2401ac5e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
2401ac62:	eeb0 0a46 	vmovpl.f32	s0, s12
2401ac66:	4770      	bx	lr
2401ac68:	1c5a      	adds	r2, r3, #1
2401ac6a:	2a39      	cmp	r2, #57	; 0x39
2401ac6c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
2401ac70:	d90b      	bls.n	2401ac8a <expm1f+0x1b6>
2401ac72:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401ac76:	ee36 0a40 	vsub.f32	s0, s12, s0
2401ac7a:	ee10 3a10 	vmov	r3, s0
2401ac7e:	440b      	add	r3, r1
2401ac80:	ee00 3a10 	vmov	s0, r3
2401ac84:	ee30 0a46 	vsub.f32	s0, s0, s12
2401ac88:	4770      	bx	lr
2401ac8a:	2b16      	cmp	r3, #22
2401ac8c:	dc11      	bgt.n	2401acb2 <expm1f+0x1de>
2401ac8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2401ac92:	fa42 f303 	asr.w	r3, r2, r3
2401ac96:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401ac9a:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401ac9e:	ee07 3a90 	vmov	s15, r3
2401aca2:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401aca6:	ee10 3a10 	vmov	r3, s0
2401acaa:	440b      	add	r3, r1
2401acac:	ee00 3a10 	vmov	s0, r3
2401acb0:	4770      	bx	lr
2401acb2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401acb6:	05db      	lsls	r3, r3, #23
2401acb8:	ee07 3a10 	vmov	s14, r3
2401acbc:	ee77 7a87 	vadd.f32	s15, s15, s14
2401acc0:	ee70 7a67 	vsub.f32	s15, s0, s15
2401acc4:	ee37 0a86 	vadd.f32	s0, s15, s12
2401acc8:	e7ed      	b.n	2401aca6 <expm1f+0x1d2>
2401acca:	bf00      	nop
2401accc:	4195b843 	.word	0x4195b843
2401acd0:	42b17217 	.word	0x42b17217
2401acd4:	0da24260 	.word	0x0da24260
2401acd8:	3eb17218 	.word	0x3eb17218
2401acdc:	3f851591 	.word	0x3f851591
2401ace0:	3f317180 	.word	0x3f317180
2401ace4:	3717f7d1 	.word	0x3717f7d1
2401ace8:	b717f7d1 	.word	0xb717f7d1
2401acec:	b457edbb 	.word	0xb457edbb
2401acf0:	36867e54 	.word	0x36867e54
2401acf4:	bd088889 	.word	0xbd088889
2401acf8:	b8a670cd 	.word	0xb8a670cd
2401acfc:	3ad00d01 	.word	0x3ad00d01
2401ad00:	3fb8aa3b 	.word	0x3fb8aa3b
2401ad04:	7149f2ca 	.word	0x7149f2ca

2401ad08 <floorf>:
2401ad08:	ee10 3a10 	vmov	r3, s0
2401ad0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401ad10:	3a7f      	subs	r2, #127	; 0x7f
2401ad12:	2a16      	cmp	r2, #22
2401ad14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2401ad18:	dc2a      	bgt.n	2401ad70 <floorf+0x68>
2401ad1a:	2a00      	cmp	r2, #0
2401ad1c:	da11      	bge.n	2401ad42 <floorf+0x3a>
2401ad1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401ad80 <floorf+0x78>
2401ad22:	ee30 0a27 	vadd.f32	s0, s0, s15
2401ad26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ad2e:	dd05      	ble.n	2401ad3c <floorf+0x34>
2401ad30:	2b00      	cmp	r3, #0
2401ad32:	da23      	bge.n	2401ad7c <floorf+0x74>
2401ad34:	4a13      	ldr	r2, [pc, #76]	; (2401ad84 <floorf+0x7c>)
2401ad36:	2900      	cmp	r1, #0
2401ad38:	bf18      	it	ne
2401ad3a:	4613      	movne	r3, r2
2401ad3c:	ee00 3a10 	vmov	s0, r3
2401ad40:	4770      	bx	lr
2401ad42:	4911      	ldr	r1, [pc, #68]	; (2401ad88 <floorf+0x80>)
2401ad44:	4111      	asrs	r1, r2
2401ad46:	420b      	tst	r3, r1
2401ad48:	d0fa      	beq.n	2401ad40 <floorf+0x38>
2401ad4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401ad80 <floorf+0x78>
2401ad4e:	ee30 0a27 	vadd.f32	s0, s0, s15
2401ad52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401ad56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ad5a:	ddef      	ble.n	2401ad3c <floorf+0x34>
2401ad5c:	2b00      	cmp	r3, #0
2401ad5e:	bfbe      	ittt	lt
2401ad60:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
2401ad64:	fa40 f202 	asrlt.w	r2, r0, r2
2401ad68:	189b      	addlt	r3, r3, r2
2401ad6a:	ea23 0301 	bic.w	r3, r3, r1
2401ad6e:	e7e5      	b.n	2401ad3c <floorf+0x34>
2401ad70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
2401ad74:	d3e4      	bcc.n	2401ad40 <floorf+0x38>
2401ad76:	ee30 0a00 	vadd.f32	s0, s0, s0
2401ad7a:	4770      	bx	lr
2401ad7c:	2300      	movs	r3, #0
2401ad7e:	e7dd      	b.n	2401ad3c <floorf+0x34>
2401ad80:	7149f2ca 	.word	0x7149f2ca
2401ad84:	bf800000 	.word	0xbf800000
2401ad88:	007fffff 	.word	0x007fffff

2401ad8c <scalbnf>:
2401ad8c:	ee10 3a10 	vmov	r3, s0
2401ad90:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401ad94:	d024      	beq.n	2401ade0 <scalbnf+0x54>
2401ad96:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401ad9a:	d302      	bcc.n	2401ada2 <scalbnf+0x16>
2401ad9c:	ee30 0a00 	vadd.f32	s0, s0, s0
2401ada0:	4770      	bx	lr
2401ada2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401ada6:	d121      	bne.n	2401adec <scalbnf+0x60>
2401ada8:	4b29      	ldr	r3, [pc, #164]	; (2401ae50 <scalbnf+0xc4>)
2401adaa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2401ae54 <scalbnf+0xc8>
2401adae:	4298      	cmp	r0, r3
2401adb0:	ee20 0a27 	vmul.f32	s0, s0, s15
2401adb4:	db15      	blt.n	2401ade2 <scalbnf+0x56>
2401adb6:	ee10 3a10 	vmov	r3, s0
2401adba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401adbe:	3a19      	subs	r2, #25
2401adc0:	4402      	add	r2, r0
2401adc2:	2afe      	cmp	r2, #254	; 0xfe
2401adc4:	dd14      	ble.n	2401adf0 <scalbnf+0x64>
2401adc6:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401ae58 <scalbnf+0xcc>
2401adca:	eddf 6a24 	vldr	s13, [pc, #144]	; 2401ae5c <scalbnf+0xd0>
2401adce:	ee10 3a10 	vmov	r3, s0
2401add2:	eeb0 7a67 	vmov.f32	s14, s15
2401add6:	2b00      	cmp	r3, #0
2401add8:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401addc:	ee27 0a27 	vmul.f32	s0, s14, s15
2401ade0:	4770      	bx	lr
2401ade2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401ae60 <scalbnf+0xd4>
2401ade6:	ee20 0a27 	vmul.f32	s0, s0, s15
2401adea:	4770      	bx	lr
2401adec:	0dd2      	lsrs	r2, r2, #23
2401adee:	e7e7      	b.n	2401adc0 <scalbnf+0x34>
2401adf0:	2a00      	cmp	r2, #0
2401adf2:	dd06      	ble.n	2401ae02 <scalbnf+0x76>
2401adf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401adf8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401adfc:	ee00 3a10 	vmov	s0, r3
2401ae00:	4770      	bx	lr
2401ae02:	f112 0f16 	cmn.w	r2, #22
2401ae06:	da19      	bge.n	2401ae3c <scalbnf+0xb0>
2401ae08:	f24c 3350 	movw	r3, #50000	; 0xc350
2401ae0c:	4298      	cmp	r0, r3
2401ae0e:	ee10 3a10 	vmov	r3, s0
2401ae12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2401ae16:	dd09      	ble.n	2401ae2c <scalbnf+0xa0>
2401ae18:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 2401ae58 <scalbnf+0xcc>
2401ae1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2401ae5c <scalbnf+0xd0>
2401ae20:	eef0 7a40 	vmov.f32	s15, s0
2401ae24:	2b00      	cmp	r3, #0
2401ae26:	fe00 0a07 	vseleq.f32	s0, s0, s14
2401ae2a:	e7dc      	b.n	2401ade6 <scalbnf+0x5a>
2401ae2c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 2401ae60 <scalbnf+0xd4>
2401ae30:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2401ae64 <scalbnf+0xd8>
2401ae34:	eef0 7a40 	vmov.f32	s15, s0
2401ae38:	2b00      	cmp	r3, #0
2401ae3a:	e7f4      	b.n	2401ae26 <scalbnf+0x9a>
2401ae3c:	3219      	adds	r2, #25
2401ae3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401ae42:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401ae46:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401ae68 <scalbnf+0xdc>
2401ae4a:	ee07 3a10 	vmov	s14, r3
2401ae4e:	e7c5      	b.n	2401addc <scalbnf+0x50>
2401ae50:	ffff3cb0 	.word	0xffff3cb0
2401ae54:	4c000000 	.word	0x4c000000
2401ae58:	7149f2ca 	.word	0x7149f2ca
2401ae5c:	f149f2ca 	.word	0xf149f2ca
2401ae60:	0da24260 	.word	0x0da24260
2401ae64:	8da24260 	.word	0x8da24260
2401ae68:	33000000 	.word	0x33000000

2401ae6c <syncMap>:
2401ae6c:	00000002 00000000 00000001 7062652e     .............ebp
2401ae7c:	00000000                                ....

2401ae80 <D1CorePrescTable>:
2401ae80:	00000000 04030201 04030201 09080706     ................

2401ae90 <flagBitshiftOffset.0>:
2401ae90:	16100600 16100600                       ........

2401ae98 <SD_Driver>:
2401ae98:	2400d985 2400d9b5 2400d9d5 2400da65     ...$...$...$e..$
2401aea8:	2400d9fd 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
2401aeb8:	3d3b2c2b 00005d5b                       +,;=[]..

2401aec0 <ExCvt>:
2401aec0:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401aed0:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401aee0:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401aef0:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401af00:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401af10:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401af20:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401af30:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401af40 <LfnOfs>:
2401af40:	07050301 12100e09 1c181614 0000001e     ................

2401af50 <Tbl>:
2401af50:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401af60:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401af70:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401af80:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401af90:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401afa0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401afb0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401afc0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401afd0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401afe0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401aff0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401b000:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401b010:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401b020:	00da00de 00d900db 00dd00fd 00b400af     ................
2401b030:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401b040:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401b050 <cvt1.1>:
2401b050:	031a0061 031700e0 030700f8 000100ff     a...............
2401b060:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401b070:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401b080:	01840182 01860184 01870187 018a0189     ................
2401b090:	018b018b 018e018d 0190018f 01910191     ................
2401b0a0:	01940193 019601f6 01980197 023d0198     ..............=.
2401b0b0:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401b0c0:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401b0d0:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401b0e0:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401b0f0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401b100:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401b110:	01ca01cb 011001cd 000101dd 01de018e     ................
2401b120:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401b130:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401b140:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401b150:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401b160:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401b170:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401b180:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401b190:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401b1a0:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401b1b0:	01a90282 02850284 02870286 024401ae     ..............D.
2401b1c0:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401b1d0:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401b1e0:	03880386 038a0389 031103b1 000203c2     ................
2401b1f0:	03a303a3 030803c4 000303cc 038e038c     ................
2401b200:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401b210:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401b220:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401b230:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401b240:	00000000                                ....

2401b244 <cvt2.0>:
2401b244:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401b254:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401b264:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401b274:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401b284:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401b294:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401b2a4:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401b2b4:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401b2c4:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401b2d4:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401b2e4:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401b2f4:	2d000164 ff410826 0000031a              d..-&.A.....

2401b300 <__leaf_table_filtertan>:
2401b300:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
2401b310:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
2401b320:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
2401b330:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
2401b340:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
2401b350:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
2401b360:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
2401b370:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
2401b380:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
2401b390:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
2401b3a0:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
2401b3b0:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
2401b3c0:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
2401b3d0:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
2401b3e0:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
2401b3f0:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
2401b400:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
2401b410:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
2401b420:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
2401b430:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
2401b440:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
2401b450:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
2401b460:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
2401b470:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
2401b480:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
2401b490:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
2401b4a0:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
2401b4b0:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
2401b4c0:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
2401b4d0:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
2401b4e0:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
2401b4f0:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
2401b500:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
2401b510:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
2401b520:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
2401b530:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
2401b540:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
2401b550:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
2401b560:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
2401b570:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
2401b580:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
2401b590:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
2401b5a0:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
2401b5b0:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
2401b5c0:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
2401b5d0:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
2401b5e0:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
2401b5f0:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
2401b600:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
2401b610:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
2401b620:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
2401b630:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
2401b640:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
2401b650:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
2401b660:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
2401b670:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
2401b680:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
2401b690:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
2401b6a0:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
2401b6b0:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
2401b6c0:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
2401b6d0:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
2401b6e0:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
2401b6f0:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
2401b700:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
2401b710:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
2401b720:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
2401b730:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
2401b740:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
2401b750:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
2401b760:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
2401b770:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
2401b780:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
2401b790:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
2401b7a0:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
2401b7b0:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
2401b7c0:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
2401b7d0:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
2401b7e0:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
2401b7f0:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
2401b800:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
2401b810:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
2401b820:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
2401b830:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
2401b840:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
2401b850:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
2401b860:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
2401b870:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
2401b880:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
2401b890:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
2401b8a0:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
2401b8b0:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
2401b8c0:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
2401b8d0:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
2401b8e0:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
2401b8f0:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
2401b900:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
2401b910:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
2401b920:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
2401b930:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
2401b940:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
2401b950:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
2401b960:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
2401b970:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
2401b980:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
2401b990:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
2401b9a0:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
2401b9b0:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
2401b9c0:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
2401b9d0:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
2401b9e0:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
2401b9f0:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
2401ba00:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
2401ba10:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
2401ba20:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
2401ba30:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
2401ba40:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
2401ba50:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
2401ba60:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
2401ba70:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
2401ba80:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
2401ba90:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
2401baa0:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
2401bab0:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
2401bac0:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
2401bad0:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
2401bae0:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
2401baf0:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
2401bb00:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
2401bb10:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
2401bb20:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
2401bb30:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
2401bb40:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
2401bb50:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
2401bb60:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
2401bb70:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
2401bb80:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
2401bb90:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
2401bba0:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
2401bbb0:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
2401bbc0:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
2401bbd0:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
2401bbe0:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
2401bbf0:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
2401bc00:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
2401bc10:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
2401bc20:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
2401bc30:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
2401bc40:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
2401bc50:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
2401bc60:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
2401bc70:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
2401bc80:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
2401bc90:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
2401bca0:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
2401bcb0:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
2401bcc0:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
2401bcd0:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
2401bce0:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
2401bcf0:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
2401bd00:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
2401bd10:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
2401bd20:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
2401bd30:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
2401bd40:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
2401bd50:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
2401bd60:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
2401bd70:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
2401bd80:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
2401bd90:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
2401bda0:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
2401bdb0:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
2401bdc0:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
2401bdd0:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
2401bde0:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
2401bdf0:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
2401be00:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
2401be10:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
2401be20:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
2401be30:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
2401be40:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
2401be50:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
2401be60:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
2401be70:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
2401be80:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
2401be90:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
2401bea0:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
2401beb0:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
2401bec0:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
2401bed0:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
2401bee0:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
2401bef0:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
2401bf00:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
2401bf10:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
2401bf20:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
2401bf30:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
2401bf40:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
2401bf50:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
2401bf60:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
2401bf70:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
2401bf80:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
2401bf90:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
2401bfa0:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
2401bfb0:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
2401bfc0:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
2401bfd0:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
2401bfe0:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
2401bff0:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
2401c000:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
2401c010:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
2401c020:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
2401c030:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
2401c040:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
2401c050:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
2401c060:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
2401c070:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
2401c080:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
2401c090:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
2401c0a0:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
2401c0b0:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
2401c0c0:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
2401c0d0:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
2401c0e0:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
2401c0f0:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
2401c100:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
2401c110:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
2401c120:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
2401c130:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
2401c140:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
2401c150:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
2401c160:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
2401c170:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
2401c180:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
2401c190:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
2401c1a0:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
2401c1b0:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
2401c1c0:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
2401c1d0:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
2401c1e0:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
2401c1f0:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
2401c200:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
2401c210:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
2401c220:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
2401c230:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
2401c240:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
2401c250:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
2401c260:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
2401c270:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
2401c280:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
2401c290:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
2401c2a0:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
2401c2b0:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
2401c2c0:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
2401c2d0:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
2401c2e0:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
2401c2f0:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
2401c300:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
2401c310:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
2401c320:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
2401c330:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
2401c340:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
2401c350:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
2401c360:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
2401c370:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
2401c380:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
2401c390:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
2401c3a0:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
2401c3b0:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
2401c3c0:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
2401c3d0:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
2401c3e0:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
2401c3f0:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
2401c400:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
2401c410:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
2401c420:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
2401c430:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
2401c440:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
2401c450:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
2401c460:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
2401c470:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
2401c480:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
2401c490:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
2401c4a0:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
2401c4b0:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
2401c4c0:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
2401c4d0:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
2401c4e0:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
2401c4f0:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
2401c500:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
2401c510:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
2401c520:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
2401c530:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
2401c540:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
2401c550:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
2401c560:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
2401c570:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
2401c580:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
2401c590:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
2401c5a0:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
2401c5b0:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
2401c5c0:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
2401c5d0:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
2401c5e0:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
2401c5f0:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
2401c600:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
2401c610:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
2401c620:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
2401c630:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
2401c640:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
2401c650:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
2401c660:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
2401c670:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
2401c680:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
2401c690:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
2401c6a0:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
2401c6b0:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
2401c6c0:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
2401c6d0:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
2401c6e0:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
2401c6f0:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
2401c700:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
2401c710:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
2401c720:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
2401c730:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
2401c740:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
2401c750:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
2401c760:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
2401c770:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
2401c780:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
2401c790:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
2401c7a0:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
2401c7b0:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
2401c7c0:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
2401c7d0:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
2401c7e0:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
2401c7f0:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
2401c800:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
2401c810:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
2401c820:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
2401c830:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
2401c840:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
2401c850:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
2401c860:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
2401c870:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
2401c880:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
2401c890:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
2401c8a0:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
2401c8b0:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
2401c8c0:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
2401c8d0:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
2401c8e0:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
2401c8f0:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
2401c900:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
2401c910:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
2401c920:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
2401c930:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
2401c940:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
2401c950:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
2401c960:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
2401c970:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
2401c980:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
2401c990:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
2401c9a0:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
2401c9b0:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
2401c9c0:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
2401c9d0:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
2401c9e0:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
2401c9f0:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
2401ca00:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
2401ca10:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
2401ca20:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
2401ca30:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
2401ca40:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
2401ca50:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
2401ca60:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
2401ca70:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
2401ca80:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
2401ca90:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
2401caa0:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
2401cab0:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
2401cac0:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
2401cad0:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
2401cae0:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
2401caf0:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
2401cb00:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
2401cb10:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
2401cb20:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
2401cb30:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
2401cb40:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
2401cb50:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
2401cb60:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
2401cb70:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
2401cb80:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
2401cb90:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
2401cba0:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
2401cbb0:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
2401cbc0:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
2401cbd0:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
2401cbe0:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
2401cbf0:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
2401cc00:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
2401cc10:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
2401cc20:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
2401cc30:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
2401cc40:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
2401cc50:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
2401cc60:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
2401cc70:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
2401cc80:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
2401cc90:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
2401cca0:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
2401ccb0:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
2401ccc0:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
2401ccd0:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
2401cce0:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
2401ccf0:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
2401cd00:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
2401cd10:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
2401cd20:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
2401cd30:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
2401cd40:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
2401cd50:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
2401cd60:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
2401cd70:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
2401cd80:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
2401cd90:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
2401cda0:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
2401cdb0:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
2401cdc0:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
2401cdd0:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
2401cde0:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
2401cdf0:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
2401ce00:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
2401ce10:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
2401ce20:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
2401ce30:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
2401ce40:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
2401ce50:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
2401ce60:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
2401ce70:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
2401ce80:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
2401ce90:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
2401cea0:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
2401ceb0:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
2401cec0:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
2401ced0:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
2401cee0:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
2401cef0:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
2401cf00:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
2401cf10:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
2401cf20:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
2401cf30:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
2401cf40:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
2401cf50:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
2401cf60:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
2401cf70:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
2401cf80:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
2401cf90:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
2401cfa0:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
2401cfb0:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
2401cfc0:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
2401cfd0:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
2401cfe0:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
2401cff0:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
2401d000:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
2401d010:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
2401d020:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
2401d030:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
2401d040:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
2401d050:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
2401d060:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
2401d070:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
2401d080:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
2401d090:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
2401d0a0:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
2401d0b0:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
2401d0c0:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
2401d0d0:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
2401d0e0:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
2401d0f0:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
2401d100:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
2401d110:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
2401d120:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
2401d130:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
2401d140:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
2401d150:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
2401d160:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
2401d170:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
2401d180:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
2401d190:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
2401d1a0:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
2401d1b0:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
2401d1c0:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
2401d1d0:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
2401d1e0:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
2401d1f0:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
2401d200:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
2401d210:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
2401d220:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
2401d230:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
2401d240:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
2401d250:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
2401d260:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
2401d270:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
2401d280:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
2401d290:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
2401d2a0:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
2401d2b0:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
2401d2c0:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
2401d2d0:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
2401d2e0:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
2401d2f0:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
2401d300:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
2401d310:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
2401d320:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
2401d330:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
2401d340:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
2401d350:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
2401d360:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
2401d370:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
2401d380:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
2401d390:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
2401d3a0:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
2401d3b0:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
2401d3c0:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
2401d3d0:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
2401d3e0:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
2401d3f0:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
2401d400:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
2401d410:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
2401d420:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
2401d430:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
2401d440:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
2401d450:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
2401d460:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
2401d470:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
2401d480:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
2401d490:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
2401d4a0:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
2401d4b0:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
2401d4c0:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
2401d4d0:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
2401d4e0:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
2401d4f0:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
2401d500:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
2401d510:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
2401d520:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
2401d530:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
2401d540:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
2401d550:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
2401d560:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
2401d570:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
2401d580:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
2401d590:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
2401d5a0:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
2401d5b0:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
2401d5c0:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
2401d5d0:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
2401d5e0:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
2401d5f0:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
2401d600:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
2401d610:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
2401d620:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
2401d630:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
2401d640:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
2401d650:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
2401d660:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
2401d670:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
2401d680:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
2401d690:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
2401d6a0:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
2401d6b0:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
2401d6c0:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
2401d6d0:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
2401d6e0:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
2401d6f0:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
2401d700:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
2401d710:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
2401d720:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
2401d730:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
2401d740:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
2401d750:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
2401d760:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
2401d770:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
2401d780:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
2401d790:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
2401d7a0:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
2401d7b0:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
2401d7c0:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
2401d7d0:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
2401d7e0:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
2401d7f0:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
2401d800:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
2401d810:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
2401d820:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
2401d830:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
2401d840:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
2401d850:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
2401d860:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
2401d870:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
2401d880:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
2401d890:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
2401d8a0:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
2401d8b0:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
2401d8c0:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
2401d8d0:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
2401d8e0:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
2401d8f0:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
2401d900:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
2401d910:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
2401d920:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
2401d930:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
2401d940:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
2401d950:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
2401d960:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
2401d970:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
2401d980:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
2401d990:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
2401d9a0:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
2401d9b0:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
2401d9c0:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
2401d9d0:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
2401d9e0:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
2401d9f0:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
2401da00:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
2401da10:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
2401da20:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
2401da30:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
2401da40:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
2401da50:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
2401da60:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
2401da70:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
2401da80:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
2401da90:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
2401daa0:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
2401dab0:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
2401dac0:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
2401dad0:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
2401dae0:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
2401daf0:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
2401db00:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
2401db10:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
2401db20:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
2401db30:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
2401db40:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
2401db50:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
2401db60:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
2401db70:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
2401db80:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
2401db90:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
2401dba0:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
2401dbb0:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
2401dbc0:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
2401dbd0:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
2401dbe0:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
2401dbf0:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
2401dc00:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
2401dc10:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
2401dc20:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
2401dc30:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
2401dc40:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
2401dc50:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
2401dc60:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
2401dc70:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
2401dc80:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
2401dc90:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
2401dca0:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
2401dcb0:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
2401dcc0:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
2401dcd0:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
2401dce0:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
2401dcf0:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
2401dd00:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
2401dd10:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
2401dd20:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
2401dd30:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
2401dd40:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
2401dd50:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
2401dd60:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
2401dd70:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
2401dd80:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
2401dd90:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
2401dda0:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
2401ddb0:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
2401ddc0:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
2401ddd0:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
2401dde0:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
2401ddf0:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
2401de00:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
2401de10:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
2401de20:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
2401de30:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
2401de40:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
2401de50:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
2401de60:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
2401de70:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
2401de80:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
2401de90:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
2401dea0:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
2401deb0:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
2401dec0:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
2401ded0:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
2401dee0:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
2401def0:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
2401df00:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
2401df10:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
2401df20:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
2401df30:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
2401df40:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
2401df50:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
2401df60:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
2401df70:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
2401df80:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
2401df90:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
2401dfa0:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
2401dfb0:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
2401dfc0:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
2401dfd0:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
2401dfe0:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
2401dff0:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
2401e000:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
2401e010:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
2401e020:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
2401e030:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
2401e040:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
2401e050:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
2401e060:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
2401e070:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
2401e080:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
2401e090:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
2401e0a0:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
2401e0b0:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
2401e0c0:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
2401e0d0:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
2401e0e0:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
2401e0f0:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
2401e100:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
2401e110:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
2401e120:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
2401e130:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
2401e140:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
2401e150:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
2401e160:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
2401e170:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
2401e180:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
2401e190:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
2401e1a0:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
2401e1b0:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
2401e1c0:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
2401e1d0:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
2401e1e0:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
2401e1f0:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
2401e200:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
2401e210:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
2401e220:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
2401e230:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
2401e240:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
2401e250:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
2401e260:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
2401e270:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
2401e280:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
2401e290:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
2401e2a0:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
2401e2b0:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
2401e2c0:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
2401e2d0:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
2401e2e0:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
2401e2f0:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
2401e300:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
2401e310:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
2401e320:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
2401e330:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
2401e340:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
2401e350:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
2401e360:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
2401e370:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
2401e380:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
2401e390:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
2401e3a0:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
2401e3b0:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
2401e3c0:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
2401e3d0:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
2401e3e0:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
2401e3f0:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
2401e400:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
2401e410:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
2401e420:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
2401e430:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
2401e440:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
2401e450:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
2401e460:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
2401e470:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
2401e480:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
2401e490:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
2401e4a0:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
2401e4b0:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
2401e4c0:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
2401e4d0:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
2401e4e0:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
2401e4f0:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
2401e500:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
2401e510:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
2401e520:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
2401e530:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
2401e540:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
2401e550:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
2401e560:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
2401e570:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
2401e580:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
2401e590:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
2401e5a0:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
2401e5b0:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
2401e5c0:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
2401e5d0:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
2401e5e0:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
2401e5f0:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
2401e600:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
2401e610:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
2401e620:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
2401e630:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
2401e640:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
2401e650:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
2401e660:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
2401e670:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
2401e680:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
2401e690:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
2401e6a0:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
2401e6b0:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
2401e6c0:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
2401e6d0:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
2401e6e0:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
2401e6f0:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
2401e700:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
2401e710:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
2401e720:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
2401e730:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
2401e740:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
2401e750:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
2401e760:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
2401e770:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
2401e780:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
2401e790:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
2401e7a0:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
2401e7b0:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
2401e7c0:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
2401e7d0:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
2401e7e0:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
2401e7f0:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
2401e800:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
2401e810:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
2401e820:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
2401e830:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
2401e840:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
2401e850:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
2401e860:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
2401e870:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
2401e880:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
2401e890:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
2401e8a0:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
2401e8b0:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
2401e8c0:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
2401e8d0:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
2401e8e0:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
2401e8f0:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
2401e900:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
2401e910:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
2401e920:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
2401e930:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
2401e940:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
2401e950:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
2401e960:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
2401e970:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
2401e980:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
2401e990:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
2401e9a0:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
2401e9b0:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
2401e9c0:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
2401e9d0:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
2401e9e0:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
2401e9f0:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
2401ea00:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
2401ea10:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
2401ea20:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
2401ea30:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
2401ea40:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
2401ea50:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
2401ea60:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
2401ea70:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
2401ea80:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
2401ea90:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
2401eaa0:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
2401eab0:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
2401eac0:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
2401ead0:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
2401eae0:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
2401eaf0:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
2401eb00:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
2401eb10:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
2401eb20:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
2401eb30:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
2401eb40:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
2401eb50:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
2401eb60:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
2401eb70:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
2401eb80:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
2401eb90:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
2401eba0:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
2401ebb0:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
2401ebc0:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
2401ebd0:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
2401ebe0:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
2401ebf0:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
2401ec00:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
2401ec10:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
2401ec20:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
2401ec30:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
2401ec40:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
2401ec50:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
2401ec60:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
2401ec70:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
2401ec80:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
2401ec90:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
2401eca0:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
2401ecb0:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
2401ecc0:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
2401ecd0:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
2401ece0:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
2401ecf0:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
2401ed00:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
2401ed10:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
2401ed20:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
2401ed30:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
2401ed40:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
2401ed50:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
2401ed60:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
2401ed70:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
2401ed80:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
2401ed90:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
2401eda0:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
2401edb0:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
2401edc0:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
2401edd0:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
2401ede0:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
2401edf0:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
2401ee00:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
2401ee10:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
2401ee20:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
2401ee30:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
2401ee40:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
2401ee50:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
2401ee60:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
2401ee70:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
2401ee80:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
2401ee90:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
2401eea0:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
2401eeb0:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
2401eec0:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
2401eed0:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
2401eee0:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
2401eef0:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2401ef00:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2401ef10:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2401ef20:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2401ef30:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2401ef40:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2401ef50:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2401ef60:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2401ef70:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2401ef80:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2401ef90:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
2401efa0:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
2401efb0:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
2401efc0:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
2401efd0:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
2401efe0:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
2401eff0:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2401f000:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2401f010:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2401f020:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2401f030:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2401f040:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2401f050:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2401f060:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2401f070:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2401f080:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2401f090:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
2401f0a0:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
2401f0b0:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
2401f0c0:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
2401f0d0:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
2401f0e0:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
2401f0f0:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2401f100:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2401f110:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2401f120:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2401f130:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2401f140:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2401f150:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2401f160:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2401f170:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2401f180:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2401f190:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
2401f1a0:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
2401f1b0:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
2401f1c0:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
2401f1d0:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
2401f1e0:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
2401f1f0:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2401f200:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2401f210:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2401f220:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2401f230:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2401f240:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2401f250:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2401f260:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2401f270:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2401f280:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2401f290:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
2401f2a0:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
2401f2b0:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
2401f2c0:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
2401f2d0:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
2401f2e0:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
2401f2f0:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2401f300 <__leaf_table_fir16XHigh>:
2401f300:	b828803b b8075a7f b83afe5a b8793f7f     ;.(..Z..Z.:..?y.
2401f310:	b8a16efe b8cc365a b8fd2336 b91a20a8     .n..Z6..6#... ..
2401f320:	b938ba83 b95a3b88 b97e67f6 b992750e     ..8..;Z..g~..u..
2401f330:	b9a6a877 b9bb87a7 b9d0bdfd b9e5e912     w...............
2401f340:	b9fa9967 ba0729c3 ba1048b6 ba18624b     g....)...H..Kb..
2401f350:	ba1f2c3d ba245a6f ba27a0a6 ba28b3e0     =,..oZ$...'...(.
2401f360:	ba274cb9 ba23287f ba1c0c0f ba11c4db     .L'..(#.........
2401f370:	ba042b83 b9e64ab2 b9bd4b9e b98d60b9     .+...J...K...`..
2401f380:	b92d64dd b84c66a3 38a67ca9 39647818     .d-..fL..|.8.xd9
2401f390:	39bf8fbd 3a085e5c 3a326265 3a5d460b     ...9\^.:eb2:.F]:
2401f3a0:	3a84372e 3a999afc 3aae7804 3ac27598     .7.:...:.x.:.u.:
2401f3b0:	3ad53a80 3ae66ee9 3af5be2c 3b016c61     .:.:.n.:,..:al.;
2401f3c0:	3b06bb0f 3b0aab52 3b0d22ab 3b0e0cb8     ...;R..;.".;...;
2401f3d0:	3b0d5bef 3b0b0a2e 3b071928 3b01929b     .[.;...;(..;...;
2401f3e0:	3af51105 3ae429e8 3ad0b3b2 3abb010e     ...:.).:...:...:
2401f3f0:	3aa3723f 3a8a736f 3a60f53f 3a2c0adb     ?r.:os.:?.`:..,:
2401f400:	39ee59cd 3986ca10 388dddf8 b8e66ce8     .Y.9...9...8.l..
2401f410:	b98e8577 b9d98431 ba0c8324 ba25db46     w...1...$...F.%.
2401f420:	ba3842aa ba43581c ba46e3ab ba42d973     .B8..XC...F.s.B.
2401f430:	ba375a72 ba24b587 ba0b664f b9d8266e     rZ7...$.Of..n&..
2401f440:	b98f138d b8f5d376 3854c47d 396d8cbd     ....v...}.T8..m9
2401f450:	39d4a213 3a18d2a0 3a45a363 3a6f8528     ...9...:c.E:(.o:
2401f460:	3a8aa371 3a9ae616 3aa80b5d 3ab1a776     q..:...:]..:v..:
2401f470:	3ab763e9 3ab900d4 3ab658e8 3aaf6527     .c.:...:.X.:'e.:
2401f480:	3aa43966 3a95034d 3a82142e 3a579f82     f9.:M..:...:..W:
2401f490:	3a257140 39dd8fe4 3953d6da b7d2e403     @q%:...9..S9....
2401f4a0:	b984b7e5 b9f99775 ba345946 ba67819f     ....u...FY4...g.
2401f4b0:	ba8a6b42 ba9d8446 baac7869 bab6ccdb     Bk..F...ix......
2401f4c0:	babc2344 babc3cf7 bab6fd6d baac6bd8     D#...<..m....k..
2401f4d0:	ba9cb3d4 ba88252c ba5e6529 ba24df29     ....,%..)e^.).$.
2401f4e0:	b9ca34ba b902b206 391aae0d 39de1e16     .4.........9...9
2401f4f0:	3a368d63 3a7b2f1f 3a9d822d 3aba1904     c.6:./{:-..:...:
2401f500:	3ad27f56 3ae5eff2 3af3c2d2 3afb724c     V..:...:...:Lr.:
2401f510:	3afc9fd3 3af7175f 3aead1d4 3ad7f692     ...:_..:...:...:
2401f520:	3abedb9b 3aa00455 3a783e8f 3a280548     ...:U..:.>x:H.(:
2401f530:	39a29dc6 b81b87d2 b9cd6f70 ba4337de     ...9....po...7C.
2401f540:	ba8e5a31 bab8562a bade59a9 baff418a     1Z..*V...Y...A..
2401f550:	bb0d0305 bb16e154 bb1cde9c bb1eb608     ....T...........
2401f560:	bb1c3daa bb15683c bb0a4651 baf60d63     .=..<h..QF..c...
2401f570:	bacfec00 baa2fb00 ba60843e b9e3e2da     ........>.`.....
2401f580:	3740a839 39f6af20 3a73df43 3ab4a93e     9.@7 ..9C.s:>..:
2401f590:	3aec3344 3b0f78fc 3b25af57 3b380968     D3.:.x.;W.%;h.8;
2401f5a0:	3b45e946 3b4ecb32 3b5249f5 3b5022a0     F.E;2.N;.IR;."P;
2401f5b0:	3b483745 3b3a90fe 3b2760b8 3b0eff3c     E7H;..:;.`';<..;
2401f5c0:	3ae3d81a 3aa1968b 3a3188d8 38b2657b     ...:...:..1:{e.8
2401f5d0:	ba0a9e4b ba968343 bae6465e bb19302a     K...C...^F..*0..
2401f5e0:	bb3c4f88 bb5b72bc bb759d71 bb84f680     .O<..r[.q.u.....
2401f5f0:	bb8bcf7f bb8f0bb9 bb8e7358 bb89e6dd     ........Xs......
2401f600:	bb81608b bb69eba2 bb49af5b bb22a3ba     .`....i.[.I...".
2401f610:	baeb2b01 ba8702c3 b9590bba 3a2bb5f2     .+........Y...+:
2401f620:	3ac916fb 3b1dc539 3b550973 3b8461d3     ...:9..;s.U;.a.;
2401f630:	3b9bb323 3bafbaa0 3bbfc836 3bcb3ed7     #..;...;6..;.>.;
2401f640:	3bd19942 3bd26e62 3bcd7525 3bc287b4     B..;bn.;%u.;...;
2401f650:	3bb1a5ee 3b9af70a 3b7d94cc 3b3b2ecb     ...;...;..};..;;
2401f660:	3adff149 39ebc642 ba6a1a86 bb15ff09     I..:B..9..j.....
2401f670:	bb72b761 bba72719 bbd32336 bbfc09ef     a.r..'..6#......
2401f680:	bc104a54 bc1fc1bc bc2bd21b bc33ecd9     TJ........+...3.
2401f690:	bc37914f bc364ff3 bc2fcd54 bc23c4b5     O.7..O6.T./...#.
2401f6a0:	bc120a39 bbf5191a bbbaac4e bb6a3781     9.......N....7j.
2401f6b0:	ba93b7d9 3ad47b19 3b9816a4 3c0169df     .....{.:...;.i.<
2401f6c0:	3c3a0151 3c7513ef 3c98e998 3cb7b1af     Q.:<..u<...<...<
2401f6d0:	3cd66fc2 3cf4aed0 3d08fcbc 3d16ee17     .o.<...<...=...=
2401f6e0:	3d23f3b9 3d2fd8f2 3d3a6d2a 3d4384d1     ..#=../=*m:=..C=
2401f6f0:	3d4afa37 3d50ae49 3d54892a 3d567ab0     7.J=I.P=*.T=.zV=
2401f700:	3d567ab0 3d54892a 3d50ae49 3d4afa37     .zV=*.T=I.P=7.J=
2401f710:	3d4384d1 3d3a6d2a 3d2fd8f2 3d23f3b9     ..C=*m:=../=..#=
2401f720:	3d16ee17 3d08fcbc 3cf4aed0 3cd66fc2     ...=...=...<.o.<
2401f730:	3cb7b1af 3c98e998 3c7513ef 3c3a0151     ...<...<..u<Q.:<
2401f740:	3c0169df 3b9816a4 3ad47b19 ba93b7d9     .i.<...;.{.:....
2401f750:	bb6a3781 bbbaac4e bbf5191a bc120a39     .7j.N.......9...
2401f760:	bc23c4b5 bc2fcd54 bc364ff3 bc37914f     ..#.T./..O6.O.7.
2401f770:	bc33ecd9 bc2bd21b bc1fc1bc bc104a54     ..3...+.....TJ..
2401f780:	bbfc09ef bbd32336 bba72719 bb72b761     ....6#...'..a.r.
2401f790:	bb15ff09 ba6a1a86 39ebc642 3adff149     ......j.B..9I..:
2401f7a0:	3b3b2ecb 3b7d94cc 3b9af70a 3bb1a5ee     ..;;..};...;...;
2401f7b0:	3bc287b4 3bcd7525 3bd26e62 3bd19942     ...;%u.;bn.;B..;
2401f7c0:	3bcb3ed7 3bbfc836 3bafbaa0 3b9bb323     .>.;6..;...;#..;
2401f7d0:	3b8461d3 3b550973 3b1dc539 3ac916fb     .a.;s.U;9..;...:
2401f7e0:	3a2bb5f2 b9590bba ba8702c3 baeb2b01     ..+:..Y......+..
2401f7f0:	bb22a3ba bb49af5b bb69eba2 bb81608b     ..".[.I...i..`..
2401f800:	bb89e6dd bb8e7358 bb8f0bb9 bb8bcf7f     ....Xs..........
2401f810:	bb84f680 bb759d71 bb5b72bc bb3c4f88     ....q.u..r[..O<.
2401f820:	bb19302a bae6465e ba968343 ba0a9e4b     *0..^F..C...K...
2401f830:	38b2657b 3a3188d8 3aa1968b 3ae3d81a     {e.8..1:...:...:
2401f840:	3b0eff3c 3b2760b8 3b3a90fe 3b483745     <..;.`';..:;E7H;
2401f850:	3b5022a0 3b5249f5 3b4ecb32 3b45e946     ."P;.IR;2.N;F.E;
2401f860:	3b380968 3b25af57 3b0f78fc 3aec3344     h.8;W.%;.x.;D3.:
2401f870:	3ab4a93e 3a73df43 39f6af20 3740a839     >..:C.s: ..99.@7
2401f880:	b9e3e2da ba60843e baa2fb00 bacfec00     ....>.`.........
2401f890:	baf60d63 bb0a4651 bb15683c bb1c3daa     c...QF..<h...=..
2401f8a0:	bb1eb608 bb1cde9c bb16e154 bb0d0305     ........T.......
2401f8b0:	baff418a bade59a9 bab8562a ba8e5a31     .A...Y..*V..1Z..
2401f8c0:	ba4337de b9cd6f70 b81b87d2 39a29dc6     .7C.po.........9
2401f8d0:	3a280548 3a783e8f 3aa00455 3abedb9b     H.(:.>x:U..:...:
2401f8e0:	3ad7f692 3aead1d4 3af7175f 3afc9fd3     ...:...:_..:...:
2401f8f0:	3afb724c 3af3c2d2 3ae5eff2 3ad27f56     Lr.:...:...:V..:
2401f900:	3aba1904 3a9d822d 3a7b2f1f 3a368d63     ...:-..:./{:c.6:
2401f910:	39de1e16 391aae0d b902b206 b9ca34ba     ...9...9.....4..
2401f920:	ba24df29 ba5e6529 ba88252c ba9cb3d4     ).$.)e^.,%......
2401f930:	baac6bd8 bab6fd6d babc3cf7 babc2344     .k..m....<..D#..
2401f940:	bab6ccdb baac7869 ba9d8446 ba8a6b42     ....ix..F...Bk..
2401f950:	ba67819f ba345946 b9f99775 b984b7e5     ..g.FY4.u.......
2401f960:	b7d2e403 3953d6da 39dd8fe4 3a257140     ......S9...9@q%:
2401f970:	3a579f82 3a82142e 3a95034d 3aa43966     ..W:...:M..:f9.:
2401f980:	3aaf6527 3ab658e8 3ab900d4 3ab763e9     'e.:.X.:...:.c.:
2401f990:	3ab1a776 3aa80b5d 3a9ae616 3a8aa371     v..:]..:...:q..:
2401f9a0:	3a6f8528 3a45a363 3a18d2a0 39d4a213     (.o:c.E:...:...9
2401f9b0:	396d8cbd 3854c47d b8f5d376 b98f138d     ..m9}.T8v.......
2401f9c0:	b9d8266e ba0b664f ba24b587 ba375a72     n&..Of....$.rZ7.
2401f9d0:	ba42d973 ba46e3ab ba43581c ba3842aa     s.B...F..XC..B8.
2401f9e0:	ba25db46 ba0c8324 b9d98431 b98e8577     F.%.$...1...w...
2401f9f0:	b8e66ce8 388dddf8 3986ca10 39ee59cd     .l.....8...9.Y.9
2401fa00:	3a2c0adb 3a60f53f 3a8a736f 3aa3723f     ..,:?.`:os.:?r.:
2401fa10:	3abb010e 3ad0b3b2 3ae429e8 3af51105     ...:...:.).:...:
2401fa20:	3b01929b 3b071928 3b0b0a2e 3b0d5bef     ...;(..;...;.[.;
2401fa30:	3b0e0cb8 3b0d22ab 3b0aab52 3b06bb0f     ...;.".;R..;...;
2401fa40:	3b016c61 3af5be2c 3ae66ee9 3ad53a80     al.;,..:.n.:.:.:
2401fa50:	3ac27598 3aae7804 3a999afc 3a84372e     .u.:.x.:...:.7.:
2401fa60:	3a5d460b 3a326265 3a085e5c 39bf8fbd     .F]:eb2:\^.:...9
2401fa70:	39647818 38a67ca9 b84c66a3 b92d64dd     .xd9.|.8.fL..d-.
2401fa80:	b98d60b9 b9bd4b9e b9e64ab2 ba042b83     .`...K...J...+..
2401fa90:	ba11c4db ba1c0c0f ba23287f ba274cb9     .........(#..L'.
2401faa0:	ba28b3e0 ba27a0a6 ba245a6f ba1f2c3d     ..(...'.oZ$.=,..
2401fab0:	ba18624b ba1048b6 ba0729c3 b9fa9967     Kb...H...)..g...
2401fac0:	b9e5e912 b9d0bdfd b9bb87a7 b9a6a877     ............w...
2401fad0:	b992750e b97e67f6 b95a3b88 b938ba83     .u...g~..;Z...8.
2401fae0:	b91a20a8 b8fd2336 b8cc365a b8a16efe     . ..6#..Z6...n..
2401faf0:	b8793f7f b83afe5a b8075a7f b828803b     .?y.Z.:..Z..;.(.

2401fb00 <__leaf_table_fir16XLow>:
2401fb00:	3b972596 3b1e7b86 3b4480c1 3b6dc089     .%.;.{.;..D;..m;
2401fb10:	3b8cd267 3ba3b759 3bbb2b1d 3bd2b96e     g..;Y..;.+.;n..;
2401fb20:	3be9d0a6 3bffde9f 3c0a28c2 3c13401d     ...;...;.(.<.@.<
2401fb30:	3c1aea38 3c20d2d4 3c24b1bf 3c264050     8..<.. <..$<P@&<
2401fb40:	3c254231 3c2184e5 3c1ae23a 3c1144ac     1B%<..!<:..<.D.<
2401fb50:	3c04a852 3bea35b8 3bc57a82 3b9b844f     R..<.5.;.z.;O..;
2401fb60:	3b59b9e7 3ae8df31 390d9a9e bace02ab     ..Y;1..:...9....
2401fb70:	bb58e2ab bba52c90 bbdc6792 bc086799     ..X..,...g...g..
2401fb80:	bc2082fc bc35d33f bc47ad66 bc556159     .. .?.5.f.G.YaU.
2401fb90:	bc5e636d bc6220c2 bc6039b8 bc5849be     mc^.. b..9`..IX.
2401fba0:	bc49fc99 bc35332e bc19f920 bbf0d07c     ..I..35. ...|...
2401fbb0:	bba13d88 bb0be039 3a7d5bdc 3b8f0681     .=..9....[}:...;
2401fbc0:	3c032156 3c41f940 3c818cfc 3ca2c966     V!.<@.A<...<f..<
2401fbd0:	3cc430a8 3ce53b50 3d02b0cd 3d120e4c     .0.<P;.<...=L..=
2401fbe0:	3d2074a4 3d2da6ca 3d396ad2 3d438d97     .t =..-=.j9=..C=
2401fbf0:	3d4be1b8 3d524230 3d56927e 3d58bf65     ..K=0BR=~.V=e.X=
2401fc00:	3d58bf65 3d56927e 3d524230 3d4be1b8     e.X=~.V=0BR=..K=
2401fc10:	3d438d97 3d396ad2 3d2da6ca 3d2074a4     ..C=.j9=..-=.t =
2401fc20:	3d120e4c 3d02b0cd 3ce53b50 3cc430a8     L..=...=P;.<.0.<
2401fc30:	3ca2c966 3c818cfc 3c41f940 3c032156     f..<...<@.A<V!.<
2401fc40:	3b8f0681 3a7d5bdc bb0be039 bba13d88     ...;.[}:9....=..
2401fc50:	bbf0d07c bc19f920 bc35332e bc49fc99     |... ....35...I.
2401fc60:	bc5849be bc6039b8 bc6220c2 bc5e636d     .IX..9`.. b.mc^.
2401fc70:	bc556159 bc47ad66 bc35d33f bc2082fc     YaU.f.G.?.5... .
2401fc80:	bc086799 bbdc6792 bba52c90 bb58e2ab     .g...g...,....X.
2401fc90:	bace02ab 390d9a9e 3ae8df31 3b59b9e7     .......91..:..Y;
2401fca0:	3b9b844f 3bc57a82 3bea35b8 3c04a852     O..;.z.;.5.;R..<
2401fcb0:	3c1144ac 3c1ae23a 3c2184e5 3c254231     .D.<:..<..!<1B%<
2401fcc0:	3c264050 3c24b1bf 3c20d2d4 3c1aea38     P@&<..$<.. <8..<
2401fcd0:	3c13401d 3c0a28c2 3bffde9f 3be9d0a6     .@.<.(.<...;...;
2401fce0:	3bd2b96e 3bbb2b1d 3ba3b759 3b8cd267     n..;.+.;Y..;g..;
2401fcf0:	3b6dc089 3b4480c1 3b1e7b86 3b972596     ..m;..D;.{.;.%.;

2401fd00 <__leaf_table_fir2XHigh>:
2401fd00:	b49880da b5b7cebc b60f0421 351be46f     ........!...o..5
2401fd10:	36afcfc0 35ef7588 b7438162 b75168b6     ...6.u.5b.C..hQ.
2401fd20:	37767f8a 3801affb b7433a4b b88142ed     ..v7...8K:C..B..
2401fd30:	b73b9f94 38c99e8c 387f25ef b904a096     ..;....8.%.8....
2401fd40:	b91dc7b6 3905bb34 399182b0 b89cbb8a     ....4..9...9....
2401fd50:	b9e3c624 b88f49b6 3a19ad36 39aa3647     $....I..6..:G6.9
2401fd60:	ba3395ca ba3a0853 3a2bc34d 3a9d6afd     ..3.S.:.M.+:.j.:
2401fd70:	b9dbcb4d bae4abaa b8d9f028 3b122fc8     M.......(..../.;
2401fd80:	3a7b840d bb24ade3 bb0ce216 3b1d89b6     ..{:..$........;
2401fd90:	3b6b7aa4 bae1214d bba7efa8 399667ea     .zk;M!.......g.9
2401fda0:	3bd42c70 3b019df0 bbef08c4 bba5eaab     p,.;...;........
2401fdb0:	3bead4ee 3c103482 bbb96ff7 bc52bcad     ...;.4.<.o....R.
2401fdc0:	3b1a42fc 3c8906e5 3b4b8157 bca165a1     .B.;...<W.K;.e..
2401fdd0:	bc34b078 3cab1123 3cb21f27 bc9c27ca     x.4.#..<'..<.'..
2401fde0:	bd13065e 3c4965b1 3d62c939 3b7d04ce     ^....eI<9.b=..};
2401fdf0:	bdb30635 bd4002cd 3e3996fd 3ed30014     5.....@...9>...>
2401fe00:	3ed30014 3e3996fd bd4002cd bdb30635     ...>..9>..@.5...
2401fe10:	3b7d04ce 3d62c939 3c4965b1 bd13065e     ..};9.b=.eI<^...
2401fe20:	bc9c27ca 3cb21f27 3cab1123 bc34b078     .'..'..<#..<x.4.
2401fe30:	bca165a1 3b4b8157 3c8906e5 3b1a42fc     .e..W.K;...<.B.;
2401fe40:	bc52bcad bbb96ff7 3c103482 3bead4ee     ..R..o...4.<...;
2401fe50:	bba5eaab bbef08c4 3b019df0 3bd42c70     ...........;p,.;
2401fe60:	399667ea bba7efa8 bae1214d 3b6b7aa4     .g.9....M!...zk;
2401fe70:	3b1d89b6 bb0ce216 bb24ade3 3a7b840d     ...;......$...{:
2401fe80:	3b122fc8 b8d9f028 bae4abaa b9dbcb4d     ./.;(.......M...
2401fe90:	3a9d6afd 3a2bc34d ba3a0853 ba3395ca     .j.:M.+:S.:...3.
2401fea0:	39aa3647 3a19ad36 b88f49b6 b9e3c624     G6.96..:.I..$...
2401feb0:	b89cbb8a 399182b0 3905bb34 b91dc7b6     .......94..9....
2401fec0:	b904a096 387f25ef 38c99e8c b73b9f94     .....%.8...8..;.
2401fed0:	b88142ed b7433a4b 3801affb 37767f8a     .B..K:C....8..v7
2401fee0:	b75168b6 b7438162 35ef7588 36afcfc0     .hQ.b.C..u.5...6
2401fef0:	351be46f b60f0421 b5b7cebc b49880da     o..5!...........

2401ff00 <__leaf_table_fir2XLow>:
2401ff00:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2401ff10:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2401ff20:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2401ff30:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2401ff40:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2401ff50:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2401ff60:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2401ff70:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2401ff80 <__leaf_table_fir32XHigh>:
2401ff80:	378e3f75 3700c5e1 371d33b6 373d3b4e     u?.7...7.3.7N;=7
2401ff90:	37611473 37847a8c 379a88b4 37b2cd08     s.a7.z.7...7...7
2401ffa0:	37cd5dd4 37ea4e7d 3804d820 3815c901     .].7}N.7 ..8...8
2401ffb0:	3827ff7f 383b7f0e 385048f6 38665c17     ..'8..;8.HP8.\f8
2401ffc0:	387db4fb 388b26f1 38980eb6 38a58bc7     ..}8.&.8...8...8
2401ffd0:	38b3963b 38c22506 38d12cdc 38e0a0ea     ;..8.%.8.,.8...8
2401ffe0:	38f07210 390047dc 390873a9 3910b1f1     .r.8.G.9.s.9...9
2401fff0:	3918f72d 39213708 39296412 39316fd0     -..9.7!9.d)9.o19
24020000:	39394aa4 3940e410 39482acb 394f0c66     .J99..@9.*H9f.O9
24020010:	39557593 395b5287 39608eab 39651479     .uU9.R[9..`9y.e9
24020020:	3968ce3b 396ba5b4 396d83e8 396e5212     ;.h9..k9..m9.Rn9
24020030:	396df933 396c61c5 39697544 39651c4d     3.m9.al9Dui9M.e9
24020040:	395f40df 3957ccd4 394eab18 3943c748     .@_9..W9..N9H.C9
24020050:	39370e41 39286e00 3917d5d4 3905369c     A.79.n(9...9.6.9
24020060:	38e105ed 38b35ec6 388164bf 38161265     ...8.^.8.d.8e..8
24020070:	370212d7 b7bbd1b2 b8653559 b8baa9fe     ...7....Y5e.....
24020080:	b9038b35 b92be653 b9565a81 b9816b8d     5...S.+..ZV..k..
24020090:	b998a4fe b9b0cdf5 b9c9d98e b9e3b93b     ............;...
240200a0:	b9fe5c44 ba0cd837 ba1ad0e7 ba290d34     D\..7.......4.).
240200b0:	ba37814f ba4620a9 ba54ddd7 ba63aa9a     O.7.. F...T...c.
240200c0:	ba727810 ba809b59 ba87eb28 ba8f230a     .xr.Y...(....#..
240200d0:	ba963a50 ba9d2813 baa3e336 baaa626d     P:...(..6...mb..
240200e0:	bab09c57 bab6878d babc1aa3 bac14c35     W...........5L..
240200f0:	bac612e3 baca656b bace3aae bad189cf     ....ke...:......
24020100:	bad44a3b bad673c9 bad7feb8 bad8e3b4     ;J...s..........
24020110:	bad91bd2 bad8a0a1 bad76c55 bad579f5     ........Ul...y..
24020120:	bad2c562 bacf4b22 bacb0835 bac5fa63     b..."K..5...c...
24020130:	bac020dd bab97c33 bab20ce9 baa9d398     . ..3|..........
24020140:	baa0d598 ba9714b8 ba8c9720 ba81627a     ........ ...zb..
24020150:	ba6afc11 ba51e414 ba378fa3 ba1c1385     ..j...Q...7.....
24020160:	b9ff0d36 b9c403b6 b9874074 b911fa83     6.......t@......
24020170:	b7977a12 38dc3d92 3970a6d7 39ba0cf7     .z...=.8..p9...9
24020180:	39fbf1c1 3a1eda75 3a3f83aa 3a5fcbeb     ...9u..:..?:.._:
24020190:	3a7f89ee 3a8f49dd 3a9e5f80 3aacf08e     ...:.I.:._.:...:
240201a0:	3abae7ba 3ac82fcf 3ad4b3ca 3ae05ef6     ...:./.:...:.^.:
240201b0:	3aeb1d0f 3af4da5a 3afd83c8 3b028384     ...:Z..:...:...;
240201c0:	3b05a958 3b082b2b 3b0a0157 3b0b24d0     X..;++.;W..;.$.;
240201d0:	3b0b8f36 3b0b3ae3 3b0a22ee 3b084345     6..;.:.;.".;EC.;
240201e0:	3b0598ad 3b0220d1 3afbb4a1 3af18984     ...;. .;...:...:
240201f0:	3ae5c178 3ad85fca 3ac969cb 3ab8e70b     x..:._.:.i.:...:
24020200:	3aa6e135 3a936431 3a7cfc27 3a507e56     5..:1d.:'.|:V~P:
24020210:	3a2173f0 39e00c98 39718c0c 37d77bf0     .s!:...9..q9.{.7
24020220:	b942e4f6 b9d3850d ba242269 ba5f97b7     ..B.....i"$..._.
24020230:	ba8deee8 baac5673 bacadd15 bae95c17     ....sV.......\..
24020240:	bb03d5ba bb12d120 bb218b2f bb2feeae     .... .../.!.../.
24020250:	bb3de5df bb4b5af5 bb583801 bb6466f8     ..=..ZK..8X..fd.
24020260:	bb6fd1f5 bb7a6344 bb8202b3 bb86519e     ..o.Dcz......Q..
24020270:	bb8a1414 bb8d400e bb8fcbd2 bb91ae0b     .....@..........
24020280:	bb92ddd2 bb9352bb bb9304df bb91ece2     .....R..........
24020290:	bb900408 bb8d4438 bb89a809 bb852aca     ....8D.......*..
240202a0:	bb7f9117 bb72fc4f bb649293 bb5450e1     ....O.r...d..PT.
240202b0:	bb4235ed bb2e422d bb1877e5 bb00db2a     .5B.-B...w..*...
240202c0:	bacee3bd ba988766 ba3d68ae b986053f     ....f....h=.?...
240202d0:	3977ba7e 3a452f57 3aa93e79 3af2c6f4     ~.w9W/E:y>.:...:
240202e0:	3b1f8474 3b46ec81 3b6f8484 3b8c99eb     t..;..F;..o;...;
240202f0:	3ba1f023 3bb7b744 3bcde112 3be45e8f     #..;D..;...;.^.;
24020300:	3bfb2081 3c090b7d 3c1498e7 3c203031     . .;}..<...<10 <
24020310:	3c2bc8ef 3c375a96 3c42dc87 3c4e4617     ..+<.Z7<..B<.FN<
24020320:	3c598e98 3c64ad5f 3c6f99cf 3c7a4b5f     ..Y<_.d<..o<_Kz<
24020330:	3c825cd4 3c876e32 3c8c55c1 3c910f90     .\.<2n.<.U.<...<
24020340:	3c9597d0 3c99ead5 3c9e051a 3ca1e342     ...<...<...<B..<
24020350:	3ca58222 3ca8debd 3cabf64d 3caec63f     "..<...<M..<?..<
24020360:	3cb14c3f 3cb38632 3cb5723b 3cb70ec0     ?L.<2..<;r.<...<
24020370:	3cb85a66 3cb95417 3cb9fb02 3cba4e9b     fZ.<.T.<...<.N.<
24020380:	3cba4e9b 3cb9fb02 3cb95417 3cb85a66     .N.<...<.T.<fZ.<
24020390:	3cb70ec0 3cb5723b 3cb38632 3cb14c3f     ...<;r.<2..<?L.<
240203a0:	3caec63f 3cabf64d 3ca8debd 3ca58222     ?..<M..<...<"..<
240203b0:	3ca1e342 3c9e051a 3c99ead5 3c9597d0     B..<...<...<...<
240203c0:	3c910f90 3c8c55c1 3c876e32 3c825cd4     ...<.U.<2n.<.\.<
240203d0:	3c7a4b5f 3c6f99cf 3c64ad5f 3c598e98     _Kz<..o<_.d<..Y<
240203e0:	3c4e4617 3c42dc87 3c375a96 3c2bc8ef     .FN<..B<.Z7<..+<
240203f0:	3c203031 3c1498e7 3c090b7d 3bfb2081     10 <...<}..<. .;
24020400:	3be45e8f 3bcde112 3bb7b744 3ba1f023     .^.;...;D..;#..;
24020410:	3b8c99eb 3b6f8484 3b46ec81 3b1f8474     ...;..o;..F;t..;
24020420:	3af2c6f4 3aa93e79 3a452f57 3977ba7e     ...:y>.:W/E:~.w9
24020430:	b986053f ba3d68ae ba988766 bacee3bd     ?....h=.f.......
24020440:	bb00db2a bb1877e5 bb2e422d bb4235ed     *....w..-B...5B.
24020450:	bb5450e1 bb649293 bb72fc4f bb7f9117     .PT...d.O.r.....
24020460:	bb852aca bb89a809 bb8d4438 bb900408     .*......8D......
24020470:	bb91ece2 bb9304df bb9352bb bb92ddd2     .........R......
24020480:	bb91ae0b bb8fcbd2 bb8d400e bb8a1414     .........@......
24020490:	bb86519e bb8202b3 bb7a6344 bb6fd1f5     .Q......Dcz...o.
240204a0:	bb6466f8 bb583801 bb4b5af5 bb3de5df     .fd..8X..ZK...=.
240204b0:	bb2feeae bb218b2f bb12d120 bb03d5ba     .././.!. .......
240204c0:	bae95c17 bacadd15 baac5673 ba8deee8     .\......sV......
240204d0:	ba5f97b7 ba242269 b9d3850d b942e4f6     .._.i"$.......B.
240204e0:	37d77bf0 39718c0c 39e00c98 3a2173f0     .{.7..q9...9.s!:
240204f0:	3a507e56 3a7cfc27 3a936431 3aa6e135     V~P:'.|:1d.:5..:
24020500:	3ab8e70b 3ac969cb 3ad85fca 3ae5c178     ...:.i.:._.:x..:
24020510:	3af18984 3afbb4a1 3b0220d1 3b0598ad     ...:...:. .;...;
24020520:	3b084345 3b0a22ee 3b0b3ae3 3b0b8f36     EC.;.".;.:.;6..;
24020530:	3b0b24d0 3b0a0157 3b082b2b 3b05a958     .$.;W..;++.;X..;
24020540:	3b028384 3afd83c8 3af4da5a 3aeb1d0f     ...;...:Z..:...:
24020550:	3ae05ef6 3ad4b3ca 3ac82fcf 3abae7ba     .^.:...:./.:...:
24020560:	3aacf08e 3a9e5f80 3a8f49dd 3a7f89ee     ...:._.:.I.:...:
24020570:	3a5fcbeb 3a3f83aa 3a1eda75 39fbf1c1     .._:..?:u..:...9
24020580:	39ba0cf7 3970a6d7 38dc3d92 b7977a12     ...9..p9.=.8.z..
24020590:	b911fa83 b9874074 b9c403b6 b9ff0d36     ....t@......6...
240205a0:	ba1c1385 ba378fa3 ba51e414 ba6afc11     ......7...Q...j.
240205b0:	ba81627a ba8c9720 ba9714b8 baa0d598     zb.. ...........
240205c0:	baa9d398 bab20ce9 bab97c33 bac020dd     ........3|... ..
240205d0:	bac5fa63 bacb0835 bacf4b22 bad2c562     c...5..."K..b...
240205e0:	bad579f5 bad76c55 bad8a0a1 bad91bd2     .y..Ul..........
240205f0:	bad8e3b4 bad7feb8 bad673c9 bad44a3b     .........s..;J..
24020600:	bad189cf bace3aae baca656b bac612e3     .....:..ke......
24020610:	bac14c35 babc1aa3 bab6878d bab09c57     5L..........W...
24020620:	baaa626d baa3e336 ba9d2813 ba963a50     mb..6....(..P:..
24020630:	ba8f230a ba87eb28 ba809b59 ba727810     .#..(...Y....xr.
24020640:	ba63aa9a ba54ddd7 ba4620a9 ba37814f     ..c...T.. F.O.7.
24020650:	ba290d34 ba1ad0e7 ba0cd837 b9fe5c44     4.).....7...D\..
24020660:	b9e3b93b b9c9d98e b9b0cdf5 b998a4fe     ;...............
24020670:	b9816b8d b9565a81 b92be653 b9038b35     .k...ZV.S.+.5...
24020680:	b8baa9fe b8653559 b7bbd1b2 370212d7     ....Y5e........7
24020690:	38161265 388164bf 38b35ec6 38e105ed     e..8.d.8.^.8...8
240206a0:	3905369c 3917d5d4 39286e00 39370e41     .6.9...9.n(9A.79
240206b0:	3943c748 394eab18 3957ccd4 395f40df     H.C9..N9..W9.@_9
240206c0:	39651c4d 39697544 396c61c5 396df933     M.e9Dui9.al93.m9
240206d0:	396e5212 396d83e8 396ba5b4 3968ce3b     .Rn9..m9..k9;.h9
240206e0:	39651479 39608eab 395b5287 39557593     y.e9..`9.R[9.uU9
240206f0:	394f0c66 39482acb 3940e410 39394aa4     f.O9.*H9..@9.J99
24020700:	39316fd0 39296412 39213708 3918f72d     .o19.d)9.7!9-..9
24020710:	3910b1f1 390873a9 390047dc 38f07210     ...9.s.9.G.9.r.8
24020720:	38e0a0ea 38d12cdc 38c22506 38b3963b     ...8.,.8.%.8;..8
24020730:	38a58bc7 38980eb6 388b26f1 387db4fb     ...8...8.&.8..}8
24020740:	38665c17 385048f6 383b7f0e 3827ff7f     .\f8.HP8..;8..'8
24020750:	3815c901 3804d820 37ea4e7d 37cd5dd4     ...8 ..8}N.7.].7
24020760:	37b2cd08 379a88b4 37847a8c 37611473     ...7...7.z.7s.a7
24020770:	373d3b4e 371d33b6 3700c5e1 378e3f75     N;=7.3.7...7u?.7

24020780 <__leaf_table_fir32XLow>:
24020780:	3b4d823f 3a55cf8c 3a706768 3a862154     ?.M;..U:hgp:T!.:
24020790:	3a94a66d 3aa3bb15 3ab34fb9 3ac34e76     m..:...:.O.:vN.:
240207a0:	3ad3a680 3ae44a48 3af51ddb 3b03044e     ...:HJ.:...:N..;
240207b0:	3b0b7dd5 3b13e618 3b1c3764 3b24600c     .}.;...;d7.;.`$;
240207c0:	3b2c53cc 3b340320 3b3b5eab 3b425663     .S,; .4;.^;;cVB;
240207d0:	3b48d99d 3b4ed8d5 3b5442af 3b5905bf     ..H;..N;.BT;..Y;
240207e0:	3b5d122c 3b605670 3b62c4a8 3b644ecf     ,.];pV`;..b;.Nd;
240207f0:	3b64e873 3b648692 3b631c8a 3b60a16c     s.d;..d;..c;l.`;
24020800:	3b5d0942 3b584b18 3b525ee2 3b4b3c43     B.];.KX;.^R;C<K;
24020810:	3b42dec7 3b39449f 3b2e6f08 3b226389     ..B;.D9;.o.;.c";
24020820:	3b152695 3b06c368 3aee657c 3acd0b17     .&.;h..;|e.:...:
24020830:	3aa96cdc 3a83abbe 3a37fed3 39ca654b     .l.:...:..7:Ke.9
24020840:	38755daf b992c8e5 ba250bc7 ba81b2f1     .]u8......%.....
24020850:	bab18f78 bae162bb bb09638c bb21c289     x....b...c....!.
24020860:	bb3a3c2f bb528115 bb6a7228 bb80f569     /<:...R.(rj.i...
24020870:	bb8c63e6 bb977162 bba209ef bbac1b4f     .c..bq......O...
24020880:	bbb59193 bbbe58cf bbc66170 bbcd96b4     .....X..pa......
24020890:	bbd3e8d0 bbd9453b bbdd9b53 bbe0daf0     ....;E..S.......
240208a0:	bbe2f508 bbe3dbe7 bbe38246 bbe1dcc3     ........F.......
240208b0:	bbdee124 bbda8646 bbd4c572 bbcd9860     $...F...r...`...
240208c0:	bbc4fa9c bbbae8e0 bbaf612b bba264d0     ........+a...d..
240208d0:	bb93f53a bb841897 bb65a92c bb406171     :.......,.e.qa@.
240208e0:	bb186d28 badbc095 ba81a933 b98b4d61     (m......3...aM..
240208f0:	3a00f888 3aa7f811 3b09b08f 3b41247c     ...:...:...;|$A;
24020900:	3b7a4676 3b9a65a0 3bb844d9 3bd6a786     vFz;.e.;.D.;...;
24020910:	3bf56f48 3c0a420f 3c19e611 3c2991e9     Ho.;.B.<...<..)<
24020920:	3c39348f 3c48c41c 3c5832ea 3c676665     .49<..H<.2X<efg<
24020930:	3c765f76 3c8280f8 3c89a26d 3c908c1b     v_v<...<m..<...<
24020940:	3c97372d 3c9d9ca9 3ca3b5ec 3ca97c87     -7.<...<...<.|.<
24020950:	3caeea30 3cb3f976 3cb8a527 3cbce7e7     0..<v..<'..<...<
24020960:	3cc0bd91 3cc42181 3cc71049 3cc986bb     ...<.!.<I..<...<
24020970:	3ccb8252 3ccd0101 3cce0113 3cce8175     R..<...<...<u..<
24020980:	3cce8175 3cce0113 3ccd0101 3ccb8252     u..<...<...<R..<
24020990:	3cc986bb 3cc71049 3cc42181 3cc0bd91     ...<I..<.!.<...<
240209a0:	3cbce7e7 3cb8a527 3cb3f976 3caeea30     ...<'..<v..<0..<
240209b0:	3ca97c87 3ca3b5ec 3c9d9ca9 3c97372d     .|.<...<...<-7.<
240209c0:	3c908c1b 3c89a26d 3c8280f8 3c765f76     ...<m..<...<v_v<
240209d0:	3c676665 3c5832ea 3c48c41c 3c39348f     efg<.2X<..H<.49<
240209e0:	3c2991e9 3c19e611 3c0a420f 3bf56f48     ..)<...<.B.<Ho.;
240209f0:	3bd6a786 3bb844d9 3b9a65a0 3b7a4676     ...;.D.;.e.;vFz;
24020a00:	3b41247c 3b09b08f 3aa7f811 3a00f888     |$A;...;...:...:
24020a10:	b98b4d61 ba81a933 badbc095 bb186d28     aM..3.......(m..
24020a20:	bb406171 bb65a92c bb841897 bb93f53a     qa@.,.e.....:...
24020a30:	bba264d0 bbaf612b bbbae8e0 bbc4fa9c     .d..+a..........
24020a40:	bbcd9860 bbd4c572 bbda8646 bbdee124     `...r...F...$...
24020a50:	bbe1dcc3 bbe38246 bbe3dbe7 bbe2f508     ....F...........
24020a60:	bbe0daf0 bbdd9b53 bbd9453b bbd3e8d0     ....S...;E......
24020a70:	bbcd96b4 bbc66170 bbbe58cf bbb59193     ....pa...X......
24020a80:	bbac1b4f bba209ef bb977162 bb8c63e6     O.......bq...c..
24020a90:	bb80f569 bb6a7228 bb528115 bb3a3c2f     i...(rj...R./<:.
24020aa0:	bb21c289 bb09638c bae162bb bab18f78     ..!..c...b..x...
24020ab0:	ba81b2f1 ba250bc7 b992c8e5 38755daf     ......%......]u8
24020ac0:	39ca654b 3a37fed3 3a83abbe 3aa96cdc     Ke.9..7:...:.l.:
24020ad0:	3acd0b17 3aee657c 3b06c368 3b152695     ...:|e.:h..;.&.;
24020ae0:	3b226389 3b2e6f08 3b39449f 3b42dec7     .c";.o.;.D9;..B;
24020af0:	3b4b3c43 3b525ee2 3b584b18 3b5d0942     C<K;.^R;.KX;B.];
24020b00:	3b60a16c 3b631c8a 3b648692 3b64e873     l.`;..c;..d;s.d;
24020b10:	3b644ecf 3b62c4a8 3b605670 3b5d122c     .Nd;..b;pV`;,.];
24020b20:	3b5905bf 3b5442af 3b4ed8d5 3b48d99d     ..Y;.BT;..N;..H;
24020b30:	3b425663 3b3b5eab 3b340320 3b2c53cc     cVB;.^;; .4;.S,;
24020b40:	3b24600c 3b1c3764 3b13e618 3b0b7dd5     .`$;d7.;...;.}.;
24020b50:	3b03044e 3af51ddb 3ae44a48 3ad3a680     N..;...:HJ.:...:
24020b60:	3ac34e76 3ab34fb9 3aa3bb15 3a94a66d     vN.:.O.:...:m..:
24020b70:	3a862154 3a706768 3a55cf8c 3b4d823f     T!.:hgp:..U:?.M;

24020b80 <__leaf_table_fir4XHigh>:
24020b80:	b6a7f358 b72fedf5 b7aaa2cd b7ed6056     X...../.....V`..
24020b90:	b80ec5da b80cc44b b7efbf3c b7b64219     ....K...<....B..
24020ba0:	b79ecb73 b7d1317d b82dfbcd b8883541     s...}1....-.A5..
24020bb0:	b8b68ada b8cde484 b8c1173f b893894b     ........?...K...
24020bc0:	b8353635 b7dcf20b b80bfc6d b88ff4fe     565.....m.......
24020bd0:	b900045b b934aad9 b94be12c b9364a21     [.....4.,.K.!J6.
24020be0:	b8f04abf b831eb28 36c491b7 b5f4edc1     .J..(.1....6....
24020bf0:	b89ab241 b944211f b999503c b9b07a4e     A....!D.<P..Nz..
24020c00:	b996e536 b9250469 3481383c 38dfe43d     6...i.%.<8.4=..8
24020c10:	38cdf035 b82e1383 b989e0e3 b9f554e8     5..8.........T..
24020c20:	ba105b84 b9ed29c3 b94e6a44 38e23c24     .[...)..DjN.$<.8
24020c30:	39a493d2 399e1aee 383ff92f b9bc63ae     ...9...9/.?8.c..
24020c40:	ba3f76fb ba65dc1d ba3657f3 b976fdb8     .v?...e..W6...v.
24020c50:	39a16ee2 3a3018e5 3a2a84cf 3957cc7e     .n.9..0:..*:~.W9
24020c60:	ba00f89c ba937638 bab36c76 ba8a594d     ....8v..vl..MY..
24020c70:	b99076c9 3a26ac5f 3aa26bd3 3a9d0a9f     .v.._.&:.k.:...:
24020c80:	39f14ea8 ba33a7ab bae09378 bb0998a4     .N.9..3.x.......
24020c90:	bacf420a b9a6d731 3a95c0ce 3b096af6     .B..1......:.j.;
24020ca0:	3b0441c3 3a5b75cd ba7f6db0 bb295330     .A.;.u[:.m..0S).
24020cb0:	bb4fe177 bb19972a b9befeff 3af95ea0     w.O.*........^.:
24020cc0:	3b5c85f0 3b52fc8c 3ab4b41d bab979d4     ..\;..R;...:.y..
24020cd0:	bb7deacf bb9badd1 bb626b25 b9d83d30     ..}.....%kb.0=..
24020ce0:	3b47a285 3bac2bfb 3ba3cf81 3b0dd391     ..G;.+.;...;...;
24020cf0:	bb09fa80 bbbf7826 bbea488d bba8466e     ....&x...H..nF..
24020d00:	b9f05478 3b9eaea3 3c069182 3bff3007     xT.....;...<.0.;
24020d10:	3b5d4aa6 bb55e210 bc14e98e bc36455d     .J];..U.....]E6.
24020d20:	bc0203b4 ba02b937 3c030c90 3c5ca432     ....7......<2.\<
24020d30:	3c51e3bd 3bb65f23 bbb59a53 bc7e1f98     ..Q<#_.;S.....~.
24020d40:	bc9d3c27 bc61dfd6 ba0abc68 3c7a1b04     '<....a.h.....z<
24020d50:	3cd5e46d 3cd14f59 3c3b02df bc4a2cd8     m..<YO.<..;<.,J.
24020d60:	bd141ca5 bd443969 bd190353 ba0f1a80     ....i9D.S.......
24020d70:	3d6cd273 3dfff00c 3e3c22ac 3e5f30ad     s.l=...=."<>.0_>
24020d80:	3e5f30ad 3e3c22ac 3dfff00c 3d6cd273     .0_>."<>...=s.l=
24020d90:	ba0f1a80 bd190353 bd443969 bd141ca5     ....S...i9D.....
24020da0:	bc4a2cd8 3c3b02df 3cd14f59 3cd5e46d     .,J...;<YO.<m..<
24020db0:	3c7a1b04 ba0abc68 bc61dfd6 bc9d3c27     ..z<h.....a.'<..
24020dc0:	bc7e1f98 bbb59a53 3bb65f23 3c51e3bd     ..~.S...#_.;..Q<
24020dd0:	3c5ca432 3c030c90 ba02b937 bc0203b4     2.\<...<7.......
24020de0:	bc36455d bc14e98e bb55e210 3b5d4aa6     ]E6.......U..J];
24020df0:	3bff3007 3c069182 3b9eaea3 b9f05478     .0.;...<...;xT..
24020e00:	bba8466e bbea488d bbbf7826 bb09fa80     nF...H..&x......
24020e10:	3b0dd391 3ba3cf81 3bac2bfb 3b47a285     ...;...;.+.;..G;
24020e20:	b9d83d30 bb626b25 bb9badd1 bb7deacf     0=..%kb.......}.
24020e30:	bab979d4 3ab4b41d 3b52fc8c 3b5c85f0     .y.....:..R;..\;
24020e40:	3af95ea0 b9befeff bb19972a bb4fe177     .^.:....*...w.O.
24020e50:	bb295330 ba7f6db0 3a5b75cd 3b0441c3     0S)..m...u[:.A.;
24020e60:	3b096af6 3a95c0ce b9a6d731 bacf420a     .j.;...:1....B..
24020e70:	bb0998a4 bae09378 ba33a7ab 39f14ea8     ....x.....3..N.9
24020e80:	3a9d0a9f 3aa26bd3 3a26ac5f b99076c9     ...:.k.:_.&:.v..
24020e90:	ba8a594d bab36c76 ba937638 ba00f89c     MY..vl..8v......
24020ea0:	3957cc7e 3a2a84cf 3a3018e5 39a16ee2     ~.W9..*:..0:.n.9
24020eb0:	b976fdb8 ba3657f3 ba65dc1d ba3f76fb     ..v..W6...e..v?.
24020ec0:	b9bc63ae 383ff92f 399e1aee 39a493d2     .c../.?8...9...9
24020ed0:	38e23c24 b94e6a44 b9ed29c3 ba105b84     $<.8DjN..)...[..
24020ee0:	b9f554e8 b989e0e3 b82e1383 38cdf035     .T..........5..8
24020ef0:	38dfe43d 3481383c b9250469 b996e536     =..8<8.4i.%.6...
24020f00:	b9b07a4e b999503c b944211f b89ab241     Nz..<P...!D.A...
24020f10:	b5f4edc1 36c491b7 b831eb28 b8f04abf     .......6(.1..J..
24020f20:	b9364a21 b94be12c b934aad9 b900045b     !J6.,.K...4.[...
24020f30:	b88ff4fe b80bfc6d b7dcf20b b8353635     ....m.......565.
24020f40:	b893894b b8c1173f b8cde484 b8b68ada     K...?...........
24020f50:	b8883541 b82dfbcd b7d1317d b79ecb73     A5....-.}1..s...
24020f60:	b7b64219 b7efbf3c b80cc44b b80ec5da     .B..<...K.......
24020f70:	b7ed6056 b7aaa2cd b72fedf5 b6a7f358     V`......../.X...

24020f80 <__leaf_table_fir4XLow>:
24020f80:	3a364090 bb0d9324 bba560cf bc143329     .@6:$....`..)3..
24020f90:	bc538b8e bc77a919 bc6a6237 bc230d1e     ..S...w.7bj...#.
24020fa0:	bb3931b1 3ba3d1cc 3c3023d4 3c44cae5     .19....;.#0<..D<
24020fb0:	3c008e54 ba032f44 bc201e77 bc8184bc     T..<D/..w. .....
24020fc0:	bc79e9d3 bbecc8ca 3bbf3a91 3c990052     ..y......:.;R..<
24020fd0:	3ccd8bf1 3ca8719f 3b98a2e0 bc927492     ...<.q.<...;.t..
24020fe0:	bd1bae49 bd390efa bcff2783 3bd6bce9     I.....9..'.....;
24020ff0:	3d80a944 3e00cf9b 3e3864cf 3e5887a9     D..=...>.d8>..X>
24021000:	3e5887a9 3e3864cf 3e00cf9b 3d80a944     ..X>.d8>...>D..=
24021010:	3bd6bce9 bcff2783 bd390efa bd1bae49     ...;.'....9.I...
24021020:	bc927492 3b98a2e0 3ca8719f 3ccd8bf1     .t.....;.q.<...<
24021030:	3c990052 3bbf3a91 bbecc8ca bc79e9d3     R..<.:.;......y.
24021040:	bc8184bc bc201e77 ba032f44 3c008e54     ....w. .D/..T..<
24021050:	3c44cae5 3c3023d4 3ba3d1cc bb3931b1     ..D<.#0<...;.19.
24021060:	bc230d1e bc6a6237 bc77a919 bc538b8e     ..#.7bj...w...S.
24021070:	bc143329 bba560cf bb0d9324 3a364090     )3...`..$....@6:

24021080 <__leaf_table_fir64XHigh>:
24021080:	37c035ea 36b40ce5 36c8e77c 36df33f6     .5.7...6|..6.3.6
24021090:	36f6fd4d 37082b0d 3715a2f7 3723f0eb     M..6.+.7...7..#7
240210a0:	37331958 374323a1 3754181b 3765fad3     X.37.#C7..T7..e7
240210b0:	3778d427 37865585 3790c240 379bb3e5     '.x7.U.7@..7...7
240210c0:	37a72dba 37b332b4 37bfc58a 37cce962     .-.7.2.7...7b..7
240210d0:	37daa169 37e8efd2 37f7d758 3803ad78     i..7...7X..7x..8
240210e0:	380bbe60 38141f5b 381cd170 3825d5b4     `..8[..8p..8..%8
240210f0:	382f2cf6 3838d7c2 3842d6ae 384d2a36     .,/8..88..B86*M8
24021100:	3857d2c3 3862d090 386e2394 3879cbc6     ..W8..b8.#n8..y8
24021110:	3882e48a 38890da3 388f60f1 3895de2d     ...8...8.`.8-..8
24021120:	389c8514 38a3554e 38aa4e5e 38b16fb1     ...8NU.8^N.8.o.8
24021130:	38b8b8a6 38c0288d 38c7be9a 38cf79e3     ...8.(.8...8.y.8
24021140:	38d75959 38df5bd4 38e78018 38efc4d6     YY.8.[.8...8...8
24021150:	38f8289e 390054ef 3904a378 3908ff10     .(.8.T.9x..9...9
24021160:	390d66d8 3911d9e6 39165740 391adddd     .f.9...9@W.9...9
24021170:	391f6caa 39240289 39289e4a 392d3ea2     .l.9..$9J.(9.>-9
24021180:	3931e237 393687a3 393b2d70 393fd210     7.19..69p-;9..?9
24021190:	394473ef 39491174 394da90a 3952390d     .sD9t.I9..M9.9R9
240211a0:	3956bfd6 395b3bb2 395faaea 39640bbc     ..V9.;[9.._9..d9
240211b0:	39685c41 396c9a75 3970c441 3974d784     A\h9u.l9A.p9..t9
240211c0:	3978d20a 397cb19c 39803a10 39820bca     ..x9..|9.:.9...9
240211d0:	3983ccf8 39857c9b 398719ad 3988a30b     ...9.|.9...9...9
240211e0:	398a176f 398b757f 398cbbe5 398de954     o..9.u.9...9T..9
240211f0:	398efcbc 398ff55f 3990d26c 399192e7     ...9_..9l..9...9
24021200:	39923536 3992b71a 399316cd 39935425     65.9...9...9%T.9
24021210:	399370f5 39936c11 39933937 3992e777     .p.9.l.979.9w..9
24021220:	39926ac3 3991c606 3990f779 398ffe03     .j.9...9y..9...9
24021230:	398ed8c1 398d8690 398c068f 398a57cc     ...9...9...9.W.9
24021240:	39887945 39866a35 398429b6 3981b6ed     Ey.95j.9.).9...9
24021250:	397e2244 39786f2a 39725322 396bccdc     D"~9*ox9"Sr9..k9
24021260:	3964db36 395d7d14 3955b161 394d774c     6.d9.}]9a.U9LwM9
24021270:	3944ce19 393bb50d 39322b95 39283147     ..D9..;9.+29G1(9
24021280:	391dc5de 3912e921 39079af6 38f7b6de     ...9!..9...9...8
24021290:	38df557b 38c61279 38abeec6 3890eb94     {U.8y..8...8...8
240212a0:	386a14f6 38309ad5 37eada32 37624235     ..j8..082..75Bb7
240212b0:	b5bea9e6 b78c3c69 b807e35a b84b3d71     ....i<..Z...q=K.
240212c0:	b888124a b8ab4818 b8cf3b7b b8f3e774     J....H..{;..t...
240212d0:	b90ca359 b91fa9ce b9330420 b946af27     Y....... .3.'.F.
240212e0:	b95aa790 b96ee9e0 b981b93f b98c1ed7     ..Z...n.?.......
240212f0:	b996a3c3 b9a145fd b9ac0365 b9b6d9ce     .....E..e.......
24021300:	b9c1c6f5 b9ccc87e b9d7dbfd b9e2fef3     ....~...........
24021310:	b9ee2ed6 b9f9690a ba025571 ba07f8d4     .....i..qU......
24021320:	ba0d9d4c ba134171 ba18e3cc ba1e82e1     L...qA..........
24021330:	ba241d2a ba29b11f ba2f3d33 ba34bfd4     *.$...).3=/...4.
24021340:	ba3a376e ba3fa26d ba44ff39 ba4a4c31     n7:.m.?.9.D.1LJ.
24021350:	ba4f87ab ba54affe ba59c37d ba5ec077     ..O...T.}.Y.w.^.
24021360:	ba63a547 ba68704d ba6d1fe4 ba71b265     G.c.Mph...m.e.q.
24021370:	ba76261e ba7a795d ba7eaa6f ba815bda     .&v.]yz.o.~..[..
24021380:	ba834fd3 ba85305e ba86fcad ba88b3ed     .O..^0..........
24021390:	ba8a5544 ba8bdffb ba8d5370 ba8eaef4     DU......pS......
240213a0:	ba8ff1aa ba911ab3 ba9229ac ba931e2f     .........)../...
240213b0:	ba93f6b4 ba94b396 ba9553a2 ba95d682     .........S......
240213c0:	ba963ba1 ba968274 ba96aa8a ba96b362     .;..t.......b...
240213d0:	ba969c95 ba9665bd ba960e75 ba95966e     .....e..u...n...
240213e0:	ba94fd59 ba9442ef ba9366f6 ba92693d     Y....B...f..=i..
240213f0:	ba91499b ba9007f0 ba8ea429 ba8d1e3d     .I......)...=...
24021400:	ba8b7629 ba89abf5 ba87bfba ba85b195     )v..............
24021410:	ba8381b0 ba81303f ba7d7b05 ba78538e     ....?0...{}..Sx.
24021420:	ba72eac4 ba6d416a ba675859 ba613086     ..r.jAm.YXg..0a.
24021430:	ba5acafb ba5428d4 ba4d4b43 ba463396     ..Z..(T.CKM..3F.
24021440:	ba3ee32f ba375b89 ba2f9e30 ba27acca     /.>..[7.0./...'.
24021450:	ba1f8912 ba1734dd ba0eb215 ba0602b5     .....4..........
24021460:	b9fa519e b9e84d0e b9d5fc2c b9c36398     .Q...M..,....c..
24021470:	b9b0880f b99d6e79 b98a1be0 b96d2aee     ....yn.......*m.
24021480:	b945c126 b91e0553 b8ec0532 b89b88a6     &.E.S...2.......
24021490:	b8155869 364f10e4 382f9b1d 38a93a72     iX....O6../8r:.8
240214a0:	38faa655 3925fbff 394e8b00 3976f35b     U..8..%9..N9[.v9
240214b0:	398f940f 39a38e1b 39b76141 39cb06e3     ...9...9Aa.9...9
240214c0:	39de785b 39f1aef5 3a0251fe 3a0ba85c     [x.9...9.Q.:\..:
240214d0:	3a14d73d 3a1ddb4e 3a26b13b 3a2f55b3     =..:N..:;.&:.U/:
240214e0:	3a37c569 3a3ffd11 3a47f966 3a4fb731     i.7:..?:f.G:1.O:
240214f0:	3a57334a 3a5e6a91 3a6559ed 3a6bfe51     J3W:.j^:.Ye:Q.k:
24021500:	3a7254b5 3a785a26 3a7e0bca 3a81b370     .Tr:&Zx:..~:p..:
24021510:	3a84345a 3a868749 3a88aaef 3a8a9e0c     Z4.:I..:...:...:
24021520:	3a8c5f74 3a8dee0e 3a8f48b6 3a906e4f     t_.:...:.H.:On.:
24021530:	3a915dde 3a921688 3a92976c 3a92df8e     .].:...:l..:...:
24021540:	3a92ee3e 3a92c2ff 3a925cc5 3a91bb60     >..:...:.\.:`..:
24021550:	3a90de14 3a8fc48a 3a8e6e63 3a8cdb4b     ...:...:cn.:K..:
24021560:	3a8b0b1a 3a88fd9c 3a86b2c9 3a842aa6     ...:...:...:.*.:
24021570:	3a816542 3a7cc59c 3a764716 3a6f4f93     Be.:..|:.Gv:.Oo:
24021580:	3a67dfe9 3a5ff919 3a579c4c 3a4ecaca     ..g:.._:L.W:..N:
24021590:	3a458612 3a3bcfd3 3a31a9db 3a271623     ..E:..;:..1:#.':
240215a0:	3a1c16d5 3a10ae47 3a04def9 39f1571b     ...:G..:...:.W.9
240215b0:	39d82dad 39be47a0 39a3ab44 39885f35     .-.9.G.9D..95_.9
240215c0:	3958d4b1 391fa7d1 38ca8dec 3827077a     ..X9...9...8z.'8
240215d0:	b796b95b b8a0e6a0 b90f011b b94e6e89     [............nN.
240215e0:	b9875484 b9a7cec0 b9c89c2e b9e9b2c3     .T..............
240215f0:	ba05841a ba1648fc ba2722a6 ba380b9f     .....H..."'...8.
24021600:	ba48fe55 ba59f51d ba6aea33 ba7bd7bf     U.H...Y.3.j...{.
24021610:	ba865be8 ba8ec234 ba971bba ba9f6568     .[..4.......he..
24021620:	baa79c28 baafbcdd bab7c463 babfaf94     (.......c.......
24021630:	bac77b42 bacf2442 bad6a762 bade0171     B{..B$..b...q...
24021640:	bae52f3f baec2d9b baf2f959 baf98f4d     ?/...-..Y...M...
24021650:	baffec4f bb03069d bb05f778 bb08c72d     O.......x...-...
24021660:	bb0b7435 bb0dfd0b bb106032 bb129c30     5t......2`..0...
24021670:	bb14af90 bb1698e3 bb1856c1 bb19e7ca     .........V......
24021680:	bb1b4aa8 bb1c7e07 bb1d809f bb1e512f     .J...~....../Q..
24021690:	bb1eee7f bb1f5765 bb1f8abf bb1f8775     ....eW......u...
240216a0:	bb1f4c77 bb1ed8c2 bb1e2b62 bb1d436e     wL......b+..nC..
240216b0:	bb1c200a bb1ac063 bb1923b0 bb174943     . ..c....#..CI..
240216c0:	bb153074 bb12d8a8 bb10414c bb0d69eb     t0......LA...i..
240216d0:	bb0a521d bb06f976 bb035fa9 baff0915     .R..v...._......
240216e0:	baf6cf98 baee12d3 bae4d288 badb0ec4     ................
240216f0:	bad0c7b3 bac5fd88 babab0c2 baaee1d7     ................
24021700:	baa29177 ba95c079 ba886fbc ba7540b1     w...y....o...@u.
24021710:	ba58a70c ba3b1529 ba1c8df1 b9fa293c     ..X.).;.....<)..
24021720:	b9b95958 b96d6728 b8c8ff58 381fcabf     XY..(gm.X......8
24021730:	3937ddf1 39a59799 39f0e946 3a1eecc3     ..79...9F..9...:
24021740:	3a462ead 3a6e34a9 3a8b7c64 3aa03a71     ..F:.4n:d|.:q:.:
24021750:	3ab55148 3acabd97 3ae07bf4 3af688dc     HQ.:...:.{.:...:
24021760:	3b067058 3b11bfdd 3b1d3112 3b28c204     Xp.;...;.1.;..(;
24021770:	3b3470b4 3b403b18 3b4c1f1c 3b581aa2     .p4;.;@;..L;..X;
24021780:	3b642b82 3b704f8a 3b7c8482 3b846414     .+d;.Op;..|;.d.;
24021790:	3b8a8c1b 3b90b92e 3b96ea22 3b9d1dca     ...;...;"..;...;
240217a0:	3ba352f6 3ba98873 3bafbd0e 3bb5ef90     .R.;s..;...;...;
240217b0:	3bbc1ec2 3bc2496d 3bc86e56 3bce8c44     ...;mI.;Vn.;D..;
240217c0:	3bd4a1ff 3bdaae4c 3be0aff2 3be6a5ba     ...;L..;...;...;
240217d0:	3bec8e6c 3bf268d3 3bf833ba 3bfdedf1     l..;.h.;.3.;...;
240217e0:	3c01cb24 3c0495c8 3c075651 3c0a0c2b     $..<...<QV.<+..<
240217f0:	3c0cb6c5 3c0f5590 3c11e7fd 3c146d81     ...<.U.<...<.m.<
24021800:	3c16e594 3c194faf 3c1bab4e 3c1df7f2     ...<.O.<N..<...<
24021810:	3c20351b 3c22624f 3c247f16 3c268afa     .5 <Ob"<..$<..&<
24021820:	3c28858d 3c2a6e60 3c2c4509 3c2e0921     ..(<`n*<.E,<!..<
24021830:	3c2fba48 3c31581e 3c32e24a 3c345876     H./<.X1<J.2<vX4<
24021840:	3c35ba50 3c37078a 3c383fdc 3c396301     P.5<..7<.?8<.c9<
24021850:	3c3a70ba 3c3b68cb 3c3c4afe 3c3d1721     .p:<.h;<.J<<!.=<
24021860:	3c3dcd07 3c3e6c88 3c3ef582 3c3f67d6     ..=<.l><..><.g?<
24021870:	3c3fc369 3c40082b 3c403609 3c404cfb     i.?<+.@<.6@<.L@<
24021880:	3c404cfb 3c403609 3c40082b 3c3fc369     .L@<.6@<+.@<i.?<
24021890:	3c3f67d6 3c3ef582 3c3e6c88 3c3dcd07     .g?<..><.l><..=<
240218a0:	3c3d1721 3c3c4afe 3c3b68cb 3c3a70ba     !.=<.J<<.h;<.p:<
240218b0:	3c396301 3c383fdc 3c37078a 3c35ba50     .c9<.?8<..7<P.5<
240218c0:	3c345876 3c32e24a 3c31581e 3c2fba48     vX4<J.2<.X1<H./<
240218d0:	3c2e0921 3c2c4509 3c2a6e60 3c28858d     !..<.E,<`n*<..(<
240218e0:	3c268afa 3c247f16 3c22624f 3c20351b     ..&<..$<Ob"<.5 <
240218f0:	3c1df7f2 3c1bab4e 3c194faf 3c16e594     ...<N..<.O.<...<
24021900:	3c146d81 3c11e7fd 3c0f5590 3c0cb6c5     .m.<...<.U.<...<
24021910:	3c0a0c2b 3c075651 3c0495c8 3c01cb24     +..<QV.<...<$..<
24021920:	3bfdedf1 3bf833ba 3bf268d3 3bec8e6c     ...;.3.;.h.;l..;
24021930:	3be6a5ba 3be0aff2 3bdaae4c 3bd4a1ff     ...;...;L..;...;
24021940:	3bce8c44 3bc86e56 3bc2496d 3bbc1ec2     D..;Vn.;mI.;...;
24021950:	3bb5ef90 3bafbd0e 3ba98873 3ba352f6     ...;...;s..;.R.;
24021960:	3b9d1dca 3b96ea22 3b90b92e 3b8a8c1b     ...;"..;...;...;
24021970:	3b846414 3b7c8482 3b704f8a 3b642b82     .d.;..|;.Op;.+d;
24021980:	3b581aa2 3b4c1f1c 3b403b18 3b3470b4     ..X;..L;.;@;.p4;
24021990:	3b28c204 3b1d3112 3b11bfdd 3b067058     ..(;.1.;...;Xp.;
240219a0:	3af688dc 3ae07bf4 3acabd97 3ab55148     ...:.{.:...:HQ.:
240219b0:	3aa03a71 3a8b7c64 3a6e34a9 3a462ead     q:.:d|.:.4n:..F:
240219c0:	3a1eecc3 39f0e946 39a59799 3937ddf1     ...:F..9...9..79
240219d0:	381fcabf b8c8ff58 b96d6728 b9b95958     ...8X...(gm.XY..
240219e0:	b9fa293c ba1c8df1 ba3b1529 ba58a70c     <)......).;...X.
240219f0:	ba7540b1 ba886fbc ba95c079 baa29177     .@u..o..y...w...
24021a00:	baaee1d7 babab0c2 bac5fd88 bad0c7b3     ................
24021a10:	badb0ec4 bae4d288 baee12d3 baf6cf98     ................
24021a20:	baff0915 bb035fa9 bb06f976 bb0a521d     ....._..v....R..
24021a30:	bb0d69eb bb10414c bb12d8a8 bb153074     .i..LA......t0..
24021a40:	bb174943 bb1923b0 bb1ac063 bb1c200a     CI...#..c.... ..
24021a50:	bb1d436e bb1e2b62 bb1ed8c2 bb1f4c77     nC..b+......wL..
24021a60:	bb1f8775 bb1f8abf bb1f5765 bb1eee7f     u.......eW......
24021a70:	bb1e512f bb1d809f bb1c7e07 bb1b4aa8     /Q.......~...J..
24021a80:	bb19e7ca bb1856c1 bb1698e3 bb14af90     .....V..........
24021a90:	bb129c30 bb106032 bb0dfd0b bb0b7435     0...2`......5t..
24021aa0:	bb08c72d bb05f778 bb03069d baffec4f     -...x.......O...
24021ab0:	baf98f4d baf2f959 baec2d9b bae52f3f     M...Y....-..?/..
24021ac0:	bade0171 bad6a762 bacf2442 bac77b42     q...b...B$..B{..
24021ad0:	babfaf94 bab7c463 baafbcdd baa79c28     ....c.......(...
24021ae0:	ba9f6568 ba971bba ba8ec234 ba865be8     he......4....[..
24021af0:	ba7bd7bf ba6aea33 ba59f51d ba48fe55     ..{.3.j...Y.U.H.
24021b00:	ba380b9f ba2722a6 ba1648fc ba05841a     ..8.."'..H......
24021b10:	b9e9b2c3 b9c89c2e b9a7cec0 b9875484     .............T..
24021b20:	b94e6e89 b90f011b b8a0e6a0 b796b95b     .nN.........[...
24021b30:	3827077a 38ca8dec 391fa7d1 3958d4b1     z.'8...8...9..X9
24021b40:	39885f35 39a3ab44 39be47a0 39d82dad     5_.9D..9.G.9.-.9
24021b50:	39f1571b 3a04def9 3a10ae47 3a1c16d5     .W.9...:G..:...:
24021b60:	3a271623 3a31a9db 3a3bcfd3 3a458612     #.':..1:..;:..E:
24021b70:	3a4ecaca 3a579c4c 3a5ff919 3a67dfe9     ..N:L.W:.._:..g:
24021b80:	3a6f4f93 3a764716 3a7cc59c 3a816542     .Oo:.Gv:..|:Be.:
24021b90:	3a842aa6 3a86b2c9 3a88fd9c 3a8b0b1a     .*.:...:...:...:
24021ba0:	3a8cdb4b 3a8e6e63 3a8fc48a 3a90de14     K..:cn.:...:...:
24021bb0:	3a91bb60 3a925cc5 3a92c2ff 3a92ee3e     `..:.\.:...:>..:
24021bc0:	3a92df8e 3a92976c 3a921688 3a915dde     ...:l..:...:.].:
24021bd0:	3a906e4f 3a8f48b6 3a8dee0e 3a8c5f74     On.:.H.:...:t_.:
24021be0:	3a8a9e0c 3a88aaef 3a868749 3a84345a     ...:...:I..:Z4.:
24021bf0:	3a81b370 3a7e0bca 3a785a26 3a7254b5     p..:..~:&Zx:.Tr:
24021c00:	3a6bfe51 3a6559ed 3a5e6a91 3a57334a     Q.k:.Ye:.j^:J3W:
24021c10:	3a4fb731 3a47f966 3a3ffd11 3a37c569     1.O:f.G:..?:i.7:
24021c20:	3a2f55b3 3a26b13b 3a1ddb4e 3a14d73d     .U/:;.&:N..:=..:
24021c30:	3a0ba85c 3a0251fe 39f1aef5 39de785b     \..:.Q.:...9[x.9
24021c40:	39cb06e3 39b76141 39a38e1b 398f940f     ...9Aa.9...9...9
24021c50:	3976f35b 394e8b00 3925fbff 38faa655     [.v9..N9..%9U..8
24021c60:	38a93a72 382f9b1d 364f10e4 b8155869     r:.8../8..O6iX..
24021c70:	b89b88a6 b8ec0532 b91e0553 b945c126     ....2...S...&.E.
24021c80:	b96d2aee b98a1be0 b99d6e79 b9b0880f     .*m.....yn......
24021c90:	b9c36398 b9d5fc2c b9e84d0e b9fa519e     .c..,....M...Q..
24021ca0:	ba0602b5 ba0eb215 ba1734dd ba1f8912     .........4......
24021cb0:	ba27acca ba2f9e30 ba375b89 ba3ee32f     ..'.0./..[7./.>.
24021cc0:	ba463396 ba4d4b43 ba5428d4 ba5acafb     .3F.CKM..(T...Z.
24021cd0:	ba613086 ba675859 ba6d416a ba72eac4     .0a.YXg.jAm...r.
24021ce0:	ba78538e ba7d7b05 ba81303f ba8381b0     .Sx..{}.?0......
24021cf0:	ba85b195 ba87bfba ba89abf5 ba8b7629     ............)v..
24021d00:	ba8d1e3d ba8ea429 ba9007f0 ba91499b     =...)........I..
24021d10:	ba92693d ba9366f6 ba9442ef ba94fd59     =i...f...B..Y...
24021d20:	ba95966e ba960e75 ba9665bd ba969c95     n...u....e......
24021d30:	ba96b362 ba96aa8a ba968274 ba963ba1     b.......t....;..
24021d40:	ba95d682 ba9553a2 ba94b396 ba93f6b4     .....S..........
24021d50:	ba931e2f ba9229ac ba911ab3 ba8ff1aa     /....)..........
24021d60:	ba8eaef4 ba8d5370 ba8bdffb ba8a5544     ....pS......DU..
24021d70:	ba88b3ed ba86fcad ba85305e ba834fd3     ........^0...O..
24021d80:	ba815bda ba7eaa6f ba7a795d ba76261e     .[..o.~.]yz..&v.
24021d90:	ba71b265 ba6d1fe4 ba68704d ba63a547     e.q...m.Mph.G.c.
24021da0:	ba5ec077 ba59c37d ba54affe ba4f87ab     w.^.}.Y...T...O.
24021db0:	ba4a4c31 ba44ff39 ba3fa26d ba3a376e     1LJ.9.D.m.?.n7:.
24021dc0:	ba34bfd4 ba2f3d33 ba29b11f ba241d2a     ..4.3=/...).*.$.
24021dd0:	ba1e82e1 ba18e3cc ba134171 ba0d9d4c     ........qA..L...
24021de0:	ba07f8d4 ba025571 b9f9690a b9ee2ed6     ....qU...i......
24021df0:	b9e2fef3 b9d7dbfd b9ccc87e b9c1c6f5     ........~.......
24021e00:	b9b6d9ce b9ac0365 b9a145fd b996a3c3     ....e....E......
24021e10:	b98c1ed7 b981b93f b96ee9e0 b95aa790     ....?.....n...Z.
24021e20:	b946af27 b9330420 b91fa9ce b90ca359     '.F. .3.....Y...
24021e30:	b8f3e774 b8cf3b7b b8ab4818 b888124a     t...{;...H..J...
24021e40:	b84b3d71 b807e35a b78c3c69 b5bea9e6     q=K.Z...i<......
24021e50:	37624235 37eada32 38309ad5 386a14f6     5Bb72..7..08..j8
24021e60:	3890eb94 38abeec6 38c61279 38df557b     ...8...8y..8{U.8
24021e70:	38f7b6de 39079af6 3912e921 391dc5de     ...8...9!..9...9
24021e80:	39283147 39322b95 393bb50d 3944ce19     G1(9.+29..;9..D9
24021e90:	394d774c 3955b161 395d7d14 3964db36     LwM9a.U9.}]96.d9
24021ea0:	396bccdc 39725322 39786f2a 397e2244     ..k9"Sr9*ox9D"~9
24021eb0:	3981b6ed 398429b6 39866a35 39887945     ...9.).95j.9Ey.9
24021ec0:	398a57cc 398c068f 398d8690 398ed8c1     .W.9...9...9...9
24021ed0:	398ffe03 3990f779 3991c606 39926ac3     ...9y..9...9.j.9
24021ee0:	3992e777 39933937 39936c11 399370f5     w..979.9.l.9.p.9
24021ef0:	39935425 399316cd 3992b71a 39923536     %T.9...9...965.9
24021f00:	399192e7 3990d26c 398ff55f 398efcbc     ...9l..9_..9...9
24021f10:	398de954 398cbbe5 398b757f 398a176f     T..9...9.u.9o..9
24021f20:	3988a30b 398719ad 39857c9b 3983ccf8     ...9...9.|.9...9
24021f30:	39820bca 39803a10 397cb19c 3978d20a     ...9.:.9..|9..x9
24021f40:	3974d784 3970c441 396c9a75 39685c41     ..t9A.p9u.l9A\h9
24021f50:	39640bbc 395faaea 395b3bb2 3956bfd6     ..d9.._9.;[9..V9
24021f60:	3952390d 394da90a 39491174 394473ef     .9R9..M9t.I9.sD9
24021f70:	393fd210 393b2d70 393687a3 3931e237     ..?9p-;9..697.19
24021f80:	392d3ea2 39289e4a 39240289 391f6caa     .>-9J.(9..$9.l.9
24021f90:	391adddd 39165740 3911d9e6 390d66d8     ...9@W.9...9.f.9
24021fa0:	3908ff10 3904a378 390054ef 38f8289e     ...9x..9.T.9.(.8
24021fb0:	38efc4d6 38e78018 38df5bd4 38d75959     ...8...8.[.8YY.8
24021fc0:	38cf79e3 38c7be9a 38c0288d 38b8b8a6     .y.8...8.(.8...8
24021fd0:	38b16fb1 38aa4e5e 38a3554e 389c8514     .o.8^N.8NU.8...8
24021fe0:	3895de2d 388f60f1 38890da3 3882e48a     -..8.`.8...8...8
24021ff0:	3879cbc6 386e2394 3862d090 3857d2c3     ..y8.#n8..b8..W8
24022000:	384d2a36 3842d6ae 3838d7c2 382f2cf6     6*M8..B8..88.,/8
24022010:	3825d5b4 381cd170 38141f5b 380bbe60     ..%8p..8[..8`..8
24022020:	3803ad78 37f7d758 37e8efd2 37daa169     x..8X..7...7i..7
24022030:	37cce962 37bfc58a 37b332b4 37a72dba     b..7...7.2.7.-.7
24022040:	379bb3e5 3790c240 37865585 3778d427     ...7@..7.U.7'.x7
24022050:	3765fad3 3754181b 374323a1 37331958     ..e7..T7.#C7X.37
24022060:	3723f0eb 3715a2f7 37082b0d 36f6fd4d     ..#7...7.+.7M..6
24022070:	36df33f6 36c8e77c 36b40ce5 37c035ea     .3.6|..6...6.5.7

24022080 <__leaf_table_fir64XLow>:
24022080:	bbf82708 397c7d50 397e6c70 39821da2     .'..P}|9pl~9...9
24022090:	3986c984 398d8650 3995ccce 399fe675     ...9P..9...9u..9
240220a0:	39abcbc5 39b9757a 39c8b92b 39d9ac19     ...9zu.9+..9...9
240220b0:	39ec4a34 3a0048b9 3a0b3c31 3a170525     4J.9.H.:1<.:%..:
240220c0:	3a23a076 3a310957 3a3f3cb9 3a4e3d10     v.#:W.1:.<?:.=N:
240220d0:	3a5e0aa7 3a6ea2f3 3a800486 3a89201e     ..^:..n:...:. .:
240220e0:	3a92a4b3 3a9c8db9 3aa6dcb0 3ab190da     ...:...:...:...:
240220f0:	3abcaa5e 3ac8227c 3ad40480 3ae04f82     ^..:|".:...:.O.:
24022100:	3aed0218 3afa0204 3b03bdbb 3b0aa866     ...:...:...;f..;
24022110:	3b11d12d 3b185204 3b20de8e 3b287a73     -..;.R.;.. ;sz(;
24022120:	3b3034bf 3b381c0e 3b403ba5 3b488642     .40;..8;.;@;B.H;
24022130:	3b5102f0 3b59af6c 3b628976 3b6b8b43     ..Q;l.Y;v.b;C.k;
24022140:	3b74b663 3b7e0948 3b83c13b 3b888fd1     c.t;H.~;;..;...;
24022150:	3b8d7074 3b926230 3b9763de 3b9c74a9     tp.;0b.;.c.;.t.;
24022160:	3ba19460 3ba6c287 3babfe16 3bb146bd     `..;...;...;.F.;
24022170:	3bb69c05 3bbbfd1d 3bc167c8 3bc6dbb8     ...;...;.g.;...;
24022180:	3bcc57fe 3bd1dc09 3bd7653c 3bdcf668     .W.;...;<e.;h..;
24022190:	3be28e26 3be82ad8 3bedc269 3bf364ce     &..;.*.;i..;.d.;
240221a0:	3bf904ba 3bfea800 3c0217a8 3c04f8e6     ...;...;...<...<
240221b0:	3c07c2f8 3c0a89e5 3c0d4f27 3c101408     ...<...<'O.<...<
240221c0:	3c12d514 3c15931a 3c184d03 3c1b01df     ...<...<.M.<...<
240221d0:	3c1db021 3c2057f0 3c22f8b9 3c2591ed     !..<.W <.."<..%<
240221e0:	3c2822d7 3c2aab4e 3c2d2aba 3c2fa068     ."(<N.*<.*-<h./<
240221f0:	3c320bd9 3c346cd3 3c36c2f9 3c390d92     ..2<.l4<..6<..9<
24022200:	3c3b4c4e 3c3d7ebe 3c3fa451 3c41bbc0     NL;<.~=<Q.?<..A<
24022210:	3c43c500 3c45bfb2 3c47abb9 3c4987c1     ..C<..E<..G<..I<
24022220:	3c4b55a6 3c4d1478 3c4ec32a 3c505abc     .UK<x.M<*.N<.ZP<
24022230:	3c51e854 3c53614b 3c54c99c 3c5619ee     T.Q<KaS<..T<..V<
24022240:	3c576516 3c5892d6 3c59ad78 3c5ab5e6     .eW<..X<x.Y<..Z<
24022250:	3c5bacef 3c5c8fb8 3c5d5f13 3c5e1a55     ..[<..\<._]<U.^<
24022260:	3c5ec111 3c5f5276 3c5fcf2f 3c60373b     ..^<vR_</._<;7`<
24022270:	3c608a88 3c60c8e6 3c60f2a0 3c61079b     ..`<..`<..`<..a<
24022280:	3c61079b 3c60f2a0 3c60c8e6 3c608a88     ..a<..`<..`<..`<
24022290:	3c60373b 3c5fcf2f 3c5f5276 3c5ec111     ;7`</._<vR_<..^<
240222a0:	3c5e1a55 3c5d5f13 3c5c8fb8 3c5bacef     U.^<._]<..\<..[<
240222b0:	3c5ab5e6 3c59ad78 3c5892d6 3c576516     ..Z<x.Y<..X<.eW<
240222c0:	3c5619ee 3c54c99c 3c53614b 3c51e854     ..V<..T<KaS<T.Q<
240222d0:	3c505abc 3c4ec32a 3c4d1478 3c4b55a6     .ZP<*.N<x.M<.UK<
240222e0:	3c4987c1 3c47abb9 3c45bfb2 3c43c500     ..I<..G<..E<..C<
240222f0:	3c41bbc0 3c3fa451 3c3d7ebe 3c3b4c4e     ..A<Q.?<.~=<NL;<
24022300:	3c390d92 3c36c2f9 3c346cd3 3c320bd9     ..9<..6<.l4<..2<
24022310:	3c2fa068 3c2d2aba 3c2aab4e 3c2822d7     h./<.*-<N.*<."(<
24022320:	3c2591ed 3c22f8b9 3c2057f0 3c1db021     ..%<.."<.W <!..<
24022330:	3c1b01df 3c184d03 3c15931a 3c12d514     ...<.M.<...<...<
24022340:	3c101408 3c0d4f27 3c0a89e5 3c07c2f8     ...<'O.<...<...<
24022350:	3c04f8e6 3c0217a8 3bfea800 3bf904ba     ...<...<...;...;
24022360:	3bf364ce 3bedc269 3be82ad8 3be28e26     .d.;i..;.*.;&..;
24022370:	3bdcf668 3bd7653c 3bd1dc09 3bcc57fe     h..;<e.;...;.W.;
24022380:	3bc6dbb8 3bc167c8 3bbbfd1d 3bb69c05     ...;.g.;...;...;
24022390:	3bb146bd 3babfe16 3ba6c287 3ba19460     .F.;...;...;`..;
240223a0:	3b9c74a9 3b9763de 3b926230 3b8d7074     .t.;.c.;0b.;tp.;
240223b0:	3b888fd1 3b83c13b 3b7e0948 3b74b663     ...;;..;H.~;c.t;
240223c0:	3b6b8b43 3b628976 3b59af6c 3b5102f0     C.k;v.b;l.Y;..Q;
240223d0:	3b488642 3b403ba5 3b381c0e 3b3034bf     B.H;.;@;..8;.40;
240223e0:	3b287a73 3b20de8e 3b185204 3b11d12d     sz(;.. ;.R.;-..;
240223f0:	3b0aa866 3b03bdbb 3afa0204 3aed0218     f..;...;...:...:
24022400:	3ae04f82 3ad40480 3ac8227c 3abcaa5e     .O.:...:|".:^..:
24022410:	3ab190da 3aa6dcb0 3a9c8db9 3a92a4b3     ...:...:...:...:
24022420:	3a89201e 3a800486 3a6ea2f3 3a5e0aa7     . .:...:..n:..^:
24022430:	3a4e3d10 3a3f3cb9 3a310957 3a23a076     .=N:.<?:W.1:v.#:
24022440:	3a170525 3a0b3c31 3a0048b9 39ec4a34     %..:1<.:.H.:4J.9
24022450:	39d9ac19 39c8b92b 39b9757a 39abcbc5     ...9+..9zu.9...9
24022460:	399fe675 3995ccce 398d8650 3986c984     u..9...9P..9...9
24022470:	39821da2 397e6c70 397c7d50 bbf82708     ...9pl~9P}|9.'..

24022480 <__leaf_table_fir8XHigh>:
24022480:	38043205 38cf1c59 38faaa28 39502274     .2.8Y..8(..8t"P9
24022490:	398d5f9c 39bbe8f8 39e9f72f 3a0b70f1     ._.9...9/..9.p.:
240224a0:	3a1e7233 3a2bff54 3a31c175 3a2df84d     3r.:T.+:u.1:M.-:
240224b0:	3a1f75c7 3a05fc36 39c4b74f 395a2706     .u.:6..:O..9.'Z9
240224c0:	37b26be8 b932489c b9b6b90c ba021894     .k.7.H2.........
240224d0:	ba1c6a77 ba26d408 ba1f31f5 ba051ded     wj....&..1......
240224e0:	b9b44f6d b90772e3 38f3710c 39c017cf     mO...r...q.8...9
240224f0:	3a1b996e 3a49c705 3a6432ac 3a6639d5     n..:..I:.2d:.9f:
24022500:	3a4da99f 3a1b3a55 39a56eee b7a5bb05     ..M:U:.:.n.9....
24022510:	b9c6d29f ba3d72ee ba8432b8 ba9d2087     .....r=..2... ..
24022520:	baa596a0 ba9b4b0c ba7bf990 ba1f4b27     .....K....{.'K..
24022530:	b9235e83 39b6c31f 3a5ecfa2 3aa8edc0     .^#....9..^:...:
24022540:	3ad2d6d2 3ae70241 3ae16cd5 3ac0d776     ...:A..:.l.:v..:
24022550:	3a871f93 39e513b7 b983d9b1 ba7b8759     ...:...9....Y.{.
24022560:	bad2514b bb09fe4d bb1cd0fa bb1e6411     KQ..M........d..
24022570:	bb0d4f5c bad4907d ba60d76d 38805058     \O..}...m.`.XP.8
24022580:	3a87d9c6 3b003110 3b3162d6 3b50e287     ...:.1.;.b1;..P;
24022590:	3b59b787 3b4942b3 3b1fbb94 3ac0b15b     ..Y;.BI;...;[..:
240225a0:	398929bb ba8b0d76 bb19dbdd bb61a3c7     .).9v.........a.
240225b0:	bb89b991 bb93ea15 bb8d276c bb6a23d6     ........l'...#j.
240225c0:	bb1aa680 ba4c7f6c 3a8391ff 3b371438     ....l.L....:8.7;
240225d0:	3b8f65dc 3bb5cb9d 3bc92e21 3bc5dbfd     .e.;...;!..;...;
240225e0:	3baa9053 3b718e01 3ad308d9 ba560b09     S..;..q;...:..V.
240225f0:	bb5a4feb bbb8d634 bbf43d0a bc0b7caa     .OZ.4....=...|..
24022600:	bc0d72e3 bbfcfe4b bbbdfa3a bb450835     .r..K...:...5.E.
24022610:	39cfdbde 3b850f86 3bf82e53 3c2c16c8     ...9...;S..;..,<
24022620:	3c4be14d 3c560d28 3c47244e 3c1e35e4     M.K<(.V<N$G<.5.<
24022630:	3bba5f46 3a0f0c69 bbaddea1 bc38a554     F_.;i..:....T.8.
24022640:	bc887cde bcaa214b bcbbbcb3 bcb8aa28     .|..K!......(...
24022650:	bc9da361 bc524e75 bb5de0b7 3c0ff417     a...uNR...]....<
24022660:	3cbd53d3 3d1ef81c 3d61142c 3d90690b     .S.<...=,.a=.i.=
24022670:	3dad00dd 3dc462cf 3dd4f248 3ddd8745     ...=.b.=H..=E..=
24022680:	3ddd8745 3dd4f248 3dc462cf 3dad00dd     E..=H..=.b.=...=
24022690:	3d90690b 3d61142c 3d1ef81c 3cbd53d3     .i.=,.a=...=.S.<
240226a0:	3c0ff417 bb5de0b7 bc524e75 bc9da361     ...<..].uNR.a...
240226b0:	bcb8aa28 bcbbbcb3 bcaa214b bc887cde     (.......K!...|..
240226c0:	bc38a554 bbaddea1 3a0f0c69 3bba5f46     T.8.....i..:F_.;
240226d0:	3c1e35e4 3c47244e 3c560d28 3c4be14d     .5.<N$G<(.V<M.K<
240226e0:	3c2c16c8 3bf82e53 3b850f86 39cfdbde     ..,<S..;...;...9
240226f0:	bb450835 bbbdfa3a bbfcfe4b bc0d72e3     5.E.:...K....r..
24022700:	bc0b7caa bbf43d0a bbb8d634 bb5a4feb     .|...=..4....OZ.
24022710:	ba560b09 3ad308d9 3b718e01 3baa9053     ..V....:..q;S..;
24022720:	3bc5dbfd 3bc92e21 3bb5cb9d 3b8f65dc     ...;!..;...;.e.;
24022730:	3b371438 3a8391ff ba4c7f6c bb1aa680     8.7;...:l.L.....
24022740:	bb6a23d6 bb8d276c bb93ea15 bb89b991     .#j.l'..........
24022750:	bb61a3c7 bb19dbdd ba8b0d76 398929bb     ..a.....v....).9
24022760:	3ac0b15b 3b1fbb94 3b4942b3 3b59b787     [..:...;.BI;..Y;
24022770:	3b50e287 3b3162d6 3b003110 3a87d9c6     ..P;.b1;.1.;...:
24022780:	38805058 ba60d76d bad4907d bb0d4f5c     XP.8m.`.}...\O..
24022790:	bb1e6411 bb1cd0fa bb09fe4d bad2514b     .d......M...KQ..
240227a0:	ba7b8759 b983d9b1 39e513b7 3a871f93     Y.{........9...:
240227b0:	3ac0d776 3ae16cd5 3ae70241 3ad2d6d2     v..:.l.:A..:...:
240227c0:	3aa8edc0 3a5ecfa2 39b6c31f b9235e83     ...:..^:...9.^#.
240227d0:	ba1f4b27 ba7bf990 ba9b4b0c baa596a0     'K....{..K......
240227e0:	ba9d2087 ba8432b8 ba3d72ee b9c6d29f     . ...2...r=.....
240227f0:	b7a5bb05 39a56eee 3a1b3a55 3a4da99f     .....n.9U:.:..M:
24022800:	3a6639d5 3a6432ac 3a49c705 3a1b996e     .9f:.2d:..I:n..:
24022810:	39c017cf 38f3710c b90772e3 b9b44f6d     ...9.q.8.r..mO..
24022820:	ba051ded ba1f31f5 ba26d408 ba1c6a77     .....1....&.wj..
24022830:	ba021894 b9b6b90c b932489c 37b26be8     .........H2..k.7
24022840:	395a2706 39c4b74f 3a05fc36 3a1f75c7     .'Z9O..96..:.u.:
24022850:	3a2df84d 3a31c175 3a2bff54 3a1e7233     M.-:u.1:T.+:3r.:
24022860:	3a0b70f1 39e9f72f 39bbe8f8 398d5f9c     .p.:/..9...9._.9
24022870:	39502274 38faaa28 38cf1c59 38043205     t"P9(..8Y..8.2.8

24022880 <__leaf_table_fir8XLow>:
24022880:	3a3113b2 3991b987 392d5280 b909bab8     ..1:...9.R-9....
24022890:	ba3015e8 bac60f1a bb30678a bb8ab640     ..0......g0.@...
240228a0:	bbc8a16f bc082551 bc2f506a bc5784fa     o...Q%..jP/...W.
240228b0:	bc7dbc3f bc8f3286 bc9aba48 bc9f63cf     ?.}..2..H....c..
240228c0:	bc9b2dc4 bc8c56d2 bc6310bb bc13feff     .-...V....c.....
240228d0:	bb2d6747 3baacfd0 3c6b27bb 3cc898a3     Gg-....;.'k<...<
240228e0:	3d10599f 3d3d22c8 3d68ac6c 3d8875f5     .Y.=."==l.h=.u.=
240228f0:	3d99f4c7 3da7f0c9 3db1b147 3db6b35e     ...=...=G..=^..=
24022900:	3db6b35e 3db1b147 3da7f0c9 3d99f4c7     ^..=G..=...=...=
24022910:	3d8875f5 3d68ac6c 3d3d22c8 3d10599f     .u.=l.h=."==.Y.=
24022920:	3cc898a3 3c6b27bb 3baacfd0 bb2d6747     ...<.'k<...;Gg-.
24022930:	bc13feff bc6310bb bc8c56d2 bc9b2dc4     ......c..V...-..
24022940:	bc9f63cf bc9aba48 bc8f3286 bc7dbc3f     .c..H....2..?.}.
24022950:	bc5784fa bc2f506a bc082551 bbc8a16f     ..W.jP/.Q%..o...
24022960:	bb8ab640 bb30678a bac60f1a ba3015e8     @....g0.......0.
24022970:	b909bab8 392d5280 3991b987 3a3113b2     .....R-9...9..1:

24022980 <__leaf_table_sinewave>:
24022980:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
24022990:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
240229a0:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
240229b0:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
240229c0:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
240229d0:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
240229e0:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
240229f0:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
24022a00:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
24022a10:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
24022a20:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
24022a30:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
24022a40:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
24022a50:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
24022a60:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
24022a70:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
24022a80:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
24022a90:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
24022aa0:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
24022ab0:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
24022ac0:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
24022ad0:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
24022ae0:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
24022af0:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
24022b00:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
24022b10:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
24022b20:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
24022b30:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
24022b40:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
24022b50:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
24022b60:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
24022b70:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
24022b80:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
24022b90:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
24022ba0:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
24022bb0:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
24022bc0:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
24022bd0:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
24022be0:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
24022bf0:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
24022c00:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
24022c10:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
24022c20:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
24022c30:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
24022c40:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
24022c50:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
24022c60:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
24022c70:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
24022c80:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
24022c90:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
24022ca0:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
24022cb0:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
24022cc0:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
24022cd0:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
24022ce0:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
24022cf0:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
24022d00:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
24022d10:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
24022d20:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
24022d30:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
24022d40:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
24022d50:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
24022d60:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
24022d70:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
24022d80:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
24022d90:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
24022da0:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
24022db0:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
24022dc0:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
24022dd0:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
24022de0:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
24022df0:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
24022e00:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
24022e10:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
24022e20:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
24022e30:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
24022e40:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
24022e50:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
24022e60:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
24022e70:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
24022e80:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
24022e90:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
24022ea0:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
24022eb0:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
24022ec0:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
24022ed0:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
24022ee0:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
24022ef0:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
24022f00:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
24022f10:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
24022f20:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
24022f30:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
24022f40:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
24022f50:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
24022f60:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
24022f70:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
24022f80:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
24022f90:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
24022fa0:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
24022fb0:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
24022fc0:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
24022fd0:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
24022fe0:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
24022ff0:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
24023000:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
24023010:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
24023020:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
24023030:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
24023040:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
24023050:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
24023060:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
24023070:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
24023080:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
24023090:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
240230a0:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
240230b0:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
240230c0:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
240230d0:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
240230e0:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
240230f0:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
24023100:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
24023110:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
24023120:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
24023130:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
24023140:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
24023150:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
24023160:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
24023170:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
24023180:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
24023190:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
240231a0:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
240231b0:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
240231c0:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
240231d0:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
240231e0:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
240231f0:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
24023200:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
24023210:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
24023220:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
24023230:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
24023240:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
24023250:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
24023260:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
24023270:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
24023280:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
24023290:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
240232a0:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
240232b0:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
240232c0:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
240232d0:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
240232e0:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
240232f0:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
24023300:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
24023310:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
24023320:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
24023330:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
24023340:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
24023350:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
24023360:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
24023370:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
24023380:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
24023390:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
240233a0:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
240233b0:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
240233c0:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
240233d0:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
240233e0:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
240233f0:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
24023400:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
24023410:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
24023420:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
24023430:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
24023440:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
24023450:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
24023460:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
24023470:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
24023480:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
24023490:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
240234a0:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
240234b0:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
240234c0:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
240234d0:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
240234e0:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
240234f0:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
24023500:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
24023510:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
24023520:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
24023530:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
24023540:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
24023550:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
24023560:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
24023570:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
24023580:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
24023590:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
240235a0:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
240235b0:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
240235c0:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
240235d0:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
240235e0:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
240235f0:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
24023600:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
24023610:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
24023620:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
24023630:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
24023640:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
24023650:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
24023660:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
24023670:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
24023680:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
24023690:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
240236a0:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
240236b0:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
240236c0:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
240236d0:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
240236e0:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
240236f0:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
24023700:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
24023710:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
24023720:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
24023730:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
24023740:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
24023750:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
24023760:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
24023770:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
24023780:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
24023790:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
240237a0:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
240237b0:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
240237c0:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
240237d0:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
240237e0:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
240237f0:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
24023800:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
24023810:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
24023820:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
24023830:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
24023840:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
24023850:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
24023860:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
24023870:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
24023880:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
24023890:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
240238a0:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
240238b0:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
240238c0:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
240238d0:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
240238e0:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
240238f0:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
24023900:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
24023910:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
24023920:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
24023930:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
24023940:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
24023950:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
24023960:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
24023970:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
24023980:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
24023990:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
240239a0:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
240239b0:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
240239c0:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
240239d0:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
240239e0:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
240239f0:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
24023a00:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
24023a10:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
24023a20:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
24023a30:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
24023a40:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
24023a50:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
24023a60:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
24023a70:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
24023a80:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
24023a90:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
24023aa0:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
24023ab0:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
24023ac0:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
24023ad0:	be827fa2 be84039b be858794 be870b8d     ................
24023ae0:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
24023af0:	be8e9b7c be901b86 be919f80 be931f8a     |...............
24023b00:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
24023b10:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
24023b20:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
24023b30:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
24023b40:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
24023b50:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
24023b60:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
24023b70:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
24023b80:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
24023b90:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
24023ba0:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
24023bb0:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
24023bc0:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
24023bd0:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
24023be0:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
24023bf0:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
24023c00:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
24023c10:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
24023c20:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
24023c30:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
24023c40:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
24023c50:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
24023c60:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
24023c70:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
24023c80:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
24023c90:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
24023ca0:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
24023cb0:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
24023cc0:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
24023cd0:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
24023ce0:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
24023cf0:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
24023d00:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
24023d10:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
24023d20:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
24023d30:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
24023d40:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
24023d50:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
24023d60:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
24023d70:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
24023d80:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
24023d90:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
24023da0:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
24023db0:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
24023dc0:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
24023dd0:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
24023de0:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
24023df0:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
24023e00:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
24023e10:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
24023e20:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
24023e30:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
24023e40:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
24023e50:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
24023e60:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
24023e70:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
24023e80:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
24023e90:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
24023ea0:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
24023eb0:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
24023ec0:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
24023ed0:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
24023ee0:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
24023ef0:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
24023f00:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
24023f10:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
24023f20:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
24023f30:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
24023f40:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
24023f50:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
24023f60:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
24023f70:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
24023f80:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
24023f90:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
24023fa0:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
24023fb0:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
24023fc0:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
24023fd0:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
24023fe0:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
24023ff0:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
24024000:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
24024010:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
24024020:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
24024030:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
24024040:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
24024050:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
24024060:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
24024070:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
24024080:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
24024090:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
240240a0:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
240240b0:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
240240c0:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
240240d0:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
240240e0:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
240240f0:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
24024100:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
24024110:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
24024120:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
24024130:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
24024140:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
24024150:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
24024160:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
24024170:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
24024180:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
24024190:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
240241a0:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
240241b0:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
240241c0:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
240241d0:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
240241e0:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
240241f0:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
24024200:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
24024210:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
24024220:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
24024230:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
24024240:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
24024250:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
24024260:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
24024270:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
24024280:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
24024290:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
240242a0:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
240242b0:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
240242c0:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
240242d0:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
240242e0:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
240242f0:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
24024300:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
24024310:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
24024320:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
24024330:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
24024340:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
24024350:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
24024360:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
24024370:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
24024380:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
24024390:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
240243a0:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
240243b0:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
240243c0:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
240243d0:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
240243e0:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
240243f0:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
24024400:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
24024410:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
24024420:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
24024430:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
24024440:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
24024450:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
24024460:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
24024470:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
24024480:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
24024490:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
240244a0:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
240244b0:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
240244c0:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
240244d0:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
240244e0:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
240244f0:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
24024500:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
24024510:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
24024520:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
24024530:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
24024540:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
24024550:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
24024560:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
24024570:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
24024580:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
24024590:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
240245a0:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
240245b0:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
240245c0:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
240245d0:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
240245e0:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
240245f0:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
24024600:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
24024610:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
24024620:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
24024630:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
24024640:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
24024650:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
24024660:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
24024670:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
24024680:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
24024690:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
240246a0:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
240246b0:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
240246c0:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
240246d0:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
240246e0:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
240246f0:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
24024700:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
24024710:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
24024720:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
24024730:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
24024740:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
24024750:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
24024760:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
24024770:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
24024780:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
24024790:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
240247a0:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
240247b0:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
240247c0:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
240247d0:	bea69058 bea5143c bea39820 bea21816     X...<... .......
240247e0:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
240247f0:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
24024800:	be949f95 be931f8a be919f80 be901b86     ................
24024810:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
24024820:	be888f86 be870b8d be858794 be84039b     ................
24024830:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
24024840:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
24024850:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
24024860:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
24024870:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
24024880:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
24024890:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
240248a0:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
240248b0:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
240248c0:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
240248d0:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
240248e0:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
240248f0:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
24024900:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
24024910:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
24024920:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
24024930:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
24024940:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
24024950:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
24024960:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
24024970:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

24024980 <__leaf_tablesize_firNumTaps>:
24024980:	42000000 42800000 42800000 43000000     ...B...B...B...C
24024990:	43800000 43800000 43000000 43800000     ...C...C...C...C
240249a0:	43800000 44000000 44000000 44800000     ...C...D...D...D
	...

24024a00 <slope_dd_table>:
	...
24024a9c:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
24024aac:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
24024abc:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
24024acc:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
24024adc:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
24024aec:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
24024afc:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
24024b0c:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
24024b1c:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
24024b2c:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
24024b3c:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
24024b4c:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
24024b5c:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
24024b6c:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
24024b7c:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
24024b8c:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
24024b9c:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
24024bac:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
24024bbc:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
24024bcc:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
24024bdc:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
24024bec:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
24024bfc:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
24024c0c:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
24024c1c:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
24024c2c:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
24024c3c:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
24024c4c:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
24024c5c:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
24024c6c:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
24024c7c:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
24024c8c:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
24024c9c:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
24024cac:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
24024cbc:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
24024ccc:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
24024cdc:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
24024cec:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
24024cfc:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
24024d0c:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
24024d1c:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
24024d2c:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
24024d3c:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
24024d4c:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
24024d5c:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
24024d6c:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
24024d7c:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
24024d8c:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
24024d9c:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
24024dac:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
24024dbc:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
24024dcc:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
24024ddc:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
24024dec:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
24024dfc:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
24024e0c:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
24024e1c:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
24024e2c:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
24024e3c:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
24024e4c:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
24024e5c:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
24024e6c:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
24024e7c:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
24024e8c:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
24024e9c:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
24024eac:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
24024ebc:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
24024ecc:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
24024edc:	be0eae12 be10148d be1152be be1268fb     .........R...h..
24024eec:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
24024efc:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
24024f0c:	be15718f be15109e be148cff be13e73e     .q..........>...
24024f1c:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
24024f2c:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
24024f3c:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
24024f4c:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
24024f5c:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
24024f6c:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
24024f7c:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
24024f8c:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
24024f9c:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
24024fac:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
24024fbc:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
24024fcc:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
24024fdc:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
24024fec:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
24024ffc:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
2402500c:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
2402501c:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
2402502c:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
2402503c:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
2402504c:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
2402505c:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
2402506c:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
2402507c:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
2402508c:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
2402509c:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
240250ac:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
240250bc:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
240250cc:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
240250dc:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
240250ec:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
240250fc:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
2402510c:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
2402511c:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
2402512c:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
2402513c:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
2402514c:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
2402515c:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
2402516c:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
2402517c:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
2402518c:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
2402519c:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
240251ac:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
240251bc:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
240251cc:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
240251dc:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
240251ec:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
240251fc:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
2402520c:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
2402521c:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
2402522c:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
2402523c:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
2402524c:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
2402525c:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
2402526c:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
2402527c:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
2402528c:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
2402529c:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
240252ac:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
240252bc:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
240252cc:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
240252dc:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
240252ec:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
240252fc:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
2402530c:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
2402531c:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
2402532c:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
2402533c:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
2402534c:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
2402535c:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
2402536c:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
2402537c:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
2402538c:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
2402539c:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
240253ac:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
240253bc:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
240253cc:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
240253dc:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
240253ec:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
240253fc:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
2402540c:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
2402541c:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
2402542c:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
2402543c:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
2402544c:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
2402545c:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
2402546c:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
2402547c:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
2402548c:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
2402549c:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
240254ac:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
240254bc:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
240254cc:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
240254dc:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
240254ec:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
240254fc:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
2402550c:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
2402551c:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
2402552c:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
2402553c:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
2402554c:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
2402555c:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
2402556c:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
2402557c:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
2402558c:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
2402559c:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
240255ac:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
240255bc:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
240255cc:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
240255dc:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
240255ec:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
240255fc:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
2402560c:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
2402561c:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
2402562c:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
2402563c:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
2402564c:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
2402565c:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
2402566c:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
2402567c:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
2402568c:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
2402569c:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
240256ac:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
240256bc:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
240256cc:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
240256dc:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
240256ec:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
240256fc:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
2402570c:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
2402571c:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
2402572c:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
2402573c:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
2402574c:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
2402575c:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
2402576c:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
2402577c:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
2402578c:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
2402579c:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
240257ac:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
240257bc:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
240257cc:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
240257dc:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
240257ec:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
240257fc:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
2402580c:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
2402581c:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
2402582c:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
2402583c:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
2402584c:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
2402585c:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
2402586c:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
2402587c:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
2402588c:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
2402589c:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
240258ac:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
240258bc:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
240258cc:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
240258dc:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
240258ec:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
240258fc:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
2402590c:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
2402591c:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
2402592c:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
2402593c:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
2402594c:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
2402595c:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
2402596c:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
2402597c:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
2402598c:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
2402599c:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
240259ac:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
240259bc:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
240259cc:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
240259dc:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
240259ec:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
240259fc:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
24025a0c:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
24025a1c:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
24025a2c:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
24025a3c:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
24025a4c:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
24025a5c:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
24025a6c:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
24025a7c:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
24025a8c:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
24025a9c:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
24025aac:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
24025abc:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
24025acc:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
24025adc:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
24025aec:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
24025afc:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
24025b0c:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
24025b1c:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
24025b2c:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
24025b3c:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
24025b4c:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
24025b5c:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
24025b6c:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
24025b7c:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
24025b8c:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
24025b9c:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
24025bac:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
24025bbc:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
24025bcc:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
24025bdc:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
24025bec:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
24025bfc:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
24025c0c:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
24025c1c:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
24025c2c:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
24025c3c:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
24025c4c:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
24025c5c:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
24025c6c:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
24025c7c:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
24025c8c:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
24025c9c:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
24025cac:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
24025cbc:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
24025ccc:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
24025cdc:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
24025cec:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
24025cfc:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
24025d0c:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
24025d1c:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
24025d2c:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
24025d3c:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
24025d4c:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
24025d5c:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
24025d6c:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
24025d7c:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
24025d8c:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
24025d9c:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
24025dac:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
24025dbc:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
24025dcc:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
24025ddc:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
24025dec:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
24025dfc:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
24025e0c:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
24025e1c:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
24025e2c:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
24025e3c:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
24025e4c:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
24025e5c:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
24025e6c:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
24025e7c:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
24025e8c:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
24025e9c:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
24025eac:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
24025ebc:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
24025ecc:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
24025edc:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
24025eec:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
24025efc:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
24025f0c:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
24025f1c:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
24025f2c:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
24025f3c:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
24025f4c:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
24025f5c:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
24025f6c:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
24025f7c:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
24025f8c:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
24025f9c:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
24025fac:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
24025fbc:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
24025fcc:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
24025fdc:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
24025fec:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
24025ffc:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
2402600c:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
2402601c:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
2402602c:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
2402603c:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
2402604c:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
2402605c:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
2402606c:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
2402607c:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
2402608c:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
2402609c:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
240260ac:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
240260bc:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
240260cc:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
240260dc:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
240260ec:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
240260fc:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
2402610c:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
2402611c:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
2402612c:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
2402613c:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
2402614c:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
2402615c:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
2402616c:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
2402617c:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
2402618c:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
2402619c:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
240261ac:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
240261bc:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
240261cc:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
240261dc:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
240261ec:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
240261fc:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
2402620c:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
2402621c:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
2402622c:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
2402623c:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
2402624c:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
2402625c:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
2402626c:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
2402627c:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
2402628c:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
2402629c:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
240262ac:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
240262bc:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
240262cc:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
240262dc:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
240262ec:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
240262fc:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
2402630c:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
2402631c:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
2402632c:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
2402633c:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
2402634c:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
2402635c:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
2402636c:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
2402637c:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
2402638c:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
2402639c:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
240263ac:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
240263bc:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
240263cc:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
240263dc:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
240263ec:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
240263fc:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
2402640c:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
2402641c:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
2402642c:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
2402643c:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
2402644c:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
2402645c:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
2402646c:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
2402647c:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
2402648c:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
2402649c:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
240264ac:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
240264bc:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
240264cc:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
240264dc:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
240264ec:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
240264fc:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
2402650c:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
2402651c:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
2402652c:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
2402653c:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
2402654c:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
2402655c:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
2402656c:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
2402657c:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
2402658c:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
2402659c:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
240265ac:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
240265bc:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
240265cc:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
240265dc:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
240265ec:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
240265fc:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
2402660c:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
2402661c:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
2402662c:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
2402663c:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
2402664c:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
2402665c:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
2402666c:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
2402667c:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
2402668c:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
2402669c:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
240266ac:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
240266bc:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
240266cc:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
240266dc:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
240266ec:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
240266fc:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
2402670c:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
2402671c:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
2402672c:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
2402673c:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
2402674c:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
2402675c:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
2402676c:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
2402677c:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
2402678c:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
2402679c:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
240267ac:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
240267bc:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
240267cc:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
240267dc:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
240267ec:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
240267fc:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
2402680c:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
2402681c:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
2402682c:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
2402683c:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
2402684c:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
2402685c:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
2402686c:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
2402687c:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
2402688c:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
2402689c:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
240268ac:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
240268bc:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
240268cc:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
240268dc:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
240268ec:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
240268fc:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
2402690c:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
2402691c:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
2402692c:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
2402693c:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
2402694c:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
2402695c:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
2402696c:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
2402697c:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
2402698c:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
2402699c:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
240269ac:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
240269bc:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
240269cc:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
240269dc:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
240269ec:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
240269fc:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
24026a0c:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
24026a1c:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
24026a2c:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
24026a3c:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
24026a4c:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
24026a5c:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
24026a6c:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
24026a7c:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
24026a8c:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
24026a9c:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
24026aac:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
24026abc:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
24026acc:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
24026adc:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
24026aec:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
24026afc:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
24026b0c:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
24026b1c:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
24026b2c:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
24026b3c:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
24026b4c:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
24026b5c:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
24026b6c:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
24026b7c:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
24026b8c:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
24026b9c:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
24026bac:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
24026bbc:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
24026bcc:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
24026bdc:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
24026bec:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
24026bfc:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
24026c0c:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
24026c1c:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
24026c2c:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
24026c3c:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
24026c4c:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
24026c5c:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
24026c6c:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
24026c7c:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
24026c8c:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
24026c9c:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
24026cac:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
24026cbc:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
24026ccc:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
24026cdc:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
24026cec:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
24026cfc:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
24026d0c:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
24026d1c:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
24026d2c:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
24026d3c:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
24026d4c:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
24026d5c:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
24026d6c:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
24026d7c:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
24026d8c:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
24026d9c:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
24026dac:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
24026dbc:	babf16bd babb96cd bab7bd01 bab38bab     ................
24026dcc:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
24026ddc:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
24026dec:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
24026dfc:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
24026e0c:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
24026e1c:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
24026e2c:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
24026e3c:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
24026e4c:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
24026e5c:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
24026e6c:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
24026e7c:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
24026e8c:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
24026e9c:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
24026eac:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
24026ebc:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
24026ecc:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
24026edc:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
24026eec:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
24026efc:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
24026f0c:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
24026f1c:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
24026f2c:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
24026f3c:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
24026f4c:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
24026f5c:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
24026f6c:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
24026f7c:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
24026f8c:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
24026f9c:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
24026fac:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
24026fbc:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
24026fcc:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
24026fdc:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
24026fec:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
24026ffc:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
2402700c:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
2402701c:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
2402702c:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
2402703c:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
2402704c:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
2402705c:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
2402706c:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
2402707c:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
2402708c:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
2402709c:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
240270ac:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
240270bc:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
240270cc:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
240270dc:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
240270ec:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
240270fc:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
2402710c:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
2402711c:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
2402712c:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
2402713c:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
2402714c:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
2402715c:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
2402716c:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
2402717c:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
2402718c:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
2402719c:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
240271ac:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
240271bc:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
240271cc:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
240271dc:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
240271ec:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
240271fc:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
2402720c:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
2402721c:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
2402722c:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
2402723c:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
2402724c:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
2402725c:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
2402726c:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
2402727c:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
2402728c:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
2402729c:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
240272ac:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
240272bc:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
240272cc:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
240272dc:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
240272ec:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
240272fc:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
2402730c:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
2402731c:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
2402732c:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
2402733c:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
2402734c:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
2402735c:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
2402736c:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
2402737c:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
2402738c:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
2402739c:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
240273ac:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
240273bc:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
240273cc:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
240273dc:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
240273ec:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
240273fc:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
2402740c:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
2402741c:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
2402742c:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
2402743c:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
2402744c:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
2402745c:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
2402746c:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
2402747c:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
2402748c:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
2402749c:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
240274ac:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
240274bc:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
240274cc:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
240274dc:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
240274ec:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
240274fc:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
2402750c:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
2402751c:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
2402752c:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
2402753c:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
2402754c:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
2402755c:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
2402756c:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
2402757c:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
2402758c:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
2402759c:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
240275ac:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
240275bc:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
240275cc:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
240275dc:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
240275ec:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
240275fc:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
2402760c:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
2402761c:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
2402762c:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
2402763c:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
2402764c:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
2402765c:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
2402766c:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
2402767c:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
2402768c:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
2402769c:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
240276ac:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
240276bc:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
240276cc:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
240276dc:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
240276ec:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
240276fc:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
2402770c:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
2402771c:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
2402772c:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
2402773c:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
2402774c:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
2402775c:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
2402776c:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
2402777c:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
2402778c:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
2402779c:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
240277ac:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
240277bc:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
240277cc:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
240277dc:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
240277ec:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
240277fc:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
2402780c:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
2402781c:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
2402782c:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
2402783c:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
2402784c:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
2402785c:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
2402786c:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
2402787c:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
2402788c:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
2402789c:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
240278ac:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
240278bc:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
240278cc:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
240278dc:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
240278ec:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
240278fc:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
2402790c:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
2402791c:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
2402792c:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
2402793c:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
2402794c:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
2402795c:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
2402796c:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
2402797c:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
2402798c:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
2402799c:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
240279ac:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
240279bc:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
240279cc:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
240279dc:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
240279ec:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
240279fc:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
24027a0c:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
24027a1c:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
24027a2c:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
24027a3c:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
24027a4c:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
24027a5c:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
24027a6c:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
24027a7c:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
24027a8c:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
24027a9c:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
24027aac:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24027abc:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24027acc:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24027adc:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
24027aec:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
24027afc:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
24027b0c:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
24027b1c:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
24027b2c:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
24027b3c:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
24027b4c:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
24027b5c:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
24027b6c:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
24027b7c:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
24027b8c:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
24027b9c:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
24027bac:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24027bbc:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24027bcc:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24027bdc:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
24027bec:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
24027bfc:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
24027c0c:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
24027c1c:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
24027c2c:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
24027c3c:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
24027c4c:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
24027c5c:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
24027c6c:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
24027c7c:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
24027c8c:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
24027c9c:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
24027cac:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24027cbc:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24027ccc:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24027cdc:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
24027cec:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
24027cfc:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
24027d0c:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
24027d1c:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
24027d2c:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
24027d3c:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
24027d4c:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
24027d5c:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
24027d6c:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
24027d7c:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
24027d8c:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
24027d9c:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
24027dac:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24027dbc:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24027dcc:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24027ddc:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
24027dec:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
24027dfc:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
24027e0c:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
24027e1c:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
24027e2c:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
24027e3c:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
24027e4c:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
24027e5c:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
24027e6c:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
24027e7c:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
24027e8c:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
24027e9c:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
24027eac:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
24027ebc:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
24027ecc:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
24027edc:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
24027eec:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
24027efc:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
24027f0c:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
24027f1c:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
24027f2c:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
24027f3c:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
24027f4c:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
24027f5c:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
24027f6c:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
24027f7c:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
24027f8c:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
24027f9c:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
24027fac:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
24027fbc:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24027fcc:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24027fdc:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
24027fec:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
24027ffc:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
2402800c:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
2402801c:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
2402802c:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
2402803c:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
2402804c:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
2402805c:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
2402806c:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
2402807c:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
2402808c:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
2402809c:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
240280ac:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
240280bc:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
240280cc:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
240280dc:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
240280ec:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
240280fc:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
2402810c:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
2402811c:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
2402812c:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
2402813c:	b808d82b b80a8abf b80befed b80d078a     +...............
2402814c:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
2402815c:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
2402816c:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
2402817c:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
2402818c:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
2402819c:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
240281ac:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
240281bc:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
240281cc:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
240281dc:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
240281ec:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
240281fc:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
2402820c:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
2402821c:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
2402822c:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
2402823c:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
2402824c:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
2402825c:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
2402826c:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
2402827c:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
2402828c:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
2402829c:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
240282ac:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
240282bc:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
240282cc:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
240282dc:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
240282ec:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
240282fc:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
2402830c:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
2402831c:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
2402832c:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
2402833c:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
2402834c:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
2402835c:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
2402836c:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
2402837c:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
2402838c:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
2402839c:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
240283ac:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
240283bc:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
240283cc:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
240283dc:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
240283ec:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
240283fc:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
2402840c:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
2402841c:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
2402842c:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
2402843c:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
2402844c:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
2402845c:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
2402846c:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
2402847c:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
2402848c:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
2402849c:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
240284ac:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
240284bc:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
240284cc:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
240284dc:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
240284ec:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
240284fc:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
2402850c:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
2402851c:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
2402852c:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
2402853c:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
2402854c:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
2402855c:	b7087574 b70df990 b713221d b717ed03     tu......."......
2402856c:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
2402857c:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
2402858c:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
2402859c:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
240285ac:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
240285bc:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
240285cc:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
240285dc:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
240285ec:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
240285fc:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
2402860c:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
2402861c:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
2402862c:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
2402863c:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
2402864c:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
2402865c:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
2402866c:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
2402867c:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
2402868c:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
2402869c:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
240286ac:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
240286bc:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
240286cc:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
240286dc:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
240286ec:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
240286fc:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
2402870c:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
2402871c:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
2402872c:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
2402873c:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
2402874c:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
2402875c:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
2402876c:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
2402877c:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
2402878c:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
2402879c:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
240287ac:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
240287bc:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
240287cc:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
240287dc:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
240287ec:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
240287fc:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
2402880c:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
2402881c:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
2402882c:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
2402883c:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
2402884c:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
2402885c:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
2402886c:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
2402887c:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
2402888c:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
2402889c:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
240288ac:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
240288bc:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
240288cc:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
240288dc:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
240288ec:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
240288fc:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
2402890c:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
2402891c:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
2402892c:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
2402893c:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
2402894c:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
2402895c:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
2402896c:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
2402897c:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
2402898c:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
2402899c:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
240289ac:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
240289bc:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
240289cc:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
240289dc:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
240289ec:	b610f5d3 b60be886 b60694c9 b600fec9     ................
240289fc:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
24028a0c:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
24028a1c:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
24028a2c:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
24028a3c:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
24028a4c:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
24028a5c:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
24028a6c:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
24028a7c:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
24028a8c:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
24028a9c:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
24028aac:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
24028abc:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
24028acc:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
24028adc:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
24028aec:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
24028afc:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
24028b0c:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
24028b1c:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
24028b2c:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
24028b3c:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
24028b4c:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
24028b5c:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
24028b6c:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
24028b7c:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
24028b8c:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
24028b9c:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
24028bac:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
24028bbc:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
24028bcc:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
24028bdc:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
24028bec:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
24028bfc:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
24028c0c:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
24028c1c:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
24028c2c:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
24028c3c:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
24028c4c:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
24028c5c:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
24028c6c:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
24028c7c:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
24028c8c:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
24028c9c:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
24028cac:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
24028cbc:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
24028ccc:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
24028cdc:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
24028cec:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
24028cfc:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
24028d0c:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
24028d1c:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
24028d2c:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
24028d3c:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
24028d4c:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
24028d5c:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
24028d6c:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
24028d7c:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
24028d8c:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
24028d9c:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
24028dac:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
24028dbc:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
24028dcc:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
24028ddc:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
24028dec:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
24028dfc:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
24028e0c:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
24028e1c:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
24028e2c:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
24028e3c:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
24028e4c:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
24028e5c:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
24028e6c:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
24028e7c:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
24028e8c:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
24028e9c:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
24028eac:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
24028ebc:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
24028ecc:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
24028edc:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
24028eec:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
24028efc:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
24028f0c:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
24028f1c:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
24028f2c:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
24028f3c:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
24028f4c:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
24028f5c:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
24028f6c:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
24028f7c:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
24028f8c:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
24028f9c:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
24028fac:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
24028fbc:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24028fcc:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24028fdc:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
24028fec:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
24028ffc:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
2402900c:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
2402901c:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
2402902c:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
2402903c:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
2402904c:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
2402905c:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
2402906c:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
2402907c:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

24029104 <step_dd_table>:
	...
24029238:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
24029248:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
24029258:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
24029268:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
24029278:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
24029288:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
24029298:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
240292a8:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
240292b8:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
240292c8:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
240292d8:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
240292e8:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
240292f8:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
24029308:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
24029318:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
24029328:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
24029338:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
24029348:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
24029358:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
24029368:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
24029378:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
24029388:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
24029398:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
240293a8:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
240293b8:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
240293c8:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
240293d8:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
240293e8:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
240293f8:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
24029408:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
24029418:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
24029428:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
24029438:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
24029448:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
24029458:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
24029468:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
24029478:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
24029488:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
24029498:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
240294a8:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
240294b8:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
240294c8:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
240294d8:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
240294e8:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
240294f8:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
24029508:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
24029518:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
24029528:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
24029538:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
24029548:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
24029558:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
24029568:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
24029578:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
24029588:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
24029598:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
240295a8:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
240295b8:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
240295c8:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
240295d8:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
240295e8:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
240295f8:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
24029608:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
24029618:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
24029628:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
24029638:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
24029648:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
24029658:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
24029668:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
24029678:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
24029688:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
24029698:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
240296a8:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
240296b8:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
240296c8:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
240296d8:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
240296e8:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
240296f8:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
24029708:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
24029718:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
24029728:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
24029738:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
24029748:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
24029758:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
24029768:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
24029778:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
24029788:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
24029798:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
240297a8:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
240297b8:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
240297c8:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
240297d8:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
240297e8:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
240297f8:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
24029808:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
24029818:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
24029828:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
24029838:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
24029848:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
24029858:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
24029868:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
24029878:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
24029888:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
24029898:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
240298a8:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
240298b8:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
240298c8:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
240298d8:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
240298e8:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
240298f8:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
24029908:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
24029918:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
24029928:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
24029938:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
24029948:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
24029958:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
24029968:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
24029978:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
24029988:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
24029998:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
240299a8:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
240299b8:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
240299c8:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
240299d8:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
240299e8:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
240299f8:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
24029a08:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
24029a18:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
24029a28:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
24029a38:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
24029a48:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
24029a58:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
24029a68:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
24029a78:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
24029a88:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
24029a98:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
24029aa8:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
24029ab8:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24029ac8:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24029ad8:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
24029ae8:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
24029af8:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
24029b08:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
24029b18:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
24029b28:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
24029b38:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
24029b48:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
24029b58:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
24029b68:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
24029b78:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
24029b88:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
24029b98:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
24029ba8:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
24029bb8:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24029bc8:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24029bd8:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
24029be8:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
24029bf8:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
24029c08:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
24029c18:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
24029c28:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
24029c38:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
24029c48:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
24029c58:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
24029c68:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
24029c78:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
24029c88:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
24029c98:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
24029ca8:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
24029cb8:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24029cc8:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24029cd8:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
24029ce8:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
24029cf8:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
24029d08:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
24029d18:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
24029d28:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
24029d38:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
24029d48:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
24029d58:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
24029d68:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
24029d78:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
24029d88:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
24029d98:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
24029da8:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
24029db8:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24029dc8:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24029dd8:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
24029de8:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
24029df8:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
24029e08:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
24029e18:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
24029e28:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
24029e38:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
24029e48:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24029e58:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
24029e68:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
24029e78:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
24029e88:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
24029e98:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
24029ea8:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
24029eb8:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
24029ec8:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
24029ed8:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
24029ee8:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
24029ef8:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
24029f08:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
24029f18:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
24029f28:	bae718f6 be02f380 bad0894d be049492     ........M.......
24029f38:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
24029f48:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
24029f58:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
24029f68:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
24029f78:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
24029f88:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
24029f98:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
24029fa8:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
24029fb8:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
24029fc8:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
24029fd8:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
24029fe8:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
24029ff8:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
2402a008:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
2402a018:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
2402a028:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
2402a038:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
2402a048:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
2402a058:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
2402a068:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
2402a078:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
2402a088:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
2402a098:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
2402a0a8:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
2402a0b8:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
2402a0c8:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
2402a0d8:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
2402a0e8:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
2402a0f8:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
2402a108:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
2402a118:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
2402a128:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
2402a138:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
2402a148:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
2402a158:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
2402a168:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
2402a178:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
2402a188:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
2402a198:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
2402a1a8:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
2402a1b8:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
2402a1c8:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
2402a1d8:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
2402a1e8:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
2402a1f8:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
2402a208:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
2402a218:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
2402a228:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
2402a238:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
2402a248:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
2402a258:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
2402a268:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
2402a278:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
2402a288:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
2402a298:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
2402a2a8:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
2402a2b8:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
2402a2c8:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
2402a2d8:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
2402a2e8:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
2402a2f8:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
2402a308:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
2402a318:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
2402a328:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
2402a338:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
2402a348:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
2402a358:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
2402a368:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
2402a378:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
2402a388:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
2402a398:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
2402a3a8:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
2402a3b8:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
2402a3c8:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
2402a3d8:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
2402a3e8:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
2402a3f8:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
2402a408:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
2402a418:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
2402a428:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
2402a438:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
2402a448:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
2402a458:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
2402a468:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
2402a478:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
2402a488:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
2402a498:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
2402a4a8:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
2402a4b8:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
2402a4c8:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
2402a4d8:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
2402a4e8:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
2402a4f8:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
2402a508:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
2402a518:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
2402a528:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
2402a538:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
2402a548:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
2402a558:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
2402a568:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
2402a578:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
2402a588:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
2402a598:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
2402a5a8:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
2402a5b8:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
2402a5c8:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
2402a5d8:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
2402a5e8:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
2402a5f8:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
2402a608:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
2402a618:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
2402a628:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
2402a638:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
2402a648:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
2402a658:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
2402a668:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
2402a678:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
2402a688:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
2402a698:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
2402a6a8:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
2402a6b8:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
2402a6c8:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
2402a6d8:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
2402a6e8:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
2402a6f8:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
2402a708:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
2402a718:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
2402a728:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
2402a738:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
2402a748:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
2402a758:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
2402a768:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
2402a778:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
2402a788:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
2402a798:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
2402a7a8:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
2402a7b8:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
2402a7c8:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
2402a7d8:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
2402a7e8:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
2402a7f8:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
2402a808:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
2402a818:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
2402a828:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
2402a838:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
2402a848:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
2402a858:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
2402a868:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
2402a878:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
2402a888:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
2402a898:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
2402a8a8:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
2402a8b8:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
2402a8c8:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
2402a8d8:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
2402a8e8:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
2402a8f8:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
2402a908:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
2402a918:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
2402a928:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
2402a938:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
2402a948:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
2402a958:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
2402a968:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
2402a978:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
2402a988:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
2402a998:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
2402a9a8:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
2402a9b8:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
2402a9c8:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
2402a9d8:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
2402a9e8:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
2402a9f8:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
2402aa08:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
2402aa18:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
2402aa28:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
2402aa38:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
2402aa48:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
2402aa58:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
2402aa68:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
2402aa78:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
2402aa88:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
2402aa98:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
2402aaa8:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
2402aab8:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
2402aac8:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
2402aad8:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
2402aae8:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
2402aaf8:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
2402ab08:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
2402ab18:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
2402ab28:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
2402ab38:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
2402ab48:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
2402ab58:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
2402ab68:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
2402ab78:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
2402ab88:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
2402ab98:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
2402aba8:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
2402abb8:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
2402abc8:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
2402abd8:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
2402abe8:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
2402abf8:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
2402ac08:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
2402ac18:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
2402ac28:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
2402ac38:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
2402ac48:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
2402ac58:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
2402ac68:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
2402ac78:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
2402ac88:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
2402ac98:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
2402aca8:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
2402acb8:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
2402acc8:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
2402acd8:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
2402ace8:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
2402acf8:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
2402ad08:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
2402ad18:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
2402ad28:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
2402ad38:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
2402ad48:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
2402ad58:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
2402ad68:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
2402ad78:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
2402ad88:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
2402ad98:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
2402ada8:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
2402adb8:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
2402adc8:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
2402add8:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
2402ade8:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
2402adf8:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
2402ae08:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
2402ae18:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
2402ae28:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
2402ae38:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
2402ae48:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
2402ae58:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
2402ae68:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
2402ae78:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
2402ae88:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
2402ae98:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
2402aea8:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
2402aeb8:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
2402aec8:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
2402aed8:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
2402aee8:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
2402aef8:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
2402af08:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
2402af18:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
2402af28:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
2402af38:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
2402af48:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
2402af58:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
2402af68:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
2402af78:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
2402af88:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
2402af98:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
2402afa8:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
2402afb8:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
2402afc8:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
2402afd8:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
2402afe8:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
2402aff8:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
2402b008:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
2402b018:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
2402b028:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
2402b038:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
2402b048:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
2402b058:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
2402b068:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
2402b078:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
2402b088:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
2402b098:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
2402b0a8:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
2402b0b8:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
2402b0c8:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
2402b0d8:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
2402b0e8:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
2402b0f8:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
2402b108:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
2402b118:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
2402b128:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
2402b138:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
2402b148:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
2402b158:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
2402b168:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
2402b178:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
2402b188:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
2402b198:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
2402b1a8:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
2402b1b8:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
2402b1c8:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
2402b1d8:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
2402b1e8:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
2402b1f8:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
2402b208:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
2402b218:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
2402b228:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
2402b238:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
2402b248:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
2402b258:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
2402b268:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
2402b278:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
2402b288:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
2402b298:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
2402b2a8:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
2402b2b8:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
2402b2c8:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
2402b2d8:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
2402b2e8:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
2402b2f8:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
2402b308:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
2402b318:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
2402b328:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
2402b338:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
2402b348:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
2402b358:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
2402b368:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
2402b378:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
2402b388:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
2402b398:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
2402b3a8:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
2402b3b8:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
2402b3c8:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
2402b3d8:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
2402b3e8:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
2402b3f8:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
2402b408:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
2402b418:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
2402b428:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
2402b438:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
2402b448:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
2402b458:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
2402b468:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
2402b478:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
2402b488:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
2402b498:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
2402b4a8:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
2402b4b8:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
2402b4c8:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
2402b4d8:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
2402b4e8:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
2402b4f8:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
2402b508:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
2402b518:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
2402b528:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
2402b538:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
2402b548:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
2402b558:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
2402b568:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
2402b578:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
2402b588:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
2402b598:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
2402b5a8:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
2402b5b8:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
2402b5c8:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
2402b5d8:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
2402b5e8:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
2402b5f8:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
2402b608:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
2402b618:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
2402b628:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
2402b638:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
2402b648:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
2402b658:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
2402b668:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
2402b678:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
2402b688:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
2402b698:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
2402b6a8:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
2402b6b8:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
2402b6c8:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
2402b6d8:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
2402b6e8:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
2402b6f8:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
2402b708:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
2402b718:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
2402b728:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
2402b738:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
2402b748:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
2402b758:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
2402b768:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
2402b778:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
2402b788:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
2402b798:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
2402b7a8:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
2402b7b8:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
2402b7c8:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
2402b7d8:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
2402b7e8:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
2402b7f8:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
2402b808:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
2402b818:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
2402b828:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
2402b838:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
2402b848:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
2402b858:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
2402b868:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
2402b878:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
2402b888:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
2402b898:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
2402b8a8:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
2402b8b8:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
2402b8c8:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
2402b8d8:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
2402b8e8:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
2402b8f8:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
2402b908:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
2402b918:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
2402b928:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
2402b938:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
2402b948:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
2402b958:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
2402b968:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
2402b978:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
2402b988:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
2402b998:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
2402b9a8:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
2402b9b8:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
2402b9c8:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
2402b9d8:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
2402b9e8:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
2402b9f8:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
2402ba08:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
2402ba18:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
2402ba28:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
2402ba38:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
2402ba48:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
2402ba58:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
2402ba68:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
2402ba78:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
2402ba88:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
2402ba98:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
2402baa8:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
2402bab8:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
2402bac8:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
2402bad8:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
2402bae8:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
2402baf8:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
2402bb08:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
2402bb18:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
2402bb28:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
2402bb38:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
2402bb48:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
2402bb58:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
2402bb68:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
2402bb78:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
2402bb88:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
2402bb98:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
2402bba8:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
2402bbb8:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
2402bbc8:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
2402bbd8:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
2402bbe8:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
2402bbf8:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
2402bc08:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
2402bc18:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
2402bc28:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
2402bc38:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
2402bc48:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
2402bc58:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
2402bc68:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
2402bc78:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
2402bc88:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
2402bc98:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
2402bca8:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
2402bcb8:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
2402bcc8:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
2402bcd8:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
2402bce8:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
2402bcf8:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
2402bd08:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
2402bd18:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
2402bd28:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
2402bd38:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
2402bd48:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
2402bd58:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
2402bd68:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
2402bd78:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
2402bd88:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
2402bd98:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
2402bda8:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
2402bdb8:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
2402bdc8:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
2402bdd8:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
2402bde8:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
2402bdf8:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
2402be08:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
2402be18:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
2402be28:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
2402be38:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
2402be48:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
2402be58:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
2402be68:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
2402be78:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
2402be88:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
2402be98:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
2402bea8:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
2402beb8:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
2402bec8:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
2402bed8:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
2402bee8:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
2402bef8:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
2402bf08:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
2402bf18:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
2402bf28:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
2402bf38:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
2402bf48:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
2402bf58:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
2402bf68:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
2402bf78:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
2402bf88:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
2402bf98:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
2402bfa8:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
2402bfb8:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
2402bfc8:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
2402bfd8:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
2402bfe8:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
2402bff8:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
2402c008:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
2402c018:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
2402c028:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
2402c038:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
2402c048:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
2402c058:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
2402c068:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
2402c078:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
2402c088:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
2402c098:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
2402c0a8:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
2402c0b8:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
2402c0c8:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
2402c0d8:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
2402c0e8:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
2402c0f8:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
2402c108:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
2402c118:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
2402c128:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
2402c138:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
2402c148:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
2402c158:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
2402c168:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
2402c178:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
2402c188:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
2402c198:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
2402c1a8:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
2402c1b8:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
2402c1c8:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
2402c1d8:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
2402c1e8:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
2402c1f8:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
2402c208:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
2402c218:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
2402c228:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
2402c238:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
2402c248:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
2402c258:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
2402c268:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
2402c278:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
2402c288:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
2402c298:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
2402c2a8:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
2402c2b8:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
2402c2c8:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
2402c2d8:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
2402c2e8:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
2402c2f8:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
2402c308:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
2402c318:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
2402c328:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
2402c338:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
2402c348:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
2402c358:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
2402c368:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
2402c378:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
2402c388:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
2402c398:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
2402c3a8:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
2402c3b8:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
2402c3c8:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
2402c3d8:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
2402c3e8:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
2402c3f8:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
2402c408:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
2402c418:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
2402c428:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
2402c438:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
2402c448:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
2402c458:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
2402c468:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
2402c478:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
2402c488:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
2402c498:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
2402c4a8:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
2402c4b8:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
2402c4c8:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
2402c4d8:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
2402c4e8:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
2402c4f8:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
2402c508:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
2402c518:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
2402c528:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
2402c538:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
2402c548:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
2402c558:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
2402c568:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
2402c578:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
2402c588:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
2402c598:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
2402c5a8:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
2402c5b8:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
2402c5c8:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
2402c5d8:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
2402c5e8:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
2402c5f8:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
2402c608:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
2402c618:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
2402c628:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
2402c638:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
2402c648:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
2402c658:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
2402c668:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
2402c678:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
2402c688:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
2402c698:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
2402c6a8:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
2402c6b8:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
2402c6c8:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
2402c6d8:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
2402c6e8:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
2402c6f8:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
2402c708:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
2402c718:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
2402c728:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
2402c738:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
2402c748:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
2402c758:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
2402c768:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
2402c778:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
2402c788:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
2402c798:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
2402c7a8:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
2402c7b8:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
2402c7c8:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
2402c7d8:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
2402c7e8:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
2402c7f8:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
2402c808:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
2402c818:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
2402c828:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
2402c838:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
2402c848:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
2402c858:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
2402c868:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
2402c878:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
2402c888:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
2402c898:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
2402c8a8:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
2402c8b8:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
2402c8c8:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
2402c8d8:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
2402c8e8:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
2402c8f8:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
2402c908:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
2402c918:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
2402c928:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
2402c938:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
2402c948:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
2402c958:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
2402c968:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
2402c978:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
2402c988:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
2402c998:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
2402c9a8:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
2402c9b8:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
2402c9c8:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
2402c9d8:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
2402c9e8:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
2402c9f8:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
2402ca08:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
2402ca18:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
2402ca28:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
2402ca38:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
2402ca48:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
2402ca58:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
2402ca68:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
2402ca78:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
2402ca88:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
2402ca98:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
2402caa8:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
2402cab8:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
2402cac8:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
2402cad8:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
2402cae8:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
2402caf8:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
2402cb08:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
2402cb18:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
2402cb28:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
2402cb38:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
2402cb48:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
2402cb58:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
2402cb68:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
2402cb78:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
2402cb88:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
2402cb98:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
2402cba8:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
2402cbb8:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
2402cbc8:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
2402cbd8:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
2402cbe8:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
2402cbf8:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
2402cc08:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
2402cc18:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
2402cc28:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
2402cc38:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
2402cc48:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
2402cc58:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
2402cc68:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
2402cc78:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
2402cc88:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
2402cc98:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
2402cca8:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
2402ccb8:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
2402ccc8:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
2402ccd8:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
2402cce8:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
2402ccf8:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
2402cd08:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
2402cd18:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
2402cd28:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
2402cd38:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
2402cd48:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
2402cd58:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
2402cd68:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
2402cd78:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
2402cd88:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
2402cd98:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
2402cda8:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
2402cdb8:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
2402cdc8:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
2402cdd8:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
2402cde8:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
2402cdf8:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
2402ce08:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
2402ce18:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
2402ce28:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
2402ce38:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
2402ce48:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
2402ce58:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
2402ce68:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
2402ce78:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
2402ce88:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
2402ce98:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
2402cea8:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
2402ceb8:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
2402cec8:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
2402ced8:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
2402cee8:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
2402cef8:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
2402cf08:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
2402cf18:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
2402cf28:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
2402cf38:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
2402cf48:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
2402cf58:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
2402cf68:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
2402cf78:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
2402cf88:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
2402cf98:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
2402cfa8:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
2402cfb8:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
2402cfc8:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
2402cfd8:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
2402cfe8:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
2402cff8:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
2402d008:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
2402d018:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
2402d028:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
2402d038:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
2402d048:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
2402d058:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
2402d068:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
2402d078:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
2402d088:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
2402d098:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
2402d0a8:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
2402d0b8:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
2402d0c8:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
2402d0d8:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
2402d0e8:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
2402d0f8:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
2402d108:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
2402d118:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
2402d128:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
2402d138:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
2402d148:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
2402d158:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
2402d168:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
2402d178:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
2402d188:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
2402d198:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
2402d1a8:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
2402d1b8:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
2402d1c8:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
2402d1d8:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
2402d1e8:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
2402d1f8:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
2402d208:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
2402d218:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
2402d228:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
2402d238:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
2402d248:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
2402d258:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
2402d268:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
2402d278:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
2402d288:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
2402d298:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
2402d2a8:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
2402d2b8:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
2402d2c8:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
2402d2d8:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
2402d2e8:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
2402d2f8:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
2402d308:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
2402d318:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
2402d328:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
2402d338:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
2402d348:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
2402d358:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
2402d368:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
2402d378:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
2402d388:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
2402d398:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
2402d3a8:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
2402d3b8:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
2402d3c8:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
2402d3d8:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
2402d3e8:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
2402d3f8:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
2402d408:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
2402d418:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
2402d428:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
2402d438:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
2402d448:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
2402d458:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
2402d468:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
2402d478:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
2402d488:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
2402d498:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
2402d4a8:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
2402d4b8:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
2402d4c8:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
2402d4d8:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
2402d4e8:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
2402d4f8:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
2402d508:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
2402d518:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
2402d528:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
2402d538:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
2402d548:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
2402d558:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
2402d568:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
2402d578:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
2402d588:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
2402d598:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
2402d5a8:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
2402d5b8:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
2402d5c8:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
2402d5d8:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
2402d5e8:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
2402d5f8:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
2402d608:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
2402d618:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
2402d628:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
2402d638:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
2402d648:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
2402d658:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
2402d668:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
2402d678:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
2402d688:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
2402d698:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
2402d6a8:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
2402d6b8:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
2402d6c8:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
2402d6d8:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
2402d6e8:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
2402d6f8:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
2402d708:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
2402d718:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
2402d728:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
2402d738:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
2402d748:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
2402d758:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
2402d768:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
2402d778:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
2402d788:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
2402d798:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
2402d7a8:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
2402d7b8:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
2402d7c8:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
2402d7d8:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
2402d7e8:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
2402d7f8:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
2402d808:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
2402d818:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
2402d828:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
2402d838:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
2402d848:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
2402d858:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
2402d868:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
2402d878:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
2402d888:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
2402d898:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
2402d8a8:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
2402d8b8:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
2402d8c8:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
2402d8d8:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
2402d8e8:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
2402d8f8:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
2402d908:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
2402d918:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
2402d928:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
2402d938:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
2402d948:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
2402d958:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
2402d968:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
2402d978:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
2402d988:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
2402d998:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
2402d9a8:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
2402d9b8:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
2402d9c8:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
2402d9d8:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
2402d9e8:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
2402d9f8:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
2402da08:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
2402da18:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
2402da28:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
2402da38:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
2402da48:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
2402da58:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
2402da68:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
2402da78:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
2402da88:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
2402da98:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
2402daa8:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
2402dab8:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
2402dac8:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
2402dad8:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
2402dae8:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
2402daf8:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
2402db08:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
2402db18:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
2402db28:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
2402db38:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
2402db48:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
2402db58:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
2402db68:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
2402db78:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
2402db88:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
2402db98:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
2402dba8:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
2402dbb8:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
2402dbc8:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
2402dbd8:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
2402dbe8:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
2402dbf8:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
2402dc08:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
2402dc18:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
2402dc28:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
2402dc38:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
2402dc48:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
2402dc58:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
2402dc68:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
2402dc78:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
2402dc88:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
2402dc98:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
2402dca8:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
2402dcb8:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
2402dcc8:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
2402dcd8:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
2402dce8:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
2402dcf8:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
2402dd08:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
2402dd18:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
2402dd28:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
2402dd38:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
2402dd48:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
2402dd58:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
2402dd68:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
2402dd78:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
2402dd88:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
2402dd98:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
2402dda8:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
2402ddb8:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
2402ddc8:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
2402ddd8:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
2402dde8:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
2402ddf8:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
2402de08:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
2402de18:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
2402de28:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
2402de38:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
2402de48:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
2402de58:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
2402de68:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
2402de78:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
2402de88:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
2402de98:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
2402dea8:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
2402deb8:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
2402dec8:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
2402ded8:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
2402dee8:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
2402def8:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
2402df08:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
2402df18:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
2402df28:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
2402df38:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
2402df48:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
2402df58:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
2402df68:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
2402df78:	b89cc6ac bafe109a b89407ce bb03a88e     ................
2402df88:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
2402df98:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
2402dfa8:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
2402dfb8:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
2402dfc8:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
2402dfd8:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
2402dfe8:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
2402dff8:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
2402e008:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
2402e018:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
2402e028:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
2402e038:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
2402e048:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
2402e058:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
2402e068:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
2402e078:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
2402e088:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
2402e098:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
2402e0a8:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
2402e0b8:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
2402e0c8:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
2402e0d8:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
2402e0e8:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
2402e0f8:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
2402e108:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
2402e118:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
2402e128:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
2402e138:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
2402e148:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
2402e158:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
2402e168:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
2402e178:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
2402e188:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
2402e198:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
2402e1a8:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
2402e1b8:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
2402e1c8:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
2402e1d8:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
2402e1e8:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
2402e1f8:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
2402e208:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
2402e218:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
2402e228:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
2402e238:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
2402e248:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
2402e258:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
2402e268:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
2402e278:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
2402e288:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
2402e298:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
2402e2a8:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
2402e2b8:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
2402e2c8:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
2402e2d8:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
2402e2e8:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
2402e2f8:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
2402e308:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
2402e318:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
2402e328:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
2402e338:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
2402e348:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
2402e358:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
2402e368:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
2402e378:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
2402e388:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
2402e398:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
2402e3a8:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
2402e3b8:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
2402e3c8:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
2402e3d8:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
2402e3e8:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
2402e3f8:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
2402e408:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
2402e418:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
2402e428:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
2402e438:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
2402e448:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
2402e458:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
2402e468:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
2402e478:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
2402e488:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
2402e498:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
2402e4a8:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
2402e4b8:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
2402e4c8:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
2402e4d8:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
2402e4e8:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
2402e4f8:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
2402e508:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
2402e518:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
2402e528:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
2402e538:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
2402e548:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
2402e558:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
2402e568:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
2402e578:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
2402e588:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
2402e598:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
2402e5a8:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
2402e5b8:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
2402e5c8:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
2402e5d8:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
2402e5e8:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
2402e5f8:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
2402e608:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
2402e618:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
2402e628:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
2402e638:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
2402e648:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
2402e658:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
2402e668:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
2402e678:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
2402e688:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
2402e698:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
2402e6a8:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
2402e6b8:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
2402e6c8:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
2402e6d8:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
2402e6e8:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
2402e6f8:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
2402e708:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
2402e718:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
2402e728:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
2402e738:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
2402e748:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
2402e758:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
2402e768:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
2402e778:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
2402e788:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
2402e798:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
2402e7a8:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
2402e7b8:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
2402e7c8:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
2402e7d8:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
2402e7e8:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
2402e7f8:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
2402e808:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
2402e818:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
2402e828:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
2402e838:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
2402e848:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
2402e858:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
2402e868:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
2402e878:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
2402e888:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
2402e898:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
2402e8a8:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
2402e8b8:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
2402e8c8:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
2402e8d8:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
2402e8e8:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
2402e8f8:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
2402e908:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
2402e918:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
2402e928:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
2402e938:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
2402e948:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
2402e958:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
2402e968:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
2402e978:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
2402e988:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
2402e998:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
2402e9a8:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
2402e9b8:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
2402e9c8:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
2402e9d8:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
2402e9e8:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
2402e9f8:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
2402ea08:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
2402ea18:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
2402ea28:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
2402ea38:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
2402ea48:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
2402ea58:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
2402ea68:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
2402ea78:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
2402ea88:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
2402ea98:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
2402eaa8:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
2402eab8:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
2402eac8:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
2402ead8:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
2402eae8:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
2402eaf8:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
2402eb08:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
2402eb18:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
2402eb28:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
2402eb38:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
2402eb48:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
2402eb58:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
2402eb68:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
2402eb78:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
2402eb88:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
2402eb98:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
2402eba8:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
2402ebb8:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
2402ebc8:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
2402ebd8:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
2402ebe8:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
2402ebf8:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
2402ec08:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
2402ec18:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
2402ec28:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
2402ec38:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
2402ec48:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
2402ec58:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
2402ec68:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
2402ec78:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
2402ec88:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
2402ec98:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
2402eca8:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
2402ecb8:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
2402ecc8:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
2402ecd8:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
2402ece8:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
2402ecf8:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
2402ed08:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
2402ed18:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
2402ed28:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
2402ed38:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
2402ed48:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
2402ed58:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
2402ed68:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
2402ed78:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
2402ed88:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
2402ed98:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
2402eda8:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
2402edb8:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
2402edc8:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
2402edd8:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
2402ede8:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
2402edf8:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
2402ee08:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
2402ee18:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
2402ee28:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
2402ee38:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
2402ee48:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
2402ee58:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
2402ee68:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
2402ee78:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
2402ee88:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
2402ee98:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
2402eea8:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
2402eeb8:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
2402eec8:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
2402eed8:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
2402eee8:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
2402eef8:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
2402ef08:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
2402ef18:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
2402ef28:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
2402ef38:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
2402ef48:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
2402ef58:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
2402ef68:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
2402ef78:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
2402ef88:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
2402ef98:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
2402efa8:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
2402efb8:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
2402efc8:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
2402efd8:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
2402efe8:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
2402eff8:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
2402f008:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
2402f018:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
2402f028:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
2402f038:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
2402f048:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
2402f058:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
2402f068:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
2402f078:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
2402f088:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
2402f098:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
2402f0a8:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
2402f0b8:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
2402f0c8:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
2402f0d8:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
2402f0e8:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
2402f0f8:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
2402f108:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
2402f118:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
2402f128:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
2402f138:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
2402f148:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
2402f158:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
2402f168:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
2402f178:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
2402f188:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
2402f198:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
2402f1a8:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
2402f1b8:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
2402f1c8:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
2402f1d8:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
2402f1e8:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
2402f1f8:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
2402f208:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
2402f218:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
2402f228:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
2402f238:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
2402f248:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
2402f258:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
2402f268:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
2402f278:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
2402f288:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
2402f298:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
2402f2a8:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
2402f2b8:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
2402f2c8:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
2402f2d8:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
2402f2e8:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
2402f2f8:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
2402f308:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
2402f318:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
2402f328:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
2402f338:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
2402f348:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
2402f358:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
2402f368:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
2402f378:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
2402f388:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
2402f398:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
2402f3a8:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
2402f3b8:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
2402f3c8:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
2402f3d8:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
2402f3e8:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
2402f3f8:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
2402f408:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
2402f418:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
2402f428:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
2402f438:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
2402f448:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
2402f458:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
2402f468:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
2402f478:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
2402f488:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
2402f498:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
2402f4a8:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
2402f4b8:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
2402f4c8:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
2402f4d8:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
2402f4e8:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
2402f4f8:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
2402f508:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
2402f518:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
2402f528:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
2402f538:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
2402f548:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
2402f558:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
2402f568:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
2402f578:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
2402f588:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
2402f598:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
2402f5a8:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
2402f5b8:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
2402f5c8:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
2402f5d8:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
2402f5e8:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
2402f5f8:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
2402f608:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
2402f618:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
2402f628:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
2402f638:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
2402f648:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
2402f658:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
2402f668:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
2402f678:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
2402f688:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
2402f698:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
2402f6a8:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
2402f6b8:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
2402f6c8:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
2402f6d8:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
2402f6e8:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
2402f6f8:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
2402f708:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
2402f718:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
2402f728:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
2402f738:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
2402f748:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
2402f758:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
2402f768:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
2402f778:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
2402f788:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
2402f798:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
2402f7a8:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
2402f7b8:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
2402f7c8:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
2402f7d8:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
2402f7e8:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
2402f7f8:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
2402f808:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
2402f818:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
2402f828:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
2402f838:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
2402f848:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
2402f858:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
2402f868:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
2402f878:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
2402f888:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
2402f898:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
2402f8a8:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
2402f8b8:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
2402f8c8:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
2402f8d8:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
2402f8e8:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
2402f8f8:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
2402f908:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
2402f918:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
2402f928:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
2402f938:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
2402f948:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
2402f958:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
2402f968:	b7168bbf b8839904 b7135056 b896030f     ........VP......
2402f978:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
2402f988:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
2402f998:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
2402f9a8:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
2402f9b8:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
2402f9c8:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
2402f9d8:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
2402f9e8:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
2402f9f8:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
2402fa08:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
2402fa18:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
2402fa28:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
2402fa38:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
2402fa48:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
2402fa58:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
2402fa68:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
2402fa78:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
2402fa88:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
2402fa98:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
2402faa8:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
2402fab8:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
2402fac8:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
2402fad8:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
2402fae8:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
2402faf8:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
2402fb08:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
2402fb18:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
2402fb28:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
2402fb38:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
2402fb48:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
2402fb58:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
2402fb68:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
2402fb78:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
2402fb88:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
2402fb98:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
2402fba8:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
2402fbb8:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
2402fbc8:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
2402fbd8:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
2402fbe8:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
2402fbf8:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
2402fc08:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
2402fc18:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
2402fc28:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
2402fc38:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
2402fc48:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
2402fc58:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
2402fc68:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
2402fc78:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
2402fc88:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
2402fc98:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
2402fca8:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
2402fcb8:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
2402fcc8:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
2402fcd8:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
2402fce8:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
2402fcf8:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
2402fd08:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
2402fd18:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
2402fd28:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
2402fd38:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
2402fd48:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
2402fd58:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
2402fd68:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
2402fd78:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
2402fd88:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
2402fd98:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
2402fda8:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
2402fdb8:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
2402fdc8:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
2402fdd8:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
2402fde8:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
2402fdf8:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
2402fe08:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
2402fe18:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
2402fe28:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
2402fe38:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
2402fe48:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
2402fe58:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
2402fe68:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
2402fe78:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
2402fe88:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
2402fe98:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
2402fea8:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
2402feb8:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
2402fec8:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
2402fed8:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
2402fee8:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
2402fef8:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
2402ff08:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
2402ff18:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
2402ff28:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
2402ff38:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
2402ff48:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
2402ff58:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
2402ff68:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
2402ff78:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
2402ff88:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
2402ff98:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
2402ffa8:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
2402ffb8:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
2402ffc8:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
2402ffd8:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
2402ffe8:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
2402fff8:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
24030008:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
24030018:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
24030028:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
24030038:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
24030048:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
24030058:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
24030068:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
24030078:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
24030088:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
24030098:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
240300a8:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
240300b8:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
240300c8:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
240300d8:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
240300e8:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
240300f8:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
24030108:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
24030118:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
24030128:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
24030138:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
24030148:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
24030158:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
24030168:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
24030178:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
24030188:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
24030198:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
240301a8:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
240301b8:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
240301c8:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
240301d8:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
240301e8:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
240301f8:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
24030208:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
24030218:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
24030228:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
24030238:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
24030248:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
24030258:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
24030268:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
24030278:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
24030288:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
24030298:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
240302a8:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
240302b8:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
240302c8:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
240302d8:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
240302e8:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
240302f8:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
24030308:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
24030318:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
24030328:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
24030338:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
24030348:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
24030358:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
24030368:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
24030378:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
24030388:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
24030398:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
240303a8:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
240303b8:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
240303c8:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
240303d8:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
240303e8:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
240303f8:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
24030408:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
24030418:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
24030428:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
24030438:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24030448:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
24030458:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
24030468:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
24030478:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
24030488:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
24030498:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
240304a8:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
240304b8:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
240304c8:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
240304d8:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
240304e8:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
240304f8:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
24030508:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
24030518:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
24030528:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
24030538:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
24030548:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
24030558:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
24030568:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
24030578:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
24030588:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
24030598:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
240305a8:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
240305b8:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
240305c8:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
240305d8:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
240305e8:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
240305f8:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
24030608:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
24030618:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
24030628:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
24030638:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
24030648:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
24030658:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
24030668:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
24030678:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
24030688:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
24030698:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
240306a8:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
240306b8:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
240306c8:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
240306d8:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
240306e8:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
240306f8:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
24030708:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
24030718:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
24030728:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
24030738:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
24030748:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
24030758:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
24030768:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
24030778:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
24030788:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
24030798:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
240307a8:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
240307b8:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
240307c8:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
240307d8:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
240307e8:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
240307f8:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
24030808:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
24030818:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
24030828:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
24030838:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
24030848:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
24030858:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
24030868:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
24030878:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
24030888:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
24030898:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
240308a8:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
240308b8:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
240308c8:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
240308d8:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
240308e8:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
240308f8:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
24030908:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
24030918:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
24030928:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
24030938:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
24030948:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
24030958:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
24030968:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
24030978:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
24030988:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
24030998:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
240309a8:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
240309b8:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
240309c8:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
240309d8:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
240309e8:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
240309f8:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
24030a08:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
24030a18:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
24030a28:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
24030a38:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
24030a48:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
24030a58:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
24030a68:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
24030a78:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
24030a88:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
24030a98:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
24030aa8:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
24030ab8:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
24030ac8:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
24030ad8:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
24030ae8:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
24030af8:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
24030b08:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
24030b18:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
24030b28:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
24030b38:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
24030b48:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
24030b58:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
24030b68:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
24030b78:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
24030b88:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
24030b98:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
24030ba8:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
24030bb8:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
24030bc8:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
24030bd8:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
24030be8:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
24030bf8:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
24030c08:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
24030c18:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
24030c28:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
24030c38:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
24030c48:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
24030c58:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
24030c68:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
24030c78:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
24030c88:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
24030c98:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
24030ca8:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
24030cb8:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
24030cc8:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
24030cd8:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
24030ce8:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
24030cf8:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
24030d08:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
24030d18:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
24030d28:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
24030d38:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
24030d48:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
24030d58:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
24030d68:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
24030d78:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
24030d88:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
24030d98:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
24030da8:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
24030db8:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
24030dc8:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
24030dd8:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
24030de8:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
24030df8:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
24030e08:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
24030e18:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
24030e28:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
24030e38:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
24030e48:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
24030e58:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
24030e68:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
24030e78:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
24030e88:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
24030e98:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
24030ea8:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
24030eb8:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
24030ec8:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
24030ed8:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
24030ee8:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
24030ef8:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
24030f08:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
24030f18:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
24030f28:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
24030f38:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
24030f48:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
24030f58:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
24030f68:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
24030f78:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
24030f88:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
24030f98:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
24030fa8:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
24030fb8:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
24030fc8:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
24030fd8:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
24030fe8:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
24030ff8:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
24031008:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
24031018:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
24031028:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
24031038:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
24031048:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
24031058:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
24031068:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
24031078:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
24031088:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
24031098:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
240310a8:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
240310b8:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
240310c8:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
240310d8:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
240310e8:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
240310f8:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
24031108:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
24031118:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
24031128:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
24031138:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
24031148:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
24031158:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
24031168:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
24031178:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
24031188:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
24031198:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
240311a8:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
240311b8:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
240311c8:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
240311d8:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
240311e8:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
240311f8:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
24031208:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
24031218:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
24031228:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
24031238:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
24031248:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
24031258:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
24031268:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
24031278:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
24031288:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
24031298:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
240312a8:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
240312b8:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
240312c8:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
240312d8:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
240312e8:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
240312f8:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
24031308:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
24031318:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
24031328:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
24031338:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
24031348:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
24031358:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
24031368:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
24031378:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
24031388:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
24031398:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
240313a8:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
240313b8:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
240313c8:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
240313d8:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
240313e8:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
240313f8:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
24031408:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
24031418:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
24031428:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
24031438:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
24031448:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
24031458:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
24031468:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
24031478:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
24031488:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
24031498:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
240314a8:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
240314b8:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
240314c8:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
240314d8:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
240314e8:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
240314f8:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
24031508:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
24031518:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
24031528:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
24031538:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
24031548:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
24031558:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
24031568:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
24031578:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
24031588:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
24031598:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
240315a8:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
240315b8:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
240315c8:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
240315d8:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
240315e8:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
240315f8:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
24031608:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
24031618:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
24031628:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
24031638:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
24031648:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
24031658:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
24031668:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
24031678:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
24031688:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
24031698:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
240316a8:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
240316b8:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
240316c8:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
240316d8:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
240316e8:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
240316f8:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
24031708:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
24031718:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
24031728:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
24031738:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
24031748:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
24031758:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
24031768:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
24031778:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
24031788:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
24031798:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
240317a8:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
240317b8:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
240317c8:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
240317d8:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
240317e8:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
240317f8:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
24031808:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
24031818:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
24031828:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
24031838:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
24031848:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
24031858:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
24031868:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
24031878:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
24031888:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
24031898:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
240318a8:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
240318b8:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
240318c8:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
240318d8:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
240318e8:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
240318f8:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
24031908:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
24031918:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
24031928:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
24031938:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
24031948:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
24031958:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
24031968:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
24031978:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
24031988:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
24031998:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
240319a8:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
240319b8:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
240319c8:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
240319d8:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
240319e8:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
240319f8:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
24031a08:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
24031a18:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
24031a28:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
24031a38:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
24031a48:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
24031a58:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
24031a68:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
24031a78:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
24031a88:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
24031a98:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
24031aa8:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
24031ab8:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
24031ac8:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
24031ad8:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
24031ae8:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
24031af8:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
24031b08:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
24031b18:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
24031b28:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
24031b38:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
24031b48:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
24031b58:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
24031b68:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
24031b78:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
24031b88:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
24031b98:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
24031ba8:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
24031bb8:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
24031bc8:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
24031bd8:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
24031be8:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
24031bf8:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
24031c08:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
24031c18:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
24031c28:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
24031c38:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
24031c48:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
24031c58:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
24031c68:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
24031c78:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
24031c88:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
24031c98:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
24031ca8:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
24031cb8:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
24031cc8:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
24031cd8:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
24031ce8:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
24031cf8:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
24031d08:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
24031d18:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
24031d28:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
24031d38:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
24031d48:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
24031d58:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
24031d68:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
24031d78:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
24031d88:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
24031d98:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
24031da8:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
24031db8:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
24031dc8:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
24031dd8:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
24031de8:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
24031df8:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
24031e08:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
24031e18:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
24031e28:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
24031e38:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
24031e48:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
24031e58:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
24031e68:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
24031e78:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
24031e88:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
24031e98:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
24031ea8:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
24031eb8:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
24031ec8:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
24031ed8:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
24031ee8:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
24031ef8:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
24031f08:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
24031f18:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
24031f28:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
24031f38:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
24031f48:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
24031f58:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
24031f68:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
24031f78:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
24031f88:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
24031f98:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
24031fa8:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
24031fb8:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
24031fc8:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
24031fd8:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
24031fe8:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
24031ff8:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
24032008:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
24032018:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
24032028:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
24032038:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
24032048:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
24032058:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
24032068:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
24032078:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
24032088:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
24032098:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
240320a8:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
240320b8:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
240320c8:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
240320d8:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
240320e8:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

2403210c <sinTable_f32>:
2403210c:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2403211c:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2403212c:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2403213c:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2403214c:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2403215c:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2403216c:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2403217c:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2403218c:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2403219c:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
240321ac:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
240321bc:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
240321cc:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
240321dc:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
240321ec:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
240321fc:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2403220c:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2403221c:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2403222c:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2403223c:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2403224c:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2403225c:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2403226c:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2403227c:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2403228c:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2403229c:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
240322ac:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
240322bc:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
240322cc:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
240322dc:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
240322ec:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
240322fc:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2403230c:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2403231c:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2403232c:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2403233c:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2403234c:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2403235c:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2403236c:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2403237c:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2403238c:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2403239c:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
240323ac:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
240323bc:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
240323cc:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
240323dc:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
240323ec:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
240323fc:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2403240c:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2403241c:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2403242c:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2403243c:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2403244c:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2403245c:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2403246c:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2403247c:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2403248c:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2403249c:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
240324ac:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
240324bc:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
240324cc:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
240324dc:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
240324ec:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
240324fc:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2403250c:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2403251c:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2403252c:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2403253c:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2403254c:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2403255c:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2403256c:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2403257c:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2403258c:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2403259c:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
240325ac:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
240325bc:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
240325cc:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
240325dc:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
240325ec:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
240325fc:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2403260c:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2403261c:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2403262c:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2403263c:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2403264c:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2403265c:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2403266c:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2403267c:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2403268c:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2403269c:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
240326ac:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
240326bc:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
240326cc:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
240326dc:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
240326ec:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
240326fc:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2403270c:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2403271c:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2403272c:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2403273c:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2403274c:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2403275c:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2403276c:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2403277c:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2403278c:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2403279c:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
240327ac:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
240327bc:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
240327cc:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
240327dc:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
240327ec:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
240327fc:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2403280c:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2403281c:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2403282c:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2403283c:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2403284c:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2403285c:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2403286c:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2403287c:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2403288c:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2403289c:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
240328ac:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
240328bc:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
240328cc:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
240328dc:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
240328ec:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
240328fc:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2403290c:	80000000 33323130 37363534 62613938     ....0123456789ab
2403291c:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
2403292c:	76757473 7a797877 00000000              stuvwxyz....

24032938 <__exp_data>:
24032938:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
24032948:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
24032958:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
24032968:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
24032978:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
24032988:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
24032998:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
240329b4:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
240329c4:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
240329d4:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
240329e4:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
240329f4:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
24032a04:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
24032a14:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
24032a24:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
24032a34:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
24032a44:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
24032a54:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
24032a64:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
24032a74:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
24032a84:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
24032a94:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
24032aa4:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
24032ab4:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
24032ac4:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
24032ad4:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
24032ae4:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
24032af4:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
24032b04:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
24032b14:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
24032b24:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
24032b34:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
24032b44:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
24032b54:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
24032b64:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
24032b74:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
24032b84:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
24032b94:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
24032ba4:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
24032bb4:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
24032bc4:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
24032bd4:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
24032be4:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
24032bf4:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
24032c04:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
24032c14:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
24032c24:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
24032c34:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
24032c44:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
24032c54:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
24032c64:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
24032c74:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
24032c84:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
24032c94:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
24032ca4:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
24032cb4:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
24032cc4:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
24032cd4:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
24032ce4:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
24032cf4:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
24032d04:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
24032d14:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
24032d24:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
24032d34:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
24032d44:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
24032d54:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
24032d64:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
24032d74:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
24032d84:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
24032d94:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
24032da4:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
24032db4:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
24032dc4:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
24032dd4:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
24032de4:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
24032df4:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
24032e04:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
24032e14:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
24032e24:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
24032e34:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
24032e44:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
24032e54:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
24032e64:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
24032e74:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
24032e84:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
24032e94:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
24032ea4:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
24032eb4:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
24032ec4:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
24032ed4:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
24032ee4:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
24032ef4:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
24032f04:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
24032f14:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
24032f24:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
24032f34:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
24032f44:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
24032f54:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
24032f64:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
24032f74:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
24032f84:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
24032f94:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
24032fa4:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
24032fb4:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
24032fc4:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
24032fd4:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
24032fe4:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
24032ff4:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
24033004:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
24033014:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
24033024:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
24033034:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
24033044:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
24033054:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
24033064:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
24033074:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
24033084:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
24033094:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
240330a4:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
240330b4:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
240330c4:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
240330d4:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
240330e4:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
240330f4:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
24033104:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
24033114:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
24033124:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
24033134:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
24033144:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
24033154:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
24033164:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
24033174:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
24033184:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
24033194:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
240331a4:	3feff3c2                                ...?

240331a8 <__exp2f_data>:
240331a8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
240331b8:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
240331c8:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
240331d8:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
240331e8:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
240331f8:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
24033208:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
24033218:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
24033228:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
24033238:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
24033248:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
24033258:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
24033268:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
24033278:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
24033288:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
24033298:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
240332a8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
240332b8:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
240332c8:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
240332d8:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
240332e8:	ff0c52d6 3f962e42                       .R..B..?

240332f0 <__log2f_data>:
240332f0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24033300:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24033310:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24033320:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24033330:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24033340:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24033350:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24033360:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24033370:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24033380:	00000000 3ff00000 00000000 00000000     .......?........
24033390:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
240333a0:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
240333b0:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
240333c0:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
240333d0:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
240333e0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
240333f0:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
24033400:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

24033410 <__logf_data>:
24033410:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
24033420:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
24033430:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
24033440:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
24033450:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
24033460:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
24033470:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
24033480:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
24033490:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
240334a0:	00000000 3ff00000 00000000 00000000     .......?........
240334b0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
240334c0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
240334d0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
240334e0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
240334f0:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
24033500:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
24033510:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
24033520:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

24033530 <TWO23>:
24033530:	4b000000 cb000000                       ...K....

24033538 <__powf_log2_data>:
24033538:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24033548:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24033558:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24033568:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24033578:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24033588:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24033598:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
240335a8:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
240335b8:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
240335c8:	00000000 3ff00000 00000000 00000000     .......?........
240335d8:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
240335e8:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
240335f8:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24033608:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24033618:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24033628:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24033638:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
24033648:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
24033658:	652ab82b 3ff71547                       +.*eG..?

24033660 <__inv_pio4>:
24033660:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
24033670:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
24033680:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
24033690:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
240336a0:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
240336b0:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

240336c0 <__sincosf_table>:
240336c0:	00000000 3ff00000 00000000 bff00000     .......?........
240336d0:	00000000 bff00000 00000000 3ff00000     ...............?
240336e0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
240336f0:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
24033700:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
24033710:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
24033720:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
24033730:	00000000 3ff00000 00000000 bff00000     .......?........
24033740:	00000000 bff00000 00000000 3ff00000     ...............?
24033750:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24033760:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
24033770:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
24033780:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
24033790:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

240337a0 <npio2_hw>:
240337a0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
240337b0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
240337c0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
240337d0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
240337e0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
240337f0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
24033800:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
24033810:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

24033820 <two_over_pi>:
24033820:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
24033830:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
24033840:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
24033850:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
24033860:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
24033870:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
24033880:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
24033890:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
240338a0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
240338b0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
240338c0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
240338d0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
240338e0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
240338f0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
24033900:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
24033910:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
24033920:	0060e27b 00c08c6b                       {.`.k...

24033928 <npio2_hw>:
24033928:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
24033938:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
24033948:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
24033958:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
24033968:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
24033978:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
24033988:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
24033998:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

240339a8 <two_over_pi>:
240339a8:	000000a2 000000f9 00000083 0000006e     ............n...
240339b8:	0000004e 00000044 00000015 00000029     N...D.......)...
240339c8:	000000fc 00000027 00000057 000000d1     ....'...W.......
240339d8:	000000f5 00000034 000000dd 000000c0     ....4...........
240339e8:	000000db 00000062 00000095 00000099     ....b...........
240339f8:	0000003c 00000043 00000090 00000041     <...C.......A...
24033a08:	000000fe 00000051 00000063 000000ab     ....Q...c.......
24033a18:	000000de 000000bb 000000c5 00000061     ............a...
24033a28:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
24033a38:	00000042 0000004d 000000d2 000000e0     B...M...........
24033a48:	00000006 00000049 0000002e 000000ea     ....I...........
24033a58:	00000009 000000d1 00000092 0000001c     ................
24033a68:	000000fe 0000001d 000000eb 0000001c     ................
24033a78:	000000b1 00000029 000000a7 0000003e     ....).......>...
24033a88:	000000e8 00000082 00000035 000000f5     ........5.......
24033a98:	0000002e 000000bb 00000044 00000084     ........D.......
24033aa8:	000000e9 0000009c 00000070 00000026     ........p...&...
24033ab8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
24033ac8:	00000039 00000091 000000d6 00000039     9...........9...
24033ad8:	00000083 00000053 00000039 000000f4     ....S...9.......
24033ae8:	0000009c 00000084 0000005f 0000008b     ........_.......
24033af8:	000000bd 000000f9 00000028 0000003b     ........(...;...
24033b08:	0000001f 000000f8 00000097 000000ff     ................
24033b18:	000000de 00000005 00000098 0000000f     ................
24033b28:	000000ef 0000002f 00000011 0000008b     ..../...........
24033b38:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
24033b48:	0000006d 00000036 0000007e 000000cf     m...6...~.......
24033b58:	00000027 000000cb 00000009 000000b7     '...............
24033b68:	0000004f 00000046 0000003f 00000066     O...F...?...f...
24033b78:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
24033b88:	00000075 00000027 000000ba 000000c7     u...'...........
24033b98:	000000eb 000000e5 000000f1 0000007b     ............{...
24033ba8:	0000003d 00000007 00000039 000000f7     =.......9.......
24033bb8:	0000008a 00000052 00000092 000000ea     ....R...........
24033bc8:	0000006b 000000fb 0000005f 000000b1     k......._.......
24033bd8:	0000001f 0000008d 0000005d 00000008     ........].......
24033be8:	00000056 00000003 00000030 00000046     V.......0...F...
24033bf8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
24033c08:	000000f0 000000cf 000000bc 00000020     ............ ...
24033c18:	0000009a 000000f4 00000036 0000001d     ........6.......
24033c28:	000000a9 000000e3 00000091 00000061     ............a...
24033c38:	0000005e 000000e6 0000001b 00000008     ^...............
24033c48:	00000065 00000099 00000085 0000005f     e..........._...
24033c58:	00000014 000000a0 00000068 00000040     ........h...@...
24033c68:	0000008d 000000ff 000000d8 00000080     ................
24033c78:	0000004d 00000073 00000027 00000031     M...s...'...1...
24033c88:	00000006 00000006 00000015 00000056     ............V...
24033c98:	000000ca 00000073 000000a8 000000c9     ....s...........
24033ca8:	00000060 000000e2 0000007b 000000c0     `.......{.......
24033cb8:	0000008c 0000006b                       ....k...

24033cc0 <PIo2>:
24033cc0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
24033cd0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
24033ce0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
24033cf0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

24033d00 <init_jk>:
24033d00:	00000002 00000003 00000004 00000006     ................

24033d10 <PIo2>:
24033d10:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
24033d20:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
24033d30:	1fc40000 1bc60000 17440000              ..........D.

24033d3c <init_jk>:
24033d3c:	00000004 00000007 00000009              ............

24033d48 <_init>:
24033d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24033d4a:	bf00      	nop
24033d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
24033d4e:	bc08      	pop	{r3}
24033d50:	469e      	mov	lr, r3
24033d52:	4770      	bx	lr

24033d54 <_fini>:
24033d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24033d56:	bf00      	nop
24033d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
24033d5a:	bc08      	pop	{r3}
24033d5c:	469e      	mov	lr, r3
24033d5e:	4770      	bx	lr

24033d60 <__LEAF_clip_veneer>:
24033d60:	f85f f000 	ldr.w	pc, [pc]	; 24033d64 <__LEAF_clip_veneer+0x4>
24033d64:	00004681 	.word	0x00004681

24033d68 <__tOversampler_upsample_veneer>:
24033d68:	f85f f000 	ldr.w	pc, [pc]	; 24033d6c <__tOversampler_upsample_veneer+0x4>
24033d6c:	00004461 	.word	0x00004461

24033d70 <__filter_tick_veneer>:
24033d70:	f85f f000 	ldr.w	pc, [pc]	; 24033d74 <__filter_tick_veneer+0x4>
24033d74:	00000881 	.word	0x00000881

24033d78 <__parsePreset_veneer>:
24033d78:	f85f f000 	ldr.w	pc, [pc]	; 24033d7c <__parsePreset_veneer+0x4>
24033d7c:	00002b61 	.word	0x00002b61

24033d80 <__HAL_SAI_TxCpltCallback_veneer>:
24033d80:	f85f f000 	ldr.w	pc, [pc]	; 24033d84 <__HAL_SAI_TxCpltCallback_veneer+0x4>
24033d84:	000023a1 	.word	0x000023a1

24033d88 <__oscillator_tick_veneer>:
24033d88:	f85f f000 	ldr.w	pc, [pc]	; 24033d8c <__oscillator_tick_veneer+0x4>
24033d8c:	00000401 	.word	0x00000401

24033d90 <__HAL_SAI_TxHalfCpltCallback_veneer>:
24033d90:	f85f f000 	ldr.w	pc, [pc]	; 24033d94 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
24033d94:	000023c1 	.word	0x000023c1

24033d98 <__noise_tick_veneer>:
24033d98:	f85f f000 	ldr.w	pc, [pc]	; 24033d9c <__noise_tick_veneer+0x4>
24033d9c:	000022c1 	.word	0x000022c1

24033da0 <__tickMappings_veneer>:
24033da0:	f85f f000 	ldr.w	pc, [pc]	; 24033da4 <__tickMappings_veneer+0x4>
24033da4:	00001441 	.word	0x00001441

24033da8 <__handleSPI_veneer>:
24033da8:	f85f f000 	ldr.w	pc, [pc]	; 24033dac <__handleSPI_veneer+0x4>
24033dac:	00002701 	.word	0x00002701

24033db0 <__tOversampler_downsample_veneer>:
24033db0:	f85f f000 	ldr.w	pc, [pc]	; 24033db4 <__tOversampler_downsample_veneer+0x4>
24033db4:	00004501 	.word	0x00004501

Disassembly of section .itcmram:

00000400 <oscillator_tick>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	4958      	ldr	r1, [pc, #352]	; (568 <oscillator_tick+0x168>)
     406:	2500      	movs	r5, #0
     408:	4b58      	ldr	r3, [pc, #352]	; (56c <oscillator_tick+0x16c>)
     40a:	4680      	mov	r8, r0
     40c:	4a58      	ldr	r2, [pc, #352]	; (570 <oscillator_tick+0x170>)
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     40e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 598 <oscillator_tick+0x198>
     412:	eb02 0680 	add.w	r6, r2, r0, lsl #2
     416:	ed2d 8b06 	vpush	{d8-d10}
     41a:	eddf 8a56 	vldr	s17, [pc, #344]	; 574 <oscillator_tick+0x174>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     41e:	b089      	sub	sp, #36	; 0x24
     420:	700d      	strb	r5, [r1, #0]
     422:	7819      	ldrb	r1, [r3, #0]
     424:	f8d9 3004 	ldr.w	r3, [r9, #4]
  __HAL_LOCK(hdma);
     428:	edc6 8a06 	vstr	s17, [r6, #24]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     42c:	9305      	str	r3, [sp, #20]
     42e:	edc6 8a02 	vstr	s17, [r6, #8]
     432:	edc6 8a08 	vstr	s17, [r6, #32]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     436:	edc6 8a04 	vstr	s17, [r6, #16]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     43a:	edc6 8a0a 	vstr	s17, [r6, #40]	; 0x28
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     43e:	edc6 8a00 	vstr	s17, [r6]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     442:	2900      	cmp	r1, #0
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     444:	f000 8085 	beq.w	552 <oscillator_tick+0x152>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     448:	ea4f 0a80 	mov.w	sl, r0, lsl #2
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
     44c:	4a4a      	ldr	r2, [pc, #296]	; (578 <oscillator_tick+0x178>)
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     44e:	4c4b      	ldr	r4, [pc, #300]	; (57c <oscillator_tick+0x17c>)
     450:	eef0 9a40 	vmov.f32	s19, s0
    __HAL_DMA_ENABLE(hdma);
     454:	eb02 030a 	add.w	r3, r2, sl
     458:	4a49      	ldr	r2, [pc, #292]	; (580 <oscillator_tick+0x180>)
}
     45a:	4f4a      	ldr	r7, [pc, #296]	; (584 <oscillator_tick+0x184>)
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     45c:	4454      	add	r4, sl
     45e:	9301      	str	r3, [sp, #4]
     460:	eb02 030a 	add.w	r3, r2, sl
     464:	4457      	add	r7, sl
     466:	4a48      	ldr	r2, [pc, #288]	; (588 <oscillator_tick+0x188>)
     468:	f8cd a010 	str.w	sl, [sp, #16]
     46c:	469a      	mov	sl, r3
     46e:	ed9f aa47 	vldr	s20, [pc, #284]	; 58c <oscillator_tick+0x18c>
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     472:	9200      	str	r2, [sp, #0]
        __HAL_UNLOCK(hdma);
     474:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        hdma->State = HAL_DMA_STATE_READY;
     478:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
        __HAL_UNLOCK(hdma);
     47c:	eeb0 0a69 	vmov.f32	s0, s19
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
     480:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
     484:	edd4 0ac6 	vldr	s1, [r4, #792]	; 0x318
        (void) HAL_DMA_Abort(hdma);
     488:	4638      	mov	r0, r7
        return HAL_ERROR;
     48a:	eef4 6ac7 	vcmpe.f32	s13, s14
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     48e:	ed94 9afe 	vldr	s18, [r4, #1016]	; 0x3f8
     492:	eea7 0a8a 	vfma.f32	s0, s15, s20
     496:	edd4 aabf 	vldr	s21, [r4, #764]	; 0x2fc
     49a:	ed94 8acd 	vldr	s16, [r4, #820]	; 0x334
     49e:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
     4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4a6:	edcd 0a03 	vstr	s1, [sp, #12]
     4aa:	f106 0608 	add.w	r6, r6, #8
     4ae:	bfcc      	ite	gt
     4b0:	2201      	movgt	r2, #1
     4b2:	2200      	movle	r2, #0
     4b4:	9202      	str	r2, [sp, #8]
     4b6:	f005 fab3 	bl	5a20 <__tExpSmooth_setDest_veneer>
     4ba:	4638      	mov	r0, r7
     4bc:	f8d9 b004 	ldr.w	fp, [r9, #4]
     4c0:	f005 fa46 	bl	5950 <__tExpSmooth_tick_veneer>
     4c4:	3708      	adds	r7, #8
     4c6:	f005 fa7f 	bl	59c8 <__mtof_veneer>
     4ca:	9b01      	ldr	r3, [sp, #4]
     4cc:	9904      	ldr	r1, [sp, #16]
     4ce:	a807      	add	r0, sp, #28
     4d0:	461a      	mov	r2, r3
     4d2:	3308      	adds	r3, #8
     4d4:	eddd 0a03 	vldr	s1, [sp, #12]
     4d8:	9301      	str	r3, [sp, #4]
     4da:	4b2d      	ldr	r3, [pc, #180]	; (590 <oscillator_tick+0x190>)
     4dc:	edd2 7a00 	vldr	s15, [r2]
     4e0:	440b      	add	r3, r1
     4e2:	492c      	ldr	r1, [pc, #176]	; (594 <oscillator_tick+0x194>)
     4e4:	9a02      	ldr	r2, [sp, #8]
     4e6:	ed93 7a00 	vldr	s14, [r3]
     4ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
     4ee:	ee20 7a07 	vmul.f32	s14, s0, s14
     4f2:	edcd 8a07 	vstr	s17, [sp, #28]
     4f6:	eba3 030b 	sub.w	r3, r3, fp
     4fa:	eeb0 0a6a 	vmov.f32	s0, s21
     4fe:	600b      	str	r3, [r1, #0]
     500:	4629      	mov	r1, r5
     502:	9b00      	ldr	r3, [sp, #0]
     504:	eea7 0a27 	vfma.f32	s0, s14, s15
     508:	3501      	adds	r5, #1
     50a:	f853 bb04 	ldr.w	fp, [r3], #4
     50e:	9300      	str	r3, [sp, #0]
     510:	4643      	mov	r3, r8
     512:	47d8      	blx	fp
     514:	ed9d 7a07 	vldr	s14, [sp, #28]
     518:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     51c:	4653      	mov	r3, sl
     51e:	ee28 7a07 	vmul.f32	s14, s16, s14
     522:	edd4 6a4f 	vldr	s13, [r4, #316]	; 0x13c
     526:	f10a 0a08 	add.w	sl, sl, #8
     52a:	ee26 6a89 	vmul.f32	s12, s13, s18
     52e:	ed83 7a00 	vstr	s14, [r3]
     532:	ee77 7ac9 	vsub.f32	s15, s15, s18
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     536:	ee67 6a26 	vmul.f32	s13, s14, s13
     53a:	4b0c      	ldr	r3, [pc, #48]	; (56c <oscillator_tick+0x16c>)
     53c:	ee26 6a07 	vmul.f32	s12, s12, s14
     540:	781b      	ldrb	r3, [r3, #0]
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     542:	ee67 7aa6 	vmul.f32	s15, s15, s13
     546:	42ab      	cmp	r3, r5
     548:	ed06 6a02 	vstr	s12, [r6, #-8]
     54c:	edc6 7a04 	vstr	s15, [r6, #16]
     550:	dc90      	bgt.n	474 <oscillator_tick+0x74>
    if(Timeout != HAL_MAX_DELAY)
     552:	4b11      	ldr	r3, [pc, #68]	; (598 <oscillator_tick+0x198>)
     554:	9905      	ldr	r1, [sp, #20]
     556:	685b      	ldr	r3, [r3, #4]
     558:	4a10      	ldr	r2, [pc, #64]	; (59c <oscillator_tick+0x19c>)
     55a:	1a5b      	subs	r3, r3, r1
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     55c:	6013      	str	r3, [r2, #0]
     55e:	b009      	add	sp, #36	; 0x24
     560:	ecbd 8b06 	vpop	{d8-d10}
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     568:	2001ad05 	.word	0x2001ad05
     56c:	20000068 	.word	0x20000068
     570:	200054c8 	.word	0x200054c8
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     574:	00000000 	.word	0x00000000
     578:	20005080 	.word	0x20005080
     57c:	2001b6cc 	.word	0x2001b6cc
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     580:	20017854 	.word	0x20017854
        return HAL_ERROR;
     584:	200055cc 	.word	0x200055cc
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
     588:	20005ab0 	.word	0x20005ab0
        __HAL_UNLOCK(hdma);
     58c:	3c23d70a 	.word	0x3c23d70a
        hdma->State = HAL_DMA_STATE_READY;
     590:	20005140 	.word	0x20005140
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     594:	200179c0 	.word	0x200179c0
     598:	e0001000 	.word	0xe0001000
     59c:	200179d8 	.word	0x200179d8

000005a0 <sawSquareTick>:
     5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5a4:	4605      	mov	r5, r0
     5a6:	4c1a      	ldr	r4, [pc, #104]	; (610 <sawSquareTick+0x70>)
     5a8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
     5ac:	4617      	mov	r7, r2
     5ae:	4688      	mov	r8, r1
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b0:	461e      	mov	r6, r3
     5b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     5b6:	ed2d 8b02 	vpush	{d8}
     5ba:	eeb0 8a60 	vmov.f32	s16, s1
     5be:	b082      	sub	sp, #8
     5c0:	9001      	str	r0, [sp, #4]
     5c2:	f005 f8cd 	bl	5760 <tMBSawPulse_setFreq>
     5c6:	9801      	ldr	r0, [sp, #4]

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5c8:	eeb0 0a48 	vmov.f32	s0, s16
	*ptr++ = (BYTE)val; val >>= 8;
     5cc:	f005 f9f0 	bl	59b0 <__tMBSawPulse_setShape_veneer>
     5d0:	9801      	ldr	r0, [sp, #4]
     5d2:	b977      	cbnz	r7, 5f2 <sawSquareTick+0x52>
     5d4:	f004 f9d4 	bl	4980 <tMBSawPulse_tick>
     5d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5dc:	edd5 7a00 	vldr	s15, [r5]
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e0:	eee0 7a07 	vfma.f32	s15, s0, s14
     5e4:	edc5 7a00 	vstr	s15, [r5]
     5e8:	b002      	add	sp, #8
     5ea:	ecbd 8b02 	vpop	{d8}
		*d++ = (BYTE)val;
     5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5f2:	4a08      	ldr	r2, [pc, #32]	; (614 <sawSquareTick+0x74>)
     5f4:	4b08      	ldr	r3, [pc, #32]	; (618 <sawSquareTick+0x78>)
	*ptr++ = (BYTE)val; val >>= 8;
     5f6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     5fa:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     5fe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     602:	ed96 0a00 	vldr	s0, [r6]
     606:	f005 f8eb 	bl	57e0 <tMBSawPulse_sync>
     60a:	9801      	ldr	r0, [sp, #4]
     60c:	e7e2      	b.n	5d4 <sawSquareTick+0x34>
     60e:	bf00      	nop
	*ptr++ = (BYTE)val; val >>= 8;
     610:	20005a58 	.word	0x20005a58
     614:	2401ae6c 	.word	0x2401ae6c
	*ptr++ = (BYTE)val; val >>= 8;
     618:	20017854 	.word	0x20017854
	*ptr++ = (BYTE)val;
     61c:	f3af 8000 	nop.w

00000620 <sineTriTick>:
}
     620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const BYTE *s = (const BYTE*)src;
     624:	4605      	mov	r5, r0
     626:	4c1a      	ldr	r4, [pc, #104]	; (690 <sineTriTick+0x70>)
     628:	eb03 0041 	add.w	r0, r3, r1, lsl #1
			*d++ = *s++;
     62c:	4617      	mov	r7, r2
		} while (--cnt);
     62e:	4688      	mov	r8, r1
			*d++ = *s++;
     630:	461e      	mov	r6, r3
     632:	eb04 0080 	add.w	r0, r4, r0, lsl #2
		} while (--cnt);
     636:	ed2d 8b02 	vpush	{d8}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     63a:	eeb0 8a60 	vmov.f32	s16, s1
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     63e:	b082      	sub	sp, #8
     640:	9001      	str	r0, [sp, #4]
     642:	f005 f941 	bl	58c8 <__tMBSineTri_setFreq_veneer>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     646:	9801      	ldr	r0, [sp, #4]
     648:	eeb0 0a48 	vmov.f32	s0, s16
     64c:	f005 f928 	bl	58a0 <__tMBSineTri_setShape_veneer>
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     650:	9801      	ldr	r0, [sp, #4]
     652:	b977      	cbnz	r7, 672 <sineTriTick+0x52>
		*d++ = (BYTE)val;
     654:	f005 f978 	bl	5948 <__tMBSineTri_tick_veneer>
     658:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     65c:	edd5 7a00 	vldr	s15, [r5]
     660:	eee0 7a07 	vfma.f32	s15, s0, s14
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     664:	edc5 7a00 	vstr	s15, [r5]
			pte[PTE_System] = sys;				/* System type */
     668:	b002      	add	sp, #8
     66a:	ecbd 8b02 	vpop	{d8}
	*ptr++ = (BYTE)val; val >>= 8;
     66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     672:	4a08      	ldr	r2, [pc, #32]	; (694 <sineTriTick+0x74>)
     674:	4b08      	ldr	r3, [pc, #32]	; (698 <sineTriTick+0x78>)
	*ptr++ = (BYTE)val; val >>= 8;
     676:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     67a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
     67e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     682:	ed96 0a00 	vldr	s0, [r6]
			pte[PTE_EdHead] = 254;				/* End head */
     686:	f005 f997 	bl	59b8 <__tMBSineTri_sync_veneer>
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     68a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
     68c:	e7e2      	b.n	654 <sineTriTick+0x34>
     68e:	bf00      	nop
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     690:	20005b14 	.word	0x20005b14
			pte[PTE_EdHead] = 254;				/* End head */
     694:	2401ae6c 	.word	0x2401ae6c
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     698:	20017854 	.word	0x20017854
	*ptr++ = (BYTE)val; val >>= 8;
     69c:	f3af 8000 	nop.w

000006a0 <sawTick>:
	*ptr++ = (BYTE)val;
     6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*ptr++ = (BYTE)val; val >>= 8;
     6a4:	4c14      	ldr	r4, [pc, #80]	; (6f8 <sawTick+0x58>)
     6a6:	4605      	mov	r5, r0
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6a8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ac:	b082      	sub	sp, #8
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	4617      	mov	r7, r2
     6b0:	4688      	mov	r8, r1
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     6b6:	461e      	mov	r6, r3
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6b8:	9001      	str	r0, [sp, #4]
     6ba:	f005 f8f9 	bl	58b0 <__tMBSaw_setFreq_veneer>
     6be:	9801      	ldr	r0, [sp, #4]
     6c0:	b967      	cbnz	r7, 6dc <sawTick+0x3c>
     6c2:	f005 f985 	bl	59d0 <__tMBSaw_tick_veneer>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     6ca:	edd5 7a00 	vldr	s15, [r5]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6ce:	eee0 7a07 	vfma.f32	s15, s0, s14
     6d2:	edc5 7a00 	vstr	s15, [r5]
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d6:	b002      	add	sp, #8
     6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sys = 0x0C;		/* FAT32X */
     6dc:	4a07      	ldr	r2, [pc, #28]	; (6fc <sawTick+0x5c>)
	const BYTE *s = (const BYTE*)src;
     6de:	4b08      	ldr	r3, [pc, #32]	; (700 <sawTick+0x60>)
     6e0:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     6e4:	eb06 0642 	add.w	r6, r6, r2, lsl #1
			*d++ = *s++;
     6e8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     6ec:	ed96 0a00 	vldr	s0, [r6]
		} while (--cnt);
     6f0:	f005 f91a 	bl	5928 <__tMBSaw_sync_veneer>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f4:	9801      	ldr	r0, [sp, #4]
     6f6:	e7e4      	b.n	6c2 <sawTick+0x22>
     6f8:	20005a40 	.word	0x20005a40
     6fc:	2401ae6c 	.word	0x2401ae6c
     700:	20017854 	.word	0x20017854
     704:	f3af 8000 	nop.w
     708:	f3af 8000 	nop.w
     70c:	f3af 8000 	nop.w
     710:	f3af 8000 	nop.w
     714:	f3af 8000 	nop.w
     718:	f3af 8000 	nop.w
     71c:	f3af 8000 	nop.w

00000720 <pulseTick>:
     720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     724:	4605      	mov	r5, r0
     726:	4c1a      	ldr	r4, [pc, #104]	; (790 <pulseTick+0x70>)
    tMBPulse_setFreq(&pulse[v][string], freq);
     728:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     72c:	4617      	mov	r7, r2
     72e:	4688      	mov	r8, r1
     730:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
     732:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     736:	ed2d 8b02 	vpush	{d8}
     73a:	eeb0 8a60 	vmov.f32	s16, s1
     73e:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
     740:	9001      	str	r0, [sp, #4]
     742:	f005 f955 	bl	59f0 <__tMBPulse_setFreq_veneer>
    tMBPulse_setWidth(&pulse[v][string], shape);
     746:	9801      	ldr	r0, [sp, #4]
     748:	eeb0 0a48 	vmov.f32	s0, s16
     74c:	f005 f92c 	bl	59a8 <__tMBPulse_setWidth_veneer>
    if (sync)
     750:	9801      	ldr	r0, [sp, #4]
     752:	b977      	cbnz	r7, 772 <pulseTick+0x52>
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
     754:	f005 f900 	bl	5958 <__tMBPulse_tick_veneer>
     758:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     75c:	edd5 7a00 	vldr	s15, [r5]
     760:	eee0 7a07 	vfma.f32	s15, s0, s14
     764:	edc5 7a00 	vstr	s15, [r5]
}
     768:	b002      	add	sp, #8
     76a:	ecbd 8b02 	vpop	{d8}
     76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     772:	4a08      	ldr	r2, [pc, #32]	; (794 <pulseTick+0x74>)
     774:	4b08      	ldr	r3, [pc, #32]	; (798 <pulseTick+0x78>)
     776:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     77a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     77e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     782:	ed96 0a00 	vldr	s0, [r6]
     786:	f005 f8a3 	bl	58d0 <__tMBPulse_sync_veneer>
     78a:	9801      	ldr	r0, [sp, #4]
     78c:	e7e2      	b.n	754 <pulseTick+0x34>
     78e:	bf00      	nop
     790:	20005624 	.word	0x20005624
     794:	2401ae6c 	.word	0x2401ae6c
     798:	20017854 	.word	0x20017854
     79c:	f3af 8000 	nop.w

000007a0 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
     7a0:	4a0a      	ldr	r2, [pc, #40]	; (7cc <sineTick+0x2c>)
     7a2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
     7a6:	b510      	push	{r4, lr}
     7a8:	4604      	mov	r4, r0
     7aa:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
     7ac:	eb02 0081 	add.w	r0, r2, r1, lsl #2
     7b0:	9001      	str	r0, [sp, #4]
     7b2:	f005 f8a9 	bl	5908 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
     7b6:	9801      	ldr	r0, [sp, #4]
     7b8:	f005 f852 	bl	5860 <__tCycle_tick_veneer>
     7bc:	edd4 7a00 	vldr	s15, [r4]
     7c0:	ee37 0a80 	vadd.f32	s0, s15, s0
     7c4:	ed84 0a00 	vstr	s0, [r4]
}
     7c8:	b002      	add	sp, #8
     7ca:	bd10      	pop	{r4, pc}
     7cc:	20005afc 	.word	0x20005afc
     7d0:	f3af 8000 	nop.w
     7d4:	f3af 8000 	nop.w
     7d8:	f3af 8000 	nop.w
     7dc:	f3af 8000 	nop.w

000007e0 <triTick>:
{
     7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7e4:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
     7e6:	4c1a      	ldr	r4, [pc, #104]	; (850 <triTick+0x70>)
     7e8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     7ec:	4617      	mov	r7, r2
     7ee:	4688      	mov	r8, r1
     7f0:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
     7f2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     7f6:	ed2d 8b02 	vpush	{d8}
     7fa:	eeb0 8a60 	vmov.f32	s16, s1
     7fe:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
     800:	9001      	str	r0, [sp, #4]
     802:	f005 f905 	bl	5a10 <__tMBTriangle_setFreq_veneer>
    tMBTriangle_setWidth(&tri[v][string], shape);
     806:	9801      	ldr	r0, [sp, #4]
     808:	eeb0 0a48 	vmov.f32	s0, s16
     80c:	f005 f82c 	bl	5868 <__tMBTriangle_setWidth_veneer>
    if (sync)
     810:	9801      	ldr	r0, [sp, #4]
     812:	b977      	cbnz	r7, 832 <triTick+0x52>
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
     814:	f005 f8c4 	bl	59a0 <__tMBTriangle_tick_veneer>
     818:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     81c:	edd5 7a00 	vldr	s15, [r5]
     820:	eee0 7a07 	vfma.f32	s15, s0, s14
     824:	edc5 7a00 	vstr	s15, [r5]
}
     828:	b002      	add	sp, #8
     82a:	ecbd 8b02 	vpop	{d8}
     82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     832:	4a08      	ldr	r2, [pc, #32]	; (854 <triTick+0x74>)
     834:	4b08      	ldr	r3, [pc, #32]	; (858 <triTick+0x78>)
     836:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     83a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     83e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     842:	ed96 0a00 	vldr	s0, [r6]
     846:	f005 f8d7 	bl	59f8 <__tMBTriangle_sync_veneer>
     84a:	9801      	ldr	r0, [sp, #4]
     84c:	e7e2      	b.n	814 <triTick+0x34>
     84e:	bf00      	nop
     850:	20017a18 	.word	0x20017a18
     854:	2401ae6c 	.word	0x2401ae6c
     858:	20017854 	.word	0x20017854
     85c:	f3af 8000 	nop.w

00000860 <userTick>:
}
     860:	4770      	bx	lr
     862:	bf00      	nop
     864:	f3af 8000 	nop.w
     868:	f3af 8000 	nop.w
     86c:	f3af 8000 	nop.w
     870:	f3af 8000 	nop.w
     874:	f3af 8000 	nop.w
     878:	f3af 8000 	nop.w
     87c:	f3af 8000 	nop.w

00000880 <filter_tick>:
	interruptChecker = 0;
     880:	2300      	movs	r3, #0
     882:	4a72      	ldr	r2, [pc, #456]	; (a4c <filter_tick+0x1cc>)
{
     884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int f = 0; f < filterToTick; f++)
     888:	f8df 81ec 	ldr.w	r8, [pc, #492]	; a78 <filter_tick+0x1f8>
{
     88c:	4605      	mov	r5, r0
     88e:	460c      	mov	r4, r1
     890:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
     894:	7013      	strb	r3, [r2, #0]
{
     896:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
     898:	4a6d      	ldr	r2, [pc, #436]	; (a50 <filter_tick+0x1d0>)
     89a:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
     89c:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
     8a0:	f898 3000 	ldrb.w	r3, [r8]
     8a4:	2b00      	cmp	r3, #0
     8a6:	f000 80bc 	beq.w	a22 <filter_tick+0x1a2>
		float enabled = filtParams[FilterEnabled].realVal[string];
     8aa:	4e6a      	ldr	r6, [pc, #424]	; (a54 <filter_tick+0x1d4>)
     8ac:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
     8b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
     8b4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     8b8:	eeb0 8a40 	vmov.f32	s16, s0
     8bc:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
     8c0:	eef4 8ae7 	vcmpe.f32	s17, s15
     8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     8c8:	d87b      	bhi.n	9c2 <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
     8ca:	2b01      	cmp	r3, #1
     8cc:	d93b      	bls.n	946 <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
     8ce:	f204 23c5 	addw	r3, r4, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
     8d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
     8d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     8da:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
     8de:	eeb4 7ae7 	vcmpe.f32	s14, s15
     8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     8e6:	bfcc      	ite	gt
     8e8:	2301      	movgt	r3, #1
     8ea:	2300      	movle	r3, #0
     8ec:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
     8f0:	d929      	bls.n	946 <filter_tick+0xc6>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     8f2:	4b59      	ldr	r3, [pc, #356]	; (a58 <filter_tick+0x1d8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     8f4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
     8f8:	eddf 0a58 	vldr	s1, [pc, #352]	; a5c <filter_tick+0x1dc>
     8fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     900:	ed9f 1a57 	vldr	s2, [pc, #348]	; a60 <filter_tick+0x1e0>
     904:	ed9f 0a57 	vldr	s0, [pc, #348]	; a64 <filter_tick+0x1e4>
     908:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
     90c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     910:	4b55      	ldr	r3, [pc, #340]	; (a68 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     912:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     916:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     91a:	edd3 6a00 	vldr	s13, [r3]
     91e:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     922:	eee8 7a07 	vfma.f32	s15, s16, s14
     926:	ee67 0aa0 	vmul.f32	s1, s15, s1
     92a:	f003 fea9 	bl	4680 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     92e:	1ca3      	adds	r3, r4, #2
     930:	484e      	ldr	r0, [pc, #312]	; (a6c <filter_tick+0x1ec>)
     932:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     936:	9001      	str	r0, [sp, #4]
     938:	f005 f872 	bl	5a20 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     93c:	9801      	ldr	r0, [sp, #4]
     93e:	f005 f807 	bl	5950 <__tExpSmooth_tick_veneer>
     942:	ed8d 0a05 	vstr	s0, [sp, #20]
	if (enabledFilt[0])
     946:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     94a:	f204 23ef 	addw	r3, r4, #751	; 0x2ef
	if (enabledFilt[1])
     94e:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     952:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
     956:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     95a:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
     95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     962:	dd07      	ble.n	974 <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
     964:	4b42      	ldr	r3, [pc, #264]	; (a70 <filter_tick+0x1f0>)
     966:	4622      	mov	r2, r4
     968:	ed9d 0a04 	vldr	s0, [sp, #16]
     96c:	2100      	movs	r1, #0
     96e:	681b      	ldr	r3, [r3, #0]
     970:	4628      	mov	r0, r5
     972:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
     974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     978:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
     97c:	edd5 7a00 	vldr	s15, [r5]
     980:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
     984:	eea7 0a87 	vfma.f32	s0, s15, s14
     988:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
     98c:	f1b8 0f00 	cmp.w	r8, #0
     990:	d00b      	beq.n	9aa <filter_tick+0x12a>
		filterTick[1](&samples[1], 1, cutoff[1], string);
     992:	4b37      	ldr	r3, [pc, #220]	; (a70 <filter_tick+0x1f0>)
     994:	4622      	mov	r2, r4
     996:	ed9d 0a05 	vldr	s0, [sp, #20]
     99a:	2101      	movs	r1, #1
     99c:	685b      	ldr	r3, [r3, #4]
     99e:	1d28      	adds	r0, r5, #4
     9a0:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
     9a2:	ed95 0a01 	vldr	s0, [r5, #4]
     9a6:	edd5 7a00 	vldr	s15, [r5]
}
     9aa:	eea8 0a27 	vfma.f32	s0, s16, s15
	timeFilt = DWT->CYCCNT - tempCount1;
     9ae:	4b28      	ldr	r3, [pc, #160]	; (a50 <filter_tick+0x1d0>)
     9b0:	4a30      	ldr	r2, [pc, #192]	; (a74 <filter_tick+0x1f4>)
     9b2:	685b      	ldr	r3, [r3, #4]
     9b4:	1bdb      	subs	r3, r3, r7
     9b6:	6013      	str	r3, [r2, #0]
}
     9b8:	b006      	add	sp, #24
     9ba:	ecbd 8b02 	vpop	{d8}
     9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     9c2:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     9c6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
     9ca:	eddf 0a24 	vldr	s1, [pc, #144]	; a5c <filter_tick+0x1dc>
     9ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     9d2:	ed9f 1a23 	vldr	s2, [pc, #140]	; a60 <filter_tick+0x1e0>
     9d6:	ed9f 0a23 	vldr	s0, [pc, #140]	; a64 <filter_tick+0x1e4>
     9da:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
     9de:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     9e2:	4b21      	ldr	r3, [pc, #132]	; (a68 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     9e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     9e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     9ec:	ed93 7a00 	vldr	s14, [r3]
     9f0:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     9f4:	eee7 7a26 	vfma.f32	s15, s14, s13
     9f8:	ee67 0aa0 	vmul.f32	s1, s15, s1
     9fc:	f003 fe40 	bl	4680 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     a00:	481a      	ldr	r0, [pc, #104]	; (a6c <filter_tick+0x1ec>)
     a02:	00a3      	lsls	r3, r4, #2
     a04:	4418      	add	r0, r3
     a06:	9001      	str	r0, [sp, #4]
     a08:	f005 f80a 	bl	5a20 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     a0c:	9801      	ldr	r0, [sp, #4]
     a0e:	f004 ff9f 	bl	5950 <__tExpSmooth_tick_veneer>
	for (int f = 0; f < filterToTick; f++)
     a12:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     a16:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
     a1a:	2b01      	cmp	r3, #1
     a1c:	f63f af57 	bhi.w	8ce <filter_tick+0x4e>
     a20:	e791      	b.n	946 <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     a22:	4b0c      	ldr	r3, [pc, #48]	; (a54 <filter_tick+0x1d4>)
     a24:	f201 24ef 	addw	r4, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
     a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     a2c:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     a30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	float sendToFilter2 = samples[0] * (1.0f - sp);
     a34:	edd0 7a00 	vldr	s15, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     a38:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
     a3c:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
     a40:	eea7 0a27 	vfma.f32	s0, s14, s15
     a44:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
     a48:	e7af      	b.n	9aa <filter_tick+0x12a>
     a4a:	bf00      	nop
     a4c:	2001ad05 	.word	0x2001ad05
     a50:	e0001000 	.word	0xe0001000
     a54:	2001b6cc 	.word	0x2001b6cc
     a58:	2001c1d8 	.word	0x2001c1d8
     a5c:	420fb824 	.word	0x420fb824
     a60:	457ff000 	.word	0x457ff000
     a64:	00000000 	.word	0x00000000
     a68:	20000b0c 	.word	0x20000b0c
     a6c:	20005040 	.word	0x20005040
     a70:	20005060 	.word	0x20005060
     a74:	200179c8 	.word	0x200179c8
     a78:	20000004 	.word	0x20000004
     a7c:	f3af 8000 	nop.w

00000a80 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     a80:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     a84:	4b0d      	ldr	r3, [pc, #52]	; (abc <lowpassTick+0x3c>)
{
     a86:	b530      	push	{r4, r5, lr}
     a88:	4605      	mov	r5, r0
     a8a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     a8c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     a90:	0094      	lsls	r4, r2, #2
     a92:	9001      	str	r0, [sp, #4]
     a94:	f004 fee0 	bl	5858 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     a98:	ed95 0a00 	vldr	s0, [r5]
     a9c:	9801      	ldr	r0, [sp, #4]
     a9e:	f004 ff47 	bl	5930 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     aa2:	4a07      	ldr	r2, [pc, #28]	; (ac0 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     aa4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     aa8:	4422      	add	r2, r4
     aaa:	edd2 7a00 	vldr	s15, [r2]
     aae:	ee27 0a80 	vmul.f32	s0, s15, s0
     ab2:	ed85 0a00 	vstr	s0, [r5]
}
     ab6:	b003      	add	sp, #12
     ab8:	bd30      	pop	{r4, r5, pc}
     aba:	bf00      	nop
     abc:	20005320 	.word	0x20005320
     ac0:	20005050 	.word	0x20005050
     ac4:	f3af 8000 	nop.w
     ac8:	f3af 8000 	nop.w
     acc:	f3af 8000 	nop.w
     ad0:	f3af 8000 	nop.w
     ad4:	f3af 8000 	nop.w
     ad8:	f3af 8000 	nop.w
     adc:	f3af 8000 	nop.w

00000ae0 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     ae0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ae4:	4b0d      	ldr	r3, [pc, #52]	; (b1c <highpassTick+0x3c>)
{
     ae6:	b530      	push	{r4, r5, lr}
     ae8:	4605      	mov	r5, r0
     aea:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     aec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     af0:	0094      	lsls	r4, r2, #2
     af2:	9001      	str	r0, [sp, #4]
     af4:	f004 feb0 	bl	5858 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
     af8:	ed95 0a00 	vldr	s0, [r5]
     afc:	9801      	ldr	r0, [sp, #4]
     afe:	f004 ff17 	bl	5930 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     b02:	4a07      	ldr	r2, [pc, #28]	; (b20 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
     b04:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     b08:	4422      	add	r2, r4
     b0a:	edd2 7a00 	vldr	s15, [r2]
     b0e:	ee27 0a80 	vmul.f32	s0, s15, s0
     b12:	ed85 0a00 	vstr	s0, [r5]
}
     b16:	b003      	add	sp, #12
     b18:	bd30      	pop	{r4, r5, pc}
     b1a:	bf00      	nop
     b1c:	2000510c 	.word	0x2000510c
     b20:	20005050 	.word	0x20005050
     b24:	f3af 8000 	nop.w
     b28:	f3af 8000 	nop.w
     b2c:	f3af 8000 	nop.w
     b30:	f3af 8000 	nop.w
     b34:	f3af 8000 	nop.w
     b38:	f3af 8000 	nop.w
     b3c:	f3af 8000 	nop.w

00000b40 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     b40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     b44:	4b0d      	ldr	r3, [pc, #52]	; (b7c <bandpassTick+0x3c>)
{
     b46:	b530      	push	{r4, r5, lr}
     b48:	4605      	mov	r5, r0
     b4a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     b4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     b50:	0094      	lsls	r4, r2, #2
     b52:	9001      	str	r0, [sp, #4]
     b54:	f004 fe80 	bl	5858 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     b58:	ed95 0a00 	vldr	s0, [r5]
     b5c:	9801      	ldr	r0, [sp, #4]
     b5e:	f004 fee7 	bl	5930 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     b62:	4a07      	ldr	r2, [pc, #28]	; (b80 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     b64:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     b68:	4422      	add	r2, r4
     b6a:	edd2 7a00 	vldr	s15, [r2]
     b6e:	ee27 0a80 	vmul.f32	s0, s15, s0
     b72:	ed85 0a00 	vstr	s0, [r5]
}
     b76:	b003      	add	sp, #12
     b78:	bd30      	pop	{r4, r5, pc}
     b7a:	bf00      	nop
     b7c:	20000afc 	.word	0x20000afc
     b80:	20005050 	.word	0x20005050
     b84:	f3af 8000 	nop.w
     b88:	f3af 8000 	nop.w
     b8c:	f3af 8000 	nop.w
     b90:	f3af 8000 	nop.w
     b94:	f3af 8000 	nop.w
     b98:	f3af 8000 	nop.w
     b9c:	f3af 8000 	nop.w

00000ba0 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     ba0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ba4:	4b0d      	ldr	r3, [pc, #52]	; (bdc <diodeLowpassTick+0x3c>)
{
     ba6:	b530      	push	{r4, r5, lr}
     ba8:	4605      	mov	r5, r0
     baa:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     bac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     bb0:	0094      	lsls	r4, r2, #2
     bb2:	9001      	str	r0, [sp, #4]
     bb4:	f004 fe98 	bl	58e8 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     bb8:	ed95 0a00 	vldr	s0, [r5]
     bbc:	9801      	ldr	r0, [sp, #4]
     bbe:	f004 fecf 	bl	5960 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
     bc2:	4a07      	ldr	r2, [pc, #28]	; (be0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     bc4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     bc8:	4422      	add	r2, r4
     bca:	edd2 7a00 	vldr	s15, [r2]
     bce:	ee27 0a80 	vmul.f32	s0, s15, s0
     bd2:	ed85 0a00 	vstr	s0, [r5]
}
     bd6:	b003      	add	sp, #12
     bd8:	bd30      	pop	{r4, r5, pc}
     bda:	bf00      	nop
     bdc:	20004ff0 	.word	0x20004ff0
     be0:	20005050 	.word	0x20005050
     be4:	f3af 8000 	nop.w
     be8:	f3af 8000 	nop.w
     bec:	f3af 8000 	nop.w
     bf0:	f3af 8000 	nop.w
     bf4:	f3af 8000 	nop.w
     bf8:	f3af 8000 	nop.w
     bfc:	f3af 8000 	nop.w

00000c00 <VZpeakTick>:
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     c00:	4b09      	ldr	r3, [pc, #36]	; (c28 <VZpeakTick+0x28>)
     c02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     c06:	b510      	push	{r4, lr}
     c08:	4604      	mov	r4, r0
     c0a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     c0c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     c10:	9001      	str	r0, [sp, #4]
     c12:	f004 fe65 	bl	58e0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
     c16:	9801      	ldr	r0, [sp, #4]
     c18:	ed94 0a00 	vldr	s0, [r4]
     c1c:	f004 fe7c 	bl	5918 <__tVZFilter_tickEfficient_veneer>
     c20:	ed84 0a00 	vstr	s0, [r4]
}
     c24:	b002      	add	sp, #8
     c26:	bd10      	pop	{r4, pc}
     c28:	200009c4 	.word	0x200009c4
     c2c:	f3af 8000 	nop.w
     c30:	f3af 8000 	nop.w
     c34:	f3af 8000 	nop.w
     c38:	f3af 8000 	nop.w
     c3c:	f3af 8000 	nop.w

00000c40 <VZlowshelfTick>:
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     c40:	4b09      	ldr	r3, [pc, #36]	; (c68 <VZlowshelfTick+0x28>)
     c42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     c46:	b510      	push	{r4, lr}
     c48:	4604      	mov	r4, r0
     c4a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     c4c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     c50:	9001      	str	r0, [sp, #4]
     c52:	f004 fe45 	bl	58e0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
     c56:	9801      	ldr	r0, [sp, #4]
     c58:	ed94 0a00 	vldr	s0, [r4]
     c5c:	f004 fe5c 	bl	5918 <__tVZFilter_tickEfficient_veneer>
     c60:	ed84 0a00 	vstr	s0, [r4]
}
     c64:	b002      	add	sp, #8
     c66:	bd10      	pop	{r4, pc}
     c68:	200009b4 	.word	0x200009b4
     c6c:	f3af 8000 	nop.w
     c70:	f3af 8000 	nop.w
     c74:	f3af 8000 	nop.w
     c78:	f3af 8000 	nop.w
     c7c:	f3af 8000 	nop.w

00000c80 <VZhighshelfTick>:
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     c80:	4b09      	ldr	r3, [pc, #36]	; (ca8 <VZhighshelfTick+0x28>)
     c82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     c86:	b510      	push	{r4, lr}
     c88:	4604      	mov	r4, r0
     c8a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     c8c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     c90:	9001      	str	r0, [sp, #4]
     c92:	f004 fe25 	bl	58e0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
     c96:	9801      	ldr	r0, [sp, #4]
     c98:	ed94 0a00 	vldr	s0, [r4]
     c9c:	f004 fe3c 	bl	5918 <__tVZFilter_tickEfficient_veneer>
     ca0:	ed84 0a00 	vstr	s0, [r4]
}
     ca4:	b002      	add	sp, #8
     ca6:	bd10      	pop	{r4, pc}
     ca8:	200009a4 	.word	0x200009a4
     cac:	f3af 8000 	nop.w
     cb0:	f3af 8000 	nop.w
     cb4:	f3af 8000 	nop.w
     cb8:	f3af 8000 	nop.w
     cbc:	f3af 8000 	nop.w

00000cc0 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     cc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     cc4:	4b0d      	ldr	r3, [pc, #52]	; (cfc <VZbandrejectTick+0x3c>)
{
     cc6:	b530      	push	{r4, r5, lr}
     cc8:	4605      	mov	r5, r0
     cca:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     ccc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     cd0:	0094      	lsls	r4, r2, #2
     cd2:	9001      	str	r0, [sp, #4]
     cd4:	f004 fe04 	bl	58e0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     cd8:	ed95 0a00 	vldr	s0, [r5]
     cdc:	9801      	ldr	r0, [sp, #4]
     cde:	f004 fe1b 	bl	5918 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
     ce2:	4a07      	ldr	r2, [pc, #28]	; (d00 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     ce4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     ce8:	4422      	add	r2, r4
     cea:	edd2 7a00 	vldr	s15, [r2]
     cee:	ee27 0a80 	vmul.f32	s0, s15, s0
     cf2:	ed85 0a00 	vstr	s0, [r5]
}
     cf6:	b003      	add	sp, #12
     cf8:	bd30      	pop	{r4, r5, pc}
     cfa:	bf00      	nop
     cfc:	20000994 	.word	0x20000994
     d00:	20005050 	.word	0x20005050
     d04:	f3af 8000 	nop.w
     d08:	f3af 8000 	nop.w
     d0c:	f3af 8000 	nop.w
     d10:	f3af 8000 	nop.w
     d14:	f3af 8000 	nop.w
     d18:	f3af 8000 	nop.w
     d1c:	f3af 8000 	nop.w

00000d20 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     d20:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     d24:	4b0d      	ldr	r3, [pc, #52]	; (d5c <LadderLowpassTick+0x3c>)
{
     d26:	b530      	push	{r4, r5, lr}
     d28:	4605      	mov	r5, r0
     d2a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     d2c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     d30:	0094      	lsls	r4, r2, #2
     d32:	9001      	str	r0, [sp, #4]
     d34:	f004 fe18 	bl	5968 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     d38:	ed95 0a00 	vldr	s0, [r5]
     d3c:	9801      	ldr	r0, [sp, #4]
     d3e:	f004 fe17 	bl	5970 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
     d42:	4a07      	ldr	r2, [pc, #28]	; (d60 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     d44:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     d48:	4422      	add	r2, r4
     d4a:	edd2 7a00 	vldr	s15, [r2]
     d4e:	ee27 0a80 	vmul.f32	s0, s15, s0
     d52:	ed85 0a00 	vstr	s0, [r5]
}
     d56:	b003      	add	sp, #12
     d58:	bd30      	pop	{r4, r5, pc}
     d5a:	bf00      	nop
     d5c:	20000984 	.word	0x20000984
     d60:	20005050 	.word	0x20005050
     d64:	f3af 8000 	nop.w
     d68:	f3af 8000 	nop.w
     d6c:	f3af 8000 	nop.w
     d70:	f3af 8000 	nop.w
     d74:	f3af 8000 	nop.w
     d78:	f3af 8000 	nop.w
     d7c:	f3af 8000 	nop.w

00000d80 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     d80:	eb00 0240 	add.w	r2, r0, r0, lsl #1
     d84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
     d88:	eef0 0a40 	vmov.f32	s1, s0
     d8c:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     d8e:	0045      	lsls	r5, r0, #1
     d90:	4b0e      	ldr	r3, [pc, #56]	; (dcc <setFreqMultPitch+0x4c>)
     d92:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
     d96:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     d98:	3020      	adds	r0, #32
     d9a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     d9e:	4408      	add	r0, r1
     da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     da4:	ed90 7a02 	vldr	s14, [r0, #8]
     da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
     dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     db0:	dd01      	ble.n	db6 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
     db2:	fef8 0a40 	vrinta.f32	s1, s0
	freqMult[osc][string] = powf(1.059463094359295f, pitch);
     db6:	ed9f 0a06 	vldr	s0, [pc, #24]	; dd0 <setFreqMultPitch+0x50>
     dba:	442c      	add	r4, r5
     dbc:	f004 fd58 	bl	5870 <__powf_veneer>
     dc0:	4b04      	ldr	r3, [pc, #16]	; (dd4 <setFreqMultPitch+0x54>)
     dc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     dc6:	ed84 0a00 	vstr	s0, [r4]
}
     dca:	bd38      	pop	{r3, r4, r5, pc}
     dcc:	2001b6cc 	.word	0x2001b6cc
     dd0:	3f879c7d 	.word	0x3f879c7d
     dd4:	20005080 	.word	0x20005080
     dd8:	f3af 8000 	nop.w
     ddc:	f3af 8000 	nop.w

00000de0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     de0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
     de4:	4b15      	ldr	r3, [pc, #84]	; (e3c <setFreqMultHarm+0x5c>)
     de6:	0042      	lsls	r2, r0, #1
     de8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     dec:	eb00 008c 	add.w	r0, r0, ip, lsl #2
     df0:	3020      	adds	r0, #32
     df2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     df6:	4408      	add	r0, r1
     df8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     dfc:	ed90 7a02 	vldr	s14, [r0, #8]
     e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
     e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e08:	dd01      	ble.n	e0e <setFreqMultHarm+0x2e>
		harm = roundf(harm);
     e0a:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
     e0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
     e12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
     e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e1a:	db08      	blt.n	e2e <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
     e1c:	ee30 0a27 	vadd.f32	s0, s0, s15
     e20:	4b07      	ldr	r3, [pc, #28]	; (e40 <setFreqMultHarm+0x60>)
     e22:	4411      	add	r1, r2
     e24:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     e28:	ed81 0a00 	vstr	s0, [r1]
}
     e2c:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
     e2e:	ee30 0a67 	vsub.f32	s0, s0, s15
     e32:	eeb0 7ac0 	vabs.f32	s14, s0
     e36:	ee87 0a87 	vdiv.f32	s0, s15, s14
     e3a:	e7f1      	b.n	e20 <setFreqMultHarm+0x40>
     e3c:	2001b6cc 	.word	0x2001b6cc
     e40:	20005080 	.word	0x20005080
     e44:	f3af 8000 	nop.w
     e48:	f3af 8000 	nop.w
     e4c:	f3af 8000 	nop.w
     e50:	f3af 8000 	nop.w
     e54:	f3af 8000 	nop.w
     e58:	f3af 8000 	nop.w
     e5c:	f3af 8000 	nop.w

00000e60 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
     e60:	4b03      	ldr	r3, [pc, #12]	; (e70 <lowpassSetQ+0x10>)
     e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e6a:	f004 bd29 	b.w	58c0 <__tSVF_setQ_veneer>
     e6e:	bf00      	nop
     e70:	20005320 	.word	0x20005320
     e74:	f3af 8000 	nop.w
     e78:	f3af 8000 	nop.w
     e7c:	f3af 8000 	nop.w

00000e80 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
     e80:	4b03      	ldr	r3, [pc, #12]	; (e90 <highpassSetQ+0x10>)
     e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e8a:	f004 bd19 	b.w	58c0 <__tSVF_setQ_veneer>
     e8e:	bf00      	nop
     e90:	2000510c 	.word	0x2000510c
     e94:	f3af 8000 	nop.w
     e98:	f3af 8000 	nop.w
     e9c:	f3af 8000 	nop.w

00000ea0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
     ea0:	4b03      	ldr	r3, [pc, #12]	; (eb0 <bandpassSetQ+0x10>)
     ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     eaa:	f004 bd09 	b.w	58c0 <__tSVF_setQ_veneer>
     eae:	bf00      	nop
     eb0:	20000afc 	.word	0x20000afc
     eb4:	f3af 8000 	nop.w
     eb8:	f3af 8000 	nop.w
     ebc:	f3af 8000 	nop.w

00000ec0 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
     ec0:	4b03      	ldr	r3, [pc, #12]	; (ed0 <diodeLowpassSetQ+0x10>)
     ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     eca:	f004 bd61 	b.w	5990 <__tDiodeFilter_setQ_veneer>
     ece:	bf00      	nop
     ed0:	20004ff0 	.word	0x20004ff0
     ed4:	f3af 8000 	nop.w
     ed8:	f3af 8000 	nop.w
     edc:	f3af 8000 	nop.w

00000ee0 <VZpeakSetQ>:
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <VZpeakSetQ+0x10>)
     ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     eea:	f004 bcc9 	b.w	5880 <__tVZFilter_setResonance_veneer>
     eee:	bf00      	nop
     ef0:	200009c4 	.word	0x200009c4
     ef4:	f3af 8000 	nop.w
     ef8:	f3af 8000 	nop.w
     efc:	f3af 8000 	nop.w

00000f00 <VZlowshelfSetQ>:
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
     f00:	4b03      	ldr	r3, [pc, #12]	; (f10 <VZlowshelfSetQ+0x10>)
     f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f0a:	f004 bcb9 	b.w	5880 <__tVZFilter_setResonance_veneer>
     f0e:	bf00      	nop
     f10:	200009b4 	.word	0x200009b4
     f14:	f3af 8000 	nop.w
     f18:	f3af 8000 	nop.w
     f1c:	f3af 8000 	nop.w

00000f20 <VZhighshelfSetQ>:
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
     f20:	4b03      	ldr	r3, [pc, #12]	; (f30 <VZhighshelfSetQ+0x10>)
     f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f2a:	f004 bca9 	b.w	5880 <__tVZFilter_setResonance_veneer>
     f2e:	bf00      	nop
     f30:	200009a4 	.word	0x200009a4
     f34:	f3af 8000 	nop.w
     f38:	f3af 8000 	nop.w
     f3c:	f3af 8000 	nop.w

00000f40 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
     f40:	4b03      	ldr	r3, [pc, #12]	; (f50 <VZbandrejectSetQ+0x10>)
     f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f4a:	f004 bc99 	b.w	5880 <__tVZFilter_setResonance_veneer>
     f4e:	bf00      	nop
     f50:	20000994 	.word	0x20000994
     f54:	f3af 8000 	nop.w
     f58:	f3af 8000 	nop.w
     f5c:	f3af 8000 	nop.w

00000f60 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
     f60:	4b03      	ldr	r3, [pc, #12]	; (f70 <LadderLowpassSetQ+0x10>)
     f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f6a:	f004 bd05 	b.w	5978 <__tLadderFilter_setQ_veneer>
     f6e:	bf00      	nop
     f70:	20000984 	.word	0x20000984
     f74:	f3af 8000 	nop.w
     f78:	f3af 8000 	nop.w
     f7c:	f3af 8000 	nop.w

00000f80 <lowpassSetGain>:
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
     f80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     f84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
     f88:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
     f8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     f8e:	4605      	mov	r5, r0
     f90:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
     f92:	eb04 0445 	add.w	r4, r4, r5, lsl #1
     f96:	eeb0 0a67 	vmov.f32	s0, s15
     f9a:	f004 fcad 	bl	58f8 <__fasterdbtoa_veneer>
     f9e:	4b03      	ldr	r3, [pc, #12]	; (fac <lowpassSetGain+0x2c>)
     fa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     fa4:	ed84 0a00 	vstr	s0, [r4]
}
     fa8:	bd38      	pop	{r3, r4, r5, pc}
     faa:	bf00      	nop
     fac:	20005050 	.word	0x20005050
     fb0:	f3af 8000 	nop.w
     fb4:	f3af 8000 	nop.w
     fb8:	f3af 8000 	nop.w
     fbc:	f3af 8000 	nop.w

00000fc0 <highpassSetGain>:
     fc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     fc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     fc8:	b538      	push	{r3, r4, r5, lr}
     fca:	eee0 7a07 	vfma.f32	s15, s0, s14
     fce:	4605      	mov	r5, r0
     fd0:	460c      	mov	r4, r1
     fd2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
     fd6:	eeb0 0a67 	vmov.f32	s0, s15
     fda:	f004 fc8d 	bl	58f8 <__fasterdbtoa_veneer>
     fde:	4b03      	ldr	r3, [pc, #12]	; (fec <highpassSetGain+0x2c>)
     fe0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     fe4:	ed84 0a00 	vstr	s0, [r4]
     fe8:	bd38      	pop	{r3, r4, r5, pc}
     fea:	bf00      	nop
     fec:	20005050 	.word	0x20005050
     ff0:	f3af 8000 	nop.w
     ff4:	f3af 8000 	nop.w
     ff8:	f3af 8000 	nop.w
     ffc:	f3af 8000 	nop.w

00001000 <bandpassSetGain>:
    1000:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1004:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1008:	b538      	push	{r3, r4, r5, lr}
    100a:	eee0 7a07 	vfma.f32	s15, s0, s14
    100e:	4605      	mov	r5, r0
    1010:	460c      	mov	r4, r1
    1012:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1016:	eeb0 0a67 	vmov.f32	s0, s15
    101a:	f004 fc6d 	bl	58f8 <__fasterdbtoa_veneer>
    101e:	4b03      	ldr	r3, [pc, #12]	; (102c <bandpassSetGain+0x2c>)
    1020:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1024:	ed84 0a00 	vstr	s0, [r4]
    1028:	bd38      	pop	{r3, r4, r5, pc}
    102a:	bf00      	nop
    102c:	20005050 	.word	0x20005050
    1030:	f3af 8000 	nop.w
    1034:	f3af 8000 	nop.w
    1038:	f3af 8000 	nop.w
    103c:	f3af 8000 	nop.w

00001040 <diodeLowpassSetGain>:
    1040:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1044:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1048:	b538      	push	{r3, r4, r5, lr}
    104a:	eee0 7a07 	vfma.f32	s15, s0, s14
    104e:	4605      	mov	r5, r0
    1050:	460c      	mov	r4, r1
    1052:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1056:	eeb0 0a67 	vmov.f32	s0, s15
    105a:	f004 fc4d 	bl	58f8 <__fasterdbtoa_veneer>
    105e:	4b03      	ldr	r3, [pc, #12]	; (106c <diodeLowpassSetGain+0x2c>)
    1060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1064:	ed84 0a00 	vstr	s0, [r4]
    1068:	bd38      	pop	{r3, r4, r5, pc}
    106a:	bf00      	nop
    106c:	20005050 	.word	0x20005050
    1070:	f3af 8000 	nop.w
    1074:	f3af 8000 	nop.w
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <VZpeakSetGain>:
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1080:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1084:	ed9f 7a09 	vldr	s14, [pc, #36]	; 10ac <VZpeakSetGain+0x2c>
{
    1088:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    108a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    108e:	4605      	mov	r5, r0
    1090:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1092:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1096:	eeb0 0a67 	vmov.f32	s0, s15
    109a:	f004 fc2d 	bl	58f8 <__fasterdbtoa_veneer>
    109e:	4804      	ldr	r0, [pc, #16]	; (10b0 <VZpeakSetGain+0x30>)
    10a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    10a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    10a8:	f004 bc76 	b.w	5998 <__tVZFilter_setGain_veneer>
    10ac:	42480000 	.word	0x42480000
    10b0:	200009c4 	.word	0x200009c4
    10b4:	f3af 8000 	nop.w
    10b8:	f3af 8000 	nop.w
    10bc:	f3af 8000 	nop.w

000010c0 <VZlowshelfSetGain>:
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    10c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    10c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 10ec <VZlowshelfSetGain+0x2c>
{
    10c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    10ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    10ce:	4605      	mov	r5, r0
    10d0:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    10d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    10d6:	eeb0 0a67 	vmov.f32	s0, s15
    10da:	f004 fc0d 	bl	58f8 <__fasterdbtoa_veneer>
    10de:	4804      	ldr	r0, [pc, #16]	; (10f0 <VZlowshelfSetGain+0x30>)
    10e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    10e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    10e8:	f004 bc56 	b.w	5998 <__tVZFilter_setGain_veneer>
    10ec:	42480000 	.word	0x42480000
    10f0:	200009b4 	.word	0x200009b4
    10f4:	f3af 8000 	nop.w
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <VZhighshelfSetGain>:
    1100:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1104:	ed9f 7a09 	vldr	s14, [pc, #36]	; 112c <VZhighshelfSetGain+0x2c>
    1108:	b538      	push	{r3, r4, r5, lr}
    110a:	eee0 7a07 	vfma.f32	s15, s0, s14
    110e:	4605      	mov	r5, r0
    1110:	460c      	mov	r4, r1
    1112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1116:	eeb0 0a67 	vmov.f32	s0, s15
    111a:	f004 fbed 	bl	58f8 <__fasterdbtoa_veneer>
    111e:	4804      	ldr	r0, [pc, #16]	; (1130 <VZhighshelfSetGain+0x30>)
    1120:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1128:	f004 bc36 	b.w	5998 <__tVZFilter_setGain_veneer>
    112c:	42480000 	.word	0x42480000
    1130:	200009b4 	.word	0x200009b4
    1134:	f3af 8000 	nop.w
    1138:	f3af 8000 	nop.w
    113c:	f3af 8000 	nop.w

00001140 <VZbandrejectSetGain>:
    1140:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1144:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1148:	b538      	push	{r3, r4, r5, lr}
    114a:	eee0 7a07 	vfma.f32	s15, s0, s14
    114e:	4605      	mov	r5, r0
    1150:	460c      	mov	r4, r1
    1152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1156:	eeb0 0a67 	vmov.f32	s0, s15
    115a:	f004 fbcd 	bl	58f8 <__fasterdbtoa_veneer>
    115e:	4b03      	ldr	r3, [pc, #12]	; (116c <VZbandrejectSetGain+0x2c>)
    1160:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1164:	ed84 0a00 	vstr	s0, [r4]
    1168:	bd38      	pop	{r3, r4, r5, pc}
    116a:	bf00      	nop
    116c:	20005050 	.word	0x20005050
    1170:	f3af 8000 	nop.w
    1174:	f3af 8000 	nop.w
    1178:	f3af 8000 	nop.w
    117c:	f3af 8000 	nop.w

00001180 <LadderLowpassSetGain>:
    1180:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1184:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1188:	b538      	push	{r3, r4, r5, lr}
    118a:	eee0 7a07 	vfma.f32	s15, s0, s14
    118e:	4605      	mov	r5, r0
    1190:	460c      	mov	r4, r1
    1192:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1196:	eeb0 0a67 	vmov.f32	s0, s15
    119a:	f004 fbad 	bl	58f8 <__fasterdbtoa_veneer>
    119e:	4b03      	ldr	r3, [pc, #12]	; (11ac <LadderLowpassSetGain+0x2c>)
    11a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    11a4:	ed84 0a00 	vstr	s0, [r4]
    11a8:	bd38      	pop	{r3, r4, r5, pc}
    11aa:	bf00      	nop
    11ac:	20005050 	.word	0x20005050
    11b0:	f3af 8000 	nop.w
    11b4:	f3af 8000 	nop.w
    11b8:	f3af 8000 	nop.w
    11bc:	f3af 8000 	nop.w

000011c0 <envelope_tick>:
{
    11c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interruptChecker = 0;
    11c2:	490e      	ldr	r1, [pc, #56]	; (11fc <envelope_tick+0x3c>)
    11c4:	2400      	movs	r4, #0
    11c6:	4b0e      	ldr	r3, [pc, #56]	; (1200 <envelope_tick+0x40>)
    11c8:	700c      	strb	r4, [r1, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    11ca:	4a0e      	ldr	r2, [pc, #56]	; (1204 <envelope_tick+0x44>)
    11cc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    11d0:	4d0d      	ldr	r5, [pc, #52]	; (1208 <envelope_tick+0x48>)
    11d2:	3320      	adds	r3, #32
    11d4:	6857      	ldr	r7, [r2, #4]
	for (int v = 0; v < NUM_ENV; v++)
    11d6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    11da:	eb03 0680 	add.w	r6, r3, r0, lsl #2
    11de:	3408      	adds	r4, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
    11e0:	4628      	mov	r0, r5
    11e2:	f004 fb85 	bl	58f0 <__tADSRT_tickNoInterp_veneer>
	for (int v = 0; v < NUM_ENV; v++)
    11e6:	3508      	adds	r5, #8
    11e8:	42b4      	cmp	r4, r6
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    11ea:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
    11ee:	d1f6      	bne.n	11de <envelope_tick+0x1e>
	timeEnv = DWT->CYCCNT - tempCount1;
    11f0:	4b04      	ldr	r3, [pc, #16]	; (1204 <envelope_tick+0x44>)
    11f2:	4a06      	ldr	r2, [pc, #24]	; (120c <envelope_tick+0x4c>)
    11f4:	685b      	ldr	r3, [r3, #4]
    11f6:	1bdb      	subs	r3, r3, r7
    11f8:	6013      	str	r3, [r2, #0]
}
    11fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11fc:	2001ad05 	.word	0x2001ad05
    1200:	20017854 	.word	0x20017854
    1204:	e0001000 	.word	0xe0001000
    1208:	20005018 	.word	0x20005018
    120c:	200179c4 	.word	0x200179c4
    1210:	f3af 8000 	nop.w
    1214:	f3af 8000 	nop.w
    1218:	f3af 8000 	nop.w
    121c:	f3af 8000 	nop.w

00001220 <lfo_tick>:
{
    1220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	interruptChecker = 0;
    1224:	4a18      	ldr	r2, [pc, #96]	; (1288 <lfo_tick+0x68>)
    1226:	2400      	movs	r4, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    1228:	4b18      	ldr	r3, [pc, #96]	; (128c <lfo_tick+0x6c>)
{
    122a:	b082      	sub	sp, #8
    122c:	4d18      	ldr	r5, [pc, #96]	; (1290 <lfo_tick+0x70>)
    122e:	4607      	mov	r7, r0
	interruptChecker = 0;
    1230:	7014      	strb	r4, [r2, #0]
		float sample = 0.0f;
    1232:	f04f 0800 	mov.w	r8, #0
    1236:	4e17      	ldr	r6, [pc, #92]	; (1294 <lfo_tick+0x74>)
    1238:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	uint32_t tempCount1 = DWT->CYCCNT;
    123c:	f8d3 9004 	ldr.w	r9, [r3, #4]
			lfoShapeTick[i](&sample,i, string);
    1240:	f8df a058 	ldr.w	sl, [pc, #88]	; 129c <lfo_tick+0x7c>
		if (lfoOn[i])
    1244:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
    1248:	4621      	mov	r1, r4
    124a:	463a      	mov	r2, r7
    124c:	a801      	add	r0, sp, #4
		float sample = 0.0f;
    124e:	f8cd 8004 	str.w	r8, [sp, #4]
		if (lfoOn[i])
    1252:	b193      	cbz	r3, 127a <lfo_tick+0x5a>
			lfoShapeTick[i](&sample,i, string);
    1254:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
    1258:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
    125a:	4798      	blx	r3
	for (int i = 0; i < NUM_LFOS; i++)
    125c:	3508      	adds	r5, #8
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    125e:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < NUM_LFOS; i++)
    1260:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    1262:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
    1266:	d1ed      	bne.n	1244 <lfo_tick+0x24>
	timeLFO = DWT->CYCCNT - tempCount1;
    1268:	4b08      	ldr	r3, [pc, #32]	; (128c <lfo_tick+0x6c>)
    126a:	4a0b      	ldr	r2, [pc, #44]	; (1298 <lfo_tick+0x78>)
    126c:	685b      	ldr	r3, [r3, #4]
    126e:	eba3 0309 	sub.w	r3, r3, r9
    1272:	6013      	str	r3, [r2, #0]
}
    1274:	b002      	add	sp, #8
    1276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < NUM_LFOS; i++)
    127a:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    127c:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    1280:	3508      	adds	r5, #8
    1282:	2c04      	cmp	r4, #4
    1284:	d1de      	bne.n	1244 <lfo_tick+0x24>
    1286:	e7ef      	b.n	1268 <lfo_tick+0x48>
    1288:	2001ad05 	.word	0x2001ad05
    128c:	e0001000 	.word	0xe0001000
    1290:	20017854 	.word	0x20017854
    1294:	20005244 	.word	0x20005244
    1298:	200179d0 	.word	0x200179d0
    129c:	200052a8 	.word	0x200052a8

000012a0 <setEnvelopeAttack>:
	a = a + 0.01f;
    12a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 12b8 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    12a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    12a8:	4b04      	ldr	r3, [pc, #16]	; (12bc <setEnvelopeAttack+0x1c>)
    12aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    12ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    12b2:	f004 bb69 	b.w	5988 <__tADSRT_setAttack_veneer>
    12b6:	bf00      	nop
    12b8:	3c23d70a 	.word	0x3c23d70a
    12bc:	20005018 	.word	0x20005018

000012c0 <setEnvelopeDecay>:
	d = d + 0.01f;
    12c0:	eddf 7a05 	vldr	s15, [pc, #20]	; 12d8 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    12c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    12c8:	4b04      	ldr	r3, [pc, #16]	; (12dc <setEnvelopeDecay+0x1c>)
    12ca:	ee30 0a27 	vadd.f32	s0, s0, s15
    12ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    12d2:	f004 bba1 	b.w	5a18 <__tADSRT_setDecay_veneer>
    12d6:	bf00      	nop
    12d8:	3c23d70a 	.word	0x3c23d70a
    12dc:	20005018 	.word	0x20005018

000012e0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    12e0:	4b03      	ldr	r3, [pc, #12]	; (12f0 <setEnvelopeSustain+0x10>)
    12e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    12e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    12ea:	f004 bb7d 	b.w	59e8 <__tADSRT_setSustain_veneer>
    12ee:	bf00      	nop
    12f0:	20005018 	.word	0x20005018
    12f4:	f3af 8000 	nop.w
    12f8:	f3af 8000 	nop.w
    12fc:	f3af 8000 	nop.w

00001300 <setEnvelopeRelease>:
	r = r + 0.01f;
    1300:	eddf 7a05 	vldr	s15, [pc, #20]	; 1318 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    1304:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1308:	4b04      	ldr	r3, [pc, #16]	; (131c <setEnvelopeRelease+0x1c>)
    130a:	ee30 0a27 	vadd.f32	s0, s0, s15
    130e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1312:	f004 baf5 	b.w	5900 <__tADSRT_setRelease_veneer>
    1316:	bf00      	nop
    1318:	3c23d70a 	.word	0x3c23d70a
    131c:	20005018 	.word	0x20005018

00001320 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    1320:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1324:	eddf 6a08 	vldr	s13, [pc, #32]	; 1348 <setEnvelopeLeak+0x28>
    1328:	ed9f 7a08 	vldr	s14, [pc, #32]	; 134c <setEnvelopeLeak+0x2c>
    132c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1330:	4b07      	ldr	r3, [pc, #28]	; (1350 <setEnvelopeLeak+0x30>)
    1332:	ee77 7ac0 	vsub.f32	s15, s15, s0
    1336:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    133a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    133e:	eeb0 0a47 	vmov.f32	s0, s14
    1342:	f004 bb5d 	b.w	5a00 <__tADSRT_setLeakFactor_veneer>
    1346:	bf00      	nop
    1348:	3851b717 	.word	0x3851b717
    134c:	3f7ffcb9 	.word	0x3f7ffcb9
    1350:	20005018 	.word	0x20005018
    1354:	f3af 8000 	nop.w
    1358:	f3af 8000 	nop.w
    135c:	f3af 8000 	nop.w

00001360 <setAmp>:
	amplitude[string] = amp;
    1360:	4b02      	ldr	r3, [pc, #8]	; (136c <setAmp+0xc>)
    1362:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1366:	ed81 0a00 	vstr	s0, [r1]
}
    136a:	4770      	bx	lr
    136c:	20000af4 	.word	0x20000af4
    1370:	f3af 8000 	nop.w
    1374:	f3af 8000 	nop.w
    1378:	f3af 8000 	nop.w
    137c:	f3af 8000 	nop.w

00001380 <setMaster>:
	finalMaster[string] = amp;
    1380:	4b02      	ldr	r3, [pc, #8]	; (138c <setMaster+0xc>)
    1382:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1386:	ed81 0a00 	vstr	s0, [r1]
}
    138a:	4770      	bx	lr
    138c:	20005070 	.word	0x20005070
    1390:	f3af 8000 	nop.w
    1394:	f3af 8000 	nop.w
    1398:	f3af 8000 	nop.w
    139c:	f3af 8000 	nop.w

000013a0 <setTranspose>:
	transpose = in;
    13a0:	4b01      	ldr	r3, [pc, #4]	; (13a8 <setTranspose+0x8>)
    13a2:	ed83 0a00 	vstr	s0, [r3]
}
    13a6:	4770      	bx	lr
    13a8:	20017a14 	.word	0x20017a14
    13ac:	f3af 8000 	nop.w
    13b0:	f3af 8000 	nop.w
    13b4:	f3af 8000 	nop.w
    13b8:	f3af 8000 	nop.w
    13bc:	f3af 8000 	nop.w

000013c0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    13c0:	eddf 7a03 	vldr	s15, [pc, #12]	; 13d0 <setPitchBendRange+0x10>
    13c4:	4b03      	ldr	r3, [pc, #12]	; (13d4 <setPitchBendRange+0x14>)
    13c6:	ee20 0a27 	vmul.f32	s0, s0, s15
    13ca:	ed83 0a00 	vstr	s0, [r3]
}
    13ce:	4770      	bx	lr
    13d0:	39000200 	.word	0x39000200
    13d4:	20000000 	.word	0x20000000
    13d8:	f3af 8000 	nop.w
    13dc:	f3af 8000 	nop.w

000013e0 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    13e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    13e4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 1414 <setFinalLowpass+0x34>
{
    13e8:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    13ec:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 1418 <setFinalLowpass+0x38>
    13f0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 141c <setFinalLowpass+0x3c>
    13f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
    13f8:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    13fa:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
    13fe:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1400:	f003 f93e 	bl	4680 <LEAF_clip>
    1404:	4806      	ldr	r0, [pc, #24]	; (1420 <setFinalLowpass+0x40>)
    1406:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    140a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    140e:	f004 ba23 	b.w	5858 <__tSVF_setFreqFast_veneer>
    1412:	bf00      	nop
    1414:	420fb824 	.word	0x420fb824
    1418:	457ff000 	.word	0x457ff000
    141c:	00000000 	.word	0x00000000
    1420:	20005068 	.word	0x20005068
    1424:	f3af 8000 	nop.w
    1428:	f3af 8000 	nop.w
    142c:	f3af 8000 	nop.w
    1430:	f3af 8000 	nop.w
    1434:	f3af 8000 	nop.w
    1438:	f3af 8000 	nop.w
    143c:	f3af 8000 	nop.w

00001440 <tickMappings>:
{
    1440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
    1444:	4956      	ldr	r1, [pc, #344]	; (15a0 <tickMappings+0x160>)
    1446:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    1448:	4a56      	ldr	r2, [pc, #344]	; (15a4 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
    144a:	4b57      	ldr	r3, [pc, #348]	; (15a8 <tickMappings+0x168>)
{
    144c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    1450:	700f      	strb	r7, [r1, #0]
{
    1452:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
    1454:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
    1456:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    1458:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
    145a:	2b00      	cmp	r3, #0
    145c:	f000 8086 	beq.w	156c <tickMappings+0x12c>
		for (int v = 0; v < numStringsThisBoard; v++)
    1460:	f8df 8154 	ldr.w	r8, [pc, #340]	; 15b8 <tickMappings+0x178>
    1464:	f8df 9154 	ldr.w	r9, [pc, #340]	; 15bc <tickMappings+0x17c>
    1468:	f898 2000 	ldrb.w	r2, [r8]
    146c:	4c4f      	ldr	r4, [pc, #316]	; (15ac <tickMappings+0x16c>)
    146e:	2a00      	cmp	r2, #0
    1470:	d07c      	beq.n	156c <tickMappings+0x12c>
    1472:	46a3      	mov	fp, r4
    1474:	464e      	mov	r6, r9
    1476:	2500      	movs	r5, #0
			for (int j = 0; j < mappings[i].numHooks; j++)
    1478:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    147c:	2800      	cmp	r0, #0
    147e:	f000 8086 	beq.w	158e <tickMappings+0x14e>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1482:	f8db 101c 	ldr.w	r1, [fp, #28]
    1486:	f8db 2000 	ldr.w	r2, [fp]
    148a:	edd1 7a00 	vldr	s15, [r1]
    148e:	ed92 7a00 	vldr	s14, [r2]
    1492:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    1496:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
    149a:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    149c:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
    14a0:	2b00      	cmp	r3, #0
    14a2:	d16e      	bne.n	1582 <tickMappings+0x142>
					unsmoothedValue += sum;
    14a4:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
    14a8:	eddf 7a41 	vldr	s15, [pc, #260]	; 15b0 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
    14ac:	2801      	cmp	r0, #1
    14ae:	d027      	beq.n	1500 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    14b0:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    14b4:	f8db 2008 	ldr.w	r2, [fp, #8]
    14b8:	ed91 7a00 	vldr	s14, [r1]
    14bc:	ed92 6a00 	vldr	s12, [r2]
    14c0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    14c4:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
    14c8:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    14ca:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
    14ce:	2b00      	cmp	r3, #0
    14d0:	d15a      	bne.n	1588 <tickMappings+0x148>
					unsmoothedValue += sum;
    14d2:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
    14d6:	2802      	cmp	r0, #2
    14d8:	d012      	beq.n	1500 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    14da:	f8db 1010 	ldr.w	r1, [fp, #16]
    14de:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    14e2:	ed91 7a00 	vldr	s14, [r1]
    14e6:	ed92 6a00 	vldr	s12, [r2]
    14ea:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    14ee:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
    14f2:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    14f4:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
    14f8:	2800      	cmp	r0, #0
    14fa:	d04d      	beq.n	1598 <tickMappings+0x158>
					smoothedValue += sum;
    14fc:	ee77 7a87 	vadd.f32	s15, s15, s14
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    1500:	f854 2c04 	ldr.w	r2, [r4, #-4]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    1504:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
    1506:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    150a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    150e:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    1512:	ee37 0a80 	vadd.f32	s0, s15, s0
    1516:	f004 fa83 	bl	5a20 <__tExpSmooth_setDest_veneer>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    151a:	4630      	mov	r0, r6
    151c:	f004 fa18 	bl	5950 <__tExpSmooth_tick_veneer>
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    1520:	f854 ac04 	ldr.w	sl, [r4, #-4]
    1524:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
    1528:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    152a:	f8da 2010 	ldr.w	r2, [sl, #16]
    152e:	4790      	blx	r2
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    1530:	f854 0c04 	ldr.w	r0, [r4, #-4]
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    1534:	1caa      	adds	r2, r5, #2
    1536:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    153a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    153e:	ed81 0a00 	vstr	s0, [r1]
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    1542:	4629      	mov	r1, r5
    1544:	ed92 0a00 	vldr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    1548:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    154a:	6942      	ldr	r2, [r0, #20]
    154c:	7e00      	ldrb	r0, [r0, #24]
    154e:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
    1550:	f898 2000 	ldrb.w	r2, [r8]
    1554:	42aa      	cmp	r2, r5
    1556:	dc8f      	bgt.n	1478 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
    1558:	4b13      	ldr	r3, [pc, #76]	; (15a8 <tickMappings+0x168>)
    155a:	3701      	adds	r7, #1
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	429f      	cmp	r7, r3
    1560:	da04      	bge.n	156c <tickMappings+0x12c>
    1562:	f109 0908 	add.w	r9, r9, #8
    1566:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
    1568:	2a00      	cmp	r2, #0
    156a:	d182      	bne.n	1472 <tickMappings+0x32>
	timeMap = DWT->CYCCNT - tempCount1;
    156c:	4b0d      	ldr	r3, [pc, #52]	; (15a4 <tickMappings+0x164>)
    156e:	9901      	ldr	r1, [sp, #4]
    1570:	685b      	ldr	r3, [r3, #4]
    1572:	4a10      	ldr	r2, [pc, #64]	; (15b4 <tickMappings+0x174>)
    1574:	1a5b      	subs	r3, r3, r1
    1576:	6013      	str	r3, [r2, #0]
}
    1578:	b003      	add	sp, #12
    157a:	ecbd 8b02 	vpop	{d8}
    157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
    1582:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 15b0 <tickMappings+0x170>
    1586:	e791      	b.n	14ac <tickMappings+0x6c>
					smoothedValue += sum;
    1588:	ee77 7a87 	vadd.f32	s15, s15, s14
    158c:	e7a3      	b.n	14d6 <tickMappings+0x96>
			float smoothedValue = 0.0f;
    158e:	eddf 7a08 	vldr	s15, [pc, #32]	; 15b0 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
    1592:	eeb0 8a67 	vmov.f32	s16, s15
    1596:	e7b3      	b.n	1500 <tickMappings+0xc0>
					unsmoothedValue += sum;
    1598:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
    159c:	e7b0      	b.n	1500 <tickMappings+0xc0>
    159e:	bf00      	nop
    15a0:	2001ad05 	.word	0x2001ad05
    15a4:	e0001000 	.word	0xe0001000
    15a8:	2001b6c8 	.word	0x2001b6c8
    15ac:	2001ad44 	.word	0x2001ad44
    15b0:	00000000 	.word	0x00000000
    15b4:	200179d4 	.word	0x200179d4
    15b8:	20000052 	.word	0x20000052
    15bc:	20005334 	.word	0x20005334

000015c0 <clipperGainSet>:
	param1[v][string] = fasterdbtoa(value * 24.0f);
    15c0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    15c4:	b538      	push	{r3, r4, r5, lr}
    15c6:	4605      	mov	r5, r0
    15c8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    15ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    15ce:	f004 f993 	bl	58f8 <__fasterdbtoa_veneer>
    15d2:	4b04      	ldr	r3, [pc, #16]	; (15e4 <clipperGainSet+0x24>)
    15d4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    15d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    15dc:	ed84 0a00 	vstr	s0, [r4]
}
    15e0:	bd38      	pop	{r3, r4, r5, pc}
    15e2:	bf00      	nop
    15e4:	20005504 	.word	0x20005504
    15e8:	f3af 8000 	nop.w
    15ec:	f3af 8000 	nop.w
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <wavefolderParam1>:
	param1[v][string] = fasterdbtoa(value * 12.0f);
    1600:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    1604:	b538      	push	{r3, r4, r5, lr}
    1606:	4605      	mov	r5, r0
    1608:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    160a:	ee20 0a27 	vmul.f32	s0, s0, s15
    160e:	f004 f973 	bl	58f8 <__fasterdbtoa_veneer>
    1612:	4b04      	ldr	r3, [pc, #16]	; (1624 <wavefolderParam1+0x24>)
    1614:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    161c:	ed84 0a00 	vstr	s0, [r4]
}
    1620:	bd38      	pop	{r3, r4, r5, pc}
    1622:	bf00      	nop
    1624:	20005504 	.word	0x20005504
    1628:	f3af 8000 	nop.w
    162c:	f3af 8000 	nop.w
    1630:	f3af 8000 	nop.w
    1634:	f3af 8000 	nop.w
    1638:	f3af 8000 	nop.w
    163c:	f3af 8000 	nop.w

00001640 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    1640:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1644:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1648:	4b07      	ldr	r3, [pc, #28]	; (1668 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    164a:	4808      	ldr	r0, [pc, #32]	; (166c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    164c:	ee70 6a27 	vadd.f32	s13, s0, s15
    1650:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    1654:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    1658:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    165c:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    1660:	ed83 7a00 	vstr	s14, [r3]
}
    1664:	4770      	bx	lr
    1666:	bf00      	nop
    1668:	20005120 	.word	0x20005120
    166c:	20005544 	.word	0x20005544
    1670:	f3af 8000 	nop.w
    1674:	f3af 8000 	nop.w
    1678:	f3af 8000 	nop.w
    167c:	f3af 8000 	nop.w

00001680 <tiltParam1>:
{
    1680:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1682:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    1686:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    168a:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    168e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    1692:	0084      	lsls	r4, r0, #2
{
    1694:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1698:	eee0 7a68 	vfms.f32	s15, s0, s17
    169c:	eeb0 0a67 	vmov.f32	s0, s15
    16a0:	f004 f92a 	bl	58f8 <__fasterdbtoa_veneer>
    16a4:	4808      	ldr	r0, [pc, #32]	; (16c8 <tiltParam1+0x48>)
    16a6:	4420      	add	r0, r4
    16a8:	f004 f976 	bl	5998 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    16ac:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    16b0:	eea8 0a28 	vfma.f32	s0, s16, s17
    16b4:	f004 f920 	bl	58f8 <__fasterdbtoa_veneer>
    16b8:	4804      	ldr	r0, [pc, #16]	; (16cc <tiltParam1+0x4c>)
}
    16ba:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    16be:	4420      	add	r0, r4
}
    16c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    16c4:	f004 b968 	b.w	5998 <__tVZFilter_setGain_veneer>
    16c8:	20005abc 	.word	0x20005abc
    16cc:	20005adc 	.word	0x20005adc
    16d0:	f3af 8000 	nop.w
    16d4:	f3af 8000 	nop.w
    16d8:	f3af 8000 	nop.w
    16dc:	f3af 8000 	nop.w

000016e0 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    16e0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    16e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 1718 <tiltParam2+0x38>
    16e8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 171c <tiltParam2+0x3c>
    16ec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 1720 <tiltParam2+0x40>
    16f0:	eee0 7a07 	vfma.f32	s15, s0, s14
    16f4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 1724 <tiltParam2+0x44>
{
    16f8:	b538      	push	{r3, r4, r5, lr}
    16fa:	4605      	mov	r5, r0
    16fc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    16fe:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
    1702:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    1706:	f002 ffbb 	bl	4680 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    170a:	4807      	ldr	r0, [pc, #28]	; (1728 <tiltParam2+0x48>)
    170c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
    1714:	f004 b8e4 	b.w	58e0 <__tVZFilter_setFreqFast_veneer>
    1718:	429a0000 	.word	0x429a0000
    171c:	420fb824 	.word	0x420fb824
    1720:	457ff000 	.word	0x457ff000
    1724:	00000000 	.word	0x00000000
    1728:	20000b34 	.word	0x20000b34
    172c:	f3af 8000 	nop.w
    1730:	f3af 8000 	nop.w
    1734:	f3af 8000 	nop.w
    1738:	f3af 8000 	nop.w
    173c:	f3af 8000 	nop.w

00001740 <tiltParam3>:
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    1740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <tiltParam3+0x20>)
    1746:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    174a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    174e:	ee30 0a07 	vadd.f32	s0, s0, s14
    1752:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1756:	ee20 0a27 	vmul.f32	s0, s0, s15
    175a:	f004 b891 	b.w	5880 <__tVZFilter_setResonance_veneer>
    175e:	bf00      	nop
    1760:	20000b34 	.word	0x20000b34
    1764:	f3af 8000 	nop.w
    1768:	f3af 8000 	nop.w
    176c:	f3af 8000 	nop.w
    1770:	f3af 8000 	nop.w
    1774:	f3af 8000 	nop.w
    1778:	f3af 8000 	nop.w
    177c:	f3af 8000 	nop.w

00001780 <tiltParam4>:
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1780:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    1784:	ed9f 7a09 	vldr	s14, [pc, #36]	; 17ac <tiltParam4+0x2c>
{
    1788:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    178a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    178e:	4605      	mov	r5, r0
    1790:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1792:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1796:	eeb0 0a67 	vmov.f32	s0, s15
    179a:	f004 f879 	bl	5890 <__fastdbtoa_veneer>
    179e:	4804      	ldr	r0, [pc, #16]	; (17b0 <tiltParam4+0x30>)
    17a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    17a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    17a8:	f004 b8f6 	b.w	5998 <__tVZFilter_setGain_veneer>
    17ac:	42080000 	.word	0x42080000
    17b0:	20000b34 	.word	0x20000b34
    17b4:	f3af 8000 	nop.w
    17b8:	f3af 8000 	nop.w
    17bc:	f3af 8000 	nop.w

000017c0 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    17c0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    17c4:	4b04      	ldr	r3, [pc, #16]	; (17d8 <compressorParam1+0x18>)
    17c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    17ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    17ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    17d2:	ed83 0a03 	vstr	s0, [r3, #12]
}
    17d6:	4770      	bx	lr
    17d8:	20000b54 	.word	0x20000b54
    17dc:	f3af 8000 	nop.w

000017e0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    17e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    17e4:	4b08      	ldr	r3, [pc, #32]	; (1808 <compressorParam2+0x28>)
    17e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    17ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    17ee:	eef0 7a47 	vmov.f32	s15, s14
    17f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    17f6:	eee0 7a26 	vfma.f32	s15, s0, s13
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    17fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
	comp[v][string]->R = ((value*10.0f)+1.0f);
    17fe:	edc3 7a04 	vstr	s15, [r3, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    1802:	edc3 6a07 	vstr	s13, [r3, #28]
}
    1806:	4770      	bx	lr
    1808:	20000b54 	.word	0x20000b54
    180c:	f3af 8000 	nop.w
    1810:	f3af 8000 	nop.w
    1814:	f3af 8000 	nop.w
    1818:	f3af 8000 	nop.w
    181c:	f3af 8000 	nop.w

00001820 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    1820:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    1824:	4b04      	ldr	r3, [pc, #16]	; (1838 <compressorParam3+0x18>)
    1826:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    182a:	ee20 0a27 	vmul.f32	s0, s0, s15
    182e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1832:	ed83 0a06 	vstr	s0, [r3, #24]
}
    1836:	4770      	bx	lr
    1838:	20000b54 	.word	0x20000b54
    183c:	f3af 8000 	nop.w

00001840 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1840:	4b0b      	ldr	r3, [pc, #44]	; (1870 <compressorParam4+0x30>)
    1842:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    1846:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1874 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    184a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    184e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1850:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    1854:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1858:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    185c:	ee20 0a07 	vmul.f32	s0, s0, s14
    1860:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1864:	f004 f8b8 	bl	59d8 <__fasterexpf_veneer>
    1868:	ed84 0a01 	vstr	s0, [r4, #4]
}
    186c:	bd10      	pop	{r4, pc}
    186e:	bf00      	nop
    1870:	20000b54 	.word	0x20000b54
    1874:	3a83126f 	.word	0x3a83126f
    1878:	f3af 8000 	nop.w
    187c:	f3af 8000 	nop.w

00001880 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1880:	4b0b      	ldr	r3, [pc, #44]	; (18b0 <compressorParam5+0x30>)
    1882:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    1886:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 18b4 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    188a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    188e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1890:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    1894:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1898:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    189c:	ee20 0a07 	vmul.f32	s0, s0, s14
    18a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    18a4:	f004 f898 	bl	59d8 <__fasterexpf_veneer>
    18a8:	ed84 0a02 	vstr	s0, [r4, #8]
}
    18ac:	bd10      	pop	{r4, pc}
    18ae:	bf00      	nop
    18b0:	20000b54 	.word	0x20000b54
    18b4:	3a83126f 	.word	0x3a83126f
    18b8:	f3af 8000 	nop.w
    18bc:	f3af 8000 	nop.w

000018c0 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    18c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    18c4:	4b05      	ldr	r3, [pc, #20]	; (18dc <offsetParam2+0x1c>)
    18c6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    18ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    18ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    18d2:	eee0 7a07 	vfma.f32	s15, s0, s14
    18d6:	edc3 7a00 	vstr	s15, [r3]
}
    18da:	4770      	bx	lr
    18dc:	20005524 	.word	0x20005524

000018e0 <param2Linear>:
	param2[v][string] = value;
    18e0:	4b03      	ldr	r3, [pc, #12]	; (18f0 <param2Linear+0x10>)
    18e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    18e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    18ea:	ed83 0a00 	vstr	s0, [r3]
}
    18ee:	4770      	bx	lr
    18f0:	20005524 	.word	0x20005524
    18f4:	f3af 8000 	nop.w
    18f8:	f3af 8000 	nop.w
    18fc:	f3af 8000 	nop.w

00001900 <param3Linear>:
	param3[v][string] = value;
    1900:	4b03      	ldr	r3, [pc, #12]	; (1910 <param3Linear+0x10>)
    1902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1906:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    190a:	ed83 0a00 	vstr	s0, [r3]
}
    190e:	4770      	bx	lr
    1910:	20005544 	.word	0x20005544
    1914:	f3af 8000 	nop.w
    1918:	f3af 8000 	nop.w
    191c:	f3af 8000 	nop.w

00001920 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    1920:	eddf 6a10 	vldr	s13, [pc, #64]	; 1964 <param3Soft+0x44>
    1924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1928:	eddf 7a0f 	vldr	s15, [pc, #60]	; 1968 <param3Soft+0x48>
    192c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1930:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 196c <param3Soft+0x4c>
    1934:	eee0 7a26 	vfma.f32	s15, s0, s13
    1938:	4a0d      	ldr	r2, [pc, #52]	; (1970 <param3Soft+0x50>)
    193a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    193e:	4b0d      	ldr	r3, [pc, #52]	; (1974 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    1940:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    1944:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1948:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    194c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    1950:	eee5 6a86 	vfma.f32	s13, s11, s12
    1954:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1958:	eec7 6a27 	vdiv.f32	s13, s14, s15
    195c:	edc1 6a00 	vstr	s13, [r1]
}
    1960:	4770      	bx	lr
    1962:	bf00      	nop
    1964:	3f7d70a4 	.word	0x3f7d70a4
    1968:	3c23d70a 	.word	0x3c23d70a
    196c:	3eaaaaaa 	.word	0x3eaaaaaa
    1970:	20005544 	.word	0x20005544
    1974:	20005a90 	.word	0x20005a90
    1978:	f3af 8000 	nop.w
    197c:	f3af 8000 	nop.w

00001980 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1980:	eddf 6a17 	vldr	s13, [pc, #92]	; 19e0 <param3Hard+0x60>
    1984:	eddf 7a17 	vldr	s15, [pc, #92]	; 19e4 <param3Hard+0x64>
    1988:	ed9f 7a17 	vldr	s14, [pc, #92]	; 19e8 <param3Hard+0x68>
    198c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    1990:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1992:	4b16      	ldr	r3, [pc, #88]	; (19ec <param3Hard+0x6c>)
    1994:	0045      	lsls	r5, r0, #1
    1996:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    199a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    199c:	ee27 0a87 	vmul.f32	s0, s15, s14
    19a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    19a4:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
    19a8:	f003 ff86 	bl	58b8 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    19ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
    19b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19b4:	d00a      	beq.n	19cc <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    19b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    19ba:	4b0d      	ldr	r3, [pc, #52]	; (19f0 <param3Hard+0x70>)
    19bc:	442c      	add	r4, r5
    19be:	eec7 7a00 	vdiv.f32	s15, s14, s0
    19c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    19c6:	edc4 7a00 	vstr	s15, [r4]
}
    19ca:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    19cc:	4b08      	ldr	r3, [pc, #32]	; (19f0 <param3Hard+0x70>)
    19ce:	442c      	add	r4, r5
    19d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 19f4 <param3Hard+0x74>
    19d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    19d8:	edc4 7a00 	vstr	s15, [r4]
}
    19dc:	bd38      	pop	{r3, r4, r5, pc}
    19de:	bf00      	nop
    19e0:	3f7d70a4 	.word	0x3f7d70a4
    19e4:	3c23d70a 	.word	0x3c23d70a
    19e8:	3fc90fdb 	.word	0x3fc90fdb
    19ec:	20005544 	.word	0x20005544
    19f0:	20005a70 	.word	0x20005a70
    19f4:	4479ffff 	.word	0x4479ffff
    19f8:	f3af 8000 	nop.w
    19fc:	f3af 8000 	nop.w

00001a00 <param4Linear>:
	param4[v][string] = value;
    1a00:	4b03      	ldr	r3, [pc, #12]	; (1a10 <param4Linear+0x10>)
    1a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1a06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1a0a:	ed83 0a00 	vstr	s0, [r3]
}
    1a0e:	4770      	bx	lr
    1a10:	20005564 	.word	0x20005564
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <param5Linear>:
	param5[v][string] = value;
    1a20:	4b03      	ldr	r3, [pc, #12]	; (1a30 <param5Linear+0x10>)
    1a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1a26:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1a2a:	ed83 0a00 	vstr	s0, [r3]
}
    1a2e:	4770      	bx	lr
    1a30:	20005584 	.word	0x20005584
    1a34:	f3af 8000 	nop.w
    1a38:	f3af 8000 	nop.w
    1a3c:	f3af 8000 	nop.w

00001a40 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    1a40:	4b03      	ldr	r3, [pc, #12]	; (1a50 <param2BC+0x10>)
    1a42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a4a:	f003 bef9 	b.w	5840 <__tCrusher_setQuality_veneer>
    1a4e:	bf00      	nop
    1a50:	20000b14 	.word	0x20000b14
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    1a60:	4a07      	ldr	r2, [pc, #28]	; (1a80 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    1a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    1a66:	eddf 7a07 	vldr	s15, [pc, #28]	; 1a84 <param3BC+0x24>
    1a6a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    1a6e:	4b06      	ldr	r3, [pc, #24]	; (1a88 <param3BC+0x28>)
    1a70:	eee7 7a00 	vfma.f32	s15, s14, s0
    1a74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a78:	eeb0 0a67 	vmov.f32	s0, s15
    1a7c:	f003 bf50 	b.w	5920 <__tCrusher_setSamplingRatio_veneer>
    1a80:	20000048 	.word	0x20000048
    1a84:	3c23d70a 	.word	0x3c23d70a
    1a88:	20000b14 	.word	0x20000b14
    1a8c:	f3af 8000 	nop.w
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    1aa0:	4b03      	ldr	r3, [pc, #12]	; (1ab0 <param4BC+0x10>)
    1aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1aaa:	f003 beed 	b.w	5888 <__tCrusher_setRound_veneer>
    1aae:	bf00      	nop
    1ab0:	20000b14 	.word	0x20000b14
    1ab4:	f3af 8000 	nop.w
    1ab8:	f3af 8000 	nop.w
    1abc:	f3af 8000 	nop.w

00001ac0 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    1ac0:	4b03      	ldr	r3, [pc, #12]	; (1ad0 <param5BC+0x10>)
    1ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1aca:	f003 bf89 	b.w	59e0 <__tCrusher_setOperation_veneer>
    1ace:	bf00      	nop
    1ad0:	20000b14 	.word	0x20000b14
    1ad4:	f3af 8000 	nop.w
    1ad8:	f3af 8000 	nop.w
    1adc:	f3af 8000 	nop.w

00001ae0 <fxMixSet>:
	fxMix[v][string] = value;
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <fxMixSet+0x10>)
    1ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ae6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1aea:	ed83 0a00 	vstr	s0, [r3]
}
    1aee:	4770      	bx	lr
    1af0:	200050a0 	.word	0x200050a0
    1af4:	f3af 8000 	nop.w
    1af8:	f3af 8000 	nop.w
    1afc:	f3af 8000 	nop.w

00001b00 <fxPostGainSet>:
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1b00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1b04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1b08:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1b0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    1b0e:	4605      	mov	r5, r0
    1b10:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1b12:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1b16:	eeb0 0a67 	vmov.f32	s0, s15
    1b1a:	f003 feed 	bl	58f8 <__fasterdbtoa_veneer>
    1b1e:	4b03      	ldr	r3, [pc, #12]	; (1b2c <fxPostGainSet+0x2c>)
    1b20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b24:	ed84 0a00 	vstr	s0, [r4]
}
    1b28:	bd38      	pop	{r3, r4, r5, pc}
    1b2a:	bf00      	nop
    1b2c:	200050c0 	.word	0x200050c0
    1b30:	f3af 8000 	nop.w
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <wavefolderTick>:
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1b40:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1b48:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    1b4c:	4a34      	ldr	r2, [pc, #208]	; (1c20 <wavefolderTick+0xe0>)
    1b4e:	ed9f 4a35 	vldr	s8, [pc, #212]	; 1c24 <wavefolderTick+0xe4>
    1b52:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    1b56:	eddf 3a34 	vldr	s7, [pc, #208]	; 1c28 <wavefolderTick+0xe8>
{
    1b5a:	b538      	push	{r3, r4, r5, lr}
    float fbSample = wfState[v][string];
    1b5c:	4d33      	ldr	r5, [pc, #204]	; (1c2c <wavefolderTick+0xec>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1b5e:	0084      	lsls	r4, r0, #2
    1b60:	4b33      	ldr	r3, [pc, #204]	; (1c30 <wavefolderTick+0xf0>)
    float fbSample = wfState[v][string];
    1b62:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1b66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    1b6a:	ed2d 8b02 	vpush	{d8}
    1b6e:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1b72:	ed93 6a00 	vldr	s12, [r3]
    1b76:	fe88 8a66 	vminnm.f32	s16, s16, s13
    1b7a:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1b7e:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
    1b82:	4b2c      	ldr	r3, [pc, #176]	; (1c34 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1b84:	ee30 0a06 	vadd.f32	s0, s0, s12
    1b88:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
    1b8c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    1b90:	4a29      	ldr	r2, [pc, #164]	; (1c38 <wavefolderTick+0xf8>)
    1b92:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1b96:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
    1b9a:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
    1b9e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1ba2:	4b26      	ldr	r3, [pc, #152]	; (1c3c <wavefolderTick+0xfc>)
    1ba4:	ee76 5ae5 	vsub.f32	s11, s13, s11
    1ba8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 1c40 <wavefolderTick+0x100>
    1bac:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
    1bb0:	ee67 7aa3 	vmul.f32	s15, s15, s7
    1bb4:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1bb8:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1bbc:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
    1bc0:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1bc4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1bc8:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    1bcc:	ee36 3ac5 	vsub.f32	s6, s13, s10
    1bd0:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1bd4:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    1bd8:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1bdc:	ee25 5a23 	vmul.f32	s10, s10, s7
    1be0:	ee76 6ae5 	vsub.f32	s13, s13, s11
    1be4:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1be8:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1bec:	eee7 7a05 	vfma.f32	s15, s14, s10
    1bf0:	eeb0 8a67 	vmov.f32	s16, s15
    1bf4:	f003 fe60 	bl	58b8 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    1bf8:	4b12      	ldr	r3, [pc, #72]	; (1c44 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1bfa:	4813      	ldr	r0, [pc, #76]	; (1c48 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1bfc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    1c00:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c02:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    1c04:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c08:	eee8 7ac0 	vfms.f32	s15, s17, s0
}
    1c0c:	ecbd 8b02 	vpop	{d8}
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1c10:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c14:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    1c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1c1c:	f003 be78 	b.w	5910 <__tHighpass_tick_veneer>
    1c20:	20005504 	.word	0x20005504
    1c24:	3eaaaaaa 	.word	0x3eaaaaaa
    1c28:	3fbffff8 	.word	0x3fbffff8
    1c2c:	20017a44 	.word	0x20017a44
    1c30:	20005524 	.word	0x20005524
    1c34:	20005544 	.word	0x20005544
    1c38:	20005564 	.word	0x20005564
    1c3c:	20005584 	.word	0x20005584
    1c40:	40c90fdb 	.word	0x40c90fdb
    1c44:	20005120 	.word	0x20005120
    1c48:	20000ed4 	.word	0x20000ed4
    1c4c:	f3af 8000 	nop.w
    1c50:	f3af 8000 	nop.w
    1c54:	f3af 8000 	nop.w
    1c58:	f3af 8000 	nop.w
    1c5c:	f3af 8000 	nop.w

00001c60 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    1c60:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    1c64:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1c7c <chorusParam1+0x1c>
    1c68:	4b05      	ldr	r3, [pc, #20]	; (1c80 <chorusParam1+0x20>)
    1c6a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1c6e:	eee0 7a07 	vfma.f32	s15, s0, s14
    1c72:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1c76:	edc3 7a00 	vstr	s15, [r3]
}
    1c7a:	4770      	bx	lr
    1c7c:	45b4a000 	.word	0x45b4a000
    1c80:	20005504 	.word	0x20005504
    1c84:	f3af 8000 	nop.w
    1c88:	f3af 8000 	nop.w
    1c8c:	f3af 8000 	nop.w
    1c90:	f3af 8000 	nop.w
    1c94:	f3af 8000 	nop.w
    1c98:	f3af 8000 	nop.w
    1c9c:	f3af 8000 	nop.w

00001ca0 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    1ca0:	eddf 7a05 	vldr	s15, [pc, #20]	; 1cb8 <chorusParam2+0x18>
    1ca4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ca8:	4b04      	ldr	r3, [pc, #16]	; (1cbc <chorusParam2+0x1c>)
    1caa:	ee20 0a27 	vmul.f32	s0, s0, s15
    1cae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1cb2:	ed83 0a00 	vstr	s0, [r3]
}
    1cb6:	4770      	bx	lr
    1cb8:	3dcccccd 	.word	0x3dcccccd
    1cbc:	20005524 	.word	0x20005524

00001cc0 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    1cc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1ce0 <chorusParam3+0x20>
    1cc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1cc8:	eddf 7a06 	vldr	s15, [pc, #24]	; 1ce4 <chorusParam3+0x24>
    1ccc:	4b06      	ldr	r3, [pc, #24]	; (1ce8 <chorusParam3+0x28>)
    1cce:	eee0 7a07 	vfma.f32	s15, s0, s14
    1cd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1cd6:	eeb0 0a67 	vmov.f32	s0, s15
    1cda:	f003 be15 	b.w	5908 <__tCycle_setFreq_veneer>
    1cde:	bf00      	nop
    1ce0:	3ecccccd 	.word	0x3ecccccd
    1ce4:	3c23d70a 	.word	0x3c23d70a
    1ce8:	20005438 	.word	0x20005438
    1cec:	f3af 8000 	nop.w
    1cf0:	f3af 8000 	nop.w
    1cf4:	f3af 8000 	nop.w
    1cf8:	f3af 8000 	nop.w
    1cfc:	f3af 8000 	nop.w

00001d00 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    1d00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1d20 <chorusParam4+0x20>
    1d04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1d08:	eddf 7a06 	vldr	s15, [pc, #24]	; 1d24 <chorusParam4+0x24>
    1d0c:	4b06      	ldr	r3, [pc, #24]	; (1d28 <chorusParam4+0x28>)
    1d0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    1d12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d16:	eeb0 0a67 	vmov.f32	s0, s15
    1d1a:	f003 bdf5 	b.w	5908 <__tCycle_setFreq_veneer>
    1d1e:	bf00      	nop
    1d20:	3ee38e37 	.word	0x3ee38e37
    1d24:	3c343958 	.word	0x3c343958
    1d28:	20005458 	.word	0x20005458
    1d2c:	f3af 8000 	nop.w
    1d30:	f3af 8000 	nop.w
    1d34:	f3af 8000 	nop.w
    1d38:	f3af 8000 	nop.w
    1d3c:	f3af 8000 	nop.w

00001d40 <chorusTick>:
}
    1d40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1d48 <chorusTick+0x8>
    1d44:	4770      	bx	lr
    1d46:	bf00      	nop
    1d48:	80000000 	.word	0x80000000
    1d4c:	f3af 8000 	nop.w
    1d50:	f3af 8000 	nop.w
    1d54:	f3af 8000 	nop.w
    1d58:	f3af 8000 	nop.w
    1d5c:	f3af 8000 	nop.w

00001d60 <shaperTick>:
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1d60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1d64:	4a0e      	ldr	r2, [pc, #56]	; (1da0 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    1d66:	4b0f      	ldr	r3, [pc, #60]	; (1da4 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1d68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    1d6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1d70:	edd2 7a00 	vldr	s15, [r2]
    1d74:	ee30 0a27 	vadd.f32	s0, s0, s15
    1d78:	edd3 7a00 	vldr	s15, [r3]
    1d7c:	4b0a      	ldr	r3, [pc, #40]	; (1da8 <shaperTick+0x48>)
{
    1d7e:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1d80:	008c      	lsls	r4, r1, #2
    1d82:	ee20 0a27 	vmul.f32	s0, s0, s15
    1d86:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1d8a:	edd1 0a00 	vldr	s1, [r1]
    1d8e:	f003 fe17 	bl	59c0 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1d92:	4806      	ldr	r0, [pc, #24]	; (1dac <shaperTick+0x4c>)
    1d94:	4420      	add	r0, r4
}
    1d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1d9a:	f003 bdb9 	b.w	5910 <__tHighpass_tick_veneer>
    1d9e:	bf00      	nop
    1da0:	20005524 	.word	0x20005524
    1da4:	20005504 	.word	0x20005504
    1da8:	20005544 	.word	0x20005544
    1dac:	20000ed4 	.word	0x20000ed4
    1db0:	f3af 8000 	nop.w
    1db4:	f3af 8000 	nop.w
    1db8:	f3af 8000 	nop.w
    1dbc:	f3af 8000 	nop.w

00001dc0 <blankTick>:
}
    1dc0:	4770      	bx	lr
    1dc2:	bf00      	nop
    1dc4:	f3af 8000 	nop.w
    1dc8:	f3af 8000 	nop.w
    1dcc:	f3af 8000 	nop.w
    1dd0:	f3af 8000 	nop.w
    1dd4:	f3af 8000 	nop.w
    1dd8:	f3af 8000 	nop.w
    1ddc:	f3af 8000 	nop.w

00001de0 <tiltFilterTick>:
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    1de0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1de4:	4b08      	ldr	r3, [pc, #32]	; (1e08 <tiltFilterTick+0x28>)
{
    1de6:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    1de8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1dec:	008c      	lsls	r4, r1, #2
    1dee:	f003 fd93 	bl	5918 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    1df2:	4806      	ldr	r0, [pc, #24]	; (1e0c <tiltFilterTick+0x2c>)
    1df4:	4420      	add	r0, r4
    1df6:	f003 fd8f 	bl	5918 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    1dfa:	4805      	ldr	r0, [pc, #20]	; (1e10 <tiltFilterTick+0x30>)
    1dfc:	4420      	add	r0, r4
}
    1dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    1e02:	f003 bd89 	b.w	5918 <__tVZFilter_tickEfficient_veneer>
    1e06:	bf00      	nop
    1e08:	20005abc 	.word	0x20005abc
    1e0c:	20005adc 	.word	0x20005adc
    1e10:	20000b34 	.word	0x20000b34
    1e14:	f3af 8000 	nop.w
    1e18:	f3af 8000 	nop.w
    1e1c:	f3af 8000 	nop.w

00001e20 <tanhTick>:
    float gain = param1[v][string];
    1e20:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = tanhf(sample + (param2[v][string]*gain));
    1e24:	4b10      	ldr	r3, [pc, #64]	; (1e68 <tanhTick+0x48>)
    1e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    1e2a:	4810      	ldr	r0, [pc, #64]	; (1e6c <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    1e2c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e30:	edd3 6a00 	vldr	s13, [r3]
    1e34:	eea6 0a87 	vfma.f32	s0, s13, s14
{
    1e38:	b510      	push	{r4, lr}
    float gain = param1[v][string];
    1e3a:	008c      	lsls	r4, r1, #2
    1e3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    1e40:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
    1e44:	ee27 0a80 	vmul.f32	s0, s15, s0
    1e48:	f003 fd46 	bl	58d8 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1e4c:	4808      	ldr	r0, [pc, #32]	; (1e70 <tanhTick+0x50>)
    1e4e:	4420      	add	r0, r4
    1e50:	f003 fd5e 	bl	5910 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    1e54:	4b07      	ldr	r3, [pc, #28]	; (1e74 <tanhTick+0x54>)
    1e56:	4423      	add	r3, r4
    1e58:	edd3 7a00 	vldr	s15, [r3]
}
    1e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    1e60:	ee20 0a27 	vmul.f32	s0, s0, s15
    1e64:	f003 bd38 	b.w	58d8 <__tanhf_veneer>
    1e68:	20005524 	.word	0x20005524
    1e6c:	20005504 	.word	0x20005504
    1e70:	20000ed4 	.word	0x20000ed4
    1e74:	20005564 	.word	0x20005564
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <softClipTick>:
    sample = sample * param1[v][string];
    1e80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    1e84:	4a19      	ldr	r2, [pc, #100]	; (1eec <softClipTick+0x6c>)
    float shape = param3[v][string];
    1e86:	4b1a      	ldr	r3, [pc, #104]	; (1ef0 <softClipTick+0x70>)
    sample = sample + param2[v][string];
    1e88:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1e8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1e90:	ed9f 7a18 	vldr	s14, [pc, #96]	; 1ef4 <softClipTick+0x74>
    float shape = param3[v][string];
    1e94:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e98:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    1e9c:	edd2 7a00 	vldr	s15, [r2]
    float shape = param3[v][string];
    1ea0:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
    1ea4:	4b14      	ldr	r3, [pc, #80]	; (1ef8 <softClipTick+0x78>)
    1ea6:	ee26 7a87 	vmul.f32	s14, s13, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1eaa:	4814      	ldr	r0, [pc, #80]	; (1efc <softClipTick+0x7c>)
        sample = sample * shapeDividerS[v][string];
    1eac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1eb0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
    1eb4:	b410      	push	{r4}
    sample = sample * param1[v][string];
    1eb6:	4c12      	ldr	r4, [pc, #72]	; (1f00 <softClipTick+0x80>)
    1eb8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    sample = sample + param2[v][string];
    1ebc:	ed94 5a00 	vldr	s10, [r4]
}
    1ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
    1ec4:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
    1ec8:	ed93 0a00 	vldr	s0, [r3]
    1ecc:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    1ed0:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    1ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
    1ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
    1edc:	ee36 7ac7 	vsub.f32	s14, s13, s14
    1ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1ee4:	ee27 0a80 	vmul.f32	s0, s15, s0
    1ee8:	f003 bd12 	b.w	5910 <__tHighpass_tick_veneer>
    1eec:	20005524 	.word	0x20005524
    1ef0:	20005544 	.word	0x20005544
    1ef4:	3eaaaaaa 	.word	0x3eaaaaaa
    1ef8:	20005a90 	.word	0x20005a90
    1efc:	20000ed4 	.word	0x20000ed4
    1f00:	20005504 	.word	0x20005504
    1f04:	f3af 8000 	nop.w
    1f08:	f3af 8000 	nop.w
    1f0c:	f3af 8000 	nop.w
    1f10:	f3af 8000 	nop.w
    1f14:	f3af 8000 	nop.w
    1f18:	f3af 8000 	nop.w
    1f1c:	f3af 8000 	nop.w

00001f20 <hardClipTick>:
    sample = sample * param1[v][string];
    1f20:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f24:	4a1a      	ldr	r2, [pc, #104]	; (1f90 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    1f26:	4b1b      	ldr	r3, [pc, #108]	; (1f94 <hardClipTick+0x74>)
    1f28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    1f2c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    1f30:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    1f34:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1f38:	edd2 5a00 	vldr	s11, [r2]
    1f3c:	edd3 7a00 	vldr	s15, [r3]
{
    1f40:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    1f42:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    1f46:	4e14      	ldr	r6, [pc, #80]	; (1f98 <hardClipTick+0x78>)
    sample = sample * param1[v][string];
    1f48:	0084      	lsls	r4, r0, #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    1f4a:	4d14      	ldr	r5, [pc, #80]	; (1f9c <hardClipTick+0x7c>)
    1f4c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    1f50:	4425      	add	r5, r4
    1f52:	ed96 7a00 	vldr	s14, [r6]
    1f56:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    1f5a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    1f5e:	ee27 0a87 	vmul.f32	s0, s15, s14
    1f62:	f003 fca9 	bl	58b8 <__arm_sin_f32_veneer>
    1f66:	ed96 7a00 	vldr	s14, [r6]
    1f6a:	edd5 7a00 	vldr	s15, [r5]
    1f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f72:	ee27 0a80 	vmul.f32	s0, s15, s0
    1f76:	f003 fc9f 	bl	58b8 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    1f7a:	edd5 7a00 	vldr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1f7e:	4808      	ldr	r0, [pc, #32]	; (1fa0 <hardClipTick+0x80>)
    1f80:	ee20 0a27 	vmul.f32	s0, s0, s15
    1f84:	4420      	add	r0, r4
}
    1f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1f8a:	f003 bcc1 	b.w	5910 <__tHighpass_tick_veneer>
    1f8e:	bf00      	nop
    1f90:	20005504 	.word	0x20005504
    1f94:	20005524 	.word	0x20005524
    1f98:	20005544 	.word	0x20005544
    1f9c:	20005a70 	.word	0x20005a70
    1fa0:	20000ed4 	.word	0x20000ed4
    1fa4:	f3af 8000 	nop.w
    1fa8:	f3af 8000 	nop.w
    1fac:	f3af 8000 	nop.w
    1fb0:	f3af 8000 	nop.w
    1fb4:	f3af 8000 	nop.w
    1fb8:	f3af 8000 	nop.w
    1fbc:	f3af 8000 	nop.w

00001fc0 <satTick>:
    sample = sample * param1[v][string];
    1fc0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    1fc4:	4b17      	ldr	r3, [pc, #92]	; (2024 <satTick+0x64>)
    sample = sample * param1[v][string];
    1fc6:	4a18      	ldr	r2, [pc, #96]	; (2028 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    1fc8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    1fcc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1fd0:	4816      	ldr	r0, [pc, #88]	; (202c <satTick+0x6c>)
    sample = sample * param1[v][string];
    1fd2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    1fd6:	ed93 7a00 	vldr	s14, [r3]
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1fda:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    1fde:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    1fe2:	eeb0 6a47 	vmov.f32	s12, s14
    1fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
    1fea:	eea7 6a80 	vfma.f32	s12, s15, s0
    1fee:	eea7 7a80 	vfma.f32	s14, s15, s0
{;
    1ff2:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    1ff4:	008c      	lsls	r4, r1, #2
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    1ff6:	eeb0 6ac6 	vabs.f32	s12, s12
    1ffa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1ffe:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2002:	ee36 6b05 	vadd.f64	d6, d6, d5
    2006:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    200a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    200e:	f003 fc7f 	bl	5910 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    2012:	4807      	ldr	r0, [pc, #28]	; (2030 <satTick+0x70>)
    2014:	4420      	add	r0, r4
    2016:	f003 fc7b 	bl	5910 <__tHighpass_tick_veneer>
}
    201a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    201e:	f003 bc8b 	b.w	5938 <__LEAF_tanh_veneer>
    2022:	bf00      	nop
    2024:	20005524 	.word	0x20005524
    2028:	20005504 	.word	0x20005504
    202c:	20000ed4 	.word	0x20000ed4
    2030:	20000ef4 	.word	0x20000ef4
    2034:	f3af 8000 	nop.w
    2038:	f3af 8000 	nop.w
    203c:	f3af 8000 	nop.w

00002040 <bcTick>:
    sample = sample * param1[v][string];
    2040:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2044:	4b05      	ldr	r3, [pc, #20]	; (205c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    2046:	4806      	ldr	r0, [pc, #24]	; (2060 <bcTick+0x20>)
    sample = sample * param1[v][string];
    2048:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    204c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    2050:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    2054:	ee20 0a27 	vmul.f32	s0, s0, s15
    2058:	f003 bc26 	b.w	58a8 <__tCrusher_tick_veneer>
    205c:	20005504 	.word	0x20005504
    2060:	20000b14 	.word	0x20000b14
    2064:	f3af 8000 	nop.w
    2068:	f3af 8000 	nop.w
    206c:	f3af 8000 	nop.w
    2070:	f3af 8000 	nop.w
    2074:	f3af 8000 	nop.w
    2078:	f3af 8000 	nop.w
    207c:	f3af 8000 	nop.w

00002080 <compressorTick>:
	return tCompressor_tick(&comp[v][string], sample);
    2080:	4b03      	ldr	r3, [pc, #12]	; (2090 <compressorTick+0x10>)
    2082:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2086:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    208a:	f003 bbe1 	b.w	5850 <__tCompressor_tick_veneer>
    208e:	bf00      	nop
    2090:	20000b54 	.word	0x20000b54
    2094:	f3af 8000 	nop.w
    2098:	f3af 8000 	nop.w
    209c:	f3af 8000 	nop.w

000020a0 <FXlowpassTick>:
	return tSVF_tick(&FXlowpass[v][string], sample);
    20a0:	4b03      	ldr	r3, [pc, #12]	; (20b0 <FXlowpassTick+0x10>)
    20a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    20a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    20aa:	f003 bc41 	b.w	5930 <__tSVF_tick_veneer>
    20ae:	bf00      	nop
    20b0:	20000964 	.word	0x20000964
    20b4:	f3af 8000 	nop.w
    20b8:	f3af 8000 	nop.w
    20bc:	f3af 8000 	nop.w

000020c0 <FXhighpassTick>:
	return tSVF_tick(&FXhighpass[v][string], sample);
    20c0:	4b03      	ldr	r3, [pc, #12]	; (20d0 <FXhighpassTick+0x10>)
    20c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    20c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    20ca:	f003 bc31 	b.w	5930 <__tSVF_tick_veneer>
    20ce:	bf00      	nop
    20d0:	20000944 	.word	0x20000944
    20d4:	f3af 8000 	nop.w
    20d8:	f3af 8000 	nop.w
    20dc:	f3af 8000 	nop.w

000020e0 <FXbandpassTick>:
	return tSVF_tick(&FXbandpass[v][string], sample);
    20e0:	4b03      	ldr	r3, [pc, #12]	; (20f0 <FXbandpassTick+0x10>)
    20e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    20e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    20ea:	f003 bc21 	b.w	5930 <__tSVF_tick_veneer>
    20ee:	bf00      	nop
    20f0:	20000904 	.word	0x20000904
    20f4:	f3af 8000 	nop.w
    20f8:	f3af 8000 	nop.w
    20fc:	f3af 8000 	nop.w

00002100 <FXdiodeLowpassTick>:
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    2100:	4b03      	ldr	r3, [pc, #12]	; (2110 <FXdiodeLowpassTick+0x10>)
    2102:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    210a:	f003 bc19 	b.w	5940 <__tDiodeFilter_tick_veneer>
    210e:	bf00      	nop
    2110:	20000924 	.word	0x20000924
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <FXVZpeakTick>:
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    2120:	4b03      	ldr	r3, [pc, #12]	; (2130 <FXVZpeakTick+0x10>)
    2122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    212a:	f003 bbf5 	b.w	5918 <__tVZFilter_tickEfficient_veneer>
    212e:	bf00      	nop
    2130:	200008e4 	.word	0x200008e4
    2134:	f3af 8000 	nop.w
    2138:	f3af 8000 	nop.w
    213c:	f3af 8000 	nop.w

00002140 <FXVZlowshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    2140:	4b03      	ldr	r3, [pc, #12]	; (2150 <FXVZlowshelfTick+0x10>)
    2142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    214a:	f003 bbe5 	b.w	5918 <__tVZFilter_tickEfficient_veneer>
    214e:	bf00      	nop
    2150:	200008c4 	.word	0x200008c4
    2154:	f3af 8000 	nop.w
    2158:	f3af 8000 	nop.w
    215c:	f3af 8000 	nop.w

00002160 <FXVZhighshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    2160:	4b03      	ldr	r3, [pc, #12]	; (2170 <FXVZhighshelfTick+0x10>)
    2162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    216a:	f003 bbd5 	b.w	5918 <__tVZFilter_tickEfficient_veneer>
    216e:	bf00      	nop
    2170:	200008a4 	.word	0x200008a4
    2174:	f3af 8000 	nop.w
    2178:	f3af 8000 	nop.w
    217c:	f3af 8000 	nop.w

00002180 <FXVZbandrejectTick>:
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    2180:	4b03      	ldr	r3, [pc, #12]	; (2190 <FXVZbandrejectTick+0x10>)
    2182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    218a:	f003 bbc5 	b.w	5918 <__tVZFilter_tickEfficient_veneer>
    218e:	bf00      	nop
    2190:	20000884 	.word	0x20000884
    2194:	f3af 8000 	nop.w
    2198:	f3af 8000 	nop.w
    219c:	f3af 8000 	nop.w

000021a0 <FXLadderLowpassTick>:
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    21a0:	4b03      	ldr	r3, [pc, #12]	; (21b0 <FXLadderLowpassTick+0x10>)
    21a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    21aa:	f003 bbe1 	b.w	5970 <__tLadderFilter_tick_veneer>
    21ae:	bf00      	nop
    21b0:	20000864 	.word	0x20000864
    21b4:	f3af 8000 	nop.w
    21b8:	f3af 8000 	nop.w
    21bc:	f3af 8000 	nop.w

000021c0 <noiseSetTilt>:
{
    21c0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    21c2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    21c6:	008c      	lsls	r4, r1, #2
{
    21c8:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    21cc:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    21d0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    21d4:	eee0 7a68 	vfms.f32	s15, s0, s17
    21d8:	eeb0 0a67 	vmov.f32	s0, s15
    21dc:	f003 fb58 	bl	5890 <__fastdbtoa_veneer>
    21e0:	4808      	ldr	r0, [pc, #32]	; (2204 <noiseSetTilt+0x44>)
    21e2:	4420      	add	r0, r4
    21e4:	f003 fbd8 	bl	5998 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    21e8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    21ec:	eea8 0a28 	vfma.f32	s0, s16, s17
    21f0:	f003 fb4e 	bl	5890 <__fastdbtoa_veneer>
    21f4:	4804      	ldr	r0, [pc, #16]	; (2208 <noiseSetTilt+0x48>)
}
    21f6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    21fa:	4420      	add	r0, r4
}
    21fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    2200:	f003 bbca 	b.w	5998 <__tVZFilter_setGain_veneer>
    2204:	200054ac 	.word	0x200054ac
    2208:	200054b4 	.word	0x200054b4
    220c:	f3af 8000 	nop.w
    2210:	f3af 8000 	nop.w
    2214:	f3af 8000 	nop.w
    2218:	f3af 8000 	nop.w
    221c:	f3af 8000 	nop.w

00002220 <noiseSetGain>:
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    2220:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    2224:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2248 <noiseSetGain+0x28>
{
    2228:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    222a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    222e:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    2230:	eeb0 0a67 	vmov.f32	s0, s15
    2234:	f003 fb2c 	bl	5890 <__fastdbtoa_veneer>
    2238:	4804      	ldr	r0, [pc, #16]	; (224c <noiseSetGain+0x2c>)
    223a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    223e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    2242:	f003 bba9 	b.w	5998 <__tVZFilter_setGain_veneer>
    2246:	bf00      	nop
    2248:	42080000 	.word	0x42080000
    224c:	2000548c 	.word	0x2000548c
    2250:	f3af 8000 	nop.w
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <noiseSetFreq>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2260:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2264:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2294 <noiseSetFreq+0x34>
    2268:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2298 <noiseSetFreq+0x38>
    226c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 229c <noiseSetFreq+0x3c>
    2270:	eee0 7a07 	vfma.f32	s15, s0, s14
    2274:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 22a0 <noiseSetFreq+0x40>
{
    2278:	b510      	push	{r4, lr}
    227a:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    227c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    2280:	f002 f9fe 	bl	4680 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    2284:	4807      	ldr	r0, [pc, #28]	; (22a4 <noiseSetFreq+0x44>)
    2286:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    228a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    228e:	f003 bb27 	b.w	58e0 <__tVZFilter_setFreqFast_veneer>
    2292:	bf00      	nop
    2294:	429a0000 	.word	0x429a0000
    2298:	420fb824 	.word	0x420fb824
    229c:	457ff000 	.word	0x457ff000
    22a0:	00000000 	.word	0x00000000
    22a4:	2000548c 	.word	0x2000548c
    22a8:	f3af 8000 	nop.w
    22ac:	f3af 8000 	nop.w
    22b0:	f3af 8000 	nop.w
    22b4:	f3af 8000 	nop.w
    22b8:	f3af 8000 	nop.w
    22bc:	f3af 8000 	nop.w

000022c0 <noise_tick>:
{
    22c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float sample = random_values[randomValPointer++];
    22c2:	4d27      	ldr	r5, [pc, #156]	; (2360 <noise_tick+0xa0>)
{
    22c4:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
    22c6:	4927      	ldr	r1, [pc, #156]	; (2364 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
    22c8:	4b27      	ldr	r3, [pc, #156]	; (2368 <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
    22ca:	4e28      	ldr	r6, [pc, #160]	; (236c <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    22cc:	4828      	ldr	r0, [pc, #160]	; (2370 <noise_tick+0xb0>)
	uint32_t tempCount9 = DWT->CYCCNT;
    22ce:	6877      	ldr	r7, [r6, #4]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    22d0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    22d4:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
    22d8:	782a      	ldrb	r2, [r5, #0]
    22da:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    22de:	3201      	adds	r2, #1
    22e0:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
    22e2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    22e6:	ed91 0a00 	vldr	s0, [r1]
    22ea:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
    22ec:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
    22f0:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
    22f4:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    22f8:	f003 fb0e 	bl	5918 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    22fc:	481d      	ldr	r0, [pc, #116]	; (2374 <noise_tick+0xb4>)
    22fe:	4428      	add	r0, r5
    2300:	f003 fb0a 	bl	5918 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    2304:	481c      	ldr	r0, [pc, #112]	; (2378 <noise_tick+0xb8>)
    2306:	4428      	add	r0, r5
    2308:	f003 fb06 	bl	5918 <__tVZFilter_tickEfficient_veneer>
	float normSample = (sample + 1.f) * 0.5f;
    230c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    2310:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 237c <noise_tick+0xbc>
	noiseOuts[0][string] = sample * filterSend *  enabled;
    2314:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    2318:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	uint32_t tempCount10 = DWT->CYCCNT;
    231c:	6873      	ldr	r3, [r6, #4]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    231e:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    2322:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    2326:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    232a:	4a15      	ldr	r2, [pc, #84]	; (2380 <noise_tick+0xc0>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    232c:	4815      	ldr	r0, [pc, #84]	; (2384 <noise_tick+0xc4>)
	timeRandom = tempCount10-tempCount9;
    232e:	1bdb      	subs	r3, r3, r7
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    2330:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    2334:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    2338:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    233c:	4405      	add	r5, r0
    233e:	ee27 7a00 	vmul.f32	s14, s14, s0
	timeRandom = tempCount10-tempCount9;
    2342:	4911      	ldr	r1, [pc, #68]	; (2388 <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    2344:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    2348:	ee67 7aa6 	vmul.f32	s15, s15, s13
	timeRandom = tempCount10-tempCount9;
    234c:	600b      	str	r3, [r1, #0]
	noiseOuts[0][string] = sample * filterSend *  enabled;
    234e:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    2352:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    2356:	edc2 7a06 	vstr	s15, [r2, #24]
}
    235a:	ecbd 8b04 	vpop	{d8-d9}
    235e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2360:	20005a3c 	.word	0x20005a3c
    2364:	2001c7dc 	.word	0x2001c7dc
    2368:	2001b6cc 	.word	0x2001b6cc
    236c:	e0001000 	.word	0xe0001000
    2370:	200054ac 	.word	0x200054ac
    2374:	200054b4 	.word	0x200054b4
    2378:	2000548c 	.word	0x2000548c
    237c:	00000000 	.word	0x00000000
    2380:	20017854 	.word	0x20017854
    2384:	2000549c 	.word	0x2000549c
    2388:	200179dc 	.word	0x200179dc
    238c:	f3af 8000 	nop.w
    2390:	f3af 8000 	nop.w
    2394:	f3af 8000 	nop.w
    2398:	f3af 8000 	nop.w
    239c:	f3af 8000 	nop.w

000023a0 <HAL_SAI_TxCpltCallback>:
	if (!diskBusy)
    23a0:	4b03      	ldr	r3, [pc, #12]	; (23b0 <HAL_SAI_TxCpltCallback+0x10>)
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	b103      	cbz	r3, 23a8 <HAL_SAI_TxCpltCallback+0x8>
}
    23a6:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
    23a8:	2004      	movs	r0, #4
    23aa:	f003 ba4d 	b.w	5848 <__audioFrame_veneer>
    23ae:	bf00      	nop
    23b0:	20018b88 	.word	0x20018b88
    23b4:	f3af 8000 	nop.w
    23b8:	f3af 8000 	nop.w
    23bc:	f3af 8000 	nop.w

000023c0 <HAL_SAI_TxHalfCpltCallback>:
	if (!diskBusy)
    23c0:	4b02      	ldr	r3, [pc, #8]	; (23cc <HAL_SAI_TxHalfCpltCallback+0xc>)
    23c2:	7818      	ldrb	r0, [r3, #0]
    23c4:	b100      	cbz	r0, 23c8 <HAL_SAI_TxHalfCpltCallback+0x8>
}
    23c6:	4770      	bx	lr
	audioFrame(0);
    23c8:	f003 ba3e 	b.w	5848 <__audioFrame_veneer>
    23cc:	20018b88 	.word	0x20018b88
	...

000023e0 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    23e0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    23e4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 23f4 <scaleOscPitch+0x14>
}
    23e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    23ec:	eeb0 0a67 	vmov.f32	s0, s15
    23f0:	4770      	bx	lr
    23f2:	bf00      	nop
    23f4:	42400000 	.word	0x42400000
    23f8:	f3af 8000 	nop.w
    23fc:	f3af 8000 	nop.w

00002400 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    2400:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2414 <scaleOscFine+0x14>
    2404:	eddf 7a04 	vldr	s15, [pc, #16]	; 2418 <scaleOscFine+0x18>
}
    2408:	eee0 7a07 	vfma.f32	s15, s0, s14
    240c:	eeb0 0a67 	vmov.f32	s0, s15
    2410:	4770      	bx	lr
    2412:	bf00      	nop
    2414:	43480000 	.word	0x43480000
    2418:	c2c80000 	.word	0xc2c80000
    241c:	f3af 8000 	nop.w

00002420 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    2420:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2434 <scaleOscFreq+0x14>
    2424:	eddf 7a04 	vldr	s15, [pc, #16]	; 2438 <scaleOscFreq+0x18>
}
    2428:	eee0 7a07 	vfma.f32	s15, s0, s14
    242c:	eeb0 0a67 	vmov.f32	s0, s15
    2430:	4770      	bx	lr
    2432:	bf00      	nop
    2434:	457a0000 	.word	0x457a0000
    2438:	c4fa0000 	.word	0xc4fa0000
    243c:	f3af 8000 	nop.w

00002440 <scaleFilterCutoff>:
	return (input * 127.0f);
    2440:	eddf 7a02 	vldr	s15, [pc, #8]	; 244c <scaleFilterCutoff+0xc>
}
    2444:	ee20 0a27 	vmul.f32	s0, s0, s15
    2448:	4770      	bx	lr
    244a:	bf00      	nop
    244c:	42fe0000 	.word	0x42fe0000
    2450:	f3af 8000 	nop.w
    2454:	f3af 8000 	nop.w
    2458:	f3af 8000 	nop.w
    245c:	f3af 8000 	nop.w

00002460 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    2460:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2474 <scaleFinalLowpass+0x14>
    2464:	eddf 7a04 	vldr	s15, [pc, #16]	; 2478 <scaleFinalLowpass+0x18>
}
    2468:	eee0 7a07 	vfma.f32	s15, s0, s14
    246c:	eeb0 0a67 	vmov.f32	s0, s15
    2470:	4770      	bx	lr
    2472:	bf00      	nop
    2474:	428c0000 	.word	0x428c0000
    2478:	42680000 	.word	0x42680000
    247c:	f3af 8000 	nop.w

00002480 <scaleDefault>:
{
    2480:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2484:	ed9f 0a02 	vldr	s0, [pc, #8]	; 2490 <scaleDefault+0x10>
    2488:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    248c:	f002 b8f8 	b.w	4680 <LEAF_clip>
    2490:	00000000 	.word	0x00000000
    2494:	f3af 8000 	nop.w
    2498:	f3af 8000 	nop.w
    249c:	f3af 8000 	nop.w

000024a0 <scaleTranspose>:
{
    24a0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    24a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24c4 <scaleTranspose+0x24>
    24a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    24ac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    24ae:	f002 f8e7 	bl	4680 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    24b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24c8 <scaleTranspose+0x28>
    24b6:	eddf 7a05 	vldr	s15, [pc, #20]	; 24cc <scaleTranspose+0x2c>
}
    24ba:	eee0 7a07 	vfma.f32	s15, s0, s14
    24be:	eeb0 0a67 	vmov.f32	s0, s15
    24c2:	bd08      	pop	{r3, pc}
    24c4:	00000000 	.word	0x00000000
    24c8:	42c00000 	.word	0x42c00000
    24cc:	c2400000 	.word	0xc2400000
    24d0:	f3af 8000 	nop.w
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <scalePitchBend>:
{
    24e0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    24e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24fc <scalePitchBend+0x1c>
    24e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    24ec:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    24ee:	f002 f8c7 	bl	4680 <LEAF_clip>
	return (input * 48.0f);
    24f2:	eddf 7a03 	vldr	s15, [pc, #12]	; 2500 <scalePitchBend+0x20>
}
    24f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    24fa:	bd08      	pop	{r3, pc}
    24fc:	00000000 	.word	0x00000000
    2500:	42400000 	.word	0x42400000
    2504:	f3af 8000 	nop.w
    2508:	f3af 8000 	nop.w
    250c:	f3af 8000 	nop.w
    2510:	f3af 8000 	nop.w
    2514:	f3af 8000 	nop.w
    2518:	f3af 8000 	nop.w
    251c:	f3af 8000 	nop.w

00002520 <scaleFilterResonance>:
{
    2520:	b510      	push	{r4, lr}
    2522:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    2526:	ed9f 9a21 	vldr	s18, [pc, #132]	; 25ac <scaleFilterResonance+0x8c>
{
    252a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    252e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2532:	eeb0 0a49 	vmov.f32	s0, s18
    2536:	f002 f8a3 	bl	4680 <LEAF_clip>
    253a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    253e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 25b0 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2542:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 25b4 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    2546:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    254a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    254e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2552:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2556:	1c63      	adds	r3, r4, #1
    2558:	ee00 3a90 	vmov	s1, r3
    255c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2560:	f002 f88e 	bl	4680 <LEAF_clip>
    2564:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2568:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    256c:	4b12      	ldr	r3, [pc, #72]	; (25b8 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    256e:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2572:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    257a:	ee38 8a27 	vadd.f32	s16, s16, s15
    257e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2582:	edd4 7a00 	vldr	s15, [r4]
    2586:	eeb0 0a49 	vmov.f32	s0, s18
    258a:	ed93 7a00 	vldr	s14, [r3]
    258e:	ee38 8a68 	vsub.f32	s16, s16, s17
    2592:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    2596:	ee60 0a87 	vmul.f32	s1, s1, s14
    259a:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    259e:	ecbd 8b04 	vpop	{d8-d9}
    25a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    25a6:	f002 b86b 	b.w	4680 <LEAF_clip>
    25aa:	bf00      	nop
    25ac:	3dcccccd 	.word	0x3dcccccd
    25b0:	44ffe000 	.word	0x44ffe000
    25b4:	00000000 	.word	0x00000000
    25b8:	2001cbdc 	.word	0x2001cbdc
    25bc:	f3af 8000 	nop.w

000025c0 <scaleEnvTimes>:
{
    25c0:	b510      	push	{r4, lr}
    25c2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    25c6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 263c <scaleEnvTimes+0x7c>
{
    25ca:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    25ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    25d2:	eeb0 0a68 	vmov.f32	s0, s17
    25d6:	f002 f853 	bl	4680 <LEAF_clip>
    25da:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    25de:	ed9f 1a18 	vldr	s2, [pc, #96]	; 2640 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    25e2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    25e6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    25ea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    25ee:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    25f2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    25f6:	1c63      	adds	r3, r4, #1
    25f8:	ee00 3a90 	vmov	s1, r3
    25fc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2600:	f002 f83e 	bl	4680 <LEAF_clip>
    2604:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    260c:	4b0d      	ldr	r3, [pc, #52]	; (2644 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    260e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2612:	ee10 2a10 	vmov	r2, s0
    2616:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    261a:	ee38 8a07 	vadd.f32	s16, s16, s14
    261e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2622:	ed94 7a00 	vldr	s14, [r4]
    2626:	ed93 0a00 	vldr	s0, [r3]
    262a:	ee38 8a68 	vsub.f32	s16, s16, s17
    262e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    2632:	eea7 0a08 	vfma.f32	s0, s14, s16
    2636:	ecbd 8b02 	vpop	{d8}
    263a:	bd10      	pop	{r4, pc}
    263c:	00000000 	.word	0x00000000
    2640:	44ffe000 	.word	0x44ffe000
    2644:	20018bdc 	.word	0x20018bdc
    2648:	f3af 8000 	nop.w
    264c:	f3af 8000 	nop.w
    2650:	f3af 8000 	nop.w
    2654:	f3af 8000 	nop.w
    2658:	f3af 8000 	nop.w
    265c:	f3af 8000 	nop.w

00002660 <scaleLFORates>:
{
    2660:	b510      	push	{r4, lr}
    2662:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    2666:	eddf 8a1d 	vldr	s17, [pc, #116]	; 26dc <scaleLFORates+0x7c>
{
    266a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    266e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2672:	eeb0 0a68 	vmov.f32	s0, s17
    2676:	f002 f803 	bl	4680 <LEAF_clip>
    267a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    267e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 26e0 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2682:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    2686:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    268a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    268e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2692:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2696:	1c63      	adds	r3, r4, #1
    2698:	ee00 3a90 	vmov	s1, r3
    269c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    26a0:	f001 ffee 	bl	4680 <LEAF_clip>
    26a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    26a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    26ac:	4b0d      	ldr	r3, [pc, #52]	; (26e4 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    26ae:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    26b2:	ee10 2a10 	vmov	r2, s0
    26b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    26ba:	ee38 8a07 	vadd.f32	s16, s16, s14
    26be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    26c2:	ed94 7a00 	vldr	s14, [r4]
    26c6:	ed93 0a00 	vldr	s0, [r3]
    26ca:	ee38 8a68 	vsub.f32	s16, s16, s17
    26ce:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    26d2:	eea7 0a08 	vfma.f32	s0, s14, s16
    26d6:	ecbd 8b02 	vpop	{d8}
    26da:	bd10      	pop	{r4, pc}
    26dc:	00000000 	.word	0x00000000
    26e0:	44ffe000 	.word	0x44ffe000
    26e4:	30038a20 	.word	0x30038a20
    26e8:	f3af 8000 	nop.w
    26ec:	f3af 8000 	nop.w
    26f0:	f3af 8000 	nop.w
    26f4:	f3af 8000 	nop.w
    26f8:	f3af 8000 	nop.w
    26fc:	f3af 8000 	nop.w

00002700 <handleSPI>:
{
    2700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	interruptChecker = 1;
    2704:	4bc7      	ldr	r3, [pc, #796]	; (2a24 <handleSPI+0x324>)
    2706:	2201      	movs	r2, #1
	if (SPI_LEVERS[offset] == ReceivingPitches)
    2708:	4dc7      	ldr	r5, [pc, #796]	; (2a28 <handleSPI+0x328>)
{
    270a:	4604      	mov	r4, r0
    270c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
    2710:	701a      	strb	r2, [r3, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
    2712:	5c2b      	ldrb	r3, [r5, r0]
    2714:	4293      	cmp	r3, r2
    2716:	f000 80c0 	beq.w	289a <handleSPI+0x19a>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
    271a:	2b02      	cmp	r3, #2
    271c:	f000 8097 	beq.w	284e <handleSPI+0x14e>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
    2720:	2b03      	cmp	r3, #3
    2722:	f000 81bc 	beq.w	2a9e <handleSPI+0x39e>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
    2726:	2bfd      	cmp	r3, #253	; 0xfd
    2728:	f000 81a2 	beq.w	2a70 <handleSPI+0x370>
		if (boardNumber == 0)
    272c:	4bbf      	ldr	r3, [pc, #764]	; (2a2c <handleSPI+0x32c>)
    272e:	781f      	ldrb	r7, [r3, #0]
    2730:	2f00      	cmp	r7, #0
    2732:	f040 8088 	bne.w	2846 <handleSPI+0x146>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    2736:	4ebe      	ldr	r6, [pc, #760]	; (2a30 <handleSPI+0x330>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    2738:	1928      	adds	r0, r5, r4
    273a:	23fd      	movs	r3, #253	; 0xfd
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    273c:	4dbd      	ldr	r5, [pc, #756]	; (2a34 <handleSPI+0x334>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    273e:	7834      	ldrb	r4, [r6, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    2740:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2744:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2748:	f8df c31c 	ldr.w	ip, [pc, #796]	; 2a68 <handleSPI+0x368>
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    274c:	f8df e31c 	ldr.w	lr, [pc, #796]	; 2a6c <handleSPI+0x36c>
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2750:	eb05 0243 	add.w	r2, r5, r3, lsl #1
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2754:	f89c 1000 	ldrb.w	r1, [ip]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2758:	ea4f 1803 	mov.w	r8, r3, lsl #4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    275c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2760:	005b      	lsls	r3, r3, #1
    2762:	5ceb      	ldrb	r3, [r5, r3]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2764:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2768:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    276c:	eb08 0545 	add.w	r5, r8, r5, lsl #1
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    2770:	7853      	ldrb	r3, [r2, #1]
    2772:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    2776:	7893      	ldrb	r3, [r2, #2]
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2778:	f892 8003 	ldrb.w	r8, [r2, #3]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    277c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2780:	eb0e 0305 	add.w	r3, lr, r5
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2784:	f880 8045 	strb.w	r8, [r0, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    2788:	f892 8004 	ldrb.w	r8, [r2, #4]
    278c:	f880 8046 	strb.w	r8, [r0, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    2790:	f892 8005 	ldrb.w	r8, [r2, #5]
    2794:	f880 8047 	strb.w	r8, [r0, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    2798:	f892 8006 	ldrb.w	r8, [r2, #6]
    279c:	f880 8048 	strb.w	r8, [r0, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    27a0:	f892 8007 	ldrb.w	r8, [r2, #7]
    27a4:	f880 8049 	strb.w	r8, [r0, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    27a8:	f892 8008 	ldrb.w	r8, [r2, #8]
    27ac:	f880 804a 	strb.w	r8, [r0, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    27b0:	f892 8009 	ldrb.w	r8, [r2, #9]
    27b4:	f880 804b 	strb.w	r8, [r0, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    27b8:	f892 800a 	ldrb.w	r8, [r2, #10]
    27bc:	f880 804c 	strb.w	r8, [r0, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    27c0:	f892 800b 	ldrb.w	r8, [r2, #11]
    27c4:	f880 804d 	strb.w	r8, [r0, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    27c8:	f892 800c 	ldrb.w	r8, [r2, #12]
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    27cc:	7b52      	ldrb	r2, [r2, #13]
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    27ce:	f880 804e 	strb.w	r8, [r0, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    27d2:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    27d6:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
			whichMacroToSendName = (whichMacroToSendName + 1);
    27da:	3101      	adds	r1, #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    27dc:	f81e 2005 	ldrb.w	r2, [lr, r5]
			whichMacroToSendName = (whichMacroToSendName + 1);
    27e0:	b2c9      	uxtb	r1, r1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    27e2:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    27e6:	785a      	ldrb	r2, [r3, #1]
			if (whichMacroToSendName >= 8)
    27e8:	2907      	cmp	r1, #7
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    27ea:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    27ee:	789a      	ldrb	r2, [r3, #2]
    27f0:	f880 2053 	strb.w	r2, [r0, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    27f4:	78da      	ldrb	r2, [r3, #3]
    27f6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    27fa:	791a      	ldrb	r2, [r3, #4]
    27fc:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    2800:	795a      	ldrb	r2, [r3, #5]
    2802:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    2806:	799a      	ldrb	r2, [r3, #6]
    2808:	f880 2057 	strb.w	r2, [r0, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    280c:	79da      	ldrb	r2, [r3, #7]
    280e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    2812:	7a1a      	ldrb	r2, [r3, #8]
    2814:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    2818:	7a5a      	ldrb	r2, [r3, #9]
    281a:	f880 205a 	strb.w	r2, [r0, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
    281e:	7a9a      	ldrb	r2, [r3, #10]
    2820:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
    2824:	7ada      	ldrb	r2, [r3, #11]
    2826:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    282a:	7b1a      	ldrb	r2, [r3, #12]
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    282c:	7b5b      	ldrb	r3, [r3, #13]
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    282e:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    2832:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
    2836:	f04f 03fe 	mov.w	r3, #254	; 0xfe
    283a:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
    283e:	f200 80e7 	bhi.w	2a10 <handleSPI+0x310>
			whichMacroToSendName = (whichMacroToSendName + 1);
    2842:	f88c 1000 	strb.w	r1, [ip]
}
    2846:	ecbd 8b02 	vpop	{d8}
    284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 if (writingState != ReceivingPreset)
    284e:	497a      	ldr	r1, [pc, #488]	; (2a38 <handleSPI+0x338>)
    2850:	7808      	ldrb	r0, [r1, #0]
    2852:	2802      	cmp	r0, #2
    2854:	f000 8121 	beq.w	2a9a <handleSPI+0x39a>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    2858:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
    285a:	4978      	ldr	r1, [pc, #480]	; (2a3c <handleSPI+0x33c>)
			 audioMasterLevel = 0.0f;
    285c:	4b78      	ldr	r3, [pc, #480]	; (2a40 <handleSPI+0x340>)
			 diskBusy = 1;
    285e:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
    2860:	2200      	movs	r2, #0
			 bufferPos = 0;
    2862:	4878      	ldr	r0, [pc, #480]	; (2a44 <handleSPI+0x344>)
			 audioMasterLevel = 0.0f;
    2864:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
    2866:	2300      	movs	r3, #0
    2868:	8003      	strh	r3, [r0, #0]
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    286a:	1ca6      	adds	r6, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
    286c:	192a      	adds	r2, r5, r4
    286e:	4976      	ldr	r1, [pc, #472]	; (2a48 <handleSPI+0x348>)
    2870:	b2f3      	uxtb	r3, r6
    2872:	7852      	ldrb	r2, [r2, #1]
    2874:	4e75      	ldr	r6, [pc, #468]	; (2a4c <handleSPI+0x34c>)
    2876:	700a      	strb	r2, [r1, #0]
		 for (int i = 0; i < 28; i++)
    2878:	1e59      	subs	r1, r3, #1
    287a:	441e      	add	r6, r3
    287c:	4f74      	ldr	r7, [pc, #464]	; (2a50 <handleSPI+0x350>)
    287e:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    2880:	8803      	ldrh	r3, [r0, #0]
    2882:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    2886:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
    2888:	42b1      	cmp	r1, r6
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    288a:	f103 0201 	add.w	r2, r3, #1
    288e:	f807 c003 	strb.w	ip, [r7, r3]
    2892:	b293      	uxth	r3, r2
    2894:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
    2896:	d1f3      	bne.n	2880 <handleSPI+0x180>
    2898:	e748      	b.n	272c <handleSPI+0x2c>
		 for (int i = 0; i < numStringsThisBoard; i++)
    289a:	4b6e      	ldr	r3, [pc, #440]	; (2a54 <handleSPI+0x354>)
    289c:	7818      	ldrb	r0, [r3, #0]
    289e:	2800      	cmp	r0, #0
    28a0:	f000 80b2 	beq.w	2a08 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    28a4:	496c      	ldr	r1, [pc, #432]	; (2a58 <handleSPI+0x358>)
		 uint8_t currentByte = offset+1;
    28a6:	18a3      	adds	r3, r4, r2
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    28a8:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 2a5c <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    28ac:	680a      	ldr	r2, [r1, #0]
    28ae:	b2db      	uxtb	r3, r3
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    28b0:	eddf 6a6b 	vldr	s13, [pc, #428]	; 2a60 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    28b4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    28b8:	5cd2      	ldrb	r2, [r2, r3]
    28ba:	0212      	lsls	r2, r2, #8
    28bc:	ee07 2a90 	vmov	s15, r2
    28c0:	680a      	ldr	r2, [r1, #0]
    28c2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    28c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    28ca:	441a      	add	r2, r3
    28cc:	7852      	ldrb	r2, [r2, #1]
    28ce:	ee07 2a90 	vmov	s15, r2
    28d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    28d6:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    28da:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    28de:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    28e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    28e6:	d507      	bpl.n	28f8 <handleSPI+0x1f8>
    28e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
    28ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    28f0:	dd02      	ble.n	28f8 <handleSPI+0x1f8>
				stringMIDIPitches[i] = myPitch;
    28f2:	4a5c      	ldr	r2, [pc, #368]	; (2a64 <handleSPI+0x364>)
    28f4:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
    28f8:	2801      	cmp	r0, #1
    28fa:	f000 8085 	beq.w	2a08 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    28fe:	680a      	ldr	r2, [r1, #0]
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2900:	ed9f 6a56 	vldr	s12, [pc, #344]	; 2a5c <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2904:	3201      	adds	r2, #1
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2906:	eddf 6a56 	vldr	s13, [pc, #344]	; 2a60 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    290a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    290e:	5cd2      	ldrb	r2, [r2, r3]
    2910:	0212      	lsls	r2, r2, #8
    2912:	ee07 2a90 	vmov	s15, r2
    2916:	680a      	ldr	r2, [r1, #0]
    2918:	3201      	adds	r2, #1
    291a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    291e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2922:	441a      	add	r2, r3
    2924:	7852      	ldrb	r2, [r2, #1]
    2926:	ee07 2a90 	vmov	s15, r2
    292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    292e:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2932:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2936:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    293e:	d507      	bpl.n	2950 <handleSPI+0x250>
    2940:	eeb5 7a40 	vcmp.f32	s14, #0.0
    2944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2948:	dd02      	ble.n	2950 <handleSPI+0x250>
				stringMIDIPitches[i] = myPitch;
    294a:	4a46      	ldr	r2, [pc, #280]	; (2a64 <handleSPI+0x364>)
    294c:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
    2950:	2802      	cmp	r0, #2
    2952:	d059      	beq.n	2a08 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    2954:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2956:	eddf 6a42 	vldr	s13, [pc, #264]	; 2a60 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    295a:	3202      	adds	r2, #2
    295c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2960:	5cd2      	ldrb	r2, [r2, r3]
    2962:	0212      	lsls	r2, r2, #8
    2964:	ee07 2a90 	vmov	s15, r2
    2968:	680a      	ldr	r2, [r1, #0]
    296a:	3202      	adds	r2, #2
    296c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2970:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    2974:	441a      	add	r2, r3
    2976:	7852      	ldrb	r2, [r2, #1]
    2978:	ee07 2a90 	vmov	s15, r2
    297c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2980:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2984:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2988:	eeb5 7a40 	vcmp.f32	s14, #0.0
    298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2990:	dd09      	ble.n	29a6 <handleSPI+0x2a6>
    2992:	eddf 6a32 	vldr	s13, [pc, #200]	; 2a5c <handleSPI+0x35c>
    2996:	eef4 7a66 	vcmp.f32	s15, s13
    299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    299e:	d502      	bpl.n	29a6 <handleSPI+0x2a6>
				stringMIDIPitches[i] = myPitch;
    29a0:	4a30      	ldr	r2, [pc, #192]	; (2a64 <handleSPI+0x364>)
    29a2:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
    29a6:	2803      	cmp	r0, #3
    29a8:	d02e      	beq.n	2a08 <handleSPI+0x308>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    29aa:	eddf 6a2d 	vldr	s13, [pc, #180]	; 2a60 <handleSPI+0x360>
		 for (int i = 0; i < numStringsThisBoard; i++)
    29ae:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    29b0:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 2a5c <handleSPI+0x35c>
    29b4:	4f2b      	ldr	r7, [pc, #172]	; (2a64 <handleSPI+0x364>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    29b6:	680a      	ldr	r2, [r1, #0]
    29b8:	4432      	add	r2, r6
    29ba:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    29be:	5cd2      	ldrb	r2, [r2, r3]
    29c0:	0212      	lsls	r2, r2, #8
    29c2:	ee07 2a90 	vmov	s15, r2
    29c6:	680a      	ldr	r2, [r1, #0]
    29c8:	4432      	add	r2, r6
    29ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    29ce:	3601      	adds	r6, #1
    29d0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    29d4:	441a      	add	r2, r3
    29d6:	7852      	ldrb	r2, [r2, #1]
    29d8:	ee07 2a90 	vmov	s15, r2
    29dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29e0:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    29e4:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    29e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
    29ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29f0:	dd06      	ble.n	2a00 <handleSPI+0x300>
    29f2:	eef4 7a46 	vcmp.f32	s15, s12
    29f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
    29fa:	bf48      	it	mi
    29fc:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
    2a00:	42b0      	cmp	r0, r6
    2a02:	f107 0704 	add.w	r7, r7, #4
    2a06:	dcd6      	bgt.n	29b6 <handleSPI+0x2b6>
		 updateStateFromSPIMessage(offset);
    2a08:	4620      	mov	r0, r4
    2a0a:	f002 fffd 	bl	5a08 <__updateStateFromSPIMessage_veneer>
    2a0e:	e68d      	b.n	272c <handleSPI+0x2c>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2a10:	3401      	adds	r4, #1
				whichMacroToSendName = 0;
    2a12:	f88c 7000 	strb.w	r7, [ip]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2a16:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    2a1a:	7034      	strb	r4, [r6, #0]
}
    2a1c:	ecbd 8b02 	vpop	{d8}
    2a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a24:	2001ad05 	.word	0x2001ad05
    2a28:	30014040 	.word	0x30014040
    2a2c:	20017b44 	.word	0x20017b44
    2a30:	2001ebdd 	.word	0x2001ebdd
    2a34:	300386a0 	.word	0x300386a0
    2a38:	2001ebde 	.word	0x2001ebde
    2a3c:	20018b88 	.word	0x20018b88
    2a40:	20000744 	.word	0x20000744
    2a44:	20018b48 	.word	0x20018b48
    2a48:	2001c7ce 	.word	0x2001c7ce
    2a4c:	3001405b 	.word	0x3001405b
    2a50:	20017b48 	.word	0x20017b48
    2a54:	20000052 	.word	0x20000052
    2a58:	20005078 	.word	0x20005078
    2a5c:	478bff74 	.word	0x478bff74
    2a60:	3b000080 	.word	0x3b000080
    2a64:	20017994 	.word	0x20017994
    2a68:	2001ebdc 	.word	0x2001ebdc
    2a6c:	3003aa20 	.word	0x3003aa20
		if(writingState == ReceivingPreset)
    2a70:	4b24      	ldr	r3, [pc, #144]	; (2b04 <handleSPI+0x404>)
    2a72:	781a      	ldrb	r2, [r3, #0]
    2a74:	2a02      	cmp	r2, #2
    2a76:	f47f ae59 	bne.w	272c <handleSPI+0x2c>
			 presetWaitingToParse = bufferPos;
    2a7a:	4923      	ldr	r1, [pc, #140]	; (2b08 <handleSPI+0x408>)
			 writingState = 0;
    2a7c:	2200      	movs	r2, #0
			 presetNumberToLoad = presetNumberToSave;
    2a7e:	4823      	ldr	r0, [pc, #140]	; (2b0c <handleSPI+0x40c>)
			 writingState = 0;
    2a80:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
    2a82:	7800      	ldrb	r0, [r0, #0]
			 presetWaitingToParse = bufferPos;
    2a84:	880a      	ldrh	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
    2a86:	880b      	ldrh	r3, [r1, #0]
			 presetNumberToLoad = presetNumberToSave;
    2a88:	4921      	ldr	r1, [pc, #132]	; (2b10 <handleSPI+0x410>)
			 presetWaitingToParse = bufferPos;
    2a8a:	b292      	uxth	r2, r2
			 presetWaitingToWrite = bufferPos;
    2a8c:	b29b      	uxth	r3, r3
			 presetNumberToLoad = presetNumberToSave;
    2a8e:	7008      	strb	r0, [r1, #0]
			 presetWaitingToParse = bufferPos;
    2a90:	4920      	ldr	r1, [pc, #128]	; (2b14 <handleSPI+0x414>)
    2a92:	600a      	str	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
    2a94:	4a20      	ldr	r2, [pc, #128]	; (2b18 <handleSPI+0x418>)
    2a96:	6013      	str	r3, [r2, #0]
    2a98:	e648      	b.n	272c <handleSPI+0x2c>
    2a9a:	481b      	ldr	r0, [pc, #108]	; (2b08 <handleSPI+0x408>)
    2a9c:	e6e5      	b.n	286a <handleSPI+0x16a>
		 uint8_t currentByte = offset+1;
    2a9e:	1c47      	adds	r7, r0, #1
    2aa0:	4e1e      	ldr	r6, [pc, #120]	; (2b1c <handleSPI+0x41c>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2aa2:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 2b20 <handleSPI+0x420>
    2aa6:	fa55 f787 	uxtab	r7, r5, r7
    2aaa:	f106 0830 	add.w	r8, r6, #48	; 0x30
    2aae:	f817 3b01 	ldrb.w	r3, [r7], #1
    2ab2:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
    2ab4:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2ab6:	ee00 3a10 	vmov	s0, r3
    2aba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    2abe:	ee20 0a08 	vmul.f32	s0, s0, s16
    2ac2:	f002 ffad 	bl	5a20 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 12; i++)
    2ac6:	4546      	cmp	r6, r8
    2ac8:	d1f1      	bne.n	2aae <handleSPI+0x3ae>
			currentByte += 12;
    2aca:	f104 070d 	add.w	r7, r4, #13
    2ace:	4e15      	ldr	r6, [pc, #84]	; (2b24 <handleSPI+0x424>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2ad0:	ed9f 8a13 	vldr	s16, [pc, #76]	; 2b20 <handleSPI+0x420>
    2ad4:	b2ff      	uxtb	r7, r7
    2ad6:	f106 0828 	add.w	r8, r6, #40	; 0x28
    2ada:	3f01      	subs	r7, #1
    2adc:	442f      	add	r7, r5
    2ade:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    2ae2:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    2ae4:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2ae6:	ee00 3a10 	vmov	s0, r3
    2aea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    2aee:	ee20 0a08 	vmul.f32	s0, s0, s16
    2af2:	f002 ff95 	bl	5a20 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    2af6:	4546      	cmp	r6, r8
    2af8:	d1f1      	bne.n	2ade <handleSPI+0x3de>
		 updateStateFromSPIMessage(offset);
    2afa:	4620      	mov	r0, r4
    2afc:	f002 ff84 	bl	5a08 <__updateStateFromSPIMessage_veneer>
    2b00:	e614      	b.n	272c <handleSPI+0x2c>
    2b02:	bf00      	nop
    2b04:	2001ebde 	.word	0x2001ebde
    2b08:	20018b48 	.word	0x20018b48
    2b0c:	2001c7ce 	.word	0x2001c7ce
    2b10:	2000074c 	.word	0x2000074c
    2b14:	2001c7d4 	.word	0x2001c7d4
    2b18:	2001c7d8 	.word	0x2001c7d8
    2b1c:	200051c0 	.word	0x200051c0
    2b20:	3b808081 	.word	0x3b808081
    2b24:	200055a4 	.word	0x200055a4
    2b28:	f3af 8000 	nop.w
    2b2c:	f3af 8000 	nop.w
    2b30:	f3af 8000 	nop.w
    2b34:	f3af 8000 	nop.w
    2b38:	f3af 8000 	nop.w
    2b3c:	f3af 8000 	nop.w

00002b40 <scaleTwo>:
{
    2b40:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2b44:	ed9f 0a04 	vldr	s0, [pc, #16]	; 2b58 <scaleTwo+0x18>
    2b48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    2b4c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    2b4e:	f001 fd97 	bl	4680 <LEAF_clip>
}
    2b52:	ee30 0a00 	vadd.f32	s0, s0, s0
    2b56:	bd08      	pop	{r3, pc}
    2b58:	00000000 	.word	0x00000000
    2b5c:	f3af 8000 	nop.w

00002b60 <parsePreset>:
{
    2b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b64:	b087      	sub	sp, #28
    2b66:	460e      	mov	r6, r1
    2b68:	9000      	str	r0, [sp, #0]
    2b6a:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2b6c:	b672      	cpsid	i
	 presetReady = 0;
    2b6e:	2500      	movs	r5, #0
    2b70:	4beb      	ldr	r3, [pc, #940]	; (2f20 <parsePreset+0x3c0>)
		presetName[i] = buffer[bufferIndex];
    2b72:	4cec      	ldr	r4, [pc, #944]	; (2f24 <parsePreset+0x3c4>)
		 audioOutBuffer[i] = 0;
    2b74:	2220      	movs	r2, #32
    2b76:	4629      	mov	r1, r5
    2b78:	48eb      	ldr	r0, [pc, #940]	; (2f28 <parsePreset+0x3c8>)
	audioMasterLevel = 0.0f;
    2b7a:	f04f 0b00 	mov.w	fp, #0
	 presetReady = 0;
    2b7e:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    2b80:	f002 fefe 	bl	5980 <__memset_veneer>
	audioMasterLevel = 0.0f;
    2b84:	49e9      	ldr	r1, [pc, #932]	; (2f2c <parsePreset+0x3cc>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b86:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
		presetName[i] = buffer[bufferIndex];
    2b8a:	78e6      	ldrb	r6, [r4, #3]
    2b8c:	4be8      	ldr	r3, [pc, #928]	; (2f30 <parsePreset+0x3d0>)
	audioMasterLevel = 0.0f;
    2b8e:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b92:	ea4f 0b40 	mov.w	fp, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
    2b96:	f894 c004 	ldrb.w	ip, [r4, #4]
    2b9a:	f894 a000 	ldrb.w	sl, [r4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b9e:	49e5      	ldr	r1, [pc, #916]	; (2f34 <parsePreset+0x3d4>)
    2ba0:	4ae4      	ldr	r2, [pc, #912]	; (2f34 <parsePreset+0x3d4>)
		presetName[i] = buffer[bufferIndex];
    2ba2:	9601      	str	r6, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2ba4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    2ba8:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
    2bac:	78a7      	ldrb	r7, [r4, #2]
    2bae:	f894 8001 	ldrb.w	r8, [r4, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2bb2:	9901      	ldr	r1, [sp, #4]
		presetName[i] = buffer[bufferIndex];
    2bb4:	f8cd c008 	str.w	ip, [sp, #8]
    2bb8:	f883 c004 	strb.w	ip, [r3, #4]
    2bbc:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2bc0:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
    2bc4:	f894 9007 	ldrb.w	r9, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2bc8:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
    2bca:	f894 e009 	ldrb.w	lr, [r4, #9]
    2bce:	70de      	strb	r6, [r3, #3]
    2bd0:	f883 c005 	strb.w	ip, [r3, #5]
    2bd4:	7a26      	ldrb	r6, [r4, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2bd6:	70d1      	strb	r1, [r2, #3]
		presetName[i] = buffer[bufferIndex];
    2bd8:	f8cd c00c 	str.w	ip, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2bdc:	9902      	ldr	r1, [sp, #8]
		presetName[i] = buffer[bufferIndex];
    2bde:	f894 c006 	ldrb.w	ip, [r4, #6]
    2be2:	709f      	strb	r7, [r3, #2]
    2be4:	f883 c006 	strb.w	ip, [r3, #6]
    2be8:	721e      	strb	r6, [r3, #8]
    2bea:	f883 a000 	strb.w	sl, [r3]
    2bee:	f883 8001 	strb.w	r8, [r3, #1]
    2bf2:	f8cd c010 	str.w	ip, [sp, #16]
    2bf6:	f883 9007 	strb.w	r9, [r3, #7]
    2bfa:	f894 c00a 	ldrb.w	ip, [r4, #10]
    2bfe:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2c02:	7111      	strb	r1, [r2, #4]
    2c04:	9903      	ldr	r1, [sp, #12]
		presetName[i] = buffer[bufferIndex];
    2c06:	7ae7      	ldrb	r7, [r4, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2c08:	7151      	strb	r1, [r2, #5]
    2c0a:	9904      	ldr	r1, [sp, #16]
		presetName[i] = buffer[bufferIndex];
    2c0c:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2c0e:	7191      	strb	r1, [r2, #6]
    2c10:	f882 9007 	strb.w	r9, [r2, #7]
    2c14:	7216      	strb	r6, [r2, #8]
    2c16:	f882 e009 	strb.w	lr, [r2, #9]
    2c1a:	f882 c00a 	strb.w	ip, [r2, #10]
    2c1e:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
    2c20:	7b27      	ldrb	r7, [r4, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2c22:	49c5      	ldr	r1, [pc, #788]	; (2f38 <parsePreset+0x3d8>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2c24:	7317      	strb	r7, [r2, #12]
		presetName[i] = buffer[bufferIndex];
    2c26:	731f      	strb	r7, [r3, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2c28:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    2c2c:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2c2e:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
    2c30:	f883 c00a 	strb.w	ip, [r3, #10]
    2c34:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2c36:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2c38:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2c3a:	540b      	strb	r3, [r1, r0]
    2c3c:	7be3      	ldrb	r3, [r4, #15]
    2c3e:	7073      	strb	r3, [r6, #1]
    2c40:	7c23      	ldrb	r3, [r4, #16]
    2c42:	70b3      	strb	r3, [r6, #2]
    2c44:	7c63      	ldrb	r3, [r4, #17]
    2c46:	70f3      	strb	r3, [r6, #3]
    2c48:	7ca3      	ldrb	r3, [r4, #18]
    2c4a:	7133      	strb	r3, [r6, #4]
    2c4c:	7ce3      	ldrb	r3, [r4, #19]
    2c4e:	7173      	strb	r3, [r6, #5]
    2c50:	7d23      	ldrb	r3, [r4, #20]
    2c52:	71b3      	strb	r3, [r6, #6]
    2c54:	7d63      	ldrb	r3, [r4, #21]
    2c56:	71f3      	strb	r3, [r6, #7]
    2c58:	7da3      	ldrb	r3, [r4, #22]
    2c5a:	7233      	strb	r3, [r6, #8]
    2c5c:	7de3      	ldrb	r3, [r4, #23]
    2c5e:	7273      	strb	r3, [r6, #9]
    2c60:	7e23      	ldrb	r3, [r4, #24]
    2c62:	72b3      	strb	r3, [r6, #10]
    2c64:	7e63      	ldrb	r3, [r4, #25]
    2c66:	72f3      	strb	r3, [r6, #11]
    2c68:	7ea3      	ldrb	r3, [r4, #26]
    2c6a:	7333      	strb	r3, [r6, #12]
    2c6c:	7ee3      	ldrb	r3, [r4, #27]
    2c6e:	7373      	strb	r3, [r6, #13]
    2c70:	7f23      	ldrb	r3, [r4, #28]
    2c72:	73b3      	strb	r3, [r6, #14]
    2c74:	7f63      	ldrb	r3, [r4, #29]
    2c76:	73f3      	strb	r3, [r6, #15]
    2c78:	7fa3      	ldrb	r3, [r4, #30]
    2c7a:	7433      	strb	r3, [r6, #16]
    2c7c:	7fe3      	ldrb	r3, [r4, #31]
    2c7e:	7473      	strb	r3, [r6, #17]
    2c80:	f894 3020 	ldrb.w	r3, [r4, #32]
    2c84:	74b3      	strb	r3, [r6, #18]
    2c86:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    2c8a:	74f3      	strb	r3, [r6, #19]
    2c8c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    2c90:	7533      	strb	r3, [r6, #20]
    2c92:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    2c96:	7573      	strb	r3, [r6, #21]
    2c98:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    2c9c:	75b3      	strb	r3, [r6, #22]
    2c9e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    2ca2:	75f3      	strb	r3, [r6, #23]
    2ca4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    2ca8:	7633      	strb	r3, [r6, #24]
    2caa:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    2cae:	7673      	strb	r3, [r6, #25]
    2cb0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2cb4:	76b3      	strb	r3, [r6, #26]
    2cb6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    2cba:	76f3      	strb	r3, [r6, #27]
    2cbc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    2cc0:	7733      	strb	r3, [r6, #28]
    2cc2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    2cc6:	7773      	strb	r3, [r6, #29]
    2cc8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2ccc:	77b3      	strb	r3, [r6, #30]
    2cce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    2cd2:	77f3      	strb	r3, [r6, #31]
    2cd4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2cd8:	f886 3020 	strb.w	r3, [r6, #32]
    2cdc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2ce0:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    2ce4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2ce8:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    2cec:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    2cf0:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
    2cf4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    2cf8:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    2cfc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2d00:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
    2d04:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2d08:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
    2d0c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    2d10:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
    2d14:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    2d18:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
    2d1c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    2d20:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
    2d24:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    2d28:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
    2d2c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    2d30:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
    2d34:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    2d38:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    2d3c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    2d40:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    2d44:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    2d48:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    2d4c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    2d50:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    2d54:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    2d58:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    2d5c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2d60:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
    2d64:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    2d68:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
    2d6c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2d70:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
    2d74:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2d78:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    2d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2d80:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    2d84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2d88:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    2d8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    2d90:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    2d94:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    2d98:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
    2d9c:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    2da0:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    2da4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    2da8:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
    2dac:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    2db0:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
    2db4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    2db8:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    2dbc:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2dc0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    2dc4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    2dc8:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    2dcc:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
    2dd0:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
    2dd4:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    2dd8:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    2ddc:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    2de0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    2de4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    2de8:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
    2dec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    2df0:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
    2df4:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
    2df8:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
    2dfc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
    2e00:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
    2e04:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    2e08:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
    2e0c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    2e10:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
    2e14:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    2e18:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
    2e1c:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    2e20:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
    2e24:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2e28:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
    2e2c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    2e30:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
    2e34:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    2e38:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
    2e3c:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    2e40:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
    2e44:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2e48:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
    2e4c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    2e50:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
    2e54:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    2e58:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    2e5c:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    2e60:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
    2e64:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    2e68:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
    2e6c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    2e70:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
    2e74:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    2e78:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
    2e7c:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
    2e80:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
    2e84:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2e88:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
    2e8c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2e90:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
    2e94:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    2e98:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
    2e9c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    2ea0:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
    2ea4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    2ea8:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
    2eac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    2eb0:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
    2eb4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2eb8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
    2ebc:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    2ec0:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    2ec4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    2ec8:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
    2ecc:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    2ed0:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
    2ed4:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
    2ed8:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
    2edc:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
    2ee0:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
    2ee4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    2ee8:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
    2eec:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2ef0:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
    2ef4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    2ef8:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
    2efc:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
    2f00:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
    2f04:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    2f08:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
    2f0c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2f10:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2f14:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
    2f18:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    2f1c:	e00e      	b.n	2f3c <parsePreset+0x3dc>
    2f1e:	bf00      	nop
    2f20:	200055e4 	.word	0x200055e4
    2f24:	20017b48 	.word	0x20017b48
    2f28:	30000000 	.word	0x30000000
    2f2c:	20000744 	.word	0x20000744
    2f30:	2001c7c0 	.word	0x2001c7c0
    2f34:	300386a0 	.word	0x300386a0
    2f38:	3003aa20 	.word	0x3003aa20
    2f3c:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
    2f40:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    2f44:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
    2f48:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    2f4c:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
    2f50:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    2f54:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2f58:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    2f5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2f60:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    2f64:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2f68:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2f6a:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
    2f6e:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
    2f72:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
    2f76:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
    2f7a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
    2f7e:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
    2f82:	9a00      	ldr	r2, [sp, #0]
    2f84:	4293      	cmp	r3, r2
    2f86:	dc0d      	bgt.n	2fa4 <parsePreset+0x444>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2f88:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
    2f8c:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2f90:	005f      	lsls	r7, r3, #1
    2f92:	f891 6080 	ldrb.w	r6, [r1, #128]	; 0x80
    2f96:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
    2f9a:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
    2f9e:	b292      	uxth	r2, r2
    2fa0:	4282      	cmp	r2, r0
    2fa2:	d009      	beq.n	2fb8 <parsePreset+0x458>
		presetWaitingToParse = 0;
    2fa4:	4ac4      	ldr	r2, [pc, #784]	; (32b8 <parsePreset+0x758>)
		audioMasterLevel = 1.0f;
    2fa6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2faa:	6015      	str	r5, [r2, #0]
		audioMasterLevel = 1.0f;
    2fac:	4ac3      	ldr	r2, [pc, #780]	; (32bc <parsePreset+0x75c>)
    2fae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    2fb0:	b662      	cpsie	i
}
    2fb2:	b007      	add	sp, #28
    2fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2fb8:	f891 0082 	ldrb.w	r0, [r1, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2fbc:	b2ba      	uxth	r2, r7
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2fbe:	f891 b083 	ldrb.w	fp, [r1, #131]	; 0x83
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2fc2:	f102 0184 	add.w	r1, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2fc6:	eb0b 2b00 	add.w	fp, fp, r0, lsl #8
    2fca:	fa1f fb8b 	uxth.w	fp, fp
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2fce:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
    2fd2:	b280      	uxth	r0, r0
    2fd4:	4401      	add	r1, r0
    2fd6:	9002      	str	r0, [sp, #8]
	if (mappingEndLocation > size)
    2fd8:	9800      	ldr	r0, [sp, #0]
    2fda:	b289      	uxth	r1, r1
    2fdc:	4281      	cmp	r1, r0
    2fde:	dce1      	bgt.n	2fa4 <parsePreset+0x444>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    2fe0:	1866      	adds	r6, r4, r1
    2fe2:	5c60      	ldrb	r0, [r4, r1]
    2fe4:	7871      	ldrb	r1, [r6, #1]
    2fe6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    2fea:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    2fee:	b289      	uxth	r1, r1
    2ff0:	4281      	cmp	r1, r0
    2ff2:	d1d7      	bne.n	2fa4 <parsePreset+0x444>
	for (int i = 0; i < paramCount; i++)
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	f001 81a5 	beq.w	4344 <parsePreset+0x17e4>
    2ffa:	48b1      	ldr	r0, [pc, #708]	; (32c0 <parsePreset+0x760>)
    2ffc:	3280      	adds	r2, #128	; 0x80
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2ffe:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 32c4 <parsePreset+0x764>
	bufferIndex = bufferIndex + 2;
    3002:	2180      	movs	r1, #128	; 0x80
    3004:	b297      	uxth	r7, r2
	for (int i = 0; i < paramCount; i++)
    3006:	4606      	mov	r6, r0
    3008:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    300a:	1c4a      	adds	r2, r1, #1
    300c:	f814 c001 	ldrb.w	ip, [r4, r1]
		bufferIndex += 2;
    3010:	3102      	adds	r1, #2
	for (int i = 0; i < paramCount; i++)
    3012:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3014:	b292      	uxth	r2, r2
		bufferIndex += 2;
    3016:	b289      	uxth	r1, r1
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3018:	5ca2      	ldrb	r2, [r4, r2]
	for (int i = 0; i < paramCount; i++)
    301a:	42b9      	cmp	r1, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    301c:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    3020:	ee07 2a90 	vmov	s15, r2
    3024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3028:	ee67 7a87 	vmul.f32	s15, s15, s14
    302c:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
    3030:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    3034:	d1e9      	bne.n	300a <parsePreset+0x4aa>
    3036:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
    303a:	4aa1      	ldr	r2, [pc, #644]	; (32c0 <parsePreset+0x760>)
    303c:	49a2      	ldr	r1, [pc, #648]	; (32c8 <parsePreset+0x768>)
    303e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
    3042:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    3044:	321c      	adds	r2, #28
    3046:	42aa      	cmp	r2, r5
    3048:	d1fb      	bne.n	3042 <parsePreset+0x4e2>
    304a:	4aa0      	ldr	r2, [pc, #640]	; (32cc <parsePreset+0x76c>)
		params[i].scaleFunc = &scaleDefault;
    304c:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    304e:	301c      	adds	r0, #28
    3050:	42a8      	cmp	r0, r5
    3052:	d1fb      	bne.n	304c <parsePreset+0x4ec>
	bufferIndex += 2;
    3054:	ea4f 0843 	mov.w	r8, r3, lsl #1
    3058:	f108 0884 	add.w	r8, r8, #132	; 0x84
    305c:	fa1f f888 	uxth.w	r8, r8
	for (int i = paramCount; i < NUM_PARAMS; i++)
    3060:	2b9a      	cmp	r3, #154	; 0x9a
    3062:	f301 816c 	bgt.w	433e <parsePreset+0x17de>
    3066:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    306a:	4d99      	ldr	r5, [pc, #612]	; (32d0 <parsePreset+0x770>)
    306c:	4996      	ldr	r1, [pc, #600]	; (32c8 <parsePreset+0x768>)
			params[i].zeroToOneVal[v] = 0.0f;
    306e:	2000      	movs	r0, #0
    3070:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3074:	4a95      	ldr	r2, [pc, #596]	; (32cc <parsePreset+0x76c>)
    3076:	6018      	str	r0, [r3, #0]
    3078:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
    307a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    307e:	331c      	adds	r3, #28
    3080:	42ab      	cmp	r3, r5
    3082:	d1f8      	bne.n	3076 <parsePreset+0x516>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    3084:	4b93      	ldr	r3, [pc, #588]	; (32d4 <parsePreset+0x774>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3086:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
    308a:	4993      	ldr	r1, [pc, #588]	; (32d8 <parsePreset+0x778>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    308c:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    3090:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    3094:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    3098:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    309c:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    30a0:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    30a4:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    30a8:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    30ac:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    30b0:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    30b4:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    30b8:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    30bc:	4b87      	ldr	r3, [pc, #540]	; (32dc <parsePreset+0x77c>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    30be:	4a88      	ldr	r2, [pc, #544]	; (32e0 <parsePreset+0x780>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    30c0:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    30c4:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    30c8:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    30cc:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    30d0:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    30d4:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    30d8:	4b82      	ldr	r3, [pc, #520]	; (32e4 <parsePreset+0x784>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    30da:	f8df a23c 	ldr.w	sl, [pc, #572]	; 3318 <parsePreset+0x7b8>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    30de:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    30e2:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    30e6:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    30ea:	4b7f      	ldr	r3, [pc, #508]	; (32e8 <parsePreset+0x788>)
	params[Transpose].scaleFunc = &scaleTranspose;
    30ec:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    30f0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    30f4:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    30f8:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    30fc:	4b7b      	ldr	r3, [pc, #492]	; (32ec <parsePreset+0x78c>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    30fe:	497c      	ldr	r1, [pc, #496]	; (32f0 <parsePreset+0x790>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    3100:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    3104:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    3108:	4b7a      	ldr	r3, [pc, #488]	; (32f4 <parsePreset+0x794>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    310a:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    310e:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    3112:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    3116:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    311a:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    311e:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    3122:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3126:	f6aa 1214 	subw	r2, sl, #2324	; 0x914
    312a:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    312e:	4a72      	ldr	r2, [pc, #456]	; (32f8 <parsePreset+0x798>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3130:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    3134:	f8ca 20cc 	str.w	r2, [sl, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3138:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    313c:	fef8 7a67 	vrinta.f32	s15, s15
    3140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3144:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3148:	f89d 2000 	ldrb.w	r2, [sp]
    314c:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    314e:	4a6b      	ldr	r2, [pc, #428]	; (32fc <parsePreset+0x79c>)
    3150:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    3154:	bf88      	it	hi
    3156:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    315a:	ee67 7a87 	vmul.f32	s15, s15, s14
    315e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    3162:	fef8 7a67 	vrinta.f32	s15, s15
    3166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    316a:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    316e:	f89d 2000 	ldrb.w	r2, [sp]
    3172:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3174:	4a62      	ldr	r2, [pc, #392]	; (3300 <parsePreset+0x7a0>)
    3176:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    317a:	bf88      	it	hi
    317c:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3180:	ee67 7a87 	vmul.f32	s15, s15, s14
    3184:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    3188:	fef8 7a67 	vrinta.f32	s15, s15
    318c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3190:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3194:	f89d 2000 	ldrb.w	r2, [sp]
    3198:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    319a:	4a5a      	ldr	r2, [pc, #360]	; (3304 <parsePreset+0x7a4>)
    319c:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    31a0:	bf88      	it	hi
    31a2:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    31a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    31aa:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    31ae:	fef8 7a67 	vrinta.f32	s15, s15
    31b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    31b6:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    31ba:	f89d 2000 	ldrb.w	r2, [sp]
    31be:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    31c0:	4a51      	ldr	r2, [pc, #324]	; (3308 <parsePreset+0x7a8>)
    31c2:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    31c6:	bf88      	it	hi
    31c8:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    31cc:	ee67 7a87 	vmul.f32	s15, s15, s14
    31d0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    31d4:	fef8 7a67 	vrinta.f32	s15, s15
    31d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    31dc:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    31e0:	f89d 2000 	ldrb.w	r2, [sp]
    31e4:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    31e6:	4a49      	ldr	r2, [pc, #292]	; (330c <parsePreset+0x7ac>)
    31e8:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    31ec:	bf88      	it	hi
    31ee:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    31f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    31f6:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    31fa:	fef8 7a67 	vrinta.f32	s15, s15
    31fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3202:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3206:	f89d 2000 	ldrb.w	r2, [sp]
    320a:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    320c:	4a40      	ldr	r2, [pc, #256]	; (3310 <parsePreset+0x7b0>)
    320e:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    3212:	bf88      	it	hi
    3214:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3218:	ee67 7a87 	vmul.f32	s15, s15, s14
    321c:	fef8 7a67 	vrinta.f32	s15, s15
    3220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3224:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3228:	f89d 2000 	ldrb.w	r2, [sp]
    322c:	2a0b      	cmp	r2, #11
    322e:	d901      	bls.n	3234 <parsePreset+0x6d4>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    3230:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3234:	4a37      	ldr	r2, [pc, #220]	; (3314 <parsePreset+0x7b4>)
    3236:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    323a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 32c0 <parsePreset+0x760>
    323e:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
    3242:	464f      	mov	r7, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    3244:	ee67 7a87 	vmul.f32	s15, s15, s14
    3248:	fef8 7a67 	vrinta.f32	s15, s15
    324c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3250:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    3254:	f89d 2000 	ldrb.w	r2, [sp]
    3258:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    325a:	bf88      	it	hi
    325c:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
    3260:	464e      	mov	r6, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    3262:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    3264:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    3266:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
    326a:	4798      	blx	r3
    326c:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    3270:	42af      	cmp	r7, r5
    3272:	d1f6      	bne.n	3262 <parsePreset+0x702>
    3274:	4f12      	ldr	r7, [pc, #72]	; (32c0 <parsePreset+0x760>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    3276:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    3278:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    327a:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
    327e:	4798      	blx	r3
    3280:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    3284:	42af      	cmp	r7, r5
    3286:	d1f6      	bne.n	3276 <parsePreset+0x716>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3288:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    328c:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
    3290:	ee67 7a87 	vmul.f32	s15, s15, s14
    3294:	fef8 7a67 	vrinta.f32	s15, s15
    3298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    329c:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
    32a0:	2b06      	cmp	r3, #6
    32a2:	d83e      	bhi.n	3322 <parsePreset+0x7c2>
    32a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    32a8:	081d003a 	.word	0x081d003a
    32ac:	08130818 	.word	0x08130818
    32b0:	0809080e 	.word	0x0809080e
    32b4:	0804      	.short	0x0804
    32b6:	bf00      	nop
    32b8:	2001c7d4 	.word	0x2001c7d4
    32bc:	20000744 	.word	0x20000744
    32c0:	2001b6cc 	.word	0x2001b6cc
    32c4:	377ffff6 	.word	0x377ffff6
    32c8:	24004105 	.word	0x24004105
    32cc:	00002481 	.word	0x00002481
    32d0:	2001c7c0 	.word	0x2001c7c0
    32d4:	000025c1 	.word	0x000025c1
    32d8:	000024a1 	.word	0x000024a1
    32dc:	000023e1 	.word	0x000023e1
    32e0:	00002661 	.word	0x00002661
    32e4:	00002401 	.word	0x00002401
    32e8:	00002421 	.word	0x00002421
    32ec:	00002441 	.word	0x00002441
    32f0:	000024e1 	.word	0x000024e1
    32f4:	00002521 	.word	0x00002521
    32f8:	00002461 	.word	0x00002461
    32fc:	2001bdbc 	.word	0x2001bdbc
    3300:	2001be98 	.word	0x2001be98
    3304:	2001be9c 	.word	0x2001be9c
    3308:	2001bf78 	.word	0x2001bf78
    330c:	2001bf7c 	.word	0x2001bf7c
    3310:	2001c058 	.word	0x2001c058
    3314:	2001c05c 	.word	0x2001c05c
    3318:	2001c6cc 	.word	0x2001c6cc
				  shapeTick[i] = &sawSquareTick;
    331c:	4b8e      	ldr	r3, [pc, #568]	; (3558 <parsePreset+0x9f8>)
    331e:	4a8f      	ldr	r2, [pc, #572]	; (355c <parsePreset+0x9fc>)
    3320:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3322:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3326:	4b8e      	ldr	r3, [pc, #568]	; (3560 <parsePreset+0xa00>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3328:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    332c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    3330:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3334:	edd3 7a00 	vldr	s15, [r3]
    3338:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3340:	fef8 7a67 	vrinta.f32	s15, s15
    3344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
    3348:	bfcc      	ite	gt
    334a:	2301      	movgt	r3, #1
    334c:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    334e:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    3352:	2a06      	cmp	r2, #6
    3354:	d80b      	bhi.n	336e <parsePreset+0x80e>
    3356:	e8df f012 	tbh	[pc, r2, lsl #1]
    335a:	0007      	.short	0x0007
    335c:	07a107a6 	.word	0x07a107a6
    3360:	0797079c 	.word	0x0797079c
    3364:	078d0792 	.word	0x078d0792
				  shapeTick[i] = &sawSquareTick;
    3368:	4a7b      	ldr	r2, [pc, #492]	; (3558 <parsePreset+0x9f8>)
    336a:	497c      	ldr	r1, [pc, #496]	; (355c <parsePreset+0x9fc>)
    336c:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    336e:	4a7d      	ldr	r2, [pc, #500]	; (3564 <parsePreset+0xa04>)
    3370:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3374:	ed92 7a00 	vldr	s14, [r2]
    3378:	eeb4 7ae7 	vcmpe.f32	s14, s15
    337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3380:	dd01      	ble.n	3386 <parsePreset+0x826>
			enabledCount++;
    3382:	3301      	adds	r3, #1
    3384:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    3386:	4a78      	ldr	r2, [pc, #480]	; (3568 <parsePreset+0xa08>)
    3388:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    338c:	edd2 7a00 	vldr	s15, [r2]
    3390:	ee67 7a87 	vmul.f32	s15, s15, s14
    3394:	fef8 7a67 	vrinta.f32	s15, s15
    3398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    339c:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    33a0:	2a06      	cmp	r2, #6
    33a2:	d80b      	bhi.n	33bc <parsePreset+0x85c>
    33a4:	e8df f012 	tbh	[pc, r2, lsl #1]
    33a8:	07610007 	.word	0x07610007
    33ac:	0757075c 	.word	0x0757075c
    33b0:	074d0752 	.word	0x074d0752
    33b4:	0748      	.short	0x0748
				  shapeTick[i] = &sawSquareTick;
    33b6:	4a68      	ldr	r2, [pc, #416]	; (3558 <parsePreset+0x9f8>)
    33b8:	4968      	ldr	r1, [pc, #416]	; (355c <parsePreset+0x9fc>)
    33ba:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    33bc:	4a6b      	ldr	r2, [pc, #428]	; (356c <parsePreset+0xa0c>)
    33be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    33c2:	ed92 7a00 	vldr	s14, [r2]
    33c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    33ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33ce:	dd01      	ble.n	33d4 <parsePreset+0x874>
			enabledCount++;
    33d0:	3301      	adds	r3, #1
    33d2:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    33d4:	4a66      	ldr	r2, [pc, #408]	; (3570 <parsePreset+0xa10>)
    33d6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    33da:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    33de:	4a65      	ldr	r2, [pc, #404]	; (3574 <parsePreset+0xa14>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    33e0:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
    33e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33e8:	4a63      	ldr	r2, [pc, #396]	; (3578 <parsePreset+0xa18>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    33ea:	fef8 7a67 	vrinta.f32	s15, s15
    33ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    33f2:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    33f4:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    33f8:	6011      	str	r1, [r2, #0]
		switch (filterType)
    33fa:	4960      	ldr	r1, [pc, #384]	; (357c <parsePreset+0xa1c>)
    33fc:	2b08      	cmp	r3, #8
    33fe:	d811      	bhi.n	3424 <parsePreset+0x8c4>
    3400:	e8df f013 	tbh	[pc, r3, lsl #1]
    3404:	07110009 	.word	0x07110009
    3408:	06ff0708 	.word	0x06ff0708
    340c:	06ed06f6 	.word	0x06ed06f6
    3410:	06db06e4 	.word	0x06db06e4
    3414:	06d2      	.short	0x06d2
				  filterTick[i] = &lowpassTick;
    3416:	4b5a      	ldr	r3, [pc, #360]	; (3580 <parsePreset+0xa20>)
    3418:	4a5a      	ldr	r2, [pc, #360]	; (3584 <parsePreset+0xa24>)
    341a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
    341c:	4b5a      	ldr	r3, [pc, #360]	; (3588 <parsePreset+0xa28>)
    341e:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
    3420:	4b5a      	ldr	r3, [pc, #360]	; (358c <parsePreset+0xa2c>)
    3422:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    3424:	4b5a      	ldr	r3, [pc, #360]	; (3590 <parsePreset+0xa30>)
    3426:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    342a:	edd3 7a00 	vldr	s15, [r3]
    342e:	ee67 7a87 	vmul.f32	s15, s15, s14
    3432:	fef8 7a67 	vrinta.f32	s15, s15
    3436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    343a:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
    343e:	2b08      	cmp	r3, #8
    3440:	d811      	bhi.n	3466 <parsePreset+0x906>
    3442:	e8df f013 	tbh	[pc, r3, lsl #1]
    3446:	0009      	.short	0x0009
    3448:	069f06a8 	.word	0x069f06a8
    344c:	068d0696 	.word	0x068d0696
    3450:	067b0684 	.word	0x067b0684
    3454:	06690672 	.word	0x06690672
				  filterTick[i] = &lowpassTick;
    3458:	4b49      	ldr	r3, [pc, #292]	; (3580 <parsePreset+0xa20>)
    345a:	4a4a      	ldr	r2, [pc, #296]	; (3584 <parsePreset+0xa24>)
    345c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
    345e:	4b4a      	ldr	r3, [pc, #296]	; (3588 <parsePreset+0xa28>)
    3460:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
    3462:	4b4a      	ldr	r3, [pc, #296]	; (358c <parsePreset+0xa2c>)
    3464:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    3466:	4b4b      	ldr	r3, [pc, #300]	; (3594 <parsePreset+0xa34>)
    3468:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    346c:	edd3 7a00 	vldr	s15, [r3]
    3470:	ee67 7a87 	vmul.f32	s15, s15, s14
    3474:	fef8 7a67 	vrinta.f32	s15, s15
    3478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    347c:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3480:	2b05      	cmp	r3, #5
    3482:	f200 87dc 	bhi.w	443e <parsePreset+0x18de>
    3486:	e8df f013 	tbh	[pc, r3, lsl #1]
    348a:	063b      	.short	0x063b
    348c:	05c9062f 	.word	0x05c9062f
    3490:	05b105bd 	.word	0x05b105bd
    3494:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    3496:	4b40      	ldr	r3, [pc, #256]	; (3598 <parsePreset+0xa38>)
    3498:	4840      	ldr	r0, [pc, #256]	; (359c <parsePreset+0xa3c>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
    349a:	4a41      	ldr	r2, [pc, #260]	; (35a0 <parsePreset+0xa40>)
				lfoShapeTick[i] = &lfoPulseTick;
    349c:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    349e:	4b41      	ldr	r3, [pc, #260]	; (35a4 <parsePreset+0xa44>)
    34a0:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    34a2:	4b41      	ldr	r3, [pc, #260]	; (35a8 <parsePreset+0xa48>)
    34a4:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    34a6:	4b41      	ldr	r3, [pc, #260]	; (35ac <parsePreset+0xa4c>)
    34a8:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    34aa:	4b41      	ldr	r3, [pc, #260]	; (35b0 <parsePreset+0xa50>)
    34ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    34b0:	edd3 7a00 	vldr	s15, [r3]
    34b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    34b8:	fef8 7a67 	vrinta.f32	s15, s15
    34bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    34c0:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    34c4:	2b05      	cmp	r3, #5
    34c6:	d810      	bhi.n	34ea <parsePreset+0x98a>
    34c8:	e8df f013 	tbh	[pc, r3, lsl #1]
    34cc:	057a0585 	.word	0x057a0585
    34d0:	0564056f 	.word	0x0564056f
    34d4:	0006054e 	.word	0x0006054e
				lfoShapeTick[i] = &lfoPulseTick;
    34d8:	4b2f      	ldr	r3, [pc, #188]	; (3598 <parsePreset+0xa38>)
    34da:	4830      	ldr	r0, [pc, #192]	; (359c <parsePreset+0xa3c>)
    34dc:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    34de:	4b31      	ldr	r3, [pc, #196]	; (35a4 <parsePreset+0xa44>)
    34e0:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    34e2:	4b31      	ldr	r3, [pc, #196]	; (35a8 <parsePreset+0xa48>)
    34e4:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    34e6:	4b31      	ldr	r3, [pc, #196]	; (35ac <parsePreset+0xa4c>)
    34e8:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    34ea:	4b32      	ldr	r3, [pc, #200]	; (35b4 <parsePreset+0xa54>)
    34ec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    34f0:	edd3 7a00 	vldr	s15, [r3]
    34f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    34f8:	fef8 7a67 	vrinta.f32	s15, s15
    34fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3500:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3504:	2b05      	cmp	r3, #5
    3506:	d810      	bhi.n	352a <parsePreset+0x9ca>
    3508:	e8df f013 	tbh	[pc, r3, lsl #1]
    350c:	05230539 	.word	0x05230539
    3510:	050d0518 	.word	0x050d0518
    3514:	000604ec 	.word	0x000604ec
				lfoShapeTick[i] = &lfoPulseTick;
    3518:	4b1f      	ldr	r3, [pc, #124]	; (3598 <parsePreset+0xa38>)
    351a:	4820      	ldr	r0, [pc, #128]	; (359c <parsePreset+0xa3c>)
    351c:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    351e:	4b21      	ldr	r3, [pc, #132]	; (35a4 <parsePreset+0xa44>)
    3520:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    3522:	4b21      	ldr	r3, [pc, #132]	; (35a8 <parsePreset+0xa48>)
    3524:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    3526:	4b21      	ldr	r3, [pc, #132]	; (35ac <parsePreset+0xa4c>)
    3528:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    352a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    352e:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
    3532:	ee67 7a87 	vmul.f32	s15, s15, s14
    3536:	fef8 7a67 	vrinta.f32	s15, s15
    353a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    353e:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3542:	2b05      	cmp	r3, #5
    3544:	d841      	bhi.n	35ca <parsePreset+0xa6a>
    3546:	e8df f013 	tbh	[pc, r3, lsl #1]
    354a:	04e3      	.short	0x04e3
    354c:	04c204d8 	.word	0x04c204d8
    3550:	04ac04b7 	.word	0x04ac04b7
    3554:	0037      	.short	0x0037
    3556:	bf00      	nop
    3558:	20005ab0 	.word	0x20005ab0
    355c:	000005a1 	.word	0x000005a1
    3560:	2001bc14 	.word	0x2001bc14
    3564:	2001bae0 	.word	0x2001bae0
    3568:	2001bd80 	.word	0x2001bd80
    356c:	2001bc4c 	.word	0x2001bc4c
    3570:	2001c154 	.word	0x2001c154
    3574:	20000058 	.word	0x20000058
    3578:	20000054 	.word	0x20000054
    357c:	2001abdc 	.word	0x2001abdc
    3580:	20005060 	.word	0x20005060
    3584:	00000a81 	.word	0x00000a81
    3588:	00000e61 	.word	0x00000e61
    358c:	00000f81 	.word	0x00000f81
    3590:	2001c1fc 	.word	0x2001c1fc
    3594:	2001c598 	.word	0x2001c598
    3598:	200052a8 	.word	0x200052a8
    359c:	24001e15 	.word	0x24001e15
    35a0:	2001ad08 	.word	0x2001ad08
    35a4:	24001e95 	.word	0x24001e95
    35a8:	24001f55 	.word	0x24001f55
    35ac:	24001f0d 	.word	0x24001f0d
    35b0:	2001c624 	.word	0x2001c624
    35b4:	2001c6b0 	.word	0x2001c6b0
				lfoShapeTick[i] = &lfoPulseTick;
    35b8:	4b8e      	ldr	r3, [pc, #568]	; (37f4 <parsePreset+0xc94>)
    35ba:	488f      	ldr	r0, [pc, #572]	; (37f8 <parsePreset+0xc98>)
    35bc:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    35be:	4b8f      	ldr	r3, [pc, #572]	; (37fc <parsePreset+0xc9c>)
    35c0:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
    35c2:	4b8f      	ldr	r3, [pc, #572]	; (3800 <parsePreset+0xca0>)
    35c4:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    35c6:	4b8f      	ldr	r3, [pc, #572]	; (3804 <parsePreset+0xca4>)
    35c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
    35ca:	2304      	movs	r3, #4
    35cc:	4f8e      	ldr	r7, [pc, #568]	; (3808 <parsePreset+0xca8>)
    35ce:	4d8f      	ldr	r5, [pc, #572]	; (380c <parsePreset+0xcac>)
    35d0:	9301      	str	r3, [sp, #4]
    35d2:	463b      	mov	r3, r7
    35d4:	f8df e290 	ldr.w	lr, [pc, #656]	; 3868 <parsePreset+0xd08>
				  effectSetters[i].setParam2 = &blankFunction;;
    35d8:	488d      	ldr	r0, [pc, #564]	; (3810 <parsePreset+0xcb0>)
				  effectTick[i] = FXVZhighshelfTick;
    35da:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
    35dc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    35e0:	edde 7a00 	vldr	s15, [lr]
    35e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    35e8:	fef8 7a67 	vrinta.f32	s15, s15
    35ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    35f0:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
    35f4:	f89d c000 	ldrb.w	ip, [sp]
    35f8:	f1bc 0f13 	cmp.w	ip, #19
    35fc:	d81e      	bhi.n	363c <parsePreset+0xadc>
    35fe:	e8df f01c 	tbh	[pc, ip, lsl #1]
    3602:	043f      	.short	0x043f
    3604:	04110428 	.word	0x04110428
    3608:	0409040d 	.word	0x0409040d
    360c:	031203f3 	.word	0x031203f3
    3610:	02ed02fc 	.word	0x02ed02fc
    3614:	02bb02d4 	.word	0x02bb02d4
    3618:	029b02ab 	.word	0x029b02ab
    361c:	03d8028b 	.word	0x03d8028b
    3620:	033c03c5 	.word	0x033c03c5
    3624:	03e8032b 	.word	0x03e8032b
    3628:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
    362a:	4a7a      	ldr	r2, [pc, #488]	; (3814 <parsePreset+0xcb4>)
    362c:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
    362e:	4a7a      	ldr	r2, [pc, #488]	; (3818 <parsePreset+0xcb8>)
				  effectSetters[i].setParam5 = &blankFunction;;
    3630:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
    3632:	e9c3 2000 	strd	r2, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
    3636:	4a79      	ldr	r2, [pc, #484]	; (381c <parsePreset+0xcbc>)
				  effectSetters[i].setParam4 = &blankFunction;;
    3638:	e9c3 2002 	strd	r2, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
    363c:	3504      	adds	r5, #4
    363e:	4a78      	ldr	r2, [pc, #480]	; (3820 <parsePreset+0xcc0>)
    3640:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
    3644:	3314      	adds	r3, #20
    3646:	4295      	cmp	r5, r2
    3648:	d1c8      	bne.n	35dc <parsePreset+0xa7c>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    364a:	4876      	ldr	r0, [pc, #472]	; (3824 <parsePreset+0xcc4>)
	params[Effect1Mix].setParam = &fxMixSet;
    364c:	4b76      	ldr	r3, [pc, #472]	; (3828 <parsePreset+0xcc8>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    364e:	f8c6 02d0 	str.w	r0, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    3652:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    3656:	f8c6 05a8 	str.w	r0, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    365a:	4874      	ldr	r0, [pc, #464]	; (382c <parsePreset+0xccc>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
    365c:	4d74      	ldr	r5, [pc, #464]	; (3830 <parsePreset+0xcd0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    365e:	f8c6 035c 	str.w	r0, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    3662:	f8c6 04c8 	str.w	r0, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    3666:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    366a:	6838      	ldr	r0, [r7, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    366c:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    366e:	f8c6 0714 	str.w	r0, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    3672:	6878      	ldr	r0, [r7, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    3674:	f8c6 37a0 	str.w	r3, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    3678:	f8c6 0730 	str.w	r0, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    367c:	68b8      	ldr	r0, [r7, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    367e:	f8c6 57bc 	str.w	r5, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    3682:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    3686:	68f8      	ldr	r0, [r7, #12]
    3688:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    368c:	6938      	ldr	r0, [r7, #16]
    368e:	f8c6 0784 	str.w	r0, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    3692:	6978      	ldr	r0, [r7, #20]
    3694:	f8c6 07f4 	str.w	r0, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    3698:	69b8      	ldr	r0, [r7, #24]
    369a:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    369e:	69f8      	ldr	r0, [r7, #28]
    36a0:	f8c6 082c 	str.w	r0, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    36a4:	4863      	ldr	r0, [pc, #396]	; (3834 <parsePreset+0xcd4>)
    36a6:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    36aa:	4863      	ldr	r0, [pc, #396]	; (3838 <parsePreset+0xcd8>)
    36ac:	f8c6 0260 	str.w	r0, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    36b0:	4862      	ldr	r0, [pc, #392]	; (383c <parsePreset+0xcdc>)
    36b2:	f8c6 0244 	str.w	r0, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
    36b6:	4862      	ldr	r0, [pc, #392]	; (3840 <parsePreset+0xce0>)
    36b8:	64f0      	str	r0, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    36ba:	4862      	ldr	r0, [pc, #392]	; (3844 <parsePreset+0xce4>)
    36bc:	f8c6 01d4 	str.w	r0, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    36c0:	4861      	ldr	r0, [pc, #388]	; (3848 <parsePreset+0xce8>)
    36c2:	f8c6 01f0 	str.w	r0, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    36c6:	4861      	ldr	r0, [pc, #388]	; (384c <parsePreset+0xcec>)
    36c8:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    36cc:	6a38      	ldr	r0, [r7, #32]
	params[Effect2Mix].setParam = &fxMixSet;
    36ce:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    36d2:	f8c6 3960 	str.w	r3, [r6, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    36d6:	f8c6 3a40 	str.w	r3, [r6, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    36da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    36dc:	f8c6 0848 	str.w	r0, [r6, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    36e0:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    36e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
    36e6:	f8c6 589c 	str.w	r5, [r6, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    36ea:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    36ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
    36f0:	f8c6 597c 	str.w	r5, [r6, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    36f4:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    36f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
    36fa:	f8c6 5a5c 	str.w	r5, [r6, #2652]	; 0xa5c
	params[OutputAmp].setParam = &setAmp;
    36fe:	2501      	movs	r5, #1
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    3700:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    3704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    3706:	4852      	ldr	r0, [pc, #328]	; (3850 <parsePreset+0xcf0>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    3708:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    370e:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    3712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3714:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    3718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    371a:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    371e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3720:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    3724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3726:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		params[i].objectNumber = 0;
    372c:	2700      	movs	r7, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    372e:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    3732:	680b      	ldr	r3, [r1, #0]
    3734:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    3738:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    373a:	f8c6 0be4 	str.w	r0, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    373e:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    3742:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    3744:	f8c6 0c8c 	str.w	r0, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    3748:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    374c:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    374e:	f8c6 0d34 	str.w	r0, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    3752:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    3756:	4b3f      	ldr	r3, [pc, #252]	; (3854 <parsePreset+0xcf4>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    3758:	f8c6 0ddc 	str.w	r0, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    375c:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    3760:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    3764:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    3768:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    376c:	4b3a      	ldr	r3, [pc, #232]	; (3858 <parsePreset+0xcf8>)
    376e:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    3772:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    3776:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    377a:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    377e:	4b37      	ldr	r3, [pc, #220]	; (385c <parsePreset+0xcfc>)
    3780:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    3784:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    3788:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    378c:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    3790:	4b33      	ldr	r3, [pc, #204]	; (3860 <parsePreset+0xd00>)
    3792:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    3796:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    379a:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    379e:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    37a2:	6813      	ldr	r3, [r2, #0]
    37a4:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    37a8:	68d3      	ldr	r3, [r2, #12]
    37aa:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    37ae:	6993      	ldr	r3, [r2, #24]
    37b0:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    37b4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    37b6:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    37ba:	6853      	ldr	r3, [r2, #4]
    37bc:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    37c0:	6913      	ldr	r3, [r2, #16]
    37c2:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    37c6:	69d3      	ldr	r3, [r2, #28]
    37c8:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    37cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    37ce:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    37d2:	6893      	ldr	r3, [r2, #8]
    37d4:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    37d8:	6953      	ldr	r3, [r2, #20]
    37da:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    37de:	6a13      	ldr	r3, [r2, #32]
    37e0:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    37e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    37e6:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    37ea:	4b1e      	ldr	r3, [pc, #120]	; (3864 <parsePreset+0xd04>)
    37ec:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    37f0:	46aa      	mov	sl, r5
    37f2:	e042      	b.n	387a <parsePreset+0xd1a>
    37f4:	200052a8 	.word	0x200052a8
    37f8:	24001e15 	.word	0x24001e15
    37fc:	24001e95 	.word	0x24001e95
    3800:	24001f55 	.word	0x24001f55
    3804:	24001f0d 	.word	0x24001f0d
    3808:	20018b8c 	.word	0x20018b8c
    380c:	20005008 	.word	0x20005008
    3810:	24004105 	.word	0x24004105
    3814:	000021a1 	.word	0x000021a1
    3818:	240021c9 	.word	0x240021c9
    381c:	24002385 	.word	0x24002385
    3820:	20005018 	.word	0x20005018
    3824:	00000d81 	.word	0x00000d81
    3828:	00001ae1 	.word	0x00001ae1
    382c:	00000de1 	.word	0x00000de1
    3830:	00001b01 	.word	0x00001b01
    3834:	000021c1 	.word	0x000021c1
    3838:	00002261 	.word	0x00002261
    383c:	00002221 	.word	0x00002221
    3840:	00001381 	.word	0x00001381
    3844:	000013a1 	.word	0x000013a1
    3848:	000013c1 	.word	0x000013c1
    384c:	000013e1 	.word	0x000013e1
    3850:	000012a1 	.word	0x000012a1
    3854:	000012c1 	.word	0x000012c1
    3858:	000012e1 	.word	0x000012e1
    385c:	00001301 	.word	0x00001301
    3860:	00001321 	.word	0x00001321
    3864:	00001361 	.word	0x00001361
    3868:	2001bdb8 	.word	0x2001bdb8
    386c:	42fe0000 	.word	0x42fe0000
    3870:	3c010204 	.word	0x3c010204
    3874:	f109 091c 	add.w	r9, r9, #28
    3878:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
    387a:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
    387e:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
    3882:	2b0c      	cmp	r3, #12
    3884:	d94b      	bls.n	391e <parsePreset+0xdbe>
		else if ((i >= Osc2) && (i < Osc3))
    3886:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
    388a:	2b0c      	cmp	r3, #12
    388c:	f240 85d4 	bls.w	4438 <parsePreset+0x18d8>
		else if ((i >= Osc3) && (i < Effect1FXType))
    3890:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
    3894:	2b0c      	cmp	r3, #12
    3896:	f240 85cb 	bls.w	4430 <parsePreset+0x18d0>
		else if ((i >= Filter1) && (i < Filter2))
    389a:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    389e:	2b05      	cmp	r3, #5
    38a0:	d93d      	bls.n	391e <parsePreset+0xdbe>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    38a2:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
    38a6:	2b06      	cmp	r3, #6
    38a8:	f240 85c6 	bls.w	4438 <parsePreset+0x18d8>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    38ac:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
    38b0:	2b05      	cmp	r3, #5
    38b2:	d934      	bls.n	391e <parsePreset+0xdbe>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    38b4:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
    38b8:	2b05      	cmp	r3, #5
    38ba:	f240 85bd 	bls.w	4438 <parsePreset+0x18d8>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    38be:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
    38c2:	2b05      	cmp	r3, #5
    38c4:	f240 85b4 	bls.w	4430 <parsePreset+0x18d0>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    38c8:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
    38cc:	2b05      	cmp	r3, #5
    38ce:	f240 8599 	bls.w	4404 <parsePreset+0x18a4>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    38d2:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
    38d6:	2b04      	cmp	r3, #4
    38d8:	d921      	bls.n	391e <parsePreset+0xdbe>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    38da:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
    38de:	2b04      	cmp	r3, #4
    38e0:	f240 85aa 	bls.w	4438 <parsePreset+0x18d8>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    38e4:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
    38e8:	2b04      	cmp	r3, #4
    38ea:	f240 85a1 	bls.w	4430 <parsePreset+0x18d0>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    38ee:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
    38f2:	2b04      	cmp	r3, #4
    38f4:	f240 8586 	bls.w	4404 <parsePreset+0x18a4>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    38f8:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
    38fc:	2b07      	cmp	r3, #7
    38fe:	d90e      	bls.n	391e <parsePreset+0xdbe>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    3900:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
    3904:	2b07      	cmp	r3, #7
    3906:	f240 8597 	bls.w	4438 <parsePreset+0x18d8>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    390a:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
    390e:	2b07      	cmp	r3, #7
    3910:	f240 858e 	bls.w	4430 <parsePreset+0x18d0>
		else if ((i >= Effect4FXType) && (i < Filter1))
    3914:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    3918:	2b07      	cmp	r3, #7
    391a:	f240 8573 	bls.w	4404 <parsePreset+0x18a4>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    391e:	2100      	movs	r1, #0
    3920:	ed99 0a02 	vldr	s0, [r9, #8]
    3924:	f8d9 3014 	ldr.w	r3, [r9, #20]
    3928:	4608      	mov	r0, r1
    392a:	4798      	blx	r3
    392c:	ed99 0a03 	vldr	s0, [r9, #12]
    3930:	f8d9 3014 	ldr.w	r3, [r9, #20]
    3934:	2101      	movs	r1, #1
    3936:	f899 0018 	ldrb.w	r0, [r9, #24]
    393a:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    393c:	2d9b      	cmp	r5, #155	; 0x9b
    393e:	d199      	bne.n	3874 <parsePreset+0xd14>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3940:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
	numMappings = 0;
    3944:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3946:	ed96 7a02 	vldr	s14, [r6, #8]
		mappings[i].destNumber = 255;
    394a:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    394c:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 386c <parsePreset+0xd0c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    3950:	ee37 7a67 	vsub.f32	s14, s14, s15
    3954:	ed1f 6a3a 	vldr	s12, [pc, #-232]	; 3870 <parsePreset+0xd10>
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3958:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    395c:	4bd0      	ldr	r3, [pc, #832]	; (3ca0 <parsePreset+0x1140>)
    395e:	f8df e37c 	ldr.w	lr, [pc, #892]	; 3cdc <parsePreset+0x117c>
    3962:	eec6 6a07 	vdiv.f32	s13, s12, s14
    3966:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
    396a:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    396e:	4bcd      	ldr	r3, [pc, #820]	; (3ca4 <parsePreset+0x1144>)
    3970:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
    3974:	4bcc      	ldr	r3, [pc, #816]	; (3ca8 <parsePreset+0x1148>)
    3976:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    3978:	4bcc      	ldr	r3, [pc, #816]	; (3cac <parsePreset+0x114c>)
    397a:	601a      	str	r2, [r3, #0]
    397c:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
    397e:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    3980:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
    3982:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    3986:	4298      	cmp	r0, r3
    3988:	d1f9      	bne.n	397e <parsePreset+0xe1e>
	for (int i = 0; i < mappingCount; i++)
    398a:	f1bb 0f00 	cmp.w	fp, #0
    398e:	f000 8094 	beq.w	3aba <parsePreset+0xf5a>
    3992:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
    3994:	f04f 0b01 	mov.w	fp, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3998:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 3cb0 <parsePreset+0x1150>
			mappings[whichMapping].destNumber = destNumber;
    399c:	f04f 094c 	mov.w	r9, #76	; 0x4c
    39a0:	4443      	add	r3, r8
    39a2:	f8df a33c 	ldr.w	sl, [pc, #828]	; 3ce0 <parsePreset+0x1180>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    39a6:	9602      	str	r6, [sp, #8]
    39a8:	b29b      	uxth	r3, r3
    39aa:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
    39ac:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    39ae:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    39b0:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
    39b2:	eb04 0208 	add.w	r2, r4, r8
		uint8_t foundOne = 0;
    39b6:	461d      	mov	r5, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    39b8:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
    39ba:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    39bc:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
    39be:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
    39c0:	7811      	ldrb	r1, [r2, #0]
    39c2:	4281      	cmp	r1, r0
    39c4:	d103      	bne.n	39ce <parsePreset+0xe6e>
				whichHook = mappings[j].numHooks;
    39c6:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
    39ca:	b2de      	uxtb	r6, r3
				foundOne = 1;
    39cc:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    39ce:	3301      	adds	r3, #1
    39d0:	324c      	adds	r2, #76	; 0x4c
    39d2:	2b20      	cmp	r3, #32
    39d4:	d1f4      	bne.n	39c0 <parsePreset+0xe60>
		if (foundOne == 0)
    39d6:	2d00      	cmp	r5, #0
    39d8:	f000 8488 	beq.w	42ec <parsePreset+0x178c>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    39dc:	463d      	mov	r5, r7
		int source = buffer[bufferIndex];
    39de:	f814 2008 	ldrb.w	r2, [r4, r8]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    39e2:	fb09 f306 	mul.w	r3, r9, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    39e6:	1c68      	adds	r0, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    39e8:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    39ec:	eb0a 07c2 	add.w	r7, sl, r2, lsl #3
    39f0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    39f4:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    39f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    39fa:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    39fe:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3a00:	4473      	add	r3, lr
    3a02:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    3a04:	bfcc      	ite	gt
    3a06:	465b      	movgt	r3, fp
    3a08:	2300      	movle	r3, #0
    3a0a:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    3a0e:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
    3a12:	00e9      	lsls	r1, r5, #3
    3a14:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3a18:	f1a2 0318 	sub.w	r3, r2, #24
    3a1c:	2b03      	cmp	r3, #3
    3a1e:	d803      	bhi.n	3a28 <parsePreset+0xec8>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3a20:	4ba2      	ldr	r3, [pc, #648]	; (3cac <parsePreset+0x114c>)
    3a22:	441a      	add	r2, r3
    3a24:	f802 bc18 	strb.w	fp, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
    3a28:	eb04 0308 	add.w	r3, r4, r8
    3a2c:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
    3a2e:	2bff      	cmp	r3, #255	; 0xff
    3a30:	f000 846f 	beq.w	4312 <parsePreset+0x17b2>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3a34:	fb09 f006 	mul.w	r0, r9, r6
    3a38:	1d2a      	adds	r2, r5, #4
    3a3a:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
    3a3e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    3a42:	4472      	add	r2, lr
    3a44:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3a46:	f1a3 0218 	sub.w	r2, r3, #24
    3a4a:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3a4c:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3a50:	f200 846c 	bhi.w	432c <parsePreset+0x17cc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3a54:	2004      	movs	r0, #4
    3a56:	2108      	movs	r1, #8
    3a58:	4472      	add	r2, lr
    3a5a:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3a5e:	4893      	ldr	r0, [pc, #588]	; (3cac <parsePreset+0x114c>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3a60:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3a62:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    3a64:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3a66:	f803 bc18 	strb.w	fp, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3a6a:	eb04 0308 	add.w	r3, r4, r8
		bufferIndex += 5;
    3a6e:	f108 0805 	add.w	r8, r8, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3a72:	78da      	ldrb	r2, [r3, #3]
		bufferIndex += 5;
    3a74:	fa1f f888 	uxth.w	r8, r8
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3a78:	791b      	ldrb	r3, [r3, #4]
    3a7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3a7e:	b21b      	sxth	r3, r3
    3a80:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3a84:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3a8c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		mappings[whichMapping].numHooks++;
    3a90:	fb09 e606 	mla	r6, r9, r6, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3a94:	441d      	add	r5, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3a96:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3a9a:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
    3a9e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    3aa2:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    3aa6:	3301      	adds	r3, #1
    3aa8:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
    3aac:	9b00      	ldr	r3, [sp, #0]
    3aae:	4598      	cmp	r8, r3
    3ab0:	f47f af7e 	bne.w	39b0 <parsePreset+0xe50>
    3ab4:	4b7c      	ldr	r3, [pc, #496]	; (3ca8 <parsePreset+0x1148>)
    3ab6:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
    3aba:	4b7e      	ldr	r3, [pc, #504]	; (3cb4 <parsePreset+0x1154>)
	audioMasterLevel = 1.0f;
    3abc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    3ac0:	497d      	ldr	r1, [pc, #500]	; (3cb8 <parsePreset+0x1158>)
	presetWaitingToParse = 0;
    3ac2:	2000      	movs	r0, #0
	if (params[Filter1].zeroToOneVal[0])
    3ac4:	ed93 7a00 	vldr	s14, [r3]
    3ac8:	33a8      	adds	r3, #168	; 0xa8
	audioMasterLevel = 1.0f;
    3aca:	600a      	str	r2, [r1, #0]
	presetWaitingToParse = 0;
    3acc:	497b      	ldr	r1, [pc, #492]	; (3cbc <parsePreset+0x115c>)
	if (params[Filter1].zeroToOneVal[0])
    3ace:	eeb5 7a40 	vcmp.f32	s14, #0.0
	if (params[Filter2].zeroToOneVal[0])
    3ad2:	edd3 7a00 	vldr	s15, [r3]
	presetWaitingToParse = 0;
    3ad6:	6008      	str	r0, [r1, #0]
	currentActivePreset = presetNumber;
    3ad8:	9805      	ldr	r0, [sp, #20]
	if (params[Filter1].zeroToOneVal[0])
    3ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
    3ade:	4978      	ldr	r1, [pc, #480]	; (3cc0 <parsePreset+0x1160>)
	if (params[Filter2].zeroToOneVal[0])
    3ae0:	eef5 7a40 	vcmp.f32	s15, #0.0
	oscToTick = NUM_OSC;
    3ae4:	4a77      	ldr	r2, [pc, #476]	; (3cc4 <parsePreset+0x1164>)
	currentActivePreset = presetNumber;
    3ae6:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
    3ae8:	f04f 0103 	mov.w	r1, #3
	uint8_t totalFilters = 0;
    3aec:	bf14      	ite	ne
    3aee:	2301      	movne	r3, #1
    3af0:	2300      	moveq	r3, #0
	oscToTick = NUM_OSC;
    3af2:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
    3af4:	2201      	movs	r2, #1
    3af6:	4974      	ldr	r1, [pc, #464]	; (3cc8 <parsePreset+0x1168>)
	if (params[Filter2].zeroToOneVal[0])
    3af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
    3afc:	9801      	ldr	r0, [sp, #4]
	overSampled = 1;
    3afe:	700a      	strb	r2, [r1, #0]
	numEffectToTick = totalEffects;
    3b00:	4972      	ldr	r1, [pc, #456]	; (3ccc <parsePreset+0x116c>)
		totalFilters++;
    3b02:	bf18      	it	ne
    3b04:	3301      	addne	r3, #1
	numEffectToTick = totalEffects;
    3b06:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
    3b08:	4971      	ldr	r1, [pc, #452]	; (3cd0 <parsePreset+0x1170>)
    3b0a:	700b      	strb	r3, [r1, #0]
    3b0c:	b662      	cpsie	i
	presetReady = 1;
    3b0e:	4b71      	ldr	r3, [pc, #452]	; (3cd4 <parsePreset+0x1174>)
    3b10:	601a      	str	r2, [r3, #0]
}
    3b12:	b007      	add	sp, #28
    3b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
    3b18:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 3ce4 <parsePreset+0x1184>
				  effectSetters[i].setParam2 = &blankFunction;
    3b1c:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
    3b1e:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
    3b22:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 3ce8 <parsePreset+0x1188>
    3b26:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    3b2a:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 3cec <parsePreset+0x118c>
				  effectSetters[i].setParam5 = &blankFunction;
    3b2e:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    3b32:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3b36:	e581      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &FXhighpassTick;
    3b38:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 3cf0 <parsePreset+0x1190>
				  effectSetters[i].setParam2 = &blankFunction;
    3b3c:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
    3b3e:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
    3b42:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 3cf4 <parsePreset+0x1194>
    3b46:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    3b4a:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 3cf8 <parsePreset+0x1198>
				  effectSetters[i].setParam5 = &blankFunction;
    3b4e:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    3b52:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3b56:	e571      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &FXlowpassTick;
    3b58:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 3cfc <parsePreset+0x119c>
				  effectSetters[i].setParam2 = &blankFunction;
    3b5c:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
    3b5e:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
    3b62:	f8df c19c 	ldr.w	ip, [pc, #412]	; 3d00 <parsePreset+0x11a0>
    3b66:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    3b6a:	f8df c198 	ldr.w	ip, [pc, #408]	; 3d04 <parsePreset+0x11a4>
				  effectSetters[i].setParam5 = &blankFunction;;
    3b6e:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    3b72:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3b76:	e561      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &wavefolderTick;
    3b78:	f8df c18c 	ldr.w	ip, [pc, #396]	; 3d08 <parsePreset+0x11a8>
    3b7c:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &wavefolderParam1;
    3b80:	f8df c188 	ldr.w	ip, [pc, #392]	; 3d0c <parsePreset+0x11ac>
    3b84:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    3b88:	f8df c184 	ldr.w	ip, [pc, #388]	; 3d10 <parsePreset+0x11b0>
    3b8c:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
    3b90:	f8df c180 	ldr.w	ip, [pc, #384]	; 3d14 <parsePreset+0x11b4>
    3b94:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3b98:	f8df c17c 	ldr.w	ip, [pc, #380]	; 3d18 <parsePreset+0x11b8>
    3b9c:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    3ba0:	f8df c178 	ldr.w	ip, [pc, #376]	; 3d1c <parsePreset+0x11bc>
    3ba4:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    3ba8:	e548      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &tiltFilterTick;
    3baa:	f8df c174 	ldr.w	ip, [pc, #372]	; 3d20 <parsePreset+0x11c0>
    3bae:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &tiltParam1;
    3bb2:	f8df c170 	ldr.w	ip, [pc, #368]	; 3d24 <parsePreset+0x11c4>
    3bb6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &tiltParam2;
    3bba:	f8df c16c 	ldr.w	ip, [pc, #364]	; 3d28 <parsePreset+0x11c8>
    3bbe:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
    3bc2:	f8df c168 	ldr.w	ip, [pc, #360]	; 3d2c <parsePreset+0x11cc>
    3bc6:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
    3bca:	f8df c164 	ldr.w	ip, [pc, #356]	; 3d30 <parsePreset+0x11d0>
    3bce:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    3bd2:	f8df c148 	ldr.w	ip, [pc, #328]	; 3d1c <parsePreset+0x11bc>
    3bd6:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    3bda:	e52f      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &bcTick;
    3bdc:	f8df c154 	ldr.w	ip, [pc, #340]	; 3d34 <parsePreset+0x11d4>
    3be0:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3be4:	f8df c150 	ldr.w	ip, [pc, #336]	; 3d38 <parsePreset+0x11d8>
    3be8:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &param2Linear;
    3bec:	f8df c14c 	ldr.w	ip, [pc, #332]	; 3d3c <parsePreset+0x11dc>
    3bf0:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
    3bf4:	f8df c148 	ldr.w	ip, [pc, #328]	; 3d40 <parsePreset+0x11e0>
    3bf8:	e7cc      	b.n	3b94 <parsePreset+0x1034>
				  effectTick[i] = &chorusTick;
    3bfa:	f8df c148 	ldr.w	ip, [pc, #328]	; 3d44 <parsePreset+0x11e4>
				  effectSetters[i].setParam5 = &blankFunction;
    3bfe:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
    3c00:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &chorusParam1;
    3c04:	f8df c140 	ldr.w	ip, [pc, #320]	; 3d48 <parsePreset+0x11e8>
    3c08:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &chorusParam2;
    3c0c:	f8df c13c 	ldr.w	ip, [pc, #316]	; 3d4c <parsePreset+0x11ec>
    3c10:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
    3c14:	f8df c138 	ldr.w	ip, [pc, #312]	; 3d50 <parsePreset+0x11f0>
    3c18:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
    3c1c:	f8df c134 	ldr.w	ip, [pc, #308]	; 3d54 <parsePreset+0x11f4>
    3c20:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    3c24:	e50a      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &compressorTick;
    3c26:	f8df c130 	ldr.w	ip, [pc, #304]	; 3d58 <parsePreset+0x11f8>
    3c2a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &compressorParam1;
    3c2e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 3d5c <parsePreset+0x11fc>
    3c32:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &compressorParam2;
    3c36:	f8df c128 	ldr.w	ip, [pc, #296]	; 3d60 <parsePreset+0x1200>
    3c3a:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
    3c3e:	f8df c124 	ldr.w	ip, [pc, #292]	; 3d64 <parsePreset+0x1204>
    3c42:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
    3c46:	f8df c120 	ldr.w	ip, [pc, #288]	; 3d68 <parsePreset+0x1208>
    3c4a:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
    3c4e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 3d6c <parsePreset+0x120c>
    3c52:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    3c56:	e4f1      	b.n	363c <parsePreset+0xadc>
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    3c58:	f8df c114 	ldr.w	ip, [pc, #276]	; 3d70 <parsePreset+0x1210>
				  effectTick[i] = FXVZhighshelfTick;
    3c5c:	4a1e      	ldr	r2, [pc, #120]	; (3cd8 <parsePreset+0x1178>)
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    3c5e:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    3c62:	f8df c110 	ldr.w	ip, [pc, #272]	; 3d74 <parsePreset+0x1214>
				  effectTick[i] = FXVZhighshelfTick;
    3c66:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    3c68:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    3c6c:	f8df c108 	ldr.w	ip, [pc, #264]	; 3d78 <parsePreset+0x1218>
				  effectSetters[i].setParam5 = &blankFunction;;
    3c70:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    3c74:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3c78:	e4e0      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &FXVZlowshelfTick;
    3c7a:	f8df c100 	ldr.w	ip, [pc, #256]	; 3d7c <parsePreset+0x121c>
    3c7e:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
    3c82:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 3d80 <parsePreset+0x1220>
    3c86:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
    3c8a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 3d84 <parsePreset+0x1224>
    3c8e:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    3c92:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 3d88 <parsePreset+0x1228>
				  effectSetters[i].setParam5 = &blankFunction;
    3c96:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    3c9a:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3c9e:	e4cd      	b.n	363c <parsePreset+0xadc>
    3ca0:	2001b6bc 	.word	0x2001b6bc
    3ca4:	2001b6c0 	.word	0x2001b6c0
    3ca8:	2001b6c8 	.word	0x2001b6c8
    3cac:	20005244 	.word	0x20005244
    3cb0:	37fffffc 	.word	0x37fffffc
    3cb4:	2001c130 	.word	0x2001c130
    3cb8:	20000744 	.word	0x20000744
    3cbc:	2001c7d4 	.word	0x2001c7d4
    3cc0:	20018b4b 	.word	0x20018b4b
    3cc4:	20000068 	.word	0x20000068
    3cc8:	20000069 	.word	0x20000069
    3ccc:	20000050 	.word	0x20000050
    3cd0:	20000004 	.word	0x20000004
    3cd4:	200055e4 	.word	0x200055e4
    3cd8:	00002161 	.word	0x00002161
    3cdc:	2001ad3c 	.word	0x2001ad3c
    3ce0:	20017854 	.word	0x20017854
    3ce4:	000020e1 	.word	0x000020e1
    3ce8:	24002001 	.word	0x24002001
    3cec:	2400230d 	.word	0x2400230d
    3cf0:	000020c1 	.word	0x000020c1
    3cf4:	24001fb5 	.word	0x24001fb5
    3cf8:	240022f9 	.word	0x240022f9
    3cfc:	000020a1 	.word	0x000020a1
    3d00:	24001f69 	.word	0x24001f69
    3d04:	240022e5 	.word	0x240022e5
    3d08:	00001b41 	.word	0x00001b41
    3d0c:	00001601 	.word	0x00001601
    3d10:	000018c1 	.word	0x000018c1
    3d14:	00001641 	.word	0x00001641
    3d18:	00001a01 	.word	0x00001a01
    3d1c:	00001a21 	.word	0x00001a21
    3d20:	00001de1 	.word	0x00001de1
    3d24:	00001681 	.word	0x00001681
    3d28:	000016e1 	.word	0x000016e1
    3d2c:	00001741 	.word	0x00001741
    3d30:	00001781 	.word	0x00001781
    3d34:	00002041 	.word	0x00002041
    3d38:	000015c1 	.word	0x000015c1
    3d3c:	000018e1 	.word	0x000018e1
    3d40:	00001a61 	.word	0x00001a61
    3d44:	00001d41 	.word	0x00001d41
    3d48:	00001c61 	.word	0x00001c61
    3d4c:	00001ca1 	.word	0x00001ca1
    3d50:	00001cc1 	.word	0x00001cc1
    3d54:	00001d01 	.word	0x00001d01
    3d58:	00002081 	.word	0x00002081
    3d5c:	000017c1 	.word	0x000017c1
    3d60:	000017e1 	.word	0x000017e1
    3d64:	00001821 	.word	0x00001821
    3d68:	00001841 	.word	0x00001841
    3d6c:	00001881 	.word	0x00001881
    3d70:	24002131 	.word	0x24002131
    3d74:	2400227d 	.word	0x2400227d
    3d78:	2400235d 	.word	0x2400235d
    3d7c:	00002141 	.word	0x00002141
    3d80:	240020e5 	.word	0x240020e5
    3d84:	24002249 	.word	0x24002249
    3d88:	24002349 	.word	0x24002349
				  effectTick[i] = &FXVZpeakTick;
    3d8c:	f8df c30c 	ldr.w	ip, [pc, #780]	; 409c <parsePreset+0x153c>
    3d90:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXPeakParam1;
    3d94:	f8df c308 	ldr.w	ip, [pc, #776]	; 40a0 <parsePreset+0x1540>
    3d98:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXPeakParam2;
    3d9c:	f8df c304 	ldr.w	ip, [pc, #772]	; 40a4 <parsePreset+0x1544>
    3da0:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    3da4:	f8df c300 	ldr.w	ip, [pc, #768]	; 40a8 <parsePreset+0x1548>
				  effectSetters[i].setParam5 = &blankFunction;
    3da8:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    3dac:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3db0:	e444      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &FXdiodeLowpassTick;
    3db2:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 40ac <parsePreset+0x154c>
				  effectSetters[i].setParam2 = &blankFunction;
    3db6:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
    3db8:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
    3dbc:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 40b0 <parsePreset+0x1550>
    3dc0:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    3dc4:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 40b4 <parsePreset+0x1554>
				  effectSetters[i].setParam5 = &blankFunction;
    3dc8:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    3dcc:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    3dd0:	e434      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = FXVZbandrejectTick;
    3dd2:	4a98      	ldr	r2, [pc, #608]	; (4034 <parsePreset+0x14d4>)
    3dd4:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    3dd6:	4a98      	ldr	r2, [pc, #608]	; (4038 <parsePreset+0x14d8>)
				  effectSetters[i].setParam5 = &blankFunction;;
    3dd8:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    3dda:	601a      	str	r2, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
    3ddc:	4a97      	ldr	r2, [pc, #604]	; (403c <parsePreset+0x14dc>)
    3dde:	605a      	str	r2, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
    3de0:	4a97      	ldr	r2, [pc, #604]	; (4040 <parsePreset+0x14e0>)
				  effectSetters[i].setParam4 = &blankFunction;;
    3de2:	e9c3 2002 	strd	r2, r0, [r3, #8]
				  break;
    3de6:	e429      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &shaperTick;
    3de8:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 40b8 <parsePreset+0x1558>
				  effectSetters[i].setParam5 = &blankFunction;
    3dec:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
    3dee:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3df2:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 40bc <parsePreset+0x155c>
    3df6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    3dfa:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 40c0 <parsePreset+0x1560>
    3dfe:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
    3e02:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 40c4 <parsePreset+0x1564>
    3e06:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3e0a:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 40c8 <parsePreset+0x1568>
    3e0e:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    3e12:	e413      	b.n	363c <parsePreset+0xadc>
				  effectTick[i] = &tanhTick;
    3e14:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 40cc <parsePreset+0x156c>
				  effectSetters[i].setParam5 = &blankFunction;
    3e18:	6118      	str	r0, [r3, #16]
    3e1a:	e7e8      	b.n	3dee <parsePreset+0x128e>
				  effectTick[i] = &satTick;
    3e1c:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 40d0 <parsePreset+0x1570>
				  effectSetters[i].setParam5 = &blankFunction;
    3e20:	6118      	str	r0, [r3, #16]
    3e22:	e7e4      	b.n	3dee <parsePreset+0x128e>
				  effectTick[i] = &hardClipTick;
    3e24:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 40d4 <parsePreset+0x1574>
				  effectSetters[i].setParam5 = &blankFunction;
    3e28:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
    3e2a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3e2e:	f8df c28c 	ldr.w	ip, [pc, #652]	; 40bc <parsePreset+0x155c>
    3e32:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    3e36:	f8df c288 	ldr.w	ip, [pc, #648]	; 40c0 <parsePreset+0x1560>
    3e3a:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
    3e3e:	f8df c298 	ldr.w	ip, [pc, #664]	; 40d8 <parsePreset+0x1578>
    3e42:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3e46:	f8df c280 	ldr.w	ip, [pc, #640]	; 40c8 <parsePreset+0x1568>
    3e4a:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    3e4e:	f7ff bbf5 	b.w	363c <parsePreset+0xadc>
				  effectTick[i] = &softClipTick;
    3e52:	f8df c288 	ldr.w	ip, [pc, #648]	; 40dc <parsePreset+0x157c>
				  effectSetters[i].setParam5 = &blankFunction;
    3e56:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
    3e58:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3e5c:	f8df c25c 	ldr.w	ip, [pc, #604]	; 40bc <parsePreset+0x155c>
    3e60:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    3e64:	f8df c258 	ldr.w	ip, [pc, #600]	; 40c0 <parsePreset+0x1560>
    3e68:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
    3e6c:	f8df c270 	ldr.w	ip, [pc, #624]	; 40e0 <parsePreset+0x1580>
    3e70:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3e74:	f8df c250 	ldr.w	ip, [pc, #592]	; 40c8 <parsePreset+0x1568>
    3e78:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    3e7c:	f7ff bbde 	b.w	363c <parsePreset+0xadc>
				  totalEffects--;
    3e80:	9a01      	ldr	r2, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
    3e82:	6098      	str	r0, [r3, #8]
				  totalEffects--;
    3e84:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    3e88:	fa5f f28c 	uxtb.w	r2, ip
				  effectTick[i] = &blankTick;
    3e8c:	f8df c254 	ldr.w	ip, [pc, #596]	; 40e4 <parsePreset+0x1584>
				  effectSetters[i].setParam2 = &blankFunction;
    3e90:	e9c3 0000 	strd	r0, r0, [r3]
				  totalEffects--;
    3e94:	9201      	str	r2, [sp, #4]
				  effectTick[i] = &blankTick;
    3e96:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam5 = &blankFunction;
    3e9a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  break;
    3e9e:	f7ff bbcd 	b.w	363c <parsePreset+0xadc>
				lfoShapeTick[i] = &lfoSawTick;
    3ea2:	4b68      	ldr	r3, [pc, #416]	; (4044 <parsePreset+0x14e4>)
    3ea4:	4868      	ldr	r0, [pc, #416]	; (4048 <parsePreset+0x14e8>)
    3ea6:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
    3ea8:	4b68      	ldr	r3, [pc, #416]	; (404c <parsePreset+0x14ec>)
    3eaa:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
    3eac:	4b68      	ldr	r3, [pc, #416]	; (4050 <parsePreset+0x14f0>)
    3eae:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3eb0:	4b68      	ldr	r3, [pc, #416]	; (4054 <parsePreset+0x14f4>)
    3eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3eb4:	f7ff bb89 	b.w	35ca <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
    3eb8:	4b62      	ldr	r3, [pc, #392]	; (4044 <parsePreset+0x14e4>)
    3eba:	4867      	ldr	r0, [pc, #412]	; (4058 <parsePreset+0x14f8>)
    3ebc:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3ebe:	4b67      	ldr	r3, [pc, #412]	; (405c <parsePreset+0x14fc>)
    3ec0:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
    3ec2:	4b67      	ldr	r3, [pc, #412]	; (4060 <parsePreset+0x1500>)
    3ec4:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    3ec6:	4b67      	ldr	r3, [pc, #412]	; (4064 <parsePreset+0x1504>)
    3ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3eca:	f7ff bb7e 	b.w	35ca <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTick;
    3ece:	4b5d      	ldr	r3, [pc, #372]	; (4044 <parsePreset+0x14e4>)
    3ed0:	4865      	ldr	r0, [pc, #404]	; (4068 <parsePreset+0x1508>)
    3ed2:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
    3ed4:	4b65      	ldr	r3, [pc, #404]	; (406c <parsePreset+0x150c>)
    3ed6:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
    3ed8:	4b65      	ldr	r3, [pc, #404]	; (4070 <parsePreset+0x1510>)
    3eda:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3edc:	4b65      	ldr	r3, [pc, #404]	; (4074 <parsePreset+0x1514>)
    3ede:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3ee0:	f7ff bb73 	b.w	35ca <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSawTick;
    3ee4:	4b57      	ldr	r3, [pc, #348]	; (4044 <parsePreset+0x14e4>)
    3ee6:	4858      	ldr	r0, [pc, #352]	; (4048 <parsePreset+0x14e8>)
    3ee8:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
    3eea:	4b58      	ldr	r3, [pc, #352]	; (404c <parsePreset+0x14ec>)
    3eec:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
    3eee:	4b58      	ldr	r3, [pc, #352]	; (4050 <parsePreset+0x14f0>)
    3ef0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3ef2:	4b58      	ldr	r3, [pc, #352]	; (4054 <parsePreset+0x14f4>)
    3ef4:	6213      	str	r3, [r2, #32]
				break;
    3ef6:	f7ff bb18 	b.w	352a <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
    3efa:	4b52      	ldr	r3, [pc, #328]	; (4044 <parsePreset+0x14e4>)
    3efc:	485e      	ldr	r0, [pc, #376]	; (4078 <parsePreset+0x1518>)
    3efe:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    3f00:	4b5e      	ldr	r3, [pc, #376]	; (407c <parsePreset+0x151c>)
    3f02:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    3f04:	4b5e      	ldr	r3, [pc, #376]	; (4080 <parsePreset+0x1520>)
    3f06:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    3f08:	4b5e      	ldr	r3, [pc, #376]	; (4084 <parsePreset+0x1524>)
    3f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3f0c:	f7ff bb5d 	b.w	35ca <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTriTick;
    3f10:	4b4c      	ldr	r3, [pc, #304]	; (4044 <parsePreset+0x14e4>)
    3f12:	485d      	ldr	r0, [pc, #372]	; (4088 <parsePreset+0x1528>)
    3f14:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    3f16:	4b5d      	ldr	r3, [pc, #372]	; (408c <parsePreset+0x152c>)
    3f18:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    3f1a:	4b5d      	ldr	r3, [pc, #372]	; (4090 <parsePreset+0x1530>)
    3f1c:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3f1e:	4b5d      	ldr	r3, [pc, #372]	; (4094 <parsePreset+0x1534>)
    3f20:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3f22:	f7ff bb52 	b.w	35ca <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
    3f26:	4b47      	ldr	r3, [pc, #284]	; (4044 <parsePreset+0x14e4>)
    3f28:	484b      	ldr	r0, [pc, #300]	; (4058 <parsePreset+0x14f8>)
    3f2a:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3f2c:	4b4b      	ldr	r3, [pc, #300]	; (405c <parsePreset+0x14fc>)
    3f2e:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
    3f30:	4b4b      	ldr	r3, [pc, #300]	; (4060 <parsePreset+0x1500>)
    3f32:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    3f34:	4b4b      	ldr	r3, [pc, #300]	; (4064 <parsePreset+0x1504>)
    3f36:	6213      	str	r3, [r2, #32]
				break;
    3f38:	f7ff baf7 	b.w	352a <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSineTick;
    3f3c:	4b41      	ldr	r3, [pc, #260]	; (4044 <parsePreset+0x14e4>)
    3f3e:	484a      	ldr	r0, [pc, #296]	; (4068 <parsePreset+0x1508>)
    3f40:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
    3f42:	4b4a      	ldr	r3, [pc, #296]	; (406c <parsePreset+0x150c>)
    3f44:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
    3f46:	4b4a      	ldr	r3, [pc, #296]	; (4070 <parsePreset+0x1510>)
    3f48:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3f4a:	4b4a      	ldr	r3, [pc, #296]	; (4074 <parsePreset+0x1514>)
    3f4c:	6213      	str	r3, [r2, #32]
				break;
    3f4e:	f7ff baec 	b.w	352a <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
    3f52:	4b3c      	ldr	r3, [pc, #240]	; (4044 <parsePreset+0x14e4>)
    3f54:	4848      	ldr	r0, [pc, #288]	; (4078 <parsePreset+0x1518>)
    3f56:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    3f58:	4b48      	ldr	r3, [pc, #288]	; (407c <parsePreset+0x151c>)
    3f5a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    3f5c:	4b48      	ldr	r3, [pc, #288]	; (4080 <parsePreset+0x1520>)
    3f5e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    3f60:	4b48      	ldr	r3, [pc, #288]	; (4084 <parsePreset+0x1524>)
    3f62:	6213      	str	r3, [r2, #32]
				break;
    3f64:	f7ff bae1 	b.w	352a <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawTick;
    3f68:	4b36      	ldr	r3, [pc, #216]	; (4044 <parsePreset+0x14e4>)
    3f6a:	4837      	ldr	r0, [pc, #220]	; (4048 <parsePreset+0x14e8>)
    3f6c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
    3f6e:	4b37      	ldr	r3, [pc, #220]	; (404c <parsePreset+0x14ec>)
    3f70:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
    3f72:	4b37      	ldr	r3, [pc, #220]	; (4050 <parsePreset+0x14f0>)
    3f74:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3f76:	4b37      	ldr	r3, [pc, #220]	; (4054 <parsePreset+0x14f4>)
    3f78:	6153      	str	r3, [r2, #20]
				break;
    3f7a:	f7ff bab6 	b.w	34ea <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
    3f7e:	4b31      	ldr	r3, [pc, #196]	; (4044 <parsePreset+0x14e4>)
    3f80:	4841      	ldr	r0, [pc, #260]	; (4088 <parsePreset+0x1528>)
    3f82:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    3f84:	4b41      	ldr	r3, [pc, #260]	; (408c <parsePreset+0x152c>)
    3f86:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    3f88:	4b41      	ldr	r3, [pc, #260]	; (4090 <parsePreset+0x1530>)
    3f8a:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3f8c:	4b41      	ldr	r3, [pc, #260]	; (4094 <parsePreset+0x1534>)
    3f8e:	6213      	str	r3, [r2, #32]
				break;
    3f90:	f7ff bacb 	b.w	352a <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoTriTick;
    3f94:	4b2b      	ldr	r3, [pc, #172]	; (4044 <parsePreset+0x14e4>)
    3f96:	4830      	ldr	r0, [pc, #192]	; (4058 <parsePreset+0x14f8>)
    3f98:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3f9a:	4b30      	ldr	r3, [pc, #192]	; (405c <parsePreset+0x14fc>)
    3f9c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
    3f9e:	4b30      	ldr	r3, [pc, #192]	; (4060 <parsePreset+0x1500>)
    3fa0:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    3fa2:	4b30      	ldr	r3, [pc, #192]	; (4064 <parsePreset+0x1504>)
    3fa4:	6153      	str	r3, [r2, #20]
				break;
    3fa6:	f7ff baa0 	b.w	34ea <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTick;
    3faa:	4b26      	ldr	r3, [pc, #152]	; (4044 <parsePreset+0x14e4>)
    3fac:	482e      	ldr	r0, [pc, #184]	; (4068 <parsePreset+0x1508>)
    3fae:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
    3fb0:	4b2e      	ldr	r3, [pc, #184]	; (406c <parsePreset+0x150c>)
    3fb2:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
    3fb4:	4b2e      	ldr	r3, [pc, #184]	; (4070 <parsePreset+0x1510>)
    3fb6:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3fb8:	4b2e      	ldr	r3, [pc, #184]	; (4074 <parsePreset+0x1514>)
    3fba:	6153      	str	r3, [r2, #20]
				break;
    3fbc:	f7ff ba95 	b.w	34ea <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawSquareTick;
    3fc0:	4b20      	ldr	r3, [pc, #128]	; (4044 <parsePreset+0x14e4>)
    3fc2:	482d      	ldr	r0, [pc, #180]	; (4078 <parsePreset+0x1518>)
    3fc4:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    3fc6:	4b2d      	ldr	r3, [pc, #180]	; (407c <parsePreset+0x151c>)
    3fc8:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    3fca:	4b2d      	ldr	r3, [pc, #180]	; (4080 <parsePreset+0x1520>)
    3fcc:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    3fce:	4b2d      	ldr	r3, [pc, #180]	; (4084 <parsePreset+0x1524>)
    3fd0:	6153      	str	r3, [r2, #20]
				break;
    3fd2:	f7ff ba8a 	b.w	34ea <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
    3fd6:	4b1b      	ldr	r3, [pc, #108]	; (4044 <parsePreset+0x14e4>)
    3fd8:	482b      	ldr	r0, [pc, #172]	; (4088 <parsePreset+0x1528>)
    3fda:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    3fdc:	4b2b      	ldr	r3, [pc, #172]	; (408c <parsePreset+0x152c>)
    3fde:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    3fe0:	4b2b      	ldr	r3, [pc, #172]	; (4090 <parsePreset+0x1530>)
    3fe2:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3fe4:	4b2b      	ldr	r3, [pc, #172]	; (4094 <parsePreset+0x1534>)
    3fe6:	6153      	str	r3, [r2, #20]
				break;
    3fe8:	f7ff ba7f 	b.w	34ea <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawTick;
    3fec:	4b15      	ldr	r3, [pc, #84]	; (4044 <parsePreset+0x14e4>)
    3fee:	4816      	ldr	r0, [pc, #88]	; (4048 <parsePreset+0x14e8>)
				lfoSetters[i].setRate = &lfoSawSetRate;
    3ff0:	4a29      	ldr	r2, [pc, #164]	; (4098 <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoSawTick;
    3ff2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
    3ff4:	4b15      	ldr	r3, [pc, #84]	; (404c <parsePreset+0x14ec>)
    3ff6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
    3ff8:	4b15      	ldr	r3, [pc, #84]	; (4050 <parsePreset+0x14f0>)
    3ffa:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3ffc:	4b15      	ldr	r3, [pc, #84]	; (4054 <parsePreset+0x14f4>)
    3ffe:	6093      	str	r3, [r2, #8]
				break;
    4000:	f7ff ba53 	b.w	34aa <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoTriTick;
    4004:	4b0f      	ldr	r3, [pc, #60]	; (4044 <parsePreset+0x14e4>)
    4006:	4814      	ldr	r0, [pc, #80]	; (4058 <parsePreset+0x14f8>)
				lfoSetters[i].setRate = &lfoTriSetRate;
    4008:	4a23      	ldr	r2, [pc, #140]	; (4098 <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoTriTick;
    400a:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
    400c:	4b13      	ldr	r3, [pc, #76]	; (405c <parsePreset+0x14fc>)
    400e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
    4010:	4b13      	ldr	r3, [pc, #76]	; (4060 <parsePreset+0x1500>)
    4012:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    4014:	4b13      	ldr	r3, [pc, #76]	; (4064 <parsePreset+0x1504>)
    4016:	6093      	str	r3, [r2, #8]
				break;
    4018:	f7ff ba47 	b.w	34aa <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTick;
    401c:	4b09      	ldr	r3, [pc, #36]	; (4044 <parsePreset+0x14e4>)
    401e:	4812      	ldr	r0, [pc, #72]	; (4068 <parsePreset+0x1508>)
				lfoSetters[i].setRate = &lfoSineSetRate;
    4020:	4a1d      	ldr	r2, [pc, #116]	; (4098 <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoSineTick;
    4022:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
    4024:	4b11      	ldr	r3, [pc, #68]	; (406c <parsePreset+0x150c>)
    4026:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
    4028:	4b11      	ldr	r3, [pc, #68]	; (4070 <parsePreset+0x1510>)
    402a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    402c:	4b11      	ldr	r3, [pc, #68]	; (4074 <parsePreset+0x1514>)
    402e:	6093      	str	r3, [r2, #8]
				break;
    4030:	f7ff ba3b 	b.w	34aa <parsePreset+0x94a>
    4034:	00002181 	.word	0x00002181
    4038:	2400217d 	.word	0x2400217d
    403c:	240022b1 	.word	0x240022b1
    4040:	24002371 	.word	0x24002371
    4044:	200052a8 	.word	0x200052a8
    4048:	24001ded 	.word	0x24001ded
    404c:	24001e81 	.word	0x24001e81
    4050:	24001f51 	.word	0x24001f51
    4054:	24001ef9 	.word	0x24001ef9
    4058:	24001dd1 	.word	0x24001dd1
    405c:	24001e6d 	.word	0x24001e6d
    4060:	24001f4d 	.word	0x24001f4d
    4064:	24001ee5 	.word	0x24001ee5
    4068:	24001db5 	.word	0x24001db5
    406c:	24001e59 	.word	0x24001e59
    4070:	24001f49 	.word	0x24001f49
    4074:	24001ed1 	.word	0x24001ed1
    4078:	24001d7d 	.word	0x24001d7d
    407c:	24001e31 	.word	0x24001e31
    4080:	24001f21 	.word	0x24001f21
    4084:	24001ea9 	.word	0x24001ea9
    4088:	24001d99 	.word	0x24001d99
    408c:	24001e45 	.word	0x24001e45
    4090:	24001f35 	.word	0x24001f35
    4094:	24001ebd 	.word	0x24001ebd
    4098:	2001ad08 	.word	0x2001ad08
    409c:	00002121 	.word	0x00002121
    40a0:	24002099 	.word	0x24002099
    40a4:	24002215 	.word	0x24002215
    40a8:	24002335 	.word	0x24002335
    40ac:	00002101 	.word	0x00002101
    40b0:	2400204d 	.word	0x2400204d
    40b4:	24002321 	.word	0x24002321
    40b8:	00001d61 	.word	0x00001d61
    40bc:	000015c1 	.word	0x000015c1
    40c0:	000018c1 	.word	0x000018c1
    40c4:	00001901 	.word	0x00001901
    40c8:	00001a01 	.word	0x00001a01
    40cc:	00001e21 	.word	0x00001e21
    40d0:	00001fc1 	.word	0x00001fc1
    40d4:	00001f21 	.word	0x00001f21
    40d8:	00001981 	.word	0x00001981
    40dc:	00001e81 	.word	0x00001e81
    40e0:	00001921 	.word	0x00001921
    40e4:	00001dc1 	.word	0x00001dc1
				lfoShapeTick[i] = &lfoSawSquareTick;
    40e8:	4b99      	ldr	r3, [pc, #612]	; (4350 <parsePreset+0x17f0>)
    40ea:	489a      	ldr	r0, [pc, #616]	; (4354 <parsePreset+0x17f4>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    40ec:	4a9a      	ldr	r2, [pc, #616]	; (4358 <parsePreset+0x17f8>)
				lfoShapeTick[i] = &lfoSawSquareTick;
    40ee:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    40f0:	4b9a      	ldr	r3, [pc, #616]	; (435c <parsePreset+0x17fc>)
    40f2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    40f4:	4b9a      	ldr	r3, [pc, #616]	; (4360 <parsePreset+0x1800>)
    40f6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    40f8:	4b9a      	ldr	r3, [pc, #616]	; (4364 <parsePreset+0x1804>)
    40fa:	6093      	str	r3, [r2, #8]
				break;
    40fc:	f7ff b9d5 	b.w	34aa <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTriTick;
    4100:	4b93      	ldr	r3, [pc, #588]	; (4350 <parsePreset+0x17f0>)
    4102:	4899      	ldr	r0, [pc, #612]	; (4368 <parsePreset+0x1808>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    4104:	4a94      	ldr	r2, [pc, #592]	; (4358 <parsePreset+0x17f8>)
				lfoShapeTick[i] = &lfoSineTriTick;
    4106:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    4108:	4b98      	ldr	r3, [pc, #608]	; (436c <parsePreset+0x180c>)
    410a:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    410c:	4b98      	ldr	r3, [pc, #608]	; (4370 <parsePreset+0x1810>)
    410e:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    4110:	4b98      	ldr	r3, [pc, #608]	; (4374 <parsePreset+0x1814>)
    4112:	6093      	str	r3, [r2, #8]
				break;
    4114:	f7ff b9c9 	b.w	34aa <parsePreset+0x94a>
				  filterTick[i] = &LadderLowpassTick;
    4118:	4b97      	ldr	r3, [pc, #604]	; (4378 <parsePreset+0x1818>)
    411a:	4a98      	ldr	r2, [pc, #608]	; (437c <parsePreset+0x181c>)
    411c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    411e:	4b98      	ldr	r3, [pc, #608]	; (4380 <parsePreset+0x1820>)
    4120:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    4122:	4b98      	ldr	r3, [pc, #608]	; (4384 <parsePreset+0x1824>)
    4124:	60cb      	str	r3, [r1, #12]
				  break;
    4126:	f7ff b99e 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &VZbandrejectTick;
    412a:	4b93      	ldr	r3, [pc, #588]	; (4378 <parsePreset+0x1818>)
    412c:	4a96      	ldr	r2, [pc, #600]	; (4388 <parsePreset+0x1828>)
    412e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    4130:	4b96      	ldr	r3, [pc, #600]	; (438c <parsePreset+0x182c>)
    4132:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    4134:	4b96      	ldr	r3, [pc, #600]	; (4390 <parsePreset+0x1830>)
    4136:	60cb      	str	r3, [r1, #12]
				  break;
    4138:	f7ff b995 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &VZhighshelfTick;
    413c:	4b8e      	ldr	r3, [pc, #568]	; (4378 <parsePreset+0x1818>)
    413e:	4a95      	ldr	r2, [pc, #596]	; (4394 <parsePreset+0x1834>)
    4140:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    4142:	4b95      	ldr	r3, [pc, #596]	; (4398 <parsePreset+0x1838>)
    4144:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    4146:	4b95      	ldr	r3, [pc, #596]	; (439c <parsePreset+0x183c>)
    4148:	60cb      	str	r3, [r1, #12]
				  break;
    414a:	f7ff b98c 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &VZlowshelfTick;
    414e:	4b8a      	ldr	r3, [pc, #552]	; (4378 <parsePreset+0x1818>)
    4150:	4a93      	ldr	r2, [pc, #588]	; (43a0 <parsePreset+0x1840>)
    4152:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    4154:	4b93      	ldr	r3, [pc, #588]	; (43a4 <parsePreset+0x1844>)
    4156:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    4158:	4b93      	ldr	r3, [pc, #588]	; (43a8 <parsePreset+0x1848>)
    415a:	60cb      	str	r3, [r1, #12]
				  break;
    415c:	f7ff b983 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &VZpeakTick;
    4160:	4b85      	ldr	r3, [pc, #532]	; (4378 <parsePreset+0x1818>)
    4162:	4a92      	ldr	r2, [pc, #584]	; (43ac <parsePreset+0x184c>)
    4164:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
    4166:	4b92      	ldr	r3, [pc, #584]	; (43b0 <parsePreset+0x1850>)
    4168:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
    416a:	4b92      	ldr	r3, [pc, #584]	; (43b4 <parsePreset+0x1854>)
    416c:	60cb      	str	r3, [r1, #12]
				  break;
    416e:	f7ff b97a 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &diodeLowpassTick;
    4172:	4b81      	ldr	r3, [pc, #516]	; (4378 <parsePreset+0x1818>)
    4174:	4a90      	ldr	r2, [pc, #576]	; (43b8 <parsePreset+0x1858>)
    4176:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    4178:	4b90      	ldr	r3, [pc, #576]	; (43bc <parsePreset+0x185c>)
    417a:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    417c:	4b90      	ldr	r3, [pc, #576]	; (43c0 <parsePreset+0x1860>)
    417e:	60cb      	str	r3, [r1, #12]
				  break;
    4180:	f7ff b971 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &bandpassTick;
    4184:	4b7c      	ldr	r3, [pc, #496]	; (4378 <parsePreset+0x1818>)
    4186:	4a8f      	ldr	r2, [pc, #572]	; (43c4 <parsePreset+0x1864>)
    4188:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
    418a:	4b8f      	ldr	r3, [pc, #572]	; (43c8 <parsePreset+0x1868>)
    418c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
    418e:	4b8f      	ldr	r3, [pc, #572]	; (43cc <parsePreset+0x186c>)
    4190:	60cb      	str	r3, [r1, #12]
				  break;
    4192:	f7ff b968 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &highpassTick;
    4196:	4b78      	ldr	r3, [pc, #480]	; (4378 <parsePreset+0x1818>)
    4198:	4a8d      	ldr	r2, [pc, #564]	; (43d0 <parsePreset+0x1870>)
    419a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
    419c:	4b8d      	ldr	r3, [pc, #564]	; (43d4 <parsePreset+0x1874>)
    419e:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
    41a0:	4b8d      	ldr	r3, [pc, #564]	; (43d8 <parsePreset+0x1878>)
    41a2:	60cb      	str	r3, [r1, #12]
				  break;
    41a4:	f7ff b95f 	b.w	3466 <parsePreset+0x906>
				  filterTick[i] = &LadderLowpassTick;
    41a8:	4b73      	ldr	r3, [pc, #460]	; (4378 <parsePreset+0x1818>)
    41aa:	4a74      	ldr	r2, [pc, #464]	; (437c <parsePreset+0x181c>)
    41ac:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    41ae:	4b74      	ldr	r3, [pc, #464]	; (4380 <parsePreset+0x1820>)
    41b0:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    41b2:	4b74      	ldr	r3, [pc, #464]	; (4384 <parsePreset+0x1824>)
    41b4:	604b      	str	r3, [r1, #4]
				  break;
    41b6:	f7ff b935 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &VZbandrejectTick;
    41ba:	4b6f      	ldr	r3, [pc, #444]	; (4378 <parsePreset+0x1818>)
    41bc:	4a72      	ldr	r2, [pc, #456]	; (4388 <parsePreset+0x1828>)
    41be:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    41c0:	4b72      	ldr	r3, [pc, #456]	; (438c <parsePreset+0x182c>)
    41c2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    41c4:	4b72      	ldr	r3, [pc, #456]	; (4390 <parsePreset+0x1830>)
    41c6:	604b      	str	r3, [r1, #4]
				  break;
    41c8:	f7ff b92c 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &VZhighshelfTick;
    41cc:	4b6a      	ldr	r3, [pc, #424]	; (4378 <parsePreset+0x1818>)
    41ce:	4a71      	ldr	r2, [pc, #452]	; (4394 <parsePreset+0x1834>)
    41d0:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    41d2:	4b71      	ldr	r3, [pc, #452]	; (4398 <parsePreset+0x1838>)
    41d4:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    41d6:	4b71      	ldr	r3, [pc, #452]	; (439c <parsePreset+0x183c>)
    41d8:	604b      	str	r3, [r1, #4]
				  break;
    41da:	f7ff b923 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &VZlowshelfTick;
    41de:	4b66      	ldr	r3, [pc, #408]	; (4378 <parsePreset+0x1818>)
    41e0:	4a6f      	ldr	r2, [pc, #444]	; (43a0 <parsePreset+0x1840>)
    41e2:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    41e4:	4b6f      	ldr	r3, [pc, #444]	; (43a4 <parsePreset+0x1844>)
    41e6:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    41e8:	4b6f      	ldr	r3, [pc, #444]	; (43a8 <parsePreset+0x1848>)
    41ea:	604b      	str	r3, [r1, #4]
				  break;
    41ec:	f7ff b91a 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &VZpeakTick;
    41f0:	4b61      	ldr	r3, [pc, #388]	; (4378 <parsePreset+0x1818>)
    41f2:	4a6e      	ldr	r2, [pc, #440]	; (43ac <parsePreset+0x184c>)
    41f4:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
    41f6:	4b6e      	ldr	r3, [pc, #440]	; (43b0 <parsePreset+0x1850>)
    41f8:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
    41fa:	4b6e      	ldr	r3, [pc, #440]	; (43b4 <parsePreset+0x1854>)
    41fc:	604b      	str	r3, [r1, #4]
				  break;
    41fe:	f7ff b911 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &diodeLowpassTick;
    4202:	4b5d      	ldr	r3, [pc, #372]	; (4378 <parsePreset+0x1818>)
    4204:	4a6c      	ldr	r2, [pc, #432]	; (43b8 <parsePreset+0x1858>)
    4206:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    4208:	4b6c      	ldr	r3, [pc, #432]	; (43bc <parsePreset+0x185c>)
    420a:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    420c:	4b6c      	ldr	r3, [pc, #432]	; (43c0 <parsePreset+0x1860>)
    420e:	604b      	str	r3, [r1, #4]
				  break;
    4210:	f7ff b908 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &bandpassTick;
    4214:	4b58      	ldr	r3, [pc, #352]	; (4378 <parsePreset+0x1818>)
    4216:	4a6b      	ldr	r2, [pc, #428]	; (43c4 <parsePreset+0x1864>)
    4218:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
    421a:	4b6b      	ldr	r3, [pc, #428]	; (43c8 <parsePreset+0x1868>)
    421c:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
    421e:	4b6b      	ldr	r3, [pc, #428]	; (43cc <parsePreset+0x186c>)
    4220:	604b      	str	r3, [r1, #4]
				  break;
    4222:	f7ff b8ff 	b.w	3424 <parsePreset+0x8c4>
				  filterTick[i] = &highpassTick;
    4226:	4b54      	ldr	r3, [pc, #336]	; (4378 <parsePreset+0x1818>)
    4228:	4a69      	ldr	r2, [pc, #420]	; (43d0 <parsePreset+0x1870>)
    422a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
    422c:	4b69      	ldr	r3, [pc, #420]	; (43d4 <parsePreset+0x1874>)
    422e:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
    4230:	4b69      	ldr	r3, [pc, #420]	; (43d8 <parsePreset+0x1878>)
    4232:	604b      	str	r3, [r1, #4]
				  break;
    4234:	f7ff b8f6 	b.w	3424 <parsePreset+0x8c4>
				  shapeTick[i] = &userTick;
    4238:	4a68      	ldr	r2, [pc, #416]	; (43dc <parsePreset+0x187c>)
    423a:	4969      	ldr	r1, [pc, #420]	; (43e0 <parsePreset+0x1880>)
    423c:	6091      	str	r1, [r2, #8]
				  break;
    423e:	f7ff b8bd 	b.w	33bc <parsePreset+0x85c>
				  shapeTick[i] = &triTick;
    4242:	4a66      	ldr	r2, [pc, #408]	; (43dc <parsePreset+0x187c>)
    4244:	4967      	ldr	r1, [pc, #412]	; (43e4 <parsePreset+0x1884>)
    4246:	6091      	str	r1, [r2, #8]
				  break;
    4248:	f7ff b8b8 	b.w	33bc <parsePreset+0x85c>
				  shapeTick[i] = &sineTick;
    424c:	4a63      	ldr	r2, [pc, #396]	; (43dc <parsePreset+0x187c>)
    424e:	4966      	ldr	r1, [pc, #408]	; (43e8 <parsePreset+0x1888>)
    4250:	6091      	str	r1, [r2, #8]
				  break;
    4252:	f7ff b8b3 	b.w	33bc <parsePreset+0x85c>
				  shapeTick[i] = &pulseTick;
    4256:	4a61      	ldr	r2, [pc, #388]	; (43dc <parsePreset+0x187c>)
    4258:	4964      	ldr	r1, [pc, #400]	; (43ec <parsePreset+0x188c>)
    425a:	6091      	str	r1, [r2, #8]
				  break;
    425c:	f7ff b8ae 	b.w	33bc <parsePreset+0x85c>
				  shapeTick[i] = &sawTick;
    4260:	4a5e      	ldr	r2, [pc, #376]	; (43dc <parsePreset+0x187c>)
    4262:	4963      	ldr	r1, [pc, #396]	; (43f0 <parsePreset+0x1890>)
    4264:	6091      	str	r1, [r2, #8]
				  break;
    4266:	f7ff b8a9 	b.w	33bc <parsePreset+0x85c>
				  shapeTick[i] = &sineTriTick;
    426a:	4a5c      	ldr	r2, [pc, #368]	; (43dc <parsePreset+0x187c>)
    426c:	4961      	ldr	r1, [pc, #388]	; (43f4 <parsePreset+0x1894>)
    426e:	6091      	str	r1, [r2, #8]
				  break;
    4270:	f7ff b8a4 	b.w	33bc <parsePreset+0x85c>
				  shapeTick[i] = &userTick;
    4274:	4a59      	ldr	r2, [pc, #356]	; (43dc <parsePreset+0x187c>)
    4276:	495a      	ldr	r1, [pc, #360]	; (43e0 <parsePreset+0x1880>)
    4278:	6051      	str	r1, [r2, #4]
				  break;
    427a:	f7ff b878 	b.w	336e <parsePreset+0x80e>
				  shapeTick[i] = &triTick;
    427e:	4a57      	ldr	r2, [pc, #348]	; (43dc <parsePreset+0x187c>)
    4280:	4958      	ldr	r1, [pc, #352]	; (43e4 <parsePreset+0x1884>)
    4282:	6051      	str	r1, [r2, #4]
				  break;
    4284:	f7ff b873 	b.w	336e <parsePreset+0x80e>
				  shapeTick[i] = &sineTick;
    4288:	4a54      	ldr	r2, [pc, #336]	; (43dc <parsePreset+0x187c>)
    428a:	4957      	ldr	r1, [pc, #348]	; (43e8 <parsePreset+0x1888>)
    428c:	6051      	str	r1, [r2, #4]
				  break;
    428e:	f7ff b86e 	b.w	336e <parsePreset+0x80e>
				  shapeTick[i] = &pulseTick;
    4292:	4a52      	ldr	r2, [pc, #328]	; (43dc <parsePreset+0x187c>)
    4294:	4955      	ldr	r1, [pc, #340]	; (43ec <parsePreset+0x188c>)
    4296:	6051      	str	r1, [r2, #4]
				  break;
    4298:	f7ff b869 	b.w	336e <parsePreset+0x80e>
				  shapeTick[i] = &sawTick;
    429c:	4a4f      	ldr	r2, [pc, #316]	; (43dc <parsePreset+0x187c>)
    429e:	4954      	ldr	r1, [pc, #336]	; (43f0 <parsePreset+0x1890>)
    42a0:	6051      	str	r1, [r2, #4]
				  break;
    42a2:	f7ff b864 	b.w	336e <parsePreset+0x80e>
				  shapeTick[i] = &sineTriTick;
    42a6:	4a4d      	ldr	r2, [pc, #308]	; (43dc <parsePreset+0x187c>)
    42a8:	4952      	ldr	r1, [pc, #328]	; (43f4 <parsePreset+0x1894>)
    42aa:	6051      	str	r1, [r2, #4]
				  break;
    42ac:	f7ff b85f 	b.w	336e <parsePreset+0x80e>
				  shapeTick[i] = &userTick;
    42b0:	4b4a      	ldr	r3, [pc, #296]	; (43dc <parsePreset+0x187c>)
    42b2:	4a4b      	ldr	r2, [pc, #300]	; (43e0 <parsePreset+0x1880>)
    42b4:	601a      	str	r2, [r3, #0]
				  break;
    42b6:	f7ff b834 	b.w	3322 <parsePreset+0x7c2>
				  shapeTick[i] = &triTick;
    42ba:	4b48      	ldr	r3, [pc, #288]	; (43dc <parsePreset+0x187c>)
    42bc:	4a49      	ldr	r2, [pc, #292]	; (43e4 <parsePreset+0x1884>)
    42be:	601a      	str	r2, [r3, #0]
				  break;
    42c0:	f7ff b82f 	b.w	3322 <parsePreset+0x7c2>
				  shapeTick[i] = &sineTick;
    42c4:	4b45      	ldr	r3, [pc, #276]	; (43dc <parsePreset+0x187c>)
    42c6:	4a48      	ldr	r2, [pc, #288]	; (43e8 <parsePreset+0x1888>)
    42c8:	601a      	str	r2, [r3, #0]
				  break;
    42ca:	f7ff b82a 	b.w	3322 <parsePreset+0x7c2>
				  shapeTick[i] = &pulseTick;
    42ce:	4b43      	ldr	r3, [pc, #268]	; (43dc <parsePreset+0x187c>)
    42d0:	4a46      	ldr	r2, [pc, #280]	; (43ec <parsePreset+0x188c>)
    42d2:	601a      	str	r2, [r3, #0]
				  break;
    42d4:	f7ff b825 	b.w	3322 <parsePreset+0x7c2>
				  shapeTick[i] = &sawTick;
    42d8:	4b40      	ldr	r3, [pc, #256]	; (43dc <parsePreset+0x187c>)
    42da:	4a45      	ldr	r2, [pc, #276]	; (43f0 <parsePreset+0x1890>)
    42dc:	601a      	str	r2, [r3, #0]
				  break;
    42de:	f7ff b820 	b.w	3322 <parsePreset+0x7c2>
				  shapeTick[i] = &sineTriTick;
    42e2:	4b3e      	ldr	r3, [pc, #248]	; (43dc <parsePreset+0x187c>)
    42e4:	4a43      	ldr	r2, [pc, #268]	; (43f4 <parsePreset+0x1894>)
    42e6:	601a      	str	r2, [r3, #0]
				  break;
    42e8:	f7ff b81b 	b.w	3322 <parsePreset+0x7c2>
			mappings[whichMapping].destNumber = destNumber;
    42ec:	fb09 f30c 	mul.w	r3, r9, ip
    42f0:	4666      	mov	r6, ip
    42f2:	eb0e 0203 	add.w	r2, lr, r3
    42f6:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
    42fa:	9b02      	ldr	r3, [sp, #8]
    42fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
    4304:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
    4308:	6050      	str	r0, [r2, #4]
			numMappings++;
    430a:	fa5f fc83 	uxtb.w	ip, r3
    430e:	f7ff bb66 	b.w	39de <parsePreset+0xe7e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    4312:	fb09 f306 	mul.w	r3, r9, r6
    4316:	18ca      	adds	r2, r1, r3
    4318:	4937      	ldr	r1, [pc, #220]	; (43f8 <parsePreset+0x1898>)
    431a:	4472      	add	r2, lr
    431c:	6291      	str	r1, [r2, #40]	; 0x28
    431e:	1d2a      	adds	r2, r5, #4
    4320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4324:	4473      	add	r3, lr
    4326:	6059      	str	r1, [r3, #4]
    4328:	f7ff bb9f 	b.w	3a6a <parsePreset+0xf0a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    432c:	2108      	movs	r1, #8
    432e:	2004      	movs	r0, #4
    4330:	4472      	add	r2, lr
    4332:	fb11 0303 	smlabb	r3, r1, r3, r0
    4336:	4453      	add	r3, sl
    4338:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    433a:	f7ff bb96 	b.w	3a6a <parsePreset+0xf0a>
    433e:	4d2f      	ldr	r5, [pc, #188]	; (43fc <parsePreset+0x189c>)
    4340:	f7fe bea0 	b.w	3084 <parsePreset+0x524>
	for (int i = 0; i < paramCount; i++)
    4344:	f04f 0884 	mov.w	r8, #132	; 0x84
    4348:	4e2d      	ldr	r6, [pc, #180]	; (4400 <parsePreset+0x18a0>)
    434a:	f7fe be89 	b.w	3060 <parsePreset+0x500>
    434e:	bf00      	nop
    4350:	200052a8 	.word	0x200052a8
    4354:	24001d7d 	.word	0x24001d7d
    4358:	2001ad08 	.word	0x2001ad08
    435c:	24001e31 	.word	0x24001e31
    4360:	24001f21 	.word	0x24001f21
    4364:	24001ea9 	.word	0x24001ea9
    4368:	24001d99 	.word	0x24001d99
    436c:	24001e45 	.word	0x24001e45
    4370:	24001f35 	.word	0x24001f35
    4374:	24001ebd 	.word	0x24001ebd
    4378:	20005060 	.word	0x20005060
    437c:	00000d21 	.word	0x00000d21
    4380:	00000f61 	.word	0x00000f61
    4384:	00001181 	.word	0x00001181
    4388:	00000cc1 	.word	0x00000cc1
    438c:	00000f41 	.word	0x00000f41
    4390:	00001141 	.word	0x00001141
    4394:	00000c81 	.word	0x00000c81
    4398:	00000f21 	.word	0x00000f21
    439c:	00001101 	.word	0x00001101
    43a0:	00000c41 	.word	0x00000c41
    43a4:	00000f01 	.word	0x00000f01
    43a8:	000010c1 	.word	0x000010c1
    43ac:	00000c01 	.word	0x00000c01
    43b0:	00000ee1 	.word	0x00000ee1
    43b4:	00001081 	.word	0x00001081
    43b8:	00000ba1 	.word	0x00000ba1
    43bc:	00000ec1 	.word	0x00000ec1
    43c0:	00001041 	.word	0x00001041
    43c4:	00000b41 	.word	0x00000b41
    43c8:	00000ea1 	.word	0x00000ea1
    43cc:	00001001 	.word	0x00001001
    43d0:	00000ae1 	.word	0x00000ae1
    43d4:	00000e81 	.word	0x00000e81
    43d8:	00000fc1 	.word	0x00000fc1
    43dc:	20005ab0 	.word	0x20005ab0
    43e0:	00000861 	.word	0x00000861
    43e4:	000007e1 	.word	0x000007e1
    43e8:	000007a1 	.word	0x000007a1
    43ec:	00000721 	.word	0x00000721
    43f0:	000006a1 	.word	0x000006a1
    43f4:	00000621 	.word	0x00000621
    43f8:	20000748 	.word	0x20000748
    43fc:	2001c7c0 	.word	0x2001c7c0
    4400:	2001b6cc 	.word	0x2001b6cc
			params[i].objectNumber = 3;
    4404:	f04f 0303 	mov.w	r3, #3
    4408:	f889 3018 	strb.w	r3, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    440c:	ed99 0a02 	vldr	s0, [r9, #8]
    4410:	2100      	movs	r1, #0
    4412:	f899 0018 	ldrb.w	r0, [r9, #24]
    4416:	f8d9 3014 	ldr.w	r3, [r9, #20]
    441a:	4798      	blx	r3
    441c:	ed99 0a03 	vldr	s0, [r9, #12]
    4420:	f8d9 3014 	ldr.w	r3, [r9, #20]
    4424:	2101      	movs	r1, #1
    4426:	f899 0018 	ldrb.w	r0, [r9, #24]
    442a:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    442c:	f7ff ba22 	b.w	3874 <parsePreset+0xd14>
			params[i].objectNumber = 2;
    4430:	2302      	movs	r3, #2
    4432:	f889 3018 	strb.w	r3, [r9, #24]
    4436:	e7e9      	b.n	440c <parsePreset+0x18ac>
			params[i].objectNumber = 1;
    4438:	f889 a018 	strb.w	sl, [r9, #24]
    443c:	e7e6      	b.n	440c <parsePreset+0x18ac>
    443e:	4a01      	ldr	r2, [pc, #4]	; (4444 <parsePreset+0x18e4>)
    4440:	f7ff b833 	b.w	34aa <parsePreset+0x94a>
    4444:	2001ad08 	.word	0x2001ad08
	...

00004460 <tOversampler_upsample>:
    _tOversampler* os = *osr;
    4460:	6803      	ldr	r3, [r0, #0]
{
    4462:	b570      	push	{r4, r5, r6, lr}
    if (os->ratio == 1)
    4464:	68de      	ldr	r6, [r3, #12]
    4466:	2e01      	cmp	r6, #1
    4468:	d034      	beq.n	44d4 <tOversampler_upsample+0x74>
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
    446a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
    446c:	e9d3 4005 	ldrd	r4, r0, [r3, #20]
    *pStateCur = input;
    4470:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    4474:	ed03 0a01 	vstr	s0, [r3, #-4]
    while (i > 0U)
    4478:	b31e      	cbz	r6, 44c2 <tOversampler_upsample+0x62>
        *output++ = sum0 * os->ratio;
    447a:	ee07 6a90 	vmov	s15, r6
    447e:	1e73      	subs	r3, r6, #1
            ptr2 += os->ratio;
    4480:	ea4f 0e86 	mov.w	lr, r6, lsl #2
        while (tapCnt > 0U)
    4484:	eddf 5a16 	vldr	s11, [pc, #88]	; 44e0 <tOversampler_upsample+0x80>
        *output++ = sum0 * os->ratio;
    4488:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    448c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4490:	eb01 0686 	add.w	r6, r1, r6, lsl #2
        ptr2 = pCoeffs + (os->ratio - j);
    4494:	4623      	mov	r3, r4
        while (tapCnt > 0U)
    4496:	b305      	cbz	r5, 44da <tOversampler_upsample+0x7a>
    4498:	462a      	mov	r2, r5
        ptr1 = pState;
    449a:	4684      	mov	ip, r0
        sum0 = 0.0f;
    449c:	eddf 7a10 	vldr	s15, [pc, #64]	; 44e0 <tOversampler_upsample+0x80>
            sum0 += *ptr1++ * *ptr2;
    44a0:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
    44a4:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
    44a6:	ecfc 6a01 	vldmia	ip!, {s13}
            ptr2 += os->ratio;
    44aa:	4473      	add	r3, lr
            sum0 += *ptr1++ * *ptr2;
    44ac:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
    44b0:	d1f6      	bne.n	44a0 <tOversampler_upsample+0x40>
        *output++ = sum0 * os->ratio;
    44b2:	ee66 7a27 	vmul.f32	s15, s12, s15
    44b6:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
    44ba:	42b1      	cmp	r1, r6
    44bc:	f1a4 0404 	sub.w	r4, r4, #4
    44c0:	d1e8      	bne.n	4494 <tOversampler_upsample+0x34>
    while (tapCnt > 0U)
    44c2:	1e6a      	subs	r2, r5, #1
    pState = pState + 1;
    44c4:	f100 0104 	add.w	r1, r0, #4
    while (tapCnt > 0U)
    44c8:	d006      	beq.n	44d8 <tOversampler_upsample+0x78>
        *pStateCur++ = *pState++;
    44ca:	0092      	lsls	r2, r2, #2
}
    44cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        *pStateCur++ = *pState++;
    44d0:	f001 b9d2 	b.w	5878 <__memmove_veneer>
        output[0] = input;
    44d4:	ed81 0a00 	vstr	s0, [r1]
}
    44d8:	bd70      	pop	{r4, r5, r6, pc}
        while (tapCnt > 0U)
    44da:	eef0 7a65 	vmov.f32	s15, s11
    44de:	e7ea      	b.n	44b6 <tOversampler_upsample+0x56>
    44e0:	00000000 	.word	0x00000000
    44e4:	f3af 8000 	nop.w
    44e8:	f3af 8000 	nop.w
    44ec:	f3af 8000 	nop.w
    44f0:	f3af 8000 	nop.w
    44f4:	f3af 8000 	nop.w
    44f8:	f3af 8000 	nop.w
    44fc:	f3af 8000 	nop.w

00004500 <tOversampler_downsample>:
    _tOversampler* os = *osr;
    4500:	6803      	ldr	r3, [r0, #0]
{
    4502:	b470      	push	{r4, r5, r6}
    if (os->ratio == 1) return input[0];
    4504:	68dd      	ldr	r5, [r3, #12]
    4506:	2d01      	cmp	r5, #1
    4508:	d028      	beq.n	455c <tOversampler_downsample+0x5c>
    float *pState = os->downState;                 /* State pointer */
    450a:	69dc      	ldr	r4, [r3, #28]
    pStateCur = os->downState + (numTaps - 1U);
    450c:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
    4510:	695e      	ldr	r6, [r3, #20]
    i = os->ratio;
    4512:	462a      	mov	r2, r5
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
    4514:	6a1b      	ldr	r3, [r3, #32]
    pStateCur = os->downState + (numTaps - 1U);
    4516:	4418      	add	r0, r3
    4518:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        *pStateCur++ = *input++;
    451c:	f851 cb04 	ldr.w	ip, [r1], #4
    } while (--i);
    4520:	3a01      	subs	r2, #1
        *pStateCur++ = *input++;
    4522:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
    4526:	d1f9      	bne.n	451c <tOversampler_downsample+0x1c>
    while (tapCnt > 0U)
    4528:	b1e3      	cbz	r3, 4564 <tOversampler_downsample+0x64>
    452a:	461a      	mov	r2, r3
    acc0 = 0.0f;
    452c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 4574 <tOversampler_downsample+0x74>
    px0 = pState;
    4530:	4621      	mov	r1, r4
        acc0 += x0 * c0;
    4532:	ecb6 7a01 	vldmia	r6!, {s14}
    while (tapCnt > 0U)
    4536:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
    4538:	ecf1 7a01 	vldmia	r1!, {s15}
    453c:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
    4540:	d1f7      	bne.n	4532 <tOversampler_downsample+0x32>
    while (tapCnt > 0U)
    4542:	3b01      	subs	r3, #1
    pState = pState + os->ratio;
    4544:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    while (tapCnt > 0U)
    4548:	d006      	beq.n	4558 <tOversampler_downsample+0x58>
    454a:	4622      	mov	r2, r4
        *pStateCur++ = *pState++;
    454c:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
    4550:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
    4552:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
    4556:	d1f9      	bne.n	454c <tOversampler_downsample+0x4c>
}
    4558:	bc70      	pop	{r4, r5, r6}
    455a:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
    455c:	ed91 0a00 	vldr	s0, [r1]
}
    4560:	bc70      	pop	{r4, r5, r6}
    4562:	4770      	bx	lr
    pState = pState + os->ratio;
    4564:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    acc0 = 0.0f;
    4568:	ed9f 0a02 	vldr	s0, [pc, #8]	; 4574 <tOversampler_downsample+0x74>
    tapCnt = (numTaps - 1U);
    456c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4570:	e7eb      	b.n	454a <tOversampler_downsample+0x4a>
    4572:	bf00      	nop
	...

00004580 <place_step_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    4580:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 45ec <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    4584:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    4588:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    458c:	b538      	push	{r3, r4, r5, lr}
    458e:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    4592:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    4596:	460d      	mov	r5, r1
    4598:	4604      	mov	r4, r0
    459a:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    459e:	ee38 0a67 	vsub.f32	s0, s16, s15
    45a2:	f001 f979 	bl	5898 <__lrintf_veneer>
	r -= (float)i;
    45a6:	ee07 0a90 	vmov	s15, r0
    45aa:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    45ae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    45b2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    45b6:	4b0e      	ldr	r3, [pc, #56]	; (45f0 <place_step_dd+0x70>)
    45b8:	f502 7190 	add.w	r1, r2, #288	; 0x120
    45bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    45c0:	ee38 6a46 	vsub.f32	s12, s16, s12

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    45c4:	edd3 6a01 	vldr	s13, [r3, #4]
    45c8:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    45cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    45d0:	edd2 7a00 	vldr	s15, [r2]
    45d4:	eea6 7a86 	vfma.f32	s14, s13, s12
    45d8:	eee7 7a28 	vfma.f32	s15, s14, s17
    45dc:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    45e0:	4291      	cmp	r1, r2
    45e2:	d1ef      	bne.n	45c4 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    45e4:	ecbd 8b02 	vpop	{d8}
    45e8:	bd38      	pop	{r3, r4, r5, pc}
    45ea:	bf00      	nop
    45ec:	42800000 	.word	0x42800000
    45f0:	24029104 	.word	0x24029104
    45f4:	f3af 8000 	nop.w
    45f8:	f3af 8000 	nop.w
    45fc:	f3af 8000 	nop.w

00004600 <place_slope_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    4600:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 4678 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    4604:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    4608:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    460c:	b538      	push	{r3, r4, r5, lr}
    460e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    4612:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    4616:	460d      	mov	r5, r1
    4618:	4604      	mov	r4, r0
    461a:	eeb0 8a60 	vmov.f32	s16, s1
    461e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    4622:	ee38 0ae7 	vsub.f32	s0, s17, s15
    4626:	f001 f937 	bl	5898 <__lrintf_veneer>
	r -= (float)i;
    462a:	ee07 0a90 	vmov	s15, r0
    462e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4632:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4636:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    463a:	4b10      	ldr	r3, [pc, #64]	; (467c <place_slope_dd+0x7c>)

	slope_delta *= w;
    463c:	ee28 1a09 	vmul.f32	s2, s16, s18
    4640:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    4644:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (float)i;
    4648:	ee38 6ac6 	vsub.f32	s12, s17, s12

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    464c:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    4650:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    4654:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    4658:	ed92 7a00 	vldr	s14, [r2]
    465c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    4660:	eee6 7a86 	vfma.f32	s15, s13, s12
    4664:	eea7 7a81 	vfma.f32	s14, s15, s2
    4668:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    466c:	4291      	cmp	r1, r2
    466e:	d1ed      	bne.n	464c <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    4670:	ecbd 8b04 	vpop	{d8-d9}
    4674:	bd38      	pop	{r3, r4, r5, pc}
    4676:	bf00      	nop
    4678:	42800000 	.word	0x42800000
    467c:	24024a00 	.word	0x24024a00

00004680 <LEAF_clip>:
    if (min > max)
    4680:	eeb4 0ac1 	vcmpe.f32	s0, s2
    4684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4688:	dd05      	ble.n	4696 <LEAF_clip+0x16>
    468a:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
    468e:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
    4692:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
    4696:	eeb4 0ae0 	vcmpe.f32	s0, s1
    469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    469e:	dc01      	bgt.n	46a4 <LEAF_clip+0x24>
    else if (val > tempmax)
    46a0:	fe81 0a60 	vminnm.f32	s0, s2, s1
}
    46a4:	4770      	bx	lr
    46a6:	bf00      	nop
	...

000046c0 <tMBPulse_place_step_dd_noBuffer>:
{
    46c0:	b510      	push	{r4, lr}
    46c2:	ed2d 8b04 	vpush	{d8-d9}
    46c6:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 4730 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    46ca:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
    46ce:	6804      	ldr	r4, [r0, #0]
{
    46d0:	eef0 8a40 	vmov.f32	s17, s0
    46d4:	ee20 8a88 	vmul.f32	s16, s1, s16
    46d8:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    46dc:	eee0 7a08 	vfma.f32	s15, s0, s16
    46e0:	eeb0 0a67 	vmov.f32	s0, s15
    46e4:	f001 f8d8 	bl	5898 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    46e8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
    46ec:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    46f0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    46f4:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    46f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    46fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    46fe:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4704:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    4708:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
    470c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4710:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    4714:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4718:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    471c:	ed81 9a3b 	vstr	s18, [r1, #236]	; 0xec
}
    4720:	ecbd 8b04 	vpop	{d8-d9}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4724:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4728:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
}
    472c:	bd10      	pop	{r4, pc}
    472e:	bf00      	nop
    4730:	42800000 	.word	0x42800000
    4734:	f3af 8000 	nop.w
    4738:	f3af 8000 	nop.w
    473c:	f3af 8000 	nop.w

00004740 <tMBTriangle_place_dd_noBuffer>:
{
    4740:	b510      	push	{r4, lr}
    4742:	ed2d 8b06 	vpush	{d8-d10}
    4746:	eddf 8a1f 	vldr	s17, [pc, #124]	; 47c4 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    474a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
    474e:	6804      	ldr	r4, [r0, #0]
{
    4750:	eeb0 9a40 	vmov.f32	s18, s0
    4754:	ee60 8aa8 	vmul.f32	s17, s1, s17
    4758:	eeb0 8a41 	vmov.f32	s16, s2
    475c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    4760:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    4764:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    4768:	eeb0 0a67 	vmov.f32	s0, s15
    476c:	f001 f894 	bl	5898 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4770:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	r -= (float)i;
    4774:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4778:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    477c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    477e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4786:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
    478c:	ee28 1a0a 	vmul.f32	s2, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4790:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    4794:	eed9 7a28 	vfnms.f32	s15, s18, s17
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4798:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    479c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    47a0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    47a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
    47a8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    47ac:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    47b0:	ed81 1a3c 	vstr	s2, [r1, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    47b4:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    47b8:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    47bc:	ecbd 8b06 	vpop	{d8-d10}
    47c0:	bd10      	pop	{r4, pc}
    47c2:	bf00      	nop
    47c4:	42800000 	.word	0x42800000
    47c8:	f3af 8000 	nop.w
    47cc:	f3af 8000 	nop.w
    47d0:	f3af 8000 	nop.w
    47d4:	f3af 8000 	nop.w
    47d8:	f3af 8000 	nop.w
    47dc:	f3af 8000 	nop.w

000047e0 <tMBSineTri_place_dd_noBuffer>:
{
    47e0:	b510      	push	{r4, lr}
    47e2:	ed2d 8b06 	vpush	{d8-d10}
    47e6:	eddf 8a1f 	vldr	s17, [pc, #124]	; 4864 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    47ea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
    47ee:	6804      	ldr	r4, [r0, #0]
{
    47f0:	eeb0 9a40 	vmov.f32	s18, s0
    47f4:	ee60 8aa8 	vmul.f32	s17, s1, s17
    47f8:	eeb0 8a41 	vmov.f32	s16, s2
    47fc:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    4800:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    4804:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    4808:	eeb0 0a67 	vmov.f32	s0, s15
    480c:	f001 f844 	bl	5898 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4810:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	r -= (float)i;
    4814:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4818:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    481c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    481e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4826:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
    482c:	ee28 1a0a 	vmul.f32	s2, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4830:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    4834:	eed9 7a28 	vfnms.f32	s15, s18, s17
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4838:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    483c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    4840:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4844:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
    4848:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    484c:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4850:	ed81 1a3c 	vstr	s2, [r1, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4854:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4858:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    485c:	ecbd 8b06 	vpop	{d8-d10}
    4860:	bd10      	pop	{r4, pc}
    4862:	bf00      	nop
    4864:	42800000 	.word	0x42800000
    4868:	f3af 8000 	nop.w
    486c:	f3af 8000 	nop.w
    4870:	f3af 8000 	nop.w
    4874:	f3af 8000 	nop.w
    4878:	f3af 8000 	nop.w
    487c:	f3af 8000 	nop.w

00004880 <tMBSaw_place_step_dd_noBuffer>:
{
    4880:	b510      	push	{r4, lr}
    4882:	ed2d 8b04 	vpush	{d8-d9}
    4886:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 48f0 <tMBSaw_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    488a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
    488e:	6804      	ldr	r4, [r0, #0]
{
    4890:	eef0 8a40 	vmov.f32	s17, s0
    4894:	ee20 8a88 	vmul.f32	s16, s1, s16
    4898:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    489c:	eee0 7a08 	vfma.f32	s15, s0, s16
    48a0:	eeb0 0a67 	vmov.f32	s0, s15
    48a4:	f000 fff8 	bl	5898 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    48a8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	r -= (float)i;
    48ac:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48b0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    48b4:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    48b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    48ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48be:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    48c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    48c8:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
    48cc:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    48d0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    48d4:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    48d8:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    48dc:	ed81 9a37 	vstr	s18, [r1, #220]	; 0xdc
}
    48e0:	ecbd 8b04 	vpop	{d8-d9}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    48e4:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48e8:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
}
    48ec:	bd10      	pop	{r4, pc}
    48ee:	bf00      	nop
    48f0:	42800000 	.word	0x42800000
    48f4:	f3af 8000 	nop.w
    48f8:	f3af 8000 	nop.w
    48fc:	f3af 8000 	nop.w

00004900 <tMBSawPulse_place_step_dd_noBuffer>:
{
    4900:	b510      	push	{r4, lr}
    _tMBSawPulse* c = *osc;
    4902:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    4904:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
{
    4908:	ed2d 8b04 	vpush	{d8-d9}
    if (c->active)
    490c:	b36b      	cbz	r3, 496a <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    490e:	ed9f 8a18 	vldr	s16, [pc, #96]	; 4970 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    4912:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    4916:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    491a:	ee20 8a88 	vmul.f32	s16, s1, s16
    491e:	eeb0 9a41 	vmov.f32	s18, s2
    4922:	eea8 0a88 	vfma.f32	s0, s17, s16
    4926:	f000 ffb7 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    492a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    492e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4932:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    4936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    493a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    493e:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4940:	3201      	adds	r2, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    4946:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    494a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    494e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4952:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4956:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    495a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    495e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4962:	ed81 9a3d 	vstr	s18, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4966:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
}
    496a:	ecbd 8b04 	vpop	{d8-d9}
    496e:	bd10      	pop	{r4, pc}
    4970:	42800000 	.word	0x42800000
    4974:	f3af 8000 	nop.w
    4978:	f3af 8000 	nop.w
    497c:	f3af 8000 	nop.w

00004980 <tMBSawPulse_tick>:
{
    4980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tMBSawPulse* c = *osc;
    4984:	6804      	ldr	r4, [r0, #0]
{
    4986:	ed2d 8b0e 	vpush	{d8-d14}
    sync = c->sync;
    498a:	ed94 8a04 	vldr	s16, [r4, #16]
    float sawShape = 1.0f - c->shape;
    498e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    float shape = c->shape;
    4992:	edd4 aa11 	vldr	s21, [r4, #68]	; 0x44
{
    4996:	b082      	sub	sp, #8
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4998:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    499c:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
    49a0:	ee79 ba6a 	vsub.f32	s23, s18, s21
    p = c->_p;  /* phase [0, 1) */
    49a4:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    49a8:	eebd bae5 	vcvt.s32.f32	s22, s11
    w = c->_w;  /* phase increment */
    49ac:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    49b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    49b4:	edd4 ca0a 	vldr	s25, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    49b8:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    49bc:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    49c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    49c2:	dd75      	ble.n	4ab0 <tMBSawPulse_tick+0x130>
    49c4:	69a7      	ldr	r7, [r4, #24]
    49c6:	2f00      	cmp	r7, #0
    49c8:	dd2e      	ble.n	4a28 <tMBSawPulse_tick+0xa8>
    49ca:	edd4 6a05 	vldr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    49ce:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    49d2:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    49d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    49da:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    49de:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
    49e2:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    49e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    49ea:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    49ee:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    49f2:	ee1b 3a10 	vmov	r3, s22
		if (sw > 0)
    49f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    49fa:	2b00      	cmp	r3, #0
    49fc:	d16e      	bne.n	4adc <tMBSawPulse_tick+0x15c>
		if (sw > 0)
    49fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a02:	f340 8236 	ble.w	4e72 <tMBSawPulse_tick+0x4f2>
			if (p >= b) {
    4a06:	eef4 cac8 	vcmpe.f32	s25, s16
    4a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a0e:	f240 818b 	bls.w	4d28 <tMBSawPulse_tick+0x3a8>
			if (p >= 1.0f) {
    4a12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4a16:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a1e:	f280 8281 	bge.w	4f24 <tMBSawPulse_tick+0x5a4>
    4a22:	eddf 5abf 	vldr	s11, [pc, #764]	; 4d20 <tMBSawPulse_tick+0x3a0>
    4a26:	e067      	b.n	4af8 <tMBSawPulse_tick+0x178>
    sw = w * c->syncdir;
    4a28:	edd4 8a05 	vldr	s17, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    4a2c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    4a30:	ee67 7aa8 	vmul.f32	s15, s15, s17
    float inv_sw = c->_inv_w * c->syncdir;
    4a34:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
    4a38:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    4a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
    4a40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    4a44:	ee77 da66 	vsub.f32	s27, s14, s13
    if (sync > 0.0f && c->softsync == 0)
    4a48:	f040 865d 	bne.w	5706 <tMBSawPulse_tick+0xd86>
        if (sw > 0) p = eof_offset;
    4a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        float eof_offset = sync * sw;
    4a50:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
    4a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
    4a58:	ee3d cac8 	vsub.f32	s24, s27, s16
        if (sw > 0) p = eof_offset;
    4a5c:	f340 80e9 	ble.w	4c32 <tMBSawPulse_tick+0x2b2>
		 if (!k)
    4a60:	ee1b 3a10 	vmov	r3, s22
    4a64:	2b00      	cmp	r3, #0
    4a66:	f040 8219 	bne.w	4e9c <tMBSawPulse_tick+0x51c>
				 if (p_at_reset >= b)
    4a6a:	eef4 cacc 	vcmpe.f32	s25, s24
    if (c->active)
    4a6e:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				 if (p_at_reset >= b)
    4a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a76:	f240 844a 	bls.w	530e <tMBSawPulse_tick+0x98e>
				 if (p_at_reset >= 1.0f)
    4a7a:	eeb4 cac9 	vcmpe.f32	s24, s18
    4a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a82:	f280 8285 	bge.w	4f90 <tMBSawPulse_tick+0x610>
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4a86:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	f040 8213 	bne.w	4eb6 <tMBSawPulse_tick+0x536>
			if (p >= b) {
    4a90:	eef4 cac8 	vcmpe.f32	s25, s16
    4a94:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 4d20 <tMBSawPulse_tick+0x3a0>
    4a98:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    4a9c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    4aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4aa4:	bf88      	it	hi
    4aa6:	eef0 5a47 	vmovhi.f32	s11, s14
    4aaa:	fe3a aa27 	vselgt.f32	s20, s20, s15
    4aae:	e025      	b.n	4afc <tMBSawPulse_tick+0x17c>
    sw = w * c->syncdir;
    4ab0:	edd4 8a05 	vldr	s17, [r4, #20]
    else if (!k)
    4ab4:	ee1b 3a10 	vmov	r3, s22
    float inv_sw = c->_inv_w * c->syncdir;
    4ab8:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    4abc:	ee67 7aa8 	vmul.f32	s15, s15, s17
    float inv_sw = c->_inv_w * c->syncdir;
    4ac0:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
    4ac4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    4ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    4acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    4ad0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4ad4:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d090      	beq.n	49fe <tMBSawPulse_tick+0x7e>
		if (sw > 0)
    4adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ae0:	f340 817e 	ble.w	4de0 <tMBSawPulse_tick+0x460>
			if (p >= 1.0f) {
    4ae4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    4ae8:	eeb4 8ac9 	vcmpe.f32	s16, s18
    4aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4af0:	f280 80af 	bge.w	4c52 <tMBSawPulse_tick+0x2d2>
    c->_k = k;
    4af4:	eef8 5acb 	vcvt.f32.s32	s11, s22
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4af8:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    4afc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    4b00:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    4b02:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4b06:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    4b08:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    4b0c:	ee76 6ac8 	vsub.f32	s13, s13, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4b10:	f88d 2005 	strb.w	r2, [sp, #5]
    c->_f[currentSamp] += (x * shape);//pulse
    4b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4b18:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] += (x * shape);//pulse
    4b1c:	eea6 7aab 	vfma.f32	s14, s13, s23
    4b20:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4b24:	2a00      	cmp	r2, #0
    4b26:	f000 81b4 	beq.w	4e92 <tMBSawPulse_tick+0x512>
    4b2a:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    4b2e:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4b32:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4b36:	2000      	movs	r0, #0
    4b38:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    4b3c:	4d77      	ldr	r5, [pc, #476]	; (4d1c <tMBSawPulse_tick+0x39c>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    4b3e:	ebae 0300 	sub.w	r3, lr, r0
    4b42:	b29b      	uxth	r3, r3
    4b44:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
    4b48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b50:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4b54:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    4b58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4b5c:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    4b60:	b289      	uxth	r1, r1
    4b62:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    4b66:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4b68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4b6c:	fa1f f888 	uxth.w	r8, r8
    4b70:	fa1f f989 	uxth.w	r9, r9
    4b74:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4b78:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    4b7c:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    4b80:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    4b84:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4b88:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4b8a:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    4b8e:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    4b92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4b96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4b9a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    4b9e:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4ba2:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4ba4:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4ba8:	edd9 6a01 	vldr	s13, [r9, #4]
    4bac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4bb0:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4bb4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4bb8:	eee6 7a26 	vfma.f32	s15, s12, s13
    4bbc:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    4bc0:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4bc4:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    4bc8:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4bca:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4bce:	d32a      	bcc.n	4c26 <tMBSawPulse_tick+0x2a6>
			c->numBLEPs--;
    4bd0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4bd4:	3001      	adds	r0, #1
    4bd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
    4bda:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4bdc:	4282      	cmp	r2, r0
			c->numBLEPs--;
    4bde:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4be2:	dcac      	bgt.n	4b3e <tMBSawPulse_tick+0x1be>
    4be4:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4be8:	ee37 7a69 	vsub.f32	s14, s14, s19
    return -c->out * c->gain;
    4bec:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4bf0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    4bf4:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4bf6:	eef0 7a69 	vmov.f32	s15, s19
    c->_p = p;
    4bfa:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    4bfe:	f006 0607 	and.w	r6, r6, #7
    c->_x = x;
    4c02:	ed84 aa0b 	vstr	s20, [r4, #44]	; 0x2c
    c->_k = k;
    4c06:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4c0a:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_j = j;
    4c0e:	63a6      	str	r6, [r4, #56]	; 0x38
    return -c->out * c->gain;
    4c10:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    4c14:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    4c18:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    4c1c:	b002      	add	sp, #8
    4c1e:	ecbd 8b0e 	vpop	{d8-d14}
    4c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4c26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4c2a:	3001      	adds	r0, #1
    4c2c:	4283      	cmp	r3, r0
    4c2e:	dc86      	bgt.n	4b3e <tMBSawPulse_tick+0x1be>
    4c30:	e7d8      	b.n	4be4 <tMBSawPulse_tick+0x264>
        else if (sw < 0) p = 1.0f - eof_offset;
    4c32:	f100 8241 	bmi.w	50b8 <tMBSawPulse_tick+0x738>
		 if (!k)
    4c36:	ee1b 3a10 	vmov	r3, s22
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	f040 8191 	bne.w	4f62 <tMBSawPulse_tick+0x5e2>
    p += sw - (int)sw;
    4c40:	eeb0 da6d 	vmov.f32	s26, s27
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4c44:	eeb0 8a4d 	vmov.f32	s16, s26
    4c48:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    4c4c:	eddf 5a34 	vldr	s11, [pc, #208]	; 4d20 <tMBSawPulse_tick+0x3a0>
    4c50:	e754      	b.n	4afc <tMBSawPulse_tick+0x17c>
    if (c->active)
    4c52:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				p -= 1.0f;
    4c56:	ee38 8a49 	vsub.f32	s16, s16, s18
    if (c->active)
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	f000 8175 	beq.w	4f4a <tMBSawPulse_tick+0x5ca>
		i = lrintf(r - 0.5f);
    4c60:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
    4c64:	eddf 7a2f 	vldr	s15, [pc, #188]	; 4d24 <tMBSawPulse_tick+0x3a4>
    4c68:	ee68 8aa7 	vmul.f32	s17, s17, s15
    4c6c:	eeb0 0a4b 	vmov.f32	s0, s22
    4c70:	eea8 0a28 	vfma.f32	s0, s16, s17
    4c74:	f000 fe10 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4c78:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c7c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (!k && p >= b) {
    4c80:	eef4 cac8 	vcmpe.f32	s25, s16
		r -= (float)i;
    4c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c88:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c8c:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4c8e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c92:	3201      	adds	r2, #1
			if (!k && p >= b) {
    4c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c98:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    4c9c:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ca0:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    4ca4:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ca8:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4cac:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4cb0:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    4cb4:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4cb8:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cbc:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (!k && p >= b) {
    4cc0:	f200 81b4 	bhi.w	502c <tMBSawPulse_tick+0x6ac>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4cc4:	ee78 ca6c 	vsub.f32	s25, s16, s25
		i = lrintf(r - 0.5f);
    4cc8:	eeb0 0a4b 	vmov.f32	s0, s22
				x = -0.5f;
    4ccc:	eeb0 aa4b 	vmov.f32	s20, s22
		i = lrintf(r - 0.5f);
    4cd0:	eeac 0aa8 	vfma.f32	s0, s25, s17
    4cd4:	f000 fde0 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4cd8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4cdc:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cde:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    4ce0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4ce4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cec:	f002 053f 	and.w	r5, r2, #63	; 0x3f
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4cf0:	eef1 7a6a 	vneg.f32	s15, s21
		r -= (float)i;
    4cf4:	ee9c 7aa8 	vfnms.f32	s14, s25, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    4cf8:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4cfc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d00:	eef0 5a49 	vmov.f32	s11, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    4d04:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4d08:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4d0c:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4d10:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d14:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    4d18:	e6f0      	b.n	4afc <tMBSawPulse_tick+0x17c>
    4d1a:	bf00      	nop
    4d1c:	24029104 	.word	0x24029104
    4d20:	00000000 	.word	0x00000000
    4d24:	42800000 	.word	0x42800000
    if (c->active)
    4d28:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	f000 8125 	beq.w	4f7c <tMBSawPulse_tick+0x5fc>
		i = lrintf(r - 0.5f);
    4d32:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    4d36:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 4d24 <tMBSawPulse_tick+0x3a4>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4d3a:	ee78 ca6c 	vsub.f32	s25, s16, s25
    4d3e:	ee68 8aa7 	vmul.f32	s17, s17, s15
		i = lrintf(r - 0.5f);
    4d42:	eeb0 0a4a 	vmov.f32	s0, s20
    4d46:	eeac 0aa8 	vfma.f32	s0, s25, s17
    4d4a:	f000 fda5 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4d4e:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d52:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (p >= 1.0f) {
    4d56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		r -= (float)i;
    4d5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d5e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d62:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4d64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
			if (p >= 1.0f) {
    4d68:	eeb4 8ae5 	vcmpe.f32	s16, s11
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d6c:	3201      	adds	r2, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d6e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    4d72:	ee9c 7aa8 	vfnms.f32	s14, s25, s17
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4d76:	eef1 7a6a 	vneg.f32	s15, s21
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d7a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    4d7e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
			if (p >= 1.0f) {
    4d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4d86:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4d8a:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4d8e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    4d92:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4d96:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d9a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p >= 1.0f) {
    4d9e:	f6ff aead 	blt.w	4afc <tMBSawPulse_tick+0x17c>
				p -= 1.0f;
    4da2:	ee38 8a65 	vsub.f32	s16, s16, s11
		i = lrintf(r - 0.5f);
    4da6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    4daa:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    4dae:	eea8 0a28 	vfma.f32	s0, s16, s17
    4db2:	f000 fd71 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4db6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4dba:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4dbc:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    4dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4dc2:	ed5f 5a29 	vldr	s11, [pc, #-164]	; 4d20 <tMBSawPulse_tick+0x3a0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4dca:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4dce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4dd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
		r -= (float)i;
    4dd6:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4dda:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    4dde:	e03b      	b.n	4e58 <tMBSawPulse_tick+0x4d8>
		else if (sw < 0)
    4de0:	f57f ae88 	bpl.w	4af4 <tMBSawPulse_tick+0x174>
			if (p < b) {
    4de4:	eef4 cac8 	vcmpe.f32	s25, s16
    4de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dec:	f300 8121 	bgt.w	5032 <tMBSawPulse_tick+0x6b2>
			if (p < 0.0f) {
    4df0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    4df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4df8:	f57f ae7c 	bpl.w	4af4 <tMBSawPulse_tick+0x174>
				p += 1.0f;
    4dfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (c->active)
    4e00:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				p += 1.0f;
    4e04:	ee78 7a27 	vadd.f32	s15, s16, s15
    if (c->active)
    4e08:	2b00      	cmp	r3, #0
    4e0a:	f000 840d 	beq.w	5628 <tMBSawPulse_tick+0xca8>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4e0e:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4e12:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		i = lrintf(r - 0.5f);
    4e16:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    4e1a:	ed1f 9a3e 	vldr	s18, [pc, #-248]	; 4d24 <tMBSawPulse_tick+0x3a4>
		r = MINBLEP_PHASES * phase * inv_w;
    4e1e:	ee68 8a88 	vmul.f32	s17, s17, s16
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4e22:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    4e26:	eeb0 0a4a 	vmov.f32	s0, s20
    4e2a:	eea8 0a89 	vfma.f32	s0, s17, s18
    4e2e:	f000 fd33 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4e32:	ee07 0a90 	vmov	s15, r0
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4e36:	1c6a      	adds	r2, r5, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4e38:	1c7b      	adds	r3, r7, #1
		r -= (float)i;
    4e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4e3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4e42:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4e4a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4e4e:	4a97      	ldr	r2, [pc, #604]	; (50ac <tMBSawPulse_tick+0x72c>)
		r -= (float)i;
    4e50:	eed8 7a89 	vfnms.f32	s15, s17, s18
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4e54:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4e58:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4e5c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4e60:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    4e64:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4e68:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4e6c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    4e70:	e644      	b.n	4afc <tMBSawPulse_tick+0x17c>
			if (p < 0.0f) {
    4e72:	eeb5 8a40 	vcmp.f32	s16, #0.0
    4e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e7a:	d505      	bpl.n	4e88 <tMBSawPulse_tick+0x508>
    4e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e84:	f100 82e4 	bmi.w	5450 <tMBSawPulse_tick+0xad0>
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4e88:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    4e8c:	eddf 5a88 	vldr	s11, [pc, #544]	; 50b0 <tMBSawPulse_tick+0x730>
    4e90:	e634      	b.n	4afc <tMBSawPulse_tick+0x17c>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4e92:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    4e96:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    4e9a:	e6a5      	b.n	4be8 <tMBSawPulse_tick+0x268>
				 if (p_at_reset >= 1.0f)
    4e9c:	eeb4 cac9 	vcmpe.f32	s24, s18
    if (c->active)
    4ea0:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				 if (p_at_reset >= 1.0f)
    4ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ea8:	f280 81cc 	bge.w	5244 <tMBSawPulse_tick+0x8c4>
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4eac:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	f000 8296 	beq.w	53e2 <tMBSawPulse_tick+0xa62>
		r = MINBLEP_PHASES * phase * inv_w;
    4eb6:	eddf 7a7f 	vldr	s15, [pc, #508]	; 50b4 <tMBSawPulse_tick+0x734>
		i = lrintf(r - 0.5f);
    4eba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    4ebe:	ee2b ca8c 	vmul.f32	s24, s23, s24
    4ec2:	ee68 8aa7 	vmul.f32	s17, s17, s15
		i = lrintf(r - 0.5f);
    4ec6:	eea8 0a88 	vfma.f32	s0, s17, s16
    4eca:	f000 fce5 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4ece:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ed2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4ed6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    4eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ede:	1c6a      	adds	r2, r5, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ee0:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ee2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ee6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    4eea:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->BLEPindices[c->mostRecentBLEP] = i;
    4eee:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ef2:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4ef6:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4efa:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    4efe:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4f02:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
            if (k) {
    4f06:	ee1b 3a10 	vmov	r3, s22
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4f0a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
            if (k) {
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d172      	bne.n	4ff8 <tMBSawPulse_tick+0x678>
			if (p >= b) {
    4f12:	eef4 cac8 	vcmpe.f32	s25, s16
    4f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f1a:	f240 8266 	bls.w	53ea <tMBSawPulse_tick+0xa6a>
    4f1e:	eddf 5a64 	vldr	s11, [pc, #400]	; 50b0 <tMBSawPulse_tick+0x730>
    4f22:	e5eb      	b.n	4afc <tMBSawPulse_tick+0x17c>
    if (c->active)
    4f24:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				p -= 1.0f;
    4f28:	ee38 8a67 	vsub.f32	s16, s16, s15
    if (c->active)
    4f2c:	b153      	cbz	r3, 4f44 <tMBSawPulse_tick+0x5c4>
    4f2e:	eddf 7a61 	vldr	s15, [pc, #388]	; 50b4 <tMBSawPulse_tick+0x734>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4f32:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
    4f36:	ee68 8aa7 	vmul.f32	s17, s17, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4f3a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    4f3e:	e732      	b.n	4da6 <tMBSawPulse_tick+0x426>
				p -= 1.0f;
    4f40:	ee38 8a65 	vsub.f32	s16, s16, s11
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4f44:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    4f48:	e79e      	b.n	4e88 <tMBSawPulse_tick+0x508>
			if (!k && p >= b) {
    4f4a:	eef4 cac8 	vcmpe.f32	s25, s16
    4f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f52:	d8f7      	bhi.n	4f44 <tMBSawPulse_tick+0x5c4>
				x = -0.5f;
    4f54:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4f58:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    4f5c:	eef0 5a49 	vmov.f32	s11, s18
    4f60:	e5cc      	b.n	4afc <tMBSawPulse_tick+0x17c>
			 else if (sw < 0)
    4f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f6a:	f100 820b 	bmi.w	5384 <tMBSawPulse_tick+0xa04>
    c->_k = k;
    4f6e:	eef8 5acb 	vcvt.f32.s32	s11, s22
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4f72:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    p += sw - (int)sw;
    4f76:	eeb0 8a6d 	vmov.f32	s16, s27
    4f7a:	e5bf      	b.n	4afc <tMBSawPulse_tick+0x17c>
			if (p >= 1.0f) {
    4f7c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    4f80:	eeb4 8ae5 	vcmpe.f32	s16, s11
    4f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f88:	dada      	bge.n	4f40 <tMBSawPulse_tick+0x5c0>
				x = -0.5f;
    4f8a:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    4f8e:	e5b3      	b.n	4af8 <tMBSawPulse_tick+0x178>
					 p_at_reset -= 1.0f;
    4f90:	ee3c ca49 	vsub.f32	s24, s24, s18
    if (c->active)
    4f94:	2b00      	cmp	r3, #0
    4f96:	f000 8217 	beq.w	53c8 <tMBSawPulse_tick+0xa48>
    4f9a:	ed9f da46 	vldr	s26, [pc, #280]	; 50b4 <tMBSawPulse_tick+0x734>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    4f9e:	ee38 9a0c 	vadd.f32	s18, s16, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4fa2:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
    4fa6:	ee28 da8d 	vmul.f32	s26, s17, s26
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4faa:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		i = lrintf(r - 0.5f);
    4fae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    4fb2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    4fb6:	eea9 0a0d 	vfma.f32	s0, s18, s26
    4fba:	f000 fc6d 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    4fbe:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4fc2:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4fc4:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    4fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4fca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4fd2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4fd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
		r -= (float)i;
    4fda:	eed9 7a0d 	vfnms.f32	s15, s18, s26
		c->BLEPindices[c->mostRecentBLEP] = i;
    4fde:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4fe2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    4fe6:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4fea:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4fee:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4ff2:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
    if (c->active)
    4ff6:	e75e      	b.n	4eb6 <tMBSawPulse_tick+0x536>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ff8:	3701      	adds	r7, #1
			if (p >= b) {
    4ffa:	eef4 cac8 	vcmpe.f32	s25, s16
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ffe:	1c6a      	adds	r2, r5, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5000:	f007 073f 	and.w	r7, r7, #63	; 0x3f
			if (p >= b) {
    5004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5008:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    500c:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5010:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5014:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5018:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    501c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5020:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5024:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p >= b) {
    5028:	f240 81df 	bls.w	53ea <tMBSawPulse_tick+0xa6a>
				x = 0.5f;
    502c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    5030:	e775      	b.n	4f1e <tMBSawPulse_tick+0x59e>
    if (c->active)
    5032:	ed94 babd 	vldr	s22, [r4, #756]	; 0x2f4
    5036:	ee1b 3a10 	vmov	r3, s22
    503a:	2b00      	cmp	r3, #0
    503c:	f000 8284 	beq.w	5548 <tMBSawPulse_tick+0xbc8>
		r = MINBLEP_PHASES * phase * inv_w;
    5040:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 50b4 <tMBSawPulse_tick+0x734>
    5044:	ee78 ca6c 	vsub.f32	s25, s16, s25
		i = lrintf(r - 0.5f);
    5048:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    504c:	ee28 9a89 	vmul.f32	s18, s17, s18
    5050:	eeac 0a89 	vfma.f32	s0, s25, s18
    5054:	f000 fc20 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    5058:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    505c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (p < 0.0f) {
    5060:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		r -= (float)i;
    5064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5068:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    506c:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    506e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5072:	3201      	adds	r2, #1
			if (p < 0.0f) {
    5074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5078:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    507c:	eedc 7a89 	vfnms.f32	s15, s25, s18
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5080:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    5084:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5088:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    508c:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5090:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    5094:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5098:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    509c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p < 0.0f) {
    50a0:	d5c4      	bpl.n	502c <tMBSawPulse_tick+0x6ac>
				p += 1.0f;
    50a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    50a6:	ee78 7a27 	vadd.f32	s15, s16, s15
    if (c->active)
    50aa:	e6b4      	b.n	4e16 <tMBSawPulse_tick+0x496>
    50ac:	bf800000 	.word	0xbf800000
    50b0:	00000000 	.word	0x00000000
    50b4:	42800000 	.word	0x42800000
		 if (!k)
    50b8:	ee1b 3a10 	vmov	r3, s22
        else if (sw < 0) p = 1.0f - eof_offset;
    50bc:	ee39 da48 	vsub.f32	s26, s18, s16
		 if (!k)
    50c0:	2b00      	cmp	r3, #0
    50c2:	f040 8161 	bne.w	5388 <tMBSawPulse_tick+0xa08>
				 if (p_at_reset < 0.0f)
    50c6:	eeb5 ca40 	vcmp.f32	s24, #0.0
    50ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50ce:	f140 80a0 	bpl.w	5212 <tMBSawPulse_tick+0x892>
    if (c->active)
    50d2:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    50d6:	ee3c ca09 	vadd.f32	s24, s24, s18
    if (c->active)
    50da:	2b00      	cmp	r3, #0
    50dc:	f000 82b3 	beq.w	5646 <tMBSawPulse_tick+0xcc6>
		r = MINBLEP_PHASES * phase * inv_w;
    50e0:	ed1f 9a0c 	vldr	s18, [pc, #-48]	; 50b4 <tMBSawPulse_tick+0x734>
		i = lrintf(r - 0.5f);
    50e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    50e8:	ee28 9a89 	vmul.f32	s18, s17, s18
    50ec:	eead 0a89 	vfma.f32	s0, s27, s18
    50f0:	f000 fbd2 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    50f4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    50f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (k && p_at_reset < b)
    50fc:	eef4 cacc 	vcmpe.f32	s25, s24
		r -= (float)i;
    5100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5104:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5108:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    510a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    510e:	3201      	adds	r2, #1
				 if (k && p_at_reset < b)
    5110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5114:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    5118:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    511c:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5120:	4ac8      	ldr	r2, [pc, #800]	; (5444 <tMBSawPulse_tick+0xac4>)
		c->BLEPindices[c->mostRecentBLEP] = i;
    5122:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5126:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    512a:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    512e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    5132:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5136:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    513a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (k && p_at_reset < b)
    513e:	f340 82ee 	ble.w	571e <tMBSawPulse_tick+0xd9e>
		r = MINBLEP_PHASES * phase * inv_w;
    5142:	ee78 da6c 	vsub.f32	s27, s16, s25
		i = lrintf(r - 0.5f);
    5146:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    514a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    514e:	ee7d da8c 	vadd.f32	s27, s27, s24
        else if (sw < 0) p = 1.0f - eof_offset;
    5152:	eeb0 8a4d 	vmov.f32	s16, s26
		i = lrintf(r - 0.5f);
    5156:	eead 0a89 	vfma.f32	s0, s27, s18
    515a:	f000 fb9d 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    515e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5162:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5164:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    5166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    516a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    516e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5172:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		r -= (float)i;
    5176:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    517a:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    517e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5182:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5186:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    518a:	edc2 aa3d 	vstr	s21, [r2, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    518e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		r = MINBLEP_PHASES * phase * inv_w;
    5192:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    5196:	eddf 7aad 	vldr	s15, [pc, #692]	; 544c <tMBSawPulse_tick+0xacc>
		i = lrintf(r - 0.5f);
    519a:	eebe ea00 	vmov.f32	s28, #224	; 0xbf000000 -0.5
    519e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    51a2:	ee7d da49 	vsub.f32	s27, s26, s18
    51a6:	eeb0 0a4e 	vmov.f32	s0, s28
    51aa:	eead 0aa8 	vfma.f32	s0, s27, s17
    51ae:	f000 fb73 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    51b2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51b6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    51ba:	ee3a 7ac9 	vsub.f32	s14, s21, s18
		r -= (float)i;
    51be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPindices[c->mostRecentBLEP] = i;
    51c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51c6:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    51c8:	1c6a      	adds	r2, r5, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    51ca:	ee27 ca0c 	vmul.f32	s24, s14, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51ce:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    51d2:	eedd 7aa8 	vfnms.f32	s15, s27, s17
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    51d6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    51da:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    51de:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    51e2:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    51e6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    51ea:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    51ee:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
			if (!k) {
    51f2:	ee1b 3a10 	vmov	r3, s22
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    51f6:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (!k) {
    51fa:	2b00      	cmp	r3, #0
    51fc:	f000 81ef 	beq.w	55de <tMBSawPulse_tick+0xc5e>
			if (p < b) {
    5200:	eeb4 daec 	vcmpe.f32	s26, s25
    5204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5208:	f100 81e2 	bmi.w	55d0 <tMBSawPulse_tick+0xc50>
    c->_k = k;
    520c:	eef8 5acb 	vcvt.f32.s32	s11, s22
    5210:	e474      	b.n	4afc <tMBSawPulse_tick+0x17c>
		else if (sw < 0)
    5212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    521a:	f57f ad13 	bpl.w	4c44 <tMBSawPulse_tick+0x2c4>
    if (c->active)
    521e:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5222:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
    5226:	2b00      	cmp	r3, #0
    5228:	f040 818b 	bne.w	5542 <tMBSawPulse_tick+0xbc2>
				x = -0.5f;
    522c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
				k = 1;
    5230:	ed9f ba85 	vldr	s22, [pc, #532]	; 5448 <tMBSawPulse_tick+0xac8>
					 k = 1;
    5234:	eeb0 8a4d 	vmov.f32	s16, s26
			if (p < b) {
    5238:	eef4 cacd 	vcmpe.f32	s25, s26
    523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5240:	dde4      	ble.n	520c <tMBSawPulse_tick+0x88c>
    5242:	e6f3      	b.n	502c <tMBSawPulse_tick+0x6ac>
					 p_at_reset -= 1.0f;
    5244:	ee3c ca49 	vsub.f32	s24, s24, s18
    if (c->active)
    5248:	2b00      	cmp	r3, #0
    524a:	f000 80c3 	beq.w	53d4 <tMBSawPulse_tick+0xa54>
		i = lrintf(r - 0.5f);
    524e:	eefe da00 	vmov.f32	s27, #224	; 0xbf000000 -0.5
    5252:	ed9f da7e 	vldr	s26, [pc, #504]	; 544c <tMBSawPulse_tick+0xacc>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    5256:	ee38 aa0c 	vadd.f32	s20, s16, s24
    525a:	ee28 da8d 	vmul.f32	s26, s17, s26
		i = lrintf(r - 0.5f);
    525e:	eeb0 0a6d 	vmov.f32	s0, s27
    5262:	eeaa 0a0d 	vfma.f32	s0, s20, s26
    5266:	f000 fb17 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    526a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    526e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (!k && p_at_reset >= b)
    5272:	eef4 cacc 	vcmpe.f32	s25, s24
		r -= (float)i;
    5276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    527a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    527e:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5280:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5284:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
    5286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    528a:	f003 083f 	and.w	r8, r3, #63	; 0x3f
		r -= (float)i;
    528e:	eeda 7a0d 	vfnms.f32	s15, s20, s26
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5292:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    5296:	eb04 0348 	add.w	r3, r4, r8, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    529a:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    529e:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    52a2:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
    52a6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    52aa:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    52ae:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (!k && p_at_reset >= b)
    52b2:	f200 821b 	bhi.w	56ec <tMBSawPulse_tick+0xd6c>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    52b6:	ee38 9a6c 	vsub.f32	s18, s16, s25
					 k = 1;
    52ba:	ed9f ba63 	vldr	s22, [pc, #396]	; 5448 <tMBSawPulse_tick+0xac8>
		i = lrintf(r - 0.5f);
    52be:	eeb0 0a6d 	vmov.f32	s0, s27
					 x = -0.5f;
    52c2:	eeb0 aa6d 	vmov.f32	s20, s27
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    52c6:	ee39 9a0c 	vadd.f32	s18, s18, s24
		i = lrintf(r - 0.5f);
    52ca:	eead 0a09 	vfma.f32	s0, s26, s18
    52ce:	f000 fae3 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    52d2:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52d6:	f108 0301 	add.w	r3, r8, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    52da:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    52dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    52e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    52e8:	f002 053f 	and.w	r5, r2, #63	; 0x3f
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    52ec:	eef1 7a6a 	vneg.f32	s15, s21
		r -= (float)i;
    52f0:	ee9d 7a09 	vfnms.f32	s14, s26, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    52f4:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    52f8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    52fc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5300:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5304:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5308:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    if (c->active)
    530c:	e5d3      	b.n	4eb6 <tMBSawPulse_tick+0x536>
    530e:	2b00      	cmp	r3, #0
    5310:	d055      	beq.n	53be <tMBSawPulse_tick+0xa3e>
		i = lrintf(r - 0.5f);
    5312:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    5316:	ed9f da4d 	vldr	s26, [pc, #308]	; 544c <tMBSawPulse_tick+0xacc>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    531a:	ee7d daec 	vsub.f32	s27, s27, s25
    531e:	ee28 da8d 	vmul.f32	s26, s17, s26
		i = lrintf(r - 0.5f);
    5322:	eeb0 0a4a 	vmov.f32	s0, s20
    5326:	eead 0a8d 	vfma.f32	s0, s27, s26
    532a:	f000 fab5 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    532e:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5332:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (p_at_reset >= 1.0f)
    5336:	eeb4 cac9 	vcmpe.f32	s24, s18
		r -= (float)i;
    533a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    533e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5342:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5344:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5348:	3201      	adds	r2, #1
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    534a:	eef1 7a6a 	vneg.f32	s15, s21
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    534e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    5352:	eedd 6a8d 	vfnms.f32	s13, s27, s26
				 if (p_at_reset >= 1.0f)
    5356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    535a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    535e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5362:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5366:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    536a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    536e:	edc3 6a3c 	vstr	s13, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5372:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5376:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (p_at_reset >= 1.0f)
    537a:	f280 815f 	bge.w	563c <tMBSawPulse_tick+0xcbc>
					 k = 1;
    537e:	ed9f ba32 	vldr	s22, [pc, #200]	; 5448 <tMBSawPulse_tick+0xac8>
    5382:	e598      	b.n	4eb6 <tMBSawPulse_tick+0x536>
    p += sw - (int)sw;
    5384:	eeb0 da6d 	vmov.f32	s26, s27
				 if (p_at_reset < b)
    5388:	eef4 cacc 	vcmpe.f32	s25, s24
    if (c->active)
    538c:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				 if (p_at_reset < b)
    5390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5394:	f300 80e1 	bgt.w	555a <tMBSawPulse_tick+0xbda>
				 if (p_at_reset < 0.0f)
    5398:	eeb5 cac0 	vcmpe.f32	s24, #0.0
    539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53a0:	f100 8167 	bmi.w	5672 <tMBSawPulse_tick+0xcf2>
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    53a4:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
    53a8:	2b00      	cmp	r3, #0
    53aa:	f040 80ca 	bne.w	5542 <tMBSawPulse_tick+0xbc2>
			if (!k) {
    53ae:	ee1b 3a10 	vmov	r3, s22
    53b2:	2b00      	cmp	r3, #0
    53b4:	f43f af3a 	beq.w	522c <tMBSawPulse_tick+0x8ac>
    53b8:	eeb0 8a4d 	vmov.f32	s16, s26
    53bc:	e73c      	b.n	5238 <tMBSawPulse_tick+0x8b8>
				 if (p_at_reset >= 1.0f)
    53be:	eeb4 cac9 	vcmpe.f32	s24, s18
    53c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53c6:	db0a      	blt.n	53de <tMBSawPulse_tick+0xa5e>
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    53c8:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    53cc:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
    53d0:	f7ff bb5e 	b.w	4a90 <tMBSawPulse_tick+0x110>
				 if (!k && p_at_reset >= b)
    53d4:	eef4 cacc 	vcmpe.f32	s25, s24
    53d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53dc:	d8f4      	bhi.n	53c8 <tMBSawPulse_tick+0xa48>
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    53de:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
				x = 0.5f;
    53e2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    53e6:	f7ff bb53 	b.w	4a90 <tMBSawPulse_tick+0x110>
		i = lrintf(r - 0.5f);
    53ea:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    53ee:	ee78 ca6c 	vsub.f32	s25, s16, s25
    53f2:	eeb1 9a6a 	vneg.f32	s18, s21
		i = lrintf(r - 0.5f);
    53f6:	eeb0 0a4a 	vmov.f32	s0, s20
    53fa:	eea8 0aac 	vfma.f32	s0, s17, s25
    53fe:	f000 fa4b 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    5402:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5406:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5408:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    540a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    540e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5416:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    541a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		r -= (float)i;
    541e:	eed8 7aac 	vfnms.f32	s15, s17, s25
		c->BLEPindices[c->mostRecentBLEP] = i;
    5422:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5426:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    542a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    542e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5432:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5436:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    543a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    543e:	f7ff bb5d 	b.w	4afc <tMBSawPulse_tick+0x17c>
    5442:	bf00      	nop
    5444:	bf800000 	.word	0xbf800000
    5448:	00000001 	.word	0x00000001
    544c:	42800000 	.word	0x42800000
				p += 1.0f;
    5450:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    if (c->active)
    5454:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				p += 1.0f;
    5458:	ee38 9a0c 	vadd.f32	s18, s16, s24
    if (c->active)
    545c:	2b00      	cmp	r3, #0
    545e:	d060      	beq.n	5522 <tMBSawPulse_tick+0xba2>
		i = lrintf(r - 0.5f);
    5460:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
    5464:	ed1f aa07 	vldr	s20, [pc, #-28]	; 544c <tMBSawPulse_tick+0xacc>
		r = MINBLEP_PHASES * phase * inv_w;
    5468:	ee28 8a88 	vmul.f32	s16, s17, s16
		i = lrintf(r - 0.5f);
    546c:	eeb0 0a4b 	vmov.f32	s0, s22
    5470:	eea8 0a0a 	vfma.f32	s0, s16, s20
    5474:	f000 fa10 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    5478:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    547c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (k && p < b) {
    5480:	eef4 cac9 	vcmpe.f32	s25, s18
		r -= (float)i;
    5484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5488:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    548c:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    548e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5492:	3201      	adds	r2, #1
			if (k && p < b) {
    5494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5498:	f003 073f 	and.w	r7, r3, #63	; 0x3f
		r -= (float)i;
    549c:	eed8 7a0a 	vfnms.f32	s15, s16, s20
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    54a0:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    54a4:	4aa6      	ldr	r2, [pc, #664]	; (5740 <tMBSawPulse_tick+0xdc0>)
		c->BLEPindices[c->mostRecentBLEP] = i;
    54a6:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54aa:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    54ae:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    54b2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    54b6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    54ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    54be:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (k && p < b) {
    54c2:	f340 8124 	ble.w	570e <tMBSawPulse_tick+0xd8e>
		r = MINBLEP_PHASES * phase * inv_w;
    54c6:	ee68 8a8a 	vmul.f32	s17, s17, s20
    54ca:	ee79 ca6c 	vsub.f32	s25, s18, s25
				x = 0.5f;
    54ce:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    54d2:	eeb0 8a49 	vmov.f32	s16, s18
		i = lrintf(r - 0.5f);
    54d6:	eeb0 0a4b 	vmov.f32	s0, s22
    54da:	eeac 0aa8 	vfma.f32	s0, s25, s17
    54de:	f000 f9db 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    54e2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54e6:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    54e8:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    54ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    54ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    54f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    54f6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    54fa:	eddf 5a92 	vldr	s11, [pc, #584]	; 5744 <tMBSawPulse_tick+0xdc4>
		r -= (float)i;
    54fe:	eedc 7aa8 	vfnms.f32	s15, s25, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    5502:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5506:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    550a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    550e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5512:	edc2 aa3d 	vstr	s21, [r2, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5516:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    551a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    551e:	f7ff baed 	b.w	4afc <tMBSawPulse_tick+0x17c>
			if (k && p < b) {
    5522:	eef4 cac9 	vcmpe.f32	s25, s18
    5526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    552a:	f340 80ff 	ble.w	572c <tMBSawPulse_tick+0xdac>
				x = 0.5f;
    552e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    5532:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    5536:	eeb0 8a49 	vmov.f32	s16, s18
    553a:	eddf 5a82 	vldr	s11, [pc, #520]	; 5744 <tMBSawPulse_tick+0xdc4>
    553e:	f7ff badd 	b.w	4afc <tMBSawPulse_tick+0x17c>
    5542:	eeb0 8a4d 	vmov.f32	s16, s26
    5546:	e624      	b.n	5192 <tMBSawPulse_tick+0x812>
			if (p < 0.0f) {
    5548:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5550:	d466      	bmi.n	5620 <tMBSawPulse_tick+0xca0>
				x = 0.5f;
    5552:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    5556:	f7ff bacd 	b.w	4af4 <tMBSawPulse_tick+0x174>
    if (c->active)
    555a:	2b00      	cmp	r3, #0
    555c:	d07b      	beq.n	5656 <tMBSawPulse_tick+0xcd6>
		r = MINBLEP_PHASES * phase * inv_w;
    555e:	ed9f 9a7a 	vldr	s18, [pc, #488]	; 5748 <tMBSawPulse_tick+0xdc8>
    5562:	ee7d daec 	vsub.f32	s27, s27, s25
		i = lrintf(r - 0.5f);
    5566:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    556a:	ee28 9a89 	vmul.f32	s18, s17, s18
    556e:	eead 0a89 	vfma.f32	s0, s27, s18
    5572:	f000 f991 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    5576:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    557a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (p_at_reset < 0.0f)
    557e:	eeb5 cac0 	vcmpe.f32	s24, #0.0
		r -= (float)i;
    5582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5586:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    558a:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    558c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5590:	3201      	adds	r2, #1
				 if (p_at_reset < 0.0f)
    5592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5596:	f003 083f 	and.w	r8, r3, #63	; 0x3f
		r -= (float)i;
    559a:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    559e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    55a2:	eb04 0348 	add.w	r3, r4, r8, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55a6:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    55aa:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    55ae:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
    55b2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    55b6:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    55ba:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (p_at_reset < 0.0f)
    55be:	f100 809b 	bmi.w	56f8 <tMBSawPulse_tick+0xd78>
					 x = 0.5f;
    55c2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
					 k = 0;
    55c6:	ee0b 7a10 	vmov	s22, r7
				 if (p_at_reset < 0.0f)
    55ca:	eeb0 8a4d 	vmov.f32	s16, s26
    55ce:	e5e0      	b.n	5192 <tMBSawPulse_tick+0x812>
		r = MINBLEP_PHASES * phase * inv_w;
    55d0:	ee7d ca6c 	vsub.f32	s25, s26, s25
		i = lrintf(r - 0.5f);
    55d4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    55d8:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    55dc:	e77d      	b.n	54da <tMBSawPulse_tick+0xb5a>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55de:	3701      	adds	r7, #1
			if (p < b) {
    55e0:	eeb4 daec 	vcmpe.f32	s26, s25
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    55e4:	1c6a      	adds	r2, r5, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    55e6:	eeb1 7a6a 	vneg.f32	s14, s21
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55ea:	f007 073f 	and.w	r7, r7, #63	; 0x3f
			if (p < b) {
    55ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    55f2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    55f6:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    55fa:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    55fe:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5602:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    5606:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    560a:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    560e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p < b) {
    5612:	d4dd      	bmi.n	55d0 <tMBSawPulse_tick+0xc50>
    5614:	eef0 5a49 	vmov.f32	s11, s18
				x = -0.5f;
    5618:	eeb0 aa4e 	vmov.f32	s20, s28
    561c:	f7ff ba6e 	b.w	4afc <tMBSawPulse_tick+0x17c>
				p += 1.0f;
    5620:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5624:	ee78 7a27 	vadd.f32	s15, s16, s15
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    5628:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    562c:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
				x = -0.5f;
    5630:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    5634:	eeb0 8a67 	vmov.f32	s16, s15
    5638:	f7ff ba60 	b.w	4afc <tMBSawPulse_tick+0x17c>
					 p_at_reset -= 1.0f;
    563c:	ee3c ca49 	vsub.f32	s24, s24, s18
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    5640:	ee38 9a0c 	vadd.f32	s18, s16, s24
    if (c->active)
    5644:	e4b3      	b.n	4fae <tMBSawPulse_tick+0x62e>
				 if (k && p_at_reset < b)
    5646:	eef4 cacc 	vcmpe.f32	s25, s24
    564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    564e:	dd07      	ble.n	5660 <tMBSawPulse_tick+0xce0>
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5650:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
    5654:	e5ea      	b.n	522c <tMBSawPulse_tick+0x8ac>
				 if (p_at_reset < 0.0f)
    5656:	eeb5 cac0 	vcmpe.f32	s24, #0.0
    565a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    565e:	d5f7      	bpl.n	5650 <tMBSawPulse_tick+0xcd0>
					 x = -0.5f;
    5660:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5664:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    5668:	eeb0 8a4d 	vmov.f32	s16, s26
					 k = 1;
    566c:	ed9f ba37 	vldr	s22, [pc, #220]	; 574c <tMBSawPulse_tick+0xdcc>
    5670:	e5e2      	b.n	5238 <tMBSawPulse_tick+0x8b8>
					 p_at_reset += 1.0f;
    5672:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5676:	ee3c ca27 	vadd.f32	s24, s24, s15
    if (c->active)
    567a:	2b00      	cmp	r3, #0
    567c:	d0f0      	beq.n	5660 <tMBSawPulse_tick+0xce0>
    567e:	ed9f 9a32 	vldr	s18, [pc, #200]	; 5748 <tMBSawPulse_tick+0xdc8>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, -1.0f);
    5682:	ee78 da0c 	vadd.f32	s27, s16, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5686:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
    568a:	ee28 9a89 	vmul.f32	s18, s17, s18
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    568e:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		r = MINBLEP_PHASES * phase * inv_w;
    5692:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					 k = 1;
    5696:	ed9f ba2d 	vldr	s22, [pc, #180]	; 574c <tMBSawPulse_tick+0xdcc>
		i = lrintf(r - 0.5f);
    569a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    569e:	eeb0 8a4d 	vmov.f32	s16, s26
    56a2:	ee7d dae7 	vsub.f32	s27, s27, s15
					 x = -0.5f;
    56a6:	eeb0 aa40 	vmov.f32	s20, s0
		i = lrintf(r - 0.5f);
    56aa:	eead 0a89 	vfma.f32	s0, s27, s18
    56ae:	f000 f8f3 	bl	5898 <__lrintf_veneer>
		r -= (float)i;
    56b2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56b6:	f108 0301 	add.w	r3, r8, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    56ba:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
    56bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    56c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    56c8:	f002 053f 	and.w	r5, r2, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    56cc:	4a1c      	ldr	r2, [pc, #112]	; (5740 <tMBSawPulse_tick+0xdc0>)
		r -= (float)i;
    56ce:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    56d2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    56d6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    56da:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    56de:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    56e2:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    56e6:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
    if (c->active)
    56ea:	e552      	b.n	5192 <tMBSawPulse_tick+0x812>
				 if (!k && p_at_reset >= b)
    56ec:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    56f0:	ee0b 7a10 	vmov	s22, r7
    56f4:	f7ff bbdf 	b.w	4eb6 <tMBSawPulse_tick+0x536>
					 p_at_reset += 1.0f;
    56f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    56fc:	ee3c ca27 	vadd.f32	s24, s24, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, -1.0f);
    5700:	ee7c da08 	vadd.f32	s27, s24, s16
    if (c->active)
    5704:	e7c5      	b.n	5692 <tMBSawPulse_tick+0xd12>
    p += sw - (int)sw;
    5706:	eeb0 8a6d 	vmov.f32	s16, s27
    570a:	f7ff b972 	b.w	49f2 <tMBSawPulse_tick+0x72>
			if (k && p < b) {
    570e:	eeb0 8a49 	vmov.f32	s16, s18
    5712:	eef0 5a4c 	vmov.f32	s11, s24
    5716:	eeb0 aa4b 	vmov.f32	s20, s22
    571a:	f7ff b9ef 	b.w	4afc <tMBSawPulse_tick+0x17c>
				 if (k && p_at_reset < b)
    571e:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    5722:	ed9f ba0a 	vldr	s22, [pc, #40]	; 574c <tMBSawPulse_tick+0xdcc>
        else if (sw < 0) p = 1.0f - eof_offset;
    5726:	eeb0 8a4d 	vmov.f32	s16, s26
    572a:	e532      	b.n	5192 <tMBSawPulse_tick+0x812>
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    572c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    5730:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    5734:	eeb0 8a49 	vmov.f32	s16, s18
    5738:	eef0 5a4c 	vmov.f32	s11, s24
    573c:	f7ff b9de 	b.w	4afc <tMBSawPulse_tick+0x17c>
    5740:	bf800000 	.word	0xbf800000
    5744:	00000000 	.word	0x00000000
    5748:	42800000 	.word	0x42800000
    574c:	00000001 	.word	0x00000001
    5750:	f3af 8000 	nop.w
    5754:	f3af 8000 	nop.w
    5758:	f3af 8000 	nop.w
    575c:	f3af 8000 	nop.w

00005760 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    5760:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    5762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    5766:	eddf 6a14 	vldr	s13, [pc, #80]	; 57b8 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    576a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    576e:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    5772:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    5776:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    577e:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    5782:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    5786:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    578a:	dc0c      	bgt.n	57a6 <tMBSawPulse_setFreq+0x46>
    578c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 57bc <tMBSawPulse_setFreq+0x5c>
    5790:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5798:	d405      	bmi.n	57a6 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    579a:	2201      	movs	r2, #1
    579c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    57a0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    57a4:	4770      	bx	lr
    	c->gain = 0.0f;
    57a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 57c0 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    57aa:	2200      	movs	r2, #0
    57ac:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    57b0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    57b4:	4770      	bx	lr
    57b6:	bf00      	nop
    57b8:	45bb8000 	.word	0x45bb8000
    57bc:	c5bb8000 	.word	0xc5bb8000
    57c0:	00000000 	.word	0x00000000
    57c4:	f3af 8000 	nop.w
    57c8:	f3af 8000 	nop.w
    57cc:	f3af 8000 	nop.w
    57d0:	f3af 8000 	nop.w
    57d4:	f3af 8000 	nop.w
    57d8:	f3af 8000 	nop.w
    57dc:	f3af 8000 	nop.w

000057e0 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    57e0:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    57e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
    57e6:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    57ea:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
    57ee:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
    57f2:	eef1 7a67 	vneg.f32	s15, s15
    57f6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    57fa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    57fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5802:	eef4 6ac7 	vcmpe.f32	s13, s14
    5806:	bfcc      	ite	gt
    5808:	2201      	movgt	r2, #1
    580a:	2200      	movle	r2, #0
    580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5810:	f002 0201 	and.w	r2, r2, #1
    5814:	bf88      	it	hi
    5816:	2200      	movhi	r2, #0
    5818:	b122      	cbz	r2, 5824 <tMBSawPulse_sync+0x44>
    581a:	eeb5 0a40 	vcmp.f32	s0, #0.0
    581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5822:	da04      	bge.n	582e <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    5824:	ed9f 7a05 	vldr	s14, [pc, #20]	; 583c <tMBSawPulse_sync+0x5c>
    5828:	ed83 7a04 	vstr	s14, [r3, #16]
}
    582c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    582e:	ee37 7a66 	vsub.f32	s14, s14, s13
    5832:	ee27 7a06 	vmul.f32	s14, s14, s12
    5836:	ed83 7a04 	vstr	s14, [r3, #16]
}
    583a:	4770      	bx	lr
    583c:	00000000 	.word	0x00000000

00005840 <__tCrusher_setQuality_veneer>:
    5840:	f85f f000 	ldr.w	pc, [pc]	; 5844 <__tCrusher_setQuality_veneer+0x4>
    5844:	24011119 	.word	0x24011119

00005848 <__audioFrame_veneer>:
    5848:	f85f f000 	ldr.w	pc, [pc]	; 584c <__audioFrame_veneer+0x4>
    584c:	240028cd 	.word	0x240028cd

00005850 <__tCompressor_tick_veneer>:
    5850:	f85f f000 	ldr.w	pc, [pc]	; 5854 <__tCompressor_tick_veneer+0x4>
    5854:	2401121d 	.word	0x2401121d

00005858 <__tSVF_setFreqFast_veneer>:
    5858:	f85f f000 	ldr.w	pc, [pc]	; 585c <__tSVF_setFreqFast_veneer+0x4>
    585c:	24011f5d 	.word	0x24011f5d

00005860 <__tCycle_tick_veneer>:
    5860:	f85f f000 	ldr.w	pc, [pc]	; 5864 <__tCycle_tick_veneer+0x4>
    5864:	24013ce5 	.word	0x24013ce5

00005868 <__tMBTriangle_setWidth_veneer>:
    5868:	f85f f000 	ldr.w	pc, [pc]	; 586c <__tMBTriangle_setWidth_veneer+0x4>
    586c:	240159b5 	.word	0x240159b5

00005870 <__powf_veneer>:
    5870:	f85f f000 	ldr.w	pc, [pc]	; 5874 <__powf_veneer+0x4>
    5874:	240191f9 	.word	0x240191f9

00005878 <__memmove_veneer>:
    5878:	f85f f000 	ldr.w	pc, [pc]	; 587c <__memmove_veneer+0x4>
    587c:	240188cd 	.word	0x240188cd

00005880 <__tVZFilter_setResonance_veneer>:
    5880:	f85f f000 	ldr.w	pc, [pc]	; 5884 <__tVZFilter_setResonance_veneer+0x4>
    5884:	24012815 	.word	0x24012815

00005888 <__tCrusher_setRound_veneer>:
    5888:	f85f f000 	ldr.w	pc, [pc]	; 588c <__tCrusher_setRound_veneer+0x4>
    588c:	24011165 	.word	0x24011165

00005890 <__fastdbtoa_veneer>:
    5890:	f85f f000 	ldr.w	pc, [pc]	; 5894 <__fastdbtoa_veneer+0x4>
    5894:	24013a09 	.word	0x24013a09

00005898 <__lrintf_veneer>:
    5898:	f85f f000 	ldr.w	pc, [pc]	; 589c <__lrintf_veneer+0x4>
    589c:	24019149 	.word	0x24019149

000058a0 <__tMBSineTri_setShape_veneer>:
    58a0:	f85f f000 	ldr.w	pc, [pc]	; 58a4 <__tMBSineTri_setShape_veneer+0x4>
    58a4:	24016b29 	.word	0x24016b29

000058a8 <__tCrusher_tick_veneer>:
    58a8:	f85f f000 	ldr.w	pc, [pc]	; 58ac <__tCrusher_tick_veneer+0x4>
    58ac:	24011085 	.word	0x24011085

000058b0 <__tMBSaw_setFreq_veneer>:
    58b0:	f85f f000 	ldr.w	pc, [pc]	; 58b4 <__tMBSaw_setFreq_veneer+0x4>
    58b4:	24017029 	.word	0x24017029

000058b8 <__arm_sin_f32_veneer>:
    58b8:	f85f f000 	ldr.w	pc, [pc]	; 58bc <__arm_sin_f32_veneer+0x4>
    58bc:	2401879d 	.word	0x2401879d

000058c0 <__tSVF_setQ_veneer>:
    58c0:	f85f f000 	ldr.w	pc, [pc]	; 58c4 <__tSVF_setQ_veneer+0x4>
    58c4:	24011fc9 	.word	0x24011fc9

000058c8 <__tMBSineTri_setFreq_veneer>:
    58c8:	f85f f000 	ldr.w	pc, [pc]	; 58cc <__tMBSineTri_setFreq_veneer+0x4>
    58cc:	24016aa9 	.word	0x24016aa9

000058d0 <__tMBPulse_sync_veneer>:
    58d0:	f85f f000 	ldr.w	pc, [pc]	; 58d4 <__tMBPulse_sync_veneer+0x4>
    58d4:	2401497d 	.word	0x2401497d

000058d8 <__tanhf_veneer>:
    58d8:	f85f f000 	ldr.w	pc, [pc]	; 58dc <__tanhf_veneer+0x4>
    58dc:	24019511 	.word	0x24019511

000058e0 <__tVZFilter_setFreqFast_veneer>:
    58e0:	f85f f000 	ldr.w	pc, [pc]	; 58e4 <__tVZFilter_setFreqFast_veneer+0x4>
    58e4:	24012521 	.word	0x24012521

000058e8 <__tDiodeFilter_setFreqFast_veneer>:
    58e8:	f85f f000 	ldr.w	pc, [pc]	; 58ec <__tDiodeFilter_setFreqFast_veneer+0x4>
    58ec:	24013189 	.word	0x24013189

000058f0 <__tADSRT_tickNoInterp_veneer>:
    58f0:	f85f f000 	ldr.w	pc, [pc]	; 58f4 <__tADSRT_tickNoInterp_veneer+0x4>
    58f4:	240118dd 	.word	0x240118dd

000058f8 <__fasterdbtoa_veneer>:
    58f8:	f85f f000 	ldr.w	pc, [pc]	; 58fc <__fasterdbtoa_veneer+0x4>
    58fc:	24013a19 	.word	0x24013a19

00005900 <__tADSRT_setRelease_veneer>:
    5900:	f85f f000 	ldr.w	pc, [pc]	; 5904 <__tADSRT_setRelease_veneer+0x4>
    5904:	240115b1 	.word	0x240115b1

00005908 <__tCycle_setFreq_veneer>:
    5908:	f85f f000 	ldr.w	pc, [pc]	; 590c <__tCycle_setFreq_veneer+0x4>
    590c:	24013d31 	.word	0x24013d31

00005910 <__tHighpass_tick_veneer>:
    5910:	f85f f000 	ldr.w	pc, [pc]	; 5914 <__tHighpass_tick_veneer+0x4>
    5914:	2401209d 	.word	0x2401209d

00005918 <__tVZFilter_tickEfficient_veneer>:
    5918:	f85f f000 	ldr.w	pc, [pc]	; 591c <__tVZFilter_tickEfficient_veneer+0x4>
    591c:	240120e1 	.word	0x240120e1

00005920 <__tCrusher_setSamplingRatio_veneer>:
    5920:	f85f f000 	ldr.w	pc, [pc]	; 5924 <__tCrusher_setSamplingRatio_veneer+0x4>
    5924:	2401116d 	.word	0x2401116d

00005928 <__tMBSaw_sync_veneer>:
    5928:	f85f f000 	ldr.w	pc, [pc]	; 592c <__tMBSaw_sync_veneer+0x4>
    592c:	24017049 	.word	0x24017049

00005930 <__tSVF_tick_veneer>:
    5930:	f85f f000 	ldr.w	pc, [pc]	; 5934 <__tSVF_tick_veneer+0x4>
    5934:	24011ef1 	.word	0x24011ef1

00005938 <__LEAF_tanh_veneer>:
    5938:	f85f f000 	ldr.w	pc, [pc]	; 593c <__LEAF_tanh_veneer+0x4>
    593c:	240136d1 	.word	0x240136d1

00005940 <__tDiodeFilter_tick_veneer>:
    5940:	f85f f000 	ldr.w	pc, [pc]	; 5944 <__tDiodeFilter_tick_veneer+0x4>
    5944:	24012b81 	.word	0x24012b81

00005948 <__tMBSineTri_tick_veneer>:
    5948:	f85f f000 	ldr.w	pc, [pc]	; 594c <__tMBSineTri_tick_veneer+0x4>
    594c:	24015af1 	.word	0x24015af1

00005950 <__tExpSmooth_tick_veneer>:
    5950:	f85f f000 	ldr.w	pc, [pc]	; 5954 <__tExpSmooth_tick_veneer+0x4>
    5954:	24011b21 	.word	0x24011b21

00005958 <__tMBPulse_tick_veneer>:
    5958:	f85f f000 	ldr.w	pc, [pc]	; 595c <__tMBPulse_tick_veneer+0x4>
    595c:	24013eb9 	.word	0x24013eb9

00005960 <__tDiodeFilter_tickEfficient_veneer>:
    5960:	f85f f000 	ldr.w	pc, [pc]	; 5964 <__tDiodeFilter_tickEfficient_veneer+0x4>
    5964:	24012e85 	.word	0x24012e85

00005968 <__tLadderFilter_setFreqFast_veneer>:
    5968:	f85f f000 	ldr.w	pc, [pc]	; 596c <__tLadderFilter_setFreqFast_veneer+0x4>
    596c:	240134c5 	.word	0x240134c5

00005970 <__tLadderFilter_tick_veneer>:
    5970:	f85f f000 	ldr.w	pc, [pc]	; 5974 <__tLadderFilter_tick_veneer+0x4>
    5974:	24013279 	.word	0x24013279

00005978 <__tLadderFilter_setQ_veneer>:
    5978:	f85f f000 	ldr.w	pc, [pc]	; 597c <__tLadderFilter_setQ_veneer+0x4>
    597c:	2401350d 	.word	0x2401350d

00005980 <__memset_veneer>:
    5980:	f85f f000 	ldr.w	pc, [pc]	; 5984 <__memset_veneer+0x4>
    5984:	24018901 	.word	0x24018901

00005988 <__tADSRT_setAttack_veneer>:
    5988:	f85f f000 	ldr.w	pc, [pc]	; 598c <__tADSRT_setAttack_veneer+0x4>
    598c:	24011535 	.word	0x24011535

00005990 <__tDiodeFilter_setQ_veneer>:
    5990:	f85f f000 	ldr.w	pc, [pc]	; 5994 <__tDiodeFilter_setQ_veneer+0x4>
    5994:	240131c9 	.word	0x240131c9

00005998 <__tVZFilter_setGain_veneer>:
    5998:	f85f f000 	ldr.w	pc, [pc]	; 599c <__tVZFilter_setGain_veneer+0x4>
    599c:	240127dd 	.word	0x240127dd

000059a0 <__tMBTriangle_tick_veneer>:
    59a0:	f85f f000 	ldr.w	pc, [pc]	; 59a4 <__tMBTriangle_tick_veneer+0x4>
    59a4:	24014a81 	.word	0x24014a81

000059a8 <__tMBPulse_setWidth_veneer>:
    59a8:	f85f f000 	ldr.w	pc, [pc]	; 59ac <__tMBPulse_setWidth_veneer+0x4>
    59ac:	24014961 	.word	0x24014961

000059b0 <__tMBSawPulse_setShape_veneer>:
    59b0:	f85f f000 	ldr.w	pc, [pc]	; 59b4 <__tMBSawPulse_setShape_veneer+0x4>
    59b4:	2401713d 	.word	0x2401713d

000059b8 <__tMBSineTri_sync_veneer>:
    59b8:	f85f f000 	ldr.w	pc, [pc]	; 59bc <__tMBSineTri_sync_veneer+0x4>
    59bc:	24016ac9 	.word	0x24016ac9

000059c0 <__LEAF_shaper_veneer>:
    59c0:	f85f f000 	ldr.w	pc, [pc]	; 59c4 <__LEAF_shaper_veneer+0x4>
    59c4:	24013609 	.word	0x24013609

000059c8 <__mtof_veneer>:
    59c8:	f85f f000 	ldr.w	pc, [pc]	; 59cc <__mtof_veneer+0x4>
    59cc:	240138e9 	.word	0x240138e9

000059d0 <__tMBSaw_tick_veneer>:
    59d0:	f85f f000 	ldr.w	pc, [pc]	; 59d4 <__tMBSaw_tick_veneer+0x4>
    59d4:	24016bb1 	.word	0x24016bb1

000059d8 <__fasterexpf_veneer>:
    59d8:	f85f f000 	ldr.w	pc, [pc]	; 59dc <__fasterexpf_veneer+0x4>
    59dc:	240135a9 	.word	0x240135a9

000059e0 <__tCrusher_setOperation_veneer>:
    59e0:	f85f f000 	ldr.w	pc, [pc]	; 59e4 <__tCrusher_setOperation_veneer+0x4>
    59e4:	24011105 	.word	0x24011105

000059e8 <__tADSRT_setSustain_veneer>:
    59e8:	f85f f000 	ldr.w	pc, [pc]	; 59ec <__tADSRT_setSustain_veneer+0x4>
    59ec:	24011585 	.word	0x24011585

000059f0 <__tMBPulse_setFreq_veneer>:
    59f0:	f85f f000 	ldr.w	pc, [pc]	; 59f4 <__tMBPulse_setFreq_veneer+0x4>
    59f4:	24014941 	.word	0x24014941

000059f8 <__tMBTriangle_sync_veneer>:
    59f8:	f85f f000 	ldr.w	pc, [pc]	; 59fc <__tMBTriangle_sync_veneer+0x4>
    59fc:	240159d9 	.word	0x240159d9

00005a00 <__tADSRT_setLeakFactor_veneer>:
    5a00:	f85f f000 	ldr.w	pc, [pc]	; 5a04 <__tADSRT_setLeakFactor_veneer+0x4>
    5a04:	240115d9 	.word	0x240115d9

00005a08 <__updateStateFromSPIMessage_veneer>:
    5a08:	f85f f000 	ldr.w	pc, [pc]	; 5a0c <__updateStateFromSPIMessage_veneer+0x4>
    5a0c:	24001749 	.word	0x24001749

00005a10 <__tMBTriangle_setFreq_veneer>:
    5a10:	f85f f000 	ldr.w	pc, [pc]	; 5a14 <__tMBTriangle_setFreq_veneer+0x4>
    5a14:	24015995 	.word	0x24015995

00005a18 <__tADSRT_setDecay_veneer>:
    5a18:	f85f f000 	ldr.w	pc, [pc]	; 5a1c <__tADSRT_setDecay_veneer+0x4>
    5a1c:	2401155d 	.word	0x2401155d

00005a20 <__tExpSmooth_setDest_veneer>:
    5a20:	f85f f000 	ldr.w	pc, [pc]	; 5a24 <__tExpSmooth_setDest_veneer+0x4>
    5a24:	24011b19 	.word	0x24011b19
