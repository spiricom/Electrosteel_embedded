
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0002ec98  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  2402ef30  2402ef30  000578e8  2**0
                  CONTENTS
  3 .exidx        00000000  2402ef30  2402ef30  000578e8  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  2402ef30  2402ef30  000578e8  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  2402ef30  2402ef30  0003ef30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  2402ef34  2402ef34  0003ef34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    0003f7a0  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 000011c0  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00039f80  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000034  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         00000848  20000000  2402ef38  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d0e4  20000848  2402f780  00060848  2**2
                  ALLOC
 14 .itcmram      000074e8  00000400  2402f780  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    04000000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  00057916  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  00057916  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  00057916  2**0
                  CONTENTS
 19 .heap         00000000  2001d92c  2001d92c  00057916  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001d92c  2001d92c  00057916  2**0
                  CONTENTS
 21 .debug_info   000760bb  00000000  00000000  00057916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00008de8  00000000  00000000  000cd9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0004b17a  00000000  00000000  000d67b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00003e68  00000000  00000000  00121933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00004ce8  00000000  00000000  0012579b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00043f0b  00000000  00000000  0012a483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   0005eda0  00000000  00000000  0016e38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    00173613  00000000  00000000  001cd12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .comment      000000c5  00000000  00000000  00340741  2**0
                  CONTENTS, READONLY
 30 .debug_frame  0000c834  00000000  00000000  00340808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000848 	.word	0x20000848
240002b4:	00000000 	.word	0x00000000
240002b8:	000078e8 	.word	0x000078e8

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000084c 	.word	0x2000084c
240002d4:	000078e8 	.word	0x000078e8

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <map>:

/**********************************************/

float map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24000660:	ee32 2a61 	vsub.f32	s4, s4, s3
24000664:	ee30 0a60 	vsub.f32	s0, s0, s1
24000668:	ee71 0a60 	vsub.f32	s1, s2, s1
2400066c:	eec0 7a20 	vdiv.f32	s15, s0, s1
24000670:	ee22 2a27 	vmul.f32	s4, s4, s15
}
24000674:	ee32 0a21 	vadd.f32	s0, s4, s3
24000678:	4770      	bx	lr
	...

2400067c <audioInit>:


void audioInit()
{
2400067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24000680:	ed2d 8b02 	vpush	{d8}
24000684:	b082      	sub	sp, #8
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000686:	4cd0      	ldr	r4, [pc, #832]	; (240009c8 <audioInit+0x34c>)
24000688:	4bd0      	ldr	r3, [pc, #832]	; (240009cc <audioInit+0x350>)
2400068a:	f64e 2260 	movw	r2, #60000	; 0xea60
2400068e:	49d0      	ldr	r1, [pc, #832]	; (240009d0 <audioInit+0x354>)
24000690:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 240009d4 <audioInit+0x358>
24000694:	4620      	mov	r0, r4
24000696:	f012 fb05 	bl	24012ca4 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
2400069a:	4623      	mov	r3, r4
2400069c:	4ace      	ldr	r2, [pc, #824]	; (240009d8 <audioInit+0x35c>)
2400069e:	49cf      	ldr	r1, [pc, #828]	; (240009dc <audioInit+0x360>)
240006a0:	48cf      	ldr	r0, [pc, #828]	; (240009e0 <audioInit+0x364>)
240006a2:	f010 f9f0 	bl	24010a86 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
240006a6:	4623      	mov	r3, r4
240006a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
240006ac:	49cd      	ldr	r1, [pc, #820]	; (240009e4 <audioInit+0x368>)
240006ae:	48ce      	ldr	r0, [pc, #824]	; (240009e8 <audioInit+0x36c>)
240006b0:	f010 f9e9 	bl	24010a86 <tMempool_init>

	leaf.clearOnAllocation = 1;
240006b4:	2301      	movs	r3, #1
240006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006bc:	eddf 1acb 	vldr	s3, [pc, #812]	; 240009ec <audioInit+0x370>
240006c0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006c4:	eddf 0aca 	vldr	s1, [pc, #808]	; 240009f0 <audioInit+0x374>
240006c8:	ed9f 0aca 	vldr	s0, [pc, #808]	; 240009f4 <audioInit+0x378>
240006cc:	48ca      	ldr	r0, [pc, #808]	; (240009f8 <audioInit+0x37c>)
240006ce:	f00f fe2e 	bl	2401032e <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006d2:	4bca      	ldr	r3, [pc, #808]	; (240009fc <audioInit+0x380>)
240006d4:	4aca      	ldr	r2, [pc, #808]	; (24000a00 <audioInit+0x384>)
240006d6:	601a      	str	r2, [r3, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006d8:	4bca      	ldr	r3, [pc, #808]	; (24000a04 <audioInit+0x388>)
240006da:	4acb      	ldr	r2, [pc, #812]	; (24000a08 <audioInit+0x38c>)
240006dc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 12; i++)
240006de:	2300      	movs	r3, #0
240006e0:	e004      	b.n	240006ec <audioInit+0x70>
	{
		previousStringInputs[i]	= 0;
240006e2:	4aca      	ldr	r2, [pc, #808]	; (24000a0c <audioInit+0x390>)
240006e4:	2100      	movs	r1, #0
240006e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 12; i++)
240006ea:	3301      	adds	r3, #1
240006ec:	2b0b      	cmp	r3, #11
240006ee:	ddf8      	ble.n	240006e2 <audioInit+0x66>
	}
	tCycle_init(&testSine, &leaf);
240006f0:	4cc7      	ldr	r4, [pc, #796]	; (24000a10 <audioInit+0x394>)
240006f2:	49b5      	ldr	r1, [pc, #724]	; (240009c8 <audioInit+0x34c>)
240006f4:	4620      	mov	r0, r4
240006f6:	f010 f9e7 	bl	24010ac8 <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006fa:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 24000a14 <audioInit+0x398>
240006fe:	4620      	mov	r0, r4
24000700:	f010 fa10 	bl	24010b24 <tCycle_setFreq>

	for (int i = 0; i < NUM_OVERTONES; i++)
24000704:	2400      	movs	r4, #0
24000706:	e021      	b.n	2400074c <audioInit+0xd0>
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000708:	eb02 0042 	add.w	r0, r2, r2, lsl #1
2400070c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
24000710:	009b      	lsls	r3, r3, #2
24000712:	eb03 0380 	add.w	r3, r3, r0, lsl #2
24000716:	4423      	add	r3, r4
24000718:	48bf      	ldr	r0, [pc, #764]	; (24000a18 <audioInit+0x39c>)
2400071a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
2400071e:	ed93 7a00 	vldr	s14, [r3]
24000722:	eb01 0341 	add.w	r3, r1, r1, lsl #1
24000726:	1898      	adds	r0, r3, r2
24000728:	4bbc      	ldr	r3, [pc, #752]	; (24000a1c <audioInit+0x3a0>)
2400072a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400072e:	edd3 7a00 	vldr	s15, [r3]
24000732:	ee77 7a87 	vadd.f32	s15, s15, s14
24000736:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 3; k++)
2400073a:	3201      	adds	r2, #1
2400073c:	2a02      	cmp	r2, #2
2400073e:	dde3      	ble.n	24000708 <audioInit+0x8c>
		for (int j = 0; j < 3; j++)
24000740:	3101      	adds	r1, #1
24000742:	2902      	cmp	r1, #2
24000744:	dc01      	bgt.n	2400074a <audioInit+0xce>
			for (int k = 0; k < 3; k++)
24000746:	2200      	movs	r2, #0
24000748:	e7f8      	b.n	2400073c <audioInit+0xc0>
	for (int i = 0; i < NUM_OVERTONES; i++)
2400074a:	3401      	adds	r4, #1
2400074c:	2c0b      	cmp	r4, #11
2400074e:	dc18      	bgt.n	24000782 <audioInit+0x106>
		totalGain[0] += partials[i];
24000750:	4bb3      	ldr	r3, [pc, #716]	; (24000a20 <audioInit+0x3a4>)
24000752:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24000756:	ed93 7a00 	vldr	s14, [r3]
2400075a:	4bb2      	ldr	r3, [pc, #712]	; (24000a24 <audioInit+0x3a8>)
2400075c:	edd3 7a00 	vldr	s15, [r3]
24000760:	ee77 7a87 	vadd.f32	s15, s15, s14
24000764:	edc3 7a00 	vstr	s15, [r3]
		totalGain[1] += partialsHigh[i];
24000768:	4aaf      	ldr	r2, [pc, #700]	; (24000a28 <audioInit+0x3ac>)
2400076a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
2400076e:	ed92 7a00 	vldr	s14, [r2]
24000772:	edd3 7a01 	vldr	s15, [r3, #4]
24000776:	ee77 7a87 	vadd.f32	s15, s15, s14
2400077a:	edc3 7a01 	vstr	s15, [r3, #4]
		for (int j = 0; j < 3; j++)
2400077e:	2100      	movs	r1, #0
24000780:	e7df      	b.n	24000742 <audioInit+0xc6>
			}
		}

	}
	for (int i = 0; i < 3; i++)
24000782:	2000      	movs	r0, #0
24000784:	e014      	b.n	240007b0 <audioInit+0x134>
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000786:	eb00 0340 	add.w	r3, r0, r0, lsl #1
2400078a:	4413      	add	r3, r2
2400078c:	49a3      	ldr	r1, [pc, #652]	; (24000a1c <audioInit+0x3a0>)
2400078e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
24000792:	ed91 7a00 	vldr	s14, [r1]
24000796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400079a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400079e:	49a3      	ldr	r1, [pc, #652]	; (24000a2c <audioInit+0x3b0>)
240007a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
240007a4:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++)
240007a8:	3201      	adds	r2, #1
240007aa:	2a02      	cmp	r2, #2
240007ac:	ddeb      	ble.n	24000786 <audioInit+0x10a>
	for (int i = 0; i < 3; i++)
240007ae:	3001      	adds	r0, #1
240007b0:	2802      	cmp	r0, #2
240007b2:	dc01      	bgt.n	240007b8 <audioInit+0x13c>
		for (int j = 0; j < 3; j++)
240007b4:	2200      	movs	r2, #0
240007b6:	e7f8      	b.n	240007aa <audioInit+0x12e>
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
240007b8:	4a9a      	ldr	r2, [pc, #616]	; (24000a24 <audioInit+0x3a8>)
240007ba:	ed92 7a00 	vldr	s14, [r2]
240007be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240007c2:	ee87 6a87 	vdiv.f32	s12, s15, s14
240007c6:	4b9a      	ldr	r3, [pc, #616]	; (24000a30 <audioInit+0x3b4>)
240007c8:	ed83 6a00 	vstr	s12, [r3]
	gainNormalizers[1] = 1.0f / totalGain[1];
240007cc:	ed92 7a01 	vldr	s14, [r2, #4]
240007d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
240007d4:	edc3 6a01 	vstr	s13, [r3, #4]
	for (int i = 0; i < NUM_OVERTONES; i++)
240007d8:	2400      	movs	r4, #0
240007da:	e021      	b.n	24000820 <audioInit+0x1a4>
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
240007dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
240007e0:	1898      	adds	r0, r3, r2
240007e2:	4b92      	ldr	r3, [pc, #584]	; (24000a2c <audioInit+0x3b0>)
240007e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
240007e8:	ed93 7a00 	vldr	s14, [r3]
240007ec:	eb02 0042 	add.w	r0, r2, r2, lsl #1
240007f0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
240007f4:	009b      	lsls	r3, r3, #2
240007f6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
240007fa:	4423      	add	r3, r4
240007fc:	4886      	ldr	r0, [pc, #536]	; (24000a18 <audioInit+0x39c>)
240007fe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
24000802:	edd3 7a00 	vldr	s15, [r3]
24000806:	ee67 7a87 	vmul.f32	s15, s15, s14
2400080a:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k < 3; k++)
2400080e:	3201      	adds	r2, #1
24000810:	2a02      	cmp	r2, #2
24000812:	dde3      	ble.n	240007dc <audioInit+0x160>
			for (int j = 0; j < 3; j++)
24000814:	3101      	adds	r1, #1
24000816:	2902      	cmp	r1, #2
24000818:	dc01      	bgt.n	2400081e <audioInit+0x1a2>
				for (int k = 0; k < 3; k++)
2400081a:	2200      	movs	r2, #0
2400081c:	e7f8      	b.n	24000810 <audioInit+0x194>
	for (int i = 0; i < NUM_OVERTONES; i++)
2400081e:	3401      	adds	r4, #1
24000820:	2c0b      	cmp	r4, #11
24000822:	dc13      	bgt.n	2400084c <audioInit+0x1d0>
			partials[i] = partials[i] * gainNormalizers[0];
24000824:	4b7e      	ldr	r3, [pc, #504]	; (24000a20 <audioInit+0x3a4>)
24000826:	eb03 0384 	add.w	r3, r3, r4, lsl #2
2400082a:	edd3 7a00 	vldr	s15, [r3]
2400082e:	ee66 7a27 	vmul.f32	s15, s12, s15
24000832:	edc3 7a00 	vstr	s15, [r3]
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000836:	4b7c      	ldr	r3, [pc, #496]	; (24000a28 <audioInit+0x3ac>)
24000838:	eb03 0384 	add.w	r3, r3, r4, lsl #2
2400083c:	edd3 7a00 	vldr	s15, [r3]
24000840:	ee66 7aa7 	vmul.f32	s15, s13, s15
24000844:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0; j < 3; j++)
24000848:	2100      	movs	r1, #0
2400084a:	e7e4      	b.n	24000816 <audioInit+0x19a>
				}
			}

		}

		for (int i = 0; i < NUM_OVERTONES; i++)
2400084c:	f04f 0c00 	mov.w	ip, #0
24000850:	e058      	b.n	24000904 <audioInit+0x288>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000852:	f103 0e01 	add.w	lr, r3, #1
24000856:	4977      	ldr	r1, [pc, #476]	; (24000a34 <audioInit+0x3b8>)
24000858:	eb00 0240 	add.w	r2, r0, r0, lsl #1
2400085c:	eb02 040e 	add.w	r4, r2, lr
24000860:	eb01 0484 	add.w	r4, r1, r4, lsl #2
24000864:	edd4 6a00 	vldr	s13, [r4]
24000868:	18d4      	adds	r4, r2, r3
2400086a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
2400086e:	edd1 7a00 	vldr	s15, [r1]
24000872:	ee76 6ae7 	vsub.f32	s13, s13, s15
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000876:	4c70      	ldr	r4, [pc, #448]	; (24000a38 <audioInit+0x3bc>)
24000878:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
2400087c:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
24000880:	0089      	lsls	r1, r1, #2
24000882:	eb01 0185 	add.w	r1, r1, r5, lsl #2
24000886:	4461      	add	r1, ip
24000888:	eb04 0181 	add.w	r1, r4, r1, lsl #2
2400088c:	ed91 7a00 	vldr	s14, [r1]
24000890:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24000894:	ee85 6a87 	vdiv.f32	s12, s11, s14
24000898:	eb03 0543 	add.w	r5, r3, r3, lsl #1
2400089c:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
240008a0:	0089      	lsls	r1, r1, #2
240008a2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
240008a6:	4461      	add	r1, ip
240008a8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
240008ac:	ed91 5a00 	vldr	s10, [r1]
240008b0:	ee85 7a85 	vdiv.f32	s14, s11, s10
240008b4:	ee36 6a47 	vsub.f32	s12, s12, s14
240008b8:	eec6 5a26 	vdiv.f32	s11, s12, s13
240008bc:	00d2      	lsls	r2, r2, #3
240008be:	eb02 0185 	add.w	r1, r2, r5, lsl #2
240008c2:	4461      	add	r1, ip
240008c4:	4c5d      	ldr	r4, [pc, #372]	; (24000a3c <audioInit+0x3c0>)
240008c6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
240008ca:	edc4 5a00 	vstr	s11, [r4]

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
240008ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
240008d2:	4c5b      	ldr	r4, [pc, #364]	; (24000a40 <audioInit+0x3c4>)
240008d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
240008d8:	edc1 7a00 	vstr	s15, [r1]

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
240008dc:	ee77 7a67 	vsub.f32	s15, s14, s15
240008e0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
240008e4:	4462      	add	r2, ip
240008e6:	4b57      	ldr	r3, [pc, #348]	; (24000a44 <audioInit+0x3c8>)
240008e8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
240008ec:	edc2 7a00 	vstr	s15, [r2]
				  for (int k = 0; k < 2; k++)
240008f0:	4673      	mov	r3, lr
240008f2:	2b01      	cmp	r3, #1
240008f4:	ddad      	ble.n	24000852 <audioInit+0x1d6>
			  for (int j = 0; j < 3; j++)
240008f6:	3001      	adds	r0, #1
240008f8:	2802      	cmp	r0, #2
240008fa:	dc01      	bgt.n	24000900 <audioInit+0x284>
				  for (int k = 0; k < 2; k++)
240008fc:	2300      	movs	r3, #0
240008fe:	e7f8      	b.n	240008f2 <audioInit+0x276>
		for (int i = 0; i < NUM_OVERTONES; i++)
24000900:	f10c 0c01 	add.w	ip, ip, #1
24000904:	f1bc 0f0b 	cmp.w	ip, #11
24000908:	dc2c      	bgt.n	24000964 <audioInit+0x2e8>
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
2400090a:	4b4f      	ldr	r3, [pc, #316]	; (24000a48 <audioInit+0x3cc>)
2400090c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
24000910:	ed93 7a00 	vldr	s14, [r3]
24000914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24000918:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400091c:	4b4b      	ldr	r3, [pc, #300]	; (24000a4c <audioInit+0x3d0>)
2400091e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
24000922:	ed93 6a00 	vldr	s12, [r3]
24000926:	ee86 7a86 	vdiv.f32	s14, s13, s12
2400092a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2400092e:	eddf 6a48 	vldr	s13, [pc, #288]	; 24000a50 <audioInit+0x3d4>
24000932:	ee67 7aa6 	vmul.f32	s15, s15, s13
24000936:	4b47      	ldr	r3, [pc, #284]	; (24000a54 <audioInit+0x3d8>)
24000938:	eb03 038c 	add.w	r3, r3, ip, lsl #2
2400093c:	edc3 7a00 	vstr	s15, [r3]
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000940:	eddf 6a45 	vldr	s13, [pc, #276]	; 24000a58 <audioInit+0x3dc>
24000944:	ee67 7aa6 	vmul.f32	s15, s15, s13
24000948:	4b44      	ldr	r3, [pc, #272]	; (24000a5c <audioInit+0x3e0>)
2400094a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
2400094e:	edc3 7a00 	vstr	s15, [r3]
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000952:	ee77 7a67 	vsub.f32	s15, s14, s15
24000956:	4b42      	ldr	r3, [pc, #264]	; (24000a60 <audioInit+0x3e4>)
24000958:	eb03 038c 	add.w	r3, r3, ip, lsl #2
2400095c:	edc3 7a00 	vstr	s15, [r3]
			  for (int j = 0; j < 3; j++)
24000960:	2000      	movs	r0, #0
24000962:	e7c9      	b.n	240008f8 <audioInit+0x27c>
				  }
			  }

		}

		for (int i = 0; i < 256; i++)
24000964:	2400      	movs	r4, #0
24000966:	e00b      	b.n	24000980 <audioInit+0x304>
		{
			randomFactors[i] = randomNumber() + 0.5f;
24000968:	f02e fade 	bl	2402ef28 <__randomNumber_veneer>
2400096c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24000970:	ee30 0a27 	vadd.f32	s0, s0, s15
24000974:	4b3b      	ldr	r3, [pc, #236]	; (24000a64 <audioInit+0x3e8>)
24000976:	eb03 0384 	add.w	r3, r3, r4, lsl #2
2400097a:	ed83 0a00 	vstr	s0, [r3]
		for (int i = 0; i < 256; i++)
2400097e:	3401      	adds	r4, #1
24000980:	2cff      	cmp	r4, #255	; 0xff
24000982:	ddf1      	ble.n	24000968 <audioInit+0x2ec>
		}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000984:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000988:	ed9f 0a37 	vldr	s0, [pc, #220]	; 24000a68 <audioInit+0x3ec>
2400098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000990:	4836      	ldr	r0, [pc, #216]	; (24000a6c <audioInit+0x3f0>)
24000992:	f00f fe45 	bl	24010620 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);
24000996:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
2400099a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 24000a70 <audioInit+0x3f4>
2400099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
240009a2:	4834      	ldr	r0, [pc, #208]	; (24000a74 <audioInit+0x3f8>)
240009a4:	f00f fe78 	bl	24010698 <LEAF_generate_dbtoa>

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
240009a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
240009ac:	eddf 0a32 	vldr	s1, [pc, #200]	; 24000a78 <audioInit+0x3fc>
240009b0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 24000a7c <audioInit+0x400>
240009b4:	4832      	ldr	r0, [pc, #200]	; (24000a80 <audioInit+0x404>)
240009b6:	f00f fdbf 	bl	24010538 <LEAF_generate_mtof>

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
240009ba:	4b32      	ldr	r3, [pc, #200]	; (24000a84 <audioInit+0x408>)
240009bc:	4a32      	ldr	r2, [pc, #200]	; (24000a88 <audioInit+0x40c>)
240009be:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
240009c0:	2400      	movs	r4, #0
    float x = 0.0f;
240009c2:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 240009f0 <audioInit+0x374>
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
240009c6:	e081      	b.n	24000acc <audioInit+0x450>
240009c8:	200053b4 	.word	0x200053b4
240009cc:	000050e1 	.word	0x000050e1
240009d0:	20005d5c 	.word	0x20005d5c
240009d4:	473b8000 	.word	0x473b8000
240009d8:	0003f7a0 	.word	0x0003f7a0
240009dc:	24040000 	.word	0x24040000
240009e0:	200055f4 	.word	0x200055f4
240009e4:	c0000000 	.word	0xc0000000
240009e8:	200053b0 	.word	0x200053b0
240009ec:	ba51b717 	.word	0xba51b717
240009f0:	00000000 	.word	0x00000000
240009f4:	3a83126f 	.word	0x3a83126f
240009f8:	200010f4 	.word	0x200010f4
240009fc:	200050f4 	.word	0x200050f4
24000a00:	457ff000 	.word	0x457ff000
24000a04:	20005308 	.word	0x20005308
24000a08:	3daaaaab 	.word	0x3daaaaab
24000a0c:	30000000 	.word	0x30000000
24000a10:	20014988 	.word	0x20014988
24000a14:	43dc0000 	.word	0x43dc0000
24000a18:	20000394 	.word	0x20000394
24000a1c:	200149b8 	.word	0x200149b8
24000a20:	200000fc 	.word	0x200000fc
24000a24:	200149b0 	.word	0x200149b0
24000a28:	20000144 	.word	0x20000144
24000a2c:	20005228 	.word	0x20005228
24000a30:	20005220 	.word	0x20005220
24000a34:	20000340 	.word	0x20000340
24000a38:	20000190 	.word	0x20000190
24000a3c:	20000c94 	.word	0x20000c94
24000a40:	20000b74 	.word	0x20000b74
24000a44:	20000db4 	.word	0x20000db4
24000a48:	200000b4 	.word	0x200000b4
24000a4c:	2000006c 	.word	0x2000006c
24000a50:	3b84a9fa 	.word	0x3b84a9fa
24000a54:	20001064 	.word	0x20001064
24000a58:	42f60000 	.word	0x42f60000
24000a5c:	2000101c 	.word	0x2000101c
24000a60:	200010ac 	.word	0x200010ac
24000a64:	2000586c 	.word	0x2000586c
24000a68:	3727c5ac 	.word	0x3727c5ac
24000a6c:	3000a000 	.word	0x3000a000
24000a70:	c2b40000 	.word	0xc2b40000
24000a74:	30002000 	.word	0x30002000
24000a78:	4323d666 	.word	0x4323d666
24000a7c:	c323d666 	.word	0xc323d666
24000a80:	3001a000 	.word	0x3001a000
24000a84:	2000004c 	.word	0x2000004c
24000a88:	44924492 	.word	0x44924492
24000a8c:	435c0000 	.word	0x435c0000
24000a90:	42640000 	.word	0x42640000
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000a94:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
24000a98:	ee68 7a27 	vmul.f32	s15, s16, s15
24000a9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24000aa0:	ee77 7a80 	vadd.f32	s15, s15, s0
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000aa4:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 24000a8c <audioInit+0x410>
24000aa8:	ee27 0a80 	vmul.f32	s0, s15, s0
24000aac:	f00f fd96 	bl	240105dc <ftom>
24000ab0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24000a90 <audioInit+0x414>
24000ab4:	ee30 0a67 	vsub.f32	s0, s0, s15
24000ab8:	4bb7      	ldr	r3, [pc, #732]	; (24000d98 <audioInit+0x71c>)
24000aba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24000abe:	ed83 0a00 	vstr	s0, [r3]
        x += increment;
24000ac2:	eddf 7ab6 	vldr	s15, [pc, #728]	; 24000d9c <audioInit+0x720>
24000ac6:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
24000aca:	3401      	adds	r4, #1
24000acc:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
24000ad0:	dbe0      	blt.n	24000a94 <audioInit+0x418>





	if (numStrings == 6)
24000ad2:	4bb3      	ldr	r3, [pc, #716]	; (24000da0 <audioInit+0x724>)
24000ad4:	781b      	ldrb	r3, [r3, #0]
24000ad6:	2b06      	cmp	r3, #6
24000ad8:	d00b      	beq.n	24000af2 <audioInit+0x476>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000ada:	2b0a      	cmp	r3, #10
24000adc:	d011      	beq.n	24000b02 <audioInit+0x486>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ade:	4bb1      	ldr	r3, [pc, #708]	; (24000da4 <audioInit+0x728>)
24000ae0:	781b      	ldrb	r3, [r3, #0]
24000ae2:	005b      	lsls	r3, r3, #1
24000ae4:	4ab0      	ldr	r2, [pc, #704]	; (24000da8 <audioInit+0x72c>)
24000ae6:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
24000ae8:	4bb0      	ldr	r3, [pc, #704]	; (24000dac <audioInit+0x730>)
24000aea:	2202      	movs	r2, #2
24000aec:	701a      	strb	r2, [r3, #0]
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
24000aee:	2600      	movs	r6, #0
24000af0:	e047      	b.n	24000b82 <audioInit+0x506>
		firstString = boardNumber;
24000af2:	4bac      	ldr	r3, [pc, #688]	; (24000da4 <audioInit+0x728>)
24000af4:	781a      	ldrb	r2, [r3, #0]
24000af6:	4bac      	ldr	r3, [pc, #688]	; (24000da8 <audioInit+0x72c>)
24000af8:	601a      	str	r2, [r3, #0]
		numStringsThisBoard = 1;
24000afa:	4bac      	ldr	r3, [pc, #688]	; (24000dac <audioInit+0x730>)
24000afc:	2201      	movs	r2, #1
24000afe:	701a      	strb	r2, [r3, #0]
24000b00:	e7f5      	b.n	24000aee <audioInit+0x472>
		if (boardNumber == 0)
24000b02:	4ba8      	ldr	r3, [pc, #672]	; (24000da4 <audioInit+0x728>)
24000b04:	781b      	ldrb	r3, [r3, #0]
24000b06:	b933      	cbnz	r3, 24000b16 <audioInit+0x49a>
			firstString = 0;
24000b08:	4ba7      	ldr	r3, [pc, #668]	; (24000da8 <audioInit+0x72c>)
24000b0a:	2200      	movs	r2, #0
24000b0c:	601a      	str	r2, [r3, #0]
			numStringsThisBoard = 1;
24000b0e:	4ba7      	ldr	r3, [pc, #668]	; (24000dac <audioInit+0x730>)
24000b10:	2201      	movs	r2, #1
24000b12:	701a      	strb	r2, [r3, #0]
24000b14:	e7eb      	b.n	24000aee <audioInit+0x472>
		else if (boardNumber == 1)
24000b16:	2b01      	cmp	r3, #1
24000b18:	d007      	beq.n	24000b2a <audioInit+0x4ae>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24000b1a:	3b01      	subs	r3, #1
24000b1c:	005b      	lsls	r3, r3, #1
24000b1e:	4aa2      	ldr	r2, [pc, #648]	; (24000da8 <audioInit+0x72c>)
24000b20:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
24000b22:	4ba2      	ldr	r3, [pc, #648]	; (24000dac <audioInit+0x730>)
24000b24:	2202      	movs	r2, #2
24000b26:	701a      	strb	r2, [r3, #0]
24000b28:	e7e1      	b.n	24000aee <audioInit+0x472>
			firstString = 1;
24000b2a:	4a9f      	ldr	r2, [pc, #636]	; (24000da8 <audioInit+0x72c>)
24000b2c:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
24000b2e:	4a9f      	ldr	r2, [pc, #636]	; (24000dac <audioInit+0x730>)
24000b30:	7013      	strb	r3, [r2, #0]
24000b32:	e7dc      	b.n	24000aee <audioInit+0x472>
		{
			tCycle_init(&additive[i][j], &leaf);
24000b34:	4d9e      	ldr	r5, [pc, #632]	; (24000db0 <audioInit+0x734>)
24000b36:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
24000b3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24000b3e:	009f      	lsls	r7, r3, #2
24000b40:	4629      	mov	r1, r5
24000b42:	489c      	ldr	r0, [pc, #624]	; (24000db4 <audioInit+0x738>)
24000b44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
24000b48:	f00f ffbe 	bl	24010ac8 <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000b4c:	4b9a      	ldr	r3, [pc, #616]	; (24000db8 <audioInit+0x73c>)
24000b4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24000b52:	edd3 0a00 	vldr	s1, [r3]
24000b56:	462b      	mov	r3, r5
24000b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000b5c:	4997      	ldr	r1, [pc, #604]	; (24000dbc <audioInit+0x740>)
24000b5e:	eddf 1a98 	vldr	s3, [pc, #608]	; 24000dc0 <audioInit+0x744>
24000b62:	ed9f 1a98 	vldr	s2, [pc, #608]	; 24000dc4 <audioInit+0x748>
24000b66:	eddf 7a98 	vldr	s15, [pc, #608]	; 24000dc8 <audioInit+0x74c>
24000b6a:	ee60 0aa7 	vmul.f32	s1, s1, s15
24000b6e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000b72:	4896      	ldr	r0, [pc, #600]	; (24000dcc <audioInit+0x750>)
24000b74:	4438      	add	r0, r7
24000b76:	f00d fc27 	bl	2400e3c8 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000b7a:	3401      	adds	r4, #1
24000b7c:	2c0b      	cmp	r4, #11
24000b7e:	ddd9      	ble.n	24000b34 <audioInit+0x4b8>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000b80:	3601      	adds	r6, #1
24000b82:	2e01      	cmp	r6, #1
24000b84:	dc01      	bgt.n	24000b8a <audioInit+0x50e>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000b86:	2400      	movs	r4, #0
24000b88:	e7f8      	b.n	24000b7c <audioInit+0x500>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000b8a:	4989      	ldr	r1, [pc, #548]	; (24000db0 <audioInit+0x734>)
24000b8c:	eddf 0a90 	vldr	s1, [pc, #576]	; 24000dd0 <audioInit+0x754>
24000b90:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 24000dc4 <audioInit+0x748>
24000b94:	488f      	ldr	r0, [pc, #572]	; (24000dd4 <audioInit+0x758>)
24000b96:	f00d fed7 	bl	2400e948 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24000b9a:	2400      	movs	r4, #0
24000b9c:	e00a      	b.n	24000bb4 <audioInit+0x538>
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000b9e:	4984      	ldr	r1, [pc, #528]	; (24000db0 <audioInit+0x734>)
24000ba0:	eddf 0a8b 	vldr	s1, [pc, #556]	; 24000dd0 <audioInit+0x754>
24000ba4:	ed9f 0a87 	vldr	s0, [pc, #540]	; 24000dc4 <audioInit+0x748>
24000ba8:	488b      	ldr	r0, [pc, #556]	; (24000dd8 <audioInit+0x75c>)
24000baa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
24000bae:	f00d fecb 	bl	2400e948 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24000bb2:	3401      	adds	r4, #1
24000bb4:	2c0b      	cmp	r4, #11
24000bb6:	ddf2      	ble.n	24000b9e <audioInit+0x522>
	}
	for (int i = 0; i < 10; i++)
24000bb8:	2400      	movs	r4, #0
24000bba:	e00a      	b.n	24000bd2 <audioInit+0x556>
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000bbc:	497c      	ldr	r1, [pc, #496]	; (24000db0 <audioInit+0x734>)
24000bbe:	eddf 0a84 	vldr	s1, [pc, #528]	; 24000dd0 <audioInit+0x754>
24000bc2:	ed9f 0a80 	vldr	s0, [pc, #512]	; 24000dc4 <audioInit+0x748>
24000bc6:	4885      	ldr	r0, [pc, #532]	; (24000ddc <audioInit+0x760>)
24000bc8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
24000bcc:	f00d febc 	bl	2400e948 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24000bd0:	3401      	adds	r4, #1
24000bd2:	2c09      	cmp	r4, #9
24000bd4:	ddf2      	ble.n	24000bbc <audioInit+0x540>
	}


	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24000bd6:	2600      	movs	r6, #0
24000bd8:	e2ee      	b.n	240011b8 <audioInit+0xb3c>
	{

		for(int i = 0; i < NUM_OSC; i++)
		{
			tPBSaw_init(&saw[i][v],  &leaf);
24000bda:	4c75      	ldr	r4, [pc, #468]	; (24000db0 <audioInit+0x734>)
24000bdc:	eb06 0347 	add.w	r3, r6, r7, lsl #1
24000be0:	009d      	lsls	r5, r3, #2
24000be2:	4621      	mov	r1, r4
24000be4:	487e      	ldr	r0, [pc, #504]	; (24000de0 <audioInit+0x764>)
24000be6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
24000bea:	f010 f8da 	bl	24010da2 <tPBSaw_init>

			tPBPulse_init(&pulse[i][v], &leaf);
24000bee:	4621      	mov	r1, r4
24000bf0:	487c      	ldr	r0, [pc, #496]	; (24000de4 <audioInit+0x768>)
24000bf2:	4428      	add	r0, r5
24000bf4:	f010 f85e 	bl	24010cb4 <tPBPulse_init>

			tCycle_init(&sine[i][v],  &leaf);
24000bf8:	4621      	mov	r1, r4
24000bfa:	487b      	ldr	r0, [pc, #492]	; (24000de8 <audioInit+0x76c>)
24000bfc:	4428      	add	r0, r5
24000bfe:	f00f ff63 	bl	24010ac8 <tCycle_init>

			tPBTriangle_init(&tri[i][v],  &leaf);
24000c02:	4621      	mov	r1, r4
24000c04:	4879      	ldr	r0, [pc, #484]	; (24000dec <audioInit+0x770>)
24000c06:	4428      	add	r0, r5
24000c08:	f00f ffbe 	bl	24010b88 <tPBTriangle_init>

			tPBSaw_init(&sawPaired[i][v], &leaf);
24000c0c:	4621      	mov	r1, r4
24000c0e:	4878      	ldr	r0, [pc, #480]	; (24000df0 <audioInit+0x774>)
24000c10:	4428      	add	r0, r5
24000c12:	f010 f8c6 	bl	24010da2 <tPBSaw_init>

			tMBSineTri_init(&sinePaired[i][v],&leaf);
24000c16:	4621      	mov	r1, r4
24000c18:	4876      	ldr	r0, [pc, #472]	; (24000df4 <audioInit+0x778>)
24000c1a:	4428      	add	r0, r5
24000c1c:	f010 f9c6 	bl	24010fac <tMBSineTri_init>

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24000c20:	4621      	mov	r1, r4
24000c22:	eddf 0a75 	vldr	s1, [pc, #468]	; 24000df8 <audioInit+0x77c>
24000c26:	ed9f 0a75 	vldr	s0, [pc, #468]	; 24000dfc <audioInit+0x780>
24000c2a:	4875      	ldr	r0, [pc, #468]	; (24000e00 <audioInit+0x784>)
24000c2c:	4428      	add	r0, r5
24000c2e:	f00d fe8b 	bl	2400e948 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
24000c32:	3701      	adds	r7, #1
24000c34:	2f02      	cmp	r7, #2
24000c36:	ddd0      	ble.n	24000bda <audioInit+0x55e>

		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24000c38:	ed9f 2a72 	vldr	s4, [pc, #456]	; 24000e04 <audioInit+0x788>
24000c3c:	ed9f 8a61 	vldr	s16, [pc, #388]	; 24000dc4 <audioInit+0x748>
24000c40:	00b5      	lsls	r5, r6, #2
24000c42:	4b71      	ldr	r3, [pc, #452]	; (24000e08 <audioInit+0x78c>)
24000c44:	2200      	movs	r2, #0
24000c46:	eef0 2a42 	vmov.f32	s5, s4
24000c4a:	eef0 1a48 	vmov.f32	s3, s16
24000c4e:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 24000e0c <audioInit+0x790>
24000c52:	eddf 0a6f 	vldr	s1, [pc, #444]	; 24000e10 <audioInit+0x794>
24000c56:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 24000e14 <audioInit+0x798>
24000c5a:	2104      	movs	r1, #4
24000c5c:	486e      	ldr	r0, [pc, #440]	; (24000e18 <audioInit+0x79c>)
24000c5e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
24000c62:	f011 f915 	bl	24011e90 <tSimpleLivingString3_initToPool>
		tLivingString2_setPickPos(&strings[v], .5f);
		tLivingString2_setPrepPos(&strings[v], .4f);
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
		tLivingString2_setPickupPos(&strings[v], 1.0f);
*/
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000c66:	4c52      	ldr	r4, [pc, #328]	; (24000db0 <audioInit+0x734>)
24000c68:	4623      	mov	r3, r4
24000c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000c6e:	4953      	ldr	r1, [pc, #332]	; (24000dbc <audioInit+0x740>)
24000c70:	eddf 1a6a 	vldr	s3, [pc, #424]	; 24000e1c <audioInit+0x7a0>
24000c74:	eeb0 1a48 	vmov.f32	s2, s16
24000c78:	eddf 0a69 	vldr	s1, [pc, #420]	; 24000e20 <audioInit+0x7a4>
24000c7c:	eeb0 0a48 	vmov.f32	s0, s16
24000c80:	4868      	ldr	r0, [pc, #416]	; (24000e24 <audioInit+0x7a8>)
24000c82:	4428      	add	r0, r5
24000c84:	f00d fba0 	bl	2400e3c8 <tADSRT_init>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24000c88:	4622      	mov	r2, r4
24000c8a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24000c8e:	ed9f 0a66 	vldr	s0, [pc, #408]	; 24000e28 <audioInit+0x7ac>
24000c92:	2103      	movs	r1, #3
24000c94:	4865      	ldr	r0, [pc, #404]	; (24000e2c <audioInit+0x7b0>)
24000c96:	f00e fcad 	bl	2400f5f4 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24000c9a:	4622      	mov	r2, r4
24000c9c:	eddf 0a64 	vldr	s1, [pc, #400]	; 24000e30 <audioInit+0x7b4>
24000ca0:	ed9f 0a64 	vldr	s0, [pc, #400]	; 24000e34 <audioInit+0x7b8>
24000ca4:	2101      	movs	r1, #1
24000ca6:	4864      	ldr	r0, [pc, #400]	; (24000e38 <audioInit+0x7bc>)
24000ca8:	f00e fca4 	bl	2400f5f4 <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24000cac:	4622      	mov	r2, r4
24000cae:	2100      	movs	r1, #0
24000cb0:	4862      	ldr	r0, [pc, #392]	; (24000e3c <audioInit+0x7c0>)
24000cb2:	f010 f8ce 	bl	24010e52 <tNoise_init>
		for (int i = 0; i < NUM_FILT; i++)
24000cb6:	2700      	movs	r7, #0
24000cb8:	e06a      	b.n	24000d90 <audioInit+0x714>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24000cba:	4c3d      	ldr	r4, [pc, #244]	; (24000db0 <audioInit+0x734>)
24000cbc:	eddf 8a60 	vldr	s17, [pc, #384]	; 24000e40 <audioInit+0x7c4>
24000cc0:	ed9f 8a60 	vldr	s16, [pc, #384]	; 24000e44 <audioInit+0x7c8>
24000cc4:	eb06 0347 	add.w	r3, r6, r7, lsl #1
24000cc8:	009d      	lsls	r5, r3, #2
24000cca:	4622      	mov	r2, r4
24000ccc:	eef0 0a68 	vmov.f32	s1, s17
24000cd0:	eeb0 0a48 	vmov.f32	s0, s16
24000cd4:	2101      	movs	r1, #1
24000cd6:	485c      	ldr	r0, [pc, #368]	; (24000e48 <audioInit+0x7cc>)
24000cd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
24000cdc:	f00d ffc8 	bl	2400ec70 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24000ce0:	4622      	mov	r2, r4
24000ce2:	eef0 0a68 	vmov.f32	s1, s17
24000ce6:	eeb0 0a48 	vmov.f32	s0, s16
24000cea:	2100      	movs	r1, #0
24000cec:	4857      	ldr	r0, [pc, #348]	; (24000e4c <audioInit+0x7d0>)
24000cee:	4428      	add	r0, r5
24000cf0:	f00d ffbe 	bl	2400ec70 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24000cf4:	4622      	mov	r2, r4
24000cf6:	eef0 0a68 	vmov.f32	s1, s17
24000cfa:	eeb0 0a48 	vmov.f32	s0, s16
24000cfe:	2102      	movs	r1, #2
24000d00:	4853      	ldr	r0, [pc, #332]	; (24000e50 <audioInit+0x7d4>)
24000d02:	4428      	add	r0, r5
24000d04:	f00d ffb4 	bl	2400ec70 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
24000d08:	4621      	mov	r1, r4
24000d0a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24000d0e:	eeb0 0a48 	vmov.f32	s0, s16
24000d12:	4850      	ldr	r0, [pc, #320]	; (24000e54 <audioInit+0x7d8>)
24000d14:	4428      	add	r0, r5
24000d16:	f00e fcdb 	bl	2400f6d0 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
24000d1a:	4622      	mov	r2, r4
24000d1c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000d20:	eeb0 0a48 	vmov.f32	s0, s16
24000d24:	2105      	movs	r1, #5
24000d26:	484c      	ldr	r0, [pc, #304]	; (24000e58 <audioInit+0x7dc>)
24000d28:	4428      	add	r0, r5
24000d2a:	f00e fc63 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
24000d2e:	4622      	mov	r2, r4
24000d30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000d34:	eeb0 0a48 	vmov.f32	s0, s16
24000d38:	2106      	movs	r1, #6
24000d3a:	4848      	ldr	r0, [pc, #288]	; (24000e5c <audioInit+0x7e0>)
24000d3c:	4428      	add	r0, r5
24000d3e:	f00e fc59 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
24000d42:	4622      	mov	r2, r4
24000d44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000d48:	eeb0 0a48 	vmov.f32	s0, s16
24000d4c:	2107      	movs	r1, #7
24000d4e:	4844      	ldr	r0, [pc, #272]	; (24000e60 <audioInit+0x7e4>)
24000d50:	4428      	add	r0, r5
24000d52:	f00e fc4f 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24000d56:	4622      	mov	r2, r4
24000d58:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000d5c:	eeb0 0a48 	vmov.f32	s0, s16
24000d60:	2104      	movs	r1, #4
24000d62:	4840      	ldr	r0, [pc, #256]	; (24000e64 <audioInit+0x7e8>)
24000d64:	4428      	add	r0, r5
24000d66:	f00e fc45 	bl	2400f5f4 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
24000d6a:	4621      	mov	r1, r4
24000d6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000d70:	eeb0 0a48 	vmov.f32	s0, s16
24000d74:	483c      	ldr	r0, [pc, #240]	; (24000e68 <audioInit+0x7ec>)
24000d76:	4428      	add	r0, r5
24000d78:	f00e ffee 	bl	2400fd58 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24000d7c:	4621      	mov	r1, r4
24000d7e:	eddf 0a21 	vldr	s1, [pc, #132]	; 24000e04 <audioInit+0x788>
24000d82:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 24000dfc <audioInit+0x780>
24000d86:	4839      	ldr	r0, [pc, #228]	; (24000e6c <audioInit+0x7f0>)
24000d88:	4428      	add	r0, r5
24000d8a:	f00d fddd 	bl	2400e948 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
24000d8e:	3701      	adds	r7, #1
24000d90:	2f01      	cmp	r7, #1
24000d92:	dd92      	ble.n	24000cba <audioInit+0x63e>
		}

		for (int i = 0; i < NUM_LFOS; i++)
24000d94:	2700      	movs	r7, #0
24000d96:	e08f      	b.n	24000eb8 <audioInit+0x83c>
24000d98:	30012000 	.word	0x30012000
24000d9c:	39000400 	.word	0x39000400
24000da0:	20000051 	.word	0x20000051
24000da4:	20014c05 	.word	0x20014c05
24000da8:	200051c0 	.word	0x200051c0
24000dac:	20000052 	.word	0x20000052
24000db0:	200053b4 	.word	0x200053b4
24000db4:	200009d4 	.word	0x200009d4
24000db8:	2000006c 	.word	0x2000006c
24000dbc:	200010f4 	.word	0x200010f4
24000dc0:	43160000 	.word	0x43160000
24000dc4:	00000000 	.word	0x00000000
24000dc8:	447a0000 	.word	0x447a0000
24000dcc:	20000a64 	.word	0x20000a64
24000dd0:	3a03126f 	.word	0x3a03126f
24000dd4:	20014a0c 	.word	0x20014a0c
24000dd8:	20005380 	.word	0x20005380
24000ddc:	20005804 	.word	0x20005804
24000de0:	20005c70 	.word	0x20005c70
24000de4:	20005854 	.word	0x20005854
24000de8:	20005d2c 	.word	0x20005d2c
24000dec:	200149e4 	.word	0x200149e4
24000df0:	20005c88 	.word	0x20005c88
24000df4:	20005d44 	.word	0x20005d44
24000df8:	3ca3d70a 	.word	0x3ca3d70a
24000dfc:	42800000 	.word	0x42800000
24000e00:	2000582c 	.word	0x2000582c
24000e04:	3c23d70a 	.word	0x3c23d70a
24000e08:	200055f4 	.word	0x200055f4
24000e0c:	3f7fff58 	.word	0x3f7fff58
24000e10:	4684d000 	.word	0x4684d000
24000e14:	435c0000 	.word	0x435c0000
24000e18:	200054d8 	.word	0x200054d8
24000e1c:	43480000 	.word	0x43480000
24000e20:	42480000 	.word	0x42480000
24000e24:	20005180 	.word	0x20005180
24000e28:	44bb8000 	.word	0x44bb8000
24000e2c:	20005650 	.word	0x20005650
24000e30:	3f666666 	.word	0x3f666666
24000e34:	44480000 	.word	0x44480000
24000e38:	20005654 	.word	0x20005654
24000e3c:	20005638 	.word	0x20005638
24000e40:	3f333333 	.word	0x3f333333
24000e44:	44fa0000 	.word	0x44fa0000
24000e48:	200054e0 	.word	0x200054e0
24000e4c:	2000524c 	.word	0x2000524c
24000e50:	20000afc 	.word	0x20000afc
24000e54:	20005138 	.word	0x20005138
24000e58:	200009c4 	.word	0x200009c4
24000e5c:	200009b4 	.word	0x200009b4
24000e60:	200009a4 	.word	0x200009a4
24000e64:	20000994 	.word	0x20000994
24000e68:	20000984 	.word	0x20000984
24000e6c:	20005188 	.word	0x20005188
		{
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24000e70:	4cd4      	ldr	r4, [pc, #848]	; (240011c4 <audioInit+0xb48>)
24000e72:	eb06 0347 	add.w	r3, r6, r7, lsl #1
24000e76:	009d      	lsls	r5, r3, #2
24000e78:	4621      	mov	r1, r4
24000e7a:	48d3      	ldr	r0, [pc, #844]	; (240011c8 <audioInit+0xb4c>)
24000e7c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
24000e80:	f010 fdaa 	bl	240119d8 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24000e84:	4621      	mov	r1, r4
24000e86:	48d1      	ldr	r0, [pc, #836]	; (240011cc <audioInit+0xb50>)
24000e88:	4428      	add	r0, r5
24000e8a:	f010 fe39 	bl	24011b00 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24000e8e:	4621      	mov	r1, r4
24000e90:	48cf      	ldr	r0, [pc, #828]	; (240011d0 <audioInit+0xb54>)
24000e92:	4428      	add	r0, r5
24000e94:	f00f fe18 	bl	24010ac8 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
24000e98:	4621      	mov	r1, r4
24000e9a:	48ce      	ldr	r0, [pc, #824]	; (240011d4 <audioInit+0xb58>)
24000e9c:	4428      	add	r0, r5
24000e9e:	f010 feff 	bl	24011ca0 <tTriLFO_init>

			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
24000ea2:	4621      	mov	r1, r4
24000ea4:	48cc      	ldr	r0, [pc, #816]	; (240011d8 <audioInit+0xb5c>)
24000ea6:	4428      	add	r0, r5
24000ea8:	f010 ff20 	bl	24011cec <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24000eac:	4621      	mov	r1, r4
24000eae:	48cb      	ldr	r0, [pc, #812]	; (240011dc <audioInit+0xb60>)
24000eb0:	4428      	add	r0, r5
24000eb2:	f010 fe5a 	bl	24011b6a <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24000eb6:	3701      	adds	r7, #1
24000eb8:	2f03      	cmp	r7, #3
24000eba:	ddd9      	ble.n	24000e70 <audioInit+0x7f4>
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
24000ebc:	4dc1      	ldr	r5, [pc, #772]	; (240011c4 <audioInit+0xb48>)
24000ebe:	00b4      	lsls	r4, r6, #2
24000ec0:	462a      	mov	r2, r5
24000ec2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
24000ec6:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 240011e0 <audioInit+0xb64>
24000eca:	2106      	movs	r1, #6
24000ecc:	48c5      	ldr	r0, [pc, #788]	; (240011e4 <audioInit+0xb68>)
24000ece:	eb00 0086 	add.w	r0, r0, r6, lsl #2
24000ed2:	f00e fb8f 	bl	2400f5f4 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
24000ed6:	462a      	mov	r2, r5
24000ed8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
24000edc:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 240011e8 <audioInit+0xb6c>
24000ee0:	2107      	movs	r1, #7
24000ee2:	48c2      	ldr	r0, [pc, #776]	; (240011ec <audioInit+0xb70>)
24000ee4:	4420      	add	r0, r4
24000ee6:	f00e fb85 	bl	2400f5f4 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24000eea:	462a      	mov	r2, r5
24000eec:	eddf 0ac0 	vldr	s1, [pc, #768]	; 240011f0 <audioInit+0xb74>
24000ef0:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 240011f4 <audioInit+0xb78>
24000ef4:	2105      	movs	r1, #5
24000ef6:	48c0      	ldr	r0, [pc, #768]	; (240011f8 <audioInit+0xb7c>)
24000ef8:	4420      	add	r0, r4
24000efa:	f00e fb7b 	bl	2400f5f4 <tVZFilter_init>


		for (int i = 0; i < NUM_ENV; i++)
24000efe:	2500      	movs	r5, #0
24000f00:	e019      	b.n	24000f36 <audioInit+0x8ba>
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f02:	eb06 0345 	add.w	r3, r6, r5, lsl #1
24000f06:	4cbd      	ldr	r4, [pc, #756]	; (240011fc <audioInit+0xb80>)
24000f08:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24000f0c:	4bad      	ldr	r3, [pc, #692]	; (240011c4 <audioInit+0xb48>)
24000f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000f12:	49bb      	ldr	r1, [pc, #748]	; (24001200 <audioInit+0xb84>)
24000f14:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24000f18:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24000f1c:	eddf 0ab5 	vldr	s1, [pc, #724]	; 240011f4 <audioInit+0xb78>
24000f20:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 24001204 <audioInit+0xb88>
24000f24:	4620      	mov	r0, r4
24000f26:	f00d fa4f 	bl	2400e3c8 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24000f2a:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 24001208 <audioInit+0xb8c>
24000f2e:	4620      	mov	r0, r4
24000f30:	f00d faa2 	bl	2400e478 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
24000f34:	3501      	adds	r5, #1
24000f36:	2d03      	cmp	r5, #3
24000f38:	dde3      	ble.n	24000f02 <audioInit+0x886>
		}


		for (int i = 0; i < NUM_EFFECT; i++)
24000f3a:	f04f 0900 	mov.w	r9, #0
24000f3e:	e0ed      	b.n	2400111c <audioInit+0xaa0>
		{
			tCrusher_init(&bc[i][v],&leaf);
24000f40:	4da0      	ldr	r5, [pc, #640]	; (240011c4 <audioInit+0xb48>)
24000f42:	eb06 0349 	add.w	r3, r6, r9, lsl #1
24000f46:	009c      	lsls	r4, r3, #2
24000f48:	4629      	mov	r1, r5
24000f4a:	48b0      	ldr	r0, [pc, #704]	; (2400120c <audioInit+0xb90>)
24000f4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
24000f50:	f00c ffda 	bl	2400df08 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24000f54:	4629      	mov	r1, r5
24000f56:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f5a:	48ad      	ldr	r0, [pc, #692]	; (24001210 <audioInit+0xb94>)
24000f5c:	4420      	add	r0, r4
24000f5e:	f00d ff45 	bl	2400edec <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24000f62:	4629      	mov	r1, r5
24000f64:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f68:	48aa      	ldr	r0, [pc, #680]	; (24001214 <audioInit+0xb98>)
24000f6a:	4420      	add	r0, r4
24000f6c:	f00d ff3e 	bl	2400edec <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24000f70:	4ba9      	ldr	r3, [pc, #676]	; (24001218 <audioInit+0xb9c>)
24000f72:	eb03 0a04 	add.w	sl, r3, r4
24000f76:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 2400121c <audioInit+0xba0>
24000f7a:	462a      	mov	r2, r5
24000f7c:	eef0 0a48 	vmov.f32	s1, s16
24000f80:	ed9f 0a97 	vldr	s0, [pc, #604]	; 240011e0 <audioInit+0xb64>
24000f84:	2106      	movs	r1, #6
24000f86:	4650      	mov	r0, sl
24000f88:	f00e fb34 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
24000f8c:	4ba4      	ldr	r3, [pc, #656]	; (24001220 <audioInit+0xba4>)
24000f8e:	eb03 0804 	add.w	r8, r3, r4
24000f92:	462a      	mov	r2, r5
24000f94:	eef0 0a48 	vmov.f32	s1, s16
24000f98:	ed9f 0a93 	vldr	s0, [pc, #588]	; 240011e8 <audioInit+0xb6c>
24000f9c:	2107      	movs	r1, #7
24000f9e:	4640      	mov	r0, r8
24000fa0:	f00e fb28 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
24000fa4:	4f9f      	ldr	r7, [pc, #636]	; (24001224 <audioInit+0xba8>)
24000fa6:	4427      	add	r7, r4
24000fa8:	462a      	mov	r2, r5
24000faa:	eddf 0a91 	vldr	s1, [pc, #580]	; 240011f0 <audioInit+0xb74>
24000fae:	ed9f 0a91 	vldr	s0, [pc, #580]	; 240011f4 <audioInit+0xb78>
24000fb2:	2105      	movs	r1, #5
24000fb4:	4638      	mov	r0, r7
24000fb6:	f00e fb1d 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
24000fba:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 24001228 <audioInit+0xbac>
24000fbe:	eeb0 0a48 	vmov.f32	s0, s16
24000fc2:	4650      	mov	r0, sl
24000fc4:	f00e fb1b 	bl	2400f5fe <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
24000fc8:	eeb0 0a48 	vmov.f32	s0, s16
24000fcc:	4640      	mov	r0, r8
24000fce:	f00e fb16 	bl	2400f5fe <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
24000fd2:	eeb0 0a48 	vmov.f32	s0, s16
24000fd6:	4638      	mov	r0, r7
24000fd8:	f00e fb11 	bl	2400f5fe <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
24000fdc:	4f93      	ldr	r7, [pc, #588]	; (2400122c <audioInit+0xbb0>)
24000fde:	4427      	add	r7, r4
24000fe0:	4629      	mov	r1, r5
24000fe2:	4638      	mov	r0, r7
24000fe4:	f00d f854 	bl	2400e090 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24000fec:	9300      	str	r3, [sp, #0]
24000fee:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
24000ff2:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 24001230 <audioInit+0xbb4>
24000ff6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24000ffa:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 24001234 <audioInit+0xbb8>
24000ffe:	4a8e      	ldr	r2, [pc, #568]	; (24001238 <audioInit+0xbbc>)
24001000:	498e      	ldr	r1, [pc, #568]	; (2400123c <audioInit+0xbc0>)
24001002:	4638      	mov	r0, r7
24001004:	f00d f8ce 	bl	2400e1a4 <tCompressor_setTables>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001008:	4f8d      	ldr	r7, [pc, #564]	; (24001240 <audioInit+0xbc4>)
2400100a:	ed9f 8a8e 	vldr	s16, [pc, #568]	; 24001244 <audioInit+0xbc8>
2400100e:	463a      	mov	r2, r7
24001010:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001014:	eeb0 0a48 	vmov.f32	s0, s16
24001018:	488b      	ldr	r0, [pc, #556]	; (24001248 <audioInit+0xbcc>)
2400101a:	4420      	add	r0, r4
2400101c:	f00c fd82 	bl	2400db24 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
24001020:	463a      	mov	r2, r7
24001022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001026:	eeb0 0a48 	vmov.f32	s0, s16
2400102a:	4888      	ldr	r0, [pc, #544]	; (2400124c <audioInit+0xbd0>)
2400102c:	4420      	add	r0, r4
2400102e:	f00c fd79 	bl	2400db24 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
24001032:	4b87      	ldr	r3, [pc, #540]	; (24001250 <audioInit+0xbd4>)
24001034:	eb03 0804 	add.w	r8, r3, r4
24001038:	4629      	mov	r1, r5
2400103a:	4640      	mov	r0, r8
2400103c:	f00f fd44 	bl	24010ac8 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001040:	4f84      	ldr	r7, [pc, #528]	; (24001254 <audioInit+0xbd8>)
24001042:	4427      	add	r7, r4
24001044:	4629      	mov	r1, r5
24001046:	4638      	mov	r0, r7
24001048:	f00f fd3e 	bl	24010ac8 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
2400104c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 24001258 <audioInit+0xbdc>
24001050:	4640      	mov	r0, r8
24001052:	f00f fd67 	bl	24010b24 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24001056:	ed9f 0a81 	vldr	s0, [pc, #516]	; 2400125c <audioInit+0xbe0>
2400105a:	4638      	mov	r0, r7
2400105c:	f00f fd62 	bl	24010b24 <tCycle_setFreq>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001060:	eddf 8a7f 	vldr	s17, [pc, #508]	; 24001260 <audioInit+0xbe4>
24001064:	ed9f 8a7f 	vldr	s16, [pc, #508]	; 24001264 <audioInit+0xbe8>
24001068:	462a      	mov	r2, r5
2400106a:	eef0 0a68 	vmov.f32	s1, s17
2400106e:	eeb0 0a48 	vmov.f32	s0, s16
24001072:	2101      	movs	r1, #1
24001074:	487c      	ldr	r0, [pc, #496]	; (24001268 <audioInit+0xbec>)
24001076:	4420      	add	r0, r4
24001078:	f00d fdfa 	bl	2400ec70 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
2400107c:	462a      	mov	r2, r5
2400107e:	eef0 0a68 	vmov.f32	s1, s17
24001082:	eeb0 0a48 	vmov.f32	s0, s16
24001086:	2100      	movs	r1, #0
24001088:	4878      	ldr	r0, [pc, #480]	; (2400126c <audioInit+0xbf0>)
2400108a:	4420      	add	r0, r4
2400108c:	f00d fdf0 	bl	2400ec70 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001090:	462a      	mov	r2, r5
24001092:	eef0 0a68 	vmov.f32	s1, s17
24001096:	eeb0 0a48 	vmov.f32	s0, s16
2400109a:	2102      	movs	r1, #2
2400109c:	4874      	ldr	r0, [pc, #464]	; (24001270 <audioInit+0xbf4>)
2400109e:	4420      	add	r0, r4
240010a0:	f00d fde6 	bl	2400ec70 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
240010a4:	4629      	mov	r1, r5
240010a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240010aa:	eeb0 0a48 	vmov.f32	s0, s16
240010ae:	4871      	ldr	r0, [pc, #452]	; (24001274 <audioInit+0xbf8>)
240010b0:	4420      	add	r0, r4
240010b2:	f00e fb0d 	bl	2400f6d0 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240010b6:	462a      	mov	r2, r5
240010b8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240010bc:	eeb0 0a48 	vmov.f32	s0, s16
240010c0:	2105      	movs	r1, #5
240010c2:	486d      	ldr	r0, [pc, #436]	; (24001278 <audioInit+0xbfc>)
240010c4:	4420      	add	r0, r4
240010c6:	f00e fa95 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240010ca:	462a      	mov	r2, r5
240010cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240010d0:	eeb0 0a48 	vmov.f32	s0, s16
240010d4:	2106      	movs	r1, #6
240010d6:	4869      	ldr	r0, [pc, #420]	; (2400127c <audioInit+0xc00>)
240010d8:	4420      	add	r0, r4
240010da:	f00e fa8b 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240010de:	462a      	mov	r2, r5
240010e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240010e4:	eeb0 0a48 	vmov.f32	s0, s16
240010e8:	2107      	movs	r1, #7
240010ea:	4865      	ldr	r0, [pc, #404]	; (24001280 <audioInit+0xc04>)
240010ec:	4420      	add	r0, r4
240010ee:	f00e fa81 	bl	2400f5f4 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240010f2:	462a      	mov	r2, r5
240010f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240010f8:	eeb0 0a48 	vmov.f32	s0, s16
240010fc:	2104      	movs	r1, #4
240010fe:	4861      	ldr	r0, [pc, #388]	; (24001284 <audioInit+0xc08>)
24001100:	4420      	add	r0, r4
24001102:	f00e fa77 	bl	2400f5f4 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
24001106:	4629      	mov	r1, r5
24001108:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400110c:	eeb0 0a48 	vmov.f32	s0, s16
24001110:	485d      	ldr	r0, [pc, #372]	; (24001288 <audioInit+0xc0c>)
24001112:	4420      	add	r0, r4
24001114:	f00e fe20 	bl	2400fd58 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
24001118:	f109 0901 	add.w	r9, r9, #1
2400111c:	f1b9 0f03 	cmp.w	r9, #3
24001120:	f77f af0e 	ble.w	24000f40 <audioInit+0x8c4>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001124:	2400      	movs	r4, #0
24001126:	e00c      	b.n	24001142 <audioInit+0xac6>
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
24001128:	eb06 0044 	add.w	r0, r6, r4, lsl #1
2400112c:	4925      	ldr	r1, [pc, #148]	; (240011c4 <audioInit+0xb48>)
2400112e:	eddf 0a57 	vldr	s1, [pc, #348]	; 2400128c <audioInit+0xc10>
24001132:	ed9f 0a57 	vldr	s0, [pc, #348]	; 24001290 <audioInit+0xc14>
24001136:	4b57      	ldr	r3, [pc, #348]	; (24001294 <audioInit+0xc18>)
24001138:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400113c:	f00d fc04 	bl	2400e948 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001140:	3401      	adds	r4, #1
24001142:	2c1f      	cmp	r4, #31
24001144:	ddf0      	ble.n	24001128 <audioInit+0xaac>
		}


		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001146:	4b54      	ldr	r3, [pc, #336]	; (24001298 <audioInit+0xc1c>)
24001148:	eb03 1386 	add.w	r3, r3, r6, lsl #6
2400114c:	4f53      	ldr	r7, [pc, #332]	; (2400129c <audioInit+0xc20>)
2400114e:	0074      	lsls	r4, r6, #1
24001150:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
24001154:	2501      	movs	r5, #1
24001156:	9501      	str	r5, [sp, #4]
24001158:	9300      	str	r3, [sp, #0]
2400115a:	463b      	mov	r3, r7
2400115c:	2220      	movs	r2, #32
2400115e:	2102      	movs	r1, #2
24001160:	484f      	ldr	r0, [pc, #316]	; (240012a0 <audioInit+0xc24>)
24001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
24001166:	f011 fdd9 	bl	24012d1c <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
2400116a:	eb06 1246 	add.w	r2, r6, r6, lsl #5
2400116e:	4b4d      	ldr	r3, [pc, #308]	; (240012a4 <audioInit+0xc28>)
24001170:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24001174:	19a0      	adds	r0, r4, r6
24001176:	2402      	movs	r4, #2
24001178:	9401      	str	r4, [sp, #4]
2400117a:	9300      	str	r3, [sp, #0]
2400117c:	463b      	mov	r3, r7
2400117e:	4622      	mov	r2, r4
24001180:	2120      	movs	r1, #32
24001182:	4f49      	ldr	r7, [pc, #292]	; (240012a8 <audioInit+0xc2c>)
24001184:	eb07 0080 	add.w	r0, r7, r0, lsl #2
24001188:	f012 f804 	bl	24013194 <arm_fir_decimate_init_f32>

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
2400118c:	4f0d      	ldr	r7, [pc, #52]	; (240011c4 <audioInit+0xb48>)
2400118e:	fa06 f804 	lsl.w	r8, r6, r4
24001192:	463b      	mov	r3, r7
24001194:	2200      	movs	r2, #0
24001196:	4621      	mov	r1, r4
24001198:	4844      	ldr	r0, [pc, #272]	; (240012ac <audioInit+0xc30>)
2400119a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
2400119e:	f00c fe7d 	bl	2400de9c <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
240011a2:	463a      	mov	r2, r7
240011a4:	eddf 0a42 	vldr	s1, [pc, #264]	; 240012b0 <audioInit+0xc34>
240011a8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 240012b4 <audioInit+0xc38>
240011ac:	4629      	mov	r1, r5
240011ae:	4842      	ldr	r0, [pc, #264]	; (240012b8 <audioInit+0xc3c>)
240011b0:	4440      	add	r0, r8
240011b2:	f00d fd5d 	bl	2400ec70 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240011b6:	442e      	add	r6, r5
240011b8:	2e01      	cmp	r6, #1
240011ba:	dc01      	bgt.n	240011c0 <audioInit+0xb44>
		for(int i = 0; i < NUM_OSC; i++)
240011bc:	2700      	movs	r7, #0
240011be:	e539      	b.n	24000c34 <audioInit+0x5b8>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
240011c0:	2300      	movs	r3, #0
240011c2:	e081      	b.n	240012c8 <audioInit+0xc4c>
240011c4:	200053b4 	.word	0x200053b4
240011c8:	20005428 	.word	0x20005428
240011cc:	20005408 	.word	0x20005408
240011d0:	20005478 	.word	0x20005478
240011d4:	200054b8 	.word	0x200054b8
240011d8:	20005498 	.word	0x20005498
240011dc:	20005448 	.word	0x20005448
240011e0:	42a00000 	.word	0x42a00000
240011e4:	20005668 	.word	0x20005668
240011e8:	463b8000 	.word	0x463b8000
240011ec:	20005670 	.word	0x20005670
240011f0:	3ff33333 	.word	0x3ff33333
240011f4:	447a0000 	.word	0x447a0000
240011f8:	20005648 	.word	0x20005648
240011fc:	20005160 	.word	0x20005160
24001200:	200010f4 	.word	0x200010f4
24001204:	3dcccccd 	.word	0x3dcccccd
24001208:	3f7fffac 	.word	0x3f7fffac
2400120c:	20000b14 	.word	0x20000b14
24001210:	20000ed4 	.word	0x20000ed4
24001214:	20000ef4 	.word	0x20000ef4
24001218:	20005cec 	.word	0x20005cec
2400121c:	42000000 	.word	0x42000000
24001220:	20005d0c 	.word	0x20005d0c
24001224:	20000b34 	.word	0x20000b34
24001228:	47bb8000 	.word	0x47bb8000
2400122c:	20000b54 	.word	0x20000b54
24001230:	c2b40000 	.word	0xc2b40000
24001234:	3727c5ac 	.word	0x3727c5ac
24001238:	30002000 	.word	0x30002000
2400123c:	3000a000 	.word	0x3000a000
24001240:	200053b0 	.word	0x200053b0
24001244:	457a0000 	.word	0x457a0000
24001248:	200050f8 	.word	0x200050f8
2400124c:	20005118 	.word	0x20005118
24001250:	200055f8 	.word	0x200055f8
24001254:	20005618 	.word	0x20005618
24001258:	3e4ccccd 	.word	0x3e4ccccd
2400125c:	3e638e39 	.word	0x3e638e39
24001260:	3f333333 	.word	0x3f333333
24001264:	44fa0000 	.word	0x44fa0000
24001268:	20000964 	.word	0x20000964
2400126c:	20000944 	.word	0x20000944
24001270:	20000904 	.word	0x20000904
24001274:	20000924 	.word	0x20000924
24001278:	200008e4 	.word	0x200008e4
2400127c:	200008c4 	.word	0x200008c4
24001280:	200008a4 	.word	0x200008a4
24001284:	20000884 	.word	0x20000884
24001288:	20000864 	.word	0x20000864
2400128c:	3d4ccccd 	.word	0x3d4ccccd
24001290:	00000000 	.word	0x00000000
24001294:	200054f4 	.word	0x200054f4
24001298:	2000525c 	.word	0x2000525c
2400129c:	2401b044 	.word	0x2401b044
240012a0:	2000569c 	.word	0x2000569c
240012a4:	20000f14 	.word	0x20000f14
240012a8:	20005684 	.word	0x20005684
240012ac:	2000567c 	.word	0x2000567c
240012b0:	3e99999a 	.word	0x3e99999a
240012b4:	46947000 	.word	0x46947000
240012b8:	200051b0 	.word	0x200051b0
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
240012bc:	4a07      	ldr	r2, [pc, #28]	; (240012dc <audioInit+0xc60>)
240012be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240012c2:	2100      	movs	r1, #0
240012c4:	6411      	str	r1, [r2, #64]	; 0x40
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
240012c6:	3301      	adds	r3, #1
240012c8:	2b1f      	cmp	r3, #31
240012ca:	ddf7      	ble.n	240012bc <audioInit+0xc40>
	}
	HAL_Delay(1);
240012cc:	2001      	movs	r0, #1
240012ce:	f002 fb79 	bl	240039c4 <HAL_Delay>

}
240012d2:	b002      	add	sp, #8
240012d4:	ecbd 8b02 	vpop	{d8}
240012d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
240012dc:	30000000 	.word	0x30000000

240012e0 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
240012e0:	b570      	push	{r4, r5, r6, lr}
240012e2:	4605      	mov	r5, r0
240012e4:	460c      	mov	r4, r1
	HAL_Delay(1);
240012e6:	2001      	movs	r0, #1
240012e8:	f002 fb6c 	bl	240039c4 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240012ec:	4e08      	ldr	r6, [pc, #32]	; (24001310 <audioStart+0x30>)
240012ee:	2220      	movs	r2, #32
240012f0:	f106 0140 	add.w	r1, r6, #64	; 0x40
240012f4:	4628      	mov	r0, r5
240012f6:	f007 ffa3 	bl	24009240 <HAL_SAI_Transmit_DMA>
240012fa:	4b06      	ldr	r3, [pc, #24]	; (24001314 <audioStart+0x34>)
240012fc:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
240012fe:	2220      	movs	r2, #32
24001300:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
24001304:	4620      	mov	r0, r4
24001306:	f008 f81d 	bl	24009344 <HAL_SAI_Receive_DMA>
2400130a:	4b03      	ldr	r3, [pc, #12]	; (24001318 <audioStart+0x38>)
2400130c:	7018      	strb	r0, [r3, #0]
}
2400130e:	bd70      	pop	{r4, r5, r6, pc}
24001310:	30000000 	.word	0x30000000
24001314:	200149dc 	.word	0x200149dc
24001318:	20005c6d 	.word	0x20005c6d

2400131c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
2400131c:	b500      	push	{lr}
2400131e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24001320:	4b0b      	ldr	r3, [pc, #44]	; (24001350 <MX_BDMA_Init+0x34>)
24001322:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001326:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
2400132a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24001336:	9301      	str	r3, [sp, #4]
24001338:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
2400133a:	2200      	movs	r2, #0
2400133c:	2109      	movs	r1, #9
2400133e:	2081      	movs	r0, #129	; 0x81
24001340:	f002 fb6c 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24001344:	2081      	movs	r0, #129	; 0x81
24001346:	f002 fb9f 	bl	24003a88 <HAL_NVIC_EnableIRQ>

}
2400134a:	b003      	add	sp, #12
2400134c:	f85d fb04 	ldr.w	pc, [sp], #4
24001350:	58024400 	.word	0x58024400

24001354 <WriteControlRegister>:
    res = res;

}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
24001354:	b500      	push	{lr}
24001356:	b085      	sub	sp, #20
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
24001358:	f3c2 2300 	ubfx	r3, r2, #8, #1
2400135c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
24001360:	f88d 300c 	strb.w	r3, [sp, #12]
24001364:	f88d 200d 	strb.w	r2, [sp, #13]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001368:	23fa      	movs	r3, #250	; 0xfa
2400136a:	9300      	str	r3, [sp, #0]
2400136c:	2302      	movs	r3, #2
2400136e:	aa03      	add	r2, sp, #12
24001370:	2134      	movs	r1, #52	; 0x34
24001372:	f004 f9ad 	bl	240056d0 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24001376:	200a      	movs	r0, #10
24001378:	f002 fb24 	bl	240039c4 <HAL_Delay>
    return 1;
}
2400137c:	2001      	movs	r0, #1
2400137e:	b005      	add	sp, #20
24001380:	f85d fb04 	ldr.w	pc, [sp], #4

24001384 <codec_init>:
{
24001384:	b510      	push	{r4, lr}
24001386:	4604      	mov	r4, r0
    res = WriteControlRegister(i2c, CODEC_REG_RESET, 0);
24001388:	2200      	movs	r2, #0
2400138a:	210f      	movs	r1, #15
2400138c:	f7ff ffe2 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_LINE_IN, CODEC_INPUT_0_DB);
24001390:	2217      	movs	r2, #23
24001392:	2100      	movs	r1, #0
24001394:	4620      	mov	r0, r4
24001396:	f7ff ffdd 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_LINE_IN, CODEC_INPUT_0_DB);
2400139a:	2217      	movs	r2, #23
2400139c:	2101      	movs	r1, #1
2400139e:	4620      	mov	r0, r4
240013a0:	f7ff ffd8 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_LEFT_HEADPHONES_OUT,
240013a4:	2200      	movs	r2, #0
240013a6:	2102      	movs	r1, #2
240013a8:	4620      	mov	r0, r4
240013aa:	f7ff ffd3 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_RIGHT_HEADPHONES_OUT,
240013ae:	2200      	movs	r2, #0
240013b0:	2103      	movs	r1, #3
240013b2:	4620      	mov	r0, r4
240013b4:	f7ff ffce 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_ANALOGUE_ROUTING,
240013b8:	2212      	movs	r2, #18
240013ba:	2104      	movs	r1, #4
240013bc:	4620      	mov	r0, r4
240013be:	f7ff ffc9 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_ROUTING,
240013c2:	2200      	movs	r2, #0
240013c4:	2105      	movs	r1, #5
240013c6:	4620      	mov	r0, r4
240013c8:	f7ff ffc4 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_POWER_MANAGEMENT, power_down_reg);
240013cc:	2262      	movs	r2, #98	; 0x62
240013ce:	2106      	movs	r1, #6
240013d0:	4620      	mov	r0, r4
240013d2:	f7ff ffbf 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_DIGITAL_FORMAT, format_byte);
240013d6:	2209      	movs	r2, #9
240013d8:	2107      	movs	r1, #7
240013da:	4620      	mov	r0, r4
240013dc:	f7ff ffba 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_SAMPLE_RATE, CODEC_RATE_48K_48K);
240013e0:	2200      	movs	r2, #0
240013e2:	2108      	movs	r1, #8
240013e4:	4620      	mov	r0, r4
240013e6:	f7ff ffb5 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x00);
240013ea:	2200      	movs	r2, #0
240013ec:	2109      	movs	r1, #9
240013ee:	4620      	mov	r0, r4
240013f0:	f7ff ffb0 	bl	24001354 <WriteControlRegister>
    res = WriteControlRegister(i2c, CODEC_REG_ACTIVE, 0x01);
240013f4:	2201      	movs	r2, #1
240013f6:	2109      	movs	r1, #9
240013f8:	4620      	mov	r0, r4
240013fa:	f7ff ffab 	bl	24001354 <WriteControlRegister>
}
240013fe:	bd10      	pop	{r4, pc}

24001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
24001400:	b500      	push	{lr}
24001402:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24001404:	4b23      	ldr	r3, [pc, #140]	; (24001494 <MX_DMA_Init+0x94>)
24001406:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
2400140a:	f042 0201 	orr.w	r2, r2, #1
2400140e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
24001412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24001416:	f003 0301 	and.w	r3, r3, #1
2400141a:	9301      	str	r3, [sp, #4]
2400141c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
2400141e:	2200      	movs	r2, #0
24001420:	2102      	movs	r1, #2
24001422:	200b      	movs	r0, #11
24001424:	f002 fafa 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24001428:	200b      	movs	r0, #11
2400142a:	f002 fb2d 	bl	24003a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
2400142e:	2200      	movs	r2, #0
24001430:	2105      	movs	r1, #5
24001432:	200c      	movs	r0, #12
24001434:	f002 faf2 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24001438:	200c      	movs	r0, #12
2400143a:	f002 fb25 	bl	24003a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
2400143e:	2200      	movs	r2, #0
24001440:	2106      	movs	r1, #6
24001442:	200d      	movs	r0, #13
24001444:	f002 faea 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24001448:	200d      	movs	r0, #13
2400144a:	f002 fb1d 	bl	24003a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
2400144e:	2200      	movs	r2, #0
24001450:	2104      	movs	r1, #4
24001452:	200e      	movs	r0, #14
24001454:	f002 fae2 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24001458:	200e      	movs	r0, #14
2400145a:	f002 fb15 	bl	24003a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
2400145e:	2200      	movs	r2, #0
24001460:	2103      	movs	r1, #3
24001462:	200f      	movs	r0, #15
24001464:	f002 fada 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24001468:	200f      	movs	r0, #15
2400146a:	f002 fb0d 	bl	24003a88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
2400146e:	2200      	movs	r2, #0
24001470:	2101      	movs	r1, #1
24001472:	2011      	movs	r0, #17
24001474:	f002 fad2 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24001478:	2011      	movs	r0, #17
2400147a:	f002 fb05 	bl	24003a88 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
2400147e:	2200      	movs	r2, #0
24001480:	2108      	movs	r1, #8
24001482:	2066      	movs	r0, #102	; 0x66
24001484:	f002 faca 	bl	24003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001488:	2066      	movs	r0, #102	; 0x66
2400148a:	f002 fafd 	bl	24003a88 <HAL_NVIC_EnableIRQ>

}
2400148e:	b003      	add	sp, #12
24001490:	f85d fb04 	ldr.w	pc, [sp], #4
24001494:	58024400 	.word	0x58024400

24001498 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
24001498:	b5f0      	push	{r4, r5, r6, r7, lr}
2400149a:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400149c:	2300      	movs	r3, #0
2400149e:	9301      	str	r3, [sp, #4]
240014a0:	9302      	str	r3, [sp, #8]
240014a2:	9303      	str	r3, [sp, #12]
240014a4:	9304      	str	r3, [sp, #16]
240014a6:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
240014a8:	4b2d      	ldr	r3, [pc, #180]	; (24001560 <HAL_FMC_MspInit+0xc8>)
240014aa:	681b      	ldr	r3, [r3, #0]
240014ac:	b10b      	cbz	r3, 240014b2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
240014ae:	b007      	add	sp, #28
240014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
240014b2:	4b2b      	ldr	r3, [pc, #172]	; (24001560 <HAL_FMC_MspInit+0xc8>)
240014b4:	2201      	movs	r2, #1
240014b6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
240014b8:	4b2a      	ldr	r3, [pc, #168]	; (24001564 <HAL_FMC_MspInit+0xcc>)
240014ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240014be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
240014c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240014c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
240014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240014ce:	9300      	str	r3, [sp, #0]
240014d0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
240014d2:	f64f 7383 	movw	r3, #65411	; 0xff83
240014d6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240014d8:	2602      	movs	r6, #2
240014da:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240014dc:	2503      	movs	r5, #3
240014de:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240014e0:	240c      	movs	r4, #12
240014e2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240014e4:	a901      	add	r1, sp, #4
240014e6:	4820      	ldr	r0, [pc, #128]	; (24001568 <HAL_FMC_MspInit+0xd0>)
240014e8:	f003 fdae 	bl	24005048 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
240014ec:	f248 1337 	movw	r3, #33079	; 0x8137
240014f0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240014f2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240014f4:	2700      	movs	r7, #0
240014f6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240014f8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
240014fa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240014fc:	a901      	add	r1, sp, #4
240014fe:	481b      	ldr	r0, [pc, #108]	; (2400156c <HAL_FMC_MspInit+0xd4>)
24001500:	f003 fda2 	bl	24005048 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001504:	f24c 7303 	movw	r3, #50947	; 0xc703
24001508:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400150a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400150c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400150e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001510:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001512:	a901      	add	r1, sp, #4
24001514:	4816      	ldr	r0, [pc, #88]	; (24001570 <HAL_FMC_MspInit+0xd8>)
24001516:	f003 fd97 	bl	24005048 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
2400151a:	f240 63ff 	movw	r3, #1791	; 0x6ff
2400151e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001520:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001522:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001524:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001526:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001528:	a901      	add	r1, sp, #4
2400152a:	4812      	ldr	r0, [pc, #72]	; (24001574 <HAL_FMC_MspInit+0xdc>)
2400152c:	f003 fd8c 	bl	24005048 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001530:	f64f 732c 	movw	r3, #65324	; 0xff2c
24001534:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001536:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001538:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400153a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
2400153c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400153e:	a901      	add	r1, sp, #4
24001540:	480d      	ldr	r0, [pc, #52]	; (24001578 <HAL_FMC_MspInit+0xe0>)
24001542:	f003 fd81 	bl	24005048 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001546:	f64f 033f 	movw	r3, #63551	; 0xf83f
2400154a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400154c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400154e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001550:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001552:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001554:	a901      	add	r1, sp, #4
24001556:	4809      	ldr	r0, [pc, #36]	; (2400157c <HAL_FMC_MspInit+0xe4>)
24001558:	f003 fd76 	bl	24005048 <HAL_GPIO_Init>
2400155c:	e7a7      	b.n	240014ae <HAL_FMC_MspInit+0x16>
2400155e:	bf00      	nop
24001560:	20014a34 	.word	0x20014a34
24001564:	58024400 	.word	0x58024400
24001568:	58021000 	.word	0x58021000
2400156c:	58021800 	.word	0x58021800
24001570:	58020c00 	.word	0x58020c00
24001574:	58022000 	.word	0x58022000
24001578:	58021c00 	.word	0x58021c00
2400157c:	58021400 	.word	0x58021400

24001580 <MX_FMC_Init>:
{
24001580:	b500      	push	{lr}
24001582:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
24001584:	2300      	movs	r3, #0
24001586:	9301      	str	r3, [sp, #4]
24001588:	9302      	str	r3, [sp, #8]
2400158a:	9303      	str	r3, [sp, #12]
2400158c:	9304      	str	r3, [sp, #16]
2400158e:	9305      	str	r3, [sp, #20]
24001590:	9306      	str	r3, [sp, #24]
24001592:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001594:	4815      	ldr	r0, [pc, #84]	; (240015ec <MX_FMC_Init+0x6c>)
24001596:	4a16      	ldr	r2, [pc, #88]	; (240015f0 <MX_FMC_Init+0x70>)
24001598:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
2400159a:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
2400159c:	2201      	movs	r2, #1
2400159e:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
240015a0:	2208      	movs	r2, #8
240015a2:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240015a4:	2120      	movs	r1, #32
240015a6:	6101      	str	r1, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
240015a8:	2140      	movs	r1, #64	; 0x40
240015aa:	6141      	str	r1, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
240015ac:	f44f 7180 	mov.w	r1, #256	; 0x100
240015b0:	6181      	str	r1, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
240015b2:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
240015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
240015b8:	6201      	str	r1, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240015be:	6241      	str	r1, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
240015c0:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
240015c2:	2302      	movs	r3, #2
240015c4:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
240015c6:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 5;
240015c8:	2205      	movs	r2, #5
240015ca:	9203      	str	r2, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
240015cc:	2206      	movs	r2, #6
240015ce:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
240015d0:	2203      	movs	r2, #3
240015d2:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
240015d4:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
240015d6:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
240015d8:	a901      	add	r1, sp, #4
240015da:	f008 feab 	bl	2400a334 <HAL_SDRAM_Init>
240015de:	b910      	cbnz	r0, 240015e6 <MX_FMC_Init+0x66>
}
240015e0:	b009      	add	sp, #36	; 0x24
240015e2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
240015e6:	f001 fcfd 	bl	24002fe4 <Error_Handler>
}
240015ea:	e7f9      	b.n	240015e0 <MX_FMC_Init+0x60>
240015ec:	20014a38 	.word	0x20014a38
240015f0:	52004140 	.word	0x52004140

240015f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
240015f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
240015f6:	f7ff ff4f 	bl	24001498 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
240015fa:	bd08      	pop	{r3, pc}

240015fc <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
240015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24001600:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001602:	2400      	movs	r4, #0
24001604:	9409      	str	r4, [sp, #36]	; 0x24
24001606:	940a      	str	r4, [sp, #40]	; 0x28
24001608:	940b      	str	r4, [sp, #44]	; 0x2c
2400160a:	940c      	str	r4, [sp, #48]	; 0x30
2400160c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
2400160e:	4b9d      	ldr	r3, [pc, #628]	; (24001884 <MX_GPIO_Init+0x288>)
24001610:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001614:	f042 0210 	orr.w	r2, r2, #16
24001618:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400161c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001620:	f002 0210 	and.w	r2, r2, #16
24001624:	9200      	str	r2, [sp, #0]
24001626:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400162c:	f042 0202 	orr.w	r2, r2, #2
24001630:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001638:	f002 0202 	and.w	r2, r2, #2
2400163c:	9201      	str	r2, [sp, #4]
2400163e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24001640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24001648:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400164c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001650:	f002 0240 	and.w	r2, r2, #64	; 0x40
24001654:	9202      	str	r2, [sp, #8]
24001656:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24001658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400165c:	f042 0208 	orr.w	r2, r2, #8
24001660:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001668:	f002 0208 	and.w	r2, r2, #8
2400166c:	9203      	str	r2, [sp, #12]
2400166e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24001670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001674:	f042 0204 	orr.w	r2, r2, #4
24001678:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400167c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001680:	f002 0204 	and.w	r2, r2, #4
24001684:	9204      	str	r2, [sp, #16]
24001686:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24001688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400168c:	f042 0201 	orr.w	r2, r2, #1
24001690:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001694:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001698:	f002 0201 	and.w	r2, r2, #1
2400169c:	9205      	str	r2, [sp, #20]
2400169e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
240016a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240016a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240016a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240016ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240016b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
240016b4:	9206      	str	r2, [sp, #24]
240016b6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
240016b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240016bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
240016c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240016c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240016c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
240016cc:	9207      	str	r2, [sp, #28]
240016ce:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
240016d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240016d4:	f042 0220 	orr.w	r2, r2, #32
240016d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240016e0:	f003 0320 	and.w	r3, r3, #32
240016e4:	9308      	str	r3, [sp, #32]
240016e6:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
240016e8:	4f67      	ldr	r7, [pc, #412]	; (24001888 <MX_GPIO_Init+0x28c>)
240016ea:	4622      	mov	r2, r4
240016ec:	2182      	movs	r1, #130	; 0x82
240016ee:	4638      	mov	r0, r7
240016f0:	f003 fdc1 	bl	24005276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
240016f4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 24001898 <MX_GPIO_Init+0x29c>
240016f8:	4622      	mov	r2, r4
240016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
240016fe:	4648      	mov	r0, r9
24001700:	f003 fdb9 	bl	24005276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001704:	f8df b194 	ldr.w	fp, [pc, #404]	; 2400189c <MX_GPIO_Init+0x2a0>
24001708:	4622      	mov	r2, r4
2400170a:	2193      	movs	r1, #147	; 0x93
2400170c:	4658      	mov	r0, fp
2400170e:	f003 fdb2 	bl	24005276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24001712:	f8df 818c 	ldr.w	r8, [pc, #396]	; 240018a0 <MX_GPIO_Init+0x2a4>
24001716:	4622      	mov	r2, r4
24001718:	2149      	movs	r1, #73	; 0x49
2400171a:	4640      	mov	r0, r8
2400171c:	f003 fdab 	bl	24005276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001720:	f8df a180 	ldr.w	sl, [pc, #384]	; 240018a4 <MX_GPIO_Init+0x2a8>
24001724:	4622      	mov	r2, r4
24001726:	f44f 6100 	mov.w	r1, #2048	; 0x800
2400172a:	4650      	mov	r0, sl
2400172c:	f003 fda3 	bl	24005276 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG14 PG13 PG12 PG7
                           PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001730:	f247 03c0 	movw	r3, #28864	; 0x70c0
24001734:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24001736:	2503      	movs	r5, #3
24001738:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400173a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400173c:	a909      	add	r1, sp, #36	; 0x24
2400173e:	4648      	mov	r0, r9
24001740:	f003 fc82 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001744:	f243 03f8 	movw	r3, #12536	; 0x30f8
24001748:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2400174a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400174c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400174e:	a909      	add	r1, sp, #36	; 0x24
24001750:	4650      	mov	r0, sl
24001752:	f003 fc79 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001756:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
2400175a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2400175c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400175e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001760:	a909      	add	r1, sp, #36	; 0x24
24001762:	4640      	mov	r0, r8
24001764:	f003 fc70 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001768:	2382      	movs	r3, #130	; 0x82
2400176a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2400176c:	2601      	movs	r6, #1
2400176e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001770:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001772:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001774:	a909      	add	r1, sp, #36	; 0x24
24001776:	4638      	mov	r0, r7
24001778:	f003 fc66 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB2 PB13 PB0
                           PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0
2400177c:	f242 4345 	movw	r3, #9285	; 0x2445
24001780:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24001782:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001784:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001786:	a909      	add	r1, sp, #36	; 0x24
24001788:	4638      	mov	r0, r7
2400178a:	f003 fc5d 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
2400178e:	f44f 7300 	mov.w	r3, #512	; 0x200
24001792:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24001794:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001796:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001798:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400179a:	a909      	add	r1, sp, #36	; 0x24
2400179c:	4648      	mov	r0, r9
2400179e:	f003 fc53 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
240017a2:	f24e 036c 	movw	r3, #57452	; 0xe06c
240017a6:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
240017a8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240017aa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240017ac:	a909      	add	r1, sp, #36	; 0x24
240017ae:	4658      	mov	r0, fp
240017b0:	f003 fc4a 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
240017b4:	f44f 6310 	mov.w	r3, #2304	; 0x900
240017b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
240017ba:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240017bc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240017be:	a909      	add	r1, sp, #36	; 0x24
240017c0:	4832      	ldr	r0, [pc, #200]	; (2400188c <MX_GPIO_Init+0x290>)
240017c2:	f003 fc41 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
240017c6:	2393      	movs	r3, #147	; 0x93
240017c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240017ca:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240017cc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240017ce:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240017d0:	a909      	add	r1, sp, #36	; 0x24
240017d2:	4658      	mov	r0, fp
240017d4:	f003 fc38 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
240017d8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
240017dc:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
240017de:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240017e0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
240017e2:	a909      	add	r1, sp, #36	; 0x24
240017e4:	482a      	ldr	r0, [pc, #168]	; (24001890 <MX_GPIO_Init+0x294>)
240017e6:	f003 fc2f 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
240017ea:	2308      	movs	r3, #8
240017ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
240017ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
240017f2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240017f4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240017f6:	a909      	add	r1, sp, #36	; 0x24
240017f8:	4648      	mov	r0, r9
240017fa:	f003 fc25 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
240017fe:	23c0      	movs	r3, #192	; 0xc0
24001800:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24001802:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001804:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001806:	a909      	add	r1, sp, #36	; 0x24
24001808:	4822      	ldr	r0, [pc, #136]	; (24001894 <MX_GPIO_Init+0x298>)
2400180a:	f003 fc1d 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
2400180e:	2302      	movs	r3, #2
24001810:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24001812:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001814:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001816:	a909      	add	r1, sp, #36	; 0x24
24001818:	4640      	mov	r0, r8
2400181a:	f003 fc15 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
2400181e:	2349      	movs	r3, #73	; 0x49
24001820:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24001822:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001824:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001826:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001828:	a909      	add	r1, sp, #36	; 0x24
2400182a:	4640      	mov	r0, r8
2400182c:	f003 fc0c 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001830:	f44f 6300 	mov.w	r3, #2048	; 0x800
24001834:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24001836:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001838:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2400183a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400183c:	a909      	add	r1, sp, #36	; 0x24
2400183e:	4650      	mov	r0, sl
24001840:	f003 fc02 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001844:	2304      	movs	r3, #4
24001846:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24001848:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
2400184a:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400184c:	a909      	add	r1, sp, #36	; 0x24
2400184e:	4640      	mov	r0, r8
24001850:	f003 fbfa 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24001858:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
2400185a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
2400185e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001860:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001862:	a909      	add	r1, sp, #36	; 0x24
24001864:	4638      	mov	r0, r7
24001866:	f003 fbef 	bl	24005048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
2400186a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
2400186e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24001870:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001872:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001874:	a909      	add	r1, sp, #36	; 0x24
24001876:	4638      	mov	r0, r7
24001878:	f003 fbe6 	bl	24005048 <HAL_GPIO_Init>

}
2400187c:	b00f      	add	sp, #60	; 0x3c
2400187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24001882:	bf00      	nop
24001884:	58024400 	.word	0x58024400
24001888:	58020400 	.word	0x58020400
2400188c:	58022000 	.word	0x58022000
24001890:	58021400 	.word	0x58021400
24001894:	58021c00 	.word	0x58021c00
24001898:	58021800 	.word	0x58021800
2400189c:	58020800 	.word	0x58020800
240018a0:	58020000 	.word	0x58020000
240018a4:	58020c00 	.word	0x58020c00

240018a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
240018a8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
240018aa:	4814      	ldr	r0, [pc, #80]	; (240018fc <MX_I2C1_Init+0x54>)
240018ac:	4b14      	ldr	r3, [pc, #80]	; (24001900 <MX_I2C1_Init+0x58>)
240018ae:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0050174F;
240018b0:	4b14      	ldr	r3, [pc, #80]	; (24001904 <MX_I2C1_Init+0x5c>)
240018b2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 68;
240018b4:	2344      	movs	r3, #68	; 0x44
240018b6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
240018b8:	2301      	movs	r3, #1
240018ba:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
240018bc:	2300      	movs	r3, #0
240018be:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
240018c0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
240018c2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
240018c4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
240018c6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
240018c8:	f003 fea4 	bl	24005614 <HAL_I2C_Init>
240018cc:	b968      	cbnz	r0, 240018ea <MX_I2C1_Init+0x42>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240018ce:	2100      	movs	r1, #0
240018d0:	480a      	ldr	r0, [pc, #40]	; (240018fc <MX_I2C1_Init+0x54>)
240018d2:	f004 fdf0 	bl	240064b6 <HAL_I2CEx_ConfigAnalogFilter>
240018d6:	b958      	cbnz	r0, 240018f0 <MX_I2C1_Init+0x48>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
240018d8:	2100      	movs	r1, #0
240018da:	4808      	ldr	r0, [pc, #32]	; (240018fc <MX_I2C1_Init+0x54>)
240018dc:	f004 fe19 	bl	24006512 <HAL_I2CEx_ConfigDigitalFilter>
240018e0:	b948      	cbnz	r0, 240018f6 <MX_I2C1_Init+0x4e>
    Error_Handler();
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
240018e2:	2001      	movs	r0, #1
240018e4:	f004 fe42 	bl	2400656c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
240018e8:	bd08      	pop	{r3, pc}
    Error_Handler();
240018ea:	f001 fb7b 	bl	24002fe4 <Error_Handler>
240018ee:	e7ee      	b.n	240018ce <MX_I2C1_Init+0x26>
    Error_Handler();
240018f0:	f001 fb78 	bl	24002fe4 <Error_Handler>
240018f4:	e7f0      	b.n	240018d8 <MX_I2C1_Init+0x30>
    Error_Handler();
240018f6:	f001 fb75 	bl	24002fe4 <Error_Handler>
240018fa:	e7f2      	b.n	240018e2 <MX_I2C1_Init+0x3a>
240018fc:	20014b5c 	.word	0x20014b5c
24001900:	40005400 	.word	0x40005400
24001904:	0050174f 	.word	0x0050174f

24001908 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24001908:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
2400190a:	4812      	ldr	r0, [pc, #72]	; (24001954 <MX_I2C2_Init+0x4c>)
2400190c:	4b12      	ldr	r3, [pc, #72]	; (24001958 <MX_I2C2_Init+0x50>)
2400190e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
24001910:	4b12      	ldr	r3, [pc, #72]	; (2400195c <MX_I2C2_Init+0x54>)
24001912:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
24001914:	2300      	movs	r3, #0
24001916:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001918:	2201      	movs	r2, #1
2400191a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
2400191c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
2400191e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
24001920:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001922:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001924:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24001926:	f003 fe75 	bl	24005614 <HAL_I2C_Init>
2400192a:	b950      	cbnz	r0, 24001942 <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
2400192c:	2100      	movs	r1, #0
2400192e:	4809      	ldr	r0, [pc, #36]	; (24001954 <MX_I2C2_Init+0x4c>)
24001930:	f004 fdc1 	bl	240064b6 <HAL_I2CEx_ConfigAnalogFilter>
24001934:	b940      	cbnz	r0, 24001948 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001936:	2100      	movs	r1, #0
24001938:	4806      	ldr	r0, [pc, #24]	; (24001954 <MX_I2C2_Init+0x4c>)
2400193a:	f004 fdea 	bl	24006512 <HAL_I2CEx_ConfigDigitalFilter>
2400193e:	b930      	cbnz	r0, 2400194e <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24001940:	bd08      	pop	{r3, pc}
    Error_Handler();
24001942:	f001 fb4f 	bl	24002fe4 <Error_Handler>
24001946:	e7f1      	b.n	2400192c <MX_I2C2_Init+0x24>
    Error_Handler();
24001948:	f001 fb4c 	bl	24002fe4 <Error_Handler>
2400194c:	e7f3      	b.n	24001936 <MX_I2C2_Init+0x2e>
    Error_Handler();
2400194e:	f001 fb49 	bl	24002fe4 <Error_Handler>
}
24001952:	e7f5      	b.n	24001940 <MX_I2C2_Init+0x38>
24001954:	20014bb0 	.word	0x20014bb0
24001958:	40005800 	.word	0x40005800
2400195c:	00b03fdb 	.word	0x00b03fdb

24001960 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24001960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24001964:	b0bc      	sub	sp, #240	; 0xf0
24001966:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001968:	2100      	movs	r1, #0
2400196a:	9137      	str	r1, [sp, #220]	; 0xdc
2400196c:	9138      	str	r1, [sp, #224]	; 0xe0
2400196e:	9139      	str	r1, [sp, #228]	; 0xe4
24001970:	913a      	str	r1, [sp, #232]	; 0xe8
24001972:	913b      	str	r1, [sp, #236]	; 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001974:	22c0      	movs	r2, #192	; 0xc0
24001976:	a806      	add	r0, sp, #24
24001978:	f011 fe6e 	bl	24013658 <memset>
  if(i2cHandle->Instance==I2C1)
2400197c:	6823      	ldr	r3, [r4, #0]
2400197e:	4a78      	ldr	r2, [pc, #480]	; (24001b60 <HAL_I2C_MspInit+0x200>)
24001980:	4293      	cmp	r3, r2
24001982:	d006      	beq.n	24001992 <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24001984:	4a77      	ldr	r2, [pc, #476]	; (24001b64 <HAL_I2C_MspInit+0x204>)
24001986:	4293      	cmp	r3, r2
24001988:	f000 808c 	beq.w	24001aa4 <HAL_I2C_MspInit+0x144>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
2400198c:	b03c      	add	sp, #240	; 0xf0
2400198e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001992:	2208      	movs	r2, #8
24001994:	2300      	movs	r3, #0
24001996:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400199a:	a806      	add	r0, sp, #24
2400199c:	f005 fd06 	bl	240073ac <HAL_RCCEx_PeriphCLKConfig>
240019a0:	2800      	cmp	r0, #0
240019a2:	d176      	bne.n	24001a92 <HAL_I2C_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
240019a4:	4e70      	ldr	r6, [pc, #448]	; (24001b68 <HAL_I2C_MspInit+0x208>)
240019a6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
240019aa:	f043 0302 	orr.w	r3, r3, #2
240019ae:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
240019b2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
240019b6:	f003 0302 	and.w	r3, r3, #2
240019ba:	9301      	str	r3, [sp, #4]
240019bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
240019be:	f44f 7340 	mov.w	r3, #768	; 0x300
240019c2:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
240019c4:	2312      	movs	r3, #18
240019c6:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240019c8:	2500      	movs	r5, #0
240019ca:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240019cc:	2302      	movs	r3, #2
240019ce:	933a      	str	r3, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
240019d0:	2704      	movs	r7, #4
240019d2:	973b      	str	r7, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240019d4:	a937      	add	r1, sp, #220	; 0xdc
240019d6:	4865      	ldr	r0, [pc, #404]	; (24001b6c <HAL_I2C_MspInit+0x20c>)
240019d8:	f003 fb36 	bl	24005048 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
240019dc:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
240019e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240019e4:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
240019e8:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
240019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240019f0:	9302      	str	r3, [sp, #8]
240019f2:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Instance = DMA1_Stream3;
240019f4:	485e      	ldr	r0, [pc, #376]	; (24001b70 <HAL_I2C_MspInit+0x210>)
240019f6:	4b5f      	ldr	r3, [pc, #380]	; (24001b74 <HAL_I2C_MspInit+0x214>)
240019f8:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
240019fa:	2321      	movs	r3, #33	; 0x21
240019fc:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240019fe:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24001a00:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001a06:	6103      	str	r3, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24001a08:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001a0a:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
24001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
24001a10:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001a12:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24001a16:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001a18:	6247      	str	r7, [r0, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001a1a:	2301      	movs	r3, #1
24001a1c:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
24001a1e:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001a20:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001a22:	f002 fab5 	bl	24003f90 <HAL_DMA_Init>
24001a26:	2800      	cmp	r0, #0
24001a28:	d136      	bne.n	24001a98 <HAL_I2C_MspInit+0x138>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
24001a2a:	4b51      	ldr	r3, [pc, #324]	; (24001b70 <HAL_I2C_MspInit+0x210>)
24001a2c:	63e3      	str	r3, [r4, #60]	; 0x3c
24001a2e:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001a30:	4851      	ldr	r0, [pc, #324]	; (24001b78 <HAL_I2C_MspInit+0x218>)
24001a32:	4b52      	ldr	r3, [pc, #328]	; (24001b7c <HAL_I2C_MspInit+0x21c>)
24001a34:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001a36:	2322      	movs	r3, #34	; 0x22
24001a38:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001a3a:	2340      	movs	r3, #64	; 0x40
24001a3c:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001a3e:	2300      	movs	r3, #0
24001a40:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
24001a46:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24001a48:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001a4a:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
24001a50:	61c2      	str	r2, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001a52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24001a56:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001a58:	2204      	movs	r2, #4
24001a5a:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001a5c:	2201      	movs	r2, #1
24001a5e:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24001a60:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001a62:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001a64:	f002 fa94 	bl	24003f90 <HAL_DMA_Init>
24001a68:	b9c8      	cbnz	r0, 24001a9e <HAL_I2C_MspInit+0x13e>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24001a6a:	4b43      	ldr	r3, [pc, #268]	; (24001b78 <HAL_I2C_MspInit+0x218>)
24001a6c:	63a3      	str	r3, [r4, #56]	; 0x38
24001a6e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001a70:	2200      	movs	r2, #0
24001a72:	2101      	movs	r1, #1
24001a74:	201f      	movs	r0, #31
24001a76:	f001 ffd1 	bl	24003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
24001a7a:	201f      	movs	r0, #31
24001a7c:	f002 f804 	bl	24003a88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
24001a80:	2200      	movs	r2, #0
24001a82:	2101      	movs	r1, #1
24001a84:	2020      	movs	r0, #32
24001a86:	f001 ffc9 	bl	24003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
24001a8a:	2020      	movs	r0, #32
24001a8c:	f001 fffc 	bl	24003a88 <HAL_NVIC_EnableIRQ>
24001a90:	e77c      	b.n	2400198c <HAL_I2C_MspInit+0x2c>
      Error_Handler();
24001a92:	f001 faa7 	bl	24002fe4 <Error_Handler>
24001a96:	e785      	b.n	240019a4 <HAL_I2C_MspInit+0x44>
      Error_Handler();
24001a98:	f001 faa4 	bl	24002fe4 <Error_Handler>
24001a9c:	e7c5      	b.n	24001a2a <HAL_I2C_MspInit+0xca>
      Error_Handler();
24001a9e:	f001 faa1 	bl	24002fe4 <Error_Handler>
24001aa2:	e7e2      	b.n	24001a6a <HAL_I2C_MspInit+0x10a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24001aa4:	2208      	movs	r2, #8
24001aa6:	2300      	movs	r3, #0
24001aa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001aac:	a806      	add	r0, sp, #24
24001aae:	f005 fc7d 	bl	240073ac <HAL_RCCEx_PeriphCLKConfig>
24001ab2:	2800      	cmp	r0, #0
24001ab4:	d151      	bne.n	24001b5a <HAL_I2C_MspInit+0x1fa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001ab6:	4c2c      	ldr	r4, [pc, #176]	; (24001b68 <HAL_I2C_MspInit+0x208>)
24001ab8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24001ac0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001ac4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
24001acc:	9303      	str	r3, [sp, #12]
24001ace:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001ad0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001ad4:	f043 0302 	orr.w	r3, r3, #2
24001ad8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001adc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001ae0:	f003 0302 	and.w	r3, r3, #2
24001ae4:	9304      	str	r3, [sp, #16]
24001ae6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001ae8:	2310      	movs	r3, #16
24001aea:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
24001aec:	f04f 0812 	mov.w	r8, #18
24001af0:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24001af4:	2500      	movs	r5, #0
24001af6:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001af8:	2703      	movs	r7, #3
24001afa:	973a      	str	r7, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001afc:	2604      	movs	r6, #4
24001afe:	963b      	str	r6, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001b00:	a937      	add	r1, sp, #220	; 0xdc
24001b02:	481f      	ldr	r0, [pc, #124]	; (24001b80 <HAL_I2C_MspInit+0x220>)
24001b04:	f003 faa0 	bl	24005048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24001b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
24001b0c:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
24001b0e:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24001b12:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001b14:	973a      	str	r7, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001b16:	963b      	str	r6, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001b18:	a937      	add	r1, sp, #220	; 0xdc
24001b1a:	4814      	ldr	r0, [pc, #80]	; (24001b6c <HAL_I2C_MspInit+0x20c>)
24001b1c:	f003 fa94 	bl	24005048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
24001b20:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
24001b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24001b28:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
24001b2c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
24001b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24001b34:	9305      	str	r3, [sp, #20]
24001b36:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24001b38:	462a      	mov	r2, r5
24001b3a:	2101      	movs	r1, #1
24001b3c:	2021      	movs	r0, #33	; 0x21
24001b3e:	f001 ff6d 	bl	24003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
24001b42:	2021      	movs	r0, #33	; 0x21
24001b44:	f001 ffa0 	bl	24003a88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
24001b48:	462a      	mov	r2, r5
24001b4a:	2101      	movs	r1, #1
24001b4c:	2022      	movs	r0, #34	; 0x22
24001b4e:	f001 ff65 	bl	24003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
24001b52:	2022      	movs	r0, #34	; 0x22
24001b54:	f001 ff98 	bl	24003a88 <HAL_NVIC_EnableIRQ>
}
24001b58:	e718      	b.n	2400198c <HAL_I2C_MspInit+0x2c>
      Error_Handler();
24001b5a:	f001 fa43 	bl	24002fe4 <Error_Handler>
24001b5e:	e7aa      	b.n	24001ab6 <HAL_I2C_MspInit+0x156>
24001b60:	40005400 	.word	0x40005400
24001b64:	40005800 	.word	0x40005800
24001b68:	58024400 	.word	0x58024400
24001b6c:	58020400 	.word	0x58020400
24001b70:	20014a6c 	.word	0x20014a6c
24001b74:	40020058 	.word	0x40020058
24001b78:	20014ae4 	.word	0x20014ae4
24001b7c:	40020070 	.word	0x40020070
24001b80:	58021c00 	.word	0x58021c00

24001b84 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
24001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
24001b86:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24001b88:	2400      	movs	r4, #0
24001b8a:	9400      	str	r4, [sp, #0]
24001b8c:	9401      	str	r4, [sp, #4]
24001b8e:	9402      	str	r4, [sp, #8]
24001b90:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
24001b92:	f001 ff9b 	bl	24003acc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24001b96:	2501      	movs	r5, #1
24001b98:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
24001b9c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
24001ba0:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24001ba2:	231f      	movs	r3, #31
24001ba4:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
24001ba8:	2387      	movs	r3, #135	; 0x87
24001baa:	f88d 3009 	strb.w	r3, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
24001bae:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
24001bb2:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
24001bb6:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24001bba:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
24001bbe:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24001bc2:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001bc6:	4668      	mov	r0, sp
24001bc8:	f001 ff9e 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24001bcc:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x024000000;
24001bd0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
24001bd4:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24001bd6:	2711      	movs	r7, #17
24001bd8:	f88d 7008 	strb.w	r7, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
24001bdc:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
24001be0:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
24001be4:	2603      	movs	r6, #3
24001be6:	f88d 600b 	strb.w	r6, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
24001bea:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
24001bee:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
24001bf2:	f88d 500e 	strb.w	r5, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
24001bf6:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001bfa:	4668      	mov	r0, sp
24001bfc:	f001 ff84 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24001c00:	2302      	movs	r3, #2
24001c02:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24040000;
24001c06:	4b2e      	ldr	r3, [pc, #184]	; (24001cc0 <MPU_Config+0x13c>)
24001c08:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
24001c0a:	f88d 500c 	strb.w	r5, [sp, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001c0e:	4668      	mov	r0, sp
24001c10:	f001 ff7a 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24001c14:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
24001c18:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
24001c1c:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24001c1e:	230c      	movs	r3, #12
24001c20:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
24001c24:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24001c28:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
24001c2c:	f88d 400e 	strb.w	r4, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001c30:	4668      	mov	r0, sp
24001c32:	f001 ff69 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24001c36:	2604      	movs	r6, #4
24001c38:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x30002000;
24001c3c:	4b21      	ldr	r3, [pc, #132]	; (24001cc4 <MPU_Config+0x140>)
24001c3e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24001c40:	f88d 7008 	strb.w	r7, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
24001c44:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
24001c48:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001c4c:	4668      	mov	r0, sp
24001c4e:	f001 ff5b 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24001c52:	2305      	movs	r3, #5
24001c54:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
24001c58:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
24001c5c:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24001c5e:	230f      	movs	r3, #15
24001c60:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24001c64:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
24001c68:	f88d 400e 	strb.w	r4, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001c6c:	4668      	mov	r0, sp
24001c6e:	f001 ff4b 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24001c72:	2306      	movs	r3, #6
24001c74:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x38800000;
24001c78:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
24001c7c:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24001c7e:	230b      	movs	r3, #11
24001c80:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24001c84:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001c88:	4668      	mov	r0, sp
24001c8a:	f001 ff3d 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24001c8e:	2307      	movs	r3, #7
24001c90:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0xc0000000;
24001c94:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
24001c98:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24001c9a:	2319      	movs	r3, #25
24001c9c:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001ca0:	4668      	mov	r0, sp
24001ca2:	f001 ff31 	bl	24003b08 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24001ca6:	2308      	movs	r3, #8
24001ca8:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90040000;
24001cac:	4b06      	ldr	r3, [pc, #24]	; (24001cc8 <MPU_Config+0x144>)
24001cae:	9301      	str	r3, [sp, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001cb0:	4668      	mov	r0, sp
24001cb2:	f001 ff29 	bl	24003b08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
24001cb6:	4630      	mov	r0, r6
24001cb8:	f001 ff16 	bl	24003ae8 <HAL_MPU_Enable>

}
24001cbc:	b005      	add	sp, #20
24001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
24001cc0:	24040000 	.word	0x24040000
24001cc4:	30002000 	.word	0x30002000
24001cc8:	90040000 	.word	0x90040000

24001ccc <SystemClock_Config>:
{
24001ccc:	b530      	push	{r4, r5, lr}
24001cce:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24001cd0:	224c      	movs	r2, #76	; 0x4c
24001cd2:	2100      	movs	r1, #0
24001cd4:	a80b      	add	r0, sp, #44	; 0x2c
24001cd6:	f011 fcbf 	bl	24013658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24001cda:	2220      	movs	r2, #32
24001cdc:	2100      	movs	r1, #0
24001cde:	a803      	add	r0, sp, #12
24001ce0:	f011 fcba 	bl	24013658 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24001ce4:	2002      	movs	r0, #2
24001ce6:	f004 fc59 	bl	2400659c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24001cea:	2300      	movs	r3, #0
24001cec:	9300      	str	r3, [sp, #0]
24001cee:	4b36      	ldr	r3, [pc, #216]	; (24001dc8 <SystemClock_Config+0xfc>)
24001cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24001cf2:	f022 0201 	bic.w	r2, r2, #1
24001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
24001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001cfa:	f003 0301 	and.w	r3, r3, #1
24001cfe:	9300      	str	r3, [sp, #0]
24001d00:	4b32      	ldr	r3, [pc, #200]	; (24001dcc <SystemClock_Config+0x100>)
24001d02:	699a      	ldr	r2, [r3, #24]
24001d04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
24001d08:	619a      	str	r2, [r3, #24]
24001d0a:	699b      	ldr	r3, [r3, #24]
24001d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001d10:	9300      	str	r3, [sp, #0]
24001d12:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001d14:	4b2d      	ldr	r3, [pc, #180]	; (24001dcc <SystemClock_Config+0x100>)
24001d16:	699b      	ldr	r3, [r3, #24]
24001d18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
24001d1c:	d0fa      	beq.n	24001d14 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24001d1e:	4b2c      	ldr	r3, [pc, #176]	; (24001dd0 <SystemClock_Config+0x104>)
24001d20:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24001d24:	f042 0202 	orr.w	r2, r2, #2
24001d28:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24001d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001d30:	f003 0302 	and.w	r3, r3, #2
24001d34:	9301      	str	r3, [sp, #4]
24001d36:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24001d38:	2300      	movs	r3, #0
24001d3a:	9302      	str	r3, [sp, #8]
24001d3c:	4b23      	ldr	r3, [pc, #140]	; (24001dcc <SystemClock_Config+0x100>)
24001d3e:	699a      	ldr	r2, [r3, #24]
24001d40:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
24001d44:	619a      	str	r2, [r3, #24]
24001d46:	699b      	ldr	r3, [r3, #24]
24001d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001d4c:	9302      	str	r3, [sp, #8]
24001d4e:	4b1e      	ldr	r3, [pc, #120]	; (24001dc8 <SystemClock_Config+0xfc>)
24001d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24001d52:	f042 0201 	orr.w	r2, r2, #1
24001d56:	62da      	str	r2, [r3, #44]	; 0x2c
24001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001d5a:	f003 0301 	and.w	r3, r3, #1
24001d5e:	9302      	str	r3, [sp, #8]
24001d60:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001d62:	4b1a      	ldr	r3, [pc, #104]	; (24001dcc <SystemClock_Config+0x100>)
24001d64:	699b      	ldr	r3, [r3, #24]
24001d66:	f413 5f00 	tst.w	r3, #8192	; 0x2000
24001d6a:	d0fa      	beq.n	24001d62 <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24001d6c:	2321      	movs	r3, #33	; 0x21
24001d6e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
24001d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24001d74:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
24001d76:	2201      	movs	r2, #1
24001d78:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24001d7a:	2302      	movs	r3, #2
24001d7c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24001d7e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
24001d80:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
24001d82:	223c      	movs	r2, #60	; 0x3c
24001d84:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
24001d86:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
24001d88:	2306      	movs	r3, #6
24001d8a:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 8;
24001d8c:	2508      	movs	r5, #8
24001d8e:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24001d90:	230c      	movs	r3, #12
24001d92:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24001d94:	2400      	movs	r4, #0
24001d96:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24001d98:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24001d9a:	a80b      	add	r0, sp, #44	; 0x2c
24001d9c:	f004 fc28 	bl	240065f0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24001da0:	233f      	movs	r3, #63	; 0x3f
24001da2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24001da4:	2303      	movs	r3, #3
24001da6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24001da8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24001daa:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24001dac:	2340      	movs	r3, #64	; 0x40
24001dae:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24001db0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24001db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
24001db6:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24001db8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24001dba:	2104      	movs	r1, #4
24001dbc:	a803      	add	r0, sp, #12
24001dbe:	f005 f86b 	bl	24006e98 <HAL_RCC_ClockConfig>
}
24001dc2:	b01f      	add	sp, #124	; 0x7c
24001dc4:	bd30      	pop	{r4, r5, pc}
24001dc6:	bf00      	nop
24001dc8:	58000400 	.word	0x58000400
24001dcc:	58024800 	.word	0x58024800
24001dd0:	58024400 	.word	0x58024400

24001dd4 <PeriphCommonClock_Config>:
{
24001dd4:	b510      	push	{r4, lr}
24001dd6:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001dd8:	24c0      	movs	r4, #192	; 0xc0
24001dda:	4622      	mov	r2, r4
24001ddc:	2100      	movs	r1, #0
24001dde:	4668      	mov	r0, sp
24001de0:	f011 fc3a 	bl	24013658 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001de4:	4a14      	ldr	r2, [pc, #80]	; (24001e38 <PeriphCommonClock_Config+0x64>)
24001de6:	2300      	movs	r3, #0
24001de8:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24001dec:	2101      	movs	r1, #1
24001dee:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24001df0:	2325      	movs	r3, #37	; 0x25
24001df2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
24001df4:	2208      	movs	r2, #8
24001df6:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24001df8:	2302      	movs	r3, #2
24001dfa:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
24001dfc:	2003      	movs	r0, #3
24001dfe:	9006      	str	r0, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
24001e00:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
24001e02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
24001e06:	9009      	str	r0, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 1;
24001e08:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24001e0a:	210c      	movs	r1, #12
24001e0c:	910b      	str	r1, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 4;
24001e0e:	2104      	movs	r1, #4
24001e10:	910c      	str	r1, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
24001e12:	920d      	str	r2, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24001e14:	2210      	movs	r2, #16
24001e16:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24001e18:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24001e1c:	920f      	str	r2, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24001e1e:	f640 1238 	movw	r2, #2360	; 0x938
24001e22:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24001e24:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24001e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24001e2a:	9214      	str	r2, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
24001e2c:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001e2e:	4668      	mov	r0, sp
24001e30:	f005 fabc 	bl	240073ac <HAL_RCCEx_PeriphCLKConfig>
}
24001e34:	b030      	add	sp, #192	; 0xc0
24001e36:	bd10      	pop	{r4, pc}
24001e38:	01010100 	.word	0x01010100

24001e3c <BSP_SD_IsDetected>:
{
24001e3c:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
24001e3e:	2301      	movs	r3, #1
24001e40:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
24001e44:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
24001e48:	b002      	add	sp, #8
24001e4a:	4770      	bx	lr

24001e4c <checkForSDCardPreset>:
{
24001e4c:	b570      	push	{r4, r5, r6, lr}
24001e4e:	b08a      	sub	sp, #40	; 0x28
24001e50:	4604      	mov	r4, r0
	prevVoice = numberToLoad;
24001e52:	4b4c      	ldr	r3, [pc, #304]	; (24001f84 <checkForSDCardPreset+0x138>)
24001e54:	6018      	str	r0, [r3, #0]
	voice = numberToLoad;
24001e56:	4b4c      	ldr	r3, [pc, #304]	; (24001f88 <checkForSDCardPreset+0x13c>)
24001e58:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24001e5a:	2201      	movs	r2, #1
24001e5c:	4611      	mov	r1, r2
24001e5e:	484b      	ldr	r0, [pc, #300]	; (24001f8c <checkForSDCardPreset+0x140>)
24001e60:	f003 fa09 	bl	24005276 <HAL_GPIO_WritePin>
	if(BSP_SD_IsDetected())
24001e64:	f7ff ffea 	bl	24001e3c <BSP_SD_IsDetected>
24001e68:	2800      	cmp	r0, #0
24001e6a:	d171      	bne.n	24001f50 <checkForSDCardPreset+0x104>
		loadFailed = 1;
24001e6c:	4b48      	ldr	r3, [pc, #288]	; (24001f90 <checkForSDCardPreset+0x144>)
24001e6e:	2201      	movs	r2, #1
24001e70:	701a      	strb	r2, [r3, #0]
24001e72:	2400      	movs	r4, #0
	diskBusy = 0;
24001e74:	2200      	movs	r2, #0
24001e76:	4b47      	ldr	r3, [pc, #284]	; (24001f94 <checkForSDCardPreset+0x148>)
24001e78:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24001e7a:	2101      	movs	r1, #1
24001e7c:	4843      	ldr	r0, [pc, #268]	; (24001f8c <checkForSDCardPreset+0x140>)
24001e7e:	f003 f9fa 	bl	24005276 <HAL_GPIO_WritePin>
}
24001e82:	4620      	mov	r0, r4
24001e84:	b00a      	add	sp, #40	; 0x28
24001e86:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
24001e88:	4a43      	ldr	r2, [pc, #268]	; (24001f98 <checkForSDCardPreset+0x14c>)
24001e8a:	2100      	movs	r1, #0
24001e8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
24001e90:	f103 0c01 	add.w	ip, r3, #1
24001e94:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24001e98:	3302      	adds	r3, #2
24001e9a:	2b1f      	cmp	r3, #31
24001e9c:	ddf4      	ble.n	24001e88 <checkForSDCardPreset+0x3c>
		diskBusy = 1;
24001e9e:	2601      	movs	r6, #1
24001ea0:	4b3c      	ldr	r3, [pc, #240]	; (24001f94 <checkForSDCardPreset+0x148>)
24001ea2:	701e      	strb	r6, [r3, #0]
		loadFailed = 0;
24001ea4:	2500      	movs	r5, #0
24001ea6:	4b3a      	ldr	r3, [pc, #232]	; (24001f90 <checkForSDCardPreset+0x144>)
24001ea8:	701d      	strb	r5, [r3, #0]
		presetWaitingToLoad = 0;
24001eaa:	4b3c      	ldr	r3, [pc, #240]	; (24001f9c <checkForSDCardPreset+0x150>)
24001eac:	601d      	str	r5, [r3, #0]
		disk_initialize(0);
24001eae:	4628      	mov	r0, r5
24001eb0:	f009 fcc2 	bl	2400b838 <disk_initialize>
	    disk_status(0);
24001eb4:	4628      	mov	r0, r5
24001eb6:	f009 fcb3 	bl	2400b820 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24001eba:	4632      	mov	r2, r6
24001ebc:	4938      	ldr	r1, [pc, #224]	; (24001fa0 <checkForSDCardPreset+0x154>)
24001ebe:	4839      	ldr	r0, [pc, #228]	; (24001fa4 <checkForSDCardPreset+0x158>)
24001ec0:	f00b f854 	bl	2400cf6c <f_mount>
24001ec4:	2800      	cmp	r0, #0
24001ec6:	d1d1      	bne.n	24001e6c <checkForSDCardPreset+0x20>
			itoa(numberToLoad, charBuf, 10);
24001ec8:	220a      	movs	r2, #10
24001eca:	a904      	add	r1, sp, #16
24001ecc:	4620      	mov	r0, r4
24001ece:	f011 fbc1 	bl	24013654 <itoa>
			int len = ((strlen(charBuf)));
24001ed2:	a804      	add	r0, sp, #16
24001ed4:	f7fe fa00 	bl	240002d8 <strlen>
24001ed8:	4603      	mov	r3, r0
			if (len == 1)
24001eda:	42b0      	cmp	r0, r6
24001edc:	d03a      	beq.n	24001f54 <checkForSDCardPreset+0x108>
				strcat(charBuf, "*.ebp");
24001ede:	a904      	add	r1, sp, #16
24001ee0:	180c      	adds	r4, r1, r0
24001ee2:	4a31      	ldr	r2, [pc, #196]	; (24001fa8 <checkForSDCardPreset+0x15c>)
24001ee4:	6810      	ldr	r0, [r2, #0]
24001ee6:	50c8      	str	r0, [r1, r3]
24001ee8:	8893      	ldrh	r3, [r2, #4]
24001eea:	80a3      	strh	r3, [r4, #4]
				strcpy(finalString, charBuf);
24001eec:	a807      	add	r0, sp, #28
24001eee:	f011 fbe1 	bl	240136b4 <strcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24001ef2:	ab07      	add	r3, sp, #28
24001ef4:	4a2a      	ldr	r2, [pc, #168]	; (24001fa0 <checkForSDCardPreset+0x154>)
24001ef6:	492d      	ldr	r1, [pc, #180]	; (24001fac <checkForSDCardPreset+0x160>)
24001ef8:	482d      	ldr	r0, [pc, #180]	; (24001fb0 <checkForSDCardPreset+0x164>)
24001efa:	f00b fc3d 	bl	2400d778 <f_findfirst>
			if(res == FR_OK)
24001efe:	2800      	cmp	r0, #0
24001f00:	d1b4      	bne.n	24001e6c <checkForSDCardPreset+0x20>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24001f02:	2211      	movs	r2, #17
24001f04:	492b      	ldr	r1, [pc, #172]	; (24001fb4 <checkForSDCardPreset+0x168>)
24001f06:	482c      	ldr	r0, [pc, #176]	; (24001fb8 <checkForSDCardPreset+0x16c>)
24001f08:	f00b f860 	bl	2400cfcc <f_open>
24001f0c:	2800      	cmp	r0, #0
24001f0e:	d1ad      	bne.n	24001e6c <checkForSDCardPreset+0x20>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24001f10:	4c29      	ldr	r4, [pc, #164]	; (24001fb8 <checkForSDCardPreset+0x16c>)
24001f12:	4e2a      	ldr	r6, [pc, #168]	; (24001fbc <checkForSDCardPreset+0x170>)
24001f14:	ab03      	add	r3, sp, #12
24001f16:	68e2      	ldr	r2, [r4, #12]
24001f18:	4631      	mov	r1, r6
24001f1a:	4620      	mov	r0, r4
24001f1c:	f00b f96c 	bl	2400d1f8 <f_read>
					presetWaitingToParse = bytesRead;
24001f20:	9a03      	ldr	r2, [sp, #12]
24001f22:	4b27      	ldr	r3, [pc, #156]	; (24001fc0 <checkForSDCardPreset+0x174>)
24001f24:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
24001f26:	4620      	mov	r0, r4
24001f28:	f00b fb88 	bl	2400d63c <f_close>
	  	  i2cSending = 1;
24001f2c:	4d25      	ldr	r5, [pc, #148]	; (24001fc4 <checkForSDCardPreset+0x178>)
24001f2e:	2401      	movs	r4, #1
24001f30:	702c      	strb	r4, [r5, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24001f32:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24001f34:	f242 7310 	movw	r3, #10000	; 0x2710
24001f38:	9300      	str	r3, [sp, #0]
24001f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24001f3e:	4632      	mov	r2, r6
24001f40:	2144      	movs	r1, #68	; 0x44
24001f42:	4821      	ldr	r0, [pc, #132]	; (24001fc8 <checkForSDCardPreset+0x17c>)
24001f44:	f003 fbc4 	bl	240056d0 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24001f48:	b662      	cpsie	i
	  	i2cSending = 0;
24001f4a:	2300      	movs	r3, #0
24001f4c:	702b      	strb	r3, [r5, #0]
24001f4e:	e791      	b.n	24001e74 <checkForSDCardPreset+0x28>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24001f50:	2300      	movs	r3, #0
24001f52:	e7a2      	b.n	24001e9a <checkForSDCardPreset+0x4e>
				finalString[2] = charBuf[1];
24001f54:	f89d 3011 	ldrb.w	r3, [sp, #17]
24001f58:	f88d 301e 	strb.w	r3, [sp, #30]
				finalString[1] = charBuf[0];
24001f5c:	f89d 3010 	ldrb.w	r3, [sp, #16]
24001f60:	f88d 301d 	strb.w	r3, [sp, #29]
				finalString[0] = '0';
24001f64:	2330      	movs	r3, #48	; 0x30
24001f66:	f88d 301c 	strb.w	r3, [sp, #28]
				strcat(finalString, "*.ebp");
24001f6a:	ac07      	add	r4, sp, #28
24001f6c:	4620      	mov	r0, r4
24001f6e:	f7fe f9b3 	bl	240002d8 <strlen>
24001f72:	4603      	mov	r3, r0
24001f74:	1821      	adds	r1, r4, r0
24001f76:	4a0c      	ldr	r2, [pc, #48]	; (24001fa8 <checkForSDCardPreset+0x15c>)
24001f78:	6810      	ldr	r0, [r2, #0]
24001f7a:	50e0      	str	r0, [r4, r3]
24001f7c:	8893      	ldrh	r3, [r2, #4]
24001f7e:	808b      	strh	r3, [r1, #4]
24001f80:	e7b7      	b.n	24001ef2 <checkForSDCardPreset+0xa6>
24001f82:	bf00      	nop
24001f84:	20005850 	.word	0x20005850
24001f88:	200149fc 	.word	0x200149fc
24001f8c:	58020800 	.word	0x58020800
24001f90:	20018df8 	.word	0x20018df8
24001f94:	20014c44 	.word	0x20014c44
24001f98:	30000040 	.word	0x30000040
24001f9c:	2001a8b8 	.word	0x2001a8b8
24001fa0:	2001d6f0 	.word	0x2001d6f0
24001fa4:	2001d290 	.word	0x2001d290
24001fa8:	24015e84 	.word	0x24015e84
24001fac:	20016cac 	.word	0x20016cac
24001fb0:	20014c0c 	.word	0x20014c0c
24001fb4:	20016cc2 	.word	0x20016cc2
24001fb8:	2001d4c4 	.word	0x2001d4c4
24001fbc:	300001c0 	.word	0x300001c0
24001fc0:	2001a8bc 	.word	0x2001a8bc
24001fc4:	20016dc4 	.word	0x20016dc4
24001fc8:	20014b5c 	.word	0x20014b5c

24001fcc <writePresetToSDCard>:
{
24001fcc:	b530      	push	{r4, r5, lr}
24001fce:	b089      	sub	sp, #36	; 0x24
24001fd0:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
24001fd2:	b672      	cpsid	i
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
24001fd4:	2300      	movs	r3, #0
24001fd6:	e004      	b.n	24001fe2 <writePresetToSDCard+0x16>
		 audioOutBuffer[i] = 0;
24001fd8:	4935      	ldr	r1, [pc, #212]	; (240020b0 <writePresetToSDCard+0xe4>)
24001fda:	2200      	movs	r2, #0
24001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
24001fe0:	3301      	adds	r3, #1
24001fe2:	2b1f      	cmp	r3, #31
24001fe4:	ddf8      	ble.n	24001fd8 <writePresetToSDCard+0xc>
	if(BSP_SD_IsDetected())
24001fe6:	f7ff ff29 	bl	24001e3c <BSP_SD_IsDetected>
24001fea:	2800      	cmp	r0, #0
24001fec:	d147      	bne.n	2400207e <writePresetToSDCard+0xb2>
	presetWaitingToWrite = 0;
24001fee:	2300      	movs	r3, #0
24001ff0:	4a30      	ldr	r2, [pc, #192]	; (240020b4 <writePresetToSDCard+0xe8>)
24001ff2:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24001ff4:	4a30      	ldr	r2, [pc, #192]	; (240020b8 <writePresetToSDCard+0xec>)
24001ff6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24001ff8:	b662      	cpsie	i
}
24001ffa:	b009      	add	sp, #36	; 0x24
24001ffc:	bd30      	pop	{r4, r5, pc}
					audioOutBuffer[i] = 0;
24001ffe:	492c      	ldr	r1, [pc, #176]	; (240020b0 <writePresetToSDCard+0xe4>)
24002000:	2200      	movs	r2, #0
24002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					audioOutBuffer[i + 1] = 0;
24002006:	f103 0c01 	add.w	ip, r3, #1
2400200a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400200e:	3302      	adds	r3, #2
24002010:	2b1f      	cmp	r3, #31
24002012:	ddf4      	ble.n	24001ffe <writePresetToSDCard+0x32>
				diskBusy = 1;
24002014:	4b28      	ldr	r3, [pc, #160]	; (240020b8 <writePresetToSDCard+0xec>)
24002016:	2201      	movs	r2, #1
24002018:	701a      	strb	r2, [r3, #0]
			    if (presetNumberToSave > 99)
2400201a:	4b28      	ldr	r3, [pc, #160]	; (240020bc <writePresetToSDCard+0xf0>)
2400201c:	781b      	ldrb	r3, [r3, #0]
2400201e:	b2db      	uxtb	r3, r3
24002020:	2b63      	cmp	r3, #99	; 0x63
24002022:	d902      	bls.n	2400202a <writePresetToSDCard+0x5e>
			        presetNumberToSave = 99;
24002024:	4b25      	ldr	r3, [pc, #148]	; (240020bc <writePresetToSDCard+0xf0>)
24002026:	2263      	movs	r2, #99	; 0x63
24002028:	701a      	strb	r2, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
2400202a:	4b24      	ldr	r3, [pc, #144]	; (240020bc <writePresetToSDCard+0xf0>)
2400202c:	7818      	ldrb	r0, [r3, #0]
2400202e:	220a      	movs	r2, #10
24002030:	a902      	add	r1, sp, #8
24002032:	f011 fb0f 	bl	24013654 <itoa>
				int len = ((strlen(charBuf)));
24002036:	a802      	add	r0, sp, #8
24002038:	f7fe f94e 	bl	240002d8 <strlen>
2400203c:	4603      	mov	r3, r0
				if (len == 1)
2400203e:	2801      	cmp	r0, #1
24002040:	d01f      	beq.n	24002082 <writePresetToSDCard+0xb6>
					strcat(charBuf, ".ebp");
24002042:	a902      	add	r1, sp, #8
24002044:	eb01 0c00 	add.w	ip, r1, r0
24002048:	4a1d      	ldr	r2, [pc, #116]	; (240020c0 <writePresetToSDCard+0xf4>)
2400204a:	6810      	ldr	r0, [r2, #0]
2400204c:	50c8      	str	r0, [r1, r3]
2400204e:	7913      	ldrb	r3, [r2, #4]
24002050:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
24002054:	a805      	add	r0, sp, #20
24002056:	f011 fb2d 	bl	240136b4 <strcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
2400205a:	220a      	movs	r2, #10
2400205c:	a905      	add	r1, sp, #20
2400205e:	4819      	ldr	r0, [pc, #100]	; (240020c4 <writePresetToSDCard+0xf8>)
24002060:	f00a ffb4 	bl	2400cfcc <f_open>
24002064:	2800      	cmp	r0, #0
24002066:	d1c2      	bne.n	24001fee <writePresetToSDCard+0x22>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24002068:	4d16      	ldr	r5, [pc, #88]	; (240020c4 <writePresetToSDCard+0xf8>)
2400206a:	ab01      	add	r3, sp, #4
2400206c:	4622      	mov	r2, r4
2400206e:	4916      	ldr	r1, [pc, #88]	; (240020c8 <writePresetToSDCard+0xfc>)
24002070:	4628      	mov	r0, r5
24002072:	f00b f99c 	bl	2400d3ae <f_write>
					f_close(&SDFile);
24002076:	4628      	mov	r0, r5
24002078:	f00b fae0 	bl	2400d63c <f_close>
2400207c:	e7b7      	b.n	24001fee <writePresetToSDCard+0x22>
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400207e:	2300      	movs	r3, #0
24002080:	e7c6      	b.n	24002010 <writePresetToSDCard+0x44>
					finalString[2] = charBuf[1];
24002082:	f89d 3009 	ldrb.w	r3, [sp, #9]
24002086:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
2400208a:	f89d 3008 	ldrb.w	r3, [sp, #8]
2400208e:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
24002092:	2330      	movs	r3, #48	; 0x30
24002094:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
24002098:	ad05      	add	r5, sp, #20
2400209a:	4628      	mov	r0, r5
2400209c:	f7fe f91c 	bl	240002d8 <strlen>
240020a0:	4603      	mov	r3, r0
240020a2:	1829      	adds	r1, r5, r0
240020a4:	4a06      	ldr	r2, [pc, #24]	; (240020c0 <writePresetToSDCard+0xf4>)
240020a6:	6810      	ldr	r0, [r2, #0]
240020a8:	50e8      	str	r0, [r5, r3]
240020aa:	7913      	ldrb	r3, [r2, #4]
240020ac:	710b      	strb	r3, [r1, #4]
240020ae:	e7d4      	b.n	2400205a <writePresetToSDCard+0x8e>
240020b0:	30000040 	.word	0x30000040
240020b4:	2001a8c0 	.word	0x2001a8c0
240020b8:	20014c44 	.word	0x20014c44
240020bc:	2001a8b6 	.word	0x2001a8b6
240020c0:	24015e8c 	.word	0x24015e8c
240020c4:	2001d4c4 	.word	0x2001d4c4
240020c8:	300001c0 	.word	0x300001c0

240020cc <getPresetNamesFromSDCard>:
{
240020cc:	b530      	push	{r4, r5, lr}
240020ce:	b089      	sub	sp, #36	; 0x24
	if(BSP_SD_IsDetected())
240020d0:	f7ff feb4 	bl	24001e3c <BSP_SD_IsDetected>
240020d4:	bb18      	cbnz	r0, 2400211e <getPresetNamesFromSDCard+0x52>
	diskBusy = 0;
240020d6:	4b4e      	ldr	r3, [pc, #312]	; (24002210 <getPresetNamesFromSDCard+0x144>)
240020d8:	2200      	movs	r2, #0
240020da:	701a      	strb	r2, [r3, #0]
}
240020dc:	b009      	add	sp, #36	; 0x24
240020de:	bd30      	pop	{r4, r5, pc}
			audioOutBuffer[i] = 0;
240020e0:	4a4c      	ldr	r2, [pc, #304]	; (24002214 <getPresetNamesFromSDCard+0x148>)
240020e2:	2100      	movs	r1, #0
240020e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
240020e8:	1c58      	adds	r0, r3, #1
240020ea:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
240020ee:	3302      	adds	r3, #2
240020f0:	2b1f      	cmp	r3, #31
240020f2:	ddf5      	ble.n	240020e0 <getPresetNamesFromSDCard+0x14>
		diskBusy = 1;
240020f4:	2501      	movs	r5, #1
240020f6:	4b46      	ldr	r3, [pc, #280]	; (24002210 <getPresetNamesFromSDCard+0x144>)
240020f8:	701d      	strb	r5, [r3, #0]
		loadFailed = 0;
240020fa:	2400      	movs	r4, #0
240020fc:	4b46      	ldr	r3, [pc, #280]	; (24002218 <getPresetNamesFromSDCard+0x14c>)
240020fe:	701c      	strb	r4, [r3, #0]
		disk_initialize(0);
24002100:	4620      	mov	r0, r4
24002102:	f009 fb99 	bl	2400b838 <disk_initialize>
	    disk_status(0);
24002106:	4620      	mov	r0, r4
24002108:	f009 fb8a 	bl	2400b820 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400210c:	462a      	mov	r2, r5
2400210e:	4943      	ldr	r1, [pc, #268]	; (2400221c <getPresetNamesFromSDCard+0x150>)
24002110:	4843      	ldr	r0, [pc, #268]	; (24002220 <getPresetNamesFromSDCard+0x154>)
24002112:	f00a ff2b 	bl	2400cf6c <f_mount>
24002116:	2800      	cmp	r0, #0
24002118:	d1dd      	bne.n	240020d6 <getPresetNamesFromSDCard+0xa>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400211a:	2400      	movs	r4, #0
2400211c:	e01f      	b.n	2400215e <getPresetNamesFromSDCard+0x92>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400211e:	2300      	movs	r3, #0
24002120:	e7e6      	b.n	240020f0 <getPresetNamesFromSDCard+0x24>
					finalString[2] = charBuf[1];
24002122:	f89d 3009 	ldrb.w	r3, [sp, #9]
24002126:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
2400212a:	f89d 3008 	ldrb.w	r3, [sp, #8]
2400212e:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
24002132:	2330      	movs	r3, #48	; 0x30
24002134:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
24002138:	ad05      	add	r5, sp, #20
2400213a:	4628      	mov	r0, r5
2400213c:	f7fe f8cc 	bl	240002d8 <strlen>
24002140:	4603      	mov	r3, r0
24002142:	1829      	adds	r1, r5, r0
24002144:	4a37      	ldr	r2, [pc, #220]	; (24002224 <getPresetNamesFromSDCard+0x158>)
24002146:	6810      	ldr	r0, [r2, #0]
24002148:	50e8      	str	r0, [r5, r3]
2400214a:	8893      	ldrh	r3, [r2, #4]
2400214c:	808b      	strh	r3, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400214e:	ab05      	add	r3, sp, #20
24002150:	4a32      	ldr	r2, [pc, #200]	; (2400221c <getPresetNamesFromSDCard+0x150>)
24002152:	4935      	ldr	r1, [pc, #212]	; (24002228 <getPresetNamesFromSDCard+0x15c>)
24002154:	4835      	ldr	r0, [pc, #212]	; (2400222c <getPresetNamesFromSDCard+0x160>)
24002156:	f00b fb0f 	bl	2400d778 <f_findfirst>
				if(res == FR_OK)
2400215a:	b1c0      	cbz	r0, 2400218e <getPresetNamesFromSDCard+0xc2>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400215c:	3401      	adds	r4, #1
2400215e:	2c3f      	cmp	r4, #63	; 0x3f
24002160:	dcb9      	bgt.n	240020d6 <getPresetNamesFromSDCard+0xa>
				itoa(i, charBuf, 10);
24002162:	220a      	movs	r2, #10
24002164:	a902      	add	r1, sp, #8
24002166:	4620      	mov	r0, r4
24002168:	f011 fa74 	bl	24013654 <itoa>
				int len = ((strlen(charBuf)));
2400216c:	a802      	add	r0, sp, #8
2400216e:	f7fe f8b3 	bl	240002d8 <strlen>
24002172:	4603      	mov	r3, r0
				if (len == 1)
24002174:	2801      	cmp	r0, #1
24002176:	d0d4      	beq.n	24002122 <getPresetNamesFromSDCard+0x56>
					strcat(charBuf, "*.ebp");
24002178:	a902      	add	r1, sp, #8
2400217a:	180d      	adds	r5, r1, r0
2400217c:	4a29      	ldr	r2, [pc, #164]	; (24002224 <getPresetNamesFromSDCard+0x158>)
2400217e:	6810      	ldr	r0, [r2, #0]
24002180:	50c8      	str	r0, [r1, r3]
24002182:	8893      	ldrh	r3, [r2, #4]
24002184:	80ab      	strh	r3, [r5, #4]
					strcpy(finalString, charBuf);
24002186:	a805      	add	r0, sp, #20
24002188:	f011 fa94 	bl	240136b4 <strcpy>
2400218c:	e7df      	b.n	2400214e <getPresetNamesFromSDCard+0x82>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
2400218e:	2211      	movs	r2, #17
24002190:	4927      	ldr	r1, [pc, #156]	; (24002230 <getPresetNamesFromSDCard+0x164>)
24002192:	4828      	ldr	r0, [pc, #160]	; (24002234 <getPresetNamesFromSDCard+0x168>)
24002194:	f00a ff1a 	bl	2400cfcc <f_open>
24002198:	2800      	cmp	r0, #0
2400219a:	d1df      	bne.n	2400215c <getPresetNamesFromSDCard+0x90>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
2400219c:	4d25      	ldr	r5, [pc, #148]	; (24002234 <getPresetNamesFromSDCard+0x168>)
2400219e:	ab01      	add	r3, sp, #4
240021a0:	68ea      	ldr	r2, [r5, #12]
240021a2:	4925      	ldr	r1, [pc, #148]	; (24002238 <getPresetNamesFromSDCard+0x16c>)
240021a4:	4628      	mov	r0, r5
240021a6:	f00b f827 	bl	2400d1f8 <f_read>
						f_close(&SDFile);
240021aa:	4628      	mov	r0, r5
240021ac:	f00b fa46 	bl	2400d63c <f_close>
						for (int j = 0; j < 14; j++)
240021b0:	2300      	movs	r3, #0
						uint16_t bufferIndex = 0;
240021b2:	4619      	mov	r1, r3
						for (int j = 0; j < 14; j++)
240021b4:	e00c      	b.n	240021d0 <getPresetNamesFromSDCard+0x104>
							presetNamesArray[i][j] = buffer[bufferIndex];
240021b6:	4a20      	ldr	r2, [pc, #128]	; (24002238 <getPresetNamesFromSDCard+0x16c>)
240021b8:	f812 c001 	ldrb.w	ip, [r2, r1]
240021bc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
240021c0:	481e      	ldr	r0, [pc, #120]	; (2400223c <getPresetNamesFromSDCard+0x170>)
240021c2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
240021c6:	f802 c003 	strb.w	ip, [r2, r3]
							bufferIndex++;
240021ca:	3101      	adds	r1, #1
240021cc:	b289      	uxth	r1, r1
						for (int j = 0; j < 14; j++)
240021ce:	3301      	adds	r3, #1
240021d0:	2b0d      	cmp	r3, #13
240021d2:	ddf0      	ble.n	240021b6 <getPresetNamesFromSDCard+0xea>
						for (int j = 0; j < 8; j++)
240021d4:	f04f 0c00 	mov.w	ip, #0
240021d8:	e014      	b.n	24002204 <getPresetNamesFromSDCard+0x138>
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240021da:	4b17      	ldr	r3, [pc, #92]	; (24002238 <getPresetNamesFromSDCard+0x16c>)
240021dc:	f813 e001 	ldrb.w	lr, [r3, r1]
240021e0:	ebcc 03cc 	rsb	r3, ip, ip, lsl #3
240021e4:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
240021e8:	0112      	lsls	r2, r2, #4
240021ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
240021ee:	4a14      	ldr	r2, [pc, #80]	; (24002240 <getPresetNamesFromSDCard+0x174>)
240021f0:	4413      	add	r3, r2
240021f2:	f803 e000 	strb.w	lr, [r3, r0]
								bufferIndex++;
240021f6:	3101      	adds	r1, #1
240021f8:	b289      	uxth	r1, r1
							for (int k = 0; k < 14; k++)
240021fa:	3001      	adds	r0, #1
240021fc:	280d      	cmp	r0, #13
240021fe:	ddec      	ble.n	240021da <getPresetNamesFromSDCard+0x10e>
						for (int j = 0; j < 8; j++)
24002200:	f10c 0c01 	add.w	ip, ip, #1
24002204:	f1bc 0f07 	cmp.w	ip, #7
24002208:	dca8      	bgt.n	2400215c <getPresetNamesFromSDCard+0x90>
							for (int k = 0; k < 14; k++)
2400220a:	2000      	movs	r0, #0
2400220c:	e7f6      	b.n	240021fc <getPresetNamesFromSDCard+0x130>
2400220e:	bf00      	nop
24002210:	20014c44 	.word	0x20014c44
24002214:	30000040 	.word	0x30000040
24002218:	20018df8 	.word	0x20018df8
2400221c:	2001d6f0 	.word	0x2001d6f0
24002220:	2001d290 	.word	0x2001d290
24002224:	24015e84 	.word	0x24015e84
24002228:	20016cac 	.word	0x20016cac
2400222c:	20014c0c 	.word	0x20014c0c
24002230:	20016cc2 	.word	0x20016cc2
24002234:	2001d4c4 	.word	0x2001d4c4
24002238:	300001c0 	.word	0x300001c0
2400223c:	3003a000 	.word	0x3003a000
24002240:	3003a380 	.word	0x3003a380

24002244 <SDRAM_init>:
{
24002244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24002248:	b086      	sub	sp, #24
	        __IO uint32_t tmpmrd = 0;
2400224a:	2700      	movs	r7, #0
2400224c:	9701      	str	r7, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
2400224e:	2501      	movs	r5, #1
24002250:	9502      	str	r5, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
24002252:	2610      	movs	r6, #16
24002254:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
24002256:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
24002258:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400225a:	4c1d      	ldr	r4, [pc, #116]	; (240022d0 <SDRAM_init+0x8c>)
2400225c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002260:	a902      	add	r1, sp, #8
24002262:	4620      	mov	r0, r4
24002264:	f008 f88e 	bl	2400a384 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
24002268:	4628      	mov	r0, r5
2400226a:	f001 fbab 	bl	240039c4 <HAL_Delay>
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
2400226e:	f04f 0802 	mov.w	r8, #2
24002272:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
24002276:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
24002278:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
2400227a:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400227c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002280:	a902      	add	r1, sp, #8
24002282:	4620      	mov	r0, r4
24002284:	f008 f87e 	bl	2400a384 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002288:	2303      	movs	r3, #3
2400228a:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400228c:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 2;
2400228e:	f8cd 8010 	str.w	r8, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
24002292:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002298:	a902      	add	r1, sp, #8
2400229a:	4620      	mov	r0, r4
2400229c:	f008 f872 	bl	2400a384 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
240022a0:	f240 2322 	movw	r3, #546	; 0x222
240022a4:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
240022a6:	2304      	movs	r3, #4
240022a8:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
240022aa:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
240022ac:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
240022ae:	9b01      	ldr	r3, [sp, #4]
240022b0:	9305      	str	r3, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240022b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240022b6:	a902      	add	r1, sp, #8
240022b8:	4620      	mov	r0, r4
240022ba:	f008 f863 	bl	2400a384 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
240022be:	f240 21fa 	movw	r1, #762	; 0x2fa
240022c2:	4620      	mov	r0, r4
240022c4:	f008 f87f 	bl	2400a3c6 <HAL_SDRAM_ProgramRefreshRate>
}
240022c8:	b006      	add	sp, #24
240022ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240022ce:	bf00      	nop
240022d0:	20014a38 	.word	0x20014a38

240022d4 <setEffectsFunctions>:
{
240022d4:	b410      	push	{r4}
	effectsActive[i] = 1;
240022d6:	4b99      	ldr	r3, [pc, #612]	; (2400253c <setEffectsFunctions+0x268>)
240022d8:	2201      	movs	r2, #1
240022da:	545a      	strb	r2, [r3, r1]
	switch (effectType)
240022dc:	2813      	cmp	r0, #19
240022de:	d828      	bhi.n	24002332 <setEffectsFunctions+0x5e>
240022e0:	e8df f010 	tbh	[pc, r0, lsl #1]
240022e4:	002a0014 	.word	0x002a0014
240022e8:	00560040 	.word	0x00560040
240022ec:	0082006c 	.word	0x0082006c
240022f0:	00ae0098 	.word	0x00ae0098
240022f4:	00da00c4 	.word	0x00da00c4
240022f8:	010600f0 	.word	0x010600f0
240022fc:	01860119 	.word	0x01860119
24002300:	01ac0199 	.word	0x01ac0199
24002304:	01d401c0 	.word	0x01d401c0
24002308:	01fc01e8 	.word	0x01fc01e8
			  effectTick[i] = &blankTick;
2400230c:	4b8c      	ldr	r3, [pc, #560]	; (24002540 <setEffectsFunctions+0x26c>)
2400230e:	4a8d      	ldr	r2, [pc, #564]	; (24002544 <setEffectsFunctions+0x270>)
24002310:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &blankFunction;
24002314:	488c      	ldr	r0, [pc, #560]	; (24002548 <setEffectsFunctions+0x274>)
24002316:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
2400231a:	eb00 028c 	add.w	r2, r0, ip, lsl #2
2400231e:	4b8b      	ldr	r3, [pc, #556]	; (2400254c <setEffectsFunctions+0x278>)
24002320:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
24002324:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam3 = &blankFunction;
24002326:	6093      	str	r3, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
24002328:	60d3      	str	r3, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
2400232a:	6113      	str	r3, [r2, #16]
			  effectsActive[i] = 0;
2400232c:	4b83      	ldr	r3, [pc, #524]	; (2400253c <setEffectsFunctions+0x268>)
2400232e:	2200      	movs	r2, #0
24002330:	545a      	strb	r2, [r3, r1]
}
24002332:	f85d 4b04 	ldr.w	r4, [sp], #4
24002336:	4770      	bx	lr
			  effectTick[i] = &softClipTick;
24002338:	4b81      	ldr	r3, [pc, #516]	; (24002540 <setEffectsFunctions+0x26c>)
2400233a:	4a85      	ldr	r2, [pc, #532]	; (24002550 <setEffectsFunctions+0x27c>)
2400233c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002340:	4b81      	ldr	r3, [pc, #516]	; (24002548 <setEffectsFunctions+0x274>)
24002342:	eb01 0081 	add.w	r0, r1, r1, lsl #2
24002346:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400234a:	4c82      	ldr	r4, [pc, #520]	; (24002554 <setEffectsFunctions+0x280>)
2400234c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002350:	4881      	ldr	r0, [pc, #516]	; (24002558 <setEffectsFunctions+0x284>)
24002352:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Soft;
24002354:	4881      	ldr	r0, [pc, #516]	; (2400255c <setEffectsFunctions+0x288>)
24002356:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
24002358:	4881      	ldr	r0, [pc, #516]	; (24002560 <setEffectsFunctions+0x28c>)
2400235a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
2400235c:	4613      	mov	r3, r2
2400235e:	4a7b      	ldr	r2, [pc, #492]	; (2400254c <setEffectsFunctions+0x278>)
24002360:	611a      	str	r2, [r3, #16]
			  break;
24002362:	e7e6      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &hardClipTick;
24002364:	4b76      	ldr	r3, [pc, #472]	; (24002540 <setEffectsFunctions+0x26c>)
24002366:	4a7f      	ldr	r2, [pc, #508]	; (24002564 <setEffectsFunctions+0x290>)
24002368:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
2400236c:	4b76      	ldr	r3, [pc, #472]	; (24002548 <setEffectsFunctions+0x274>)
2400236e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
24002372:	eb03 0280 	add.w	r2, r3, r0, lsl #2
24002376:	4c77      	ldr	r4, [pc, #476]	; (24002554 <setEffectsFunctions+0x280>)
24002378:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
2400237c:	4876      	ldr	r0, [pc, #472]	; (24002558 <setEffectsFunctions+0x284>)
2400237e:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Hard;
24002380:	4879      	ldr	r0, [pc, #484]	; (24002568 <setEffectsFunctions+0x294>)
24002382:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
24002384:	4876      	ldr	r0, [pc, #472]	; (24002560 <setEffectsFunctions+0x28c>)
24002386:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002388:	4613      	mov	r3, r2
2400238a:	4a70      	ldr	r2, [pc, #448]	; (2400254c <setEffectsFunctions+0x278>)
2400238c:	611a      	str	r2, [r3, #16]
			  break;
2400238e:	e7d0      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &satTick;
24002390:	4b6b      	ldr	r3, [pc, #428]	; (24002540 <setEffectsFunctions+0x26c>)
24002392:	4a76      	ldr	r2, [pc, #472]	; (2400256c <setEffectsFunctions+0x298>)
24002394:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002398:	4b6b      	ldr	r3, [pc, #428]	; (24002548 <setEffectsFunctions+0x274>)
2400239a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
2400239e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
240023a2:	4c6c      	ldr	r4, [pc, #432]	; (24002554 <setEffectsFunctions+0x280>)
240023a4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240023a8:	486b      	ldr	r0, [pc, #428]	; (24002558 <setEffectsFunctions+0x284>)
240023aa:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Linear;
240023ac:	4870      	ldr	r0, [pc, #448]	; (24002570 <setEffectsFunctions+0x29c>)
240023ae:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
240023b0:	486b      	ldr	r0, [pc, #428]	; (24002560 <setEffectsFunctions+0x28c>)
240023b2:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240023b4:	4613      	mov	r3, r2
240023b6:	4a65      	ldr	r2, [pc, #404]	; (2400254c <setEffectsFunctions+0x278>)
240023b8:	611a      	str	r2, [r3, #16]
			  break;
240023ba:	e7ba      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &tanhTick;
240023bc:	4b60      	ldr	r3, [pc, #384]	; (24002540 <setEffectsFunctions+0x26c>)
240023be:	4a6d      	ldr	r2, [pc, #436]	; (24002574 <setEffectsFunctions+0x2a0>)
240023c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240023c4:	4b60      	ldr	r3, [pc, #384]	; (24002548 <setEffectsFunctions+0x274>)
240023c6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
240023ca:	eb03 0280 	add.w	r2, r3, r0, lsl #2
240023ce:	4c61      	ldr	r4, [pc, #388]	; (24002554 <setEffectsFunctions+0x280>)
240023d0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240023d4:	4860      	ldr	r0, [pc, #384]	; (24002558 <setEffectsFunctions+0x284>)
240023d6:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Linear;
240023d8:	4865      	ldr	r0, [pc, #404]	; (24002570 <setEffectsFunctions+0x29c>)
240023da:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
240023dc:	4860      	ldr	r0, [pc, #384]	; (24002560 <setEffectsFunctions+0x28c>)
240023de:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240023e0:	4613      	mov	r3, r2
240023e2:	4a5a      	ldr	r2, [pc, #360]	; (2400254c <setEffectsFunctions+0x278>)
240023e4:	611a      	str	r2, [r3, #16]
			  break;
240023e6:	e7a4      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &shaperTick;
240023e8:	4b55      	ldr	r3, [pc, #340]	; (24002540 <setEffectsFunctions+0x26c>)
240023ea:	4a63      	ldr	r2, [pc, #396]	; (24002578 <setEffectsFunctions+0x2a4>)
240023ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
240023f0:	4b55      	ldr	r3, [pc, #340]	; (24002548 <setEffectsFunctions+0x274>)
240023f2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
240023f6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
240023fa:	4c56      	ldr	r4, [pc, #344]	; (24002554 <setEffectsFunctions+0x280>)
240023fc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002400:	4855      	ldr	r0, [pc, #340]	; (24002558 <setEffectsFunctions+0x284>)
24002402:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Linear;
24002404:	485a      	ldr	r0, [pc, #360]	; (24002570 <setEffectsFunctions+0x29c>)
24002406:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
24002408:	4855      	ldr	r0, [pc, #340]	; (24002560 <setEffectsFunctions+0x28c>)
2400240a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
2400240c:	4613      	mov	r3, r2
2400240e:	4a4f      	ldr	r2, [pc, #316]	; (2400254c <setEffectsFunctions+0x278>)
24002410:	611a      	str	r2, [r3, #16]
			  break;
24002412:	e78e      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &compressorTick;
24002414:	4b4a      	ldr	r3, [pc, #296]	; (24002540 <setEffectsFunctions+0x26c>)
24002416:	4a59      	ldr	r2, [pc, #356]	; (2400257c <setEffectsFunctions+0x2a8>)
24002418:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
2400241c:	4b4a      	ldr	r3, [pc, #296]	; (24002548 <setEffectsFunctions+0x274>)
2400241e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
24002422:	eb03 0280 	add.w	r2, r3, r0, lsl #2
24002426:	4c56      	ldr	r4, [pc, #344]	; (24002580 <setEffectsFunctions+0x2ac>)
24002428:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &compressorParam2;
2400242c:	4855      	ldr	r0, [pc, #340]	; (24002584 <setEffectsFunctions+0x2b0>)
2400242e:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &compressorParam3;
24002430:	4855      	ldr	r0, [pc, #340]	; (24002588 <setEffectsFunctions+0x2b4>)
24002432:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &compressorParam4;
24002434:	4855      	ldr	r0, [pc, #340]	; (2400258c <setEffectsFunctions+0x2b8>)
24002436:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &compressorParam5;
24002438:	4613      	mov	r3, r2
2400243a:	4a55      	ldr	r2, [pc, #340]	; (24002590 <setEffectsFunctions+0x2bc>)
2400243c:	611a      	str	r2, [r3, #16]
			  break;
2400243e:	e778      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &chorusTick;
24002440:	4b3f      	ldr	r3, [pc, #252]	; (24002540 <setEffectsFunctions+0x26c>)
24002442:	4a54      	ldr	r2, [pc, #336]	; (24002594 <setEffectsFunctions+0x2c0>)
24002444:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
24002448:	4b3f      	ldr	r3, [pc, #252]	; (24002548 <setEffectsFunctions+0x274>)
2400244a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
2400244e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
24002452:	4c51      	ldr	r4, [pc, #324]	; (24002598 <setEffectsFunctions+0x2c4>)
24002454:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &chorusParam2;
24002458:	4850      	ldr	r0, [pc, #320]	; (2400259c <setEffectsFunctions+0x2c8>)
2400245a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &chorusParam3;
2400245c:	4850      	ldr	r0, [pc, #320]	; (240025a0 <setEffectsFunctions+0x2cc>)
2400245e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &chorusParam4;
24002460:	4850      	ldr	r0, [pc, #320]	; (240025a4 <setEffectsFunctions+0x2d0>)
24002462:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002464:	4613      	mov	r3, r2
24002466:	4a39      	ldr	r2, [pc, #228]	; (2400254c <setEffectsFunctions+0x278>)
24002468:	611a      	str	r2, [r3, #16]
			  break;
2400246a:	e762      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &bcTick;
2400246c:	4b34      	ldr	r3, [pc, #208]	; (24002540 <setEffectsFunctions+0x26c>)
2400246e:	4a4e      	ldr	r2, [pc, #312]	; (240025a8 <setEffectsFunctions+0x2d4>)
24002470:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002474:	4b34      	ldr	r3, [pc, #208]	; (24002548 <setEffectsFunctions+0x274>)
24002476:	eb01 0081 	add.w	r0, r1, r1, lsl #2
2400247a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400247e:	4c35      	ldr	r4, [pc, #212]	; (24002554 <setEffectsFunctions+0x280>)
24002480:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &param2Linear;
24002484:	4849      	ldr	r0, [pc, #292]	; (240025ac <setEffectsFunctions+0x2d8>)
24002486:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3BC;
24002488:	4849      	ldr	r0, [pc, #292]	; (240025b0 <setEffectsFunctions+0x2dc>)
2400248a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
2400248c:	4834      	ldr	r0, [pc, #208]	; (24002560 <setEffectsFunctions+0x28c>)
2400248e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
24002490:	4613      	mov	r3, r2
24002492:	4a48      	ldr	r2, [pc, #288]	; (240025b4 <setEffectsFunctions+0x2e0>)
24002494:	611a      	str	r2, [r3, #16]
			  break;
24002496:	e74c      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &tiltFilterTick;
24002498:	4b29      	ldr	r3, [pc, #164]	; (24002540 <setEffectsFunctions+0x26c>)
2400249a:	4a47      	ldr	r2, [pc, #284]	; (240025b8 <setEffectsFunctions+0x2e4>)
2400249c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
240024a0:	4b29      	ldr	r3, [pc, #164]	; (24002548 <setEffectsFunctions+0x274>)
240024a2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
240024a6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
240024aa:	4c44      	ldr	r4, [pc, #272]	; (240025bc <setEffectsFunctions+0x2e8>)
240024ac:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &tiltParam2;
240024b0:	4843      	ldr	r0, [pc, #268]	; (240025c0 <setEffectsFunctions+0x2ec>)
240024b2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &tiltParam3;
240024b4:	4843      	ldr	r0, [pc, #268]	; (240025c4 <setEffectsFunctions+0x2f0>)
240024b6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &tiltParam4;
240024b8:	4843      	ldr	r0, [pc, #268]	; (240025c8 <setEffectsFunctions+0x2f4>)
240024ba:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
240024bc:	4613      	mov	r3, r2
240024be:	4a3d      	ldr	r2, [pc, #244]	; (240025b4 <setEffectsFunctions+0x2e0>)
240024c0:	611a      	str	r2, [r3, #16]
			  break;
240024c2:	e736      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &wavefolderTick;
240024c4:	4b1e      	ldr	r3, [pc, #120]	; (24002540 <setEffectsFunctions+0x26c>)
240024c6:	4a41      	ldr	r2, [pc, #260]	; (240025cc <setEffectsFunctions+0x2f8>)
240024c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
240024cc:	4b1e      	ldr	r3, [pc, #120]	; (24002548 <setEffectsFunctions+0x274>)
240024ce:	eb01 0081 	add.w	r0, r1, r1, lsl #2
240024d2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
240024d6:	4c3e      	ldr	r4, [pc, #248]	; (240025d0 <setEffectsFunctions+0x2fc>)
240024d8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240024dc:	481e      	ldr	r0, [pc, #120]	; (24002558 <setEffectsFunctions+0x284>)
240024de:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &wavefolderParam3;
240024e0:	483c      	ldr	r0, [pc, #240]	; (240025d4 <setEffectsFunctions+0x300>)
240024e2:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
240024e4:	481e      	ldr	r0, [pc, #120]	; (24002560 <setEffectsFunctions+0x28c>)
240024e6:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
240024e8:	4613      	mov	r3, r2
240024ea:	4a32      	ldr	r2, [pc, #200]	; (240025b4 <setEffectsFunctions+0x2e0>)
240024ec:	611a      	str	r2, [r3, #16]
			  break;
240024ee:	e720      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &FXlowpassTick;
240024f0:	4b13      	ldr	r3, [pc, #76]	; (24002540 <setEffectsFunctions+0x26c>)
240024f2:	4a39      	ldr	r2, [pc, #228]	; (240025d8 <setEffectsFunctions+0x304>)
240024f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
240024f8:	4b13      	ldr	r3, [pc, #76]	; (24002548 <setEffectsFunctions+0x274>)
240024fa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
240024fe:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24002502:	4c36      	ldr	r4, [pc, #216]	; (240025dc <setEffectsFunctions+0x308>)
24002504:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
24002508:	4a10      	ldr	r2, [pc, #64]	; (2400254c <setEffectsFunctions+0x278>)
2400250a:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
2400250c:	4c34      	ldr	r4, [pc, #208]	; (240025e0 <setEffectsFunctions+0x30c>)
2400250e:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
24002510:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002512:	6102      	str	r2, [r0, #16]
			  break;
24002514:	e70d      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &FXhighpassTick;
24002516:	4b0a      	ldr	r3, [pc, #40]	; (24002540 <setEffectsFunctions+0x26c>)
24002518:	4a32      	ldr	r2, [pc, #200]	; (240025e4 <setEffectsFunctions+0x310>)
2400251a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
2400251e:	4b0a      	ldr	r3, [pc, #40]	; (24002548 <setEffectsFunctions+0x274>)
24002520:	eb01 0281 	add.w	r2, r1, r1, lsl #2
24002524:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24002528:	4c2f      	ldr	r4, [pc, #188]	; (240025e8 <setEffectsFunctions+0x314>)
2400252a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
2400252e:	4a07      	ldr	r2, [pc, #28]	; (2400254c <setEffectsFunctions+0x278>)
24002530:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002532:	4c2e      	ldr	r4, [pc, #184]	; (240025ec <setEffectsFunctions+0x318>)
24002534:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
24002536:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002538:	6102      	str	r2, [r0, #16]
			  break;
2400253a:	e6fa      	b.n	24002332 <setEffectsFunctions+0x5e>
2400253c:	20014c98 	.word	0x20014c98
24002540:	20005150 	.word	0x20005150
24002544:	00002921 	.word	0x00002921
24002548:	20014c48 	.word	0x20014c48
2400254c:	00004e41 	.word	0x00004e41
24002550:	000029e1 	.word	0x000029e1
24002554:	00002001 	.word	0x00002001
24002558:	00002301 	.word	0x00002301
2400255c:	00002361 	.word	0x00002361
24002560:	00002441 	.word	0x00002441
24002564:	00002aa1 	.word	0x00002aa1
24002568:	000023c1 	.word	0x000023c1
2400256c:	00002b41 	.word	0x00002b41
24002570:	00002341 	.word	0x00002341
24002574:	00002981 	.word	0x00002981
24002578:	000028c1 	.word	0x000028c1
2400257c:	00002c01 	.word	0x00002c01
24002580:	00002201 	.word	0x00002201
24002584:	00002221 	.word	0x00002221
24002588:	00002261 	.word	0x00002261
2400258c:	00002281 	.word	0x00002281
24002590:	000022c1 	.word	0x000022c1
24002594:	000027e1 	.word	0x000027e1
24002598:	00002701 	.word	0x00002701
2400259c:	00002741 	.word	0x00002741
240025a0:	00002761 	.word	0x00002761
240025a4:	000027a1 	.word	0x000027a1
240025a8:	00002bc1 	.word	0x00002bc1
240025ac:	00002321 	.word	0x00002321
240025b0:	000024a1 	.word	0x000024a1
240025b4:	00002461 	.word	0x00002461
240025b8:	00002941 	.word	0x00002941
240025bc:	000020c1 	.word	0x000020c1
240025c0:	00002121 	.word	0x00002121
240025c4:	00002181 	.word	0x00002181
240025c8:	000021c1 	.word	0x000021c1
240025cc:	00002581 	.word	0x00002581
240025d0:	00002041 	.word	0x00002041
240025d4:	00002081 	.word	0x00002081
240025d8:	00002c21 	.word	0x00002c21
240025dc:	00002d41 	.word	0x00002d41
240025e0:	000031a1 	.word	0x000031a1
240025e4:	00002c41 	.word	0x00002c41
240025e8:	00002da1 	.word	0x00002da1
240025ec:	000031c1 	.word	0x000031c1
			  effectTick[i] = &FXbandpassTick;
240025f0:	4b44      	ldr	r3, [pc, #272]	; (24002704 <setEffectsFunctions+0x430>)
240025f2:	4a45      	ldr	r2, [pc, #276]	; (24002708 <setEffectsFunctions+0x434>)
240025f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
240025f8:	4b44      	ldr	r3, [pc, #272]	; (2400270c <setEffectsFunctions+0x438>)
240025fa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
240025fe:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24002602:	4c43      	ldr	r4, [pc, #268]	; (24002710 <setEffectsFunctions+0x43c>)
24002604:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
24002608:	4a42      	ldr	r2, [pc, #264]	; (24002714 <setEffectsFunctions+0x440>)
2400260a:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
2400260c:	4c42      	ldr	r4, [pc, #264]	; (24002718 <setEffectsFunctions+0x444>)
2400260e:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
24002610:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002612:	6102      	str	r2, [r0, #16]
			  break;
24002614:	e68d      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &FXdiodeLowpassTick;
24002616:	4b3b      	ldr	r3, [pc, #236]	; (24002704 <setEffectsFunctions+0x430>)
24002618:	4a40      	ldr	r2, [pc, #256]	; (2400271c <setEffectsFunctions+0x448>)
2400261a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
2400261e:	4b3b      	ldr	r3, [pc, #236]	; (2400270c <setEffectsFunctions+0x438>)
24002620:	eb01 0281 	add.w	r2, r1, r1, lsl #2
24002624:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24002628:	4c3d      	ldr	r4, [pc, #244]	; (24002720 <setEffectsFunctions+0x44c>)
2400262a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
2400262e:	4a39      	ldr	r2, [pc, #228]	; (24002714 <setEffectsFunctions+0x440>)
24002630:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24002632:	4c3c      	ldr	r4, [pc, #240]	; (24002724 <setEffectsFunctions+0x450>)
24002634:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
24002636:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002638:	6102      	str	r2, [r0, #16]
			  break;
2400263a:	e67a      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &FXVZpeakTick;
2400263c:	4b31      	ldr	r3, [pc, #196]	; (24002704 <setEffectsFunctions+0x430>)
2400263e:	4a3a      	ldr	r2, [pc, #232]	; (24002728 <setEffectsFunctions+0x454>)
24002640:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002644:	4b31      	ldr	r3, [pc, #196]	; (2400270c <setEffectsFunctions+0x438>)
24002646:	eb01 0081 	add.w	r0, r1, r1, lsl #2
2400264a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400264e:	4c37      	ldr	r4, [pc, #220]	; (2400272c <setEffectsFunctions+0x458>)
24002650:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
24002654:	4836      	ldr	r0, [pc, #216]	; (24002730 <setEffectsFunctions+0x45c>)
24002656:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002658:	4836      	ldr	r0, [pc, #216]	; (24002734 <setEffectsFunctions+0x460>)
2400265a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
2400265c:	482d      	ldr	r0, [pc, #180]	; (24002714 <setEffectsFunctions+0x440>)
2400265e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002660:	6110      	str	r0, [r2, #16]
			  break;
24002662:	e666      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &FXVZlowshelfTick;
24002664:	4b27      	ldr	r3, [pc, #156]	; (24002704 <setEffectsFunctions+0x430>)
24002666:	4a34      	ldr	r2, [pc, #208]	; (24002738 <setEffectsFunctions+0x464>)
24002668:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
2400266c:	4b27      	ldr	r3, [pc, #156]	; (2400270c <setEffectsFunctions+0x438>)
2400266e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
24002672:	eb03 0280 	add.w	r2, r3, r0, lsl #2
24002676:	4c31      	ldr	r4, [pc, #196]	; (2400273c <setEffectsFunctions+0x468>)
24002678:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
2400267c:	4830      	ldr	r0, [pc, #192]	; (24002740 <setEffectsFunctions+0x46c>)
2400267e:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002680:	4830      	ldr	r0, [pc, #192]	; (24002744 <setEffectsFunctions+0x470>)
24002682:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
24002684:	4823      	ldr	r0, [pc, #140]	; (24002714 <setEffectsFunctions+0x440>)
24002686:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002688:	6110      	str	r0, [r2, #16]
			  break;
2400268a:	e652      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = FXVZhighshelfTick;
2400268c:	4b1d      	ldr	r3, [pc, #116]	; (24002704 <setEffectsFunctions+0x430>)
2400268e:	4a2e      	ldr	r2, [pc, #184]	; (24002748 <setEffectsFunctions+0x474>)
24002690:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002694:	4b1d      	ldr	r3, [pc, #116]	; (2400270c <setEffectsFunctions+0x438>)
24002696:	eb01 0081 	add.w	r0, r1, r1, lsl #2
2400269a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400269e:	4c2b      	ldr	r4, [pc, #172]	; (2400274c <setEffectsFunctions+0x478>)
240026a0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
240026a4:	482a      	ldr	r0, [pc, #168]	; (24002750 <setEffectsFunctions+0x47c>)
240026a6:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
240026a8:	482a      	ldr	r0, [pc, #168]	; (24002754 <setEffectsFunctions+0x480>)
240026aa:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
240026ac:	4819      	ldr	r0, [pc, #100]	; (24002714 <setEffectsFunctions+0x440>)
240026ae:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
240026b0:	6110      	str	r0, [r2, #16]
			  break;
240026b2:	e63e      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = FXVZbandrejectTick;
240026b4:	4b13      	ldr	r3, [pc, #76]	; (24002704 <setEffectsFunctions+0x430>)
240026b6:	4a28      	ldr	r2, [pc, #160]	; (24002758 <setEffectsFunctions+0x484>)
240026b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
240026bc:	4b13      	ldr	r3, [pc, #76]	; (2400270c <setEffectsFunctions+0x438>)
240026be:	eb01 0081 	add.w	r0, r1, r1, lsl #2
240026c2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
240026c6:	4c25      	ldr	r4, [pc, #148]	; (2400275c <setEffectsFunctions+0x488>)
240026c8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
240026cc:	4824      	ldr	r0, [pc, #144]	; (24002760 <setEffectsFunctions+0x48c>)
240026ce:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
240026d0:	4824      	ldr	r0, [pc, #144]	; (24002764 <setEffectsFunctions+0x490>)
240026d2:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
240026d4:	480f      	ldr	r0, [pc, #60]	; (24002714 <setEffectsFunctions+0x440>)
240026d6:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
240026d8:	6110      	str	r0, [r2, #16]
			  break;
240026da:	e62a      	b.n	24002332 <setEffectsFunctions+0x5e>
			  effectTick[i] = &FXLadderLowpassTick;
240026dc:	4b09      	ldr	r3, [pc, #36]	; (24002704 <setEffectsFunctions+0x430>)
240026de:	4a22      	ldr	r2, [pc, #136]	; (24002768 <setEffectsFunctions+0x494>)
240026e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
240026e4:	4b09      	ldr	r3, [pc, #36]	; (2400270c <setEffectsFunctions+0x438>)
240026e6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
240026ea:	eb03 0082 	add.w	r0, r3, r2, lsl #2
240026ee:	4c1f      	ldr	r4, [pc, #124]	; (2400276c <setEffectsFunctions+0x498>)
240026f0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;;
240026f4:	4a07      	ldr	r2, [pc, #28]	; (24002714 <setEffectsFunctions+0x440>)
240026f6:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
240026f8:	4c1d      	ldr	r4, [pc, #116]	; (24002770 <setEffectsFunctions+0x49c>)
240026fa:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
240026fc:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
240026fe:	6102      	str	r2, [r0, #16]
}
24002700:	e617      	b.n	24002332 <setEffectsFunctions+0x5e>
24002702:	bf00      	nop
24002704:	20005150 	.word	0x20005150
24002708:	00002c61 	.word	0x00002c61
2400270c:	20014c48 	.word	0x20014c48
24002710:	00002e01 	.word	0x00002e01
24002714:	00004e41 	.word	0x00004e41
24002718:	000031e1 	.word	0x000031e1
2400271c:	00002c81 	.word	0x00002c81
24002720:	00002e61 	.word	0x00002e61
24002724:	00003201 	.word	0x00003201
24002728:	00002ca1 	.word	0x00002ca1
2400272c:	00002ec1 	.word	0x00002ec1
24002730:	000030a1 	.word	0x000030a1
24002734:	00003221 	.word	0x00003221
24002738:	00002cc1 	.word	0x00002cc1
2400273c:	00002f21 	.word	0x00002f21
24002740:	000030e1 	.word	0x000030e1
24002744:	00003241 	.word	0x00003241
24002748:	00002ce1 	.word	0x00002ce1
2400274c:	00002f81 	.word	0x00002f81
24002750:	00003121 	.word	0x00003121
24002754:	00003261 	.word	0x00003261
24002758:	00002d01 	.word	0x00002d01
2400275c:	00002fe1 	.word	0x00002fe1
24002760:	00003161 	.word	0x00003161
24002764:	00003281 	.word	0x00003281
24002768:	00002d21 	.word	0x00002d21
2400276c:	00003041 	.word	0x00003041
24002770:	000032a1 	.word	0x000032a1

24002774 <setOscilllatorShapes>:
	switch (oscshape)
24002774:	2806      	cmp	r0, #6
24002776:	d827      	bhi.n	240027c8 <setOscilllatorShapes+0x54>
24002778:	e8df f000 	tbb	[pc, r0]
2400277c:	130e0904 	.word	0x130e0904
24002780:	1d18      	.short	0x1d18
24002782:	22          	.byte	0x22
24002783:	00          	.byte	0x00
			  shapeTick[i] = &sawSquareTick;
24002784:	4b11      	ldr	r3, [pc, #68]	; (240027cc <setOscilllatorShapes+0x58>)
24002786:	4a12      	ldr	r2, [pc, #72]	; (240027d0 <setOscilllatorShapes+0x5c>)
24002788:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
2400278c:	4770      	bx	lr
			  shapeTick[i] = &sineTriTick;
2400278e:	4b0f      	ldr	r3, [pc, #60]	; (240027cc <setOscilllatorShapes+0x58>)
24002790:	4a10      	ldr	r2, [pc, #64]	; (240027d4 <setOscilllatorShapes+0x60>)
24002792:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
24002796:	4770      	bx	lr
			  shapeTick[i] = &sawTick;
24002798:	4b0c      	ldr	r3, [pc, #48]	; (240027cc <setOscilllatorShapes+0x58>)
2400279a:	4a0f      	ldr	r2, [pc, #60]	; (240027d8 <setOscilllatorShapes+0x64>)
2400279c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
240027a0:	4770      	bx	lr
			  shapeTick[i] = &pulseTick;
240027a2:	4b0a      	ldr	r3, [pc, #40]	; (240027cc <setOscilllatorShapes+0x58>)
240027a4:	4a0d      	ldr	r2, [pc, #52]	; (240027dc <setOscilllatorShapes+0x68>)
240027a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
240027aa:	4770      	bx	lr
			  shapeTick[i] = &sineTick;
240027ac:	4b07      	ldr	r3, [pc, #28]	; (240027cc <setOscilllatorShapes+0x58>)
240027ae:	4a0c      	ldr	r2, [pc, #48]	; (240027e0 <setOscilllatorShapes+0x6c>)
240027b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
240027b4:	4770      	bx	lr
			  shapeTick[i] = &triTick;
240027b6:	4b05      	ldr	r3, [pc, #20]	; (240027cc <setOscilllatorShapes+0x58>)
240027b8:	4a0a      	ldr	r2, [pc, #40]	; (240027e4 <setOscilllatorShapes+0x70>)
240027ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
240027be:	4770      	bx	lr
			  shapeTick[i] = &userTick;
240027c0:	4b02      	ldr	r3, [pc, #8]	; (240027cc <setOscilllatorShapes+0x58>)
240027c2:	4a09      	ldr	r2, [pc, #36]	; (240027e8 <setOscilllatorShapes+0x74>)
240027c4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
240027c8:	4770      	bx	lr
240027ca:	bf00      	nop
240027cc:	20005ce0 	.word	0x20005ce0
240027d0:	00000921 	.word	0x00000921
240027d4:	00000961 	.word	0x00000961
240027d8:	000009e1 	.word	0x000009e1
240027dc:	00000a21 	.word	0x00000a21
240027e0:	00000a81 	.word	0x00000a81
240027e4:	00000ac1 	.word	0x00000ac1
240027e8:	00000b21 	.word	0x00000b21

240027ec <setFilterTypes>:
	switch (filterType)
240027ec:	2808      	cmp	r0, #8
240027ee:	d87a      	bhi.n	240028e6 <setFilterTypes+0xfa>
240027f0:	e8df f000 	tbb	[pc, r0]
240027f4:	2c1f1205 	.word	0x2c1f1205
240027f8:	60534639 	.word	0x60534639
240027fc:	6d          	.byte	0x6d
240027fd:	00          	.byte	0x00
				  filterTick[i] = &lowpassTick;
240027fe:	4b3a      	ldr	r3, [pc, #232]	; (240028e8 <setFilterTypes+0xfc>)
24002800:	4a3a      	ldr	r2, [pc, #232]	; (240028ec <setFilterTypes+0x100>)
24002802:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &lowpassSetQ;
24002806:	4b3a      	ldr	r3, [pc, #232]	; (240028f0 <setFilterTypes+0x104>)
24002808:	4a3a      	ldr	r2, [pc, #232]	; (240028f4 <setFilterTypes+0x108>)
2400280a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
2400280e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
24002812:	4b39      	ldr	r3, [pc, #228]	; (240028f8 <setFilterTypes+0x10c>)
24002814:	604b      	str	r3, [r1, #4]
				  break;
24002816:	4770      	bx	lr
				  filterTick[i] = &highpassTick;
24002818:	4b33      	ldr	r3, [pc, #204]	; (240028e8 <setFilterTypes+0xfc>)
2400281a:	4a38      	ldr	r2, [pc, #224]	; (240028fc <setFilterTypes+0x110>)
2400281c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &highpassSetQ;
24002820:	4b33      	ldr	r3, [pc, #204]	; (240028f0 <setFilterTypes+0x104>)
24002822:	4a37      	ldr	r2, [pc, #220]	; (24002900 <setFilterTypes+0x114>)
24002824:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24002828:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
2400282c:	4b35      	ldr	r3, [pc, #212]	; (24002904 <setFilterTypes+0x118>)
2400282e:	604b      	str	r3, [r1, #4]
				  break;
24002830:	4770      	bx	lr
				  filterTick[i] = &bandpassTick;
24002832:	4b2d      	ldr	r3, [pc, #180]	; (240028e8 <setFilterTypes+0xfc>)
24002834:	4a34      	ldr	r2, [pc, #208]	; (24002908 <setFilterTypes+0x11c>)
24002836:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &bandpassSetQ;
2400283a:	4b2d      	ldr	r3, [pc, #180]	; (240028f0 <setFilterTypes+0x104>)
2400283c:	4a33      	ldr	r2, [pc, #204]	; (2400290c <setFilterTypes+0x120>)
2400283e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
24002842:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
24002846:	4b32      	ldr	r3, [pc, #200]	; (24002910 <setFilterTypes+0x124>)
24002848:	604b      	str	r3, [r1, #4]
				  break;
2400284a:	4770      	bx	lr
				  filterTick[i] = &diodeLowpassTick;
2400284c:	4b26      	ldr	r3, [pc, #152]	; (240028e8 <setFilterTypes+0xfc>)
2400284e:	4a31      	ldr	r2, [pc, #196]	; (24002914 <setFilterTypes+0x128>)
24002850:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002854:	4b26      	ldr	r3, [pc, #152]	; (240028f0 <setFilterTypes+0x104>)
24002856:	4a30      	ldr	r2, [pc, #192]	; (24002918 <setFilterTypes+0x12c>)
24002858:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
2400285c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
24002860:	4b2e      	ldr	r3, [pc, #184]	; (2400291c <setFilterTypes+0x130>)
24002862:	604b      	str	r3, [r1, #4]
				  break;
24002864:	4770      	bx	lr
				  filterTick[i] = &VZpeakTick;
24002866:	4b20      	ldr	r3, [pc, #128]	; (240028e8 <setFilterTypes+0xfc>)
24002868:	4a2d      	ldr	r2, [pc, #180]	; (24002920 <setFilterTypes+0x134>)
2400286a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZpeakSetQ;
2400286e:	4b20      	ldr	r3, [pc, #128]	; (240028f0 <setFilterTypes+0x104>)
24002870:	4a2c      	ldr	r2, [pc, #176]	; (24002924 <setFilterTypes+0x138>)
24002872:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002876:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
2400287a:	4b2b      	ldr	r3, [pc, #172]	; (24002928 <setFilterTypes+0x13c>)
2400287c:	604b      	str	r3, [r1, #4]
				  break;
2400287e:	4770      	bx	lr
				  filterTick[i] = &VZlowshelfTick;
24002880:	4b19      	ldr	r3, [pc, #100]	; (240028e8 <setFilterTypes+0xfc>)
24002882:	4a2a      	ldr	r2, [pc, #168]	; (2400292c <setFilterTypes+0x140>)
24002884:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002888:	4b19      	ldr	r3, [pc, #100]	; (240028f0 <setFilterTypes+0x104>)
2400288a:	4a29      	ldr	r2, [pc, #164]	; (24002930 <setFilterTypes+0x144>)
2400288c:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002890:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
24002894:	4b27      	ldr	r3, [pc, #156]	; (24002934 <setFilterTypes+0x148>)
24002896:	604b      	str	r3, [r1, #4]
				  break;
24002898:	4770      	bx	lr
				  filterTick[i] = &VZhighshelfTick;
2400289a:	4b13      	ldr	r3, [pc, #76]	; (240028e8 <setFilterTypes+0xfc>)
2400289c:	4a26      	ldr	r2, [pc, #152]	; (24002938 <setFilterTypes+0x14c>)
2400289e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
240028a2:	4b13      	ldr	r3, [pc, #76]	; (240028f0 <setFilterTypes+0x104>)
240028a4:	4a25      	ldr	r2, [pc, #148]	; (2400293c <setFilterTypes+0x150>)
240028a6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
240028aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
240028ae:	4b24      	ldr	r3, [pc, #144]	; (24002940 <setFilterTypes+0x154>)
240028b0:	604b      	str	r3, [r1, #4]
				  break;
240028b2:	4770      	bx	lr
				  filterTick[i] = &VZbandrejectTick;
240028b4:	4b0c      	ldr	r3, [pc, #48]	; (240028e8 <setFilterTypes+0xfc>)
240028b6:	4a23      	ldr	r2, [pc, #140]	; (24002944 <setFilterTypes+0x158>)
240028b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
240028bc:	4b0c      	ldr	r3, [pc, #48]	; (240028f0 <setFilterTypes+0x104>)
240028be:	4a22      	ldr	r2, [pc, #136]	; (24002948 <setFilterTypes+0x15c>)
240028c0:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
240028c4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
240028c8:	4b20      	ldr	r3, [pc, #128]	; (2400294c <setFilterTypes+0x160>)
240028ca:	604b      	str	r3, [r1, #4]
				  break;
240028cc:	4770      	bx	lr
				  filterTick[i] = &LadderLowpassTick;
240028ce:	4b06      	ldr	r3, [pc, #24]	; (240028e8 <setFilterTypes+0xfc>)
240028d0:	4a1f      	ldr	r2, [pc, #124]	; (24002950 <setFilterTypes+0x164>)
240028d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
240028d6:	4b06      	ldr	r3, [pc, #24]	; (240028f0 <setFilterTypes+0x104>)
240028d8:	4a1e      	ldr	r2, [pc, #120]	; (24002954 <setFilterTypes+0x168>)
240028da:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
240028de:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
240028e2:	4b1d      	ldr	r3, [pc, #116]	; (24002958 <setFilterTypes+0x16c>)
240028e4:	604b      	str	r3, [r1, #4]
}
240028e6:	4770      	bx	lr
240028e8:	200051a8 	.word	0x200051a8
240028ec:	00000ce1 	.word	0x00000ce1
240028f0:	20016c9c 	.word	0x20016c9c
240028f4:	00001001 	.word	0x00001001
240028f8:	00001121 	.word	0x00001121
240028fc:	00000d21 	.word	0x00000d21
24002900:	00001021 	.word	0x00001021
24002904:	00001161 	.word	0x00001161
24002908:	00000d61 	.word	0x00000d61
2400290c:	00001041 	.word	0x00001041
24002910:	000011a1 	.word	0x000011a1
24002914:	00000da1 	.word	0x00000da1
24002918:	00001061 	.word	0x00001061
2400291c:	000011e1 	.word	0x000011e1
24002920:	00000de1 	.word	0x00000de1
24002924:	00001081 	.word	0x00001081
24002928:	00001221 	.word	0x00001221
2400292c:	00000e21 	.word	0x00000e21
24002930:	000010a1 	.word	0x000010a1
24002934:	00001261 	.word	0x00001261
24002938:	00000e61 	.word	0x00000e61
2400293c:	000010c1 	.word	0x000010c1
24002940:	000012a1 	.word	0x000012a1
24002944:	00000ea1 	.word	0x00000ea1
24002948:	000010e1 	.word	0x000010e1
2400294c:	000012e1 	.word	0x000012e1
24002950:	00000ee1 	.word	0x00000ee1
24002954:	00001101 	.word	0x00001101
24002958:	00001321 	.word	0x00001321

2400295c <setLFOShapes>:
{
2400295c:	b410      	push	{r4}
	switch(LFOShape)
2400295e:	2805      	cmp	r0, #5
24002960:	d814      	bhi.n	2400298c <setLFOShapes+0x30>
24002962:	e8df f000 	tbb	[pc, r0]
24002966:	1603      	.short	0x1603
24002968:	5a493827 	.word	0x5a493827
			lfoShapeTick[i] = &lfoSineTriTick;
2400296c:	4b33      	ldr	r3, [pc, #204]	; (24002a3c <setLFOShapes+0xe0>)
2400296e:	4a34      	ldr	r2, [pc, #208]	; (24002a40 <setLFOShapes+0xe4>)
24002970:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002974:	4b33      	ldr	r3, [pc, #204]	; (24002a44 <setLFOShapes+0xe8>)
24002976:	eb01 0241 	add.w	r2, r1, r1, lsl #1
2400297a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
2400297e:	4c32      	ldr	r4, [pc, #200]	; (24002a48 <setLFOShapes+0xec>)
24002980:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002984:	4a31      	ldr	r2, [pc, #196]	; (24002a4c <setLFOShapes+0xf0>)
24002986:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002988:	4a31      	ldr	r2, [pc, #196]	; (24002a50 <setLFOShapes+0xf4>)
2400298a:	6082      	str	r2, [r0, #8]
}
2400298c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002990:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24002992:	4b2a      	ldr	r3, [pc, #168]	; (24002a3c <setLFOShapes+0xe0>)
24002994:	4a2f      	ldr	r2, [pc, #188]	; (24002a54 <setLFOShapes+0xf8>)
24002996:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
2400299a:	4b2a      	ldr	r3, [pc, #168]	; (24002a44 <setLFOShapes+0xe8>)
2400299c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
240029a0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
240029a4:	4c2c      	ldr	r4, [pc, #176]	; (24002a58 <setLFOShapes+0xfc>)
240029a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
240029aa:	4a2c      	ldr	r2, [pc, #176]	; (24002a5c <setLFOShapes+0x100>)
240029ac:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
240029ae:	4a2c      	ldr	r2, [pc, #176]	; (24002a60 <setLFOShapes+0x104>)
240029b0:	6082      	str	r2, [r0, #8]
			break;
240029b2:	e7eb      	b.n	2400298c <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSineTick;
240029b4:	4b21      	ldr	r3, [pc, #132]	; (24002a3c <setLFOShapes+0xe0>)
240029b6:	4a2b      	ldr	r2, [pc, #172]	; (24002a64 <setLFOShapes+0x108>)
240029b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
240029bc:	4b21      	ldr	r3, [pc, #132]	; (24002a44 <setLFOShapes+0xe8>)
240029be:	eb01 0241 	add.w	r2, r1, r1, lsl #1
240029c2:	eb03 0082 	add.w	r0, r3, r2, lsl #2
240029c6:	4c28      	ldr	r4, [pc, #160]	; (24002a68 <setLFOShapes+0x10c>)
240029c8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineSetShape;
240029cc:	4a27      	ldr	r2, [pc, #156]	; (24002a6c <setLFOShapes+0x110>)
240029ce:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
240029d0:	4a27      	ldr	r2, [pc, #156]	; (24002a70 <setLFOShapes+0x114>)
240029d2:	6082      	str	r2, [r0, #8]
			break;
240029d4:	e7da      	b.n	2400298c <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoTriTick;
240029d6:	4b19      	ldr	r3, [pc, #100]	; (24002a3c <setLFOShapes+0xe0>)
240029d8:	4a26      	ldr	r2, [pc, #152]	; (24002a74 <setLFOShapes+0x118>)
240029da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
240029de:	4b19      	ldr	r3, [pc, #100]	; (24002a44 <setLFOShapes+0xe8>)
240029e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
240029e4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
240029e8:	4c23      	ldr	r4, [pc, #140]	; (24002a78 <setLFOShapes+0x11c>)
240029ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoTriSetShape;
240029ee:	4a23      	ldr	r2, [pc, #140]	; (24002a7c <setLFOShapes+0x120>)
240029f0:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
240029f2:	4a23      	ldr	r2, [pc, #140]	; (24002a80 <setLFOShapes+0x124>)
240029f4:	6082      	str	r2, [r0, #8]
			break;
240029f6:	e7c9      	b.n	2400298c <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSawTick;
240029f8:	4b10      	ldr	r3, [pc, #64]	; (24002a3c <setLFOShapes+0xe0>)
240029fa:	4a22      	ldr	r2, [pc, #136]	; (24002a84 <setLFOShapes+0x128>)
240029fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24002a00:	4b10      	ldr	r3, [pc, #64]	; (24002a44 <setLFOShapes+0xe8>)
24002a02:	eb01 0241 	add.w	r2, r1, r1, lsl #1
24002a06:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24002a0a:	4c1f      	ldr	r4, [pc, #124]	; (24002a88 <setLFOShapes+0x12c>)
24002a0c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSetShape;
24002a10:	4a1e      	ldr	r2, [pc, #120]	; (24002a8c <setLFOShapes+0x130>)
24002a12:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002a14:	4a1e      	ldr	r2, [pc, #120]	; (24002a90 <setLFOShapes+0x134>)
24002a16:	6082      	str	r2, [r0, #8]
			break;
24002a18:	e7b8      	b.n	2400298c <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoPulseTick;
24002a1a:	4b08      	ldr	r3, [pc, #32]	; (24002a3c <setLFOShapes+0xe0>)
24002a1c:	4a1d      	ldr	r2, [pc, #116]	; (24002a94 <setLFOShapes+0x138>)
24002a1e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002a22:	4b08      	ldr	r3, [pc, #32]	; (24002a44 <setLFOShapes+0xe8>)
24002a24:	eb01 0241 	add.w	r2, r1, r1, lsl #1
24002a28:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24002a2c:	4c1a      	ldr	r4, [pc, #104]	; (24002a98 <setLFOShapes+0x13c>)
24002a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002a32:	4a1a      	ldr	r2, [pc, #104]	; (24002a9c <setLFOShapes+0x140>)
24002a34:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002a36:	4b1a      	ldr	r3, [pc, #104]	; (24002aa0 <setLFOShapes+0x144>)
24002a38:	6083      	str	r3, [r0, #8]
}
24002a3a:	e7a7      	b.n	2400298c <setLFOShapes+0x30>
24002a3c:	20005468 	.word	0x20005468
24002a40:	00001d01 	.word	0x00001d01
24002a44:	20018dc8 	.word	0x20018dc8
24002a48:	00001de1 	.word	0x00001de1
24002a4c:	00001f61 	.word	0x00001f61
24002a50:	00001ea1 	.word	0x00001ea1
24002a54:	00001ce1 	.word	0x00001ce1
24002a58:	00001dc1 	.word	0x00001dc1
24002a5c:	00001f41 	.word	0x00001f41
24002a60:	00001e81 	.word	0x00001e81
24002a64:	00001d21 	.word	0x00001d21
24002a68:	00001e01 	.word	0x00001e01
24002a6c:	00001f81 	.word	0x00001f81
24002a70:	00001ec1 	.word	0x00001ec1
24002a74:	00001d41 	.word	0x00001d41
24002a78:	00001e21 	.word	0x00001e21
24002a7c:	00001fa1 	.word	0x00001fa1
24002a80:	00001ee1 	.word	0x00001ee1
24002a84:	00001d61 	.word	0x00001d61
24002a88:	00001e41 	.word	0x00001e41
24002a8c:	00001fc1 	.word	0x00001fc1
24002a90:	00001f01 	.word	0x00001f01
24002a94:	00001da1 	.word	0x00001da1
24002a98:	00001e61 	.word	0x00001e61
24002a9c:	00001fe1 	.word	0x00001fe1
24002aa0:	00001f21 	.word	0x00001f21

24002aa4 <CycleCounterInit>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24002aa4:	4a0b      	ldr	r2, [pc, #44]	; (24002ad4 <CycleCounterInit+0x30>)
24002aa6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
24002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24002aae:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24002ab2:	4b09      	ldr	r3, [pc, #36]	; (24002ad8 <CycleCounterInit+0x34>)
24002ab4:	f8d3 3fb4 	ldr.w	r3, [r3, #4020]	; 0xfb4
24002ab8:	f013 0f01 	tst.w	r3, #1
24002abc:	d003      	beq.n	24002ac6 <CycleCounterInit+0x22>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
24002abe:	4b06      	ldr	r3, [pc, #24]	; (24002ad8 <CycleCounterInit+0x34>)
24002ac0:	4a06      	ldr	r2, [pc, #24]	; (24002adc <CycleCounterInit+0x38>)
24002ac2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24002ac6:	4b04      	ldr	r3, [pc, #16]	; (24002ad8 <CycleCounterInit+0x34>)
24002ac8:	2200      	movs	r2, #0
24002aca:	605a      	str	r2, [r3, #4]
  DWT->CTRL = 0x40000001;
24002acc:	4a04      	ldr	r2, [pc, #16]	; (24002ae0 <CycleCounterInit+0x3c>)
24002ace:	601a      	str	r2, [r3, #0]
}
24002ad0:	4770      	bx	lr
24002ad2:	bf00      	nop
24002ad4:	e000ed00 	.word	0xe000ed00
24002ad8:	e0001000 	.word	0xe0001000
24002adc:	c5acce55 	.word	0xc5acce55
24002ae0:	40000001 	.word	0x40000001

24002ae4 <main>:
{
24002ae4:	b570      	push	{r4, r5, r6, lr}
24002ae6:	ed2d 8b02 	vpush	{d8}
24002aea:	b086      	sub	sp, #24
  MPU_Config();
24002aec:	f7ff f84a 	bl	24001b84 <MPU_Config>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24002af0:	4bbb      	ldr	r3, [pc, #748]	; (24002de0 <main+0x2fc>)
24002af2:	695b      	ldr	r3, [r3, #20]
24002af4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
24002af8:	d127      	bne.n	24002b4a <main+0x66>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24002afa:	4bb9      	ldr	r3, [pc, #740]	; (24002de0 <main+0x2fc>)
24002afc:	2200      	movs	r2, #0
24002afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24002b02:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24002b06:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24002b0a:	f3c4 304e 	ubfx	r0, r4, #13, #15
24002b0e:	e000      	b.n	24002b12 <main+0x2e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
24002b10:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24002b12:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002b16:	f643 73e0 	movw	r3, #16352	; 0x3fe0
24002b1a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
24002b1e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
24002b22:	49af      	ldr	r1, [pc, #700]	; (24002de0 <main+0x2fc>)
24002b24:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
24002b28:	4613      	mov	r3, r2
24002b2a:	3a01      	subs	r2, #1
24002b2c:	2b00      	cmp	r3, #0
24002b2e:	d1f2      	bne.n	24002b16 <main+0x32>
    } while(sets-- != 0U);
24002b30:	1e43      	subs	r3, r0, #1
24002b32:	2800      	cmp	r0, #0
24002b34:	d1ec      	bne.n	24002b10 <main+0x2c>
24002b36:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24002b3a:	694b      	ldr	r3, [r1, #20]
24002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002b40:	614b      	str	r3, [r1, #20]
24002b42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002b46:	f3bf 8f6f 	isb	sy
  HAL_Init();
24002b4a:	f000 fefb 	bl	24003944 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
24002b4e:	b662      	cpsie	i
  SystemClock_Config();
24002b50:	f7ff f8bc 	bl	24001ccc <SystemClock_Config>
  PeriphCommonClock_Config();
24002b54:	f7ff f93e 	bl	24001dd4 <PeriphCommonClock_Config>
  MX_GPIO_Init();
24002b58:	f7fe fd50 	bl	240015fc <MX_GPIO_Init>
  MX_DMA_Init();
24002b5c:	f7fe fc50 	bl	24001400 <MX_DMA_Init>
  MX_BDMA_Init();
24002b60:	f7fe fbdc 	bl	2400131c <MX_BDMA_Init>
  MX_I2C2_Init();
24002b64:	f7fe fed0 	bl	24001908 <MX_I2C2_Init>
  MX_SAI1_Init();
24002b68:	f000 fa7c 	bl	24003064 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24002b6c:	f000 fb76 	bl	2400325c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24002b70:	f000 fbdc 	bl	2400332c <MX_SPI1_Init>
  MX_I2C1_Init();
24002b74:	f7fe fe98 	bl	240018a8 <MX_I2C1_Init>
  MX_FMC_Init();
24002b78:	f7fe fd02 	bl	24001580 <MX_FMC_Init>
  MX_FATFS_Init();
24002b7c:	f008 fd7a 	bl	2400b674 <MX_FATFS_Init>
  MX_SPI6_Init();
24002b80:	f000 fbfa 	bl	24003378 <MX_SPI6_Init>
  MX_RNG_Init();
24002b84:	f000 fa30 	bl	24002fe8 <MX_RNG_Init>
  HAL_Delay(500);
24002b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24002b8c:	f000 ff1a 	bl	240039c4 <HAL_Delay>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24002b90:	4d94      	ldr	r5, [pc, #592]	; (24002de4 <main+0x300>)
24002b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24002b96:	4628      	mov	r0, r5
24002b98:	f002 fb66 	bl	24005268 <HAL_GPIO_ReadPin>
24002b9c:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24002b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
24002ba2:	4628      	mov	r0, r5
24002ba4:	f002 fb60 	bl	24005268 <HAL_GPIO_ReadPin>
24002ba8:	4605      	mov	r5, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24002baa:	2104      	movs	r1, #4
24002bac:	488e      	ldr	r0, [pc, #568]	; (24002de8 <main+0x304>)
24002bae:	f002 fb5b 	bl	24005268 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24002bb2:	0063      	lsls	r3, r4, #1
24002bb4:	b2db      	uxtb	r3, r3
24002bb6:	00aa      	lsls	r2, r5, #2
24002bb8:	b2d2      	uxtb	r2, r2
24002bba:	4413      	add	r3, r2
24002bbc:	b2db      	uxtb	r3, r3
24002bbe:	4403      	add	r3, r0
24002bc0:	b2db      	uxtb	r3, r3
24002bc2:	4a8a      	ldr	r2, [pc, #552]	; (24002dec <main+0x308>)
24002bc4:	7013      	strb	r3, [r2, #0]
	if (boardNumber == 0)
24002bc6:	b32b      	cbz	r3, 24002c14 <main+0x130>
   PWR->CR1 |= PWR_CR1_DBP;
24002bc8:	4a89      	ldr	r2, [pc, #548]	; (24002df0 <main+0x30c>)
24002bca:	6813      	ldr	r3, [r2, #0]
24002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24002bd0:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24002bd2:	4b87      	ldr	r3, [pc, #540]	; (24002df0 <main+0x30c>)
24002bd4:	681b      	ldr	r3, [r3, #0]
24002bd6:	f413 7f80 	tst.w	r3, #256	; 0x100
24002bda:	d0fa      	beq.n	24002bd2 <main+0xee>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002bdc:	4b85      	ldr	r3, [pc, #532]	; (24002df4 <main+0x310>)
24002bde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002be2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
24002be6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24002bf2:	9300      	str	r3, [sp, #0]
24002bf4:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002bf6:	2200      	movs	r2, #0
24002bf8:	2180      	movs	r1, #128	; 0x80
24002bfa:	487f      	ldr	r0, [pc, #508]	; (24002df8 <main+0x314>)
24002bfc:	f002 fb3b 	bl	24005276 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
24002c00:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24002c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24002c08:	eee1 3a10 	vmsr	fpscr, r3
  CycleCounterInit();
24002c0c:	f7ff ff4a 	bl	24002aa4 <CycleCounterInit>
  for (int i = 0; i < 4096; i++)
24002c10:	2300      	movs	r3, #0
24002c12:	e019      	b.n	24002c48 <main+0x164>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24002c14:	2400      	movs	r4, #0
24002c16:	9401      	str	r4, [sp, #4]
24002c18:	9402      	str	r4, [sp, #8]
24002c1a:	9403      	str	r4, [sp, #12]
24002c1c:	9404      	str	r4, [sp, #16]
24002c1e:	9405      	str	r4, [sp, #20]
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24002c20:	f44f 5680 	mov.w	r6, #4096	; 0x1000
24002c24:	9601      	str	r6, [sp, #4]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24002c26:	2301      	movs	r3, #1
24002c28:	9302      	str	r3, [sp, #8]
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002c2a:	4d6e      	ldr	r5, [pc, #440]	; (24002de4 <main+0x300>)
24002c2c:	a901      	add	r1, sp, #4
24002c2e:	4628      	mov	r0, r5
24002c30:	f002 fa0a 	bl	24005048 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24002c34:	4622      	mov	r2, r4
24002c36:	4631      	mov	r1, r6
24002c38:	4628      	mov	r0, r5
24002c3a:	f002 fb1c 	bl	24005276 <HAL_GPIO_WritePin>
24002c3e:	e7c3      	b.n	24002bc8 <main+0xe4>
	  buffer[i] = 0;
24002c40:	4a6e      	ldr	r2, [pc, #440]	; (24002dfc <main+0x318>)
24002c42:	2100      	movs	r1, #0
24002c44:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 4096; i++)
24002c46:	3301      	adds	r3, #1
24002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24002c4c:	dbf8      	blt.n	24002c40 <main+0x15c>
  buffer[15+112] = NUM_PARAMS;
24002c4e:	4b6b      	ldr	r3, [pc, #428]	; (24002dfc <main+0x318>)
24002c50:	229c      	movs	r2, #156	; 0x9c
24002c52:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24002c56:	22ef      	movs	r2, #239	; 0xef
24002c58:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+17+112] = 0xef;
24002c5c:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+19+112] = 1;
24002c60:	2201      	movs	r2, #1
24002c62:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24002c66:	22fe      	movs	r2, #254	; 0xfe
24002c68:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  buffer[NUM_PARAMS*2+26+112] = 0xfe;
24002c6c:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24002c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002c74:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24002c78:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
24002c7c:	ed9f 0a60 	vldr	s0, [pc, #384]	; 24002e00 <main+0x31c>
24002c80:	4860      	ldr	r0, [pc, #384]	; (24002e04 <main+0x320>)
24002c82:	f00d fb7f 	bl	24010384 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24002c86:	ed9f 8a60 	vldr	s16, [pc, #384]	; 24002e08 <main+0x324>
24002c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002c8e:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 24002e0c <main+0x328>
24002c92:	eddf 0a5f 	vldr	s1, [pc, #380]	; 24002e10 <main+0x32c>
24002c96:	eeb0 0a48 	vmov.f32	s0, s16
24002c9a:	485e      	ldr	r0, [pc, #376]	; (24002e14 <main+0x330>)
24002c9c:	f00d fb72 	bl	24010384 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24002ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002ca4:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24002ca8:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24002cac:	eeb0 0a48 	vmov.f32	s0, s16
24002cb0:	4859      	ldr	r0, [pc, #356]	; (24002e18 <main+0x334>)
24002cb2:	f00d fb67 	bl	24010384 <LEAF_generate_table_skew_non_sym>
  for (int i = 0; i < 3; i++)
24002cb6:	2400      	movs	r4, #0
24002cb8:	e011      	b.n	24002cde <main+0x1fa>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24002cba:	4d4b      	ldr	r5, [pc, #300]	; (24002de8 <main+0x304>)
24002cbc:	2201      	movs	r2, #1
24002cbe:	4611      	mov	r1, r2
24002cc0:	4628      	mov	r0, r5
24002cc2:	f002 fad8 	bl	24005276 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24002cc6:	200a      	movs	r0, #10
24002cc8:	f000 fe7c 	bl	240039c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
24002ccc:	2200      	movs	r2, #0
24002cce:	2101      	movs	r1, #1
24002cd0:	4628      	mov	r0, r5
24002cd2:	f002 fad0 	bl	24005276 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24002cd6:	200a      	movs	r0, #10
24002cd8:	f000 fe74 	bl	240039c4 <HAL_Delay>
  for (int i = 0; i < 3; i++)
24002cdc:	3401      	adds	r4, #1
24002cde:	2c02      	cmp	r4, #2
24002ce0:	ddeb      	ble.n	24002cba <main+0x1d6>
  if (boardNumber == 0)
24002ce2:	4b42      	ldr	r3, [pc, #264]	; (24002dec <main+0x308>)
24002ce4:	781b      	ldrb	r3, [r3, #0]
24002ce6:	2b00      	cmp	r3, #0
24002ce8:	d03c      	beq.n	24002d64 <main+0x280>
	  diskBusy = 1;
24002cea:	4b4c      	ldr	r3, [pc, #304]	; (24002e1c <main+0x338>)
24002cec:	2201      	movs	r2, #1
24002cee:	701a      	strb	r2, [r3, #0]
  SDRAM_init();
24002cf0:	f7ff faa8 	bl	24002244 <SDRAM_init>
  codec_init(&hi2c2);
24002cf4:	484a      	ldr	r0, [pc, #296]	; (24002e20 <main+0x33c>)
24002cf6:	f7fe fb45 	bl	24001384 <codec_init>
  audioInit();
24002cfa:	f7fd fcbf 	bl	2400067c <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
24002cfe:	4949      	ldr	r1, [pc, #292]	; (24002e24 <main+0x340>)
24002d00:	4b49      	ldr	r3, [pc, #292]	; (24002e28 <main+0x344>)
24002d02:	600b      	str	r3, [r1, #0]
  specialModeMacroNames[0][0] = "TargetLev     ";
24002d04:	4b49      	ldr	r3, [pc, #292]	; (24002e2c <main+0x348>)
24002d06:	484a      	ldr	r0, [pc, #296]	; (24002e30 <main+0x34c>)
24002d08:	6018      	str	r0, [r3, #0]
  specialModeMacroNames[0][1] = "LevSmooth     ";
24002d0a:	4d4a      	ldr	r5, [pc, #296]	; (24002e34 <main+0x350>)
24002d0c:	605d      	str	r5, [r3, #4]
  specialModeMacroNames[0][2] = "LevStrengt    ";
24002d0e:	4a4a      	ldr	r2, [pc, #296]	; (24002e38 <main+0x354>)
24002d10:	609a      	str	r2, [r3, #8]
  specialModeMacroNames[0][3] = "LevMode       ";
24002d12:	4a4a      	ldr	r2, [pc, #296]	; (24002e3c <main+0x358>)
24002d14:	60da      	str	r2, [r3, #12]
  specialModeMacroNames[0][4] = "              ";
24002d16:	4a4a      	ldr	r2, [pc, #296]	; (24002e40 <main+0x35c>)
24002d18:	611a      	str	r2, [r3, #16]
  specialModeMacroNames[0][5] = "              ";
24002d1a:	615a      	str	r2, [r3, #20]
  specialModeMacroNames[0][6] = "              ";
24002d1c:	619a      	str	r2, [r3, #24]
  specialModeMacroNames[0][7] = "              ";
24002d1e:	61da      	str	r2, [r3, #28]
  specialModeNames[1] = "PHYS STR2     ";
24002d20:	4a48      	ldr	r2, [pc, #288]	; (24002e44 <main+0x360>)
24002d22:	604a      	str	r2, [r1, #4]
  specialModeMacroNames[1][0] = "FBLev On      ";
24002d24:	4a48      	ldr	r2, [pc, #288]	; (24002e48 <main+0x364>)
24002d26:	621a      	str	r2, [r3, #32]
  specialModeMacroNames[1][1] = "TargetLev     ";
24002d28:	6258      	str	r0, [r3, #36]	; 0x24
  specialModeMacroNames[1][2] = "PickPos       ";
24002d2a:	4a48      	ldr	r2, [pc, #288]	; (24002e4c <main+0x368>)
24002d2c:	629a      	str	r2, [r3, #40]	; 0x28
  specialModeMacroNames[1][3] = "Decay         ";
24002d2e:	4a48      	ldr	r2, [pc, #288]	; (24002e50 <main+0x36c>)
24002d30:	62da      	str	r2, [r3, #44]	; 0x2c
  specialModeMacroNames[1][4] = "Touch         ";
24002d32:	4848      	ldr	r0, [pc, #288]	; (24002e54 <main+0x370>)
24002d34:	6318      	str	r0, [r3, #48]	; 0x30
  specialModeMacroNames[1][5] = "Noise1        ";
24002d36:	4c48      	ldr	r4, [pc, #288]	; (24002e58 <main+0x374>)
24002d38:	635c      	str	r4, [r3, #52]	; 0x34
  specialModeMacroNames[1][6] = "Noise2        ";
24002d3a:	4848      	ldr	r0, [pc, #288]	; (24002e5c <main+0x378>)
24002d3c:	6398      	str	r0, [r3, #56]	; 0x38
  specialModeMacroNames[1][7] = "LevSmooth     ";
24002d3e:	63dd      	str	r5, [r3, #60]	; 0x3c
  specialModeNames[2] = "ADDITIVE      ";
24002d40:	4d47      	ldr	r5, [pc, #284]	; (24002e60 <main+0x37c>)
24002d42:	608d      	str	r5, [r1, #8]
  specialModeMacroNames[2][0] = "Noise1        ";
24002d44:	641c      	str	r4, [r3, #64]	; 0x40
  specialModeMacroNames[2][1] = "Noise2        ";
24002d46:	6458      	str	r0, [r3, #68]	; 0x44
  specialModeMacroNames[2][2] = "Tone          ";
24002d48:	4946      	ldr	r1, [pc, #280]	; (24002e64 <main+0x380>)
24002d4a:	6499      	str	r1, [r3, #72]	; 0x48
  specialModeMacroNames[2][3] = "Decay         ";
24002d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  specialModeMacroNames[2][4] = "Stretch       ";
24002d4e:	4a46      	ldr	r2, [pc, #280]	; (24002e68 <main+0x384>)
24002d50:	651a      	str	r2, [r3, #80]	; 0x50
  specialModeMacroNames[2][5] = "RandDecy      ";
24002d52:	4a46      	ldr	r2, [pc, #280]	; (24002e6c <main+0x388>)
24002d54:	655a      	str	r2, [r3, #84]	; 0x54
  specialModeMacroNames[2][6] = "RandGain      ";
24002d56:	4a46      	ldr	r2, [pc, #280]	; (24002e70 <main+0x38c>)
24002d58:	659a      	str	r2, [r3, #88]	; 0x58
  specialModeMacroNames[2][7] = "NoiseVol      ";
24002d5a:	4a46      	ldr	r2, [pc, #280]	; (24002e74 <main+0x390>)
24002d5c:	65da      	str	r2, [r3, #92]	; 0x5c
  for (int i = 0; i < 3; i++)
24002d5e:	f04f 0e00 	mov.w	lr, #0
24002d62:	e037      	b.n	24002dd4 <main+0x2f0>
	  getPresetNamesFromSDCard();
24002d64:	f7ff f9b2 	bl	240020cc <getPresetNamesFromSDCard>
	  presetWaitingToLoad = 1;
24002d68:	2301      	movs	r3, #1
24002d6a:	4a43      	ldr	r2, [pc, #268]	; (24002e78 <main+0x394>)
24002d6c:	6013      	str	r3, [r2, #0]
	  diskBusy = 1;
24002d6e:	4a2b      	ldr	r2, [pc, #172]	; (24002e1c <main+0x338>)
24002d70:	7013      	strb	r3, [r2, #0]
24002d72:	e7bd      	b.n	24002cf0 <main+0x20c>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24002d74:	4b2b      	ldr	r3, [pc, #172]	; (24002e24 <main+0x340>)
24002d76:	f853 102e 	ldr.w	r1, [r3, lr, lsl #2]
24002d7a:	f1ce 033f 	rsb	r3, lr, #63	; 0x3f
24002d7e:	5c88      	ldrb	r0, [r1, r2]
24002d80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
24002d84:	493d      	ldr	r1, [pc, #244]	; (24002e7c <main+0x398>)
24002d86:	eb01 0343 	add.w	r3, r1, r3, lsl #1
24002d8a:	5498      	strb	r0, [r3, r2]
	  for (int j = 0; j < 14; j++)
24002d8c:	3201      	adds	r2, #1
24002d8e:	2a0d      	cmp	r2, #13
24002d90:	ddf0      	ble.n	24002d74 <main+0x290>
	  for (int k = 0; k < 8; k++)
24002d92:	f04f 0c00 	mov.w	ip, #0
24002d96:	e016      	b.n	24002dc6 <main+0x2e2>
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24002d98:	eb0c 03ce 	add.w	r3, ip, lr, lsl #3
24002d9c:	4a23      	ldr	r2, [pc, #140]	; (24002e2c <main+0x348>)
24002d9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002da2:	f1ce 033f 	rsb	r3, lr, #63	; 0x3f
24002da6:	5c54      	ldrb	r4, [r2, r1]
24002da8:	ebcc 00cc 	rsb	r0, ip, ip, lsl #3
24002dac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
24002db0:	011a      	lsls	r2, r3, #4
24002db2:	eb02 0340 	add.w	r3, r2, r0, lsl #1
24002db6:	4a32      	ldr	r2, [pc, #200]	; (24002e80 <main+0x39c>)
24002db8:	4413      	add	r3, r2
24002dba:	545c      	strb	r4, [r3, r1]
		  for (int j = 0; j < 14; j++)
24002dbc:	3101      	adds	r1, #1
24002dbe:	290d      	cmp	r1, #13
24002dc0:	ddea      	ble.n	24002d98 <main+0x2b4>
	  for (int k = 0; k < 8; k++)
24002dc2:	f10c 0c01 	add.w	ip, ip, #1
24002dc6:	f1bc 0f07 	cmp.w	ip, #7
24002dca:	dc01      	bgt.n	24002dd0 <main+0x2ec>
		  for (int j = 0; j < 14; j++)
24002dcc:	2100      	movs	r1, #0
24002dce:	e7f6      	b.n	24002dbe <main+0x2da>
  for (int i = 0; i < 3; i++)
24002dd0:	f10e 0e01 	add.w	lr, lr, #1
24002dd4:	f1be 0f02 	cmp.w	lr, #2
24002dd8:	dc54      	bgt.n	24002e84 <main+0x3a0>
	  for (int j = 0; j < 14; j++)
24002dda:	2200      	movs	r2, #0
24002ddc:	e7d7      	b.n	24002d8e <main+0x2aa>
24002dde:	bf00      	nop
24002de0:	e000ed00 	.word	0xe000ed00
24002de4:	58020400 	.word	0x58020400
24002de8:	58020000 	.word	0x58020000
24002dec:	20014c05 	.word	0x20014c05
24002df0:	58024800 	.word	0x58024800
24002df4:	58024400 	.word	0x58024400
24002df8:	58020800 	.word	0x58020800
24002dfc:	300001c0 	.word	0x300001c0
24002e00:	3c23d70a 	.word	0x3c23d70a
24002e04:	2001acc8 	.word	0x2001acc8
24002e08:	00000000 	.word	0x00000000
24002e0c:	457a0000 	.word	0x457a0000
24002e10:	469c4000 	.word	0x469c4000
24002e14:	20014c9c 	.word	0x20014c9c
24002e18:	20016dc8 	.word	0x20016dc8
24002e1c:	20014c44 	.word	0x20014c44
24002e20:	20014bb0 	.word	0x20014bb0
24002e24:	2001cd28 	.word	0x2001cd28
24002e28:	24015e94 	.word	0x24015e94
24002e2c:	2001ccc8 	.word	0x2001ccc8
24002e30:	24015ea4 	.word	0x24015ea4
24002e34:	24015eb4 	.word	0x24015eb4
24002e38:	24015ec4 	.word	0x24015ec4
24002e3c:	24015ed4 	.word	0x24015ed4
24002e40:	24015ee4 	.word	0x24015ee4
24002e44:	24015ef4 	.word	0x24015ef4
24002e48:	24015f04 	.word	0x24015f04
24002e4c:	24015f14 	.word	0x24015f14
24002e50:	24015f24 	.word	0x24015f24
24002e54:	24015f34 	.word	0x24015f34
24002e58:	24015f44 	.word	0x24015f44
24002e5c:	24015f54 	.word	0x24015f54
24002e60:	24015f64 	.word	0x24015f64
24002e64:	24015f74 	.word	0x24015f74
24002e68:	24015f84 	.word	0x24015f84
24002e6c:	24015f94 	.word	0x24015f94
24002e70:	24015fa4 	.word	0x24015fa4
24002e74:	24015fb4 	.word	0x24015fb4
24002e78:	2001a8b8 	.word	0x2001a8b8
24002e7c:	3003a000 	.word	0x3003a000
24002e80:	3003a380 	.word	0x3003a380
    HAL_SPI_Receive_DMA(&hspi6, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24002e84:	2234      	movs	r2, #52	; 0x34
24002e86:	4940      	ldr	r1, [pc, #256]	; (24002f88 <main+0x4a4>)
24002e88:	4840      	ldr	r0, [pc, #256]	; (24002f8c <main+0x4a8>)
24002e8a:	f007 fbed 	bl	2400a668 <HAL_SPI_Receive_DMA>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24002e8e:	4a40      	ldr	r2, [pc, #256]	; (24002f90 <main+0x4ac>)
24002e90:	2340      	movs	r3, #64	; 0x40
24002e92:	18d1      	adds	r1, r2, r3
24002e94:	483f      	ldr	r0, [pc, #252]	; (24002f94 <main+0x4b0>)
24002e96:	f007 fccb 	bl	2400a830 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24002e9a:	493f      	ldr	r1, [pc, #252]	; (24002f98 <main+0x4b4>)
24002e9c:	483f      	ldr	r0, [pc, #252]	; (24002f9c <main+0x4b8>)
24002e9e:	f7fe fa1f 	bl	240012e0 <audioStart>
    if (boardNumber !=0)
24002ea2:	4b3f      	ldr	r3, [pc, #252]	; (24002fa0 <main+0x4bc>)
24002ea4:	781b      	ldrb	r3, [r3, #0]
24002ea6:	2b00      	cmp	r3, #0
24002ea8:	d040      	beq.n	24002f2c <main+0x448>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24002eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002eae:	493d      	ldr	r1, [pc, #244]	; (24002fa4 <main+0x4c0>)
24002eb0:	483d      	ldr	r0, [pc, #244]	; (24002fa8 <main+0x4c4>)
24002eb2:	f002 fccb 	bl	2400584c <HAL_I2C_Slave_Receive_IT>
24002eb6:	e039      	b.n	24002f2c <main+0x448>
		  else if (presetWaitingToWrite > 0)
24002eb8:	4b3c      	ldr	r3, [pc, #240]	; (24002fac <main+0x4c8>)
24002eba:	681b      	ldr	r3, [r3, #0]
24002ebc:	2b00      	cmp	r3, #0
24002ebe:	d146      	bne.n	24002f4e <main+0x46a>
	  if (presetWaitingToParse > 0)
24002ec0:	4b3b      	ldr	r3, [pc, #236]	; (24002fb0 <main+0x4cc>)
24002ec2:	681b      	ldr	r3, [r3, #0]
24002ec4:	2b00      	cmp	r3, #0
24002ec6:	d147      	bne.n	24002f58 <main+0x474>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24002ec8:	4b3a      	ldr	r3, [pc, #232]	; (24002fb4 <main+0x4d0>)
24002eca:	681b      	ldr	r3, [r3, #0]
24002ecc:	b91b      	cbnz	r3, 24002ed6 <main+0x3f2>
24002ece:	4b39      	ldr	r3, [pc, #228]	; (24002fb4 <main+0x4d0>)
24002ed0:	685b      	ldr	r3, [r3, #4]
24002ed2:	2b00      	cmp	r3, #0
24002ed4:	d052      	beq.n	24002f7c <main+0x498>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
24002ed6:	2201      	movs	r2, #1
24002ed8:	2180      	movs	r1, #128	; 0x80
24002eda:	4837      	ldr	r0, [pc, #220]	; (24002fb8 <main+0x4d4>)
24002edc:	f002 f9cb 	bl	24005276 <HAL_GPIO_WritePin>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24002ee0:	a901      	add	r1, sp, #4
24002ee2:	4836      	ldr	r0, [pc, #216]	; (24002fbc <main+0x4d8>)
24002ee4:	f005 fe56 	bl	24008b94 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24002ee8:	eddd 7a01 	vldr	s15, [sp, #4]
24002eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002ef0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 24002fc0 <main+0x4dc>
24002ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
24002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002efc:	dd03      	ble.n	24002f06 <main+0x422>
		  myTestInt++;
24002efe:	4a31      	ldr	r2, [pc, #196]	; (24002fc4 <main+0x4e0>)
24002f00:	6813      	ldr	r3, [r2, #0]
24002f02:	3301      	adds	r3, #1
24002f04:	6013      	str	r3, [r2, #0]
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
24002f06:	ed9f 7a30 	vldr	s14, [pc, #192]	; 24002fc8 <main+0x4e4>
24002f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24002f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
24002f12:	4b2e      	ldr	r3, [pc, #184]	; (24002fcc <main+0x4e8>)
24002f14:	781a      	ldrb	r2, [r3, #0]
24002f16:	1c51      	adds	r1, r2, #1
24002f18:	7019      	strb	r1, [r3, #0]
24002f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24002f1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
24002f22:	4b2b      	ldr	r3, [pc, #172]	; (24002fd0 <main+0x4ec>)
24002f24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24002f28:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
24002f2c:	4b1c      	ldr	r3, [pc, #112]	; (24002fa0 <main+0x4bc>)
24002f2e:	781b      	ldrb	r3, [r3, #0]
24002f30:	2b00      	cmp	r3, #0
24002f32:	d1c5      	bne.n	24002ec0 <main+0x3dc>
		  if (presetWaitingToLoad > 0)
24002f34:	4b27      	ldr	r3, [pc, #156]	; (24002fd4 <main+0x4f0>)
24002f36:	681b      	ldr	r3, [r3, #0]
24002f38:	2b00      	cmp	r3, #0
24002f3a:	d0bd      	beq.n	24002eb8 <main+0x3d4>
			  if (!i2cSending)
24002f3c:	4b26      	ldr	r3, [pc, #152]	; (24002fd8 <main+0x4f4>)
24002f3e:	781b      	ldrb	r3, [r3, #0]
24002f40:	2b00      	cmp	r3, #0
24002f42:	d1bd      	bne.n	24002ec0 <main+0x3dc>
				  checkForSDCardPreset(presetNumberToLoad);
24002f44:	4b25      	ldr	r3, [pc, #148]	; (24002fdc <main+0x4f8>)
24002f46:	7818      	ldrb	r0, [r3, #0]
24002f48:	f7fe ff80 	bl	24001e4c <checkForSDCardPreset>
24002f4c:	e7b8      	b.n	24002ec0 <main+0x3dc>
				  writePresetToSDCard(presetWaitingToWrite);
24002f4e:	4b17      	ldr	r3, [pc, #92]	; (24002fac <main+0x4c8>)
24002f50:	6818      	ldr	r0, [r3, #0]
24002f52:	f7ff f83b 	bl	24001fcc <writePresetToSDCard>
24002f56:	e7b3      	b.n	24002ec0 <main+0x3dc>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
24002f58:	4c21      	ldr	r4, [pc, #132]	; (24002fe0 <main+0x4fc>)
24002f5a:	2201      	movs	r2, #1
24002f5c:	2180      	movs	r1, #128	; 0x80
24002f5e:	4620      	mov	r0, r4
24002f60:	f002 f989 	bl	24005276 <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24002f64:	4b12      	ldr	r3, [pc, #72]	; (24002fb0 <main+0x4cc>)
24002f66:	6818      	ldr	r0, [r3, #0]
24002f68:	4b1c      	ldr	r3, [pc, #112]	; (24002fdc <main+0x4f8>)
24002f6a:	7819      	ldrb	r1, [r3, #0]
24002f6c:	f02b ffa0 	bl	2402eeb0 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
24002f70:	2200      	movs	r2, #0
24002f72:	2180      	movs	r1, #128	; 0x80
24002f74:	4620      	mov	r0, r4
24002f76:	f002 f97e 	bl	24005276 <HAL_GPIO_WritePin>
24002f7a:	e7a5      	b.n	24002ec8 <main+0x3e4>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002f7c:	2200      	movs	r2, #0
24002f7e:	2180      	movs	r1, #128	; 0x80
24002f80:	480d      	ldr	r0, [pc, #52]	; (24002fb8 <main+0x4d4>)
24002f82:	f002 f978 	bl	24005276 <HAL_GPIO_WritePin>
24002f86:	e7ab      	b.n	24002ee0 <main+0x3fc>
24002f88:	38000000 	.word	0x38000000
24002f8c:	2001d1f0 	.word	0x2001d1f0
24002f90:	30000140 	.word	0x30000140
24002f94:	2001d154 	.word	0x2001d154
24002f98:	2001ce40 	.word	0x2001ce40
24002f9c:	2001ced8 	.word	0x2001ced8
24002fa0:	20014c05 	.word	0x20014c05
24002fa4:	300001c0 	.word	0x300001c0
24002fa8:	20014b5c 	.word	0x20014b5c
24002fac:	2001a8c0 	.word	0x2001a8c0
24002fb0:	2001a8bc 	.word	0x2001a8bc
24002fb4:	2001491c 	.word	0x2001491c
24002fb8:	58020800 	.word	0x58020800
24002fbc:	2001cd38 	.word	0x2001cd38
24002fc0:	4f000000 	.word	0x4f000000
24002fc4:	20019784 	.word	0x20019784
24002fc8:	2f80000d 	.word	0x2f80000d
24002fcc:	20014c09 	.word	0x20014c09
24002fd0:	2001a8c4 	.word	0x2001a8c4
24002fd4:	2001a8b8 	.word	0x2001a8b8
24002fd8:	20016dc4 	.word	0x20016dc4
24002fdc:	2000074c 	.word	0x2000074c
24002fe0:	58020400 	.word	0x58020400

24002fe4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24002fe4:	4770      	bx	lr
	...

24002fe8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24002fe8:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24002fea:	4806      	ldr	r0, [pc, #24]	; (24003004 <MX_RNG_Init+0x1c>)
24002fec:	4b06      	ldr	r3, [pc, #24]	; (24003008 <MX_RNG_Init+0x20>)
24002fee:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24002ff0:	2300      	movs	r3, #0
24002ff2:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
24002ff4:	f005 fd8e 	bl	24008b14 <HAL_RNG_Init>
24002ff8:	b900      	cbnz	r0, 24002ffc <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24002ffa:	bd08      	pop	{r3, pc}
    Error_Handler();
24002ffc:	f7ff fff2 	bl	24002fe4 <Error_Handler>
}
24003000:	e7fb      	b.n	24002ffa <MX_RNG_Init+0x12>
24003002:	bf00      	nop
24003004:	2001cd38 	.word	0x2001cd38
24003008:	48021800 	.word	0x48021800

2400300c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
2400300c:	b510      	push	{r4, lr}
2400300e:	b0b2      	sub	sp, #200	; 0xc8
24003010:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003012:	22c0      	movs	r2, #192	; 0xc0
24003014:	2100      	movs	r1, #0
24003016:	a802      	add	r0, sp, #8
24003018:	f010 fb1e 	bl	24013658 <memset>
  if(rngHandle->Instance==RNG)
2400301c:	6822      	ldr	r2, [r4, #0]
2400301e:	4b0f      	ldr	r3, [pc, #60]	; (2400305c <HAL_RNG_MspInit+0x50>)
24003020:	429a      	cmp	r2, r3
24003022:	d001      	beq.n	24003028 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24003024:	b032      	add	sp, #200	; 0xc8
24003026:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2400302c:	2300      	movs	r3, #0
2400302e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003032:	a802      	add	r0, sp, #8
24003034:	f004 f9ba 	bl	240073ac <HAL_RCCEx_PeriphCLKConfig>
24003038:	b968      	cbnz	r0, 24003056 <HAL_RNG_MspInit+0x4a>
    __HAL_RCC_RNG_CLK_ENABLE();
2400303a:	4b09      	ldr	r3, [pc, #36]	; (24003060 <HAL_RNG_MspInit+0x54>)
2400303c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24003040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003044:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24003048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
2400304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003050:	9301      	str	r3, [sp, #4]
24003052:	9b01      	ldr	r3, [sp, #4]
}
24003054:	e7e6      	b.n	24003024 <HAL_RNG_MspInit+0x18>
      Error_Handler();
24003056:	f7ff ffc5 	bl	24002fe4 <Error_Handler>
2400305a:	e7ee      	b.n	2400303a <HAL_RNG_MspInit+0x2e>
2400305c:	48021800 	.word	0x48021800
24003060:	58024400 	.word	0x58024400

24003064 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24003064:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24003066:	4817      	ldr	r0, [pc, #92]	; (240030c4 <MX_SAI1_Init+0x60>)
24003068:	4b17      	ldr	r3, [pc, #92]	; (240030c8 <MX_SAI1_Init+0x64>)
2400306a:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
2400306c:	2101      	movs	r1, #1
2400306e:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003070:	2300      	movs	r3, #0
24003072:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003074:	6143      	str	r3, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24003076:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003078:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
2400307a:	f64b 3280 	movw	r2, #48000	; 0xbb80
2400307e:	6202      	str	r2, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003080:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
24003082:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003084:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003086:	2302      	movs	r3, #2
24003088:	461a      	mov	r2, r3
2400308a:	f006 f8c3 	bl	24009214 <HAL_SAI_InitProtocol>
2400308e:	b990      	cbnz	r0, 240030b6 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24003090:	480e      	ldr	r0, [pc, #56]	; (240030cc <MX_SAI1_Init+0x68>)
24003092:	4b0f      	ldr	r3, [pc, #60]	; (240030d0 <MX_SAI1_Init+0x6c>)
24003094:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003096:	2202      	movs	r2, #2
24003098:	6042      	str	r2, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
2400309a:	2101      	movs	r1, #1
2400309c:	6081      	str	r1, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400309e:	2400      	movs	r4, #0
240030a0:	6144      	str	r4, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
240030a2:	61c4      	str	r4, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
240030a4:	60c4      	str	r4, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
240030a6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
240030a8:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
240030aa:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
240030ac:	4613      	mov	r3, r2
240030ae:	f006 f8b1 	bl	24009214 <HAL_SAI_InitProtocol>
240030b2:	b918      	cbnz	r0, 240030bc <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
240030b4:	bd10      	pop	{r4, pc}
    Error_Handler();
240030b6:	f7ff ff95 	bl	24002fe4 <Error_Handler>
240030ba:	e7e9      	b.n	24003090 <MX_SAI1_Init+0x2c>
    Error_Handler();
240030bc:	f7ff ff92 	bl	24002fe4 <Error_Handler>
}
240030c0:	e7f8      	b.n	240030b4 <MX_SAI1_Init+0x50>
240030c2:	bf00      	nop
240030c4:	2001ce40 	.word	0x2001ce40
240030c8:	40015804 	.word	0x40015804
240030cc:	2001ced8 	.word	0x2001ced8
240030d0:	40015824 	.word	0x40015824

240030d4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
240030d4:	b530      	push	{r4, r5, lr}
240030d6:	b08d      	sub	sp, #52	; 0x34
240030d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
240030da:	6802      	ldr	r2, [r0, #0]
240030dc:	4b56      	ldr	r3, [pc, #344]	; (24003238 <HAL_SAI_MspInit+0x164>)
240030de:	429a      	cmp	r2, r3
240030e0:	d005      	beq.n	240030ee <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
240030e2:	6822      	ldr	r2, [r4, #0]
240030e4:	4b55      	ldr	r3, [pc, #340]	; (2400323c <HAL_SAI_MspInit+0x168>)
240030e6:	429a      	cmp	r2, r3
240030e8:	d05d      	beq.n	240031a6 <HAL_SAI_MspInit+0xd2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
240030ea:	b00d      	add	sp, #52	; 0x34
240030ec:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
240030ee:	4b54      	ldr	r3, [pc, #336]	; (24003240 <HAL_SAI_MspInit+0x16c>)
240030f0:	681b      	ldr	r3, [r3, #0]
240030f2:	b963      	cbnz	r3, 2400310e <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
240030f4:	4a53      	ldr	r2, [pc, #332]	; (24003244 <HAL_SAI_MspInit+0x170>)
240030f6:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
240030fa:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
240030fe:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
24003102:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
24003106:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
2400310a:	9201      	str	r2, [sp, #4]
2400310c:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
2400310e:	3301      	adds	r3, #1
24003110:	4a4b      	ldr	r2, [pc, #300]	; (24003240 <HAL_SAI_MspInit+0x16c>)
24003112:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003114:	2374      	movs	r3, #116	; 0x74
24003116:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003118:	2302      	movs	r3, #2
2400311a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400311c:	2500      	movs	r5, #0
2400311e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003120:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003122:	2306      	movs	r3, #6
24003124:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003126:	a907      	add	r1, sp, #28
24003128:	4847      	ldr	r0, [pc, #284]	; (24003248 <HAL_SAI_MspInit+0x174>)
2400312a:	f001 ff8d 	bl	24005048 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
2400312e:	4847      	ldr	r0, [pc, #284]	; (2400324c <HAL_SAI_MspInit+0x178>)
24003130:	4b47      	ldr	r3, [pc, #284]	; (24003250 <HAL_SAI_MspInit+0x17c>)
24003132:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003134:	2357      	movs	r3, #87	; 0x57
24003136:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003138:	6085      	str	r5, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
2400313a:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
2400313c:	f44f 6380 	mov.w	r3, #1024	; 0x400
24003140:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003146:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003148:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400314c:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
2400314e:	f44f 7380 	mov.w	r3, #256	; 0x100
24003152:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003154:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003158:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400315a:	2304      	movs	r3, #4
2400315c:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
2400315e:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24003160:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003162:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003164:	f000 ff14 	bl	24003f90 <HAL_DMA_Init>
24003168:	b9b8      	cbnz	r0, 2400319a <HAL_SAI_MspInit+0xc6>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
2400316a:	2306      	movs	r3, #6
2400316c:	9303      	str	r3, [sp, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
2400316e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24003172:	9304      	str	r3, [sp, #16]
    pSyncConfig.SyncEnable = DISABLE;
24003174:	2300      	movs	r3, #0
24003176:	f88d 3014 	strb.w	r3, [sp, #20]
    pSyncConfig.EventEnable = ENABLE;
2400317a:	2301      	movs	r3, #1
2400317c:	f88d 3015 	strb.w	r3, [sp, #21]
    pSyncConfig.RequestNumber = 1;
24003180:	9306      	str	r3, [sp, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003182:	a903      	add	r1, sp, #12
24003184:	4831      	ldr	r0, [pc, #196]	; (2400324c <HAL_SAI_MspInit+0x178>)
24003186:	f001 fefa 	bl	24004f7e <HAL_DMAEx_ConfigMuxSync>
2400318a:	b948      	cbnz	r0, 240031a0 <HAL_SAI_MspInit+0xcc>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
2400318c:	4b2f      	ldr	r3, [pc, #188]	; (2400324c <HAL_SAI_MspInit+0x178>)
2400318e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
24003192:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24003194:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
24003198:	e7a3      	b.n	240030e2 <HAL_SAI_MspInit+0xe>
      Error_Handler();
2400319a:	f7ff ff23 	bl	24002fe4 <Error_Handler>
2400319e:	e7e4      	b.n	2400316a <HAL_SAI_MspInit+0x96>
      Error_Handler();
240031a0:	f7ff ff20 	bl	24002fe4 <Error_Handler>
240031a4:	e7f2      	b.n	2400318c <HAL_SAI_MspInit+0xb8>
      if (SAI1_client == 0)
240031a6:	4b26      	ldr	r3, [pc, #152]	; (24003240 <HAL_SAI_MspInit+0x16c>)
240031a8:	681b      	ldr	r3, [r3, #0]
240031aa:	b963      	cbnz	r3, 240031c6 <HAL_SAI_MspInit+0xf2>
       __HAL_RCC_SAI1_CLK_ENABLE();
240031ac:	4a25      	ldr	r2, [pc, #148]	; (24003244 <HAL_SAI_MspInit+0x170>)
240031ae:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
240031b2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
240031b6:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
240031ba:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
240031be:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
240031c2:	9202      	str	r2, [sp, #8]
240031c4:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
240031c6:	3301      	adds	r3, #1
240031c8:	4a1d      	ldr	r2, [pc, #116]	; (24003240 <HAL_SAI_MspInit+0x16c>)
240031ca:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
240031cc:	2308      	movs	r3, #8
240031ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240031d0:	2302      	movs	r3, #2
240031d2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240031d4:	2500      	movs	r5, #0
240031d6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240031d8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240031da:	2306      	movs	r3, #6
240031dc:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240031de:	a907      	add	r1, sp, #28
240031e0:	4819      	ldr	r0, [pc, #100]	; (24003248 <HAL_SAI_MspInit+0x174>)
240031e2:	f001 ff31 	bl	24005048 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
240031e6:	481b      	ldr	r0, [pc, #108]	; (24003254 <HAL_SAI_MspInit+0x180>)
240031e8:	4b1b      	ldr	r3, [pc, #108]	; (24003258 <HAL_SAI_MspInit+0x184>)
240031ea:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
240031ec:	2358      	movs	r3, #88	; 0x58
240031ee:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240031f0:	2340      	movs	r3, #64	; 0x40
240031f2:	6083      	str	r3, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
240031f4:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240031f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
240031fa:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240031fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003200:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24003206:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
24003208:	f44f 7380 	mov.w	r3, #256	; 0x100
2400320c:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400320e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003212:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003214:	2304      	movs	r3, #4
24003216:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003218:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
2400321a:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400321c:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
2400321e:	f000 feb7 	bl	24003f90 <HAL_DMA_Init>
24003222:	b930      	cbnz	r0, 24003232 <HAL_SAI_MspInit+0x15e>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003224:	4b0b      	ldr	r3, [pc, #44]	; (24003254 <HAL_SAI_MspInit+0x180>)
24003226:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400322a:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
2400322c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
24003230:	e75b      	b.n	240030ea <HAL_SAI_MspInit+0x16>
      Error_Handler();
24003232:	f7ff fed7 	bl	24002fe4 <Error_Handler>
24003236:	e7f5      	b.n	24003224 <HAL_SAI_MspInit+0x150>
24003238:	40015804 	.word	0x40015804
2400323c:	40015824 	.word	0x40015824
24003240:	2001cd4c 	.word	0x2001cd4c
24003244:	58024400 	.word	0x58024400
24003248:	58021000 	.word	0x58021000
2400324c:	2001cd50 	.word	0x2001cd50
24003250:	40020028 	.word	0x40020028
24003254:	2001cdc8 	.word	0x2001cdc8
24003258:	40020040 	.word	0x40020040

2400325c <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
2400325c:	4b06      	ldr	r3, [pc, #24]	; (24003278 <MX_SDMMC1_SD_Init+0x1c>)
2400325e:	4a07      	ldr	r2, [pc, #28]	; (2400327c <MX_SDMMC1_SD_Init+0x20>)
24003260:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24003262:	2200      	movs	r2, #0
24003264:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
24003266:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400326c:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
2400326e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
24003270:	2219      	movs	r2, #25
24003272:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24003274:	4770      	bx	lr
24003276:	bf00      	nop
24003278:	2001cf70 	.word	0x2001cf70
2400327c:	52007000 	.word	0x52007000

24003280 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
24003280:	b530      	push	{r4, r5, lr}
24003282:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003284:	2300      	movs	r3, #0
24003286:	9303      	str	r3, [sp, #12]
24003288:	9304      	str	r3, [sp, #16]
2400328a:	9305      	str	r3, [sp, #20]
2400328c:	9306      	str	r3, [sp, #24]
2400328e:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
24003290:	6802      	ldr	r2, [r0, #0]
24003292:	4b22      	ldr	r3, [pc, #136]	; (2400331c <HAL_SD_MspInit+0x9c>)
24003294:	429a      	cmp	r2, r3
24003296:	d001      	beq.n	2400329c <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24003298:	b009      	add	sp, #36	; 0x24
2400329a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
2400329c:	4b20      	ldr	r3, [pc, #128]	; (24003320 <HAL_SD_MspInit+0xa0>)
2400329e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240032a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240032a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240032aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240032ae:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
240032b2:	9200      	str	r2, [sp, #0]
240032b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
240032b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240032ba:	f042 0204 	orr.w	r2, r2, #4
240032be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240032c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240032c6:	f002 0204 	and.w	r2, r2, #4
240032ca:	9201      	str	r2, [sp, #4]
240032cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240032ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240032d2:	f042 0208 	orr.w	r2, r2, #8
240032d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240032de:	f003 0308 	and.w	r3, r3, #8
240032e2:	9302      	str	r3, [sp, #8]
240032e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240032e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
240032ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240032ec:	2402      	movs	r4, #2
240032ee:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240032f0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240032f2:	250c      	movs	r5, #12
240032f4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240032f6:	eb0d 0105 	add.w	r1, sp, r5
240032fa:	480a      	ldr	r0, [pc, #40]	; (24003324 <HAL_SD_MspInit+0xa4>)
240032fc:	f001 fea4 	bl	24005048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24003300:	2304      	movs	r3, #4
24003302:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003304:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003306:	2300      	movs	r3, #0
24003308:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2400330a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400330c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400330e:	eb0d 0105 	add.w	r1, sp, r5
24003312:	4805      	ldr	r0, [pc, #20]	; (24003328 <HAL_SD_MspInit+0xa8>)
24003314:	f001 fe98 	bl	24005048 <HAL_GPIO_Init>
}
24003318:	e7be      	b.n	24003298 <HAL_SD_MspInit+0x18>
2400331a:	bf00      	nop
2400331c:	52007000 	.word	0x52007000
24003320:	58024400 	.word	0x58024400
24003324:	58020800 	.word	0x58020800
24003328:	58020c00 	.word	0x58020c00

2400332c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi6_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
2400332c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
2400332e:	4810      	ldr	r0, [pc, #64]	; (24003370 <MX_SPI1_Init+0x44>)
24003330:	4b10      	ldr	r3, [pc, #64]	; (24003374 <MX_SPI1_Init+0x48>)
24003332:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
24003334:	2300      	movs	r3, #0
24003336:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
24003338:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400333a:	2207      	movs	r2, #7
2400333c:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
2400333e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24003340:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24003342:	6183      	str	r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003344:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
24003346:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24003348:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
2400334a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
2400334c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
2400334e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
24003350:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24003352:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24003354:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24003356:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
24003358:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
2400335a:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
2400335c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
2400335e:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24003360:	f007 f8ba 	bl	2400a4d8 <HAL_SPI_Init>
24003364:	b900      	cbnz	r0, 24003368 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
24003366:	bd08      	pop	{r3, pc}
    Error_Handler();
24003368:	f7ff fe3c 	bl	24002fe4 <Error_Handler>
}
2400336c:	e7fb      	b.n	24003366 <MX_SPI1_Init+0x3a>
2400336e:	bf00      	nop
24003370:	2001d154 	.word	0x2001d154
24003374:	40013000 	.word	0x40013000

24003378 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
24003378:	b508      	push	{r3, lr}
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
2400337a:	4811      	ldr	r0, [pc, #68]	; (240033c0 <MX_SPI6_Init+0x48>)
2400337c:	4b11      	ldr	r3, [pc, #68]	; (240033c4 <MX_SPI6_Init+0x4c>)
2400337e:	6003      	str	r3, [r0, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
24003380:	2300      	movs	r3, #0
24003382:	6043      	str	r3, [r0, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
24003384:	f44f 2280 	mov.w	r2, #262144	; 0x40000
24003388:	6082      	str	r2, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
2400338a:	2207      	movs	r2, #7
2400338c:	60c2      	str	r2, [r0, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
2400338e:	6103      	str	r3, [r0, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
24003390:	6143      	str	r3, [r0, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
24003392:	6183      	str	r3, [r0, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003394:	6203      	str	r3, [r0, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
24003396:	6243      	str	r3, [r0, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24003398:	6283      	str	r3, [r0, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
2400339a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
2400339c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
2400339e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
240033a0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240033a2:	6403      	str	r3, [r0, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240033a4:	6443      	str	r3, [r0, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240033a6:	6483      	str	r3, [r0, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
240033a8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240033aa:	6503      	str	r3, [r0, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
240033ac:	6543      	str	r3, [r0, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240033ae:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
240033b0:	f007 f892 	bl	2400a4d8 <HAL_SPI_Init>
240033b4:	b900      	cbnz	r0, 240033b8 <MX_SPI6_Init+0x40>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
240033b6:	bd08      	pop	{r3, pc}
    Error_Handler();
240033b8:	f7ff fe14 	bl	24002fe4 <Error_Handler>
}
240033bc:	e7fb      	b.n	240033b6 <MX_SPI6_Init+0x3e>
240033be:	bf00      	nop
240033c0:	2001d1f0 	.word	0x2001d1f0
240033c4:	58001400 	.word	0x58001400

240033c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
240033c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240033cc:	b0bc      	sub	sp, #240	; 0xf0
240033ce:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240033d0:	2100      	movs	r1, #0
240033d2:	9137      	str	r1, [sp, #220]	; 0xdc
240033d4:	9138      	str	r1, [sp, #224]	; 0xe0
240033d6:	9139      	str	r1, [sp, #228]	; 0xe4
240033d8:	913a      	str	r1, [sp, #232]	; 0xe8
240033da:	913b      	str	r1, [sp, #236]	; 0xec
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240033dc:	22c0      	movs	r2, #192	; 0xc0
240033de:	a806      	add	r0, sp, #24
240033e0:	f010 f93a 	bl	24013658 <memset>
  if(spiHandle->Instance==SPI1)
240033e4:	6823      	ldr	r3, [r4, #0]
240033e6:	4a7f      	ldr	r2, [pc, #508]	; (240035e4 <HAL_SPI_MspInit+0x21c>)
240033e8:	4293      	cmp	r3, r2
240033ea:	d006      	beq.n	240033fa <HAL_SPI_MspInit+0x32>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
240033ec:	4a7e      	ldr	r2, [pc, #504]	; (240035e8 <HAL_SPI_MspInit+0x220>)
240033ee:	4293      	cmp	r3, r2
240033f0:	f000 80a0 	beq.w	24003534 <HAL_SPI_MspInit+0x16c>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
240033f4:	b03c      	add	sp, #240	; 0xf0
240033f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240033fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240033fe:	2300      	movs	r3, #0
24003400:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003404:	a806      	add	r0, sp, #24
24003406:	f003 ffd1 	bl	240073ac <HAL_RCCEx_PeriphCLKConfig>
2400340a:	2800      	cmp	r0, #0
2400340c:	f040 8089 	bne.w	24003522 <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI1_CLK_ENABLE();
24003410:	4b76      	ldr	r3, [pc, #472]	; (240035ec <HAL_SPI_MspInit+0x224>)
24003412:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24003416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2400341a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
2400341e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24003422:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
24003426:	9201      	str	r2, [sp, #4]
24003428:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400342a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400342e:	f042 0202 	orr.w	r2, r2, #2
24003432:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003436:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400343a:	f002 0202 	and.w	r2, r2, #2
2400343e:	9202      	str	r2, [sp, #8]
24003440:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24003442:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400344a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400344e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003456:	9303      	str	r3, [sp, #12]
24003458:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400345a:	2330      	movs	r3, #48	; 0x30
2400345c:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400345e:	f04f 0802 	mov.w	r8, #2
24003462:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003466:	2500      	movs	r5, #0
24003468:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400346a:	2703      	movs	r7, #3
2400346c:	973a      	str	r7, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2400346e:	2605      	movs	r6, #5
24003470:	963b      	str	r6, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003472:	a937      	add	r1, sp, #220	; 0xdc
24003474:	485e      	ldr	r0, [pc, #376]	; (240035f0 <HAL_SPI_MspInit+0x228>)
24003476:	f001 fde7 	bl	24005048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
2400347a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
2400347e:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003480:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003484:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24003486:	973a      	str	r7, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24003488:	963b      	str	r6, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400348a:	a937      	add	r1, sp, #220	; 0xdc
2400348c:	4859      	ldr	r0, [pc, #356]	; (240035f4 <HAL_SPI_MspInit+0x22c>)
2400348e:	f001 fddb 	bl	24005048 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
24003492:	4859      	ldr	r0, [pc, #356]	; (240035f8 <HAL_SPI_MspInit+0x230>)
24003494:	4b59      	ldr	r3, [pc, #356]	; (240035fc <HAL_SPI_MspInit+0x234>)
24003496:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24003498:	2325      	movs	r3, #37	; 0x25
2400349a:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400349c:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
2400349e:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240034a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
240034a4:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240034a6:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240034a8:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240034aa:	f44f 7380 	mov.w	r3, #256	; 0x100
240034ae:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240034b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
240034b4:	6203      	str	r3, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240034b6:	2304      	movs	r3, #4
240034b8:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240034ba:	2301      	movs	r3, #1
240034bc:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
240034be:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240034c0:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240034c2:	f000 fd65 	bl	24003f90 <HAL_DMA_Init>
240034c6:	2800      	cmp	r0, #0
240034c8:	d12e      	bne.n	24003528 <HAL_SPI_MspInit+0x160>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
240034ca:	4b4b      	ldr	r3, [pc, #300]	; (240035f8 <HAL_SPI_MspInit+0x230>)
240034cc:	67e3      	str	r3, [r4, #124]	; 0x7c
240034ce:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA1_Stream0;
240034d0:	484b      	ldr	r0, [pc, #300]	; (24003600 <HAL_SPI_MspInit+0x238>)
240034d2:	4b4c      	ldr	r3, [pc, #304]	; (24003604 <HAL_SPI_MspInit+0x23c>)
240034d4:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240034d6:	2326      	movs	r3, #38	; 0x26
240034d8:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240034da:	2340      	movs	r3, #64	; 0x40
240034dc:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240034de:	2300      	movs	r3, #0
240034e0:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
240034e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
240034e6:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240034e8:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240034ea:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
240034ec:	f44f 7280 	mov.w	r2, #256	; 0x100
240034f0:	61c2      	str	r2, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240034f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
240034f6:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240034f8:	2204      	movs	r2, #4
240034fa:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240034fc:	2201      	movs	r2, #1
240034fe:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24003500:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003502:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24003504:	f000 fd44 	bl	24003f90 <HAL_DMA_Init>
24003508:	b988      	cbnz	r0, 2400352e <HAL_SPI_MspInit+0x166>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
2400350a:	4b3d      	ldr	r3, [pc, #244]	; (24003600 <HAL_SPI_MspInit+0x238>)
2400350c:	67a3      	str	r3, [r4, #120]	; 0x78
2400350e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24003510:	2200      	movs	r2, #0
24003512:	2101      	movs	r1, #1
24003514:	2023      	movs	r0, #35	; 0x23
24003516:	f000 fa81 	bl	24003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
2400351a:	2023      	movs	r0, #35	; 0x23
2400351c:	f000 fab4 	bl	24003a88 <HAL_NVIC_EnableIRQ>
24003520:	e768      	b.n	240033f4 <HAL_SPI_MspInit+0x2c>
      Error_Handler();
24003522:	f7ff fd5f 	bl	24002fe4 <Error_Handler>
24003526:	e773      	b.n	24003410 <HAL_SPI_MspInit+0x48>
      Error_Handler();
24003528:	f7ff fd5c 	bl	24002fe4 <Error_Handler>
2400352c:	e7cd      	b.n	240034ca <HAL_SPI_MspInit+0x102>
      Error_Handler();
2400352e:	f7ff fd59 	bl	24002fe4 <Error_Handler>
24003532:	e7ea      	b.n	2400350a <HAL_SPI_MspInit+0x142>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24003534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24003538:	2300      	movs	r3, #0
2400353a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400353e:	a806      	add	r0, sp, #24
24003540:	f003 ff34 	bl	240073ac <HAL_RCCEx_PeriphCLKConfig>
24003544:	2800      	cmp	r0, #0
24003546:	d146      	bne.n	240035d6 <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI6_CLK_ENABLE();
24003548:	4b28      	ldr	r3, [pc, #160]	; (240035ec <HAL_SPI_MspInit+0x224>)
2400354a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400354e:	f042 0220 	orr.w	r2, r2, #32
24003552:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24003556:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400355a:	f002 0220 	and.w	r2, r2, #32
2400355e:	9204      	str	r2, [sp, #16]
24003560:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24003562:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003566:	f042 0201 	orr.w	r2, r2, #1
2400356a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400356e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003572:	f003 0301 	and.w	r3, r3, #1
24003576:	9305      	str	r3, [sp, #20]
24003578:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
2400357a:	23b0      	movs	r3, #176	; 0xb0
2400357c:	9337      	str	r3, [sp, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400357e:	2302      	movs	r3, #2
24003580:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003582:	2500      	movs	r5, #0
24003584:	9539      	str	r5, [sp, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003586:	933a      	str	r3, [sp, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24003588:	2308      	movs	r3, #8
2400358a:	933b      	str	r3, [sp, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400358c:	a937      	add	r1, sp, #220	; 0xdc
2400358e:	481e      	ldr	r0, [pc, #120]	; (24003608 <HAL_SPI_MspInit+0x240>)
24003590:	f001 fd5a 	bl	24005048 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = BDMA_Channel0;
24003594:	481d      	ldr	r0, [pc, #116]	; (2400360c <HAL_SPI_MspInit+0x244>)
24003596:	4b1e      	ldr	r3, [pc, #120]	; (24003610 <HAL_SPI_MspInit+0x248>)
24003598:	6003      	str	r3, [r0, #0]
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
2400359a:	230b      	movs	r3, #11
2400359c:	6043      	str	r3, [r0, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400359e:	6085      	str	r5, [r0, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240035a0:	60c5      	str	r5, [r0, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240035a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
240035a6:	6103      	str	r3, [r0, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240035a8:	6145      	str	r5, [r0, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240035aa:	6185      	str	r5, [r0, #24]
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240035ac:	f44f 7380 	mov.w	r3, #256	; 0x100
240035b0:	61c3      	str	r3, [r0, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240035b2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
240035b6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240035b8:	f000 fcea 	bl	24003f90 <HAL_DMA_Init>
240035bc:	b970      	cbnz	r0, 240035dc <HAL_SPI_MspInit+0x214>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
240035be:	4b13      	ldr	r3, [pc, #76]	; (2400360c <HAL_SPI_MspInit+0x244>)
240035c0:	67e3      	str	r3, [r4, #124]	; 0x7c
240035c2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240035c4:	2200      	movs	r2, #0
240035c6:	2107      	movs	r1, #7
240035c8:	2056      	movs	r0, #86	; 0x56
240035ca:	f000 fa27 	bl	24003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
240035ce:	2056      	movs	r0, #86	; 0x56
240035d0:	f000 fa5a 	bl	24003a88 <HAL_NVIC_EnableIRQ>
}
240035d4:	e70e      	b.n	240033f4 <HAL_SPI_MspInit+0x2c>
      Error_Handler();
240035d6:	f7ff fd05 	bl	24002fe4 <Error_Handler>
240035da:	e7b5      	b.n	24003548 <HAL_SPI_MspInit+0x180>
      Error_Handler();
240035dc:	f7ff fd02 	bl	24002fe4 <Error_Handler>
240035e0:	e7ed      	b.n	240035be <HAL_SPI_MspInit+0x1f6>
240035e2:	bf00      	nop
240035e4:	40013000 	.word	0x40013000
240035e8:	58001400 	.word	0x58001400
240035ec:	58024400 	.word	0x58024400
240035f0:	58020400 	.word	0x58020400
240035f4:	58021800 	.word	0x58021800
240035f8:	2001cfec 	.word	0x2001cfec
240035fc:	400200a0 	.word	0x400200a0
24003600:	2001d064 	.word	0x2001d064
24003604:	40020010 	.word	0x40020010
24003608:	58020000 	.word	0x58020000
2400360c:	2001d0dc 	.word	0x2001d0dc
24003610:	58025408 	.word	0x58025408

24003614 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24003614:	e7fe      	b.n	24003614 <Default_Handler>
	...

24003618 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24003618:	f8df d0c8 	ldr.w	sp, [pc, #200]	; 240036e4 <Reset_Handler+0xcc>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
2400361c:	4b21      	ldr	r3, [pc, #132]	; (240036a4 <Reset_Handler+0x8c>)
2400361e:	4922      	ldr	r1, [pc, #136]	; (240036a8 <Reset_Handler+0x90>)
24003620:	e003      	b.n	2400362a <Reset_Handler+0x12>
		*pDest = *pSource;
24003622:	f851 2b04 	ldr.w	r2, [r1], #4
24003626:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
2400362a:	4a20      	ldr	r2, [pc, #128]	; (240036ac <Reset_Handler+0x94>)
2400362c:	4293      	cmp	r3, r2
2400362e:	d1f8      	bne.n	24003622 <Reset_Handler+0xa>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24003630:	4b1f      	ldr	r3, [pc, #124]	; (240036b0 <Reset_Handler+0x98>)
24003632:	e002      	b.n	2400363a <Reset_Handler+0x22>
		*pDest = 0;
24003634:	2200      	movs	r2, #0
24003636:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
2400363a:	4a1e      	ldr	r2, [pc, #120]	; (240036b4 <Reset_Handler+0x9c>)
2400363c:	4293      	cmp	r3, r2
2400363e:	d1f9      	bne.n	24003634 <Reset_Handler+0x1c>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
24003640:	4b1d      	ldr	r3, [pc, #116]	; (240036b8 <Reset_Handler+0xa0>)
24003642:	e002      	b.n	2400364a <Reset_Handler+0x32>
		*pDest = 0;
24003644:	2200      	movs	r2, #0
24003646:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
2400364a:	4a1c      	ldr	r2, [pc, #112]	; (240036bc <Reset_Handler+0xa4>)
2400364c:	4293      	cmp	r3, r2
2400364e:	d1f9      	bne.n	24003644 <Reset_Handler+0x2c>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
24003650:	4b1b      	ldr	r3, [pc, #108]	; (240036c0 <Reset_Handler+0xa8>)
24003652:	e002      	b.n	2400365a <Reset_Handler+0x42>
		*pDest = 0;
24003654:	2200      	movs	r2, #0
24003656:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
2400365a:	4a1a      	ldr	r2, [pc, #104]	; (240036c4 <Reset_Handler+0xac>)
2400365c:	4293      	cmp	r3, r2
2400365e:	d1f9      	bne.n	24003654 <Reset_Handler+0x3c>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
24003660:	4b19      	ldr	r3, [pc, #100]	; (240036c8 <Reset_Handler+0xb0>)
24003662:	e002      	b.n	2400366a <Reset_Handler+0x52>
		*pDest = 0;
24003664:	2200      	movs	r2, #0
24003666:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
2400366a:	4a18      	ldr	r2, [pc, #96]	; (240036cc <Reset_Handler+0xb4>)
2400366c:	4293      	cmp	r3, r2
2400366e:	d1f9      	bne.n	24003664 <Reset_Handler+0x4c>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
24003670:	4b17      	ldr	r3, [pc, #92]	; (240036d0 <Reset_Handler+0xb8>)
24003672:	e002      	b.n	2400367a <Reset_Handler+0x62>
		*pDest = 0;
24003674:	2200      	movs	r2, #0
24003676:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
2400367a:	4a16      	ldr	r2, [pc, #88]	; (240036d4 <Reset_Handler+0xbc>)
2400367c:	4293      	cmp	r3, r2
2400367e:	d1f9      	bne.n	24003674 <Reset_Handler+0x5c>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24003680:	4b15      	ldr	r3, [pc, #84]	; (240036d8 <Reset_Handler+0xc0>)
24003682:	4916      	ldr	r1, [pc, #88]	; (240036dc <Reset_Handler+0xc4>)
24003684:	e003      	b.n	2400368e <Reset_Handler+0x76>
		*pDest = *pSource;
24003686:	f851 2b04 	ldr.w	r2, [r1], #4
2400368a:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
2400368e:	4a14      	ldr	r2, [pc, #80]	; (240036e0 <Reset_Handler+0xc8>)
24003690:	4293      	cmp	r3, r2
24003692:	d1f8      	bne.n	24003686 <Reset_Handler+0x6e>
	SystemInit();
24003694:	f000 f8b6 	bl	24003804 <SystemInit>
	__libc_init_array();
24003698:	f00f ffa0 	bl	240135dc <__libc_init_array>
	(void)main();
2400369c:	f7ff fa22 	bl	24002ae4 <main>
	for (;;) ;
240036a0:	e7fe      	b.n	240036a0 <Reset_Handler+0x88>
240036a2:	bf00      	nop
240036a4:	20000000 	.word	0x20000000
240036a8:	2402ef38 	.word	0x2402ef38
240036ac:	20000848 	.word	0x20000848
240036b0:	20000848 	.word	0x20000848
240036b4:	2001d92c 	.word	0x2001d92c
240036b8:	24040000 	.word	0x24040000
240036bc:	2407f7a0 	.word	0x2407f7a0
240036c0:	30000000 	.word	0x30000000
240036c4:	300011c0 	.word	0x300011c0
240036c8:	30002000 	.word	0x30002000
240036cc:	3003bf80 	.word	0x3003bf80
240036d0:	38000000 	.word	0x38000000
240036d4:	38000034 	.word	0x38000034
240036d8:	00000400 	.word	0x00000400
240036dc:	2402f780 	.word	0x2402f780
240036e0:	000078e8 	.word	0x000078e8
240036e4:	20020000 	.word	0x20020000

240036e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
240036e8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240036ea:	4b07      	ldr	r3, [pc, #28]	; (24003708 <HAL_MspInit+0x20>)
240036ec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240036f0:	f042 0202 	orr.w	r2, r2, #2
240036f4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
240036f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240036fc:	f003 0302 	and.w	r3, r3, #2
24003700:	9301      	str	r3, [sp, #4]
24003702:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24003704:	b002      	add	sp, #8
24003706:	4770      	bx	lr
24003708:	58024400 	.word	0x58024400

2400370c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
2400370c:	e7fe      	b.n	2400370c <NMI_Handler>

2400370e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2400370e:	e7fe      	b.n	2400370e <HardFault_Handler>

24003710 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24003710:	e7fe      	b.n	24003710 <MemManage_Handler>

24003712 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24003712:	e7fe      	b.n	24003712 <BusFault_Handler>

24003714 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24003714:	e7fe      	b.n	24003714 <UsageFault_Handler>

24003716 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24003716:	4770      	bx	lr

24003718 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
24003718:	4770      	bx	lr

2400371a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2400371a:	4770      	bx	lr

2400371c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2400371c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2400371e:	f000 f93f 	bl	240039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
24003722:	bd08      	pop	{r3, pc}

24003724 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
24003724:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24003726:	4802      	ldr	r0, [pc, #8]	; (24003730 <DMA1_Stream0_IRQHandler+0xc>)
24003728:	f001 f888 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
2400372c:	bd08      	pop	{r3, pc}
2400372e:	bf00      	nop
24003730:	2001d064 	.word	0x2001d064

24003734 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
24003734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24003736:	4802      	ldr	r0, [pc, #8]	; (24003740 <DMA1_Stream1_IRQHandler+0xc>)
24003738:	f001 f880 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
2400373c:	bd08      	pop	{r3, pc}
2400373e:	bf00      	nop
24003740:	2001cd50 	.word	0x2001cd50

24003744 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
24003744:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24003746:	4802      	ldr	r0, [pc, #8]	; (24003750 <DMA1_Stream2_IRQHandler+0xc>)
24003748:	f001 f878 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
2400374c:	bd08      	pop	{r3, pc}
2400374e:	bf00      	nop
24003750:	2001cdc8 	.word	0x2001cdc8

24003754 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
24003754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
24003756:	4802      	ldr	r0, [pc, #8]	; (24003760 <DMA1_Stream3_IRQHandler+0xc>)
24003758:	f001 f870 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
2400375c:	bd08      	pop	{r3, pc}
2400375e:	bf00      	nop
24003760:	20014a6c 	.word	0x20014a6c

24003764 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
24003764:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
24003766:	4802      	ldr	r0, [pc, #8]	; (24003770 <DMA1_Stream4_IRQHandler+0xc>)
24003768:	f001 f868 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
2400376c:	bd08      	pop	{r3, pc}
2400376e:	bf00      	nop
24003770:	20014ae4 	.word	0x20014ae4

24003774 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
24003774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
24003776:	4802      	ldr	r0, [pc, #8]	; (24003780 <DMA1_Stream6_IRQHandler+0xc>)
24003778:	f001 f860 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
2400377c:	bd08      	pop	{r3, pc}
2400377e:	bf00      	nop
24003780:	2001cfec 	.word	0x2001cfec

24003784 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
24003784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
24003786:	4802      	ldr	r0, [pc, #8]	; (24003790 <I2C1_EV_IRQHandler+0xc>)
24003788:	f002 f892 	bl	240058b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
2400378c:	bd08      	pop	{r3, pc}
2400378e:	bf00      	nop
24003790:	20014b5c 	.word	0x20014b5c

24003794 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
24003794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24003796:	4802      	ldr	r0, [pc, #8]	; (240037a0 <I2C1_ER_IRQHandler+0xc>)
24003798:	f002 fe4b 	bl	24006432 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
2400379c:	bd08      	pop	{r3, pc}
2400379e:	bf00      	nop
240037a0:	20014b5c 	.word	0x20014b5c

240037a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
240037a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
240037a6:	4802      	ldr	r0, [pc, #8]	; (240037b0 <I2C2_EV_IRQHandler+0xc>)
240037a8:	f002 f882 	bl	240058b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
240037ac:	bd08      	pop	{r3, pc}
240037ae:	bf00      	nop
240037b0:	20014bb0 	.word	0x20014bb0

240037b4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
240037b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
240037b6:	4802      	ldr	r0, [pc, #8]	; (240037c0 <I2C2_ER_IRQHandler+0xc>)
240037b8:	f002 fe3b 	bl	24006432 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
240037bc:	bd08      	pop	{r3, pc}
240037be:	bf00      	nop
240037c0:	20014bb0 	.word	0x20014bb0

240037c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
240037c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
240037c6:	4802      	ldr	r0, [pc, #8]	; (240037d0 <SPI1_IRQHandler+0xc>)
240037c8:	f007 f9b4 	bl	2400ab34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
240037cc:	bd08      	pop	{r3, pc}
240037ce:	bf00      	nop
240037d0:	2001d154 	.word	0x2001d154

240037d4 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
240037d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
240037d6:	4802      	ldr	r0, [pc, #8]	; (240037e0 <SPI6_IRQHandler+0xc>)
240037d8:	f007 f9ac 	bl	2400ab34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
240037dc:	bd08      	pop	{r3, pc}
240037de:	bf00      	nop
240037e0:	2001d1f0 	.word	0x2001d1f0

240037e4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
240037e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
240037e6:	4802      	ldr	r0, [pc, #8]	; (240037f0 <DMAMUX1_OVR_IRQHandler+0xc>)
240037e8:	f001 fc01 	bl	24004fee <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
240037ec:	bd08      	pop	{r3, pc}
240037ee:	bf00      	nop
240037f0:	2001cd50 	.word	0x2001cd50

240037f4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
240037f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
240037f6:	4802      	ldr	r0, [pc, #8]	; (24003800 <BDMA_Channel0_IRQHandler+0xc>)
240037f8:	f001 f820 	bl	2400483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
240037fc:	bd08      	pop	{r3, pc}
240037fe:	bf00      	nop
24003800:	2001d0dc 	.word	0x2001d0dc

24003804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24003804:	b082      	sub	sp, #8
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24003806:	4a30      	ldr	r2, [pc, #192]	; (240038c8 <SystemInit+0xc4>)
24003808:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
2400380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24003810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24003814:	4b2d      	ldr	r3, [pc, #180]	; (240038cc <SystemInit+0xc8>)
24003816:	681b      	ldr	r3, [r3, #0]
24003818:	f003 030f 	and.w	r3, r3, #15
2400381c:	2b06      	cmp	r3, #6
2400381e:	d806      	bhi.n	2400382e <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24003820:	4a2a      	ldr	r2, [pc, #168]	; (240038cc <SystemInit+0xc8>)
24003822:	6813      	ldr	r3, [r2, #0]
24003824:	f023 030f 	bic.w	r3, r3, #15
24003828:	f043 0307 	orr.w	r3, r3, #7
2400382c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
2400382e:	4b28      	ldr	r3, [pc, #160]	; (240038d0 <SystemInit+0xcc>)
24003830:	681a      	ldr	r2, [r3, #0]
24003832:	f042 0201 	orr.w	r2, r2, #1
24003836:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24003838:	2200      	movs	r2, #0
2400383a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2400383c:	6819      	ldr	r1, [r3, #0]
2400383e:	4a25      	ldr	r2, [pc, #148]	; (240038d4 <SystemInit+0xd0>)
24003840:	400a      	ands	r2, r1
24003842:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24003844:	4b21      	ldr	r3, [pc, #132]	; (240038cc <SystemInit+0xc8>)
24003846:	681b      	ldr	r3, [r3, #0]
24003848:	f013 0f08 	tst.w	r3, #8
2400384c:	d006      	beq.n	2400385c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400384e:	4a1f      	ldr	r2, [pc, #124]	; (240038cc <SystemInit+0xc8>)
24003850:	6813      	ldr	r3, [r2, #0]
24003852:	f023 030f 	bic.w	r3, r3, #15
24003856:	f043 0307 	orr.w	r3, r3, #7
2400385a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
2400385c:	4b1c      	ldr	r3, [pc, #112]	; (240038d0 <SystemInit+0xcc>)
2400385e:	2200      	movs	r2, #0
24003860:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24003862:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24003864:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24003866:	491c      	ldr	r1, [pc, #112]	; (240038d8 <SystemInit+0xd4>)
24003868:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
2400386a:	491c      	ldr	r1, [pc, #112]	; (240038dc <SystemInit+0xd8>)
2400386c:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
2400386e:	491c      	ldr	r1, [pc, #112]	; (240038e0 <SystemInit+0xdc>)
24003870:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24003872:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24003874:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24003876:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24003878:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
2400387a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
2400387c:	6819      	ldr	r1, [r3, #0]
2400387e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
24003882:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24003884:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24003886:	4b17      	ldr	r3, [pc, #92]	; (240038e4 <SystemInit+0xe0>)
24003888:	681a      	ldr	r2, [r3, #0]
2400388a:	4b17      	ldr	r3, [pc, #92]	; (240038e8 <SystemInit+0xe4>)
2400388c:	4013      	ands	r3, r2
2400388e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003892:	d203      	bcs.n	2400389c <SystemInit+0x98>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24003894:	4b15      	ldr	r3, [pc, #84]	; (240038ec <SystemInit+0xe8>)
24003896:	2201      	movs	r2, #1
24003898:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
2400389c:	4b0c      	ldr	r3, [pc, #48]	; (240038d0 <SystemInit+0xcc>)
2400389e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
240038a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
240038a6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
240038aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240038ae:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
240038b0:	9b01      	ldr	r3, [sp, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240038b2:	4b0f      	ldr	r3, [pc, #60]	; (240038f0 <SystemInit+0xec>)
240038b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
240038b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240038ba:	4b03      	ldr	r3, [pc, #12]	; (240038c8 <SystemInit+0xc4>)
240038bc:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
240038c0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
240038c2:	b002      	add	sp, #8
240038c4:	4770      	bx	lr
240038c6:	bf00      	nop
240038c8:	e000ed00 	.word	0xe000ed00
240038cc:	52002000 	.word	0x52002000
240038d0:	58024400 	.word	0x58024400
240038d4:	eaf6ed7f 	.word	0xeaf6ed7f
240038d8:	02020200 	.word	0x02020200
240038dc:	01ff0000 	.word	0x01ff0000
240038e0:	01010280 	.word	0x01010280
240038e4:	5c001000 	.word	0x5c001000
240038e8:	ffff0000 	.word	0xffff0000
240038ec:	51008000 	.word	0x51008000
240038f0:	52004000 	.word	0x52004000

240038f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240038f4:	4b10      	ldr	r3, [pc, #64]	; (24003938 <HAL_InitTick+0x44>)
240038f6:	781b      	ldrb	r3, [r3, #0]
240038f8:	b90b      	cbnz	r3, 240038fe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
240038fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
240038fc:	4770      	bx	lr
{
240038fe:	b510      	push	{r4, lr}
24003900:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24003902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24003906:	fbb0 f3f3 	udiv	r3, r0, r3
2400390a:	4a0c      	ldr	r2, [pc, #48]	; (2400393c <HAL_InitTick+0x48>)
2400390c:	6810      	ldr	r0, [r2, #0]
2400390e:	fbb0 f0f3 	udiv	r0, r0, r3
24003912:	f000 f8c7 	bl	24003aa4 <HAL_SYSTICK_Config>
24003916:	b968      	cbnz	r0, 24003934 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24003918:	2c0f      	cmp	r4, #15
2400391a:	d901      	bls.n	24003920 <HAL_InitTick+0x2c>
    return HAL_ERROR;
2400391c:	2001      	movs	r0, #1
2400391e:	e00a      	b.n	24003936 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24003920:	2200      	movs	r2, #0
24003922:	4621      	mov	r1, r4
24003924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24003928:	f000 f878 	bl	24003a1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2400392c:	4b04      	ldr	r3, [pc, #16]	; (24003940 <HAL_InitTick+0x4c>)
2400392e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
24003930:	2000      	movs	r0, #0
24003932:	e000      	b.n	24003936 <HAL_InitTick+0x42>
      return HAL_ERROR;
24003934:	2001      	movs	r0, #1
}
24003936:	bd10      	pop	{r4, pc}
24003938:	20000758 	.word	0x20000758
2400393c:	20000750 	.word	0x20000750
24003940:	2000075c 	.word	0x2000075c

24003944 <HAL_Init>:
{
24003944:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24003946:	2003      	movs	r0, #3
24003948:	f000 f856 	bl	240039f8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400394c:	f003 f9aa 	bl	24006ca4 <HAL_RCC_GetSysClockFreq>
24003950:	490f      	ldr	r1, [pc, #60]	; (24003990 <HAL_Init+0x4c>)
24003952:	698b      	ldr	r3, [r1, #24]
24003954:	f3c3 2303 	ubfx	r3, r3, #8, #4
24003958:	4a0e      	ldr	r2, [pc, #56]	; (24003994 <HAL_Init+0x50>)
2400395a:	5cd3      	ldrb	r3, [r2, r3]
2400395c:	f003 031f 	and.w	r3, r3, #31
24003960:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24003962:	698b      	ldr	r3, [r1, #24]
24003964:	f003 030f 	and.w	r3, r3, #15
24003968:	5cd3      	ldrb	r3, [r2, r3]
2400396a:	f003 031f 	and.w	r3, r3, #31
2400396e:	fa20 f303 	lsr.w	r3, r0, r3
24003972:	4a09      	ldr	r2, [pc, #36]	; (24003998 <HAL_Init+0x54>)
24003974:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
24003976:	4b09      	ldr	r3, [pc, #36]	; (2400399c <HAL_Init+0x58>)
24003978:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400397a:	2000      	movs	r0, #0
2400397c:	f7ff ffba 	bl	240038f4 <HAL_InitTick>
24003980:	b110      	cbz	r0, 24003988 <HAL_Init+0x44>
    return HAL_ERROR;
24003982:	2401      	movs	r4, #1
}
24003984:	4620      	mov	r0, r4
24003986:	bd10      	pop	{r4, pc}
24003988:	4604      	mov	r4, r0
  HAL_MspInit();
2400398a:	f7ff fead 	bl	240036e8 <HAL_MspInit>
  return HAL_OK;
2400398e:	e7f9      	b.n	24003984 <HAL_Init+0x40>
24003990:	58024400 	.word	0x58024400
24003994:	24015fc4 	.word	0x24015fc4
24003998:	20000754 	.word	0x20000754
2400399c:	20000750 	.word	0x20000750

240039a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
240039a0:	4b03      	ldr	r3, [pc, #12]	; (240039b0 <HAL_IncTick+0x10>)
240039a2:	781b      	ldrb	r3, [r3, #0]
240039a4:	4a03      	ldr	r2, [pc, #12]	; (240039b4 <HAL_IncTick+0x14>)
240039a6:	6811      	ldr	r1, [r2, #0]
240039a8:	440b      	add	r3, r1
240039aa:	6013      	str	r3, [r2, #0]
}
240039ac:	4770      	bx	lr
240039ae:	bf00      	nop
240039b0:	20000758 	.word	0x20000758
240039b4:	2001d28c 	.word	0x2001d28c

240039b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
240039b8:	4b01      	ldr	r3, [pc, #4]	; (240039c0 <HAL_GetTick+0x8>)
240039ba:	6818      	ldr	r0, [r3, #0]
}
240039bc:	4770      	bx	lr
240039be:	bf00      	nop
240039c0:	2001d28c 	.word	0x2001d28c

240039c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240039c4:	b538      	push	{r3, r4, r5, lr}
240039c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240039c8:	f7ff fff6 	bl	240039b8 <HAL_GetTick>
240039cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240039ce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
240039d2:	d002      	beq.n	240039da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
240039d4:	4b04      	ldr	r3, [pc, #16]	; (240039e8 <HAL_Delay+0x24>)
240039d6:	781b      	ldrb	r3, [r3, #0]
240039d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
240039da:	f7ff ffed 	bl	240039b8 <HAL_GetTick>
240039de:	1b40      	subs	r0, r0, r5
240039e0:	42a0      	cmp	r0, r4
240039e2:	d3fa      	bcc.n	240039da <HAL_Delay+0x16>
  {
  }
}
240039e4:	bd38      	pop	{r3, r4, r5, pc}
240039e6:	bf00      	nop
240039e8:	20000758 	.word	0x20000758

240039ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
240039ec:	4b01      	ldr	r3, [pc, #4]	; (240039f4 <HAL_GetREVID+0x8>)
240039ee:	6818      	ldr	r0, [r3, #0]
}
240039f0:	0c00      	lsrs	r0, r0, #16
240039f2:	4770      	bx	lr
240039f4:	5c001000 	.word	0x5c001000

240039f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240039f8:	4906      	ldr	r1, [pc, #24]	; (24003a14 <HAL_NVIC_SetPriorityGrouping+0x1c>)
240039fa:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240039fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24003a00:	041b      	lsls	r3, r3, #16
24003a02:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24003a04:	0200      	lsls	r0, r0, #8
24003a06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24003a0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
24003a0c:	4a02      	ldr	r2, [pc, #8]	; (24003a18 <HAL_NVIC_SetPriorityGrouping+0x20>)
24003a0e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
24003a10:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24003a12:	4770      	bx	lr
24003a14:	e000ed00 	.word	0xe000ed00
24003a18:	05fa0000 	.word	0x05fa0000

24003a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24003a1c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24003a1e:	4b17      	ldr	r3, [pc, #92]	; (24003a7c <HAL_NVIC_SetPriority+0x60>)
24003a20:	68db      	ldr	r3, [r3, #12]
24003a22:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24003a26:	f1c3 0c07 	rsb	ip, r3, #7
24003a2a:	f1bc 0f04 	cmp.w	ip, #4
24003a2e:	bf28      	it	cs
24003a30:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24003a34:	f103 0e04 	add.w	lr, r3, #4
24003a38:	f1be 0f06 	cmp.w	lr, #6
24003a3c:	d914      	bls.n	24003a68 <HAL_NVIC_SetPriority+0x4c>
24003a3e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24003a40:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
24003a44:	fa0e fc0c 	lsl.w	ip, lr, ip
24003a48:	ea21 010c 	bic.w	r1, r1, ip
24003a4c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24003a4e:	fa0e f303 	lsl.w	r3, lr, r3
24003a52:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24003a56:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
24003a58:	2800      	cmp	r0, #0
24003a5a:	db07      	blt.n	24003a6c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24003a5c:	0109      	lsls	r1, r1, #4
24003a5e:	b2c9      	uxtb	r1, r1
24003a60:	4b07      	ldr	r3, [pc, #28]	; (24003a80 <HAL_NVIC_SetPriority+0x64>)
24003a62:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24003a64:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24003a68:	2300      	movs	r3, #0
24003a6a:	e7e9      	b.n	24003a40 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24003a6c:	f000 000f 	and.w	r0, r0, #15
24003a70:	0109      	lsls	r1, r1, #4
24003a72:	b2c9      	uxtb	r1, r1
24003a74:	4b03      	ldr	r3, [pc, #12]	; (24003a84 <HAL_NVIC_SetPriority+0x68>)
24003a76:	5419      	strb	r1, [r3, r0]
24003a78:	e7f4      	b.n	24003a64 <HAL_NVIC_SetPriority+0x48>
24003a7a:	bf00      	nop
24003a7c:	e000ed00 	.word	0xe000ed00
24003a80:	e000e400 	.word	0xe000e400
24003a84:	e000ed14 	.word	0xe000ed14

24003a88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24003a88:	2800      	cmp	r0, #0
24003a8a:	db07      	blt.n	24003a9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24003a8c:	f000 021f 	and.w	r2, r0, #31
24003a90:	0940      	lsrs	r0, r0, #5
24003a92:	2301      	movs	r3, #1
24003a94:	4093      	lsls	r3, r2
24003a96:	4a02      	ldr	r2, [pc, #8]	; (24003aa0 <HAL_NVIC_EnableIRQ+0x18>)
24003a98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24003a9c:	4770      	bx	lr
24003a9e:	bf00      	nop
24003aa0:	e000e100 	.word	0xe000e100

24003aa4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24003aa4:	3801      	subs	r0, #1
24003aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
24003aaa:	d20b      	bcs.n	24003ac4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24003aac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
24003ab0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24003ab2:	4a05      	ldr	r2, [pc, #20]	; (24003ac8 <HAL_SYSTICK_Config+0x24>)
24003ab4:	21f0      	movs	r1, #240	; 0xf0
24003ab6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24003aba:	2000      	movs	r0, #0
24003abc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24003abe:	2207      	movs	r2, #7
24003ac0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24003ac2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24003ac4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24003ac6:	4770      	bx	lr
24003ac8:	e000ed00 	.word	0xe000ed00

24003acc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24003acc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24003ad0:	4b04      	ldr	r3, [pc, #16]	; (24003ae4 <HAL_MPU_Disable+0x18>)
24003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24003ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24003ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24003ada:	2200      	movs	r2, #0
24003adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
24003ae0:	4770      	bx	lr
24003ae2:	bf00      	nop
24003ae4:	e000ed00 	.word	0xe000ed00

24003ae8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24003ae8:	f040 0001 	orr.w	r0, r0, #1
24003aec:	4b05      	ldr	r3, [pc, #20]	; (24003b04 <HAL_MPU_Enable+0x1c>)
24003aee:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24003af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24003af4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24003af8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24003afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003afe:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24003b02:	4770      	bx	lr
24003b04:	e000ed00 	.word	0xe000ed00

24003b08 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24003b08:	7842      	ldrb	r2, [r0, #1]
24003b0a:	4b16      	ldr	r3, [pc, #88]	; (24003b64 <HAL_MPU_ConfigRegion+0x5c>)
24003b0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24003b10:	7803      	ldrb	r3, [r0, #0]
24003b12:	b1fb      	cbz	r3, 24003b54 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24003b14:	6843      	ldr	r3, [r0, #4]
24003b16:	4a13      	ldr	r2, [pc, #76]	; (24003b64 <HAL_MPU_ConfigRegion+0x5c>)
24003b18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003b1c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24003b1e:	7ac3      	ldrb	r3, [r0, #11]
24003b20:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003b22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24003b26:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24003b28:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24003b2c:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24003b2e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24003b32:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24003b34:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24003b38:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24003b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24003b3e:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24003b40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24003b44:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24003b46:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24003b4a:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24003b4c:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003b4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24003b52:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24003b54:	4b03      	ldr	r3, [pc, #12]	; (24003b64 <HAL_MPU_ConfigRegion+0x5c>)
24003b56:	2200      	movs	r2, #0
24003b58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
24003b5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
24003b60:	4770      	bx	lr
24003b62:	bf00      	nop
24003b64:	e000ed00 	.word	0xe000ed00

24003b68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003b68:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24003b6a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003b6c:	6804      	ldr	r4, [r0, #0]
24003b6e:	4e66      	ldr	r6, [pc, #408]	; (24003d08 <DMA_SetConfig+0x1a0>)
24003b70:	4d66      	ldr	r5, [pc, #408]	; (24003d0c <DMA_SetConfig+0x1a4>)
24003b72:	42ac      	cmp	r4, r5
24003b74:	bf18      	it	ne
24003b76:	42b4      	cmpne	r4, r6
24003b78:	d042      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b7a:	3518      	adds	r5, #24
24003b7c:	42ac      	cmp	r4, r5
24003b7e:	d03f      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b80:	3518      	adds	r5, #24
24003b82:	42ac      	cmp	r4, r5
24003b84:	d03c      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b86:	3518      	adds	r5, #24
24003b88:	42ac      	cmp	r4, r5
24003b8a:	d039      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b8c:	3518      	adds	r5, #24
24003b8e:	42ac      	cmp	r4, r5
24003b90:	d036      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b92:	3518      	adds	r5, #24
24003b94:	42ac      	cmp	r4, r5
24003b96:	d033      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b98:	3518      	adds	r5, #24
24003b9a:	42ac      	cmp	r4, r5
24003b9c:	d030      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003b9e:	f505 7556 	add.w	r5, r5, #856	; 0x358
24003ba2:	42ac      	cmp	r4, r5
24003ba4:	d02c      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003ba6:	3518      	adds	r5, #24
24003ba8:	42ac      	cmp	r4, r5
24003baa:	d029      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bac:	3518      	adds	r5, #24
24003bae:	42ac      	cmp	r4, r5
24003bb0:	d026      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bb2:	3518      	adds	r5, #24
24003bb4:	42ac      	cmp	r4, r5
24003bb6:	d023      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bb8:	3518      	adds	r5, #24
24003bba:	42ac      	cmp	r4, r5
24003bbc:	d020      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bbe:	3518      	adds	r5, #24
24003bc0:	42ac      	cmp	r4, r5
24003bc2:	d01d      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bc4:	3518      	adds	r5, #24
24003bc6:	42ac      	cmp	r4, r5
24003bc8:	d01a      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bca:	3518      	adds	r5, #24
24003bcc:	42ac      	cmp	r4, r5
24003bce:	d017      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bd0:	4d4f      	ldr	r5, [pc, #316]	; (24003d10 <DMA_SetConfig+0x1a8>)
24003bd2:	42ac      	cmp	r4, r5
24003bd4:	d014      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bd6:	3514      	adds	r5, #20
24003bd8:	42ac      	cmp	r4, r5
24003bda:	d011      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bdc:	3514      	adds	r5, #20
24003bde:	42ac      	cmp	r4, r5
24003be0:	d00e      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003be2:	3514      	adds	r5, #20
24003be4:	42ac      	cmp	r4, r5
24003be6:	d00b      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003be8:	3514      	adds	r5, #20
24003bea:	42ac      	cmp	r4, r5
24003bec:	d008      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bee:	3514      	adds	r5, #20
24003bf0:	42ac      	cmp	r4, r5
24003bf2:	d005      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bf4:	3514      	adds	r5, #20
24003bf6:	42ac      	cmp	r4, r5
24003bf8:	d002      	beq.n	24003c00 <DMA_SetConfig+0x98>
24003bfa:	3514      	adds	r5, #20
24003bfc:	42ac      	cmp	r4, r5
24003bfe:	d107      	bne.n	24003c10 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003c00:	6e44      	ldr	r4, [r0, #100]	; 0x64
24003c02:	6e85      	ldr	r5, [r0, #104]	; 0x68
24003c04:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
24003c06:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
24003c08:	b114      	cbz	r4, 24003c10 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003c0a:	6f04      	ldr	r4, [r0, #112]	; 0x70
24003c0c:	6f45      	ldr	r5, [r0, #116]	; 0x74
24003c0e:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003c10:	6804      	ldr	r4, [r0, #0]
24003c12:	4e3d      	ldr	r6, [pc, #244]	; (24003d08 <DMA_SetConfig+0x1a0>)
24003c14:	4d3d      	ldr	r5, [pc, #244]	; (24003d0c <DMA_SetConfig+0x1a4>)
24003c16:	42ac      	cmp	r4, r5
24003c18:	bf18      	it	ne
24003c1a:	42b4      	cmpne	r4, r6
24003c1c:	d052      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c1e:	3518      	adds	r5, #24
24003c20:	42ac      	cmp	r4, r5
24003c22:	d04f      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c24:	3518      	adds	r5, #24
24003c26:	42ac      	cmp	r4, r5
24003c28:	d04c      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c2a:	3518      	adds	r5, #24
24003c2c:	42ac      	cmp	r4, r5
24003c2e:	d049      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c30:	3518      	adds	r5, #24
24003c32:	42ac      	cmp	r4, r5
24003c34:	d046      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c36:	3518      	adds	r5, #24
24003c38:	42ac      	cmp	r4, r5
24003c3a:	d043      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c3c:	3518      	adds	r5, #24
24003c3e:	42ac      	cmp	r4, r5
24003c40:	d040      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c42:	f505 7556 	add.w	r5, r5, #856	; 0x358
24003c46:	42ac      	cmp	r4, r5
24003c48:	d03c      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c4a:	3518      	adds	r5, #24
24003c4c:	42ac      	cmp	r4, r5
24003c4e:	d039      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c50:	3518      	adds	r5, #24
24003c52:	42ac      	cmp	r4, r5
24003c54:	d036      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c56:	3518      	adds	r5, #24
24003c58:	42ac      	cmp	r4, r5
24003c5a:	d033      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c5c:	3518      	adds	r5, #24
24003c5e:	42ac      	cmp	r4, r5
24003c60:	d030      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c62:	3518      	adds	r5, #24
24003c64:	42ac      	cmp	r4, r5
24003c66:	d02d      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c68:	3518      	adds	r5, #24
24003c6a:	42ac      	cmp	r4, r5
24003c6c:	d02a      	beq.n	24003cc4 <DMA_SetConfig+0x15c>
24003c6e:	3518      	adds	r5, #24
24003c70:	42ac      	cmp	r4, r5
24003c72:	d027      	beq.n	24003cc4 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24003c74:	4e26      	ldr	r6, [pc, #152]	; (24003d10 <DMA_SetConfig+0x1a8>)
24003c76:	4d27      	ldr	r5, [pc, #156]	; (24003d14 <DMA_SetConfig+0x1ac>)
24003c78:	42ac      	cmp	r4, r5
24003c7a:	bf18      	it	ne
24003c7c:	42b4      	cmpne	r4, r6
24003c7e:	d011      	beq.n	24003ca4 <DMA_SetConfig+0x13c>
24003c80:	4d25      	ldr	r5, [pc, #148]	; (24003d18 <DMA_SetConfig+0x1b0>)
24003c82:	42ac      	cmp	r4, r5
24003c84:	d00e      	beq.n	24003ca4 <DMA_SetConfig+0x13c>
24003c86:	3514      	adds	r5, #20
24003c88:	42ac      	cmp	r4, r5
24003c8a:	d00b      	beq.n	24003ca4 <DMA_SetConfig+0x13c>
24003c8c:	3514      	adds	r5, #20
24003c8e:	42ac      	cmp	r4, r5
24003c90:	d008      	beq.n	24003ca4 <DMA_SetConfig+0x13c>
24003c92:	3514      	adds	r5, #20
24003c94:	42ac      	cmp	r4, r5
24003c96:	d005      	beq.n	24003ca4 <DMA_SetConfig+0x13c>
24003c98:	3514      	adds	r5, #20
24003c9a:	42ac      	cmp	r4, r5
24003c9c:	d002      	beq.n	24003ca4 <DMA_SetConfig+0x13c>
24003c9e:	3514      	adds	r5, #20
24003ca0:	42ac      	cmp	r4, r5
24003ca2:	d124      	bne.n	24003cee <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24003ca4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
24003ca6:	f004 051f 	and.w	r5, r4, #31
24003caa:	2401      	movs	r4, #1
24003cac:	40ac      	lsls	r4, r5
24003cae:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24003cb0:	6804      	ldr	r4, [r0, #0]
24003cb2:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24003cb4:	6883      	ldr	r3, [r0, #8]
24003cb6:	2b40      	cmp	r3, #64	; 0x40
24003cb8:	d020      	beq.n	24003cfc <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24003cba:	6803      	ldr	r3, [r0, #0]
24003cbc:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24003cbe:	6803      	ldr	r3, [r0, #0]
24003cc0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
24003cc2:	e014      	b.n	24003cee <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24003cc4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
24003cc6:	f004 0c1f 	and.w	ip, r4, #31
24003cca:	243f      	movs	r4, #63	; 0x3f
24003ccc:	fa04 f40c 	lsl.w	r4, r4, ip
24003cd0:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24003cd2:	6805      	ldr	r5, [r0, #0]
24003cd4:	682c      	ldr	r4, [r5, #0]
24003cd6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
24003cda:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
24003cdc:	6804      	ldr	r4, [r0, #0]
24003cde:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24003ce0:	6883      	ldr	r3, [r0, #8]
24003ce2:	2b40      	cmp	r3, #64	; 0x40
24003ce4:	d005      	beq.n	24003cf2 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
24003ce6:	6803      	ldr	r3, [r0, #0]
24003ce8:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
24003cea:	6803      	ldr	r3, [r0, #0]
24003cec:	60da      	str	r2, [r3, #12]
}
24003cee:	bcf0      	pop	{r4, r5, r6, r7}
24003cf0:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
24003cf2:	6803      	ldr	r3, [r0, #0]
24003cf4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
24003cf6:	6803      	ldr	r3, [r0, #0]
24003cf8:	60d9      	str	r1, [r3, #12]
24003cfa:	e7f8      	b.n	24003cee <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24003cfc:	6803      	ldr	r3, [r0, #0]
24003cfe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24003d00:	6803      	ldr	r3, [r0, #0]
24003d02:	60d9      	str	r1, [r3, #12]
24003d04:	e7f3      	b.n	24003cee <DMA_SetConfig+0x186>
24003d06:	bf00      	nop
24003d08:	40020010 	.word	0x40020010
24003d0c:	40020028 	.word	0x40020028
24003d10:	58025408 	.word	0x58025408
24003d14:	5802541c 	.word	0x5802541c
24003d18:	58025430 	.word	0x58025430

24003d1c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003d1c:	6803      	ldr	r3, [r0, #0]
24003d1e:	4927      	ldr	r1, [pc, #156]	; (24003dbc <DMA_CalcBaseAndBitshift+0xa0>)
24003d20:	4a27      	ldr	r2, [pc, #156]	; (24003dc0 <DMA_CalcBaseAndBitshift+0xa4>)
24003d22:	4293      	cmp	r3, r2
24003d24:	bf18      	it	ne
24003d26:	428b      	cmpne	r3, r1
24003d28:	d02f      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d2a:	3218      	adds	r2, #24
24003d2c:	4293      	cmp	r3, r2
24003d2e:	d02c      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d30:	3218      	adds	r2, #24
24003d32:	4293      	cmp	r3, r2
24003d34:	d029      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d36:	3218      	adds	r2, #24
24003d38:	4293      	cmp	r3, r2
24003d3a:	d026      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d3c:	3218      	adds	r2, #24
24003d3e:	4293      	cmp	r3, r2
24003d40:	d023      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d42:	3218      	adds	r2, #24
24003d44:	4293      	cmp	r3, r2
24003d46:	d020      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d48:	3218      	adds	r2, #24
24003d4a:	4293      	cmp	r3, r2
24003d4c:	d01d      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d4e:	f502 7256 	add.w	r2, r2, #856	; 0x358
24003d52:	4293      	cmp	r3, r2
24003d54:	d019      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d56:	3218      	adds	r2, #24
24003d58:	4293      	cmp	r3, r2
24003d5a:	d016      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d5c:	3218      	adds	r2, #24
24003d5e:	4293      	cmp	r3, r2
24003d60:	d013      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d62:	3218      	adds	r2, #24
24003d64:	4293      	cmp	r3, r2
24003d66:	d010      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d68:	3218      	adds	r2, #24
24003d6a:	4293      	cmp	r3, r2
24003d6c:	d00d      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d6e:	3218      	adds	r2, #24
24003d70:	4293      	cmp	r3, r2
24003d72:	d00a      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d74:	3218      	adds	r2, #24
24003d76:	4293      	cmp	r3, r2
24003d78:	d007      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
24003d7a:	3218      	adds	r2, #24
24003d7c:	4293      	cmp	r3, r2
24003d7e:	d004      	beq.n	24003d8a <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24003d80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24003d84:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
24003d86:	6d80      	ldr	r0, [r0, #88]	; 0x58
24003d88:	4770      	bx	lr
{
24003d8a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24003d8c:	b2d9      	uxtb	r1, r3
24003d8e:	3910      	subs	r1, #16
24003d90:	4a0c      	ldr	r2, [pc, #48]	; (24003dc4 <DMA_CalcBaseAndBitshift+0xa8>)
24003d92:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24003d96:	f3c2 1202 	ubfx	r2, r2, #4, #3
24003d9a:	4c0b      	ldr	r4, [pc, #44]	; (24003dc8 <DMA_CalcBaseAndBitshift+0xac>)
24003d9c:	5ca2      	ldrb	r2, [r4, r2]
24003d9e:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
24003da0:	295f      	cmp	r1, #95	; 0x5f
24003da2:	d907      	bls.n	24003db4 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24003da4:	4a09      	ldr	r2, [pc, #36]	; (24003dcc <DMA_CalcBaseAndBitshift+0xb0>)
24003da6:	401a      	ands	r2, r3
24003da8:	3204      	adds	r2, #4
24003daa:	6582      	str	r2, [r0, #88]	; 0x58
}
24003dac:	6d80      	ldr	r0, [r0, #88]	; 0x58
24003dae:	f85d 4b04 	ldr.w	r4, [sp], #4
24003db2:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24003db4:	4a05      	ldr	r2, [pc, #20]	; (24003dcc <DMA_CalcBaseAndBitshift+0xb0>)
24003db6:	401a      	ands	r2, r3
24003db8:	6582      	str	r2, [r0, #88]	; 0x58
24003dba:	e7f7      	b.n	24003dac <DMA_CalcBaseAndBitshift+0x90>
24003dbc:	40020010 	.word	0x40020010
24003dc0:	40020028 	.word	0x40020028
24003dc4:	aaaaaaab 	.word	0xaaaaaaab
24003dc8:	24015fd4 	.word	0x24015fd4
24003dcc:	fffffc00 	.word	0xfffffc00

24003dd0 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24003dd0:	6983      	ldr	r3, [r0, #24]
24003dd2:	b99b      	cbnz	r3, 24003dfc <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
24003dd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
24003dd6:	2b01      	cmp	r3, #1
24003dd8:	d00a      	beq.n	24003df0 <DMA_CheckFifoParam+0x20>
24003dda:	2b02      	cmp	r3, #2
24003ddc:	d002      	beq.n	24003de4 <DMA_CheckFifoParam+0x14>
24003dde:	b10b      	cbz	r3, 24003de4 <DMA_CheckFifoParam+0x14>
24003de0:	2000      	movs	r0, #0
24003de2:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24003de4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
24003de6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
24003dea:	d12a      	bne.n	24003e42 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
24003dec:	2000      	movs	r0, #0
24003dee:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24003df0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
24003df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24003df6:	d026      	beq.n	24003e46 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
24003df8:	2000      	movs	r0, #0
24003dfa:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24003dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24003e00:	d00a      	beq.n	24003e18 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
24003e02:	6a83      	ldr	r3, [r0, #40]	; 0x28
24003e04:	2b02      	cmp	r3, #2
24003e06:	d926      	bls.n	24003e56 <DMA_CheckFifoParam+0x86>
24003e08:	2b03      	cmp	r3, #3
24003e0a:	d126      	bne.n	24003e5a <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24003e0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
24003e0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
24003e12:	d124      	bne.n	24003e5e <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
24003e14:	2000      	movs	r0, #0
24003e16:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
24003e18:	6a83      	ldr	r3, [r0, #40]	; 0x28
24003e1a:	2b03      	cmp	r3, #3
24003e1c:	d803      	bhi.n	24003e26 <DMA_CheckFifoParam+0x56>
24003e1e:	e8df f003 	tbb	[pc, r3]
24003e22:	0414      	.short	0x0414
24003e24:	0a14      	.short	0x0a14
24003e26:	2000      	movs	r0, #0
24003e28:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24003e2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
24003e2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
24003e30:	d10d      	bne.n	24003e4e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
24003e32:	2000      	movs	r0, #0
24003e34:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24003e36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
24003e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24003e3c:	d009      	beq.n	24003e52 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
24003e3e:	2000      	movs	r0, #0
24003e40:	4770      	bx	lr
          status = HAL_ERROR;
24003e42:	2001      	movs	r0, #1
24003e44:	4770      	bx	lr
          status = HAL_ERROR;
24003e46:	2001      	movs	r0, #1
24003e48:	4770      	bx	lr
        status = HAL_ERROR;
24003e4a:	2001      	movs	r0, #1
24003e4c:	4770      	bx	lr
          status = HAL_ERROR;
24003e4e:	2001      	movs	r0, #1
24003e50:	4770      	bx	lr
          status = HAL_ERROR;
24003e52:	2001      	movs	r0, #1
24003e54:	4770      	bx	lr
        status = HAL_ERROR;
24003e56:	2001      	movs	r0, #1
24003e58:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
24003e5a:	2000      	movs	r0, #0
24003e5c:	4770      	bx	lr
        {
          status = HAL_ERROR;
24003e5e:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
24003e60:	4770      	bx	lr
	...

24003e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24003e64:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24003e66:	4922      	ldr	r1, [pc, #136]	; (24003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
24003e68:	4a22      	ldr	r2, [pc, #136]	; (24003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
24003e6a:	4293      	cmp	r3, r2
24003e6c:	bf18      	it	ne
24003e6e:	428b      	cmpne	r3, r1
24003e70:	d028      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
24003e72:	3214      	adds	r2, #20
24003e74:	4293      	cmp	r3, r2
24003e76:	d025      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
24003e78:	3214      	adds	r2, #20
24003e7a:	4293      	cmp	r3, r2
24003e7c:	d022      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
24003e7e:	3214      	adds	r2, #20
24003e80:	4293      	cmp	r3, r2
24003e82:	d01f      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
24003e84:	3214      	adds	r2, #20
24003e86:	4293      	cmp	r3, r2
24003e88:	d01c      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
24003e8a:	3214      	adds	r2, #20
24003e8c:	4293      	cmp	r3, r2
24003e8e:	d019      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
24003e90:	3214      	adds	r2, #20
24003e92:	4293      	cmp	r3, r2
24003e94:	d016      	beq.n	24003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24003e96:	b2da      	uxtb	r2, r3
24003e98:	3a10      	subs	r2, #16
24003e9a:	4917      	ldr	r1, [pc, #92]	; (24003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
24003e9c:	fba1 1202 	umull	r1, r2, r1, r2
24003ea0:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24003ea2:	4916      	ldr	r1, [pc, #88]	; (24003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
24003ea4:	4419      	add	r1, r3
24003ea6:	29a8      	cmp	r1, #168	; 0xa8
24003ea8:	d91f      	bls.n	24003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24003eaa:	4b15      	ldr	r3, [pc, #84]	; (24003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
24003eac:	4413      	add	r3, r2
24003eae:	009b      	lsls	r3, r3, #2
24003eb0:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24003eb2:	4b14      	ldr	r3, [pc, #80]	; (24003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
24003eb4:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24003eb6:	f002 021f 	and.w	r2, r2, #31
24003eba:	2301      	movs	r3, #1
24003ebc:	fa03 f202 	lsl.w	r2, r3, r2
24003ec0:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
24003ec2:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24003ec4:	b2db      	uxtb	r3, r3
24003ec6:	3b08      	subs	r3, #8
24003ec8:	4a0f      	ldr	r2, [pc, #60]	; (24003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
24003eca:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24003ece:	4a0f      	ldr	r2, [pc, #60]	; (24003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24003ed0:	eb02 1213 	add.w	r2, r2, r3, lsr #4
24003ed4:	0092      	lsls	r2, r2, #2
24003ed6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24003ed8:	4a0d      	ldr	r2, [pc, #52]	; (24003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
24003eda:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24003edc:	f3c3 1304 	ubfx	r3, r3, #4, #5
24003ee0:	2201      	movs	r2, #1
24003ee2:	fa02 f303 	lsl.w	r3, r2, r3
24003ee6:	6683      	str	r3, [r0, #104]	; 0x68
24003ee8:	4770      	bx	lr
      stream_number += 8U;
24003eea:	3208      	adds	r2, #8
24003eec:	e7dd      	b.n	24003eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
24003eee:	bf00      	nop
24003ef0:	58025408 	.word	0x58025408
24003ef4:	5802541c 	.word	0x5802541c
24003ef8:	aaaaaaab 	.word	0xaaaaaaab
24003efc:	bffdfbf0 	.word	0xbffdfbf0
24003f00:	10008200 	.word	0x10008200
24003f04:	40020880 	.word	0x40020880
24003f08:	cccccccd 	.word	0xcccccccd
24003f0c:	16009600 	.word	0x16009600
24003f10:	58025880 	.word	0x58025880

24003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24003f14:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24003f16:	1e4a      	subs	r2, r1, #1
24003f18:	2a07      	cmp	r2, #7
24003f1a:	d82c      	bhi.n	24003f76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
24003f1c:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24003f1e:	6803      	ldr	r3, [r0, #0]
24003f20:	4d15      	ldr	r5, [pc, #84]	; (24003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
24003f22:	4c16      	ldr	r4, [pc, #88]	; (24003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
24003f24:	42a3      	cmp	r3, r4
24003f26:	bf18      	it	ne
24003f28:	42ab      	cmpne	r3, r5
24003f2a:	d018      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
24003f2c:	3414      	adds	r4, #20
24003f2e:	42a3      	cmp	r3, r4
24003f30:	d015      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
24003f32:	3414      	adds	r4, #20
24003f34:	42a3      	cmp	r3, r4
24003f36:	d012      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
24003f38:	3414      	adds	r4, #20
24003f3a:	42a3      	cmp	r3, r4
24003f3c:	d00f      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
24003f3e:	3414      	adds	r4, #20
24003f40:	42a3      	cmp	r3, r4
24003f42:	d00c      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
24003f44:	3414      	adds	r4, #20
24003f46:	42a3      	cmp	r3, r4
24003f48:	d009      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
24003f4a:	3414      	adds	r4, #20
24003f4c:	42a3      	cmp	r3, r4
24003f4e:	d006      	beq.n	24003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24003f50:	4b0b      	ldr	r3, [pc, #44]	; (24003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
24003f52:	440b      	add	r3, r1
24003f54:	009b      	lsls	r3, r3, #2
24003f56:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24003f58:	4b0a      	ldr	r3, [pc, #40]	; (24003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
24003f5a:	6703      	str	r3, [r0, #112]	; 0x70
24003f5c:	e005      	b.n	24003f6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24003f5e:	4b0a      	ldr	r3, [pc, #40]	; (24003f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
24003f60:	440b      	add	r3, r1
24003f62:	009b      	lsls	r3, r3, #2
24003f64:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24003f66:	4b09      	ldr	r3, [pc, #36]	; (24003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
24003f68:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24003f6a:	2301      	movs	r3, #1
24003f6c:	fa03 f202 	lsl.w	r2, r3, r2
24003f70:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
24003f72:	bc30      	pop	{r4, r5}
24003f74:	4770      	bx	lr
24003f76:	4770      	bx	lr
24003f78:	58025408 	.word	0x58025408
24003f7c:	5802541c 	.word	0x5802541c
24003f80:	1000823f 	.word	0x1000823f
24003f84:	40020940 	.word	0x40020940
24003f88:	1600963f 	.word	0x1600963f
24003f8c:	58025940 	.word	0x58025940

24003f90 <HAL_DMA_Init>:
{
24003f90:	b570      	push	{r4, r5, r6, lr}
24003f92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24003f94:	f7ff fd10 	bl	240039b8 <HAL_GetTick>
  if(hdma == NULL)
24003f98:	2c00      	cmp	r4, #0
24003f9a:	f000 81b6 	beq.w	2400430a <HAL_DMA_Init+0x37a>
24003f9e:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003fa0:	6823      	ldr	r3, [r4, #0]
24003fa2:	4953      	ldr	r1, [pc, #332]	; (240040f0 <HAL_DMA_Init+0x160>)
24003fa4:	4a53      	ldr	r2, [pc, #332]	; (240040f4 <HAL_DMA_Init+0x164>)
24003fa6:	4293      	cmp	r3, r2
24003fa8:	bf18      	it	ne
24003faa:	428b      	cmpne	r3, r1
24003fac:	bf0c      	ite	eq
24003fae:	2201      	moveq	r2, #1
24003fb0:	2200      	movne	r2, #0
24003fb2:	d050      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fb4:	3130      	adds	r1, #48	; 0x30
24003fb6:	428b      	cmp	r3, r1
24003fb8:	d04d      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fba:	3118      	adds	r1, #24
24003fbc:	428b      	cmp	r3, r1
24003fbe:	d04a      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fc0:	3118      	adds	r1, #24
24003fc2:	428b      	cmp	r3, r1
24003fc4:	d047      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fc6:	3118      	adds	r1, #24
24003fc8:	428b      	cmp	r3, r1
24003fca:	d044      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fcc:	3118      	adds	r1, #24
24003fce:	428b      	cmp	r3, r1
24003fd0:	d041      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fd2:	3118      	adds	r1, #24
24003fd4:	428b      	cmp	r3, r1
24003fd6:	d03e      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fd8:	f501 7156 	add.w	r1, r1, #856	; 0x358
24003fdc:	428b      	cmp	r3, r1
24003fde:	d03a      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fe0:	3118      	adds	r1, #24
24003fe2:	428b      	cmp	r3, r1
24003fe4:	d037      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fe6:	3118      	adds	r1, #24
24003fe8:	428b      	cmp	r3, r1
24003fea:	d034      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003fec:	3118      	adds	r1, #24
24003fee:	428b      	cmp	r3, r1
24003ff0:	d031      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003ff2:	3118      	adds	r1, #24
24003ff4:	428b      	cmp	r3, r1
24003ff6:	d02e      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003ff8:	3118      	adds	r1, #24
24003ffa:	428b      	cmp	r3, r1
24003ffc:	d02b      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24003ffe:	3118      	adds	r1, #24
24004000:	428b      	cmp	r3, r1
24004002:	d028      	beq.n	24004056 <HAL_DMA_Init+0xc6>
24004004:	3118      	adds	r1, #24
24004006:	428b      	cmp	r3, r1
24004008:	d025      	beq.n	24004056 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400400a:	493b      	ldr	r1, [pc, #236]	; (240040f8 <HAL_DMA_Init+0x168>)
2400400c:	4a3b      	ldr	r2, [pc, #236]	; (240040fc <HAL_DMA_Init+0x16c>)
2400400e:	4293      	cmp	r3, r2
24004010:	bf18      	it	ne
24004012:	428b      	cmpne	r3, r1
24004014:	f000 8131 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
24004018:	4a39      	ldr	r2, [pc, #228]	; (24004100 <HAL_DMA_Init+0x170>)
2400401a:	4293      	cmp	r3, r2
2400401c:	f000 812d 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
24004020:	3214      	adds	r2, #20
24004022:	4293      	cmp	r3, r2
24004024:	f000 8129 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
24004028:	3214      	adds	r2, #20
2400402a:	4293      	cmp	r3, r2
2400402c:	f000 8125 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
24004030:	3214      	adds	r2, #20
24004032:	4293      	cmp	r3, r2
24004034:	f000 8121 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
24004038:	3214      	adds	r2, #20
2400403a:	4293      	cmp	r3, r2
2400403c:	f000 811d 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
24004040:	3214      	adds	r2, #20
24004042:	4293      	cmp	r3, r2
24004044:	f000 8119 	beq.w	2400427a <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004048:	2340      	movs	r3, #64	; 0x40
2400404a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
2400404c:	2303      	movs	r3, #3
2400404e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
24004052:	2001      	movs	r0, #1
24004054:	e04a      	b.n	240040ec <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
24004056:	2102      	movs	r1, #2
24004058:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
2400405c:	2100      	movs	r1, #0
2400405e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
24004062:	bb7a      	cbnz	r2, 240040c4 <HAL_DMA_Init+0x134>
24004064:	4a27      	ldr	r2, [pc, #156]	; (24004104 <HAL_DMA_Init+0x174>)
24004066:	4293      	cmp	r3, r2
24004068:	d02c      	beq.n	240040c4 <HAL_DMA_Init+0x134>
2400406a:	3218      	adds	r2, #24
2400406c:	4293      	cmp	r3, r2
2400406e:	d029      	beq.n	240040c4 <HAL_DMA_Init+0x134>
24004070:	3218      	adds	r2, #24
24004072:	4293      	cmp	r3, r2
24004074:	d026      	beq.n	240040c4 <HAL_DMA_Init+0x134>
24004076:	3218      	adds	r2, #24
24004078:	4293      	cmp	r3, r2
2400407a:	d023      	beq.n	240040c4 <HAL_DMA_Init+0x134>
2400407c:	3218      	adds	r2, #24
2400407e:	4293      	cmp	r3, r2
24004080:	d020      	beq.n	240040c4 <HAL_DMA_Init+0x134>
24004082:	3218      	adds	r2, #24
24004084:	4293      	cmp	r3, r2
24004086:	d01d      	beq.n	240040c4 <HAL_DMA_Init+0x134>
24004088:	f502 7256 	add.w	r2, r2, #856	; 0x358
2400408c:	4293      	cmp	r3, r2
2400408e:	d019      	beq.n	240040c4 <HAL_DMA_Init+0x134>
24004090:	3218      	adds	r2, #24
24004092:	4293      	cmp	r3, r2
24004094:	d016      	beq.n	240040c4 <HAL_DMA_Init+0x134>
24004096:	3218      	adds	r2, #24
24004098:	4293      	cmp	r3, r2
2400409a:	d013      	beq.n	240040c4 <HAL_DMA_Init+0x134>
2400409c:	3218      	adds	r2, #24
2400409e:	4293      	cmp	r3, r2
240040a0:	d010      	beq.n	240040c4 <HAL_DMA_Init+0x134>
240040a2:	3218      	adds	r2, #24
240040a4:	4293      	cmp	r3, r2
240040a6:	d00d      	beq.n	240040c4 <HAL_DMA_Init+0x134>
240040a8:	3218      	adds	r2, #24
240040aa:	4293      	cmp	r3, r2
240040ac:	d00a      	beq.n	240040c4 <HAL_DMA_Init+0x134>
240040ae:	3218      	adds	r2, #24
240040b0:	4293      	cmp	r3, r2
240040b2:	d007      	beq.n	240040c4 <HAL_DMA_Init+0x134>
240040b4:	3218      	adds	r2, #24
240040b6:	4293      	cmp	r3, r2
240040b8:	d004      	beq.n	240040c4 <HAL_DMA_Init+0x134>
240040ba:	681a      	ldr	r2, [r3, #0]
240040bc:	f022 0201 	bic.w	r2, r2, #1
240040c0:	601a      	str	r2, [r3, #0]
240040c2:	e003      	b.n	240040cc <HAL_DMA_Init+0x13c>
240040c4:	681a      	ldr	r2, [r3, #0]
240040c6:	f022 0201 	bic.w	r2, r2, #1
240040ca:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240040cc:	6823      	ldr	r3, [r4, #0]
240040ce:	681a      	ldr	r2, [r3, #0]
240040d0:	f012 0f01 	tst.w	r2, #1
240040d4:	d018      	beq.n	24004108 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240040d6:	f7ff fc6f 	bl	240039b8 <HAL_GetTick>
240040da:	1b43      	subs	r3, r0, r5
240040dc:	2b05      	cmp	r3, #5
240040de:	d9f5      	bls.n	240040cc <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240040e0:	2320      	movs	r3, #32
240040e2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
240040e4:	2303      	movs	r3, #3
240040e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
240040ea:	2001      	movs	r0, #1
}
240040ec:	bd70      	pop	{r4, r5, r6, pc}
240040ee:	bf00      	nop
240040f0:	40020010 	.word	0x40020010
240040f4:	40020028 	.word	0x40020028
240040f8:	58025408 	.word	0x58025408
240040fc:	5802541c 	.word	0x5802541c
24004100:	58025430 	.word	0x58025430
24004104:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24004108:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
2400410a:	4881      	ldr	r0, [pc, #516]	; (24004310 <HAL_DMA_Init+0x380>)
2400410c:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
2400410e:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004110:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
24004112:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004114:	6921      	ldr	r1, [r4, #16]
24004116:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004118:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400411a:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2400411c:	69a1      	ldr	r1, [r4, #24]
2400411e:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004120:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004122:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004124:	6a21      	ldr	r1, [r4, #32]
24004126:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
24004128:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2400412a:	6a61      	ldr	r1, [r4, #36]	; 0x24
2400412c:	2904      	cmp	r1, #4
2400412e:	f000 8099 	beq.w	24004264 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24004132:	4978      	ldr	r1, [pc, #480]	; (24004314 <HAL_DMA_Init+0x384>)
24004134:	6808      	ldr	r0, [r1, #0]
24004136:	4978      	ldr	r1, [pc, #480]	; (24004318 <HAL_DMA_Init+0x388>)
24004138:	4001      	ands	r1, r0
2400413a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400413e:	d311      	bcc.n	24004164 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004140:	6861      	ldr	r1, [r4, #4]
24004142:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
24004146:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
2400414a:	2803      	cmp	r0, #3
2400414c:	bf88      	it	hi
2400414e:	2d05      	cmphi	r5, #5
24004150:	d906      	bls.n	24004160 <HAL_DMA_Init+0x1d0>
24004152:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
24004156:	2801      	cmp	r0, #1
24004158:	d902      	bls.n	24004160 <HAL_DMA_Init+0x1d0>
2400415a:	394f      	subs	r1, #79	; 0x4f
2400415c:	2903      	cmp	r1, #3
2400415e:	d801      	bhi.n	24004164 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
24004160:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004164:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004166:	6826      	ldr	r6, [r4, #0]
24004168:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2400416a:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
2400416e:	6a63      	ldr	r3, [r4, #36]	; 0x24
24004170:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004172:	2b04      	cmp	r3, #4
24004174:	d108      	bne.n	24004188 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
24004176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24004178:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2400417a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400417c:	b123      	cbz	r3, 24004188 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
2400417e:	4620      	mov	r0, r4
24004180:	f7ff fe26 	bl	24003dd0 <DMA_CheckFifoParam>
24004184:	2800      	cmp	r0, #0
24004186:	d172      	bne.n	2400426e <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24004188:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400418a:	4620      	mov	r0, r4
2400418c:	f7ff fdc6 	bl	24003d1c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004190:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004192:	f003 021f 	and.w	r2, r3, #31
24004196:	233f      	movs	r3, #63	; 0x3f
24004198:	4093      	lsls	r3, r2
2400419a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400419c:	6823      	ldr	r3, [r4, #0]
2400419e:	495f      	ldr	r1, [pc, #380]	; (2400431c <HAL_DMA_Init+0x38c>)
240041a0:	4a5f      	ldr	r2, [pc, #380]	; (24004320 <HAL_DMA_Init+0x390>)
240041a2:	4293      	cmp	r3, r2
240041a4:	bf18      	it	ne
240041a6:	428b      	cmpne	r3, r1
240041a8:	d042      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041aa:	3218      	adds	r2, #24
240041ac:	4293      	cmp	r3, r2
240041ae:	d03f      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041b0:	3218      	adds	r2, #24
240041b2:	4293      	cmp	r3, r2
240041b4:	d03c      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041b6:	3218      	adds	r2, #24
240041b8:	4293      	cmp	r3, r2
240041ba:	d039      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041bc:	3218      	adds	r2, #24
240041be:	4293      	cmp	r3, r2
240041c0:	d036      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041c2:	3218      	adds	r2, #24
240041c4:	4293      	cmp	r3, r2
240041c6:	d033      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041c8:	3218      	adds	r2, #24
240041ca:	4293      	cmp	r3, r2
240041cc:	d030      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041ce:	f502 7256 	add.w	r2, r2, #856	; 0x358
240041d2:	4293      	cmp	r3, r2
240041d4:	d02c      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041d6:	3218      	adds	r2, #24
240041d8:	4293      	cmp	r3, r2
240041da:	d029      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041dc:	3218      	adds	r2, #24
240041de:	4293      	cmp	r3, r2
240041e0:	d026      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041e2:	3218      	adds	r2, #24
240041e4:	4293      	cmp	r3, r2
240041e6:	d023      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041e8:	3218      	adds	r2, #24
240041ea:	4293      	cmp	r3, r2
240041ec:	d020      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041ee:	3218      	adds	r2, #24
240041f0:	4293      	cmp	r3, r2
240041f2:	d01d      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041f4:	3218      	adds	r2, #24
240041f6:	4293      	cmp	r3, r2
240041f8:	d01a      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
240041fa:	3218      	adds	r2, #24
240041fc:	4293      	cmp	r3, r2
240041fe:	d017      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
24004200:	4a48      	ldr	r2, [pc, #288]	; (24004324 <HAL_DMA_Init+0x394>)
24004202:	4293      	cmp	r3, r2
24004204:	d014      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
24004206:	3214      	adds	r2, #20
24004208:	4293      	cmp	r3, r2
2400420a:	d011      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
2400420c:	3214      	adds	r2, #20
2400420e:	4293      	cmp	r3, r2
24004210:	d00e      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
24004212:	3214      	adds	r2, #20
24004214:	4293      	cmp	r3, r2
24004216:	d00b      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
24004218:	3214      	adds	r2, #20
2400421a:	4293      	cmp	r3, r2
2400421c:	d008      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
2400421e:	3214      	adds	r2, #20
24004220:	4293      	cmp	r3, r2
24004222:	d005      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
24004224:	3214      	adds	r2, #20
24004226:	4293      	cmp	r3, r2
24004228:	d002      	beq.n	24004230 <HAL_DMA_Init+0x2a0>
2400422a:	3214      	adds	r2, #20
2400422c:	4293      	cmp	r3, r2
2400422e:	d113      	bne.n	24004258 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24004230:	4620      	mov	r0, r4
24004232:	f7ff fe17 	bl	24003e64 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24004236:	68a3      	ldr	r3, [r4, #8]
24004238:	2b80      	cmp	r3, #128	; 0x80
2400423a:	d059      	beq.n	240042f0 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
2400423c:	6e23      	ldr	r3, [r4, #96]	; 0x60
2400423e:	7922      	ldrb	r2, [r4, #4]
24004240:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004242:	6e63      	ldr	r3, [r4, #100]	; 0x64
24004244:	6ea2      	ldr	r2, [r4, #104]	; 0x68
24004246:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24004248:	6863      	ldr	r3, [r4, #4]
2400424a:	3b01      	subs	r3, #1
2400424c:	2b07      	cmp	r3, #7
2400424e:	d952      	bls.n	240042f6 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
24004250:	2300      	movs	r3, #0
24004252:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
24004254:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
24004256:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004258:	2000      	movs	r0, #0
2400425a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
2400425c:	2301      	movs	r3, #1
2400425e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
24004262:	e743      	b.n	240040ec <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24004264:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
24004266:	6b20      	ldr	r0, [r4, #48]	; 0x30
24004268:	4301      	orrs	r1, r0
2400426a:	430a      	orrs	r2, r1
2400426c:	e761      	b.n	24004132 <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400426e:	2340      	movs	r3, #64	; 0x40
24004270:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24004272:	2001      	movs	r0, #1
24004274:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
24004278:	e738      	b.n	240040ec <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
2400427a:	2202      	movs	r2, #2
2400427c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004280:	2200      	movs	r2, #0
24004282:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24004286:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004288:	4927      	ldr	r1, [pc, #156]	; (24004328 <HAL_DMA_Init+0x398>)
2400428a:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400428c:	68a2      	ldr	r2, [r4, #8]
2400428e:	2a40      	cmp	r2, #64	; 0x40
24004290:	d02c      	beq.n	240042ec <HAL_DMA_Init+0x35c>
24004292:	2a80      	cmp	r2, #128	; 0x80
24004294:	d027      	beq.n	240042e6 <HAL_DMA_Init+0x356>
24004296:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24004298:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400429a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2400429e:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240042a0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240042a4:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240042a6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240042aa:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240042ac:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240042b0:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240042b2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240042b6:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240042b8:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240042bc:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240042be:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240042c0:	6822      	ldr	r2, [r4, #0]
240042c2:	4b1a      	ldr	r3, [pc, #104]	; (2400432c <HAL_DMA_Init+0x39c>)
240042c4:	4413      	add	r3, r2
240042c6:	4a1a      	ldr	r2, [pc, #104]	; (24004330 <HAL_DMA_Init+0x3a0>)
240042c8:	fba2 2303 	umull	r2, r3, r2, r3
240042cc:	091b      	lsrs	r3, r3, #4
240042ce:	009b      	lsls	r3, r3, #2
240042d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240042d2:	4620      	mov	r0, r4
240042d4:	f7ff fd22 	bl	24003d1c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240042d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240042da:	f002 011f 	and.w	r1, r2, #31
240042de:	2201      	movs	r2, #1
240042e0:	408a      	lsls	r2, r1
240042e2:	6042      	str	r2, [r0, #4]
240042e4:	e75a      	b.n	2400419c <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240042e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240042ea:	e7d5      	b.n	24004298 <HAL_DMA_Init+0x308>
240042ec:	2210      	movs	r2, #16
240042ee:	e7d3      	b.n	24004298 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240042f0:	2300      	movs	r3, #0
240042f2:	6063      	str	r3, [r4, #4]
240042f4:	e7a2      	b.n	2400423c <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240042f6:	4620      	mov	r0, r4
240042f8:	f7ff fe0c 	bl	24003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
240042fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
240042fe:	2200      	movs	r2, #0
24004300:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004302:	6f23      	ldr	r3, [r4, #112]	; 0x70
24004304:	6f62      	ldr	r2, [r4, #116]	; 0x74
24004306:	605a      	str	r2, [r3, #4]
24004308:	e7a6      	b.n	24004258 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
2400430a:	2001      	movs	r0, #1
2400430c:	e6ee      	b.n	240040ec <HAL_DMA_Init+0x15c>
2400430e:	bf00      	nop
24004310:	fe10803f 	.word	0xfe10803f
24004314:	5c001000 	.word	0x5c001000
24004318:	ffff0000 	.word	0xffff0000
2400431c:	40020010 	.word	0x40020010
24004320:	40020028 	.word	0x40020028
24004324:	58025408 	.word	0x58025408
24004328:	fffe000f 	.word	0xfffe000f
2400432c:	a7fdabf8 	.word	0xa7fdabf8
24004330:	cccccccd 	.word	0xcccccccd

24004334 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24004334:	2800      	cmp	r0, #0
24004336:	f000 813e 	beq.w	240045b6 <HAL_DMA_Start_IT+0x282>
{
2400433a:	b570      	push	{r4, r5, r6, lr}
2400433c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
2400433e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24004342:	2801      	cmp	r0, #1
24004344:	f000 8139 	beq.w	240045ba <HAL_DMA_Start_IT+0x286>
24004348:	2001      	movs	r0, #1
2400434a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
2400434e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
24004352:	b2c0      	uxtb	r0, r0
24004354:	2801      	cmp	r0, #1
24004356:	d007      	beq.n	24004368 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004358:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400435c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
2400435e:	2300      	movs	r3, #0
24004360:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
24004364:	2001      	movs	r0, #1
}
24004366:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
24004368:	2002      	movs	r0, #2
2400436a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400436e:	2000      	movs	r0, #0
24004370:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24004372:	6820      	ldr	r0, [r4, #0]
24004374:	4e92      	ldr	r6, [pc, #584]	; (240045c0 <HAL_DMA_Start_IT+0x28c>)
24004376:	4d93      	ldr	r5, [pc, #588]	; (240045c4 <HAL_DMA_Start_IT+0x290>)
24004378:	42a8      	cmp	r0, r5
2400437a:	bf18      	it	ne
2400437c:	42b0      	cmpne	r0, r6
2400437e:	d02f      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
24004380:	3518      	adds	r5, #24
24004382:	42a8      	cmp	r0, r5
24004384:	d02c      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
24004386:	3518      	adds	r5, #24
24004388:	42a8      	cmp	r0, r5
2400438a:	d029      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
2400438c:	3518      	adds	r5, #24
2400438e:	42a8      	cmp	r0, r5
24004390:	d026      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
24004392:	3518      	adds	r5, #24
24004394:	42a8      	cmp	r0, r5
24004396:	d023      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
24004398:	3518      	adds	r5, #24
2400439a:	42a8      	cmp	r0, r5
2400439c:	d020      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
2400439e:	3518      	adds	r5, #24
240043a0:	42a8      	cmp	r0, r5
240043a2:	d01d      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043a4:	f505 7556 	add.w	r5, r5, #856	; 0x358
240043a8:	42a8      	cmp	r0, r5
240043aa:	d019      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043ac:	3518      	adds	r5, #24
240043ae:	42a8      	cmp	r0, r5
240043b0:	d016      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043b2:	3518      	adds	r5, #24
240043b4:	42a8      	cmp	r0, r5
240043b6:	d013      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043b8:	3518      	adds	r5, #24
240043ba:	42a8      	cmp	r0, r5
240043bc:	d010      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043be:	3518      	adds	r5, #24
240043c0:	42a8      	cmp	r0, r5
240043c2:	d00d      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043c4:	3518      	adds	r5, #24
240043c6:	42a8      	cmp	r0, r5
240043c8:	d00a      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043ca:	3518      	adds	r5, #24
240043cc:	42a8      	cmp	r0, r5
240043ce:	d007      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043d0:	3518      	adds	r5, #24
240043d2:	42a8      	cmp	r0, r5
240043d4:	d004      	beq.n	240043e0 <HAL_DMA_Start_IT+0xac>
240043d6:	6805      	ldr	r5, [r0, #0]
240043d8:	f025 0501 	bic.w	r5, r5, #1
240043dc:	6005      	str	r5, [r0, #0]
240043de:	e003      	b.n	240043e8 <HAL_DMA_Start_IT+0xb4>
240043e0:	6805      	ldr	r5, [r0, #0]
240043e2:	f025 0501 	bic.w	r5, r5, #1
240043e6:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
240043e8:	4620      	mov	r0, r4
240043ea:	f7ff fbbd 	bl	24003b68 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240043ee:	6823      	ldr	r3, [r4, #0]
240043f0:	4973      	ldr	r1, [pc, #460]	; (240045c0 <HAL_DMA_Start_IT+0x28c>)
240043f2:	4a74      	ldr	r2, [pc, #464]	; (240045c4 <HAL_DMA_Start_IT+0x290>)
240043f4:	4293      	cmp	r3, r2
240043f6:	bf18      	it	ne
240043f8:	428b      	cmpne	r3, r1
240043fa:	d038      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
240043fc:	3218      	adds	r2, #24
240043fe:	4293      	cmp	r3, r2
24004400:	d035      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004402:	3218      	adds	r2, #24
24004404:	4293      	cmp	r3, r2
24004406:	d032      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004408:	3218      	adds	r2, #24
2400440a:	4293      	cmp	r3, r2
2400440c:	d02f      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
2400440e:	3218      	adds	r2, #24
24004410:	4293      	cmp	r3, r2
24004412:	d02c      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004414:	3218      	adds	r2, #24
24004416:	4293      	cmp	r3, r2
24004418:	d029      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
2400441a:	3218      	adds	r2, #24
2400441c:	4293      	cmp	r3, r2
2400441e:	d026      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004420:	f502 7256 	add.w	r2, r2, #856	; 0x358
24004424:	4293      	cmp	r3, r2
24004426:	d022      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004428:	3218      	adds	r2, #24
2400442a:	4293      	cmp	r3, r2
2400442c:	d01f      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
2400442e:	3218      	adds	r2, #24
24004430:	4293      	cmp	r3, r2
24004432:	d01c      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004434:	3218      	adds	r2, #24
24004436:	4293      	cmp	r3, r2
24004438:	d019      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
2400443a:	3218      	adds	r2, #24
2400443c:	4293      	cmp	r3, r2
2400443e:	d016      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004440:	3218      	adds	r2, #24
24004442:	4293      	cmp	r3, r2
24004444:	d013      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
24004446:	3218      	adds	r2, #24
24004448:	4293      	cmp	r3, r2
2400444a:	d010      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
2400444c:	3218      	adds	r2, #24
2400444e:	4293      	cmp	r3, r2
24004450:	d00d      	beq.n	2400446e <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24004452:	681a      	ldr	r2, [r3, #0]
24004454:	f022 020e 	bic.w	r2, r2, #14
24004458:	f042 020a 	orr.w	r2, r2, #10
2400445c:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400445e:	6c23      	ldr	r3, [r4, #64]	; 0x40
24004460:	b193      	cbz	r3, 24004488 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24004462:	6822      	ldr	r2, [r4, #0]
24004464:	6813      	ldr	r3, [r2, #0]
24004466:	f043 0304 	orr.w	r3, r3, #4
2400446a:	6013      	str	r3, [r2, #0]
2400446c:	e00c      	b.n	24004488 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
2400446e:	681a      	ldr	r2, [r3, #0]
24004470:	f022 021e 	bic.w	r2, r2, #30
24004474:	f042 0216 	orr.w	r2, r2, #22
24004478:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400447a:	6c23      	ldr	r3, [r4, #64]	; 0x40
2400447c:	b123      	cbz	r3, 24004488 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
2400447e:	6822      	ldr	r2, [r4, #0]
24004480:	6813      	ldr	r3, [r2, #0]
24004482:	f043 0308 	orr.w	r3, r3, #8
24004486:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004488:	6823      	ldr	r3, [r4, #0]
2400448a:	494d      	ldr	r1, [pc, #308]	; (240045c0 <HAL_DMA_Start_IT+0x28c>)
2400448c:	4a4d      	ldr	r2, [pc, #308]	; (240045c4 <HAL_DMA_Start_IT+0x290>)
2400448e:	4293      	cmp	r3, r2
24004490:	bf18      	it	ne
24004492:	428b      	cmpne	r3, r1
24004494:	d042      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
24004496:	3218      	adds	r2, #24
24004498:	4293      	cmp	r3, r2
2400449a:	d03f      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
2400449c:	3218      	adds	r2, #24
2400449e:	4293      	cmp	r3, r2
240044a0:	d03c      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044a2:	3218      	adds	r2, #24
240044a4:	4293      	cmp	r3, r2
240044a6:	d039      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044a8:	3218      	adds	r2, #24
240044aa:	4293      	cmp	r3, r2
240044ac:	d036      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044ae:	3218      	adds	r2, #24
240044b0:	4293      	cmp	r3, r2
240044b2:	d033      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044b4:	3218      	adds	r2, #24
240044b6:	4293      	cmp	r3, r2
240044b8:	d030      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044ba:	f502 7256 	add.w	r2, r2, #856	; 0x358
240044be:	4293      	cmp	r3, r2
240044c0:	d02c      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044c2:	3218      	adds	r2, #24
240044c4:	4293      	cmp	r3, r2
240044c6:	d029      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044c8:	3218      	adds	r2, #24
240044ca:	4293      	cmp	r3, r2
240044cc:	d026      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044ce:	3218      	adds	r2, #24
240044d0:	4293      	cmp	r3, r2
240044d2:	d023      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044d4:	3218      	adds	r2, #24
240044d6:	4293      	cmp	r3, r2
240044d8:	d020      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044da:	3218      	adds	r2, #24
240044dc:	4293      	cmp	r3, r2
240044de:	d01d      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044e0:	3218      	adds	r2, #24
240044e2:	4293      	cmp	r3, r2
240044e4:	d01a      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044e6:	3218      	adds	r2, #24
240044e8:	4293      	cmp	r3, r2
240044ea:	d017      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044ec:	4a36      	ldr	r2, [pc, #216]	; (240045c8 <HAL_DMA_Start_IT+0x294>)
240044ee:	4293      	cmp	r3, r2
240044f0:	d014      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044f2:	3214      	adds	r2, #20
240044f4:	4293      	cmp	r3, r2
240044f6:	d011      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044f8:	3214      	adds	r2, #20
240044fa:	4293      	cmp	r3, r2
240044fc:	d00e      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
240044fe:	3214      	adds	r2, #20
24004500:	4293      	cmp	r3, r2
24004502:	d00b      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
24004504:	3214      	adds	r2, #20
24004506:	4293      	cmp	r3, r2
24004508:	d008      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
2400450a:	3214      	adds	r2, #20
2400450c:	4293      	cmp	r3, r2
2400450e:	d005      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
24004510:	3214      	adds	r2, #20
24004512:	4293      	cmp	r3, r2
24004514:	d002      	beq.n	2400451c <HAL_DMA_Start_IT+0x1e8>
24004516:	3214      	adds	r2, #20
24004518:	4293      	cmp	r3, r2
2400451a:	d10e      	bne.n	2400453a <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2400451c:	6e23      	ldr	r3, [r4, #96]	; 0x60
2400451e:	681a      	ldr	r2, [r3, #0]
24004520:	f412 3f80 	tst.w	r2, #65536	; 0x10000
24004524:	d003      	beq.n	2400452e <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24004526:	681a      	ldr	r2, [r3, #0]
24004528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400452c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
2400452e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
24004530:	b11b      	cbz	r3, 2400453a <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24004532:	681a      	ldr	r2, [r3, #0]
24004534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24004538:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
2400453a:	6823      	ldr	r3, [r4, #0]
2400453c:	4920      	ldr	r1, [pc, #128]	; (240045c0 <HAL_DMA_Start_IT+0x28c>)
2400453e:	4a21      	ldr	r2, [pc, #132]	; (240045c4 <HAL_DMA_Start_IT+0x290>)
24004540:	4293      	cmp	r3, r2
24004542:	bf18      	it	ne
24004544:	428b      	cmpne	r3, r1
24004546:	d030      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004548:	3218      	adds	r2, #24
2400454a:	4293      	cmp	r3, r2
2400454c:	d02d      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
2400454e:	3218      	adds	r2, #24
24004550:	4293      	cmp	r3, r2
24004552:	d02a      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004554:	3218      	adds	r2, #24
24004556:	4293      	cmp	r3, r2
24004558:	d027      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
2400455a:	3218      	adds	r2, #24
2400455c:	4293      	cmp	r3, r2
2400455e:	d024      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004560:	3218      	adds	r2, #24
24004562:	4293      	cmp	r3, r2
24004564:	d021      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004566:	3218      	adds	r2, #24
24004568:	4293      	cmp	r3, r2
2400456a:	d01e      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
2400456c:	f502 7256 	add.w	r2, r2, #856	; 0x358
24004570:	4293      	cmp	r3, r2
24004572:	d01a      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004574:	3218      	adds	r2, #24
24004576:	4293      	cmp	r3, r2
24004578:	d017      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
2400457a:	3218      	adds	r2, #24
2400457c:	4293      	cmp	r3, r2
2400457e:	d014      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004580:	3218      	adds	r2, #24
24004582:	4293      	cmp	r3, r2
24004584:	d011      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004586:	3218      	adds	r2, #24
24004588:	4293      	cmp	r3, r2
2400458a:	d00e      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
2400458c:	3218      	adds	r2, #24
2400458e:	4293      	cmp	r3, r2
24004590:	d00b      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004592:	3218      	adds	r2, #24
24004594:	4293      	cmp	r3, r2
24004596:	d008      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
24004598:	3218      	adds	r2, #24
2400459a:	4293      	cmp	r3, r2
2400459c:	d005      	beq.n	240045aa <HAL_DMA_Start_IT+0x276>
2400459e:	681a      	ldr	r2, [r3, #0]
240045a0:	f042 0201 	orr.w	r2, r2, #1
240045a4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
240045a6:	2000      	movs	r0, #0
240045a8:	e6dd      	b.n	24004366 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
240045aa:	681a      	ldr	r2, [r3, #0]
240045ac:	f042 0201 	orr.w	r2, r2, #1
240045b0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
240045b2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
240045b4:	e6d7      	b.n	24004366 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
240045b6:	2001      	movs	r0, #1
}
240045b8:	4770      	bx	lr
  __HAL_LOCK(hdma);
240045ba:	2002      	movs	r0, #2
240045bc:	e6d3      	b.n	24004366 <HAL_DMA_Start_IT+0x32>
240045be:	bf00      	nop
240045c0:	40020010 	.word	0x40020010
240045c4:	40020028 	.word	0x40020028
240045c8:	58025408 	.word	0x58025408

240045cc <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
240045cc:	2800      	cmp	r0, #0
240045ce:	f000 8129 	beq.w	24004824 <HAL_DMA_Abort_IT+0x258>
{
240045d2:	b508      	push	{r3, lr}
240045d4:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
240045d6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
240045da:	b2db      	uxtb	r3, r3
240045dc:	2b02      	cmp	r3, #2
240045de:	d003      	beq.n	240045e8 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240045e0:	2380      	movs	r3, #128	; 0x80
240045e2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
240045e4:	2001      	movs	r0, #1
}
240045e6:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240045e8:	6803      	ldr	r3, [r0, #0]
240045ea:	4890      	ldr	r0, [pc, #576]	; (2400482c <HAL_DMA_Abort_IT+0x260>)
240045ec:	4990      	ldr	r1, [pc, #576]	; (24004830 <HAL_DMA_Abort_IT+0x264>)
240045ee:	428b      	cmp	r3, r1
240045f0:	bf18      	it	ne
240045f2:	4283      	cmpne	r3, r0
240045f4:	bf0c      	ite	eq
240045f6:	2101      	moveq	r1, #1
240045f8:	2100      	movne	r1, #0
240045fa:	d066      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
240045fc:	3030      	adds	r0, #48	; 0x30
240045fe:	4283      	cmp	r3, r0
24004600:	d063      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004602:	3018      	adds	r0, #24
24004604:	4283      	cmp	r3, r0
24004606:	d060      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004608:	3018      	adds	r0, #24
2400460a:	4283      	cmp	r3, r0
2400460c:	d05d      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
2400460e:	3018      	adds	r0, #24
24004610:	4283      	cmp	r3, r0
24004612:	d05a      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004614:	3018      	adds	r0, #24
24004616:	4283      	cmp	r3, r0
24004618:	d057      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
2400461a:	3018      	adds	r0, #24
2400461c:	4283      	cmp	r3, r0
2400461e:	d054      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004620:	f500 7056 	add.w	r0, r0, #856	; 0x358
24004624:	4283      	cmp	r3, r0
24004626:	d050      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004628:	3018      	adds	r0, #24
2400462a:	4283      	cmp	r3, r0
2400462c:	d04d      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
2400462e:	3018      	adds	r0, #24
24004630:	4283      	cmp	r3, r0
24004632:	d04a      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004634:	3018      	adds	r0, #24
24004636:	4283      	cmp	r3, r0
24004638:	d047      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
2400463a:	3018      	adds	r0, #24
2400463c:	4283      	cmp	r3, r0
2400463e:	d044      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004640:	3018      	adds	r0, #24
24004642:	4283      	cmp	r3, r0
24004644:	d041      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
24004646:	3018      	adds	r0, #24
24004648:	4283      	cmp	r3, r0
2400464a:	d03e      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
2400464c:	3018      	adds	r0, #24
2400464e:	4283      	cmp	r3, r0
24004650:	d03b      	beq.n	240046ca <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24004652:	6819      	ldr	r1, [r3, #0]
24004654:	f021 010e 	bic.w	r1, r1, #14
24004658:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
2400465a:	6813      	ldr	r3, [r2, #0]
2400465c:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
24004660:	4973      	ldr	r1, [pc, #460]	; (24004830 <HAL_DMA_Abort_IT+0x264>)
24004662:	428b      	cmp	r3, r1
24004664:	bf18      	it	ne
24004666:	4283      	cmpne	r3, r0
24004668:	d06a      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
2400466a:	4972      	ldr	r1, [pc, #456]	; (24004834 <HAL_DMA_Abort_IT+0x268>)
2400466c:	428b      	cmp	r3, r1
2400466e:	d067      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
24004670:	3118      	adds	r1, #24
24004672:	428b      	cmp	r3, r1
24004674:	d064      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
24004676:	3118      	adds	r1, #24
24004678:	428b      	cmp	r3, r1
2400467a:	d061      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
2400467c:	3118      	adds	r1, #24
2400467e:	428b      	cmp	r3, r1
24004680:	d05e      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
24004682:	3118      	adds	r1, #24
24004684:	428b      	cmp	r3, r1
24004686:	d05b      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
24004688:	3118      	adds	r1, #24
2400468a:	428b      	cmp	r3, r1
2400468c:	d058      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
2400468e:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004692:	428b      	cmp	r3, r1
24004694:	d054      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
24004696:	3118      	adds	r1, #24
24004698:	428b      	cmp	r3, r1
2400469a:	d051      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
2400469c:	3118      	adds	r1, #24
2400469e:	428b      	cmp	r3, r1
240046a0:	d04e      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
240046a2:	3118      	adds	r1, #24
240046a4:	428b      	cmp	r3, r1
240046a6:	d04b      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
240046a8:	3118      	adds	r1, #24
240046aa:	428b      	cmp	r3, r1
240046ac:	d048      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
240046ae:	3118      	adds	r1, #24
240046b0:	428b      	cmp	r3, r1
240046b2:	d045      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
240046b4:	3118      	adds	r1, #24
240046b6:	428b      	cmp	r3, r1
240046b8:	d042      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
240046ba:	3118      	adds	r1, #24
240046bc:	428b      	cmp	r3, r1
240046be:	d03f      	beq.n	24004740 <HAL_DMA_Abort_IT+0x174>
240046c0:	6819      	ldr	r1, [r3, #0]
240046c2:	f021 0101 	bic.w	r1, r1, #1
240046c6:	6019      	str	r1, [r3, #0]
240046c8:	e03e      	b.n	24004748 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
240046ca:	2004      	movs	r0, #4
240046cc:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
240046d0:	bb81      	cbnz	r1, 24004734 <HAL_DMA_Abort_IT+0x168>
240046d2:	4a58      	ldr	r2, [pc, #352]	; (24004834 <HAL_DMA_Abort_IT+0x268>)
240046d4:	4293      	cmp	r3, r2
240046d6:	d02d      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046d8:	3218      	adds	r2, #24
240046da:	4293      	cmp	r3, r2
240046dc:	d02a      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046de:	3218      	adds	r2, #24
240046e0:	4293      	cmp	r3, r2
240046e2:	d027      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046e4:	3218      	adds	r2, #24
240046e6:	4293      	cmp	r3, r2
240046e8:	d024      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046ea:	3218      	adds	r2, #24
240046ec:	4293      	cmp	r3, r2
240046ee:	d021      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046f0:	3218      	adds	r2, #24
240046f2:	4293      	cmp	r3, r2
240046f4:	d01e      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046f6:	f502 7256 	add.w	r2, r2, #856	; 0x358
240046fa:	4293      	cmp	r3, r2
240046fc:	d01a      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
240046fe:	3218      	adds	r2, #24
24004700:	4293      	cmp	r3, r2
24004702:	d017      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
24004704:	3218      	adds	r2, #24
24004706:	4293      	cmp	r3, r2
24004708:	d014      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
2400470a:	3218      	adds	r2, #24
2400470c:	4293      	cmp	r3, r2
2400470e:	d011      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
24004710:	3218      	adds	r2, #24
24004712:	4293      	cmp	r3, r2
24004714:	d00e      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
24004716:	3218      	adds	r2, #24
24004718:	4293      	cmp	r3, r2
2400471a:	d00b      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
2400471c:	3218      	adds	r2, #24
2400471e:	4293      	cmp	r3, r2
24004720:	d008      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
24004722:	3218      	adds	r2, #24
24004724:	4293      	cmp	r3, r2
24004726:	d005      	beq.n	24004734 <HAL_DMA_Abort_IT+0x168>
24004728:	681a      	ldr	r2, [r3, #0]
2400472a:	f022 0201 	bic.w	r2, r2, #1
2400472e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
24004730:	2000      	movs	r0, #0
24004732:	e758      	b.n	240045e6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
24004734:	681a      	ldr	r2, [r3, #0]
24004736:	f022 0201 	bic.w	r2, r2, #1
2400473a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
2400473c:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
2400473e:	e752      	b.n	240045e6 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
24004740:	6819      	ldr	r1, [r3, #0]
24004742:	f021 0101 	bic.w	r1, r1, #1
24004746:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004748:	6813      	ldr	r3, [r2, #0]
2400474a:	4838      	ldr	r0, [pc, #224]	; (2400482c <HAL_DMA_Abort_IT+0x260>)
2400474c:	4938      	ldr	r1, [pc, #224]	; (24004830 <HAL_DMA_Abort_IT+0x264>)
2400474e:	428b      	cmp	r3, r1
24004750:	bf18      	it	ne
24004752:	4283      	cmpne	r3, r0
24004754:	d042      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004756:	3118      	adds	r1, #24
24004758:	428b      	cmp	r3, r1
2400475a:	d03f      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
2400475c:	3118      	adds	r1, #24
2400475e:	428b      	cmp	r3, r1
24004760:	d03c      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004762:	3118      	adds	r1, #24
24004764:	428b      	cmp	r3, r1
24004766:	d039      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004768:	3118      	adds	r1, #24
2400476a:	428b      	cmp	r3, r1
2400476c:	d036      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
2400476e:	3118      	adds	r1, #24
24004770:	428b      	cmp	r3, r1
24004772:	d033      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004774:	3118      	adds	r1, #24
24004776:	428b      	cmp	r3, r1
24004778:	d030      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
2400477a:	f501 7156 	add.w	r1, r1, #856	; 0x358
2400477e:	428b      	cmp	r3, r1
24004780:	d02c      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004782:	3118      	adds	r1, #24
24004784:	428b      	cmp	r3, r1
24004786:	d029      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004788:	3118      	adds	r1, #24
2400478a:	428b      	cmp	r3, r1
2400478c:	d026      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
2400478e:	3118      	adds	r1, #24
24004790:	428b      	cmp	r3, r1
24004792:	d023      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
24004794:	3118      	adds	r1, #24
24004796:	428b      	cmp	r3, r1
24004798:	d020      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
2400479a:	3118      	adds	r1, #24
2400479c:	428b      	cmp	r3, r1
2400479e:	d01d      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047a0:	3118      	adds	r1, #24
240047a2:	428b      	cmp	r3, r1
240047a4:	d01a      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047a6:	3118      	adds	r1, #24
240047a8:	428b      	cmp	r3, r1
240047aa:	d017      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047ac:	4922      	ldr	r1, [pc, #136]	; (24004838 <HAL_DMA_Abort_IT+0x26c>)
240047ae:	428b      	cmp	r3, r1
240047b0:	d014      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047b2:	3114      	adds	r1, #20
240047b4:	428b      	cmp	r3, r1
240047b6:	d011      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047b8:	3114      	adds	r1, #20
240047ba:	428b      	cmp	r3, r1
240047bc:	d00e      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047be:	3114      	adds	r1, #20
240047c0:	428b      	cmp	r3, r1
240047c2:	d00b      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047c4:	3114      	adds	r1, #20
240047c6:	428b      	cmp	r3, r1
240047c8:	d008      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047ca:	3114      	adds	r1, #20
240047cc:	428b      	cmp	r3, r1
240047ce:	d005      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047d0:	3114      	adds	r1, #20
240047d2:	428b      	cmp	r3, r1
240047d4:	d002      	beq.n	240047dc <HAL_DMA_Abort_IT+0x210>
240047d6:	3114      	adds	r1, #20
240047d8:	428b      	cmp	r3, r1
240047da:	d117      	bne.n	2400480c <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240047dc:	6e11      	ldr	r1, [r2, #96]	; 0x60
240047de:	680b      	ldr	r3, [r1, #0]
240047e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240047e4:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240047e6:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240047e8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
240047ea:	f003 011f 	and.w	r1, r3, #31
240047ee:	2301      	movs	r3, #1
240047f0:	408b      	lsls	r3, r1
240047f2:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240047f4:	6e53      	ldr	r3, [r2, #100]	; 0x64
240047f6:	6e91      	ldr	r1, [r2, #104]	; 0x68
240047f8:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
240047fa:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
240047fc:	b133      	cbz	r3, 2400480c <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240047fe:	6819      	ldr	r1, [r3, #0]
24004800:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24004804:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004806:	6f13      	ldr	r3, [r2, #112]	; 0x70
24004808:	6f51      	ldr	r1, [r2, #116]	; 0x74
2400480a:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
2400480c:	2301      	movs	r3, #1
2400480e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24004812:	2300      	movs	r3, #0
24004814:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24004818:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400481a:	b12b      	cbz	r3, 24004828 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
2400481c:	4610      	mov	r0, r2
2400481e:	4798      	blx	r3
  return HAL_OK;
24004820:	2000      	movs	r0, #0
24004822:	e6e0      	b.n	240045e6 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
24004824:	2001      	movs	r0, #1
}
24004826:	4770      	bx	lr
  return HAL_OK;
24004828:	2000      	movs	r0, #0
2400482a:	e6dc      	b.n	240045e6 <HAL_DMA_Abort_IT+0x1a>
2400482c:	40020010 	.word	0x40020010
24004830:	40020028 	.word	0x40020028
24004834:	40020040 	.word	0x40020040
24004838:	58025408 	.word	0x58025408

2400483c <HAL_DMA_IRQHandler>:
{
2400483c:	b5f0      	push	{r4, r5, r6, r7, lr}
2400483e:	b083      	sub	sp, #12
24004840:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
24004842:	2300      	movs	r3, #0
24004844:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
24004846:	4b7d      	ldr	r3, [pc, #500]	; (24004a3c <HAL_DMA_IRQHandler+0x200>)
24004848:	681d      	ldr	r5, [r3, #0]
2400484a:	4b7d      	ldr	r3, [pc, #500]	; (24004a40 <HAL_DMA_IRQHandler+0x204>)
2400484c:	fba3 3505 	umull	r3, r5, r3, r5
24004850:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24004852:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
24004854:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
24004856:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400485a:	6803      	ldr	r3, [r0, #0]
2400485c:	4979      	ldr	r1, [pc, #484]	; (24004a44 <HAL_DMA_IRQHandler+0x208>)
2400485e:	487a      	ldr	r0, [pc, #488]	; (24004a48 <HAL_DMA_IRQHandler+0x20c>)
24004860:	4283      	cmp	r3, r0
24004862:	bf18      	it	ne
24004864:	428b      	cmpne	r3, r1
24004866:	bf0c      	ite	eq
24004868:	2001      	moveq	r0, #1
2400486a:	2000      	movne	r0, #0
2400486c:	d061      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
2400486e:	4a77      	ldr	r2, [pc, #476]	; (24004a4c <HAL_DMA_IRQHandler+0x210>)
24004870:	4293      	cmp	r3, r2
24004872:	d05e      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
24004874:	3218      	adds	r2, #24
24004876:	4293      	cmp	r3, r2
24004878:	d05b      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
2400487a:	3218      	adds	r2, #24
2400487c:	4293      	cmp	r3, r2
2400487e:	d058      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
24004880:	3218      	adds	r2, #24
24004882:	4293      	cmp	r3, r2
24004884:	d055      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
24004886:	3218      	adds	r2, #24
24004888:	4293      	cmp	r3, r2
2400488a:	d052      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
2400488c:	3218      	adds	r2, #24
2400488e:	4293      	cmp	r3, r2
24004890:	d04f      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
24004892:	f502 7256 	add.w	r2, r2, #856	; 0x358
24004896:	4293      	cmp	r3, r2
24004898:	d04b      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
2400489a:	3218      	adds	r2, #24
2400489c:	4293      	cmp	r3, r2
2400489e:	d048      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
240048a0:	3218      	adds	r2, #24
240048a2:	4293      	cmp	r3, r2
240048a4:	d045      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
240048a6:	3218      	adds	r2, #24
240048a8:	4293      	cmp	r3, r2
240048aa:	d042      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
240048ac:	3218      	adds	r2, #24
240048ae:	4293      	cmp	r3, r2
240048b0:	d03f      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
240048b2:	3218      	adds	r2, #24
240048b4:	4293      	cmp	r3, r2
240048b6:	d03c      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
240048b8:	3218      	adds	r2, #24
240048ba:	4293      	cmp	r3, r2
240048bc:	d039      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
240048be:	3218      	adds	r2, #24
240048c0:	4293      	cmp	r3, r2
240048c2:	d036      	beq.n	24004932 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
240048c4:	4962      	ldr	r1, [pc, #392]	; (24004a50 <HAL_DMA_IRQHandler+0x214>)
240048c6:	4a63      	ldr	r2, [pc, #396]	; (24004a54 <HAL_DMA_IRQHandler+0x218>)
240048c8:	4293      	cmp	r3, r2
240048ca:	bf18      	it	ne
240048cc:	428b      	cmpne	r3, r1
240048ce:	d012      	beq.n	240048f6 <HAL_DMA_IRQHandler+0xba>
240048d0:	4a61      	ldr	r2, [pc, #388]	; (24004a58 <HAL_DMA_IRQHandler+0x21c>)
240048d2:	4293      	cmp	r3, r2
240048d4:	d00f      	beq.n	240048f6 <HAL_DMA_IRQHandler+0xba>
240048d6:	3214      	adds	r2, #20
240048d8:	4293      	cmp	r3, r2
240048da:	d00c      	beq.n	240048f6 <HAL_DMA_IRQHandler+0xba>
240048dc:	3214      	adds	r2, #20
240048de:	4293      	cmp	r3, r2
240048e0:	d009      	beq.n	240048f6 <HAL_DMA_IRQHandler+0xba>
240048e2:	3214      	adds	r2, #20
240048e4:	4293      	cmp	r3, r2
240048e6:	d006      	beq.n	240048f6 <HAL_DMA_IRQHandler+0xba>
240048e8:	3214      	adds	r2, #20
240048ea:	4293      	cmp	r3, r2
240048ec:	d003      	beq.n	240048f6 <HAL_DMA_IRQHandler+0xba>
240048ee:	3214      	adds	r2, #20
240048f0:	4293      	cmp	r3, r2
240048f2:	f040 8261 	bne.w	24004db8 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
240048f6:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
240048f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240048fa:	f001 011f 	and.w	r1, r1, #31
240048fe:	2004      	movs	r0, #4
24004900:	4088      	lsls	r0, r1
24004902:	ea10 0f0c 	tst.w	r0, ip
24004906:	f000 82a7 	beq.w	24004e58 <HAL_DMA_IRQHandler+0x61c>
2400490a:	f012 0f04 	tst.w	r2, #4
2400490e:	f000 82a3 	beq.w	24004e58 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24004912:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24004914:	f412 4f00 	tst.w	r2, #32768	; 0x8000
24004918:	f000 825a 	beq.w	24004dd0 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
2400491c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
24004920:	f040 8250 	bne.w	24004dc4 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
24004924:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24004926:	2b00      	cmp	r3, #0
24004928:	f000 8246 	beq.w	24004db8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
2400492c:	4620      	mov	r0, r4
2400492e:	4798      	blx	r3
24004930:	e242      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004932:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004934:	f002 011f 	and.w	r1, r2, #31
24004938:	2208      	movs	r2, #8
2400493a:	408a      	lsls	r2, r1
2400493c:	4232      	tst	r2, r6
2400493e:	d041      	beq.n	240049c4 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24004940:	bb70      	cbnz	r0, 240049a0 <HAL_DMA_IRQHandler+0x164>
24004942:	4a42      	ldr	r2, [pc, #264]	; (24004a4c <HAL_DMA_IRQHandler+0x210>)
24004944:	4293      	cmp	r3, r2
24004946:	d02b      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004948:	3218      	adds	r2, #24
2400494a:	4293      	cmp	r3, r2
2400494c:	d028      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
2400494e:	3218      	adds	r2, #24
24004950:	4293      	cmp	r3, r2
24004952:	d025      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004954:	3218      	adds	r2, #24
24004956:	4293      	cmp	r3, r2
24004958:	d022      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
2400495a:	3218      	adds	r2, #24
2400495c:	4293      	cmp	r3, r2
2400495e:	d01f      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004960:	3218      	adds	r2, #24
24004962:	4293      	cmp	r3, r2
24004964:	d01c      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004966:	f502 7256 	add.w	r2, r2, #856	; 0x358
2400496a:	4293      	cmp	r3, r2
2400496c:	d018      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
2400496e:	3218      	adds	r2, #24
24004970:	4293      	cmp	r3, r2
24004972:	d015      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004974:	3218      	adds	r2, #24
24004976:	4293      	cmp	r3, r2
24004978:	d012      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
2400497a:	3218      	adds	r2, #24
2400497c:	4293      	cmp	r3, r2
2400497e:	d00f      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004980:	3218      	adds	r2, #24
24004982:	4293      	cmp	r3, r2
24004984:	d00c      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004986:	3218      	adds	r2, #24
24004988:	4293      	cmp	r3, r2
2400498a:	d009      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
2400498c:	3218      	adds	r2, #24
2400498e:	4293      	cmp	r3, r2
24004990:	d006      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004992:	3218      	adds	r2, #24
24004994:	4293      	cmp	r3, r2
24004996:	d003      	beq.n	240049a0 <HAL_DMA_IRQHandler+0x164>
24004998:	681a      	ldr	r2, [r3, #0]
2400499a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
2400499e:	e002      	b.n	240049a6 <HAL_DMA_IRQHandler+0x16a>
240049a0:	681a      	ldr	r2, [r3, #0]
240049a2:	f3c2 0280 	ubfx	r2, r2, #2, #1
240049a6:	b16a      	cbz	r2, 240049c4 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
240049a8:	681a      	ldr	r2, [r3, #0]
240049aa:	f022 0204 	bic.w	r2, r2, #4
240049ae:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
240049b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240049b2:	f003 021f 	and.w	r2, r3, #31
240049b6:	2308      	movs	r3, #8
240049b8:	4093      	lsls	r3, r2
240049ba:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240049bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
240049be:	f043 0301 	orr.w	r3, r3, #1
240049c2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240049c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240049c6:	f002 021f 	and.w	r2, r2, #31
240049ca:	fa26 f302 	lsr.w	r3, r6, r2
240049ce:	f013 0f01 	tst.w	r3, #1
240049d2:	d047      	beq.n	24004a64 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240049d4:	6823      	ldr	r3, [r4, #0]
240049d6:	481b      	ldr	r0, [pc, #108]	; (24004a44 <HAL_DMA_IRQHandler+0x208>)
240049d8:	491b      	ldr	r1, [pc, #108]	; (24004a48 <HAL_DMA_IRQHandler+0x20c>)
240049da:	428b      	cmp	r3, r1
240049dc:	bf18      	it	ne
240049de:	4283      	cmpne	r3, r0
240049e0:	d03c      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
240049e2:	3118      	adds	r1, #24
240049e4:	428b      	cmp	r3, r1
240049e6:	d039      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
240049e8:	3118      	adds	r1, #24
240049ea:	428b      	cmp	r3, r1
240049ec:	d036      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
240049ee:	3118      	adds	r1, #24
240049f0:	428b      	cmp	r3, r1
240049f2:	d033      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
240049f4:	3118      	adds	r1, #24
240049f6:	428b      	cmp	r3, r1
240049f8:	d030      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
240049fa:	3118      	adds	r1, #24
240049fc:	428b      	cmp	r3, r1
240049fe:	d02d      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a00:	3118      	adds	r1, #24
24004a02:	428b      	cmp	r3, r1
24004a04:	d02a      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a06:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004a0a:	428b      	cmp	r3, r1
24004a0c:	d026      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a0e:	3118      	adds	r1, #24
24004a10:	428b      	cmp	r3, r1
24004a12:	d023      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a14:	3118      	adds	r1, #24
24004a16:	428b      	cmp	r3, r1
24004a18:	d020      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a1a:	3118      	adds	r1, #24
24004a1c:	428b      	cmp	r3, r1
24004a1e:	d01d      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a20:	3118      	adds	r1, #24
24004a22:	428b      	cmp	r3, r1
24004a24:	d01a      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a26:	3118      	adds	r1, #24
24004a28:	428b      	cmp	r3, r1
24004a2a:	d017      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a2c:	3118      	adds	r1, #24
24004a2e:	428b      	cmp	r3, r1
24004a30:	d014      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a32:	3118      	adds	r1, #24
24004a34:	428b      	cmp	r3, r1
24004a36:	d011      	beq.n	24004a5c <HAL_DMA_IRQHandler+0x220>
24004a38:	681b      	ldr	r3, [r3, #0]
24004a3a:	e013      	b.n	24004a64 <HAL_DMA_IRQHandler+0x228>
24004a3c:	20000750 	.word	0x20000750
24004a40:	1b4e81b5 	.word	0x1b4e81b5
24004a44:	40020010 	.word	0x40020010
24004a48:	40020028 	.word	0x40020028
24004a4c:	40020040 	.word	0x40020040
24004a50:	58025408 	.word	0x58025408
24004a54:	5802541c 	.word	0x5802541c
24004a58:	58025430 	.word	0x58025430
24004a5c:	695b      	ldr	r3, [r3, #20]
24004a5e:	f013 0f80 	tst.w	r3, #128	; 0x80
24004a62:	d13b      	bne.n	24004adc <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004a64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004a66:	f003 031f 	and.w	r3, r3, #31
24004a6a:	2204      	movs	r2, #4
24004a6c:	fa02 f303 	lsl.w	r3, r2, r3
24004a70:	4233      	tst	r3, r6
24004a72:	d040      	beq.n	24004af6 <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24004a74:	6822      	ldr	r2, [r4, #0]
24004a76:	4896      	ldr	r0, [pc, #600]	; (24004cd0 <HAL_DMA_IRQHandler+0x494>)
24004a78:	4996      	ldr	r1, [pc, #600]	; (24004cd4 <HAL_DMA_IRQHandler+0x498>)
24004a7a:	428a      	cmp	r2, r1
24004a7c:	bf18      	it	ne
24004a7e:	4282      	cmpne	r2, r0
24004a80:	d035      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004a82:	3118      	adds	r1, #24
24004a84:	428a      	cmp	r2, r1
24004a86:	d032      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004a88:	3118      	adds	r1, #24
24004a8a:	428a      	cmp	r2, r1
24004a8c:	d02f      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004a8e:	3118      	adds	r1, #24
24004a90:	428a      	cmp	r2, r1
24004a92:	d02c      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004a94:	3118      	adds	r1, #24
24004a96:	428a      	cmp	r2, r1
24004a98:	d029      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004a9a:	3118      	adds	r1, #24
24004a9c:	428a      	cmp	r2, r1
24004a9e:	d026      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004aa0:	3118      	adds	r1, #24
24004aa2:	428a      	cmp	r2, r1
24004aa4:	d023      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004aa6:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004aaa:	428a      	cmp	r2, r1
24004aac:	d01f      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004aae:	3118      	adds	r1, #24
24004ab0:	428a      	cmp	r2, r1
24004ab2:	d01c      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004ab4:	3118      	adds	r1, #24
24004ab6:	428a      	cmp	r2, r1
24004ab8:	d019      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004aba:	3118      	adds	r1, #24
24004abc:	428a      	cmp	r2, r1
24004abe:	d016      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004ac0:	3118      	adds	r1, #24
24004ac2:	428a      	cmp	r2, r1
24004ac4:	d013      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004ac6:	3118      	adds	r1, #24
24004ac8:	428a      	cmp	r2, r1
24004aca:	d010      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004acc:	3118      	adds	r1, #24
24004ace:	428a      	cmp	r2, r1
24004ad0:	d00d      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004ad2:	3118      	adds	r1, #24
24004ad4:	428a      	cmp	r2, r1
24004ad6:	d00a      	beq.n	24004aee <HAL_DMA_IRQHandler+0x2b2>
24004ad8:	6813      	ldr	r3, [r2, #0]
24004ada:	e00c      	b.n	24004af6 <HAL_DMA_IRQHandler+0x2ba>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004adc:	2301      	movs	r3, #1
24004ade:	fa03 f202 	lsl.w	r2, r3, r2
24004ae2:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24004ae4:	6d63      	ldr	r3, [r4, #84]	; 0x54
24004ae6:	f043 0302 	orr.w	r3, r3, #2
24004aea:	6563      	str	r3, [r4, #84]	; 0x54
24004aec:	e7ba      	b.n	24004a64 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24004aee:	6812      	ldr	r2, [r2, #0]
24004af0:	f012 0f02 	tst.w	r2, #2
24004af4:	d13d      	bne.n	24004b72 <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004af6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004af8:	f003 031f 	and.w	r3, r3, #31
24004afc:	2210      	movs	r2, #16
24004afe:	fa02 f303 	lsl.w	r3, r2, r3
24004b02:	4233      	tst	r3, r6
24004b04:	d05f      	beq.n	24004bc6 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24004b06:	6822      	ldr	r2, [r4, #0]
24004b08:	4871      	ldr	r0, [pc, #452]	; (24004cd0 <HAL_DMA_IRQHandler+0x494>)
24004b0a:	4972      	ldr	r1, [pc, #456]	; (24004cd4 <HAL_DMA_IRQHandler+0x498>)
24004b0c:	428a      	cmp	r2, r1
24004b0e:	bf18      	it	ne
24004b10:	4282      	cmpne	r2, r0
24004b12:	d034      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b14:	3118      	adds	r1, #24
24004b16:	428a      	cmp	r2, r1
24004b18:	d031      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b1a:	3118      	adds	r1, #24
24004b1c:	428a      	cmp	r2, r1
24004b1e:	d02e      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b20:	3118      	adds	r1, #24
24004b22:	428a      	cmp	r2, r1
24004b24:	d02b      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b26:	3118      	adds	r1, #24
24004b28:	428a      	cmp	r2, r1
24004b2a:	d028      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b2c:	3118      	adds	r1, #24
24004b2e:	428a      	cmp	r2, r1
24004b30:	d025      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b32:	3118      	adds	r1, #24
24004b34:	428a      	cmp	r2, r1
24004b36:	d022      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b38:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004b3c:	428a      	cmp	r2, r1
24004b3e:	d01e      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b40:	3118      	adds	r1, #24
24004b42:	428a      	cmp	r2, r1
24004b44:	d01b      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b46:	3118      	adds	r1, #24
24004b48:	428a      	cmp	r2, r1
24004b4a:	d018      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b4c:	3118      	adds	r1, #24
24004b4e:	428a      	cmp	r2, r1
24004b50:	d015      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b52:	3118      	adds	r1, #24
24004b54:	428a      	cmp	r2, r1
24004b56:	d012      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b58:	3118      	adds	r1, #24
24004b5a:	428a      	cmp	r2, r1
24004b5c:	d00f      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b5e:	3118      	adds	r1, #24
24004b60:	428a      	cmp	r2, r1
24004b62:	d00c      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b64:	3118      	adds	r1, #24
24004b66:	428a      	cmp	r2, r1
24004b68:	d009      	beq.n	24004b7e <HAL_DMA_IRQHandler+0x342>
24004b6a:	6812      	ldr	r2, [r2, #0]
24004b6c:	f3c2 0280 	ubfx	r2, r2, #2, #1
24004b70:	e008      	b.n	24004b84 <HAL_DMA_IRQHandler+0x348>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004b72:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24004b74:	6d63      	ldr	r3, [r4, #84]	; 0x54
24004b76:	f043 0304 	orr.w	r3, r3, #4
24004b7a:	6563      	str	r3, [r4, #84]	; 0x54
24004b7c:	e7bb      	b.n	24004af6 <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24004b7e:	6812      	ldr	r2, [r2, #0]
24004b80:	f3c2 02c0 	ubfx	r2, r2, #3, #1
24004b84:	b1fa      	cbz	r2, 24004bc6 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24004b86:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24004b88:	6823      	ldr	r3, [r4, #0]
24004b8a:	681a      	ldr	r2, [r3, #0]
24004b8c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
24004b90:	d00d      	beq.n	24004bae <HAL_DMA_IRQHandler+0x372>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24004b92:	681b      	ldr	r3, [r3, #0]
24004b94:	f413 2f00 	tst.w	r3, #524288	; 0x80000
24004b98:	d104      	bne.n	24004ba4 <HAL_DMA_IRQHandler+0x368>
            if(hdma->XferHalfCpltCallback != NULL)
24004b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
24004b9c:	b19b      	cbz	r3, 24004bc6 <HAL_DMA_IRQHandler+0x38a>
              hdma->XferHalfCpltCallback(hdma);
24004b9e:	4620      	mov	r0, r4
24004ba0:	4798      	blx	r3
24004ba2:	e010      	b.n	24004bc6 <HAL_DMA_IRQHandler+0x38a>
            if(hdma->XferM1HalfCpltCallback != NULL)
24004ba4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24004ba6:	b173      	cbz	r3, 24004bc6 <HAL_DMA_IRQHandler+0x38a>
              hdma->XferM1HalfCpltCallback(hdma);
24004ba8:	4620      	mov	r0, r4
24004baa:	4798      	blx	r3
24004bac:	e00b      	b.n	24004bc6 <HAL_DMA_IRQHandler+0x38a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24004bae:	681a      	ldr	r2, [r3, #0]
24004bb0:	f412 7f80 	tst.w	r2, #256	; 0x100
24004bb4:	d103      	bne.n	24004bbe <HAL_DMA_IRQHandler+0x382>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24004bb6:	681a      	ldr	r2, [r3, #0]
24004bb8:	f022 0208 	bic.w	r2, r2, #8
24004bbc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24004bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
24004bc0:	b10b      	cbz	r3, 24004bc6 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferHalfCpltCallback(hdma);
24004bc2:	4620      	mov	r0, r4
24004bc4:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004bc6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004bc8:	f003 031f 	and.w	r3, r3, #31
24004bcc:	2220      	movs	r2, #32
24004bce:	fa02 f303 	lsl.w	r3, r2, r3
24004bd2:	4233      	tst	r3, r6
24004bd4:	f000 8092 	beq.w	24004cfc <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24004bd8:	6822      	ldr	r2, [r4, #0]
24004bda:	483d      	ldr	r0, [pc, #244]	; (24004cd0 <HAL_DMA_IRQHandler+0x494>)
24004bdc:	493d      	ldr	r1, [pc, #244]	; (24004cd4 <HAL_DMA_IRQHandler+0x498>)
24004bde:	428a      	cmp	r2, r1
24004be0:	bf18      	it	ne
24004be2:	4282      	cmpne	r2, r0
24004be4:	d02e      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004be6:	3118      	adds	r1, #24
24004be8:	428a      	cmp	r2, r1
24004bea:	d02b      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004bec:	3118      	adds	r1, #24
24004bee:	428a      	cmp	r2, r1
24004bf0:	d028      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004bf2:	3118      	adds	r1, #24
24004bf4:	428a      	cmp	r2, r1
24004bf6:	d025      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004bf8:	3118      	adds	r1, #24
24004bfa:	428a      	cmp	r2, r1
24004bfc:	d022      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004bfe:	3118      	adds	r1, #24
24004c00:	428a      	cmp	r2, r1
24004c02:	d01f      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c04:	3118      	adds	r1, #24
24004c06:	428a      	cmp	r2, r1
24004c08:	d01c      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c0a:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004c0e:	428a      	cmp	r2, r1
24004c10:	d018      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c12:	3118      	adds	r1, #24
24004c14:	428a      	cmp	r2, r1
24004c16:	d015      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c18:	3118      	adds	r1, #24
24004c1a:	428a      	cmp	r2, r1
24004c1c:	d012      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c1e:	3118      	adds	r1, #24
24004c20:	428a      	cmp	r2, r1
24004c22:	d00f      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c24:	3118      	adds	r1, #24
24004c26:	428a      	cmp	r2, r1
24004c28:	d00c      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c2a:	3118      	adds	r1, #24
24004c2c:	428a      	cmp	r2, r1
24004c2e:	d009      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c30:	3118      	adds	r1, #24
24004c32:	428a      	cmp	r2, r1
24004c34:	d006      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c36:	3118      	adds	r1, #24
24004c38:	428a      	cmp	r2, r1
24004c3a:	d003      	beq.n	24004c44 <HAL_DMA_IRQHandler+0x408>
24004c3c:	6812      	ldr	r2, [r2, #0]
24004c3e:	f3c2 0240 	ubfx	r2, r2, #1, #1
24004c42:	e002      	b.n	24004c4a <HAL_DMA_IRQHandler+0x40e>
24004c44:	6812      	ldr	r2, [r2, #0]
24004c46:	f3c2 1200 	ubfx	r2, r2, #4, #1
24004c4a:	2a00      	cmp	r2, #0
24004c4c:	d056      	beq.n	24004cfc <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24004c4e:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24004c50:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
24004c54:	b2db      	uxtb	r3, r3
24004c56:	2b04      	cmp	r3, #4
24004c58:	d00e      	beq.n	24004c78 <HAL_DMA_IRQHandler+0x43c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24004c5a:	6823      	ldr	r3, [r4, #0]
24004c5c:	681a      	ldr	r2, [r3, #0]
24004c5e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
24004c62:	d039      	beq.n	24004cd8 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24004c64:	681b      	ldr	r3, [r3, #0]
24004c66:	f413 2f00 	tst.w	r3, #524288	; 0x80000
24004c6a:	d12c      	bne.n	24004cc6 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
24004c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
24004c6e:	2b00      	cmp	r3, #0
24004c70:	d044      	beq.n	24004cfc <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
24004c72:	4620      	mov	r0, r4
24004c74:	4798      	blx	r3
24004c76:	e041      	b.n	24004cfc <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24004c78:	6822      	ldr	r2, [r4, #0]
24004c7a:	6813      	ldr	r3, [r2, #0]
24004c7c:	f023 0316 	bic.w	r3, r3, #22
24004c80:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24004c82:	6822      	ldr	r2, [r4, #0]
24004c84:	6953      	ldr	r3, [r2, #20]
24004c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24004c8a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24004c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
24004c8e:	b1b3      	cbz	r3, 24004cbe <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24004c90:	6822      	ldr	r2, [r4, #0]
24004c92:	6813      	ldr	r3, [r2, #0]
24004c94:	f023 0308 	bic.w	r3, r3, #8
24004c98:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004c9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004c9c:	f003 021f 	and.w	r2, r3, #31
24004ca0:	233f      	movs	r3, #63	; 0x3f
24004ca2:	4093      	lsls	r3, r2
24004ca4:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
24004ca6:	2301      	movs	r3, #1
24004ca8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24004cac:	2300      	movs	r3, #0
24004cae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24004cb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
24004cb4:	2b00      	cmp	r3, #0
24004cb6:	d07f      	beq.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
24004cb8:	4620      	mov	r0, r4
24004cba:	4798      	blx	r3
          return;
24004cbc:	e07c      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24004cbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24004cc0:	2b00      	cmp	r3, #0
24004cc2:	d1e5      	bne.n	24004c90 <HAL_DMA_IRQHandler+0x454>
24004cc4:	e7e9      	b.n	24004c9a <HAL_DMA_IRQHandler+0x45e>
            if(hdma->XferCpltCallback != NULL)
24004cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24004cc8:	b1c3      	cbz	r3, 24004cfc <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
24004cca:	4620      	mov	r0, r4
24004ccc:	4798      	blx	r3
24004cce:	e015      	b.n	24004cfc <HAL_DMA_IRQHandler+0x4c0>
24004cd0:	40020010 	.word	0x40020010
24004cd4:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24004cd8:	681a      	ldr	r2, [r3, #0]
24004cda:	f412 7f80 	tst.w	r2, #256	; 0x100
24004cde:	d109      	bne.n	24004cf4 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24004ce0:	681a      	ldr	r2, [r3, #0]
24004ce2:	f022 0210 	bic.w	r2, r2, #16
24004ce6:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24004ce8:	2301      	movs	r3, #1
24004cea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24004cee:	2300      	movs	r3, #0
24004cf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
24004cf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24004cf6:	b10b      	cbz	r3, 24004cfc <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
24004cf8:	4620      	mov	r0, r4
24004cfa:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24004cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
24004cfe:	2b00      	cmp	r3, #0
24004d00:	d05a      	beq.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24004d02:	6d63      	ldr	r3, [r4, #84]	; 0x54
24004d04:	f013 0f01 	tst.w	r3, #1
24004d08:	d052      	beq.n	24004db0 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
24004d0a:	2304      	movs	r3, #4
24004d0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24004d10:	6823      	ldr	r3, [r4, #0]
24004d12:	4996      	ldr	r1, [pc, #600]	; (24004f6c <HAL_DMA_IRQHandler+0x730>)
24004d14:	4a96      	ldr	r2, [pc, #600]	; (24004f70 <HAL_DMA_IRQHandler+0x734>)
24004d16:	4293      	cmp	r3, r2
24004d18:	bf18      	it	ne
24004d1a:	428b      	cmpne	r3, r1
24004d1c:	d02f      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d1e:	3218      	adds	r2, #24
24004d20:	4293      	cmp	r3, r2
24004d22:	d02c      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d24:	3218      	adds	r2, #24
24004d26:	4293      	cmp	r3, r2
24004d28:	d029      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d2a:	3218      	adds	r2, #24
24004d2c:	4293      	cmp	r3, r2
24004d2e:	d026      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d30:	3218      	adds	r2, #24
24004d32:	4293      	cmp	r3, r2
24004d34:	d023      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d36:	3218      	adds	r2, #24
24004d38:	4293      	cmp	r3, r2
24004d3a:	d020      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d3c:	3218      	adds	r2, #24
24004d3e:	4293      	cmp	r3, r2
24004d40:	d01d      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d42:	f502 7256 	add.w	r2, r2, #856	; 0x358
24004d46:	4293      	cmp	r3, r2
24004d48:	d019      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d4a:	3218      	adds	r2, #24
24004d4c:	4293      	cmp	r3, r2
24004d4e:	d016      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d50:	3218      	adds	r2, #24
24004d52:	4293      	cmp	r3, r2
24004d54:	d013      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d56:	3218      	adds	r2, #24
24004d58:	4293      	cmp	r3, r2
24004d5a:	d010      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d5c:	3218      	adds	r2, #24
24004d5e:	4293      	cmp	r3, r2
24004d60:	d00d      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d62:	3218      	adds	r2, #24
24004d64:	4293      	cmp	r3, r2
24004d66:	d00a      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d68:	3218      	adds	r2, #24
24004d6a:	4293      	cmp	r3, r2
24004d6c:	d007      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d6e:	3218      	adds	r2, #24
24004d70:	4293      	cmp	r3, r2
24004d72:	d004      	beq.n	24004d7e <HAL_DMA_IRQHandler+0x542>
24004d74:	681a      	ldr	r2, [r3, #0]
24004d76:	f022 0201 	bic.w	r2, r2, #1
24004d7a:	601a      	str	r2, [r3, #0]
24004d7c:	e003      	b.n	24004d86 <HAL_DMA_IRQHandler+0x54a>
24004d7e:	681a      	ldr	r2, [r3, #0]
24004d80:	f022 0201 	bic.w	r2, r2, #1
24004d84:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
24004d86:	9b01      	ldr	r3, [sp, #4]
24004d88:	3301      	adds	r3, #1
24004d8a:	9301      	str	r3, [sp, #4]
24004d8c:	42ab      	cmp	r3, r5
24004d8e:	d804      	bhi.n	24004d9a <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24004d90:	6823      	ldr	r3, [r4, #0]
24004d92:	681b      	ldr	r3, [r3, #0]
24004d94:	f013 0f01 	tst.w	r3, #1
24004d98:	d1f5      	bne.n	24004d86 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24004d9a:	6823      	ldr	r3, [r4, #0]
24004d9c:	681b      	ldr	r3, [r3, #0]
24004d9e:	f013 0f01 	tst.w	r3, #1
24004da2:	d00b      	beq.n	24004dbc <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
24004da4:	2303      	movs	r3, #3
24004da6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24004daa:	2300      	movs	r3, #0
24004dac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24004db0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24004db2:	b10b      	cbz	r3, 24004db8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
24004db4:	4620      	mov	r0, r4
24004db6:	4798      	blx	r3
}
24004db8:	b003      	add	sp, #12
24004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
24004dbc:	2301      	movs	r3, #1
24004dbe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
24004dc2:	e7f2      	b.n	24004daa <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
24004dc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
24004dc6:	2b00      	cmp	r3, #0
24004dc8:	d0f6      	beq.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
24004dca:	4620      	mov	r0, r4
24004dcc:	4798      	blx	r3
24004dce:	e7f3      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24004dd0:	f012 0f20 	tst.w	r2, #32
24004dd4:	d13a      	bne.n	24004e4c <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24004dd6:	6823      	ldr	r3, [r4, #0]
24004dd8:	4964      	ldr	r1, [pc, #400]	; (24004f6c <HAL_DMA_IRQHandler+0x730>)
24004dda:	4a65      	ldr	r2, [pc, #404]	; (24004f70 <HAL_DMA_IRQHandler+0x734>)
24004ddc:	4293      	cmp	r3, r2
24004dde:	bf18      	it	ne
24004de0:	428b      	cmpne	r3, r1
24004de2:	d02f      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004de4:	3218      	adds	r2, #24
24004de6:	4293      	cmp	r3, r2
24004de8:	d02c      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004dea:	3218      	adds	r2, #24
24004dec:	4293      	cmp	r3, r2
24004dee:	d029      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004df0:	3218      	adds	r2, #24
24004df2:	4293      	cmp	r3, r2
24004df4:	d026      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004df6:	3218      	adds	r2, #24
24004df8:	4293      	cmp	r3, r2
24004dfa:	d023      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004dfc:	3218      	adds	r2, #24
24004dfe:	4293      	cmp	r3, r2
24004e00:	d020      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e02:	3218      	adds	r2, #24
24004e04:	4293      	cmp	r3, r2
24004e06:	d01d      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e08:	f502 7256 	add.w	r2, r2, #856	; 0x358
24004e0c:	4293      	cmp	r3, r2
24004e0e:	d019      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e10:	3218      	adds	r2, #24
24004e12:	4293      	cmp	r3, r2
24004e14:	d016      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e16:	3218      	adds	r2, #24
24004e18:	4293      	cmp	r3, r2
24004e1a:	d013      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e1c:	3218      	adds	r2, #24
24004e1e:	4293      	cmp	r3, r2
24004e20:	d010      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e22:	3218      	adds	r2, #24
24004e24:	4293      	cmp	r3, r2
24004e26:	d00d      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e28:	3218      	adds	r2, #24
24004e2a:	4293      	cmp	r3, r2
24004e2c:	d00a      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e2e:	3218      	adds	r2, #24
24004e30:	4293      	cmp	r3, r2
24004e32:	d007      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e34:	3218      	adds	r2, #24
24004e36:	4293      	cmp	r3, r2
24004e38:	d004      	beq.n	24004e44 <HAL_DMA_IRQHandler+0x608>
24004e3a:	681a      	ldr	r2, [r3, #0]
24004e3c:	f022 0204 	bic.w	r2, r2, #4
24004e40:	601a      	str	r2, [r3, #0]
24004e42:	e003      	b.n	24004e4c <HAL_DMA_IRQHandler+0x610>
24004e44:	681a      	ldr	r2, [r3, #0]
24004e46:	f022 0208 	bic.w	r2, r2, #8
24004e4a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24004e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
24004e4e:	2b00      	cmp	r3, #0
24004e50:	d0b2      	beq.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
24004e52:	4620      	mov	r0, r4
24004e54:	4798      	blx	r3
24004e56:	e7af      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24004e58:	2002      	movs	r0, #2
24004e5a:	4088      	lsls	r0, r1
24004e5c:	ea10 0f0c 	tst.w	r0, ip
24004e60:	d060      	beq.n	24004f24 <HAL_DMA_IRQHandler+0x6e8>
24004e62:	f012 0f02 	tst.w	r2, #2
24004e66:	d05d      	beq.n	24004f24 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24004e68:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24004e6a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
24004e6e:	d00e      	beq.n	24004e8e <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24004e70:	f412 3f80 	tst.w	r2, #65536	; 0x10000
24004e74:	d105      	bne.n	24004e82 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
24004e76:	6c63      	ldr	r3, [r4, #68]	; 0x44
24004e78:	2b00      	cmp	r3, #0
24004e7a:	d09d      	beq.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
24004e7c:	4620      	mov	r0, r4
24004e7e:	4798      	blx	r3
24004e80:	e79a      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
24004e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24004e84:	2b00      	cmp	r3, #0
24004e86:	d097      	beq.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
24004e88:	4620      	mov	r0, r4
24004e8a:	4798      	blx	r3
24004e8c:	e794      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24004e8e:	f012 0f20 	tst.w	r2, #32
24004e92:	d140      	bne.n	24004f16 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24004e94:	6823      	ldr	r3, [r4, #0]
24004e96:	4935      	ldr	r1, [pc, #212]	; (24004f6c <HAL_DMA_IRQHandler+0x730>)
24004e98:	4a35      	ldr	r2, [pc, #212]	; (24004f70 <HAL_DMA_IRQHandler+0x734>)
24004e9a:	4293      	cmp	r3, r2
24004e9c:	bf18      	it	ne
24004e9e:	428b      	cmpne	r3, r1
24004ea0:	d02f      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ea2:	3218      	adds	r2, #24
24004ea4:	4293      	cmp	r3, r2
24004ea6:	d02c      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ea8:	3218      	adds	r2, #24
24004eaa:	4293      	cmp	r3, r2
24004eac:	d029      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004eae:	3218      	adds	r2, #24
24004eb0:	4293      	cmp	r3, r2
24004eb2:	d026      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004eb4:	3218      	adds	r2, #24
24004eb6:	4293      	cmp	r3, r2
24004eb8:	d023      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004eba:	3218      	adds	r2, #24
24004ebc:	4293      	cmp	r3, r2
24004ebe:	d020      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ec0:	3218      	adds	r2, #24
24004ec2:	4293      	cmp	r3, r2
24004ec4:	d01d      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ec6:	f502 7256 	add.w	r2, r2, #856	; 0x358
24004eca:	4293      	cmp	r3, r2
24004ecc:	d019      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ece:	3218      	adds	r2, #24
24004ed0:	4293      	cmp	r3, r2
24004ed2:	d016      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ed4:	3218      	adds	r2, #24
24004ed6:	4293      	cmp	r3, r2
24004ed8:	d013      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004eda:	3218      	adds	r2, #24
24004edc:	4293      	cmp	r3, r2
24004ede:	d010      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ee0:	3218      	adds	r2, #24
24004ee2:	4293      	cmp	r3, r2
24004ee4:	d00d      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ee6:	3218      	adds	r2, #24
24004ee8:	4293      	cmp	r3, r2
24004eea:	d00a      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004eec:	3218      	adds	r2, #24
24004eee:	4293      	cmp	r3, r2
24004ef0:	d007      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ef2:	3218      	adds	r2, #24
24004ef4:	4293      	cmp	r3, r2
24004ef6:	d004      	beq.n	24004f02 <HAL_DMA_IRQHandler+0x6c6>
24004ef8:	681a      	ldr	r2, [r3, #0]
24004efa:	f022 020a 	bic.w	r2, r2, #10
24004efe:	601a      	str	r2, [r3, #0]
24004f00:	e003      	b.n	24004f0a <HAL_DMA_IRQHandler+0x6ce>
24004f02:	681a      	ldr	r2, [r3, #0]
24004f04:	f022 0214 	bic.w	r2, r2, #20
24004f08:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
24004f0a:	2301      	movs	r3, #1
24004f0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24004f10:	2300      	movs	r3, #0
24004f12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24004f16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24004f18:	2b00      	cmp	r3, #0
24004f1a:	f43f af4d 	beq.w	24004db8 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
24004f1e:	4620      	mov	r0, r4
24004f20:	4798      	blx	r3
24004f22:	e749      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24004f24:	2008      	movs	r0, #8
24004f26:	fa00 f101 	lsl.w	r1, r0, r1
24004f2a:	ea11 0f0c 	tst.w	r1, ip
24004f2e:	f43f af43 	beq.w	24004db8 <HAL_DMA_IRQHandler+0x57c>
24004f32:	f012 0f08 	tst.w	r2, #8
24004f36:	f43f af3f 	beq.w	24004db8 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24004f3a:	681a      	ldr	r2, [r3, #0]
24004f3c:	f022 020e 	bic.w	r2, r2, #14
24004f40:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24004f42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24004f44:	f003 031f 	and.w	r3, r3, #31
24004f48:	2201      	movs	r2, #1
24004f4a:	fa02 f303 	lsl.w	r3, r2, r3
24004f4e:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24004f50:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
24004f52:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24004f56:	2300      	movs	r3, #0
24004f58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
24004f5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24004f5e:	2b00      	cmp	r3, #0
24004f60:	f43f af2a 	beq.w	24004db8 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
24004f64:	4620      	mov	r0, r4
24004f66:	4798      	blx	r3
  }
24004f68:	e726      	b.n	24004db8 <HAL_DMA_IRQHandler+0x57c>
24004f6a:	bf00      	nop
24004f6c:	40020010 	.word	0x40020010
24004f70:	40020028 	.word	0x40020028

24004f74 <HAL_DMA_GetState>:
  return hdma->State;
24004f74:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24004f78:	4770      	bx	lr

24004f7a <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24004f7a:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24004f7c:	4770      	bx	lr

24004f7e <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24004f7e:	b470      	push	{r4, r5, r6}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24004f80:	7a0b      	ldrb	r3, [r1, #8]
24004f82:	2b01      	cmp	r3, #1
24004f84:	d028      	beq.n	24004fd8 <HAL_DMAEx_ConfigMuxSync+0x5a>
  uint32_t syncPolarity = 0;
24004f86:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24004f88:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24004f8a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24004f8e:	b2d2      	uxtb	r2, r2
24004f90:	2a01      	cmp	r2, #1
24004f92:	d124      	bne.n	24004fde <HAL_DMAEx_ConfigMuxSync+0x60>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24004f94:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
24004f98:	2b01      	cmp	r3, #1
24004f9a:	d026      	beq.n	24004fea <HAL_DMAEx_ConfigMuxSync+0x6c>
24004f9c:	2301      	movs	r3, #1
24004f9e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24004fa2:	6e03      	ldr	r3, [r0, #96]	; 0x60
24004fa4:	681a      	ldr	r2, [r3, #0]
24004fa6:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24004faa:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24004fac:	6e06      	ldr	r6, [r0, #96]	; 0x60
24004fae:	6832      	ldr	r2, [r6, #0]
24004fb0:	b2d2      	uxtb	r2, r2
24004fb2:	68cb      	ldr	r3, [r1, #12]
24004fb4:	3b01      	subs	r3, #1
24004fb6:	04db      	lsls	r3, r3, #19
24004fb8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
24004fbc:	4323      	orrs	r3, r4
24004fbe:	7a0c      	ldrb	r4, [r1, #8]
24004fc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
24004fc4:	7a49      	ldrb	r1, [r1, #9]
24004fc6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
24004fca:	4313      	orrs	r3, r2
24004fcc:	6033      	str	r3, [r6, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24004fce:	2300      	movs	r3, #0
24004fd0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    return HAL_OK;
24004fd4:	4618      	mov	r0, r3
24004fd6:	e006      	b.n	24004fe6 <HAL_DMAEx_ConfigMuxSync+0x68>
    syncSignalID = pSyncConfig->SyncSignalID;
24004fd8:	680d      	ldr	r5, [r1, #0]
    syncPolarity = pSyncConfig->SyncPolarity;
24004fda:	684c      	ldr	r4, [r1, #4]
24004fdc:	e7d5      	b.n	24004f8a <HAL_DMAEx_ConfigMuxSync+0xc>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
24004fe2:	6543      	str	r3, [r0, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
24004fe4:	2001      	movs	r0, #1
  }
}
24004fe6:	bc70      	pop	{r4, r5, r6}
24004fe8:	4770      	bx	lr
    __HAL_LOCK(hdma);
24004fea:	2002      	movs	r0, #2
24004fec:	e7fb      	b.n	24004fe6 <HAL_DMAEx_ConfigMuxSync+0x68>

24004fee <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24004fee:	b510      	push	{r4, lr}
24004ff0:	4604      	mov	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24004ff2:	6e43      	ldr	r3, [r0, #100]	; 0x64
24004ff4:	681a      	ldr	r2, [r3, #0]
24004ff6:	6e83      	ldr	r3, [r0, #104]	; 0x68
24004ff8:	421a      	tst	r2, r3
24004ffa:	d00e      	beq.n	2400501a <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24004ffc:	6e02      	ldr	r2, [r0, #96]	; 0x60
24004ffe:	6813      	ldr	r3, [r2, #0]
24005000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24005004:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005006:	6e43      	ldr	r3, [r0, #100]	; 0x64
24005008:	6e82      	ldr	r2, [r0, #104]	; 0x68
2400500a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
2400500c:	6d43      	ldr	r3, [r0, #84]	; 0x54
2400500e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24005012:	6543      	str	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24005014:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
24005016:	b103      	cbz	r3, 2400501a <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24005018:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
2400501a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
2400501c:	b19b      	cbz	r3, 24005046 <HAL_DMAEx_MUX_IRQHandler+0x58>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
2400501e:	6f22      	ldr	r2, [r4, #112]	; 0x70
24005020:	6811      	ldr	r1, [r2, #0]
24005022:	6f62      	ldr	r2, [r4, #116]	; 0x74
24005024:	4211      	tst	r1, r2
24005026:	d00e      	beq.n	24005046 <HAL_DMAEx_MUX_IRQHandler+0x58>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005028:	681a      	ldr	r2, [r3, #0]
2400502a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400502e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005030:	6f23      	ldr	r3, [r4, #112]	; 0x70
24005032:	6f62      	ldr	r2, [r4, #116]	; 0x74
24005034:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24005036:	6d63      	ldr	r3, [r4, #84]	; 0x54
24005038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400503c:	6563      	str	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
2400503e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24005040:	b10b      	cbz	r3, 24005046 <HAL_DMAEx_MUX_IRQHandler+0x58>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24005042:	4620      	mov	r0, r4
24005044:	4798      	blx	r3
      }
    }
  }
}
24005046:	bd10      	pop	{r4, pc}

24005048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24005048:	b5f0      	push	{r4, r5, r6, r7, lr}
2400504a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
2400504c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400504e:	e06b      	b.n	24005128 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
24005050:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24005052:	005e      	lsls	r6, r3, #1
24005054:	2403      	movs	r4, #3
24005056:	40b4      	lsls	r4, r6
24005058:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
2400505c:	68cc      	ldr	r4, [r1, #12]
2400505e:	40b4      	lsls	r4, r6
24005060:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
24005062:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
24005064:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24005066:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400506a:	684c      	ldr	r4, [r1, #4]
2400506c:	f3c4 1400 	ubfx	r4, r4, #4, #1
24005070:	409c      	lsls	r4, r3
24005072:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
24005076:	6044      	str	r4, [r0, #4]
24005078:	e068      	b.n	2400514c <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2400507a:	08dd      	lsrs	r5, r3, #3
2400507c:	3508      	adds	r5, #8
2400507e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24005082:	f003 0407 	and.w	r4, r3, #7
24005086:	ea4f 0c84 	mov.w	ip, r4, lsl #2
2400508a:	240f      	movs	r4, #15
2400508c:	fa04 f40c 	lsl.w	r4, r4, ip
24005090:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24005094:	690c      	ldr	r4, [r1, #16]
24005096:	fa04 f40c 	lsl.w	r4, r4, ip
2400509a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
2400509e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
240050a2:	e06b      	b.n	2400517c <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240050a4:	2409      	movs	r4, #9
240050a6:	e000      	b.n	240050aa <HAL_GPIO_Init+0x62>
240050a8:	2400      	movs	r4, #0
240050aa:	fa04 f40e 	lsl.w	r4, r4, lr
240050ae:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
240050b0:	f10c 0c02 	add.w	ip, ip, #2
240050b4:	4d69      	ldr	r5, [pc, #420]	; (2400525c <HAL_GPIO_Init+0x214>)
240050b6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240050ba:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
240050be:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
240050c0:	43d4      	mvns	r4, r2
240050c2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
240050c6:	684f      	ldr	r7, [r1, #4]
240050c8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
240050cc:	d001      	beq.n	240050d2 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
240050ce:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
240050d2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
240050d6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
240050d8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
240050da:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240050de:	684f      	ldr	r7, [r1, #4]
240050e0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
240050e4:	d001      	beq.n	240050ea <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
240050e6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
240050ea:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
240050ee:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
240050f0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
240050f4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240050f8:	684f      	ldr	r7, [r1, #4]
240050fa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
240050fe:	d001      	beq.n	24005104 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
24005100:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
24005104:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
24005108:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2400510c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
24005110:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24005112:	684e      	ldr	r6, [r1, #4]
24005114:	f416 3f80 	tst.w	r6, #65536	; 0x10000
24005118:	d001      	beq.n	2400511e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
2400511a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400511e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24005122:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
24005126:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24005128:	680a      	ldr	r2, [r1, #0]
2400512a:	fa32 f403 	lsrs.w	r4, r2, r3
2400512e:	f000 8092 	beq.w	24005256 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24005132:	f04f 0c01 	mov.w	ip, #1
24005136:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
2400513a:	ea1c 0202 	ands.w	r2, ip, r2
2400513e:	d0f2      	beq.n	24005126 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24005140:	684c      	ldr	r4, [r1, #4]
24005142:	f004 0403 	and.w	r4, r4, #3
24005146:	3c01      	subs	r4, #1
24005148:	2c01      	cmp	r4, #1
2400514a:	d981      	bls.n	24005050 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400514c:	684c      	ldr	r4, [r1, #4]
2400514e:	f004 0403 	and.w	r4, r4, #3
24005152:	2c03      	cmp	r4, #3
24005154:	d00c      	beq.n	24005170 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
24005156:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24005158:	005d      	lsls	r5, r3, #1
2400515a:	f04f 0c03 	mov.w	ip, #3
2400515e:	fa0c fc05 	lsl.w	ip, ip, r5
24005162:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24005166:	688c      	ldr	r4, [r1, #8]
24005168:	40ac      	lsls	r4, r5
2400516a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
2400516e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24005170:	684c      	ldr	r4, [r1, #4]
24005172:	f004 0403 	and.w	r4, r4, #3
24005176:	2c02      	cmp	r4, #2
24005178:	f43f af7f 	beq.w	2400507a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
2400517c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2400517e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
24005182:	f04f 0c03 	mov.w	ip, #3
24005186:	fa0c fc0e 	lsl.w	ip, ip, lr
2400518a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400518e:	684c      	ldr	r4, [r1, #4]
24005190:	f004 0403 	and.w	r4, r4, #3
24005194:	fa04 f40e 	lsl.w	r4, r4, lr
24005198:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
2400519c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2400519e:	684c      	ldr	r4, [r1, #4]
240051a0:	f414 3f40 	tst.w	r4, #196608	; 0x30000
240051a4:	d0bf      	beq.n	24005126 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240051a6:	4c2e      	ldr	r4, [pc, #184]	; (24005260 <HAL_GPIO_Init+0x218>)
240051a8:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
240051ac:	f045 0502 	orr.w	r5, r5, #2
240051b0:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
240051b4:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
240051b8:	f004 0402 	and.w	r4, r4, #2
240051bc:	9401      	str	r4, [sp, #4]
240051be:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
240051c0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
240051c4:	f10c 0502 	add.w	r5, ip, #2
240051c8:	4c24      	ldr	r4, [pc, #144]	; (2400525c <HAL_GPIO_Init+0x214>)
240051ca:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240051ce:	f003 0403 	and.w	r4, r3, #3
240051d2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
240051d6:	240f      	movs	r4, #15
240051d8:	fa04 f40e 	lsl.w	r4, r4, lr
240051dc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240051e0:	4c20      	ldr	r4, [pc, #128]	; (24005264 <HAL_GPIO_Init+0x21c>)
240051e2:	42a0      	cmp	r0, r4
240051e4:	f43f af60 	beq.w	240050a8 <HAL_GPIO_Init+0x60>
240051e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
240051ec:	42a0      	cmp	r0, r4
240051ee:	d022      	beq.n	24005236 <HAL_GPIO_Init+0x1ee>
240051f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
240051f4:	42a0      	cmp	r0, r4
240051f6:	d020      	beq.n	2400523a <HAL_GPIO_Init+0x1f2>
240051f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
240051fc:	42a0      	cmp	r0, r4
240051fe:	d01e      	beq.n	2400523e <HAL_GPIO_Init+0x1f6>
24005200:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24005204:	42a0      	cmp	r0, r4
24005206:	d01c      	beq.n	24005242 <HAL_GPIO_Init+0x1fa>
24005208:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2400520c:	42a0      	cmp	r0, r4
2400520e:	d01a      	beq.n	24005246 <HAL_GPIO_Init+0x1fe>
24005210:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24005214:	42a0      	cmp	r0, r4
24005216:	d018      	beq.n	2400524a <HAL_GPIO_Init+0x202>
24005218:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2400521c:	42a0      	cmp	r0, r4
2400521e:	d016      	beq.n	2400524e <HAL_GPIO_Init+0x206>
24005220:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24005224:	42a0      	cmp	r0, r4
24005226:	d014      	beq.n	24005252 <HAL_GPIO_Init+0x20a>
24005228:	f504 6480 	add.w	r4, r4, #1024	; 0x400
2400522c:	42a0      	cmp	r0, r4
2400522e:	f43f af39 	beq.w	240050a4 <HAL_GPIO_Init+0x5c>
24005232:	240a      	movs	r4, #10
24005234:	e739      	b.n	240050aa <HAL_GPIO_Init+0x62>
24005236:	2401      	movs	r4, #1
24005238:	e737      	b.n	240050aa <HAL_GPIO_Init+0x62>
2400523a:	2402      	movs	r4, #2
2400523c:	e735      	b.n	240050aa <HAL_GPIO_Init+0x62>
2400523e:	2403      	movs	r4, #3
24005240:	e733      	b.n	240050aa <HAL_GPIO_Init+0x62>
24005242:	2404      	movs	r4, #4
24005244:	e731      	b.n	240050aa <HAL_GPIO_Init+0x62>
24005246:	2405      	movs	r4, #5
24005248:	e72f      	b.n	240050aa <HAL_GPIO_Init+0x62>
2400524a:	2406      	movs	r4, #6
2400524c:	e72d      	b.n	240050aa <HAL_GPIO_Init+0x62>
2400524e:	2407      	movs	r4, #7
24005250:	e72b      	b.n	240050aa <HAL_GPIO_Init+0x62>
24005252:	2408      	movs	r4, #8
24005254:	e729      	b.n	240050aa <HAL_GPIO_Init+0x62>
  }
}
24005256:	b003      	add	sp, #12
24005258:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400525a:	bf00      	nop
2400525c:	58000400 	.word	0x58000400
24005260:	58024400 	.word	0x58024400
24005264:	58020000 	.word	0x58020000

24005268 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24005268:	6903      	ldr	r3, [r0, #16]
2400526a:	4219      	tst	r1, r3
2400526c:	d001      	beq.n	24005272 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
2400526e:	2001      	movs	r0, #1
24005270:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
24005272:	2000      	movs	r0, #0
  }
  return bitstatus;
}
24005274:	4770      	bx	lr

24005276 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24005276:	b10a      	cbz	r2, 2400527c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
24005278:	6181      	str	r1, [r0, #24]
2400527a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400527c:	0409      	lsls	r1, r1, #16
2400527e:	6181      	str	r1, [r0, #24]
  }
}
24005280:	4770      	bx	lr

24005282 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24005282:	6803      	ldr	r3, [r0, #0]
24005284:	699a      	ldr	r2, [r3, #24]
24005286:	f012 0f02 	tst.w	r2, #2
2400528a:	d001      	beq.n	24005290 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
2400528c:	2200      	movs	r2, #0
2400528e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24005290:	6803      	ldr	r3, [r0, #0]
24005292:	699a      	ldr	r2, [r3, #24]
24005294:	f012 0f01 	tst.w	r2, #1
24005298:	d103      	bne.n	240052a2 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400529a:	699a      	ldr	r2, [r3, #24]
2400529c:	f042 0201 	orr.w	r2, r2, #1
240052a0:	619a      	str	r2, [r3, #24]
  }
}
240052a2:	4770      	bx	lr

240052a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
240052a4:	b410      	push	{r4}
240052a6:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240052a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
240052ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240052b0:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240052b2:	4321      	orrs	r1, r4
240052b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
240052b8:	6802      	ldr	r2, [r0, #0]
240052ba:	6853      	ldr	r3, [r2, #4]
240052bc:	0d64      	lsrs	r4, r4, #21
240052be:	f404 6480 	and.w	r4, r4, #1024	; 0x400
240052c2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
240052c6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
240052ca:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
240052ce:	f044 0403 	orr.w	r4, r4, #3
240052d2:	ea23 0404 	bic.w	r4, r3, r4
240052d6:	4321      	orrs	r1, r4
240052d8:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
240052da:	f85d 4b04 	ldr.w	r4, [sp], #4
240052de:	4770      	bx	lr

240052e0 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
240052e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
240052e2:	4a1d      	ldr	r2, [pc, #116]	; (24005358 <I2C_Enable_IRQ+0x78>)
240052e4:	4293      	cmp	r3, r2
240052e6:	d017      	beq.n	24005318 <I2C_Enable_IRQ+0x38>
240052e8:	4a1c      	ldr	r2, [pc, #112]	; (2400535c <I2C_Enable_IRQ+0x7c>)
240052ea:	4293      	cmp	r3, r2
240052ec:	d014      	beq.n	24005318 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
240052ee:	f411 4f00 	tst.w	r1, #32768	; 0x8000
240052f2:	d12b      	bne.n	2400534c <I2C_Enable_IRQ+0x6c>
  uint32_t tmpisr = 0U;
240052f4:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
240052f6:	f011 0f01 	tst.w	r1, #1
240052fa:	d001      	beq.n	24005300 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
240052fc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
24005300:	f011 0f02 	tst.w	r1, #2
24005304:	d001      	beq.n	2400530a <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
24005306:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2400530a:	2910      	cmp	r1, #16
2400530c:	d020      	beq.n	24005350 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400530e:	2920      	cmp	r1, #32
24005310:	d10c      	bne.n	2400532c <I2C_Enable_IRQ+0x4c>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
24005312:	f043 0320 	orr.w	r3, r3, #32
24005316:	e009      	b.n	2400532c <I2C_Enable_IRQ+0x4c>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
24005318:	f411 4f00 	tst.w	r1, #32768	; 0x8000
2400531c:	d10b      	bne.n	24005336 <I2C_Enable_IRQ+0x56>
  uint32_t tmpisr = 0U;
2400531e:	2300      	movs	r3, #0
    if (InterruptRequest == I2C_XFER_ERROR_IT)
24005320:	2910      	cmp	r1, #16
24005322:	d00a      	beq.n	2400533a <I2C_Enable_IRQ+0x5a>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
24005324:	2920      	cmp	r1, #32
24005326:	d00b      	beq.n	24005340 <I2C_Enable_IRQ+0x60>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
24005328:	2940      	cmp	r1, #64	; 0x40
2400532a:	d00c      	beq.n	24005346 <I2C_Enable_IRQ+0x66>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400532c:	6801      	ldr	r1, [r0, #0]
2400532e:	680a      	ldr	r2, [r1, #0]
24005330:	4313      	orrs	r3, r2
24005332:	600b      	str	r3, [r1, #0]
}
24005334:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24005336:	23b8      	movs	r3, #184	; 0xb8
24005338:	e7f2      	b.n	24005320 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400533a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400533e:	e7f1      	b.n	24005324 <I2C_Enable_IRQ+0x44>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
24005340:	f043 0360 	orr.w	r3, r3, #96	; 0x60
24005344:	e7f0      	b.n	24005328 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_TCI;
24005346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400534a:	e7ef      	b.n	2400532c <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400534c:	23b8      	movs	r3, #184	; 0xb8
2400534e:	e7d2      	b.n	240052f6 <I2C_Enable_IRQ+0x16>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
24005350:	f043 0390 	orr.w	r3, r3, #144	; 0x90
24005354:	e7db      	b.n	2400530e <I2C_Enable_IRQ+0x2e>
24005356:	bf00      	nop
24005358:	240062f1 	.word	0x240062f1
2400535c:	240060d1 	.word	0x240060d1

24005360 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
24005360:	f011 0f01 	tst.w	r1, #1
24005364:	d009      	beq.n	2400537a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24005366:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400536a:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400536e:	2b28      	cmp	r3, #40	; 0x28
24005370:	d001      	beq.n	24005376 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24005372:	23f2      	movs	r3, #242	; 0xf2
24005374:	e002      	b.n	2400537c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
24005376:	2342      	movs	r3, #66	; 0x42
24005378:	e000      	b.n	2400537c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
2400537a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400537c:	f011 0f02 	tst.w	r1, #2
24005380:	d009      	beq.n	24005396 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
24005382:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24005386:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
2400538a:	f002 0228 	and.w	r2, r2, #40	; 0x28
2400538e:	2a28      	cmp	r2, #40	; 0x28
24005390:	d010      	beq.n	240053b4 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24005392:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
24005396:	f411 4f00 	tst.w	r1, #32768	; 0x8000
2400539a:	d10d      	bne.n	240053b8 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
2400539c:	2910      	cmp	r1, #16
2400539e:	d00e      	beq.n	240053be <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
240053a0:	2920      	cmp	r1, #32
240053a2:	d00f      	beq.n	240053c4 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
240053a4:	2940      	cmp	r1, #64	; 0x40
240053a6:	d010      	beq.n	240053ca <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240053a8:	6801      	ldr	r1, [r0, #0]
240053aa:	680a      	ldr	r2, [r1, #0]
240053ac:	ea22 0303 	bic.w	r3, r2, r3
240053b0:	600b      	str	r3, [r1, #0]
}
240053b2:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
240053b4:	4663      	mov	r3, ip
240053b6:	e7ee      	b.n	24005396 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
240053b8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
240053bc:	e7ee      	b.n	2400539c <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
240053be:	f043 0390 	orr.w	r3, r3, #144	; 0x90
240053c2:	e7ed      	b.n	240053a0 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
240053c4:	f043 0320 	orr.w	r3, r3, #32
240053c8:	e7ec      	b.n	240053a4 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
240053ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240053ce:	e7eb      	b.n	240053a8 <I2C_Disable_IRQ+0x48>

240053d0 <I2C_IsErrorOccurred>:
{
240053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
240053d4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
240053d6:	6803      	ldr	r3, [r0, #0]
240053d8:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240053da:	f016 0610 	ands.w	r6, r6, #16
240053de:	d07e      	beq.n	240054de <I2C_IsErrorOccurred+0x10e>
240053e0:	460d      	mov	r5, r1
240053e2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240053e4:	2210      	movs	r2, #16
240053e6:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
240053e8:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
240053ea:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240053ec:	6823      	ldr	r3, [r4, #0]
240053ee:	6998      	ldr	r0, [r3, #24]
240053f0:	f010 0f20 	tst.w	r0, #32
240053f4:	d132      	bne.n	2400545c <I2C_IsErrorOccurred+0x8c>
240053f6:	bb8f      	cbnz	r7, 2400545c <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
240053f8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
240053fc:	d0f6      	beq.n	240053ec <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240053fe:	f7fe fadb 	bl	240039b8 <HAL_GetTick>
24005402:	eba0 0008 	sub.w	r0, r0, r8
24005406:	42a8      	cmp	r0, r5
24005408:	d801      	bhi.n	2400540e <I2C_IsErrorOccurred+0x3e>
2400540a:	2d00      	cmp	r5, #0
2400540c:	d1ee      	bne.n	240053ec <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400540e:	6821      	ldr	r1, [r4, #0]
24005410:	684a      	ldr	r2, [r1, #4]
24005412:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
24005416:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
2400541a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400541c:	6988      	ldr	r0, [r1, #24]
2400541e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
24005422:	d004      	beq.n	2400542e <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
24005424:	3b20      	subs	r3, #32
24005426:	bf18      	it	ne
24005428:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
2400542a:	b902      	cbnz	r2, 2400542e <I2C_IsErrorOccurred+0x5e>
2400542c:	b973      	cbnz	r3, 2400544c <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400542e:	6823      	ldr	r3, [r4, #0]
24005430:	699b      	ldr	r3, [r3, #24]
24005432:	f013 0f20 	tst.w	r3, #32
24005436:	d1d9      	bne.n	240053ec <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24005438:	f7fe fabe 	bl	240039b8 <HAL_GetTick>
2400543c:	eba0 0008 	sub.w	r0, r0, r8
24005440:	2819      	cmp	r0, #25
24005442:	d9f4      	bls.n	2400542e <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24005444:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
24005448:	2701      	movs	r7, #1
              break;
2400544a:	e7cf      	b.n	240053ec <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400544c:	684b      	ldr	r3, [r1, #4]
2400544e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24005452:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
24005454:	f7fe fab0 	bl	240039b8 <HAL_GetTick>
24005458:	4680      	mov	r8, r0
2400545a:	e7e8      	b.n	2400542e <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
2400545c:	b90f      	cbnz	r7, 24005462 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400545e:	2220      	movs	r2, #32
24005460:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
24005462:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
24005466:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
24005468:	6822      	ldr	r2, [r4, #0]
2400546a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2400546c:	f413 7f80 	tst.w	r3, #256	; 0x100
24005470:	d005      	beq.n	2400547e <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
24005472:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24005476:	f44f 7180 	mov.w	r1, #256	; 0x100
2400547a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
2400547c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400547e:	f413 6f80 	tst.w	r3, #1024	; 0x400
24005482:	d006      	beq.n	24005492 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
24005484:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24005488:	6822      	ldr	r2, [r4, #0]
2400548a:	f44f 6180 	mov.w	r1, #1024	; 0x400
2400548e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
24005490:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24005492:	f413 7f00 	tst.w	r3, #512	; 0x200
24005496:	d024      	beq.n	240054e2 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
24005498:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400549c:	6823      	ldr	r3, [r4, #0]
2400549e:	f44f 7200 	mov.w	r2, #512	; 0x200
240054a2:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
240054a4:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
240054a6:	4620      	mov	r0, r4
240054a8:	f7ff feeb 	bl	24005282 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
240054ac:	6822      	ldr	r2, [r4, #0]
240054ae:	6853      	ldr	r3, [r2, #4]
240054b0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
240054b4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
240054b8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
240054bc:	f023 0301 	bic.w	r3, r3, #1
240054c0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
240054c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
240054c4:	431e      	orrs	r6, r3
240054c6:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240054c8:	2320      	movs	r3, #32
240054ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240054ce:	2300      	movs	r3, #0
240054d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
240054d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
240054d8:	4628      	mov	r0, r5
240054da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
240054de:	2500      	movs	r5, #0
240054e0:	e7c2      	b.n	24005468 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
240054e2:	2d00      	cmp	r5, #0
240054e4:	d0f8      	beq.n	240054d8 <I2C_IsErrorOccurred+0x108>
240054e6:	e7de      	b.n	240054a6 <I2C_IsErrorOccurred+0xd6>

240054e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
240054e8:	b570      	push	{r4, r5, r6, lr}
240054ea:	4604      	mov	r4, r0
240054ec:	460d      	mov	r5, r1
240054ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
240054f0:	6823      	ldr	r3, [r4, #0]
240054f2:	699b      	ldr	r3, [r3, #24]
240054f4:	f013 0f02 	tst.w	r3, #2
240054f8:	d122      	bne.n	24005540 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
240054fa:	4632      	mov	r2, r6
240054fc:	4629      	mov	r1, r5
240054fe:	4620      	mov	r0, r4
24005500:	f7ff ff66 	bl	240053d0 <I2C_IsErrorOccurred>
24005504:	b9f0      	cbnz	r0, 24005544 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
24005506:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
2400550a:	d0f1      	beq.n	240054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400550c:	f7fe fa54 	bl	240039b8 <HAL_GetTick>
24005510:	1b80      	subs	r0, r0, r6
24005512:	42a8      	cmp	r0, r5
24005514:	d801      	bhi.n	2400551a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
24005516:	2d00      	cmp	r5, #0
24005518:	d1ea      	bne.n	240054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
2400551a:	6823      	ldr	r3, [r4, #0]
2400551c:	699b      	ldr	r3, [r3, #24]
2400551e:	f013 0f02 	tst.w	r3, #2
24005522:	d1e5      	bne.n	240054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24005524:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005526:	f043 0320 	orr.w	r3, r3, #32
2400552a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400552c:	2320      	movs	r3, #32
2400552e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24005532:	2300      	movs	r3, #0
24005534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
24005538:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
2400553c:	2001      	movs	r0, #1
2400553e:	e000      	b.n	24005542 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
24005540:	2000      	movs	r0, #0
}
24005542:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
24005544:	2001      	movs	r0, #1
24005546:	e7fc      	b.n	24005542 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

24005548 <I2C_WaitOnFlagUntilTimeout>:
{
24005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400554c:	4605      	mov	r5, r0
2400554e:	460f      	mov	r7, r1
24005550:	4616      	mov	r6, r2
24005552:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24005554:	682c      	ldr	r4, [r5, #0]
24005556:	69a4      	ldr	r4, [r4, #24]
24005558:	ea37 0304 	bics.w	r3, r7, r4
2400555c:	bf0c      	ite	eq
2400555e:	f04f 0c01 	moveq.w	ip, #1
24005562:	f04f 0c00 	movne.w	ip, #0
24005566:	45b4      	cmp	ip, r6
24005568:	d122      	bne.n	240055b0 <I2C_WaitOnFlagUntilTimeout+0x68>
    if (Timeout != HAL_MAX_DELAY)
2400556a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
2400556e:	d0f1      	beq.n	24005554 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24005570:	f7fe fa22 	bl	240039b8 <HAL_GetTick>
24005574:	9b06      	ldr	r3, [sp, #24]
24005576:	1ac0      	subs	r0, r0, r3
24005578:	4540      	cmp	r0, r8
2400557a:	d802      	bhi.n	24005582 <I2C_WaitOnFlagUntilTimeout+0x3a>
2400557c:	f1b8 0f00 	cmp.w	r8, #0
24005580:	d1e8      	bne.n	24005554 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24005582:	682b      	ldr	r3, [r5, #0]
24005584:	699b      	ldr	r3, [r3, #24]
24005586:	ea37 0303 	bics.w	r3, r7, r3
2400558a:	bf0c      	ite	eq
2400558c:	2301      	moveq	r3, #1
2400558e:	2300      	movne	r3, #0
24005590:	42b3      	cmp	r3, r6
24005592:	d1df      	bne.n	24005554 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24005594:	6c6b      	ldr	r3, [r5, #68]	; 0x44
24005596:	f043 0320 	orr.w	r3, r3, #32
2400559a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400559c:	2320      	movs	r3, #32
2400559e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240055a2:	2300      	movs	r3, #0
240055a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
240055a8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
240055ac:	2001      	movs	r0, #1
240055ae:	e000      	b.n	240055b2 <I2C_WaitOnFlagUntilTimeout+0x6a>
  return HAL_OK;
240055b0:	2000      	movs	r0, #0
}
240055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

240055b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
240055b6:	b570      	push	{r4, r5, r6, lr}
240055b8:	4604      	mov	r4, r0
240055ba:	460d      	mov	r5, r1
240055bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240055be:	e004      	b.n	240055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240055c0:	6823      	ldr	r3, [r4, #0]
240055c2:	699b      	ldr	r3, [r3, #24]
240055c4:	f013 0f20 	tst.w	r3, #32
240055c8:	d012      	beq.n	240055f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240055ca:	6823      	ldr	r3, [r4, #0]
240055cc:	699b      	ldr	r3, [r3, #24]
240055ce:	f013 0f20 	tst.w	r3, #32
240055d2:	d11b      	bne.n	2400560c <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
240055d4:	4632      	mov	r2, r6
240055d6:	4629      	mov	r1, r5
240055d8:	4620      	mov	r0, r4
240055da:	f7ff fef9 	bl	240053d0 <I2C_IsErrorOccurred>
240055de:	b9b8      	cbnz	r0, 24005610 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240055e0:	f7fe f9ea 	bl	240039b8 <HAL_GetTick>
240055e4:	1b80      	subs	r0, r0, r6
240055e6:	42a8      	cmp	r0, r5
240055e8:	d8ea      	bhi.n	240055c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
240055ea:	2d00      	cmp	r5, #0
240055ec:	d1ed      	bne.n	240055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
240055ee:	e7e7      	b.n	240055c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240055f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
240055f2:	f043 0320 	orr.w	r3, r3, #32
240055f6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
240055f8:	2320      	movs	r3, #32
240055fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
240055fe:	2300      	movs	r3, #0
24005600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
24005604:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
24005608:	2001      	movs	r0, #1
2400560a:	e000      	b.n	2400560e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
2400560c:	2000      	movs	r0, #0
}
2400560e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
24005610:	2001      	movs	r0, #1
24005612:	e7fc      	b.n	2400560e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

24005614 <HAL_I2C_Init>:
  if (hi2c == NULL)
24005614:	2800      	cmp	r0, #0
24005616:	d057      	beq.n	240056c8 <HAL_I2C_Init+0xb4>
{
24005618:	b510      	push	{r4, lr}
2400561a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
2400561c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24005620:	2b00      	cmp	r3, #0
24005622:	d041      	beq.n	240056a8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
24005624:	2324      	movs	r3, #36	; 0x24
24005626:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
2400562a:	6822      	ldr	r2, [r4, #0]
2400562c:	6813      	ldr	r3, [r2, #0]
2400562e:	f023 0301 	bic.w	r3, r3, #1
24005632:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24005634:	6863      	ldr	r3, [r4, #4]
24005636:	6822      	ldr	r2, [r4, #0]
24005638:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
2400563c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400563e:	6822      	ldr	r2, [r4, #0]
24005640:	6893      	ldr	r3, [r2, #8]
24005642:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24005646:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24005648:	68e3      	ldr	r3, [r4, #12]
2400564a:	2b01      	cmp	r3, #1
2400564c:	d031      	beq.n	240056b2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2400564e:	68a3      	ldr	r3, [r4, #8]
24005650:	6822      	ldr	r2, [r4, #0]
24005652:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
24005656:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24005658:	68e3      	ldr	r3, [r4, #12]
2400565a:	2b02      	cmp	r3, #2
2400565c:	d02f      	beq.n	240056be <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400565e:	6822      	ldr	r2, [r4, #0]
24005660:	6851      	ldr	r1, [r2, #4]
24005662:	4b1a      	ldr	r3, [pc, #104]	; (240056cc <HAL_I2C_Init+0xb8>)
24005664:	430b      	orrs	r3, r1
24005666:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24005668:	6822      	ldr	r2, [r4, #0]
2400566a:	68d3      	ldr	r3, [r2, #12]
2400566c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24005670:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24005672:	6923      	ldr	r3, [r4, #16]
24005674:	6962      	ldr	r2, [r4, #20]
24005676:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
24005678:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400567a:	6822      	ldr	r2, [r4, #0]
2400567c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
24005680:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24005682:	69e3      	ldr	r3, [r4, #28]
24005684:	6a21      	ldr	r1, [r4, #32]
24005686:	6822      	ldr	r2, [r4, #0]
24005688:	430b      	orrs	r3, r1
2400568a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
2400568c:	6822      	ldr	r2, [r4, #0]
2400568e:	6813      	ldr	r3, [r2, #0]
24005690:	f043 0301 	orr.w	r3, r3, #1
24005694:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24005696:	2000      	movs	r0, #0
24005698:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
2400569a:	2320      	movs	r3, #32
2400569c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
240056a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
240056a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
240056a6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
240056a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
240056ac:	f7fc f958 	bl	24001960 <HAL_I2C_MspInit>
240056b0:	e7b8      	b.n	24005624 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240056b2:	68a3      	ldr	r3, [r4, #8]
240056b4:	6822      	ldr	r2, [r4, #0]
240056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240056ba:	6093      	str	r3, [r2, #8]
240056bc:	e7cc      	b.n	24005658 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
240056be:	6823      	ldr	r3, [r4, #0]
240056c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
240056c4:	605a      	str	r2, [r3, #4]
240056c6:	e7ca      	b.n	2400565e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
240056c8:	2001      	movs	r0, #1
}
240056ca:	4770      	bx	lr
240056cc:	02008000 	.word	0x02008000

240056d0 <HAL_I2C_Master_Transmit>:
{
240056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240056d4:	b082      	sub	sp, #8
240056d6:	460f      	mov	r7, r1
240056d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
240056da:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
240056de:	b2c9      	uxtb	r1, r1
240056e0:	2920      	cmp	r1, #32
240056e2:	f040 80a3 	bne.w	2400582c <HAL_I2C_Master_Transmit+0x15c>
240056e6:	4604      	mov	r4, r0
240056e8:	4690      	mov	r8, r2
240056ea:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
240056ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240056f0:	2b01      	cmp	r3, #1
240056f2:	f000 809f 	beq.w	24005834 <HAL_I2C_Master_Transmit+0x164>
240056f6:	f04f 0a01 	mov.w	sl, #1
240056fa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
240056fe:	f7fe f95b 	bl	240039b8 <HAL_GetTick>
24005702:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
24005704:	9000      	str	r0, [sp, #0]
24005706:	2319      	movs	r3, #25
24005708:	4652      	mov	r2, sl
2400570a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400570e:	4620      	mov	r0, r4
24005710:	f7ff ff1a 	bl	24005548 <I2C_WaitOnFlagUntilTimeout>
24005714:	2800      	cmp	r0, #0
24005716:	f040 808f 	bne.w	24005838 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400571a:	2321      	movs	r3, #33	; 0x21
2400571c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24005720:	2310      	movs	r3, #16
24005722:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24005726:	2300      	movs	r3, #0
24005728:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
2400572a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
2400572e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
24005732:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24005734:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005736:	b29b      	uxth	r3, r3
24005738:	2bff      	cmp	r3, #255	; 0xff
2400573a:	d90a      	bls.n	24005752 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400573c:	22ff      	movs	r2, #255	; 0xff
2400573e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
24005740:	4b41      	ldr	r3, [pc, #260]	; (24005848 <HAL_I2C_Master_Transmit+0x178>)
24005742:	9300      	str	r3, [sp, #0]
24005744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24005748:	4639      	mov	r1, r7
2400574a:	4620      	mov	r0, r4
2400574c:	f7ff fdaa 	bl	240052a4 <I2C_TransferConfig>
24005750:	e018      	b.n	24005784 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
24005752:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
24005754:	b292      	uxth	r2, r2
24005756:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
24005758:	4b3b      	ldr	r3, [pc, #236]	; (24005848 <HAL_I2C_Master_Transmit+0x178>)
2400575a:	9300      	str	r3, [sp, #0]
2400575c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24005760:	b2d2      	uxtb	r2, r2
24005762:	4639      	mov	r1, r7
24005764:	4620      	mov	r0, r4
24005766:	f7ff fd9d 	bl	240052a4 <I2C_TransferConfig>
2400576a:	e00b      	b.n	24005784 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
2400576c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
2400576e:	b292      	uxth	r2, r2
24005770:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
24005772:	2300      	movs	r3, #0
24005774:	9300      	str	r3, [sp, #0]
24005776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400577a:	b2d2      	uxtb	r2, r2
2400577c:	4639      	mov	r1, r7
2400577e:	4620      	mov	r0, r4
24005780:	f7ff fd90 	bl	240052a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
24005784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005786:	b29b      	uxth	r3, r3
24005788:	2b00      	cmp	r3, #0
2400578a:	d033      	beq.n	240057f4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400578c:	462a      	mov	r2, r5
2400578e:	4631      	mov	r1, r6
24005790:	4620      	mov	r0, r4
24005792:	f7ff fea9 	bl	240054e8 <I2C_WaitOnTXISFlagUntilTimeout>
24005796:	2800      	cmp	r0, #0
24005798:	d150      	bne.n	2400583c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400579a:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400579c:	6823      	ldr	r3, [r4, #0]
2400579e:	7812      	ldrb	r2, [r2, #0]
240057a0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
240057a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
240057a4:	3301      	adds	r3, #1
240057a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
240057a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240057aa:	b29b      	uxth	r3, r3
240057ac:	3b01      	subs	r3, #1
240057ae:	b29b      	uxth	r3, r3
240057b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240057b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
240057b4:	3b01      	subs	r3, #1
240057b6:	b29b      	uxth	r3, r3
240057b8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240057ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
240057bc:	b292      	uxth	r2, r2
240057be:	2a00      	cmp	r2, #0
240057c0:	d0e0      	beq.n	24005784 <HAL_I2C_Master_Transmit+0xb4>
240057c2:	2b00      	cmp	r3, #0
240057c4:	d1de      	bne.n	24005784 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
240057c6:	9500      	str	r5, [sp, #0]
240057c8:	4633      	mov	r3, r6
240057ca:	2200      	movs	r2, #0
240057cc:	2180      	movs	r1, #128	; 0x80
240057ce:	4620      	mov	r0, r4
240057d0:	f7ff feba 	bl	24005548 <I2C_WaitOnFlagUntilTimeout>
240057d4:	bba0      	cbnz	r0, 24005840 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240057d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240057d8:	b29b      	uxth	r3, r3
240057da:	2bff      	cmp	r3, #255	; 0xff
240057dc:	d9c6      	bls.n	2400576c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
240057de:	22ff      	movs	r2, #255	; 0xff
240057e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
240057e2:	2300      	movs	r3, #0
240057e4:	9300      	str	r3, [sp, #0]
240057e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240057ea:	4639      	mov	r1, r7
240057ec:	4620      	mov	r0, r4
240057ee:	f7ff fd59 	bl	240052a4 <I2C_TransferConfig>
240057f2:	e7c7      	b.n	24005784 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
240057f4:	462a      	mov	r2, r5
240057f6:	4631      	mov	r1, r6
240057f8:	4620      	mov	r0, r4
240057fa:	f7ff fedc 	bl	240055b6 <I2C_WaitOnSTOPFlagUntilTimeout>
240057fe:	bb08      	cbnz	r0, 24005844 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24005800:	6823      	ldr	r3, [r4, #0]
24005802:	2220      	movs	r2, #32
24005804:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
24005806:	6821      	ldr	r1, [r4, #0]
24005808:	684b      	ldr	r3, [r1, #4]
2400580a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
2400580e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
24005812:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
24005816:	f023 0301 	bic.w	r3, r3, #1
2400581a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
2400581c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24005820:	2300      	movs	r3, #0
24005822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
24005826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
2400582a:	e000      	b.n	2400582e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
2400582c:	2002      	movs	r0, #2
}
2400582e:	b002      	add	sp, #8
24005830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
24005834:	2002      	movs	r0, #2
24005836:	e7fa      	b.n	2400582e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
24005838:	2001      	movs	r0, #1
2400583a:	e7f8      	b.n	2400582e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
2400583c:	2001      	movs	r0, #1
2400583e:	e7f6      	b.n	2400582e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
24005840:	2001      	movs	r0, #1
24005842:	e7f4      	b.n	2400582e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
24005844:	2001      	movs	r0, #1
24005846:	e7f2      	b.n	2400582e <HAL_I2C_Master_Transmit+0x15e>
24005848:	80002000 	.word	0x80002000

2400584c <HAL_I2C_Slave_Receive_IT>:
{
2400584c:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
2400584e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24005852:	b2db      	uxtb	r3, r3
24005854:	2b20      	cmp	r3, #32
24005856:	d123      	bne.n	240058a0 <HAL_I2C_Slave_Receive_IT+0x54>
    __HAL_LOCK(hi2c);
24005858:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
2400585c:	2b01      	cmp	r3, #1
2400585e:	d021      	beq.n	240058a4 <HAL_I2C_Slave_Receive_IT+0x58>
24005860:	2301      	movs	r3, #1
24005862:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24005866:	2322      	movs	r3, #34	; 0x22
24005868:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400586c:	2320      	movs	r3, #32
2400586e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24005872:	2400      	movs	r4, #0
24005874:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24005876:	6805      	ldr	r5, [r0, #0]
24005878:	686b      	ldr	r3, [r5, #4]
2400587a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400587e:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
24005880:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
24005882:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
24005884:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
24005886:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24005888:	4b07      	ldr	r3, [pc, #28]	; (240058a8 <HAL_I2C_Slave_Receive_IT+0x5c>)
2400588a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400588c:	4b07      	ldr	r3, [pc, #28]	; (240058ac <HAL_I2C_Slave_Receive_IT+0x60>)
2400588e:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
24005890:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
24005894:	f248 0102 	movw	r1, #32770	; 0x8002
24005898:	f7ff fd22 	bl	240052e0 <I2C_Enable_IRQ>
    return HAL_OK;
2400589c:	4620      	mov	r0, r4
}
2400589e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
240058a0:	2002      	movs	r0, #2
240058a2:	e7fc      	b.n	2400589e <HAL_I2C_Slave_Receive_IT+0x52>
    __HAL_LOCK(hi2c);
240058a4:	2002      	movs	r0, #2
240058a6:	e7fa      	b.n	2400589e <HAL_I2C_Slave_Receive_IT+0x52>
240058a8:	ffff0000 	.word	0xffff0000
240058ac:	24005e51 	.word	0x24005e51

240058b0 <HAL_I2C_EV_IRQHandler>:
{
240058b0:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
240058b2:	6803      	ldr	r3, [r0, #0]
240058b4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
240058b6:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
240058b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
240058ba:	b103      	cbz	r3, 240058be <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
240058bc:	4798      	blx	r3
}
240058be:	bd08      	pop	{r3, pc}

240058c0 <HAL_I2C_MasterRxCpltCallback>:
}
240058c0:	4770      	bx	lr

240058c2 <I2C_ITMasterSeqCplt>:
{
240058c2:	b538      	push	{r3, r4, r5, lr}
240058c4:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
240058c6:	2300      	movs	r3, #0
240058c8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
240058cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240058d0:	b2db      	uxtb	r3, r3
240058d2:	2b21      	cmp	r3, #33	; 0x21
240058d4:	d00f      	beq.n	240058f6 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
240058d6:	2320      	movs	r3, #32
240058d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
240058dc:	2312      	movs	r3, #18
240058de:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
240058e0:	2500      	movs	r5, #0
240058e2:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
240058e4:	2102      	movs	r1, #2
240058e6:	f7ff fd3b 	bl	24005360 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
240058ea:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
240058ee:	4620      	mov	r0, r4
240058f0:	f7ff ffe6 	bl	240058c0 <HAL_I2C_MasterRxCpltCallback>
}
240058f4:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
240058f6:	2320      	movs	r3, #32
240058f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
240058fc:	2311      	movs	r3, #17
240058fe:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
24005900:	2500      	movs	r5, #0
24005902:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
24005904:	2101      	movs	r1, #1
24005906:	f7ff fd2b 	bl	24005360 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400590a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400590e:	4620      	mov	r0, r4
24005910:	f029 fade 	bl	2402eed0 <__HAL_I2C_MasterTxCpltCallback_veneer>
24005914:	e7ee      	b.n	240058f4 <I2C_ITMasterSeqCplt+0x32>

24005916 <HAL_I2C_SlaveTxCpltCallback>:
}
24005916:	4770      	bx	lr

24005918 <I2C_ITSlaveSeqCplt>:
{
24005918:	b510      	push	{r4, lr}
2400591a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400591c:	6803      	ldr	r3, [r0, #0]
2400591e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24005920:	2100      	movs	r1, #0
24005922:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24005926:	f412 4f80 	tst.w	r2, #16384	; 0x4000
2400592a:	d00e      	beq.n	2400594a <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400592c:	681a      	ldr	r2, [r3, #0]
2400592e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24005932:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24005934:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005938:	b2db      	uxtb	r3, r3
2400593a:	2b29      	cmp	r3, #41	; 0x29
2400593c:	d00d      	beq.n	2400595a <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400593e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005942:	b2db      	uxtb	r3, r3
24005944:	2b2a      	cmp	r3, #42	; 0x2a
24005946:	d018      	beq.n	2400597a <I2C_ITSlaveSeqCplt+0x62>
}
24005948:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400594a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400594e:	d0f1      	beq.n	24005934 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24005950:	681a      	ldr	r2, [r3, #0]
24005952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24005956:	601a      	str	r2, [r3, #0]
24005958:	e7ec      	b.n	24005934 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400595a:	2328      	movs	r3, #40	; 0x28
2400595c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24005960:	2321      	movs	r3, #33	; 0x21
24005962:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
24005964:	2101      	movs	r1, #1
24005966:	4620      	mov	r0, r4
24005968:	f7ff fcfa 	bl	24005360 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400596c:	2300      	movs	r3, #0
2400596e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24005972:	4620      	mov	r0, r4
24005974:	f7ff ffcf 	bl	24005916 <HAL_I2C_SlaveTxCpltCallback>
24005978:	e7e6      	b.n	24005948 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400597a:	2328      	movs	r3, #40	; 0x28
2400597c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24005980:	2322      	movs	r3, #34	; 0x22
24005982:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
24005984:	2102      	movs	r1, #2
24005986:	4620      	mov	r0, r4
24005988:	f7ff fcea 	bl	24005360 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400598c:	2300      	movs	r3, #0
2400598e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24005992:	4620      	mov	r0, r4
24005994:	f029 fa94 	bl	2402eec0 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24005998:	e7d6      	b.n	24005948 <I2C_ITSlaveSeqCplt+0x30>

2400599a <HAL_I2C_AddrCallback>:
}
2400599a:	4770      	bx	lr

2400599c <I2C_ITAddrCplt>:
{
2400599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400599e:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
240059a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240059a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
240059a8:	2b28      	cmp	r3, #40	; 0x28
240059aa:	d006      	beq.n	240059ba <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
240059ac:	6803      	ldr	r3, [r0, #0]
240059ae:	2208      	movs	r2, #8
240059b0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
240059b2:	2300      	movs	r3, #0
240059b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
240059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
240059ba:	6803      	ldr	r3, [r0, #0]
240059bc:	699e      	ldr	r6, [r3, #24]
240059be:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
240059c2:	699a      	ldr	r2, [r3, #24]
240059c4:	0c12      	lsrs	r2, r2, #16
240059c6:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
240059ca:	689a      	ldr	r2, [r3, #8]
240059cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
240059d0:	68df      	ldr	r7, [r3, #12]
240059d2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240059d6:	68c1      	ldr	r1, [r0, #12]
240059d8:	2902      	cmp	r1, #2
240059da:	d122      	bne.n	24005a22 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
240059dc:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
240059e0:	f015 0f06 	tst.w	r5, #6
240059e4:	d110      	bne.n	24005a08 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
240059e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
240059e8:	3101      	adds	r1, #1
240059ea:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
240059ec:	6c81      	ldr	r1, [r0, #72]	; 0x48
240059ee:	2902      	cmp	r1, #2
240059f0:	d1e2      	bne.n	240059b8 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
240059f2:	2100      	movs	r1, #0
240059f4:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
240059f6:	2008      	movs	r0, #8
240059f8:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
240059fa:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
240059fe:	4631      	mov	r1, r6
24005a00:	4620      	mov	r0, r4
24005a02:	f7ff ffca 	bl	2400599a <HAL_I2C_AddrCallback>
24005a06:	e7d7      	b.n	240059b8 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
24005a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24005a0c:	f7ff fca8 	bl	24005360 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
24005a10:	2300      	movs	r3, #0
24005a12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24005a16:	463a      	mov	r2, r7
24005a18:	4631      	mov	r1, r6
24005a1a:	4620      	mov	r0, r4
24005a1c:	f7ff ffbd 	bl	2400599a <HAL_I2C_AddrCallback>
24005a20:	e7ca      	b.n	240059b8 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
24005a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24005a26:	f7ff fc9b 	bl	24005360 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
24005a2a:	2300      	movs	r3, #0
24005a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24005a30:	462a      	mov	r2, r5
24005a32:	4631      	mov	r1, r6
24005a34:	4620      	mov	r0, r4
24005a36:	f7ff ffb0 	bl	2400599a <HAL_I2C_AddrCallback>
24005a3a:	e7bd      	b.n	240059b8 <I2C_ITAddrCplt+0x1c>

24005a3c <HAL_I2C_ListenCpltCallback>:
}
24005a3c:	4770      	bx	lr
	...

24005a40 <I2C_ITListenCplt>:
{
24005a40:	b510      	push	{r4, lr}
24005a42:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24005a44:	4b17      	ldr	r3, [pc, #92]	; (24005aa4 <I2C_ITListenCplt+0x64>)
24005a46:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24005a48:	2300      	movs	r3, #0
24005a4a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24005a4c:	2220      	movs	r2, #32
24005a4e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24005a52:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
24005a56:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24005a58:	f011 0f04 	tst.w	r1, #4
24005a5c:	d013      	beq.n	24005a86 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24005a5e:	6803      	ldr	r3, [r0, #0]
24005a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24005a62:	6a43      	ldr	r3, [r0, #36]	; 0x24
24005a64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24005a66:	6a43      	ldr	r3, [r0, #36]	; 0x24
24005a68:	3301      	adds	r3, #1
24005a6a:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24005a6c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
24005a6e:	b153      	cbz	r3, 24005a86 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
24005a70:	3b01      	subs	r3, #1
24005a72:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
24005a74:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
24005a76:	b29b      	uxth	r3, r3
24005a78:	3b01      	subs	r3, #1
24005a7a:	b29b      	uxth	r3, r3
24005a7c:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24005a7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
24005a80:	f043 0304 	orr.w	r3, r3, #4
24005a84:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
24005a86:	f248 0103 	movw	r1, #32771	; 0x8003
24005a8a:	4620      	mov	r0, r4
24005a8c:	f7ff fc68 	bl	24005360 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24005a90:	6823      	ldr	r3, [r4, #0]
24005a92:	2210      	movs	r2, #16
24005a94:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
24005a96:	2300      	movs	r3, #0
24005a98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24005a9c:	4620      	mov	r0, r4
24005a9e:	f7ff ffcd 	bl	24005a3c <HAL_I2C_ListenCpltCallback>
}
24005aa2:	bd10      	pop	{r4, pc}
24005aa4:	ffff0000 	.word	0xffff0000

24005aa8 <HAL_I2C_MemTxCpltCallback>:
}
24005aa8:	4770      	bx	lr

24005aaa <HAL_I2C_MemRxCpltCallback>:
}
24005aaa:	4770      	bx	lr

24005aac <HAL_I2C_AbortCpltCallback>:
}
24005aac:	4770      	bx	lr

24005aae <I2C_TreatErrorCallback>:
{
24005aae:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24005ab0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24005ab4:	b2db      	uxtb	r3, r3
24005ab6:	2b60      	cmp	r3, #96	; 0x60
24005ab8:	d006      	beq.n	24005ac8 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
24005aba:	2300      	movs	r3, #0
24005abc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24005abe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24005ac2:	f029 fa21 	bl	2402ef08 <__HAL_I2C_ErrorCallback_veneer>
}
24005ac6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24005ac8:	2320      	movs	r3, #32
24005aca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24005ace:	2300      	movs	r3, #0
24005ad0:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24005ad2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
24005ad6:	f7ff ffe9 	bl	24005aac <HAL_I2C_AbortCpltCallback>
24005ada:	e7f4      	b.n	24005ac6 <I2C_TreatErrorCallback+0x18>

24005adc <I2C_ITError>:
{
24005adc:	b510      	push	{r4, lr}
24005ade:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24005ae0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24005ae4:	2000      	movs	r0, #0
24005ae6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24005aea:	4a45      	ldr	r2, [pc, #276]	; (24005c00 <I2C_ITError+0x124>)
24005aec:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24005aee:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24005af0:	6c62      	ldr	r2, [r4, #68]	; 0x44
24005af2:	430a      	orrs	r2, r1
24005af4:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
24005af6:	3b28      	subs	r3, #40	; 0x28
24005af8:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24005afa:	2b02      	cmp	r3, #2
24005afc:	d82d      	bhi.n	24005b5a <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
24005afe:	2103      	movs	r1, #3
24005b00:	4620      	mov	r0, r4
24005b02:	f7ff fc2d 	bl	24005360 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24005b06:	2328      	movs	r3, #40	; 0x28
24005b08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24005b0c:	4b3d      	ldr	r3, [pc, #244]	; (24005c04 <I2C_ITError+0x128>)
24005b0e:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
24005b10:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24005b12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
24005b14:	2a00      	cmp	r2, #0
24005b16:	d049      	beq.n	24005bac <I2C_ITError+0xd0>
24005b18:	2b21      	cmp	r3, #33	; 0x21
24005b1a:	bf18      	it	ne
24005b1c:	2b11      	cmpne	r3, #17
24005b1e:	d145      	bne.n	24005bac <I2C_ITError+0xd0>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24005b20:	6823      	ldr	r3, [r4, #0]
24005b22:	681a      	ldr	r2, [r3, #0]
24005b24:	f412 4f80 	tst.w	r2, #16384	; 0x4000
24005b28:	d003      	beq.n	24005b32 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24005b2a:	681a      	ldr	r2, [r3, #0]
24005b2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24005b30:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24005b32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24005b34:	f7ff fa1e 	bl	24004f74 <HAL_DMA_GetState>
24005b38:	2801      	cmp	r0, #1
24005b3a:	d033      	beq.n	24005ba4 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24005b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24005b3e:	4a32      	ldr	r2, [pc, #200]	; (24005c08 <I2C_ITError+0x12c>)
24005b40:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24005b42:	2300      	movs	r3, #0
24005b44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24005b48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24005b4a:	f7fe fd3f 	bl	240045cc <HAL_DMA_Abort_IT>
24005b4e:	2800      	cmp	r0, #0
24005b50:	d055      	beq.n	24005bfe <I2C_ITError+0x122>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24005b52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24005b54:	6d03      	ldr	r3, [r0, #80]	; 0x50
24005b56:	4798      	blx	r3
24005b58:	e051      	b.n	24005bfe <I2C_ITError+0x122>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
24005b5a:	f248 0103 	movw	r1, #32771	; 0x8003
24005b5e:	4620      	mov	r0, r4
24005b60:	f7ff fbfe 	bl	24005360 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
24005b64:	4620      	mov	r0, r4
24005b66:	f7ff fb8c 	bl	24005282 <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24005b6a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005b6e:	b2db      	uxtb	r3, r3
24005b70:	2b60      	cmp	r3, #96	; 0x60
24005b72:	d014      	beq.n	24005b9e <I2C_ITError+0xc2>
      hi2c->State         = HAL_I2C_STATE_READY;
24005b74:	2320      	movs	r3, #32
24005b76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24005b7a:	6823      	ldr	r3, [r4, #0]
24005b7c:	699a      	ldr	r2, [r3, #24]
24005b7e:	f012 0f20 	tst.w	r2, #32
24005b82:	d00c      	beq.n	24005b9e <I2C_ITError+0xc2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24005b84:	699a      	ldr	r2, [r3, #24]
24005b86:	f012 0f10 	tst.w	r2, #16
24005b8a:	d005      	beq.n	24005b98 <I2C_ITError+0xbc>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24005b8c:	2210      	movs	r2, #16
24005b8e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24005b90:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005b92:	f043 0304 	orr.w	r3, r3, #4
24005b96:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24005b98:	6823      	ldr	r3, [r4, #0]
24005b9a:	2220      	movs	r2, #32
24005b9c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
24005b9e:	2300      	movs	r3, #0
24005ba0:	6363      	str	r3, [r4, #52]	; 0x34
24005ba2:	e7b5      	b.n	24005b10 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
24005ba4:	4620      	mov	r0, r4
24005ba6:	f7ff ff82 	bl	24005aae <I2C_TreatErrorCallback>
24005baa:	e028      	b.n	24005bfe <I2C_ITError+0x122>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24005bac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24005bae:	b31a      	cbz	r2, 24005bf8 <I2C_ITError+0x11c>
24005bb0:	2b22      	cmp	r3, #34	; 0x22
24005bb2:	bf18      	it	ne
24005bb4:	2b12      	cmpne	r3, #18
24005bb6:	d11f      	bne.n	24005bf8 <I2C_ITError+0x11c>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24005bb8:	6823      	ldr	r3, [r4, #0]
24005bba:	681a      	ldr	r2, [r3, #0]
24005bbc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
24005bc0:	d003      	beq.n	24005bca <I2C_ITError+0xee>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24005bc2:	681a      	ldr	r2, [r3, #0]
24005bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24005bc8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24005bca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24005bcc:	f7ff f9d2 	bl	24004f74 <HAL_DMA_GetState>
24005bd0:	2801      	cmp	r0, #1
24005bd2:	d00d      	beq.n	24005bf0 <I2C_ITError+0x114>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24005bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24005bd6:	4a0c      	ldr	r2, [pc, #48]	; (24005c08 <I2C_ITError+0x12c>)
24005bd8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24005bda:	2300      	movs	r3, #0
24005bdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24005be0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24005be2:	f7fe fcf3 	bl	240045cc <HAL_DMA_Abort_IT>
24005be6:	b150      	cbz	r0, 24005bfe <I2C_ITError+0x122>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24005be8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24005bea:	6d03      	ldr	r3, [r0, #80]	; 0x50
24005bec:	4798      	blx	r3
24005bee:	e006      	b.n	24005bfe <I2C_ITError+0x122>
      I2C_TreatErrorCallback(hi2c);
24005bf0:	4620      	mov	r0, r4
24005bf2:	f7ff ff5c 	bl	24005aae <I2C_TreatErrorCallback>
24005bf6:	e002      	b.n	24005bfe <I2C_ITError+0x122>
    I2C_TreatErrorCallback(hi2c);
24005bf8:	4620      	mov	r0, r4
24005bfa:	f7ff ff58 	bl	24005aae <I2C_TreatErrorCallback>
}
24005bfe:	bd10      	pop	{r4, pc}
24005c00:	ffff0000 	.word	0xffff0000
24005c04:	24005e51 	.word	0x24005e51
24005c08:	2400649d 	.word	0x2400649d

24005c0c <I2C_ITSlaveCplt>:
{
24005c0c:	b570      	push	{r4, r5, r6, lr}
24005c0e:	4604      	mov	r4, r0
24005c10:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24005c12:	6802      	ldr	r2, [r0, #0]
24005c14:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24005c16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24005c1a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24005c1c:	2120      	movs	r1, #32
24005c1e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24005c20:	2b29      	cmp	r3, #41	; 0x29
24005c22:	bf18      	it	ne
24005c24:	2b21      	cmpne	r3, #33	; 0x21
24005c26:	d057      	beq.n	24005cd8 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24005c28:	2b2a      	cmp	r3, #42	; 0x2a
24005c2a:	bf18      	it	ne
24005c2c:	2b22      	cmpne	r3, #34	; 0x22
24005c2e:	d05a      	beq.n	24005ce6 <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24005c30:	6822      	ldr	r2, [r4, #0]
24005c32:	6853      	ldr	r3, [r2, #4]
24005c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24005c38:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
24005c3a:	6822      	ldr	r2, [r4, #0]
24005c3c:	6853      	ldr	r3, [r2, #4]
24005c3e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
24005c42:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
24005c46:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
24005c4a:	f023 0301 	bic.w	r3, r3, #1
24005c4e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
24005c50:	4620      	mov	r0, r4
24005c52:	f7ff fb16 	bl	24005282 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24005c56:	f416 4f80 	tst.w	r6, #16384	; 0x4000
24005c5a:	f000 8085 	beq.w	24005d68 <I2C_ITSlaveCplt+0x15c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24005c5e:	6822      	ldr	r2, [r4, #0]
24005c60:	6813      	ldr	r3, [r2, #0]
24005c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24005c66:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24005c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24005c6a:	2b00      	cmp	r3, #0
24005c6c:	d045      	beq.n	24005cfa <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
24005c6e:	681b      	ldr	r3, [r3, #0]
24005c70:	4974      	ldr	r1, [pc, #464]	; (24005e44 <I2C_ITSlaveCplt+0x238>)
24005c72:	4a75      	ldr	r2, [pc, #468]	; (24005e48 <I2C_ITSlaveCplt+0x23c>)
24005c74:	4293      	cmp	r3, r2
24005c76:	bf18      	it	ne
24005c78:	428b      	cmpne	r3, r1
24005c7a:	d03b      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005c7c:	3218      	adds	r2, #24
24005c7e:	4293      	cmp	r3, r2
24005c80:	d038      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005c82:	3218      	adds	r2, #24
24005c84:	4293      	cmp	r3, r2
24005c86:	d035      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005c88:	3218      	adds	r2, #24
24005c8a:	4293      	cmp	r3, r2
24005c8c:	d032      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005c8e:	3218      	adds	r2, #24
24005c90:	4293      	cmp	r3, r2
24005c92:	d02f      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005c94:	3218      	adds	r2, #24
24005c96:	4293      	cmp	r3, r2
24005c98:	d02c      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005c9a:	3218      	adds	r2, #24
24005c9c:	4293      	cmp	r3, r2
24005c9e:	d029      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005ca0:	f502 7256 	add.w	r2, r2, #856	; 0x358
24005ca4:	4293      	cmp	r3, r2
24005ca6:	d025      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005ca8:	3218      	adds	r2, #24
24005caa:	4293      	cmp	r3, r2
24005cac:	d022      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005cae:	3218      	adds	r2, #24
24005cb0:	4293      	cmp	r3, r2
24005cb2:	d01f      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005cb4:	3218      	adds	r2, #24
24005cb6:	4293      	cmp	r3, r2
24005cb8:	d01c      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005cba:	3218      	adds	r2, #24
24005cbc:	4293      	cmp	r3, r2
24005cbe:	d019      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005cc0:	3218      	adds	r2, #24
24005cc2:	4293      	cmp	r3, r2
24005cc4:	d016      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005cc6:	3218      	adds	r2, #24
24005cc8:	4293      	cmp	r3, r2
24005cca:	d013      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005ccc:	3218      	adds	r2, #24
24005cce:	4293      	cmp	r3, r2
24005cd0:	d010      	beq.n	24005cf4 <I2C_ITSlaveCplt+0xe8>
24005cd2:	685b      	ldr	r3, [r3, #4]
24005cd4:	b29b      	uxth	r3, r3
24005cd6:	e00f      	b.n	24005cf8 <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
24005cd8:	f248 0101 	movw	r1, #32769	; 0x8001
24005cdc:	f7ff fb40 	bl	24005360 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24005ce0:	2321      	movs	r3, #33	; 0x21
24005ce2:	6323      	str	r3, [r4, #48]	; 0x30
24005ce4:	e7a4      	b.n	24005c30 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
24005ce6:	f248 0102 	movw	r1, #32770	; 0x8002
24005cea:	f7ff fb39 	bl	24005360 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24005cee:	2322      	movs	r3, #34	; 0x22
24005cf0:	6323      	str	r3, [r4, #48]	; 0x30
24005cf2:	e79d      	b.n	24005c30 <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
24005cf4:	685b      	ldr	r3, [r3, #4]
24005cf6:	b29b      	uxth	r3, r3
24005cf8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24005cfa:	f015 0f04 	tst.w	r5, #4
24005cfe:	d011      	beq.n	24005d24 <I2C_ITSlaveCplt+0x118>
    tmpITFlags &= ~I2C_FLAG_RXNE;
24005d00:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24005d04:	6823      	ldr	r3, [r4, #0]
24005d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24005d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
24005d0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24005d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
24005d0e:	3301      	adds	r3, #1
24005d10:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24005d12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
24005d14:	b133      	cbz	r3, 24005d24 <I2C_ITSlaveCplt+0x118>
      hi2c->XferSize--;
24005d16:	3b01      	subs	r3, #1
24005d18:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
24005d1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005d1c:	b29b      	uxth	r3, r3
24005d1e:	3b01      	subs	r3, #1
24005d20:	b29b      	uxth	r3, r3
24005d22:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
24005d24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005d26:	b29b      	uxth	r3, r3
24005d28:	b11b      	cbz	r3, 24005d32 <I2C_ITSlaveCplt+0x126>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24005d2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005d2c:	f043 0304 	orr.w	r3, r3, #4
24005d30:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24005d32:	2300      	movs	r3, #0
24005d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
24005d38:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24005d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005d3c:	2b00      	cmp	r3, #0
24005d3e:	d157      	bne.n	24005df0 <I2C_ITSlaveCplt+0x1e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24005d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24005d42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
24005d46:	d161      	bne.n	24005e0c <I2C_ITSlaveCplt+0x200>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24005d48:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005d4c:	b2db      	uxtb	r3, r3
24005d4e:	2b22      	cmp	r3, #34	; 0x22
24005d50:	d06c      	beq.n	24005e2c <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
24005d52:	2320      	movs	r3, #32
24005d54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24005d58:	2300      	movs	r3, #0
24005d5a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24005d5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24005d60:	4620      	mov	r0, r4
24005d62:	f7ff fdd8 	bl	24005916 <HAL_I2C_SlaveTxCpltCallback>
}
24005d66:	e060      	b.n	24005e2a <I2C_ITSlaveCplt+0x21e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24005d68:	f416 4f00 	tst.w	r6, #32768	; 0x8000
24005d6c:	d0c5      	beq.n	24005cfa <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24005d6e:	6822      	ldr	r2, [r4, #0]
24005d70:	6813      	ldr	r3, [r2, #0]
24005d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24005d76:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
24005d78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24005d7a:	2b00      	cmp	r3, #0
24005d7c:	d0bd      	beq.n	24005cfa <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24005d7e:	681b      	ldr	r3, [r3, #0]
24005d80:	4930      	ldr	r1, [pc, #192]	; (24005e44 <I2C_ITSlaveCplt+0x238>)
24005d82:	4a31      	ldr	r2, [pc, #196]	; (24005e48 <I2C_ITSlaveCplt+0x23c>)
24005d84:	4293      	cmp	r3, r2
24005d86:	bf18      	it	ne
24005d88:	428b      	cmpne	r3, r1
24005d8a:	d02d      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005d8c:	3218      	adds	r2, #24
24005d8e:	4293      	cmp	r3, r2
24005d90:	d02a      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005d92:	3218      	adds	r2, #24
24005d94:	4293      	cmp	r3, r2
24005d96:	d027      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005d98:	3218      	adds	r2, #24
24005d9a:	4293      	cmp	r3, r2
24005d9c:	d024      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005d9e:	3218      	adds	r2, #24
24005da0:	4293      	cmp	r3, r2
24005da2:	d021      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005da4:	3218      	adds	r2, #24
24005da6:	4293      	cmp	r3, r2
24005da8:	d01e      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005daa:	3218      	adds	r2, #24
24005dac:	4293      	cmp	r3, r2
24005dae:	d01b      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005db0:	f502 7256 	add.w	r2, r2, #856	; 0x358
24005db4:	4293      	cmp	r3, r2
24005db6:	d017      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005db8:	3218      	adds	r2, #24
24005dba:	4293      	cmp	r3, r2
24005dbc:	d014      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005dbe:	3218      	adds	r2, #24
24005dc0:	4293      	cmp	r3, r2
24005dc2:	d011      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005dc4:	3218      	adds	r2, #24
24005dc6:	4293      	cmp	r3, r2
24005dc8:	d00e      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005dca:	3218      	adds	r2, #24
24005dcc:	4293      	cmp	r3, r2
24005dce:	d00b      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005dd0:	3218      	adds	r2, #24
24005dd2:	4293      	cmp	r3, r2
24005dd4:	d008      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005dd6:	3218      	adds	r2, #24
24005dd8:	4293      	cmp	r3, r2
24005dda:	d005      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005ddc:	3218      	adds	r2, #24
24005dde:	4293      	cmp	r3, r2
24005de0:	d002      	beq.n	24005de8 <I2C_ITSlaveCplt+0x1dc>
24005de2:	685b      	ldr	r3, [r3, #4]
24005de4:	b29b      	uxth	r3, r3
24005de6:	e001      	b.n	24005dec <I2C_ITSlaveCplt+0x1e0>
24005de8:	685b      	ldr	r3, [r3, #4]
24005dea:	b29b      	uxth	r3, r3
24005dec:	8563      	strh	r3, [r4, #42]	; 0x2a
24005dee:	e784      	b.n	24005cfa <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24005df0:	6c61      	ldr	r1, [r4, #68]	; 0x44
24005df2:	4620      	mov	r0, r4
24005df4:	f7ff fe72 	bl	24005adc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
24005df8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005dfc:	b2db      	uxtb	r3, r3
24005dfe:	2b28      	cmp	r3, #40	; 0x28
24005e00:	d113      	bne.n	24005e2a <I2C_ITSlaveCplt+0x21e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
24005e02:	4629      	mov	r1, r5
24005e04:	4620      	mov	r0, r4
24005e06:	f7ff fe1b 	bl	24005a40 <I2C_ITListenCplt>
24005e0a:	e00e      	b.n	24005e2a <I2C_ITSlaveCplt+0x21e>
    I2C_ITSlaveSeqCplt(hi2c);
24005e0c:	4620      	mov	r0, r4
24005e0e:	f7ff fd83 	bl	24005918 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24005e12:	4b0e      	ldr	r3, [pc, #56]	; (24005e4c <I2C_ITSlaveCplt+0x240>)
24005e14:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
24005e16:	2320      	movs	r3, #32
24005e18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24005e1c:	2300      	movs	r3, #0
24005e1e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24005e20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
24005e24:	4620      	mov	r0, r4
24005e26:	f7ff fe09 	bl	24005a3c <HAL_I2C_ListenCpltCallback>
}
24005e2a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24005e2c:	2320      	movs	r3, #32
24005e2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24005e32:	2300      	movs	r3, #0
24005e34:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24005e36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24005e3a:	4620      	mov	r0, r4
24005e3c:	f029 f840 	bl	2402eec0 <__HAL_I2C_SlaveRxCpltCallback_veneer>
24005e40:	e7f3      	b.n	24005e2a <I2C_ITSlaveCplt+0x21e>
24005e42:	bf00      	nop
24005e44:	40020010 	.word	0x40020010
24005e48:	40020028 	.word	0x40020028
24005e4c:	ffff0000 	.word	0xffff0000

24005e50 <I2C_Slave_ISR_IT>:
{
24005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
24005e52:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24005e54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24005e58:	2b01      	cmp	r3, #1
24005e5a:	f000 809f 	beq.w	24005f9c <I2C_Slave_ISR_IT+0x14c>
24005e5e:	4604      	mov	r4, r0
24005e60:	460d      	mov	r5, r1
24005e62:	4616      	mov	r6, r2
24005e64:	2301      	movs	r3, #1
24005e66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24005e6a:	f011 0f20 	tst.w	r1, #32
24005e6e:	d002      	beq.n	24005e76 <I2C_Slave_ISR_IT+0x26>
24005e70:	f012 0f20 	tst.w	r2, #32
24005e74:	d119      	bne.n	24005eaa <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24005e76:	f015 0f10 	tst.w	r5, #16
24005e7a:	d03f      	beq.n	24005efc <I2C_Slave_ISR_IT+0xac>
24005e7c:	f016 0f10 	tst.w	r6, #16
24005e80:	d03c      	beq.n	24005efc <I2C_Slave_ISR_IT+0xac>
    if (hi2c->XferCount == 0U)
24005e82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005e84:	b29b      	uxth	r3, r3
24005e86:	bb43      	cbnz	r3, 24005eda <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24005e88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005e8c:	b2db      	uxtb	r3, r3
24005e8e:	2b28      	cmp	r3, #40	; 0x28
24005e90:	d00e      	beq.n	24005eb0 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24005e92:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005e96:	b2db      	uxtb	r3, r3
24005e98:	2b29      	cmp	r3, #41	; 0x29
24005e9a:	d011      	beq.n	24005ec0 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24005e9c:	6823      	ldr	r3, [r4, #0]
24005e9e:	2210      	movs	r2, #16
24005ea0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
24005ea2:	2000      	movs	r0, #0
24005ea4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
24005ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24005eaa:	f7ff feaf 	bl	24005c0c <I2C_ITSlaveCplt>
24005eae:	e7e2      	b.n	24005e76 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24005eb0:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
24005eb4:	d1ed      	bne.n	24005e92 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
24005eb6:	4629      	mov	r1, r5
24005eb8:	4620      	mov	r0, r4
24005eba:	f7ff fdc1 	bl	24005a40 <I2C_ITListenCplt>
24005ebe:	e7f0      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24005ec0:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
24005ec4:	d0ea      	beq.n	24005e9c <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24005ec6:	6823      	ldr	r3, [r4, #0]
24005ec8:	2210      	movs	r2, #16
24005eca:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
24005ecc:	4620      	mov	r0, r4
24005ece:	f7ff f9d8 	bl	24005282 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
24005ed2:	4620      	mov	r0, r4
24005ed4:	f7ff fd20 	bl	24005918 <I2C_ITSlaveSeqCplt>
24005ed8:	e7e3      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24005eda:	6823      	ldr	r3, [r4, #0]
24005edc:	2210      	movs	r2, #16
24005ede:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24005ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005ee2:	f043 0304 	orr.w	r3, r3, #4
24005ee6:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24005ee8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
24005eec:	bf18      	it	ne
24005eee:	2f00      	cmpne	r7, #0
24005ef0:	d1d7      	bne.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24005ef2:	6c61      	ldr	r1, [r4, #68]	; 0x44
24005ef4:	4620      	mov	r0, r4
24005ef6:	f7ff fdf1 	bl	24005adc <I2C_ITError>
24005efa:	e7d2      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24005efc:	f015 0f04 	tst.w	r5, #4
24005f00:	d01f      	beq.n	24005f42 <I2C_Slave_ISR_IT+0xf2>
24005f02:	f016 0f04 	tst.w	r6, #4
24005f06:	d01c      	beq.n	24005f42 <I2C_Slave_ISR_IT+0xf2>
    if (hi2c->XferCount > 0U)
24005f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005f0a:	b29b      	uxth	r3, r3
24005f0c:	b173      	cbz	r3, 24005f2c <I2C_Slave_ISR_IT+0xdc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24005f0e:	6823      	ldr	r3, [r4, #0]
24005f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24005f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
24005f14:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
24005f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
24005f18:	3301      	adds	r3, #1
24005f1a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
24005f1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
24005f1e:	3b01      	subs	r3, #1
24005f20:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
24005f22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005f24:	b29b      	uxth	r3, r3
24005f26:	3b01      	subs	r3, #1
24005f28:	b29b      	uxth	r3, r3
24005f2a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24005f2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005f2e:	b29b      	uxth	r3, r3
24005f30:	2b00      	cmp	r3, #0
24005f32:	d1b6      	bne.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
24005f34:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
24005f38:	d0b3      	beq.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
24005f3a:	4620      	mov	r0, r4
24005f3c:	f7ff fcec 	bl	24005918 <I2C_ITSlaveSeqCplt>
24005f40:	e7af      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24005f42:	f015 0f08 	tst.w	r5, #8
24005f46:	d002      	beq.n	24005f4e <I2C_Slave_ISR_IT+0xfe>
24005f48:	f016 0f08 	tst.w	r6, #8
24005f4c:	d118      	bne.n	24005f80 <I2C_Slave_ISR_IT+0x130>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24005f4e:	f015 0f02 	tst.w	r5, #2
24005f52:	d0a6      	beq.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
24005f54:	f016 0f02 	tst.w	r6, #2
24005f58:	d0a3      	beq.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
24005f5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005f5c:	b29b      	uxth	r3, r3
24005f5e:	b1a3      	cbz	r3, 24005f8a <I2C_Slave_ISR_IT+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24005f60:	6a62      	ldr	r2, [r4, #36]	; 0x24
24005f62:	6823      	ldr	r3, [r4, #0]
24005f64:	7812      	ldrb	r2, [r2, #0]
24005f66:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
24005f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
24005f6a:	3301      	adds	r3, #1
24005f6c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
24005f6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24005f70:	b29b      	uxth	r3, r3
24005f72:	3b01      	subs	r3, #1
24005f74:	b29b      	uxth	r3, r3
24005f76:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24005f78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
24005f7a:	3b01      	subs	r3, #1
24005f7c:	8523      	strh	r3, [r4, #40]	; 0x28
24005f7e:	e790      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
24005f80:	4629      	mov	r1, r5
24005f82:	4620      	mov	r0, r4
24005f84:	f7ff fd0a 	bl	2400599c <I2C_ITAddrCplt>
24005f88:	e78b      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24005f8a:	2f00      	cmp	r7, #0
24005f8c:	bf18      	it	ne
24005f8e:	f1b7 7f80 	cmpne.w	r7, #16777216	; 0x1000000
24005f92:	d186      	bne.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
24005f94:	4620      	mov	r0, r4
24005f96:	f7ff fcbf 	bl	24005918 <I2C_ITSlaveSeqCplt>
24005f9a:	e782      	b.n	24005ea2 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
24005f9c:	2002      	movs	r0, #2
24005f9e:	e783      	b.n	24005ea8 <I2C_Slave_ISR_IT+0x58>

24005fa0 <I2C_ITMasterCplt>:
{
24005fa0:	b530      	push	{r4, r5, lr}
24005fa2:	b083      	sub	sp, #12
24005fa4:	4604      	mov	r4, r0
24005fa6:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24005fa8:	6803      	ldr	r3, [r0, #0]
24005faa:	2220      	movs	r2, #32
24005fac:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
24005fae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24005fb2:	b2db      	uxtb	r3, r3
24005fb4:	2b21      	cmp	r3, #33	; 0x21
24005fb6:	d033      	beq.n	24006020 <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24005fb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24005fbc:	b2db      	uxtb	r3, r3
24005fbe:	2b22      	cmp	r3, #34	; 0x22
24005fc0:	d034      	beq.n	2400602c <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
24005fc2:	6822      	ldr	r2, [r4, #0]
24005fc4:	6853      	ldr	r3, [r2, #4]
24005fc6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
24005fca:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
24005fce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
24005fd2:	f023 0301 	bic.w	r3, r3, #1
24005fd6:	6053      	str	r3, [r2, #4]
  hi2c->XferISR       = NULL;
24005fd8:	2300      	movs	r3, #0
24005fda:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24005fdc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
24005fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
24005fe2:	f015 0f10 	tst.w	r5, #16
24005fe6:	d006      	beq.n	24005ff6 <I2C_ITMasterCplt+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24005fe8:	6823      	ldr	r3, [r4, #0]
24005fea:	2210      	movs	r2, #16
24005fec:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24005fee:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005ff0:	f043 0304 	orr.w	r3, r3, #4
24005ff4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
24005ff6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24005ffa:	b2db      	uxtb	r3, r3
24005ffc:	2b60      	cmp	r3, #96	; 0x60
24005ffe:	d01b      	beq.n	24006038 <I2C_ITMasterCplt+0x98>
  I2C_Flush_TXDR(hi2c);
24006000:	4620      	mov	r0, r4
24006002:	f7ff f93e 	bl	24005282 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
24006006:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
24006008:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2400600c:	b2db      	uxtb	r3, r3
2400600e:	2b60      	cmp	r3, #96	; 0x60
24006010:	d000      	beq.n	24006014 <I2C_ITMasterCplt+0x74>
24006012:	b1d2      	cbz	r2, 2400604a <I2C_ITMasterCplt+0xaa>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24006014:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006016:	4620      	mov	r0, r4
24006018:	f7ff fd60 	bl	24005adc <I2C_ITError>
}
2400601c:	b003      	add	sp, #12
2400601e:	bd30      	pop	{r4, r5, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
24006020:	2101      	movs	r1, #1
24006022:	f7ff f99d 	bl	24005360 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
24006026:	2311      	movs	r3, #17
24006028:	6323      	str	r3, [r4, #48]	; 0x30
2400602a:	e7ca      	b.n	24005fc2 <I2C_ITMasterCplt+0x22>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400602c:	2102      	movs	r1, #2
2400602e:	f7ff f997 	bl	24005360 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
24006032:	2312      	movs	r3, #18
24006034:	6323      	str	r3, [r4, #48]	; 0x30
24006036:	e7c4      	b.n	24005fc2 <I2C_ITMasterCplt+0x22>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
24006038:	f015 0f04 	tst.w	r5, #4
2400603c:	d0e0      	beq.n	24006000 <I2C_ITMasterCplt+0x60>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400603e:	6823      	ldr	r3, [r4, #0]
24006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006042:	b2db      	uxtb	r3, r3
24006044:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
24006046:	9b01      	ldr	r3, [sp, #4]
24006048:	e7da      	b.n	24006000 <I2C_ITMasterCplt+0x60>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400604a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2400604e:	b2db      	uxtb	r3, r3
24006050:	2b21      	cmp	r3, #33	; 0x21
24006052:	d017      	beq.n	24006084 <I2C_ITMasterCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006054:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006058:	b2db      	uxtb	r3, r3
2400605a:	2b22      	cmp	r3, #34	; 0x22
2400605c:	d1de      	bne.n	2400601c <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
2400605e:	2320      	movs	r3, #32
24006060:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006064:	2300      	movs	r3, #0
24006066:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
24006068:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
2400606c:	b2db      	uxtb	r3, r3
2400606e:	2b40      	cmp	r3, #64	; 0x40
24006070:	d024      	beq.n	240060bc <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
24006072:	2300      	movs	r3, #0
24006074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
24006078:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2400607c:	4620      	mov	r0, r4
2400607e:	f7ff fc1f 	bl	240058c0 <HAL_I2C_MasterRxCpltCallback>
}
24006082:	e7cb      	b.n	2400601c <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
24006084:	2320      	movs	r3, #32
24006086:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400608a:	2300      	movs	r3, #0
2400608c:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400608e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
24006092:	b2db      	uxtb	r3, r3
24006094:	2b40      	cmp	r3, #64	; 0x40
24006096:	d008      	beq.n	240060aa <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
24006098:	2300      	movs	r3, #0
2400609a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400609e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
240060a2:	4620      	mov	r0, r4
240060a4:	f028 ff14 	bl	2402eed0 <__HAL_I2C_MasterTxCpltCallback_veneer>
240060a8:	e7b8      	b.n	2400601c <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
240060aa:	2300      	movs	r3, #0
240060ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
240060b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
240060b4:	4620      	mov	r0, r4
240060b6:	f7ff fcf7 	bl	24005aa8 <HAL_I2C_MemTxCpltCallback>
240060ba:	e7af      	b.n	2400601c <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
240060bc:	2300      	movs	r3, #0
240060be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
240060c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
240060c6:	4620      	mov	r0, r4
240060c8:	f7ff fcef 	bl	24005aaa <HAL_I2C_MemRxCpltCallback>
240060cc:	e7a6      	b.n	2400601c <I2C_ITMasterCplt+0x7c>
	...

240060d0 <I2C_Slave_ISR_DMA>:
{
240060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
240060d2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
240060d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240060d8:	2b01      	cmp	r3, #1
240060da:	f000 8103 	beq.w	240062e4 <I2C_Slave_ISR_DMA+0x214>
240060de:	4604      	mov	r4, r0
240060e0:	460d      	mov	r5, r1
240060e2:	4616      	mov	r6, r2
240060e4:	2301      	movs	r3, #1
240060e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
240060ea:	f011 0f20 	tst.w	r1, #32
240060ee:	d002      	beq.n	240060f6 <I2C_Slave_ISR_DMA+0x26>
240060f0:	f012 0f20 	tst.w	r2, #32
240060f4:	d14d      	bne.n	24006192 <I2C_Slave_ISR_DMA+0xc2>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
240060f6:	f015 0f10 	tst.w	r5, #16
240060fa:	f000 80e4 	beq.w	240062c6 <I2C_Slave_ISR_DMA+0x1f6>
240060fe:	f016 0f10 	tst.w	r6, #16
24006102:	f000 80e0 	beq.w	240062c6 <I2C_Slave_ISR_DMA+0x1f6>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
24006106:	f3c6 3280 	ubfx	r2, r6, #14, #1
2400610a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
2400610e:	d103      	bne.n	24006118 <I2C_Slave_ISR_DMA+0x48>
24006110:	f416 4f00 	tst.w	r6, #32768	; 0x8000
24006114:	f000 80d3 	beq.w	240062be <I2C_Slave_ISR_DMA+0x1ee>
      if (hi2c->hdmarx != NULL)
24006118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400611a:	2b00      	cmp	r3, #0
2400611c:	d044      	beq.n	240061a8 <I2C_Slave_ISR_DMA+0xd8>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2400611e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
24006122:	d043      	beq.n	240061ac <I2C_Slave_ISR_DMA+0xdc>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
24006124:	681b      	ldr	r3, [r3, #0]
24006126:	4870      	ldr	r0, [pc, #448]	; (240062e8 <I2C_Slave_ISR_DMA+0x218>)
24006128:	4970      	ldr	r1, [pc, #448]	; (240062ec <I2C_Slave_ISR_DMA+0x21c>)
2400612a:	428b      	cmp	r3, r1
2400612c:	bf18      	it	ne
2400612e:	4283      	cmpne	r3, r0
24006130:	d032      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006132:	3118      	adds	r1, #24
24006134:	428b      	cmp	r3, r1
24006136:	d02f      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006138:	3118      	adds	r1, #24
2400613a:	428b      	cmp	r3, r1
2400613c:	d02c      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
2400613e:	3118      	adds	r1, #24
24006140:	428b      	cmp	r3, r1
24006142:	d029      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006144:	3118      	adds	r1, #24
24006146:	428b      	cmp	r3, r1
24006148:	d026      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
2400614a:	3118      	adds	r1, #24
2400614c:	428b      	cmp	r3, r1
2400614e:	d023      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006150:	3118      	adds	r1, #24
24006152:	428b      	cmp	r3, r1
24006154:	d020      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006156:	f501 7156 	add.w	r1, r1, #856	; 0x358
2400615a:	428b      	cmp	r3, r1
2400615c:	d01c      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
2400615e:	3118      	adds	r1, #24
24006160:	428b      	cmp	r3, r1
24006162:	d019      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006164:	3118      	adds	r1, #24
24006166:	428b      	cmp	r3, r1
24006168:	d016      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
2400616a:	3118      	adds	r1, #24
2400616c:	428b      	cmp	r3, r1
2400616e:	d013      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006170:	3118      	adds	r1, #24
24006172:	428b      	cmp	r3, r1
24006174:	d010      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006176:	3118      	adds	r1, #24
24006178:	428b      	cmp	r3, r1
2400617a:	d00d      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
2400617c:	3118      	adds	r1, #24
2400617e:	428b      	cmp	r3, r1
24006180:	d00a      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006182:	3118      	adds	r1, #24
24006184:	428b      	cmp	r3, r1
24006186:	d007      	beq.n	24006198 <I2C_Slave_ISR_DMA+0xc8>
24006188:	685b      	ldr	r3, [r3, #4]
2400618a:	fab3 f383 	clz	r3, r3
2400618e:	095b      	lsrs	r3, r3, #5
24006190:	e006      	b.n	240061a0 <I2C_Slave_ISR_DMA+0xd0>
    I2C_ITSlaveCplt(hi2c, ITFlags);
24006192:	f7ff fd3b 	bl	24005c0c <I2C_ITSlaveCplt>
24006196:	e7ae      	b.n	240060f6 <I2C_Slave_ISR_DMA+0x26>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
24006198:	685b      	ldr	r3, [r3, #4]
2400619a:	fab3 f383 	clz	r3, r3
2400619e:	095b      	lsrs	r3, r3, #5
240061a0:	2b00      	cmp	r3, #0
240061a2:	d140      	bne.n	24006226 <I2C_Slave_ISR_DMA+0x156>
  uint32_t treatdmanack = 0U;
240061a4:	2100      	movs	r1, #0
240061a6:	e002      	b.n	240061ae <I2C_Slave_ISR_DMA+0xde>
240061a8:	2100      	movs	r1, #0
240061aa:	e000      	b.n	240061ae <I2C_Slave_ISR_DMA+0xde>
240061ac:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
240061ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240061b0:	2b00      	cmp	r3, #0
240061b2:	d03f      	beq.n	24006234 <I2C_Slave_ISR_DMA+0x164>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
240061b4:	2a00      	cmp	r2, #0
240061b6:	d03d      	beq.n	24006234 <I2C_Slave_ISR_DMA+0x164>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
240061b8:	681b      	ldr	r3, [r3, #0]
240061ba:	484b      	ldr	r0, [pc, #300]	; (240062e8 <I2C_Slave_ISR_DMA+0x218>)
240061bc:	4a4b      	ldr	r2, [pc, #300]	; (240062ec <I2C_Slave_ISR_DMA+0x21c>)
240061be:	4293      	cmp	r3, r2
240061c0:	bf18      	it	ne
240061c2:	4283      	cmpne	r3, r0
240061c4:	d031      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061c6:	3218      	adds	r2, #24
240061c8:	4293      	cmp	r3, r2
240061ca:	d02e      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061cc:	3218      	adds	r2, #24
240061ce:	4293      	cmp	r3, r2
240061d0:	d02b      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061d2:	3218      	adds	r2, #24
240061d4:	4293      	cmp	r3, r2
240061d6:	d028      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061d8:	3218      	adds	r2, #24
240061da:	4293      	cmp	r3, r2
240061dc:	d025      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061de:	3218      	adds	r2, #24
240061e0:	4293      	cmp	r3, r2
240061e2:	d022      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061e4:	3218      	adds	r2, #24
240061e6:	4293      	cmp	r3, r2
240061e8:	d01f      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061ea:	f502 7256 	add.w	r2, r2, #856	; 0x358
240061ee:	4293      	cmp	r3, r2
240061f0:	d01b      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061f2:	3218      	adds	r2, #24
240061f4:	4293      	cmp	r3, r2
240061f6:	d018      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061f8:	3218      	adds	r2, #24
240061fa:	4293      	cmp	r3, r2
240061fc:	d015      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
240061fe:	3218      	adds	r2, #24
24006200:	4293      	cmp	r3, r2
24006202:	d012      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
24006204:	3218      	adds	r2, #24
24006206:	4293      	cmp	r3, r2
24006208:	d00f      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
2400620a:	3218      	adds	r2, #24
2400620c:	4293      	cmp	r3, r2
2400620e:	d00c      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
24006210:	3218      	adds	r2, #24
24006212:	4293      	cmp	r3, r2
24006214:	d009      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
24006216:	3218      	adds	r2, #24
24006218:	4293      	cmp	r3, r2
2400621a:	d006      	beq.n	2400622a <I2C_Slave_ISR_DMA+0x15a>
2400621c:	685b      	ldr	r3, [r3, #4]
2400621e:	fab3 f383 	clz	r3, r3
24006222:	095b      	lsrs	r3, r3, #5
24006224:	e005      	b.n	24006232 <I2C_Slave_ISR_DMA+0x162>
            treatdmanack = 1U;
24006226:	2101      	movs	r1, #1
24006228:	e7c1      	b.n	240061ae <I2C_Slave_ISR_DMA+0xde>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400622a:	685b      	ldr	r3, [r3, #4]
2400622c:	fab3 f383 	clz	r3, r3
24006230:	095b      	lsrs	r3, r3, #5
24006232:	b9d3      	cbnz	r3, 2400626a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
24006234:	b9c9      	cbnz	r1, 2400626a <I2C_Slave_ISR_DMA+0x19a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006236:	6823      	ldr	r3, [r4, #0]
24006238:	2210      	movs	r2, #16
2400623a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400623c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400623e:	f043 0304 	orr.w	r3, r3, #4
24006242:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
24006244:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006248:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400624a:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
2400624e:	bf18      	it	ne
24006250:	2f00      	cmpne	r7, #0
24006252:	d13e      	bne.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24006254:	2b29      	cmp	r3, #41	; 0x29
24006256:	bf18      	it	ne
24006258:	2b21      	cmpne	r3, #33	; 0x21
2400625a:	d129      	bne.n	240062b0 <I2C_Slave_ISR_DMA+0x1e0>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400625c:	2321      	movs	r3, #33	; 0x21
2400625e:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
24006260:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006262:	4620      	mov	r0, r4
24006264:	f7ff fc3a 	bl	24005adc <I2C_ITError>
24006268:	e033      	b.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400626a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2400626e:	b2db      	uxtb	r3, r3
24006270:	2b28      	cmp	r3, #40	; 0x28
24006272:	d008      	beq.n	24006286 <I2C_Slave_ISR_DMA+0x1b6>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006274:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006278:	b2db      	uxtb	r3, r3
2400627a:	2b29      	cmp	r3, #41	; 0x29
2400627c:	d00b      	beq.n	24006296 <I2C_Slave_ISR_DMA+0x1c6>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400627e:	6823      	ldr	r3, [r4, #0]
24006280:	2210      	movs	r2, #16
24006282:	61da      	str	r2, [r3, #28]
24006284:	e025      	b.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24006286:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
2400628a:	d1f3      	bne.n	24006274 <I2C_Slave_ISR_DMA+0x1a4>
          I2C_ITListenCplt(hi2c, ITFlags);
2400628c:	4629      	mov	r1, r5
2400628e:	4620      	mov	r0, r4
24006290:	f7ff fbd6 	bl	24005a40 <I2C_ITListenCplt>
24006294:	e01d      	b.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006296:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
2400629a:	d0f0      	beq.n	2400627e <I2C_Slave_ISR_DMA+0x1ae>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400629c:	6823      	ldr	r3, [r4, #0]
2400629e:	2210      	movs	r2, #16
240062a0:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
240062a2:	4620      	mov	r0, r4
240062a4:	f7fe ffed 	bl	24005282 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
240062a8:	4620      	mov	r0, r4
240062aa:	f7ff fb35 	bl	24005918 <I2C_ITSlaveSeqCplt>
240062ae:	e010      	b.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
240062b0:	2b2a      	cmp	r3, #42	; 0x2a
240062b2:	bf18      	it	ne
240062b4:	2b22      	cmpne	r3, #34	; 0x22
240062b6:	d1d3      	bne.n	24006260 <I2C_Slave_ISR_DMA+0x190>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
240062b8:	2322      	movs	r3, #34	; 0x22
240062ba:	6323      	str	r3, [r4, #48]	; 0x30
240062bc:	e7d0      	b.n	24006260 <I2C_Slave_ISR_DMA+0x190>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240062be:	6823      	ldr	r3, [r4, #0]
240062c0:	2210      	movs	r2, #16
240062c2:	61da      	str	r2, [r3, #28]
240062c4:	e005      	b.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
240062c6:	f015 0f08 	tst.w	r5, #8
240062ca:	d002      	beq.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
240062cc:	f016 0f08 	tst.w	r6, #8
240062d0:	d103      	bne.n	240062da <I2C_Slave_ISR_DMA+0x20a>
  __HAL_UNLOCK(hi2c);
240062d2:	2000      	movs	r0, #0
240062d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
240062d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
240062da:	4629      	mov	r1, r5
240062dc:	4620      	mov	r0, r4
240062de:	f7ff fb5d 	bl	2400599c <I2C_ITAddrCplt>
240062e2:	e7f6      	b.n	240062d2 <I2C_Slave_ISR_DMA+0x202>
  __HAL_LOCK(hi2c);
240062e4:	2002      	movs	r0, #2
240062e6:	e7f7      	b.n	240062d8 <I2C_Slave_ISR_DMA+0x208>
240062e8:	40020010 	.word	0x40020010
240062ec:	40020028 	.word	0x40020028

240062f0 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
240062f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240062f4:	2b01      	cmp	r3, #1
240062f6:	f000 809a 	beq.w	2400642e <I2C_Master_ISR_DMA+0x13e>
{
240062fa:	b510      	push	{r4, lr}
240062fc:	b082      	sub	sp, #8
240062fe:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
24006300:	2301      	movs	r3, #1
24006302:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
24006306:	f011 0f10 	tst.w	r1, #16
2400630a:	d002      	beq.n	24006312 <I2C_Master_ISR_DMA+0x22>
2400630c:	f012 0f10 	tst.w	r2, #16
24006310:	d132      	bne.n	24006378 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
24006312:	f011 0f80 	tst.w	r1, #128	; 0x80
24006316:	d060      	beq.n	240063da <I2C_Master_ISR_DMA+0xea>
24006318:	f012 0f40 	tst.w	r2, #64	; 0x40
2400631c:	d05d      	beq.n	240063da <I2C_Master_ISR_DMA+0xea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2400631e:	6822      	ldr	r2, [r4, #0]
24006320:	6813      	ldr	r3, [r2, #0]
24006322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24006326:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
24006328:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400632a:	b29b      	uxth	r3, r3
2400632c:	2b00      	cmp	r3, #0
2400632e:	d046      	beq.n	240063be <I2C_Master_ISR_DMA+0xce>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
24006330:	6823      	ldr	r3, [r4, #0]
24006332:	6859      	ldr	r1, [r3, #4]
24006334:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006338:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400633a:	b29b      	uxth	r3, r3
2400633c:	2bff      	cmp	r3, #255	; 0xff
2400633e:	d92d      	bls.n	2400639c <I2C_Master_ISR_DMA+0xac>
        hi2c->XferSize = MAX_NBYTE_SIZE;
24006340:	23ff      	movs	r3, #255	; 0xff
24006342:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
24006344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
24006348:	2200      	movs	r2, #0
2400634a:	9200      	str	r2, [sp, #0]
2400634c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
24006350:	4620      	mov	r0, r4
24006352:	f7fe ffa7 	bl	240052a4 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
24006356:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006358:	b29b      	uxth	r3, r3
2400635a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
2400635c:	1a9b      	subs	r3, r3, r2
2400635e:	b29b      	uxth	r3, r3
24006360:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006362:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006366:	b2db      	uxtb	r3, r3
24006368:	2b22      	cmp	r3, #34	; 0x22
2400636a:	d022      	beq.n	240063b2 <I2C_Master_ISR_DMA+0xc2>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400636c:	6822      	ldr	r2, [r4, #0]
2400636e:	6813      	ldr	r3, [r2, #0]
24006370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24006374:	6013      	str	r3, [r2, #0]
24006376:	e00c      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006378:	6803      	ldr	r3, [r0, #0]
2400637a:	2210      	movs	r2, #16
2400637c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400637e:	6c43      	ldr	r3, [r0, #68]	; 0x44
24006380:	f043 0304 	orr.w	r3, r3, #4
24006384:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
24006386:	2120      	movs	r1, #32
24006388:	f7fe ffaa 	bl	240052e0 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
2400638c:	4620      	mov	r0, r4
2400638e:	f7fe ff78 	bl	24005282 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
24006392:	2000      	movs	r0, #0
24006394:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
24006398:	b002      	add	sp, #8
2400639a:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
2400639c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400639e:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
240063a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240063a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
240063a6:	d001      	beq.n	240063ac <I2C_Master_ISR_DMA+0xbc>
          xfermode = hi2c->XferOptions;
240063a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240063aa:	e7cd      	b.n	24006348 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
240063ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
240063b0:	e7ca      	b.n	24006348 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
240063b2:	6822      	ldr	r2, [r4, #0]
240063b4:	6813      	ldr	r3, [r2, #0]
240063b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240063ba:	6013      	str	r3, [r2, #0]
240063bc:	e7e9      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
240063be:	6823      	ldr	r3, [r4, #0]
240063c0:	685b      	ldr	r3, [r3, #4]
240063c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
240063c6:	d103      	bne.n	240063d0 <I2C_Master_ISR_DMA+0xe0>
        I2C_ITMasterSeqCplt(hi2c);
240063c8:	4620      	mov	r0, r4
240063ca:	f7ff fa7a 	bl	240058c2 <I2C_ITMasterSeqCplt>
240063ce:	e7e0      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
240063d0:	2140      	movs	r1, #64	; 0x40
240063d2:	4620      	mov	r0, r4
240063d4:	f7ff fb82 	bl	24005adc <I2C_ITError>
240063d8:	e7db      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
240063da:	f011 0f40 	tst.w	r1, #64	; 0x40
240063de:	d01c      	beq.n	2400641a <I2C_Master_ISR_DMA+0x12a>
240063e0:	f012 0f40 	tst.w	r2, #64	; 0x40
240063e4:	d019      	beq.n	2400641a <I2C_Master_ISR_DMA+0x12a>
    if (hi2c->XferCount == 0U)
240063e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240063e8:	b29b      	uxth	r3, r3
240063ea:	b98b      	cbnz	r3, 24006410 <I2C_Master_ISR_DMA+0x120>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
240063ec:	6823      	ldr	r3, [r4, #0]
240063ee:	685a      	ldr	r2, [r3, #4]
240063f0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
240063f4:	d1cd      	bne.n	24006392 <I2C_Master_ISR_DMA+0xa2>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
240063f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240063f8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
240063fc:	d104      	bne.n	24006408 <I2C_Master_ISR_DMA+0x118>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
240063fe:	685a      	ldr	r2, [r3, #4]
24006400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006404:	605a      	str	r2, [r3, #4]
24006406:	e7c4      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
          I2C_ITMasterSeqCplt(hi2c);
24006408:	4620      	mov	r0, r4
2400640a:	f7ff fa5a 	bl	240058c2 <I2C_ITMasterSeqCplt>
2400640e:	e7c0      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
24006410:	2140      	movs	r1, #64	; 0x40
24006412:	4620      	mov	r0, r4
24006414:	f7ff fb62 	bl	24005adc <I2C_ITError>
24006418:	e7bb      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400641a:	f011 0f20 	tst.w	r1, #32
2400641e:	d0b8      	beq.n	24006392 <I2C_Master_ISR_DMA+0xa2>
24006420:	f012 0f20 	tst.w	r2, #32
24006424:	d0b5      	beq.n	24006392 <I2C_Master_ISR_DMA+0xa2>
    I2C_ITMasterCplt(hi2c, ITFlags);
24006426:	4620      	mov	r0, r4
24006428:	f7ff fdba 	bl	24005fa0 <I2C_ITMasterCplt>
2400642c:	e7b1      	b.n	24006392 <I2C_Master_ISR_DMA+0xa2>
  __HAL_LOCK(hi2c);
2400642e:	2002      	movs	r0, #2
}
24006430:	4770      	bx	lr

24006432 <HAL_I2C_ER_IRQHandler>:
{
24006432:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006434:	6802      	ldr	r2, [r0, #0]
24006436:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24006438:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400643a:	f413 7f80 	tst.w	r3, #256	; 0x100
2400643e:	d009      	beq.n	24006454 <HAL_I2C_ER_IRQHandler+0x22>
24006440:	f011 0f80 	tst.w	r1, #128	; 0x80
24006444:	d006      	beq.n	24006454 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24006446:	6c44      	ldr	r4, [r0, #68]	; 0x44
24006448:	f044 0401 	orr.w	r4, r4, #1
2400644c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400644e:	f44f 7480 	mov.w	r4, #256	; 0x100
24006452:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24006454:	f413 6f80 	tst.w	r3, #1024	; 0x400
24006458:	d00a      	beq.n	24006470 <HAL_I2C_ER_IRQHandler+0x3e>
2400645a:	f011 0f80 	tst.w	r1, #128	; 0x80
2400645e:	d007      	beq.n	24006470 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24006460:	6c42      	ldr	r2, [r0, #68]	; 0x44
24006462:	f042 0208 	orr.w	r2, r2, #8
24006466:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006468:	6802      	ldr	r2, [r0, #0]
2400646a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400646e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24006470:	f413 7f00 	tst.w	r3, #512	; 0x200
24006474:	d00a      	beq.n	2400648c <HAL_I2C_ER_IRQHandler+0x5a>
24006476:	f011 0f80 	tst.w	r1, #128	; 0x80
2400647a:	d007      	beq.n	2400648c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400647c:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400647e:	f043 0302 	orr.w	r3, r3, #2
24006482:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006484:	6803      	ldr	r3, [r0, #0]
24006486:	f44f 7200 	mov.w	r2, #512	; 0x200
2400648a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
2400648c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400648e:	f011 0f0b 	tst.w	r1, #11
24006492:	d100      	bne.n	24006496 <HAL_I2C_ER_IRQHandler+0x64>
}
24006494:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
24006496:	f7ff fb21 	bl	24005adc <I2C_ITError>
}
2400649a:	e7fb      	b.n	24006494 <HAL_I2C_ER_IRQHandler+0x62>

2400649c <I2C_DMAAbort>:
{
2400649c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400649e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
240064a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
240064a2:	b10b      	cbz	r3, 240064a8 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
240064a4:	2200      	movs	r2, #0
240064a6:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
240064a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
240064aa:	b10b      	cbz	r3, 240064b0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
240064ac:	2200      	movs	r2, #0
240064ae:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
240064b0:	f7ff fafd 	bl	24005aae <I2C_TreatErrorCallback>
}
240064b4:	bd08      	pop	{r3, pc}

240064b6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240064b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240064ba:	b2db      	uxtb	r3, r3
240064bc:	2b20      	cmp	r3, #32
240064be:	d124      	bne.n	2400650a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240064c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240064c4:	2b01      	cmp	r3, #1
240064c6:	d022      	beq.n	2400650e <HAL_I2CEx_ConfigAnalogFilter+0x58>
240064c8:	2301      	movs	r3, #1
240064ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
240064ce:	2324      	movs	r3, #36	; 0x24
240064d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240064d4:	6802      	ldr	r2, [r0, #0]
240064d6:	6813      	ldr	r3, [r2, #0]
240064d8:	f023 0301 	bic.w	r3, r3, #1
240064dc:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
240064de:	6802      	ldr	r2, [r0, #0]
240064e0:	6813      	ldr	r3, [r2, #0]
240064e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240064e6:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
240064e8:	6802      	ldr	r2, [r0, #0]
240064ea:	6813      	ldr	r3, [r2, #0]
240064ec:	4319      	orrs	r1, r3
240064ee:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
240064f0:	6802      	ldr	r2, [r0, #0]
240064f2:	6813      	ldr	r3, [r2, #0]
240064f4:	f043 0301 	orr.w	r3, r3, #1
240064f8:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
240064fa:	2320      	movs	r3, #32
240064fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24006500:	2300      	movs	r3, #0
24006502:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
24006506:	4618      	mov	r0, r3
24006508:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
2400650a:	2002      	movs	r0, #2
2400650c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
2400650e:	2002      	movs	r0, #2
  }
}
24006510:	4770      	bx	lr

24006512 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24006512:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006516:	b2db      	uxtb	r3, r3
24006518:	2b20      	cmp	r3, #32
2400651a:	d122      	bne.n	24006562 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400651c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24006520:	2b01      	cmp	r3, #1
24006522:	d020      	beq.n	24006566 <HAL_I2CEx_ConfigDigitalFilter+0x54>
24006524:	2301      	movs	r3, #1
24006526:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400652a:	2324      	movs	r3, #36	; 0x24
2400652c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24006530:	6802      	ldr	r2, [r0, #0]
24006532:	6813      	ldr	r3, [r2, #0]
24006534:	f023 0301 	bic.w	r3, r3, #1
24006538:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2400653a:	6802      	ldr	r2, [r0, #0]
2400653c:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2400653e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24006542:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
24006546:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
24006548:	6802      	ldr	r2, [r0, #0]
2400654a:	6813      	ldr	r3, [r2, #0]
2400654c:	f043 0301 	orr.w	r3, r3, #1
24006550:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24006552:	2320      	movs	r3, #32
24006554:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24006558:	2300      	movs	r3, #0
2400655a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
2400655e:	4618      	mov	r0, r3
24006560:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
24006562:	2002      	movs	r0, #2
24006564:	4770      	bx	lr
    __HAL_LOCK(hi2c);
24006566:	2002      	movs	r0, #2
  }
}
24006568:	4770      	bx	lr
	...

2400656c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2400656c:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400656e:	4a09      	ldr	r2, [pc, #36]	; (24006594 <HAL_I2CEx_EnableFastModePlus+0x28>)
24006570:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
24006574:	f041 0102 	orr.w	r1, r1, #2
24006578:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
2400657c:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
24006580:	f002 0202 	and.w	r2, r2, #2
24006584:	9201      	str	r2, [sp, #4]
24006586:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24006588:	4a03      	ldr	r2, [pc, #12]	; (24006598 <HAL_I2CEx_EnableFastModePlus+0x2c>)
2400658a:	6853      	ldr	r3, [r2, #4]
2400658c:	4303      	orrs	r3, r0
2400658e:	6053      	str	r3, [r2, #4]
}
24006590:	b002      	add	sp, #8
24006592:	4770      	bx	lr
24006594:	58024400 	.word	0x58024400
24006598:	58000400 	.word	0x58000400

2400659c <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2400659c:	4b13      	ldr	r3, [pc, #76]	; (240065ec <HAL_PWREx_ConfigSupply+0x50>)
2400659e:	68db      	ldr	r3, [r3, #12]
240065a0:	f013 0f04 	tst.w	r3, #4
240065a4:	d107      	bne.n	240065b6 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240065a6:	4b11      	ldr	r3, [pc, #68]	; (240065ec <HAL_PWREx_ConfigSupply+0x50>)
240065a8:	68db      	ldr	r3, [r3, #12]
240065aa:	f003 0307 	and.w	r3, r3, #7
240065ae:	4283      	cmp	r3, r0
240065b0:	d01a      	beq.n	240065e8 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240065b2:	2001      	movs	r0, #1
240065b4:	4770      	bx	lr
{
240065b6:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240065b8:	4a0c      	ldr	r2, [pc, #48]	; (240065ec <HAL_PWREx_ConfigSupply+0x50>)
240065ba:	68d3      	ldr	r3, [r2, #12]
240065bc:	f023 0307 	bic.w	r3, r3, #7
240065c0:	4318      	orrs	r0, r3
240065c2:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
240065c4:	f7fd f9f8 	bl	240039b8 <HAL_GetTick>
240065c8:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240065ca:	4b08      	ldr	r3, [pc, #32]	; (240065ec <HAL_PWREx_ConfigSupply+0x50>)
240065cc:	685b      	ldr	r3, [r3, #4]
240065ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
240065d2:	d107      	bne.n	240065e4 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240065d4:	f7fd f9f0 	bl	240039b8 <HAL_GetTick>
240065d8:	1b00      	subs	r0, r0, r4
240065da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
240065de:	d9f4      	bls.n	240065ca <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
240065e0:	2001      	movs	r0, #1
240065e2:	e000      	b.n	240065e6 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
240065e4:	2000      	movs	r0, #0
}
240065e6:	bd10      	pop	{r4, pc}
      return HAL_OK;
240065e8:	2000      	movs	r0, #0
}
240065ea:	4770      	bx	lr
240065ec:	58024800 	.word	0x58024800

240065f0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
240065f0:	2800      	cmp	r0, #0
240065f2:	f000 8339 	beq.w	24006c68 <HAL_RCC_OscConfig+0x678>
{
240065f6:	b538      	push	{r3, r4, r5, lr}
240065f8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240065fa:	6803      	ldr	r3, [r0, #0]
240065fc:	f013 0f01 	tst.w	r3, #1
24006600:	d025      	beq.n	2400664e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24006602:	4a94      	ldr	r2, [pc, #592]	; (24006854 <HAL_RCC_OscConfig+0x264>)
24006604:	6913      	ldr	r3, [r2, #16]
24006606:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400660a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2400660c:	2b10      	cmp	r3, #16
2400660e:	d015      	beq.n	2400663c <HAL_RCC_OscConfig+0x4c>
24006610:	2b18      	cmp	r3, #24
24006612:	d00f      	beq.n	24006634 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24006614:	6863      	ldr	r3, [r4, #4]
24006616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400661a:	d03f      	beq.n	2400669c <HAL_RCC_OscConfig+0xac>
2400661c:	2b00      	cmp	r3, #0
2400661e:	d153      	bne.n	240066c8 <HAL_RCC_OscConfig+0xd8>
24006620:	4b8c      	ldr	r3, [pc, #560]	; (24006854 <HAL_RCC_OscConfig+0x264>)
24006622:	681a      	ldr	r2, [r3, #0]
24006624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24006628:	601a      	str	r2, [r3, #0]
2400662a:	681a      	ldr	r2, [r3, #0]
2400662c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24006630:	601a      	str	r2, [r3, #0]
24006632:	e038      	b.n	240066a6 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24006634:	f002 0203 	and.w	r2, r2, #3
24006638:	2a02      	cmp	r2, #2
2400663a:	d1eb      	bne.n	24006614 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2400663c:	4b85      	ldr	r3, [pc, #532]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400663e:	681b      	ldr	r3, [r3, #0]
24006640:	f413 3f00 	tst.w	r3, #131072	; 0x20000
24006644:	d003      	beq.n	2400664e <HAL_RCC_OscConfig+0x5e>
24006646:	6863      	ldr	r3, [r4, #4]
24006648:	2b00      	cmp	r3, #0
2400664a:	f000 830f 	beq.w	24006c6c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2400664e:	6823      	ldr	r3, [r4, #0]
24006650:	f013 0f02 	tst.w	r3, #2
24006654:	f000 80a1 	beq.w	2400679a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24006658:	4a7e      	ldr	r2, [pc, #504]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400665a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400665c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400665e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24006662:	d05a      	beq.n	2400671a <HAL_RCC_OscConfig+0x12a>
24006664:	2b18      	cmp	r3, #24
24006666:	d055      	beq.n	24006714 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24006668:	68e3      	ldr	r3, [r4, #12]
2400666a:	2b00      	cmp	r3, #0
2400666c:	f000 80de 	beq.w	2400682c <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24006670:	4978      	ldr	r1, [pc, #480]	; (24006854 <HAL_RCC_OscConfig+0x264>)
24006672:	680a      	ldr	r2, [r1, #0]
24006674:	f022 0219 	bic.w	r2, r2, #25
24006678:	4313      	orrs	r3, r2
2400667a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400667c:	f7fd f99c 	bl	240039b8 <HAL_GetTick>
24006680:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24006682:	4b74      	ldr	r3, [pc, #464]	; (24006854 <HAL_RCC_OscConfig+0x264>)
24006684:	681b      	ldr	r3, [r3, #0]
24006686:	f013 0f04 	tst.w	r3, #4
2400668a:	f040 80ad 	bne.w	240067e8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400668e:	f7fd f993 	bl	240039b8 <HAL_GetTick>
24006692:	1b40      	subs	r0, r0, r5
24006694:	2802      	cmp	r0, #2
24006696:	d9f4      	bls.n	24006682 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
24006698:	2003      	movs	r0, #3
2400669a:	e2ee      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400669c:	4a6d      	ldr	r2, [pc, #436]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400669e:	6813      	ldr	r3, [r2, #0]
240066a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240066a4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
240066a6:	6863      	ldr	r3, [r4, #4]
240066a8:	b32b      	cbz	r3, 240066f6 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
240066aa:	f7fd f985 	bl	240039b8 <HAL_GetTick>
240066ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240066b0:	4b68      	ldr	r3, [pc, #416]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240066b2:	681b      	ldr	r3, [r3, #0]
240066b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
240066b8:	d1c9      	bne.n	2400664e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240066ba:	f7fd f97d 	bl	240039b8 <HAL_GetTick>
240066be:	1b40      	subs	r0, r0, r5
240066c0:	2864      	cmp	r0, #100	; 0x64
240066c2:	d9f5      	bls.n	240066b0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
240066c4:	2003      	movs	r0, #3
240066c6:	e2d8      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240066c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240066cc:	d009      	beq.n	240066e2 <HAL_RCC_OscConfig+0xf2>
240066ce:	4b61      	ldr	r3, [pc, #388]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240066d0:	681a      	ldr	r2, [r3, #0]
240066d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240066d6:	601a      	str	r2, [r3, #0]
240066d8:	681a      	ldr	r2, [r3, #0]
240066da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240066de:	601a      	str	r2, [r3, #0]
240066e0:	e7e1      	b.n	240066a6 <HAL_RCC_OscConfig+0xb6>
240066e2:	4b5c      	ldr	r3, [pc, #368]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240066e4:	681a      	ldr	r2, [r3, #0]
240066e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
240066ea:	601a      	str	r2, [r3, #0]
240066ec:	681a      	ldr	r2, [r3, #0]
240066ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240066f2:	601a      	str	r2, [r3, #0]
240066f4:	e7d7      	b.n	240066a6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
240066f6:	f7fd f95f 	bl	240039b8 <HAL_GetTick>
240066fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240066fc:	4b55      	ldr	r3, [pc, #340]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240066fe:	681b      	ldr	r3, [r3, #0]
24006700:	f413 3f00 	tst.w	r3, #131072	; 0x20000
24006704:	d0a3      	beq.n	2400664e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24006706:	f7fd f957 	bl	240039b8 <HAL_GetTick>
2400670a:	1b40      	subs	r0, r0, r5
2400670c:	2864      	cmp	r0, #100	; 0x64
2400670e:	d9f5      	bls.n	240066fc <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
24006710:	2003      	movs	r0, #3
24006712:	e2b2      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24006714:	f012 0f03 	tst.w	r2, #3
24006718:	d1a6      	bne.n	24006668 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400671a:	4b4e      	ldr	r3, [pc, #312]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400671c:	681b      	ldr	r3, [r3, #0]
2400671e:	f013 0f04 	tst.w	r3, #4
24006722:	d003      	beq.n	2400672c <HAL_RCC_OscConfig+0x13c>
24006724:	68e3      	ldr	r3, [r4, #12]
24006726:	2b00      	cmp	r3, #0
24006728:	f000 82a2 	beq.w	24006c70 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400672c:	4a49      	ldr	r2, [pc, #292]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400672e:	6813      	ldr	r3, [r2, #0]
24006730:	f023 0319 	bic.w	r3, r3, #25
24006734:	68e1      	ldr	r1, [r4, #12]
24006736:	430b      	orrs	r3, r1
24006738:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
2400673a:	f7fd f93d 	bl	240039b8 <HAL_GetTick>
2400673e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24006740:	4b44      	ldr	r3, [pc, #272]	; (24006854 <HAL_RCC_OscConfig+0x264>)
24006742:	681b      	ldr	r3, [r3, #0]
24006744:	f013 0f04 	tst.w	r3, #4
24006748:	d106      	bne.n	24006758 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400674a:	f7fd f935 	bl	240039b8 <HAL_GetTick>
2400674e:	1b40      	subs	r0, r0, r5
24006750:	2802      	cmp	r0, #2
24006752:	d9f5      	bls.n	24006740 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
24006754:	2003      	movs	r0, #3
24006756:	e290      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24006758:	f7fd f948 	bl	240039ec <HAL_GetREVID>
2400675c:	f241 0303 	movw	r3, #4099	; 0x1003
24006760:	4298      	cmp	r0, r3
24006762:	d812      	bhi.n	2400678a <HAL_RCC_OscConfig+0x19a>
24006764:	6922      	ldr	r2, [r4, #16]
24006766:	2a40      	cmp	r2, #64	; 0x40
24006768:	d007      	beq.n	2400677a <HAL_RCC_OscConfig+0x18a>
2400676a:	493a      	ldr	r1, [pc, #232]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400676c:	684b      	ldr	r3, [r1, #4]
2400676e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24006772:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24006776:	604b      	str	r3, [r1, #4]
24006778:	e00f      	b.n	2400679a <HAL_RCC_OscConfig+0x1aa>
2400677a:	4a36      	ldr	r2, [pc, #216]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400677c:	6853      	ldr	r3, [r2, #4]
2400677e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24006782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24006786:	6053      	str	r3, [r2, #4]
24006788:	e007      	b.n	2400679a <HAL_RCC_OscConfig+0x1aa>
2400678a:	4a32      	ldr	r2, [pc, #200]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400678c:	6853      	ldr	r3, [r2, #4]
2400678e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24006792:	6921      	ldr	r1, [r4, #16]
24006794:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24006798:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2400679a:	6823      	ldr	r3, [r4, #0]
2400679c:	f013 0f10 	tst.w	r3, #16
240067a0:	f000 8088 	beq.w	240068b4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240067a4:	4a2b      	ldr	r2, [pc, #172]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240067a6:	6913      	ldr	r3, [r2, #16]
240067a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240067ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240067ae:	2b08      	cmp	r3, #8
240067b0:	d056      	beq.n	24006860 <HAL_RCC_OscConfig+0x270>
240067b2:	2b18      	cmp	r3, #24
240067b4:	d050      	beq.n	24006858 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
240067b6:	69e3      	ldr	r3, [r4, #28]
240067b8:	2b00      	cmp	r3, #0
240067ba:	f000 80b8 	beq.w	2400692e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
240067be:	4a25      	ldr	r2, [pc, #148]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240067c0:	6813      	ldr	r3, [r2, #0]
240067c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240067c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240067c8:	f7fd f8f6 	bl	240039b8 <HAL_GetTick>
240067cc:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240067ce:	4b21      	ldr	r3, [pc, #132]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240067d0:	681b      	ldr	r3, [r3, #0]
240067d2:	f413 7f80 	tst.w	r3, #256	; 0x100
240067d6:	f040 8088 	bne.w	240068ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240067da:	f7fd f8ed 	bl	240039b8 <HAL_GetTick>
240067de:	1b40      	subs	r0, r0, r5
240067e0:	2802      	cmp	r0, #2
240067e2:	d9f4      	bls.n	240067ce <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
240067e4:	2003      	movs	r0, #3
240067e6:	e248      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240067e8:	f7fd f900 	bl	240039ec <HAL_GetREVID>
240067ec:	f241 0303 	movw	r3, #4099	; 0x1003
240067f0:	4298      	cmp	r0, r3
240067f2:	d812      	bhi.n	2400681a <HAL_RCC_OscConfig+0x22a>
240067f4:	6922      	ldr	r2, [r4, #16]
240067f6:	2a40      	cmp	r2, #64	; 0x40
240067f8:	d007      	beq.n	2400680a <HAL_RCC_OscConfig+0x21a>
240067fa:	4916      	ldr	r1, [pc, #88]	; (24006854 <HAL_RCC_OscConfig+0x264>)
240067fc:	684b      	ldr	r3, [r1, #4]
240067fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24006802:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24006806:	604b      	str	r3, [r1, #4]
24006808:	e7c7      	b.n	2400679a <HAL_RCC_OscConfig+0x1aa>
2400680a:	4a12      	ldr	r2, [pc, #72]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400680c:	6853      	ldr	r3, [r2, #4]
2400680e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24006812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24006816:	6053      	str	r3, [r2, #4]
24006818:	e7bf      	b.n	2400679a <HAL_RCC_OscConfig+0x1aa>
2400681a:	4a0e      	ldr	r2, [pc, #56]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400681c:	6853      	ldr	r3, [r2, #4]
2400681e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24006822:	6921      	ldr	r1, [r4, #16]
24006824:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24006828:	6053      	str	r3, [r2, #4]
2400682a:	e7b6      	b.n	2400679a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
2400682c:	4a09      	ldr	r2, [pc, #36]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400682e:	6813      	ldr	r3, [r2, #0]
24006830:	f023 0301 	bic.w	r3, r3, #1
24006834:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
24006836:	f7fd f8bf 	bl	240039b8 <HAL_GetTick>
2400683a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2400683c:	4b05      	ldr	r3, [pc, #20]	; (24006854 <HAL_RCC_OscConfig+0x264>)
2400683e:	681b      	ldr	r3, [r3, #0]
24006840:	f013 0f04 	tst.w	r3, #4
24006844:	d0a9      	beq.n	2400679a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24006846:	f7fd f8b7 	bl	240039b8 <HAL_GetTick>
2400684a:	1b40      	subs	r0, r0, r5
2400684c:	2802      	cmp	r0, #2
2400684e:	d9f5      	bls.n	2400683c <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
24006850:	2003      	movs	r0, #3
24006852:	e212      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006854:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24006858:	f002 0203 	and.w	r2, r2, #3
2400685c:	2a01      	cmp	r2, #1
2400685e:	d1aa      	bne.n	240067b6 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24006860:	4ba1      	ldr	r3, [pc, #644]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006862:	681b      	ldr	r3, [r3, #0]
24006864:	f413 7f80 	tst.w	r3, #256	; 0x100
24006868:	d003      	beq.n	24006872 <HAL_RCC_OscConfig+0x282>
2400686a:	69e3      	ldr	r3, [r4, #28]
2400686c:	2b80      	cmp	r3, #128	; 0x80
2400686e:	f040 8201 	bne.w	24006c74 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24006872:	f7fd f8bb 	bl	240039ec <HAL_GetREVID>
24006876:	f241 0303 	movw	r3, #4099	; 0x1003
2400687a:	4298      	cmp	r0, r3
2400687c:	d812      	bhi.n	240068a4 <HAL_RCC_OscConfig+0x2b4>
2400687e:	6a22      	ldr	r2, [r4, #32]
24006880:	2a20      	cmp	r2, #32
24006882:	d007      	beq.n	24006894 <HAL_RCC_OscConfig+0x2a4>
24006884:	4998      	ldr	r1, [pc, #608]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006886:	684b      	ldr	r3, [r1, #4]
24006888:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400688c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24006890:	604b      	str	r3, [r1, #4]
24006892:	e00f      	b.n	240068b4 <HAL_RCC_OscConfig+0x2c4>
24006894:	4a94      	ldr	r2, [pc, #592]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006896:	6853      	ldr	r3, [r2, #4]
24006898:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400689c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240068a0:	6053      	str	r3, [r2, #4]
240068a2:	e007      	b.n	240068b4 <HAL_RCC_OscConfig+0x2c4>
240068a4:	4a90      	ldr	r2, [pc, #576]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240068a6:	68d3      	ldr	r3, [r2, #12]
240068a8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240068ac:	6a21      	ldr	r1, [r4, #32]
240068ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
240068b2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240068b4:	6823      	ldr	r3, [r4, #0]
240068b6:	f013 0f08 	tst.w	r3, #8
240068ba:	d060      	beq.n	2400697e <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240068bc:	6963      	ldr	r3, [r4, #20]
240068be:	2b00      	cmp	r3, #0
240068c0:	d049      	beq.n	24006956 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
240068c2:	4a89      	ldr	r2, [pc, #548]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240068c4:	6f53      	ldr	r3, [r2, #116]	; 0x74
240068c6:	f043 0301 	orr.w	r3, r3, #1
240068ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240068cc:	f7fd f874 	bl	240039b8 <HAL_GetTick>
240068d0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240068d2:	4b85      	ldr	r3, [pc, #532]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240068d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240068d6:	f013 0f02 	tst.w	r3, #2
240068da:	d150      	bne.n	2400697e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240068dc:	f7fd f86c 	bl	240039b8 <HAL_GetTick>
240068e0:	1b40      	subs	r0, r0, r5
240068e2:	2802      	cmp	r0, #2
240068e4:	d9f5      	bls.n	240068d2 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
240068e6:	2003      	movs	r0, #3
240068e8:	e1c7      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240068ea:	f7fd f87f 	bl	240039ec <HAL_GetREVID>
240068ee:	f241 0303 	movw	r3, #4099	; 0x1003
240068f2:	4298      	cmp	r0, r3
240068f4:	d812      	bhi.n	2400691c <HAL_RCC_OscConfig+0x32c>
240068f6:	6a22      	ldr	r2, [r4, #32]
240068f8:	2a20      	cmp	r2, #32
240068fa:	d007      	beq.n	2400690c <HAL_RCC_OscConfig+0x31c>
240068fc:	497a      	ldr	r1, [pc, #488]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240068fe:	684b      	ldr	r3, [r1, #4]
24006900:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24006904:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24006908:	604b      	str	r3, [r1, #4]
2400690a:	e7d3      	b.n	240068b4 <HAL_RCC_OscConfig+0x2c4>
2400690c:	4a76      	ldr	r2, [pc, #472]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
2400690e:	6853      	ldr	r3, [r2, #4]
24006910:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24006914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24006918:	6053      	str	r3, [r2, #4]
2400691a:	e7cb      	b.n	240068b4 <HAL_RCC_OscConfig+0x2c4>
2400691c:	4a72      	ldr	r2, [pc, #456]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
2400691e:	68d3      	ldr	r3, [r2, #12]
24006920:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24006924:	6a21      	ldr	r1, [r4, #32]
24006926:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400692a:	60d3      	str	r3, [r2, #12]
2400692c:	e7c2      	b.n	240068b4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
2400692e:	4a6e      	ldr	r2, [pc, #440]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006930:	6813      	ldr	r3, [r2, #0]
24006932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006936:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
24006938:	f7fd f83e 	bl	240039b8 <HAL_GetTick>
2400693c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2400693e:	4b6a      	ldr	r3, [pc, #424]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006940:	681b      	ldr	r3, [r3, #0]
24006942:	f413 7f80 	tst.w	r3, #256	; 0x100
24006946:	d0b5      	beq.n	240068b4 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24006948:	f7fd f836 	bl	240039b8 <HAL_GetTick>
2400694c:	1b40      	subs	r0, r0, r5
2400694e:	2802      	cmp	r0, #2
24006950:	d9f5      	bls.n	2400693e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
24006952:	2003      	movs	r0, #3
24006954:	e191      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
24006956:	4a64      	ldr	r2, [pc, #400]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006958:	6f53      	ldr	r3, [r2, #116]	; 0x74
2400695a:	f023 0301 	bic.w	r3, r3, #1
2400695e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24006960:	f7fd f82a 	bl	240039b8 <HAL_GetTick>
24006964:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24006966:	4b60      	ldr	r3, [pc, #384]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2400696a:	f013 0f02 	tst.w	r3, #2
2400696e:	d006      	beq.n	2400697e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24006970:	f7fd f822 	bl	240039b8 <HAL_GetTick>
24006974:	1b40      	subs	r0, r0, r5
24006976:	2802      	cmp	r0, #2
24006978:	d9f5      	bls.n	24006966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
2400697a:	2003      	movs	r0, #3
2400697c:	e17d      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2400697e:	6823      	ldr	r3, [r4, #0]
24006980:	f013 0f20 	tst.w	r3, #32
24006984:	d029      	beq.n	240069da <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24006986:	69a3      	ldr	r3, [r4, #24]
24006988:	b19b      	cbz	r3, 240069b2 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
2400698a:	4a57      	ldr	r2, [pc, #348]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
2400698c:	6813      	ldr	r3, [r2, #0]
2400698e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24006992:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24006994:	f7fd f810 	bl	240039b8 <HAL_GetTick>
24006998:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2400699a:	4b53      	ldr	r3, [pc, #332]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
2400699c:	681b      	ldr	r3, [r3, #0]
2400699e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
240069a2:	d11a      	bne.n	240069da <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240069a4:	f7fd f808 	bl	240039b8 <HAL_GetTick>
240069a8:	1b40      	subs	r0, r0, r5
240069aa:	2802      	cmp	r0, #2
240069ac:	d9f5      	bls.n	2400699a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
240069ae:	2003      	movs	r0, #3
240069b0:	e163      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
240069b2:	4a4d      	ldr	r2, [pc, #308]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240069b4:	6813      	ldr	r3, [r2, #0]
240069b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240069ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
240069bc:	f7fc fffc 	bl	240039b8 <HAL_GetTick>
240069c0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240069c2:	4b49      	ldr	r3, [pc, #292]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240069c4:	681b      	ldr	r3, [r3, #0]
240069c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
240069ca:	d006      	beq.n	240069da <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240069cc:	f7fc fff4 	bl	240039b8 <HAL_GetTick>
240069d0:	1b40      	subs	r0, r0, r5
240069d2:	2802      	cmp	r0, #2
240069d4:	d9f5      	bls.n	240069c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
240069d6:	2003      	movs	r0, #3
240069d8:	e14f      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
240069da:	6823      	ldr	r3, [r4, #0]
240069dc:	f013 0f04 	tst.w	r3, #4
240069e0:	d121      	bne.n	24006a26 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
240069e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
240069e4:	2b00      	cmp	r3, #0
240069e6:	f000 8147 	beq.w	24006c78 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
240069ea:	4a3f      	ldr	r2, [pc, #252]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240069ec:	6912      	ldr	r2, [r2, #16]
240069ee:	f002 0238 	and.w	r2, r2, #56	; 0x38
240069f2:	2a18      	cmp	r2, #24
240069f4:	f000 80ee 	beq.w	24006bd4 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240069f8:	2b02      	cmp	r3, #2
240069fa:	d079      	beq.n	24006af0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
240069fc:	4a3a      	ldr	r2, [pc, #232]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
240069fe:	6813      	ldr	r3, [r2, #0]
24006a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24006a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24006a06:	f7fc ffd7 	bl	240039b8 <HAL_GetTick>
24006a0a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24006a0c:	4b36      	ldr	r3, [pc, #216]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006a0e:	681b      	ldr	r3, [r3, #0]
24006a10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
24006a14:	f000 80dc 	beq.w	24006bd0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24006a18:	f7fc ffce 	bl	240039b8 <HAL_GetTick>
24006a1c:	1b00      	subs	r0, r0, r4
24006a1e:	2802      	cmp	r0, #2
24006a20:	d9f4      	bls.n	24006a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
24006a22:	2003      	movs	r0, #3
24006a24:	e129      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
24006a26:	4a31      	ldr	r2, [pc, #196]	; (24006aec <HAL_RCC_OscConfig+0x4fc>)
24006a28:	6813      	ldr	r3, [r2, #0]
24006a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24006a2e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
24006a30:	f7fc ffc2 	bl	240039b8 <HAL_GetTick>
24006a34:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24006a36:	4b2d      	ldr	r3, [pc, #180]	; (24006aec <HAL_RCC_OscConfig+0x4fc>)
24006a38:	681b      	ldr	r3, [r3, #0]
24006a3a:	f413 7f80 	tst.w	r3, #256	; 0x100
24006a3e:	d106      	bne.n	24006a4e <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24006a40:	f7fc ffba 	bl	240039b8 <HAL_GetTick>
24006a44:	1b40      	subs	r0, r0, r5
24006a46:	2864      	cmp	r0, #100	; 0x64
24006a48:	d9f5      	bls.n	24006a36 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
24006a4a:	2003      	movs	r0, #3
24006a4c:	e115      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24006a4e:	68a3      	ldr	r3, [r4, #8]
24006a50:	2b01      	cmp	r3, #1
24006a52:	d00a      	beq.n	24006a6a <HAL_RCC_OscConfig+0x47a>
24006a54:	bb0b      	cbnz	r3, 24006a9a <HAL_RCC_OscConfig+0x4aa>
24006a56:	4b24      	ldr	r3, [pc, #144]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24006a5a:	f022 0201 	bic.w	r2, r2, #1
24006a5e:	671a      	str	r2, [r3, #112]	; 0x70
24006a60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24006a62:	f022 0204 	bic.w	r2, r2, #4
24006a66:	671a      	str	r2, [r3, #112]	; 0x70
24006a68:	e004      	b.n	24006a74 <HAL_RCC_OscConfig+0x484>
24006a6a:	4a1f      	ldr	r2, [pc, #124]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006a6c:	6f13      	ldr	r3, [r2, #112]	; 0x70
24006a6e:	f043 0301 	orr.w	r3, r3, #1
24006a72:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24006a74:	68a3      	ldr	r3, [r4, #8]
24006a76:	b333      	cbz	r3, 24006ac6 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
24006a78:	f7fc ff9e 	bl	240039b8 <HAL_GetTick>
24006a7c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24006a7e:	4b1a      	ldr	r3, [pc, #104]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006a82:	f013 0f02 	tst.w	r3, #2
24006a86:	d1ac      	bne.n	240069e2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24006a88:	f7fc ff96 	bl	240039b8 <HAL_GetTick>
24006a8c:	1b40      	subs	r0, r0, r5
24006a8e:	f241 3388 	movw	r3, #5000	; 0x1388
24006a92:	4298      	cmp	r0, r3
24006a94:	d9f3      	bls.n	24006a7e <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
24006a96:	2003      	movs	r0, #3
24006a98:	e0ef      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24006a9a:	2b05      	cmp	r3, #5
24006a9c:	d009      	beq.n	24006ab2 <HAL_RCC_OscConfig+0x4c2>
24006a9e:	4b12      	ldr	r3, [pc, #72]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006aa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24006aa2:	f022 0201 	bic.w	r2, r2, #1
24006aa6:	671a      	str	r2, [r3, #112]	; 0x70
24006aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24006aaa:	f022 0204 	bic.w	r2, r2, #4
24006aae:	671a      	str	r2, [r3, #112]	; 0x70
24006ab0:	e7e0      	b.n	24006a74 <HAL_RCC_OscConfig+0x484>
24006ab2:	4b0d      	ldr	r3, [pc, #52]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24006ab6:	f042 0204 	orr.w	r2, r2, #4
24006aba:	671a      	str	r2, [r3, #112]	; 0x70
24006abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24006abe:	f042 0201 	orr.w	r2, r2, #1
24006ac2:	671a      	str	r2, [r3, #112]	; 0x70
24006ac4:	e7d6      	b.n	24006a74 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
24006ac6:	f7fc ff77 	bl	240039b8 <HAL_GetTick>
24006aca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24006acc:	4b06      	ldr	r3, [pc, #24]	; (24006ae8 <HAL_RCC_OscConfig+0x4f8>)
24006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006ad0:	f013 0f02 	tst.w	r3, #2
24006ad4:	d085      	beq.n	240069e2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24006ad6:	f7fc ff6f 	bl	240039b8 <HAL_GetTick>
24006ada:	1b40      	subs	r0, r0, r5
24006adc:	f241 3388 	movw	r3, #5000	; 0x1388
24006ae0:	4298      	cmp	r0, r3
24006ae2:	d9f3      	bls.n	24006acc <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
24006ae4:	2003      	movs	r0, #3
24006ae6:	e0c8      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006ae8:	58024400 	.word	0x58024400
24006aec:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
24006af0:	4a69      	ldr	r2, [pc, #420]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006af2:	6813      	ldr	r3, [r2, #0]
24006af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24006af8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
24006afa:	f7fc ff5d 	bl	240039b8 <HAL_GetTick>
24006afe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24006b00:	4b65      	ldr	r3, [pc, #404]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006b02:	681b      	ldr	r3, [r3, #0]
24006b04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
24006b08:	d006      	beq.n	24006b18 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24006b0a:	f7fc ff55 	bl	240039b8 <HAL_GetTick>
24006b0e:	1b40      	subs	r0, r0, r5
24006b10:	2802      	cmp	r0, #2
24006b12:	d9f5      	bls.n	24006b00 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
24006b14:	2003      	movs	r0, #3
24006b16:	e0b0      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24006b18:	4b5f      	ldr	r3, [pc, #380]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006b1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
24006b1c:	4a5f      	ldr	r2, [pc, #380]	; (24006c9c <HAL_RCC_OscConfig+0x6ac>)
24006b1e:	400a      	ands	r2, r1
24006b20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24006b22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
24006b24:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
24006b28:	430a      	orrs	r2, r1
24006b2a:	629a      	str	r2, [r3, #40]	; 0x28
24006b2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
24006b2e:	3a01      	subs	r2, #1
24006b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
24006b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
24006b36:	3901      	subs	r1, #1
24006b38:	0249      	lsls	r1, r1, #9
24006b3a:	b289      	uxth	r1, r1
24006b3c:	430a      	orrs	r2, r1
24006b3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
24006b40:	3901      	subs	r1, #1
24006b42:	0409      	lsls	r1, r1, #16
24006b44:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
24006b48:	430a      	orrs	r2, r1
24006b4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24006b4c:	3901      	subs	r1, #1
24006b4e:	0609      	lsls	r1, r1, #24
24006b50:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
24006b54:	430a      	orrs	r2, r1
24006b56:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24006b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006b5a:	f022 0201 	bic.w	r2, r2, #1
24006b5e:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24006b60:	6b59      	ldr	r1, [r3, #52]	; 0x34
24006b62:	4a4f      	ldr	r2, [pc, #316]	; (24006ca0 <HAL_RCC_OscConfig+0x6b0>)
24006b64:	400a      	ands	r2, r1
24006b66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24006b68:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
24006b6c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006b70:	f022 020c 	bic.w	r2, r2, #12
24006b74:	6c21      	ldr	r1, [r4, #64]	; 0x40
24006b76:	430a      	orrs	r2, r1
24006b78:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006b7c:	f022 0202 	bic.w	r2, r2, #2
24006b80:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006b82:	430a      	orrs	r2, r1
24006b84:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006b88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24006b8c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006b90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24006b94:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006b98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006ba0:	f042 0201 	orr.w	r2, r2, #1
24006ba4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24006ba6:	681a      	ldr	r2, [r3, #0]
24006ba8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
24006bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
24006bae:	f7fc ff03 	bl	240039b8 <HAL_GetTick>
24006bb2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24006bb4:	4b38      	ldr	r3, [pc, #224]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006bb6:	681b      	ldr	r3, [r3, #0]
24006bb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
24006bbc:	d106      	bne.n	24006bcc <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24006bbe:	f7fc fefb 	bl	240039b8 <HAL_GetTick>
24006bc2:	1b00      	subs	r0, r0, r4
24006bc4:	2802      	cmp	r0, #2
24006bc6:	d9f5      	bls.n	24006bb4 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
24006bc8:	2003      	movs	r0, #3
24006bca:	e056      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
24006bcc:	2000      	movs	r0, #0
24006bce:	e054      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006bd0:	2000      	movs	r0, #0
24006bd2:	e052      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
24006bd4:	4a30      	ldr	r2, [pc, #192]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006bd6:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24006bd8:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24006bda:	2b01      	cmp	r3, #1
24006bdc:	d04e      	beq.n	24006c7c <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24006bde:	f001 0303 	and.w	r3, r1, #3
24006be2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24006be4:	4293      	cmp	r3, r2
24006be6:	d14b      	bne.n	24006c80 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24006be8:	f3c1 1105 	ubfx	r1, r1, #4, #6
24006bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24006bee:	4299      	cmp	r1, r3
24006bf0:	d148      	bne.n	24006c84 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24006bf2:	f3c0 0208 	ubfx	r2, r0, #0, #9
24006bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
24006bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24006bfa:	429a      	cmp	r2, r3
24006bfc:	d144      	bne.n	24006c88 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24006bfe:	f3c0 2246 	ubfx	r2, r0, #9, #7
24006c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
24006c04:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24006c06:	429a      	cmp	r2, r3
24006c08:	d140      	bne.n	24006c8c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24006c0a:	f3c0 4206 	ubfx	r2, r0, #16, #7
24006c0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24006c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24006c12:	429a      	cmp	r2, r3
24006c14:	d13c      	bne.n	24006c90 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24006c16:	f3c0 6006 	ubfx	r0, r0, #24, #7
24006c1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24006c1e:	4298      	cmp	r0, r3
24006c20:	d138      	bne.n	24006c94 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24006c22:	4b1d      	ldr	r3, [pc, #116]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24006c26:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24006c2a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
24006c2c:	429a      	cmp	r2, r3
24006c2e:	d101      	bne.n	24006c34 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
24006c30:	2000      	movs	r0, #0
24006c32:	e022      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
24006c34:	4a18      	ldr	r2, [pc, #96]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006c36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24006c38:	f023 0301 	bic.w	r3, r3, #1
24006c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
24006c3e:	f7fc febb 	bl	240039b8 <HAL_GetTick>
24006c42:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24006c44:	f7fc feb8 	bl	240039b8 <HAL_GetTick>
24006c48:	42a8      	cmp	r0, r5
24006c4a:	d0fb      	beq.n	24006c44 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24006c4c:	4a12      	ldr	r2, [pc, #72]	; (24006c98 <HAL_RCC_OscConfig+0x6a8>)
24006c4e:	6b51      	ldr	r1, [r2, #52]	; 0x34
24006c50:	4b13      	ldr	r3, [pc, #76]	; (24006ca0 <HAL_RCC_OscConfig+0x6b0>)
24006c52:	400b      	ands	r3, r1
24006c54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24006c56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24006c5a:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
24006c5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24006c5e:	f043 0301 	orr.w	r3, r3, #1
24006c62:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
24006c64:	2000      	movs	r0, #0
24006c66:	e008      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
24006c68:	2001      	movs	r0, #1
}
24006c6a:	4770      	bx	lr
        return HAL_ERROR;
24006c6c:	2001      	movs	r0, #1
24006c6e:	e004      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
24006c70:	2001      	movs	r0, #1
24006c72:	e002      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
24006c74:	2001      	movs	r0, #1
24006c76:	e000      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
24006c78:	2000      	movs	r0, #0
}
24006c7a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
24006c7c:	2001      	movs	r0, #1
24006c7e:	e7fc      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c80:	2001      	movs	r0, #1
24006c82:	e7fa      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c84:	2001      	movs	r0, #1
24006c86:	e7f8      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c88:	2001      	movs	r0, #1
24006c8a:	e7f6      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c8c:	2001      	movs	r0, #1
24006c8e:	e7f4      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c90:	2001      	movs	r0, #1
24006c92:	e7f2      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c94:	2001      	movs	r0, #1
24006c96:	e7f0      	b.n	24006c7a <HAL_RCC_OscConfig+0x68a>
24006c98:	58024400 	.word	0x58024400
24006c9c:	fffffc0c 	.word	0xfffffc0c
24006ca0:	ffff0007 	.word	0xffff0007

24006ca4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24006ca4:	4b74      	ldr	r3, [pc, #464]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006ca6:	691b      	ldr	r3, [r3, #16]
24006ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
24006cac:	2b10      	cmp	r3, #16
24006cae:	f000 80de 	beq.w	24006e6e <HAL_RCC_GetSysClockFreq+0x1ca>
24006cb2:	2b18      	cmp	r3, #24
24006cb4:	d010      	beq.n	24006cd8 <HAL_RCC_GetSysClockFreq+0x34>
24006cb6:	b10b      	cbz	r3, 24006cbc <HAL_RCC_GetSysClockFreq+0x18>
24006cb8:	4870      	ldr	r0, [pc, #448]	; (24006e7c <HAL_RCC_GetSysClockFreq+0x1d8>)
24006cba:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24006cbc:	4b6e      	ldr	r3, [pc, #440]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006cbe:	681b      	ldr	r3, [r3, #0]
24006cc0:	f013 0f20 	tst.w	r3, #32
24006cc4:	f000 80d5 	beq.w	24006e72 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006cc8:	4b6b      	ldr	r3, [pc, #428]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006cca:	6818      	ldr	r0, [r3, #0]
24006ccc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
24006cd0:	4b6b      	ldr	r3, [pc, #428]	; (24006e80 <HAL_RCC_GetSysClockFreq+0x1dc>)
24006cd2:	fa23 f000 	lsr.w	r0, r3, r0
24006cd6:	4770      	bx	lr
{
24006cd8:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24006cda:	4a67      	ldr	r2, [pc, #412]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006cdc:	6a91      	ldr	r1, [r2, #40]	; 0x28
24006cde:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24006ce2:	6a94      	ldr	r4, [r2, #40]	; 0x28
24006ce4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24006ce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24006cea:	f003 0c01 	and.w	ip, r3, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24006cee:	6b53      	ldr	r3, [r2, #52]	; 0x34
24006cf0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
24006cf4:	fb0c f303 	mul.w	r3, ip, r3
24006cf8:	ee07 3a90 	vmov	s15, r3
24006cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
24006d00:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
24006d04:	f000 8093 	beq.w	24006e2e <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
24006d08:	2901      	cmp	r1, #1
24006d0a:	d065      	beq.n	24006dd8 <HAL_RCC_GetSysClockFreq+0x134>
24006d0c:	2902      	cmp	r1, #2
24006d0e:	f000 8091 	beq.w	24006e34 <HAL_RCC_GetSysClockFreq+0x190>
24006d12:	b1e1      	cbz	r1, 24006d4e <HAL_RCC_GetSysClockFreq+0xaa>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24006d14:	ee07 0a10 	vmov	s14, r0
24006d18:	eef8 6a47 	vcvt.f32.u32	s13, s14
24006d1c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 24006e84 <HAL_RCC_GetSysClockFreq+0x1e0>
24006d20:	ee86 7a26 	vdiv.f32	s14, s12, s13
24006d24:	4b54      	ldr	r3, [pc, #336]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006d2c:	ee06 3a90 	vmov	s13, r3
24006d30:	eef8 6a66 	vcvt.f32.u32	s13, s13
24006d34:	ed9f 6a54 	vldr	s12, [pc, #336]	; 24006e88 <HAL_RCC_GetSysClockFreq+0x1e4>
24006d38:	ee67 7a86 	vmul.f32	s15, s15, s12
24006d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24006d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24006d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
24006d48:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
24006d4c:	e060      	b.n	24006e10 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24006d4e:	6813      	ldr	r3, [r2, #0]
24006d50:	f013 0f20 	tst.w	r3, #32
24006d54:	d023      	beq.n	24006d9e <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006d56:	4611      	mov	r1, r2
24006d58:	6812      	ldr	r2, [r2, #0]
24006d5a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
24006d5e:	4b48      	ldr	r3, [pc, #288]	; (24006e80 <HAL_RCC_GetSysClockFreq+0x1dc>)
24006d60:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24006d62:	ee07 3a10 	vmov	s14, r3
24006d66:	eef8 6a47 	vcvt.f32.u32	s13, s14
24006d6a:	ee07 0a10 	vmov	s14, r0
24006d6e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
24006d72:	ee86 7a86 	vdiv.f32	s14, s13, s12
24006d76:	6b0b      	ldr	r3, [r1, #48]	; 0x30
24006d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006d7c:	ee06 3a90 	vmov	s13, r3
24006d80:	eef8 6a66 	vcvt.f32.u32	s13, s13
24006d84:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24006e88 <HAL_RCC_GetSysClockFreq+0x1e4>
24006d88:	ee67 7a86 	vmul.f32	s15, s15, s12
24006d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24006d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24006d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
24006d98:	ee27 7a27 	vmul.f32	s14, s14, s15
24006d9c:	e038      	b.n	24006e10 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24006d9e:	ee07 0a10 	vmov	s14, r0
24006da2:	eef8 6a47 	vcvt.f32.u32	s13, s14
24006da6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 24006e8c <HAL_RCC_GetSysClockFreq+0x1e8>
24006daa:	ee86 7a26 	vdiv.f32	s14, s12, s13
24006dae:	4b32      	ldr	r3, [pc, #200]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006db6:	ee06 3a90 	vmov	s13, r3
24006dba:	eef8 6a66 	vcvt.f32.u32	s13, s13
24006dbe:	ed9f 6a32 	vldr	s12, [pc, #200]	; 24006e88 <HAL_RCC_GetSysClockFreq+0x1e4>
24006dc2:	ee67 7a86 	vmul.f32	s15, s15, s12
24006dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24006dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24006dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
24006dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
24006dd6:	e01b      	b.n	24006e10 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24006dd8:	ee07 0a10 	vmov	s14, r0
24006ddc:	eef8 6a47 	vcvt.f32.u32	s13, s14
24006de0:	ed9f 6a28 	vldr	s12, [pc, #160]	; 24006e84 <HAL_RCC_GetSysClockFreq+0x1e0>
24006de4:	ee86 7a26 	vdiv.f32	s14, s12, s13
24006de8:	4b23      	ldr	r3, [pc, #140]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006df0:	ee06 3a90 	vmov	s13, r3
24006df4:	eef8 6a66 	vcvt.f32.u32	s13, s13
24006df8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 24006e88 <HAL_RCC_GetSysClockFreq+0x1e4>
24006dfc:	ee67 7a86 	vmul.f32	s15, s15, s12
24006e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
24006e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24006e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
24006e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24006e10:	4b19      	ldr	r3, [pc, #100]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006e14:	f3c3 2346 	ubfx	r3, r3, #9, #7
24006e18:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24006e1a:	ee07 3a90 	vmov	s15, r3
24006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24006e22:	eec7 6a27 	vdiv.f32	s13, s14, s15
24006e26:	eefc 7ae6 	vcvt.u32.f32	s15, s13
24006e2a:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24006e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
24006e32:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24006e34:	ee07 0a10 	vmov	s14, r0
24006e38:	eef8 6a47 	vcvt.f32.u32	s13, s14
24006e3c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 24006e90 <HAL_RCC_GetSysClockFreq+0x1ec>
24006e40:	ee86 7a26 	vdiv.f32	s14, s12, s13
24006e44:	4b0c      	ldr	r3, [pc, #48]	; (24006e78 <HAL_RCC_GetSysClockFreq+0x1d4>)
24006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006e4c:	ee06 3a90 	vmov	s13, r3
24006e50:	eef8 6a66 	vcvt.f32.u32	s13, s13
24006e54:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24006e88 <HAL_RCC_GetSysClockFreq+0x1e4>
24006e58:	ee67 7a86 	vmul.f32	s15, s15, s12
24006e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24006e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24006e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
24006e68:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
24006e6c:	e7d0      	b.n	24006e10 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
24006e6e:	4809      	ldr	r0, [pc, #36]	; (24006e94 <HAL_RCC_GetSysClockFreq+0x1f0>)
24006e70:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
24006e72:	4803      	ldr	r0, [pc, #12]	; (24006e80 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
24006e74:	4770      	bx	lr
24006e76:	bf00      	nop
24006e78:	58024400 	.word	0x58024400
24006e7c:	003d0900 	.word	0x003d0900
24006e80:	03d09000 	.word	0x03d09000
24006e84:	4a742400 	.word	0x4a742400
24006e88:	39000000 	.word	0x39000000
24006e8c:	4c742400 	.word	0x4c742400
24006e90:	4b742400 	.word	0x4b742400
24006e94:	00f42400 	.word	0x00f42400

24006e98 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24006e98:	2800      	cmp	r0, #0
24006e9a:	f000 8132 	beq.w	24007102 <HAL_RCC_ClockConfig+0x26a>
{
24006e9e:	b570      	push	{r4, r5, r6, lr}
24006ea0:	460d      	mov	r5, r1
24006ea2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24006ea4:	4b9b      	ldr	r3, [pc, #620]	; (24007114 <HAL_RCC_ClockConfig+0x27c>)
24006ea6:	681b      	ldr	r3, [r3, #0]
24006ea8:	f003 030f 	and.w	r3, r3, #15
24006eac:	428b      	cmp	r3, r1
24006eae:	d20b      	bcs.n	24006ec8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
24006eb0:	4a98      	ldr	r2, [pc, #608]	; (24007114 <HAL_RCC_ClockConfig+0x27c>)
24006eb2:	6813      	ldr	r3, [r2, #0]
24006eb4:	f023 030f 	bic.w	r3, r3, #15
24006eb8:	430b      	orrs	r3, r1
24006eba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24006ebc:	6813      	ldr	r3, [r2, #0]
24006ebe:	f003 030f 	and.w	r3, r3, #15
24006ec2:	428b      	cmp	r3, r1
24006ec4:	f040 811f 	bne.w	24007106 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24006ec8:	6823      	ldr	r3, [r4, #0]
24006eca:	f013 0f04 	tst.w	r3, #4
24006ece:	d00c      	beq.n	24006eea <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24006ed0:	6922      	ldr	r2, [r4, #16]
24006ed2:	4b91      	ldr	r3, [pc, #580]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006ed4:	699b      	ldr	r3, [r3, #24]
24006ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
24006eda:	429a      	cmp	r2, r3
24006edc:	d905      	bls.n	24006eea <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24006ede:	498e      	ldr	r1, [pc, #568]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006ee0:	698b      	ldr	r3, [r1, #24]
24006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24006ee6:	431a      	orrs	r2, r3
24006ee8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24006eea:	6823      	ldr	r3, [r4, #0]
24006eec:	f013 0f08 	tst.w	r3, #8
24006ef0:	d00c      	beq.n	24006f0c <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24006ef2:	6962      	ldr	r2, [r4, #20]
24006ef4:	4b88      	ldr	r3, [pc, #544]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006ef6:	69db      	ldr	r3, [r3, #28]
24006ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
24006efc:	429a      	cmp	r2, r3
24006efe:	d905      	bls.n	24006f0c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24006f00:	4985      	ldr	r1, [pc, #532]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f02:	69cb      	ldr	r3, [r1, #28]
24006f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24006f08:	431a      	orrs	r2, r3
24006f0a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24006f0c:	6823      	ldr	r3, [r4, #0]
24006f0e:	f013 0f10 	tst.w	r3, #16
24006f12:	d00c      	beq.n	24006f2e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24006f14:	69a2      	ldr	r2, [r4, #24]
24006f16:	4b80      	ldr	r3, [pc, #512]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f18:	69db      	ldr	r3, [r3, #28]
24006f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24006f1e:	429a      	cmp	r2, r3
24006f20:	d905      	bls.n	24006f2e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24006f22:	497d      	ldr	r1, [pc, #500]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f24:	69cb      	ldr	r3, [r1, #28]
24006f26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24006f2a:	431a      	orrs	r2, r3
24006f2c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24006f2e:	6823      	ldr	r3, [r4, #0]
24006f30:	f013 0f20 	tst.w	r3, #32
24006f34:	d00c      	beq.n	24006f50 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24006f36:	69e2      	ldr	r2, [r4, #28]
24006f38:	4b77      	ldr	r3, [pc, #476]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f3a:	6a1b      	ldr	r3, [r3, #32]
24006f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
24006f40:	429a      	cmp	r2, r3
24006f42:	d905      	bls.n	24006f50 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24006f44:	4974      	ldr	r1, [pc, #464]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f46:	6a0b      	ldr	r3, [r1, #32]
24006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24006f4c:	431a      	orrs	r2, r3
24006f4e:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24006f50:	6823      	ldr	r3, [r4, #0]
24006f52:	f013 0f02 	tst.w	r3, #2
24006f56:	d00c      	beq.n	24006f72 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24006f58:	68e2      	ldr	r2, [r4, #12]
24006f5a:	4b6f      	ldr	r3, [pc, #444]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f5c:	699b      	ldr	r3, [r3, #24]
24006f5e:	f003 030f 	and.w	r3, r3, #15
24006f62:	429a      	cmp	r2, r3
24006f64:	d905      	bls.n	24006f72 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24006f66:	496c      	ldr	r1, [pc, #432]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f68:	698b      	ldr	r3, [r1, #24]
24006f6a:	f023 030f 	bic.w	r3, r3, #15
24006f6e:	431a      	orrs	r2, r3
24006f70:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24006f72:	6823      	ldr	r3, [r4, #0]
24006f74:	f013 0f01 	tst.w	r3, #1
24006f78:	d041      	beq.n	24006ffe <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24006f7a:	4a67      	ldr	r2, [pc, #412]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f7c:	6993      	ldr	r3, [r2, #24]
24006f7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24006f82:	68a1      	ldr	r1, [r4, #8]
24006f84:	430b      	orrs	r3, r1
24006f86:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24006f88:	6863      	ldr	r3, [r4, #4]
24006f8a:	2b02      	cmp	r3, #2
24006f8c:	d00a      	beq.n	24006fa4 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24006f8e:	2b03      	cmp	r3, #3
24006f90:	d027      	beq.n	24006fe2 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24006f92:	2b01      	cmp	r3, #1
24006f94:	d02c      	beq.n	24006ff0 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24006f96:	4a60      	ldr	r2, [pc, #384]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006f98:	6812      	ldr	r2, [r2, #0]
24006f9a:	f012 0f04 	tst.w	r2, #4
24006f9e:	d106      	bne.n	24006fae <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
24006fa0:	2001      	movs	r0, #1
24006fa2:	e0ad      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24006fa4:	6812      	ldr	r2, [r2, #0]
24006fa6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
24006faa:	f000 80ae 	beq.w	2400710a <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24006fae:	495a      	ldr	r1, [pc, #360]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006fb0:	690a      	ldr	r2, [r1, #16]
24006fb2:	f022 0207 	bic.w	r2, r2, #7
24006fb6:	4313      	orrs	r3, r2
24006fb8:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
24006fba:	f7fc fcfd 	bl	240039b8 <HAL_GetTick>
24006fbe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24006fc0:	4b55      	ldr	r3, [pc, #340]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006fc2:	691b      	ldr	r3, [r3, #16]
24006fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
24006fc8:	6862      	ldr	r2, [r4, #4]
24006fca:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24006fce:	d016      	beq.n	24006ffe <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24006fd0:	f7fc fcf2 	bl	240039b8 <HAL_GetTick>
24006fd4:	1b80      	subs	r0, r0, r6
24006fd6:	f241 3388 	movw	r3, #5000	; 0x1388
24006fda:	4298      	cmp	r0, r3
24006fdc:	d9f0      	bls.n	24006fc0 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
24006fde:	2003      	movs	r0, #3
24006fe0:	e08e      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24006fe2:	4a4d      	ldr	r2, [pc, #308]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006fe4:	6812      	ldr	r2, [r2, #0]
24006fe6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
24006fea:	d1e0      	bne.n	24006fae <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
24006fec:	2001      	movs	r0, #1
24006fee:	e087      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24006ff0:	4a49      	ldr	r2, [pc, #292]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24006ff2:	6812      	ldr	r2, [r2, #0]
24006ff4:	f412 7f80 	tst.w	r2, #256	; 0x100
24006ff8:	d1d9      	bne.n	24006fae <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
24006ffa:	2001      	movs	r0, #1
24006ffc:	e080      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24006ffe:	6823      	ldr	r3, [r4, #0]
24007000:	f013 0f02 	tst.w	r3, #2
24007004:	d00c      	beq.n	24007020 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007006:	68e2      	ldr	r2, [r4, #12]
24007008:	4b43      	ldr	r3, [pc, #268]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
2400700a:	699b      	ldr	r3, [r3, #24]
2400700c:	f003 030f 	and.w	r3, r3, #15
24007010:	429a      	cmp	r2, r3
24007012:	d205      	bcs.n	24007020 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007014:	4940      	ldr	r1, [pc, #256]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24007016:	698b      	ldr	r3, [r1, #24]
24007018:	f023 030f 	bic.w	r3, r3, #15
2400701c:	431a      	orrs	r2, r3
2400701e:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24007020:	4b3c      	ldr	r3, [pc, #240]	; (24007114 <HAL_RCC_ClockConfig+0x27c>)
24007022:	681b      	ldr	r3, [r3, #0]
24007024:	f003 030f 	and.w	r3, r3, #15
24007028:	42ab      	cmp	r3, r5
2400702a:	d90a      	bls.n	24007042 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400702c:	4a39      	ldr	r2, [pc, #228]	; (24007114 <HAL_RCC_ClockConfig+0x27c>)
2400702e:	6813      	ldr	r3, [r2, #0]
24007030:	f023 030f 	bic.w	r3, r3, #15
24007034:	432b      	orrs	r3, r5
24007036:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007038:	6813      	ldr	r3, [r2, #0]
2400703a:	f003 030f 	and.w	r3, r3, #15
2400703e:	42ab      	cmp	r3, r5
24007040:	d165      	bne.n	2400710e <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007042:	6823      	ldr	r3, [r4, #0]
24007044:	f013 0f04 	tst.w	r3, #4
24007048:	d00c      	beq.n	24007064 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2400704a:	6922      	ldr	r2, [r4, #16]
2400704c:	4b32      	ldr	r3, [pc, #200]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
2400704e:	699b      	ldr	r3, [r3, #24]
24007050:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007054:	429a      	cmp	r2, r3
24007056:	d205      	bcs.n	24007064 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007058:	492f      	ldr	r1, [pc, #188]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
2400705a:	698b      	ldr	r3, [r1, #24]
2400705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007060:	431a      	orrs	r2, r3
24007062:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007064:	6823      	ldr	r3, [r4, #0]
24007066:	f013 0f08 	tst.w	r3, #8
2400706a:	d00c      	beq.n	24007086 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400706c:	6962      	ldr	r2, [r4, #20]
2400706e:	4b2a      	ldr	r3, [pc, #168]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24007070:	69db      	ldr	r3, [r3, #28]
24007072:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007076:	429a      	cmp	r2, r3
24007078:	d205      	bcs.n	24007086 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400707a:	4927      	ldr	r1, [pc, #156]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
2400707c:	69cb      	ldr	r3, [r1, #28]
2400707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007082:	431a      	orrs	r2, r3
24007084:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007086:	6823      	ldr	r3, [r4, #0]
24007088:	f013 0f10 	tst.w	r3, #16
2400708c:	d00c      	beq.n	240070a8 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400708e:	69a2      	ldr	r2, [r4, #24]
24007090:	4b21      	ldr	r3, [pc, #132]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
24007092:	69db      	ldr	r3, [r3, #28]
24007094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24007098:	429a      	cmp	r2, r3
2400709a:	d205      	bcs.n	240070a8 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400709c:	491e      	ldr	r1, [pc, #120]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
2400709e:	69cb      	ldr	r3, [r1, #28]
240070a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
240070a4:	431a      	orrs	r2, r3
240070a6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240070a8:	6823      	ldr	r3, [r4, #0]
240070aa:	f013 0f20 	tst.w	r3, #32
240070ae:	d00c      	beq.n	240070ca <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240070b0:	69e2      	ldr	r2, [r4, #28]
240070b2:	4b19      	ldr	r3, [pc, #100]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
240070b4:	6a1b      	ldr	r3, [r3, #32]
240070b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
240070ba:	429a      	cmp	r2, r3
240070bc:	d205      	bcs.n	240070ca <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240070be:	4916      	ldr	r1, [pc, #88]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
240070c0:	6a0b      	ldr	r3, [r1, #32]
240070c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240070c6:	431a      	orrs	r2, r3
240070c8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240070ca:	f7ff fdeb 	bl	24006ca4 <HAL_RCC_GetSysClockFreq>
240070ce:	4912      	ldr	r1, [pc, #72]	; (24007118 <HAL_RCC_ClockConfig+0x280>)
240070d0:	698b      	ldr	r3, [r1, #24]
240070d2:	f3c3 2303 	ubfx	r3, r3, #8, #4
240070d6:	4a11      	ldr	r2, [pc, #68]	; (2400711c <HAL_RCC_ClockConfig+0x284>)
240070d8:	5cd3      	ldrb	r3, [r2, r3]
240070da:	f003 031f 	and.w	r3, r3, #31
240070de:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240070e0:	698b      	ldr	r3, [r1, #24]
240070e2:	f003 030f 	and.w	r3, r3, #15
240070e6:	5cd3      	ldrb	r3, [r2, r3]
240070e8:	f003 031f 	and.w	r3, r3, #31
240070ec:	fa20 f303 	lsr.w	r3, r0, r3
240070f0:	4a0b      	ldr	r2, [pc, #44]	; (24007120 <HAL_RCC_ClockConfig+0x288>)
240070f2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
240070f4:	4b0b      	ldr	r3, [pc, #44]	; (24007124 <HAL_RCC_ClockConfig+0x28c>)
240070f6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
240070f8:	4b0b      	ldr	r3, [pc, #44]	; (24007128 <HAL_RCC_ClockConfig+0x290>)
240070fa:	6818      	ldr	r0, [r3, #0]
240070fc:	f7fc fbfa 	bl	240038f4 <HAL_InitTick>
}
24007100:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
24007102:	2001      	movs	r0, #1
}
24007104:	4770      	bx	lr
      return HAL_ERROR;
24007106:	2001      	movs	r0, #1
24007108:	e7fa      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
2400710a:	2001      	movs	r0, #1
2400710c:	e7f8      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
2400710e:	2001      	movs	r0, #1
24007110:	e7f6      	b.n	24007100 <HAL_RCC_ClockConfig+0x268>
24007112:	bf00      	nop
24007114:	52002000 	.word	0x52002000
24007118:	58024400 	.word	0x58024400
2400711c:	24015fc4 	.word	0x24015fc4
24007120:	20000754 	.word	0x20000754
24007124:	20000750 	.word	0x20000750
24007128:	2000075c 	.word	0x2000075c

2400712c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2400712c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400712e:	f7ff fdb9 	bl	24006ca4 <HAL_RCC_GetSysClockFreq>
24007132:	4a0b      	ldr	r2, [pc, #44]	; (24007160 <HAL_RCC_GetHCLKFreq+0x34>)
24007134:	6993      	ldr	r3, [r2, #24]
24007136:	f3c3 2303 	ubfx	r3, r3, #8, #4
2400713a:	490a      	ldr	r1, [pc, #40]	; (24007164 <HAL_RCC_GetHCLKFreq+0x38>)
2400713c:	5ccb      	ldrb	r3, [r1, r3]
2400713e:	f003 031f 	and.w	r3, r3, #31
24007142:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007146:	6992      	ldr	r2, [r2, #24]
24007148:	f002 020f 	and.w	r2, r2, #15
2400714c:	5c88      	ldrb	r0, [r1, r2]
2400714e:	f000 001f 	and.w	r0, r0, #31
24007152:	fa23 f000 	lsr.w	r0, r3, r0
24007156:	4a04      	ldr	r2, [pc, #16]	; (24007168 <HAL_RCC_GetHCLKFreq+0x3c>)
24007158:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400715a:	4a04      	ldr	r2, [pc, #16]	; (2400716c <HAL_RCC_GetHCLKFreq+0x40>)
2400715c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
2400715e:	bd08      	pop	{r3, pc}
24007160:	58024400 	.word	0x58024400
24007164:	24015fc4 	.word	0x24015fc4
24007168:	20000754 	.word	0x20000754
2400716c:	20000750 	.word	0x20000750

24007170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24007170:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24007172:	f7ff ffdb 	bl	2400712c <HAL_RCC_GetHCLKFreq>
24007176:	4b05      	ldr	r3, [pc, #20]	; (2400718c <HAL_RCC_GetPCLK1Freq+0x1c>)
24007178:	69db      	ldr	r3, [r3, #28]
2400717a:	f3c3 1302 	ubfx	r3, r3, #4, #3
2400717e:	4a04      	ldr	r2, [pc, #16]	; (24007190 <HAL_RCC_GetPCLK1Freq+0x20>)
24007180:	5cd3      	ldrb	r3, [r2, r3]
24007182:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24007186:	40d8      	lsrs	r0, r3
24007188:	bd08      	pop	{r3, pc}
2400718a:	bf00      	nop
2400718c:	58024400 	.word	0x58024400
24007190:	24015fc4 	.word	0x24015fc4

24007194 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007194:	4b40      	ldr	r3, [pc, #256]	; (24007298 <RCCEx_PLL2_Config+0x104>)
24007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24007198:	f003 0303 	and.w	r3, r3, #3
2400719c:	2b03      	cmp	r3, #3
2400719e:	d079      	beq.n	24007294 <RCCEx_PLL2_Config+0x100>
{
240071a0:	b570      	push	{r4, r5, r6, lr}
240071a2:	4605      	mov	r5, r0
240071a4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
240071a6:	4a3c      	ldr	r2, [pc, #240]	; (24007298 <RCCEx_PLL2_Config+0x104>)
240071a8:	6813      	ldr	r3, [r2, #0]
240071aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
240071ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240071b0:	f7fc fc02 	bl	240039b8 <HAL_GetTick>
240071b4:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240071b6:	4b38      	ldr	r3, [pc, #224]	; (24007298 <RCCEx_PLL2_Config+0x104>)
240071b8:	681b      	ldr	r3, [r3, #0]
240071ba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
240071be:	d006      	beq.n	240071ce <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240071c0:	f7fc fbfa 	bl	240039b8 <HAL_GetTick>
240071c4:	1b03      	subs	r3, r0, r4
240071c6:	2b02      	cmp	r3, #2
240071c8:	d9f5      	bls.n	240071b6 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
240071ca:	2003      	movs	r0, #3

  }


  return status;
}
240071cc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
240071ce:	4b32      	ldr	r3, [pc, #200]	; (24007298 <RCCEx_PLL2_Config+0x104>)
240071d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240071d2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
240071d6:	6829      	ldr	r1, [r5, #0]
240071d8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
240071dc:	629a      	str	r2, [r3, #40]	; 0x28
240071de:	686a      	ldr	r2, [r5, #4]
240071e0:	3a01      	subs	r2, #1
240071e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
240071e6:	68a9      	ldr	r1, [r5, #8]
240071e8:	3901      	subs	r1, #1
240071ea:	0249      	lsls	r1, r1, #9
240071ec:	b289      	uxth	r1, r1
240071ee:	430a      	orrs	r2, r1
240071f0:	68e9      	ldr	r1, [r5, #12]
240071f2:	3901      	subs	r1, #1
240071f4:	0409      	lsls	r1, r1, #16
240071f6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
240071fa:	430a      	orrs	r2, r1
240071fc:	6929      	ldr	r1, [r5, #16]
240071fe:	3901      	subs	r1, #1
24007200:	0609      	lsls	r1, r1, #24
24007202:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
24007206:	430a      	orrs	r2, r1
24007208:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2400720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400720c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
24007210:	6969      	ldr	r1, [r5, #20]
24007212:	430a      	orrs	r2, r1
24007214:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007218:	f022 0220 	bic.w	r2, r2, #32
2400721c:	69a9      	ldr	r1, [r5, #24]
2400721e:	430a      	orrs	r2, r1
24007220:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
24007222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007224:	f022 0210 	bic.w	r2, r2, #16
24007228:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2400722a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
2400722c:	4a1b      	ldr	r2, [pc, #108]	; (2400729c <RCCEx_PLL2_Config+0x108>)
2400722e:	400a      	ands	r2, r1
24007230:	69e9      	ldr	r1, [r5, #28]
24007232:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
24007236:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
24007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400723a:	f042 0210 	orr.w	r2, r2, #16
2400723e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007240:	b9c6      	cbnz	r6, 24007274 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007242:	461a      	mov	r2, r3
24007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400724a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
2400724c:	4a12      	ldr	r2, [pc, #72]	; (24007298 <RCCEx_PLL2_Config+0x104>)
2400724e:	6813      	ldr	r3, [r2, #0]
24007250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24007254:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
24007256:	f7fc fbaf 	bl	240039b8 <HAL_GetTick>
2400725a:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400725c:	4b0e      	ldr	r3, [pc, #56]	; (24007298 <RCCEx_PLL2_Config+0x104>)
2400725e:	681b      	ldr	r3, [r3, #0]
24007260:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
24007264:	d114      	bne.n	24007290 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007266:	f7fc fba7 	bl	240039b8 <HAL_GetTick>
2400726a:	1b00      	subs	r0, r0, r4
2400726c:	2802      	cmp	r0, #2
2400726e:	d9f5      	bls.n	2400725c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
24007270:	2003      	movs	r0, #3
24007272:	e7ab      	b.n	240071cc <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
24007274:	2e01      	cmp	r6, #1
24007276:	d005      	beq.n	24007284 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24007278:	4a07      	ldr	r2, [pc, #28]	; (24007298 <RCCEx_PLL2_Config+0x104>)
2400727a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400727c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24007280:	62d3      	str	r3, [r2, #44]	; 0x2c
24007282:	e7e3      	b.n	2400724c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24007284:	4a04      	ldr	r2, [pc, #16]	; (24007298 <RCCEx_PLL2_Config+0x104>)
24007286:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2400728c:	62d3      	str	r3, [r2, #44]	; 0x2c
2400728e:	e7dd      	b.n	2400724c <RCCEx_PLL2_Config+0xb8>
  return status;
24007290:	2000      	movs	r0, #0
24007292:	e79b      	b.n	240071cc <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
24007294:	2001      	movs	r0, #1
}
24007296:	4770      	bx	lr
24007298:	58024400 	.word	0x58024400
2400729c:	ffff0007 	.word	0xffff0007

240072a0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240072a0:	4b40      	ldr	r3, [pc, #256]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
240072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240072a4:	f003 0303 	and.w	r3, r3, #3
240072a8:	2b03      	cmp	r3, #3
240072aa:	d079      	beq.n	240073a0 <RCCEx_PLL3_Config+0x100>
{
240072ac:	b570      	push	{r4, r5, r6, lr}
240072ae:	4605      	mov	r5, r0
240072b0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
240072b2:	4a3c      	ldr	r2, [pc, #240]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
240072b4:	6813      	ldr	r3, [r2, #0]
240072b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
240072ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240072bc:	f7fc fb7c 	bl	240039b8 <HAL_GetTick>
240072c0:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240072c2:	4b38      	ldr	r3, [pc, #224]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
240072c4:	681b      	ldr	r3, [r3, #0]
240072c6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
240072ca:	d006      	beq.n	240072da <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240072cc:	f7fc fb74 	bl	240039b8 <HAL_GetTick>
240072d0:	1b03      	subs	r3, r0, r4
240072d2:	2b02      	cmp	r3, #2
240072d4:	d9f5      	bls.n	240072c2 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
240072d6:	2003      	movs	r0, #3

  }


  return status;
}
240072d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
240072da:	4b32      	ldr	r3, [pc, #200]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
240072dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240072de:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
240072e2:	6829      	ldr	r1, [r5, #0]
240072e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
240072e8:	629a      	str	r2, [r3, #40]	; 0x28
240072ea:	686a      	ldr	r2, [r5, #4]
240072ec:	3a01      	subs	r2, #1
240072ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
240072f2:	68a9      	ldr	r1, [r5, #8]
240072f4:	3901      	subs	r1, #1
240072f6:	0249      	lsls	r1, r1, #9
240072f8:	b289      	uxth	r1, r1
240072fa:	430a      	orrs	r2, r1
240072fc:	68e9      	ldr	r1, [r5, #12]
240072fe:	3901      	subs	r1, #1
24007300:	0409      	lsls	r1, r1, #16
24007302:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
24007306:	430a      	orrs	r2, r1
24007308:	6929      	ldr	r1, [r5, #16]
2400730a:	3901      	subs	r1, #1
2400730c:	0609      	lsls	r1, r1, #24
2400730e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
24007312:	430a      	orrs	r2, r1
24007314:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007318:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
2400731c:	6969      	ldr	r1, [r5, #20]
2400731e:	430a      	orrs	r2, r1
24007320:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
24007328:	69a9      	ldr	r1, [r5, #24]
2400732a:	430a      	orrs	r2, r1
2400732c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
2400732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007334:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007336:	6c59      	ldr	r1, [r3, #68]	; 0x44
24007338:	4a1b      	ldr	r2, [pc, #108]	; (240073a8 <RCCEx_PLL3_Config+0x108>)
2400733a:	400a      	ands	r2, r1
2400733c:	69e9      	ldr	r1, [r5, #28]
2400733e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
24007342:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
24007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400734a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
2400734c:	b9c6      	cbnz	r6, 24007380 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400734e:	461a      	mov	r2, r3
24007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24007356:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
24007358:	4a12      	ldr	r2, [pc, #72]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
2400735a:	6813      	ldr	r3, [r2, #0]
2400735c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24007360:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
24007362:	f7fc fb29 	bl	240039b8 <HAL_GetTick>
24007366:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007368:	4b0e      	ldr	r3, [pc, #56]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
2400736a:	681b      	ldr	r3, [r3, #0]
2400736c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
24007370:	d114      	bne.n	2400739c <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007372:	f7fc fb21 	bl	240039b8 <HAL_GetTick>
24007376:	1b00      	subs	r0, r0, r4
24007378:	2802      	cmp	r0, #2
2400737a:	d9f5      	bls.n	24007368 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
2400737c:	2003      	movs	r0, #3
2400737e:	e7ab      	b.n	240072d8 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
24007380:	2e01      	cmp	r6, #1
24007382:	d005      	beq.n	24007390 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24007384:	4a07      	ldr	r2, [pc, #28]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
24007386:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400738c:	62d3      	str	r3, [r2, #44]	; 0x2c
2400738e:	e7e3      	b.n	24007358 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24007390:	4a04      	ldr	r2, [pc, #16]	; (240073a4 <RCCEx_PLL3_Config+0x104>)
24007392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24007398:	62d3      	str	r3, [r2, #44]	; 0x2c
2400739a:	e7dd      	b.n	24007358 <RCCEx_PLL3_Config+0xb8>
  return status;
2400739c:	2000      	movs	r0, #0
2400739e:	e79b      	b.n	240072d8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
240073a0:	2001      	movs	r0, #1
}
240073a2:	4770      	bx	lr
240073a4:	58024400 	.word	0x58024400
240073a8:	ffff0007 	.word	0xffff0007

240073ac <HAL_RCCEx_PeriphCLKConfig>:
{
240073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240073ae:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
240073b0:	6803      	ldr	r3, [r0, #0]
240073b2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
240073b6:	d030      	beq.n	2400741a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
240073b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
240073ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240073be:	d026      	beq.n	2400740e <HAL_RCCEx_PeriphCLKConfig+0x62>
240073c0:	d80e      	bhi.n	240073e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
240073c2:	b1eb      	cbz	r3, 24007400 <HAL_RCCEx_PeriphCLKConfig+0x54>
240073c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
240073c8:	d107      	bne.n	240073da <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240073ca:	2102      	movs	r1, #2
240073cc:	3008      	adds	r0, #8
240073ce:	f7ff fee1 	bl	24007194 <RCCEx_PLL2_Config>
240073d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240073d4:	b145      	cbz	r5, 240073e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
240073d6:	462e      	mov	r6, r5
240073d8:	e021      	b.n	2400741e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
240073da:	2601      	movs	r6, #1
240073dc:	4635      	mov	r5, r6
240073de:	e01e      	b.n	2400741e <HAL_RCCEx_PeriphCLKConfig+0x72>
240073e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240073e4:	d109      	bne.n	240073fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
240073e6:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
240073e8:	4a98      	ldr	r2, [pc, #608]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
240073ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
240073ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
240073f0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
240073f2:	430b      	orrs	r3, r1
240073f4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
240073f6:	2600      	movs	r6, #0
240073f8:	e011      	b.n	2400741e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
240073fa:	2601      	movs	r6, #1
240073fc:	4635      	mov	r5, r6
240073fe:	e00e      	b.n	2400741e <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007400:	4a92      	ldr	r2, [pc, #584]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
24007402:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007408:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2400740a:	2500      	movs	r5, #0
2400740c:	e7ec      	b.n	240073e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400740e:	2102      	movs	r1, #2
24007410:	3028      	adds	r0, #40	; 0x28
24007412:	f7ff ff45 	bl	240072a0 <RCCEx_PLL3_Config>
24007416:	4605      	mov	r5, r0
        break;
24007418:	e7dc      	b.n	240073d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2400741a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2400741c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2400741e:	6823      	ldr	r3, [r4, #0]
24007420:	f413 7f80 	tst.w	r3, #256	; 0x100
24007424:	d014      	beq.n	24007450 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
24007426:	6da3      	ldr	r3, [r4, #88]	; 0x58
24007428:	2b04      	cmp	r3, #4
2400742a:	d832      	bhi.n	24007492 <HAL_RCCEx_PeriphCLKConfig+0xe6>
2400742c:	e8df f003 	tbb	[pc, r3]
24007430:	082a2303 	.word	0x082a2303
24007434:	08          	.byte	0x08
24007435:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007436:	4a85      	ldr	r2, [pc, #532]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
24007438:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400743a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400743e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24007440:	bb55      	cbnz	r5, 24007498 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24007442:	4a82      	ldr	r2, [pc, #520]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
24007444:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007446:	f023 0307 	bic.w	r3, r3, #7
2400744a:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400744c:	430b      	orrs	r3, r1
2400744e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24007450:	6823      	ldr	r3, [r4, #0]
24007452:	f413 7f00 	tst.w	r3, #512	; 0x200
24007456:	d031      	beq.n	240074bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai23ClockSelection)
24007458:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2400745a:	2b80      	cmp	r3, #128	; 0x80
2400745c:	d04c      	beq.n	240074f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
2400745e:	d820      	bhi.n	240074a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
24007460:	2b00      	cmp	r3, #0
24007462:	d043      	beq.n	240074ec <HAL_RCCEx_PeriphCLKConfig+0x140>
24007464:	2b40      	cmp	r3, #64	; 0x40
24007466:	d119      	bne.n	2400749c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007468:	2100      	movs	r1, #0
2400746a:	f104 0008 	add.w	r0, r4, #8
2400746e:	f7ff fe91 	bl	24007194 <RCCEx_PLL2_Config>
24007472:	4605      	mov	r5, r0
        break;
24007474:	e01a      	b.n	240074ac <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007476:	2100      	movs	r1, #0
24007478:	f104 0008 	add.w	r0, r4, #8
2400747c:	f7ff fe8a 	bl	24007194 <RCCEx_PLL2_Config>
24007480:	4605      	mov	r5, r0
        break;
24007482:	e7dd      	b.n	24007440 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24007484:	2100      	movs	r1, #0
24007486:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400748a:	f7ff ff09 	bl	240072a0 <RCCEx_PLL3_Config>
2400748e:	4605      	mov	r5, r0
        break;
24007490:	e7d6      	b.n	24007440 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
24007492:	2601      	movs	r6, #1
24007494:	4635      	mov	r5, r6
24007496:	e7db      	b.n	24007450 <HAL_RCCEx_PeriphCLKConfig+0xa4>
24007498:	462e      	mov	r6, r5
2400749a:	e7d9      	b.n	24007450 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
2400749c:	2601      	movs	r6, #1
2400749e:	4635      	mov	r5, r6
240074a0:	e00c      	b.n	240074bc <HAL_RCCEx_PeriphCLKConfig+0x110>
240074a2:	2bc0      	cmp	r3, #192	; 0xc0
240074a4:	d002      	beq.n	240074ac <HAL_RCCEx_PeriphCLKConfig+0x100>
240074a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240074aa:	d11c      	bne.n	240074e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
240074ac:	bb5d      	cbnz	r5, 24007506 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
240074ae:	4a67      	ldr	r2, [pc, #412]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
240074b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
240074b2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
240074b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240074b8:	430b      	orrs	r3, r1
240074ba:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240074bc:	6823      	ldr	r3, [r4, #0]
240074be:	f413 6f80 	tst.w	r3, #1024	; 0x400
240074c2:	d046      	beq.n	24007552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
240074c4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
240074c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240074cc:	d039      	beq.n	24007542 <HAL_RCCEx_PeriphCLKConfig+0x196>
240074ce:	d81f      	bhi.n	24007510 <HAL_RCCEx_PeriphCLKConfig+0x164>
240074d0:	b38b      	cbz	r3, 24007536 <HAL_RCCEx_PeriphCLKConfig+0x18a>
240074d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240074d6:	d118      	bne.n	2400750a <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240074d8:	2100      	movs	r1, #0
240074da:	f104 0008 	add.w	r0, r4, #8
240074de:	f7ff fe59 	bl	24007194 <RCCEx_PLL2_Config>
240074e2:	4605      	mov	r5, r0
        break;
240074e4:	e01a      	b.n	2400751c <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
240074e6:	2601      	movs	r6, #1
240074e8:	4635      	mov	r5, r6
240074ea:	e7e7      	b.n	240074bc <HAL_RCCEx_PeriphCLKConfig+0x110>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240074ec:	4a57      	ldr	r2, [pc, #348]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
240074ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240074f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240074f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240074f6:	e7d9      	b.n	240074ac <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240074f8:	2100      	movs	r1, #0
240074fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
240074fe:	f7ff fecf 	bl	240072a0 <RCCEx_PLL3_Config>
24007502:	4605      	mov	r5, r0
        break;
24007504:	e7d2      	b.n	240074ac <HAL_RCCEx_PeriphCLKConfig+0x100>
24007506:	462e      	mov	r6, r5
24007508:	e7d8      	b.n	240074bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai4AClockSelection)
2400750a:	2601      	movs	r6, #1
2400750c:	4635      	mov	r5, r6
2400750e:	e020      	b.n	24007552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
24007510:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24007514:	d002      	beq.n	2400751c <HAL_RCCEx_PeriphCLKConfig+0x170>
24007516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400751a:	d109      	bne.n	24007530 <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
2400751c:	b9c5      	cbnz	r5, 24007550 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2400751e:	4a4b      	ldr	r2, [pc, #300]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
24007520:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007522:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
24007526:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400752a:	430b      	orrs	r3, r1
2400752c:	6593      	str	r3, [r2, #88]	; 0x58
2400752e:	e010      	b.n	24007552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
24007530:	2601      	movs	r6, #1
24007532:	4635      	mov	r5, r6
24007534:	e00d      	b.n	24007552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007536:	4a45      	ldr	r2, [pc, #276]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
24007538:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400753a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400753e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24007540:	e7ec      	b.n	2400751c <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24007542:	2100      	movs	r1, #0
24007544:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007548:	f7ff feaa 	bl	240072a0 <RCCEx_PLL3_Config>
2400754c:	4605      	mov	r5, r0
        break;
2400754e:	e7e5      	b.n	2400751c <HAL_RCCEx_PeriphCLKConfig+0x170>
24007550:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24007552:	6823      	ldr	r3, [r4, #0]
24007554:	f413 6f00 	tst.w	r3, #2048	; 0x800
24007558:	d024      	beq.n	240075a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->Sai4BClockSelection)
2400755a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
2400755e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24007562:	d042      	beq.n	240075ea <HAL_RCCEx_PeriphCLKConfig+0x23e>
24007564:	d80e      	bhi.n	24007584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
24007566:	2b00      	cmp	r3, #0
24007568:	d039      	beq.n	240075de <HAL_RCCEx_PeriphCLKConfig+0x232>
2400756a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400756e:	d106      	bne.n	2400757e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007570:	2100      	movs	r1, #0
24007572:	f104 0008 	add.w	r0, r4, #8
24007576:	f7ff fe0d 	bl	24007194 <RCCEx_PLL2_Config>
2400757a:	4605      	mov	r5, r0
        break;
2400757c:	e008      	b.n	24007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Sai4BClockSelection)
2400757e:	2601      	movs	r6, #1
24007580:	4635      	mov	r5, r6
24007582:	e00f      	b.n	240075a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24007584:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24007588:	d002      	beq.n	24007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
2400758a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400758e:	d123      	bne.n	240075d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    if (ret == HAL_OK)
24007590:	2d00      	cmp	r5, #0
24007592:	d131      	bne.n	240075f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24007594:	4a2d      	ldr	r2, [pc, #180]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
24007596:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007598:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
2400759c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
240075a0:	430b      	orrs	r3, r1
240075a2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
240075a4:	6823      	ldr	r3, [r4, #0]
240075a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
240075aa:	d02e      	beq.n	2400760a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->QspiClockSelection)
240075ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
240075ae:	2b20      	cmp	r3, #32
240075b0:	d040      	beq.n	24007634 <HAL_RCCEx_PeriphCLKConfig+0x288>
240075b2:	d826      	bhi.n	24007602 <HAL_RCCEx_PeriphCLKConfig+0x256>
240075b4:	b133      	cbz	r3, 240075c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
240075b6:	2b10      	cmp	r3, #16
240075b8:	d120      	bne.n	240075fc <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240075ba:	4a24      	ldr	r2, [pc, #144]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
240075bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240075be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240075c2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240075c4:	2d00      	cmp	r5, #0
240075c6:	d13c      	bne.n	24007642 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
240075c8:	4a20      	ldr	r2, [pc, #128]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
240075ca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240075cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
240075d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
240075d2:	430b      	orrs	r3, r1
240075d4:	64d3      	str	r3, [r2, #76]	; 0x4c
240075d6:	e018      	b.n	2400760a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Sai4BClockSelection)
240075d8:	2601      	movs	r6, #1
240075da:	4635      	mov	r5, r6
240075dc:	e7e2      	b.n	240075a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240075de:	4a1b      	ldr	r2, [pc, #108]	; (2400764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
240075e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240075e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240075e6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240075e8:	e7d2      	b.n	24007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240075ea:	2100      	movs	r1, #0
240075ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
240075f0:	f7ff fe56 	bl	240072a0 <RCCEx_PLL3_Config>
240075f4:	4605      	mov	r5, r0
        break;
240075f6:	e7cb      	b.n	24007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
240075f8:	462e      	mov	r6, r5
240075fa:	e7d3      	b.n	240075a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->QspiClockSelection)
240075fc:	2601      	movs	r6, #1
240075fe:	4635      	mov	r5, r6
24007600:	e003      	b.n	2400760a <HAL_RCCEx_PeriphCLKConfig+0x25e>
24007602:	2b30      	cmp	r3, #48	; 0x30
24007604:	d0de      	beq.n	240075c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
24007606:	2601      	movs	r6, #1
24007608:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400760a:	6823      	ldr	r3, [r4, #0]
2400760c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
24007610:	d02d      	beq.n	2400766e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
24007612:	6e23      	ldr	r3, [r4, #96]	; 0x60
24007614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24007618:	d04f      	beq.n	240076ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
2400761a:	d819      	bhi.n	24007650 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
2400761c:	2b00      	cmp	r3, #0
2400761e:	d046      	beq.n	240076ae <HAL_RCCEx_PeriphCLKConfig+0x302>
24007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24007624:	d10f      	bne.n	24007646 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007626:	2100      	movs	r1, #0
24007628:	f104 0008 	add.w	r0, r4, #8
2400762c:	f7ff fdb2 	bl	24007194 <RCCEx_PLL2_Config>
24007630:	4605      	mov	r5, r0
        break;
24007632:	e013      	b.n	2400765c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007634:	2102      	movs	r1, #2
24007636:	f104 0008 	add.w	r0, r4, #8
2400763a:	f7ff fdab 	bl	24007194 <RCCEx_PLL2_Config>
2400763e:	4605      	mov	r5, r0
        break;
24007640:	e7c0      	b.n	240075c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
24007642:	462e      	mov	r6, r5
24007644:	e7e1      	b.n	2400760a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Spi123ClockSelection)
24007646:	2601      	movs	r6, #1
24007648:	4635      	mov	r5, r6
2400764a:	e010      	b.n	2400766e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2400764c:	58024400 	.word	0x58024400
24007650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24007654:	d002      	beq.n	2400765c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
24007656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400765a:	d125      	bne.n	240076a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
2400765c:	2d00      	cmp	r5, #0
2400765e:	d133      	bne.n	240076c8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24007660:	4a77      	ldr	r2, [pc, #476]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
24007662:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
24007668:	6e21      	ldr	r1, [r4, #96]	; 0x60
2400766a:	430b      	orrs	r3, r1
2400766c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400766e:	6823      	ldr	r3, [r4, #0]
24007670:	f413 5f00 	tst.w	r3, #8192	; 0x2000
24007674:	d038      	beq.n	240076e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi45ClockSelection)
24007676:	6e63      	ldr	r3, [r4, #100]	; 0x64
24007678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400767c:	d053      	beq.n	24007726 <HAL_RCCEx_PeriphCLKConfig+0x37a>
2400767e:	d828      	bhi.n	240076d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
24007680:	b143      	cbz	r3, 24007694 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
24007682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007686:	d121      	bne.n	240076cc <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24007688:	2101      	movs	r1, #1
2400768a:	f104 0008 	add.w	r0, r4, #8
2400768e:	f7ff fd81 	bl	24007194 <RCCEx_PLL2_Config>
24007692:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007694:	2d00      	cmp	r5, #0
24007696:	d14d      	bne.n	24007734 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24007698:	4a69      	ldr	r2, [pc, #420]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
2400769a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400769c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
240076a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
240076a2:	430b      	orrs	r3, r1
240076a4:	6513      	str	r3, [r2, #80]	; 0x50
240076a6:	e01f      	b.n	240076e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi123ClockSelection)
240076a8:	2601      	movs	r6, #1
240076aa:	4635      	mov	r5, r6
240076ac:	e7df      	b.n	2400766e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240076ae:	4a64      	ldr	r2, [pc, #400]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
240076b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240076b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240076b6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240076b8:	e7d0      	b.n	2400765c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240076ba:	2100      	movs	r1, #0
240076bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
240076c0:	f7ff fdee 	bl	240072a0 <RCCEx_PLL3_Config>
240076c4:	4605      	mov	r5, r0
        break;
240076c6:	e7c9      	b.n	2400765c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
240076c8:	462e      	mov	r6, r5
240076ca:	e7d0      	b.n	2400766e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
240076cc:	2601      	movs	r6, #1
240076ce:	4635      	mov	r5, r6
240076d0:	e00a      	b.n	240076e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
240076d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240076d6:	d0dd      	beq.n	24007694 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
240076d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240076dc:	d0da      	beq.n	24007694 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
240076de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240076e2:	d0d7      	beq.n	24007694 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
240076e4:	2601      	movs	r6, #1
240076e6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240076e8:	6823      	ldr	r3, [r4, #0]
240076ea:	f413 4f80 	tst.w	r3, #16384	; 0x4000
240076ee:	d031      	beq.n	24007754 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    switch (PeriphClkInit->Spi6ClockSelection)
240076f0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
240076f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240076f8:	d045      	beq.n	24007786 <HAL_RCCEx_PeriphCLKConfig+0x3da>
240076fa:	d820      	bhi.n	2400773e <HAL_RCCEx_PeriphCLKConfig+0x392>
240076fc:	b143      	cbz	r3, 24007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
240076fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24007702:	d119      	bne.n	24007738 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24007704:	2101      	movs	r1, #1
24007706:	f104 0008 	add.w	r0, r4, #8
2400770a:	f7ff fd43 	bl	24007194 <RCCEx_PLL2_Config>
2400770e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007710:	2d00      	cmp	r5, #0
24007712:	d13f      	bne.n	24007794 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24007714:	4a4a      	ldr	r2, [pc, #296]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
24007716:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007718:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
2400771c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24007720:	430b      	orrs	r3, r1
24007722:	6593      	str	r3, [r2, #88]	; 0x58
24007724:	e016      	b.n	24007754 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24007726:	2101      	movs	r1, #1
24007728:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400772c:	f7ff fdb8 	bl	240072a0 <RCCEx_PLL3_Config>
24007730:	4605      	mov	r5, r0
        break;
24007732:	e7af      	b.n	24007694 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
24007734:	462e      	mov	r6, r5
24007736:	e7d7      	b.n	240076e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
24007738:	2601      	movs	r6, #1
2400773a:	4635      	mov	r5, r6
2400773c:	e00a      	b.n	24007754 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
2400773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24007742:	d0e5      	beq.n	24007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
24007744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24007748:	d0e2      	beq.n	24007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
2400774a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2400774e:	d0df      	beq.n	24007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
24007750:	2601      	movs	r6, #1
24007752:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24007754:	6823      	ldr	r3, [r4, #0]
24007756:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400775a:	d009      	beq.n	24007770 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FdcanClockSelection)
2400775c:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400775e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24007762:	d019      	beq.n	24007798 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
24007764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24007768:	d024      	beq.n	240077b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
2400776a:	b1d3      	cbz	r3, 240077a2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
2400776c:	2601      	movs	r6, #1
2400776e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24007770:	6823      	ldr	r3, [r4, #0]
24007772:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
24007776:	d033      	beq.n	240077e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->FmcClockSelection)
24007778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2400777a:	2b03      	cmp	r3, #3
2400777c:	d85b      	bhi.n	24007836 <HAL_RCCEx_PeriphCLKConfig+0x48a>
2400777e:	e8df f003 	tbb	[pc, r3]
24007782:	2227      	.short	0x2227
24007784:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24007786:	2101      	movs	r1, #1
24007788:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400778c:	f7ff fd88 	bl	240072a0 <RCCEx_PLL3_Config>
24007790:	4605      	mov	r5, r0
        break;
24007792:	e7bd      	b.n	24007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
24007794:	462e      	mov	r6, r5
24007796:	e7dd      	b.n	24007754 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007798:	4a29      	ldr	r2, [pc, #164]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
2400779a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400779c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240077a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240077a2:	b975      	cbnz	r5, 240077c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
240077a4:	4a26      	ldr	r2, [pc, #152]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
240077a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
240077a8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
240077ac:	6f21      	ldr	r1, [r4, #112]	; 0x70
240077ae:	430b      	orrs	r3, r1
240077b0:	6513      	str	r3, [r2, #80]	; 0x50
240077b2:	e7dd      	b.n	24007770 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240077b4:	2101      	movs	r1, #1
240077b6:	f104 0008 	add.w	r0, r4, #8
240077ba:	f7ff fceb 	bl	24007194 <RCCEx_PLL2_Config>
240077be:	4605      	mov	r5, r0
        break;
240077c0:	e7ef      	b.n	240077a2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
240077c2:	462e      	mov	r6, r5
240077c4:	e7d4      	b.n	24007770 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240077c6:	4a1e      	ldr	r2, [pc, #120]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
240077c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240077ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240077ce:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240077d0:	bba5      	cbnz	r5, 2400783c <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
240077d2:	4a1b      	ldr	r2, [pc, #108]	; (24007840 <HAL_RCCEx_PeriphCLKConfig+0x494>)
240077d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240077d6:	f023 0303 	bic.w	r3, r3, #3
240077da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240077dc:	430b      	orrs	r3, r1
240077de:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240077e0:	6823      	ldr	r3, [r4, #0]
240077e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
240077e6:	d12d      	bne.n	24007844 <HAL_RCCEx_PeriphCLKConfig+0x498>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240077e8:	6823      	ldr	r3, [r4, #0]
240077ea:	f013 0f01 	tst.w	r3, #1
240077ee:	f000 80a5 	beq.w	2400793c <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
240077f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
240077f4:	2b28      	cmp	r3, #40	; 0x28
240077f6:	f200 809f 	bhi.w	24007938 <HAL_RCCEx_PeriphCLKConfig+0x58c>
240077fa:	e8df f003 	tbb	[pc, r3]
240077fe:	9d8d      	.short	0x9d8d
24007800:	9d9d9d9d 	.word	0x9d9d9d9d
24007804:	9d879d9d 	.word	0x9d879d9d
24007808:	9d9d9d9d 	.word	0x9d9d9d9d
2400780c:	9d969d9d 	.word	0x9d969d9d
24007810:	9d9d9d9d 	.word	0x9d9d9d9d
24007814:	9d8d9d9d 	.word	0x9d8d9d9d
24007818:	9d9d9d9d 	.word	0x9d9d9d9d
2400781c:	9d8d9d9d 	.word	0x9d8d9d9d
24007820:	9d9d9d9d 	.word	0x9d9d9d9d
24007824:	9d9d      	.short	0x9d9d
24007826:	8d          	.byte	0x8d
24007827:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007828:	2102      	movs	r1, #2
2400782a:	f104 0008 	add.w	r0, r4, #8
2400782e:	f7ff fcb1 	bl	24007194 <RCCEx_PLL2_Config>
24007832:	4605      	mov	r5, r0
        break;
24007834:	e7cc      	b.n	240077d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->FmcClockSelection)
24007836:	2601      	movs	r6, #1
24007838:	4635      	mov	r5, r6
2400783a:	e7d1      	b.n	240077e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
2400783c:	462e      	mov	r6, r5
2400783e:	e7cf      	b.n	240077e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
24007840:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24007844:	4a91      	ldr	r2, [pc, #580]	; (24007a8c <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
24007846:	6813      	ldr	r3, [r2, #0]
24007848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400784c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
2400784e:	f7fc f8b3 	bl	240039b8 <HAL_GetTick>
24007852:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007854:	4b8d      	ldr	r3, [pc, #564]	; (24007a8c <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
24007856:	681b      	ldr	r3, [r3, #0]
24007858:	f413 7f80 	tst.w	r3, #256	; 0x100
2400785c:	d105      	bne.n	2400786a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2400785e:	f7fc f8ab 	bl	240039b8 <HAL_GetTick>
24007862:	1bc0      	subs	r0, r0, r7
24007864:	2864      	cmp	r0, #100	; 0x64
24007866:	d9f5      	bls.n	24007854 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        ret = HAL_TIMEOUT;
24007868:	2503      	movs	r5, #3
    if (ret == HAL_OK)
2400786a:	2d00      	cmp	r5, #0
2400786c:	d14a      	bne.n	24007904 <HAL_RCCEx_PeriphCLKConfig+0x558>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2400786e:	4b88      	ldr	r3, [pc, #544]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
24007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007872:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24007876:	4053      	eors	r3, r2
24007878:	f413 7f40 	tst.w	r3, #768	; 0x300
2400787c:	d00c      	beq.n	24007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400787e:	4b84      	ldr	r3, [pc, #528]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
24007880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007882:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
24007886:	6f19      	ldr	r1, [r3, #112]	; 0x70
24007888:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
2400788c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2400788e:	6f19      	ldr	r1, [r3, #112]	; 0x70
24007890:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24007894:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
24007896:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24007898:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
2400789c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240078a0:	d015      	beq.n	240078ce <HAL_RCCEx_PeriphCLKConfig+0x522>
      if (ret == HAL_OK)
240078a2:	bb8d      	cbnz	r5, 24007908 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240078a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240078a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
240078ac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
240078b0:	d01e      	beq.n	240078f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
240078b2:	4a77      	ldr	r2, [pc, #476]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
240078b4:	6913      	ldr	r3, [r2, #16]
240078b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240078ba:	6113      	str	r3, [r2, #16]
240078bc:	4974      	ldr	r1, [pc, #464]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
240078be:	6f0b      	ldr	r3, [r1, #112]	; 0x70
240078c0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240078c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
240078c8:	4313      	orrs	r3, r2
240078ca:	670b      	str	r3, [r1, #112]	; 0x70
240078cc:	e78c      	b.n	240077e8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tickstart = HAL_GetTick();
240078ce:	f7fc f873 	bl	240039b8 <HAL_GetTick>
240078d2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240078d4:	4b6e      	ldr	r3, [pc, #440]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
240078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240078d8:	f013 0f02 	tst.w	r3, #2
240078dc:	d1e1      	bne.n	240078a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240078de:	f7fc f86b 	bl	240039b8 <HAL_GetTick>
240078e2:	1bc0      	subs	r0, r0, r7
240078e4:	f241 3388 	movw	r3, #5000	; 0x1388
240078e8:	4298      	cmp	r0, r3
240078ea:	d9f3      	bls.n	240078d4 <HAL_RCCEx_PeriphCLKConfig+0x528>
            ret = HAL_TIMEOUT;
240078ec:	2503      	movs	r5, #3
240078ee:	e7d8      	b.n	240078a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240078f0:	4867      	ldr	r0, [pc, #412]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
240078f2:	6902      	ldr	r2, [r0, #16]
240078f4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
240078f8:	4966      	ldr	r1, [pc, #408]	; (24007a94 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
240078fa:	ea01 1313 	and.w	r3, r1, r3, lsr #4
240078fe:	4313      	orrs	r3, r2
24007900:	6103      	str	r3, [r0, #16]
24007902:	e7db      	b.n	240078bc <HAL_RCCEx_PeriphCLKConfig+0x510>
      status = ret;
24007904:	462e      	mov	r6, r5
24007906:	e76f      	b.n	240077e8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        status = ret;
24007908:	462e      	mov	r6, r5
2400790a:	e76d      	b.n	240077e8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400790c:	2101      	movs	r1, #1
2400790e:	f104 0008 	add.w	r0, r4, #8
24007912:	f7ff fc3f 	bl	24007194 <RCCEx_PLL2_Config>
24007916:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007918:	b9e5      	cbnz	r5, 24007954 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2400791a:	4a5d      	ldr	r2, [pc, #372]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
2400791c:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400791e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
24007922:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24007924:	430b      	orrs	r3, r1
24007926:	6553      	str	r3, [r2, #84]	; 0x54
24007928:	e008      	b.n	2400793c <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400792a:	2101      	movs	r1, #1
2400792c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007930:	f7ff fcb6 	bl	240072a0 <RCCEx_PLL3_Config>
24007934:	4605      	mov	r5, r0
        break;
24007936:	e7ef      	b.n	24007918 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart16ClockSelection)
24007938:	2601      	movs	r6, #1
2400793a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400793c:	6823      	ldr	r3, [r4, #0]
2400793e:	f013 0f02 	tst.w	r3, #2
24007942:	d017      	beq.n	24007974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
24007944:	6fa3      	ldr	r3, [r4, #120]	; 0x78
24007946:	2b05      	cmp	r3, #5
24007948:	d828      	bhi.n	2400799c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
2400794a:	e8df f003 	tbb	[pc, r3]
2400794e:	050b      	.short	0x050b
24007950:	0b0b0b20 	.word	0x0b0b0b20
24007954:	462e      	mov	r6, r5
24007956:	e7f1      	b.n	2400793c <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24007958:	2101      	movs	r1, #1
2400795a:	f104 0008 	add.w	r0, r4, #8
2400795e:	f7ff fc19 	bl	24007194 <RCCEx_PLL2_Config>
24007962:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007964:	b9ed      	cbnz	r5, 240079a2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24007966:	4a4a      	ldr	r2, [pc, #296]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
24007968:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400796a:	f023 0307 	bic.w	r3, r3, #7
2400796e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24007970:	430b      	orrs	r3, r1
24007972:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24007974:	6823      	ldr	r3, [r4, #0]
24007976:	f013 0f04 	tst.w	r3, #4
2400797a:	d023      	beq.n	240079c4 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400797c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
24007980:	2b05      	cmp	r3, #5
24007982:	d845      	bhi.n	24007a10 <HAL_RCCEx_PeriphCLKConfig+0x664>
24007984:	e8df f003 	tbb	[pc, r3]
24007988:	153d0f15 	.word	0x153d0f15
2400798c:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400798e:	2101      	movs	r1, #1
24007990:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007994:	f7ff fc84 	bl	240072a0 <RCCEx_PLL3_Config>
24007998:	4605      	mov	r5, r0
        break;
2400799a:	e7e3      	b.n	24007964 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400799c:	2601      	movs	r6, #1
2400799e:	4635      	mov	r5, r6
240079a0:	e7e8      	b.n	24007974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
240079a2:	462e      	mov	r6, r5
240079a4:	e7e6      	b.n	24007974 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240079a6:	2101      	movs	r1, #1
240079a8:	f104 0008 	add.w	r0, r4, #8
240079ac:	f7ff fbf2 	bl	24007194 <RCCEx_PLL2_Config>
240079b0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240079b2:	bb85      	cbnz	r5, 24007a16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
240079b4:	4a36      	ldr	r2, [pc, #216]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
240079b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240079b8:	f023 0307 	bic.w	r3, r3, #7
240079bc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
240079c0:	430b      	orrs	r3, r1
240079c2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240079c4:	6823      	ldr	r3, [r4, #0]
240079c6:	f013 0f20 	tst.w	r3, #32
240079ca:	d034      	beq.n	24007a36 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim1ClockSelection)
240079cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
240079d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240079d4:	d04e      	beq.n	24007a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
240079d6:	d823      	bhi.n	24007a20 <HAL_RCCEx_PeriphCLKConfig+0x674>
240079d8:	b143      	cbz	r3, 240079ec <HAL_RCCEx_PeriphCLKConfig+0x640>
240079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240079de:	d11c      	bne.n	24007a1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240079e0:	2100      	movs	r1, #0
240079e2:	f104 0008 	add.w	r0, r4, #8
240079e6:	f7ff fbd5 	bl	24007194 <RCCEx_PLL2_Config>
240079ea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240079ec:	2d00      	cmp	r5, #0
240079ee:	d148      	bne.n	24007a82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
240079f0:	4a27      	ldr	r2, [pc, #156]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
240079f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
240079f4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
240079f8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
240079fc:	430b      	orrs	r3, r1
240079fe:	6553      	str	r3, [r2, #84]	; 0x54
24007a00:	e019      	b.n	24007a36 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24007a02:	2101      	movs	r1, #1
24007a04:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007a08:	f7ff fc4a 	bl	240072a0 <RCCEx_PLL3_Config>
24007a0c:	4605      	mov	r5, r0
        break;
24007a0e:	e7d0      	b.n	240079b2 <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24007a10:	2601      	movs	r6, #1
24007a12:	4635      	mov	r5, r6
24007a14:	e7d6      	b.n	240079c4 <HAL_RCCEx_PeriphCLKConfig+0x618>
24007a16:	462e      	mov	r6, r5
24007a18:	e7d4      	b.n	240079c4 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lptim1ClockSelection)
24007a1a:	2601      	movs	r6, #1
24007a1c:	4635      	mov	r5, r6
24007a1e:	e00a      	b.n	24007a36 <HAL_RCCEx_PeriphCLKConfig+0x68a>
24007a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24007a24:	d0e2      	beq.n	240079ec <HAL_RCCEx_PeriphCLKConfig+0x640>
24007a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24007a2a:	d0df      	beq.n	240079ec <HAL_RCCEx_PeriphCLKConfig+0x640>
24007a2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24007a30:	d0dc      	beq.n	240079ec <HAL_RCCEx_PeriphCLKConfig+0x640>
24007a32:	2601      	movs	r6, #1
24007a34:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24007a36:	6823      	ldr	r3, [r4, #0]
24007a38:	f013 0f40 	tst.w	r3, #64	; 0x40
24007a3c:	d037      	beq.n	24007aae <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim2ClockSelection)
24007a3e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
24007a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24007a46:	d053      	beq.n	24007af0 <HAL_RCCEx_PeriphCLKConfig+0x744>
24007a48:	d826      	bhi.n	24007a98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
24007a4a:	b143      	cbz	r3, 24007a5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
24007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24007a50:	d119      	bne.n	24007a86 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007a52:	2100      	movs	r1, #0
24007a54:	f104 0008 	add.w	r0, r4, #8
24007a58:	f7ff fb9c 	bl	24007194 <RCCEx_PLL2_Config>
24007a5c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007a5e:	2d00      	cmp	r5, #0
24007a60:	d14d      	bne.n	24007afe <HAL_RCCEx_PeriphCLKConfig+0x752>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24007a62:	4a0b      	ldr	r2, [pc, #44]	; (24007a90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
24007a64:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007a66:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
24007a6a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24007a6e:	430b      	orrs	r3, r1
24007a70:	6593      	str	r3, [r2, #88]	; 0x58
24007a72:	e01c      	b.n	24007aae <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24007a74:	2102      	movs	r1, #2
24007a76:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007a7a:	f7ff fc11 	bl	240072a0 <RCCEx_PLL3_Config>
24007a7e:	4605      	mov	r5, r0
        break;
24007a80:	e7b4      	b.n	240079ec <HAL_RCCEx_PeriphCLKConfig+0x640>
24007a82:	462e      	mov	r6, r5
24007a84:	e7d7      	b.n	24007a36 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim2ClockSelection)
24007a86:	2601      	movs	r6, #1
24007a88:	4635      	mov	r5, r6
24007a8a:	e010      	b.n	24007aae <HAL_RCCEx_PeriphCLKConfig+0x702>
24007a8c:	58024800 	.word	0x58024800
24007a90:	58024400 	.word	0x58024400
24007a94:	00ffffcf 	.word	0x00ffffcf
24007a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24007a9c:	d0df      	beq.n	24007a5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
24007a9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24007aa2:	d0dc      	beq.n	24007a5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
24007aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24007aa8:	d0d9      	beq.n	24007a5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
24007aaa:	2601      	movs	r6, #1
24007aac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24007aae:	6823      	ldr	r3, [r4, #0]
24007ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
24007ab4:	d033      	beq.n	24007b1e <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->Lptim345ClockSelection)
24007ab6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
24007aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24007abe:	f000 80a3 	beq.w	24007c08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
24007ac2:	d821      	bhi.n	24007b08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
24007ac4:	b143      	cbz	r3, 24007ad8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
24007ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24007aca:	d11a      	bne.n	24007b02 <HAL_RCCEx_PeriphCLKConfig+0x756>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007acc:	2100      	movs	r1, #0
24007ace:	f104 0008 	add.w	r0, r4, #8
24007ad2:	f7ff fb5f 	bl	24007194 <RCCEx_PLL2_Config>
24007ad6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007ad8:	2d00      	cmp	r5, #0
24007ada:	f040 809c 	bne.w	24007c16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24007ade:	4a81      	ldr	r2, [pc, #516]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007ae0:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007ae2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24007ae6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24007aea:	430b      	orrs	r3, r1
24007aec:	6593      	str	r3, [r2, #88]	; 0x58
24007aee:	e016      	b.n	24007b1e <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24007af0:	2102      	movs	r1, #2
24007af2:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007af6:	f7ff fbd3 	bl	240072a0 <RCCEx_PLL3_Config>
24007afa:	4605      	mov	r5, r0
        break;
24007afc:	e7af      	b.n	24007a5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
24007afe:	462e      	mov	r6, r5
24007b00:	e7d5      	b.n	24007aae <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim345ClockSelection)
24007b02:	2601      	movs	r6, #1
24007b04:	4635      	mov	r5, r6
24007b06:	e00a      	b.n	24007b1e <HAL_RCCEx_PeriphCLKConfig+0x772>
24007b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24007b0c:	d0e4      	beq.n	24007ad8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
24007b0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24007b12:	d0e1      	beq.n	24007ad8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
24007b14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24007b18:	d0de      	beq.n	24007ad8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
24007b1a:	2601      	movs	r6, #1
24007b1c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24007b1e:	6823      	ldr	r3, [r4, #0]
24007b20:	f013 0f08 	tst.w	r3, #8
24007b24:	d00c      	beq.n	24007b40 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24007b26:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24007b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24007b2e:	d074      	beq.n	24007c1a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24007b30:	4a6c      	ldr	r2, [pc, #432]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007b32:	6d53      	ldr	r3, [r2, #84]	; 0x54
24007b34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24007b38:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
24007b3c:	430b      	orrs	r3, r1
24007b3e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24007b40:	6823      	ldr	r3, [r4, #0]
24007b42:	f013 0f10 	tst.w	r3, #16
24007b46:	d00c      	beq.n	24007b62 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24007b48:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
24007b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24007b50:	d06c      	beq.n	24007c2c <HAL_RCCEx_PeriphCLKConfig+0x880>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24007b52:	4a64      	ldr	r2, [pc, #400]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007b54:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24007b5a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
24007b5e:	430b      	orrs	r3, r1
24007b60:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24007b62:	6823      	ldr	r3, [r4, #0]
24007b64:	f413 2f00 	tst.w	r3, #524288	; 0x80000
24007b68:	d00b      	beq.n	24007b82 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    switch (PeriphClkInit->AdcClockSelection)
24007b6a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
24007b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007b72:	d074      	beq.n	24007c5e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
24007b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24007b78:	d067      	beq.n	24007c4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
24007b7a:	2b00      	cmp	r3, #0
24007b7c:	d05f      	beq.n	24007c3e <HAL_RCCEx_PeriphCLKConfig+0x892>
24007b7e:	2601      	movs	r6, #1
24007b80:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24007b82:	6823      	ldr	r3, [r4, #0]
24007b84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
24007b88:	d00c      	beq.n	24007ba4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch (PeriphClkInit->UsbClockSelection)
24007b8a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
24007b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24007b92:	d07c      	beq.n	24007c8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
24007b94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24007b98:	d06f      	beq.n	24007c7a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
24007b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24007b9e:	d067      	beq.n	24007c70 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
24007ba0:	2601      	movs	r6, #1
24007ba2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24007ba4:	6823      	ldr	r3, [r4, #0]
24007ba6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
24007baa:	d008      	beq.n	24007bbe <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->SdmmcClockSelection)
24007bac:	6d23      	ldr	r3, [r4, #80]	; 0x50
24007bae:	2b00      	cmp	r3, #0
24007bb0:	d076      	beq.n	24007ca0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
24007bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007bb6:	f000 8081 	beq.w	24007cbc <HAL_RCCEx_PeriphCLKConfig+0x910>
24007bba:	2601      	movs	r6, #1
24007bbc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24007bbe:	6823      	ldr	r3, [r4, #0]
24007bc0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
24007bc4:	f040 8083 	bne.w	24007cce <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24007bc8:	6823      	ldr	r3, [r4, #0]
24007bca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
24007bce:	f000 808e 	beq.w	24007cee <HAL_RCCEx_PeriphCLKConfig+0x942>
    switch (PeriphClkInit->RngClockSelection)
24007bd2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24007bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24007bda:	f000 80ec 	beq.w	24007db6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
24007bde:	f240 8083 	bls.w	24007ce8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
24007be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24007be6:	d003      	beq.n	24007bf0 <HAL_RCCEx_PeriphCLKConfig+0x844>
24007be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24007bec:	f040 80e1 	bne.w	24007db2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
    if (ret == HAL_OK)
24007bf0:	2d00      	cmp	r5, #0
24007bf2:	f040 80e6 	bne.w	24007dc2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24007bf6:	4a3b      	ldr	r2, [pc, #236]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007bf8:	6d53      	ldr	r3, [r2, #84]	; 0x54
24007bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24007bfe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24007c02:	430b      	orrs	r3, r1
24007c04:	6553      	str	r3, [r2, #84]	; 0x54
24007c06:	e072      	b.n	24007cee <HAL_RCCEx_PeriphCLKConfig+0x942>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24007c08:	2102      	movs	r1, #2
24007c0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007c0e:	f7ff fb47 	bl	240072a0 <RCCEx_PLL3_Config>
24007c12:	4605      	mov	r5, r0
        break;
24007c14:	e760      	b.n	24007ad8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
24007c16:	462e      	mov	r6, r5
24007c18:	e781      	b.n	24007b1e <HAL_RCCEx_PeriphCLKConfig+0x772>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24007c1a:	2102      	movs	r1, #2
24007c1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007c20:	f7ff fb3e 	bl	240072a0 <RCCEx_PLL3_Config>
24007c24:	2800      	cmp	r0, #0
24007c26:	d083      	beq.n	24007b30 <HAL_RCCEx_PeriphCLKConfig+0x784>
        status = HAL_ERROR;
24007c28:	2601      	movs	r6, #1
24007c2a:	e781      	b.n	24007b30 <HAL_RCCEx_PeriphCLKConfig+0x784>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24007c2c:	2102      	movs	r1, #2
24007c2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007c32:	f7ff fb35 	bl	240072a0 <RCCEx_PLL3_Config>
24007c36:	2800      	cmp	r0, #0
24007c38:	d08b      	beq.n	24007b52 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        status = HAL_ERROR;
24007c3a:	2601      	movs	r6, #1
24007c3c:	e789      	b.n	24007b52 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007c3e:	2100      	movs	r1, #0
24007c40:	f104 0008 	add.w	r0, r4, #8
24007c44:	f7ff faa6 	bl	24007194 <RCCEx_PLL2_Config>
24007c48:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007c4a:	b97d      	cbnz	r5, 24007c6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24007c4c:	4a25      	ldr	r2, [pc, #148]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007c4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24007c50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
24007c54:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24007c58:	430b      	orrs	r3, r1
24007c5a:	6593      	str	r3, [r2, #88]	; 0x58
24007c5c:	e791      	b.n	24007b82 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24007c5e:	2102      	movs	r1, #2
24007c60:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007c64:	f7ff fb1c 	bl	240072a0 <RCCEx_PLL3_Config>
24007c68:	4605      	mov	r5, r0
        break;
24007c6a:	e7ee      	b.n	24007c4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
24007c6c:	462e      	mov	r6, r5
24007c6e:	e788      	b.n	24007b82 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007c70:	4a1c      	ldr	r2, [pc, #112]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007c72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007c78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24007c7a:	b97d      	cbnz	r5, 24007c9c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24007c7c:	4a19      	ldr	r2, [pc, #100]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007c7e:	6d53      	ldr	r3, [r2, #84]	; 0x54
24007c80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24007c84:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24007c88:	430b      	orrs	r3, r1
24007c8a:	6553      	str	r3, [r2, #84]	; 0x54
24007c8c:	e78a      	b.n	24007ba4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24007c8e:	2101      	movs	r1, #1
24007c90:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007c94:	f7ff fb04 	bl	240072a0 <RCCEx_PLL3_Config>
24007c98:	4605      	mov	r5, r0
        break;
24007c9a:	e7ee      	b.n	24007c7a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
24007c9c:	462e      	mov	r6, r5
24007c9e:	e781      	b.n	24007ba4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007ca0:	4a10      	ldr	r2, [pc, #64]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007ca2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24007caa:	b975      	cbnz	r5, 24007cca <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24007cac:	4a0d      	ldr	r2, [pc, #52]	; (24007ce4 <HAL_RCCEx_PeriphCLKConfig+0x938>)
24007cae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24007cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24007cb4:	6d21      	ldr	r1, [r4, #80]	; 0x50
24007cb6:	430b      	orrs	r3, r1
24007cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
24007cba:	e780      	b.n	24007bbe <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007cbc:	2102      	movs	r1, #2
24007cbe:	f104 0008 	add.w	r0, r4, #8
24007cc2:	f7ff fa67 	bl	24007194 <RCCEx_PLL2_Config>
24007cc6:	4605      	mov	r5, r0
        break;
24007cc8:	e7ef      	b.n	24007caa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
24007cca:	462e      	mov	r6, r5
24007ccc:	e777      	b.n	24007bbe <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24007cce:	2102      	movs	r1, #2
24007cd0:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007cd4:	f7ff fae4 	bl	240072a0 <RCCEx_PLL3_Config>
24007cd8:	2800      	cmp	r0, #0
24007cda:	f43f af75 	beq.w	24007bc8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      status = HAL_ERROR;
24007cde:	2601      	movs	r6, #1
24007ce0:	e772      	b.n	24007bc8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
24007ce2:	bf00      	nop
24007ce4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
24007ce8:	2b00      	cmp	r3, #0
24007cea:	d081      	beq.n	24007bf0 <HAL_RCCEx_PeriphCLKConfig+0x844>
24007cec:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24007cee:	6823      	ldr	r3, [r4, #0]
24007cf0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
24007cf4:	d006      	beq.n	24007d04 <HAL_RCCEx_PeriphCLKConfig+0x958>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24007cf6:	4a4f      	ldr	r2, [pc, #316]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007cf8:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24007cfe:	6f61      	ldr	r1, [r4, #116]	; 0x74
24007d00:	430b      	orrs	r3, r1
24007d02:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24007d04:	6823      	ldr	r3, [r4, #0]
24007d06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
24007d0a:	d007      	beq.n	24007d1c <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24007d0c:	4a49      	ldr	r2, [pc, #292]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007d0e:	6913      	ldr	r3, [r2, #16]
24007d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24007d14:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
24007d18:	430b      	orrs	r3, r1
24007d1a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24007d1c:	6823      	ldr	r3, [r4, #0]
24007d1e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
24007d22:	d006      	beq.n	24007d32 <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24007d24:	4a43      	ldr	r2, [pc, #268]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007d26:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007d2c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24007d2e:	430b      	orrs	r3, r1
24007d30:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24007d32:	6823      	ldr	r3, [r4, #0]
24007d34:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
24007d38:	d009      	beq.n	24007d4e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24007d3a:	4b3e      	ldr	r3, [pc, #248]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007d3c:	691a      	ldr	r2, [r3, #16]
24007d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24007d42:	611a      	str	r2, [r3, #16]
24007d44:	691a      	ldr	r2, [r3, #16]
24007d46:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
24007d4a:	430a      	orrs	r2, r1
24007d4c:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24007d4e:	6823      	ldr	r3, [r4, #0]
24007d50:	2b00      	cmp	r3, #0
24007d52:	da06      	bge.n	24007d62 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24007d54:	4a37      	ldr	r2, [pc, #220]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007d56:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24007d58:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24007d5c:	6d61      	ldr	r1, [r4, #84]	; 0x54
24007d5e:	430b      	orrs	r3, r1
24007d60:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24007d62:	6823      	ldr	r3, [r4, #0]
24007d64:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
24007d68:	d007      	beq.n	24007d7a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24007d6a:	4a32      	ldr	r2, [pc, #200]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007d6c:	6d53      	ldr	r3, [r2, #84]	; 0x54
24007d6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24007d72:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
24007d76:	430b      	orrs	r3, r1
24007d78:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24007d7a:	6863      	ldr	r3, [r4, #4]
24007d7c:	f013 0f01 	tst.w	r3, #1
24007d80:	d121      	bne.n	24007dc6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24007d82:	6863      	ldr	r3, [r4, #4]
24007d84:	f013 0f02 	tst.w	r3, #2
24007d88:	d126      	bne.n	24007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24007d8a:	6863      	ldr	r3, [r4, #4]
24007d8c:	f013 0f04 	tst.w	r3, #4
24007d90:	d12b      	bne.n	24007dea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24007d92:	6863      	ldr	r3, [r4, #4]
24007d94:	f013 0f08 	tst.w	r3, #8
24007d98:	d130      	bne.n	24007dfc <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24007d9a:	6863      	ldr	r3, [r4, #4]
24007d9c:	f013 0f10 	tst.w	r3, #16
24007da0:	d135      	bne.n	24007e0e <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24007da2:	6863      	ldr	r3, [r4, #4]
24007da4:	f013 0f20 	tst.w	r3, #32
24007da8:	d13a      	bne.n	24007e20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (status == HAL_OK)
24007daa:	b106      	cbz	r6, 24007dae <HAL_RCCEx_PeriphCLKConfig+0xa02>
  return HAL_ERROR;
24007dac:	2601      	movs	r6, #1
}
24007dae:	4630      	mov	r0, r6
24007db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
24007db2:	2601      	movs	r6, #1
24007db4:	e79b      	b.n	24007cee <HAL_RCCEx_PeriphCLKConfig+0x942>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007db6:	4a1f      	ldr	r2, [pc, #124]	; (24007e34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
24007db8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24007dc0:	e716      	b.n	24007bf0 <HAL_RCCEx_PeriphCLKConfig+0x844>
24007dc2:	462e      	mov	r6, r5
24007dc4:	e793      	b.n	24007cee <HAL_RCCEx_PeriphCLKConfig+0x942>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007dc6:	2100      	movs	r1, #0
24007dc8:	f104 0008 	add.w	r0, r4, #8
24007dcc:	f7ff f9e2 	bl	24007194 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
24007dd0:	2800      	cmp	r0, #0
24007dd2:	d0d6      	beq.n	24007d82 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      status = ret;
24007dd4:	4606      	mov	r6, r0
24007dd6:	e7d4      	b.n	24007d82 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24007dd8:	2101      	movs	r1, #1
24007dda:	f104 0008 	add.w	r0, r4, #8
24007dde:	f7ff f9d9 	bl	24007194 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
24007de2:	2800      	cmp	r0, #0
24007de4:	d0d1      	beq.n	24007d8a <HAL_RCCEx_PeriphCLKConfig+0x9de>
      status = ret;
24007de6:	4606      	mov	r6, r0
24007de8:	e7cf      	b.n	24007d8a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007dea:	2102      	movs	r1, #2
24007dec:	f104 0008 	add.w	r0, r4, #8
24007df0:	f7ff f9d0 	bl	24007194 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
24007df4:	2800      	cmp	r0, #0
24007df6:	d0cc      	beq.n	24007d92 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      status = ret;
24007df8:	4606      	mov	r6, r0
24007dfa:	e7ca      	b.n	24007d92 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24007dfc:	2100      	movs	r1, #0
24007dfe:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007e02:	f7ff fa4d 	bl	240072a0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24007e06:	2800      	cmp	r0, #0
24007e08:	d0c7      	beq.n	24007d9a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      status = ret;
24007e0a:	4606      	mov	r6, r0
24007e0c:	e7c5      	b.n	24007d9a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24007e0e:	2101      	movs	r1, #1
24007e10:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007e14:	f7ff fa44 	bl	240072a0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24007e18:	2800      	cmp	r0, #0
24007e1a:	d0c2      	beq.n	24007da2 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
      status = ret;
24007e1c:	4606      	mov	r6, r0
24007e1e:	e7c0      	b.n	24007da2 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24007e20:	2102      	movs	r1, #2
24007e22:	f104 0028 	add.w	r0, r4, #40	; 0x28
24007e26:	f7ff fa3b 	bl	240072a0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24007e2a:	2800      	cmp	r0, #0
24007e2c:	d0bd      	beq.n	24007daa <HAL_RCCEx_PeriphCLKConfig+0x9fe>
      status = ret;
24007e2e:	4606      	mov	r6, r0
24007e30:	e7bb      	b.n	24007daa <HAL_RCCEx_PeriphCLKConfig+0x9fe>
24007e32:	bf00      	nop
24007e34:	58024400 	.word	0x58024400

24007e38 <HAL_RCCEx_GetD3PCLK1Freq>:
{
24007e38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24007e3a:	f7ff f977 	bl	2400712c <HAL_RCC_GetHCLKFreq>
24007e3e:	4b05      	ldr	r3, [pc, #20]	; (24007e54 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
24007e40:	6a1b      	ldr	r3, [r3, #32]
24007e42:	f3c3 1302 	ubfx	r3, r3, #4, #3
24007e46:	4a04      	ldr	r2, [pc, #16]	; (24007e58 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
24007e48:	5cd3      	ldrb	r3, [r2, r3]
24007e4a:	f003 031f 	and.w	r3, r3, #31
}
24007e4e:	40d8      	lsrs	r0, r3
24007e50:	bd08      	pop	{r3, pc}
24007e52:	bf00      	nop
24007e54:	58024400 	.word	0x58024400
24007e58:	24015fc4 	.word	0x24015fc4

24007e5c <HAL_RCCEx_GetPLL2ClockFreq>:
{
24007e5c:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007e5e:	4a77      	ldr	r2, [pc, #476]	; (2400803c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
24007e60:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24007e62:	6a94      	ldr	r4, [r2, #40]	; 0x28
24007e64:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24007e68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007e6a:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24007e6e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
24007e70:	f3c3 03cc 	ubfx	r3, r3, #3, #13
24007e74:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
24007e78:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
24007e7c:	f000 80d8 	beq.w	24008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
24007e80:	f001 0103 	and.w	r1, r1, #3
24007e84:	ee07 3a90 	vmov	s15, r3
24007e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
24007e8c:	2901      	cmp	r1, #1
24007e8e:	d065      	beq.n	24007f5c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
24007e90:	2902      	cmp	r1, #2
24007e92:	f000 80b0 	beq.w	24007ff6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
24007e96:	b1e1      	cbz	r1, 24007ed2 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24007e98:	ee07 ea10 	vmov	s14, lr
24007e9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007ea0:	ed9f 6a67 	vldr	s12, [pc, #412]	; 24008040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
24007ea4:	eec6 6a07 	vdiv.f32	s13, s12, s14
24007ea8:	4b64      	ldr	r3, [pc, #400]	; (2400803c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
24007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007eb0:	ee07 3a10 	vmov	s14, r3
24007eb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007eb8:	ed9f 6a62 	vldr	s12, [pc, #392]	; 24008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
24007ebc:	ee67 7a86 	vmul.f32	s15, s15, s12
24007ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
24007ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24007ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
24007ecc:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
24007ed0:	e060      	b.n	24007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007ed2:	6813      	ldr	r3, [r2, #0]
24007ed4:	f013 0f20 	tst.w	r3, #32
24007ed8:	d023      	beq.n	24007f22 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007eda:	4611      	mov	r1, r2
24007edc:	6812      	ldr	r2, [r2, #0]
24007ede:	f3c2 02c1 	ubfx	r2, r2, #3, #2
24007ee2:	4b59      	ldr	r3, [pc, #356]	; (24008048 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
24007ee4:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24007ee6:	ee07 3a10 	vmov	s14, r3
24007eea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007eee:	ee06 ea90 	vmov	s13, lr
24007ef2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
24007ef6:	eec7 6a06 	vdiv.f32	s13, s14, s12
24007efa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
24007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007f00:	ee07 3a10 	vmov	s14, r3
24007f04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007f08:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 24008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
24007f0c:	ee67 7a86 	vmul.f32	s15, s15, s12
24007f10:	ee77 7a27 	vadd.f32	s15, s14, s15
24007f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24007f18:	ee77 7a87 	vadd.f32	s15, s15, s14
24007f1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
24007f20:	e038      	b.n	24007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24007f22:	ee07 ea10 	vmov	s14, lr
24007f26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007f2a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 2400804c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
24007f2e:	eec6 6a07 	vdiv.f32	s13, s12, s14
24007f32:	4b42      	ldr	r3, [pc, #264]	; (2400803c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
24007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007f3a:	ee07 3a10 	vmov	s14, r3
24007f3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007f42:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
24007f46:	ee67 7a86 	vmul.f32	s15, s15, s12
24007f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
24007f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24007f52:	ee77 7a87 	vadd.f32	s15, s15, s14
24007f56:	ee66 6aa7 	vmul.f32	s13, s13, s15
24007f5a:	e01b      	b.n	24007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24007f5c:	ee07 ea10 	vmov	s14, lr
24007f60:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007f64:	ed9f 6a36 	vldr	s12, [pc, #216]	; 24008040 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
24007f68:	eec6 6a07 	vdiv.f32	s13, s12, s14
24007f6c:	4b33      	ldr	r3, [pc, #204]	; (2400803c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
24007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24007f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007f74:	ee07 3a10 	vmov	s14, r3
24007f78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007f7c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 24008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
24007f80:	ee67 7a86 	vmul.f32	s15, s15, s12
24007f84:	ee77 7a27 	vadd.f32	s15, s14, s15
24007f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24007f8c:	ee77 7a87 	vadd.f32	s15, s15, s14
24007f90:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24007f94:	4a29      	ldr	r2, [pc, #164]	; (2400803c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
24007f96:	6b93      	ldr	r3, [r2, #56]	; 0x38
24007f98:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007f9c:	ee07 3a10 	vmov	s14, r3
24007fa0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007fa4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24007fa8:	ee37 7a06 	vadd.f32	s14, s14, s12
24007fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007fb4:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24007fb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
24007fba:	f3c3 4306 	ubfx	r3, r3, #16, #7
24007fbe:	ee07 3a10 	vmov	s14, r3
24007fc2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007fc6:	ee37 7a06 	vadd.f32	s14, s14, s12
24007fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007fd2:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24007fd6:	6b93      	ldr	r3, [r2, #56]	; 0x38
24007fd8:	f3c3 6306 	ubfx	r3, r3, #24, #7
24007fdc:	ee07 3a90 	vmov	s15, r3
24007fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24007fe4:	ee77 7a86 	vadd.f32	s15, s15, s12
24007fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24007fec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24007ff0:	ed80 7a02 	vstr	s14, [r0, #8]
}
24007ff4:	bd10      	pop	{r4, pc}
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24007ff6:	ee07 ea10 	vmov	s14, lr
24007ffa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24007ffe:	ed9f 6a14 	vldr	s12, [pc, #80]	; 24008050 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
24008002:	eec6 6a07 	vdiv.f32	s13, s12, s14
24008006:	4b0d      	ldr	r3, [pc, #52]	; (2400803c <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
24008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400800a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400800e:	ee07 3a10 	vmov	s14, r3
24008012:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008016:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 24008044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
2400801a:	ee67 7a86 	vmul.f32	s15, s15, s12
2400801e:	ee77 7a27 	vadd.f32	s15, s14, s15
24008022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008026:	ee77 7a87 	vadd.f32	s15, s15, s14
2400802a:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
2400802e:	e7b1      	b.n	24007f94 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
24008030:	2300      	movs	r3, #0
24008032:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24008034:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24008036:	6083      	str	r3, [r0, #8]
}
24008038:	e7dc      	b.n	24007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
2400803a:	bf00      	nop
2400803c:	58024400 	.word	0x58024400
24008040:	4a742400 	.word	0x4a742400
24008044:	39000000 	.word	0x39000000
24008048:	03d09000 	.word	0x03d09000
2400804c:	4c742400 	.word	0x4c742400
24008050:	4b742400 	.word	0x4b742400

24008054 <HAL_RCCEx_GetPLL3ClockFreq>:
{
24008054:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008056:	4a77      	ldr	r2, [pc, #476]	; (24008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
24008058:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400805a:	6a94      	ldr	r4, [r2, #40]	; 0x28
2400805c:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008060:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008062:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008066:	6c53      	ldr	r3, [r2, #68]	; 0x44
24008068:	f3c3 03cc 	ubfx	r3, r3, #3, #13
2400806c:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
24008070:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
24008074:	f000 80d8 	beq.w	24008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
24008078:	f001 0103 	and.w	r1, r1, #3
2400807c:	ee07 3a90 	vmov	s15, r3
24008080:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
24008084:	2901      	cmp	r1, #1
24008086:	d065      	beq.n	24008154 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
24008088:	2902      	cmp	r1, #2
2400808a:	f000 80b0 	beq.w	240081ee <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
2400808e:	b1e1      	cbz	r1, 240080ca <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008090:	ee07 ea10 	vmov	s14, lr
24008094:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008098:	ed9f 6a67 	vldr	s12, [pc, #412]	; 24008238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
2400809c:	eec6 6a07 	vdiv.f32	s13, s12, s14
240080a0:	4b64      	ldr	r3, [pc, #400]	; (24008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
240080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240080a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240080a8:	ee07 3a10 	vmov	s14, r3
240080ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240080b0:	ed9f 6a62 	vldr	s12, [pc, #392]	; 2400823c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
240080b4:	ee67 7a86 	vmul.f32	s15, s15, s12
240080b8:	ee77 7a27 	vadd.f32	s15, s14, s15
240080bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240080c0:	ee77 7a87 	vadd.f32	s15, s15, s14
240080c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
240080c8:	e060      	b.n	2400818c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240080ca:	6813      	ldr	r3, [r2, #0]
240080cc:	f013 0f20 	tst.w	r3, #32
240080d0:	d023      	beq.n	2400811a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240080d2:	4611      	mov	r1, r2
240080d4:	6812      	ldr	r2, [r2, #0]
240080d6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
240080da:	4b59      	ldr	r3, [pc, #356]	; (24008240 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
240080dc:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240080de:	ee07 3a10 	vmov	s14, r3
240080e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240080e6:	ee06 ea90 	vmov	s13, lr
240080ea:	eeb8 6a66 	vcvt.f32.u32	s12, s13
240080ee:	eec7 6a06 	vdiv.f32	s13, s14, s12
240080f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
240080f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240080f8:	ee07 3a10 	vmov	s14, r3
240080fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008100:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 2400823c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
24008104:	ee67 7a86 	vmul.f32	s15, s15, s12
24008108:	ee77 7a27 	vadd.f32	s15, s14, s15
2400810c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008110:	ee77 7a87 	vadd.f32	s15, s15, s14
24008114:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008118:	e038      	b.n	2400818c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400811a:	ee07 ea10 	vmov	s14, lr
2400811e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008122:	ed9f 6a48 	vldr	s12, [pc, #288]	; 24008244 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
24008126:	eec6 6a07 	vdiv.f32	s13, s12, s14
2400812a:	4b42      	ldr	r3, [pc, #264]	; (24008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
2400812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400812e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008132:	ee07 3a10 	vmov	s14, r3
24008136:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400813a:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2400823c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
2400813e:	ee67 7a86 	vmul.f32	s15, s15, s12
24008142:	ee77 7a27 	vadd.f32	s15, s14, s15
24008146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400814a:	ee77 7a87 	vadd.f32	s15, s15, s14
2400814e:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008152:	e01b      	b.n	2400818c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008154:	ee07 ea10 	vmov	s14, lr
24008158:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400815c:	ed9f 6a36 	vldr	s12, [pc, #216]	; 24008238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
24008160:	eec6 6a07 	vdiv.f32	s13, s12, s14
24008164:	4b33      	ldr	r3, [pc, #204]	; (24008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
24008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24008168:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400816c:	ee07 3a10 	vmov	s14, r3
24008170:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008174:	ed9f 6a31 	vldr	s12, [pc, #196]	; 2400823c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
24008178:	ee67 7a86 	vmul.f32	s15, s15, s12
2400817c:	ee77 7a27 	vadd.f32	s15, s14, s15
24008180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008184:	ee77 7a87 	vadd.f32	s15, s15, s14
24008188:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400818c:	4a29      	ldr	r2, [pc, #164]	; (24008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
2400818e:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008190:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008194:	ee07 3a10 	vmov	s14, r3
24008198:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400819c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240081a0:	ee37 7a06 	vadd.f32	s14, s14, s12
240081a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
240081a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240081ac:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
240081b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
240081b2:	f3c3 4306 	ubfx	r3, r3, #16, #7
240081b6:	ee07 3a10 	vmov	s14, r3
240081ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240081be:	ee37 7a06 	vadd.f32	s14, s14, s12
240081c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
240081c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240081ca:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
240081ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
240081d0:	f3c3 6306 	ubfx	r3, r3, #24, #7
240081d4:	ee07 3a90 	vmov	s15, r3
240081d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240081dc:	ee77 7a86 	vadd.f32	s15, s15, s12
240081e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240081e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240081e8:	ed80 7a02 	vstr	s14, [r0, #8]
}
240081ec:	bd10      	pop	{r4, pc}
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240081ee:	ee07 ea10 	vmov	s14, lr
240081f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240081f6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 24008248 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
240081fa:	eec6 6a07 	vdiv.f32	s13, s12, s14
240081fe:	4b0d      	ldr	r3, [pc, #52]	; (24008234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
24008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24008202:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008206:	ee07 3a10 	vmov	s14, r3
2400820a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400820e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 2400823c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
24008212:	ee67 7a86 	vmul.f32	s15, s15, s12
24008216:	ee77 7a27 	vadd.f32	s15, s14, s15
2400821a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400821e:	ee77 7a87 	vadd.f32	s15, s15, s14
24008222:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
24008226:	e7b1      	b.n	2400818c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
24008228:	2300      	movs	r3, #0
2400822a:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2400822c:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2400822e:	6083      	str	r3, [r0, #8]
}
24008230:	e7dc      	b.n	240081ec <HAL_RCCEx_GetPLL3ClockFreq+0x198>
24008232:	bf00      	nop
24008234:	58024400 	.word	0x58024400
24008238:	4a742400 	.word	0x4a742400
2400823c:	39000000 	.word	0x39000000
24008240:	03d09000 	.word	0x03d09000
24008244:	4c742400 	.word	0x4c742400
24008248:	4b742400 	.word	0x4b742400

2400824c <HAL_RCCEx_GetPLL1ClockFreq>:
{
2400824c:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400824e:	4a77      	ldr	r2, [pc, #476]	; (2400842c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
24008250:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008252:	6a94      	ldr	r4, [r2, #40]	; 0x28
24008254:	f3c4 1e05 	ubfx	lr, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008258:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400825a:	f003 0c01 	and.w	ip, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400825e:	6b53      	ldr	r3, [r2, #52]	; 0x34
24008260:	f3c3 03cc 	ubfx	r3, r3, #3, #13
24008264:	fb0c f303 	mul.w	r3, ip, r3
  if (pll1m != 0U)
24008268:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
2400826c:	f000 80d8 	beq.w	24008420 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
24008270:	f001 0103 	and.w	r1, r1, #3
24008274:	ee07 3a90 	vmov	s15, r3
24008278:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
2400827c:	2901      	cmp	r1, #1
2400827e:	d065      	beq.n	2400834c <HAL_RCCEx_GetPLL1ClockFreq+0x100>
24008280:	2902      	cmp	r1, #2
24008282:	f000 80b0 	beq.w	240083e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
24008286:	b1e1      	cbz	r1, 240082c2 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008288:	ee07 ea10 	vmov	s14, lr
2400828c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008290:	ed9f 6a67 	vldr	s12, [pc, #412]	; 24008430 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
24008294:	eec6 6a07 	vdiv.f32	s13, s12, s14
24008298:	4b64      	ldr	r3, [pc, #400]	; (2400842c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
2400829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400829c:	f3c3 0308 	ubfx	r3, r3, #0, #9
240082a0:	ee07 3a10 	vmov	s14, r3
240082a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240082a8:	ed9f 6a62 	vldr	s12, [pc, #392]	; 24008434 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
240082ac:	ee67 7a86 	vmul.f32	s15, s15, s12
240082b0:	ee77 7a27 	vadd.f32	s15, s14, s15
240082b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240082b8:	ee77 7a87 	vadd.f32	s15, s15, s14
240082bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
240082c0:	e060      	b.n	24008384 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240082c2:	6813      	ldr	r3, [r2, #0]
240082c4:	f013 0f20 	tst.w	r3, #32
240082c8:	d023      	beq.n	24008312 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240082ca:	4611      	mov	r1, r2
240082cc:	6812      	ldr	r2, [r2, #0]
240082ce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
240082d2:	4b59      	ldr	r3, [pc, #356]	; (24008438 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
240082d4:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240082d6:	ee07 3a10 	vmov	s14, r3
240082da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240082de:	ee06 ea90 	vmov	s13, lr
240082e2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
240082e6:	eec7 6a06 	vdiv.f32	s13, s14, s12
240082ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
240082ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
240082f0:	ee07 3a10 	vmov	s14, r3
240082f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240082f8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 24008434 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
240082fc:	ee67 7a86 	vmul.f32	s15, s15, s12
24008300:	ee77 7a27 	vadd.f32	s15, s14, s15
24008304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008308:	ee77 7a87 	vadd.f32	s15, s15, s14
2400830c:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008310:	e038      	b.n	24008384 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008312:	ee07 ea10 	vmov	s14, lr
24008316:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400831a:	ed9f 6a45 	vldr	s12, [pc, #276]	; 24008430 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
2400831e:	eec6 6a07 	vdiv.f32	s13, s12, s14
24008322:	4b42      	ldr	r3, [pc, #264]	; (2400842c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
24008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400832a:	ee07 3a10 	vmov	s14, r3
2400832e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008332:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24008434 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
24008336:	ee67 7a86 	vmul.f32	s15, s15, s12
2400833a:	ee77 7a27 	vadd.f32	s15, s14, s15
2400833e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008342:	ee77 7a87 	vadd.f32	s15, s15, s14
24008346:	ee66 6aa7 	vmul.f32	s13, s13, s15
2400834a:	e01b      	b.n	24008384 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400834c:	ee07 ea10 	vmov	s14, lr
24008350:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008354:	ed9f 6a39 	vldr	s12, [pc, #228]	; 2400843c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
24008358:	eec6 6a07 	vdiv.f32	s13, s12, s14
2400835c:	4b33      	ldr	r3, [pc, #204]	; (2400842c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
2400835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008360:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008364:	ee07 3a10 	vmov	s14, r3
24008368:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400836c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 24008434 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
24008370:	ee67 7a86 	vmul.f32	s15, s15, s12
24008374:	ee77 7a27 	vadd.f32	s15, s14, s15
24008378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400837c:	ee77 7a87 	vadd.f32	s15, s15, s14
24008380:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008384:	4a29      	ldr	r2, [pc, #164]	; (2400842c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
24008386:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008388:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400838c:	ee07 3a10 	vmov	s14, r3
24008390:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008394:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008398:	ee37 7a06 	vadd.f32	s14, s14, s12
2400839c:	eec6 7a87 	vdiv.f32	s15, s13, s14
240083a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240083a4:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
240083a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
240083aa:	f3c3 4306 	ubfx	r3, r3, #16, #7
240083ae:	ee07 3a10 	vmov	s14, r3
240083b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240083b6:	ee37 7a06 	vadd.f32	s14, s14, s12
240083ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
240083be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240083c2:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
240083c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
240083c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
240083cc:	ee07 3a90 	vmov	s15, r3
240083d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240083d4:	ee77 7a86 	vadd.f32	s15, s15, s12
240083d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240083dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240083e0:	ed80 7a02 	vstr	s14, [r0, #8]
}
240083e4:	bd10      	pop	{r4, pc}
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240083e6:	ee07 ea10 	vmov	s14, lr
240083ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240083ee:	ed9f 6a14 	vldr	s12, [pc, #80]	; 24008440 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
240083f2:	eec6 6a07 	vdiv.f32	s13, s12, s14
240083f6:	4b0d      	ldr	r3, [pc, #52]	; (2400842c <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
240083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240083fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
240083fe:	ee07 3a10 	vmov	s14, r3
24008402:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24008406:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 24008434 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
2400840a:	ee67 7a86 	vmul.f32	s15, s15, s12
2400840e:	ee77 7a27 	vadd.f32	s15, s14, s15
24008412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24008416:	ee77 7a87 	vadd.f32	s15, s15, s14
2400841a:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
2400841e:	e7b1      	b.n	24008384 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
24008420:	2300      	movs	r3, #0
24008422:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24008424:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
24008426:	6083      	str	r3, [r0, #8]
}
24008428:	e7dc      	b.n	240083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
2400842a:	bf00      	nop
2400842c:	58024400 	.word	0x58024400
24008430:	4c742400 	.word	0x4c742400
24008434:	39000000 	.word	0x39000000
24008438:	03d09000 	.word	0x03d09000
2400843c:	4a742400 	.word	0x4a742400
24008440:	4b742400 	.word	0x4b742400

24008444 <HAL_RCCEx_GetPeriphCLKFreq>:
{
24008444:	b500      	push	{lr}
24008446:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24008448:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
2400844c:	430b      	orrs	r3, r1
2400844e:	d02e      	beq.n	240084ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24008450:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24008454:	430b      	orrs	r3, r1
24008456:	d07e      	beq.n	24008556 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24008458:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
2400845c:	430b      	orrs	r3, r1
2400845e:	f000 80d4 	beq.w	2400860a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24008462:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24008466:	430b      	orrs	r3, r1
24008468:	f000 812c 	beq.w	240086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400846c:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24008470:	430b      	orrs	r3, r1
24008472:	f000 818b 	beq.w	2400878c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24008476:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
2400847a:	430b      	orrs	r3, r1
2400847c:	f000 81e3 	beq.w	24008846 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24008480:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24008484:	430b      	orrs	r3, r1
24008486:	f000 822c 	beq.w	240088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2400848a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
2400848e:	430b      	orrs	r3, r1
24008490:	f000 826f 	beq.w	24008972 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24008494:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24008498:	430b      	orrs	r3, r1
2400849a:	f000 8290 	beq.w	240089be <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2400849e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
240084a2:	ea50 0301 	orrs.w	r3, r0, r1
240084a6:	f000 82d3 	beq.w	24008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
240084aa:	2000      	movs	r0, #0
240084ac:	e301      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
240084ae:	4b95      	ldr	r3, [pc, #596]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240084b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240084b2:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
240084b6:	2b04      	cmp	r3, #4
240084b8:	f200 82f2 	bhi.w	24008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
240084bc:	e8df f003 	tbb	[pc, r3]
240084c0:	031b1005 	.word	0x031b1005
240084c4:	26          	.byte	0x26
240084c5:	00          	.byte	0x00
240084c6:	4890      	ldr	r0, [pc, #576]	; (24008708 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
240084c8:	e2f3      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240084ca:	4b8e      	ldr	r3, [pc, #568]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240084cc:	6818      	ldr	r0, [r3, #0]
240084ce:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
240084d2:	f000 82ee 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240084d6:	a807      	add	r0, sp, #28
240084d8:	f7ff feb8 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240084dc:	9808      	ldr	r0, [sp, #32]
240084de:	e2e8      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240084e0:	4b88      	ldr	r3, [pc, #544]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240084e2:	6818      	ldr	r0, [r3, #0]
240084e4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240084e8:	f000 82e3 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240084ec:	a804      	add	r0, sp, #16
240084ee:	f7ff fcb5 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240084f2:	9804      	ldr	r0, [sp, #16]
240084f4:	e2dd      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240084f6:	4b83      	ldr	r3, [pc, #524]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240084f8:	6818      	ldr	r0, [r3, #0]
240084fa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240084fe:	f000 82d8 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24008502:	a801      	add	r0, sp, #4
24008504:	f7ff fda6 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24008508:	9801      	ldr	r0, [sp, #4]
2400850a:	e2d2      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400850c:	4a7d      	ldr	r2, [pc, #500]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2400850e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24008514:	6812      	ldr	r2, [r2, #0]
24008516:	f012 0f04 	tst.w	r2, #4
2400851a:	d007      	beq.n	2400852c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
2400851c:	b933      	cbnz	r3, 2400852c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400851e:	4b79      	ldr	r3, [pc, #484]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008520:	681b      	ldr	r3, [r3, #0]
24008522:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008526:	4879      	ldr	r0, [pc, #484]	; (2400870c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
24008528:	40d8      	lsrs	r0, r3
2400852a:	e2c2      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400852c:	4a75      	ldr	r2, [pc, #468]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2400852e:	6812      	ldr	r2, [r2, #0]
24008530:	f412 7f80 	tst.w	r2, #256	; 0x100
24008534:	d003      	beq.n	2400853e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
24008536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400853a:	f000 82b3 	beq.w	24008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400853e:	4a71      	ldr	r2, [pc, #452]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008540:	6812      	ldr	r2, [r2, #0]
24008542:	f412 3f00 	tst.w	r2, #131072	; 0x20000
24008546:	f000 82af 	beq.w	24008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
2400854a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400854e:	f000 82ad 	beq.w	24008aac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
24008552:	2000      	movs	r0, #0
24008554:	e2ad      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
24008556:	4b6b      	ldr	r3, [pc, #428]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400855a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
2400855e:	2b80      	cmp	r3, #128	; 0x80
24008560:	d033      	beq.n	240085ca <HAL_RCCEx_GetPeriphCLKFreq+0x186>
24008562:	d915      	bls.n	24008590 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
24008564:	2bc0      	cmp	r3, #192	; 0xc0
24008566:	f000 82a3 	beq.w	24008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
2400856a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400856e:	d11f      	bne.n	240085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24008570:	4a64      	ldr	r2, [pc, #400]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008572:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24008578:	6812      	ldr	r2, [r2, #0]
2400857a:	f012 0f04 	tst.w	r2, #4
2400857e:	d02f      	beq.n	240085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
24008580:	bb73      	cbnz	r3, 240085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008582:	4b60      	ldr	r3, [pc, #384]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008584:	681b      	ldr	r3, [r3, #0]
24008586:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400858a:	4860      	ldr	r0, [pc, #384]	; (2400870c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
2400858c:	40d8      	lsrs	r0, r3
2400858e:	e290      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
24008590:	b183      	cbz	r3, 240085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
24008592:	2b40      	cmp	r3, #64	; 0x40
24008594:	d10a      	bne.n	240085ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24008596:	4b5b      	ldr	r3, [pc, #364]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008598:	6818      	ldr	r0, [r3, #0]
2400859a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400859e:	f000 8288 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240085a2:	a804      	add	r0, sp, #16
240085a4:	f7ff fc5a 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240085a8:	9804      	ldr	r0, [sp, #16]
240085aa:	e282      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
240085ac:	2000      	movs	r0, #0
240085ae:	e280      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
240085b0:	2000      	movs	r0, #0
240085b2:	e27e      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240085b4:	4b53      	ldr	r3, [pc, #332]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240085b6:	6818      	ldr	r0, [r3, #0]
240085b8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
240085bc:	f000 8279 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240085c0:	a807      	add	r0, sp, #28
240085c2:	f7ff fe43 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240085c6:	9808      	ldr	r0, [sp, #32]
240085c8:	e273      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240085ca:	4b4e      	ldr	r3, [pc, #312]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240085cc:	6818      	ldr	r0, [r3, #0]
240085ce:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240085d2:	f000 826e 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240085d6:	a801      	add	r0, sp, #4
240085d8:	f7ff fd3c 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240085dc:	9801      	ldr	r0, [sp, #4]
240085de:	e268      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240085e0:	4a48      	ldr	r2, [pc, #288]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240085e2:	6812      	ldr	r2, [r2, #0]
240085e4:	f412 7f80 	tst.w	r2, #256	; 0x100
240085e8:	d003      	beq.n	240085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
240085ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240085ee:	f000 8263 	beq.w	24008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240085f2:	4a44      	ldr	r2, [pc, #272]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240085f4:	6812      	ldr	r2, [r2, #0]
240085f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
240085fa:	f000 825f 	beq.w	24008abc <HAL_RCCEx_GetPeriphCLKFreq+0x678>
240085fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008602:	f000 825d 	beq.w	24008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
24008606:	2000      	movs	r0, #0
24008608:	e253      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
2400860a:	4b3e      	ldr	r3, [pc, #248]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2400860c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400860e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
24008612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24008616:	d035      	beq.n	24008684 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
24008618:	d916      	bls.n	24008648 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
2400861a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2400861e:	f000 8251 	beq.w	24008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
24008622:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24008626:	d120      	bne.n	2400866a <HAL_RCCEx_GetPeriphCLKFreq+0x226>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24008628:	4a36      	ldr	r2, [pc, #216]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2400862a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400862c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24008630:	6812      	ldr	r2, [r2, #0]
24008632:	f012 0f04 	tst.w	r2, #4
24008636:	d030      	beq.n	2400869a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
24008638:	bb7b      	cbnz	r3, 2400869a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400863a:	4b32      	ldr	r3, [pc, #200]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2400863c:	681b      	ldr	r3, [r3, #0]
2400863e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008642:	4832      	ldr	r0, [pc, #200]	; (2400870c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
24008644:	40d8      	lsrs	r0, r3
24008646:	e234      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
24008648:	b18b      	cbz	r3, 2400866e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
2400864a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2400864e:	d10a      	bne.n	24008666 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24008650:	4b2c      	ldr	r3, [pc, #176]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008652:	6818      	ldr	r0, [r3, #0]
24008654:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24008658:	f000 822b 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400865c:	a804      	add	r0, sp, #16
2400865e:	f7ff fbfd 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24008662:	9804      	ldr	r0, [sp, #16]
24008664:	e225      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
24008666:	2000      	movs	r0, #0
24008668:	e223      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
2400866a:	2000      	movs	r0, #0
2400866c:	e221      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400866e:	4b25      	ldr	r3, [pc, #148]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008670:	6818      	ldr	r0, [r3, #0]
24008672:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24008676:	f000 821c 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2400867a:	a807      	add	r0, sp, #28
2400867c:	f7ff fde6 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24008680:	9808      	ldr	r0, [sp, #32]
24008682:	e216      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24008684:	4b1f      	ldr	r3, [pc, #124]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
24008686:	6818      	ldr	r0, [r3, #0]
24008688:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400868c:	f000 8211 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24008690:	a801      	add	r0, sp, #4
24008692:	f7ff fcdf 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24008696:	9801      	ldr	r0, [sp, #4]
24008698:	e20b      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400869a:	4a1a      	ldr	r2, [pc, #104]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2400869c:	6812      	ldr	r2, [r2, #0]
2400869e:	f412 7f80 	tst.w	r2, #256	; 0x100
240086a2:	d003      	beq.n	240086ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>
240086a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240086a8:	f000 820e 	beq.w	24008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240086ac:	4a15      	ldr	r2, [pc, #84]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240086ae:	6812      	ldr	r2, [r2, #0]
240086b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
240086b4:	f000 820a 	beq.w	24008acc <HAL_RCCEx_GetPeriphCLKFreq+0x688>
240086b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240086bc:	f000 8208 	beq.w	24008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
240086c0:	2000      	movs	r0, #0
240086c2:	e1f6      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
240086c4:	4b0f      	ldr	r3, [pc, #60]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240086c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240086c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
240086cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240086d0:	d03c      	beq.n	2400874c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
240086d2:	d91d      	bls.n	24008710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
240086d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240086d8:	f000 81fc 	beq.w	24008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
240086dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240086e0:	d127      	bne.n	24008732 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240086e2:	4a08      	ldr	r2, [pc, #32]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240086e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240086e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240086ea:	6812      	ldr	r2, [r2, #0]
240086ec:	f012 0f04 	tst.w	r2, #4
240086f0:	d037      	beq.n	24008762 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
240086f2:	2b00      	cmp	r3, #0
240086f4:	d135      	bne.n	24008762 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240086f6:	4b03      	ldr	r3, [pc, #12]	; (24008704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
240086f8:	681b      	ldr	r3, [r3, #0]
240086fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240086fe:	4803      	ldr	r0, [pc, #12]	; (2400870c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
24008700:	40d8      	lsrs	r0, r3
24008702:	e1d6      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
24008704:	58024400 	.word	0x58024400
24008708:	00bb8000 	.word	0x00bb8000
2400870c:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
24008710:	b18b      	cbz	r3, 24008736 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
24008712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24008716:	d10a      	bne.n	2400872e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24008718:	4b9a      	ldr	r3, [pc, #616]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400871a:	6818      	ldr	r0, [r3, #0]
2400871c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24008720:	f000 81c7 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24008724:	a804      	add	r0, sp, #16
24008726:	f7ff fb99 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400872a:	9804      	ldr	r0, [sp, #16]
2400872c:	e1c1      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
2400872e:	2000      	movs	r0, #0
24008730:	e1bf      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
24008732:	2000      	movs	r0, #0
24008734:	e1bd      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24008736:	4b93      	ldr	r3, [pc, #588]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008738:	6818      	ldr	r0, [r3, #0]
2400873a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400873e:	f000 81b8 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24008742:	a807      	add	r0, sp, #28
24008744:	f7ff fd82 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24008748:	9808      	ldr	r0, [sp, #32]
2400874a:	e1b2      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400874c:	4b8d      	ldr	r3, [pc, #564]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400874e:	6818      	ldr	r0, [r3, #0]
24008750:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24008754:	f000 81ad 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24008758:	a801      	add	r0, sp, #4
2400875a:	f7ff fc7b 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400875e:	9801      	ldr	r0, [sp, #4]
24008760:	e1a7      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24008762:	4a88      	ldr	r2, [pc, #544]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008764:	6812      	ldr	r2, [r2, #0]
24008766:	f412 7f80 	tst.w	r2, #256	; 0x100
2400876a:	d003      	beq.n	24008774 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
2400876c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008770:	f000 81b2 	beq.w	24008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24008774:	4a83      	ldr	r2, [pc, #524]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008776:	6812      	ldr	r2, [r2, #0]
24008778:	f412 3f00 	tst.w	r2, #131072	; 0x20000
2400877c:	f000 81ae 	beq.w	24008adc <HAL_RCCEx_GetPeriphCLKFreq+0x698>
24008780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008784:	f000 81ac 	beq.w	24008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
24008788:	2000      	movs	r0, #0
2400878a:	e192      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2400878c:	4b7d      	ldr	r3, [pc, #500]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400878e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008790:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24008794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24008798:	d035      	beq.n	24008806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
2400879a:	d916      	bls.n	240087ca <HAL_RCCEx_GetPeriphCLKFreq+0x386>
2400879c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240087a0:	f000 81a0 	beq.w	24008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
240087a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240087a8:	d120      	bne.n	240087ec <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240087aa:	4a76      	ldr	r2, [pc, #472]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240087ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240087ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240087b2:	6812      	ldr	r2, [r2, #0]
240087b4:	f012 0f04 	tst.w	r2, #4
240087b8:	d030      	beq.n	2400881c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
240087ba:	bb7b      	cbnz	r3, 2400881c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240087bc:	4b71      	ldr	r3, [pc, #452]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240087be:	681b      	ldr	r3, [r3, #0]
240087c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240087c4:	4870      	ldr	r0, [pc, #448]	; (24008988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
240087c6:	40d8      	lsrs	r0, r3
240087c8:	e173      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
240087ca:	b18b      	cbz	r3, 240087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
240087cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240087d0:	d10a      	bne.n	240087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240087d2:	4b6c      	ldr	r3, [pc, #432]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240087d4:	6818      	ldr	r0, [r3, #0]
240087d6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240087da:	f000 816a 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240087de:	a804      	add	r0, sp, #16
240087e0:	f7ff fb3c 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240087e4:	9804      	ldr	r0, [sp, #16]
240087e6:	e164      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
240087e8:	2000      	movs	r0, #0
240087ea:	e162      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
240087ec:	2000      	movs	r0, #0
240087ee:	e160      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240087f0:	4b64      	ldr	r3, [pc, #400]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240087f2:	6818      	ldr	r0, [r3, #0]
240087f4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
240087f8:	f000 815b 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240087fc:	a807      	add	r0, sp, #28
240087fe:	f7ff fd25 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24008802:	9808      	ldr	r0, [sp, #32]
24008804:	e155      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24008806:	4b5f      	ldr	r3, [pc, #380]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008808:	6818      	ldr	r0, [r3, #0]
2400880a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400880e:	f000 8150 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24008812:	a801      	add	r0, sp, #4
24008814:	f7ff fc1e 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24008818:	9801      	ldr	r0, [sp, #4]
2400881a:	e14a      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400881c:	4a59      	ldr	r2, [pc, #356]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400881e:	6812      	ldr	r2, [r2, #0]
24008820:	f412 7f80 	tst.w	r2, #256	; 0x100
24008824:	d003      	beq.n	2400882e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
24008826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400882a:	f000 815d 	beq.w	24008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400882e:	4a55      	ldr	r2, [pc, #340]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008830:	6812      	ldr	r2, [r2, #0]
24008832:	f412 3f00 	tst.w	r2, #131072	; 0x20000
24008836:	f000 8159 	beq.w	24008aec <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
2400883a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400883e:	f000 8157 	beq.w	24008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
24008842:	2000      	movs	r0, #0
24008844:	e135      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24008846:	4b4f      	ldr	r3, [pc, #316]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400884a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
2400884e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24008852:	d032      	beq.n	240088ba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
24008854:	d816      	bhi.n	24008884 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
24008856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400885a:	d023      	beq.n	240088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
2400885c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24008860:	d10a      	bne.n	24008878 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24008862:	4b48      	ldr	r3, [pc, #288]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008864:	6818      	ldr	r0, [r3, #0]
24008866:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400886a:	f000 8122 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400886e:	a801      	add	r0, sp, #4
24008870:	f7ff fbf0 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24008874:	9802      	ldr	r0, [sp, #8]
24008876:	e11c      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
24008878:	b913      	cbnz	r3, 24008880 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
2400887a:	f7fe fc79 	bl	24007170 <HAL_RCC_GetPCLK1Freq>
        break;
2400887e:	e118      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
24008880:	2000      	movs	r0, #0
24008882:	e116      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
24008884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24008888:	d023      	beq.n	240088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
2400888a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400888e:	d107      	bne.n	240088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24008890:	4b3c      	ldr	r3, [pc, #240]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008892:	6818      	ldr	r0, [r3, #0]
24008894:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24008898:	f000 810b 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
2400889c:	483b      	ldr	r0, [pc, #236]	; (2400898c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
2400889e:	e108      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
240088a0:	2000      	movs	r0, #0
240088a2:	e106      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240088a4:	4b37      	ldr	r3, [pc, #220]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240088a6:	6818      	ldr	r0, [r3, #0]
240088a8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240088ac:	f000 8101 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240088b0:	a804      	add	r0, sp, #16
240088b2:	f7ff fad3 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
240088b6:	9805      	ldr	r0, [sp, #20]
240088b8:	e0fb      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
240088ba:	4b32      	ldr	r3, [pc, #200]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240088bc:	6818      	ldr	r0, [r3, #0]
240088be:	f010 0004 	ands.w	r0, r0, #4
240088c2:	f000 80f6 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240088c6:	681b      	ldr	r3, [r3, #0]
240088c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240088cc:	482e      	ldr	r0, [pc, #184]	; (24008988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
240088ce:	40d8      	lsrs	r0, r3
240088d0:	e0ef      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
240088d2:	4b2c      	ldr	r3, [pc, #176]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240088d4:	6818      	ldr	r0, [r3, #0]
240088d6:	f410 7080 	ands.w	r0, r0, #256	; 0x100
240088da:	f000 80ea 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
240088de:	482c      	ldr	r0, [pc, #176]	; (24008990 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
240088e0:	e0e7      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
240088e2:	4b28      	ldr	r3, [pc, #160]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240088e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240088e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
240088ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240088ee:	d010      	beq.n	24008912 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
240088f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240088f4:	d018      	beq.n	24008928 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
240088f6:	b10b      	cbz	r3, 240088fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
240088f8:	2000      	movs	r0, #0
240088fa:	e0da      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240088fc:	4b21      	ldr	r3, [pc, #132]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
240088fe:	6818      	ldr	r0, [r3, #0]
24008900:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24008904:	f000 80d5 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24008908:	a804      	add	r0, sp, #16
2400890a:	f7ff faa7 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400890e:	9804      	ldr	r0, [sp, #16]
24008910:	e0cf      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24008912:	4b1c      	ldr	r3, [pc, #112]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008914:	6818      	ldr	r0, [r3, #0]
24008916:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400891a:	f000 80ca 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400891e:	a801      	add	r0, sp, #4
24008920:	f7ff fb98 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24008924:	9803      	ldr	r0, [sp, #12]
24008926:	e0c4      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24008928:	4a16      	ldr	r2, [pc, #88]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400892a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400892c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24008930:	6812      	ldr	r2, [r2, #0]
24008932:	f012 0f04 	tst.w	r2, #4
24008936:	d007      	beq.n	24008948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
24008938:	b933      	cbnz	r3, 24008948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400893a:	4b12      	ldr	r3, [pc, #72]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400893c:	681b      	ldr	r3, [r3, #0]
2400893e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008942:	4811      	ldr	r0, [pc, #68]	; (24008988 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
24008944:	40d8      	lsrs	r0, r3
24008946:	e0b4      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24008948:	4a0e      	ldr	r2, [pc, #56]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400894a:	6812      	ldr	r2, [r2, #0]
2400894c:	f412 7f80 	tst.w	r2, #256	; 0x100
24008950:	d003      	beq.n	2400895a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
24008952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008956:	f000 80cd 	beq.w	24008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400895a:	4a0a      	ldr	r2, [pc, #40]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
2400895c:	6812      	ldr	r2, [r2, #0]
2400895e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
24008962:	f000 80c9 	beq.w	24008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
24008966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400896a:	f000 80c7 	beq.w	24008afc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
2400896e:	2000      	movs	r0, #0
24008970:	e09f      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24008972:	4b04      	ldr	r3, [pc, #16]	; (24008984 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
24008974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
24008976:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
2400897a:	d00b      	beq.n	24008994 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
2400897c:	b9ab      	cbnz	r3, 240089aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
2400897e:	2000      	movs	r0, #0
24008980:	e097      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
24008982:	bf00      	nop
24008984:	58024400 	.word	0x58024400
24008988:	03d09000 	.word	0x03d09000
2400898c:	00f42400 	.word	0x00f42400
24008990:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24008994:	4b5a      	ldr	r3, [pc, #360]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008996:	6818      	ldr	r0, [r3, #0]
24008998:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400899c:	f000 8089 	beq.w	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240089a0:	a807      	add	r0, sp, #28
240089a2:	f7ff fc53 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240089a6:	9808      	ldr	r0, [sp, #32]
240089a8:	e083      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240089aa:	4b55      	ldr	r3, [pc, #340]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
240089ac:	6818      	ldr	r0, [r3, #0]
240089ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240089b2:	d07e      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240089b4:	a804      	add	r0, sp, #16
240089b6:	f7ff fa51 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
240089ba:	9806      	ldr	r0, [sp, #24]
240089bc:	e079      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
240089be:	4b50      	ldr	r3, [pc, #320]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
240089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240089c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
240089c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
240089ca:	d02f      	beq.n	24008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
240089cc:	d815      	bhi.n	240089fa <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
240089ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240089d2:	d021      	beq.n	24008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
240089d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240089d8:	d109      	bne.n	240089ee <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240089da:	4b49      	ldr	r3, [pc, #292]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
240089dc:	6818      	ldr	r0, [r3, #0]
240089de:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240089e2:	d066      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240089e4:	a801      	add	r0, sp, #4
240089e6:	f7ff fb35 	bl	24008054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
240089ea:	9802      	ldr	r0, [sp, #8]
240089ec:	e061      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
240089ee:	b913      	cbnz	r3, 240089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
240089f0:	f7ff fa22 	bl	24007e38 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
240089f4:	e05d      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
240089f6:	2000      	movs	r0, #0
240089f8:	e05b      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
240089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240089fe:	d020      	beq.n	24008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
24008a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24008a04:	d106      	bne.n	24008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24008a06:	4b3e      	ldr	r3, [pc, #248]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a08:	6818      	ldr	r0, [r3, #0]
24008a0a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24008a0e:	d050      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008a10:	483c      	ldr	r0, [pc, #240]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008a12:	e04e      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
24008a14:	2000      	movs	r0, #0
24008a16:	e04c      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24008a18:	4b39      	ldr	r3, [pc, #228]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a1a:	6818      	ldr	r0, [r3, #0]
24008a1c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24008a20:	d047      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24008a22:	a804      	add	r0, sp, #16
24008a24:	f7ff fa1a 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24008a28:	9805      	ldr	r0, [sp, #20]
24008a2a:	e042      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24008a2c:	4b34      	ldr	r3, [pc, #208]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a2e:	6818      	ldr	r0, [r3, #0]
24008a30:	f010 0004 	ands.w	r0, r0, #4
24008a34:	d03d      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008a36:	681b      	ldr	r3, [r3, #0]
24008a38:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24008a3c:	4832      	ldr	r0, [pc, #200]	; (24008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
24008a3e:	40d8      	lsrs	r0, r3
24008a40:	e037      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24008a42:	4b2f      	ldr	r3, [pc, #188]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a44:	6818      	ldr	r0, [r3, #0]
24008a46:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24008a4a:	d032      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
24008a4c:	482f      	ldr	r0, [pc, #188]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008a4e:	e030      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24008a50:	4b2b      	ldr	r3, [pc, #172]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24008a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008a5c:	d00c      	beq.n	24008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
24008a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008a62:	d013      	beq.n	24008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x648>
24008a64:	b10b      	cbz	r3, 24008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
24008a66:	2000      	movs	r0, #0
  return frequency;
24008a68:	e023      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24008a6a:	4b25      	ldr	r3, [pc, #148]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a6c:	6818      	ldr	r0, [r3, #0]
24008a6e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24008a72:	d01e      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008a74:	4823      	ldr	r0, [pc, #140]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008a76:	e01c      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24008a78:	4b21      	ldr	r3, [pc, #132]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a7a:	6818      	ldr	r0, [r3, #0]
24008a7c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24008a80:	d017      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24008a82:	a807      	add	r0, sp, #28
24008a84:	f7ff fbe2 	bl	2400824c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24008a88:	9808      	ldr	r0, [sp, #32]
24008a8a:	e012      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24008a8c:	4b1c      	ldr	r3, [pc, #112]	; (24008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
24008a8e:	6818      	ldr	r0, [r3, #0]
24008a90:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24008a94:	d00d      	beq.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24008a96:	a804      	add	r0, sp, #16
24008a98:	f7ff f9e0 	bl	24007e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24008a9c:	9805      	ldr	r0, [sp, #20]
24008a9e:	e008      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
24008aa0:	2000      	movs	r0, #0
24008aa2:	e006      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
24008aa4:	4819      	ldr	r0, [pc, #100]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008aa6:	e004      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
24008aa8:	2000      	movs	r0, #0
24008aaa:	e002      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008aac:	4815      	ldr	r0, [pc, #84]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008aae:	e000      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
24008ab0:	4817      	ldr	r0, [pc, #92]	; (24008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
24008ab2:	b00b      	add	sp, #44	; 0x2c
24008ab4:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
24008ab8:	4814      	ldr	r0, [pc, #80]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008aba:	e7fa      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
24008abc:	2000      	movs	r0, #0
24008abe:	e7f8      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008ac0:	4810      	ldr	r0, [pc, #64]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008ac2:	e7f6      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
24008ac4:	4812      	ldr	r0, [pc, #72]	; (24008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
24008ac6:	e7f4      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
24008ac8:	4810      	ldr	r0, [pc, #64]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008aca:	e7f2      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
24008acc:	2000      	movs	r0, #0
24008ace:	e7f0      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008ad0:	480c      	ldr	r0, [pc, #48]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008ad2:	e7ee      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
24008ad4:	480e      	ldr	r0, [pc, #56]	; (24008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
24008ad6:	e7ec      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
24008ad8:	480c      	ldr	r0, [pc, #48]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008ada:	e7ea      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
24008adc:	2000      	movs	r0, #0
24008ade:	e7e8      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008ae0:	4808      	ldr	r0, [pc, #32]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008ae2:	e7e6      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
24008ae4:	480a      	ldr	r0, [pc, #40]	; (24008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
24008ae6:	e7e4      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
24008ae8:	4808      	ldr	r0, [pc, #32]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008aea:	e7e2      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
24008aec:	2000      	movs	r0, #0
24008aee:	e7e0      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008af0:	4804      	ldr	r0, [pc, #16]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008af2:	e7de      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
24008af4:	4805      	ldr	r0, [pc, #20]	; (24008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
24008af6:	e7dc      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
24008af8:	2000      	movs	r0, #0
24008afa:	e7da      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
24008afc:	4801      	ldr	r0, [pc, #4]	; (24008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
24008afe:	e7d8      	b.n	24008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
24008b00:	58024400 	.word	0x58024400
24008b04:	00f42400 	.word	0x00f42400
24008b08:	03d09000 	.word	0x03d09000
24008b0c:	003d0900 	.word	0x003d0900
24008b10:	00bb8000 	.word	0x00bb8000

24008b14 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24008b14:	2800      	cmp	r0, #0
24008b16:	d03b      	beq.n	24008b90 <HAL_RNG_Init+0x7c>
{
24008b18:	b538      	push	{r3, r4, r5, lr}
24008b1a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
24008b1c:	7a43      	ldrb	r3, [r0, #9]
24008b1e:	b1b3      	cbz	r3, 24008b4e <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
24008b20:	2302      	movs	r3, #2
24008b22:	7263      	strb	r3, [r4, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24008b24:	6822      	ldr	r2, [r4, #0]
24008b26:	6813      	ldr	r3, [r2, #0]
24008b28:	f023 0320 	bic.w	r3, r3, #32
24008b2c:	6861      	ldr	r1, [r4, #4]
24008b2e:	430b      	orrs	r3, r1
24008b30:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
24008b32:	6822      	ldr	r2, [r4, #0]
24008b34:	6813      	ldr	r3, [r2, #0]
24008b36:	f043 0304 	orr.w	r3, r3, #4
24008b3a:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24008b3c:	6823      	ldr	r3, [r4, #0]
24008b3e:	685b      	ldr	r3, [r3, #4]
24008b40:	f013 0f40 	tst.w	r3, #64	; 0x40
24008b44:	d007      	beq.n	24008b56 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
24008b46:	2304      	movs	r3, #4
24008b48:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
24008b4a:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24008b4c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
24008b4e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
24008b50:	f7fa fa5c 	bl	2400300c <HAL_RNG_MspInit>
24008b54:	e7e4      	b.n	24008b20 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
24008b56:	f7fa ff2f 	bl	240039b8 <HAL_GetTick>
24008b5a:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24008b5c:	6823      	ldr	r3, [r4, #0]
24008b5e:	685b      	ldr	r3, [r3, #4]
24008b60:	f013 0f04 	tst.w	r3, #4
24008b64:	d00f      	beq.n	24008b86 <HAL_RNG_Init+0x72>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24008b66:	f7fa ff27 	bl	240039b8 <HAL_GetTick>
24008b6a:	1b40      	subs	r0, r0, r5
24008b6c:	2802      	cmp	r0, #2
24008b6e:	d9f5      	bls.n	24008b5c <HAL_RNG_Init+0x48>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24008b70:	6823      	ldr	r3, [r4, #0]
24008b72:	685b      	ldr	r3, [r3, #4]
24008b74:	f013 0f04 	tst.w	r3, #4
24008b78:	d0f0      	beq.n	24008b5c <HAL_RNG_Init+0x48>
        hrng->State = HAL_RNG_STATE_ERROR;
24008b7a:	2304      	movs	r3, #4
24008b7c:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24008b7e:	2302      	movs	r3, #2
24008b80:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
24008b82:	2001      	movs	r0, #1
24008b84:	e7e2      	b.n	24008b4c <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
24008b86:	2301      	movs	r3, #1
24008b88:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24008b8a:	2000      	movs	r0, #0
24008b8c:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
24008b8e:	e7dd      	b.n	24008b4c <HAL_RNG_Init+0x38>
    return HAL_ERROR;
24008b90:	2001      	movs	r0, #1
}
24008b92:	4770      	bx	lr

24008b94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
24008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
24008b96:	7a03      	ldrb	r3, [r0, #8]
24008b98:	2b01      	cmp	r3, #1
24008b9a:	d030      	beq.n	24008bfe <HAL_RNG_GenerateRandomNumber+0x6a>
24008b9c:	4604      	mov	r4, r0
24008b9e:	460e      	mov	r6, r1
24008ba0:	2301      	movs	r3, #1
24008ba2:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24008ba4:	7a45      	ldrb	r5, [r0, #9]
24008ba6:	b2ed      	uxtb	r5, r5
24008ba8:	429d      	cmp	r5, r3
24008baa:	d006      	beq.n	24008bba <HAL_RNG_GenerateRandomNumber+0x26>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24008bac:	2304      	movs	r3, #4
24008bae:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
24008bb0:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24008bb2:	2300      	movs	r3, #0
24008bb4:	7223      	strb	r3, [r4, #8]

  return status;
}
24008bb6:	4628      	mov	r0, r5
24008bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
24008bba:	2302      	movs	r3, #2
24008bbc:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24008bbe:	f7fa fefb 	bl	240039b8 <HAL_GetTick>
24008bc2:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24008bc4:	6823      	ldr	r3, [r4, #0]
24008bc6:	685a      	ldr	r2, [r3, #4]
24008bc8:	f012 0f01 	tst.w	r2, #1
24008bcc:	d110      	bne.n	24008bf0 <HAL_RNG_GenerateRandomNumber+0x5c>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24008bce:	f7fa fef3 	bl	240039b8 <HAL_GetTick>
24008bd2:	1bc0      	subs	r0, r0, r7
24008bd4:	2802      	cmp	r0, #2
24008bd6:	d9f5      	bls.n	24008bc4 <HAL_RNG_GenerateRandomNumber+0x30>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24008bd8:	6823      	ldr	r3, [r4, #0]
24008bda:	685b      	ldr	r3, [r3, #4]
24008bdc:	f013 0f01 	tst.w	r3, #1
24008be0:	d1f0      	bne.n	24008bc4 <HAL_RNG_GenerateRandomNumber+0x30>
          hrng->State = HAL_RNG_STATE_READY;
24008be2:	2301      	movs	r3, #1
24008be4:	7263      	strb	r3, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24008be6:	2302      	movs	r3, #2
24008be8:	60e3      	str	r3, [r4, #12]
          __HAL_UNLOCK(hrng);
24008bea:	2300      	movs	r3, #0
24008bec:	7223      	strb	r3, [r4, #8]
          return HAL_ERROR;
24008bee:	e7e2      	b.n	24008bb6 <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
24008bf0:	689b      	ldr	r3, [r3, #8]
24008bf2:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
24008bf4:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
24008bf6:	2301      	movs	r3, #1
24008bf8:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
24008bfa:	2500      	movs	r5, #0
24008bfc:	e7d9      	b.n	24008bb2 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
24008bfe:	2502      	movs	r5, #2
24008c00:	e7d9      	b.n	24008bb6 <HAL_RNG_GenerateRandomNumber+0x22>

24008c02 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
24008c02:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24008c04:	2000      	movs	r0, #0
24008c06:	f8cc 0044 	str.w	r0, [ip, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24008c0a:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24008c0e:	f8dc 0004 	ldr.w	r0, [ip, #4]
24008c12:	2802      	cmp	r0, #2
24008c14:	bf18      	it	ne
24008c16:	2800      	cmpne	r0, #0
24008c18:	d11f      	bne.n	24008c5a <SAI_InitI2S+0x58>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
24008c1a:	2000      	movs	r0, #0
24008c1c:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
24008c20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
24008c24:	f8cc 005c 	str.w	r0, [ip, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24008c28:	f64f 70ff 	movw	r0, #65535	; 0xffff
24008c2c:	f8cc 0074 	str.w	r0, [ip, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
24008c30:	2000      	movs	r0, #0
24008c32:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
24008c36:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
24008c3a:	f013 0f01 	tst.w	r3, #1
24008c3e:	d168      	bne.n	24008d12 <SAI_InitI2S+0x110>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
24008c40:	b979      	cbnz	r1, 24008c62 <SAI_InitI2S+0x60>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
24008c42:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
24008c46:	f44f 2080 	mov.w	r0, #262144	; 0x40000
24008c4a:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
24008c4e:	2a03      	cmp	r2, #3
24008c50:	d83e      	bhi.n	24008cd0 <SAI_InitI2S+0xce>
24008c52:	e8df f002 	tbb	[pc, r2]
24008c56:	3f0e      	.short	0x3f0e
24008c58:	2e1f      	.short	0x2e1f
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
24008c5a:	2001      	movs	r0, #1
24008c5c:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
24008c60:	e7de      	b.n	24008c20 <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
24008c62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
24008c66:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
24008c6a:	2000      	movs	r0, #0
24008c6c:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
24008c70:	e7ed      	b.n	24008c4e <SAI_InitI2S+0x4c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
24008c72:	2080      	movs	r0, #128	; 0x80
24008c74:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24008c78:	085b      	lsrs	r3, r3, #1
24008c7a:	0158      	lsls	r0, r3, #5
24008c7c:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24008c80:	011b      	lsls	r3, r3, #4
24008c82:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24008c86:	2340      	movs	r3, #64	; 0x40
24008c88:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008c8c:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24008c8e:	2902      	cmp	r1, #2
24008c90:	d041      	beq.n	24008d16 <SAI_InitI2S+0x114>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
24008c92:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_24;
24008c94:	20c0      	movs	r0, #192	; 0xc0
24008c96:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24008c9a:	085b      	lsrs	r3, r3, #1
24008c9c:	0198      	lsls	r0, r3, #6
24008c9e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24008ca2:	015b      	lsls	r3, r3, #5
24008ca4:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24008ca8:	2380      	movs	r3, #128	; 0x80
24008caa:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008cae:	2000      	movs	r0, #0
      break;
24008cb0:	e7ed      	b.n	24008c8e <SAI_InitI2S+0x8c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
24008cb2:	20e0      	movs	r0, #224	; 0xe0
24008cb4:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24008cb8:	085b      	lsrs	r3, r3, #1
24008cba:	0198      	lsls	r0, r3, #6
24008cbc:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24008cc0:	015b      	lsls	r3, r3, #5
24008cc2:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24008cc6:	2380      	movs	r3, #128	; 0x80
24008cc8:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008ccc:	2000      	movs	r0, #0
      break;
24008cce:	e7de      	b.n	24008c8e <SAI_InitI2S+0x8c>
  switch (datasize)
24008cd0:	2001      	movs	r0, #1
24008cd2:	e7dc      	b.n	24008c8e <SAI_InitI2S+0x8c>
{
24008cd4:	b410      	push	{r4}
      hsai->Init.DataSize = SAI_DATASIZE_16;
24008cd6:	2080      	movs	r0, #128	; 0x80
24008cd8:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24008cdc:	085b      	lsrs	r3, r3, #1
24008cde:	019c      	lsls	r4, r3, #6
24008ce0:	f8cc 4054 	str.w	r4, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24008ce4:	015b      	lsls	r3, r3, #5
24008ce6:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24008cea:	f8cc 006c 	str.w	r0, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008cee:	2000      	movs	r0, #0
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24008cf0:	2902      	cmp	r1, #2
24008cf2:	d002      	beq.n	24008cfa <SAI_InitI2S+0xf8>
}
24008cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
24008cf8:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
24008cfa:	2a01      	cmp	r2, #1
24008cfc:	d005      	beq.n	24008d0a <SAI_InitI2S+0x108>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
24008cfe:	2a02      	cmp	r2, #2
24008d00:	d1f8      	bne.n	24008cf4 <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 8;
24008d02:	2308      	movs	r3, #8
24008d04:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
24008d08:	e7f4      	b.n	24008cf4 <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 16;
24008d0a:	2310      	movs	r3, #16
24008d0c:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
24008d10:	e7f5      	b.n	24008cfe <SAI_InitI2S+0xfc>
    return HAL_ERROR;
24008d12:	2001      	movs	r0, #1
24008d14:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
24008d16:	2a01      	cmp	r2, #1
24008d18:	d005      	beq.n	24008d26 <SAI_InitI2S+0x124>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
24008d1a:	2a02      	cmp	r2, #2
24008d1c:	d1b9      	bne.n	24008c92 <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 8;
24008d1e:	2308      	movs	r3, #8
24008d20:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
24008d24:	e7b5      	b.n	24008c92 <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 16;
24008d26:	2310      	movs	r3, #16
24008d28:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
24008d2c:	e7f5      	b.n	24008d1a <SAI_InitI2S+0x118>

24008d2e <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
24008d2e:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24008d30:	2400      	movs	r4, #0
24008d32:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24008d34:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24008d36:	6844      	ldr	r4, [r0, #4]
24008d38:	2c02      	cmp	r4, #2
24008d3a:	bf18      	it	ne
24008d3c:	2c00      	cmpne	r4, #0
24008d3e:	d118      	bne.n	24008d72 <SAI_InitPCM+0x44>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
24008d40:	2401      	movs	r4, #1
24008d42:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
24008d44:	2400      	movs	r4, #0
24008d46:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24008d48:	f44f 3500 	mov.w	r5, #131072	; 0x20000
24008d4c:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24008d4e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
24008d52:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
24008d54:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
24008d56:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24008d58:	f64f 74ff 	movw	r4, #65535	; 0xffff
24008d5c:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
24008d5e:	2904      	cmp	r1, #4
24008d60:	d00a      	beq.n	24008d78 <SAI_InitPCM+0x4a>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
24008d62:	210d      	movs	r1, #13
24008d64:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
24008d66:	2a03      	cmp	r2, #3
24008d68:	d829      	bhi.n	24008dbe <SAI_InitPCM+0x90>
24008d6a:	e8df f002 	tbb	[pc, r2]
24008d6e:	1108      	.short	0x1108
24008d70:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
24008d72:	2400      	movs	r4, #0
24008d74:	6504      	str	r4, [r0, #80]	; 0x50
24008d76:	e7e5      	b.n	24008d44 <SAI_InitPCM+0x16>
      hsai->FrameInit.ActiveFrameLength = 1;
24008d78:	2101      	movs	r1, #1
24008d7a:	6581      	str	r1, [r0, #88]	; 0x58
24008d7c:	e7f3      	b.n	24008d66 <SAI_InitPCM+0x38>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
24008d7e:	2280      	movs	r2, #128	; 0x80
24008d80:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24008d82:	011b      	lsls	r3, r3, #4
24008d84:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24008d86:	2340      	movs	r3, #64	; 0x40
24008d88:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008d8a:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
24008d8c:	bc30      	pop	{r4, r5}
24008d8e:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
24008d90:	2280      	movs	r2, #128	; 0x80
24008d92:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24008d94:	015b      	lsls	r3, r3, #5
24008d96:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24008d98:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008d9a:	2000      	movs	r0, #0
      break;
24008d9c:	e7f6      	b.n	24008d8c <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_24;
24008d9e:	22c0      	movs	r2, #192	; 0xc0
24008da0:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24008da2:	015b      	lsls	r3, r3, #5
24008da4:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24008da6:	2380      	movs	r3, #128	; 0x80
24008da8:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008daa:	2000      	movs	r0, #0
      break;
24008dac:	e7ee      	b.n	24008d8c <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_32;
24008dae:	22e0      	movs	r2, #224	; 0xe0
24008db0:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24008db2:	015b      	lsls	r3, r3, #5
24008db4:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24008db6:	2380      	movs	r3, #128	; 0x80
24008db8:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
24008dba:	2000      	movs	r0, #0
      break;
24008dbc:	e7e6      	b.n	24008d8c <SAI_InitPCM+0x5e>
  switch (datasize)
24008dbe:	2001      	movs	r0, #1
24008dc0:	e7e4      	b.n	24008d8c <SAI_InitPCM+0x5e>

24008dc2 <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
24008dc2:	2901      	cmp	r1, #1
24008dc4:	d00a      	beq.n	24008ddc <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
24008dc6:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24008dc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
24008dca:	2a08      	cmp	r2, #8
24008dcc:	d008      	beq.n	24008de0 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24008dce:	6842      	ldr	r2, [r0, #4]
24008dd0:	3a02      	subs	r2, #2
24008dd2:	2a01      	cmp	r2, #1
24008dd4:	d90c      	bls.n	24008df0 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
24008dd6:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
24008dda:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
24008ddc:	2309      	movs	r3, #9
24008dde:	e7f3      	b.n	24008dc8 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24008de0:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24008de2:	2a01      	cmp	r2, #1
24008de4:	bf18      	it	ne
24008de6:	2a03      	cmpne	r2, #3
24008de8:	d1f1      	bne.n	24008dce <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
24008dea:	f043 0310 	orr.w	r3, r3, #16
24008dee:	e7ee      	b.n	24008dce <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24008df0:	f043 0060 	orr.w	r0, r3, #96	; 0x60
24008df4:	4770      	bx	lr
	...

24008df8 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24008df8:	4b0e      	ldr	r3, [pc, #56]	; (24008e34 <SAI_Disable+0x3c>)
24008dfa:	681b      	ldr	r3, [r3, #0]
24008dfc:	4a0e      	ldr	r2, [pc, #56]	; (24008e38 <SAI_Disable+0x40>)
24008dfe:	fba2 2303 	umull	r2, r3, r2, r3
24008e02:	0b1b      	lsrs	r3, r3, #12
24008e04:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24008e06:	6801      	ldr	r1, [r0, #0]
24008e08:	680a      	ldr	r2, [r1, #0]
24008e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24008e0e:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24008e10:	b13b      	cbz	r3, 24008e22 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
24008e12:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24008e14:	6802      	ldr	r2, [r0, #0]
24008e16:	6812      	ldr	r2, [r2, #0]
24008e18:	f412 3f80 	tst.w	r2, #65536	; 0x10000
24008e1c:	d1f8      	bne.n	24008e10 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
24008e1e:	2000      	movs	r0, #0

  return status;
}
24008e20:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24008e22:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
24008e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24008e2a:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
24008e2e:	2003      	movs	r0, #3
      break;
24008e30:	4770      	bx	lr
24008e32:	bf00      	nop
24008e34:	20000750 	.word	0x20000750
24008e38:	95cbec1b 	.word	0x95cbec1b

24008e3c <HAL_SAI_Init>:
{
24008e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
24008e40:	2800      	cmp	r0, #0
24008e42:	f000 81df 	beq.w	24009204 <HAL_SAI_Init+0x3c8>
24008e46:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24008e48:	f7fa fdd0 	bl	240039ec <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
24008e4c:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
24008e50:	2d01      	cmp	r5, #1
24008e52:	d025      	beq.n	24008ea0 <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24008e54:	6823      	ldr	r3, [r4, #0]
24008e56:	49ad      	ldr	r1, [pc, #692]	; (2400910c <HAL_SAI_Init+0x2d0>)
24008e58:	4aad      	ldr	r2, [pc, #692]	; (24009110 <HAL_SAI_Init+0x2d4>)
24008e5a:	4293      	cmp	r3, r2
24008e5c:	bf18      	it	ne
24008e5e:	428b      	cmpne	r3, r1
24008e60:	d02e      	beq.n	24008ec0 <HAL_SAI_Init+0x84>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24008e62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
24008e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
24008e6a:	4293      	cmp	r3, r2
24008e6c:	bf18      	it	ne
24008e6e:	428b      	cmpne	r3, r1
24008e70:	d043      	beq.n	24008efa <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24008e72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
24008e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
24008e7a:	4293      	cmp	r3, r2
24008e7c:	bf18      	it	ne
24008e7e:	428b      	cmpne	r3, r1
24008e80:	d03d      	beq.n	24008efe <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
24008e82:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
24008e86:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
24008e8a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24008e8e:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
24008e92:	4293      	cmp	r3, r2
24008e94:	bf18      	it	ne
24008e96:	428b      	cmpne	r3, r1
24008e98:	f040 81b6 	bne.w	24009208 <HAL_SAI_Init+0x3cc>
    SaiBaseAddress = SAI4;
24008e9c:	4e9d      	ldr	r6, [pc, #628]	; (24009114 <HAL_SAI_Init+0x2d8>)
24008e9e:	e010      	b.n	24008ec2 <HAL_SAI_Init+0x86>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
24008ea0:	6823      	ldr	r3, [r4, #0]
24008ea2:	499a      	ldr	r1, [pc, #616]	; (2400910c <HAL_SAI_Init+0x2d0>)
24008ea4:	4a9c      	ldr	r2, [pc, #624]	; (24009118 <HAL_SAI_Init+0x2dc>)
24008ea6:	428b      	cmp	r3, r1
24008ea8:	bf18      	it	ne
24008eaa:	4293      	cmpne	r3, r2
24008eac:	f040 8119 	bne.w	240090e2 <HAL_SAI_Init+0x2a6>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
24008eb0:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
24008eb2:	2b01      	cmp	r3, #1
24008eb4:	f040 8115 	bne.w	240090e2 <HAL_SAI_Init+0x2a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
24008eb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
24008eba:	2b00      	cmp	r3, #0
24008ebc:	d0ca      	beq.n	24008e54 <HAL_SAI_Init+0x18>
24008ebe:	e110      	b.n	240090e2 <HAL_SAI_Init+0x2a6>
    SaiBaseAddress = SAI1;
24008ec0:	4e96      	ldr	r6, [pc, #600]	; (2400911c <HAL_SAI_Init+0x2e0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24008ec2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
24008ec6:	b1e3      	cbz	r3, 24008f02 <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
24008ec8:	4620      	mov	r0, r4
24008eca:	f7ff ff95 	bl	24008df8 <SAI_Disable>
24008ece:	4605      	mov	r5, r0
24008ed0:	2800      	cmp	r0, #0
24008ed2:	f040 819b 	bne.w	2400920c <HAL_SAI_Init+0x3d0>
  hsai->State = HAL_SAI_STATE_BUSY;
24008ed6:	2302      	movs	r3, #2
24008ed8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24008edc:	68e3      	ldr	r3, [r4, #12]
24008ede:	2b01      	cmp	r3, #1
24008ee0:	d015      	beq.n	24008f0e <HAL_SAI_Init+0xd2>
24008ee2:	2b02      	cmp	r3, #2
24008ee4:	d115      	bne.n	24008f12 <HAL_SAI_Init+0xd6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
24008ee6:	2220      	movs	r2, #32
  switch (hsai->Init.Synchro)
24008ee8:	68a3      	ldr	r3, [r4, #8]
24008eea:	3b01      	subs	r3, #1
24008eec:	2b04      	cmp	r3, #4
24008eee:	d812      	bhi.n	24008f16 <HAL_SAI_Init+0xda>
24008ef0:	e8df f003 	tbb	[pc, r3]
24008ef4:	1b161325 	.word	0x1b161325
24008ef8:	20          	.byte	0x20
24008ef9:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
24008efa:	4e89      	ldr	r6, [pc, #548]	; (24009120 <HAL_SAI_Init+0x2e4>)
24008efc:	e7e1      	b.n	24008ec2 <HAL_SAI_Init+0x86>
    SaiBaseAddress = SAI3;
24008efe:	4e89      	ldr	r6, [pc, #548]	; (24009124 <HAL_SAI_Init+0x2e8>)
24008f00:	e7df      	b.n	24008ec2 <HAL_SAI_Init+0x86>
    hsai->Lock = HAL_UNLOCKED;
24008f02:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
24008f06:	4620      	mov	r0, r4
24008f08:	f7fa f8e4 	bl	240030d4 <HAL_SAI_MspInit>
24008f0c:	e7dc      	b.n	24008ec8 <HAL_SAI_Init+0x8c>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
24008f0e:	2210      	movs	r2, #16
24008f10:	e7ea      	b.n	24008ee8 <HAL_SAI_Init+0xac>
  switch (hsai->Init.SynchroExt)
24008f12:	2200      	movs	r2, #0
24008f14:	e7e8      	b.n	24008ee8 <HAL_SAI_Init+0xac>
  switch (hsai->Init.Synchro)
24008f16:	2700      	movs	r7, #0
24008f18:	e013      	b.n	24008f42 <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_1;
24008f1a:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24008f1e:	e010      	b.n	24008f42 <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
24008f20:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
24008f24:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24008f28:	e00b      	b.n	24008f42 <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24008f2a:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
24008f2e:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24008f32:	e006      	b.n	24008f42 <HAL_SAI_Init+0x106>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
24008f34:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
24008f38:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24008f3c:	e001      	b.n	24008f42 <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_0;
24008f3e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
24008f42:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24008f44:	6a23      	ldr	r3, [r4, #32]
24008f46:	2b00      	cmp	r3, #0
24008f48:	d047      	beq.n	24008fda <HAL_SAI_Init+0x19e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24008f4a:	6823      	ldr	r3, [r4, #0]
24008f4c:	496f      	ldr	r1, [pc, #444]	; (2400910c <HAL_SAI_Init+0x2d0>)
24008f4e:	4a70      	ldr	r2, [pc, #448]	; (24009110 <HAL_SAI_Init+0x2d4>)
24008f50:	4293      	cmp	r3, r2
24008f52:	bf18      	it	ne
24008f54:	428b      	cmpne	r3, r1
24008f56:	f000 80c7 	beq.w	240090e8 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
24008f5a:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24008f5c:	6823      	ldr	r3, [r4, #0]
24008f5e:	4972      	ldr	r1, [pc, #456]	; (24009128 <HAL_SAI_Init+0x2ec>)
24008f60:	4a72      	ldr	r2, [pc, #456]	; (2400912c <HAL_SAI_Init+0x2f0>)
24008f62:	4293      	cmp	r3, r2
24008f64:	bf18      	it	ne
24008f66:	428b      	cmpne	r3, r1
24008f68:	f000 80c4 	beq.w	240090f4 <HAL_SAI_Init+0x2b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24008f6c:	6823      	ldr	r3, [r4, #0]
24008f6e:	4970      	ldr	r1, [pc, #448]	; (24009130 <HAL_SAI_Init+0x2f4>)
24008f70:	4a70      	ldr	r2, [pc, #448]	; (24009134 <HAL_SAI_Init+0x2f8>)
24008f72:	4293      	cmp	r3, r2
24008f74:	bf18      	it	ne
24008f76:	428b      	cmpne	r3, r1
24008f78:	f000 80c2 	beq.w	24009100 <HAL_SAI_Init+0x2c4>
    if (hsai->Instance == SAI4_Block_A)
24008f7c:	6822      	ldr	r2, [r4, #0]
24008f7e:	4b66      	ldr	r3, [pc, #408]	; (24009118 <HAL_SAI_Init+0x2dc>)
24008f80:	429a      	cmp	r2, r3
24008f82:	f000 80e3 	beq.w	2400914c <HAL_SAI_Init+0x310>
    if (hsai->Instance == SAI4_Block_B)
24008f86:	6822      	ldr	r2, [r4, #0]
24008f88:	4b6b      	ldr	r3, [pc, #428]	; (24009138 <HAL_SAI_Init+0x2fc>)
24008f8a:	429a      	cmp	r2, r3
24008f8c:	f000 80e4 	beq.w	24009158 <HAL_SAI_Init+0x31c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
24008f90:	69a3      	ldr	r3, [r4, #24]
24008f92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24008f96:	f000 80e5 	beq.w	24009164 <HAL_SAI_Init+0x328>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24008f9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24008fa0:	f000 80f4 	beq.w	2400918c <HAL_SAI_Init+0x350>
24008fa4:	2201      	movs	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24008fa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24008faa:	0040      	lsls	r0, r0, #1
24008fac:	6a23      	ldr	r3, [r4, #32]
24008fae:	fb02 f303 	mul.w	r3, r2, r3
24008fb2:	021b      	lsls	r3, r3, #8
24008fb4:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
24008fb8:	4b60      	ldr	r3, [pc, #384]	; (2400913c <HAL_SAI_Init+0x300>)
24008fba:	fba3 2300 	umull	r2, r3, r3, r0
24008fbe:	08db      	lsrs	r3, r3, #3
24008fc0:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
24008fc2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
24008fc6:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
24008fca:	2808      	cmp	r0, #8
24008fcc:	d901      	bls.n	24008fd2 <HAL_SAI_Init+0x196>
      hsai->Init.Mckdiv += 1U;
24008fce:	3301      	adds	r3, #1
24008fd0:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24008fd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
24008fd4:	2b04      	cmp	r3, #4
24008fd6:	f000 80db 	beq.w	24009190 <HAL_SAI_Init+0x354>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24008fda:	6863      	ldr	r3, [r4, #4]
24008fdc:	2b02      	cmp	r3, #2
24008fde:	bf18      	it	ne
24008fe0:	2b00      	cmpne	r3, #0
24008fe2:	f040 80dc 	bne.w	2400919e <HAL_SAI_Init+0x362>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24008fe6:	6d23      	ldr	r3, [r4, #80]	; 0x50
24008fe8:	2b01      	cmp	r3, #1
24008fea:	f000 80d5 	beq.w	24009198 <HAL_SAI_Init+0x35c>
24008fee:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24008ff2:	f7fa fcfb 	bl	240039ec <HAL_GetREVID>
24008ff6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
24008ffa:	f0c0 80d9 	bcc.w	240091b0 <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24008ffe:	6822      	ldr	r2, [r4, #0]
24009000:	6811      	ldr	r1, [r2, #0]
24009002:	4b4f      	ldr	r3, [pc, #316]	; (24009140 <HAL_SAI_Init+0x304>)
24009004:	400b      	ands	r3, r1
24009006:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009008:	6821      	ldr	r1, [r4, #0]
2400900a:	680a      	ldr	r2, [r1, #0]
2400900c:	6863      	ldr	r3, [r4, #4]
2400900e:	6c60      	ldr	r0, [r4, #68]	; 0x44
24009010:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
24009012:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009014:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
24009016:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
24009018:	4303      	orrs	r3, r0
2400901a:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
2400901e:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
24009020:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
24009022:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
24009024:	6960      	ldr	r0, [r4, #20]
24009026:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
24009028:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2400902a:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2400902c:	6a60      	ldr	r0, [r4, #36]	; 0x24
2400902e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
24009032:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
24009034:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
24009036:	6920      	ldr	r0, [r4, #16]
24009038:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400903a:	4313      	orrs	r3, r2
2400903c:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2400903e:	6822      	ldr	r2, [r4, #0]
24009040:	6851      	ldr	r1, [r2, #4]
24009042:	4b40      	ldr	r3, [pc, #256]	; (24009144 <HAL_SAI_Init+0x308>)
24009044:	400b      	ands	r3, r1
24009046:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009048:	6821      	ldr	r1, [r4, #0]
2400904a:	684a      	ldr	r2, [r1, #4]
2400904c:	69e3      	ldr	r3, [r4, #28]
2400904e:	6b20      	ldr	r0, [r4, #48]	; 0x30
24009050:	4303      	orrs	r3, r0
24009052:	6b60      	ldr	r0, [r4, #52]	; 0x34
24009054:	4303      	orrs	r3, r0
24009056:	4313      	orrs	r3, r2
24009058:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2400905a:	6822      	ldr	r2, [r4, #0]
2400905c:	6891      	ldr	r1, [r2, #8]
2400905e:	4b3a      	ldr	r3, [pc, #232]	; (24009148 <HAL_SAI_Init+0x30c>)
24009060:	400b      	ands	r3, r1
24009062:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009064:	6820      	ldr	r0, [r4, #0]
24009066:	6882      	ldr	r2, [r0, #8]
24009068:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400906a:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
2400906c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400906e:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
24009070:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
24009072:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
24009074:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
24009076:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
24009078:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400907a:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
2400907c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009080:	4313      	orrs	r3, r2
24009082:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009084:	6822      	ldr	r2, [r4, #0]
24009086:	68d3      	ldr	r3, [r2, #12]
24009088:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
2400908c:	f023 030f 	bic.w	r3, r3, #15
24009090:	041b      	lsls	r3, r3, #16
24009092:	0c1b      	lsrs	r3, r3, #16
24009094:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009096:	6820      	ldr	r0, [r4, #0]
24009098:	68c2      	ldr	r2, [r0, #12]
2400909a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
2400909c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
2400909e:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240090a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240090a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240090a6:	6f21      	ldr	r1, [r4, #112]	; 0x70
240090a8:	3901      	subs	r1, #1
240090aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240090ae:	4313      	orrs	r3, r2
240090b0:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
240090b2:	6823      	ldr	r3, [r4, #0]
240090b4:	4915      	ldr	r1, [pc, #84]	; (2400910c <HAL_SAI_Init+0x2d0>)
240090b6:	4a18      	ldr	r2, [pc, #96]	; (24009118 <HAL_SAI_Init+0x2dc>)
240090b8:	4293      	cmp	r3, r2
240090ba:	bf18      	it	ne
240090bc:	428b      	cmpne	r3, r1
240090be:	d108      	bne.n	240090d2 <HAL_SAI_Init+0x296>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
240090c0:	6c73      	ldr	r3, [r6, #68]	; 0x44
240090c2:	f023 0301 	bic.w	r3, r3, #1
240090c6:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
240090c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
240090cc:	2b01      	cmp	r3, #1
240090ce:	f000 808e 	beq.w	240091ee <HAL_SAI_Init+0x3b2>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240090d2:	2300      	movs	r3, #0
240090d4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
240090d8:	2201      	movs	r2, #1
240090da:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
240090de:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
240090e2:	4628      	mov	r0, r5
240090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
240090e8:	f44f 7080 	mov.w	r0, #256	; 0x100
240090ec:	2100      	movs	r1, #0
240090ee:	f7ff f9a9 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
240090f2:	e733      	b.n	24008f5c <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
240090f4:	f44f 7000 	mov.w	r0, #512	; 0x200
240090f8:	2100      	movs	r1, #0
240090fa:	f7ff f9a3 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
240090fe:	e735      	b.n	24008f6c <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
24009100:	f44f 7000 	mov.w	r0, #512	; 0x200
24009104:	2100      	movs	r1, #0
24009106:	f7ff f99d 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
2400910a:	e737      	b.n	24008f7c <HAL_SAI_Init+0x140>
2400910c:	40015804 	.word	0x40015804
24009110:	40015824 	.word	0x40015824
24009114:	58005400 	.word	0x58005400
24009118:	58005404 	.word	0x58005404
2400911c:	40015800 	.word	0x40015800
24009120:	40015c00 	.word	0x40015c00
24009124:	40016000 	.word	0x40016000
24009128:	40015c04 	.word	0x40015c04
2400912c:	40015c24 	.word	0x40015c24
24009130:	40016004 	.word	0x40016004
24009134:	40016024 	.word	0x40016024
24009138:	58005424 	.word	0x58005424
2400913c:	cccccccd 	.word	0xcccccccd
24009140:	f005c010 	.word	0xf005c010
24009144:	ffff1ff0 	.word	0xffff1ff0
24009148:	fff88000 	.word	0xfff88000
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
2400914c:	f44f 6080 	mov.w	r0, #1024	; 0x400
24009150:	2100      	movs	r1, #0
24009152:	f7ff f977 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
24009156:	e716      	b.n	24008f86 <HAL_SAI_Init+0x14a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
24009158:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400915c:	2100      	movs	r1, #0
2400915e:	f7ff f971 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
24009162:	e715      	b.n	24008f90 <HAL_SAI_Init+0x154>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009164:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009166:	2b04      	cmp	r3, #4
24009168:	d00b      	beq.n	24009182 <HAL_SAI_Init+0x346>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2400916a:	2b08      	cmp	r3, #8
2400916c:	d00b      	beq.n	24009186 <HAL_SAI_Init+0x34a>
        tmpframelength = hsai->FrameInit.FrameLength;
2400916e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
24009170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24009174:	0040      	lsls	r0, r0, #1
24009176:	6a23      	ldr	r3, [r4, #32]
24009178:	fb02 f303 	mul.w	r3, r2, r3
2400917c:	fbb0 f0f3 	udiv	r0, r0, r3
24009180:	e71a      	b.n	24008fb8 <HAL_SAI_Init+0x17c>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
24009182:	2240      	movs	r2, #64	; 0x40
24009184:	e7f4      	b.n	24009170 <HAL_SAI_Init+0x334>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
24009186:	f44f 7280 	mov.w	r2, #256	; 0x100
2400918a:	e7f1      	b.n	24009170 <HAL_SAI_Init+0x334>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400918c:	2202      	movs	r2, #2
2400918e:	e70a      	b.n	24008fa6 <HAL_SAI_Init+0x16a>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24009190:	6a63      	ldr	r3, [r4, #36]	; 0x24
24009192:	085b      	lsrs	r3, r3, #1
24009194:	6263      	str	r3, [r4, #36]	; 0x24
24009196:	e720      	b.n	24008fda <HAL_SAI_Init+0x19e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009198:	f04f 0800 	mov.w	r8, #0
2400919c:	e729      	b.n	24008ff2 <HAL_SAI_Init+0x1b6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400919e:	6d23      	ldr	r3, [r4, #80]	; 0x50
240091a0:	2b01      	cmp	r3, #1
240091a2:	d002      	beq.n	240091aa <HAL_SAI_Init+0x36e>
240091a4:	f04f 0800 	mov.w	r8, #0
240091a8:	e723      	b.n	24008ff2 <HAL_SAI_Init+0x1b6>
240091aa:	f44f 7800 	mov.w	r8, #512	; 0x200
240091ae:	e720      	b.n	24008ff2 <HAL_SAI_Init+0x1b6>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240091b0:	6822      	ldr	r2, [r4, #0]
240091b2:	6811      	ldr	r1, [r2, #0]
240091b4:	4b16      	ldr	r3, [pc, #88]	; (24009210 <HAL_SAI_Init+0x3d4>)
240091b6:	400b      	ands	r3, r1
240091b8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240091ba:	6821      	ldr	r1, [r4, #0]
240091bc:	680a      	ldr	r2, [r1, #0]
240091be:	6863      	ldr	r3, [r4, #4]
240091c0:	6c60      	ldr	r0, [r4, #68]	; 0x44
240091c2:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
240091c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240091c6:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
240091c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
240091ca:	4303      	orrs	r3, r0
240091cc:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
240091d0:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
240091d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
240091d4:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
240091d6:	6967      	ldr	r7, [r4, #20]
240091d8:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240091da:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
240091dc:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240091de:	6a60      	ldr	r0, [r4, #36]	; 0x24
240091e0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
240091e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240091e6:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240091e8:	4313      	orrs	r3, r2
240091ea:	600b      	str	r3, [r1, #0]
240091ec:	e727      	b.n	2400903e <HAL_SAI_Init+0x202>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
240091ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
240091f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
240091f2:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
240091f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
240091f8:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
240091fa:	6c73      	ldr	r3, [r6, #68]	; 0x44
240091fc:	f043 0301 	orr.w	r3, r3, #1
24009200:	6473      	str	r3, [r6, #68]	; 0x44
24009202:	e766      	b.n	240090d2 <HAL_SAI_Init+0x296>
    return HAL_ERROR;
24009204:	2501      	movs	r5, #1
24009206:	e76c      	b.n	240090e2 <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
24009208:	2501      	movs	r5, #1
2400920a:	e76a      	b.n	240090e2 <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
2400920c:	2501      	movs	r5, #1
2400920e:	e768      	b.n	240090e2 <HAL_SAI_Init+0x2a6>
24009210:	f805c010 	.word	0xf805c010

24009214 <HAL_SAI_InitProtocol>:
{
24009214:	b510      	push	{r4, lr}
24009216:	4604      	mov	r4, r0
  switch (protocol)
24009218:	2902      	cmp	r1, #2
2400921a:	d906      	bls.n	2400922a <HAL_SAI_InitProtocol+0x16>
2400921c:	1ec8      	subs	r0, r1, #3
2400921e:	2801      	cmp	r0, #1
24009220:	d80b      	bhi.n	2400923a <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
24009222:	4620      	mov	r0, r4
24009224:	f7ff fd83 	bl	24008d2e <SAI_InitPCM>
      break;
24009228:	e001      	b.n	2400922e <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
2400922a:	f7ff fcea 	bl	24008c02 <SAI_InitI2S>
  if (status == HAL_OK)
2400922e:	b100      	cbz	r0, 24009232 <HAL_SAI_InitProtocol+0x1e>
}
24009230:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
24009232:	4620      	mov	r0, r4
24009234:	f7ff fe02 	bl	24008e3c <HAL_SAI_Init>
24009238:	e7fa      	b.n	24009230 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
2400923a:	2001      	movs	r0, #1
2400923c:	e7f8      	b.n	24009230 <HAL_SAI_InitProtocol+0x1c>
	...

24009240 <HAL_SAI_Transmit_DMA>:
{
24009240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24009244:	4604      	mov	r4, r0
24009246:	4688      	mov	r8, r1
24009248:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
2400924a:	f7fa fbb5 	bl	240039b8 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
2400924e:	2e00      	cmp	r6, #0
24009250:	bf18      	it	ne
24009252:	f1b8 0f00 	cmpne.w	r8, #0
24009256:	d066      	beq.n	24009326 <HAL_SAI_Transmit_DMA+0xe6>
24009258:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
2400925a:	f894 7091 	ldrb.w	r7, [r4, #145]	; 0x91
2400925e:	b2ff      	uxtb	r7, r7
24009260:	2f01      	cmp	r7, #1
24009262:	d164      	bne.n	2400932e <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
24009264:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
24009268:	2b01      	cmp	r3, #1
2400926a:	d062      	beq.n	24009332 <HAL_SAI_Transmit_DMA+0xf2>
2400926c:	2301      	movs	r3, #1
2400926e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
24009272:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
24009276:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
2400927a:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400927e:	2300      	movs	r3, #0
24009280:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
24009284:	2212      	movs	r2, #18
24009286:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400928a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
2400928e:	492a      	ldr	r1, [pc, #168]	; (24009338 <HAL_SAI_Transmit_DMA+0xf8>)
24009290:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24009292:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
24009296:	4929      	ldr	r1, [pc, #164]	; (2400933c <HAL_SAI_Transmit_DMA+0xfc>)
24009298:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400929a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
2400929e:	4928      	ldr	r1, [pc, #160]	; (24009340 <HAL_SAI_Transmit_DMA+0x100>)
240092a0:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
240092a2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
240092a6:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240092a8:	6822      	ldr	r2, [r4, #0]
240092aa:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
240092ae:	321c      	adds	r2, #28
240092b0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240092b2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
240092b6:	f7fb f83d 	bl	24004334 <HAL_DMA_Start_IT>
240092ba:	4606      	mov	r6, r0
240092bc:	bb10      	cbnz	r0, 24009304 <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
240092be:	2100      	movs	r1, #0
240092c0:	4620      	mov	r0, r4
240092c2:	f7ff fd7e 	bl	24008dc2 <SAI_InterruptFlag>
240092c6:	6822      	ldr	r2, [r4, #0]
240092c8:	6913      	ldr	r3, [r2, #16]
240092ca:	4303      	orrs	r3, r0
240092cc:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
240092ce:	6822      	ldr	r2, [r4, #0]
240092d0:	6813      	ldr	r3, [r2, #0]
240092d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240092d6:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
240092d8:	6823      	ldr	r3, [r4, #0]
240092da:	695a      	ldr	r2, [r3, #20]
240092dc:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
240092e0:	d114      	bne.n	2400930c <HAL_SAI_Transmit_DMA+0xcc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
240092e2:	f7fa fb69 	bl	240039b8 <HAL_GetTick>
240092e6:	1b43      	subs	r3, r0, r5
240092e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240092ec:	d9f4      	bls.n	240092d8 <HAL_SAI_Transmit_DMA+0x98>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240092ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
240092f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240092f6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
240092fa:	2300      	movs	r3, #0
240092fc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
24009300:	2703      	movs	r7, #3
24009302:	e011      	b.n	24009328 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
24009304:	2300      	movs	r3, #0
24009306:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
2400930a:	e00d      	b.n	24009328 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400930c:	681a      	ldr	r2, [r3, #0]
2400930e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
24009312:	d103      	bne.n	2400931c <HAL_SAI_Transmit_DMA+0xdc>
      __HAL_SAI_ENABLE(hsai);
24009314:	681a      	ldr	r2, [r3, #0]
24009316:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400931a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400931c:	2300      	movs	r3, #0
2400931e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
24009322:	4637      	mov	r7, r6
24009324:	e000      	b.n	24009328 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
24009326:	2701      	movs	r7, #1
}
24009328:	4638      	mov	r0, r7
2400932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
2400932e:	2702      	movs	r7, #2
24009330:	e7fa      	b.n	24009328 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
24009332:	2702      	movs	r7, #2
24009334:	e7f8      	b.n	24009328 <HAL_SAI_Transmit_DMA+0xe8>
24009336:	bf00      	nop
24009338:	24009447 	.word	0x24009447
2400933c:	2400940d 	.word	0x2400940d
24009340:	24009499 	.word	0x24009499

24009344 <HAL_SAI_Receive_DMA>:
{
24009344:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
24009346:	2a00      	cmp	r2, #0
24009348:	bf18      	it	ne
2400934a:	2900      	cmpne	r1, #0
2400934c:	d051      	beq.n	240093f2 <HAL_SAI_Receive_DMA+0xae>
2400934e:	4604      	mov	r4, r0
24009350:	4613      	mov	r3, r2
  if (hsai->State == HAL_SAI_STATE_READY)
24009352:	f894 5091 	ldrb.w	r5, [r4, #145]	; 0x91
24009356:	b2ed      	uxtb	r5, r5
24009358:	2d01      	cmp	r5, #1
2400935a:	d14d      	bne.n	240093f8 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
2400935c:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
24009360:	2a01      	cmp	r2, #1
24009362:	d04b      	beq.n	240093fc <HAL_SAI_Receive_DMA+0xb8>
24009364:	2201      	movs	r2, #1
24009366:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
2400936a:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
2400936c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
24009370:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009374:	2300      	movs	r3, #0
24009376:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
2400937a:	2222      	movs	r2, #34	; 0x22
2400937c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009380:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24009384:	491e      	ldr	r1, [pc, #120]	; (24009400 <HAL_SAI_Receive_DMA+0xbc>)
24009386:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24009388:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400938c:	491d      	ldr	r1, [pc, #116]	; (24009404 <HAL_SAI_Receive_DMA+0xc0>)
2400938e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
24009390:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24009394:	491c      	ldr	r1, [pc, #112]	; (24009408 <HAL_SAI_Receive_DMA+0xc4>)
24009396:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
24009398:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400939c:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400939e:	6821      	ldr	r1, [r4, #0]
240093a0:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
240093a4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
240093a6:	311c      	adds	r1, #28
240093a8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
240093ac:	f7fa ffc2 	bl	24004334 <HAL_DMA_Start_IT>
240093b0:	4606      	mov	r6, r0
240093b2:	b118      	cbz	r0, 240093bc <HAL_SAI_Receive_DMA+0x78>
      __HAL_UNLOCK(hsai);
240093b4:	2300      	movs	r3, #0
240093b6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
240093ba:	e01b      	b.n	240093f4 <HAL_SAI_Receive_DMA+0xb0>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
240093bc:	2100      	movs	r1, #0
240093be:	4620      	mov	r0, r4
240093c0:	f7ff fcff 	bl	24008dc2 <SAI_InterruptFlag>
240093c4:	6822      	ldr	r2, [r4, #0]
240093c6:	6913      	ldr	r3, [r2, #16]
240093c8:	4303      	orrs	r3, r0
240093ca:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
240093cc:	6822      	ldr	r2, [r4, #0]
240093ce:	6813      	ldr	r3, [r2, #0]
240093d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240093d4:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
240093d6:	6823      	ldr	r3, [r4, #0]
240093d8:	681a      	ldr	r2, [r3, #0]
240093da:	f412 3f80 	tst.w	r2, #65536	; 0x10000
240093de:	d103      	bne.n	240093e8 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
240093e0:	681a      	ldr	r2, [r3, #0]
240093e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240093e6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
240093e8:	2300      	movs	r3, #0
240093ea:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
240093ee:	4635      	mov	r5, r6
240093f0:	e000      	b.n	240093f4 <HAL_SAI_Receive_DMA+0xb0>
    return  HAL_ERROR;
240093f2:	2501      	movs	r5, #1
}
240093f4:	4628      	mov	r0, r5
240093f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
240093f8:	2502      	movs	r5, #2
240093fa:	e7fb      	b.n	240093f4 <HAL_SAI_Receive_DMA+0xb0>
    __HAL_LOCK(hsai);
240093fc:	2502      	movs	r5, #2
240093fe:	e7f9      	b.n	240093f4 <HAL_SAI_Receive_DMA+0xb0>
24009400:	2400948f 	.word	0x2400948f
24009404:	24009453 	.word	0x24009453
24009408:	24009499 	.word	0x24009499

2400940c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400940c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400940e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009410:	69c3      	ldr	r3, [r0, #28]
24009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009416:	d012      	beq.n	2400943e <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
24009418:	2100      	movs	r1, #0
2400941a:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400941e:	6822      	ldr	r2, [r4, #0]
24009420:	6813      	ldr	r3, [r2, #0]
24009422:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009426:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009428:	4620      	mov	r0, r4
2400942a:	f7ff fcca 	bl	24008dc2 <SAI_InterruptFlag>
2400942e:	6822      	ldr	r2, [r4, #0]
24009430:	6913      	ldr	r3, [r2, #16]
24009432:	ea23 0300 	bic.w	r3, r3, r0
24009436:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009438:	2301      	movs	r3, #1
2400943a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400943e:	4620      	mov	r0, r4
24009440:	f025 fd5a 	bl	2402eef8 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
24009444:	bd10      	pop	{r4, pc}

24009446 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009446:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24009448:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400944a:	f025 fd69 	bl	2402ef20 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400944e:	bd08      	pop	{r3, pc}

24009450 <HAL_SAI_RxCpltCallback>:
}
24009450:	4770      	bx	lr

24009452 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
24009452:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009454:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009456:	69c3      	ldr	r3, [r0, #28]
24009458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400945c:	d012      	beq.n	24009484 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400945e:	6822      	ldr	r2, [r4, #0]
24009460:	6813      	ldr	r3, [r2, #0]
24009462:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009466:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
24009468:	2100      	movs	r1, #0
2400946a:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400946e:	4620      	mov	r0, r4
24009470:	f7ff fca7 	bl	24008dc2 <SAI_InterruptFlag>
24009474:	6822      	ldr	r2, [r4, #0]
24009476:	6913      	ldr	r3, [r2, #16]
24009478:	ea23 0300 	bic.w	r3, r3, r0
2400947c:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400947e:	2301      	movs	r3, #1
24009480:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
24009484:	4620      	mov	r0, r4
24009486:	f7ff ffe3 	bl	24009450 <HAL_SAI_RxCpltCallback>
#endif
}
2400948a:	bd10      	pop	{r4, pc}

2400948c <HAL_SAI_RxHalfCpltCallback>:
}
2400948c:	4770      	bx	lr

2400948e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400948e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
24009490:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009492:	f7ff fffb 	bl	2400948c <HAL_SAI_RxHalfCpltCallback>
#endif
}
24009496:	bd08      	pop	{r3, pc}

24009498 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24009498:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400949a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400949c:	f7fb fd6d 	bl	24004f7a <HAL_DMA_GetError>
240094a0:	2802      	cmp	r0, #2
240094a2:	d100      	bne.n	240094a6 <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
240094a4:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240094a6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
240094aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240094ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240094b2:	6822      	ldr	r2, [r4, #0]
240094b4:	6813      	ldr	r3, [r2, #0]
240094b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
240094ba:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
240094bc:	4620      	mov	r0, r4
240094be:	f7ff fc9b 	bl	24008df8 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
240094c2:	2301      	movs	r3, #1
240094c4:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
240094c8:	2300      	movs	r3, #0
240094ca:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
240094ce:	4620      	mov	r0, r4
240094d0:	f025 fcfa 	bl	2402eec8 <__HAL_SAI_ErrorCallback_veneer>
}
240094d4:	e7e6      	b.n	240094a4 <SAI_DMAError+0xc>
	...

240094d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
240094d8:	b570      	push	{r4, r5, r6, lr}
240094da:	b082      	sub	sp, #8
240094dc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
240094de:	2300      	movs	r3, #0
240094e0:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
240094e2:	6800      	ldr	r0, [r0, #0]
240094e4:	f001 fd72 	bl	2400afcc <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
240094e8:	4605      	mov	r5, r0
240094ea:	b110      	cbz	r0, 240094f2 <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
240094ec:	4628      	mov	r0, r5
240094ee:	b002      	add	sp, #8
240094f0:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
240094f2:	6820      	ldr	r0, [r4, #0]
240094f4:	f002 f8a6 	bl	2400b644 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
240094f8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
240094fc:	d007      	beq.n	2400950e <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
240094fe:	2301      	movs	r3, #1
24009500:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
24009502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24009504:	2b01      	cmp	r3, #1
24009506:	d00b      	beq.n	24009520 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
24009508:	462e      	mov	r6, r5
2400950a:	4628      	mov	r0, r5
2400950c:	e014      	b.n	24009538 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400950e:	2300      	movs	r3, #0
24009510:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
24009512:	6820      	ldr	r0, [r4, #0]
24009514:	f001 fd5a 	bl	2400afcc <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
24009518:	2800      	cmp	r0, #0
2400951a:	d0f2      	beq.n	24009502 <SD_PowerON+0x2a>
      return errorstate;
2400951c:	4605      	mov	r5, r0
2400951e:	e7e5      	b.n	240094ec <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
24009520:	2100      	movs	r1, #0
24009522:	6820      	ldr	r0, [r4, #0]
24009524:	f001 fed9 	bl	2400b2da <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
24009528:	2800      	cmp	r0, #0
2400952a:	d0ed      	beq.n	24009508 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400952c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
24009530:	e7dc      	b.n	240094ec <SD_PowerON+0x14>
    count++;
24009532:	9b01      	ldr	r3, [sp, #4]
24009534:	3301      	adds	r3, #1
24009536:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
24009538:	9a01      	ldr	r2, [sp, #4]
2400953a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400953e:	429a      	cmp	r2, r3
24009540:	d813      	bhi.n	2400956a <SD_PowerON+0x92>
24009542:	b996      	cbnz	r6, 2400956a <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
24009544:	2100      	movs	r1, #0
24009546:	6820      	ldr	r0, [r4, #0]
24009548:	f001 fec7 	bl	2400b2da <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400954c:	b9d0      	cbnz	r0, 24009584 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400954e:	4912      	ldr	r1, [pc, #72]	; (24009598 <SD_PowerON+0xc0>)
24009550:	6820      	ldr	r0, [r4, #0]
24009552:	f001 ffc3 	bl	2400b4dc <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
24009556:	4606      	mov	r6, r0
24009558:	b9b0      	cbnz	r0, 24009588 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400955a:	2100      	movs	r1, #0
2400955c:	6820      	ldr	r0, [r4, #0]
2400955e:	f001 fd20 	bl	2400afa2 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
24009562:	0fc3      	lsrs	r3, r0, #31
24009564:	d0e5      	beq.n	24009532 <SD_PowerON+0x5a>
24009566:	461e      	mov	r6, r3
24009568:	e7e3      	b.n	24009532 <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400956a:	9a01      	ldr	r2, [sp, #4]
2400956c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
24009570:	429a      	cmp	r2, r3
24009572:	d80c      	bhi.n	2400958e <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
24009574:	2300      	movs	r3, #0
24009576:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
24009578:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
2400957c:	d00a      	beq.n	24009594 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400957e:	2301      	movs	r3, #1
24009580:	63a3      	str	r3, [r4, #56]	; 0x38
24009582:	e7b3      	b.n	240094ec <SD_PowerON+0x14>
      return errorstate;
24009584:	4605      	mov	r5, r0
24009586:	e7b1      	b.n	240094ec <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
24009588:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400958c:	e7ae      	b.n	240094ec <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400958e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
24009592:	e7ab      	b.n	240094ec <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
24009594:	461d      	mov	r5, r3
24009596:	e7a9      	b.n	240094ec <SD_PowerON+0x14>
24009598:	c1100000 	.word	0xc1100000

2400959c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
2400959c:	b5f0      	push	{r4, r5, r6, r7, lr}
2400959e:	b087      	sub	sp, #28
240095a0:	4605      	mov	r5, r0
240095a2:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
240095a4:	f7fa fa08 	bl	240039b8 <HAL_GetTick>
240095a8:	4607      	mov	r7, r0
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
240095aa:	2100      	movs	r1, #0
240095ac:	6828      	ldr	r0, [r5, #0]
240095ae:	f001 fcf8 	bl	2400afa2 <SDMMC_GetResponse>
240095b2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
240095b6:	d164      	bne.n	24009682 <SD_SendSDStatus+0xe6>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
240095b8:	2140      	movs	r1, #64	; 0x40
240095ba:	6828      	ldr	r0, [r5, #0]
240095bc:	f001 fdca 	bl	2400b154 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
240095c0:	4603      	mov	r3, r0
240095c2:	b110      	cbz	r0, 240095ca <SD_SendSDStatus+0x2e>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
240095c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
240095c6:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
240095c8:	e05d      	b.n	24009686 <SD_SendSDStatus+0xea>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240095ca:	6c69      	ldr	r1, [r5, #68]	; 0x44
240095cc:	0409      	lsls	r1, r1, #16
240095ce:	6828      	ldr	r0, [r5, #0]
240095d0:	f001 fe83 	bl	2400b2da <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
240095d4:	4603      	mov	r3, r0
240095d6:	b110      	cbz	r0, 240095de <SD_SendSDStatus+0x42>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
240095d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
240095da:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
240095dc:	e053      	b.n	24009686 <SD_SendSDStatus+0xea>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
240095de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
240095e2:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
240095e4:	2340      	movs	r3, #64	; 0x40
240095e6:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
240095e8:	2360      	movs	r3, #96	; 0x60
240095ea:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
240095ec:	2302      	movs	r3, #2
240095ee:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
240095f0:	2300      	movs	r3, #0
240095f2:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
240095f4:	2301      	movs	r3, #1
240095f6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
240095f8:	4669      	mov	r1, sp
240095fa:	6828      	ldr	r0, [r5, #0]
240095fc:	f001 fcd4 	bl	2400afa8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
24009600:	6828      	ldr	r0, [r5, #0]
24009602:	f001 fece 	bl	2400b3a2 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
24009606:	4603      	mov	r3, r0
24009608:	b180      	cbz	r0, 2400962c <SD_SendSDStatus+0x90>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400960a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
2400960c:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
2400960e:	e03a      	b.n	24009686 <SD_SendSDStatus+0xea>
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
    {
      for (count = 0U; count < 8U; count++)
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
24009610:	6828      	ldr	r0, [r5, #0]
24009612:	f001 fc9f 	bl	2400af54 <SDMMC_ReadFIFO>
24009616:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400961a:	3401      	adds	r4, #1
2400961c:	2c07      	cmp	r4, #7
2400961e:	d9f7      	bls.n	24009610 <SD_SendSDStatus+0x74>
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009620:	f7fa f9ca 	bl	240039b8 <HAL_GetTick>
24009624:	1bc0      	subs	r0, r0, r7
24009626:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400962a:	d02f      	beq.n	2400968c <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400962c:	682b      	ldr	r3, [r5, #0]
2400962e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
24009630:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
24009634:	d104      	bne.n	24009640 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24009638:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400963c:	d0f0      	beq.n	24009620 <SD_SendSDStatus+0x84>
2400963e:	e7ed      	b.n	2400961c <SD_SendSDStatus+0x80>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009642:	f012 0f08 	tst.w	r2, #8
24009646:	d124      	bne.n	24009692 <SD_SendSDStatus+0xf6>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400964a:	f012 0f02 	tst.w	r2, #2
2400964e:	d122      	bne.n	24009696 <SD_SendSDStatus+0xfa>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24009652:	f013 0f20 	tst.w	r3, #32
24009656:	d120      	bne.n	2400969a <SD_SendSDStatus+0xfe>
  else
  {
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
24009658:	6828      	ldr	r0, [r5, #0]
2400965a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400965c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
24009660:	d00c      	beq.n	2400967c <SD_SendSDStatus+0xe0>
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
24009662:	f001 fc77 	bl	2400af54 <SDMMC_ReadFIFO>
24009666:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400966a:	f7fa f9a5 	bl	240039b8 <HAL_GetTick>
2400966e:	1bc0      	subs	r0, r0, r7
24009670:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
24009674:	d1f0      	bne.n	24009658 <SD_SendSDStatus+0xbc>
    {
      return HAL_SD_ERROR_TIMEOUT;
24009676:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400967a:	e004      	b.n	24009686 <SD_SendSDStatus+0xea>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400967c:	4a08      	ldr	r2, [pc, #32]	; (240096a0 <SD_SendSDStatus+0x104>)
2400967e:	6382      	str	r2, [r0, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
24009680:	e001      	b.n	24009686 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
24009682:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
24009686:	4618      	mov	r0, r3
24009688:	b007      	add	sp, #28
2400968a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
2400968c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24009690:	e7f9      	b.n	24009686 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009692:	2308      	movs	r3, #8
24009694:	e7f7      	b.n	24009686 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009696:	2302      	movs	r3, #2
24009698:	e7f5      	b.n	24009686 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
2400969a:	2320      	movs	r3, #32
2400969c:	e7f3      	b.n	24009686 <SD_SendSDStatus+0xea>
2400969e:	bf00      	nop
240096a0:	18000f3a 	.word	0x18000f3a

240096a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
240096a4:	b5f0      	push	{r4, r5, r6, r7, lr}
240096a6:	b089      	sub	sp, #36	; 0x24
240096a8:	4604      	mov	r4, r0
240096aa:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
240096ac:	f7fa f984 	bl	240039b8 <HAL_GetTick>
240096b0:	4605      	mov	r5, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
240096b2:	2300      	movs	r3, #0
240096b4:	9300      	str	r3, [sp, #0]
240096b6:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
240096b8:	2108      	movs	r1, #8
240096ba:	6820      	ldr	r0, [r4, #0]
240096bc:	f001 fd4a 	bl	2400b154 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
240096c0:	4606      	mov	r6, r0
240096c2:	b110      	cbz	r0, 240096ca <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
240096c4:	4630      	mov	r0, r6
240096c6:	b009      	add	sp, #36	; 0x24
240096c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
240096ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
240096cc:	0409      	lsls	r1, r1, #16
240096ce:	6820      	ldr	r0, [r4, #0]
240096d0:	f001 fe03 	bl	2400b2da <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
240096d4:	4606      	mov	r6, r0
240096d6:	2800      	cmp	r0, #0
240096d8:	d1f4      	bne.n	240096c4 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
240096da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
240096de:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
240096e0:	2308      	movs	r3, #8
240096e2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
240096e4:	2330      	movs	r3, #48	; 0x30
240096e6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
240096e8:	2302      	movs	r3, #2
240096ea:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
240096ec:	2300      	movs	r3, #0
240096ee:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
240096f0:	2301      	movs	r3, #1
240096f2:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
240096f4:	a902      	add	r1, sp, #8
240096f6:	6820      	ldr	r0, [r4, #0]
240096f8:	f001 fc56 	bl	2400afa8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
240096fc:	6820      	ldr	r0, [r4, #0]
240096fe:	f001 fe1e 	bl	2400b33e <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
24009702:	4606      	mov	r6, r0
24009704:	b130      	cbz	r0, 24009714 <SD_FindSCR+0x70>
24009706:	e7dd      	b.n	240096c4 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009708:	f7fa f956 	bl	240039b8 <HAL_GetTick>
2400970c:	1b43      	subs	r3, r0, r5
2400970e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
24009712:	d046      	beq.n	240097a2 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009714:	6820      	ldr	r0, [r4, #0]
24009716:	6b42      	ldr	r2, [r0, #52]	; 0x34
24009718:	f240 532a 	movw	r3, #1322	; 0x52a
2400971c:	421a      	tst	r2, r3
2400971e:	d10e      	bne.n	2400973e <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009720:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009722:	f413 2f00 	tst.w	r3, #524288	; 0x80000
24009726:	d1ef      	bne.n	24009708 <SD_FindSCR+0x64>
24009728:	2e00      	cmp	r6, #0
2400972a:	d1ed      	bne.n	24009708 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400972c:	f001 fc12 	bl	2400af54 <SDMMC_ReadFIFO>
24009730:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009732:	6820      	ldr	r0, [r4, #0]
24009734:	f001 fc0e 	bl	2400af54 <SDMMC_ReadFIFO>
24009738:	9001      	str	r0, [sp, #4]
      index++;
2400973a:	3601      	adds	r6, #1
2400973c:	e7e4      	b.n	24009708 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400973e:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009740:	f013 0f08 	tst.w	r3, #8
24009744:	d124      	bne.n	24009790 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009746:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009748:	f013 0f02 	tst.w	r3, #2
2400974c:	d123      	bne.n	24009796 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400974e:	6b46      	ldr	r6, [r0, #52]	; 0x34
24009750:	f016 0620 	ands.w	r6, r6, #32
24009754:	d122      	bne.n	2400979c <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009756:	4b14      	ldr	r3, [pc, #80]	; (240097a8 <SD_FindSCR+0x104>)
24009758:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
2400975a:	9a01      	ldr	r2, [sp, #4]
2400975c:	0213      	lsls	r3, r2, #8
2400975e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
24009762:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
24009766:	0a11      	lsrs	r1, r2, #8
24009768:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
2400976c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
2400976e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
24009772:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
24009774:	9a00      	ldr	r2, [sp, #0]
24009776:	0213      	lsls	r3, r2, #8
24009778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
2400977c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
24009780:	0a11      	lsrs	r1, r2, #8
24009782:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
24009786:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
24009788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400978c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
2400978e:	e799      	b.n	240096c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009790:	2608      	movs	r6, #8
24009792:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009794:	e796      	b.n	240096c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009796:	2602      	movs	r6, #2
24009798:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400979a:	e793      	b.n	240096c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400979c:	2620      	movs	r6, #32
2400979e:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
240097a0:	e790      	b.n	240096c4 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
240097a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
240097a6:	e78d      	b.n	240096c4 <SD_FindSCR+0x20>
240097a8:	18000f3a 	.word	0x18000f3a

240097ac <SD_WideBus_Enable>:
{
240097ac:	b510      	push	{r4, lr}
240097ae:	b082      	sub	sp, #8
240097b0:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
240097b2:	2100      	movs	r1, #0
240097b4:	9100      	str	r1, [sp, #0]
240097b6:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
240097b8:	6800      	ldr	r0, [r0, #0]
240097ba:	f001 fbf2 	bl	2400afa2 <SDMMC_GetResponse>
240097be:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
240097c2:	d113      	bne.n	240097ec <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
240097c4:	4669      	mov	r1, sp
240097c6:	4620      	mov	r0, r4
240097c8:	f7ff ff6c 	bl	240096a4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
240097cc:	b980      	cbnz	r0, 240097f0 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
240097ce:	9b01      	ldr	r3, [sp, #4]
240097d0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
240097d4:	d00e      	beq.n	240097f4 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240097d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
240097d8:	0409      	lsls	r1, r1, #16
240097da:	6820      	ldr	r0, [r4, #0]
240097dc:	f001 fd7d 	bl	2400b2da <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
240097e0:	b930      	cbnz	r0, 240097f0 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
240097e2:	2102      	movs	r1, #2
240097e4:	6820      	ldr	r0, [r4, #0]
240097e6:	f001 fd91 	bl	2400b30c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
240097ea:	e001      	b.n	240097f0 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
240097ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
240097f0:	b002      	add	sp, #8
240097f2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
240097f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
240097f8:	e7fa      	b.n	240097f0 <SD_WideBus_Enable+0x44>

240097fa <SD_WideBus_Disable>:
{
240097fa:	b510      	push	{r4, lr}
240097fc:	b082      	sub	sp, #8
240097fe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
24009800:	2100      	movs	r1, #0
24009802:	9100      	str	r1, [sp, #0]
24009804:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009806:	6800      	ldr	r0, [r0, #0]
24009808:	f001 fbcb 	bl	2400afa2 <SDMMC_GetResponse>
2400980c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
24009810:	d113      	bne.n	2400983a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
24009812:	4669      	mov	r1, sp
24009814:	4620      	mov	r0, r4
24009816:	f7ff ff45 	bl	240096a4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400981a:	b980      	cbnz	r0, 2400983e <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400981c:	9b01      	ldr	r3, [sp, #4]
2400981e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
24009822:	d00e      	beq.n	24009842 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24009824:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009826:	0409      	lsls	r1, r1, #16
24009828:	6820      	ldr	r0, [r4, #0]
2400982a:	f001 fd56 	bl	2400b2da <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400982e:	b930      	cbnz	r0, 2400983e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
24009830:	2100      	movs	r1, #0
24009832:	6820      	ldr	r0, [r4, #0]
24009834:	f001 fd6a 	bl	2400b30c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
24009838:	e001      	b.n	2400983e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400983a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
2400983e:	b002      	add	sp, #8
24009840:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
24009842:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
24009846:	e7fa      	b.n	2400983e <SD_WideBus_Disable+0x44>

24009848 <SD_SendStatus>:
{
24009848:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
2400984a:	b181      	cbz	r1, 2400986e <SD_SendStatus+0x26>
2400984c:	4604      	mov	r4, r0
2400984e:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24009850:	6c41      	ldr	r1, [r0, #68]	; 0x44
24009852:	0409      	lsls	r1, r1, #16
24009854:	6800      	ldr	r0, [r0, #0]
24009856:	f001 fd8b 	bl	2400b370 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400985a:	4605      	mov	r5, r0
2400985c:	b108      	cbz	r0, 24009862 <SD_SendStatus+0x1a>
}
2400985e:	4628      	mov	r0, r5
24009860:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24009862:	2100      	movs	r1, #0
24009864:	6820      	ldr	r0, [r4, #0]
24009866:	f001 fb9c 	bl	2400afa2 <SDMMC_GetResponse>
2400986a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
2400986c:	e7f7      	b.n	2400985e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
2400986e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
24009872:	e7f4      	b.n	2400985e <SD_SendStatus+0x16>

24009874 <HAL_SD_ReadBlocks>:
{
24009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24009878:	b087      	sub	sp, #28
2400987a:	4605      	mov	r5, r0
2400987c:	460c      	mov	r4, r1
2400987e:	4616      	mov	r6, r2
24009880:	469a      	mov	sl, r3
24009882:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
24009886:	f7fa f897 	bl	240039b8 <HAL_GetTick>
  if (NULL == pData)
2400988a:	2c00      	cmp	r4, #0
2400988c:	d03a      	beq.n	24009904 <HAL_SD_ReadBlocks+0x90>
2400988e:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
24009890:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
24009894:	b2ff      	uxtb	r7, r7
24009896:	2f01      	cmp	r7, #1
24009898:	f040 80e0 	bne.w	24009a5c <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400989c:	2300      	movs	r3, #0
2400989e:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
240098a0:	eb06 030a 	add.w	r3, r6, sl
240098a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
240098a6:	4293      	cmp	r3, r2
240098a8:	d832      	bhi.n	24009910 <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
240098aa:	2303      	movs	r3, #3
240098ac:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
240098b0:	682b      	ldr	r3, [r5, #0]
240098b2:	2200      	movs	r2, #0
240098b4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
240098b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
240098b8:	2b01      	cmp	r3, #1
240098ba:	d000      	beq.n	240098be <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
240098bc:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
240098be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
240098c2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
240098c4:	ea4f 234a 	mov.w	r3, sl, lsl #9
240098c8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
240098ca:	2390      	movs	r3, #144	; 0x90
240098cc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
240098ce:	2302      	movs	r3, #2
240098d0:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
240098d2:	2300      	movs	r3, #0
240098d4:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
240098d6:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
240098d8:	4669      	mov	r1, sp
240098da:	6828      	ldr	r0, [r5, #0]
240098dc:	f001 fb64 	bl	2400afa8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
240098e0:	682a      	ldr	r2, [r5, #0]
240098e2:	68d3      	ldr	r3, [r2, #12]
240098e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240098e8:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
240098ea:	f1ba 0f01 	cmp.w	sl, #1
240098ee:	d914      	bls.n	2400991a <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
240098f0:	2302      	movs	r3, #2
240098f2:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
240098f4:	4631      	mov	r1, r6
240098f6:	6828      	ldr	r0, [r5, #0]
240098f8:	f001 fc5e 	bl	2400b1b8 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
240098fc:	b9a0      	cbnz	r0, 24009928 <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
240098fe:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009902:	e038      	b.n	24009976 <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24009904:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400990a:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
2400990c:	2701      	movs	r7, #1
2400990e:	e0aa      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
24009910:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24009916:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
24009918:	e0a5      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400991a:	2301      	movs	r3, #1
2400991c:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400991e:	4631      	mov	r1, r6
24009920:	6828      	ldr	r0, [r5, #0]
24009922:	f001 fc30 	bl	2400b186 <SDMMC_CmdReadSingleBlock>
24009926:	e7e9      	b.n	240098fc <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009928:	682b      	ldr	r3, [r5, #0]
2400992a:	4a51      	ldr	r2, [pc, #324]	; (24009a70 <HAL_SD_ReadBlocks+0x1fc>)
2400992c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
2400992e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009930:	4318      	orrs	r0, r3
24009932:	6368      	str	r0, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009934:	2301      	movs	r3, #1
24009936:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400993a:	2300      	movs	r3, #0
2400993c:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
2400993e:	e092      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
24009940:	6828      	ldr	r0, [r5, #0]
24009942:	f001 fb07 	bl	2400af54 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
24009946:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
24009948:	f3c0 2307 	ubfx	r3, r0, #8, #8
2400994c:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400994e:	f3c0 4307 	ubfx	r3, r0, #16, #8
24009952:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
24009954:	0e00      	lsrs	r0, r0, #24
24009956:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
24009958:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
2400995a:	3601      	adds	r6, #1
2400995c:	2e07      	cmp	r6, #7
2400995e:	d9ef      	bls.n	24009940 <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
24009960:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24009964:	f7fa f828 	bl	240039b8 <HAL_GetTick>
24009968:	eba0 0008 	sub.w	r0, r0, r8
2400996c:	4548      	cmp	r0, r9
2400996e:	d20f      	bcs.n	24009990 <HAL_SD_ReadBlocks+0x11c>
24009970:	f1b9 0f00 	cmp.w	r9, #0
24009974:	d00c      	beq.n	24009990 <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009976:	682b      	ldr	r3, [r5, #0]
24009978:	6b5e      	ldr	r6, [r3, #52]	; 0x34
2400997a:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
2400997e:	d115      	bne.n	240099ac <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
24009980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24009982:	f413 4f00 	tst.w	r3, #32768	; 0x8000
24009986:	d0ed      	beq.n	24009964 <HAL_SD_ReadBlocks+0xf0>
24009988:	f1bb 0f1f 	cmp.w	fp, #31
2400998c:	d9ea      	bls.n	24009964 <HAL_SD_ReadBlocks+0xf0>
2400998e:	e7e5      	b.n	2400995c <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009990:	682b      	ldr	r3, [r5, #0]
24009992:	4a37      	ldr	r2, [pc, #220]	; (24009a70 <HAL_SD_ReadBlocks+0x1fc>)
24009994:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
24009996:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400999c:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400999e:	2301      	movs	r3, #1
240099a0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
240099a4:	2300      	movs	r3, #0
240099a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
240099a8:	2703      	movs	r7, #3
240099aa:	e05c      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
240099ac:	68da      	ldr	r2, [r3, #12]
240099ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
240099b2:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
240099b4:	6828      	ldr	r0, [r5, #0]
240099b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
240099b8:	f413 7f80 	tst.w	r3, #256	; 0x100
240099bc:	d005      	beq.n	240099ca <HAL_SD_ReadBlocks+0x156>
240099be:	f1ba 0f01 	cmp.w	sl, #1
240099c2:	d902      	bls.n	240099ca <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
240099c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
240099c6:	2b03      	cmp	r3, #3
240099c8:	d118      	bne.n	240099fc <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
240099ca:	682b      	ldr	r3, [r5, #0]
240099cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240099ce:	f012 0f08 	tst.w	r2, #8
240099d2:	d124      	bne.n	24009a1e <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
240099d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240099d6:	f012 0f02 	tst.w	r2, #2
240099da:	d12c      	bne.n	24009a36 <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
240099dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240099de:	f012 0f20 	tst.w	r2, #32
240099e2:	d034      	beq.n	24009a4e <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240099e4:	4a22      	ldr	r2, [pc, #136]	; (24009a70 <HAL_SD_ReadBlocks+0x1fc>)
240099e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
240099e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
240099ea:	f043 0320 	orr.w	r3, r3, #32
240099ee:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
240099f0:	2301      	movs	r3, #1
240099f2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
240099f6:	2300      	movs	r3, #0
240099f8:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
240099fa:	e034      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
240099fc:	f001 fc28 	bl	2400b250 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
24009a00:	4603      	mov	r3, r0
24009a02:	2800      	cmp	r0, #0
24009a04:	d0e1      	beq.n	240099ca <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009a06:	682a      	ldr	r2, [r5, #0]
24009a08:	4919      	ldr	r1, [pc, #100]	; (24009a70 <HAL_SD_ReadBlocks+0x1fc>)
24009a0a:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
24009a0c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24009a0e:	4313      	orrs	r3, r2
24009a10:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
24009a12:	2301      	movs	r3, #1
24009a14:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
24009a18:	2300      	movs	r3, #0
24009a1a:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
24009a1c:	e023      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009a1e:	4a14      	ldr	r2, [pc, #80]	; (24009a70 <HAL_SD_ReadBlocks+0x1fc>)
24009a20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
24009a22:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009a24:	f043 0308 	orr.w	r3, r3, #8
24009a28:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009a2a:	2301      	movs	r3, #1
24009a2c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24009a30:	2300      	movs	r3, #0
24009a32:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
24009a34:	e017      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009a36:	4a0e      	ldr	r2, [pc, #56]	; (24009a70 <HAL_SD_ReadBlocks+0x1fc>)
24009a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
24009a3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009a3c:	f043 0302 	orr.w	r3, r3, #2
24009a40:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009a42:	2301      	movs	r3, #1
24009a44:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24009a48:	2300      	movs	r3, #0
24009a4a:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
24009a4c:	e00b      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009a4e:	4a09      	ldr	r2, [pc, #36]	; (24009a74 <HAL_SD_ReadBlocks+0x200>)
24009a50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
24009a52:	2301      	movs	r3, #1
24009a54:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
24009a58:	2700      	movs	r7, #0
24009a5a:	e004      	b.n	24009a66 <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24009a5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24009a62:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
24009a64:	2701      	movs	r7, #1
}
24009a66:	4638      	mov	r0, r7
24009a68:	b007      	add	sp, #28
24009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24009a6e:	bf00      	nop
24009a70:	1fe00fff 	.word	0x1fe00fff
24009a74:	18000f3a 	.word	0x18000f3a

24009a78 <HAL_SD_WriteBlocks>:
{
24009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24009a7c:	b08b      	sub	sp, #44	; 0x2c
24009a7e:	4605      	mov	r5, r0
24009a80:	460c      	mov	r4, r1
24009a82:	4616      	mov	r6, r2
24009a84:	469a      	mov	sl, r3
24009a86:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
24009a8a:	f7f9 ff95 	bl	240039b8 <HAL_GetTick>
  if (NULL == pData)
24009a8e:	2c00      	cmp	r4, #0
24009a90:	d03b      	beq.n	24009b0a <HAL_SD_WriteBlocks+0x92>
24009a92:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
24009a94:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
24009a98:	b2ff      	uxtb	r7, r7
24009a9a:	2f01      	cmp	r7, #1
24009a9c:	f040 80e9 	bne.w	24009c72 <HAL_SD_WriteBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009aa0:	2300      	movs	r3, #0
24009aa2:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009aa4:	eb06 030a 	add.w	r3, r6, sl
24009aa8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
24009aaa:	4293      	cmp	r3, r2
24009aac:	d833      	bhi.n	24009b16 <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
24009aae:	2303      	movs	r3, #3
24009ab0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
24009ab4:	682b      	ldr	r3, [r5, #0]
24009ab6:	2200      	movs	r2, #0
24009ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009aba:	6bab      	ldr	r3, [r5, #56]	; 0x38
24009abc:	2b01      	cmp	r3, #1
24009abe:	d000      	beq.n	24009ac2 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
24009ac0:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
24009ac6:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
24009ac8:	ea4f 234a 	mov.w	r3, sl, lsl #9
24009acc:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
24009ace:	2390      	movs	r3, #144	; 0x90
24009ad0:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
24009ad2:	2300      	movs	r3, #0
24009ad4:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24009ad6:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
24009ad8:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009ada:	a904      	add	r1, sp, #16
24009adc:	6828      	ldr	r0, [r5, #0]
24009ade:	f001 fa63 	bl	2400afa8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24009ae2:	682a      	ldr	r2, [r5, #0]
24009ae4:	68d3      	ldr	r3, [r2, #12]
24009ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009aea:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
24009aec:	f1ba 0f01 	cmp.w	sl, #1
24009af0:	d916      	bls.n	24009b20 <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
24009af2:	2320      	movs	r3, #32
24009af4:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
24009af6:	4631      	mov	r1, r6
24009af8:	6828      	ldr	r0, [r5, #0]
24009afa:	f001 fb8f 	bl	2400b21c <SDMMC_CmdWriteMultiBlock>
24009afe:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
24009b00:	9b01      	ldr	r3, [sp, #4]
24009b02:	b9ab      	cbnz	r3, 24009b30 <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
24009b04:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
24009b08:	e040      	b.n	24009b8c <HAL_SD_WriteBlocks+0x114>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24009b0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
24009b10:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
24009b12:	2701      	movs	r7, #1
24009b14:	e0b2      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
24009b16:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24009b1c:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
24009b1e:	e0ad      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
24009b20:	2310      	movs	r3, #16
24009b22:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
24009b24:	4631      	mov	r1, r6
24009b26:	6828      	ldr	r0, [r5, #0]
24009b28:	f001 fb5f 	bl	2400b1ea <SDMMC_CmdWriteSingleBlock>
24009b2c:	9001      	str	r0, [sp, #4]
24009b2e:	e7e7      	b.n	24009b00 <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009b30:	682b      	ldr	r3, [r5, #0]
24009b32:	4a54      	ldr	r2, [pc, #336]	; (24009c84 <HAL_SD_WriteBlocks+0x20c>)
24009b34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
24009b36:	6b68      	ldr	r0, [r5, #52]	; 0x34
24009b38:	9b01      	ldr	r3, [sp, #4]
24009b3a:	4318      	orrs	r0, r3
24009b3c:	6368      	str	r0, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009b3e:	2301      	movs	r3, #1
24009b40:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24009b44:	2300      	movs	r3, #0
24009b46:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
24009b48:	e098      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
          data = (uint32_t)(*tempbuff);
24009b4a:	7823      	ldrb	r3, [r4, #0]
24009b4c:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
24009b4e:	7862      	ldrb	r2, [r4, #1]
24009b50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
24009b54:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
24009b56:	78a2      	ldrb	r2, [r4, #2]
24009b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
24009b5c:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
24009b5e:	78e2      	ldrb	r2, [r4, #3]
24009b60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24009b64:	9303      	str	r3, [sp, #12]
          tempbuff++;
24009b66:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
24009b68:	a903      	add	r1, sp, #12
24009b6a:	6828      	ldr	r0, [r5, #0]
24009b6c:	f001 f9f5 	bl	2400af5a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
24009b70:	3601      	adds	r6, #1
24009b72:	2e07      	cmp	r6, #7
24009b74:	d9e9      	bls.n	24009b4a <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
24009b76:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24009b7a:	f7f9 ff1d 	bl	240039b8 <HAL_GetTick>
24009b7e:	eba0 0008 	sub.w	r0, r0, r8
24009b82:	4548      	cmp	r0, r9
24009b84:	d20f      	bcs.n	24009ba6 <HAL_SD_WriteBlocks+0x12e>
24009b86:	f1b9 0f00 	cmp.w	r9, #0
24009b8a:	d00c      	beq.n	24009ba6 <HAL_SD_WriteBlocks+0x12e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
24009b8c:	682b      	ldr	r3, [r5, #0]
24009b8e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
24009b90:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
24009b94:	d115      	bne.n	24009bc2 <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
24009b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24009b98:	f413 4f80 	tst.w	r3, #16384	; 0x4000
24009b9c:	d0ed      	beq.n	24009b7a <HAL_SD_WriteBlocks+0x102>
24009b9e:	f1bb 0f1f 	cmp.w	fp, #31
24009ba2:	d9ea      	bls.n	24009b7a <HAL_SD_WriteBlocks+0x102>
24009ba4:	e7e5      	b.n	24009b72 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009ba6:	682b      	ldr	r3, [r5, #0]
24009ba8:	4a36      	ldr	r2, [pc, #216]	; (24009c84 <HAL_SD_WriteBlocks+0x20c>)
24009baa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
24009bac:	6b68      	ldr	r0, [r5, #52]	; 0x34
24009bae:	9b01      	ldr	r3, [sp, #4]
24009bb0:	4318      	orrs	r0, r3
24009bb2:	6368      	str	r0, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
24009bb4:	2301      	movs	r3, #1
24009bb6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
24009bba:	2300      	movs	r3, #0
24009bbc:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
24009bbe:	2703      	movs	r7, #3
24009bc0:	e05c      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
24009bc2:	68da      	ldr	r2, [r3, #12]
24009bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
24009bc8:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
24009bca:	6828      	ldr	r0, [r5, #0]
24009bcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009bce:	f413 7f80 	tst.w	r3, #256	; 0x100
24009bd2:	d005      	beq.n	24009be0 <HAL_SD_WriteBlocks+0x168>
24009bd4:	f1ba 0f01 	cmp.w	sl, #1
24009bd8:	d902      	bls.n	24009be0 <HAL_SD_WriteBlocks+0x168>
      if (hsd->SdCard.CardType != CARD_SECURED)
24009bda:	6bab      	ldr	r3, [r5, #56]	; 0x38
24009bdc:	2b03      	cmp	r3, #3
24009bde:	d118      	bne.n	24009c12 <HAL_SD_WriteBlocks+0x19a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009be0:	682b      	ldr	r3, [r5, #0]
24009be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009be4:	f012 0f08 	tst.w	r2, #8
24009be8:	d124      	bne.n	24009c34 <HAL_SD_WriteBlocks+0x1bc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009bec:	f012 0f02 	tst.w	r2, #2
24009bf0:	d12c      	bne.n	24009c4c <HAL_SD_WriteBlocks+0x1d4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
24009bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009bf4:	f012 0f10 	tst.w	r2, #16
24009bf8:	d034      	beq.n	24009c64 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009bfa:	4a22      	ldr	r2, [pc, #136]	; (24009c84 <HAL_SD_WriteBlocks+0x20c>)
24009bfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
24009bfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009c00:	f043 0310 	orr.w	r3, r3, #16
24009c04:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009c06:	2301      	movs	r3, #1
24009c08:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24009c0c:	2300      	movs	r3, #0
24009c0e:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
24009c10:	e034      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
24009c12:	f001 fb1d 	bl	2400b250 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
24009c16:	4603      	mov	r3, r0
24009c18:	2800      	cmp	r0, #0
24009c1a:	d0e1      	beq.n	24009be0 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009c1c:	682a      	ldr	r2, [r5, #0]
24009c1e:	4919      	ldr	r1, [pc, #100]	; (24009c84 <HAL_SD_WriteBlocks+0x20c>)
24009c20:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
24009c22:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24009c24:	4313      	orrs	r3, r2
24009c26:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
24009c28:	2301      	movs	r3, #1
24009c2a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
24009c2e:	2300      	movs	r3, #0
24009c30:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
24009c32:	e023      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009c34:	4a13      	ldr	r2, [pc, #76]	; (24009c84 <HAL_SD_WriteBlocks+0x20c>)
24009c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
24009c38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009c3a:	f043 0308 	orr.w	r3, r3, #8
24009c3e:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009c40:	2301      	movs	r3, #1
24009c42:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24009c46:	2300      	movs	r3, #0
24009c48:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
24009c4a:	e017      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009c4c:	4a0d      	ldr	r2, [pc, #52]	; (24009c84 <HAL_SD_WriteBlocks+0x20c>)
24009c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
24009c50:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009c52:	f043 0302 	orr.w	r3, r3, #2
24009c56:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24009c58:	2301      	movs	r3, #1
24009c5a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24009c5e:	2300      	movs	r3, #0
24009c60:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
24009c62:	e00b      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009c64:	4a08      	ldr	r2, [pc, #32]	; (24009c88 <HAL_SD_WriteBlocks+0x210>)
24009c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
24009c68:	2301      	movs	r3, #1
24009c6a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
24009c6e:	2700      	movs	r7, #0
24009c70:	e004      	b.n	24009c7c <HAL_SD_WriteBlocks+0x204>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24009c72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
24009c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24009c78:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
24009c7a:	2701      	movs	r7, #1
}
24009c7c:	4638      	mov	r0, r7
24009c7e:	b00b      	add	sp, #44	; 0x2c
24009c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24009c84:	1fe00fff 	.word	0x1fe00fff
24009c88:	18000f3a 	.word	0x18000f3a

24009c8c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
24009c8c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
24009c8e:	0f9b      	lsrs	r3, r3, #30
24009c90:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
24009c92:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
24009c94:	f3c3 6383 	ubfx	r3, r3, #26, #4
24009c98:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
24009c9a:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
24009c9e:	f003 0303 	and.w	r3, r3, #3
24009ca2:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
24009ca4:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
24009ca8:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
24009caa:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
24009cae:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
24009cb0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
24009cb4:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
24009cb6:	6e03      	ldr	r3, [r0, #96]	; 0x60
24009cb8:	0d1b      	lsrs	r3, r3, #20
24009cba:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
24009cbc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
24009cc0:	f003 030f 	and.w	r3, r3, #15
24009cc4:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
24009cc6:	6e03      	ldr	r3, [r0, #96]	; 0x60
24009cc8:	f3c3 33c0 	ubfx	r3, r3, #15, #1
24009ccc:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
24009cce:	6e03      	ldr	r3, [r0, #96]	; 0x60
24009cd0:	f3c3 3380 	ubfx	r3, r3, #14, #1
24009cd4:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
24009cd6:	6e03      	ldr	r3, [r0, #96]	; 0x60
24009cd8:	f3c3 3340 	ubfx	r3, r3, #13, #1
24009cdc:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
24009cde:	6e03      	ldr	r3, [r0, #96]	; 0x60
24009ce0:	f3c3 3300 	ubfx	r3, r3, #12, #1
24009ce4:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
24009ce6:	2300      	movs	r3, #0
24009ce8:	734b      	strb	r3, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
24009cea:	6b83      	ldr	r3, [r0, #56]	; 0x38
24009cec:	2b00      	cmp	r3, #0
24009cee:	f040 8086 	bne.w	24009dfe <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
24009cf2:	6e02      	ldr	r2, [r0, #96]	; 0x60
24009cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
24009cf8:	ea03 0382 	and.w	r3, r3, r2, lsl #2
24009cfc:	6e42      	ldr	r2, [r0, #100]	; 0x64
24009cfe:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
24009d02:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
24009d04:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d06:	f3c3 63c2 	ubfx	r3, r3, #27, #3
24009d0a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
24009d0c:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
24009d10:	f003 0307 	and.w	r3, r3, #7
24009d14:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
24009d16:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d18:	f3c3 5342 	ubfx	r3, r3, #21, #3
24009d1c:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
24009d1e:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d20:	f3c3 4382 	ubfx	r3, r3, #18, #3
24009d24:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
24009d26:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d28:	f3c3 33c2 	ubfx	r3, r3, #15, #3
24009d2c:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
24009d2e:	690b      	ldr	r3, [r1, #16]
24009d30:	3301      	adds	r3, #1
24009d32:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
24009d34:	7e0a      	ldrb	r2, [r1, #24]
24009d36:	f002 0207 	and.w	r2, r2, #7
24009d3a:	3202      	adds	r2, #2
24009d3c:	4093      	lsls	r3, r2
24009d3e:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
24009d40:	7a0a      	ldrb	r2, [r1, #8]
24009d42:	f002 0c0f 	and.w	ip, r2, #15
24009d46:	2201      	movs	r2, #1
24009d48:	fa02 f20c 	lsl.w	r2, r2, ip
24009d4c:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
24009d4e:	0a52      	lsrs	r2, r2, #9
24009d50:	fb02 f303 	mul.w	r3, r2, r3
24009d54:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
24009d56:	f44f 7300 	mov.w	r3, #512	; 0x200
24009d5a:	6543      	str	r3, [r0, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
24009d5c:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d5e:	f3c3 3380 	ubfx	r3, r3, #14, #1
24009d62:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
24009d64:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d66:	f3c3 13c6 	ubfx	r3, r3, #7, #7
24009d6a:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
24009d6c:	6e43      	ldr	r3, [r0, #100]	; 0x64
24009d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009d72:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
24009d74:	6e83      	ldr	r3, [r0, #104]	; 0x68
24009d76:	0fdb      	lsrs	r3, r3, #31
24009d78:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
24009d7a:	6e83      	ldr	r3, [r0, #104]	; 0x68
24009d7c:	f3c3 7341 	ubfx	r3, r3, #29, #2
24009d80:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
24009d82:	6e83      	ldr	r3, [r0, #104]	; 0x68
24009d84:	f3c3 6382 	ubfx	r3, r3, #26, #3
24009d88:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
24009d8a:	6e83      	ldr	r3, [r0, #104]	; 0x68
24009d8c:	f3c3 5383 	ubfx	r3, r3, #22, #4
24009d90:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
24009d92:	6e83      	ldr	r3, [r0, #104]	; 0x68
24009d94:	f3c3 5340 	ubfx	r3, r3, #21, #1
24009d98:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
24009d9c:	2300      	movs	r3, #0
24009d9e:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
24009da2:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
24009da6:	f002 0201 	and.w	r2, r2, #1
24009daa:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
24009dae:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009db0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
24009db4:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
24009db8:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009dba:	f3c2 3280 	ubfx	r2, r2, #14, #1
24009dbe:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
24009dc2:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009dc4:	f3c2 3240 	ubfx	r2, r2, #13, #1
24009dc8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
24009dcc:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009dce:	f3c2 3200 	ubfx	r2, r2, #12, #1
24009dd2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
24009dd6:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009dd8:	f3c2 2281 	ubfx	r2, r2, #10, #2
24009ddc:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
24009de0:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009de2:	f3c2 2201 	ubfx	r2, r2, #8, #2
24009de6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
24009dea:	6e82      	ldr	r2, [r0, #104]	; 0x68
24009dec:	f3c2 0246 	ubfx	r2, r2, #1, #7
24009df0:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
24009df4:	2201      	movs	r2, #1
24009df6:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
24009dfa:	4618      	mov	r0, r3
}
24009dfc:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
24009dfe:	2b01      	cmp	r3, #1
24009e00:	d111      	bne.n	24009e26 <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
24009e02:	6e03      	ldr	r3, [r0, #96]	; 0x60
24009e04:	041b      	lsls	r3, r3, #16
24009e06:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
24009e0a:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
24009e0e:	4313      	orrs	r3, r2
24009e10:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
24009e12:	690b      	ldr	r3, [r1, #16]
24009e14:	3301      	adds	r3, #1
24009e16:	029b      	lsls	r3, r3, #10
24009e18:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
24009e1a:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
24009e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
24009e20:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
24009e22:	6543      	str	r3, [r0, #84]	; 0x54
24009e24:	e79a      	b.n	24009d5c <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009e26:	6803      	ldr	r3, [r0, #0]
24009e28:	4a05      	ldr	r2, [pc, #20]	; (24009e40 <HAL_SD_GetCardCSD+0x1b4>)
24009e2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
24009e2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24009e32:	6343      	str	r3, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009e34:	2301      	movs	r3, #1
24009e36:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return HAL_ERROR;
24009e3a:	4618      	mov	r0, r3
24009e3c:	4770      	bx	lr
24009e3e:	bf00      	nop
24009e40:	1fe00fff 	.word	0x1fe00fff

24009e44 <SD_InitCard>:
{
24009e44:	b530      	push	{r4, r5, lr}
24009e46:	b08d      	sub	sp, #52	; 0x34
24009e48:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
24009e4a:	2300      	movs	r3, #0
24009e4c:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
24009e50:	f7f9 fdb2 	bl	240039b8 <HAL_GetTick>
24009e54:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
24009e56:	6820      	ldr	r0, [r4, #0]
24009e58:	f001 f88a 	bl	2400af70 <SDMMC_GetPowerState>
24009e5c:	2800      	cmp	r0, #0
24009e5e:	d067      	beq.n	24009f30 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
24009e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24009e62:	2b03      	cmp	r3, #3
24009e64:	d117      	bne.n	24009e96 <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
24009e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24009e68:	2b03      	cmp	r3, #3
24009e6a:	d02f      	beq.n	24009ecc <SD_InitCard+0x88>
    while (sd_rca == 0U)
24009e6c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
24009e70:	bb63      	cbnz	r3, 24009ecc <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
24009e72:	f10d 0102 	add.w	r1, sp, #2
24009e76:	6820      	ldr	r0, [r4, #0]
24009e78:	f001 fb98 	bl	2400b5ac <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
24009e7c:	4603      	mov	r3, r0
24009e7e:	2800      	cmp	r0, #0
24009e80:	d158      	bne.n	24009f34 <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
24009e82:	f7f9 fd99 	bl	240039b8 <HAL_GetTick>
24009e86:	1b43      	subs	r3, r0, r5
24009e88:	f241 3287 	movw	r2, #4999	; 0x1387
24009e8c:	4293      	cmp	r3, r2
24009e8e:	d9ed      	bls.n	24009e6c <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
24009e90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24009e94:	e04e      	b.n	24009f34 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
24009e96:	6820      	ldr	r0, [r4, #0]
24009e98:	f001 facc 	bl	2400b434 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
24009e9c:	4603      	mov	r3, r0
24009e9e:	2800      	cmp	r0, #0
24009ea0:	d148      	bne.n	24009f34 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24009ea2:	2100      	movs	r1, #0
24009ea4:	6820      	ldr	r0, [r4, #0]
24009ea6:	f001 f87c 	bl	2400afa2 <SDMMC_GetResponse>
24009eaa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
24009eac:	2104      	movs	r1, #4
24009eae:	6820      	ldr	r0, [r4, #0]
24009eb0:	f001 f877 	bl	2400afa2 <SDMMC_GetResponse>
24009eb4:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
24009eb6:	2108      	movs	r1, #8
24009eb8:	6820      	ldr	r0, [r4, #0]
24009eba:	f001 f872 	bl	2400afa2 <SDMMC_GetResponse>
24009ebe:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
24009ec0:	210c      	movs	r1, #12
24009ec2:	6820      	ldr	r0, [r4, #0]
24009ec4:	f001 f86d 	bl	2400afa2 <SDMMC_GetResponse>
24009ec8:	67a0      	str	r0, [r4, #120]	; 0x78
24009eca:	e7cc      	b.n	24009e66 <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
24009ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24009ece:	2b03      	cmp	r3, #3
24009ed0:	d01c      	beq.n	24009f0c <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
24009ed2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
24009ed6:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24009ed8:	0409      	lsls	r1, r1, #16
24009eda:	6820      	ldr	r0, [r4, #0]
24009edc:	f001 fac0 	bl	2400b460 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
24009ee0:	4603      	mov	r3, r0
24009ee2:	bb38      	cbnz	r0, 24009f34 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24009ee4:	2100      	movs	r1, #0
24009ee6:	6820      	ldr	r0, [r4, #0]
24009ee8:	f001 f85b 	bl	2400afa2 <SDMMC_GetResponse>
24009eec:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
24009eee:	2104      	movs	r1, #4
24009ef0:	6820      	ldr	r0, [r4, #0]
24009ef2:	f001 f856 	bl	2400afa2 <SDMMC_GetResponse>
24009ef6:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
24009ef8:	2108      	movs	r1, #8
24009efa:	6820      	ldr	r0, [r4, #0]
24009efc:	f001 f851 	bl	2400afa2 <SDMMC_GetResponse>
24009f00:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
24009f02:	210c      	movs	r1, #12
24009f04:	6820      	ldr	r0, [r4, #0]
24009f06:	f001 f84c 	bl	2400afa2 <SDMMC_GetResponse>
24009f0a:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
24009f0c:	2104      	movs	r1, #4
24009f0e:	6820      	ldr	r0, [r4, #0]
24009f10:	f001 f847 	bl	2400afa2 <SDMMC_GetResponse>
24009f14:	0d00      	lsrs	r0, r0, #20
24009f16:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
24009f18:	a901      	add	r1, sp, #4
24009f1a:	4620      	mov	r0, r4
24009f1c:	f7ff feb6 	bl	24009c8c <HAL_SD_GetCardCSD>
24009f20:	b958      	cbnz	r0, 24009f3a <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
24009f22:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009f24:	0409      	lsls	r1, r1, #16
24009f26:	6820      	ldr	r0, [r4, #0]
24009f28:	f001 f9be 	bl	2400b2a8 <SDMMC_CmdSelDesel>
24009f2c:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
24009f2e:	e001      	b.n	24009f34 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
24009f30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
24009f34:	4618      	mov	r0, r3
24009f36:	b00d      	add	sp, #52	; 0x34
24009f38:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
24009f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
24009f3e:	e7f9      	b.n	24009f34 <SD_InitCard+0xf0>

24009f40 <HAL_SD_InitCard>:
{
24009f40:	b570      	push	{r4, r5, r6, lr}
24009f42:	b088      	sub	sp, #32
24009f44:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
24009f46:	2300      	movs	r3, #0
24009f48:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
24009f4a:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
24009f4c:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
24009f4e:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
24009f50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
24009f54:	2100      	movs	r1, #0
24009f56:	f7fe fa75 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
24009f5a:	b938      	cbnz	r0, 24009f6c <HAL_SD_InitCard+0x2c>
    hsd->State = HAL_SD_STATE_READY;
24009f5c:	2001      	movs	r0, #1
24009f5e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
24009f62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
24009f66:	6363      	str	r3, [r4, #52]	; 0x34
}
24009f68:	b008      	add	sp, #32
24009f6a:	bd70      	pop	{r4, r5, r6, pc}
24009f6c:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
24009f6e:	0a05      	lsrs	r5, r0, #8
24009f70:	4b23      	ldr	r3, [pc, #140]	; (2400a000 <HAL_SD_InitCard+0xc0>)
24009f72:	fba3 3505 	umull	r3, r5, r3, r5
24009f76:	092d      	lsrs	r5, r5, #4
24009f78:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
24009f7a:	ab08      	add	r3, sp, #32
24009f7c:	e913 0003 	ldmdb	r3, {r0, r1}
24009f80:	e88d 0003 	stmia.w	sp, {r0, r1}
24009f84:	ab03      	add	r3, sp, #12
24009f86:	cb0e      	ldmia	r3, {r1, r2, r3}
24009f88:	6820      	ldr	r0, [r4, #0]
24009f8a:	f000 ffcb 	bl	2400af24 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
24009f8e:	6820      	ldr	r0, [r4, #0]
24009f90:	f000 ffe8 	bl	2400af64 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
24009f94:	b115      	cbz	r5, 24009f9c <HAL_SD_InitCard+0x5c>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
24009f96:	006d      	lsls	r5, r5, #1
24009f98:	fbb6 f6f5 	udiv	r6, r6, r5
  if (sdmmc_clk != 0U)
24009f9c:	b95e      	cbnz	r6, 24009fb6 <HAL_SD_InitCard+0x76>
  errorstate = SD_PowerON(hsd);
24009f9e:	4620      	mov	r0, r4
24009fa0:	f7ff fa9a 	bl	240094d8 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
24009fa4:	4602      	mov	r2, r0
24009fa6:	b168      	cbz	r0, 24009fc4 <HAL_SD_InitCard+0x84>
    hsd->State = HAL_SD_STATE_READY;
24009fa8:	2001      	movs	r0, #1
24009faa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
24009fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009fb0:	4313      	orrs	r3, r2
24009fb2:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
24009fb4:	e7d8      	b.n	24009f68 <HAL_SD_InitCard+0x28>
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
24009fb6:	4813      	ldr	r0, [pc, #76]	; (2400a004 <HAL_SD_InitCard+0xc4>)
24009fb8:	fbb0 f0f6 	udiv	r0, r0, r6
24009fbc:	3001      	adds	r0, #1
24009fbe:	f7f9 fd01 	bl	240039c4 <HAL_Delay>
24009fc2:	e7ec      	b.n	24009f9e <HAL_SD_InitCard+0x5e>
  errorstate = SD_InitCard(hsd);
24009fc4:	4620      	mov	r0, r4
24009fc6:	f7ff ff3d 	bl	24009e44 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
24009fca:	4602      	mov	r2, r0
24009fcc:	b130      	cbz	r0, 24009fdc <HAL_SD_InitCard+0x9c>
    hsd->State = HAL_SD_STATE_READY;
24009fce:	2001      	movs	r0, #1
24009fd0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
24009fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009fd6:	4313      	orrs	r3, r2
24009fd8:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
24009fda:	e7c5      	b.n	24009f68 <HAL_SD_InitCard+0x28>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24009fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
24009fe0:	6820      	ldr	r0, [r4, #0]
24009fe2:	f001 f8b7 	bl	2400b154 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009fe6:	b908      	cbnz	r0, 24009fec <HAL_SD_InitCard+0xac>
  return HAL_OK;
24009fe8:	2000      	movs	r0, #0
24009fea:	e7bd      	b.n	24009f68 <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009fec:	6823      	ldr	r3, [r4, #0]
24009fee:	4906      	ldr	r1, [pc, #24]	; (2400a008 <HAL_SD_InitCard+0xc8>)
24009ff0:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
24009ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009ff4:	4303      	orrs	r3, r0
24009ff6:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009ff8:	2001      	movs	r0, #1
24009ffa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
24009ffe:	e7b3      	b.n	24009f68 <HAL_SD_InitCard+0x28>
2400a000:	014f8b59 	.word	0x014f8b59
2400a004:	00012110 	.word	0x00012110
2400a008:	1fe00fff 	.word	0x1fe00fff

2400a00c <HAL_SD_GetCardStatus>:
{
2400a00c:	b530      	push	{r4, r5, lr}
2400a00e:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
2400a010:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400a014:	b2db      	uxtb	r3, r3
2400a016:	2b03      	cmp	r3, #3
2400a018:	d059      	beq.n	2400a0ce <HAL_SD_GetCardStatus+0xc2>
2400a01a:	4604      	mov	r4, r0
2400a01c:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
2400a01e:	4669      	mov	r1, sp
2400a020:	f7ff fabc 	bl	2400959c <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a024:	b1b8      	cbz	r0, 2400a056 <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a026:	6823      	ldr	r3, [r4, #0]
2400a028:	492b      	ldr	r1, [pc, #172]	; (2400a0d8 <HAL_SD_GetCardStatus+0xcc>)
2400a02a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a02c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a02e:	4303      	orrs	r3, r0
2400a030:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a032:	2501      	movs	r5, #1
2400a034:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a038:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a03c:	6820      	ldr	r0, [r4, #0]
2400a03e:	f001 f889 	bl	2400b154 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a042:	2800      	cmp	r0, #0
2400a044:	d044      	beq.n	2400a0d0 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a046:	6822      	ldr	r2, [r4, #0]
2400a048:	4923      	ldr	r1, [pc, #140]	; (2400a0d8 <HAL_SD_GetCardStatus+0xcc>)
2400a04a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400a04c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a04e:	2501      	movs	r5, #1
2400a050:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
2400a054:	e03c      	b.n	2400a0d0 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400a056:	9a00      	ldr	r2, [sp, #0]
2400a058:	f3c2 1381 	ubfx	r3, r2, #6, #2
2400a05c:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400a05e:	f3c2 1340 	ubfx	r3, r2, #5, #1
2400a062:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400a064:	0a13      	lsrs	r3, r2, #8
2400a066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400a06a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
2400a06e:	b29b      	uxth	r3, r3
2400a070:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400a072:	9a01      	ldr	r2, [sp, #4]
2400a074:	0213      	lsls	r3, r2, #8
2400a076:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
2400a07a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
2400a07e:	0a11      	lsrs	r1, r2, #8
2400a080:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400a084:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
2400a086:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400a08a:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a08c:	9b02      	ldr	r3, [sp, #8]
2400a08e:	b2da      	uxtb	r2, r3
2400a090:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a092:	f3c3 2207 	ubfx	r2, r3, #8, #8
2400a096:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a098:	f3c3 5203 	ubfx	r2, r3, #20, #4
2400a09c:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a09e:	0c1b      	lsrs	r3, r3, #16
2400a0a0:	9a03      	ldr	r2, [sp, #12]
2400a0a2:	b2d1      	uxtb	r1, r2
2400a0a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400a0a8:	430b      	orrs	r3, r1
2400a0aa:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400a0ac:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400a0b0:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400a0b2:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400a0b6:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a0b8:	f3c2 1303 	ubfx	r3, r2, #4, #4
2400a0bc:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a0be:	f002 020f 	and.w	r2, r2, #15
2400a0c2:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a0c4:	f89d 3013 	ldrb.w	r3, [sp, #19]
2400a0c8:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
2400a0ca:	2500      	movs	r5, #0
2400a0cc:	e7b4      	b.n	2400a038 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
2400a0ce:	2501      	movs	r5, #1
}
2400a0d0:	4628      	mov	r0, r5
2400a0d2:	b011      	add	sp, #68	; 0x44
2400a0d4:	bd30      	pop	{r4, r5, pc}
2400a0d6:	bf00      	nop
2400a0d8:	1fe00fff 	.word	0x1fe00fff

2400a0dc <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400a0dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
2400a0de:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400a0e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2400a0e2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400a0e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
2400a0e6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400a0e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400a0ea:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400a0ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
2400a0ee:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400a0f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
2400a0f2:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400a0f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
2400a0f6:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400a0f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
2400a0fa:	61cb      	str	r3, [r1, #28]
}
2400a0fc:	2000      	movs	r0, #0
2400a0fe:	4770      	bx	lr

2400a100 <HAL_SD_ConfigWideBusOperation>:
{
2400a100:	b530      	push	{r4, r5, lr}
2400a102:	b089      	sub	sp, #36	; 0x24
2400a104:	4604      	mov	r4, r0
2400a106:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400a108:	2303      	movs	r3, #3
2400a10a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a10e:	6b83      	ldr	r3, [r0, #56]	; 0x38
2400a110:	2b03      	cmp	r3, #3
2400a112:	d01c      	beq.n	2400a14e <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400a114:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400a118:	d008      	beq.n	2400a12c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400a11a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400a11e:	d00a      	beq.n	2400a136 <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400a120:	b179      	cbz	r1, 2400a142 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a122:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a124:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a128:	6343      	str	r3, [r0, #52]	; 0x34
2400a12a:	e014      	b.n	2400a156 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a12c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a12e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400a132:	6343      	str	r3, [r0, #52]	; 0x34
2400a134:	e00f      	b.n	2400a156 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
2400a136:	f7ff fb39 	bl	240097ac <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
2400a13a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a13c:	4303      	orrs	r3, r0
2400a13e:	6363      	str	r3, [r4, #52]	; 0x34
2400a140:	e009      	b.n	2400a156 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
2400a142:	f7ff fb5a 	bl	240097fa <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
2400a146:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a148:	4303      	orrs	r3, r0
2400a14a:	6363      	str	r3, [r4, #52]	; 0x34
2400a14c:	e003      	b.n	2400a156 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a14e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400a154:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a156:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a158:	b1b3      	cbz	r3, 2400a188 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a15a:	6823      	ldr	r3, [r4, #0]
2400a15c:	4a3a      	ldr	r2, [pc, #232]	; (2400a248 <HAL_SD_ConfigWideBusOperation+0x148>)
2400a15e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
2400a160:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a162:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a166:	6820      	ldr	r0, [r4, #0]
2400a168:	f000 fff4 	bl	2400b154 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a16c:	b130      	cbz	r0, 2400a17c <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a16e:	6823      	ldr	r3, [r4, #0]
2400a170:	4935      	ldr	r1, [pc, #212]	; (2400a248 <HAL_SD_ConfigWideBusOperation+0x148>)
2400a172:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a174:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a176:	4303      	orrs	r3, r0
2400a178:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
2400a17a:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
2400a17c:	2301      	movs	r3, #1
2400a17e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a182:	4628      	mov	r0, r5
2400a184:	b009      	add	sp, #36	; 0x24
2400a186:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a188:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a18c:	2100      	movs	r1, #0
2400a18e:	f7fe f959 	bl	24008444 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400a192:	4602      	mov	r2, r0
2400a194:	2800      	cmp	r0, #0
2400a196:	d050      	beq.n	2400a23a <HAL_SD_ConfigWideBusOperation+0x13a>
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a198:	6863      	ldr	r3, [r4, #4]
2400a19a:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a19c:	68a3      	ldr	r3, [r4, #8]
2400a19e:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
2400a1a0:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a1a2:	6923      	ldr	r3, [r4, #16]
2400a1a4:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a1a6:	6961      	ldr	r1, [r4, #20]
2400a1a8:	4b28      	ldr	r3, [pc, #160]	; (2400a24c <HAL_SD_ConfigWideBusOperation+0x14c>)
2400a1aa:	fba3 0302 	umull	r0, r3, r3, r2
2400a1ae:	0e18      	lsrs	r0, r3, #24
2400a1b0:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
2400a1b4:	d30c      	bcc.n	2400a1d0 <HAL_SD_ConfigWideBusOperation+0xd0>
        Init.ClockDiv = hsd->Init.ClockDiv;
2400a1b6:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
2400a1b8:	ab08      	add	r3, sp, #32
2400a1ba:	e913 0003 	ldmdb	r3, {r0, r1}
2400a1be:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a1c2:	ab03      	add	r3, sp, #12
2400a1c4:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a1c6:	6820      	ldr	r0, [r4, #0]
2400a1c8:	f000 feac 	bl	2400af24 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
2400a1cc:	2500      	movs	r5, #0
2400a1ce:	e7c8      	b.n	2400a162 <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400a1d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
2400a1d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400a1d6:	d008      	beq.n	2400a1ea <HAL_SD_ConfigWideBusOperation+0xea>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400a1d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a1dc:	d007      	beq.n	2400a1ee <HAL_SD_ConfigWideBusOperation+0xee>
        if (hsd->Init.ClockDiv == 0U)
2400a1de:	bb11      	cbnz	r1, 2400a226 <HAL_SD_ConfigWideBusOperation+0x126>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
2400a1e0:	4b1b      	ldr	r3, [pc, #108]	; (2400a250 <HAL_SD_ConfigWideBusOperation+0x150>)
2400a1e2:	429a      	cmp	r2, r3
2400a1e4:	d91d      	bls.n	2400a222 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400a1e6:	9007      	str	r0, [sp, #28]
2400a1e8:	e7e6      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
        Init.ClockDiv = hsd->Init.ClockDiv;
2400a1ea:	9107      	str	r1, [sp, #28]
2400a1ec:	e7e4      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
        if (hsd->Init.ClockDiv == 0U)
2400a1ee:	b951      	cbnz	r1, 2400a206 <HAL_SD_ConfigWideBusOperation+0x106>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400a1f0:	4b18      	ldr	r3, [pc, #96]	; (2400a254 <HAL_SD_ConfigWideBusOperation+0x154>)
2400a1f2:	429a      	cmp	r2, r3
2400a1f4:	d905      	bls.n	2400a202 <HAL_SD_ConfigWideBusOperation+0x102>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400a1f6:	4b15      	ldr	r3, [pc, #84]	; (2400a24c <HAL_SD_ConfigWideBusOperation+0x14c>)
2400a1f8:	fba3 2302 	umull	r2, r3, r3, r2
2400a1fc:	0e5b      	lsrs	r3, r3, #25
2400a1fe:	9307      	str	r3, [sp, #28]
2400a200:	e7da      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400a202:	9107      	str	r1, [sp, #28]
2400a204:	e7d8      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400a206:	004b      	lsls	r3, r1, #1
2400a208:	fbb2 f3f3 	udiv	r3, r2, r3
2400a20c:	4811      	ldr	r0, [pc, #68]	; (2400a254 <HAL_SD_ConfigWideBusOperation+0x154>)
2400a20e:	4283      	cmp	r3, r0
2400a210:	d905      	bls.n	2400a21e <HAL_SD_ConfigWideBusOperation+0x11e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400a212:	4b0e      	ldr	r3, [pc, #56]	; (2400a24c <HAL_SD_ConfigWideBusOperation+0x14c>)
2400a214:	fba3 2302 	umull	r2, r3, r3, r2
2400a218:	0e5b      	lsrs	r3, r3, #25
2400a21a:	9307      	str	r3, [sp, #28]
2400a21c:	e7cc      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400a21e:	9107      	str	r1, [sp, #28]
2400a220:	e7ca      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400a222:	9107      	str	r1, [sp, #28]
2400a224:	e7c8      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400a226:	004b      	lsls	r3, r1, #1
2400a228:	fbb2 f2f3 	udiv	r2, r2, r3
2400a22c:	4b08      	ldr	r3, [pc, #32]	; (2400a250 <HAL_SD_ConfigWideBusOperation+0x150>)
2400a22e:	429a      	cmp	r2, r3
2400a230:	d901      	bls.n	2400a236 <HAL_SD_ConfigWideBusOperation+0x136>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400a232:	9007      	str	r0, [sp, #28]
2400a234:	e7c0      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400a236:	9107      	str	r1, [sp, #28]
2400a238:	e7be      	b.n	2400a1b8 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a23a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a23c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a240:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a242:	2501      	movs	r5, #1
2400a244:	e78d      	b.n	2400a162 <HAL_SD_ConfigWideBusOperation+0x62>
2400a246:	bf00      	nop
2400a248:	1fe00fff 	.word	0x1fe00fff
2400a24c:	55e63b89 	.word	0x55e63b89
2400a250:	017d7840 	.word	0x017d7840
2400a254:	02faf080 	.word	0x02faf080

2400a258 <HAL_SD_GetCardState>:
{
2400a258:	b510      	push	{r4, lr}
2400a25a:	b082      	sub	sp, #8
2400a25c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
2400a25e:	2300      	movs	r3, #0
2400a260:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
2400a262:	a901      	add	r1, sp, #4
2400a264:	f7ff faf0 	bl	24009848 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a268:	b110      	cbz	r0, 2400a270 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
2400a26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a26c:	4303      	orrs	r3, r0
2400a26e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a270:	9801      	ldr	r0, [sp, #4]
2400a272:	f3c0 2043 	ubfx	r0, r0, #9, #4
2400a276:	b002      	add	sp, #8
2400a278:	bd10      	pop	{r4, pc}

2400a27a <HAL_SD_Init>:
{
2400a27a:	b570      	push	{r4, r5, r6, lr}
2400a27c:	b086      	sub	sp, #24
  if (hsd == NULL)
2400a27e:	2800      	cmp	r0, #0
2400a280:	d054      	beq.n	2400a32c <HAL_SD_Init+0xb2>
2400a282:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
2400a284:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400a288:	b153      	cbz	r3, 2400a2a0 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a28a:	2304      	movs	r3, #4
2400a28c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a290:	4620      	mov	r0, r4
2400a292:	f7ff fe55 	bl	24009f40 <HAL_SD_InitCard>
2400a296:	b138      	cbz	r0, 2400a2a8 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
2400a298:	2501      	movs	r5, #1
}
2400a29a:	4628      	mov	r0, r5
2400a29c:	b006      	add	sp, #24
2400a29e:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
2400a2a0:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
2400a2a2:	f7f8 ffed 	bl	24003280 <HAL_SD_MspInit>
2400a2a6:	e7f0      	b.n	2400a28a <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400a2a8:	a901      	add	r1, sp, #4
2400a2aa:	4620      	mov	r0, r4
2400a2ac:	f7ff feae 	bl	2400a00c <HAL_SD_GetCardStatus>
2400a2b0:	2800      	cmp	r0, #0
2400a2b2:	d13d      	bne.n	2400a330 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
2400a2b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
2400a2b8:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a2ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
2400a2be:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a2c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400a2c2:	2901      	cmp	r1, #1
2400a2c4:	d00b      	beq.n	2400a2de <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400a2c6:	2901      	cmp	r1, #1
2400a2c8:	d00f      	beq.n	2400a2ea <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400a2ca:	2300      	movs	r3, #0
2400a2cc:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400a2ce:	68e1      	ldr	r1, [r4, #12]
2400a2d0:	4620      	mov	r0, r4
2400a2d2:	f7ff ff15 	bl	2400a100 <HAL_SD_ConfigWideBusOperation>
2400a2d6:	4605      	mov	r5, r0
2400a2d8:	b158      	cbz	r0, 2400a2f2 <HAL_SD_Init+0x78>
    return HAL_ERROR;
2400a2da:	2501      	movs	r5, #1
2400a2dc:	e7dd      	b.n	2400a29a <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a2de:	4313      	orrs	r3, r2
2400a2e0:	d0f1      	beq.n	2400a2c6 <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400a2e2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400a2e6:	65a3      	str	r3, [r4, #88]	; 0x58
2400a2e8:	e7f1      	b.n	2400a2ce <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
2400a2ea:	f44f 7380 	mov.w	r3, #256	; 0x100
2400a2ee:	65a3      	str	r3, [r4, #88]	; 0x58
2400a2f0:	e7ed      	b.n	2400a2ce <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
2400a2f2:	f7f9 fb61 	bl	240039b8 <HAL_GetTick>
2400a2f6:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a2f8:	4620      	mov	r0, r4
2400a2fa:	f7ff ffad 	bl	2400a258 <HAL_SD_GetCardState>
2400a2fe:	2804      	cmp	r0, #4
2400a300:	d00d      	beq.n	2400a31e <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a302:	f7f9 fb59 	bl	240039b8 <HAL_GetTick>
2400a306:	1b80      	subs	r0, r0, r6
2400a308:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400a30c:	d1f4      	bne.n	2400a2f8 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400a30e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400a312:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a314:	2301      	movs	r3, #1
2400a316:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400a31a:	2503      	movs	r5, #3
2400a31c:	e7bd      	b.n	2400a29a <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a31e:	2300      	movs	r3, #0
2400a320:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400a322:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400a324:	2301      	movs	r3, #1
2400a326:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400a32a:	e7b6      	b.n	2400a29a <HAL_SD_Init+0x20>
    return HAL_ERROR;
2400a32c:	2501      	movs	r5, #1
2400a32e:	e7b4      	b.n	2400a29a <HAL_SD_Init+0x20>
    return HAL_ERROR;
2400a330:	2501      	movs	r5, #1
2400a332:	e7b2      	b.n	2400a29a <HAL_SD_Init+0x20>

2400a334 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400a334:	b308      	cbz	r0, 2400a37a <HAL_SDRAM_Init+0x46>
{
2400a336:	b538      	push	{r3, r4, r5, lr}
2400a338:	460d      	mov	r5, r1
2400a33a:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400a33c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400a340:	b1b3      	cbz	r3, 2400a370 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400a342:	2302      	movs	r3, #2
2400a344:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400a348:	4621      	mov	r1, r4
2400a34a:	f851 0b04 	ldr.w	r0, [r1], #4
2400a34e:	f000 fd1b 	bl	2400ad88 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400a352:	6862      	ldr	r2, [r4, #4]
2400a354:	4629      	mov	r1, r5
2400a356:	6820      	ldr	r0, [r4, #0]
2400a358:	f000 fd50 	bl	2400adfc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400a35c:	4a08      	ldr	r2, [pc, #32]	; (2400a380 <HAL_SDRAM_Init+0x4c>)
2400a35e:	6813      	ldr	r3, [r2, #0]
2400a360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400a364:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400a366:	2301      	movs	r3, #1
2400a368:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
2400a36c:	2000      	movs	r0, #0
}
2400a36e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400a370:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400a374:	f7f7 f93e 	bl	240015f4 <HAL_SDRAM_MspInit>
2400a378:	e7e3      	b.n	2400a342 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
2400a37a:	2001      	movs	r0, #1
}
2400a37c:	4770      	bx	lr
2400a37e:	bf00      	nop
2400a380:	52004000 	.word	0x52004000

2400a384 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400a384:	b538      	push	{r3, r4, r5, lr}
2400a386:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400a388:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400a38c:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400a38e:	2802      	cmp	r0, #2
2400a390:	d005      	beq.n	2400a39e <HAL_SDRAM_SendCommand+0x1a>
2400a392:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400a394:	2805      	cmp	r0, #5
2400a396:	bf18      	it	ne
2400a398:	2801      	cmpne	r0, #1
2400a39a:	d001      	beq.n	2400a3a0 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400a39c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400a39e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400a3a0:	2302      	movs	r3, #2
2400a3a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400a3a6:	6820      	ldr	r0, [r4, #0]
2400a3a8:	f000 fd7c 	bl	2400aea4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400a3ac:	682b      	ldr	r3, [r5, #0]
2400a3ae:	2b02      	cmp	r3, #2
2400a3b0:	d004      	beq.n	2400a3bc <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
2400a3b2:	2301      	movs	r3, #1
2400a3b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
2400a3b8:	2000      	movs	r0, #0
2400a3ba:	e7f0      	b.n	2400a39e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400a3bc:	2305      	movs	r3, #5
2400a3be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
2400a3c2:	2000      	movs	r0, #0
2400a3c4:	e7eb      	b.n	2400a39e <HAL_SDRAM_SendCommand+0x1a>

2400a3c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400a3c6:	b510      	push	{r4, lr}
2400a3c8:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400a3ca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400a3ce:	b2d8      	uxtb	r0, r3
2400a3d0:	2802      	cmp	r0, #2
2400a3d2:	d005      	beq.n	2400a3e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400a3d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400a3d8:	b2db      	uxtb	r3, r3
2400a3da:	2b01      	cmp	r3, #1
2400a3dc:	d001      	beq.n	2400a3e2 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400a3de:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400a3e0:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400a3e2:	2302      	movs	r3, #2
2400a3e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400a3e8:	6820      	ldr	r0, [r4, #0]
2400a3ea:	f000 fd73 	bl	2400aed4 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
2400a3ee:	2301      	movs	r3, #1
2400a3f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
2400a3f4:	2000      	movs	r0, #0
2400a3f6:	e7f3      	b.n	2400a3e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>

2400a3f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
2400a3f8:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400a3fa:	6802      	ldr	r2, [r0, #0]
2400a3fc:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400a3fe:	6991      	ldr	r1, [r2, #24]
2400a400:	f041 0108 	orr.w	r1, r1, #8
2400a404:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400a406:	6801      	ldr	r1, [r0, #0]
2400a408:	698a      	ldr	r2, [r1, #24]
2400a40a:	f042 0210 	orr.w	r2, r2, #16
2400a40e:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400a410:	6801      	ldr	r1, [r0, #0]
2400a412:	680a      	ldr	r2, [r1, #0]
2400a414:	f022 0201 	bic.w	r2, r2, #1
2400a418:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400a41a:	6801      	ldr	r1, [r0, #0]
2400a41c:	690c      	ldr	r4, [r1, #16]
2400a41e:	4a29      	ldr	r2, [pc, #164]	; (2400a4c4 <SPI_CloseTransfer+0xcc>)
2400a420:	4022      	ands	r2, r4
2400a422:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400a424:	6801      	ldr	r1, [r0, #0]
2400a426:	688a      	ldr	r2, [r1, #8]
2400a428:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400a42c:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400a42e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400a432:	b2d2      	uxtb	r2, r2
2400a434:	2a04      	cmp	r2, #4
2400a436:	d00d      	beq.n	2400a454 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400a438:	f013 0f20 	tst.w	r3, #32
2400a43c:	d00a      	beq.n	2400a454 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400a43e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
2400a442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400a446:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400a44a:	6801      	ldr	r1, [r0, #0]
2400a44c:	698a      	ldr	r2, [r1, #24]
2400a44e:	f042 0220 	orr.w	r2, r2, #32
2400a452:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400a454:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400a458:	b2d2      	uxtb	r2, r2
2400a45a:	2a03      	cmp	r2, #3
2400a45c:	d00d      	beq.n	2400a47a <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400a45e:	f013 0f40 	tst.w	r3, #64	; 0x40
2400a462:	d00a      	beq.n	2400a47a <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400a464:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
2400a468:	f042 0204 	orr.w	r2, r2, #4
2400a46c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400a470:	6801      	ldr	r1, [r0, #0]
2400a472:	698a      	ldr	r2, [r1, #24]
2400a474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400a478:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400a47a:	f413 7f00 	tst.w	r3, #512	; 0x200
2400a47e:	d00a      	beq.n	2400a496 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400a480:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
2400a484:	f042 0201 	orr.w	r2, r2, #1
2400a488:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400a48c:	6801      	ldr	r1, [r0, #0]
2400a48e:	698a      	ldr	r2, [r1, #24]
2400a490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400a494:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400a496:	f413 7f80 	tst.w	r3, #256	; 0x100
2400a49a:	d00a      	beq.n	2400a4b2 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400a49c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400a4a0:	f043 0308 	orr.w	r3, r3, #8
2400a4a4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400a4a8:	6802      	ldr	r2, [r0, #0]
2400a4aa:	6993      	ldr	r3, [r2, #24]
2400a4ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400a4b0:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400a4b2:	2300      	movs	r3, #0
2400a4b4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400a4b8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400a4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a4c0:	4770      	bx	lr
2400a4c2:	bf00      	nop
2400a4c4:	fffffc90 	.word	0xfffffc90

2400a4c8 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400a4c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2400a4ca:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
2400a4cc:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400a4ce:	3008      	adds	r0, #8
2400a4d0:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
2400a4d2:	fb03 0000 	mla	r0, r3, r0, r0
2400a4d6:	4770      	bx	lr

2400a4d8 <HAL_SPI_Init>:
  if (hspi == NULL)
2400a4d8:	2800      	cmp	r0, #0
2400a4da:	f000 80b7 	beq.w	2400a64c <HAL_SPI_Init+0x174>
{
2400a4de:	b570      	push	{r4, r5, r6, lr}
2400a4e0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400a4e2:	2300      	movs	r3, #0
2400a4e4:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400a4e6:	6805      	ldr	r5, [r0, #0]
2400a4e8:	4b5c      	ldr	r3, [pc, #368]	; (2400a65c <HAL_SPI_Init+0x184>)
2400a4ea:	4e5d      	ldr	r6, [pc, #372]	; (2400a660 <HAL_SPI_Init+0x188>)
2400a4ec:	429d      	cmp	r5, r3
2400a4ee:	bf18      	it	ne
2400a4f0:	42b5      	cmpne	r5, r6
2400a4f2:	bf14      	ite	ne
2400a4f4:	2601      	movne	r6, #1
2400a4f6:	2600      	moveq	r6, #0
2400a4f8:	d007      	beq.n	2400a50a <HAL_SPI_Init+0x32>
2400a4fa:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
2400a4fe:	429d      	cmp	r5, r3
2400a500:	d003      	beq.n	2400a50a <HAL_SPI_Init+0x32>
2400a502:	68c3      	ldr	r3, [r0, #12]
2400a504:	2b0f      	cmp	r3, #15
2400a506:	f200 80a3 	bhi.w	2400a650 <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
2400a50a:	4620      	mov	r0, r4
2400a50c:	f7ff ffdc 	bl	2400a4c8 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400a510:	b12e      	cbz	r6, 2400a51e <HAL_SPI_Init+0x46>
2400a512:	4b54      	ldr	r3, [pc, #336]	; (2400a664 <HAL_SPI_Init+0x18c>)
2400a514:	429d      	cmp	r5, r3
2400a516:	d002      	beq.n	2400a51e <HAL_SPI_Init+0x46>
2400a518:	2808      	cmp	r0, #8
2400a51a:	f200 809b 	bhi.w	2400a654 <HAL_SPI_Init+0x17c>
2400a51e:	4a4f      	ldr	r2, [pc, #316]	; (2400a65c <HAL_SPI_Init+0x184>)
2400a520:	4b4f      	ldr	r3, [pc, #316]	; (2400a660 <HAL_SPI_Init+0x188>)
2400a522:	429d      	cmp	r5, r3
2400a524:	bf18      	it	ne
2400a526:	4295      	cmpne	r5, r2
2400a528:	d003      	beq.n	2400a532 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400a52a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
2400a52e:	429d      	cmp	r5, r3
2400a530:	d102      	bne.n	2400a538 <HAL_SPI_Init+0x60>
2400a532:	2810      	cmp	r0, #16
2400a534:	f200 8090 	bhi.w	2400a658 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400a538:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
2400a53c:	b1f3      	cbz	r3, 2400a57c <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
2400a53e:	2302      	movs	r3, #2
2400a540:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400a544:	6822      	ldr	r2, [r4, #0]
2400a546:	6813      	ldr	r3, [r2, #0]
2400a548:	f023 0301 	bic.w	r3, r3, #1
2400a54c:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400a54e:	6821      	ldr	r1, [r4, #0]
2400a550:	688a      	ldr	r2, [r1, #8]
2400a552:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400a556:	69a3      	ldr	r3, [r4, #24]
2400a558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400a55c:	d014      	beq.n	2400a588 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400a55e:	6863      	ldr	r3, [r4, #4]
2400a560:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
2400a564:	d023      	beq.n	2400a5ae <HAL_SPI_Init+0xd6>
2400a566:	68e3      	ldr	r3, [r4, #12]
2400a568:	2b06      	cmp	r3, #6
2400a56a:	d920      	bls.n	2400a5ae <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400a56c:	6821      	ldr	r1, [r4, #0]
2400a56e:	680b      	ldr	r3, [r1, #0]
2400a570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400a574:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400a576:	4303      	orrs	r3, r0
2400a578:	600b      	str	r3, [r1, #0]
2400a57a:	e01d      	b.n	2400a5b8 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
2400a57c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400a580:	4620      	mov	r0, r4
2400a582:	f7f8 ff21 	bl	240033c8 <HAL_SPI_MspInit>
2400a586:	e7da      	b.n	2400a53e <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400a588:	6863      	ldr	r3, [r4, #4]
2400a58a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400a58e:	d006      	beq.n	2400a59e <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400a590:	2b00      	cmp	r3, #0
2400a592:	d1e4      	bne.n	2400a55e <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
2400a594:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400a596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400a59a:	d1e0      	bne.n	2400a55e <HAL_SPI_Init+0x86>
2400a59c:	e002      	b.n	2400a5a4 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400a59e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400a5a0:	2800      	cmp	r0, #0
2400a5a2:	d1f5      	bne.n	2400a590 <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400a5a4:	680b      	ldr	r3, [r1, #0]
2400a5a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400a5aa:	600b      	str	r3, [r1, #0]
2400a5ac:	e7d7      	b.n	2400a55e <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400a5ae:	6821      	ldr	r1, [r4, #0]
2400a5b0:	680b      	ldr	r3, [r1, #0]
2400a5b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400a5b6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400a5b8:	69e3      	ldr	r3, [r4, #28]
2400a5ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2400a5bc:	430b      	orrs	r3, r1
2400a5be:	4313      	orrs	r3, r2
2400a5c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
2400a5c2:	4313      	orrs	r3, r2
2400a5c4:	68e1      	ldr	r1, [r4, #12]
2400a5c6:	6822      	ldr	r2, [r4, #0]
2400a5c8:	430b      	orrs	r3, r1
2400a5ca:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400a5cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a5ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400a5d0:	4313      	orrs	r3, r2
2400a5d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400a5d4:	4313      	orrs	r3, r2
2400a5d6:	69a2      	ldr	r2, [r4, #24]
2400a5d8:	4313      	orrs	r3, r2
2400a5da:	6922      	ldr	r2, [r4, #16]
2400a5dc:	4313      	orrs	r3, r2
2400a5de:	6962      	ldr	r2, [r4, #20]
2400a5e0:	4313      	orrs	r3, r2
2400a5e2:	6a22      	ldr	r2, [r4, #32]
2400a5e4:	4313      	orrs	r3, r2
2400a5e6:	6862      	ldr	r2, [r4, #4]
2400a5e8:	4313      	orrs	r3, r2
2400a5ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
2400a5ec:	4313      	orrs	r3, r2
2400a5ee:	68a2      	ldr	r2, [r4, #8]
2400a5f0:	4313      	orrs	r3, r2
2400a5f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2400a5f4:	4313      	orrs	r3, r2
2400a5f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400a5f8:	6822      	ldr	r2, [r4, #0]
2400a5fa:	430b      	orrs	r3, r1
2400a5fc:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400a5fe:	6863      	ldr	r3, [r4, #4]
2400a600:	b96b      	cbnz	r3, 2400a61e <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400a602:	6822      	ldr	r2, [r4, #0]
2400a604:	6893      	ldr	r3, [r2, #8]
2400a606:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400a60a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400a60e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400a610:	6822      	ldr	r2, [r4, #0]
2400a612:	6893      	ldr	r3, [r2, #8]
2400a614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400a618:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400a61c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400a61e:	6822      	ldr	r2, [r4, #0]
2400a620:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400a622:	f023 0301 	bic.w	r3, r3, #1
2400a626:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400a628:	6863      	ldr	r3, [r4, #4]
2400a62a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
2400a62e:	d006      	beq.n	2400a63e <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400a630:	6822      	ldr	r2, [r4, #0]
2400a632:	68d3      	ldr	r3, [r2, #12]
2400a634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400a638:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400a63a:	430b      	orrs	r3, r1
2400a63c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400a63e:	2000      	movs	r0, #0
2400a640:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400a644:	2301      	movs	r3, #1
2400a646:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400a64a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
2400a64c:	2001      	movs	r0, #1
}
2400a64e:	4770      	bx	lr
    return HAL_ERROR;
2400a650:	2001      	movs	r0, #1
2400a652:	e7fa      	b.n	2400a64a <HAL_SPI_Init+0x172>
    return HAL_ERROR;
2400a654:	2001      	movs	r0, #1
2400a656:	e7f8      	b.n	2400a64a <HAL_SPI_Init+0x172>
2400a658:	2001      	movs	r0, #1
2400a65a:	e7f6      	b.n	2400a64a <HAL_SPI_Init+0x172>
2400a65c:	40013000 	.word	0x40013000
2400a660:	40003800 	.word	0x40003800
2400a664:	40003c00 	.word	0x40003c00

2400a668 <HAL_SPI_Receive_DMA>:
{
2400a668:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
2400a66a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400a66e:	2b01      	cmp	r3, #1
2400a670:	f000 80d4 	beq.w	2400a81c <HAL_SPI_Receive_DMA+0x1b4>
2400a674:	4604      	mov	r4, r0
2400a676:	4616      	mov	r6, r2
2400a678:	2301      	movs	r3, #1
2400a67a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400a67e:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
2400a682:	b2ed      	uxtb	r5, r5
2400a684:	429d      	cmp	r5, r3
2400a686:	d17d      	bne.n	2400a784 <HAL_SPI_Receive_DMA+0x11c>
  if ((pData == NULL) || (Size == 0UL))
2400a688:	2a00      	cmp	r2, #0
2400a68a:	bf18      	it	ne
2400a68c:	2900      	cmpne	r1, #0
2400a68e:	d07f      	beq.n	2400a790 <HAL_SPI_Receive_DMA+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400a690:	2304      	movs	r3, #4
2400a692:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400a696:	2300      	movs	r3, #0
2400a698:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2400a69c:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
2400a69e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
2400a6a2:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
2400a6a6:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
2400a6a8:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
2400a6aa:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
2400a6ae:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400a6b2:	6883      	ldr	r3, [r0, #8]
2400a6b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
2400a6b8:	d06e      	beq.n	2400a798 <HAL_SPI_Receive_DMA+0x130>
    SPI_2LINES_RX(hspi);
2400a6ba:	6802      	ldr	r2, [r0, #0]
2400a6bc:	68d3      	ldr	r3, [r2, #12]
2400a6be:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400a6c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400a6c6:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400a6c8:	68e3      	ldr	r3, [r4, #12]
2400a6ca:	2b0f      	cmp	r3, #15
2400a6cc:	d904      	bls.n	2400a6d8 <HAL_SPI_Receive_DMA+0x70>
2400a6ce:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
2400a6d0:	6992      	ldr	r2, [r2, #24]
2400a6d2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400a6d6:	d165      	bne.n	2400a7a4 <HAL_SPI_Receive_DMA+0x13c>
2400a6d8:	2b07      	cmp	r3, #7
2400a6da:	d907      	bls.n	2400a6ec <HAL_SPI_Receive_DMA+0x84>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400a6dc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a6de:	699b      	ldr	r3, [r3, #24]
2400a6e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400a6e4:	bf18      	it	ne
2400a6e6:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
2400a6ea:	d15b      	bne.n	2400a7a4 <HAL_SPI_Receive_DMA+0x13c>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400a6ec:	6822      	ldr	r2, [r4, #0]
2400a6ee:	6893      	ldr	r3, [r2, #8]
2400a6f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400a6f4:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2400a6f6:	68e3      	ldr	r3, [r4, #12]
2400a6f8:	2b07      	cmp	r3, #7
2400a6fa:	d867      	bhi.n	2400a7cc <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400a6fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a6fe:	699a      	ldr	r2, [r3, #24]
2400a700:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400a704:	d052      	beq.n	2400a7ac <HAL_SPI_Receive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400a706:	699b      	ldr	r3, [r3, #24]
2400a708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a70c:	d056      	beq.n	2400a7bc <HAL_SPI_Receive_DMA+0x154>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400a70e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a710:	4a43      	ldr	r2, [pc, #268]	; (2400a820 <HAL_SPI_Receive_DMA+0x1b8>)
2400a712:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400a714:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a716:	4a43      	ldr	r2, [pc, #268]	; (2400a824 <HAL_SPI_Receive_DMA+0x1bc>)
2400a718:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400a71a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a71c:	4a42      	ldr	r2, [pc, #264]	; (2400a828 <HAL_SPI_Receive_DMA+0x1c0>)
2400a71e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400a720:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a722:	2200      	movs	r2, #0
2400a724:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400a726:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
2400a728:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400a72c:	b29b      	uxth	r3, r3
2400a72e:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400a730:	3130      	adds	r1, #48	; 0x30
2400a732:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400a734:	f7f9 fdfe 	bl	24004334 <HAL_DMA_Start_IT>
2400a738:	4601      	mov	r1, r0
2400a73a:	2800      	cmp	r0, #0
2400a73c:	d155      	bne.n	2400a7ea <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400a73e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a740:	69db      	ldr	r3, [r3, #28]
2400a742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a746:	d05d      	beq.n	2400a804 <HAL_SPI_Receive_DMA+0x19c>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400a748:	6823      	ldr	r3, [r4, #0]
2400a74a:	6858      	ldr	r0, [r3, #4]
2400a74c:	4a37      	ldr	r2, [pc, #220]	; (2400a82c <HAL_SPI_Receive_DMA+0x1c4>)
2400a74e:	4002      	ands	r2, r0
2400a750:	4332      	orrs	r2, r6
2400a752:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400a754:	6822      	ldr	r2, [r4, #0]
2400a756:	6893      	ldr	r3, [r2, #8]
2400a758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400a75c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
2400a75e:	6822      	ldr	r2, [r4, #0]
2400a760:	6913      	ldr	r3, [r2, #16]
2400a762:	f443 7350 	orr.w	r3, r3, #832	; 0x340
2400a766:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400a768:	6822      	ldr	r2, [r4, #0]
2400a76a:	6813      	ldr	r3, [r2, #0]
2400a76c:	f043 0301 	orr.w	r3, r3, #1
2400a770:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400a772:	6863      	ldr	r3, [r4, #4]
2400a774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400a778:	d04a      	beq.n	2400a810 <HAL_SPI_Receive_DMA+0x1a8>
  __HAL_UNLOCK(hspi);
2400a77a:	2300      	movs	r3, #0
2400a77c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400a780:	460d      	mov	r5, r1
2400a782:	e003      	b.n	2400a78c <HAL_SPI_Receive_DMA+0x124>
    __HAL_UNLOCK(hspi);
2400a784:	2300      	movs	r3, #0
2400a786:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
2400a78a:	2502      	movs	r5, #2
}
2400a78c:	4628      	mov	r0, r5
2400a78e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
2400a790:	2300      	movs	r3, #0
2400a792:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
2400a796:	e7f9      	b.n	2400a78c <HAL_SPI_Receive_DMA+0x124>
    SPI_1LINE_RX(hspi);
2400a798:	6802      	ldr	r2, [r0, #0]
2400a79a:	6813      	ldr	r3, [r2, #0]
2400a79c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2400a7a0:	6013      	str	r3, [r2, #0]
2400a7a2:	e791      	b.n	2400a6c8 <HAL_SPI_Receive_DMA+0x60>
    __HAL_UNLOCK(hspi);
2400a7a4:	2300      	movs	r3, #0
2400a7a6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
2400a7aa:	e7ef      	b.n	2400a78c <HAL_SPI_Receive_DMA+0x124>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400a7ac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400a7b0:	b292      	uxth	r2, r2
2400a7b2:	3201      	adds	r2, #1
2400a7b4:	0852      	lsrs	r2, r2, #1
2400a7b6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400a7ba:	e7a4      	b.n	2400a706 <HAL_SPI_Receive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400a7bc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400a7c0:	b29b      	uxth	r3, r3
2400a7c2:	3303      	adds	r3, #3
2400a7c4:	089b      	lsrs	r3, r3, #2
2400a7c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
2400a7ca:	e7a0      	b.n	2400a70e <HAL_SPI_Receive_DMA+0xa6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400a7cc:	2b0f      	cmp	r3, #15
2400a7ce:	d89e      	bhi.n	2400a70e <HAL_SPI_Receive_DMA+0xa6>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400a7d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a7d2:	699b      	ldr	r3, [r3, #24]
2400a7d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a7d8:	d199      	bne.n	2400a70e <HAL_SPI_Receive_DMA+0xa6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400a7da:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400a7de:	b29b      	uxth	r3, r3
2400a7e0:	3301      	adds	r3, #1
2400a7e2:	085b      	lsrs	r3, r3, #1
2400a7e4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
2400a7e8:	e791      	b.n	2400a70e <HAL_SPI_Receive_DMA+0xa6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400a7ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400a7ee:	f043 0310 	orr.w	r3, r3, #16
2400a7f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
2400a7f6:	2300      	movs	r3, #0
2400a7f8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
2400a7fc:	2301      	movs	r3, #1
2400a7fe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
2400a802:	e7c3      	b.n	2400a78c <HAL_SPI_Receive_DMA+0x124>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400a804:	6822      	ldr	r2, [r4, #0]
2400a806:	6850      	ldr	r0, [r2, #4]
2400a808:	4b08      	ldr	r3, [pc, #32]	; (2400a82c <HAL_SPI_Receive_DMA+0x1c4>)
2400a80a:	4003      	ands	r3, r0
2400a80c:	6053      	str	r3, [r2, #4]
2400a80e:	e7a1      	b.n	2400a754 <HAL_SPI_Receive_DMA+0xec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400a810:	6822      	ldr	r2, [r4, #0]
2400a812:	6813      	ldr	r3, [r2, #0]
2400a814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400a818:	6013      	str	r3, [r2, #0]
2400a81a:	e7ae      	b.n	2400a77a <HAL_SPI_Receive_DMA+0x112>
  __HAL_LOCK(hspi);
2400a81c:	2502      	movs	r5, #2
2400a81e:	e7b5      	b.n	2400a78c <HAL_SPI_Receive_DMA+0x124>
2400a820:	2400aad3 	.word	0x2400aad3
2400a824:	2400aa7f 	.word	0x2400aa7f
2400a828:	2400aae9 	.word	0x2400aae9
2400a82c:	ffff0000 	.word	0xffff0000

2400a830 <HAL_SPI_TransmitReceive_DMA>:
{
2400a830:	b570      	push	{r4, r5, r6, lr}
2400a832:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
2400a834:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
2400a838:	2801      	cmp	r0, #1
2400a83a:	f000 8115 	beq.w	2400aa68 <HAL_SPI_TransmitReceive_DMA+0x238>
2400a83e:	461e      	mov	r6, r3
2400a840:	2301      	movs	r3, #1
2400a842:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400a846:	f894 5081 	ldrb.w	r5, [r4, #129]	; 0x81
2400a84a:	b2ed      	uxtb	r5, r5
2400a84c:	429d      	cmp	r5, r3
2400a84e:	d16b      	bne.n	2400a928 <HAL_SPI_TransmitReceive_DMA+0xf8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400a850:	2a00      	cmp	r2, #0
2400a852:	bf18      	it	ne
2400a854:	2900      	cmpne	r1, #0
2400a856:	d06c      	beq.n	2400a932 <HAL_SPI_TransmitReceive_DMA+0x102>
2400a858:	2e00      	cmp	r6, #0
2400a85a:	d06a      	beq.n	2400a932 <HAL_SPI_TransmitReceive_DMA+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400a85c:	2305      	movs	r3, #5
2400a85e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400a862:	2300      	movs	r3, #0
2400a864:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400a868:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
2400a86a:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
2400a86e:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400a872:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
2400a874:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
2400a878:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
2400a87c:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
2400a87e:	6763      	str	r3, [r4, #116]	; 0x74
  SPI_2LINES(hspi);
2400a880:	6822      	ldr	r2, [r4, #0]
2400a882:	68d3      	ldr	r3, [r2, #12]
2400a884:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400a888:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400a88a:	6822      	ldr	r2, [r4, #0]
2400a88c:	6893      	ldr	r3, [r2, #8]
2400a88e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400a892:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400a894:	68e3      	ldr	r3, [r4, #12]
2400a896:	2b0f      	cmp	r3, #15
2400a898:	d904      	bls.n	2400a8a4 <HAL_SPI_TransmitReceive_DMA+0x74>
2400a89a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
2400a89c:	6992      	ldr	r2, [r2, #24]
2400a89e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400a8a2:	d14b      	bne.n	2400a93c <HAL_SPI_TransmitReceive_DMA+0x10c>
2400a8a4:	2b07      	cmp	r3, #7
2400a8a6:	d907      	bls.n	2400a8b8 <HAL_SPI_TransmitReceive_DMA+0x88>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400a8a8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
2400a8aa:	6992      	ldr	r2, [r2, #24]
2400a8ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400a8b0:	bf18      	it	ne
2400a8b2:	f5b2 4f80 	cmpne.w	r2, #16384	; 0x4000
2400a8b6:	d141      	bne.n	2400a93c <HAL_SPI_TransmitReceive_DMA+0x10c>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2400a8b8:	2b07      	cmp	r3, #7
2400a8ba:	d863      	bhi.n	2400a984 <HAL_SPI_TransmitReceive_DMA+0x154>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400a8bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400a8be:	699a      	ldr	r2, [r3, #24]
2400a8c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400a8c4:	d03e      	beq.n	2400a944 <HAL_SPI_TransmitReceive_DMA+0x114>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400a8c6:	699b      	ldr	r3, [r3, #24]
2400a8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a8cc:	d042      	beq.n	2400a954 <HAL_SPI_TransmitReceive_DMA+0x124>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400a8ce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a8d0:	699a      	ldr	r2, [r3, #24]
2400a8d2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400a8d6:	d045      	beq.n	2400a964 <HAL_SPI_TransmitReceive_DMA+0x134>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400a8d8:	699b      	ldr	r3, [r3, #24]
2400a8da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a8de:	d049      	beq.n	2400a974 <HAL_SPI_TransmitReceive_DMA+0x144>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400a8e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a8e2:	4a62      	ldr	r2, [pc, #392]	; (2400aa6c <HAL_SPI_TransmitReceive_DMA+0x23c>)
2400a8e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400a8e6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a8e8:	4a61      	ldr	r2, [pc, #388]	; (2400aa70 <HAL_SPI_TransmitReceive_DMA+0x240>)
2400a8ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400a8ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a8ee:	4a61      	ldr	r2, [pc, #388]	; (2400aa74 <HAL_SPI_TransmitReceive_DMA+0x244>)
2400a8f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400a8f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a8f4:	2200      	movs	r2, #0
2400a8f6:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400a8f8:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
2400a8fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400a8fe:	b29b      	uxth	r3, r3
2400a900:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400a902:	3130      	adds	r1, #48	; 0x30
2400a904:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400a906:	f7f9 fd15 	bl	24004334 <HAL_DMA_Start_IT>
2400a90a:	2800      	cmp	r0, #0
2400a90c:	d056      	beq.n	2400a9bc <HAL_SPI_TransmitReceive_DMA+0x18c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400a90e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400a912:	f043 0310 	orr.w	r3, r3, #16
2400a916:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
2400a91a:	2300      	movs	r3, #0
2400a91c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
2400a920:	2301      	movs	r3, #1
2400a922:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
2400a926:	e007      	b.n	2400a938 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
2400a928:	2300      	movs	r3, #0
2400a92a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
2400a92e:	2502      	movs	r5, #2
2400a930:	e002      	b.n	2400a938 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
2400a932:	2300      	movs	r3, #0
2400a934:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400a938:	4628      	mov	r0, r5
2400a93a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
2400a93c:	2300      	movs	r3, #0
2400a93e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
2400a942:	e7f9      	b.n	2400a938 <HAL_SPI_TransmitReceive_DMA+0x108>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400a944:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400a948:	b292      	uxth	r2, r2
2400a94a:	3201      	adds	r2, #1
2400a94c:	0852      	lsrs	r2, r2, #1
2400a94e:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
2400a952:	e7b8      	b.n	2400a8c6 <HAL_SPI_TransmitReceive_DMA+0x96>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400a954:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400a958:	b29b      	uxth	r3, r3
2400a95a:	3303      	adds	r3, #3
2400a95c:	089b      	lsrs	r3, r3, #2
2400a95e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
2400a962:	e7b4      	b.n	2400a8ce <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400a964:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400a968:	b292      	uxth	r2, r2
2400a96a:	3201      	adds	r2, #1
2400a96c:	0852      	lsrs	r2, r2, #1
2400a96e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400a972:	e7b1      	b.n	2400a8d8 <HAL_SPI_TransmitReceive_DMA+0xa8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400a974:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400a978:	b29b      	uxth	r3, r3
2400a97a:	3303      	adds	r3, #3
2400a97c:	089b      	lsrs	r3, r3, #2
2400a97e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
2400a982:	e7ad      	b.n	2400a8e0 <HAL_SPI_TransmitReceive_DMA+0xb0>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400a984:	2b0f      	cmp	r3, #15
2400a986:	d8ab      	bhi.n	2400a8e0 <HAL_SPI_TransmitReceive_DMA+0xb0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400a988:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400a98a:	699b      	ldr	r3, [r3, #24]
2400a98c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a990:	d00c      	beq.n	2400a9ac <HAL_SPI_TransmitReceive_DMA+0x17c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400a992:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400a994:	699b      	ldr	r3, [r3, #24]
2400a996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400a99a:	d1a1      	bne.n	2400a8e0 <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400a99c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400a9a0:	b29b      	uxth	r3, r3
2400a9a2:	3301      	adds	r3, #1
2400a9a4:	085b      	lsrs	r3, r3, #1
2400a9a6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
2400a9aa:	e799      	b.n	2400a8e0 <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400a9ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400a9b0:	b29b      	uxth	r3, r3
2400a9b2:	3301      	adds	r3, #1
2400a9b4:	085b      	lsrs	r3, r3, #1
2400a9b6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
2400a9ba:	e7ea      	b.n	2400a992 <HAL_SPI_TransmitReceive_DMA+0x162>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400a9bc:	6822      	ldr	r2, [r4, #0]
2400a9be:	6893      	ldr	r3, [r2, #8]
2400a9c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400a9c4:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400a9c6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
2400a9c8:	2300      	movs	r3, #0
2400a9ca:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400a9cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
2400a9ce:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400a9d0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
2400a9d2:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400a9d4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400a9d6:	4a27      	ldr	r2, [pc, #156]	; (2400aa74 <HAL_SPI_TransmitReceive_DMA+0x244>)
2400a9d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400a9da:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
2400a9dc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400a9e0:	b29b      	uxth	r3, r3
2400a9e2:	3220      	adds	r2, #32
2400a9e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400a9e6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400a9e8:	f7f9 fca4 	bl	24004334 <HAL_DMA_Start_IT>
2400a9ec:	4601      	mov	r1, r0
2400a9ee:	bb10      	cbnz	r0, 2400aa36 <HAL_SPI_TransmitReceive_DMA+0x206>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400a9f0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400a9f2:	69db      	ldr	r3, [r3, #28]
2400a9f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a9f8:	d02a      	beq.n	2400aa50 <HAL_SPI_TransmitReceive_DMA+0x220>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400a9fa:	6822      	ldr	r2, [r4, #0]
2400a9fc:	6850      	ldr	r0, [r2, #4]
2400a9fe:	4b1e      	ldr	r3, [pc, #120]	; (2400aa78 <HAL_SPI_TransmitReceive_DMA+0x248>)
2400aa00:	4003      	ands	r3, r0
2400aa02:	4333      	orrs	r3, r6
2400aa04:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400aa06:	6822      	ldr	r2, [r4, #0]
2400aa08:	6893      	ldr	r3, [r2, #8]
2400aa0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400aa0e:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400aa10:	6822      	ldr	r2, [r4, #0]
2400aa12:	6913      	ldr	r3, [r2, #16]
2400aa14:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400aa18:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400aa1a:	6822      	ldr	r2, [r4, #0]
2400aa1c:	6813      	ldr	r3, [r2, #0]
2400aa1e:	f043 0301 	orr.w	r3, r3, #1
2400aa22:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400aa24:	6863      	ldr	r3, [r4, #4]
2400aa26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400aa2a:	d017      	beq.n	2400aa5c <HAL_SPI_TransmitReceive_DMA+0x22c>
  __HAL_UNLOCK(hspi);
2400aa2c:	2300      	movs	r3, #0
2400aa2e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400aa32:	460d      	mov	r5, r1
2400aa34:	e780      	b.n	2400a938 <HAL_SPI_TransmitReceive_DMA+0x108>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400aa36:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400aa3a:	f043 0310 	orr.w	r3, r3, #16
2400aa3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
2400aa42:	2300      	movs	r3, #0
2400aa44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
2400aa48:	2301      	movs	r3, #1
2400aa4a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
2400aa4e:	e773      	b.n	2400a938 <HAL_SPI_TransmitReceive_DMA+0x108>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400aa50:	6822      	ldr	r2, [r4, #0]
2400aa52:	6850      	ldr	r0, [r2, #4]
2400aa54:	4b08      	ldr	r3, [pc, #32]	; (2400aa78 <HAL_SPI_TransmitReceive_DMA+0x248>)
2400aa56:	4003      	ands	r3, r0
2400aa58:	6053      	str	r3, [r2, #4]
2400aa5a:	e7d4      	b.n	2400aa06 <HAL_SPI_TransmitReceive_DMA+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400aa5c:	6822      	ldr	r2, [r4, #0]
2400aa5e:	6813      	ldr	r3, [r2, #0]
2400aa60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400aa64:	6013      	str	r3, [r2, #0]
2400aa66:	e7e1      	b.n	2400aa2c <HAL_SPI_TransmitReceive_DMA+0x1fc>
  __HAL_LOCK(hspi);
2400aa68:	2502      	movs	r5, #2
2400aa6a:	e765      	b.n	2400a938 <HAL_SPI_TransmitReceive_DMA+0x108>
2400aa6c:	2400aadd 	.word	0x2400aadd
2400aa70:	2400aaa9 	.word	0x2400aaa9
2400aa74:	2400aae9 	.word	0x2400aae9
2400aa78:	ffff0000 	.word	0xffff0000

2400aa7c <HAL_SPI_TxCpltCallback>:
}
2400aa7c:	4770      	bx	lr

2400aa7e <SPI_DMAReceiveCplt>:
{
2400aa7e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400aa80:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400aa82:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400aa86:	b2db      	uxtb	r3, r3
2400aa88:	2b07      	cmp	r3, #7
2400aa8a:	d009      	beq.n	2400aaa0 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400aa8c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400aa8e:	69db      	ldr	r3, [r3, #28]
2400aa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400aa94:	d005      	beq.n	2400aaa2 <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400aa96:	6802      	ldr	r2, [r0, #0]
2400aa98:	6913      	ldr	r3, [r2, #16]
2400aa9a:	f043 0308 	orr.w	r3, r3, #8
2400aa9e:	6113      	str	r3, [r2, #16]
}
2400aaa0:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
2400aaa2:	f024 fa19 	bl	2402eed8 <__HAL_SPI_RxCpltCallback_veneer>
2400aaa6:	e7fb      	b.n	2400aaa0 <SPI_DMAReceiveCplt+0x22>

2400aaa8 <SPI_DMATransmitReceiveCplt>:
{
2400aaa8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400aaaa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400aaac:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400aab0:	b2db      	uxtb	r3, r3
2400aab2:	2b07      	cmp	r3, #7
2400aab4:	d009      	beq.n	2400aaca <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400aab6:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400aab8:	69db      	ldr	r3, [r3, #28]
2400aaba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400aabe:	d005      	beq.n	2400aacc <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400aac0:	6802      	ldr	r2, [r0, #0]
2400aac2:	6913      	ldr	r3, [r2, #16]
2400aac4:	f043 0308 	orr.w	r3, r3, #8
2400aac8:	6113      	str	r3, [r2, #16]
}
2400aaca:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400aacc:	f024 fa18 	bl	2402ef00 <__HAL_SPI_TxRxCpltCallback_veneer>
2400aad0:	e7fb      	b.n	2400aaca <SPI_DMATransmitReceiveCplt+0x22>

2400aad2 <SPI_DMAHalfReceiveCplt>:
{
2400aad2:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
2400aad4:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400aad6:	f024 fa1f 	bl	2402ef18 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
2400aada:	bd08      	pop	{r3, pc}

2400aadc <SPI_DMAHalfTransmitReceiveCplt>:
{
2400aadc:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400aade:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400aae0:	f024 f9fe 	bl	2402eee0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400aae4:	bd08      	pop	{r3, pc}

2400aae6 <HAL_SPI_ErrorCallback>:
}
2400aae6:	4770      	bx	lr

2400aae8 <SPI_DMAError>:
{
2400aae8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400aaea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400aaec:	f7fa fa45 	bl	24004f7a <HAL_DMA_GetError>
2400aaf0:	2802      	cmp	r0, #2
2400aaf2:	d100      	bne.n	2400aaf6 <SPI_DMAError+0xe>
}
2400aaf4:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
2400aaf6:	4620      	mov	r0, r4
2400aaf8:	f7ff fc7e 	bl	2400a3f8 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400aafc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ab00:	f043 0310 	orr.w	r3, r3, #16
2400ab04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ab08:	2301      	movs	r3, #1
2400ab0a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400ab0e:	4620      	mov	r0, r4
2400ab10:	f7ff ffe9 	bl	2400aae6 <HAL_SPI_ErrorCallback>
}
2400ab14:	e7ee      	b.n	2400aaf4 <SPI_DMAError+0xc>

2400ab16 <SPI_DMAAbortOnError>:
{
2400ab16:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400ab18:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400ab1a:	2300      	movs	r3, #0
2400ab1c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400ab20:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400ab24:	2301      	movs	r3, #1
2400ab26:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400ab2a:	f7ff ffdc 	bl	2400aae6 <HAL_SPI_ErrorCallback>
}
2400ab2e:	bd08      	pop	{r3, pc}

2400ab30 <HAL_SPI_SuspendCallback>:
}
2400ab30:	4770      	bx	lr
	...

2400ab34 <HAL_SPI_IRQHandler>:
{
2400ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400ab38:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400ab3a:	6806      	ldr	r6, [r0, #0]
2400ab3c:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400ab3e:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
2400ab40:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
2400ab44:	f8d6 8008 	ldr.w	r8, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
2400ab48:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
2400ab4c:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400ab4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
2400ab52:	d002      	beq.n	2400ab5a <HAL_SPI_IRQHandler+0x26>
2400ab54:	f012 0f08 	tst.w	r2, #8
2400ab58:	d14a      	bne.n	2400abf0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400ab5a:	f005 0364 	and.w	r3, r5, #100	; 0x64
2400ab5e:	2b04      	cmp	r3, #4
2400ab60:	d04d      	beq.n	2400abfe <HAL_SPI_IRQHandler+0xca>
  uint32_t handled  = 0UL;
2400ab62:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400ab64:	f005 0945 	and.w	r9, r5, #69	; 0x45
2400ab68:	f1b9 0f01 	cmp.w	r9, #1
2400ab6c:	d04f      	beq.n	2400ac0e <HAL_SPI_IRQHandler+0xda>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400ab6e:	f005 0226 	and.w	r2, r5, #38	; 0x26
2400ab72:	2a02      	cmp	r2, #2
2400ab74:	d050      	beq.n	2400ac18 <HAL_SPI_IRQHandler+0xe4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400ab76:	f415 6f80 	tst.w	r5, #1024	; 0x400
2400ab7a:	d007      	beq.n	2400ab8c <HAL_SPI_IRQHandler+0x58>
    hspi->Reload.Requested = 0UL;
2400ab7c:	2200      	movs	r2, #0
2400ab7e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400ab82:	6821      	ldr	r1, [r4, #0]
2400ab84:	698a      	ldr	r2, [r1, #24]
2400ab86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400ab8a:	618a      	str	r2, [r1, #24]
  if (handled != 0UL)
2400ab8c:	2b00      	cmp	r3, #0
2400ab8e:	d17f      	bne.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400ab90:	f015 0f08 	tst.w	r5, #8
2400ab94:	d079      	beq.n	2400ac8a <HAL_SPI_IRQHandler+0x156>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400ab96:	6822      	ldr	r2, [r4, #0]
2400ab98:	6993      	ldr	r3, [r2, #24]
2400ab9a:	f043 0308 	orr.w	r3, r3, #8
2400ab9e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400aba0:	6822      	ldr	r2, [r4, #0]
2400aba2:	6993      	ldr	r3, [r2, #24]
2400aba4:	f043 0310 	orr.w	r3, r3, #16
2400aba8:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400abaa:	6822      	ldr	r2, [r4, #0]
2400abac:	6993      	ldr	r3, [r2, #24]
2400abae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400abb2:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400abb4:	6822      	ldr	r2, [r4, #0]
2400abb6:	6913      	ldr	r3, [r2, #16]
2400abb8:	f023 0308 	bic.w	r3, r3, #8
2400abbc:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400abbe:	6823      	ldr	r3, [r4, #0]
2400abc0:	689b      	ldr	r3, [r3, #8]
2400abc2:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400abc6:	d03b      	beq.n	2400ac40 <HAL_SPI_IRQHandler+0x10c>
    SPI_CloseTransfer(hspi);
2400abc8:	4620      	mov	r0, r4
2400abca:	f7ff fc15 	bl	2400a3f8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400abce:	2301      	movs	r3, #1
2400abd0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400abd4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400abd8:	2b00      	cmp	r3, #0
2400abda:	d14a      	bne.n	2400ac72 <HAL_SPI_IRQHandler+0x13e>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400abdc:	2f05      	cmp	r7, #5
2400abde:	d04c      	beq.n	2400ac7a <HAL_SPI_IRQHandler+0x146>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400abe0:	2f04      	cmp	r7, #4
2400abe2:	d04e      	beq.n	2400ac82 <HAL_SPI_IRQHandler+0x14e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400abe4:	2f03      	cmp	r7, #3
2400abe6:	d153      	bne.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
      HAL_SPI_TxCpltCallback(hspi);
2400abe8:	4620      	mov	r0, r4
2400abea:	f7ff ff47 	bl	2400aa7c <HAL_SPI_TxCpltCallback>
    return;
2400abee:	e04f      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400abf0:	69b3      	ldr	r3, [r6, #24]
2400abf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400abf6:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
2400abf8:	f7ff ff9a 	bl	2400ab30 <HAL_SPI_SuspendCallback>
    return;
2400abfc:	e048      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
    hspi->TxISR(hspi);
2400abfe:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400ac00:	4620      	mov	r0, r4
2400ac02:	4798      	blx	r3
    hspi->RxISR(hspi);
2400ac04:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400ac06:	4620      	mov	r0, r4
2400ac08:	4798      	blx	r3
    handled = 1UL;
2400ac0a:	2301      	movs	r3, #1
2400ac0c:	e7aa      	b.n	2400ab64 <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
2400ac0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400ac10:	4620      	mov	r0, r4
2400ac12:	4798      	blx	r3
    handled = 1UL;
2400ac14:	464b      	mov	r3, r9
2400ac16:	e7aa      	b.n	2400ab6e <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
2400ac18:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400ac1a:	4620      	mov	r0, r4
2400ac1c:	4798      	blx	r3
    handled = 1UL;
2400ac1e:	2301      	movs	r3, #1
2400ac20:	e7a9      	b.n	2400ab76 <HAL_SPI_IRQHandler+0x42>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400ac22:	2b07      	cmp	r3, #7
2400ac24:	d91c      	bls.n	2400ac60 <HAL_SPI_IRQHandler+0x12c>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400ac26:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400ac28:	8e32      	ldrh	r2, [r6, #48]	; 0x30
2400ac2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400ac2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400ac2e:	3302      	adds	r3, #2
2400ac30:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400ac32:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400ac36:	b29b      	uxth	r3, r3
2400ac38:	3b01      	subs	r3, #1
2400ac3a:	b29b      	uxth	r3, r3
2400ac3c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400ac40:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400ac44:	b29b      	uxth	r3, r3
2400ac46:	2b00      	cmp	r3, #0
2400ac48:	d0be      	beq.n	2400abc8 <HAL_SPI_IRQHandler+0x94>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400ac4a:	68e3      	ldr	r3, [r4, #12]
2400ac4c:	2b0f      	cmp	r3, #15
2400ac4e:	d9e8      	bls.n	2400ac22 <HAL_SPI_IRQHandler+0xee>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400ac50:	6822      	ldr	r2, [r4, #0]
2400ac52:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400ac54:	6b12      	ldr	r2, [r2, #48]	; 0x30
2400ac56:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400ac58:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400ac5a:	3304      	adds	r3, #4
2400ac5c:	6663      	str	r3, [r4, #100]	; 0x64
2400ac5e:	e7e8      	b.n	2400ac32 <HAL_SPI_IRQHandler+0xfe>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400ac60:	6822      	ldr	r2, [r4, #0]
2400ac62:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400ac64:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
2400ac68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400ac6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
2400ac6c:	3301      	adds	r3, #1
2400ac6e:	6663      	str	r3, [r4, #100]	; 0x64
2400ac70:	e7df      	b.n	2400ac32 <HAL_SPI_IRQHandler+0xfe>
      HAL_SPI_ErrorCallback(hspi);
2400ac72:	4620      	mov	r0, r4
2400ac74:	f7ff ff37 	bl	2400aae6 <HAL_SPI_ErrorCallback>
      return;
2400ac78:	e00a      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
      HAL_SPI_TxRxCpltCallback(hspi);
2400ac7a:	4620      	mov	r0, r4
2400ac7c:	f024 f940 	bl	2402ef00 <__HAL_SPI_TxRxCpltCallback_veneer>
2400ac80:	e006      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
      HAL_SPI_RxCpltCallback(hspi);
2400ac82:	4620      	mov	r0, r4
2400ac84:	f024 f928 	bl	2402eed8 <__HAL_SPI_RxCpltCallback_veneer>
2400ac88:	e002      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400ac8a:	f415 7f58 	tst.w	r5, #864	; 0x360
2400ac8e:	d101      	bne.n	2400ac94 <HAL_SPI_IRQHandler+0x160>
}
2400ac90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400ac94:	f015 0f40 	tst.w	r5, #64	; 0x40
2400ac98:	d00a      	beq.n	2400acb0 <HAL_SPI_IRQHandler+0x17c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ac9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ac9e:	f043 0304 	orr.w	r3, r3, #4
2400aca2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400aca6:	6822      	ldr	r2, [r4, #0]
2400aca8:	6993      	ldr	r3, [r2, #24]
2400acaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400acae:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400acb0:	f415 7f00 	tst.w	r5, #512	; 0x200
2400acb4:	d00a      	beq.n	2400accc <HAL_SPI_IRQHandler+0x198>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400acb6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400acba:	f043 0301 	orr.w	r3, r3, #1
2400acbe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400acc2:	6822      	ldr	r2, [r4, #0]
2400acc4:	6993      	ldr	r3, [r2, #24]
2400acc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400acca:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400accc:	f415 7f80 	tst.w	r5, #256	; 0x100
2400acd0:	d00a      	beq.n	2400ace8 <HAL_SPI_IRQHandler+0x1b4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400acd2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400acd6:	f043 0308 	orr.w	r3, r3, #8
2400acda:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400acde:	6822      	ldr	r2, [r4, #0]
2400ace0:	6993      	ldr	r3, [r2, #24]
2400ace2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400ace6:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400ace8:	f015 0f20 	tst.w	r5, #32
2400acec:	d00a      	beq.n	2400ad04 <HAL_SPI_IRQHandler+0x1d0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400acee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400acf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400acf6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400acfa:	6822      	ldr	r2, [r4, #0]
2400acfc:	6993      	ldr	r3, [r2, #24]
2400acfe:	f043 0320 	orr.w	r3, r3, #32
2400ad02:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400ad04:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ad08:	2b00      	cmp	r3, #0
2400ad0a:	d0c1      	beq.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
      __HAL_SPI_DISABLE(hspi);
2400ad0c:	6822      	ldr	r2, [r4, #0]
2400ad0e:	6813      	ldr	r3, [r2, #0]
2400ad10:	f023 0301 	bic.w	r3, r3, #1
2400ad14:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400ad16:	6822      	ldr	r2, [r4, #0]
2400ad18:	6911      	ldr	r1, [r2, #16]
2400ad1a:	4b19      	ldr	r3, [pc, #100]	; (2400ad80 <HAL_SPI_IRQHandler+0x24c>)
2400ad1c:	400b      	ands	r3, r1
2400ad1e:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400ad20:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
2400ad24:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
2400ad28:	d123      	bne.n	2400ad72 <HAL_SPI_IRQHandler+0x23e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400ad2a:	6822      	ldr	r2, [r4, #0]
2400ad2c:	6893      	ldr	r3, [r2, #8]
2400ad2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400ad32:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400ad34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ad36:	b15b      	cbz	r3, 2400ad50 <HAL_SPI_IRQHandler+0x21c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400ad38:	4a12      	ldr	r2, [pc, #72]	; (2400ad84 <HAL_SPI_IRQHandler+0x250>)
2400ad3a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400ad3c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400ad3e:	f7f9 fc45 	bl	240045cc <HAL_DMA_Abort_IT>
2400ad42:	b128      	cbz	r0, 2400ad50 <HAL_SPI_IRQHandler+0x21c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400ad44:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ad48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400ad4c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400ad50:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400ad52:	2b00      	cmp	r3, #0
2400ad54:	d09c      	beq.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400ad56:	4a0b      	ldr	r2, [pc, #44]	; (2400ad84 <HAL_SPI_IRQHandler+0x250>)
2400ad58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400ad5a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400ad5c:	f7f9 fc36 	bl	240045cc <HAL_DMA_Abort_IT>
2400ad60:	2800      	cmp	r0, #0
2400ad62:	d095      	beq.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400ad64:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400ad6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400ad70:	e78e      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
        hspi->State = HAL_SPI_STATE_READY;
2400ad72:	2301      	movs	r3, #1
2400ad74:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400ad78:	4620      	mov	r0, r4
2400ad7a:	f7ff feb4 	bl	2400aae6 <HAL_SPI_ErrorCallback>
    return;
2400ad7e:	e787      	b.n	2400ac90 <HAL_SPI_IRQHandler+0x15c>
2400ad80:	fffffc94 	.word	0xfffffc94
2400ad84:	2400ab17 	.word	0x2400ab17

2400ad88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
2400ad88:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400ad8a:	680b      	ldr	r3, [r1, #0]
2400ad8c:	b9cb      	cbnz	r3, 2400adc2 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400ad8e:	6803      	ldr	r3, [r0, #0]
2400ad90:	4a19      	ldr	r2, [pc, #100]	; (2400adf8 <FMC_SDRAM_Init+0x70>)
2400ad92:	401a      	ands	r2, r3
2400ad94:	684b      	ldr	r3, [r1, #4]
2400ad96:	688c      	ldr	r4, [r1, #8]
2400ad98:	4323      	orrs	r3, r4
2400ad9a:	68cc      	ldr	r4, [r1, #12]
2400ad9c:	4323      	orrs	r3, r4
2400ad9e:	690c      	ldr	r4, [r1, #16]
2400ada0:	4323      	orrs	r3, r4
2400ada2:	694c      	ldr	r4, [r1, #20]
2400ada4:	4323      	orrs	r3, r4
2400ada6:	698c      	ldr	r4, [r1, #24]
2400ada8:	4323      	orrs	r3, r4
2400adaa:	69cc      	ldr	r4, [r1, #28]
2400adac:	4323      	orrs	r3, r4
2400adae:	6a0c      	ldr	r4, [r1, #32]
2400adb0:	4323      	orrs	r3, r4
2400adb2:	6a49      	ldr	r1, [r1, #36]	; 0x24
2400adb4:	430b      	orrs	r3, r1
2400adb6:	4313      	orrs	r3, r2
2400adb8:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400adba:	2000      	movs	r0, #0
2400adbc:	f85d 4b04 	ldr.w	r4, [sp], #4
2400adc0:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400adc2:	6803      	ldr	r3, [r0, #0]
2400adc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
2400adc8:	69ca      	ldr	r2, [r1, #28]
2400adca:	6a0c      	ldr	r4, [r1, #32]
2400adcc:	4322      	orrs	r2, r4
2400adce:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400add0:	4322      	orrs	r2, r4
2400add2:	4313      	orrs	r3, r2
2400add4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400add6:	6843      	ldr	r3, [r0, #4]
2400add8:	4a07      	ldr	r2, [pc, #28]	; (2400adf8 <FMC_SDRAM_Init+0x70>)
2400adda:	401a      	ands	r2, r3
2400addc:	684b      	ldr	r3, [r1, #4]
2400adde:	688c      	ldr	r4, [r1, #8]
2400ade0:	4323      	orrs	r3, r4
2400ade2:	68cc      	ldr	r4, [r1, #12]
2400ade4:	4323      	orrs	r3, r4
2400ade6:	690c      	ldr	r4, [r1, #16]
2400ade8:	4323      	orrs	r3, r4
2400adea:	694c      	ldr	r4, [r1, #20]
2400adec:	4323      	orrs	r3, r4
2400adee:	6989      	ldr	r1, [r1, #24]
2400adf0:	430b      	orrs	r3, r1
2400adf2:	4313      	orrs	r3, r2
2400adf4:	6043      	str	r3, [r0, #4]
2400adf6:	e7e0      	b.n	2400adba <FMC_SDRAM_Init+0x32>
2400adf8:	ffff8000 	.word	0xffff8000

2400adfc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400adfc:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400adfe:	bb3a      	cbnz	r2, 2400ae50 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400ae00:	6882      	ldr	r2, [r0, #8]
2400ae02:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
2400ae06:	680b      	ldr	r3, [r1, #0]
2400ae08:	3b01      	subs	r3, #1
2400ae0a:	684c      	ldr	r4, [r1, #4]
2400ae0c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae10:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
2400ae14:	688c      	ldr	r4, [r1, #8]
2400ae16:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae1a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400ae1e:	68cc      	ldr	r4, [r1, #12]
2400ae20:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae24:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
2400ae28:	690c      	ldr	r4, [r1, #16]
2400ae2a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae2e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
2400ae32:	694c      	ldr	r4, [r1, #20]
2400ae34:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae38:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
2400ae3c:	6989      	ldr	r1, [r1, #24]
2400ae3e:	3901      	subs	r1, #1
2400ae40:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400ae44:	4313      	orrs	r3, r2
2400ae46:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400ae48:	2000      	movs	r0, #0
2400ae4a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ae4e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400ae50:	6883      	ldr	r3, [r0, #8]
2400ae52:	4a13      	ldr	r2, [pc, #76]	; (2400aea0 <FMC_SDRAM_Timing_Init+0xa4>)
2400ae54:	401a      	ands	r2, r3
2400ae56:	68cb      	ldr	r3, [r1, #12]
2400ae58:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400ae5c:	694b      	ldr	r3, [r1, #20]
2400ae5e:	3b01      	subs	r3, #1
2400ae60:	051b      	lsls	r3, r3, #20
2400ae62:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
2400ae66:	4313      	orrs	r3, r2
2400ae68:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400ae6a:	68c2      	ldr	r2, [r0, #12]
2400ae6c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
2400ae70:	680b      	ldr	r3, [r1, #0]
2400ae72:	3b01      	subs	r3, #1
2400ae74:	684c      	ldr	r4, [r1, #4]
2400ae76:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae7a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
2400ae7e:	688c      	ldr	r4, [r1, #8]
2400ae80:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae84:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400ae88:	690c      	ldr	r4, [r1, #16]
2400ae8a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400ae8e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
2400ae92:	6989      	ldr	r1, [r1, #24]
2400ae94:	3901      	subs	r1, #1
2400ae96:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400ae9a:	4313      	orrs	r3, r2
2400ae9c:	60c3      	str	r3, [r0, #12]
2400ae9e:	e7d3      	b.n	2400ae48 <FMC_SDRAM_Timing_Init+0x4c>
2400aea0:	ff0f0fff 	.word	0xff0f0fff

2400aea4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400aea4:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400aea6:	6903      	ldr	r3, [r0, #16]
2400aea8:	4a09      	ldr	r2, [pc, #36]	; (2400aed0 <FMC_SDRAM_SendCommand+0x2c>)
2400aeaa:	401a      	ands	r2, r3
2400aeac:	680b      	ldr	r3, [r1, #0]
2400aeae:	684c      	ldr	r4, [r1, #4]
2400aeb0:	4323      	orrs	r3, r4
2400aeb2:	688c      	ldr	r4, [r1, #8]
2400aeb4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
2400aeb8:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
2400aebc:	68c9      	ldr	r1, [r1, #12]
2400aebe:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
2400aec2:	4313      	orrs	r3, r2
2400aec4:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400aec6:	2000      	movs	r0, #0
2400aec8:	f85d 4b04 	ldr.w	r4, [sp], #4
2400aecc:	4770      	bx	lr
2400aece:	bf00      	nop
2400aed0:	ffc00000 	.word	0xffc00000

2400aed4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400aed4:	6942      	ldr	r2, [r0, #20]
2400aed6:	4b03      	ldr	r3, [pc, #12]	; (2400aee4 <FMC_SDRAM_ProgramRefreshRate+0x10>)
2400aed8:	4013      	ands	r3, r2
2400aeda:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
2400aede:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
2400aee0:	2000      	movs	r0, #0
2400aee2:	4770      	bx	lr
2400aee4:	ffffc001 	.word	0xffffc001

2400aee8 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400aee8:	4b0b      	ldr	r3, [pc, #44]	; (2400af18 <SDMMC_GetCmdError+0x30>)
2400aeea:	681b      	ldr	r3, [r3, #0]
2400aeec:	4a0b      	ldr	r2, [pc, #44]	; (2400af1c <SDMMC_GetCmdError+0x34>)
2400aeee:	fba2 2303 	umull	r2, r3, r2, r3
2400aef2:	0a5b      	lsrs	r3, r3, #9
2400aef4:	f241 3288 	movw	r2, #5000	; 0x1388
2400aef8:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
2400aefc:	461a      	mov	r2, r3
2400aefe:	3b01      	subs	r3, #1
2400af00:	b13a      	cbz	r2, 2400af12 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400af02:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400af04:	f012 0f80 	tst.w	r2, #128	; 0x80
2400af08:	d0f8      	beq.n	2400aefc <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400af0a:	4b05      	ldr	r3, [pc, #20]	; (2400af20 <SDMMC_GetCmdError+0x38>)
2400af0c:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
2400af0e:	2000      	movs	r0, #0
2400af10:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
2400af12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400af16:	4770      	bx	lr
2400af18:	20000750 	.word	0x20000750
2400af1c:	10624dd3 	.word	0x10624dd3
2400af20:	002000c5 	.word	0x002000c5

2400af24 <SDMMC_Init>:
{
2400af24:	b084      	sub	sp, #16
2400af26:	f10d 0c04 	add.w	ip, sp, #4
2400af2a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400af2e:	460b      	mov	r3, r1
2400af30:	4313      	orrs	r3, r2
             Init.BusWide             | \
2400af32:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
2400af34:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
2400af36:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
2400af38:	4313      	orrs	r3, r2
             Init.ClockDiv
2400af3a:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
2400af3c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400af3e:	6841      	ldr	r1, [r0, #4]
2400af40:	4a03      	ldr	r2, [pc, #12]	; (2400af50 <SDMMC_Init+0x2c>)
2400af42:	400a      	ands	r2, r1
2400af44:	4313      	orrs	r3, r2
2400af46:	6043      	str	r3, [r0, #4]
}
2400af48:	2000      	movs	r0, #0
2400af4a:	b004      	add	sp, #16
2400af4c:	4770      	bx	lr
2400af4e:	bf00      	nop
2400af50:	ffc02c00 	.word	0xffc02c00

2400af54 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
2400af54:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400af58:	4770      	bx	lr

2400af5a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
2400af5a:	680b      	ldr	r3, [r1, #0]
2400af5c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
2400af60:	2000      	movs	r0, #0
2400af62:	4770      	bx	lr

2400af64 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400af64:	6803      	ldr	r3, [r0, #0]
2400af66:	f043 0303 	orr.w	r3, r3, #3
2400af6a:	6003      	str	r3, [r0, #0]
}
2400af6c:	2000      	movs	r0, #0
2400af6e:	4770      	bx	lr

2400af70 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400af70:	6800      	ldr	r0, [r0, #0]
}
2400af72:	f000 0003 	and.w	r0, r0, #3
2400af76:	4770      	bx	lr

2400af78 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
2400af78:	680b      	ldr	r3, [r1, #0]
2400af7a:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
2400af7c:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
2400af7e:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
2400af80:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
2400af82:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
2400af84:	4313      	orrs	r3, r2
                       Command->CPSM);
2400af86:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
2400af88:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400af8a:	68c1      	ldr	r1, [r0, #12]
2400af8c:	4a02      	ldr	r2, [pc, #8]	; (2400af98 <SDMMC_SendCommand+0x20>)
2400af8e:	400a      	ands	r2, r1
2400af90:	4313      	orrs	r3, r2
2400af92:	60c3      	str	r3, [r0, #12]
}
2400af94:	2000      	movs	r0, #0
2400af96:	4770      	bx	lr
2400af98:	fffee0c0 	.word	0xfffee0c0

2400af9c <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
2400af9c:	6900      	ldr	r0, [r0, #16]
}
2400af9e:	b2c0      	uxtb	r0, r0
2400afa0:	4770      	bx	lr

2400afa2 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400afa2:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
2400afa4:	5840      	ldr	r0, [r0, r1]
}
2400afa6:	4770      	bx	lr

2400afa8 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
2400afa8:	680b      	ldr	r3, [r1, #0]
2400afaa:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
2400afac:	684b      	ldr	r3, [r1, #4]
2400afae:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400afb0:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
2400afb2:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400afb4:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
2400afb6:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
2400afb8:	4313      	orrs	r3, r2
                       Data->DPSM);
2400afba:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
2400afbc:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400afbe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
2400afc0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400afc4:	4313      	orrs	r3, r2
2400afc6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
2400afc8:	2000      	movs	r0, #0
2400afca:	4770      	bx	lr

2400afcc <SDMMC_CmdGoIdleState>:
{
2400afcc:	b510      	push	{r4, lr}
2400afce:	b086      	sub	sp, #24
2400afd0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
2400afd2:	2300      	movs	r3, #0
2400afd4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
2400afd6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
2400afd8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400afda:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400afdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400afe0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400afe2:	a901      	add	r1, sp, #4
2400afe4:	f7ff ffc8 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
2400afe8:	4620      	mov	r0, r4
2400afea:	f7ff ff7d 	bl	2400aee8 <SDMMC_GetCmdError>
}
2400afee:	b006      	add	sp, #24
2400aff0:	bd10      	pop	{r4, pc}
	...

2400aff4 <SDMMC_GetCmdResp1>:
{
2400aff4:	b570      	push	{r4, r5, r6, lr}
2400aff6:	4605      	mov	r5, r0
2400aff8:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400affa:	4b51      	ldr	r3, [pc, #324]	; (2400b140 <SDMMC_GetCmdResp1+0x14c>)
2400affc:	681b      	ldr	r3, [r3, #0]
2400affe:	4951      	ldr	r1, [pc, #324]	; (2400b144 <SDMMC_GetCmdResp1+0x150>)
2400b000:	fba1 1303 	umull	r1, r3, r1, r3
2400b004:	0a5b      	lsrs	r3, r3, #9
2400b006:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
2400b00a:	4613      	mov	r3, r2
2400b00c:	3a01      	subs	r2, #1
2400b00e:	2b00      	cmp	r3, #0
2400b010:	d05e      	beq.n	2400b0d0 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
2400b012:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b014:	4b4c      	ldr	r3, [pc, #304]	; (2400b148 <SDMMC_GetCmdResp1+0x154>)
2400b016:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b018:	2b00      	cmp	r3, #0
2400b01a:	d0f6      	beq.n	2400b00a <SDMMC_GetCmdResp1+0x16>
2400b01c:	f414 5f00 	tst.w	r4, #8192	; 0x2000
2400b020:	d1f3      	bne.n	2400b00a <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b022:	6b6b      	ldr	r3, [r5, #52]	; 0x34
2400b024:	f013 0f04 	tst.w	r3, #4
2400b028:	d106      	bne.n	2400b038 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b02a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
2400b02c:	f013 0f01 	tst.w	r3, #1
2400b030:	d005      	beq.n	2400b03e <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b032:	2001      	movs	r0, #1
2400b034:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b036:	e04d      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b038:	2004      	movs	r0, #4
2400b03a:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b03c:	e04a      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b03e:	4b43      	ldr	r3, [pc, #268]	; (2400b14c <SDMMC_GetCmdResp1+0x158>)
2400b040:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b042:	4628      	mov	r0, r5
2400b044:	f7ff ffaa 	bl	2400af9c <SDMMC_GetCommandResponse>
2400b048:	42b0      	cmp	r0, r6
2400b04a:	d001      	beq.n	2400b050 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b04c:	2001      	movs	r0, #1
2400b04e:	e041      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
2400b050:	2100      	movs	r1, #0
2400b052:	4628      	mov	r0, r5
2400b054:	f7ff ffa5 	bl	2400afa2 <SDMMC_GetResponse>
2400b058:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b05a:	483d      	ldr	r0, [pc, #244]	; (2400b150 <SDMMC_GetCmdResp1+0x15c>)
2400b05c:	4018      	ands	r0, r3
2400b05e:	b3c8      	cbz	r0, 2400b0d4 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b060:	2b00      	cmp	r3, #0
2400b062:	db38      	blt.n	2400b0d6 <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b064:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
2400b068:	d138      	bne.n	2400b0dc <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b06a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
2400b06e:	d137      	bne.n	2400b0e0 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b070:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
2400b074:	d136      	bne.n	2400b0e4 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b076:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
2400b07a:	d136      	bne.n	2400b0ea <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b07c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
2400b080:	d136      	bne.n	2400b0f0 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b082:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
2400b086:	d136      	bne.n	2400b0f6 <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b088:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
2400b08c:	d136      	bne.n	2400b0fc <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b08e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
2400b092:	d136      	bne.n	2400b102 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b094:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
2400b098:	d136      	bne.n	2400b108 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b09a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
2400b09e:	d136      	bne.n	2400b10e <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b0a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
2400b0a4:	d136      	bne.n	2400b114 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b0a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
2400b0aa:	d136      	bne.n	2400b11a <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b0ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
2400b0b0:	d136      	bne.n	2400b120 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b0b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400b0b6:	d136      	bne.n	2400b126 <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b0b8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
2400b0bc:	d136      	bne.n	2400b12c <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b0be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
2400b0c2:	d136      	bne.n	2400b132 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400b0c4:	f013 0f08 	tst.w	r3, #8
2400b0c8:	d036      	beq.n	2400b138 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400b0ca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
2400b0ce:	e001      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
2400b0d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400b0d4:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b0d6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400b0da:	e7fb      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b0dc:	2040      	movs	r0, #64	; 0x40
2400b0de:	e7f9      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b0e0:	2080      	movs	r0, #128	; 0x80
2400b0e2:	e7f7      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b0e4:	f44f 7080 	mov.w	r0, #256	; 0x100
2400b0e8:	e7f4      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b0ea:	f44f 7000 	mov.w	r0, #512	; 0x200
2400b0ee:	e7f1      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b0f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400b0f4:	e7ee      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b0f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b0fa:	e7eb      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b0fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400b100:	e7e8      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b102:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400b106:	e7e5      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b108:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400b10c:	e7e2      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
2400b10e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400b112:	e7df      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b114:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400b118:	e7dc      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b11a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400b11e:	e7d9      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b120:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400b124:	e7d6      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400b12a:	e7d3      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b12c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400b130:	e7d0      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
2400b132:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400b136:	e7cd      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b138:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400b13c:	e7ca      	b.n	2400b0d4 <SDMMC_GetCmdResp1+0xe0>
2400b13e:	bf00      	nop
2400b140:	20000750 	.word	0x20000750
2400b144:	10624dd3 	.word	0x10624dd3
2400b148:	00200045 	.word	0x00200045
2400b14c:	002000c5 	.word	0x002000c5
2400b150:	fdffe008 	.word	0xfdffe008

2400b154 <SDMMC_CmdBlockLength>:
{
2400b154:	b530      	push	{r4, r5, lr}
2400b156:	b087      	sub	sp, #28
2400b158:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
2400b15a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
2400b15c:	2510      	movs	r5, #16
2400b15e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b160:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b164:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b166:	2300      	movs	r3, #0
2400b168:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b16a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b16e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b170:	a901      	add	r1, sp, #4
2400b172:	f7ff ff01 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
2400b176:	f241 3288 	movw	r2, #5000	; 0x1388
2400b17a:	4629      	mov	r1, r5
2400b17c:	4620      	mov	r0, r4
2400b17e:	f7ff ff39 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b182:	b007      	add	sp, #28
2400b184:	bd30      	pop	{r4, r5, pc}

2400b186 <SDMMC_CmdReadSingleBlock>:
{
2400b186:	b530      	push	{r4, r5, lr}
2400b188:	b087      	sub	sp, #28
2400b18a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
2400b18c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
2400b18e:	2511      	movs	r5, #17
2400b190:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b192:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b196:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b198:	2300      	movs	r3, #0
2400b19a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b1a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b1a2:	a901      	add	r1, sp, #4
2400b1a4:	f7ff fee8 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
2400b1a8:	f241 3288 	movw	r2, #5000	; 0x1388
2400b1ac:	4629      	mov	r1, r5
2400b1ae:	4620      	mov	r0, r4
2400b1b0:	f7ff ff20 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b1b4:	b007      	add	sp, #28
2400b1b6:	bd30      	pop	{r4, r5, pc}

2400b1b8 <SDMMC_CmdReadMultiBlock>:
{
2400b1b8:	b530      	push	{r4, r5, lr}
2400b1ba:	b087      	sub	sp, #28
2400b1bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
2400b1be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
2400b1c0:	2512      	movs	r5, #18
2400b1c2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b1c4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b1c8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b1ca:	2300      	movs	r3, #0
2400b1cc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b1ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b1d2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b1d4:	a901      	add	r1, sp, #4
2400b1d6:	f7ff fecf 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
2400b1da:	f241 3288 	movw	r2, #5000	; 0x1388
2400b1de:	4629      	mov	r1, r5
2400b1e0:	4620      	mov	r0, r4
2400b1e2:	f7ff ff07 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b1e6:	b007      	add	sp, #28
2400b1e8:	bd30      	pop	{r4, r5, pc}

2400b1ea <SDMMC_CmdWriteSingleBlock>:
{
2400b1ea:	b530      	push	{r4, r5, lr}
2400b1ec:	b087      	sub	sp, #28
2400b1ee:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
2400b1f0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
2400b1f2:	2518      	movs	r5, #24
2400b1f4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b1f6:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b1fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b1fc:	2300      	movs	r3, #0
2400b1fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b204:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b206:	a901      	add	r1, sp, #4
2400b208:	f7ff feb6 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
2400b20c:	f241 3288 	movw	r2, #5000	; 0x1388
2400b210:	4629      	mov	r1, r5
2400b212:	4620      	mov	r0, r4
2400b214:	f7ff feee 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b218:	b007      	add	sp, #28
2400b21a:	bd30      	pop	{r4, r5, pc}

2400b21c <SDMMC_CmdWriteMultiBlock>:
{
2400b21c:	b530      	push	{r4, r5, lr}
2400b21e:	b087      	sub	sp, #28
2400b220:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
2400b222:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
2400b224:	2519      	movs	r5, #25
2400b226:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b228:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b22c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b22e:	2300      	movs	r3, #0
2400b230:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b236:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b238:	a901      	add	r1, sp, #4
2400b23a:	f7ff fe9d 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
2400b23e:	f241 3288 	movw	r2, #5000	; 0x1388
2400b242:	4629      	mov	r1, r5
2400b244:	4620      	mov	r0, r4
2400b246:	f7ff fed5 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b24a:	b007      	add	sp, #28
2400b24c:	bd30      	pop	{r4, r5, pc}
	...

2400b250 <SDMMC_CmdStopTransfer>:
{
2400b250:	b530      	push	{r4, r5, lr}
2400b252:	b087      	sub	sp, #28
2400b254:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
2400b256:	2300      	movs	r3, #0
2400b258:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
2400b25a:	250c      	movs	r5, #12
2400b25c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b25e:	f44f 7280 	mov.w	r2, #256	; 0x100
2400b262:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b264:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b26a:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400b26c:	68c3      	ldr	r3, [r0, #12]
2400b26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b272:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400b274:	68c3      	ldr	r3, [r0, #12]
2400b276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400b27a:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b27c:	a901      	add	r1, sp, #4
2400b27e:	f7ff fe7b 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
2400b282:	4a08      	ldr	r2, [pc, #32]	; (2400b2a4 <SDMMC_CmdStopTransfer+0x54>)
2400b284:	4629      	mov	r1, r5
2400b286:	4620      	mov	r0, r4
2400b288:	f7ff feb4 	bl	2400aff4 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400b28c:	68e3      	ldr	r3, [r4, #12]
2400b28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400b292:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400b294:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
2400b298:	d001      	beq.n	2400b29e <SDMMC_CmdStopTransfer+0x4e>
}
2400b29a:	b007      	add	sp, #28
2400b29c:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
2400b29e:	2000      	movs	r0, #0
  return errorstate;
2400b2a0:	e7fb      	b.n	2400b29a <SDMMC_CmdStopTransfer+0x4a>
2400b2a2:	bf00      	nop
2400b2a4:	05f5e100 	.word	0x05f5e100

2400b2a8 <SDMMC_CmdSelDesel>:
{
2400b2a8:	b530      	push	{r4, r5, lr}
2400b2aa:	b087      	sub	sp, #28
2400b2ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
2400b2ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
2400b2b0:	2507      	movs	r5, #7
2400b2b2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b2b4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b2b8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b2ba:	2300      	movs	r3, #0
2400b2bc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b2be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b2c2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b2c4:	a901      	add	r1, sp, #4
2400b2c6:	f7ff fe57 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
2400b2ca:	f241 3288 	movw	r2, #5000	; 0x1388
2400b2ce:	4629      	mov	r1, r5
2400b2d0:	4620      	mov	r0, r4
2400b2d2:	f7ff fe8f 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b2d6:	b007      	add	sp, #28
2400b2d8:	bd30      	pop	{r4, r5, pc}

2400b2da <SDMMC_CmdAppCommand>:
{
2400b2da:	b530      	push	{r4, r5, lr}
2400b2dc:	b087      	sub	sp, #28
2400b2de:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
2400b2e0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
2400b2e2:	2537      	movs	r5, #55	; 0x37
2400b2e4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b2e6:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b2ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b2ec:	2300      	movs	r3, #0
2400b2ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b2f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b2f4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b2f6:	a901      	add	r1, sp, #4
2400b2f8:	f7ff fe3e 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
2400b2fc:	f241 3288 	movw	r2, #5000	; 0x1388
2400b300:	4629      	mov	r1, r5
2400b302:	4620      	mov	r0, r4
2400b304:	f7ff fe76 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b308:	b007      	add	sp, #28
2400b30a:	bd30      	pop	{r4, r5, pc}

2400b30c <SDMMC_CmdBusWidth>:
{
2400b30c:	b530      	push	{r4, r5, lr}
2400b30e:	b087      	sub	sp, #28
2400b310:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
2400b312:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
2400b314:	2506      	movs	r5, #6
2400b316:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b318:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b31c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b31e:	2300      	movs	r3, #0
2400b320:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b326:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b328:	a901      	add	r1, sp, #4
2400b32a:	f7ff fe25 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
2400b32e:	f241 3288 	movw	r2, #5000	; 0x1388
2400b332:	4629      	mov	r1, r5
2400b334:	4620      	mov	r0, r4
2400b336:	f7ff fe5d 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b33a:	b007      	add	sp, #28
2400b33c:	bd30      	pop	{r4, r5, pc}

2400b33e <SDMMC_CmdSendSCR>:
{
2400b33e:	b530      	push	{r4, r5, lr}
2400b340:	b087      	sub	sp, #28
2400b342:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
2400b344:	2300      	movs	r3, #0
2400b346:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
2400b348:	2533      	movs	r5, #51	; 0x33
2400b34a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b34c:	f44f 7280 	mov.w	r2, #256	; 0x100
2400b350:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b352:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b358:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b35a:	a901      	add	r1, sp, #4
2400b35c:	f7ff fe0c 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
2400b360:	f241 3288 	movw	r2, #5000	; 0x1388
2400b364:	4629      	mov	r1, r5
2400b366:	4620      	mov	r0, r4
2400b368:	f7ff fe44 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b36c:	b007      	add	sp, #28
2400b36e:	bd30      	pop	{r4, r5, pc}

2400b370 <SDMMC_CmdSendStatus>:
{
2400b370:	b530      	push	{r4, r5, lr}
2400b372:	b087      	sub	sp, #28
2400b374:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
2400b376:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
2400b378:	250d      	movs	r5, #13
2400b37a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b37c:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b380:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b382:	2300      	movs	r3, #0
2400b384:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b38a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b38c:	a901      	add	r1, sp, #4
2400b38e:	f7ff fdf3 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
2400b392:	f241 3288 	movw	r2, #5000	; 0x1388
2400b396:	4629      	mov	r1, r5
2400b398:	4620      	mov	r0, r4
2400b39a:	f7ff fe2b 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b39e:	b007      	add	sp, #28
2400b3a0:	bd30      	pop	{r4, r5, pc}

2400b3a2 <SDMMC_CmdStatusRegister>:
{
2400b3a2:	b530      	push	{r4, r5, lr}
2400b3a4:	b087      	sub	sp, #28
2400b3a6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
2400b3a8:	2300      	movs	r3, #0
2400b3aa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
2400b3ac:	250d      	movs	r5, #13
2400b3ae:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b3b0:	f44f 7280 	mov.w	r2, #256	; 0x100
2400b3b4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b3b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b3b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b3bc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b3be:	a901      	add	r1, sp, #4
2400b3c0:	f7ff fdda 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
2400b3c4:	f241 3288 	movw	r2, #5000	; 0x1388
2400b3c8:	4629      	mov	r1, r5
2400b3ca:	4620      	mov	r0, r4
2400b3cc:	f7ff fe12 	bl	2400aff4 <SDMMC_GetCmdResp1>
}
2400b3d0:	b007      	add	sp, #28
2400b3d2:	bd30      	pop	{r4, r5, pc}

2400b3d4 <SDMMC_GetCmdResp2>:
{
2400b3d4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400b3d6:	4b14      	ldr	r3, [pc, #80]	; (2400b428 <SDMMC_GetCmdResp2+0x54>)
2400b3d8:	681b      	ldr	r3, [r3, #0]
2400b3da:	4a14      	ldr	r2, [pc, #80]	; (2400b42c <SDMMC_GetCmdResp2+0x58>)
2400b3dc:	fba2 2303 	umull	r2, r3, r2, r3
2400b3e0:	0a5b      	lsrs	r3, r3, #9
2400b3e2:	f241 3288 	movw	r2, #5000	; 0x1388
2400b3e6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
2400b3ea:	461a      	mov	r2, r3
2400b3ec:	3b01      	subs	r3, #1
2400b3ee:	b1ba      	cbz	r2, 2400b420 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
2400b3f0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b3f2:	f012 0f45 	tst.w	r2, #69	; 0x45
2400b3f6:	d0f8      	beq.n	2400b3ea <SDMMC_GetCmdResp2+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400b3f8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
2400b3fc:	d1f5      	bne.n	2400b3ea <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b3fe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400b400:	f013 0f04 	tst.w	r3, #4
2400b404:	d106      	bne.n	2400b414 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b406:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400b408:	f010 0001 	ands.w	r0, r0, #1
2400b40c:	d105      	bne.n	2400b41a <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b40e:	4b08      	ldr	r3, [pc, #32]	; (2400b430 <SDMMC_GetCmdResp2+0x5c>)
2400b410:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400b412:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b414:	2004      	movs	r0, #4
2400b416:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b418:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b41a:	2001      	movs	r0, #1
2400b41c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b41e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
2400b420:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400b424:	4770      	bx	lr
2400b426:	bf00      	nop
2400b428:	20000750 	.word	0x20000750
2400b42c:	10624dd3 	.word	0x10624dd3
2400b430:	002000c5 	.word	0x002000c5

2400b434 <SDMMC_CmdSendCID>:
{
2400b434:	b510      	push	{r4, lr}
2400b436:	b086      	sub	sp, #24
2400b438:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
2400b43a:	2300      	movs	r3, #0
2400b43c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
2400b43e:	2202      	movs	r2, #2
2400b440:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
2400b442:	f44f 7240 	mov.w	r2, #768	; 0x300
2400b446:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b448:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b44a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b44e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b450:	a901      	add	r1, sp, #4
2400b452:	f7ff fd91 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
2400b456:	4620      	mov	r0, r4
2400b458:	f7ff ffbc 	bl	2400b3d4 <SDMMC_GetCmdResp2>
}
2400b45c:	b006      	add	sp, #24
2400b45e:	bd10      	pop	{r4, pc}

2400b460 <SDMMC_CmdSendCSD>:
{
2400b460:	b510      	push	{r4, lr}
2400b462:	b086      	sub	sp, #24
2400b464:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
2400b466:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
2400b468:	2309      	movs	r3, #9
2400b46a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
2400b46c:	f44f 7340 	mov.w	r3, #768	; 0x300
2400b470:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b472:	2300      	movs	r3, #0
2400b474:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b47a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b47c:	a901      	add	r1, sp, #4
2400b47e:	f7ff fd7b 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
2400b482:	4620      	mov	r0, r4
2400b484:	f7ff ffa6 	bl	2400b3d4 <SDMMC_GetCmdResp2>
}
2400b488:	b006      	add	sp, #24
2400b48a:	bd10      	pop	{r4, pc}

2400b48c <SDMMC_GetCmdResp3>:
{
2400b48c:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400b48e:	4b10      	ldr	r3, [pc, #64]	; (2400b4d0 <SDMMC_GetCmdResp3+0x44>)
2400b490:	681b      	ldr	r3, [r3, #0]
2400b492:	4a10      	ldr	r2, [pc, #64]	; (2400b4d4 <SDMMC_GetCmdResp3+0x48>)
2400b494:	fba2 2303 	umull	r2, r3, r2, r3
2400b498:	0a5b      	lsrs	r3, r3, #9
2400b49a:	f241 3288 	movw	r2, #5000	; 0x1388
2400b49e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
2400b4a2:	461a      	mov	r2, r3
2400b4a4:	3b01      	subs	r3, #1
2400b4a6:	b182      	cbz	r2, 2400b4ca <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
2400b4a8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b4aa:	f012 0f45 	tst.w	r2, #69	; 0x45
2400b4ae:	d0f8      	beq.n	2400b4a2 <SDMMC_GetCmdResp3+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400b4b0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
2400b4b4:	d1f5      	bne.n	2400b4a2 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b4b6:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400b4b8:	f010 0004 	ands.w	r0, r0, #4
2400b4bc:	d102      	bne.n	2400b4c4 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b4be:	4b06      	ldr	r3, [pc, #24]	; (2400b4d8 <SDMMC_GetCmdResp3+0x4c>)
2400b4c0:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400b4c2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b4c4:	2004      	movs	r0, #4
2400b4c6:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b4c8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
2400b4ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400b4ce:	4770      	bx	lr
2400b4d0:	20000750 	.word	0x20000750
2400b4d4:	10624dd3 	.word	0x10624dd3
2400b4d8:	002000c5 	.word	0x002000c5

2400b4dc <SDMMC_CmdAppOperCommand>:
{
2400b4dc:	b510      	push	{r4, lr}
2400b4de:	b086      	sub	sp, #24
2400b4e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
2400b4e2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
2400b4e4:	2329      	movs	r3, #41	; 0x29
2400b4e6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b4e8:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b4ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b4ee:	2300      	movs	r3, #0
2400b4f0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b4f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b4f6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b4f8:	a901      	add	r1, sp, #4
2400b4fa:	f7ff fd3d 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
2400b4fe:	4620      	mov	r0, r4
2400b500:	f7ff ffc4 	bl	2400b48c <SDMMC_GetCmdResp3>
}
2400b504:	b006      	add	sp, #24
2400b506:	bd10      	pop	{r4, pc}

2400b508 <SDMMC_GetCmdResp6>:
{
2400b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400b50a:	4605      	mov	r5, r0
2400b50c:	460e      	mov	r6, r1
2400b50e:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400b510:	4b23      	ldr	r3, [pc, #140]	; (2400b5a0 <SDMMC_GetCmdResp6+0x98>)
2400b512:	681b      	ldr	r3, [r3, #0]
2400b514:	4a23      	ldr	r2, [pc, #140]	; (2400b5a4 <SDMMC_GetCmdResp6+0x9c>)
2400b516:	fba2 2303 	umull	r2, r3, r2, r3
2400b51a:	0a5b      	lsrs	r3, r3, #9
2400b51c:	f241 3288 	movw	r2, #5000	; 0x1388
2400b520:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
2400b524:	461a      	mov	r2, r3
2400b526:	3b01      	subs	r3, #1
2400b528:	b38a      	cbz	r2, 2400b58e <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
2400b52a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b52c:	f014 0f45 	tst.w	r4, #69	; 0x45
2400b530:	d0f8      	beq.n	2400b524 <SDMMC_GetCmdResp6+0x1c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400b532:	f414 5f00 	tst.w	r4, #8192	; 0x2000
2400b536:	d1f5      	bne.n	2400b524 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b538:	6b6b      	ldr	r3, [r5, #52]	; 0x34
2400b53a:	f013 0f04 	tst.w	r3, #4
2400b53e:	d106      	bne.n	2400b54e <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b540:	6b6b      	ldr	r3, [r5, #52]	; 0x34
2400b542:	f013 0f01 	tst.w	r3, #1
2400b546:	d005      	beq.n	2400b554 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b548:	2001      	movs	r0, #1
2400b54a:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b54c:	e021      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b54e:	2004      	movs	r0, #4
2400b550:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b552:	e01e      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b554:	4628      	mov	r0, r5
2400b556:	f7ff fd21 	bl	2400af9c <SDMMC_GetCommandResponse>
2400b55a:	42b0      	cmp	r0, r6
2400b55c:	d001      	beq.n	2400b562 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b55e:	2001      	movs	r0, #1
2400b560:	e017      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b562:	4b11      	ldr	r3, [pc, #68]	; (2400b5a8 <SDMMC_GetCmdResp6+0xa0>)
2400b564:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
2400b566:	2100      	movs	r1, #0
2400b568:	4628      	mov	r0, r5
2400b56a:	f7ff fd1a 	bl	2400afa2 <SDMMC_GetResponse>
2400b56e:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400b570:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
2400b574:	d008      	beq.n	2400b588 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400b576:	f413 4f80 	tst.w	r3, #16384	; 0x4000
2400b57a:	d10b      	bne.n	2400b594 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
2400b57c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400b580:	d00b      	beq.n	2400b59a <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b582:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400b586:	e004      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400b588:	0c1b      	lsrs	r3, r3, #16
2400b58a:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
2400b58c:	e001      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
2400b58e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400b592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b594:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400b598:	e7fb      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b59a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400b59e:	e7f8      	b.n	2400b592 <SDMMC_GetCmdResp6+0x8a>
2400b5a0:	20000750 	.word	0x20000750
2400b5a4:	10624dd3 	.word	0x10624dd3
2400b5a8:	002000c5 	.word	0x002000c5

2400b5ac <SDMMC_CmdSetRelAdd>:
{
2400b5ac:	b570      	push	{r4, r5, r6, lr}
2400b5ae:	b086      	sub	sp, #24
2400b5b0:	4604      	mov	r4, r0
2400b5b2:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
2400b5b4:	2300      	movs	r3, #0
2400b5b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
2400b5b8:	2603      	movs	r6, #3
2400b5ba:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b5bc:	f44f 7280 	mov.w	r2, #256	; 0x100
2400b5c0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b5c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b5c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b5c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b5ca:	a901      	add	r1, sp, #4
2400b5cc:	f7ff fcd4 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
2400b5d0:	462a      	mov	r2, r5
2400b5d2:	4631      	mov	r1, r6
2400b5d4:	4620      	mov	r0, r4
2400b5d6:	f7ff ff97 	bl	2400b508 <SDMMC_GetCmdResp6>
}
2400b5da:	b006      	add	sp, #24
2400b5dc:	bd70      	pop	{r4, r5, r6, pc}
	...

2400b5e0 <SDMMC_GetCmdResp7>:
{
2400b5e0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400b5e2:	4b16      	ldr	r3, [pc, #88]	; (2400b63c <SDMMC_GetCmdResp7+0x5c>)
2400b5e4:	681b      	ldr	r3, [r3, #0]
2400b5e6:	4a16      	ldr	r2, [pc, #88]	; (2400b640 <SDMMC_GetCmdResp7+0x60>)
2400b5e8:	fba2 2303 	umull	r2, r3, r2, r3
2400b5ec:	0a5b      	lsrs	r3, r3, #9
2400b5ee:	f241 3288 	movw	r2, #5000	; 0x1388
2400b5f2:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
2400b5f6:	461a      	mov	r2, r3
2400b5f8:	3b01      	subs	r3, #1
2400b5fa:	b1e2      	cbz	r2, 2400b636 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
2400b5fc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b5fe:	f012 0f45 	tst.w	r2, #69	; 0x45
2400b602:	d0f8      	beq.n	2400b5f6 <SDMMC_GetCmdResp7+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400b604:	f412 5f00 	tst.w	r2, #8192	; 0x2000
2400b608:	d1f5      	bne.n	2400b5f6 <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b60a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400b60c:	f013 0f04 	tst.w	r3, #4
2400b610:	d10b      	bne.n	2400b62a <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b612:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400b614:	f013 0301 	ands.w	r3, r3, #1
2400b618:	d10a      	bne.n	2400b630 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400b61a:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400b61c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
2400b620:	d00b      	beq.n	2400b63a <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400b622:	2240      	movs	r2, #64	; 0x40
2400b624:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400b626:	4618      	mov	r0, r3
2400b628:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b62a:	2004      	movs	r0, #4
2400b62c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b62e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b630:	2001      	movs	r0, #1
2400b632:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b634:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
2400b636:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400b63a:	4770      	bx	lr
2400b63c:	20000750 	.word	0x20000750
2400b640:	10624dd3 	.word	0x10624dd3

2400b644 <SDMMC_CmdOperCond>:
{
2400b644:	b510      	push	{r4, lr}
2400b646:	b086      	sub	sp, #24
2400b648:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
2400b64a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
2400b64e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
2400b650:	2308      	movs	r3, #8
2400b652:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
2400b654:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b658:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
2400b65a:	2300      	movs	r3, #0
2400b65c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
2400b65e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b662:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
2400b664:	a901      	add	r1, sp, #4
2400b666:	f7ff fc87 	bl	2400af78 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
2400b66a:	4620      	mov	r0, r4
2400b66c:	f7ff ffb8 	bl	2400b5e0 <SDMMC_GetCmdResp7>
}
2400b670:	b006      	add	sp, #24
2400b672:	bd10      	pop	{r4, pc}

2400b674 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400b674:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400b676:	4903      	ldr	r1, [pc, #12]	; (2400b684 <MX_FATFS_Init+0x10>)
2400b678:	4803      	ldr	r0, [pc, #12]	; (2400b688 <MX_FATFS_Init+0x14>)
2400b67a:	f002 f8b5 	bl	2400d7e8 <FATFS_LinkDriver>
2400b67e:	4b03      	ldr	r3, [pc, #12]	; (2400b68c <MX_FATFS_Init+0x18>)
2400b680:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400b682:	bd08      	pop	{r3, pc}
2400b684:	2001d6f0 	.word	0x2001d6f0
2400b688:	24015fdc 	.word	0x24015fdc
2400b68c:	2001d6f4 	.word	0x2001d6f4

2400b690 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400b690:	2000      	movs	r0, #0
2400b692:	4770      	bx	lr

2400b694 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400b694:	b500      	push	{lr}
2400b696:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400b698:	9300      	str	r3, [sp, #0]
2400b69a:	4613      	mov	r3, r2
2400b69c:	460a      	mov	r2, r1
2400b69e:	4601      	mov	r1, r0
2400b6a0:	4803      	ldr	r0, [pc, #12]	; (2400b6b0 <BSP_SD_ReadBlocks+0x1c>)
2400b6a2:	f7fe f8e7 	bl	24009874 <HAL_SD_ReadBlocks>
2400b6a6:	b100      	cbz	r0, 2400b6aa <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
2400b6a8:	2001      	movs	r0, #1
  }

  return sd_state;
}
2400b6aa:	b003      	add	sp, #12
2400b6ac:	f85d fb04 	ldr.w	pc, [sp], #4
2400b6b0:	2001cf70 	.word	0x2001cf70

2400b6b4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400b6b4:	b500      	push	{lr}
2400b6b6:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400b6b8:	9300      	str	r3, [sp, #0]
2400b6ba:	4613      	mov	r3, r2
2400b6bc:	460a      	mov	r2, r1
2400b6be:	4601      	mov	r1, r0
2400b6c0:	4803      	ldr	r0, [pc, #12]	; (2400b6d0 <BSP_SD_WriteBlocks+0x1c>)
2400b6c2:	f7fe f9d9 	bl	24009a78 <HAL_SD_WriteBlocks>
2400b6c6:	b100      	cbz	r0, 2400b6ca <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
2400b6c8:	2001      	movs	r0, #1
  }

  return sd_state;
}
2400b6ca:	b003      	add	sp, #12
2400b6cc:	f85d fb04 	ldr.w	pc, [sp], #4
2400b6d0:	2001cf70 	.word	0x2001cf70

2400b6d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400b6d4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400b6d6:	4803      	ldr	r0, [pc, #12]	; (2400b6e4 <BSP_SD_GetCardState+0x10>)
2400b6d8:	f7fe fdbe 	bl	2400a258 <HAL_SD_GetCardState>
}
2400b6dc:	3804      	subs	r0, #4
2400b6de:	bf18      	it	ne
2400b6e0:	2001      	movne	r0, #1
2400b6e2:	bd08      	pop	{r3, pc}
2400b6e4:	2001cf70 	.word	0x2001cf70

2400b6e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400b6e8:	b508      	push	{r3, lr}
2400b6ea:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400b6ec:	4801      	ldr	r0, [pc, #4]	; (2400b6f4 <BSP_SD_GetCardInfo+0xc>)
2400b6ee:	f7fe fcf5 	bl	2400a0dc <HAL_SD_GetCardInfo>
}
2400b6f2:	bd08      	pop	{r3, pc}
2400b6f4:	2001cf70 	.word	0x2001cf70

2400b6f8 <BSP_SD_Init>:
{
2400b6f8:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400b6fa:	f7f6 fb9f 	bl	24001e3c <BSP_SD_IsDetected>
2400b6fe:	2801      	cmp	r0, #1
2400b700:	d002      	beq.n	2400b708 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
2400b702:	2502      	movs	r5, #2
}
2400b704:	4628      	mov	r0, r5
2400b706:	bd38      	pop	{r3, r4, r5, pc}
2400b708:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
2400b70a:	4807      	ldr	r0, [pc, #28]	; (2400b728 <BSP_SD_Init+0x30>)
2400b70c:	f7fe fdb5 	bl	2400a27a <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400b710:	4605      	mov	r5, r0
2400b712:	2800      	cmp	r0, #0
2400b714:	d1f6      	bne.n	2400b704 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400b716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400b71a:	4803      	ldr	r0, [pc, #12]	; (2400b728 <BSP_SD_Init+0x30>)
2400b71c:	f7fe fcf0 	bl	2400a100 <HAL_SD_ConfigWideBusOperation>
2400b720:	2800      	cmp	r0, #0
2400b722:	d0ef      	beq.n	2400b704 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
2400b724:	4625      	mov	r5, r4
2400b726:	e7ed      	b.n	2400b704 <BSP_SD_Init+0xc>
2400b728:	2001cf70 	.word	0x2001cf70

2400b72c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
2400b72c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
2400b72e:	4b07      	ldr	r3, [pc, #28]	; (2400b74c <SD_CheckStatus+0x20>)
2400b730:	2201      	movs	r2, #1
2400b732:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
2400b734:	f7ff ffce 	bl	2400b6d4 <BSP_SD_GetCardState>
2400b738:	b920      	cbnz	r0, 2400b744 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
2400b73a:	4a04      	ldr	r2, [pc, #16]	; (2400b74c <SD_CheckStatus+0x20>)
2400b73c:	7813      	ldrb	r3, [r2, #0]
2400b73e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400b742:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
2400b744:	4b01      	ldr	r3, [pc, #4]	; (2400b74c <SD_CheckStatus+0x20>)
2400b746:	7818      	ldrb	r0, [r3, #0]
}
2400b748:	bd08      	pop	{r3, pc}
2400b74a:	bf00      	nop
2400b74c:	20000760 	.word	0x20000760

2400b750 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400b750:	b510      	push	{r4, lr}
2400b752:	4604      	mov	r4, r0
Stat = STA_NOINIT;
2400b754:	4b07      	ldr	r3, [pc, #28]	; (2400b774 <SD_initialize+0x24>)
2400b756:	2201      	movs	r2, #1
2400b758:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400b75a:	f7ff ffcd 	bl	2400b6f8 <BSP_SD_Init>
2400b75e:	b110      	cbz	r0, 2400b766 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400b760:	4b04      	ldr	r3, [pc, #16]	; (2400b774 <SD_initialize+0x24>)
2400b762:	7818      	ldrb	r0, [r3, #0]
}
2400b764:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
2400b766:	4620      	mov	r0, r4
2400b768:	f7ff ffe0 	bl	2400b72c <SD_CheckStatus>
2400b76c:	4b01      	ldr	r3, [pc, #4]	; (2400b774 <SD_initialize+0x24>)
2400b76e:	7018      	strb	r0, [r3, #0]
2400b770:	e7f6      	b.n	2400b760 <SD_initialize+0x10>
2400b772:	bf00      	nop
2400b774:	20000760 	.word	0x20000760

2400b778 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400b778:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
2400b77a:	f7ff ffd7 	bl	2400b72c <SD_CheckStatus>
}
2400b77e:	bd08      	pop	{r3, pc}

2400b780 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400b780:	b508      	push	{r3, lr}
2400b782:	4608      	mov	r0, r1
2400b784:	4611      	mov	r1, r2
2400b786:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400b788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400b78c:	f7ff ff82 	bl	2400b694 <BSP_SD_ReadBlocks>
2400b790:	b930      	cbnz	r0, 2400b7a0 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
2400b792:	f7ff ff9f 	bl	2400b6d4 <BSP_SD_GetCardState>
2400b796:	4603      	mov	r3, r0
2400b798:	2800      	cmp	r0, #0
2400b79a:	d1fa      	bne.n	2400b792 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
2400b79c:	4618      	mov	r0, r3
2400b79e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
2400b7a0:	2301      	movs	r3, #1
2400b7a2:	e7fb      	b.n	2400b79c <SD_read+0x1c>

2400b7a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
2400b7a4:	b508      	push	{r3, lr}
2400b7a6:	4608      	mov	r0, r1
2400b7a8:	4611      	mov	r1, r2
2400b7aa:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400b7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400b7b0:	f7ff ff80 	bl	2400b6b4 <BSP_SD_WriteBlocks>
2400b7b4:	b930      	cbnz	r0, 2400b7c4 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
2400b7b6:	f7ff ff8d 	bl	2400b6d4 <BSP_SD_GetCardState>
2400b7ba:	4603      	mov	r3, r0
2400b7bc:	2800      	cmp	r0, #0
2400b7be:	d1fa      	bne.n	2400b7b6 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
2400b7c0:	4618      	mov	r0, r3
2400b7c2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
2400b7c4:	2301      	movs	r3, #1
2400b7c6:	e7fb      	b.n	2400b7c0 <SD_write+0x1c>

2400b7c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
2400b7c8:	b530      	push	{r4, r5, lr}
2400b7ca:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400b7cc:	4b13      	ldr	r3, [pc, #76]	; (2400b81c <SD_ioctl+0x54>)
2400b7ce:	7818      	ldrb	r0, [r3, #0]
2400b7d0:	f010 0401 	ands.w	r4, r0, #1
2400b7d4:	d11b      	bne.n	2400b80e <SD_ioctl+0x46>
2400b7d6:	4615      	mov	r5, r2

  switch (cmd)
2400b7d8:	2903      	cmp	r1, #3
2400b7da:	d81c      	bhi.n	2400b816 <SD_ioctl+0x4e>
2400b7dc:	e8df f001 	tbb	[pc, r1]
2400b7e0:	100a0402 	.word	0x100a0402
2400b7e4:	460c      	mov	r4, r1
2400b7e6:	e013      	b.n	2400b810 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
2400b7e8:	a801      	add	r0, sp, #4
2400b7ea:	f7ff ff7d 	bl	2400b6e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400b7ee:	9b07      	ldr	r3, [sp, #28]
2400b7f0:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
2400b7f2:	e00d      	b.n	2400b810 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
2400b7f4:	a801      	add	r0, sp, #4
2400b7f6:	f7ff ff77 	bl	2400b6e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400b7fa:	9b08      	ldr	r3, [sp, #32]
2400b7fc:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
2400b7fe:	e007      	b.n	2400b810 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
2400b800:	a801      	add	r0, sp, #4
2400b802:	f7ff ff71 	bl	2400b6e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400b806:	9b08      	ldr	r3, [sp, #32]
2400b808:	0a5b      	lsrs	r3, r3, #9
2400b80a:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
2400b80c:	e000      	b.n	2400b810 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400b80e:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400b810:	4620      	mov	r0, r4
2400b812:	b00b      	add	sp, #44	; 0x2c
2400b814:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
2400b816:	2404      	movs	r4, #4
2400b818:	e7fa      	b.n	2400b810 <SD_ioctl+0x48>
2400b81a:	bf00      	nop
2400b81c:	20000760 	.word	0x20000760

2400b820 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
2400b820:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400b822:	4b04      	ldr	r3, [pc, #16]	; (2400b834 <disk_status+0x14>)
2400b824:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400b828:	6852      	ldr	r2, [r2, #4]
2400b82a:	6852      	ldr	r2, [r2, #4]
2400b82c:	4403      	add	r3, r0
2400b82e:	7a18      	ldrb	r0, [r3, #8]
2400b830:	4790      	blx	r2
  return stat;
}
2400b832:	bd08      	pop	{r3, pc}
2400b834:	2001d920 	.word	0x2001d920

2400b838 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
2400b838:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400b83a:	4b08      	ldr	r3, [pc, #32]	; (2400b85c <disk_initialize+0x24>)
2400b83c:	5c1b      	ldrb	r3, [r3, r0]
2400b83e:	b953      	cbnz	r3, 2400b856 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
2400b840:	4b06      	ldr	r3, [pc, #24]	; (2400b85c <disk_initialize+0x24>)
2400b842:	2201      	movs	r2, #1
2400b844:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400b846:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400b84a:	6852      	ldr	r2, [r2, #4]
2400b84c:	6812      	ldr	r2, [r2, #0]
2400b84e:	4418      	add	r0, r3
2400b850:	7a00      	ldrb	r0, [r0, #8]
2400b852:	4790      	blx	r2
  }
  return stat;
}
2400b854:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
2400b856:	2000      	movs	r0, #0
2400b858:	e7fc      	b.n	2400b854 <disk_initialize+0x1c>
2400b85a:	bf00      	nop
2400b85c:	2001d920 	.word	0x2001d920

2400b860 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400b860:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400b862:	4c04      	ldr	r4, [pc, #16]	; (2400b874 <disk_read+0x14>)
2400b864:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400b868:	686d      	ldr	r5, [r5, #4]
2400b86a:	68ad      	ldr	r5, [r5, #8]
2400b86c:	4404      	add	r4, r0
2400b86e:	7a20      	ldrb	r0, [r4, #8]
2400b870:	47a8      	blx	r5
  return res;
}
2400b872:	bd38      	pop	{r3, r4, r5, pc}
2400b874:	2001d920 	.word	0x2001d920

2400b878 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400b878:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400b87a:	4c04      	ldr	r4, [pc, #16]	; (2400b88c <disk_write+0x14>)
2400b87c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400b880:	686d      	ldr	r5, [r5, #4]
2400b882:	68ed      	ldr	r5, [r5, #12]
2400b884:	4404      	add	r4, r0
2400b886:	7a20      	ldrb	r0, [r4, #8]
2400b888:	47a8      	blx	r5
  return res;
}
2400b88a:	bd38      	pop	{r3, r4, r5, pc}
2400b88c:	2001d920 	.word	0x2001d920

2400b890 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
2400b890:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400b892:	4b04      	ldr	r3, [pc, #16]	; (2400b8a4 <disk_ioctl+0x14>)
2400b894:	eb03 0480 	add.w	r4, r3, r0, lsl #2
2400b898:	6864      	ldr	r4, [r4, #4]
2400b89a:	6924      	ldr	r4, [r4, #16]
2400b89c:	4403      	add	r3, r0
2400b89e:	7a18      	ldrb	r0, [r3, #8]
2400b8a0:	47a0      	blx	r4
  return res;
}
2400b8a2:	bd10      	pop	{r4, pc}
2400b8a4:	2001d920 	.word	0x2001d920

2400b8a8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
2400b8a8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
2400b8aa:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
2400b8ac:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
2400b8b0:	4770      	bx	lr

2400b8b2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
2400b8b2:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
2400b8b4:	7883      	ldrb	r3, [r0, #2]
2400b8b6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
2400b8ba:	7843      	ldrb	r3, [r0, #1]
2400b8bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
2400b8c0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
2400b8c2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
2400b8c6:	4770      	bx	lr

2400b8c8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
2400b8c8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
2400b8ca:	0a09      	lsrs	r1, r1, #8
2400b8cc:	7041      	strb	r1, [r0, #1]
}
2400b8ce:	4770      	bx	lr

2400b8d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
2400b8d0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400b8d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
2400b8d6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
2400b8d8:	f3c1 4307 	ubfx	r3, r1, #16, #8
2400b8dc:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
2400b8de:	0e09      	lsrs	r1, r1, #24
2400b8e0:	70c1      	strb	r1, [r0, #3]
}
2400b8e2:	4770      	bx	lr

2400b8e4 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
2400b8e4:	4694      	mov	ip, r2
2400b8e6:	b132      	cbz	r2, 2400b8f6 <mem_cpy+0x12>
		do {
			*d++ = *s++;
2400b8e8:	780a      	ldrb	r2, [r1, #0]
2400b8ea:	3101      	adds	r1, #1
2400b8ec:	7002      	strb	r2, [r0, #0]
2400b8ee:	3001      	adds	r0, #1
		} while (--cnt);
2400b8f0:	f1bc 0c01 	subs.w	ip, ip, #1
2400b8f4:	d1f8      	bne.n	2400b8e8 <mem_cpy+0x4>
	}
}
2400b8f6:	4770      	bx	lr

2400b8f8 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
2400b8f8:	7001      	strb	r1, [r0, #0]
2400b8fa:	3001      	adds	r0, #1
	} while (--cnt);
2400b8fc:	3a01      	subs	r2, #1
2400b8fe:	d1fb      	bne.n	2400b8f8 <mem_set>
}
2400b900:	4770      	bx	lr

2400b902 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
2400b902:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
2400b904:	f89c 0000 	ldrb.w	r0, [ip]
2400b908:	f10c 0c01 	add.w	ip, ip, #1
2400b90c:	780b      	ldrb	r3, [r1, #0]
2400b90e:	3101      	adds	r1, #1
2400b910:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
2400b912:	3a01      	subs	r2, #1
2400b914:	d001      	beq.n	2400b91a <mem_cmp+0x18>
2400b916:	2800      	cmp	r0, #0
2400b918:	d0f4      	beq.n	2400b904 <mem_cmp+0x2>

	return r;
}
2400b91a:	4770      	bx	lr

2400b91c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
2400b91c:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
2400b91e:	e000      	b.n	2400b922 <chk_chr+0x6>
2400b920:	3301      	adds	r3, #1
2400b922:	7818      	ldrb	r0, [r3, #0]
2400b924:	b108      	cbz	r0, 2400b92a <chk_chr+0xe>
2400b926:	4288      	cmp	r0, r1
2400b928:	d1fa      	bne.n	2400b920 <chk_chr+0x4>
	return *str;
}
2400b92a:	4770      	bx	lr

2400b92c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
2400b92c:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
2400b92e:	f04f 0c00 	mov.w	ip, #0
2400b932:	4663      	mov	r3, ip
2400b934:	e002      	b.n	2400b93c <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
2400b936:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
2400b93a:	3301      	adds	r3, #1
2400b93c:	2b01      	cmp	r3, #1
2400b93e:	d815      	bhi.n	2400b96c <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
2400b940:	011a      	lsls	r2, r3, #4
2400b942:	4c18      	ldr	r4, [pc, #96]	; (2400b9a4 <chk_lock+0x78>)
2400b944:	58a2      	ldr	r2, [r4, r2]
2400b946:	2a00      	cmp	r2, #0
2400b948:	d0f5      	beq.n	2400b936 <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400b94a:	6804      	ldr	r4, [r0, #0]
2400b94c:	42a2      	cmp	r2, r4
2400b94e:	d1f4      	bne.n	2400b93a <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
2400b950:	4a14      	ldr	r2, [pc, #80]	; (2400b9a4 <chk_lock+0x78>)
2400b952:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400b956:	6854      	ldr	r4, [r2, #4]
2400b958:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400b95a:	4294      	cmp	r4, r2
2400b95c:	d1ed      	bne.n	2400b93a <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
2400b95e:	4a11      	ldr	r2, [pc, #68]	; (2400b9a4 <chk_lock+0x78>)
2400b960:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400b964:	6894      	ldr	r4, [r2, #8]
2400b966:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
2400b968:	4294      	cmp	r4, r2
2400b96a:	d1e6      	bne.n	2400b93a <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
2400b96c:	2b02      	cmp	r3, #2
2400b96e:	d00b      	beq.n	2400b988 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400b970:	b9b1      	cbnz	r1, 2400b9a0 <chk_lock+0x74>
2400b972:	4a0c      	ldr	r2, [pc, #48]	; (2400b9a4 <chk_lock+0x78>)
2400b974:	eb02 1303 	add.w	r3, r2, r3, lsl #4
2400b978:	899b      	ldrh	r3, [r3, #12]
2400b97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b97e:	d00d      	beq.n	2400b99c <chk_lock+0x70>
2400b980:	2000      	movs	r0, #0
}
2400b982:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b986:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400b988:	2902      	cmp	r1, #2
2400b98a:	bf14      	ite	ne
2400b98c:	4663      	movne	r3, ip
2400b98e:	f04c 0301 	orreq.w	r3, ip, #1
2400b992:	b10b      	cbz	r3, 2400b998 <chk_lock+0x6c>
2400b994:	2000      	movs	r0, #0
2400b996:	e7f4      	b.n	2400b982 <chk_lock+0x56>
2400b998:	2012      	movs	r0, #18
2400b99a:	e7f2      	b.n	2400b982 <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400b99c:	2010      	movs	r0, #16
2400b99e:	e7f0      	b.n	2400b982 <chk_lock+0x56>
2400b9a0:	2010      	movs	r0, #16
2400b9a2:	e7ee      	b.n	2400b982 <chk_lock+0x56>
2400b9a4:	2001d6fc 	.word	0x2001d6fc

2400b9a8 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400b9a8:	2000      	movs	r0, #0
2400b9aa:	e000      	b.n	2400b9ae <enq_lock+0x6>
2400b9ac:	3001      	adds	r0, #1
2400b9ae:	2801      	cmp	r0, #1
2400b9b0:	d804      	bhi.n	2400b9bc <enq_lock+0x14>
2400b9b2:	0103      	lsls	r3, r0, #4
2400b9b4:	4a03      	ldr	r2, [pc, #12]	; (2400b9c4 <enq_lock+0x1c>)
2400b9b6:	58d3      	ldr	r3, [r2, r3]
2400b9b8:	2b00      	cmp	r3, #0
2400b9ba:	d1f7      	bne.n	2400b9ac <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
2400b9bc:	3802      	subs	r0, #2
2400b9be:	bf18      	it	ne
2400b9c0:	2001      	movne	r0, #1
2400b9c2:	4770      	bx	lr
2400b9c4:	2001d6fc 	.word	0x2001d6fc

2400b9c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
2400b9c8:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400b9ca:	2300      	movs	r3, #0
2400b9cc:	e000      	b.n	2400b9d0 <inc_lock+0x8>
2400b9ce:	3301      	adds	r3, #1
2400b9d0:	2b01      	cmp	r3, #1
2400b9d2:	d813      	bhi.n	2400b9fc <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
2400b9d4:	011a      	lsls	r2, r3, #4
2400b9d6:	4c24      	ldr	r4, [pc, #144]	; (2400ba68 <inc_lock+0xa0>)
2400b9d8:	58a4      	ldr	r4, [r4, r2]
2400b9da:	6802      	ldr	r2, [r0, #0]
2400b9dc:	4294      	cmp	r4, r2
2400b9de:	d1f6      	bne.n	2400b9ce <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
2400b9e0:	4a21      	ldr	r2, [pc, #132]	; (2400ba68 <inc_lock+0xa0>)
2400b9e2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400b9e6:	6854      	ldr	r4, [r2, #4]
2400b9e8:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
2400b9ea:	4294      	cmp	r4, r2
2400b9ec:	d1ef      	bne.n	2400b9ce <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
2400b9ee:	4a1e      	ldr	r2, [pc, #120]	; (2400ba68 <inc_lock+0xa0>)
2400b9f0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400b9f4:	6894      	ldr	r4, [r2, #8]
2400b9f6:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
2400b9f8:	4294      	cmp	r4, r2
2400b9fa:	d1e8      	bne.n	2400b9ce <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
2400b9fc:	2b02      	cmp	r3, #2
2400b9fe:	d00d      	beq.n	2400ba1c <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400ba00:	b121      	cbz	r1, 2400ba0c <inc_lock+0x44>
2400ba02:	4a19      	ldr	r2, [pc, #100]	; (2400ba68 <inc_lock+0xa0>)
2400ba04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400ba08:	8992      	ldrh	r2, [r2, #12]
2400ba0a:	bb52      	cbnz	r2, 2400ba62 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400ba0c:	b9f1      	cbnz	r1, 2400ba4c <inc_lock+0x84>
2400ba0e:	4a16      	ldr	r2, [pc, #88]	; (2400ba68 <inc_lock+0xa0>)
2400ba10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400ba14:	8991      	ldrh	r1, [r2, #12]
2400ba16:	3101      	adds	r1, #1
2400ba18:	b289      	uxth	r1, r1
2400ba1a:	e019      	b.n	2400ba50 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400ba1c:	2300      	movs	r3, #0
2400ba1e:	2b01      	cmp	r3, #1
2400ba20:	d805      	bhi.n	2400ba2e <inc_lock+0x66>
2400ba22:	011a      	lsls	r2, r3, #4
2400ba24:	4c10      	ldr	r4, [pc, #64]	; (2400ba68 <inc_lock+0xa0>)
2400ba26:	58a2      	ldr	r2, [r4, r2]
2400ba28:	b10a      	cbz	r2, 2400ba2e <inc_lock+0x66>
2400ba2a:	3301      	adds	r3, #1
2400ba2c:	e7f7      	b.n	2400ba1e <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400ba2e:	2b02      	cmp	r3, #2
2400ba30:	d015      	beq.n	2400ba5e <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
2400ba32:	4d0d      	ldr	r5, [pc, #52]	; (2400ba68 <inc_lock+0xa0>)
2400ba34:	011c      	lsls	r4, r3, #4
2400ba36:	eb05 1203 	add.w	r2, r5, r3, lsl #4
2400ba3a:	6806      	ldr	r6, [r0, #0]
2400ba3c:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
2400ba3e:	6884      	ldr	r4, [r0, #8]
2400ba40:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
2400ba42:	6940      	ldr	r0, [r0, #20]
2400ba44:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
2400ba46:	2000      	movs	r0, #0
2400ba48:	8190      	strh	r0, [r2, #12]
2400ba4a:	e7d9      	b.n	2400ba00 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400ba4c:	f44f 7180 	mov.w	r1, #256	; 0x100
2400ba50:	4a05      	ldr	r2, [pc, #20]	; (2400ba68 <inc_lock+0xa0>)
2400ba52:	eb02 1203 	add.w	r2, r2, r3, lsl #4
2400ba56:	8191      	strh	r1, [r2, #12]

	return i + 1;
2400ba58:	1c58      	adds	r0, r3, #1
}
2400ba5a:	bc70      	pop	{r4, r5, r6}
2400ba5c:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400ba5e:	2000      	movs	r0, #0
2400ba60:	e7fb      	b.n	2400ba5a <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400ba62:	2000      	movs	r0, #0
2400ba64:	e7f9      	b.n	2400ba5a <inc_lock+0x92>
2400ba66:	bf00      	nop
2400ba68:	2001d6fc 	.word	0x2001d6fc

2400ba6c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400ba6c:	3801      	subs	r0, #1
2400ba6e:	2801      	cmp	r0, #1
2400ba70:	d815      	bhi.n	2400ba9e <dec_lock+0x32>
		n = Files[i].ctr;
2400ba72:	4b0d      	ldr	r3, [pc, #52]	; (2400baa8 <dec_lock+0x3c>)
2400ba74:	eb03 1300 	add.w	r3, r3, r0, lsl #4
2400ba78:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400ba7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400ba7e:	d003      	beq.n	2400ba88 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
2400ba80:	b11b      	cbz	r3, 2400ba8a <dec_lock+0x1e>
2400ba82:	3b01      	subs	r3, #1
2400ba84:	b29b      	uxth	r3, r3
2400ba86:	e000      	b.n	2400ba8a <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400ba88:	2300      	movs	r3, #0
		Files[i].ctr = n;
2400ba8a:	4a07      	ldr	r2, [pc, #28]	; (2400baa8 <dec_lock+0x3c>)
2400ba8c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
2400ba90:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400ba92:	b933      	cbnz	r3, 2400baa2 <dec_lock+0x36>
2400ba94:	0103      	lsls	r3, r0, #4
2400ba96:	2000      	movs	r0, #0
2400ba98:	4a03      	ldr	r2, [pc, #12]	; (2400baa8 <dec_lock+0x3c>)
2400ba9a:	50d0      	str	r0, [r2, r3]
2400ba9c:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
2400ba9e:	2002      	movs	r0, #2
2400baa0:	4770      	bx	lr
		res = FR_OK;
2400baa2:	2000      	movs	r0, #0
	}
	return res;
}
2400baa4:	4770      	bx	lr
2400baa6:	bf00      	nop
2400baa8:	2001d6fc 	.word	0x2001d6fc

2400baac <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
2400baac:	2300      	movs	r3, #0
2400baae:	e003      	b.n	2400bab8 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
2400bab0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bab4:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
2400bab6:	3301      	adds	r3, #1
2400bab8:	2b01      	cmp	r3, #1
2400baba:	d811      	bhi.n	2400bae0 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400babc:	011a      	lsls	r2, r3, #4
2400babe:	4909      	ldr	r1, [pc, #36]	; (2400bae4 <clear_lock+0x38>)
2400bac0:	588a      	ldr	r2, [r1, r2]
2400bac2:	4282      	cmp	r2, r0
2400bac4:	d1f7      	bne.n	2400bab6 <clear_lock+0xa>
{
2400bac6:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400bac8:	011a      	lsls	r2, r3, #4
2400baca:	2400      	movs	r4, #0
2400bacc:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
2400bace:	3301      	adds	r3, #1
2400bad0:	2b01      	cmp	r3, #1
2400bad2:	d8ed      	bhi.n	2400bab0 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400bad4:	011a      	lsls	r2, r3, #4
2400bad6:	4903      	ldr	r1, [pc, #12]	; (2400bae4 <clear_lock+0x38>)
2400bad8:	588a      	ldr	r2, [r1, r2]
2400bada:	4282      	cmp	r2, r0
2400badc:	d1f7      	bne.n	2400bace <clear_lock+0x22>
2400bade:	e7f3      	b.n	2400bac8 <clear_lock+0x1c>
2400bae0:	4770      	bx	lr
2400bae2:	bf00      	nop
2400bae4:	2001d6fc 	.word	0x2001d6fc

2400bae8 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
2400bae8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400baea:	6983      	ldr	r3, [r0, #24]
2400baec:	3b02      	subs	r3, #2
2400baee:	428b      	cmp	r3, r1
2400baf0:	d904      	bls.n	2400bafc <clust2sect+0x14>
	return clst * fs->csize + fs->database;
2400baf2:	8943      	ldrh	r3, [r0, #10]
2400baf4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
2400baf6:	fb01 0003 	mla	r0, r1, r3, r0
2400bafa:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400bafc:	2000      	movs	r0, #0
}
2400bafe:	4770      	bx	lr

2400bb00 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
2400bb00:	b570      	push	{r4, r5, r6, lr}
2400bb02:	4606      	mov	r6, r0
2400bb04:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
2400bb06:	f101 001a 	add.w	r0, r1, #26
2400bb0a:	f7ff fecd 	bl	2400b8a8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
2400bb0e:	7833      	ldrb	r3, [r6, #0]
2400bb10:	2b03      	cmp	r3, #3
2400bb12:	d000      	beq.n	2400bb16 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
2400bb14:	bd70      	pop	{r4, r5, r6, pc}
2400bb16:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400bb18:	f105 0014 	add.w	r0, r5, #20
2400bb1c:	f7ff fec4 	bl	2400b8a8 <ld_word>
2400bb20:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
2400bb24:	e7f6      	b.n	2400bb14 <ld_clust+0x14>

2400bb26 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
2400bb26:	b570      	push	{r4, r5, r6, lr}
2400bb28:	4606      	mov	r6, r0
2400bb2a:	460c      	mov	r4, r1
2400bb2c:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
2400bb2e:	b291      	uxth	r1, r2
2400bb30:	f104 001a 	add.w	r0, r4, #26
2400bb34:	f7ff fec8 	bl	2400b8c8 <st_word>
	if (fs->fs_type == FS_FAT32) {
2400bb38:	7833      	ldrb	r3, [r6, #0]
2400bb3a:	2b03      	cmp	r3, #3
2400bb3c:	d000      	beq.n	2400bb40 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
2400bb3e:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400bb40:	0c29      	lsrs	r1, r5, #16
2400bb42:	f104 0014 	add.w	r0, r4, #20
2400bb46:	f7ff febf 	bl	2400b8c8 <st_word>
}
2400bb4a:	e7f8      	b.n	2400bb3e <st_clust+0x18>

2400bb4c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
2400bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400bb50:	4680      	mov	r8, r0
2400bb52:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400bb54:	f101 001a 	add.w	r0, r1, #26
2400bb58:	f7ff fea6 	bl	2400b8a8 <ld_word>
2400bb5c:	bb50      	cbnz	r0, 2400bbb4 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400bb5e:	7835      	ldrb	r5, [r6, #0]
2400bb60:	f025 0540 	bic.w	r5, r5, #64	; 0x40
2400bb64:	3d01      	subs	r5, #1
2400bb66:	eb05 0345 	add.w	r3, r5, r5, lsl #1
2400bb6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400bb6e:	2701      	movs	r7, #1
2400bb70:	2400      	movs	r4, #0
2400bb72:	e004      	b.n	2400bb7e <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400bb74:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400bb78:	4298      	cmp	r0, r3
2400bb7a:	d120      	bne.n	2400bbbe <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400bb7c:	3401      	adds	r4, #1
2400bb7e:	2c0c      	cmp	r4, #12
2400bb80:	d80d      	bhi.n	2400bb9e <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400bb82:	4b12      	ldr	r3, [pc, #72]	; (2400bbcc <pick_lfn+0x80>)
2400bb84:	5d18      	ldrb	r0, [r3, r4]
2400bb86:	4430      	add	r0, r6
2400bb88:	f7ff fe8e 	bl	2400b8a8 <ld_word>
		if (wc) {
2400bb8c:	2f00      	cmp	r7, #0
2400bb8e:	d0f1      	beq.n	2400bb74 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400bb90:	2dfe      	cmp	r5, #254	; 0xfe
2400bb92:	d812      	bhi.n	2400bbba <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400bb94:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
2400bb98:	4607      	mov	r7, r0
2400bb9a:	3501      	adds	r5, #1
2400bb9c:	e7ee      	b.n	2400bb7c <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400bb9e:	7833      	ldrb	r3, [r6, #0]
2400bba0:	f013 0f40 	tst.w	r3, #64	; 0x40
2400bba4:	d00d      	beq.n	2400bbc2 <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400bba6:	2dfe      	cmp	r5, #254	; 0xfe
2400bba8:	d80d      	bhi.n	2400bbc6 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
2400bbaa:	2300      	movs	r3, #0
2400bbac:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
2400bbb0:	2001      	movs	r0, #1
2400bbb2:	e000      	b.n	2400bbb6 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400bbb4:	2000      	movs	r0, #0
}
2400bbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400bbba:	2000      	movs	r0, #0
2400bbbc:	e7fb      	b.n	2400bbb6 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400bbbe:	2000      	movs	r0, #0
2400bbc0:	e7f9      	b.n	2400bbb6 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
2400bbc2:	2001      	movs	r0, #1
2400bbc4:	e7f7      	b.n	2400bbb6 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400bbc6:	2000      	movs	r0, #0
2400bbc8:	e7f5      	b.n	2400bbb6 <pick_lfn+0x6a>
2400bbca:	bf00      	nop
2400bbcc:	24016084 	.word	0x24016084

2400bbd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
2400bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400bbd4:	4680      	mov	r8, r0
2400bbd6:	460f      	mov	r7, r1
2400bbd8:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400bbda:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400bbdc:	230f      	movs	r3, #15
2400bbde:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
2400bbe0:	2400      	movs	r4, #0
2400bbe2:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
2400bbe4:	4621      	mov	r1, r4
2400bbe6:	f107 001a 	add.w	r0, r7, #26
2400bbea:	f7ff fe6d 	bl	2400b8c8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400bbee:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
2400bbf2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
2400bbf6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
2400bbfa:	4625      	mov	r5, r4
2400bbfc:	e002      	b.n	2400bc04 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
2400bbfe:	3401      	adds	r4, #1
2400bc00:	2c0c      	cmp	r4, #12
2400bc02:	d811      	bhi.n	2400bc28 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400bc04:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400bc08:	429d      	cmp	r5, r3
2400bc0a:	d002      	beq.n	2400bc12 <put_lfn+0x42>
2400bc0c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
2400bc10:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
2400bc12:	4b0c      	ldr	r3, [pc, #48]	; (2400bc44 <put_lfn+0x74>)
2400bc14:	5d18      	ldrb	r0, [r3, r4]
2400bc16:	4629      	mov	r1, r5
2400bc18:	4438      	add	r0, r7
2400bc1a:	f7ff fe55 	bl	2400b8c8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400bc1e:	2d00      	cmp	r5, #0
2400bc20:	d1ed      	bne.n	2400bbfe <put_lfn+0x2e>
2400bc22:	f64f 75ff 	movw	r5, #65535	; 0xffff
2400bc26:	e7ea      	b.n	2400bbfe <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400bc28:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400bc2c:	429d      	cmp	r5, r3
2400bc2e:	d002      	beq.n	2400bc36 <put_lfn+0x66>
2400bc30:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
2400bc34:	b90b      	cbnz	r3, 2400bc3a <put_lfn+0x6a>
2400bc36:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400bc3a:	f887 9000 	strb.w	r9, [r7]
}
2400bc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400bc42:	bf00      	nop
2400bc44:	24016084 	.word	0x24016084

2400bc48 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
2400bc48:	b570      	push	{r4, r5, r6, lr}
2400bc4a:	b082      	sub	sp, #8
2400bc4c:	4605      	mov	r5, r0
2400bc4e:	4616      	mov	r6, r2
2400bc50:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
2400bc52:	220b      	movs	r2, #11
2400bc54:	f7ff fe46 	bl	2400b8e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400bc58:	2c05      	cmp	r4, #5
2400bc5a:	d811      	bhi.n	2400bc80 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
2400bc5c:	2307      	movs	r3, #7
2400bc5e:	e01f      	b.n	2400bca0 <gen_numname+0x58>
2400bc60:	3101      	adds	r1, #1
2400bc62:	290f      	cmp	r1, #15
2400bc64:	d80c      	bhi.n	2400bc80 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
2400bc66:	f003 0c01 	and.w	ip, r3, #1
2400bc6a:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
2400bc6e:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400bc70:	f414 3f80 	tst.w	r4, #65536	; 0x10000
2400bc74:	d0f4      	beq.n	2400bc60 <gen_numname+0x18>
2400bc76:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
2400bc7a:	f084 0421 	eor.w	r4, r4, #33	; 0x21
2400bc7e:	e7ef      	b.n	2400bc60 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
2400bc80:	8833      	ldrh	r3, [r6, #0]
2400bc82:	2b00      	cmp	r3, #0
2400bc84:	d0ea      	beq.n	2400bc5c <gen_numname+0x14>
			wc = *lfn++;
2400bc86:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
2400bc88:	2100      	movs	r1, #0
2400bc8a:	e7ea      	b.n	2400bc62 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
2400bc8c:	1e5a      	subs	r2, r3, #1
2400bc8e:	3308      	adds	r3, #8
2400bc90:	446b      	add	r3, sp
2400bc92:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
2400bc96:	0921      	lsrs	r1, r4, #4
	} while (seq);
2400bc98:	2c0f      	cmp	r4, #15
2400bc9a:	d90a      	bls.n	2400bcb2 <gen_numname+0x6a>
		ns[i--] = c;
2400bc9c:	4613      	mov	r3, r2
		seq /= 16;
2400bc9e:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
2400bca0:	f004 020f 	and.w	r2, r4, #15
2400bca4:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
2400bca8:	2939      	cmp	r1, #57	; 0x39
2400bcaa:	d9ef      	bls.n	2400bc8c <gen_numname+0x44>
2400bcac:	f102 0137 	add.w	r1, r2, #55	; 0x37
2400bcb0:	e7ec      	b.n	2400bc8c <gen_numname+0x44>
	ns[i] = '~';
2400bcb2:	217e      	movs	r1, #126	; 0x7e
2400bcb4:	f102 0308 	add.w	r3, r2, #8
2400bcb8:	446b      	add	r3, sp
2400bcba:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400bcbe:	2300      	movs	r3, #0
2400bcc0:	e000      	b.n	2400bcc4 <gen_numname+0x7c>
2400bcc2:	3301      	adds	r3, #1
2400bcc4:	4293      	cmp	r3, r2
2400bcc6:	d209      	bcs.n	2400bcdc <gen_numname+0x94>
2400bcc8:	5ce9      	ldrb	r1, [r5, r3]
2400bcca:	2920      	cmp	r1, #32
2400bccc:	d1f9      	bne.n	2400bcc2 <gen_numname+0x7a>
2400bcce:	e005      	b.n	2400bcdc <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400bcd0:	2020      	movs	r0, #32
2400bcd2:	1c59      	adds	r1, r3, #1
2400bcd4:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
2400bcd6:	2907      	cmp	r1, #7
2400bcd8:	d809      	bhi.n	2400bcee <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400bcda:	460b      	mov	r3, r1
2400bcdc:	2a07      	cmp	r2, #7
2400bcde:	d8f7      	bhi.n	2400bcd0 <gen_numname+0x88>
2400bce0:	f102 0108 	add.w	r1, r2, #8
2400bce4:	4469      	add	r1, sp
2400bce6:	f811 0c08 	ldrb.w	r0, [r1, #-8]
2400bcea:	3201      	adds	r2, #1
2400bcec:	e7f1      	b.n	2400bcd2 <gen_numname+0x8a>
}
2400bcee:	b002      	add	sp, #8
2400bcf0:	bd70      	pop	{r4, r5, r6, pc}

2400bcf2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
2400bcf2:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
2400bcf4:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
2400bcf8:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400bcfa:	01c3      	lsls	r3, r0, #7
2400bcfc:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
2400bd00:	7808      	ldrb	r0, [r1, #0]
2400bd02:	3101      	adds	r1, #1
2400bd04:	fa50 f383 	uxtab	r3, r0, r3
2400bd08:	b2d8      	uxtb	r0, r3
	} while (--n);
2400bd0a:	f1bc 0c01 	subs.w	ip, ip, #1
2400bd0e:	d1f4      	bne.n	2400bcfa <sum_sfn+0x8>
	return sum;
}
2400bd10:	4770      	bx	lr
	...

2400bd14 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400bd14:	6803      	ldr	r3, [r0, #0]
2400bd16:	1c5a      	adds	r2, r3, #1
2400bd18:	6002      	str	r2, [r0, #0]
2400bd1a:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400bd1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
2400bd20:	b29b      	uxth	r3, r3
2400bd22:	2b19      	cmp	r3, #25
2400bd24:	d801      	bhi.n	2400bd2a <get_achar+0x16>
2400bd26:	3820      	subs	r0, #32
2400bd28:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400bd2a:	287f      	cmp	r0, #127	; 0x7f
2400bd2c:	d902      	bls.n	2400bd34 <get_achar+0x20>
2400bd2e:	3880      	subs	r0, #128	; 0x80
2400bd30:	4b01      	ldr	r3, [pc, #4]	; (2400bd38 <get_achar+0x24>)
2400bd32:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
2400bd34:	4770      	bx	lr
2400bd36:	bf00      	nop
2400bd38:	24016004 	.word	0x24016004

2400bd3c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400bd40:	b084      	sub	sp, #16
2400bd42:	4607      	mov	r7, r0
2400bd44:	9101      	str	r1, [sp, #4]
2400bd46:	4614      	mov	r4, r2
2400bd48:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400bd4a:	4626      	mov	r6, r4
2400bd4c:	3c01      	subs	r4, #1
2400bd4e:	b14e      	cbz	r6, 2400bd64 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400bd50:	a801      	add	r0, sp, #4
2400bd52:	f7ff ffdf 	bl	2400bd14 <get_achar>
2400bd56:	2800      	cmp	r0, #0
2400bd58:	d1f7      	bne.n	2400bd4a <pattern_matching+0xe>
2400bd5a:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400bd5c:	4630      	mov	r0, r6
2400bd5e:	b004      	add	sp, #16
2400bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400bd64:	783b      	ldrb	r3, [r7, #0]
2400bd66:	bb1b      	cbnz	r3, 2400bdb0 <pattern_matching+0x74>
2400bd68:	f1b8 0f00 	cmp.w	r8, #0
2400bd6c:	d020      	beq.n	2400bdb0 <pattern_matching+0x74>
2400bd6e:	2601      	movs	r6, #1
2400bd70:	e7f4      	b.n	2400bd5c <pattern_matching+0x20>
				nm = nx = 0;
2400bd72:	4633      	mov	r3, r6
2400bd74:	4632      	mov	r2, r6
2400bd76:	e005      	b.n	2400bd84 <pattern_matching+0x48>
					if (*pp++ == '?') nm++; else nx = 1;
2400bd78:	3201      	adds	r2, #1
				} while (*pp == '?' || *pp == '*');
2400bd7a:	7849      	ldrb	r1, [r1, #1]
2400bd7c:	292a      	cmp	r1, #42	; 0x2a
2400bd7e:	bf18      	it	ne
2400bd80:	293f      	cmpne	r1, #63	; 0x3f
2400bd82:	d107      	bne.n	2400bd94 <pattern_matching+0x58>
					if (*pp++ == '?') nm++; else nx = 1;
2400bd84:	9903      	ldr	r1, [sp, #12]
2400bd86:	1c48      	adds	r0, r1, #1
2400bd88:	9003      	str	r0, [sp, #12]
2400bd8a:	780c      	ldrb	r4, [r1, #0]
2400bd8c:	2c3f      	cmp	r4, #63	; 0x3f
2400bd8e:	d0f3      	beq.n	2400bd78 <pattern_matching+0x3c>
2400bd90:	2301      	movs	r3, #1
2400bd92:	e7f2      	b.n	2400bd7a <pattern_matching+0x3e>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400bd94:	9902      	ldr	r1, [sp, #8]
2400bd96:	f7ff ffd1 	bl	2400bd3c <pattern_matching>
2400bd9a:	bb00      	cbnz	r0, 2400bdde <pattern_matching+0xa2>
				nc = *np; break;	/* Branch mismatched */
2400bd9c:	9b02      	ldr	r3, [sp, #8]
2400bd9e:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
2400bda0:	a801      	add	r0, sp, #4
2400bda2:	f7ff ffb7 	bl	2400bd14 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400bda6:	f1b8 0f00 	cmp.w	r8, #0
2400bdaa:	bf18      	it	ne
2400bdac:	2d00      	cmpne	r5, #0
2400bdae:	d0d5      	beq.n	2400bd5c <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400bdb0:	9703      	str	r7, [sp, #12]
2400bdb2:	9b01      	ldr	r3, [sp, #4]
2400bdb4:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400bdb6:	9b03      	ldr	r3, [sp, #12]
2400bdb8:	781b      	ldrb	r3, [r3, #0]
2400bdba:	2b2a      	cmp	r3, #42	; 0x2a
2400bdbc:	bf18      	it	ne
2400bdbe:	2b3f      	cmpne	r3, #63	; 0x3f
2400bdc0:	d0d7      	beq.n	2400bd72 <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
2400bdc2:	a803      	add	r0, sp, #12
2400bdc4:	f7ff ffa6 	bl	2400bd14 <get_achar>
2400bdc8:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
2400bdca:	a802      	add	r0, sp, #8
2400bdcc:	f7ff ffa2 	bl	2400bd14 <get_achar>
2400bdd0:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
2400bdd2:	4284      	cmp	r4, r0
2400bdd4:	d1e4      	bne.n	2400bda0 <pattern_matching+0x64>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400bdd6:	2c00      	cmp	r4, #0
2400bdd8:	d1ed      	bne.n	2400bdb6 <pattern_matching+0x7a>
2400bdda:	2601      	movs	r6, #1
2400bddc:	e7be      	b.n	2400bd5c <pattern_matching+0x20>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400bdde:	2601      	movs	r6, #1
2400bde0:	e7bc      	b.n	2400bd5c <pattern_matching+0x20>

2400bde2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
2400bde2:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
2400bde4:	6800      	ldr	r0, [r0, #0]
2400bde6:	b108      	cbz	r0, 2400bdec <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400bde8:	4602      	mov	r2, r0
2400bdea:	e003      	b.n	2400bdf4 <get_ldnumber+0x12>
	int vol = -1;
2400bdec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2400bdf0:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400bdf2:	3201      	adds	r2, #1
2400bdf4:	7813      	ldrb	r3, [r2, #0]
2400bdf6:	2b3a      	cmp	r3, #58	; 0x3a
2400bdf8:	bf18      	it	ne
2400bdfa:	2b1f      	cmpne	r3, #31
2400bdfc:	d8f9      	bhi.n	2400bdf2 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400bdfe:	2b3a      	cmp	r3, #58	; 0x3a
2400be00:	d001      	beq.n	2400be06 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
2400be02:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
2400be04:	4770      	bx	lr
			i = *tp++ - '0';
2400be06:	4603      	mov	r3, r0
2400be08:	f813 0b01 	ldrb.w	r0, [r3], #1
2400be0c:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
2400be0e:	2809      	cmp	r0, #9
2400be10:	bf98      	it	ls
2400be12:	429a      	cmpls	r2, r3
2400be14:	d103      	bne.n	2400be1e <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400be16:	b928      	cbnz	r0, 2400be24 <get_ldnumber+0x42>
					*path = ++tt;
2400be18:	3201      	adds	r2, #1
2400be1a:	600a      	str	r2, [r1, #0]
2400be1c:	4770      	bx	lr
	int vol = -1;
2400be1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2400be22:	4770      	bx	lr
2400be24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
2400be28:	4770      	bx	lr

2400be2a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
2400be2a:	b538      	push	{r3, r4, r5, lr}
2400be2c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400be2e:	4604      	mov	r4, r0
2400be30:	b198      	cbz	r0, 2400be5a <validate+0x30>
2400be32:	6803      	ldr	r3, [r0, #0]
2400be34:	b19b      	cbz	r3, 2400be5e <validate+0x34>
2400be36:	781a      	ldrb	r2, [r3, #0]
2400be38:	b1a2      	cbz	r2, 2400be64 <validate+0x3a>
2400be3a:	8881      	ldrh	r1, [r0, #4]
2400be3c:	88da      	ldrh	r2, [r3, #6]
2400be3e:	4291      	cmp	r1, r2
2400be40:	d003      	beq.n	2400be4a <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
2400be42:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400be44:	2400      	movs	r4, #0
2400be46:	602c      	str	r4, [r5, #0]
	return res;
}
2400be48:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400be4a:	7858      	ldrb	r0, [r3, #1]
2400be4c:	f7ff fce8 	bl	2400b820 <disk_status>
2400be50:	f010 0001 	ands.w	r0, r0, #1
2400be54:	d109      	bne.n	2400be6a <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400be56:	6824      	ldr	r4, [r4, #0]
2400be58:	e7f5      	b.n	2400be46 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
2400be5a:	2009      	movs	r0, #9
2400be5c:	e7f3      	b.n	2400be46 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400be5e:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
2400be60:	2009      	movs	r0, #9
2400be62:	e7f0      	b.n	2400be46 <validate+0x1c>
2400be64:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400be66:	2400      	movs	r4, #0
2400be68:	e7ed      	b.n	2400be46 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
2400be6a:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400be6c:	2400      	movs	r4, #0
2400be6e:	e7ea      	b.n	2400be46 <validate+0x1c>

2400be70 <sync_window>:
{
2400be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400be74:	78c5      	ldrb	r5, [r0, #3]
2400be76:	b915      	cbnz	r5, 2400be7e <sync_window+0xe>
}
2400be78:	4628      	mov	r0, r5
2400be7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2400be7e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
2400be80:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400be82:	f100 0834 	add.w	r8, r0, #52	; 0x34
2400be86:	2301      	movs	r3, #1
2400be88:	463a      	mov	r2, r7
2400be8a:	4641      	mov	r1, r8
2400be8c:	7840      	ldrb	r0, [r0, #1]
2400be8e:	f7ff fcf3 	bl	2400b878 <disk_write>
2400be92:	4605      	mov	r5, r0
2400be94:	b9a0      	cbnz	r0, 2400bec0 <sync_window+0x50>
			fs->wflag = 0;
2400be96:	2300      	movs	r3, #0
2400be98:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400be9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400be9c:	1afb      	subs	r3, r7, r3
2400be9e:	69e2      	ldr	r2, [r4, #28]
2400bea0:	4293      	cmp	r3, r2
2400bea2:	d2e9      	bcs.n	2400be78 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400bea4:	78a6      	ldrb	r6, [r4, #2]
2400bea6:	e008      	b.n	2400beba <sync_window+0x4a>
					wsect += fs->fsize;
2400bea8:	69e3      	ldr	r3, [r4, #28]
2400beaa:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
2400beac:	2301      	movs	r3, #1
2400beae:	463a      	mov	r2, r7
2400beb0:	4641      	mov	r1, r8
2400beb2:	7860      	ldrb	r0, [r4, #1]
2400beb4:	f7ff fce0 	bl	2400b878 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400beb8:	3e01      	subs	r6, #1
2400beba:	2e01      	cmp	r6, #1
2400bebc:	d8f4      	bhi.n	2400bea8 <sync_window+0x38>
2400bebe:	e7db      	b.n	2400be78 <sync_window+0x8>
			res = FR_DISK_ERR;
2400bec0:	2501      	movs	r5, #1
2400bec2:	e7d9      	b.n	2400be78 <sync_window+0x8>

2400bec4 <move_window>:
{
2400bec4:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
2400bec6:	6b03      	ldr	r3, [r0, #48]	; 0x30
2400bec8:	428b      	cmp	r3, r1
2400beca:	d102      	bne.n	2400bed2 <move_window+0xe>
	FRESULT res = FR_OK;
2400becc:	2600      	movs	r6, #0
}
2400bece:	4630      	mov	r0, r6
2400bed0:	bd70      	pop	{r4, r5, r6, pc}
2400bed2:	4604      	mov	r4, r0
2400bed4:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
2400bed6:	f7ff ffcb 	bl	2400be70 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
2400beda:	4606      	mov	r6, r0
2400bedc:	2800      	cmp	r0, #0
2400bede:	d1f6      	bne.n	2400bece <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400bee0:	2301      	movs	r3, #1
2400bee2:	462a      	mov	r2, r5
2400bee4:	f104 0134 	add.w	r1, r4, #52	; 0x34
2400bee8:	7860      	ldrb	r0, [r4, #1]
2400beea:	f7ff fcb9 	bl	2400b860 <disk_read>
2400beee:	b110      	cbz	r0, 2400bef6 <move_window+0x32>
				res = FR_DISK_ERR;
2400bef0:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400bef2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
2400bef6:	6325      	str	r5, [r4, #48]	; 0x30
2400bef8:	e7e9      	b.n	2400bece <move_window+0xa>
	...

2400befc <check_fs>:
{
2400befc:	b538      	push	{r3, r4, r5, lr}
2400befe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400bf00:	2300      	movs	r3, #0
2400bf02:	70c3      	strb	r3, [r0, #3]
2400bf04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400bf08:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400bf0a:	f7ff ffdb 	bl	2400bec4 <move_window>
2400bf0e:	bb30      	cbnz	r0, 2400bf5e <check_fs+0x62>
2400bf10:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400bf12:	f204 2032 	addw	r0, r4, #562	; 0x232
2400bf16:	f7ff fcc7 	bl	2400b8a8 <ld_word>
2400bf1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400bf1e:	4298      	cmp	r0, r3
2400bf20:	d11f      	bne.n	2400bf62 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400bf22:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400bf26:	2be9      	cmp	r3, #233	; 0xe9
2400bf28:	d007      	beq.n	2400bf3a <check_fs+0x3e>
2400bf2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400bf2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400bf30:	4a0d      	ldr	r2, [pc, #52]	; (2400bf68 <check_fs+0x6c>)
2400bf32:	4293      	cmp	r3, r2
2400bf34:	d001      	beq.n	2400bf3a <check_fs+0x3e>
	return 2;
2400bf36:	2502      	movs	r5, #2
2400bf38:	e014      	b.n	2400bf64 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400bf3a:	f104 006a 	add.w	r0, r4, #106	; 0x6a
2400bf3e:	f7ff fcb8 	bl	2400b8b2 <ld_dword>
2400bf42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
2400bf46:	4b09      	ldr	r3, [pc, #36]	; (2400bf6c <check_fs+0x70>)
2400bf48:	4298      	cmp	r0, r3
2400bf4a:	d00b      	beq.n	2400bf64 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400bf4c:	f104 0086 	add.w	r0, r4, #134	; 0x86
2400bf50:	f7ff fcaf 	bl	2400b8b2 <ld_dword>
2400bf54:	4b06      	ldr	r3, [pc, #24]	; (2400bf70 <check_fs+0x74>)
2400bf56:	4298      	cmp	r0, r3
2400bf58:	d004      	beq.n	2400bf64 <check_fs+0x68>
	return 2;
2400bf5a:	2502      	movs	r5, #2
2400bf5c:	e002      	b.n	2400bf64 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400bf5e:	2504      	movs	r5, #4
2400bf60:	e000      	b.n	2400bf64 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400bf62:	2503      	movs	r5, #3
}
2400bf64:	4628      	mov	r0, r5
2400bf66:	bd38      	pop	{r3, r4, r5, pc}
2400bf68:	009000eb 	.word	0x009000eb
2400bf6c:	00544146 	.word	0x00544146
2400bf70:	33544146 	.word	0x33544146

2400bf74 <find_volume>:
{
2400bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400bf78:	b085      	sub	sp, #20
2400bf7a:	460d      	mov	r5, r1
2400bf7c:	4616      	mov	r6, r2
	*rfs = 0;
2400bf7e:	2300      	movs	r3, #0
2400bf80:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
2400bf82:	f7ff ff2e 	bl	2400bde2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
2400bf86:	1e07      	subs	r7, r0, #0
2400bf88:	f2c0 8146 	blt.w	2400c218 <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400bf8c:	4bb6      	ldr	r3, [pc, #728]	; (2400c268 <find_volume+0x2f4>)
2400bf8e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400bf92:	2c00      	cmp	r4, #0
2400bf94:	f000 8145 	beq.w	2400c222 <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
2400bf98:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400bf9a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400bf9e:	7823      	ldrb	r3, [r4, #0]
2400bfa0:	b173      	cbz	r3, 2400bfc0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
2400bfa2:	7860      	ldrb	r0, [r4, #1]
2400bfa4:	f7ff fc3c 	bl	2400b820 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400bfa8:	f010 0501 	ands.w	r5, r0, #1
2400bfac:	d108      	bne.n	2400bfc0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400bfae:	2e00      	cmp	r6, #0
2400bfb0:	f000 8133 	beq.w	2400c21a <find_volume+0x2a6>
2400bfb4:	f010 0f04 	tst.w	r0, #4
2400bfb8:	f000 812f 	beq.w	2400c21a <find_volume+0x2a6>
				return FR_WRITE_PROTECTED;
2400bfbc:	250a      	movs	r5, #10
2400bfbe:	e12c      	b.n	2400c21a <find_volume+0x2a6>
	fs->fs_type = 0;					/* Clear the file system object */
2400bfc0:	2300      	movs	r3, #0
2400bfc2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2400bfc4:	b2f8      	uxtb	r0, r7
2400bfc6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400bfc8:	f7ff fc36 	bl	2400b838 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400bfcc:	f010 0501 	ands.w	r5, r0, #1
2400bfd0:	f040 8129 	bne.w	2400c226 <find_volume+0x2b2>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400bfd4:	b11e      	cbz	r6, 2400bfde <find_volume+0x6a>
2400bfd6:	f010 0f04 	tst.w	r0, #4
2400bfda:	f040 8126 	bne.w	2400c22a <find_volume+0x2b6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400bfde:	2100      	movs	r1, #0
2400bfe0:	4620      	mov	r0, r4
2400bfe2:	f7ff ff8b 	bl	2400befc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400bfe6:	2802      	cmp	r0, #2
2400bfe8:	f000 80b8 	beq.w	2400c15c <find_volume+0x1e8>
	bsect = 0;
2400bfec:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400bfee:	2804      	cmp	r0, #4
2400bff0:	f000 811d 	beq.w	2400c22e <find_volume+0x2ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400bff4:	2801      	cmp	r0, #1
2400bff6:	f200 811c 	bhi.w	2400c232 <find_volume+0x2be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400bffa:	f104 003f 	add.w	r0, r4, #63	; 0x3f
2400bffe:	f7ff fc53 	bl	2400b8a8 <ld_word>
2400c002:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
2400c006:	f040 8116 	bne.w	2400c236 <find_volume+0x2c2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400c00a:	f104 004a 	add.w	r0, r4, #74	; 0x4a
2400c00e:	f7ff fc4b 	bl	2400b8a8 <ld_word>
2400c012:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400c014:	b920      	cbnz	r0, 2400c020 <find_volume+0xac>
2400c016:	f104 0058 	add.w	r0, r4, #88	; 0x58
2400c01a:	f7ff fc4a 	bl	2400b8b2 <ld_dword>
2400c01e:	4606      	mov	r6, r0
		fs->fsize = fasize;
2400c020:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400c022:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
2400c026:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400c028:	1e53      	subs	r3, r2, #1
2400c02a:	b2db      	uxtb	r3, r3
2400c02c:	2b01      	cmp	r3, #1
2400c02e:	f200 8104 	bhi.w	2400c23a <find_volume+0x2c6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400c032:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400c036:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
2400c03a:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400c03e:	f1b9 0f00 	cmp.w	r9, #0
2400c042:	f000 80fc 	beq.w	2400c23e <find_volume+0x2ca>
2400c046:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
2400c04a:	ea19 0f03 	tst.w	r9, r3
2400c04e:	f040 80f8 	bne.w	2400c242 <find_volume+0x2ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400c052:	f104 0045 	add.w	r0, r4, #69	; 0x45
2400c056:	f7ff fc27 	bl	2400b8a8 <ld_word>
2400c05a:	4682      	mov	sl, r0
2400c05c:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400c05e:	f010 0f0f 	tst.w	r0, #15
2400c062:	f040 80f0 	bne.w	2400c246 <find_volume+0x2d2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400c066:	f104 0047 	add.w	r0, r4, #71	; 0x47
2400c06a:	f7ff fc1d 	bl	2400b8a8 <ld_word>
2400c06e:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400c070:	b920      	cbnz	r0, 2400c07c <find_volume+0x108>
2400c072:	f104 0054 	add.w	r0, r4, #84	; 0x54
2400c076:	f7ff fc1c 	bl	2400b8b2 <ld_dword>
2400c07a:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
2400c07c:	f104 0042 	add.w	r0, r4, #66	; 0x42
2400c080:	f7ff fc12 	bl	2400b8a8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400c084:	4602      	mov	r2, r0
2400c086:	2800      	cmp	r0, #0
2400c088:	f000 80df 	beq.w	2400c24a <find_volume+0x2d6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400c08c:	eb00 0308 	add.w	r3, r0, r8
2400c090:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400c094:	459b      	cmp	fp, r3
2400c096:	f0c0 80da 	bcc.w	2400c24e <find_volume+0x2da>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400c09a:	ebab 0b03 	sub.w	fp, fp, r3
2400c09e:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400c0a2:	45cb      	cmp	fp, r9
2400c0a4:	f0c0 80d5 	bcc.w	2400c252 <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400c0a8:	f64f 70f5 	movw	r0, #65525	; 0xfff5
2400c0ac:	4281      	cmp	r1, r0
2400c0ae:	d96d      	bls.n	2400c18c <find_volume+0x218>
		fmt = FS_FAT32;
2400c0b0:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400c0b4:	f640 70f5 	movw	r0, #4085	; 0xff5
2400c0b8:	4281      	cmp	r1, r0
2400c0ba:	d801      	bhi.n	2400c0c0 <find_volume+0x14c>
2400c0bc:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400c0c0:	f101 0902 	add.w	r9, r1, #2
2400c0c4:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
2400c0c8:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400c0ca:	443a      	add	r2, r7
2400c0cc:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400c0ce:	443b      	add	r3, r7
2400c0d0:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
2400c0d2:	f1bb 0f03 	cmp.w	fp, #3
2400c0d6:	d05c      	beq.n	2400c192 <find_volume+0x21e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400c0d8:	f1ba 0f00 	cmp.w	sl, #0
2400c0dc:	f000 80bf 	beq.w	2400c25e <find_volume+0x2ea>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400c0e0:	4442      	add	r2, r8
2400c0e2:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400c0e4:	f1bb 0f02 	cmp.w	fp, #2
2400c0e8:	d064      	beq.n	2400c1b4 <find_volume+0x240>
2400c0ea:	eb09 0349 	add.w	r3, r9, r9, lsl #1
2400c0ee:	f009 0901 	and.w	r9, r9, #1
2400c0f2:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400c0f6:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
2400c0fa:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
2400c0fe:	f0c0 80b0 	bcc.w	2400c262 <find_volume+0x2ee>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400c102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400c106:	6163      	str	r3, [r4, #20]
2400c108:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
2400c10a:	2380      	movs	r3, #128	; 0x80
2400c10c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
2400c10e:	f1bb 0f03 	cmp.w	fp, #3
2400c112:	d052      	beq.n	2400c1ba <find_volume+0x246>
	fs->fs_type = fmt;		/* FAT sub-type */
2400c114:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
2400c118:	4a54      	ldr	r2, [pc, #336]	; (2400c26c <find_volume+0x2f8>)
2400c11a:	8813      	ldrh	r3, [r2, #0]
2400c11c:	3301      	adds	r3, #1
2400c11e:	b29b      	uxth	r3, r3
2400c120:	8013      	strh	r3, [r2, #0]
2400c122:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400c124:	4b52      	ldr	r3, [pc, #328]	; (2400c270 <find_volume+0x2fc>)
2400c126:	60e3      	str	r3, [r4, #12]
	clear_lock(fs);
2400c128:	4620      	mov	r0, r4
2400c12a:	f7ff fcbf 	bl	2400baac <clear_lock>
	return FR_OK;
2400c12e:	e074      	b.n	2400c21a <find_volume+0x2a6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400c130:	2000      	movs	r0, #0
2400c132:	ab04      	add	r3, sp, #16
2400c134:	eb03 0386 	add.w	r3, r3, r6, lsl #2
2400c138:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
2400c13c:	3601      	adds	r6, #1
2400c13e:	2e03      	cmp	r6, #3
2400c140:	d80e      	bhi.n	2400c160 <find_volume+0x1ec>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
2400c142:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400c146:	0133      	lsls	r3, r6, #4
2400c148:	f503 73df 	add.w	r3, r3, #446	; 0x1be
2400c14c:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400c14e:	7903      	ldrb	r3, [r0, #4]
2400c150:	2b00      	cmp	r3, #0
2400c152:	d0ed      	beq.n	2400c130 <find_volume+0x1bc>
2400c154:	3008      	adds	r0, #8
2400c156:	f7ff fbac 	bl	2400b8b2 <ld_dword>
2400c15a:	e7ea      	b.n	2400c132 <find_volume+0x1be>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
2400c15c:	2600      	movs	r6, #0
2400c15e:	e7ee      	b.n	2400c13e <find_volume+0x1ca>
2400c160:	2600      	movs	r6, #0
2400c162:	e00a      	b.n	2400c17a <find_volume+0x206>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400c164:	4639      	mov	r1, r7
2400c166:	4620      	mov	r0, r4
2400c168:	f7ff fec8 	bl	2400befc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400c16c:	2801      	cmp	r0, #1
2400c16e:	f67f af3e 	bls.w	2400bfee <find_volume+0x7a>
2400c172:	3601      	adds	r6, #1
2400c174:	2e03      	cmp	r6, #3
2400c176:	f63f af3a 	bhi.w	2400bfee <find_volume+0x7a>
			bsect = br[i];
2400c17a:	ab04      	add	r3, sp, #16
2400c17c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
2400c180:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400c184:	2f00      	cmp	r7, #0
2400c186:	d1ed      	bne.n	2400c164 <find_volume+0x1f0>
2400c188:	2003      	movs	r0, #3
2400c18a:	e7f2      	b.n	2400c172 <find_volume+0x1fe>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400c18c:	f04f 0b02 	mov.w	fp, #2
2400c190:	e790      	b.n	2400c0b4 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
2400c192:	f104 005e 	add.w	r0, r4, #94	; 0x5e
2400c196:	f7ff fb87 	bl	2400b8a8 <ld_word>
2400c19a:	2800      	cmp	r0, #0
2400c19c:	d15b      	bne.n	2400c256 <find_volume+0x2e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400c19e:	f1ba 0f00 	cmp.w	sl, #0
2400c1a2:	d15a      	bne.n	2400c25a <find_volume+0x2e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400c1a4:	f104 0060 	add.w	r0, r4, #96	; 0x60
2400c1a8:	f7ff fb83 	bl	2400b8b2 <ld_dword>
2400c1ac:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400c1ae:	ea4f 0989 	mov.w	r9, r9, lsl #2
2400c1b2:	e7a0      	b.n	2400c0f6 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400c1b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
2400c1b8:	e79d      	b.n	2400c0f6 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400c1ba:	f104 0064 	add.w	r0, r4, #100	; 0x64
2400c1be:	f7ff fb73 	bl	2400b8a8 <ld_word>
2400c1c2:	2801      	cmp	r0, #1
2400c1c4:	d1a6      	bne.n	2400c114 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
2400c1c6:	1c79      	adds	r1, r7, #1
2400c1c8:	4620      	mov	r0, r4
2400c1ca:	f7ff fe7b 	bl	2400bec4 <move_window>
2400c1ce:	2800      	cmp	r0, #0
2400c1d0:	d1a0      	bne.n	2400c114 <find_volume+0x1a0>
			fs->fsi_flag = 0;
2400c1d2:	2300      	movs	r3, #0
2400c1d4:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400c1d6:	f204 2032 	addw	r0, r4, #562	; 0x232
2400c1da:	f7ff fb65 	bl	2400b8a8 <ld_word>
2400c1de:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400c1e2:	4298      	cmp	r0, r3
2400c1e4:	d196      	bne.n	2400c114 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400c1e6:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400c1ea:	f7ff fb62 	bl	2400b8b2 <ld_dword>
2400c1ee:	4b21      	ldr	r3, [pc, #132]	; (2400c274 <find_volume+0x300>)
2400c1f0:	4298      	cmp	r0, r3
2400c1f2:	d18f      	bne.n	2400c114 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400c1f4:	f504 7006 	add.w	r0, r4, #536	; 0x218
2400c1f8:	f7ff fb5b 	bl	2400b8b2 <ld_dword>
2400c1fc:	4b1e      	ldr	r3, [pc, #120]	; (2400c278 <find_volume+0x304>)
2400c1fe:	4298      	cmp	r0, r3
2400c200:	d188      	bne.n	2400c114 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
2400c202:	f504 7007 	add.w	r0, r4, #540	; 0x21c
2400c206:	f7ff fb54 	bl	2400b8b2 <ld_dword>
2400c20a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400c20c:	f504 7008 	add.w	r0, r4, #544	; 0x220
2400c210:	f7ff fb4f 	bl	2400b8b2 <ld_dword>
2400c214:	6120      	str	r0, [r4, #16]
2400c216:	e77d      	b.n	2400c114 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
2400c218:	250b      	movs	r5, #11
}
2400c21a:	4628      	mov	r0, r5
2400c21c:	b005      	add	sp, #20
2400c21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400c222:	250c      	movs	r5, #12
2400c224:	e7f9      	b.n	2400c21a <find_volume+0x2a6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400c226:	2503      	movs	r5, #3
2400c228:	e7f7      	b.n	2400c21a <find_volume+0x2a6>
		return FR_WRITE_PROTECTED;
2400c22a:	250a      	movs	r5, #10
2400c22c:	e7f5      	b.n	2400c21a <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400c22e:	2501      	movs	r5, #1
2400c230:	e7f3      	b.n	2400c21a <find_volume+0x2a6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400c232:	250d      	movs	r5, #13
2400c234:	e7f1      	b.n	2400c21a <find_volume+0x2a6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400c236:	250d      	movs	r5, #13
2400c238:	e7ef      	b.n	2400c21a <find_volume+0x2a6>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400c23a:	250d      	movs	r5, #13
2400c23c:	e7ed      	b.n	2400c21a <find_volume+0x2a6>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400c23e:	250d      	movs	r5, #13
2400c240:	e7eb      	b.n	2400c21a <find_volume+0x2a6>
2400c242:	250d      	movs	r5, #13
2400c244:	e7e9      	b.n	2400c21a <find_volume+0x2a6>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400c246:	250d      	movs	r5, #13
2400c248:	e7e7      	b.n	2400c21a <find_volume+0x2a6>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400c24a:	250d      	movs	r5, #13
2400c24c:	e7e5      	b.n	2400c21a <find_volume+0x2a6>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400c24e:	250d      	movs	r5, #13
2400c250:	e7e3      	b.n	2400c21a <find_volume+0x2a6>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400c252:	250d      	movs	r5, #13
2400c254:	e7e1      	b.n	2400c21a <find_volume+0x2a6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
2400c256:	250d      	movs	r5, #13
2400c258:	e7df      	b.n	2400c21a <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400c25a:	250d      	movs	r5, #13
2400c25c:	e7dd      	b.n	2400c21a <find_volume+0x2a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400c25e:	250d      	movs	r5, #13
2400c260:	e7db      	b.n	2400c21a <find_volume+0x2a6>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400c262:	250d      	movs	r5, #13
2400c264:	e7d9      	b.n	2400c21a <find_volume+0x2a6>
2400c266:	bf00      	nop
2400c268:	2001d6f8 	.word	0x2001d6f8
2400c26c:	2001d71c 	.word	0x2001d71c
2400c270:	2001d720 	.word	0x2001d720
2400c274:	41615252 	.word	0x41615252
2400c278:	61417272 	.word	0x61417272

2400c27c <put_fat>:
{
2400c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400c280:	2901      	cmp	r1, #1
2400c282:	d97e      	bls.n	2400c382 <put_fat+0x106>
2400c284:	4607      	mov	r7, r0
2400c286:	460c      	mov	r4, r1
2400c288:	4616      	mov	r6, r2
2400c28a:	6983      	ldr	r3, [r0, #24]
2400c28c:	428b      	cmp	r3, r1
2400c28e:	d97a      	bls.n	2400c386 <put_fat+0x10a>
		switch (fs->fs_type) {
2400c290:	7803      	ldrb	r3, [r0, #0]
2400c292:	2b02      	cmp	r3, #2
2400c294:	d045      	beq.n	2400c322 <put_fat+0xa6>
2400c296:	2b03      	cmp	r3, #3
2400c298:	d057      	beq.n	2400c34a <put_fat+0xce>
2400c29a:	2b01      	cmp	r3, #1
2400c29c:	d003      	beq.n	2400c2a6 <put_fat+0x2a>
2400c29e:	2502      	movs	r5, #2
}
2400c2a0:	4628      	mov	r0, r5
2400c2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
2400c2a6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400c2aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400c2ac:	eb01 2158 	add.w	r1, r1, r8, lsr #9
2400c2b0:	f7ff fe08 	bl	2400bec4 <move_window>
			if (res != FR_OK) break;
2400c2b4:	4605      	mov	r5, r0
2400c2b6:	2800      	cmp	r0, #0
2400c2b8:	d1f2      	bne.n	2400c2a0 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
2400c2ba:	f107 0a34 	add.w	sl, r7, #52	; 0x34
2400c2be:	f108 0901 	add.w	r9, r8, #1
2400c2c2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400c2c6:	f014 0401 	ands.w	r4, r4, #1
2400c2ca:	d01f      	beq.n	2400c30c <put_fat+0x90>
2400c2cc:	f91a 3008 	ldrsb.w	r3, [sl, r8]
2400c2d0:	f003 030f 	and.w	r3, r3, #15
2400c2d4:	0132      	lsls	r2, r6, #4
2400c2d6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
2400c2da:	4313      	orrs	r3, r2
2400c2dc:	b2db      	uxtb	r3, r3
2400c2de:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
2400c2e2:	2301      	movs	r3, #1
2400c2e4:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400c2e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400c2e8:	eb01 2159 	add.w	r1, r1, r9, lsr #9
2400c2ec:	4638      	mov	r0, r7
2400c2ee:	f7ff fde9 	bl	2400bec4 <move_window>
			if (res != FR_OK) break;
2400c2f2:	4605      	mov	r5, r0
2400c2f4:	2800      	cmp	r0, #0
2400c2f6:	d1d3      	bne.n	2400c2a0 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
2400c2f8:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400c2fc:	b144      	cbz	r4, 2400c310 <put_fat+0x94>
2400c2fe:	f3c6 1207 	ubfx	r2, r6, #4, #8
2400c302:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
2400c306:	2301      	movs	r3, #1
2400c308:	70fb      	strb	r3, [r7, #3]
			break;
2400c30a:	e7c9      	b.n	2400c2a0 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400c30c:	b2f3      	uxtb	r3, r6
2400c30e:	e7e6      	b.n	2400c2de <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400c310:	f91a 2009 	ldrsb.w	r2, [sl, r9]
2400c314:	f022 020f 	bic.w	r2, r2, #15
2400c318:	f3c6 2603 	ubfx	r6, r6, #8, #4
2400c31c:	4332      	orrs	r2, r6
2400c31e:	b2d2      	uxtb	r2, r2
2400c320:	e7ef      	b.n	2400c302 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400c322:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400c324:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400c328:	f7ff fdcc 	bl	2400bec4 <move_window>
			if (res != FR_OK) break;
2400c32c:	4605      	mov	r5, r0
2400c32e:	2800      	cmp	r0, #0
2400c330:	d1b6      	bne.n	2400c2a0 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400c332:	f107 0034 	add.w	r0, r7, #52	; 0x34
2400c336:	0064      	lsls	r4, r4, #1
2400c338:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400c33c:	b2b1      	uxth	r1, r6
2400c33e:	4420      	add	r0, r4
2400c340:	f7ff fac2 	bl	2400b8c8 <st_word>
			fs->wflag = 1;
2400c344:	2301      	movs	r3, #1
2400c346:	70fb      	strb	r3, [r7, #3]
			break;
2400c348:	e7aa      	b.n	2400c2a0 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400c34a:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400c34c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400c350:	f7ff fdb8 	bl	2400bec4 <move_window>
			if (res != FR_OK) break;
2400c354:	4605      	mov	r5, r0
2400c356:	2800      	cmp	r0, #0
2400c358:	d1a2      	bne.n	2400c2a0 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400c35a:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
2400c35e:	f107 0334 	add.w	r3, r7, #52	; 0x34
2400c362:	00a4      	lsls	r4, r4, #2
2400c364:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
2400c368:	441c      	add	r4, r3
2400c36a:	4620      	mov	r0, r4
2400c36c:	f7ff faa1 	bl	2400b8b2 <ld_dword>
2400c370:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
2400c374:	4331      	orrs	r1, r6
2400c376:	4620      	mov	r0, r4
2400c378:	f7ff faaa 	bl	2400b8d0 <st_dword>
			fs->wflag = 1;
2400c37c:	2301      	movs	r3, #1
2400c37e:	70fb      	strb	r3, [r7, #3]
			break;
2400c380:	e78e      	b.n	2400c2a0 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
2400c382:	2502      	movs	r5, #2
2400c384:	e78c      	b.n	2400c2a0 <put_fat+0x24>
2400c386:	2502      	movs	r5, #2
2400c388:	e78a      	b.n	2400c2a0 <put_fat+0x24>

2400c38a <get_fat>:
{
2400c38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
2400c38c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400c38e:	2901      	cmp	r1, #1
2400c390:	d956      	bls.n	2400c440 <get_fat+0xb6>
2400c392:	460c      	mov	r4, r1
2400c394:	69ab      	ldr	r3, [r5, #24]
2400c396:	428b      	cmp	r3, r1
2400c398:	d954      	bls.n	2400c444 <get_fat+0xba>
		switch (fs->fs_type) {
2400c39a:	782b      	ldrb	r3, [r5, #0]
2400c39c:	2b02      	cmp	r3, #2
2400c39e:	d02d      	beq.n	2400c3fc <get_fat+0x72>
2400c3a0:	2b03      	cmp	r3, #3
2400c3a2:	d03b      	beq.n	2400c41c <get_fat+0x92>
2400c3a4:	2b01      	cmp	r3, #1
2400c3a6:	d001      	beq.n	2400c3ac <get_fat+0x22>
2400c3a8:	2001      	movs	r0, #1
2400c3aa:	e04a      	b.n	2400c442 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
2400c3ac:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c3b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400c3b2:	eb01 2156 	add.w	r1, r1, r6, lsr #9
2400c3b6:	4628      	mov	r0, r5
2400c3b8:	f7ff fd84 	bl	2400bec4 <move_window>
2400c3bc:	b110      	cbz	r0, 2400c3c4 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400c3be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2400c3c2:	e03e      	b.n	2400c442 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
2400c3c4:	1c77      	adds	r7, r6, #1
2400c3c6:	f3c6 0608 	ubfx	r6, r6, #0, #9
2400c3ca:	442e      	add	r6, r5
2400c3cc:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c3d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400c3d2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
2400c3d6:	4628      	mov	r0, r5
2400c3d8:	f7ff fd74 	bl	2400bec4 <move_window>
2400c3dc:	bba0      	cbnz	r0, 2400c448 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
2400c3de:	f3c7 0708 	ubfx	r7, r7, #0, #9
2400c3e2:	443d      	add	r5, r7
2400c3e4:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
2400c3e8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400c3ec:	f014 0f01 	tst.w	r4, #1
2400c3f0:	d001      	beq.n	2400c3f6 <get_fat+0x6c>
2400c3f2:	0900      	lsrs	r0, r0, #4
2400c3f4:	e025      	b.n	2400c442 <get_fat+0xb8>
2400c3f6:	f3c0 000b 	ubfx	r0, r0, #0, #12
2400c3fa:	e022      	b.n	2400c442 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400c3fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400c3fe:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400c402:	4628      	mov	r0, r5
2400c404:	f7ff fd5e 	bl	2400bec4 <move_window>
2400c408:	bb08      	cbnz	r0, 2400c44e <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400c40a:	f105 0034 	add.w	r0, r5, #52	; 0x34
2400c40e:	0064      	lsls	r4, r4, #1
2400c410:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400c414:	4420      	add	r0, r4
2400c416:	f7ff fa47 	bl	2400b8a8 <ld_word>
			break;
2400c41a:	e012      	b.n	2400c442 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400c41c:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400c41e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400c422:	4628      	mov	r0, r5
2400c424:	f7ff fd4e 	bl	2400bec4 <move_window>
2400c428:	b9a0      	cbnz	r0, 2400c454 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400c42a:	f105 0034 	add.w	r0, r5, #52	; 0x34
2400c42e:	00a4      	lsls	r4, r4, #2
2400c430:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
2400c434:	4420      	add	r0, r4
2400c436:	f7ff fa3c 	bl	2400b8b2 <ld_dword>
2400c43a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
2400c43e:	e000      	b.n	2400c442 <get_fat+0xb8>
		val = 1;	/* Internal error */
2400c440:	2001      	movs	r0, #1
}
2400c442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400c444:	2001      	movs	r0, #1
2400c446:	e7fc      	b.n	2400c442 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400c448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2400c44c:	e7f9      	b.n	2400c442 <get_fat+0xb8>
2400c44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2400c452:	e7f6      	b.n	2400c442 <get_fat+0xb8>
2400c454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
2400c458:	e7f3      	b.n	2400c442 <get_fat+0xb8>

2400c45a <dir_sdi>:
{
2400c45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400c45e:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400c462:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400c466:	d240      	bcs.n	2400c4ea <dir_sdi+0x90>
2400c468:	4606      	mov	r6, r0
2400c46a:	460f      	mov	r7, r1
2400c46c:	f011 0f1f 	tst.w	r1, #31
2400c470:	d13d      	bne.n	2400c4ee <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
2400c472:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400c474:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400c476:	b92c      	cbnz	r4, 2400c484 <dir_sdi+0x2a>
2400c478:	f898 3000 	ldrb.w	r3, [r8]
2400c47c:	2b02      	cmp	r3, #2
2400c47e:	d901      	bls.n	2400c484 <dir_sdi+0x2a>
		clst = fs->dirbase;
2400c480:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400c484:	b9b4      	cbnz	r4, 2400c4b4 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400c486:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400c48a:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
2400c48e:	d930      	bls.n	2400c4f2 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
2400c490:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
2400c494:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
2400c496:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400c498:	69f3      	ldr	r3, [r6, #28]
2400c49a:	b393      	cbz	r3, 2400c502 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400c49c:	eb03 2357 	add.w	r3, r3, r7, lsr #9
2400c4a0:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400c4a2:	f108 0334 	add.w	r3, r8, #52	; 0x34
2400c4a6:	f3c7 0108 	ubfx	r1, r7, #0, #9
2400c4aa:	4419      	add	r1, r3
2400c4ac:	6231      	str	r1, [r6, #32]
	return FR_OK;
2400c4ae:	2000      	movs	r0, #0
}
2400c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400c4b4:	f8b8 500a 	ldrh.w	r5, [r8, #10]
2400c4b8:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400c4ba:	42af      	cmp	r7, r5
2400c4bc:	d30f      	bcc.n	2400c4de <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400c4be:	4621      	mov	r1, r4
2400c4c0:	4630      	mov	r0, r6
2400c4c2:	f7ff ff62 	bl	2400c38a <get_fat>
2400c4c6:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400c4c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400c4cc:	d013      	beq.n	2400c4f6 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400c4ce:	2801      	cmp	r0, #1
2400c4d0:	d913      	bls.n	2400c4fa <dir_sdi+0xa0>
2400c4d2:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400c4d6:	4283      	cmp	r3, r0
2400c4d8:	d911      	bls.n	2400c4fe <dir_sdi+0xa4>
			ofs -= csz;
2400c4da:	1b7f      	subs	r7, r7, r5
2400c4dc:	e7ed      	b.n	2400c4ba <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
2400c4de:	4621      	mov	r1, r4
2400c4e0:	4640      	mov	r0, r8
2400c4e2:	f7ff fb01 	bl	2400bae8 <clust2sect>
2400c4e6:	61f0      	str	r0, [r6, #28]
2400c4e8:	e7d5      	b.n	2400c496 <dir_sdi+0x3c>
		return FR_INT_ERR;
2400c4ea:	2002      	movs	r0, #2
2400c4ec:	e7e0      	b.n	2400c4b0 <dir_sdi+0x56>
2400c4ee:	2002      	movs	r0, #2
2400c4f0:	e7de      	b.n	2400c4b0 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400c4f2:	2002      	movs	r0, #2
2400c4f4:	e7dc      	b.n	2400c4b0 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400c4f6:	2001      	movs	r0, #1
2400c4f8:	e7da      	b.n	2400c4b0 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400c4fa:	2002      	movs	r0, #2
2400c4fc:	e7d8      	b.n	2400c4b0 <dir_sdi+0x56>
2400c4fe:	2002      	movs	r0, #2
2400c500:	e7d6      	b.n	2400c4b0 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
2400c502:	2002      	movs	r0, #2
2400c504:	e7d4      	b.n	2400c4b0 <dir_sdi+0x56>

2400c506 <create_chain>:
{
2400c506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400c50a:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
2400c50c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
2400c50e:	460f      	mov	r7, r1
2400c510:	b951      	cbnz	r1, 2400c528 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400c512:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400c516:	f1b8 0f00 	cmp.w	r8, #0
2400c51a:	d012      	beq.n	2400c542 <create_chain+0x3c>
2400c51c:	69b3      	ldr	r3, [r6, #24]
2400c51e:	4543      	cmp	r3, r8
2400c520:	d811      	bhi.n	2400c546 <create_chain+0x40>
2400c522:	f04f 0801 	mov.w	r8, #1
2400c526:	e00e      	b.n	2400c546 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400c528:	f7ff ff2f 	bl	2400c38a <get_fat>
2400c52c:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400c52e:	2801      	cmp	r0, #1
2400c530:	d94c      	bls.n	2400c5cc <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400c532:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400c536:	d04e      	beq.n	2400c5d6 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400c538:	69b2      	ldr	r2, [r6, #24]
2400c53a:	4282      	cmp	r2, r0
2400c53c:	d84b      	bhi.n	2400c5d6 <create_chain+0xd0>
		scl = clst;
2400c53e:	46b8      	mov	r8, r7
2400c540:	e001      	b.n	2400c546 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400c542:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
2400c546:	4644      	mov	r4, r8
2400c548:	e00c      	b.n	2400c564 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400c54a:	4621      	mov	r1, r4
2400c54c:	4628      	mov	r0, r5
2400c54e:	f7ff ff1c 	bl	2400c38a <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
2400c552:	4603      	mov	r3, r0
2400c554:	b178      	cbz	r0, 2400c576 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400c556:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400c55a:	bf18      	it	ne
2400c55c:	2801      	cmpne	r0, #1
2400c55e:	d03a      	beq.n	2400c5d6 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
2400c560:	4544      	cmp	r4, r8
2400c562:	d037      	beq.n	2400c5d4 <create_chain+0xce>
			ncl++;							/* Next cluster */
2400c564:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400c566:	69b3      	ldr	r3, [r6, #24]
2400c568:	42a3      	cmp	r3, r4
2400c56a:	d8ee      	bhi.n	2400c54a <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
2400c56c:	f1b8 0f01 	cmp.w	r8, #1
2400c570:	d92e      	bls.n	2400c5d0 <create_chain+0xca>
				ncl = 2;
2400c572:	2402      	movs	r4, #2
2400c574:	e7e9      	b.n	2400c54a <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
2400c576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400c57a:	4621      	mov	r1, r4
2400c57c:	4630      	mov	r0, r6
2400c57e:	f7ff fe7d 	bl	2400c27c <put_fat>
		if (res == FR_OK && clst != 0) {
2400c582:	4603      	mov	r3, r0
2400c584:	fab0 f080 	clz	r0, r0
2400c588:	0940      	lsrs	r0, r0, #5
2400c58a:	2f00      	cmp	r7, #0
2400c58c:	bf08      	it	eq
2400c58e:	2000      	moveq	r0, #0
2400c590:	b970      	cbnz	r0, 2400c5b0 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400c592:	b9a3      	cbnz	r3, 2400c5be <create_chain+0xb8>
		fs->last_clst = ncl;
2400c594:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400c596:	6972      	ldr	r2, [r6, #20]
2400c598:	69b3      	ldr	r3, [r6, #24]
2400c59a:	3b02      	subs	r3, #2
2400c59c:	429a      	cmp	r2, r3
2400c59e:	d801      	bhi.n	2400c5a4 <create_chain+0x9e>
2400c5a0:	3a01      	subs	r2, #1
2400c5a2:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
2400c5a4:	7933      	ldrb	r3, [r6, #4]
2400c5a6:	f043 0301 	orr.w	r3, r3, #1
2400c5aa:	7133      	strb	r3, [r6, #4]
2400c5ac:	4623      	mov	r3, r4
2400c5ae:	e012      	b.n	2400c5d6 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
2400c5b0:	4622      	mov	r2, r4
2400c5b2:	4639      	mov	r1, r7
2400c5b4:	4630      	mov	r0, r6
2400c5b6:	f7ff fe61 	bl	2400c27c <put_fat>
2400c5ba:	4603      	mov	r3, r0
2400c5bc:	e7e9      	b.n	2400c592 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400c5be:	2b01      	cmp	r3, #1
2400c5c0:	d001      	beq.n	2400c5c6 <create_chain+0xc0>
2400c5c2:	2301      	movs	r3, #1
2400c5c4:	e007      	b.n	2400c5d6 <create_chain+0xd0>
2400c5c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400c5ca:	e004      	b.n	2400c5d6 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400c5cc:	2301      	movs	r3, #1
2400c5ce:	e002      	b.n	2400c5d6 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
2400c5d0:	2300      	movs	r3, #0
2400c5d2:	e000      	b.n	2400c5d6 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
2400c5d4:	2300      	movs	r3, #0
}
2400c5d6:	4618      	mov	r0, r3
2400c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

2400c5dc <remove_chain>:
{
2400c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400c5de:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2400c5e0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400c5e2:	2901      	cmp	r1, #1
2400c5e4:	d92e      	bls.n	2400c644 <remove_chain+0x68>
2400c5e6:	4606      	mov	r6, r0
2400c5e8:	4611      	mov	r1, r2
2400c5ea:	69ab      	ldr	r3, [r5, #24]
2400c5ec:	42a3      	cmp	r3, r4
2400c5ee:	d92b      	bls.n	2400c648 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400c5f0:	b14a      	cbz	r2, 2400c606 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
2400c5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400c5f6:	4628      	mov	r0, r5
2400c5f8:	f7ff fe40 	bl	2400c27c <put_fat>
		if (res != FR_OK) return res;
2400c5fc:	4607      	mov	r7, r0
2400c5fe:	b110      	cbz	r0, 2400c606 <remove_chain+0x2a>
2400c600:	e023      	b.n	2400c64a <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400c602:	42a2      	cmp	r2, r4
2400c604:	d921      	bls.n	2400c64a <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
2400c606:	4627      	mov	r7, r4
2400c608:	4621      	mov	r1, r4
2400c60a:	4630      	mov	r0, r6
2400c60c:	f7ff febd 	bl	2400c38a <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
2400c610:	4604      	mov	r4, r0
2400c612:	b1e0      	cbz	r0, 2400c64e <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400c614:	2801      	cmp	r0, #1
2400c616:	d01c      	beq.n	2400c652 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400c618:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400c61c:	d01b      	beq.n	2400c656 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
2400c61e:	2200      	movs	r2, #0
2400c620:	4639      	mov	r1, r7
2400c622:	4628      	mov	r0, r5
2400c624:	f7ff fe2a 	bl	2400c27c <put_fat>
			if (res != FR_OK) return res;
2400c628:	4607      	mov	r7, r0
2400c62a:	b970      	cbnz	r0, 2400c64a <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400c62c:	696b      	ldr	r3, [r5, #20]
2400c62e:	69aa      	ldr	r2, [r5, #24]
2400c630:	1e91      	subs	r1, r2, #2
2400c632:	428b      	cmp	r3, r1
2400c634:	d2e5      	bcs.n	2400c602 <remove_chain+0x26>
			fs->free_clst++;
2400c636:	3301      	adds	r3, #1
2400c638:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400c63a:	792b      	ldrb	r3, [r5, #4]
2400c63c:	f043 0301 	orr.w	r3, r3, #1
2400c640:	712b      	strb	r3, [r5, #4]
2400c642:	e7de      	b.n	2400c602 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400c644:	2702      	movs	r7, #2
2400c646:	e000      	b.n	2400c64a <remove_chain+0x6e>
2400c648:	2702      	movs	r7, #2
}
2400c64a:	4638      	mov	r0, r7
2400c64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
2400c64e:	2700      	movs	r7, #0
2400c650:	e7fb      	b.n	2400c64a <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400c652:	2702      	movs	r7, #2
2400c654:	e7f9      	b.n	2400c64a <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400c656:	2701      	movs	r7, #1
2400c658:	e7f7      	b.n	2400c64a <remove_chain+0x6e>

2400c65a <dir_next>:
{
2400c65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
2400c65e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400c660:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400c662:	69c3      	ldr	r3, [r0, #28]
2400c664:	2b00      	cmp	r3, #0
2400c666:	d06c      	beq.n	2400c742 <dir_next+0xe8>
2400c668:	4604      	mov	r4, r0
2400c66a:	4688      	mov	r8, r1
2400c66c:	3520      	adds	r5, #32
2400c66e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400c672:	d268      	bcs.n	2400c746 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400c674:	f3c5 0708 	ubfx	r7, r5, #0, #9
2400c678:	b93f      	cbnz	r7, 2400c68a <dir_next+0x30>
		dp->sect++;				/* Next sector */
2400c67a:	3301      	adds	r3, #1
2400c67c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400c67e:	6981      	ldr	r1, [r0, #24]
2400c680:	b979      	cbnz	r1, 2400c6a2 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400c682:	8933      	ldrh	r3, [r6, #8]
2400c684:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400c688:	d907      	bls.n	2400c69a <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
2400c68a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400c68c:	f106 0334 	add.w	r3, r6, #52	; 0x34
2400c690:	443b      	add	r3, r7
2400c692:	6223      	str	r3, [r4, #32]
	return FR_OK;
2400c694:	2000      	movs	r0, #0
}
2400c696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
2400c69a:	2300      	movs	r3, #0
2400c69c:	61c3      	str	r3, [r0, #28]
2400c69e:	2004      	movs	r0, #4
2400c6a0:	e7f9      	b.n	2400c696 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400c6a2:	8973      	ldrh	r3, [r6, #10]
2400c6a4:	3b01      	subs	r3, #1
2400c6a6:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
2400c6aa:	d1ee      	bne.n	2400c68a <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400c6ac:	f7ff fe6d 	bl	2400c38a <get_fat>
2400c6b0:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400c6b2:	2801      	cmp	r0, #1
2400c6b4:	d949      	bls.n	2400c74a <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400c6b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400c6ba:	d048      	beq.n	2400c74e <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400c6bc:	69b3      	ldr	r3, [r6, #24]
2400c6be:	4283      	cmp	r3, r0
2400c6c0:	d837      	bhi.n	2400c732 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
2400c6c2:	f1b8 0f00 	cmp.w	r8, #0
2400c6c6:	d011      	beq.n	2400c6ec <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400c6c8:	69a1      	ldr	r1, [r4, #24]
2400c6ca:	4620      	mov	r0, r4
2400c6cc:	f7ff ff1b 	bl	2400c506 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400c6d0:	4682      	mov	sl, r0
2400c6d2:	2800      	cmp	r0, #0
2400c6d4:	d03d      	beq.n	2400c752 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400c6d6:	2801      	cmp	r0, #1
2400c6d8:	d03d      	beq.n	2400c756 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400c6da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400c6de:	d03c      	beq.n	2400c75a <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
2400c6e0:	4630      	mov	r0, r6
2400c6e2:	f7ff fbc5 	bl	2400be70 <sync_window>
2400c6e6:	b128      	cbz	r0, 2400c6f4 <dir_next+0x9a>
2400c6e8:	2001      	movs	r0, #1
2400c6ea:	e7d4      	b.n	2400c696 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
2400c6ec:	2300      	movs	r3, #0
2400c6ee:	61e3      	str	r3, [r4, #28]
2400c6f0:	2004      	movs	r0, #4
2400c6f2:	e7d0      	b.n	2400c696 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
2400c6f4:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c6f8:	2100      	movs	r1, #0
2400c6fa:	f106 0034 	add.w	r0, r6, #52	; 0x34
2400c6fe:	f7ff f8fb 	bl	2400b8f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400c702:	4651      	mov	r1, sl
2400c704:	4630      	mov	r0, r6
2400c706:	f7ff f9ef 	bl	2400bae8 <clust2sect>
2400c70a:	6330      	str	r0, [r6, #48]	; 0x30
2400c70c:	8973      	ldrh	r3, [r6, #10]
2400c70e:	4599      	cmp	r9, r3
2400c710:	d20b      	bcs.n	2400c72a <dir_next+0xd0>
						fs->wflag = 1;
2400c712:	2301      	movs	r3, #1
2400c714:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
2400c716:	4630      	mov	r0, r6
2400c718:	f7ff fbaa 	bl	2400be70 <sync_window>
2400c71c:	b9f8      	cbnz	r0, 2400c75e <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400c71e:	f109 0901 	add.w	r9, r9, #1
2400c722:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400c724:	3301      	adds	r3, #1
2400c726:	6333      	str	r3, [r6, #48]	; 0x30
2400c728:	e7f0      	b.n	2400c70c <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
2400c72a:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400c72c:	eba3 0309 	sub.w	r3, r3, r9
2400c730:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
2400c732:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
2400c736:	4651      	mov	r1, sl
2400c738:	4630      	mov	r0, r6
2400c73a:	f7ff f9d5 	bl	2400bae8 <clust2sect>
2400c73e:	61e0      	str	r0, [r4, #28]
2400c740:	e7a3      	b.n	2400c68a <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400c742:	2004      	movs	r0, #4
2400c744:	e7a7      	b.n	2400c696 <dir_next+0x3c>
2400c746:	2004      	movs	r0, #4
2400c748:	e7a5      	b.n	2400c696 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400c74a:	2002      	movs	r0, #2
2400c74c:	e7a3      	b.n	2400c696 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400c74e:	2001      	movs	r0, #1
2400c750:	e7a1      	b.n	2400c696 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400c752:	2007      	movs	r0, #7
2400c754:	e79f      	b.n	2400c696 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400c756:	2002      	movs	r0, #2
2400c758:	e79d      	b.n	2400c696 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400c75a:	2001      	movs	r0, #1
2400c75c:	e79b      	b.n	2400c696 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
2400c75e:	2001      	movs	r0, #1
2400c760:	e799      	b.n	2400c696 <dir_next+0x3c>

2400c762 <dir_alloc>:
{
2400c762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400c764:	4604      	mov	r4, r0
2400c766:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
2400c768:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
2400c76a:	2100      	movs	r1, #0
2400c76c:	f7ff fe75 	bl	2400c45a <dir_sdi>
	if (res == FR_OK) {
2400c770:	4602      	mov	r2, r0
2400c772:	b9b8      	cbnz	r0, 2400c7a4 <dir_alloc+0x42>
		n = 0;
2400c774:	2500      	movs	r5, #0
2400c776:	e006      	b.n	2400c786 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
2400c778:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
2400c77a:	2101      	movs	r1, #1
2400c77c:	4620      	mov	r0, r4
2400c77e:	f7ff ff6c 	bl	2400c65a <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
2400c782:	4602      	mov	r2, r0
2400c784:	b970      	cbnz	r0, 2400c7a4 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
2400c786:	69e1      	ldr	r1, [r4, #28]
2400c788:	4638      	mov	r0, r7
2400c78a:	f7ff fb9b 	bl	2400bec4 <move_window>
			if (res != FR_OK) break;
2400c78e:	4602      	mov	r2, r0
2400c790:	b940      	cbnz	r0, 2400c7a4 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400c792:	6a23      	ldr	r3, [r4, #32]
2400c794:	781b      	ldrb	r3, [r3, #0]
2400c796:	2b00      	cmp	r3, #0
2400c798:	bf18      	it	ne
2400c79a:	2be5      	cmpne	r3, #229	; 0xe5
2400c79c:	d1ec      	bne.n	2400c778 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400c79e:	3501      	adds	r5, #1
2400c7a0:	42b5      	cmp	r5, r6
2400c7a2:	d1ea      	bne.n	2400c77a <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400c7a4:	2a04      	cmp	r2, #4
2400c7a6:	d001      	beq.n	2400c7ac <dir_alloc+0x4a>
}
2400c7a8:	4610      	mov	r0, r2
2400c7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400c7ac:	2207      	movs	r2, #7
2400c7ae:	e7fb      	b.n	2400c7a8 <dir_alloc+0x46>

2400c7b0 <dir_read>:
{
2400c7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400c7b4:	4604      	mov	r4, r0
2400c7b6:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
2400c7b8:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
2400c7ba:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400c7be:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
2400c7c0:	2504      	movs	r5, #4
	while (dp->sect) {
2400c7c2:	e02c      	b.n	2400c81e <dir_read+0x6e>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400c7c4:	2b0f      	cmp	r3, #15
2400c7c6:	d119      	bne.n	2400c7fc <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400c7c8:	f012 0f40 	tst.w	r2, #64	; 0x40
2400c7cc:	d006      	beq.n	2400c7dc <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
2400c7ce:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
2400c7d2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
2400c7d6:	6963      	ldr	r3, [r4, #20]
2400c7d8:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
2400c7da:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400c7dc:	42b2      	cmp	r2, r6
2400c7de:	d001      	beq.n	2400c7e4 <dir_read+0x34>
2400c7e0:	26ff      	movs	r6, #255	; 0xff
2400c7e2:	e016      	b.n	2400c812 <dir_read+0x62>
2400c7e4:	7b4b      	ldrb	r3, [r1, #13]
2400c7e6:	454b      	cmp	r3, r9
2400c7e8:	d001      	beq.n	2400c7ee <dir_read+0x3e>
2400c7ea:	26ff      	movs	r6, #255	; 0xff
2400c7ec:	e011      	b.n	2400c812 <dir_read+0x62>
2400c7ee:	68f8      	ldr	r0, [r7, #12]
2400c7f0:	f7ff f9ac 	bl	2400bb4c <pick_lfn>
2400c7f4:	b378      	cbz	r0, 2400c856 <dir_read+0xa6>
2400c7f6:	3e01      	subs	r6, #1
2400c7f8:	b2f6      	uxtb	r6, r6
2400c7fa:	e00a      	b.n	2400c812 <dir_read+0x62>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400c7fc:	b926      	cbnz	r6, 2400c808 <dir_read+0x58>
2400c7fe:	4608      	mov	r0, r1
2400c800:	f7ff fa77 	bl	2400bcf2 <sum_sfn>
2400c804:	4548      	cmp	r0, r9
2400c806:	d029      	beq.n	2400c85c <dir_read+0xac>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400c808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400c80c:	6323      	str	r3, [r4, #48]	; 0x30
2400c80e:	e025      	b.n	2400c85c <dir_read+0xac>
				ord = 0xFF;
2400c810:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
2400c812:	2100      	movs	r1, #0
2400c814:	4620      	mov	r0, r4
2400c816:	f7ff ff20 	bl	2400c65a <dir_next>
		if (res != FR_OK) break;
2400c81a:	4605      	mov	r5, r0
2400c81c:	b9f0      	cbnz	r0, 2400c85c <dir_read+0xac>
	while (dp->sect) {
2400c81e:	69e1      	ldr	r1, [r4, #28]
2400c820:	b1e1      	cbz	r1, 2400c85c <dir_read+0xac>
		res = move_window(fs, dp->sect);
2400c822:	4638      	mov	r0, r7
2400c824:	f7ff fb4e 	bl	2400bec4 <move_window>
		if (res != FR_OK) break;
2400c828:	4605      	mov	r5, r0
2400c82a:	b9b8      	cbnz	r0, 2400c85c <dir_read+0xac>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400c82c:	6a21      	ldr	r1, [r4, #32]
2400c82e:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400c830:	b19a      	cbz	r2, 2400c85a <dir_read+0xaa>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400c832:	7acb      	ldrb	r3, [r1, #11]
2400c834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400c838:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400c83a:	2a2e      	cmp	r2, #46	; 0x2e
2400c83c:	bf18      	it	ne
2400c83e:	2ae5      	cmpne	r2, #229	; 0xe5
2400c840:	d0e6      	beq.n	2400c810 <dir_read+0x60>
2400c842:	f023 0020 	bic.w	r0, r3, #32
2400c846:	2808      	cmp	r0, #8
2400c848:	bf14      	ite	ne
2400c84a:	2000      	movne	r0, #0
2400c84c:	2001      	moveq	r0, #1
2400c84e:	4540      	cmp	r0, r8
2400c850:	d0b8      	beq.n	2400c7c4 <dir_read+0x14>
				ord = 0xFF;
2400c852:	26ff      	movs	r6, #255	; 0xff
2400c854:	e7dd      	b.n	2400c812 <dir_read+0x62>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400c856:	26ff      	movs	r6, #255	; 0xff
2400c858:	e7db      	b.n	2400c812 <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
2400c85a:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400c85c:	b10d      	cbz	r5, 2400c862 <dir_read+0xb2>
2400c85e:	2300      	movs	r3, #0
2400c860:	61e3      	str	r3, [r4, #28]
}
2400c862:	4628      	mov	r0, r5
2400c864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

2400c868 <create_name>:
{
2400c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400c86c:	b083      	sub	sp, #12
2400c86e:	4680      	mov	r8, r0
2400c870:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400c872:	f8d1 9000 	ldr.w	r9, [r1]
2400c876:	6803      	ldr	r3, [r0, #0]
2400c878:	68dd      	ldr	r5, [r3, #12]
2400c87a:	2400      	movs	r4, #0
2400c87c:	4623      	mov	r3, r4
2400c87e:	e01d      	b.n	2400c8bc <create_name+0x54>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400c880:	3701      	adds	r7, #1
2400c882:	f819 3007 	ldrb.w	r3, [r9, r7]
2400c886:	2b5c      	cmp	r3, #92	; 0x5c
2400c888:	bf18      	it	ne
2400c88a:	2b2f      	cmpne	r3, #47	; 0x2f
2400c88c:	d0f8      	beq.n	2400c880 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
2400c88e:	444f      	add	r7, r9
2400c890:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400c894:	281f      	cmp	r0, #31
2400c896:	d82e      	bhi.n	2400c8f6 <create_name+0x8e>
2400c898:	f04f 0904 	mov.w	r9, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400c89c:	b374      	cbz	r4, 2400c8fc <create_name+0x94>
		w = lfn[di - 1];
2400c89e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
2400c8a2:	4423      	add	r3, r4
2400c8a4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
2400c8a8:	2b20      	cmp	r3, #32
2400c8aa:	bf18      	it	ne
2400c8ac:	2b2e      	cmpne	r3, #46	; 0x2e
2400c8ae:	d125      	bne.n	2400c8fc <create_name+0x94>
		di--;
2400c8b0:	3c01      	subs	r4, #1
2400c8b2:	e7f3      	b.n	2400c89c <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
2400c8b4:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
2400c8b8:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
2400c8ba:	463b      	mov	r3, r7
2400c8bc:	1c5f      	adds	r7, r3, #1
2400c8be:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
2400c8c2:	281f      	cmp	r0, #31
2400c8c4:	d9e3      	bls.n	2400c88e <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400c8c6:	285c      	cmp	r0, #92	; 0x5c
2400c8c8:	bf18      	it	ne
2400c8ca:	282f      	cmpne	r0, #47	; 0x2f
2400c8cc:	d0d9      	beq.n	2400c882 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400c8ce:	2cfe      	cmp	r4, #254	; 0xfe
2400c8d0:	f200 80d7 	bhi.w	2400ca82 <create_name+0x21a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400c8d4:	2101      	movs	r1, #1
2400c8d6:	f000 ff8d 	bl	2400d7f4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400c8da:	4606      	mov	r6, r0
2400c8dc:	2800      	cmp	r0, #0
2400c8de:	f000 80d2 	beq.w	2400ca86 <create_name+0x21e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400c8e2:	287f      	cmp	r0, #127	; 0x7f
2400c8e4:	d8e6      	bhi.n	2400c8b4 <create_name+0x4c>
2400c8e6:	4601      	mov	r1, r0
2400c8e8:	4869      	ldr	r0, [pc, #420]	; (2400ca90 <create_name+0x228>)
2400c8ea:	f7ff f817 	bl	2400b91c <chk_chr>
2400c8ee:	2800      	cmp	r0, #0
2400c8f0:	d0e0      	beq.n	2400c8b4 <create_name+0x4c>
2400c8f2:	2006      	movs	r0, #6
2400c8f4:	e06f      	b.n	2400c9d6 <create_name+0x16e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400c8f6:	f04f 0900 	mov.w	r9, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400c8fa:	e7cf      	b.n	2400c89c <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
2400c8fc:	2300      	movs	r3, #0
2400c8fe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400c902:	2c00      	cmp	r4, #0
2400c904:	f000 80c1 	beq.w	2400ca8a <create_name+0x222>
	mem_set(dp->fn, ' ', 11);
2400c908:	220b      	movs	r2, #11
2400c90a:	2120      	movs	r1, #32
2400c90c:	f108 0024 	add.w	r0, r8, #36	; 0x24
2400c910:	f7fe fff2 	bl	2400b8f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400c914:	2300      	movs	r3, #0
2400c916:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
2400c91a:	2a2e      	cmp	r2, #46	; 0x2e
2400c91c:	bf18      	it	ne
2400c91e:	2a20      	cmpne	r2, #32
2400c920:	d101      	bne.n	2400c926 <create_name+0xbe>
2400c922:	3301      	adds	r3, #1
2400c924:	e7f7      	b.n	2400c916 <create_name+0xae>
	if (si) cf |= NS_LOSS | NS_LFN;
2400c926:	b11b      	cbz	r3, 2400c930 <create_name+0xc8>
2400c928:	f049 0903 	orr.w	r9, r9, #3
2400c92c:	e000      	b.n	2400c930 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400c92e:	3c01      	subs	r4, #1
2400c930:	b16c      	cbz	r4, 2400c94e <create_name+0xe6>
2400c932:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
2400c936:	4422      	add	r2, r4
2400c938:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
2400c93c:	2a2e      	cmp	r2, #46	; 0x2e
2400c93e:	d1f6      	bne.n	2400c92e <create_name+0xc6>
2400c940:	f04f 0b08 	mov.w	fp, #8
2400c944:	f04f 0a00 	mov.w	sl, #0
2400c948:	f8cd a004 	str.w	sl, [sp, #4]
2400c94c:	e008      	b.n	2400c960 <create_name+0xf8>
2400c94e:	46a2      	mov	sl, r4
2400c950:	f04f 0b08 	mov.w	fp, #8
2400c954:	2200      	movs	r2, #0
2400c956:	9201      	str	r2, [sp, #4]
2400c958:	e002      	b.n	2400c960 <create_name+0xf8>
			cf |= NS_LOSS | NS_LFN; continue;
2400c95a:	f049 0903 	orr.w	r9, r9, #3
		w = lfn[si++];					/* Get an LFN character */
2400c95e:	463b      	mov	r3, r7
2400c960:	1c5f      	adds	r7, r3, #1
2400c962:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
2400c966:	b1be      	cbz	r6, 2400c998 <create_name+0x130>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400c968:	2e20      	cmp	r6, #32
2400c96a:	d0f6      	beq.n	2400c95a <create_name+0xf2>
2400c96c:	2e2e      	cmp	r6, #46	; 0x2e
2400c96e:	bf14      	ite	ne
2400c970:	2300      	movne	r3, #0
2400c972:	2301      	moveq	r3, #1
2400c974:	42bc      	cmp	r4, r7
2400c976:	bf08      	it	eq
2400c978:	2300      	moveq	r3, #0
2400c97a:	2b00      	cmp	r3, #0
2400c97c:	d1ed      	bne.n	2400c95a <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400c97e:	42bc      	cmp	r4, r7
2400c980:	bf18      	it	ne
2400c982:	45da      	cmpne	sl, fp
2400c984:	d337      	bcc.n	2400c9f6 <create_name+0x18e>
			if (ni == 11) {				/* Long extension */
2400c986:	f1bb 0f0b 	cmp.w	fp, #11
2400c98a:	d027      	beq.n	2400c9dc <create_name+0x174>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400c98c:	42bc      	cmp	r4, r7
2400c98e:	d001      	beq.n	2400c994 <create_name+0x12c>
2400c990:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
2400c994:	42bc      	cmp	r4, r7
2400c996:	d224      	bcs.n	2400c9e2 <create_name+0x17a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400c998:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
2400c99c:	2be5      	cmp	r3, #229	; 0xe5
2400c99e:	d061      	beq.n	2400ca64 <create_name+0x1fc>
	if (ni == 8) b <<= 2;
2400c9a0:	f1bb 0f08 	cmp.w	fp, #8
2400c9a4:	d062      	beq.n	2400ca6c <create_name+0x204>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400c9a6:	9b01      	ldr	r3, [sp, #4]
2400c9a8:	f003 020c 	and.w	r2, r3, #12
2400c9ac:	2a0c      	cmp	r2, #12
2400c9ae:	d003      	beq.n	2400c9b8 <create_name+0x150>
2400c9b0:	f003 0303 	and.w	r3, r3, #3
2400c9b4:	2b03      	cmp	r3, #3
2400c9b6:	d101      	bne.n	2400c9bc <create_name+0x154>
2400c9b8:	f049 0902 	orr.w	r9, r9, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400c9bc:	f019 0f02 	tst.w	r9, #2
2400c9c0:	d106      	bne.n	2400c9d0 <create_name+0x168>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400c9c2:	9b01      	ldr	r3, [sp, #4]
2400c9c4:	f003 0303 	and.w	r3, r3, #3
2400c9c8:	2b01      	cmp	r3, #1
2400c9ca:	d054      	beq.n	2400ca76 <create_name+0x20e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400c9cc:	2a04      	cmp	r2, #4
2400c9ce:	d055      	beq.n	2400ca7c <create_name+0x214>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400c9d0:	f888 902f 	strb.w	r9, [r8, #47]	; 0x2f
	return FR_OK;
2400c9d4:	2000      	movs	r0, #0
}
2400c9d6:	b003      	add	sp, #12
2400c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
2400c9dc:	f049 0903 	orr.w	r9, r9, #3
2400c9e0:	e7da      	b.n	2400c998 <create_name+0x130>
			b <<= 2; continue;
2400c9e2:	9b01      	ldr	r3, [sp, #4]
2400c9e4:	009b      	lsls	r3, r3, #2
2400c9e6:	b2db      	uxtb	r3, r3
2400c9e8:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400c9ea:	4623      	mov	r3, r4
2400c9ec:	f04f 0b0b 	mov.w	fp, #11
2400c9f0:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
2400c9f4:	e7b4      	b.n	2400c960 <create_name+0xf8>
		if (w >= 0x80) {				/* Non ASCII character */
2400c9f6:	2e7f      	cmp	r6, #127	; 0x7f
2400c9f8:	d80b      	bhi.n	2400ca12 <create_name+0x1aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400c9fa:	b9be      	cbnz	r6, 2400ca2c <create_name+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400c9fc:	f049 0903 	orr.w	r9, r9, #3
2400ca00:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
2400ca02:	eb08 030a 	add.w	r3, r8, sl
2400ca06:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
2400ca0a:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
2400ca0c:	f10a 0a01 	add.w	sl, sl, #1
2400ca10:	e7a6      	b.n	2400c960 <create_name+0xf8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400ca12:	2100      	movs	r1, #0
2400ca14:	4630      	mov	r0, r6
2400ca16:	f000 feed 	bl	2400d7f4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400ca1a:	4606      	mov	r6, r0
2400ca1c:	b118      	cbz	r0, 2400ca26 <create_name+0x1be>
2400ca1e:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
2400ca22:	4b1c      	ldr	r3, [pc, #112]	; (2400ca94 <create_name+0x22c>)
2400ca24:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
2400ca26:	f049 0902 	orr.w	r9, r9, #2
2400ca2a:	e7e6      	b.n	2400c9fa <create_name+0x192>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400ca2c:	4631      	mov	r1, r6
2400ca2e:	481a      	ldr	r0, [pc, #104]	; (2400ca98 <create_name+0x230>)
2400ca30:	f7fe ff74 	bl	2400b91c <chk_chr>
2400ca34:	2800      	cmp	r0, #0
2400ca36:	d1e1      	bne.n	2400c9fc <create_name+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
2400ca38:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
2400ca3c:	b29b      	uxth	r3, r3
2400ca3e:	2b19      	cmp	r3, #25
2400ca40:	d804      	bhi.n	2400ca4c <create_name+0x1e4>
					b |= 2;
2400ca42:	9b01      	ldr	r3, [sp, #4]
2400ca44:	f043 0302 	orr.w	r3, r3, #2
2400ca48:	9301      	str	r3, [sp, #4]
2400ca4a:	e7da      	b.n	2400ca02 <create_name+0x19a>
					if (IsLower(w)) {	/* ASCII small capital */
2400ca4c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
2400ca50:	b29b      	uxth	r3, r3
2400ca52:	2b19      	cmp	r3, #25
2400ca54:	d8d5      	bhi.n	2400ca02 <create_name+0x19a>
						b |= 1; w -= 0x20;
2400ca56:	9b01      	ldr	r3, [sp, #4]
2400ca58:	f043 0301 	orr.w	r3, r3, #1
2400ca5c:	9301      	str	r3, [sp, #4]
2400ca5e:	3e20      	subs	r6, #32
2400ca60:	b2b6      	uxth	r6, r6
2400ca62:	e7ce      	b.n	2400ca02 <create_name+0x19a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400ca64:	2305      	movs	r3, #5
2400ca66:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
2400ca6a:	e799      	b.n	2400c9a0 <create_name+0x138>
	if (ni == 8) b <<= 2;
2400ca6c:	9b01      	ldr	r3, [sp, #4]
2400ca6e:	009b      	lsls	r3, r3, #2
2400ca70:	b2db      	uxtb	r3, r3
2400ca72:	9301      	str	r3, [sp, #4]
2400ca74:	e797      	b.n	2400c9a6 <create_name+0x13e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400ca76:	f049 0910 	orr.w	r9, r9, #16
2400ca7a:	e7a7      	b.n	2400c9cc <create_name+0x164>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400ca7c:	f049 0908 	orr.w	r9, r9, #8
2400ca80:	e7a6      	b.n	2400c9d0 <create_name+0x168>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400ca82:	2006      	movs	r0, #6
2400ca84:	e7a7      	b.n	2400c9d6 <create_name+0x16e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400ca86:	2006      	movs	r0, #6
2400ca88:	e7a5      	b.n	2400c9d6 <create_name+0x16e>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400ca8a:	2006      	movs	r0, #6
2400ca8c:	e7a3      	b.n	2400c9d6 <create_name+0x16e>
2400ca8e:	bf00      	nop
2400ca90:	24015ff0 	.word	0x24015ff0
2400ca94:	24016004 	.word	0x24016004
2400ca98:	24015ffc 	.word	0x24015ffc

2400ca9c <get_fileinfo>:
{
2400ca9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400caa0:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400caa4:	2300      	movs	r3, #0
2400caa6:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400caa8:	69c3      	ldr	r3, [r0, #28]
2400caaa:	2b00      	cmp	r3, #0
2400caac:	d06b      	beq.n	2400cb86 <get_fileinfo+0xea>
2400caae:	4606      	mov	r6, r0
2400cab0:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400cab2:	6b03      	ldr	r3, [r0, #48]	; 0x30
2400cab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2400cab8:	d016      	beq.n	2400cae8 <get_fileinfo+0x4c>
			i = j = 0;
2400caba:	2300      	movs	r3, #0
2400cabc:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400cabe:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400cac2:	1c5f      	adds	r7, r3, #1
2400cac4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
2400cac8:	b158      	cbz	r0, 2400cae2 <get_fileinfo+0x46>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400caca:	2100      	movs	r1, #0
2400cacc:	f000 fe92 	bl	2400d7f4 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2400cad0:	b130      	cbz	r0, 2400cae0 <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400cad2:	2dfe      	cmp	r5, #254	; 0xfe
2400cad4:	d80c      	bhi.n	2400caf0 <get_fileinfo+0x54>
				fno->fname[i++] = (TCHAR)w;
2400cad6:	1962      	adds	r2, r4, r5
2400cad8:	7590      	strb	r0, [r2, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400cada:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
2400cadc:	3501      	adds	r5, #1
2400cade:	e7ee      	b.n	2400cabe <get_fileinfo+0x22>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2400cae0:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400cae2:	4425      	add	r5, r4
2400cae4:	2300      	movs	r3, #0
2400cae6:	75ab      	strb	r3, [r5, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400cae8:	7da5      	ldrb	r5, [r4, #22]
	i = j = 0;
2400caea:	2200      	movs	r2, #0
2400caec:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
2400caee:	e012      	b.n	2400cb16 <get_fileinfo+0x7a>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400caf0:	2500      	movs	r5, #0
2400caf2:	e7f6      	b.n	2400cae2 <get_fileinfo+0x46>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400caf4:	23e5      	movs	r3, #229	; 0xe5
2400caf6:	e017      	b.n	2400cb28 <get_fileinfo+0x8c>
			if (!lfv) fno->fname[j] = '.';
2400caf8:	b915      	cbnz	r5, 2400cb00 <get_fileinfo+0x64>
2400cafa:	18a0      	adds	r0, r4, r2
2400cafc:	272e      	movs	r7, #46	; 0x2e
2400cafe:	7587      	strb	r7, [r0, #22]
			fno->altname[j++] = '.';
2400cb00:	18a0      	adds	r0, r4, r2
2400cb02:	272e      	movs	r7, #46	; 0x2e
2400cb04:	7247      	strb	r7, [r0, #9]
2400cb06:	3201      	adds	r2, #1
2400cb08:	e010      	b.n	2400cb2c <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400cb0a:	2010      	movs	r0, #16
2400cb0c:	e01c      	b.n	2400cb48 <get_fileinfo+0xac>
			fno->fname[j] = c;
2400cb0e:	18a0      	adds	r0, r4, r2
2400cb10:	7583      	strb	r3, [r0, #22]
		j++;
2400cb12:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400cb14:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
2400cb16:	2b0a      	cmp	r3, #10
2400cb18:	d81b      	bhi.n	2400cb52 <get_fileinfo+0xb6>
		c = (TCHAR)dp->dir[i++];
2400cb1a:	6a30      	ldr	r0, [r6, #32]
2400cb1c:	1c59      	adds	r1, r3, #1
2400cb1e:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
2400cb20:	2b20      	cmp	r3, #32
2400cb22:	d0f7      	beq.n	2400cb14 <get_fileinfo+0x78>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400cb24:	2b05      	cmp	r3, #5
2400cb26:	d0e5      	beq.n	2400caf4 <get_fileinfo+0x58>
		if (i == 9) {						/* Insert a . if extension is exist */
2400cb28:	2909      	cmp	r1, #9
2400cb2a:	d0e5      	beq.n	2400caf8 <get_fileinfo+0x5c>
		fno->altname[j] = c;
2400cb2c:	18a0      	adds	r0, r4, r2
2400cb2e:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
2400cb30:	2d00      	cmp	r5, #0
2400cb32:	d1ee      	bne.n	2400cb12 <get_fileinfo+0x76>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400cb34:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
2400cb38:	b2c0      	uxtb	r0, r0
2400cb3a:	2819      	cmp	r0, #25
2400cb3c:	d8e7      	bhi.n	2400cb0e <get_fileinfo+0x72>
2400cb3e:	6a30      	ldr	r0, [r6, #32]
2400cb40:	7b07      	ldrb	r7, [r0, #12]
2400cb42:	2908      	cmp	r1, #8
2400cb44:	d8e1      	bhi.n	2400cb0a <get_fileinfo+0x6e>
2400cb46:	2008      	movs	r0, #8
2400cb48:	4207      	tst	r7, r0
2400cb4a:	d0e0      	beq.n	2400cb0e <get_fileinfo+0x72>
				c += 0x20;			/* To lower */
2400cb4c:	3320      	adds	r3, #32
2400cb4e:	b2db      	uxtb	r3, r3
2400cb50:	e7dd      	b.n	2400cb0e <get_fileinfo+0x72>
	if (!lfv) {
2400cb52:	b935      	cbnz	r5, 2400cb62 <get_fileinfo+0xc6>
		fno->fname[j] = 0;
2400cb54:	18a3      	adds	r3, r4, r2
2400cb56:	2100      	movs	r1, #0
2400cb58:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400cb5a:	6a33      	ldr	r3, [r6, #32]
2400cb5c:	7b1b      	ldrb	r3, [r3, #12]
2400cb5e:	b903      	cbnz	r3, 2400cb62 <get_fileinfo+0xc6>
2400cb60:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
2400cb62:	4422      	add	r2, r4
2400cb64:	2300      	movs	r3, #0
2400cb66:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400cb68:	6a33      	ldr	r3, [r6, #32]
2400cb6a:	7adb      	ldrb	r3, [r3, #11]
2400cb6c:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400cb6e:	6a30      	ldr	r0, [r6, #32]
2400cb70:	301c      	adds	r0, #28
2400cb72:	f7fe fe9e 	bl	2400b8b2 <ld_dword>
2400cb76:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
2400cb78:	6a30      	ldr	r0, [r6, #32]
2400cb7a:	3016      	adds	r0, #22
2400cb7c:	f7fe fe99 	bl	2400b8b2 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400cb80:	80e0      	strh	r0, [r4, #6]
2400cb82:	0c00      	lsrs	r0, r0, #16
2400cb84:	80a0      	strh	r0, [r4, #4]
}
2400cb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

2400cb8c <cmp_lfn>:
{
2400cb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400cb90:	4681      	mov	r9, r0
2400cb92:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400cb94:	f101 001a 	add.w	r0, r1, #26
2400cb98:	f7fe fe86 	bl	2400b8a8 <ld_word>
2400cb9c:	bbc8      	cbnz	r0, 2400cc12 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400cb9e:	783e      	ldrb	r6, [r7, #0]
2400cba0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
2400cba4:	3e01      	subs	r6, #1
2400cba6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
2400cbaa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400cbae:	f04f 0801 	mov.w	r8, #1
2400cbb2:	2500      	movs	r5, #0
2400cbb4:	e006      	b.n	2400cbc4 <cmp_lfn+0x38>
				return 0;					/* Not matched */
2400cbb6:	2000      	movs	r0, #0
2400cbb8:	e02c      	b.n	2400cc14 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400cbba:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400cbbe:	4298      	cmp	r0, r3
2400cbc0:	d12a      	bne.n	2400cc18 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400cbc2:	3501      	adds	r5, #1
2400cbc4:	2d0c      	cmp	r5, #12
2400cbc6:	d818      	bhi.n	2400cbfa <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400cbc8:	4b17      	ldr	r3, [pc, #92]	; (2400cc28 <cmp_lfn+0x9c>)
2400cbca:	5d58      	ldrb	r0, [r3, r5]
2400cbcc:	4438      	add	r0, r7
2400cbce:	f7fe fe6b 	bl	2400b8a8 <ld_word>
2400cbd2:	4604      	mov	r4, r0
		if (wc) {
2400cbd4:	f1b8 0f00 	cmp.w	r8, #0
2400cbd8:	d0ef      	beq.n	2400cbba <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400cbda:	2efe      	cmp	r6, #254	; 0xfe
2400cbdc:	d8eb      	bhi.n	2400cbb6 <cmp_lfn+0x2a>
2400cbde:	f000 fe27 	bl	2400d830 <ff_wtoupper>
2400cbe2:	4680      	mov	r8, r0
2400cbe4:	f106 0a01 	add.w	sl, r6, #1
2400cbe8:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
2400cbec:	f000 fe20 	bl	2400d830 <ff_wtoupper>
2400cbf0:	4580      	cmp	r8, r0
2400cbf2:	d1e0      	bne.n	2400cbb6 <cmp_lfn+0x2a>
			wc = uc;
2400cbf4:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400cbf6:	4656      	mov	r6, sl
2400cbf8:	e7e3      	b.n	2400cbc2 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400cbfa:	783b      	ldrb	r3, [r7, #0]
2400cbfc:	f013 0f40 	tst.w	r3, #64	; 0x40
2400cc00:	d00c      	beq.n	2400cc1c <cmp_lfn+0x90>
2400cc02:	f1b8 0f00 	cmp.w	r8, #0
2400cc06:	d00b      	beq.n	2400cc20 <cmp_lfn+0x94>
2400cc08:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
2400cc0c:	b953      	cbnz	r3, 2400cc24 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
2400cc0e:	2001      	movs	r0, #1
2400cc10:	e000      	b.n	2400cc14 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400cc12:	2000      	movs	r0, #0
}
2400cc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400cc18:	2000      	movs	r0, #0
2400cc1a:	e7fb      	b.n	2400cc14 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
2400cc1c:	2001      	movs	r0, #1
2400cc1e:	e7f9      	b.n	2400cc14 <cmp_lfn+0x88>
2400cc20:	2001      	movs	r0, #1
2400cc22:	e7f7      	b.n	2400cc14 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400cc24:	2000      	movs	r0, #0
2400cc26:	e7f5      	b.n	2400cc14 <cmp_lfn+0x88>
2400cc28:	24016084 	.word	0x24016084

2400cc2c <dir_find>:
{
2400cc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400cc30:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400cc32:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400cc36:	2100      	movs	r1, #0
2400cc38:	f7ff fc0f 	bl	2400c45a <dir_sdi>
	if (res != FR_OK) return res;
2400cc3c:	4606      	mov	r6, r0
2400cc3e:	2800      	cmp	r0, #0
2400cc40:	d164      	bne.n	2400cd0c <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400cc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cc46:	6323      	str	r3, [r4, #48]	; 0x30
2400cc48:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400cc4c:	464f      	mov	r7, r9
2400cc4e:	e00a      	b.n	2400cc66 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400cc50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cc54:	6323      	str	r3, [r4, #48]	; 0x30
2400cc56:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
2400cc58:	2100      	movs	r1, #0
2400cc5a:	4620      	mov	r0, r4
2400cc5c:	f7ff fcfd 	bl	2400c65a <dir_next>
	} while (res == FR_OK);
2400cc60:	4606      	mov	r6, r0
2400cc62:	2800      	cmp	r0, #0
2400cc64:	d152      	bne.n	2400cd0c <dir_find+0xe0>
		res = move_window(fs, dp->sect);
2400cc66:	69e1      	ldr	r1, [r4, #28]
2400cc68:	4640      	mov	r0, r8
2400cc6a:	f7ff f92b 	bl	2400bec4 <move_window>
		if (res != FR_OK) break;
2400cc6e:	4606      	mov	r6, r0
2400cc70:	2800      	cmp	r0, #0
2400cc72:	d14b      	bne.n	2400cd0c <dir_find+0xe0>
		c = dp->dir[DIR_Name];
2400cc74:	6a25      	ldr	r5, [r4, #32]
2400cc76:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400cc78:	2b00      	cmp	r3, #0
2400cc7a:	d046      	beq.n	2400cd0a <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400cc7c:	7ae9      	ldrb	r1, [r5, #11]
2400cc7e:	f001 023f 	and.w	r2, r1, #63	; 0x3f
2400cc82:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400cc84:	2be5      	cmp	r3, #229	; 0xe5
2400cc86:	d0e3      	beq.n	2400cc50 <dir_find+0x24>
2400cc88:	f011 0f08 	tst.w	r1, #8
2400cc8c:	d001      	beq.n	2400cc92 <dir_find+0x66>
2400cc8e:	2a0f      	cmp	r2, #15
2400cc90:	d1de      	bne.n	2400cc50 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
2400cc92:	2a0f      	cmp	r2, #15
2400cc94:	d016      	beq.n	2400ccc4 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400cc96:	b927      	cbnz	r7, 2400cca2 <dir_find+0x76>
2400cc98:	4628      	mov	r0, r5
2400cc9a:	f7ff f82a 	bl	2400bcf2 <sum_sfn>
2400cc9e:	4548      	cmp	r0, r9
2400cca0:	d034      	beq.n	2400cd0c <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400cca2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400cca6:	f013 0f01 	tst.w	r3, #1
2400ccaa:	d106      	bne.n	2400ccba <dir_find+0x8e>
2400ccac:	220b      	movs	r2, #11
2400ccae:	f104 0124 	add.w	r1, r4, #36	; 0x24
2400ccb2:	4628      	mov	r0, r5
2400ccb4:	f7fe fe25 	bl	2400b902 <mem_cmp>
2400ccb8:	b340      	cbz	r0, 2400cd0c <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ccba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400ccbe:	6323      	str	r3, [r4, #48]	; 0x30
2400ccc0:	27ff      	movs	r7, #255	; 0xff
2400ccc2:	e7c9      	b.n	2400cc58 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400ccc4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
2400ccc8:	f012 0f40 	tst.w	r2, #64	; 0x40
2400cccc:	d1c4      	bne.n	2400cc58 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400ccce:	f013 0f40 	tst.w	r3, #64	; 0x40
2400ccd2:	d006      	beq.n	2400cce2 <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
2400ccd4:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400ccd8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400ccdc:	6962      	ldr	r2, [r4, #20]
2400ccde:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400cce0:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400cce2:	42bb      	cmp	r3, r7
2400cce4:	d001      	beq.n	2400ccea <dir_find+0xbe>
2400cce6:	27ff      	movs	r7, #255	; 0xff
2400cce8:	e7b6      	b.n	2400cc58 <dir_find+0x2c>
2400ccea:	7b6b      	ldrb	r3, [r5, #13]
2400ccec:	454b      	cmp	r3, r9
2400ccee:	d001      	beq.n	2400ccf4 <dir_find+0xc8>
2400ccf0:	27ff      	movs	r7, #255	; 0xff
2400ccf2:	e7b1      	b.n	2400cc58 <dir_find+0x2c>
2400ccf4:	4629      	mov	r1, r5
2400ccf6:	f8d8 000c 	ldr.w	r0, [r8, #12]
2400ccfa:	f7ff ff47 	bl	2400cb8c <cmp_lfn>
2400ccfe:	b110      	cbz	r0, 2400cd06 <dir_find+0xda>
2400cd00:	3f01      	subs	r7, #1
2400cd02:	b2ff      	uxtb	r7, r7
2400cd04:	e7a8      	b.n	2400cc58 <dir_find+0x2c>
2400cd06:	27ff      	movs	r7, #255	; 0xff
2400cd08:	e7a6      	b.n	2400cc58 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400cd0a:	2604      	movs	r6, #4
}
2400cd0c:	4630      	mov	r0, r6
2400cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

2400cd12 <follow_path>:
{
2400cd12:	b530      	push	{r4, r5, lr}
2400cd14:	b083      	sub	sp, #12
2400cd16:	4604      	mov	r4, r0
2400cd18:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
2400cd1a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400cd1c:	e001      	b.n	2400cd22 <follow_path+0x10>
2400cd1e:	3301      	adds	r3, #1
2400cd20:	9301      	str	r3, [sp, #4]
2400cd22:	9b01      	ldr	r3, [sp, #4]
2400cd24:	781a      	ldrb	r2, [r3, #0]
2400cd26:	2a5c      	cmp	r2, #92	; 0x5c
2400cd28:	bf18      	it	ne
2400cd2a:	2a2f      	cmpne	r2, #47	; 0x2f
2400cd2c:	d0f7      	beq.n	2400cd1e <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
2400cd2e:	2200      	movs	r2, #0
2400cd30:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400cd32:	781b      	ldrb	r3, [r3, #0]
2400cd34:	2b1f      	cmp	r3, #31
2400cd36:	d91e      	bls.n	2400cd76 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400cd38:	a901      	add	r1, sp, #4
2400cd3a:	4620      	mov	r0, r4
2400cd3c:	f7ff fd94 	bl	2400c868 <create_name>
			if (res != FR_OK) break;
2400cd40:	4603      	mov	r3, r0
2400cd42:	bb00      	cbnz	r0, 2400cd86 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
2400cd44:	4620      	mov	r0, r4
2400cd46:	f7ff ff71 	bl	2400cc2c <dir_find>
			ns = dp->fn[NSFLAG];
2400cd4a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400cd4e:	4603      	mov	r3, r0
2400cd50:	b9e0      	cbnz	r0, 2400cd8c <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400cd52:	f012 0f04 	tst.w	r2, #4
2400cd56:	d116      	bne.n	2400cd86 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400cd58:	79a3      	ldrb	r3, [r4, #6]
2400cd5a:	f013 0f10 	tst.w	r3, #16
2400cd5e:	d01c      	beq.n	2400cd9a <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400cd60:	f105 0334 	add.w	r3, r5, #52	; 0x34
2400cd64:	6961      	ldr	r1, [r4, #20]
2400cd66:	f3c1 0108 	ubfx	r1, r1, #0, #9
2400cd6a:	4419      	add	r1, r3
2400cd6c:	4628      	mov	r0, r5
2400cd6e:	f7fe fec7 	bl	2400bb00 <ld_clust>
2400cd72:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400cd74:	e7e0      	b.n	2400cd38 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
2400cd76:	2380      	movs	r3, #128	; 0x80
2400cd78:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
2400cd7c:	4611      	mov	r1, r2
2400cd7e:	4620      	mov	r0, r4
2400cd80:	f7ff fb6b 	bl	2400c45a <dir_sdi>
2400cd84:	4603      	mov	r3, r0
}
2400cd86:	4618      	mov	r0, r3
2400cd88:	b003      	add	sp, #12
2400cd8a:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
2400cd8c:	2804      	cmp	r0, #4
2400cd8e:	d1fa      	bne.n	2400cd86 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400cd90:	f012 0f04 	tst.w	r2, #4
2400cd94:	d1f7      	bne.n	2400cd86 <follow_path+0x74>
2400cd96:	2305      	movs	r3, #5
2400cd98:	e7f5      	b.n	2400cd86 <follow_path+0x74>
				res = FR_NO_PATH; break;
2400cd9a:	2305      	movs	r3, #5
2400cd9c:	e7f3      	b.n	2400cd86 <follow_path+0x74>
	...

2400cda0 <dir_register>:
{
2400cda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2400cda4:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
2400cda6:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400cda8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
2400cdac:	f013 0fa0 	tst.w	r3, #160	; 0xa0
2400cdb0:	f040 808e 	bne.w	2400ced0 <dir_register+0x130>
2400cdb4:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400cdb6:	2400      	movs	r4, #0
2400cdb8:	e000      	b.n	2400cdbc <dir_register+0x1c>
2400cdba:	3401      	adds	r4, #1
2400cdbc:	68f3      	ldr	r3, [r6, #12]
2400cdbe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
2400cdc2:	2b00      	cmp	r3, #0
2400cdc4:	d1f9      	bne.n	2400cdba <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
2400cdc6:	f107 0824 	add.w	r8, r7, #36	; 0x24
2400cdca:	220c      	movs	r2, #12
2400cdcc:	4641      	mov	r1, r8
2400cdce:	a801      	add	r0, sp, #4
2400cdd0:	f7fe fd88 	bl	2400b8e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400cdd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
2400cdd8:	f013 0f01 	tst.w	r3, #1
2400cddc:	d01c      	beq.n	2400ce18 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400cdde:	2340      	movs	r3, #64	; 0x40
2400cde0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
2400cde4:	2501      	movs	r5, #1
2400cde6:	e000      	b.n	2400cdea <dir_register+0x4a>
2400cde8:	3501      	adds	r5, #1
2400cdea:	2d63      	cmp	r5, #99	; 0x63
2400cdec:	d80b      	bhi.n	2400ce06 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400cdee:	462b      	mov	r3, r5
2400cdf0:	68f2      	ldr	r2, [r6, #12]
2400cdf2:	a901      	add	r1, sp, #4
2400cdf4:	4640      	mov	r0, r8
2400cdf6:	f7fe ff27 	bl	2400bc48 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400cdfa:	4638      	mov	r0, r7
2400cdfc:	f7ff ff16 	bl	2400cc2c <dir_find>
			if (res != FR_OK) break;
2400ce00:	4681      	mov	r9, r0
2400ce02:	2800      	cmp	r0, #0
2400ce04:	d0f0      	beq.n	2400cde8 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2400ce06:	2d64      	cmp	r5, #100	; 0x64
2400ce08:	d065      	beq.n	2400ced6 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400ce0a:	f1b9 0f04 	cmp.w	r9, #4
2400ce0e:	d11b      	bne.n	2400ce48 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400ce10:	f89d 300f 	ldrb.w	r3, [sp, #15]
2400ce14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ce18:	f89d 300f 	ldrb.w	r3, [sp, #15]
2400ce1c:	f013 0f02 	tst.w	r3, #2
2400ce20:	d006      	beq.n	2400ce30 <dir_register+0x90>
2400ce22:	340c      	adds	r4, #12
2400ce24:	4b2d      	ldr	r3, [pc, #180]	; (2400cedc <dir_register+0x13c>)
2400ce26:	fba3 3404 	umull	r3, r4, r3, r4
2400ce2a:	08a4      	lsrs	r4, r4, #2
2400ce2c:	3401      	adds	r4, #1
2400ce2e:	e000      	b.n	2400ce32 <dir_register+0x92>
2400ce30:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
2400ce32:	4621      	mov	r1, r4
2400ce34:	4638      	mov	r0, r7
2400ce36:	f7ff fc94 	bl	2400c762 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400ce3a:	4681      	mov	r9, r0
2400ce3c:	b908      	cbnz	r0, 2400ce42 <dir_register+0xa2>
2400ce3e:	3c01      	subs	r4, #1
2400ce40:	d106      	bne.n	2400ce50 <dir_register+0xb0>
	if (res == FR_OK) {
2400ce42:	f1b9 0f00 	cmp.w	r9, #0
2400ce46:	d029      	beq.n	2400ce9c <dir_register+0xfc>
}
2400ce48:	4648      	mov	r0, r9
2400ce4a:	b005      	add	sp, #20
2400ce4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400ce50:	6979      	ldr	r1, [r7, #20]
2400ce52:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
2400ce56:	4638      	mov	r0, r7
2400ce58:	f7ff faff 	bl	2400c45a <dir_sdi>
		if (res == FR_OK) {
2400ce5c:	4681      	mov	r9, r0
2400ce5e:	2800      	cmp	r0, #0
2400ce60:	d1ef      	bne.n	2400ce42 <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2400ce62:	4640      	mov	r0, r8
2400ce64:	f7fe ff45 	bl	2400bcf2 <sum_sfn>
2400ce68:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
2400ce6a:	69f9      	ldr	r1, [r7, #28]
2400ce6c:	4630      	mov	r0, r6
2400ce6e:	f7ff f829 	bl	2400bec4 <move_window>
				if (res != FR_OK) break;
2400ce72:	4681      	mov	r9, r0
2400ce74:	2800      	cmp	r0, #0
2400ce76:	d1e4      	bne.n	2400ce42 <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400ce78:	462b      	mov	r3, r5
2400ce7a:	b2e2      	uxtb	r2, r4
2400ce7c:	6a39      	ldr	r1, [r7, #32]
2400ce7e:	68f0      	ldr	r0, [r6, #12]
2400ce80:	f7fe fea6 	bl	2400bbd0 <put_lfn>
				fs->wflag = 1;
2400ce84:	2301      	movs	r3, #1
2400ce86:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400ce88:	2100      	movs	r1, #0
2400ce8a:	4638      	mov	r0, r7
2400ce8c:	f7ff fbe5 	bl	2400c65a <dir_next>
			} while (res == FR_OK && --nent);
2400ce90:	4681      	mov	r9, r0
2400ce92:	2800      	cmp	r0, #0
2400ce94:	d1d5      	bne.n	2400ce42 <dir_register+0xa2>
2400ce96:	3c01      	subs	r4, #1
2400ce98:	d1e7      	bne.n	2400ce6a <dir_register+0xca>
2400ce9a:	e7d2      	b.n	2400ce42 <dir_register+0xa2>
		res = move_window(fs, dp->sect);
2400ce9c:	69f9      	ldr	r1, [r7, #28]
2400ce9e:	4630      	mov	r0, r6
2400cea0:	f7ff f810 	bl	2400bec4 <move_window>
		if (res == FR_OK) {
2400cea4:	4681      	mov	r9, r0
2400cea6:	2800      	cmp	r0, #0
2400cea8:	d1ce      	bne.n	2400ce48 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
2400ceaa:	2220      	movs	r2, #32
2400ceac:	2100      	movs	r1, #0
2400ceae:	6a38      	ldr	r0, [r7, #32]
2400ceb0:	f7fe fd22 	bl	2400b8f8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400ceb4:	220b      	movs	r2, #11
2400ceb6:	4641      	mov	r1, r8
2400ceb8:	6a38      	ldr	r0, [r7, #32]
2400ceba:	f7fe fd13 	bl	2400b8e4 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400cebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
2400cec2:	6a3a      	ldr	r2, [r7, #32]
2400cec4:	f003 0318 	and.w	r3, r3, #24
2400cec8:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
2400ceca:	2301      	movs	r3, #1
2400cecc:	70f3      	strb	r3, [r6, #3]
2400cece:	e7bb      	b.n	2400ce48 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400ced0:	f04f 0906 	mov.w	r9, #6
2400ced4:	e7b8      	b.n	2400ce48 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2400ced6:	f04f 0907 	mov.w	r9, #7
2400ceda:	e7b5      	b.n	2400ce48 <dir_register+0xa8>
2400cedc:	4ec4ec4f 	.word	0x4ec4ec4f

2400cee0 <sync_fs>:
{
2400cee0:	b570      	push	{r4, r5, r6, lr}
2400cee2:	4604      	mov	r4, r0
	res = sync_window(fs);
2400cee4:	f7fe ffc4 	bl	2400be70 <sync_window>
	if (res == FR_OK) {
2400cee8:	4605      	mov	r5, r0
2400ceea:	b948      	cbnz	r0, 2400cf00 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400ceec:	7823      	ldrb	r3, [r4, #0]
2400ceee:	2b03      	cmp	r3, #3
2400cef0:	d008      	beq.n	2400cf04 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400cef2:	2200      	movs	r2, #0
2400cef4:	4611      	mov	r1, r2
2400cef6:	7860      	ldrb	r0, [r4, #1]
2400cef8:	f7fe fcca 	bl	2400b890 <disk_ioctl>
2400cefc:	b100      	cbz	r0, 2400cf00 <sync_fs+0x20>
2400cefe:	2501      	movs	r5, #1
}
2400cf00:	4628      	mov	r0, r5
2400cf02:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400cf04:	7923      	ldrb	r3, [r4, #4]
2400cf06:	2b01      	cmp	r3, #1
2400cf08:	d1f3      	bne.n	2400cef2 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
2400cf0a:	f104 0634 	add.w	r6, r4, #52	; 0x34
2400cf0e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cf12:	2100      	movs	r1, #0
2400cf14:	4630      	mov	r0, r6
2400cf16:	f7fe fcef 	bl	2400b8f8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
2400cf1a:	f64a 2155 	movw	r1, #43605	; 0xaa55
2400cf1e:	f204 2032 	addw	r0, r4, #562	; 0x232
2400cf22:	f7fe fcd1 	bl	2400b8c8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
2400cf26:	490f      	ldr	r1, [pc, #60]	; (2400cf64 <sync_fs+0x84>)
2400cf28:	4630      	mov	r0, r6
2400cf2a:	f7fe fcd1 	bl	2400b8d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
2400cf2e:	490e      	ldr	r1, [pc, #56]	; (2400cf68 <sync_fs+0x88>)
2400cf30:	f504 7006 	add.w	r0, r4, #536	; 0x218
2400cf34:	f7fe fccc 	bl	2400b8d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
2400cf38:	6961      	ldr	r1, [r4, #20]
2400cf3a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
2400cf3e:	f7fe fcc7 	bl	2400b8d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
2400cf42:	6921      	ldr	r1, [r4, #16]
2400cf44:	f504 7008 	add.w	r0, r4, #544	; 0x220
2400cf48:	f7fe fcc2 	bl	2400b8d0 <st_dword>
			fs->winsect = fs->volbase + 1;
2400cf4c:	6a22      	ldr	r2, [r4, #32]
2400cf4e:	3201      	adds	r2, #1
2400cf50:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400cf52:	2301      	movs	r3, #1
2400cf54:	4631      	mov	r1, r6
2400cf56:	7860      	ldrb	r0, [r4, #1]
2400cf58:	f7fe fc8e 	bl	2400b878 <disk_write>
			fs->fsi_flag = 0;
2400cf5c:	2300      	movs	r3, #0
2400cf5e:	7123      	strb	r3, [r4, #4]
2400cf60:	e7c7      	b.n	2400cef2 <sync_fs+0x12>
2400cf62:	bf00      	nop
2400cf64:	41615252 	.word	0x41615252
2400cf68:	61417272 	.word	0x61417272

2400cf6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400cf6c:	b570      	push	{r4, r5, r6, lr}
2400cf6e:	b084      	sub	sp, #16
2400cf70:	9001      	str	r0, [sp, #4]
2400cf72:	9100      	str	r1, [sp, #0]
2400cf74:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
2400cf76:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
2400cf78:	a803      	add	r0, sp, #12
2400cf7a:	f7fe ff32 	bl	2400bde2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
2400cf7e:	1e04      	subs	r4, r0, #0
2400cf80:	db20      	blt.n	2400cfc4 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400cf82:	4b11      	ldr	r3, [pc, #68]	; (2400cfc8 <f_mount+0x5c>)
2400cf84:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
2400cf88:	b125      	cbz	r5, 2400cf94 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
2400cf8a:	4628      	mov	r0, r5
2400cf8c:	f7fe fd8e 	bl	2400baac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
2400cf90:	2300      	movs	r3, #0
2400cf92:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
2400cf94:	9b01      	ldr	r3, [sp, #4]
2400cf96:	b10b      	cbz	r3, 2400cf9c <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
2400cf98:	2200      	movs	r2, #0
2400cf9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
2400cf9c:	9b01      	ldr	r3, [sp, #4]
2400cf9e:	4a0a      	ldr	r2, [pc, #40]	; (2400cfc8 <f_mount+0x5c>)
2400cfa0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400cfa4:	1e72      	subs	r2, r6, #1
2400cfa6:	bf18      	it	ne
2400cfa8:	2201      	movne	r2, #1
2400cfaa:	2b00      	cmp	r3, #0
2400cfac:	bf08      	it	eq
2400cfae:	f042 0201 	orreq.w	r2, r2, #1
2400cfb2:	b112      	cbz	r2, 2400cfba <f_mount+0x4e>
2400cfb4:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400cfb6:	b004      	add	sp, #16
2400cfb8:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400cfba:	a901      	add	r1, sp, #4
2400cfbc:	4668      	mov	r0, sp
2400cfbe:	f7fe ffd9 	bl	2400bf74 <find_volume>
	LEAVE_FF(fs, res);
2400cfc2:	e7f8      	b.n	2400cfb6 <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
2400cfc4:	200b      	movs	r0, #11
2400cfc6:	e7f6      	b.n	2400cfb6 <f_mount+0x4a>
2400cfc8:	2001d6f8 	.word	0x2001d6f8

2400cfcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400cfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2400cfd0:	b093      	sub	sp, #76	; 0x4c
2400cfd2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400cfd4:	2800      	cmp	r0, #0
2400cfd6:	f000 810d 	beq.w	2400d1f4 <f_open+0x228>
2400cfda:	4615      	mov	r5, r2
2400cfdc:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400cfde:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400cfe2:	463a      	mov	r2, r7
2400cfe4:	a903      	add	r1, sp, #12
2400cfe6:	a801      	add	r0, sp, #4
2400cfe8:	f7fe ffc4 	bl	2400bf74 <find_volume>
	if (res == FR_OK) {
2400cfec:	4604      	mov	r4, r0
2400cfee:	b130      	cbz	r0, 2400cffe <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400cff0:	b10c      	cbz	r4, 2400cff6 <f_open+0x2a>
2400cff2:	2300      	movs	r3, #0
2400cff4:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
2400cff6:	4620      	mov	r0, r4
2400cff8:	b013      	add	sp, #76	; 0x4c
2400cffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
2400cffe:	9b03      	ldr	r3, [sp, #12]
2400d000:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400d002:	9901      	ldr	r1, [sp, #4]
2400d004:	a804      	add	r0, sp, #16
2400d006:	f7ff fe84 	bl	2400cd12 <follow_path>
		if (res == FR_OK) {
2400d00a:	4604      	mov	r4, r0
2400d00c:	b960      	cbnz	r0, 2400d028 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400d00e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400d012:	2b00      	cmp	r3, #0
2400d014:	db50      	blt.n	2400d0b8 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400d016:	f037 0301 	bics.w	r3, r7, #1
2400d01a:	bf14      	ite	ne
2400d01c:	2101      	movne	r1, #1
2400d01e:	2100      	moveq	r1, #0
2400d020:	a804      	add	r0, sp, #16
2400d022:	f7fe fc83 	bl	2400b92c <chk_lock>
2400d026:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400d028:	f015 0f1c 	tst.w	r5, #28
2400d02c:	d05a      	beq.n	2400d0e4 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
2400d02e:	2c00      	cmp	r4, #0
2400d030:	d04e      	beq.n	2400d0d0 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400d032:	2c04      	cmp	r4, #4
2400d034:	d042      	beq.n	2400d0bc <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400d036:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400d03a:	2c00      	cmp	r4, #0
2400d03c:	d161      	bne.n	2400d102 <f_open+0x136>
2400d03e:	f017 0f08 	tst.w	r7, #8
2400d042:	d05e      	beq.n	2400d102 <f_open+0x136>
				dw = GET_FATTIME();
2400d044:	f7fe fb24 	bl	2400b690 <get_fattime>
2400d048:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400d04a:	4601      	mov	r1, r0
2400d04c:	980c      	ldr	r0, [sp, #48]	; 0x30
2400d04e:	300e      	adds	r0, #14
2400d050:	f7fe fc3e 	bl	2400b8d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400d054:	4629      	mov	r1, r5
2400d056:	980c      	ldr	r0, [sp, #48]	; 0x30
2400d058:	3016      	adds	r0, #22
2400d05a:	f7fe fc39 	bl	2400b8d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400d05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400d060:	2220      	movs	r2, #32
2400d062:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400d064:	f8dd 800c 	ldr.w	r8, [sp, #12]
2400d068:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
2400d06c:	4649      	mov	r1, r9
2400d06e:	4640      	mov	r0, r8
2400d070:	f7fe fd46 	bl	2400bb00 <ld_clust>
2400d074:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
2400d076:	2200      	movs	r2, #0
2400d078:	4649      	mov	r1, r9
2400d07a:	4640      	mov	r0, r8
2400d07c:	f7fe fd53 	bl	2400bb26 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
2400d080:	2100      	movs	r1, #0
2400d082:	980c      	ldr	r0, [sp, #48]	; 0x30
2400d084:	301c      	adds	r0, #28
2400d086:	f7fe fc23 	bl	2400b8d0 <st_dword>
					fs->wflag = 1;
2400d08a:	9b03      	ldr	r3, [sp, #12]
2400d08c:	2201      	movs	r2, #1
2400d08e:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
2400d090:	b3bd      	cbz	r5, 2400d102 <f_open+0x136>
						dw = fs->winsect;
2400d092:	9b03      	ldr	r3, [sp, #12]
2400d094:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400d098:	2200      	movs	r2, #0
2400d09a:	4629      	mov	r1, r5
2400d09c:	a804      	add	r0, sp, #16
2400d09e:	f7ff fa9d 	bl	2400c5dc <remove_chain>
						if (res == FR_OK) {
2400d0a2:	4604      	mov	r4, r0
2400d0a4:	bb68      	cbnz	r0, 2400d102 <f_open+0x136>
							res = move_window(fs, dw);
2400d0a6:	4641      	mov	r1, r8
2400d0a8:	9803      	ldr	r0, [sp, #12]
2400d0aa:	f7fe ff0b 	bl	2400bec4 <move_window>
2400d0ae:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400d0b0:	3d01      	subs	r5, #1
2400d0b2:	9b03      	ldr	r3, [sp, #12]
2400d0b4:	611d      	str	r5, [r3, #16]
2400d0b6:	e024      	b.n	2400d102 <f_open+0x136>
				res = FR_INVALID_NAME;
2400d0b8:	2406      	movs	r4, #6
2400d0ba:	e7b5      	b.n	2400d028 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400d0bc:	f7fe fc74 	bl	2400b9a8 <enq_lock>
2400d0c0:	b908      	cbnz	r0, 2400d0c6 <f_open+0xfa>
2400d0c2:	2412      	movs	r4, #18
2400d0c4:	e7b7      	b.n	2400d036 <f_open+0x6a>
2400d0c6:	a804      	add	r0, sp, #16
2400d0c8:	f7ff fe6a 	bl	2400cda0 <dir_register>
2400d0cc:	4604      	mov	r4, r0
2400d0ce:	e7b2      	b.n	2400d036 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400d0d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400d0d4:	f013 0f11 	tst.w	r3, #17
2400d0d8:	d112      	bne.n	2400d100 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400d0da:	f015 0f04 	tst.w	r5, #4
2400d0de:	d0ac      	beq.n	2400d03a <f_open+0x6e>
2400d0e0:	2408      	movs	r4, #8
2400d0e2:	e00e      	b.n	2400d102 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
2400d0e4:	b96c      	cbnz	r4, 2400d102 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400d0e6:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400d0ea:	f013 0f10 	tst.w	r3, #16
2400d0ee:	d14b      	bne.n	2400d188 <f_open+0x1bc>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400d0f0:	f015 0f02 	tst.w	r5, #2
2400d0f4:	d005      	beq.n	2400d102 <f_open+0x136>
2400d0f6:	f013 0f01 	tst.w	r3, #1
2400d0fa:	d002      	beq.n	2400d102 <f_open+0x136>
						res = FR_DENIED;
2400d0fc:	2407      	movs	r4, #7
2400d0fe:	e016      	b.n	2400d12e <f_open+0x162>
					res = FR_DENIED;
2400d100:	2407      	movs	r4, #7
		if (res == FR_OK) {
2400d102:	b9a4      	cbnz	r4, 2400d12e <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400d104:	f017 0f08 	tst.w	r7, #8
2400d108:	d001      	beq.n	2400d10e <f_open+0x142>
				mode |= FA_MODIFIED;
2400d10a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400d10e:	9b03      	ldr	r3, [sp, #12]
2400d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400d112:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
2400d114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400d116:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400d118:	f037 0301 	bics.w	r3, r7, #1
2400d11c:	bf14      	ite	ne
2400d11e:	2101      	movne	r1, #1
2400d120:	2100      	moveq	r1, #0
2400d122:	a804      	add	r0, sp, #16
2400d124:	f7fe fc50 	bl	2400b9c8 <inc_lock>
2400d128:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400d12a:	2800      	cmp	r0, #0
2400d12c:	d060      	beq.n	2400d1f0 <f_open+0x224>
		if (res == FR_OK) {
2400d12e:	2c00      	cmp	r4, #0
2400d130:	f47f af5e 	bne.w	2400cff0 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400d134:	9d03      	ldr	r5, [sp, #12]
2400d136:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
2400d13a:	4641      	mov	r1, r8
2400d13c:	4628      	mov	r0, r5
2400d13e:	f7fe fcdf 	bl	2400bb00 <ld_clust>
2400d142:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400d144:	f108 001c 	add.w	r0, r8, #28
2400d148:	f7fe fbb3 	bl	2400b8b2 <ld_dword>
2400d14c:	60f0      	str	r0, [r6, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
2400d14e:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
2400d150:	88eb      	ldrh	r3, [r5, #6]
2400d152:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
2400d154:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
2400d156:	2100      	movs	r1, #0
2400d158:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400d15a:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400d15c:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400d15e:	f106 082c 	add.w	r8, r6, #44	; 0x2c
2400d162:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d166:	4640      	mov	r0, r8
2400d168:	f7fe fbc6 	bl	2400b8f8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400d16c:	f017 0f20 	tst.w	r7, #32
2400d170:	f43f af3e 	beq.w	2400cff0 <f_open+0x24>
2400d174:	68f5      	ldr	r5, [r6, #12]
2400d176:	2d00      	cmp	r5, #0
2400d178:	f43f af3a 	beq.w	2400cff0 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400d17c:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400d17e:	9b03      	ldr	r3, [sp, #12]
2400d180:	895f      	ldrh	r7, [r3, #10]
2400d182:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
2400d184:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400d186:	e005      	b.n	2400d194 <f_open+0x1c8>
					res = FR_NO_FILE;
2400d188:	2404      	movs	r4, #4
2400d18a:	e7d0      	b.n	2400d12e <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400d18c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
2400d190:	d00f      	beq.n	2400d1b2 <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400d192:	1bed      	subs	r5, r5, r7
2400d194:	fab4 f384 	clz	r3, r4
2400d198:	095b      	lsrs	r3, r3, #5
2400d19a:	42bd      	cmp	r5, r7
2400d19c:	bf98      	it	ls
2400d19e:	2300      	movls	r3, #0
2400d1a0:	b14b      	cbz	r3, 2400d1b6 <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
2400d1a2:	4630      	mov	r0, r6
2400d1a4:	f7ff f8f1 	bl	2400c38a <get_fat>
2400d1a8:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
2400d1aa:	2801      	cmp	r0, #1
2400d1ac:	d8ee      	bhi.n	2400d18c <f_open+0x1c0>
2400d1ae:	2402      	movs	r4, #2
2400d1b0:	e7ec      	b.n	2400d18c <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400d1b2:	2401      	movs	r4, #1
2400d1b4:	e7ed      	b.n	2400d192 <f_open+0x1c6>
				fp->clust = clst;
2400d1b6:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400d1b8:	2c00      	cmp	r4, #0
2400d1ba:	f47f af19 	bne.w	2400cff0 <f_open+0x24>
2400d1be:	f3c5 0308 	ubfx	r3, r5, #0, #9
2400d1c2:	2b00      	cmp	r3, #0
2400d1c4:	f43f af14 	beq.w	2400cff0 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
2400d1c8:	9f03      	ldr	r7, [sp, #12]
2400d1ca:	4638      	mov	r0, r7
2400d1cc:	f7fe fc8c 	bl	2400bae8 <clust2sect>
2400d1d0:	b908      	cbnz	r0, 2400d1d6 <f_open+0x20a>
						res = FR_INT_ERR;
2400d1d2:	2402      	movs	r4, #2
2400d1d4:	e70d      	b.n	2400cff2 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400d1d6:	eb00 2255 	add.w	r2, r0, r5, lsr #9
2400d1da:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400d1dc:	2301      	movs	r3, #1
2400d1de:	4641      	mov	r1, r8
2400d1e0:	7878      	ldrb	r0, [r7, #1]
2400d1e2:	f7fe fb3d 	bl	2400b860 <disk_read>
2400d1e6:	2800      	cmp	r0, #0
2400d1e8:	f43f af02 	beq.w	2400cff0 <f_open+0x24>
2400d1ec:	2401      	movs	r4, #1
2400d1ee:	e700      	b.n	2400cff2 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400d1f0:	2402      	movs	r4, #2
2400d1f2:	e6fd      	b.n	2400cff0 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400d1f4:	2409      	movs	r4, #9
2400d1f6:	e6fe      	b.n	2400cff6 <f_open+0x2a>

2400d1f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400d1fc:	b085      	sub	sp, #20
2400d1fe:	4604      	mov	r4, r0
2400d200:	460e      	mov	r6, r1
2400d202:	4617      	mov	r7, r2
2400d204:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400d206:	2300      	movs	r3, #0
2400d208:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
2400d20c:	a903      	add	r1, sp, #12
2400d20e:	f7fe fe0c 	bl	2400be2a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400d212:	9001      	str	r0, [sp, #4]
2400d214:	2800      	cmp	r0, #0
2400d216:	f040 80a8 	bne.w	2400d36a <f_read+0x172>
2400d21a:	7d63      	ldrb	r3, [r4, #21]
2400d21c:	9301      	str	r3, [sp, #4]
2400d21e:	2b00      	cmp	r3, #0
2400d220:	f040 80a3 	bne.w	2400d36a <f_read+0x172>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400d224:	7d23      	ldrb	r3, [r4, #20]
2400d226:	f013 0f01 	tst.w	r3, #1
2400d22a:	f000 80bd 	beq.w	2400d3a8 <f_read+0x1b0>
	remain = fp->obj.objsize - fp->fptr;
2400d22e:	68e5      	ldr	r5, [r4, #12]
2400d230:	69a3      	ldr	r3, [r4, #24]
2400d232:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
2400d234:	42bd      	cmp	r5, r7
2400d236:	d35c      	bcc.n	2400d2f2 <f_read+0xfa>
2400d238:	463d      	mov	r5, r7
2400d23a:	e05a      	b.n	2400d2f2 <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400d23c:	69e1      	ldr	r1, [r4, #28]
2400d23e:	4620      	mov	r0, r4
2400d240:	f7ff f8a3 	bl	2400c38a <get_fat>
2400d244:	e065      	b.n	2400d312 <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400d246:	f04f 0a02 	mov.w	sl, #2
2400d24a:	f884 a015 	strb.w	sl, [r4, #21]
2400d24e:	f8cd a004 	str.w	sl, [sp, #4]
2400d252:	e08a      	b.n	2400d36a <f_read+0x172>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d254:	f04f 0a01 	mov.w	sl, #1
2400d258:	f884 a015 	strb.w	sl, [r4, #21]
2400d25c:	f8cd a004 	str.w	sl, [sp, #4]
2400d260:	e083      	b.n	2400d36a <f_read+0x172>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
2400d262:	f04f 0a02 	mov.w	sl, #2
2400d266:	f884 a015 	strb.w	sl, [r4, #21]
2400d26a:	f8cd a004 	str.w	sl, [sp, #4]
2400d26e:	e07c      	b.n	2400d36a <f_read+0x172>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400d270:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400d274:	2b00      	cmp	r3, #0
2400d276:	db02      	blt.n	2400d27e <f_read+0x86>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400d278:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
2400d27c:	e02f      	b.n	2400d2de <f_read+0xe6>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400d27e:	6a20      	ldr	r0, [r4, #32]
2400d280:	eba0 0009 	sub.w	r0, r0, r9
2400d284:	4550      	cmp	r0, sl
2400d286:	d2f7      	bcs.n	2400d278 <f_read+0x80>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400d288:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d28c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d290:	eb06 2040 	add.w	r0, r6, r0, lsl #9
2400d294:	f7fe fb26 	bl	2400b8e4 <mem_cpy>
2400d298:	e7ee      	b.n	2400d278 <f_read+0x80>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400d29a:	6a22      	ldr	r2, [r4, #32]
2400d29c:	454a      	cmp	r2, r9
2400d29e:	d00d      	beq.n	2400d2bc <f_read+0xc4>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400d2a0:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400d2a4:	2b00      	cmp	r3, #0
2400d2a6:	db64      	blt.n	2400d372 <f_read+0x17a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400d2a8:	2301      	movs	r3, #1
2400d2aa:	464a      	mov	r2, r9
2400d2ac:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d2b0:	9803      	ldr	r0, [sp, #12]
2400d2b2:	7840      	ldrb	r0, [r0, #1]
2400d2b4:	f7fe fad4 	bl	2400b860 <disk_read>
2400d2b8:	2800      	cmp	r0, #0
2400d2ba:	d16e      	bne.n	2400d39a <f_read+0x1a2>
			}
#endif
			fp->sect = sect;
2400d2bc:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400d2c0:	69a3      	ldr	r3, [r4, #24]
2400d2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400d2c6:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
2400d2ca:	42bd      	cmp	r5, r7
2400d2cc:	d200      	bcs.n	2400d2d0 <f_read+0xd8>
2400d2ce:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400d2d0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d2d4:	463a      	mov	r2, r7
2400d2d6:	4419      	add	r1, r3
2400d2d8:	4630      	mov	r0, r6
2400d2da:	f7fe fb03 	bl	2400b8e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400d2de:	443e      	add	r6, r7
2400d2e0:	69a3      	ldr	r3, [r4, #24]
2400d2e2:	443b      	add	r3, r7
2400d2e4:	61a3      	str	r3, [r4, #24]
2400d2e6:	f8d8 3000 	ldr.w	r3, [r8]
2400d2ea:	443b      	add	r3, r7
2400d2ec:	f8c8 3000 	str.w	r3, [r8]
2400d2f0:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
2400d2f2:	2d00      	cmp	r5, #0
2400d2f4:	d039      	beq.n	2400d36a <f_read+0x172>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400d2f6:	69a3      	ldr	r3, [r4, #24]
2400d2f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400d2fc:	2a00      	cmp	r2, #0
2400d2fe:	d1df      	bne.n	2400d2c0 <f_read+0xc8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400d300:	9a03      	ldr	r2, [sp, #12]
2400d302:	8957      	ldrh	r7, [r2, #10]
2400d304:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400d306:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
2400d30a:	d108      	bne.n	2400d31e <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400d30c:	2b00      	cmp	r3, #0
2400d30e:	d195      	bne.n	2400d23c <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400d310:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400d312:	2801      	cmp	r0, #1
2400d314:	d997      	bls.n	2400d246 <f_read+0x4e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d316:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400d31a:	d09b      	beq.n	2400d254 <f_read+0x5c>
				fp->clust = clst;				/* Update current cluster */
2400d31c:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
2400d31e:	f8dd b00c 	ldr.w	fp, [sp, #12]
2400d322:	69e1      	ldr	r1, [r4, #28]
2400d324:	4658      	mov	r0, fp
2400d326:	f7fe fbdf 	bl	2400bae8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
2400d32a:	4681      	mov	r9, r0
2400d32c:	2800      	cmp	r0, #0
2400d32e:	d098      	beq.n	2400d262 <f_read+0x6a>
			sect += csect;
2400d330:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400d332:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
2400d336:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
2400d33a:	d3ae      	bcc.n	2400d29a <f_read+0xa2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400d33c:	eb07 030a 	add.w	r3, r7, sl
2400d340:	f8bb 200a 	ldrh.w	r2, [fp, #10]
2400d344:	4293      	cmp	r3, r2
2400d346:	d901      	bls.n	2400d34c <f_read+0x154>
					cc = fs->csize - csect;
2400d348:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d34c:	4653      	mov	r3, sl
2400d34e:	464a      	mov	r2, r9
2400d350:	4631      	mov	r1, r6
2400d352:	f89b 0001 	ldrb.w	r0, [fp, #1]
2400d356:	f7fe fa83 	bl	2400b860 <disk_read>
2400d35a:	2800      	cmp	r0, #0
2400d35c:	d088      	beq.n	2400d270 <f_read+0x78>
2400d35e:	f04f 0a01 	mov.w	sl, #1
2400d362:	f884 a015 	strb.w	sl, [r4, #21]
2400d366:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400d36a:	9801      	ldr	r0, [sp, #4]
2400d36c:	b005      	add	sp, #20
2400d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d372:	2301      	movs	r3, #1
2400d374:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d378:	f89b 0001 	ldrb.w	r0, [fp, #1]
2400d37c:	f7fe fa7c 	bl	2400b878 <disk_write>
2400d380:	b920      	cbnz	r0, 2400d38c <f_read+0x194>
					fp->flag &= (BYTE)~FA_DIRTY;
2400d382:	7d23      	ldrb	r3, [r4, #20]
2400d384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d388:	7523      	strb	r3, [r4, #20]
2400d38a:	e78d      	b.n	2400d2a8 <f_read+0xb0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d38c:	f04f 0a01 	mov.w	sl, #1
2400d390:	f884 a015 	strb.w	sl, [r4, #21]
2400d394:	f8cd a004 	str.w	sl, [sp, #4]
2400d398:	e7e7      	b.n	2400d36a <f_read+0x172>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400d39a:	f04f 0a01 	mov.w	sl, #1
2400d39e:	f884 a015 	strb.w	sl, [r4, #21]
2400d3a2:	f8cd a004 	str.w	sl, [sp, #4]
2400d3a6:	e7e0      	b.n	2400d36a <f_read+0x172>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400d3a8:	2307      	movs	r3, #7
2400d3aa:	9301      	str	r3, [sp, #4]
2400d3ac:	e7dd      	b.n	2400d36a <f_read+0x172>

2400d3ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400d3ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400d3b2:	b085      	sub	sp, #20
2400d3b4:	4604      	mov	r4, r0
2400d3b6:	460e      	mov	r6, r1
2400d3b8:	4615      	mov	r5, r2
2400d3ba:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400d3bc:	2300      	movs	r3, #0
2400d3be:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
2400d3c2:	a903      	add	r1, sp, #12
2400d3c4:	f7fe fd31 	bl	2400be2a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400d3c8:	9001      	str	r0, [sp, #4]
2400d3ca:	2800      	cmp	r0, #0
2400d3cc:	f040 80cd 	bne.w	2400d56a <f_write+0x1bc>
2400d3d0:	7d63      	ldrb	r3, [r4, #21]
2400d3d2:	9301      	str	r3, [sp, #4]
2400d3d4:	2b00      	cmp	r3, #0
2400d3d6:	f040 80c8 	bne.w	2400d56a <f_write+0x1bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400d3da:	7d23      	ldrb	r3, [r4, #20]
2400d3dc:	f013 0f02 	tst.w	r3, #2
2400d3e0:	f000 80dd 	beq.w	2400d59e <f_write+0x1f0>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400d3e4:	69a3      	ldr	r3, [r4, #24]
2400d3e6:	42eb      	cmn	r3, r5
2400d3e8:	d375      	bcc.n	2400d4d6 <f_write+0x128>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400d3ea:	43dd      	mvns	r5, r3
2400d3ec:	e073      	b.n	2400d4d6 <f_write+0x128>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400d3ee:	2100      	movs	r1, #0
2400d3f0:	4620      	mov	r0, r4
2400d3f2:	f7ff f888 	bl	2400c506 <create_chain>
2400d3f6:	e081      	b.n	2400d4fc <f_write+0x14e>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400d3f8:	69e1      	ldr	r1, [r4, #28]
2400d3fa:	4620      	mov	r0, r4
2400d3fc:	f7ff f883 	bl	2400c506 <create_chain>
2400d400:	e07c      	b.n	2400d4fc <f_write+0x14e>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400d402:	f04f 0a02 	mov.w	sl, #2
2400d406:	f884 a015 	strb.w	sl, [r4, #21]
2400d40a:	f8cd a004 	str.w	sl, [sp, #4]
2400d40e:	e0ac      	b.n	2400d56a <f_write+0x1bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d410:	f04f 0a01 	mov.w	sl, #1
2400d414:	f884 a015 	strb.w	sl, [r4, #21]
2400d418:	f8cd a004 	str.w	sl, [sp, #4]
2400d41c:	e0a5      	b.n	2400d56a <f_write+0x1bc>
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d41e:	2301      	movs	r3, #1
2400d420:	6a22      	ldr	r2, [r4, #32]
2400d422:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d426:	9803      	ldr	r0, [sp, #12]
2400d428:	7840      	ldrb	r0, [r0, #1]
2400d42a:	f7fe fa25 	bl	2400b878 <disk_write>
2400d42e:	b920      	cbnz	r0, 2400d43a <f_write+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
2400d430:	7d23      	ldrb	r3, [r4, #20]
2400d432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d436:	7523      	strb	r3, [r4, #20]
2400d438:	e070      	b.n	2400d51c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d43a:	f04f 0a01 	mov.w	sl, #1
2400d43e:	f884 a015 	strb.w	sl, [r4, #21]
2400d442:	f8cd a004 	str.w	sl, [sp, #4]
2400d446:	e090      	b.n	2400d56a <f_write+0x1bc>
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
2400d448:	f04f 0a02 	mov.w	sl, #2
2400d44c:	f884 a015 	strb.w	sl, [r4, #21]
2400d450:	f8cd a004 	str.w	sl, [sp, #4]
2400d454:	e089      	b.n	2400d56a <f_write+0x1bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400d456:	6a21      	ldr	r1, [r4, #32]
2400d458:	eba1 0109 	sub.w	r1, r1, r9
2400d45c:	4551      	cmp	r1, sl
2400d45e:	d302      	bcc.n	2400d466 <f_write+0xb8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400d460:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
2400d464:	e028      	b.n	2400d4b8 <f_write+0x10a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400d466:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d46a:	eb06 2141 	add.w	r1, r6, r1, lsl #9
2400d46e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
2400d472:	f7fe fa37 	bl	2400b8e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
2400d476:	7d23      	ldrb	r3, [r4, #20]
2400d478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d47c:	7523      	strb	r3, [r4, #20]
2400d47e:	e7ef      	b.n	2400d460 <f_write+0xb2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400d480:	6a23      	ldr	r3, [r4, #32]
2400d482:	454b      	cmp	r3, r9
2400d484:	d003      	beq.n	2400d48e <f_write+0xe0>
				fp->fptr < fp->obj.objsize &&
2400d486:	69a2      	ldr	r2, [r4, #24]
2400d488:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400d48a:	429a      	cmp	r2, r3
2400d48c:	d371      	bcc.n	2400d572 <f_write+0x1c4>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
2400d48e:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400d492:	69a3      	ldr	r3, [r4, #24]
2400d494:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400d498:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
2400d49c:	42bd      	cmp	r5, r7
2400d49e:	d200      	bcs.n	2400d4a2 <f_write+0xf4>
2400d4a0:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400d4a2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
2400d4a6:	463a      	mov	r2, r7
2400d4a8:	4631      	mov	r1, r6
2400d4aa:	4418      	add	r0, r3
2400d4ac:	f7fe fa1a 	bl	2400b8e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
2400d4b0:	7d23      	ldrb	r3, [r4, #20]
2400d4b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400d4b6:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400d4b8:	443e      	add	r6, r7
2400d4ba:	69a3      	ldr	r3, [r4, #24]
2400d4bc:	443b      	add	r3, r7
2400d4be:	61a3      	str	r3, [r4, #24]
2400d4c0:	68e2      	ldr	r2, [r4, #12]
2400d4c2:	4293      	cmp	r3, r2
2400d4c4:	bf38      	it	cc
2400d4c6:	4613      	movcc	r3, r2
2400d4c8:	60e3      	str	r3, [r4, #12]
2400d4ca:	f8d8 3000 	ldr.w	r3, [r8]
2400d4ce:	443b      	add	r3, r7
2400d4d0:	f8c8 3000 	str.w	r3, [r8]
2400d4d4:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
2400d4d6:	2d00      	cmp	r5, #0
2400d4d8:	d05c      	beq.n	2400d594 <f_write+0x1e6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400d4da:	69a3      	ldr	r3, [r4, #24]
2400d4dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400d4e0:	2a00      	cmp	r2, #0
2400d4e2:	d1d6      	bne.n	2400d492 <f_write+0xe4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400d4e4:	9a03      	ldr	r2, [sp, #12]
2400d4e6:	8957      	ldrh	r7, [r2, #10]
2400d4e8:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
2400d4ea:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
2400d4ee:	d111      	bne.n	2400d514 <f_write+0x166>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400d4f0:	2b00      	cmp	r3, #0
2400d4f2:	d181      	bne.n	2400d3f8 <f_write+0x4a>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400d4f4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400d4f6:	2800      	cmp	r0, #0
2400d4f8:	f43f af79 	beq.w	2400d3ee <f_write+0x40>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400d4fc:	2800      	cmp	r0, #0
2400d4fe:	d049      	beq.n	2400d594 <f_write+0x1e6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400d500:	2801      	cmp	r0, #1
2400d502:	f43f af7e 	beq.w	2400d402 <f_write+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d506:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400d50a:	d081      	beq.n	2400d410 <f_write+0x62>
				fp->clust = clst;			/* Update current cluster */
2400d50c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400d50e:	68a3      	ldr	r3, [r4, #8]
2400d510:	b903      	cbnz	r3, 2400d514 <f_write+0x166>
2400d512:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400d514:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400d518:	2b00      	cmp	r3, #0
2400d51a:	db80      	blt.n	2400d41e <f_write+0x70>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
2400d51c:	f8dd b00c 	ldr.w	fp, [sp, #12]
2400d520:	69e1      	ldr	r1, [r4, #28]
2400d522:	4658      	mov	r0, fp
2400d524:	f7fe fae0 	bl	2400bae8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
2400d528:	4681      	mov	r9, r0
2400d52a:	2800      	cmp	r0, #0
2400d52c:	d08c      	beq.n	2400d448 <f_write+0x9a>
			sect += csect;
2400d52e:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400d530:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
2400d534:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
2400d538:	d3a2      	bcc.n	2400d480 <f_write+0xd2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400d53a:	eb07 030a 	add.w	r3, r7, sl
2400d53e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
2400d542:	4293      	cmp	r3, r2
2400d544:	d901      	bls.n	2400d54a <f_write+0x19c>
					cc = fs->csize - csect;
2400d546:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d54a:	4653      	mov	r3, sl
2400d54c:	464a      	mov	r2, r9
2400d54e:	4631      	mov	r1, r6
2400d550:	f89b 0001 	ldrb.w	r0, [fp, #1]
2400d554:	f7fe f990 	bl	2400b878 <disk_write>
2400d558:	2800      	cmp	r0, #0
2400d55a:	f43f af7c 	beq.w	2400d456 <f_write+0xa8>
2400d55e:	f04f 0a01 	mov.w	sl, #1
2400d562:	f884 a015 	strb.w	sl, [r4, #21]
2400d566:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400d56a:	9801      	ldr	r0, [sp, #4]
2400d56c:	b005      	add	sp, #20
2400d56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400d572:	2301      	movs	r3, #1
2400d574:	464a      	mov	r2, r9
2400d576:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d57a:	f89b 0001 	ldrb.w	r0, [fp, #1]
2400d57e:	f7fe f96f 	bl	2400b860 <disk_read>
				fp->fptr < fp->obj.objsize &&
2400d582:	2800      	cmp	r0, #0
2400d584:	d083      	beq.n	2400d48e <f_write+0xe0>
					ABORT(fs, FR_DISK_ERR);
2400d586:	f04f 0a01 	mov.w	sl, #1
2400d58a:	f884 a015 	strb.w	sl, [r4, #21]
2400d58e:	f8cd a004 	str.w	sl, [sp, #4]
2400d592:	e7ea      	b.n	2400d56a <f_write+0x1bc>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400d594:	7d23      	ldrb	r3, [r4, #20]
2400d596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400d59a:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400d59c:	e7e5      	b.n	2400d56a <f_write+0x1bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400d59e:	2307      	movs	r3, #7
2400d5a0:	9301      	str	r3, [sp, #4]
2400d5a2:	e7e2      	b.n	2400d56a <f_write+0x1bc>

2400d5a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
2400d5a4:	b570      	push	{r4, r5, r6, lr}
2400d5a6:	b082      	sub	sp, #8
2400d5a8:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
2400d5aa:	a901      	add	r1, sp, #4
2400d5ac:	f7fe fc3d 	bl	2400be2a <validate>
	if (res == FR_OK) {
2400d5b0:	b970      	cbnz	r0, 2400d5d0 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400d5b2:	7d23      	ldrb	r3, [r4, #20]
2400d5b4:	f013 0f40 	tst.w	r3, #64	; 0x40
2400d5b8:	d00a      	beq.n	2400d5d0 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400d5ba:	f013 0f80 	tst.w	r3, #128	; 0x80
2400d5be:	d109      	bne.n	2400d5d4 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
2400d5c0:	f7fe f866 	bl	2400b690 <get_fattime>
2400d5c4:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
2400d5c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
2400d5c8:	9801      	ldr	r0, [sp, #4]
2400d5ca:	f7fe fc7b 	bl	2400bec4 <move_window>
				if (res == FR_OK) {
2400d5ce:	b178      	cbz	r0, 2400d5f0 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
2400d5d0:	b002      	add	sp, #8
2400d5d2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400d5d4:	2301      	movs	r3, #1
2400d5d6:	6a22      	ldr	r2, [r4, #32]
2400d5d8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d5dc:	9801      	ldr	r0, [sp, #4]
2400d5de:	7840      	ldrb	r0, [r0, #1]
2400d5e0:	f7fe f94a 	bl	2400b878 <disk_write>
2400d5e4:	bb40      	cbnz	r0, 2400d638 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
2400d5e6:	7d23      	ldrb	r3, [r4, #20]
2400d5e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d5ec:	7523      	strb	r3, [r4, #20]
2400d5ee:	e7e7      	b.n	2400d5c0 <f_sync+0x1c>
					dir = fp->dir_ptr;
2400d5f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400d5f2:	7af3      	ldrb	r3, [r6, #11]
2400d5f4:	f043 0320 	orr.w	r3, r3, #32
2400d5f8:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400d5fa:	68a2      	ldr	r2, [r4, #8]
2400d5fc:	4631      	mov	r1, r6
2400d5fe:	6820      	ldr	r0, [r4, #0]
2400d600:	f7fe fa91 	bl	2400bb26 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
2400d604:	68e1      	ldr	r1, [r4, #12]
2400d606:	f106 001c 	add.w	r0, r6, #28
2400d60a:	f7fe f961 	bl	2400b8d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
2400d60e:	4629      	mov	r1, r5
2400d610:	f106 0016 	add.w	r0, r6, #22
2400d614:	f7fe f95c 	bl	2400b8d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
2400d618:	2100      	movs	r1, #0
2400d61a:	f106 0012 	add.w	r0, r6, #18
2400d61e:	f7fe f953 	bl	2400b8c8 <st_word>
					fs->wflag = 1;
2400d622:	9b01      	ldr	r3, [sp, #4]
2400d624:	2201      	movs	r2, #1
2400d626:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400d628:	9801      	ldr	r0, [sp, #4]
2400d62a:	f7ff fc59 	bl	2400cee0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400d62e:	7d23      	ldrb	r3, [r4, #20]
2400d630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d634:	7523      	strb	r3, [r4, #20]
2400d636:	e7cb      	b.n	2400d5d0 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400d638:	2001      	movs	r0, #1
2400d63a:	e7c9      	b.n	2400d5d0 <f_sync+0x2c>

2400d63c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400d63c:	b510      	push	{r4, lr}
2400d63e:	b082      	sub	sp, #8
2400d640:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
2400d642:	f7ff ffaf 	bl	2400d5a4 <f_sync>
	if (res == FR_OK)
2400d646:	b108      	cbz	r0, 2400d64c <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400d648:	b002      	add	sp, #8
2400d64a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
2400d64c:	a901      	add	r1, sp, #4
2400d64e:	4620      	mov	r0, r4
2400d650:	f7fe fbeb 	bl	2400be2a <validate>
		if (res == FR_OK) {
2400d654:	2800      	cmp	r0, #0
2400d656:	d1f7      	bne.n	2400d648 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
2400d658:	6920      	ldr	r0, [r4, #16]
2400d65a:	f7fe fa07 	bl	2400ba6c <dec_lock>
			if (res == FR_OK)
2400d65e:	2800      	cmp	r0, #0
2400d660:	d1f2      	bne.n	2400d648 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
2400d662:	6020      	str	r0, [r4, #0]
2400d664:	e7f0      	b.n	2400d648 <f_close+0xc>

2400d666 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
2400d666:	b530      	push	{r4, r5, lr}
2400d668:	b085      	sub	sp, #20
2400d66a:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
2400d66c:	2800      	cmp	r0, #0
2400d66e:	d03d      	beq.n	2400d6ec <f_opendir+0x86>
2400d670:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
2400d672:	2200      	movs	r2, #0
2400d674:	a903      	add	r1, sp, #12
2400d676:	a801      	add	r0, sp, #4
2400d678:	f7fe fc7c 	bl	2400bf74 <find_volume>
	if (res == FR_OK) {
2400d67c:	4604      	mov	r4, r0
2400d67e:	b128      	cbz	r0, 2400d68c <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400d680:	b10c      	cbz	r4, 2400d686 <f_opendir+0x20>
2400d682:	2300      	movs	r3, #0
2400d684:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
2400d686:	4620      	mov	r0, r4
2400d688:	b005      	add	sp, #20
2400d68a:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
2400d68c:	9b03      	ldr	r3, [sp, #12]
2400d68e:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400d690:	9901      	ldr	r1, [sp, #4]
2400d692:	4628      	mov	r0, r5
2400d694:	f7ff fb3d 	bl	2400cd12 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2400d698:	4604      	mov	r4, r0
2400d69a:	bb18      	cbnz	r0, 2400d6e4 <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2400d69c:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
2400d6a0:	2b00      	cmp	r3, #0
2400d6a2:	db08      	blt.n	2400d6b6 <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2400d6a4:	79ab      	ldrb	r3, [r5, #6]
2400d6a6:	f013 0f10 	tst.w	r3, #16
2400d6aa:	d01a      	beq.n	2400d6e2 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400d6ac:	6a29      	ldr	r1, [r5, #32]
2400d6ae:	9803      	ldr	r0, [sp, #12]
2400d6b0:	f7fe fa26 	bl	2400bb00 <ld_clust>
2400d6b4:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
2400d6b6:	9b03      	ldr	r3, [sp, #12]
2400d6b8:	88db      	ldrh	r3, [r3, #6]
2400d6ba:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400d6bc:	2100      	movs	r1, #0
2400d6be:	4628      	mov	r0, r5
2400d6c0:	f7fe fecb 	bl	2400c45a <dir_sdi>
				if (res == FR_OK) {
2400d6c4:	4604      	mov	r4, r0
2400d6c6:	b968      	cbnz	r0, 2400d6e4 <f_opendir+0x7e>
					if (obj->sclust) {
2400d6c8:	68ab      	ldr	r3, [r5, #8]
2400d6ca:	b913      	cbnz	r3, 2400d6d2 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
2400d6cc:	2300      	movs	r3, #0
2400d6ce:	612b      	str	r3, [r5, #16]
2400d6d0:	e008      	b.n	2400d6e4 <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2400d6d2:	2100      	movs	r1, #0
2400d6d4:	4628      	mov	r0, r5
2400d6d6:	f7fe f977 	bl	2400b9c8 <inc_lock>
2400d6da:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2400d6dc:	b910      	cbnz	r0, 2400d6e4 <f_opendir+0x7e>
2400d6de:	2412      	movs	r4, #18
2400d6e0:	e7ce      	b.n	2400d680 <f_opendir+0x1a>
					res = FR_NO_PATH;
2400d6e2:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400d6e4:	2c04      	cmp	r4, #4
2400d6e6:	d1cb      	bne.n	2400d680 <f_opendir+0x1a>
2400d6e8:	2405      	movs	r4, #5
2400d6ea:	e7ca      	b.n	2400d682 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
2400d6ec:	2409      	movs	r4, #9
2400d6ee:	e7ca      	b.n	2400d686 <f_opendir+0x20>

2400d6f0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
2400d6f0:	b570      	push	{r4, r5, r6, lr}
2400d6f2:	b082      	sub	sp, #8
2400d6f4:	4604      	mov	r4, r0
2400d6f6:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
2400d6f8:	a901      	add	r1, sp, #4
2400d6fa:	f7fe fb96 	bl	2400be2a <validate>
	if (res == FR_OK) {
2400d6fe:	4606      	mov	r6, r0
2400d700:	b9c0      	cbnz	r0, 2400d734 <f_readdir+0x44>
		if (!fno) {
2400d702:	b195      	cbz	r5, 2400d72a <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
2400d704:	2100      	movs	r1, #0
2400d706:	4620      	mov	r0, r4
2400d708:	f7ff f852 	bl	2400c7b0 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
2400d70c:	2804      	cmp	r0, #4
2400d70e:	d000      	beq.n	2400d712 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
2400d710:	b998      	cbnz	r0, 2400d73a <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
2400d712:	4629      	mov	r1, r5
2400d714:	4620      	mov	r0, r4
2400d716:	f7ff f9c1 	bl	2400ca9c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400d71a:	2100      	movs	r1, #0
2400d71c:	4620      	mov	r0, r4
2400d71e:	f7fe ff9c 	bl	2400c65a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
2400d722:	2804      	cmp	r0, #4
2400d724:	d006      	beq.n	2400d734 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
2400d726:	4606      	mov	r6, r0
2400d728:	e004      	b.n	2400d734 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400d72a:	2100      	movs	r1, #0
2400d72c:	4620      	mov	r0, r4
2400d72e:	f7fe fe94 	bl	2400c45a <dir_sdi>
2400d732:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
2400d734:	4630      	mov	r0, r6
2400d736:	b002      	add	sp, #8
2400d738:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
2400d73a:	4606      	mov	r6, r0
2400d73c:	e7fa      	b.n	2400d734 <f_readdir+0x44>

2400d73e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400d73e:	b570      	push	{r4, r5, r6, lr}
2400d740:	4605      	mov	r5, r0
2400d742:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
2400d744:	4621      	mov	r1, r4
2400d746:	4628      	mov	r0, r5
2400d748:	f7ff ffd2 	bl	2400d6f0 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400d74c:	4606      	mov	r6, r0
2400d74e:	fab4 f384 	clz	r3, r4
2400d752:	095b      	lsrs	r3, r3, #5
2400d754:	2800      	cmp	r0, #0
2400d756:	bf18      	it	ne
2400d758:	f043 0301 	orrne.w	r3, r3, #1
2400d75c:	b953      	cbnz	r3, 2400d774 <f_findnext+0x36>
2400d75e:	7da3      	ldrb	r3, [r4, #22]
2400d760:	b143      	cbz	r3, 2400d774 <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2400d762:	2300      	movs	r3, #0
2400d764:	461a      	mov	r2, r3
2400d766:	f104 0116 	add.w	r1, r4, #22
2400d76a:	6b68      	ldr	r0, [r5, #52]	; 0x34
2400d76c:	f7fe fae6 	bl	2400bd3c <pattern_matching>
2400d770:	2800      	cmp	r0, #0
2400d772:	d0e7      	beq.n	2400d744 <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400d774:	4630      	mov	r0, r6
2400d776:	bd70      	pop	{r4, r5, r6, pc}

2400d778 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2400d778:	b538      	push	{r3, r4, r5, lr}
2400d77a:	4604      	mov	r4, r0
2400d77c:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2400d77e:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
2400d780:	4611      	mov	r1, r2
2400d782:	f7ff ff70 	bl	2400d666 <f_opendir>
	if (res == FR_OK) {
2400d786:	b100      	cbz	r0, 2400d78a <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2400d788:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
2400d78a:	4629      	mov	r1, r5
2400d78c:	4620      	mov	r0, r4
2400d78e:	f7ff ffd6 	bl	2400d73e <f_findnext>
2400d792:	e7f9      	b.n	2400d788 <f_findfirst+0x10>

2400d794 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
2400d794:	4b13      	ldr	r3, [pc, #76]	; (2400d7e4 <FATFS_LinkDriverEx+0x50>)
2400d796:	7a5b      	ldrb	r3, [r3, #9]
2400d798:	bb13      	cbnz	r3, 2400d7e0 <FATFS_LinkDriverEx+0x4c>
{
2400d79a:	b510      	push	{r4, lr}
2400d79c:	4604      	mov	r4, r0
2400d79e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
2400d7a2:	4b10      	ldr	r3, [pc, #64]	; (2400d7e4 <FATFS_LinkDriverEx+0x50>)
2400d7a4:	f893 c009 	ldrb.w	ip, [r3, #9]
2400d7a8:	fa5f fc8c 	uxtb.w	ip, ip
2400d7ac:	f04f 0e00 	mov.w	lr, #0
2400d7b0:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
2400d7b4:	f893 c009 	ldrb.w	ip, [r3, #9]
2400d7b8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
2400d7bc:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
2400d7c0:	7a5c      	ldrb	r4, [r3, #9]
2400d7c2:	441c      	add	r4, r3
2400d7c4:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
2400d7c6:	7a5a      	ldrb	r2, [r3, #9]
2400d7c8:	1c54      	adds	r4, r2, #1
2400d7ca:	b2e4      	uxtb	r4, r4
2400d7cc:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
2400d7ce:	3230      	adds	r2, #48	; 0x30
2400d7d0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
2400d7d2:	233a      	movs	r3, #58	; 0x3a
2400d7d4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
2400d7d6:	232f      	movs	r3, #47	; 0x2f
2400d7d8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
2400d7da:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
2400d7de:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
2400d7e0:	2001      	movs	r0, #1
}
2400d7e2:	4770      	bx	lr
2400d7e4:	2001d920 	.word	0x2001d920

2400d7e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
2400d7e8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
2400d7ea:	2200      	movs	r2, #0
2400d7ec:	f7ff ffd2 	bl	2400d794 <FATFS_LinkDriverEx>
}
2400d7f0:	bd08      	pop	{r3, pc}
	...

2400d7f4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2400d7f4:	287f      	cmp	r0, #127	; 0x7f
2400d7f6:	d917      	bls.n	2400d828 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
2400d7f8:	b131      	cbz	r1, 2400d808 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400d7fa:	28ff      	cmp	r0, #255	; 0xff
2400d7fc:	d813      	bhi.n	2400d826 <ff_convert+0x32>
2400d7fe:	3880      	subs	r0, #128	; 0x80
2400d800:	4b0a      	ldr	r3, [pc, #40]	; (2400d82c <ff_convert+0x38>)
2400d802:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
2400d806:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2400d808:	2300      	movs	r3, #0
2400d80a:	2b7f      	cmp	r3, #127	; 0x7f
2400d80c:	d807      	bhi.n	2400d81e <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
2400d80e:	4a07      	ldr	r2, [pc, #28]	; (2400d82c <ff_convert+0x38>)
2400d810:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
2400d814:	4282      	cmp	r2, r0
2400d816:	d002      	beq.n	2400d81e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
2400d818:	3301      	adds	r3, #1
2400d81a:	b29b      	uxth	r3, r3
2400d81c:	e7f5      	b.n	2400d80a <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
2400d81e:	f103 0080 	add.w	r0, r3, #128	; 0x80
2400d822:	b2c0      	uxtb	r0, r0
2400d824:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400d826:	2000      	movs	r0, #0
		}
	}

	return c;
}
2400d828:	4770      	bx	lr
2400d82a:	bf00      	nop
2400d82c:	24016094 	.word	0x24016094

2400d830 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
2400d830:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
2400d832:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400d836:	d201      	bcs.n	2400d83c <ff_wtoupper+0xc>
2400d838:	4b22      	ldr	r3, [pc, #136]	; (2400d8c4 <ff_wtoupper+0x94>)
2400d83a:	e002      	b.n	2400d842 <ff_wtoupper+0x12>
2400d83c:	4b22      	ldr	r3, [pc, #136]	; (2400d8c8 <ff_wtoupper+0x98>)
2400d83e:	e000      	b.n	2400d842 <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400d840:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
2400d842:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
2400d844:	4288      	cmp	r0, r1
2400d846:	bf2c      	ite	cs
2400d848:	2200      	movcs	r2, #0
2400d84a:	2201      	movcc	r2, #1
2400d84c:	2900      	cmp	r1, #0
2400d84e:	bf08      	it	eq
2400d850:	f042 0201 	orreq.w	r2, r2, #1
2400d854:	b9ca      	cbnz	r2, 2400d88a <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400d856:	f103 0e04 	add.w	lr, r3, #4
2400d85a:	885b      	ldrh	r3, [r3, #2]
2400d85c:	0a1a      	lsrs	r2, r3, #8
2400d85e:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
2400d860:	eb03 0c01 	add.w	ip, r3, r1
2400d864:	4560      	cmp	r0, ip
2400d866:	db04      	blt.n	2400d872 <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
2400d868:	2a00      	cmp	r2, #0
2400d86a:	d1e9      	bne.n	2400d840 <ff_wtoupper+0x10>
2400d86c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
2400d870:	e7e7      	b.n	2400d842 <ff_wtoupper+0x12>
			switch (cmd) {
2400d872:	2a08      	cmp	r2, #8
2400d874:	d809      	bhi.n	2400d88a <ff_wtoupper+0x5a>
2400d876:	e8df f002 	tbb	[pc, r2]
2400d87a:	0905      	.short	0x0905
2400d87c:	1815120f 	.word	0x1815120f
2400d880:	1e1b      	.short	0x1e1b
2400d882:	21          	.byte	0x21
2400d883:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
2400d884:	1a41      	subs	r1, r0, r1
2400d886:	f83e 0011 	ldrh.w	r0, [lr, r1, lsl #1]
	}

	return chr;
}
2400d88a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2400d88c:	1a43      	subs	r3, r0, r1
2400d88e:	f003 0301 	and.w	r3, r3, #1
2400d892:	1ac0      	subs	r0, r0, r3
2400d894:	b280      	uxth	r0, r0
2400d896:	e7f8      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
2400d898:	3810      	subs	r0, #16
2400d89a:	b280      	uxth	r0, r0
2400d89c:	e7f5      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
2400d89e:	3820      	subs	r0, #32
2400d8a0:	b280      	uxth	r0, r0
2400d8a2:	e7f2      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
2400d8a4:	3830      	subs	r0, #48	; 0x30
2400d8a6:	b280      	uxth	r0, r0
2400d8a8:	e7ef      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
2400d8aa:	381a      	subs	r0, #26
2400d8ac:	b280      	uxth	r0, r0
2400d8ae:	e7ec      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
2400d8b0:	3008      	adds	r0, #8
2400d8b2:	b280      	uxth	r0, r0
2400d8b4:	e7e9      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
2400d8b6:	3850      	subs	r0, #80	; 0x50
2400d8b8:	b280      	uxth	r0, r0
2400d8ba:	e7e6      	b.n	2400d88a <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
2400d8bc:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
2400d8c0:	b280      	uxth	r0, r0
2400d8c2:	e7e2      	b.n	2400d88a <ff_wtoupper+0x5a>
2400d8c4:	24016194 	.word	0x24016194
2400d8c8:	24016388 	.word	0x24016388

2400d8cc <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
2400d8cc:	b538      	push	{r3, r4, r5, lr}
2400d8ce:	ed2d 8b02 	vpush	{d8}
2400d8d2:	4604      	mov	r4, r0
2400d8d4:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
2400d8d8:	680d      	ldr	r5, [r1, #0]
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400d8da:	4629      	mov	r1, r5
2400d8dc:	2010      	movs	r0, #16
2400d8de:	f002 ff60 	bl	240107a2 <mpool_alloc>
2400d8e2:	6020      	str	r0, [r4, #0]
    p->mempool = m;
2400d8e4:	6005      	str	r5, [r0, #0]
    
    p->curr=0.0f;
2400d8e6:	2300      	movs	r3, #0
2400d8e8:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
2400d8ea:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
2400d8ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400d8f2:	ee30 8a48 	vsub.f32	s16, s0, s16
2400d8f6:	ed80 8a02 	vstr	s16, [r0, #8]
}
2400d8fa:	ecbd 8b02 	vpop	{d8}
2400d8fe:	bd38      	pop	{r3, r4, r5, pc}

2400d900 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
2400d900:	b508      	push	{r3, lr}
    _tPowerFollower* p = *pf;
2400d902:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
2400d904:	6801      	ldr	r1, [r0, #0]
2400d906:	f003 f838 	bl	2401097a <mpool_free>
}
2400d90a:	bd08      	pop	{r3, pc}

2400d90c <tPowerFollower_setFactor>:

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
2400d90c:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0) factor=0;
2400d90e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400d912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400d916:	d411      	bmi.n	2400d93c <tPowerFollower_setFactor+0x30>
    if (factor>1) factor=1;
2400d918:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400d91c:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400d920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400d924:	dd01      	ble.n	2400d92a <tPowerFollower_setFactor+0x1e>
2400d926:	eeb0 0a67 	vmov.f32	s0, s15
    p->factor=factor;
2400d92a:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
2400d92e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400d932:	ee37 0ac0 	vsub.f32	s0, s15, s0
2400d936:	ed83 0a02 	vstr	s0, [r3, #8]
}
2400d93a:	4770      	bx	lr
    if (factor<0) factor=0;
2400d93c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2400d944 <tPowerFollower_setFactor+0x38>
2400d940:	e7ea      	b.n	2400d918 <tPowerFollower_setFactor+0xc>
2400d942:	bf00      	nop
2400d944:	00000000 	.word	0x00000000

2400d948 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
2400d948:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
2400d94a:	edd3 7a01 	vldr	s15, [r3, #4]
2400d94e:	ee67 7a80 	vmul.f32	s15, s15, s0
2400d952:	ee27 0a80 	vmul.f32	s0, s15, s0
2400d956:	edd3 7a02 	vldr	s15, [r3, #8]
2400d95a:	ed93 7a03 	vldr	s14, [r3, #12]
2400d95e:	ee67 7a87 	vmul.f32	s15, s15, s14
2400d962:	ee30 0a27 	vadd.f32	s0, s0, s15
2400d966:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
2400d96a:	4770      	bx	lr

2400d96c <tLinearDelay_free>:
    
    tLinearDelay_setDelay(dl, d->delay);
}

void tLinearDelay_free (tLinearDelay* const dl)
{
2400d96c:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400d96e:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)d->buff, d->mempool);
2400d970:	6821      	ldr	r1, [r4, #0]
2400d972:	68a0      	ldr	r0, [r4, #8]
2400d974:	f003 f801 	bl	2401097a <mpool_free>
    mpool_free((char*)d, d->mempool);
2400d978:	6821      	ldr	r1, [r4, #0]
2400d97a:	4620      	mov	r0, r4
2400d97c:	f002 fffd 	bl	2401097a <mpool_free>
}
2400d980:	bd10      	pop	{r4, pc}

2400d982 <tLinearDelay_clear>:

void    tLinearDelay_clear(tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
2400d982:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400d984:	2300      	movs	r3, #0
2400d986:	e005      	b.n	2400d994 <tLinearDelay_clear+0x12>
    {
        d->buff[i] = 0;
2400d988:	688a      	ldr	r2, [r1, #8]
2400d98a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400d98e:	2000      	movs	r0, #0
2400d990:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400d992:	3301      	adds	r3, #1
2400d994:	69ca      	ldr	r2, [r1, #28]
2400d996:	429a      	cmp	r2, r3
2400d998:	d8f6      	bhi.n	2400d988 <tLinearDelay_clear+0x6>
    }
}
2400d99a:	4770      	bx	lr

2400d99c <tLinearDelay_tick>:

Lfloat   tLinearDelay_tick (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
2400d99c:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
2400d99e:	edd3 7a01 	vldr	s15, [r3, #4]
2400d9a2:	689a      	ldr	r2, [r3, #8]
2400d9a4:	6959      	ldr	r1, [r3, #20]
2400d9a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400d9aa:	ee67 7a80 	vmul.f32	s15, s15, s0
2400d9ae:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400d9b2:	695a      	ldr	r2, [r3, #20]
2400d9b4:	3201      	adds	r2, #1
2400d9b6:	615a      	str	r2, [r3, #20]
2400d9b8:	69d9      	ldr	r1, [r3, #28]
2400d9ba:	428a      	cmp	r2, r1
2400d9bc:	d022      	beq.n	2400da04 <tLinearDelay_tick+0x68>

    uint32_t idx = (uint32_t) d->outPoint;
2400d9be:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
2400d9c0:	6898      	ldr	r0, [r3, #8]
2400d9c2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
2400d9c6:	eddc 7a00 	vldr	s15, [ip]
2400d9ca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
2400d9ce:	ee67 7a87 	vmul.f32	s15, s15, s14
2400d9d2:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
2400d9d6:	3201      	adds	r2, #1
2400d9d8:	4291      	cmp	r1, r2
2400d9da:	d916      	bls.n	2400da0a <tLinearDelay_tick+0x6e>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400d9dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2400d9e0:	ed90 7a00 	vldr	s14, [r0]
2400d9e4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
2400d9e8:	ee27 7a26 	vmul.f32	s14, s14, s13
2400d9ec:	ee77 7a87 	vadd.f32	s15, s15, s14
2400d9f0:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400d9f4:	619a      	str	r2, [r3, #24]
2400d9f6:	4291      	cmp	r1, r2
2400d9f8:	d801      	bhi.n	2400d9fe <tLinearDelay_tick+0x62>
2400d9fa:	2200      	movs	r2, #0
2400d9fc:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
2400d9fe:	ed93 0a03 	vldr	s0, [r3, #12]
2400da02:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400da04:	2200      	movs	r2, #0
2400da06:	615a      	str	r2, [r3, #20]
2400da08:	e7d9      	b.n	2400d9be <tLinearDelay_tick+0x22>
        d->lastOut += d->buff[0] * d->alpha;
2400da0a:	ed90 7a00 	vldr	s14, [r0]
2400da0e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
2400da12:	ee27 7a26 	vmul.f32	s14, s14, s13
2400da16:	ee77 7a87 	vadd.f32	s15, s15, s14
2400da1a:	edc3 7a03 	vstr	s15, [r3, #12]
2400da1e:	e7e9      	b.n	2400d9f4 <tLinearDelay_tick+0x58>

2400da20 <tLinearDelay_tickIn>:

void   tLinearDelay_tickIn (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
2400da20:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
2400da22:	edd3 7a01 	vldr	s15, [r3, #4]
2400da26:	689a      	ldr	r2, [r3, #8]
2400da28:	6959      	ldr	r1, [r3, #20]
2400da2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400da2e:	ee67 7a80 	vmul.f32	s15, s15, s0
2400da32:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400da36:	695a      	ldr	r2, [r3, #20]
2400da38:	3201      	adds	r2, #1
2400da3a:	615a      	str	r2, [r3, #20]
2400da3c:	69d9      	ldr	r1, [r3, #28]
2400da3e:	428a      	cmp	r2, r1
2400da40:	d000      	beq.n	2400da44 <tLinearDelay_tickIn+0x24>
}
2400da42:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400da44:	2200      	movs	r2, #0
2400da46:	615a      	str	r2, [r3, #20]
}
2400da48:	e7fb      	b.n	2400da42 <tLinearDelay_tickIn+0x22>

2400da4a <tLinearDelay_tickOut>:

Lfloat   tLinearDelay_tickOut (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
2400da4a:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
2400da4c:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
2400da4e:	6899      	ldr	r1, [r3, #8]
2400da50:	eb01 0082 	add.w	r0, r1, r2, lsl #2
2400da54:	edd0 7a00 	vldr	s15, [r0]
2400da58:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
2400da5c:	ee67 7a87 	vmul.f32	s15, s15, s14
2400da60:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
2400da64:	3201      	adds	r2, #1
2400da66:	69d8      	ldr	r0, [r3, #28]
2400da68:	4282      	cmp	r2, r0
2400da6a:	d213      	bcs.n	2400da94 <tLinearDelay_tickOut+0x4a>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400da6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
2400da70:	ed91 7a00 	vldr	s14, [r1]
2400da74:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
2400da78:	ee27 7a26 	vmul.f32	s14, s14, s13
2400da7c:	ee77 7a87 	vadd.f32	s15, s15, s14
2400da80:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400da84:	619a      	str	r2, [r3, #24]
2400da86:	4282      	cmp	r2, r0
2400da88:	d301      	bcc.n	2400da8e <tLinearDelay_tickOut+0x44>
2400da8a:	2200      	movs	r2, #0
2400da8c:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
2400da8e:	ed93 0a03 	vldr	s0, [r3, #12]
2400da92:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400da94:	ed91 7a00 	vldr	s14, [r1]
2400da98:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
2400da9c:	ee27 7a26 	vmul.f32	s14, s14, s13
2400daa0:	ee77 7a87 	vadd.f32	s15, s15, s14
2400daa4:	edc3 7a03 	vstr	s15, [r3, #12]
2400daa8:	e7ec      	b.n	2400da84 <tLinearDelay_tickOut+0x3a>
	...

2400daac <tLinearDelay_setDelay>:

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
2400daac:	b510      	push	{r4, lr}
2400daae:	eef0 0a40 	vmov.f32	s1, s0
    _tLinearDelay* d = *dl;
2400dab2:	6804      	ldr	r4, [r0, #0]

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400dab4:	edd4 7a07 	vldr	s15, [r4, #28]
2400dab8:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400dabc:	ed9f 0a18 	vldr	s0, [pc, #96]	; 2400db20 <tLinearDelay_setDelay+0x74>
2400dac0:	f021 fa16 	bl	2402eef0 <__LEAF_clip_veneer>
2400dac4:	ed84 0a08 	vstr	s0, [r4, #32]

    Lfloat outPointer = d->inPoint - d->delay;
2400dac8:	edd4 7a05 	vldr	s15, [r4, #20]
2400dacc:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dad0:	ee37 0ac0 	vsub.f32	s0, s15, s0

    while ( outPointer < 0 )
2400dad4:	e005      	b.n	2400dae2 <tLinearDelay_setDelay+0x36>
        outPointer += d->maxDelay; // modulo maximum length
2400dad6:	edd4 7a07 	vldr	s15, [r4, #28]
2400dada:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dade:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400dae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400daea:	d4f4      	bmi.n	2400dad6 <tLinearDelay_setDelay+0x2a>

    d->outPoint = (uint32_t) outPointer;   // integer part
2400daec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400daf0:	ee17 3a90 	vmov	r3, s15
2400daf4:	edc4 7a06 	vstr	s15, [r4, #24]

    d->alpha = outPointer - d->outPoint; // fractional part
2400daf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dafc:	ee30 0a67 	vsub.f32	s0, s0, s15
2400db00:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400db04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400db08:	ee37 0ac0 	vsub.f32	s0, s15, s0
2400db0c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400db10:	69e2      	ldr	r2, [r4, #28]
2400db12:	4293      	cmp	r3, r2
2400db14:	d000      	beq.n	2400db18 <tLinearDelay_setDelay+0x6c>
}
2400db16:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400db18:	2300      	movs	r3, #0
2400db1a:	61a3      	str	r3, [r4, #24]
}
2400db1c:	e7fb      	b.n	2400db16 <tLinearDelay_setDelay+0x6a>
2400db1e:	bf00      	nop
2400db20:	00000000 	.word	0x00000000

2400db24 <tLinearDelay_initToPool>:
{
2400db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400db26:	ed2d 8b02 	vpush	{d8}
2400db2a:	4606      	mov	r6, r0
2400db2c:	eeb0 8a40 	vmov.f32	s16, s0
2400db30:	460d      	mov	r5, r1
    _tMempool* m = *mp;
2400db32:	6817      	ldr	r7, [r2, #0]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400db34:	4639      	mov	r1, r7
2400db36:	202c      	movs	r0, #44	; 0x2c
2400db38:	f002 fe33 	bl	240107a2 <mpool_alloc>
2400db3c:	4604      	mov	r4, r0
2400db3e:	6030      	str	r0, [r6, #0]
    d->mempool = m;
2400db40:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
2400db42:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400db44:	ee07 5a90 	vmov	s15, r5
2400db48:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400db4c:	eef4 7ac8 	vcmpe.f32	s15, s16
2400db50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400db54:	d517      	bpl.n	2400db86 <tLinearDelay_initToPool+0x62>
2400db56:	edc0 7a08 	vstr	s15, [r0, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400db5a:	4639      	mov	r1, r7
2400db5c:	00a8      	lsls	r0, r5, #2
2400db5e:	f002 fe20 	bl	240107a2 <mpool_alloc>
2400db62:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
2400db64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400db68:	6063      	str	r3, [r4, #4]
    d->lastIn = 0.0f;
2400db6a:	2300      	movs	r3, #0
2400db6c:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
2400db6e:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
2400db70:	2300      	movs	r3, #0
2400db72:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
2400db74:	61a3      	str	r3, [r4, #24]
    tLinearDelay_setDelay(dl, d->delay);
2400db76:	ed94 0a08 	vldr	s0, [r4, #32]
2400db7a:	4630      	mov	r0, r6
2400db7c:	f7ff ff96 	bl	2400daac <tLinearDelay_setDelay>
}
2400db80:	ecbd 8b02 	vpop	{d8}
2400db84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
2400db86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400db8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400db8e:	d402      	bmi.n	2400db96 <tLinearDelay_initToPool+0x72>
    else                    d->delay = delay;
2400db90:	ed80 8a08 	vstr	s16, [r0, #32]
2400db94:	e7e1      	b.n	2400db5a <tLinearDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
2400db96:	2300      	movs	r3, #0
2400db98:	6203      	str	r3, [r0, #32]
2400db9a:	e7de      	b.n	2400db5a <tLinearDelay_initToPool+0x36>

2400db9c <tHermiteDelay_free>:

    tHermiteDelay_setDelay(dl, d->delay);
}

void tHermiteDelay_free (tHermiteDelay* const dl)
{
2400db9c:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
2400db9e:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
2400dba0:	6821      	ldr	r1, [r4, #0]
2400dba2:	6860      	ldr	r0, [r4, #4]
2400dba4:	f002 fee9 	bl	2401097a <mpool_free>
    mpool_free((char*)d, d->mempool);
2400dba8:	6821      	ldr	r1, [r4, #0]
2400dbaa:	4620      	mov	r0, r4
2400dbac:	f002 fee5 	bl	2401097a <mpool_free>
}
2400dbb0:	bd10      	pop	{r4, pc}

2400dbb2 <tHermiteDelay_clear>:


void    tHermiteDelay_clear(tHermiteDelay* const dl)
{
    _tHermiteDelay* d = *dl;
2400dbb2:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400dbb4:	2300      	movs	r3, #0
2400dbb6:	e005      	b.n	2400dbc4 <tHermiteDelay_clear+0x12>
    {
        d->buff[i] = 0;
2400dbb8:	684a      	ldr	r2, [r1, #4]
2400dbba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400dbbe:	2000      	movs	r0, #0
2400dbc0:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400dbc2:	3301      	adds	r3, #1
2400dbc4:	69ca      	ldr	r2, [r1, #28]
2400dbc6:	429a      	cmp	r2, r3
2400dbc8:	d8f6      	bhi.n	2400dbb8 <tHermiteDelay_clear+0x6>
    }
}
2400dbca:	4770      	bx	lr

2400dbcc <tHermiteDelay_tickIn>:
    return d->lastOut;
}

void   tHermiteDelay_tickIn (tHermiteDelay* const dl, Lfloat input)
{
    _tHermiteDelay* d = *dl;
2400dbcc:	6803      	ldr	r3, [r0, #0]
    
    d->buff[d->inPoint] = input;
2400dbce:	685a      	ldr	r2, [r3, #4]
2400dbd0:	6959      	ldr	r1, [r3, #20]
2400dbd2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400dbd6:	ed82 0a00 	vstr	s0, [r2]
    
    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
2400dbda:	695a      	ldr	r2, [r3, #20]
2400dbdc:	3201      	adds	r2, #1
2400dbde:	6899      	ldr	r1, [r3, #8]
2400dbe0:	400a      	ands	r2, r1
2400dbe2:	615a      	str	r2, [r3, #20]
}
2400dbe4:	4770      	bx	lr

2400dbe6 <tHermiteDelay_tickOut>:

Lfloat   tHermiteDelay_tickOut (tHermiteDelay* const dl)
{
2400dbe6:	b538      	push	{r3, r4, r5, lr}
    _tHermiteDelay* d = *dl;
2400dbe8:	6804      	ldr	r4, [r0, #0]
    
    uint32_t idx = (uint32_t) d->outPoint;
2400dbea:	69a1      	ldr	r1, [r4, #24]
    
    
    
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400dbec:	6862      	ldr	r2, [r4, #4]
2400dbee:	69e3      	ldr	r3, [r4, #28]
2400dbf0:	440b      	add	r3, r1
2400dbf2:	3b01      	subs	r3, #1
2400dbf4:	68a5      	ldr	r5, [r4, #8]
2400dbf6:	402b      	ands	r3, r5
2400dbf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                                d->buff[idx],
2400dbfc:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
2400dc00:	1c48      	adds	r0, r1, #1
2400dc02:	4028      	ands	r0, r5
2400dc04:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                                                d->buff[(idx + 2) & d->bufferMask],
2400dc08:	3102      	adds	r1, #2
2400dc0a:	4029      	ands	r1, r5
2400dc0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400dc10:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
2400dc14:	edd2 1a00 	vldr	s3, [r2]
2400dc18:	ed90 1a00 	vldr	s2, [r0]
2400dc1c:	eddc 0a00 	vldr	s1, [ip]
2400dc20:	ed93 0a00 	vldr	s0, [r3]
2400dc24:	f002 fc1a 	bl	2401045c <LEAF_interpolate_hermite_x>
2400dc28:	ed84 0a03 	vstr	s0, [r4, #12]
                                                d->alpha);
    
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
2400dc2c:	69a3      	ldr	r3, [r4, #24]
2400dc2e:	3301      	adds	r3, #1
2400dc30:	68a2      	ldr	r2, [r4, #8]
2400dc32:	4013      	ands	r3, r2
2400dc34:	61a3      	str	r3, [r4, #24]
    
    return d->lastOut;
}
2400dc36:	bd38      	pop	{r3, r4, r5, pc}

2400dc38 <tHermiteDelay_setDelay>:

void tHermiteDelay_setDelay (tHermiteDelay* const dl, Lfloat delay)
{
    _tHermiteDelay* d = *dl;
2400dc38:	6803      	ldr	r3, [r0, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
2400dc3a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
2400dc3e:	edd3 7a05 	vldr	s15, [r3, #20]
2400dc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dc46:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2400dc4a:	e005      	b.n	2400dc58 <tHermiteDelay_setDelay+0x20>
        outPointer += d->maxDelay; // modulo maximum length
2400dc4c:	edd3 7a07 	vldr	s15, [r3, #28]
2400dc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dc54:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400dc58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400dc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dc60:	d4f4      	bmi.n	2400dc4c <tHermiteDelay_setDelay+0x14>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
2400dc62:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400dc66:	ee17 2a90 	vmov	r2, s15
2400dc6a:	edc3 7a06 	vstr	s15, [r3, #24]
    
    d->alpha = outPointer - d->outPoint; // fractional part
2400dc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dc72:	ee30 0a67 	vsub.f32	s0, s0, s15
2400dc76:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
2400dc7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400dc7e:	ee37 0ac0 	vsub.f32	s0, s15, s0
2400dc82:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    
    d->outPoint &= d->bufferMask;
2400dc86:	6899      	ldr	r1, [r3, #8]
2400dc88:	400a      	ands	r2, r1
2400dc8a:	619a      	str	r2, [r3, #24]
}
2400dc8c:	4770      	bx	lr

2400dc8e <tHermiteDelay_initToPool>:
{
2400dc8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400dc90:	ed2d 8b02 	vpush	{d8}
2400dc94:	4605      	mov	r5, r0
2400dc96:	eeb0 8a40 	vmov.f32	s16, s0
2400dc9a:	460f      	mov	r7, r1
    _tMempool* m = *mp;
2400dc9c:	6816      	ldr	r6, [r2, #0]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400dc9e:	4631      	mov	r1, r6
2400dca0:	2030      	movs	r0, #48	; 0x30
2400dca2:	f002 fd7e 	bl	240107a2 <mpool_alloc>
2400dca6:	4604      	mov	r4, r0
2400dca8:	6028      	str	r0, [r5, #0]
    d->mempool = m;
2400dcaa:	6006      	str	r6, [r0, #0]
    d->maxDelay = maxDelay;
2400dcac:	61c7      	str	r7, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400dcae:	ee07 7a90 	vmov	s15, r7
2400dcb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dcb6:	eef4 7ac8 	vcmpe.f32	s15, s16
2400dcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dcbe:	d507      	bpl.n	2400dcd0 <tHermiteDelay_initToPool+0x42>
2400dcc0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
2400dcc4:	b17f      	cbz	r7, 2400dce6 <tHermiteDelay_initToPool+0x58>
2400dcc6:	1e7b      	subs	r3, r7, #1
2400dcc8:	423b      	tst	r3, r7
2400dcca:	d10c      	bne.n	2400dce6 <tHermiteDelay_initToPool+0x58>
        d->bufferMask = maxDelay - 1;
2400dccc:	60a3      	str	r3, [r4, #8]
2400dcce:	e018      	b.n	2400dd02 <tHermiteDelay_initToPool+0x74>
    else if (delay < 0.0f)  d->delay = 0.0f;
2400dcd0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400dcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dcd8:	d402      	bmi.n	2400dce0 <tHermiteDelay_initToPool+0x52>
    else                    d->delay = delay;
2400dcda:	ed80 8a09 	vstr	s16, [r0, #36]	; 0x24
2400dcde:	e7f1      	b.n	2400dcc4 <tHermiteDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
2400dce0:	2300      	movs	r3, #0
2400dce2:	6243      	str	r3, [r0, #36]	; 0x24
2400dce4:	e7ee      	b.n	2400dcc4 <tHermiteDelay_initToPool+0x36>
        maxDelay--;
2400dce6:	1e7b      	subs	r3, r7, #1
        maxDelay |= maxDelay >> 1;
2400dce8:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
2400dcec:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
2400dcf0:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
2400dcf4:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
2400dcf8:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
        maxDelay++;
2400dcfc:	1c5f      	adds	r7, r3, #1
        d->maxDelay = maxDelay;
2400dcfe:	61e7      	str	r7, [r4, #28]
        d->bufferMask = maxDelay - 1;
2400dd00:	60a3      	str	r3, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400dd02:	4631      	mov	r1, r6
2400dd04:	00b8      	lsls	r0, r7, #2
2400dd06:	f002 fd4c 	bl	240107a2 <mpool_alloc>
2400dd0a:	6060      	str	r0, [r4, #4]
    d->gain = 1.0f;
2400dd0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400dd10:	6223      	str	r3, [r4, #32]
    d->lastIn = 0.0f;
2400dd12:	2300      	movs	r3, #0
2400dd14:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
2400dd16:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
2400dd18:	2300      	movs	r3, #0
2400dd1a:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
2400dd1c:	61a3      	str	r3, [r4, #24]
    tHermiteDelay_setDelay(dl, d->delay);
2400dd1e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
2400dd22:	4628      	mov	r0, r5
2400dd24:	f7ff ff88 	bl	2400dc38 <tHermiteDelay_setDelay>
}
2400dd28:	ecbd 8b02 	vpop	{d8}
2400dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2400dd2e <tHermiteDelay_tapOut>:

Lfloat tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
2400dd2e:	6802      	ldr	r2, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
2400dd30:	6953      	ldr	r3, [r2, #20]
2400dd32:	1a5b      	subs	r3, r3, r1
2400dd34:	3b01      	subs	r3, #1
2400dd36:	6891      	ldr	r1, [r2, #8]
2400dd38:	400b      	ands	r3, r1
    
    return d->buff[tap];
2400dd3a:	6852      	ldr	r2, [r2, #4]
2400dd3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

}
2400dd40:	ed93 0a00 	vldr	s0, [r3]
2400dd44:	4770      	bx	lr

2400dd46 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tHermiteDelay_addTo (tHermiteDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
2400dd46:	6802      	ldr	r2, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
2400dd48:	6953      	ldr	r3, [r2, #20]
2400dd4a:	1a5b      	subs	r3, r3, r1
2400dd4c:	3b01      	subs	r3, #1
2400dd4e:	6891      	ldr	r1, [r2, #8]
2400dd50:	400b      	ands	r3, r1
    
    return (d->buff[tap] += value);
2400dd52:	6852      	ldr	r2, [r2, #4]
2400dd54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400dd58:	edd3 7a00 	vldr	s15, [r3]
2400dd5c:	ee30 0a27 	vadd.f32	s0, s0, s15
2400dd60:	ed83 0a00 	vstr	s0, [r3]
}
2400dd64:	4770      	bx	lr

2400dd66 <tSampleReducer_initToPool>:
{
    tSampleReducer_initToPool(sr, &leaf->mempool);
}

void tSampleReducer_initToPool (tSampleReducer* const sr, tMempool* const mp)
{
2400dd66:	b538      	push	{r3, r4, r5, lr}
2400dd68:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2400dd6a:	680d      	ldr	r5, [r1, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2400dd6c:	4629      	mov	r1, r5
2400dd6e:	2010      	movs	r0, #16
2400dd70:	f002 fd17 	bl	240107a2 <mpool_alloc>
2400dd74:	6020      	str	r0, [r4, #0]
    s->mempool = m;
2400dd76:	6005      	str	r5, [r0, #0]
    
    s->invRatio = 1.0f;
2400dd78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400dd7c:	6043      	str	r3, [r0, #4]
    s->hold = 0.0f;
2400dd7e:	2300      	movs	r3, #0
2400dd80:	6083      	str	r3, [r0, #8]
    s->count = 0;
2400dd82:	2300      	movs	r3, #0
2400dd84:	60c3      	str	r3, [r0, #12]
}
2400dd86:	bd38      	pop	{r3, r4, r5, pc}

2400dd88 <tSampleReducer_tick>:
    mpool_free((char*)s, s->mempool);
}

Lfloat tSampleReducer_tick(tSampleReducer* const sr, Lfloat input)
{
    _tSampleReducer* s = *sr;
2400dd88:	6803      	ldr	r3, [r0, #0]
    if (s->count > s->invRatio)
2400dd8a:	edd3 7a03 	vldr	s15, [r3, #12]
2400dd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dd92:	ed93 7a01 	vldr	s14, [r3, #4]
2400dd96:	eef4 7ac7 	vcmpe.f32	s15, s14
2400dd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dd9e:	dd03      	ble.n	2400dda8 <tSampleReducer_tick+0x20>
    {
        s->hold = input;
2400dda0:	ed83 0a02 	vstr	s0, [r3, #8]
        s->count = 0;
2400dda4:	2200      	movs	r2, #0
2400dda6:	60da      	str	r2, [r3, #12]
    }
    
    s->count++;
2400dda8:	68da      	ldr	r2, [r3, #12]
2400ddaa:	3201      	adds	r2, #1
2400ddac:	60da      	str	r2, [r3, #12]
    return s->hold;
}
2400ddae:	ed93 0a02 	vldr	s0, [r3, #8]
2400ddb2:	4770      	bx	lr

2400ddb4 <tSampleReducer_setRatio>:


void tSampleReducer_setRatio(tSampleReducer* const sr, Lfloat ratio)
{
    _tSampleReducer* s = *sr;
2400ddb4:	6803      	ldr	r3, [r0, #0]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2400ddb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400ddba:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400ddbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ddc2:	d900      	bls.n	2400ddc6 <tSampleReducer_setRatio+0x12>
        s->invRatio = 1.0f / ratio;
    
}
2400ddc4:	4770      	bx	lr
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2400ddc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400ddca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ddce:	dbf9      	blt.n	2400ddc4 <tSampleReducer_setRatio+0x10>
        s->invRatio = 1.0f / ratio;
2400ddd0:	eeb0 7a67 	vmov.f32	s14, s15
2400ddd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400ddd8:	edc3 7a01 	vstr	s15, [r3, #4]
}
2400dddc:	e7f2      	b.n	2400ddc4 <tSampleReducer_setRatio+0x10>
	...

2400dde0 <tOversampler_initToPool>:
{
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf->mempool);
}

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
2400dde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400dde4:	4680      	mov	r8, r0
2400dde6:	460d      	mov	r5, r1
    _tMempool* m = *mp;
2400dde8:	681e      	ldr	r6, [r3, #0]
    int offset = 0;
    if (extraQuality) offset = 6;
2400ddea:	4617      	mov	r7, r2
2400ddec:	2a00      	cmp	r2, #0
2400ddee:	d14d      	bne.n	2400de8c <tOversampler_initToPool+0xac>
    int offset = 0;
2400ddf0:	4691      	mov	r9, r2
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
2400ddf2:	2d04      	cmp	r5, #4
2400ddf4:	bf18      	it	ne
2400ddf6:	2d02      	cmpne	r5, #2
2400ddf8:	d00e      	beq.n	2400de18 <tOversampler_initToPool+0x38>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
2400ddfa:	2d10      	cmp	r5, #16
2400ddfc:	bf14      	ite	ne
2400ddfe:	2300      	movne	r3, #0
2400de00:	2301      	moveq	r3, #1
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
2400de02:	2d08      	cmp	r5, #8
2400de04:	d008      	beq.n	2400de18 <tOversampler_initToPool+0x38>
2400de06:	b93b      	cbnz	r3, 2400de18 <tOversampler_initToPool+0x38>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
2400de08:	2d40      	cmp	r5, #64	; 0x40
2400de0a:	bf14      	ite	ne
2400de0c:	2300      	movne	r3, #0
2400de0e:	2301      	moveq	r3, #1
2400de10:	2d20      	cmp	r5, #32
2400de12:	d001      	beq.n	2400de18 <tOversampler_initToPool+0x38>
2400de14:	2b00      	cmp	r3, #0
2400de16:	d037      	beq.n	2400de88 <tOversampler_initToPool+0xa8>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
2400de18:	4631      	mov	r1, r6
2400de1a:	2028      	movs	r0, #40	; 0x28
2400de1c:	f002 fcc1 	bl	240107a2 <mpool_alloc>
2400de20:	4604      	mov	r4, r0
2400de22:	f8c8 0000 	str.w	r0, [r8]
        os->mempool = m;
2400de26:	6006      	str	r6, [r0, #0]
        
        os->offset = offset;
2400de28:	f8c0 9010 	str.w	r9, [r0, #16]
        os->maxRatio = maxRatio;
2400de2c:	6045      	str	r5, [r0, #4]
        os->allowHighQuality = extraQuality;
2400de2e:	6087      	str	r7, [r0, #8]
        os->ratio = os->maxRatio;
2400de30:	60c5      	str	r5, [r0, #12]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
2400de32:	ee07 5a90 	vmov	s15, r5
2400de36:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2400de3a:	f005 ffd3 	bl	24013de4 <log2f>
2400de3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2400de42:	ee17 3a90 	vmov	r3, s15
2400de46:	3b01      	subs	r3, #1
2400de48:	6922      	ldr	r2, [r4, #16]
2400de4a:	4413      	add	r3, r2
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
2400de4c:	4a11      	ldr	r2, [pc, #68]	; (2400de94 <tOversampler_initToPool+0xb4>)
2400de4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400de52:	edd2 7a00 	vldr	s15, [r2]
2400de56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2400de5a:	ee17 0a90 	vmov	r0, s15
2400de5e:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
2400de62:	68e2      	ldr	r2, [r4, #12]
2400de64:	fb90 f2f2 	sdiv	r2, r0, r2
2400de68:	6262      	str	r2, [r4, #36]	; 0x24
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
2400de6a:	4a0b      	ldr	r2, [pc, #44]	; (2400de98 <tOversampler_initToPool+0xb8>)
2400de6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400de70:	6163      	str	r3, [r4, #20]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
2400de72:	4631      	mov	r1, r6
2400de74:	00c0      	lsls	r0, r0, #3
2400de76:	f002 fc94 	bl	240107a2 <mpool_alloc>
2400de7a:	61a0      	str	r0, [r4, #24]
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
2400de7c:	6a20      	ldr	r0, [r4, #32]
2400de7e:	4631      	mov	r1, r6
2400de80:	00c0      	lsls	r0, r0, #3
2400de82:	f002 fc8e 	bl	240107a2 <mpool_alloc>
2400de86:	61e0      	str	r0, [r4, #28]
    }
}
2400de88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (extraQuality) offset = 6;
2400de8c:	f04f 0906 	mov.w	r9, #6
2400de90:	e7af      	b.n	2400ddf2 <tOversampler_initToPool+0x12>
2400de92:	bf00      	nop
2400de94:	2401fac4 	.word	0x2401fac4
2400de98:	20000764 	.word	0x20000764

2400de9c <tOversampler_init>:
{
2400de9c:	b508      	push	{r3, lr}
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf->mempool);
2400de9e:	3318      	adds	r3, #24
2400dea0:	f7ff ff9e 	bl	2400dde0 <tOversampler_initToPool>
}
2400dea4:	bd08      	pop	{r3, pc}
	...

2400dea8 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
2400dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400deaa:	4606      	mov	r6, r0
2400deac:	460d      	mov	r5, r1
    _tMempool* m = *mp;
2400deae:	680f      	ldr	r7, [r1, #0]
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
2400deb0:	4639      	mov	r1, r7
2400deb2:	2020      	movs	r0, #32
2400deb4:	f002 fc75 	bl	240107a2 <mpool_alloc>
2400deb8:	4604      	mov	r4, r0
2400deba:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2400debc:	6007      	str	r7, [r0, #0]
    
    c->op = 4;
2400debe:	2304      	movs	r3, #4
2400dec0:	6143      	str	r3, [r0, #20]
    c->div = 1.0f / SCALAR;
2400dec2:	4b0d      	ldr	r3, [pc, #52]	; (2400def8 <tCrusher_initToPool+0x50>)
2400dec4:	60c3      	str	r3, [r0, #12]
    c->rnd = 0.25f;
2400dec6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
2400deca:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
2400decc:	6043      	str	r3, [r0, #4]
    tSampleReducer_initToPool(&c->sReducer, mp);
2400dece:	4629      	mov	r1, r5
2400ded0:	301c      	adds	r0, #28
2400ded2:	f7ff ff48 	bl	2400dd66 <tSampleReducer_initToPool>
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2400ded6:	edd4 6a03 	vldr	s13, [r4, #12]
2400deda:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2400defc <tCrusher_initToPool+0x54>
2400dede:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400dee2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 2400df00 <tCrusher_initToPool+0x58>
2400dee6:	ee67 7a87 	vmul.f32	s15, s15, s14
2400deea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400df04 <tCrusher_initToPool+0x5c>
2400deee:	ee77 7a87 	vadd.f32	s15, s15, s14
2400def2:	edc4 7a06 	vstr	s15, [r4, #24]
}
2400def6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400def8:	3951b717 	.word	0x3951b717
2400defc:	459c4000 	.word	0x459c4000
2400df00:	3f333333 	.word	0x3f333333
2400df04:	3e99999a 	.word	0x3e99999a

2400df08 <tCrusher_init>:
{
2400df08:	b508      	push	{r3, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
2400df0a:	3118      	adds	r1, #24
2400df0c:	f7ff ffcc 	bl	2400dea8 <tCrusher_initToPool>
}
2400df10:	bd08      	pop	{r3, pc}
	...

2400df14 <tCrusher_tick>:
    tSampleReducer_free(&c->sReducer);
    mpool_free((char*)c, c->mempool);
}

Lfloat tCrusher_tick (tCrusher* const cr, Lfloat input)
{
2400df14:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
2400df16:	6804      	ldr	r4, [r0, #0]
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
2400df18:	eddf 7a12 	vldr	s15, [pc, #72]	; 2400df64 <tCrusher_tick+0x50>
2400df1c:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    sample = (int32_t) sample;
2400df20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2400df24:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample *= c->div;
2400df28:	edd4 7a03 	vldr	s15, [r4, #12]
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2400df2c:	6960      	ldr	r0, [r4, #20]
2400df2e:	05c0      	lsls	r0, r0, #23
2400df30:	ee27 0a80 	vmul.f32	s0, s15, s0
2400df34:	f002 f97e 	bl	24010234 <LEAF_bitwise_xor>
2400df38:	eef0 0a40 	vmov.f32	s1, s0
    
    sample = LEAF_clip(-1.f, sample, 1.f);
2400df3c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400df40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2400df44:	f020 ffd4 	bl	2402eef0 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
2400df48:	edd4 0a04 	vldr	s1, [r4, #16]
2400df4c:	f002 f95c 	bl	24010208 <LEAF_round>
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
2400df50:	f104 001c 	add.w	r0, r4, #28
2400df54:	f7ff ff18 	bl	2400dd88 <tSampleReducer_tick>
    
    return sample * c->gain;
2400df58:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
2400df5c:	ee27 0a80 	vmul.f32	s0, s15, s0
2400df60:	bd10      	pop	{r4, pc}
2400df62:	bf00      	nop
2400df64:	459c4000 	.word	0x459c4000

2400df68 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
2400df68:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
2400df6a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2400df6e:	ee20 0a27 	vmul.f32	s0, s0, s15
2400df72:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2400df76:	ed83 0a05 	vstr	s0, [r3, #20]
}
2400df7a:	4770      	bx	lr

2400df7c <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
2400df7c:	b510      	push	{r4, lr}
2400df7e:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
2400df82:	6804      	ldr	r4, [r0, #0]
    
    val = LEAF_clip(0.0f, val, 1.0f);
2400df84:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400df88:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 2400dfc4 <tCrusher_setQuality+0x48>
2400df8c:	f020 ffb0 	bl	2402eef0 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
2400df90:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2400dfc8 <tCrusher_setQuality+0x4c>
2400df94:	ee20 0a27 	vmul.f32	s0, s0, s15
2400df98:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2400dfcc <tCrusher_setQuality+0x50>
2400df9c:	ee30 0a27 	vadd.f32	s0, s0, s15
2400dfa0:	ed84 0a03 	vstr	s0, [r4, #12]
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2400dfa4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 2400dfd0 <tCrusher_setQuality+0x54>
2400dfa8:	ee20 0a27 	vmul.f32	s0, s0, s15
2400dfac:	eddf 7a09 	vldr	s15, [pc, #36]	; 2400dfd4 <tCrusher_setQuality+0x58>
2400dfb0:	ee20 0a27 	vmul.f32	s0, s0, s15
2400dfb4:	eddf 7a08 	vldr	s15, [pc, #32]	; 2400dfd8 <tCrusher_setQuality+0x5c>
2400dfb8:	ee30 0a27 	vadd.f32	s0, s0, s15
2400dfbc:	ed84 0a06 	vstr	s0, [r4, #24]
}
2400dfc0:	bd10      	pop	{r4, pc}
2400dfc2:	bf00      	nop
2400dfc4:	00000000 	.word	0x00000000
2400dfc8:	459c4000 	.word	0x459c4000
2400dfcc:	3c23d70a 	.word	0x3c23d70a
2400dfd0:	3951b717 	.word	0x3951b717
2400dfd4:	3f333333 	.word	0x3f333333
2400dfd8:	3e99999a 	.word	0x3e99999a

2400dfdc <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
2400dfdc:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
2400dfde:	ed83 0a04 	vstr	s0, [r3, #16]
}
2400dfe2:	4770      	bx	lr

2400dfe4 <tCrusher_setSamplingRatio>:

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
2400dfe4:	b508      	push	{r3, lr}
    _tCrusher* c = *cr;
2400dfe6:	6800      	ldr	r0, [r0, #0]
    c->srr = ratio;
2400dfe8:	ed80 0a01 	vstr	s0, [r0, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
2400dfec:	301c      	adds	r0, #28
2400dfee:	f7ff fee1 	bl	2400ddb4 <tSampleReducer_setRatio>
}
2400dff2:	bd08      	pop	{r3, pc}

2400dff4 <tCompressor_initToPool>:
{
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
2400dff4:	b570      	push	{r4, r5, r6, lr}
2400dff6:	ed2d 8b02 	vpush	{d8}
2400dffa:	4606      	mov	r6, r0
    _tMempool* m = *mp;
2400dffc:	680d      	ldr	r5, [r1, #0]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
2400dffe:	4629      	mov	r1, r5
2400e000:	206c      	movs	r0, #108	; 0x6c
2400e002:	f002 fbce 	bl	240107a2 <mpool_alloc>
2400e006:	4604      	mov	r4, r0
2400e008:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2400e00a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2400e00c:	686b      	ldr	r3, [r5, #4]
    c->sampleRate = leaf->sampleRate;
2400e00e:	ed93 0a00 	vldr	s0, [r3]
2400e012:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2400e016:	eddf 7a1a 	vldr	s15, [pc, #104]	; 2400e080 <tCompressor_initToPool+0x8c>
2400e01a:	ee20 0a27 	vmul.f32	s0, s0, s15
2400e01e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
2400e022:	ee88 0a00 	vdiv.f32	s0, s16, s0
2400e026:	f005 fdfb 	bl	24013c20 <expf>
2400e02a:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
2400e02e:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
2400e032:	eddf 7a14 	vldr	s15, [pc, #80]	; 2400e084 <tCompressor_initToPool+0x90>
2400e036:	ee20 0a27 	vmul.f32	s0, s0, s15
2400e03a:	ee88 0a00 	vdiv.f32	s0, s16, s0
2400e03e:	f005 fdef 	bl	24013c20 <expf>
2400e042:	ed84 0a02 	vstr	s0, [r4, #8]
    
    c->isActive = 0;
2400e046:	2300      	movs	r3, #0
2400e048:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
2400e04a:	2300      	movs	r3, #0
2400e04c:	6263      	str	r3, [r4, #36]	; 0x24
2400e04e:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
2400e050:	62e3      	str	r3, [r4, #44]	; 0x2c
2400e052:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
2400e054:	6363      	str	r3, [r4, #52]	; 0x34
2400e056:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
2400e058:	63e3      	str	r3, [r4, #60]	; 0x3c
2400e05a:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
2400e05c:	60e3      	str	r3, [r4, #12]
    c->R = 0.5f; // compression Ratio
2400e05e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
2400e062:	6123      	str	r3, [r4, #16]
    c->invR = 2.0f; //inverse of ratio
2400e064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2400e068:	61e3      	str	r3, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
2400e06a:	4b07      	ldr	r3, [pc, #28]	; (2400e088 <tCompressor_initToPool+0x94>)
2400e06c:	61a3      	str	r3, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
2400e06e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
2400e072:	6163      	str	r3, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
2400e074:	4b05      	ldr	r3, [pc, #20]	; (2400e08c <tCompressor_initToPool+0x98>)
2400e076:	6223      	str	r3, [r4, #32]
    

}
2400e078:	ecbd 8b02 	vpop	{d8}
2400e07c:	bd70      	pop	{r4, r5, r6, pc}
2400e07e:	bf00      	nop
2400e080:	3d4ccccd 	.word	0x3d4ccccd
2400e084:	3dcccccd 	.word	0x3dcccccd
2400e088:	40400000 	.word	0x40400000
2400e08c:	3e2aaaab 	.word	0x3e2aaaab

2400e090 <tCompressor_init>:
{
2400e090:	b508      	push	{r3, lr}
    tCompressor_initToPool(comp, &leaf->mempool);
2400e092:	3118      	adds	r1, #24
2400e094:	f7ff ffae 	bl	2400dff4 <tCompressor_initToPool>
}
2400e098:	bd08      	pop	{r3, pc}
	...

2400e09c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
2400e09c:	b510      	push	{r4, lr}
2400e09e:	ed2d 8b02 	vpush	{d8}
2400e0a2:	eeb0 8a40 	vmov.f32	s16, s0
    _tCompressor* c = *comp;
2400e0a6:	6804      	ldr	r4, [r0, #0]
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
2400e0a8:	f002 f872 	bl	24010190 <fastabsf>
2400e0ac:	f002 fada 	bl	24010664 <fasteratodb>
2400e0b0:	eef0 0a40 	vmov.f32	s1, s0
2400e0b4:	ed9f 1a39 	vldr	s2, [pc, #228]	; 2400e19c <tCompressor_tick+0x100>
2400e0b8:	ed9f 0a39 	vldr	s0, [pc, #228]	; 2400e1a0 <tCompressor_tick+0x104>
2400e0bc:	f020 ff18 	bl	2402eef0 <__LEAF_clip_veneer>
    Lfloat out_db = 0.0f;
    
    c->y_T[1] = c->y_T[0];
2400e0c0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
2400e0c4:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    
    slope = 1.0f - c->invR; // feed-forward topology;
2400e0c8:	edd4 7a07 	vldr	s15, [r4, #28]
2400e0cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400e0d0:	ee37 7a67 	vsub.f32	s14, s14, s15
    
    overshoot = in_db - c->T;
2400e0d4:	edd4 7a03 	vldr	s15, [r4, #12]
2400e0d8:	ee70 7a67 	vsub.f32	s15, s0, s15
    

    if (overshoot <= -(c->W))
2400e0dc:	ed94 6a05 	vldr	s12, [r4, #20]
2400e0e0:	eef1 5a46 	vneg.f32	s11, s12
2400e0e4:	eef4 5ae7 	vcmpe.f32	s11, s15
2400e0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e0ec:	db27      	blt.n	2400e13e <tCompressor_tick+0xa2>
    {
        out_db = in_db;
        c->isActive = 0;
2400e0ee:	2300      	movs	r3, #0
2400e0f0:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db;
2400e0f2:	eef0 7a40 	vmov.f32	s15, s0
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
2400e0f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
2400e0fa:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
2400e0fe:	eef4 6ae7 	vcmpe.f32	s13, s15
2400e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e106:	d53a      	bpl.n	2400e17e <tCompressor_tick+0xe2>
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2400e108:	ed94 7a01 	vldr	s14, [r4, #4]
2400e10c:	ee66 6a87 	vmul.f32	s13, s13, s14
2400e110:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400e114:	ee30 0a47 	vsub.f32	s0, s0, s14
2400e118:	ee67 7a80 	vmul.f32	s15, s15, s0
2400e11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400e120:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
2400e124:	ed94 0a06 	vldr	s0, [r4, #24]
2400e128:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
2400e12c:	ee30 0a67 	vsub.f32	s0, s0, s15
2400e130:	f002 fade 	bl	240106f0 <fasterdbtoa>
    return attenuation * in;
}
2400e134:	ee28 0a00 	vmul.f32	s0, s16, s0
2400e138:	ecbd 8b02 	vpop	{d8}
2400e13c:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2400e13e:	eef4 5ae7 	vcmpe.f32	s11, s15
2400e142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e146:	d513      	bpl.n	2400e170 <tCompressor_tick+0xd4>
2400e148:	eeb4 6ae7 	vcmpe.f32	s12, s15
2400e14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e150:	dd0e      	ble.n	2400e170 <tCompressor_tick+0xd4>
        Lfloat squareit = (overshoot + c->W);
2400e152:	ee76 7a27 	vadd.f32	s15, s12, s15
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2400e156:	ee67 7aa7 	vmul.f32	s15, s15, s15
2400e15a:	ed94 6a08 	vldr	s12, [r4, #32]
2400e15e:	ee67 7a86 	vmul.f32	s15, s15, s12
2400e162:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e166:	ee77 7a80 	vadd.f32	s15, s15, s0
        c->isActive = 1;
2400e16a:	2301      	movs	r3, #1
2400e16c:	6463      	str	r3, [r4, #68]	; 0x44
    {
2400e16e:	e7c2      	b.n	2400e0f6 <tCompressor_tick+0x5a>
        out_db = in_db + slope * overshoot;
2400e170:	ee27 7a27 	vmul.f32	s14, s14, s15
2400e174:	ee77 7a00 	vadd.f32	s15, s14, s0
        c->isActive = 1;
2400e178:	2301      	movs	r3, #1
2400e17a:	6463      	str	r3, [r4, #68]	; 0x44
2400e17c:	e7bb      	b.n	2400e0f6 <tCompressor_tick+0x5a>
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
2400e17e:	ed94 7a02 	vldr	s14, [r4, #8]
2400e182:	ee66 6a87 	vmul.f32	s13, s13, s14
2400e186:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400e18a:	ee30 0a47 	vsub.f32	s0, s0, s14
2400e18e:	ee67 7a80 	vmul.f32	s15, s15, s0
2400e192:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400e196:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
2400e19a:	e7c3      	b.n	2400e124 <tCompressor_tick+0x88>
2400e19c:	00000000 	.word	0x00000000
2400e1a0:	c2b40000 	.word	0xc2b40000

2400e1a4 <tCompressor_setTables>:
    return attenuation * in;
}

Lfloat tCompressor_setTables(tCompressor* const comp, Lfloat* atodb, Lfloat* dbtoa, Lfloat atodbMinIn, Lfloat atodbMaxIn, Lfloat dbtoaMinIn, Lfloat dbtoaMaxIn, int atodbTableSize, int dbtoaTableSize)
{
    _tCompressor* c = *comp;
2400e1a4:	6800      	ldr	r0, [r0, #0]
	c->atodbTable = atodb;
2400e1a6:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTable = dbtoa;
2400e1a8:	6502      	str	r2, [r0, #80]	; 0x50

	c->atodbTableSizeMinus1 = atodbTableSize-1;
2400e1aa:	3b01      	subs	r3, #1
2400e1ac:	6643      	str	r3, [r0, #100]	; 0x64
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
2400e1ae:	9a00      	ldr	r2, [sp, #0]
2400e1b0:	3a01      	subs	r2, #1
2400e1b2:	6682      	str	r2, [r0, #104]	; 0x68

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2400e1b4:	ee70 0ac0 	vsub.f32	s1, s1, s0
2400e1b8:	ee07 3a90 	vmov	s15, r3
2400e1bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400e1c0:	ee87 7aa0 	vdiv.f32	s14, s15, s1
2400e1c4:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
2400e1c8:	ee27 7a00 	vmul.f32	s14, s14, s0
2400e1cc:	ed80 7a17 	vstr	s14, [r0, #92]	; 0x5c


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
2400e1d0:	ee71 1ac1 	vsub.f32	s3, s3, s2
2400e1d4:	ee07 2a90 	vmov	s15, r2
2400e1d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400e1dc:	ee87 7aa1 	vdiv.f32	s14, s15, s3
2400e1e0:	ed80 7a16 	vstr	s14, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
2400e1e4:	ee27 7a01 	vmul.f32	s14, s14, s2
2400e1e8:	ed80 7a18 	vstr	s14, [r0, #96]	; 0x60

}
2400e1ec:	4770      	bx	lr

2400e1ee <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
2400e1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400e1f2:	ed2d 8b02 	vpush	{d8}
2400e1f6:	4681      	mov	r9, r0
2400e1f8:	ee10 8a10 	vmov	r8, s0
2400e1fc:	eeb0 8a60 	vmov.f32	s16, s1
2400e200:	ee11 6a10 	vmov	r6, s2
2400e204:	460f      	mov	r7, r1
2400e206:	4615      	mov	r5, r2
    _tMempool* m = *mp;
2400e208:	f8d2 a000 	ldr.w	sl, [r2]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2400e20c:	4651      	mov	r1, sl
2400e20e:	2018      	movs	r0, #24
2400e210:	f002 fac7 	bl	240107a2 <mpool_alloc>
2400e214:	4604      	mov	r4, r0
2400e216:	f8c9 0000 	str.w	r0, [r9]
    p->mempool = m;
2400e21a:	f8c0 a000 	str.w	sl, [r0]
    
    p->curr=0.0f;
2400e21e:	2300      	movs	r3, #0
2400e220:	6103      	str	r3, [r0, #16]
    p->targetLevel=targetLevel;
2400e222:	f8c0 8004 	str.w	r8, [r0, #4]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2400e226:	4629      	mov	r1, r5
2400e228:	eeb0 0a48 	vmov.f32	s0, s16
2400e22c:	3014      	adds	r0, #20
2400e22e:	f7ff fb4d 	bl	2400d8cc <tPowerFollower_initToPool>
    p->mode=mode;
2400e232:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
2400e234:	60a6      	str	r6, [r4, #8]
}
2400e236:	ecbd 8b02 	vpop	{d8}
2400e23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

2400e23e <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
2400e23e:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
2400e240:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
2400e242:	f104 0014 	add.w	r0, r4, #20
2400e246:	f7ff fb5b 	bl	2400d900 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
2400e24a:	6821      	ldr	r1, [r4, #0]
2400e24c:	4620      	mov	r0, r4
2400e24e:	f002 fb94 	bl	2401097a <mpool_free>
}
2400e252:	bd10      	pop	{r4, pc}

2400e254 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
2400e254:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
2400e256:	ed83 0a02 	vstr	s0, [r3, #8]
}
2400e25a:	4770      	bx	lr

2400e25c <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
2400e25c:	b508      	push	{r3, lr}
    _tFeedbackLeveler* p = *fb;
2400e25e:	6800      	ldr	r0, [r0, #0]
    tPowerFollower_setFactor(&p->pwrFlw,factor);
2400e260:	3014      	adds	r0, #20
2400e262:	f7ff fb53 	bl	2400d90c <tPowerFollower_setFactor>
}
2400e266:	bd08      	pop	{r3, pc}

2400e268 <tFeedbackLeveler_setMode>:

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
2400e268:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
2400e26a:	60d9      	str	r1, [r3, #12]
}
2400e26c:	4770      	bx	lr
	...

2400e270 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
2400e270:	b510      	push	{r4, lr}
2400e272:	ed2d 8b02 	vpush	{d8}
2400e276:	eeb0 8a40 	vmov.f32	s16, s0
    _tFeedbackLeveler* p = *fb;
2400e27a:	6804      	ldr	r4, [r0, #0]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2400e27c:	f104 0014 	add.w	r0, r4, #20
2400e280:	f7ff fb62 	bl	2400d948 <tPowerFollower_tick>
2400e284:	edd4 7a01 	vldr	s15, [r4, #4]
2400e288:	ee70 7a67 	vsub.f32	s15, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2400e28c:	68e3      	ldr	r3, [r4, #12]
2400e28e:	b923      	cbnz	r3, 2400e29a <tFeedbackLeveler_tick+0x2a>
2400e290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400e294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e298:	d40e      	bmi.n	2400e2b8 <tFeedbackLeveler_tick+0x48>
    p->curr=input*(1.0f-p->strength*levdiff);
2400e29a:	ed94 0a02 	vldr	s0, [r4, #8]
2400e29e:	ee60 7a27 	vmul.f32	s15, s0, s15
2400e2a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400e2a6:	ee30 0a67 	vsub.f32	s0, s0, s15
2400e2aa:	ee20 0a08 	vmul.f32	s0, s0, s16
2400e2ae:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
2400e2b2:	ecbd 8b02 	vpop	{d8}
2400e2b6:	bd10      	pop	{r4, pc}
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2400e2b8:	eddf 7a01 	vldr	s15, [pc, #4]	; 2400e2c0 <tFeedbackLeveler_tick+0x50>
2400e2bc:	e7ed      	b.n	2400e29a <tFeedbackLeveler_tick+0x2a>
2400e2be:	bf00      	nop
2400e2c0:	00000000 	.word	0x00000000

2400e2c4 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
2400e2c4:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
2400e2c6:	ed83 0a01 	vstr	s0, [r3, #4]
}
2400e2ca:	4770      	bx	lr

2400e2cc <tADSRT_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
2400e2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400e2ce:	ed2d 8b04 	vpush	{d8-d9}
2400e2d2:	4607      	mov	r7, r0
2400e2d4:	eef0 9a40 	vmov.f32	s19, s0
2400e2d8:	eeb0 9a60 	vmov.f32	s18, s1
2400e2dc:	eeb0 8a41 	vmov.f32	s16, s2
2400e2e0:	eef0 8a61 	vmov.f32	s17, s3
2400e2e4:	460d      	mov	r5, r1
2400e2e6:	4614      	mov	r4, r2
    _tMempool* m = *mp;
2400e2e8:	681e      	ldr	r6, [r3, #0]
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2400e2ea:	4631      	mov	r1, r6
2400e2ec:	2068      	movs	r0, #104	; 0x68
2400e2ee:	f002 fa58 	bl	240107a2 <mpool_alloc>
2400e2f2:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
2400e2f4:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = adsr->mempool->leaf;
2400e2f6:	6873      	ldr	r3, [r6, #4]

    adsr->exp_buff = expBuffer;
2400e2f8:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
2400e2fa:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
2400e2fc:	1e62      	subs	r2, r4, #1
2400e2fe:	60c2      	str	r2, [r0, #12]

    adsr->sampleRate = leaf->sampleRate;
2400e300:	edd3 7a00 	vldr	s15, [r3]
2400e304:	edc0 7a04 	vstr	s15, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2400e308:	eddf 6a2d 	vldr	s13, [pc, #180]	; 2400e3c0 <tADSRT_initToPool+0xf4>
2400e30c:	ee67 6aa6 	vmul.f32	s13, s15, s13
2400e310:	ee07 4a90 	vmov	s15, r4
2400e314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2400e318:	eec7 7a26 	vdiv.f32	s15, s14, s13
2400e31c:	edc0 7a05 	vstr	s15, [r0, #20]

    if (attack < 0.0f)
2400e320:	eef5 9ac0 	vcmpe.f32	s19, #0.0
2400e324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e328:	d43e      	bmi.n	2400e3a8 <tADSRT_initToPool+0xdc>
        attack = 0.0f;

    if (decay < 0.0f)
2400e32a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
2400e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e332:	d43c      	bmi.n	2400e3ae <tADSRT_initToPool+0xe2>
        decay = 0.0f;

    if (sustain > 1.0f)
2400e334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400e338:	eeb4 8ac7 	vcmpe.f32	s16, s14
2400e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e340:	dd01      	ble.n	2400e346 <tADSRT_initToPool+0x7a>
        sustain = 1.0f;
2400e342:	eeb0 8a47 	vmov.f32	s16, s14
    if (sustain < 0.0f)
2400e346:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400e34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e34e:	d431      	bmi.n	2400e3b4 <tADSRT_initToPool+0xe8>
        sustain = 0.0f;

    if (release < 0.0f)
2400e350:	eef5 8ac0 	vcmpe.f32	s17, #0.0
2400e354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e358:	d42f      	bmi.n	2400e3ba <tADSRT_initToPool+0xee>
        release = 0.0f;

    adsr->next = 0.0f;
2400e35a:	2200      	movs	r2, #0
2400e35c:	6182      	str	r2, [r0, #24]

    adsr->whichStage = env_idle;
2400e35e:	2200      	movs	r2, #0
2400e360:	6382      	str	r2, [r0, #56]	; 0x38

    adsr->sustain = sustain;
2400e362:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c

    adsr->attack = attack;
2400e366:	edc0 9a07 	vstr	s19, [r0, #28]
    adsr->decay = decay;
2400e36a:	ed80 9a08 	vstr	s18, [r0, #32]
    adsr->release = release;
2400e36e:	edc0 8a09 	vstr	s17, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2400e372:	ee87 7aa9 	vdiv.f32	s14, s15, s19
2400e376:	ed80 7a0a 	vstr	s14, [r0, #40]	; 0x28
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2400e37a:	ee87 7a89 	vdiv.f32	s14, s15, s18
2400e37e:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2400e382:	ee87 7aa8 	vdiv.f32	s14, s15, s17
2400e386:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2400e38a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
2400e38e:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e392:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34

    adsr->baseLeakFactor = 1.0f;
2400e396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
2400e39a:	65c2      	str	r2, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
2400e39c:	6602      	str	r2, [r0, #96]	; 0x60
    adsr->invSampleRate = leaf->invSampleRate;
2400e39e:	685b      	ldr	r3, [r3, #4]
2400e3a0:	6643      	str	r3, [r0, #100]	; 0x64
}
2400e3a2:	ecbd 8b04 	vpop	{d8-d9}
2400e3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        attack = 0.0f;
2400e3a8:	eddf 9a06 	vldr	s19, [pc, #24]	; 2400e3c4 <tADSRT_initToPool+0xf8>
2400e3ac:	e7bd      	b.n	2400e32a <tADSRT_initToPool+0x5e>
        decay = 0.0f;
2400e3ae:	ed9f 9a05 	vldr	s18, [pc, #20]	; 2400e3c4 <tADSRT_initToPool+0xf8>
2400e3b2:	e7bf      	b.n	2400e334 <tADSRT_initToPool+0x68>
        sustain = 0.0f;
2400e3b4:	ed9f 8a03 	vldr	s16, [pc, #12]	; 2400e3c4 <tADSRT_initToPool+0xf8>
2400e3b8:	e7ca      	b.n	2400e350 <tADSRT_initToPool+0x84>
        release = 0.0f;
2400e3ba:	eddf 8a02 	vldr	s17, [pc, #8]	; 2400e3c4 <tADSRT_initToPool+0xf8>
2400e3be:	e7cc      	b.n	2400e35a <tADSRT_initToPool+0x8e>
2400e3c0:	3a83126f 	.word	0x3a83126f
2400e3c4:	00000000 	.word	0x00000000

2400e3c8 <tADSRT_init>:
{
2400e3c8:	b508      	push	{r3, lr}
    tADSRT_initToPool    (adsrenv, attack, decay, sustain, release, expBuffer, bufferSize, &leaf->mempool);
2400e3ca:	3318      	adds	r3, #24
2400e3cc:	f7ff ff7e 	bl	2400e2cc <tADSRT_initToPool>
}
2400e3d0:	bd08      	pop	{r3, pc}
	...

2400e3d4 <tADSRT_setAttack>:
    mpool_free((char*)adsr, adsr->mempool);
}

void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
{
    _tADSRT* adsr = *adsrenv;
2400e3d4:	6803      	ldr	r3, [r0, #0]

    if (attack < 0.0f)
2400e3d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400e3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e3de:	d408      	bmi.n	2400e3f2 <tADSRT_setAttack+0x1e>
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
2400e3e0:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2400e3e4:	ed93 7a05 	vldr	s14, [r3, #20]
2400e3e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400e3ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2400e3f0:	4770      	bx	lr
        attack = 0.01f;
2400e3f2:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2400e3f8 <tADSRT_setAttack+0x24>
2400e3f6:	e7f3      	b.n	2400e3e0 <tADSRT_setAttack+0xc>
2400e3f8:	3c23d70a 	.word	0x3c23d70a

2400e3fc <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
{
    _tADSRT* adsr = *adsrenv;
2400e3fc:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
2400e3fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400e402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e406:	d408      	bmi.n	2400e41a <tADSRT_setDecay+0x1e>
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
2400e408:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2400e40c:	ed93 7a05 	vldr	s14, [r3, #20]
2400e410:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400e414:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
2400e418:	4770      	bx	lr
        decay = 0.01f;
2400e41a:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2400e420 <tADSRT_setDecay+0x24>
2400e41e:	e7f3      	b.n	2400e408 <tADSRT_setDecay+0xc>
2400e420:	3c23d70a 	.word	0x3c23d70a

2400e424 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
{
    _tADSRT* adsr = *adsrenv;
2400e424:	6803      	ldr	r3, [r0, #0]

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
2400e426:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400e42a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400e42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e432:	dd02      	ble.n	2400e43a <tADSRT_setSustain+0x16>
2400e434:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
2400e438:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
2400e43a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400e43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e442:	d402      	bmi.n	2400e44a <tADSRT_setSustain+0x26>
    else                     adsr->sustain = sustain;
2400e444:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
}
2400e448:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
2400e44a:	2200      	movs	r2, #0
2400e44c:	63da      	str	r2, [r3, #60]	; 0x3c
2400e44e:	4770      	bx	lr

2400e450 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
{
    _tADSRT* adsr = *adsrenv;
2400e450:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
2400e452:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400e456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e45a:	d408      	bmi.n	2400e46e <tADSRT_setRelease+0x1e>
    {
        release = 0.01f;
    }
    adsr->release = release;
2400e45c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2400e460:	ed93 7a05 	vldr	s14, [r3, #20]
2400e464:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400e468:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
2400e46c:	4770      	bx	lr
        release = 0.01f;
2400e46e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2400e474 <tADSRT_setRelease+0x24>
2400e472:	e7f3      	b.n	2400e45c <tADSRT_setRelease+0xc>
2400e474:	3c23d70a 	.word	0x3c23d70a

2400e478 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
{
2400e478:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
2400e47a:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
2400e47c:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
2400e480:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
2400e484:	eddf 7a04 	vldr	s15, [pc, #16]	; 2400e498 <tADSRT_setLeakFactor+0x20>
2400e488:	ee60 0aa7 	vmul.f32	s1, s1, s15
2400e48c:	f005 fd68 	bl	24013f60 <powf>
2400e490:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
2400e494:	bd10      	pop	{r4, pc}
2400e496:	bf00      	nop
2400e498:	472c4400 	.word	0x472c4400

2400e49c <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
{
    _tADSRT* adsr = *adsrenv;
2400e49c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
2400e49e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400e4a0:	b162      	cbz	r2, 2400e4bc <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
2400e4a2:	2200      	movs	r2, #0
2400e4a4:	659a      	str	r2, [r3, #88]	; 0x58
        adsr->whichStage = env_ramp;
2400e4a6:	2205      	movs	r2, #5
2400e4a8:	639a      	str	r2, [r3, #56]	; 0x38
        adsr->rampPeak = adsr->next;
2400e4aa:	699a      	ldr	r2, [r3, #24]
2400e4ac:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
2400e4ae:	2200      	movs	r2, #0
2400e4b0:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
2400e4b2:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
2400e4b4:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->gain = velocity;
2400e4b6:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
2400e4ba:	4770      	bx	lr
        adsr->whichStage = env_attack;
2400e4bc:	2201      	movs	r2, #1
2400e4be:	639a      	str	r2, [r3, #56]	; 0x38
2400e4c0:	e7f5      	b.n	2400e4ae <tADSRT_on+0x12>

2400e4c2 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
2400e4c2:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
2400e4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400e4c6:	b11a      	cbz	r2, 2400e4d0 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
2400e4c8:	2204      	movs	r2, #4
2400e4ca:	639a      	str	r2, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
2400e4cc:	699a      	ldr	r2, [r3, #24]
2400e4ce:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
2400e4d0:	4770      	bx	lr
	...

2400e4d4 <tADSRT_tick>:

Lfloat   tADSRT_tick(tADSRT* const adsrenv)
{
2400e4d4:	b510      	push	{r4, lr}
2400e4d6:	ed2d 8b02 	vpush	{d8}
    _tADSRT* adsr = *adsrenv;
2400e4da:	6804      	ldr	r4, [r0, #0]

    switch (adsr->whichStage)
2400e4dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400e4de:	3b01      	subs	r3, #1
2400e4e0:	2b04      	cmp	r3, #4
2400e4e2:	d81b      	bhi.n	2400e51c <tADSRT_tick+0x48>
2400e4e4:	e8df f003 	tbb	[pc, r3]
2400e4e8:	f1e8914a 	.word	0xf1e8914a
2400e4ec:	03          	.byte	0x03
2400e4ed:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2400e4ee:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
2400e4f2:	ed94 7a03 	vldr	s14, [r4, #12]
2400e4f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e4fa:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e502:	dd10      	ble.n	2400e526 <tADSRT_tick+0x52>
            {
                adsr->whichStage = env_attack;
2400e504:	2301      	movs	r3, #1
2400e506:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
2400e508:	2300      	movs	r3, #0
2400e50a:	61a3      	str	r3, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
2400e50c:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
2400e510:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
2400e514:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e518:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
2400e51c:	ed94 0a06 	vldr	s0, [r4, #24]
2400e520:	ecbd 8b02 	vpop	{d8}
2400e524:	bd10      	pop	{r4, pc}
                uint32_t intPart = (uint32_t)adsr->rampPhase;
2400e526:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->rampPhase - intPart;
2400e52a:	eeb8 1a66 	vcvt.f32.u32	s2, s13
2400e52e:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2400e532:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400e536:	ee77 7a86 	vadd.f32	s15, s15, s12
2400e53a:	eeb4 7ae7 	vcmpe.f32	s14, s15
2400e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e542:	d418      	bmi.n	2400e576 <tADSRT_tick+0xa2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2400e544:	6863      	ldr	r3, [r4, #4]
2400e546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400e54a:	ee17 2a90 	vmov	r2, s15
2400e54e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e552:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
2400e556:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
2400e55a:	6863      	ldr	r3, [r4, #4]
2400e55c:	ee16 2a90 	vmov	r2, s13
2400e560:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e564:	ed93 0a00 	vldr	s0, [r3]
2400e568:	f001 ff9c 	bl	240104a4 <LEAF_interpolation_linear>
2400e56c:	ee28 8a00 	vmul.f32	s16, s16, s0
2400e570:	ed84 8a06 	vstr	s16, [r4, #24]
2400e574:	e7ca      	b.n	2400e50c <tADSRT_tick+0x38>
                    secondValue = 0.0f;
2400e576:	eddf 0a76 	vldr	s1, [pc, #472]	; 2400e750 <tADSRT_tick+0x27c>
2400e57a:	e7ec      	b.n	2400e556 <tADSRT_tick+0x82>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
2400e57c:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
2400e580:	ed94 7a03 	vldr	s14, [r4, #12]
2400e584:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e588:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e590:	dd0c      	ble.n	2400e5ac <tADSRT_tick+0xd8>
                adsr->whichStage = env_decay;
2400e592:	2302      	movs	r3, #2
2400e594:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
2400e596:	6c23      	ldr	r3, [r4, #64]	; 0x40
2400e598:	61a3      	str	r3, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
2400e59a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
2400e59e:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
2400e5a2:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e5a6:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
            break;
2400e5aa:	e7b7      	b.n	2400e51c <tADSRT_tick+0x48>
                uint32_t intPart = (uint32_t)adsr->attackPhase;
2400e5ac:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->attackPhase - intPart;
2400e5b0:	eeb8 1a66 	vcvt.f32.u32	s2, s13
2400e5b4:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2400e5b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400e5bc:	ee77 7a86 	vadd.f32	s15, s15, s12
2400e5c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
2400e5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e5c8:	d41c      	bmi.n	2400e604 <tADSRT_tick+0x130>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
2400e5ca:	6863      	ldr	r3, [r4, #4]
2400e5cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400e5d0:	ee17 2a90 	vmov	r2, s15
2400e5d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e5d8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
2400e5dc:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
2400e5e0:	6863      	ldr	r3, [r4, #4]
2400e5e2:	ee16 2a90 	vmov	r2, s13
2400e5e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e5ea:	ed93 0a00 	vldr	s0, [r3]
2400e5ee:	f001 ff59 	bl	240104a4 <LEAF_interpolation_linear>
2400e5f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400e5f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
2400e5fa:	ee28 8a27 	vmul.f32	s16, s16, s15
2400e5fe:	ed84 8a06 	vstr	s16, [r4, #24]
2400e602:	e7ca      	b.n	2400e59a <tADSRT_tick+0xc6>
                    secondValue = 0.0f;
2400e604:	eddf 0a52 	vldr	s1, [pc, #328]	; 2400e750 <tADSRT_tick+0x27c>
2400e608:	e7e8      	b.n	2400e5dc <tADSRT_tick+0x108>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
2400e60a:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
2400e60e:	ed94 7a03 	vldr	s14, [r4, #12]
2400e612:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e616:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e61e:	dd12      	ble.n	2400e646 <tADSRT_tick+0x172>
                adsr->whichStage = env_sustain;
2400e620:	2303      	movs	r3, #3
2400e622:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
2400e624:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
2400e628:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2400e62c:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e630:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
2400e634:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400e638:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
2400e63c:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e640:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
            break;
2400e644:	e76a      	b.n	2400e51c <tADSRT_tick+0x48>
                uint32_t intPart = (uint32_t)adsr->decayPhase;
2400e646:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->decayPhase - intPart;
2400e64a:	eeb8 1a66 	vcvt.f32.u32	s2, s13
2400e64e:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2400e652:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400e656:	ee77 7a86 	vadd.f32	s15, s15, s12
2400e65a:	eeb4 7ae7 	vcmpe.f32	s14, s15
2400e65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e662:	d426      	bmi.n	2400e6b2 <tADSRT_tick+0x1de>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
2400e664:	6863      	ldr	r3, [r4, #4]
2400e666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400e66a:	ee17 2a90 	vmov	r2, s15
2400e66e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e672:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
2400e676:	6863      	ldr	r3, [r4, #4]
2400e678:	ee16 2a90 	vmov	r2, s13
2400e67c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e680:	ed93 0a00 	vldr	s0, [r3]
2400e684:	f001 ff0e 	bl	240104a4 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
2400e688:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
2400e68c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
2400e690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400e694:	ee37 7a66 	vsub.f32	s14, s14, s13
2400e698:	ee27 7a00 	vmul.f32	s14, s14, s0
2400e69c:	ee36 7a87 	vadd.f32	s14, s13, s14
2400e6a0:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e6a4:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
2400e6a8:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e6ac:	edc4 7a06 	vstr	s15, [r4, #24]
2400e6b0:	e7c0      	b.n	2400e634 <tADSRT_tick+0x160>
                    secondValue = 0.0f;
2400e6b2:	eddf 0a27 	vldr	s1, [pc, #156]	; 2400e750 <tADSRT_tick+0x27c>
2400e6b6:	e7de      	b.n	2400e676 <tADSRT_tick+0x1a2>
            adsr->next = adsr->next * adsr->leakFactor;
2400e6b8:	edd4 7a06 	vldr	s15, [r4, #24]
2400e6bc:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
2400e6c0:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e6c4:	edc4 7a06 	vstr	s15, [r4, #24]
            break;
2400e6c8:	e728      	b.n	2400e51c <tADSRT_tick+0x48>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
2400e6ca:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
2400e6ce:	ed94 7a03 	vldr	s14, [r4, #12]
2400e6d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e6d6:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e6de:	dd0c      	ble.n	2400e6fa <tADSRT_tick+0x226>
                adsr->whichStage = env_idle;
2400e6e0:	2300      	movs	r3, #0
2400e6e2:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
2400e6e4:	2300      	movs	r3, #0
2400e6e6:	61a3      	str	r3, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
2400e6e8:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
2400e6ec:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
2400e6f0:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e6f4:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
            break;
2400e6f8:	e710      	b.n	2400e51c <tADSRT_tick+0x48>
                uint32_t intPart = (uint32_t)adsr->releasePhase;
2400e6fa:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->releasePhase - intPart;
2400e6fe:	eeb8 1a66 	vcvt.f32.u32	s2, s13
2400e702:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
2400e706:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400e70a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400e70e:	eeb4 7ae7 	vcmpe.f32	s14, s15
2400e712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e716:	d418      	bmi.n	2400e74a <tADSRT_tick+0x276>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
2400e718:	6863      	ldr	r3, [r4, #4]
2400e71a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400e71e:	ee17 2a90 	vmov	r2, s15
2400e722:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e726:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
2400e72a:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
2400e72e:	6863      	ldr	r3, [r4, #4]
2400e730:	ee16 2a90 	vmov	r2, s13
2400e734:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2400e738:	ed93 0a00 	vldr	s0, [r3]
2400e73c:	f001 feb2 	bl	240104a4 <LEAF_interpolation_linear>
2400e740:	ee28 8a00 	vmul.f32	s16, s16, s0
2400e744:	ed84 8a06 	vstr	s16, [r4, #24]
2400e748:	e7ce      	b.n	2400e6e8 <tADSRT_tick+0x214>
                    secondValue = 0.0f;
2400e74a:	eddf 0a01 	vldr	s1, [pc, #4]	; 2400e750 <tADSRT_tick+0x27c>
2400e74e:	e7ec      	b.n	2400e72a <tADSRT_tick+0x256>
2400e750:	00000000 	.word	0x00000000

2400e754 <tADSRT_tickNoInterp>:

Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
2400e754:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
2400e756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400e758:	3a01      	subs	r2, #1
2400e75a:	2a04      	cmp	r2, #4
2400e75c:	d819      	bhi.n	2400e792 <tADSRT_tickNoInterp+0x3e>
2400e75e:	e8df f002 	tbb	[pc, r2]
2400e762:	552b      	.short	0x552b
2400e764:	988f      	.short	0x988f
2400e766:	03          	.byte	0x03
2400e767:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2400e768:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
2400e76c:	ed93 7a03 	vldr	s14, [r3, #12]
2400e770:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e774:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e77c:	dd0c      	ble.n	2400e798 <tADSRT_tickNoInterp+0x44>
            {
                adsr->whichStage = env_attack;
2400e77e:	2201      	movs	r2, #1
2400e780:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = 0.0f;
2400e782:	2200      	movs	r2, #0
2400e784:	619a      	str	r2, [r3, #24]
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
2400e786:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
2400e78a:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e78e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
2400e792:	ed93 0a06 	vldr	s0, [r3, #24]
2400e796:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
2400e798:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
2400e79c:	685a      	ldr	r2, [r3, #4]
2400e79e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
2400e7a2:	ee16 1a90 	vmov	r1, s13
2400e7a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400e7aa:	edd2 6a00 	vldr	s13, [r2]
2400e7ae:	ee27 7a26 	vmul.f32	s14, s14, s13
2400e7b2:	ed83 7a06 	vstr	s14, [r3, #24]
2400e7b6:	e7e6      	b.n	2400e786 <tADSRT_tickNoInterp+0x32>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
2400e7b8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
2400e7bc:	ed93 7a03 	vldr	s14, [r3, #12]
2400e7c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e7c4:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e7cc:	dd0a      	ble.n	2400e7e4 <tADSRT_tickNoInterp+0x90>
                adsr->whichStage = env_decay;
2400e7ce:	2202      	movs	r2, #2
2400e7d0:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain;
2400e7d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400e7d4:	619a      	str	r2, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
2400e7d6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
2400e7da:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e7de:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
2400e7e2:	e7d6      	b.n	2400e792 <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
2400e7e4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
2400e7e8:	685a      	ldr	r2, [r3, #4]
2400e7ea:	eefc 6ae7 	vcvt.u32.f32	s13, s15
2400e7ee:	ee16 1a90 	vmov	r1, s13
2400e7f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400e7f6:	ed92 6a00 	vldr	s12, [r2]
2400e7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400e7fe:	ee76 6ac6 	vsub.f32	s13, s13, s12
2400e802:	ee27 7a26 	vmul.f32	s14, s14, s13
2400e806:	ed83 7a06 	vstr	s14, [r3, #24]
2400e80a:	e7e4      	b.n	2400e7d6 <tADSRT_tickNoInterp+0x82>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
2400e80c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
2400e810:	ed93 7a03 	vldr	s14, [r3, #12]
2400e814:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e818:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e820:	dd10      	ble.n	2400e844 <tADSRT_tickNoInterp+0xf0>
                adsr->whichStage = env_sustain;
2400e822:	2203      	movs	r2, #3
2400e824:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
2400e826:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
2400e82a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
2400e82e:	ee27 7a26 	vmul.f32	s14, s14, s13
2400e832:	ed83 7a06 	vstr	s14, [r3, #24]
            adsr->decayPhase += adsr->decayInc;
2400e836:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
2400e83a:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e83e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
2400e842:	e7a6      	b.n	2400e792 <tADSRT_tickNoInterp+0x3e>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
2400e844:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
2400e848:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
2400e84c:	685a      	ldr	r2, [r3, #4]
2400e84e:	eebc 6ae7 	vcvt.u32.f32	s12, s15
2400e852:	ee16 1a10 	vmov	r1, s12
2400e856:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400e85a:	ed92 6a00 	vldr	s12, [r2]
2400e85e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2400e862:	ee75 5ae6 	vsub.f32	s11, s11, s13
2400e866:	ee26 6a25 	vmul.f32	s12, s12, s11
2400e86a:	ee76 6a86 	vadd.f32	s13, s13, s12
2400e86e:	ee27 7a26 	vmul.f32	s14, s14, s13
2400e872:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
2400e876:	ee27 7a26 	vmul.f32	s14, s14, s13
2400e87a:	ed83 7a06 	vstr	s14, [r3, #24]
2400e87e:	e7da      	b.n	2400e836 <tADSRT_tickNoInterp+0xe2>
            adsr->next = adsr->next * adsr->leakFactor;
2400e880:	edd3 7a06 	vldr	s15, [r3, #24]
2400e884:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
2400e888:	ee67 7a87 	vmul.f32	s15, s15, s14
2400e88c:	edc3 7a06 	vstr	s15, [r3, #24]
            break;
2400e890:	e77f      	b.n	2400e792 <tADSRT_tickNoInterp+0x3e>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
2400e892:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
2400e896:	ed93 7a03 	vldr	s14, [r3, #12]
2400e89a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400e89e:	eef4 7ac7 	vcmpe.f32	s15, s14
2400e8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e8a6:	dd0a      	ble.n	2400e8be <tADSRT_tickNoInterp+0x16a>
                adsr->whichStage = env_idle;
2400e8a8:	2200      	movs	r2, #0
2400e8aa:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = 0.0f;
2400e8ac:	2200      	movs	r2, #0
2400e8ae:	619a      	str	r2, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
2400e8b0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
2400e8b4:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e8b8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
2400e8bc:	e769      	b.n	2400e792 <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
2400e8be:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
2400e8c2:	685a      	ldr	r2, [r3, #4]
2400e8c4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
2400e8c8:	ee16 1a90 	vmov	r1, s13
2400e8cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400e8d0:	edd2 6a00 	vldr	s13, [r2]
2400e8d4:	ee27 7a26 	vmul.f32	s14, s14, s13
2400e8d8:	ed83 7a06 	vstr	s14, [r3, #24]
2400e8dc:	e7e8      	b.n	2400e8b0 <tADSRT_tickNoInterp+0x15c>
	...

2400e8e0 <tExpSmooth_initToPool>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
2400e8e0:	b570      	push	{r4, r5, r6, lr}
2400e8e2:	ed2d 8b02 	vpush	{d8}
2400e8e6:	4606      	mov	r6, r0
2400e8e8:	ee10 4a10 	vmov	r4, s0
2400e8ec:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
2400e8f0:	680d      	ldr	r5, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
2400e8f2:	4629      	mov	r1, r5
2400e8f4:	201c      	movs	r0, #28
2400e8f6:	f001 ff54 	bl	240107a2 <mpool_alloc>
2400e8fa:	6030      	str	r0, [r6, #0]
    smooth->mempool = m;
2400e8fc:	6005      	str	r5, [r0, #0]
    
    smooth->curr = val;
2400e8fe:	6104      	str	r4, [r0, #16]
    smooth->dest = val;
2400e900:	6144      	str	r4, [r0, #20]
    if (factor < 0.0f) factor = 0.0f;
2400e902:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e90a:	d418      	bmi.n	2400e93e <tExpSmooth_initToPool+0x5e>
    if (factor > 1.0f) factor = 1.0f;
2400e90c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400e910:	eeb4 8ae7 	vcmpe.f32	s16, s15
2400e914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e918:	dd01      	ble.n	2400e91e <tExpSmooth_initToPool+0x3e>
2400e91a:	eeb0 8a67 	vmov.f32	s16, s15
    smooth->baseFactor = factor;
2400e91e:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->factor = factor;
2400e922:	ed80 8a02 	vstr	s16, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
2400e926:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400e92a:	ee30 8ac8 	vsub.f32	s16, s1, s16
2400e92e:	ed80 8a03 	vstr	s16, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
2400e932:	686b      	ldr	r3, [r5, #4]
2400e934:	685b      	ldr	r3, [r3, #4]
2400e936:	6183      	str	r3, [r0, #24]
}
2400e938:	ecbd 8b02 	vpop	{d8}
2400e93c:	bd70      	pop	{r4, r5, r6, pc}
    if (factor < 0.0f) factor = 0.0f;
2400e93e:	ed9f 8a01 	vldr	s16, [pc, #4]	; 2400e944 <tExpSmooth_initToPool+0x64>
2400e942:	e7e3      	b.n	2400e90c <tExpSmooth_initToPool+0x2c>
2400e944:	00000000 	.word	0x00000000

2400e948 <tExpSmooth_init>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
2400e948:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
2400e94a:	3118      	adds	r1, #24
2400e94c:	f7ff ffc8 	bl	2400e8e0 <tExpSmooth_initToPool>
}
2400e950:	bd08      	pop	{r3, pc}

2400e952 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
2400e952:	b508      	push	{r3, lr}
    _tExpSmooth* smooth = *expsmooth;
2400e954:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
2400e956:	6801      	ldr	r1, [r0, #0]
2400e958:	f002 f80f 	bl	2401097a <mpool_free>
}
2400e95c:	bd08      	pop	{r3, pc}

2400e95e <tOnePole_free>:
    
    tOnePole_setFreq(ft, freq);
}

void    tOnePole_free   (tOnePole* const ft)
{
2400e95e:	b508      	push	{r3, lr}
    _tOnePole* f = *ft;
2400e960:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
2400e962:	6801      	ldr	r1, [r0, #0]
2400e964:	f002 f809 	bl	2401097a <mpool_free>
}
2400e968:	bd08      	pop	{r3, pc}
	...

2400e96c <tOnePole_setFreq>:
    
    f->a1 = -thePole;
}

void        tOnePole_setFreq        (tOnePole* const ft, Lfloat freq)
{
2400e96c:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
2400e96e:	6804      	ldr	r4, [r0, #0]
    
    f->freq = freq;
2400e970:	ed84 0a01 	vstr	s0, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2400e974:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
2400e978:	ee60 0a80 	vmul.f32	s1, s1, s0
2400e97c:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2400e980:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400e984:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2400e9a0 <tOnePole_setFreq+0x34>
2400e988:	f020 fab2 	bl	2402eef0 <__LEAF_clip_veneer>
2400e98c:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
2400e990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400e994:	ee37 0ac0 	vsub.f32	s0, s15, s0
2400e998:	ed84 0a04 	vstr	s0, [r4, #16]
}
2400e99c:	bd10      	pop	{r4, pc}
2400e99e:	bf00      	nop
2400e9a0:	00000000 	.word	0x00000000

2400e9a4 <tOnePole_initToPool>:
{
2400e9a4:	b538      	push	{r3, r4, r5, lr}
2400e9a6:	ed2d 8b02 	vpush	{d8}
2400e9aa:	4604      	mov	r4, r0
2400e9ac:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
2400e9b0:	680d      	ldr	r5, [r1, #0]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
2400e9b2:	4629      	mov	r1, r5
2400e9b4:	2028      	movs	r0, #40	; 0x28
2400e9b6:	f001 fef4 	bl	240107a2 <mpool_alloc>
2400e9ba:	6020      	str	r0, [r4, #0]
    f->mempool = m;
2400e9bc:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2400e9be:	686a      	ldr	r2, [r5, #4]
    f->gain = 1.0f;
2400e9c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e9c4:	6083      	str	r3, [r0, #8]
    f->a0 = 1.0;
2400e9c6:	60c3      	str	r3, [r0, #12]
    f->lastIn = 0.0f;
2400e9c8:	2300      	movs	r3, #0
2400e9ca:	61c3      	str	r3, [r0, #28]
    f->lastOut = 0.0f;
2400e9cc:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2400e9ce:	68d3      	ldr	r3, [r2, #12]
2400e9d0:	6243      	str	r3, [r0, #36]	; 0x24
    tOnePole_setFreq(ft, freq);
2400e9d2:	eeb0 0a48 	vmov.f32	s0, s16
2400e9d6:	4620      	mov	r0, r4
2400e9d8:	f7ff ffc8 	bl	2400e96c <tOnePole_setFreq>
}
2400e9dc:	ecbd 8b02 	vpop	{d8}
2400e9e0:	bd38      	pop	{r3, r4, r5, pc}

2400e9e2 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
2400e9e2:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
2400e9e4:	edd3 7a02 	vldr	s15, [r3, #8]
2400e9e8:	ee67 7a80 	vmul.f32	s15, s15, s0
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
2400e9ec:	ed93 0a05 	vldr	s0, [r3, #20]
2400e9f0:	ee20 0a27 	vmul.f32	s0, s0, s15
2400e9f4:	ed93 7a04 	vldr	s14, [r3, #16]
2400e9f8:	edd3 6a08 	vldr	s13, [r3, #32]
2400e9fc:	ee27 7a26 	vmul.f32	s14, s14, s13
2400ea00:	ee30 0a07 	vadd.f32	s0, s0, s14
    
    f->lastIn = in;
2400ea04:	edc3 7a07 	vstr	s15, [r3, #28]
    f->lastOut = out;
2400ea08:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
2400ea0c:	4770      	bx	lr
	...

2400ea10 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
2400ea10:	b510      	push	{r4, lr}
2400ea12:	ed2d 8b02 	vpush	{d8}
    _tOnePole* f = *ft;
2400ea16:	6804      	ldr	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
2400ea18:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
2400ea1c:	eec8 0a00 	vdiv.f32	s1, s16, s0
2400ea20:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2400ea58 <tOnePole_setSampleRate+0x48>
2400ea24:	ee60 0aa7 	vmul.f32	s1, s1, s15
2400ea28:	edc4 0a09 	vstr	s1, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
2400ea2c:	edd4 7a01 	vldr	s15, [r4, #4]
2400ea30:	ee60 0aa7 	vmul.f32	s1, s1, s15
2400ea34:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2400ea38:	eeb0 1a48 	vmov.f32	s2, s16
2400ea3c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 2400ea5c <tOnePole_setSampleRate+0x4c>
2400ea40:	f020 fa56 	bl	2402eef0 <__LEAF_clip_veneer>
2400ea44:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
2400ea48:	ee38 8a40 	vsub.f32	s16, s16, s0
2400ea4c:	ed84 8a04 	vstr	s16, [r4, #16]
}
2400ea50:	ecbd 8b02 	vpop	{d8}
2400ea54:	bd10      	pop	{r4, pc}
2400ea56:	bf00      	nop
2400ea58:	40c90fdb 	.word	0x40c90fdb
2400ea5c:	00000000 	.word	0x00000000

2400ea60 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
2400ea60:	b538      	push	{r3, r4, r5, lr}
2400ea62:	4605      	mov	r5, r0
    _tMempool* m = *mp;
2400ea64:	680c      	ldr	r4, [r1, #0]
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
2400ea66:	4621      	mov	r1, r4
2400ea68:	2028      	movs	r0, #40	; 0x28
2400ea6a:	f001 fe9a 	bl	240107a2 <mpool_alloc>
2400ea6e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
2400ea70:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2400ea72:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2400ea74:	68db      	ldr	r3, [r3, #12]
2400ea76:	6243      	str	r3, [r0, #36]	; 0x24
    f->gain = 1.0f;
2400ea78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ea7c:	6043      	str	r3, [r0, #4]
    f->lastIn[0] = 0.0f;
2400ea7e:	2300      	movs	r3, #0
2400ea80:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
2400ea82:	6203      	str	r3, [r0, #32]
}
2400ea84:	bd38      	pop	{r3, r4, r5, pc}

2400ea86 <tTwoZero_free>:

void    tTwoZero_free   (tTwoZero* const ft)
{
2400ea86:	b508      	push	{r3, lr}
    _tTwoZero* f = *ft;
2400ea88:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2400ea8a:	6801      	ldr	r1, [r0, #0]
2400ea8c:	f001 ff75 	bl	2401097a <mpool_free>
}
2400ea90:	bd08      	pop	{r3, pc}

2400ea92 <tTwoZero_tick>:

Lfloat   tTwoZero_tick(tTwoZero* const ft, Lfloat input)
{
    _tTwoZero* f = *ft;
2400ea92:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
2400ea94:	ed93 7a01 	vldr	s14, [r3, #4]
2400ea98:	ee27 7a00 	vmul.f32	s14, s14, s0
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
2400ea9c:	edd3 7a04 	vldr	s15, [r3, #16]
2400eaa0:	ed93 0a08 	vldr	s0, [r3, #32]
2400eaa4:	ee67 7a80 	vmul.f32	s15, s15, s0
2400eaa8:	ed93 0a03 	vldr	s0, [r3, #12]
2400eaac:	edd3 6a07 	vldr	s13, [r3, #28]
2400eab0:	ee20 0a26 	vmul.f32	s0, s0, s13
2400eab4:	ee77 7a80 	vadd.f32	s15, s15, s0
2400eab8:	ed93 0a02 	vldr	s0, [r3, #8]
2400eabc:	ee20 0a07 	vmul.f32	s0, s0, s14
    
    f->lastIn[1] = f->lastIn[0];
2400eac0:	edc3 6a08 	vstr	s13, [r3, #32]
    f->lastIn[0] = in;
2400eac4:	ed83 7a07 	vstr	s14, [r3, #28]
    
    return out;
}
2400eac8:	ee37 0a80 	vadd.f32	s0, s15, s0
2400eacc:	4770      	bx	lr

2400eace <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, Lfloat b0, Lfloat b1, Lfloat b2)
{
    _tTwoZero* f = *ft;
2400eace:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
2400ead0:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
2400ead4:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
2400ead8:	ed83 1a04 	vstr	s2, [r3, #16]
}
2400eadc:	4770      	bx	lr

2400eade <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
2400eade:	b538      	push	{r3, r4, r5, lr}
2400eae0:	4605      	mov	r5, r0
    _tMempool* m = *mp;
2400eae2:	680c      	ldr	r4, [r1, #0]
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
2400eae4:	4621      	mov	r1, r4
2400eae6:	2044      	movs	r0, #68	; 0x44
2400eae8:	f001 fe5b 	bl	240107a2 <mpool_alloc>
2400eaec:	6028      	str	r0, [r5, #0]
    f->mempool = m;
2400eaee:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2400eaf0:	6862      	ldr	r2, [r4, #4]
    
    f->gain = 1.0f;
2400eaf2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400eaf6:	6043      	str	r3, [r0, #4]
    
    f->b0 = 0.0f;
2400eaf8:	2300      	movs	r3, #0
2400eafa:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
2400eafc:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
2400eafe:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
2400eb00:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
2400eb02:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
2400eb04:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2400eb06:	68d3      	ldr	r3, [r2, #12]
2400eb08:	6403      	str	r3, [r0, #64]	; 0x40
}
2400eb0a:	bd38      	pop	{r3, r4, r5, pc}

2400eb0c <tBiQuad_free>:

void    tBiQuad_free   (tBiQuad* const ft)
{
2400eb0c:	b508      	push	{r3, lr}
    _tBiQuad* f = *ft;
2400eb0e:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2400eb10:	6801      	ldr	r1, [r0, #0]
2400eb12:	f001 ff32 	bl	2401097a <mpool_free>
}
2400eb16:	bd08      	pop	{r3, pc}

2400eb18 <tBiQuad_setSampleRate>:
    _tBiQuad* f = *ft;
    f->gain = gain;
}

void    tBiQuad_setSampleRate(tBiQuad* const ft, Lfloat sr)
{
2400eb18:	b510      	push	{r4, lr}
2400eb1a:	ed2d 8b02 	vpush	{d8}
    _tBiQuad* f = *ft;
2400eb1e:	6804      	ldr	r4, [r0, #0]
    
    f->sampleRate = sr;
2400eb20:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
2400eb24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400eb28:	ee87 7a80 	vdiv.f32	s14, s15, s0
2400eb2c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 2400eb88 <tBiQuad_setSampleRate+0x70>
2400eb30:	ee27 7a00 	vmul.f32	s14, s14, s0
2400eb34:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    
    f->a2 = f->radius * f->radius;
2400eb38:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
2400eb3c:	ee67 8aa7 	vmul.f32	s17, s15, s15
2400eb40:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
2400eb44:	eeb8 8a00 	vmov.f32	s16, #128	; 0xc0000000 -2.0
2400eb48:	ee27 8a88 	vmul.f32	s16, s15, s16
2400eb4c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
2400eb50:	ee27 0a00 	vmul.f32	s0, s14, s0
2400eb54:	f004 fe24 	bl	240137a0 <cosf>
2400eb58:	ee68 7a00 	vmul.f32	s15, s16, s0
2400eb5c:	edc4 7a03 	vstr	s15, [r4, #12]
    
    if (f->normalize)
2400eb60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400eb62:	b16b      	cbz	r3, 2400eb80 <tBiQuad_setSampleRate+0x68>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
2400eb64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400eb68:	ee68 8aa7 	vmul.f32	s17, s17, s15
2400eb6c:	ee77 7ae8 	vsub.f32	s15, s15, s17
2400eb70:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b1 = 0.0f;
2400eb74:	2300      	movs	r3, #0
2400eb76:	61a3      	str	r3, [r4, #24]
        f->b2 = -f->b0;
2400eb78:	eef1 7a67 	vneg.f32	s15, s15
2400eb7c:	edc4 7a07 	vstr	s15, [r4, #28]
    }
}
2400eb80:	ecbd 8b02 	vpop	{d8}
2400eb84:	bd10      	pop	{r4, pc}
2400eb86:	bf00      	nop
2400eb88:	40c90fdb 	.word	0x40c90fdb

2400eb8c <tSVF_initToPool>:
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
2400eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400eb8e:	ed2d 8b02 	vpush	{d8}
2400eb92:	4606      	mov	r6, r0
2400eb94:	460f      	mov	r7, r1
2400eb96:	eeb0 8a40 	vmov.f32	s16, s0
2400eb9a:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
2400eb9e:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
2400eba0:	4629      	mov	r1, r5
2400eba2:	2044      	movs	r0, #68	; 0x44
2400eba4:	f001 fdfd 	bl	240107a2 <mpool_alloc>
2400eba8:	4604      	mov	r4, r0
2400ebaa:	6030      	str	r0, [r6, #0]
    svf->mempool = m;
2400ebac:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
2400ebae:	686b      	ldr	r3, [r5, #4]
    
    svf->sampleRate = leaf->sampleRate;
2400ebb0:	681a      	ldr	r2, [r3, #0]
2400ebb2:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
2400ebb4:	ed93 0a01 	vldr	s0, [r3, #4]
2400ebb8:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
    
    svf->type = type;
2400ebbc:	7107      	strb	r7, [r0, #4]
    
    svf->ic1eq = 0;
2400ebbe:	2500      	movs	r5, #0
2400ebc0:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
2400ebc2:	6145      	str	r5, [r0, #20]
    svf->Q = Q;
2400ebc4:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
2400ebc8:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
2400ebcc:	eddf 7a26 	vldr	s15, [pc, #152]	; 2400ec68 <tSVF_initToPool+0xdc>
2400ebd0:	ee28 8a27 	vmul.f32	s16, s16, s15
2400ebd4:	ee20 0a08 	vmul.f32	s0, s0, s16
2400ebd8:	f005 fb22 	bl	24014220 <tanf>
2400ebdc:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->k = 1.0f/Q;
2400ebe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400ebe4:	eec6 7aa8 	vdiv.f32	s15, s13, s17
2400ebe8:	edc4 7a07 	vstr	s15, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400ebec:	ee70 7a27 	vadd.f32	s15, s0, s15
2400ebf0:	ee60 7a27 	vmul.f32	s15, s0, s15
2400ebf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400ebf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400ebfc:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a2 = svf->g*svf->a1;
2400ec00:	ee60 7a07 	vmul.f32	s15, s0, s14
2400ec04:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
2400ec08:	ee20 0a27 	vmul.f32	s0, s0, s15
2400ec0c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    
    svf->cH = 0.0f;
2400ec10:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->cB = 0.0f;
2400ec12:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
2400ec14:	63a5      	str	r5, [r4, #56]	; 0x38
    svf->cL = 1.0f;
2400ec16:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    
    if (type == SVFTypeLowpass)
2400ec1a:	2f01      	cmp	r7, #1
2400ec1c:	d00c      	beq.n	2400ec38 <tSVF_initToPool+0xac>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
2400ec1e:	2f02      	cmp	r7, #2
2400ec20:	d007      	beq.n	2400ec32 <tSVF_initToPool+0xa6>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
2400ec22:	b967      	cbnz	r7, 2400ec3e <tSVF_initToPool+0xb2>
    {
        svf->cH = 1.0f;
2400ec24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ec28:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
2400ec2a:	4b10      	ldr	r3, [pc, #64]	; (2400ec6c <tSVF_initToPool+0xe0>)
2400ec2c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
2400ec2e:	6363      	str	r3, [r4, #52]	; 0x34
2400ec30:	e002      	b.n	2400ec38 <tSVF_initToPool+0xac>
        svf->cB = 1.0f;
2400ec32:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
        svf->cL = 0.0f;
2400ec36:	6365      	str	r5, [r4, #52]	; 0x34
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
}
2400ec38:	ecbd 8b02 	vpop	{d8}
2400ec3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (type == SVFTypeNotch)
2400ec3e:	2f03      	cmp	r7, #3
2400ec40:	d00a      	beq.n	2400ec58 <tSVF_initToPool+0xcc>
    else if (type == SVFTypePeak)
2400ec42:	2f04      	cmp	r7, #4
2400ec44:	d1f8      	bne.n	2400ec38 <tSVF_initToPool+0xac>
        svf->cH = 1.0f;
2400ec46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ec4a:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
2400ec4c:	4b07      	ldr	r3, [pc, #28]	; (2400ec6c <tSVF_initToPool+0xe0>)
2400ec4e:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -2.0f;
2400ec50:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
2400ec54:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ec56:	e7ef      	b.n	2400ec38 <tSVF_initToPool+0xac>
        svf->cH = 1.0f;
2400ec58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ec5c:	62e3      	str	r3, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
2400ec5e:	4b03      	ldr	r3, [pc, #12]	; (2400ec6c <tSVF_initToPool+0xe0>)
2400ec60:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
2400ec62:	2300      	movs	r3, #0
2400ec64:	6363      	str	r3, [r4, #52]	; 0x34
2400ec66:	e7e7      	b.n	2400ec38 <tSVF_initToPool+0xac>
2400ec68:	40490fdb 	.word	0x40490fdb
2400ec6c:	bf800000 	.word	0xbf800000

2400ec70 <tSVF_init>:
{
2400ec70:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
2400ec72:	3218      	adds	r2, #24
2400ec74:	f7ff ff8a 	bl	2400eb8c <tSVF_initToPool>
}
2400ec78:	bd08      	pop	{r3, pc}

2400ec7a <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
2400ec7a:	6803      	ldr	r3, [r0, #0]
    
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
2400ec7c:	ed93 6a05 	vldr	s12, [r3, #20]
2400ec80:	ee30 5a46 	vsub.f32	s10, s0, s12
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2400ec84:	ed93 7a08 	vldr	s14, [r3, #32]
2400ec88:	edd3 5a04 	vldr	s11, [r3, #16]
2400ec8c:	ee27 7a25 	vmul.f32	s14, s14, s11
2400ec90:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
2400ec94:	ee67 6a85 	vmul.f32	s13, s15, s10
2400ec98:	ee37 7a26 	vadd.f32	s14, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2400ec9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
2400eca0:	ee76 7a27 	vadd.f32	s15, s12, s15
2400eca4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
2400eca8:	ee66 6a85 	vmul.f32	s13, s13, s10
2400ecac:	ee77 7aa6 	vadd.f32	s15, s15, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2400ecb0:	ee77 6a07 	vadd.f32	s13, s14, s14
2400ecb4:	ee76 6ae5 	vsub.f32	s13, s13, s11
2400ecb8:	edc3 6a04 	vstr	s13, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2400ecbc:	ee77 6aa7 	vadd.f32	s13, s15, s15
2400ecc0:	ee76 6ac6 	vsub.f32	s13, s13, s12
2400ecc4:	edc3 6a05 	vstr	s13, [r3, #20]
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2400ecc8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
2400eccc:	ee26 0a80 	vmul.f32	s0, s13, s0
2400ecd0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
2400ecd4:	ee66 6a87 	vmul.f32	s13, s13, s14
2400ecd8:	ee30 0a26 	vadd.f32	s0, s0, s13
2400ecdc:	edd3 6a07 	vldr	s13, [r3, #28]
2400ece0:	ee26 7a87 	vmul.f32	s14, s13, s14
2400ece4:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
2400ece8:	ee27 7a26 	vmul.f32	s14, s14, s13
2400ecec:	ee30 7a07 	vadd.f32	s14, s0, s14
2400ecf0:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
2400ecf4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
2400ecf8:	ee37 0a00 	vadd.f32	s0, s14, s0
2400ecfc:	4770      	bx	lr
	...

2400ed00 <tSVF_setFreqFast>:
    svf->a3 = svf->g * svf->a2;
}

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
2400ed00:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
2400ed02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2400ed06:	ee17 2a90 	vmov	r2, s15
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2400ed0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400ed0e:	ee30 0a67 	vsub.f32	s0, s0, s15

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2400ed12:	4915      	ldr	r1, [pc, #84]	; (2400ed68 <tSVF_setFreqFast+0x68>)
2400ed14:	eb01 0082 	add.w	r0, r1, r2, lsl #2
2400ed18:	edd0 7a00 	vldr	s15, [r0]
2400ed1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400ed20:	ee36 7a40 	vsub.f32	s14, s12, s0
2400ed24:	ee67 7a87 	vmul.f32	s15, s15, s14
2400ed28:	3201      	adds	r2, #1
2400ed2a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
2400ed2e:	ed92 7a00 	vldr	s14, [r2]
2400ed32:	ee27 0a00 	vmul.f32	s0, s14, s0
2400ed36:	ee77 7a80 	vadd.f32	s15, s15, s0
2400ed3a:	edc3 7a06 	vstr	s15, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400ed3e:	ed93 7a07 	vldr	s14, [r3, #28]
2400ed42:	ee37 7a87 	vadd.f32	s14, s15, s14
2400ed46:	ee27 7a87 	vmul.f32	s14, s15, s14
2400ed4a:	ee37 7a06 	vadd.f32	s14, s14, s12
2400ed4e:	eec6 6a07 	vdiv.f32	s13, s12, s14
2400ed52:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a2 = svf->g * svf->a1;
2400ed56:	ee27 7aa6 	vmul.f32	s14, s15, s13
2400ed5a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2400ed5e:	ee67 7a87 	vmul.f32	s15, s15, s14
2400ed62:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2400ed66:	4770      	bx	lr
2400ed68:	24016444 	.word	0x24016444

2400ed6c <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
2400ed6c:	6803      	ldr	r3, [r0, #0]
    svf->Q = Q;
2400ed6e:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->k = 1.0f/Q;
2400ed72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400ed76:	eec6 7a00 	vdiv.f32	s15, s12, s0
2400ed7a:	edc3 7a07 	vstr	s15, [r3, #28]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400ed7e:	ed93 7a06 	vldr	s14, [r3, #24]
2400ed82:	ee77 7a87 	vadd.f32	s15, s15, s14
2400ed86:	ee67 7a27 	vmul.f32	s15, s14, s15
2400ed8a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400ed8e:	eec6 6a27 	vdiv.f32	s13, s12, s15
2400ed92:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a2 = svf->g * svf->a1;
2400ed96:	ee67 7a26 	vmul.f32	s15, s14, s13
2400ed9a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2400ed9e:	ee27 7a27 	vmul.f32	s14, s14, s15
2400eda2:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
}
2400eda6:	4770      	bx	lr

2400eda8 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
2400eda8:	b538      	push	{r3, r4, r5, lr}
2400edaa:	ed2d 8b02 	vpush	{d8}
2400edae:	4605      	mov	r5, r0
2400edb0:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
2400edb4:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2400edb6:	4621      	mov	r1, r4
2400edb8:	2018      	movs	r0, #24
2400edba:	f001 fd6a 	bl	24010892 <mpool_calloc>
2400edbe:	6028      	str	r0, [r5, #0]
    f->mempool = m;
2400edc0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2400edc2:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2400edc4:	edd3 7a03 	vldr	s15, [r3, #12]
2400edc8:	edc0 7a05 	vstr	s15, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2400edcc:	ee67 7a88 	vmul.f32	s15, s15, s16
2400edd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400edd4:	ee77 7a67 	vsub.f32	s15, s14, s15
2400edd8:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
2400eddc:	2300      	movs	r3, #0
2400edde:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
2400ede0:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
2400ede2:	ed80 8a04 	vstr	s16, [r0, #16]
}
2400ede6:	ecbd 8b02 	vpop	{d8}
2400edea:	bd38      	pop	{r3, r4, r5, pc}

2400edec <tHighpass_init>:
{
2400edec:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
2400edee:	3118      	adds	r1, #24
2400edf0:	f7ff ffda 	bl	2400eda8 <tHighpass_initToPool>
}
2400edf4:	bd08      	pop	{r3, pc}

2400edf6 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
2400edf6:	b508      	push	{r3, lr}
    _tHighpass* f = *ft;
2400edf8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2400edfa:	6801      	ldr	r1, [r0, #0]
2400edfc:	f001 fdbd 	bl	2401097a <mpool_free>
}
2400ee00:	bd08      	pop	{r3, pc}

2400ee02 <tHighpass_setFreq>:

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
2400ee02:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
2400ee04:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2400ee08:	edd3 7a05 	vldr	s15, [r3, #20]
2400ee0c:	ee67 7a80 	vmul.f32	s15, s15, s0
2400ee10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400ee14:	ee30 0a67 	vsub.f32	s0, s0, s15
2400ee18:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400ee1c:	4770      	bx	lr

2400ee1e <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
2400ee1e:	eeb0 7a40 	vmov.f32	s14, s0
    _tHighpass* f = *ft;
2400ee22:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
2400ee24:	edd3 7a01 	vldr	s15, [r3, #4]
2400ee28:	ee70 7a67 	vsub.f32	s15, s0, s15
2400ee2c:	ed93 0a03 	vldr	s0, [r3, #12]
2400ee30:	edd3 6a02 	vldr	s13, [r3, #8]
2400ee34:	ee20 0a26 	vmul.f32	s0, s0, s13
2400ee38:	ee37 0a80 	vadd.f32	s0, s15, s0
2400ee3c:	ed83 0a02 	vstr	s0, [r3, #8]
    f->xs = x;
2400ee40:	ed83 7a01 	vstr	s14, [r3, #4]
    return f->ys;
}
2400ee44:	4770      	bx	lr
	...

2400ee48 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
2400ee48:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2400ee4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400ee4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400ee52:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400ee70 <tHighpass_setSampleRate+0x28>
2400ee56:	ee67 7aa6 	vmul.f32	s15, s15, s13
2400ee5a:	edc3 7a05 	vstr	s15, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2400ee5e:	edd3 6a04 	vldr	s13, [r3, #16]
2400ee62:	ee67 7aa6 	vmul.f32	s15, s15, s13
2400ee66:	ee77 7a67 	vsub.f32	s15, s14, s15
2400ee6a:	edc3 7a03 	vstr	s15, [r3, #12]
}
2400ee6e:	4770      	bx	lr
2400ee70:	40c90fdb 	.word	0x40c90fdb

2400ee74 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
2400ee74:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2400ee76:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
2400ee7a:	edd3 6a02 	vldr	s13, [r3, #8]
2400ee7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
2400ee82:	ee70 7a67 	vsub.f32	s15, s0, s15
2400ee86:	ed93 6a03 	vldr	s12, [r3, #12]
2400ee8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
2400ee8e:	ed93 0a06 	vldr	s0, [r3, #24]
2400ee92:	ee67 7a80 	vmul.f32	s15, s15, s0
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
2400ee96:	ed93 7a04 	vldr	s14, [r3, #16]
2400ee9a:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
2400ee9e:	ee36 0aa5 	vadd.f32	s0, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
2400eea2:	ee75 5a80 	vadd.f32	s11, s11, s0
2400eea6:	edc3 5a02 	vstr	s11, [r3, #8]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
2400eeaa:	ee27 7a00 	vmul.f32	s14, s14, s0
    yL = v2 + f->s2;
2400eeae:	ee76 6a07 	vadd.f32	s13, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
2400eeb2:	ee37 7a26 	vadd.f32	s14, s14, s13
2400eeb6:	ed83 7a03 	vstr	s14, [r3, #12]
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
2400eeba:	ed93 7a07 	vldr	s14, [r3, #28]
2400eebe:	ee27 7a26 	vmul.f32	s14, s14, s13
2400eec2:	edd3 6a08 	vldr	s13, [r3, #32]
2400eec6:	ee26 0a80 	vmul.f32	s0, s13, s0
2400eeca:	ee37 0a00 	vadd.f32	s0, s14, s0
2400eece:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
2400eed2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
2400eed6:	ee30 0a27 	vadd.f32	s0, s0, s15
2400eeda:	4770      	bx	lr

2400eedc <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
2400eedc:	b510      	push	{r4, lr}
2400eede:	ed2d 8b04 	vpush	{d8-d9}
    _tVZFilter* f = *vf;
2400eee2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2400eee4:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
2400eee8:	eddf 7a98 	vldr	s15, [pc, #608]	; 2400f14c <tVZFilter_calcCoeffs+0x270>
2400eeec:	ee68 7a27 	vmul.f32	s15, s16, s15
2400eef0:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
2400eef4:	ee27 0a80 	vmul.f32	s0, s15, s0
2400eef8:	f005 f992 	bl	24014220 <tanf>
2400eefc:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
2400ef00:	7923      	ldrb	r3, [r4, #4]
2400ef02:	2b0a      	cmp	r3, #10
2400ef04:	d80e      	bhi.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
2400ef06:	e8df f003 	tbb	[pc, r3]
2400ef0a:	262d      	.short	0x262d
2400ef0c:	4e473b34 	.word	0x4e473b34
2400ef10:	06cea98f 	.word	0x06cea98f
2400ef14:	c3          	.byte	0xc3
2400ef15:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
2400ef16:	6b22      	ldr	r2, [r4, #48]	; 0x30
2400ef18:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
2400ef1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ef1e:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
2400ef20:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
2400ef22:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
2400ef24:	edd4 7a05 	vldr	s15, [r4, #20]
2400ef28:	ed94 7a04 	vldr	s14, [r4, #16]
2400ef2c:	ee77 6a87 	vadd.f32	s13, s15, s14
2400ef30:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400ef34:	ee67 7a87 	vmul.f32	s15, s15, s14
2400ef38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400ef3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400ef40:	ee27 7a07 	vmul.f32	s14, s14, s14
2400ef44:	ee77 7a87 	vadd.f32	s15, s15, s14
2400ef48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400ef4c:	ed84 7a06 	vstr	s14, [r4, #24]
}
2400ef50:	ecbd 8b04 	vpop	{d8-d9}
2400ef54:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2400ef56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ef5a:	61e3      	str	r3, [r4, #28]
2400ef5c:	2300      	movs	r3, #0
2400ef5e:	6223      	str	r3, [r4, #32]
2400ef60:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400ef62:	e7df      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2400ef64:	2300      	movs	r3, #0
2400ef66:	61e3      	str	r3, [r4, #28]
2400ef68:	6223      	str	r3, [r4, #32]
2400ef6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ef6e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400ef70:	e7d8      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2400ef72:	2300      	movs	r3, #0
2400ef74:	61e3      	str	r3, [r4, #28]
2400ef76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
2400ef7a:	6222      	str	r2, [r4, #32]
2400ef7c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400ef7e:	e7d1      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2400ef80:	2300      	movs	r3, #0
2400ef82:	61e3      	str	r3, [r4, #28]
2400ef84:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400ef88:	ed94 7a05 	vldr	s14, [r4, #20]
2400ef8c:	ee67 7a87 	vmul.f32	s15, s15, s14
2400ef90:	edc4 7a08 	vstr	s15, [r4, #32]
2400ef94:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400ef96:	e7c5      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2400ef98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400ef9c:	61e3      	str	r3, [r4, #28]
2400ef9e:	2200      	movs	r2, #0
2400efa0:	6222      	str	r2, [r4, #32]
2400efa2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400efa4:	e7be      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2400efa6:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2400efaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400efae:	ee60 0ae7 	vnmul.f32	s1, s1, s15
2400efb2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2400efb6:	f004 ffd3 	bl	24013f60 <powf>
2400efba:	ee28 8a00 	vmul.f32	s16, s16, s0
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2400efbe:	ed9f 0a63 	vldr	s0, [pc, #396]	; 2400f14c <tVZFilter_calcCoeffs+0x270>
2400efc2:	ee28 8a00 	vmul.f32	s16, s16, s0
2400efc6:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
2400efca:	ee28 0a00 	vmul.f32	s0, s16, s0
2400efce:	f005 f927 	bl	24014220 <tanf>
            Lfloat r  = f->g/wl;
2400efd2:	ed94 7a04 	vldr	s14, [r4, #16]
2400efd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2400efda:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400efde:	ee27 7aa7 	vmul.f32	s14, s15, s15
2400efe2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
2400efe6:	ee37 7a08 	vadd.f32	s14, s14, s16
2400efea:	ee87 0a27 	vdiv.f32	s0, s14, s15
2400efee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2400eff2:	ee30 0a67 	vsub.f32	s0, s0, s15
2400eff6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400effa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
2400effe:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f002:	ee80 0a27 	vdiv.f32	s0, s0, s15
2400f006:	f005 f9d7 	bl	240143b8 <sqrtf>
2400f00a:	ee30 0a00 	vadd.f32	s0, s0, s0
2400f00e:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400f012:	ed84 8a07 	vstr	s16, [r4, #28]
2400f016:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400f01a:	ee20 0a27 	vmul.f32	s0, s0, s15
2400f01e:	ed84 0a08 	vstr	s0, [r4, #32]
2400f022:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
            break;
2400f026:	e77d      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            Lfloat A = sqrtf(f->G);
2400f028:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2400f02c:	f005 f9c4 	bl	240143b8 <sqrtf>
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400f030:	f005 f9c2 	bl	240143b8 <sqrtf>
2400f034:	ed94 7a04 	vldr	s14, [r4, #16]
2400f038:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400f03c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2400f040:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400f044:	edc4 7a07 	vstr	s15, [r4, #28]
2400f048:	ed94 7a05 	vldr	s14, [r4, #20]
2400f04c:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f050:	edc4 7a08 	vstr	s15, [r4, #32]
2400f054:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f058:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f05a:	e763      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            Lfloat A = sqrtf(f->G);
2400f05c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2400f060:	f005 f9aa 	bl	240143b8 <sqrtf>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400f064:	f005 f9a8 	bl	240143b8 <sqrtf>
2400f068:	edd4 7a04 	vldr	s15, [r4, #16]
2400f06c:	ee67 7a80 	vmul.f32	s15, s15, s0
2400f070:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2400f074:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f078:	61e3      	str	r3, [r4, #28]
2400f07a:	edd4 7a05 	vldr	s15, [r4, #20]
2400f07e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400f082:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f086:	edc4 7a08 	vstr	s15, [r4, #32]
2400f08a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
2400f08e:	e749      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
2400f090:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f094:	61e3      	str	r3, [r4, #28]
2400f096:	edd4 7a05 	vldr	s15, [r4, #20]
2400f09a:	eef1 7a67 	vneg.f32	s15, s15
2400f09e:	edc4 7a08 	vstr	s15, [r4, #32]
2400f0a2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f0a4:	e73e      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
            Lfloat x  = (2.0f*f->m-1.0f);
2400f0a6:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
2400f0aa:	ee38 8a08 	vadd.f32	s16, s16, s16
2400f0ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2400f0b2:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400f0b6:	ed9f 9a26 	vldr	s18, [pc, #152]	; 2400f150 <tVZFilter_calcCoeffs+0x274>
2400f0ba:	eef0 0a49 	vmov.f32	s1, s18
2400f0be:	eeb1 0a48 	vneg.f32	s0, s16
2400f0c2:	f001 fb37 	bl	24010734 <maximum>
2400f0c6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400f0ca:	eef0 0a49 	vmov.f32	s1, s18
2400f0ce:	eeb0 0a48 	vmov.f32	s0, s16
2400f0d2:	f001 fb3b 	bl	2401074c <minimum>
2400f0d6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
2400f0da:	ee28 8a08 	vmul.f32	s16, s16, s16
2400f0de:	ee38 8ac8 	vsub.f32	s16, s17, s16
2400f0e2:	ed84 8a08 	vstr	s16, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400f0e6:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
2400f0ea:	edd4 7a05 	vldr	s15, [r4, #20]
2400f0ee:	ee67 6aa7 	vmul.f32	s13, s15, s15
2400f0f2:	ed94 7a07 	vldr	s14, [r4, #28]
2400f0f6:	ee67 7a07 	vmul.f32	s15, s14, s14
2400f0fa:	ee28 8a08 	vmul.f32	s16, s16, s16
2400f0fe:	ee37 8a88 	vadd.f32	s16, s15, s16
2400f102:	ee60 7a00 	vmul.f32	s15, s0, s0
2400f106:	ee38 8a27 	vadd.f32	s16, s16, s15
2400f10a:	ee37 7a07 	vadd.f32	s14, s14, s14
2400f10e:	ee20 0a07 	vmul.f32	s0, s0, s14
2400f112:	ee38 0a40 	vsub.f32	s0, s16, s0
2400f116:	ee86 0a80 	vdiv.f32	s0, s13, s0
2400f11a:	f001 f815 	bl	24010148 <fastsqrtf>
2400f11e:	ee28 0a80 	vmul.f32	s0, s17, s0
2400f122:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
2400f126:	edd4 7a07 	vldr	s15, [r4, #28]
2400f12a:	ee67 7a80 	vmul.f32	s15, s15, s0
2400f12e:	edc4 7a07 	vstr	s15, [r4, #28]
2400f132:	edd4 7a08 	vldr	s15, [r4, #32]
2400f136:	ee67 7a80 	vmul.f32	s15, s15, s0
2400f13a:	edc4 7a08 	vstr	s15, [r4, #32]
2400f13e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
2400f142:	ee27 0a80 	vmul.f32	s0, s15, s0
2400f146:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2400f14a:	e6eb      	b.n	2400ef24 <tVZFilter_calcCoeffs+0x48>
2400f14c:	40490fdb 	.word	0x40490fdb
2400f150:	00000000 	.word	0x00000000

2400f154 <tVZFilter_setFreq>:
    f->B = LEAF_clip(0.0f, B, 100.0f);
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
    tVZFilter_calcCoeffs(vf);
}
void   tVZFilter_setFreq           (tVZFilter* const vf, Lfloat freq)
{
2400f154:	b538      	push	{r3, r4, r5, lr}
2400f156:	4604      	mov	r4, r0
2400f158:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
2400f15c:	6805      	ldr	r5, [r0, #0]
    
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2400f15e:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
2400f162:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400f166:	ee21 1a27 	vmul.f32	s2, s2, s15
2400f16a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 2400f180 <tVZFilter_setFreq+0x2c>
2400f16e:	f01f febf 	bl	2402eef0 <__LEAF_clip_veneer>
2400f172:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
    tVZFilter_calcCoeffs(vf);
2400f176:	4620      	mov	r0, r4
2400f178:	f7ff feb0 	bl	2400eedc <tVZFilter_calcCoeffs>
}
2400f17c:	bd38      	pop	{r3, r4, r5, pc}
2400f17e:	bf00      	nop
2400f180:	00000000 	.word	0x00000000

2400f184 <tVZFilter_setFreqFast>:

void    tVZFilter_setFreqFast     (tVZFilter* const vf, Lfloat cutoff)
{
2400f184:	b510      	push	{r4, lr}
2400f186:	ed2d 8b04 	vpush	{d8-d9}
	 _tVZFilter* f = *vf;
2400f18a:	6804      	ldr	r4, [r0, #0]
    int intVer = (int)cutoff;
2400f18c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2400f190:	ee17 3a90 	vmov	r3, s15
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2400f194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400f198:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2400f19c:	4a9e      	ldr	r2, [pc, #632]	; (2400f418 <tVZFilter_setFreqFast+0x294>)
2400f19e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
2400f1a2:	edd1 7a00 	vldr	s15, [r1]
2400f1a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400f1aa:	ee37 7a40 	vsub.f32	s14, s14, s0
2400f1ae:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f1b2:	3301      	adds	r3, #1
2400f1b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400f1b8:	ed93 7a00 	vldr	s14, [r3]
2400f1bc:	ee27 0a00 	vmul.f32	s0, s14, s0
2400f1c0:	ee37 0a80 	vadd.f32	s0, s15, s0
2400f1c4:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
2400f1c8:	7923      	ldrb	r3, [r4, #4]
2400f1ca:	2b0a      	cmp	r3, #10
2400f1cc:	d80e      	bhi.n	2400f1ec <tVZFilter_setFreqFast+0x68>
2400f1ce:	e8df f003 	tbb	[pc, r3]
2400f1d2:	262d      	.short	0x262d
2400f1d4:	4e473b34 	.word	0x4e473b34
2400f1d8:	06d0ab91 	.word	0x06d0ab91
2400f1dc:	c5          	.byte	0xc5
2400f1dd:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
2400f1de:	6b22      	ldr	r2, [r4, #48]	; 0x30
2400f1e0:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
2400f1e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f1e6:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
2400f1e8:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
2400f1ea:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;

    }
    f->R2Plusg = f->R2+f->g;
2400f1ec:	edd4 7a05 	vldr	s15, [r4, #20]
2400f1f0:	ed94 7a04 	vldr	s14, [r4, #16]
2400f1f4:	ee77 6a87 	vadd.f32	s13, s15, s14
2400f1f8:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400f1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400f204:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400f208:	ee27 7a07 	vmul.f32	s14, s14, s14
2400f20c:	ee77 7a87 	vadd.f32	s15, s15, s14
2400f210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400f214:	ed84 7a06 	vstr	s14, [r4, #24]
}
2400f218:	ecbd 8b04 	vpop	{d8-d9}
2400f21c:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2400f21e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f222:	61e3      	str	r3, [r4, #28]
2400f224:	2300      	movs	r3, #0
2400f226:	6223      	str	r3, [r4, #32]
2400f228:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f22a:	e7df      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2400f22c:	2300      	movs	r3, #0
2400f22e:	61e3      	str	r3, [r4, #28]
2400f230:	6223      	str	r3, [r4, #32]
2400f232:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f236:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f238:	e7d8      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2400f23a:	2300      	movs	r3, #0
2400f23c:	61e3      	str	r3, [r4, #28]
2400f23e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
2400f242:	6222      	str	r2, [r4, #32]
2400f244:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f246:	e7d1      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2400f248:	2300      	movs	r3, #0
2400f24a:	61e3      	str	r3, [r4, #28]
2400f24c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400f250:	ed94 7a05 	vldr	s14, [r4, #20]
2400f254:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f258:	edc4 7a08 	vstr	s15, [r4, #32]
2400f25c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f25e:	e7c5      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2400f260:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f264:	61e3      	str	r3, [r4, #28]
2400f266:	2200      	movs	r2, #0
2400f268:	6222      	str	r2, [r4, #32]
2400f26a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f26c:	e7be      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2400f26e:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
2400f272:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2400f276:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400f27a:	ee60 0ae7 	vnmul.f32	s1, s1, s15
2400f27e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2400f282:	f000 ffa9 	bl	240101d8 <fastPowf>
2400f286:	ee28 8a00 	vmul.f32	s16, s16, s0
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2400f28a:	ed9f 0a64 	vldr	s0, [pc, #400]	; 2400f41c <tVZFilter_setFreqFast+0x298>
2400f28e:	ee28 8a00 	vmul.f32	s16, s16, s0
2400f292:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
2400f296:	ee28 0a00 	vmul.f32	s0, s16, s0
2400f29a:	f000 ff3d 	bl	24010118 <fastertanf>
            Lfloat r  = f->g/wl;
2400f29e:	ed94 7a04 	vldr	s14, [r4, #16]
2400f2a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2400f2a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400f2aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
2400f2ae:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
2400f2b2:	ee37 7a08 	vadd.f32	s14, s14, s16
2400f2b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
2400f2ba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2400f2be:	ee30 0a67 	vsub.f32	s0, s0, s15
2400f2c2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400f2c6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
2400f2ca:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f2ce:	ee80 0a27 	vdiv.f32	s0, s0, s15
2400f2d2:	f000 ff39 	bl	24010148 <fastsqrtf>
2400f2d6:	ee30 0a00 	vadd.f32	s0, s0, s0
2400f2da:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400f2de:	ed84 8a07 	vstr	s16, [r4, #28]
2400f2e2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400f2e6:	ee20 0a27 	vmul.f32	s0, s0, s15
2400f2ea:	ed84 0a08 	vstr	s0, [r4, #32]
2400f2ee:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
            break;
2400f2f2:	e77b      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            Lfloat A = fastsqrtf(f->G);
2400f2f4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2400f2f8:	f000 ff26 	bl	24010148 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400f2fc:	f000 ff24 	bl	24010148 <fastsqrtf>
2400f300:	ed94 7a04 	vldr	s14, [r4, #16]
2400f304:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400f308:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2400f30c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400f310:	edc4 7a07 	vstr	s15, [r4, #28]
2400f314:	ed94 7a05 	vldr	s14, [r4, #20]
2400f318:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f31c:	edc4 7a08 	vstr	s15, [r4, #32]
2400f320:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f324:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f326:	e761      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            Lfloat A = fastsqrtf(f->G);
2400f328:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2400f32c:	f000 ff0c 	bl	24010148 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400f330:	f000 ff0a 	bl	24010148 <fastsqrtf>
2400f334:	edd4 7a04 	vldr	s15, [r4, #16]
2400f338:	ee67 7a80 	vmul.f32	s15, s15, s0
2400f33c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2400f340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f344:	61e3      	str	r3, [r4, #28]
2400f346:	edd4 7a05 	vldr	s15, [r4, #20]
2400f34a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400f34e:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f352:	edc4 7a08 	vstr	s15, [r4, #32]
2400f356:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
2400f35a:	e747      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
2400f35c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f360:	61e3      	str	r3, [r4, #28]
2400f362:	edd4 7a05 	vldr	s15, [r4, #20]
2400f366:	eef1 7a67 	vneg.f32	s15, s15
2400f36a:	edc4 7a08 	vstr	s15, [r4, #32]
2400f36e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400f370:	e73c      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
            Lfloat x  = (2.0f*f->m-1.0f);
2400f372:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
2400f376:	ee38 8a08 	vadd.f32	s16, s16, s16
2400f37a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2400f37e:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400f382:	ed9f 9a27 	vldr	s18, [pc, #156]	; 2400f420 <tVZFilter_setFreqFast+0x29c>
2400f386:	eef0 0a49 	vmov.f32	s1, s18
2400f38a:	eeb1 0a48 	vneg.f32	s0, s16
2400f38e:	f001 f9d1 	bl	24010734 <maximum>
2400f392:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400f396:	eef0 0a49 	vmov.f32	s1, s18
2400f39a:	eeb0 0a48 	vmov.f32	s0, s16
2400f39e:	f001 f9d5 	bl	2401074c <minimum>
2400f3a2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
2400f3a6:	ee28 8a08 	vmul.f32	s16, s16, s16
2400f3aa:	ee38 8ac8 	vsub.f32	s16, s17, s16
2400f3ae:	ed84 8a08 	vstr	s16, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400f3b2:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
2400f3b6:	edd4 7a05 	vldr	s15, [r4, #20]
2400f3ba:	ee67 6aa7 	vmul.f32	s13, s15, s15
2400f3be:	ed94 7a07 	vldr	s14, [r4, #28]
2400f3c2:	ee67 7a07 	vmul.f32	s15, s14, s14
2400f3c6:	ee28 8a08 	vmul.f32	s16, s16, s16
2400f3ca:	ee37 8a88 	vadd.f32	s16, s15, s16
2400f3ce:	ee60 7a00 	vmul.f32	s15, s0, s0
2400f3d2:	ee38 8a27 	vadd.f32	s16, s16, s15
2400f3d6:	ee37 7a07 	vadd.f32	s14, s14, s14
2400f3da:	ee20 0a07 	vmul.f32	s0, s0, s14
2400f3de:	ee38 0a40 	vsub.f32	s0, s16, s0
2400f3e2:	ee86 0a80 	vdiv.f32	s0, s13, s0
2400f3e6:	f000 feaf 	bl	24010148 <fastsqrtf>
2400f3ea:	ee28 0a80 	vmul.f32	s0, s17, s0
2400f3ee:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
2400f3f2:	edd4 7a07 	vldr	s15, [r4, #28]
2400f3f6:	ee67 7a80 	vmul.f32	s15, s15, s0
2400f3fa:	edc4 7a07 	vstr	s15, [r4, #28]
2400f3fe:	edd4 7a08 	vldr	s15, [r4, #32]
2400f402:	ee67 7a80 	vmul.f32	s15, s15, s0
2400f406:	edc4 7a08 	vstr	s15, [r4, #32]
2400f40a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
2400f40e:	ee27 0a80 	vmul.f32	s0, s15, s0
2400f412:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2400f416:	e6e9      	b.n	2400f1ec <tVZFilter_setFreqFast+0x68>
2400f418:	24016444 	.word	0x24016444
2400f41c:	40490fdb 	.word	0x40490fdb
2400f420:	00000000 	.word	0x00000000

2400f424 <tVZFilter_setGain>:
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
    tVZFilter_calcCoeffsEfficientBP(vf);
}

void   tVZFilter_setGain                (tVZFilter* const vf, Lfloat gain)
{
2400f424:	b538      	push	{r3, r4, r5, lr}
2400f426:	4604      	mov	r4, r0
2400f428:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
2400f42c:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2400f42e:	ed9f 1a09 	vldr	s2, [pc, #36]	; 2400f454 <tVZFilter_setGain+0x30>
2400f432:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2400f458 <tVZFilter_setGain+0x34>
2400f436:	f01f fd5b 	bl	2402eef0 <__LEAF_clip_veneer>
2400f43a:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
2400f43e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400f442:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400f446:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
    tVZFilter_calcCoeffs(vf);
2400f44a:	4620      	mov	r0, r4
2400f44c:	f7ff fd46 	bl	2400eedc <tVZFilter_calcCoeffs>
}
2400f450:	bd38      	pop	{r3, r4, r5, pc}
2400f452:	bf00      	nop
2400f454:	457a0000 	.word	0x457a0000
2400f458:	358637bd 	.word	0x358637bd

2400f45c <tVZFilter_setResonance>:


void   tVZFilter_setResonance                (tVZFilter* const vf, Lfloat res)
{
2400f45c:	b538      	push	{r3, r4, r5, lr}
2400f45e:	4604      	mov	r4, r0
2400f460:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
2400f464:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2400f466:	ed9f 1a09 	vldr	s2, [pc, #36]	; 2400f48c <tVZFilter_setResonance+0x30>
2400f46a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2400f490 <tVZFilter_setResonance+0x34>
2400f46e:	f01f fd3f 	bl	2402eef0 <__LEAF_clip_veneer>
2400f472:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
2400f476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400f47a:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400f47e:	edc5 7a05 	vstr	s15, [r5, #20]
    tVZFilter_calcCoeffs(vf);
2400f482:	4620      	mov	r0, r4
2400f484:	f7ff fd2a 	bl	2400eedc <tVZFilter_calcCoeffs>
}
2400f488:	bd38      	pop	{r3, r4, r5, pc}
2400f48a:	bf00      	nop
2400f48c:	42c80000 	.word	0x42c80000
2400f490:	3c23d70a 	.word	0x3c23d70a

2400f494 <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
2400f494:	b510      	push	{r4, lr}
2400f496:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
2400f49a:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
2400f49c:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
2400f4a0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
2400f4a4:	ee60 0a60 	vnmul.f32	s1, s0, s1
2400f4a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2400f4ac:	f004 fd58 	bl	24013f60 <powf>
2400f4b0:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2400f4b4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 2400f4fc <tVZFilter_BandwidthToR+0x68>
2400f4b8:	ee28 8a00 	vmul.f32	s16, s16, s0
2400f4bc:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
2400f4c0:	ee28 0a00 	vmul.f32	s0, s16, s0
2400f4c4:	f004 feac 	bl	24014220 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
2400f4c8:	edd4 7a04 	vldr	s15, [r4, #16]
2400f4cc:	ee80 7a27 	vdiv.f32	s14, s0, s15
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2400f4d0:	ee67 7a07 	vmul.f32	s15, s14, s14
2400f4d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400f4d8:	ee30 0a67 	vsub.f32	s0, s0, s15
2400f4dc:	ee20 0a00 	vmul.f32	s0, s0, s0
2400f4e0:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
2400f4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
2400f4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f4ec:	ee80 0a27 	vdiv.f32	s0, s0, s15
2400f4f0:	f004 ff62 	bl	240143b8 <sqrtf>
}
2400f4f4:	ecbd 8b02 	vpop	{d8}
2400f4f8:	bd10      	pop	{r4, pc}
2400f4fa:	bf00      	nop
2400f4fc:	40490fdb 	.word	0x40490fdb

2400f500 <tVZFilter_setBandwidth>:
{
2400f500:	b538      	push	{r3, r4, r5, lr}
2400f502:	4604      	mov	r4, r0
2400f504:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
2400f508:	6805      	ldr	r5, [r0, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
2400f50a:	ed9f 1a09 	vldr	s2, [pc, #36]	; 2400f530 <tVZFilter_setBandwidth+0x30>
2400f50e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2400f534 <tVZFilter_setBandwidth+0x34>
2400f512:	f01f fced 	bl	2402eef0 <__LEAF_clip_veneer>
2400f516:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
2400f51a:	4620      	mov	r0, r4
2400f51c:	f7ff ffba 	bl	2400f494 <tVZFilter_BandwidthToR>
2400f520:	ee30 0a00 	vadd.f32	s0, s0, s0
2400f524:	ed85 0a05 	vstr	s0, [r5, #20]
    tVZFilter_calcCoeffs(vf);
2400f528:	4620      	mov	r0, r4
2400f52a:	f7ff fcd7 	bl	2400eedc <tVZFilter_calcCoeffs>
}
2400f52e:	bd38      	pop	{r3, r4, r5, pc}
2400f530:	42c80000 	.word	0x42c80000
2400f534:	00000000 	.word	0x00000000

2400f538 <tVZFilter_initToPool>:
{
2400f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400f53a:	ed2d 8b04 	vpush	{d8-d9}
2400f53e:	4605      	mov	r5, r0
2400f540:	460e      	mov	r6, r1
2400f542:	eeb0 9a40 	vmov.f32	s18, s0
2400f546:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
2400f54a:	6817      	ldr	r7, [r2, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
2400f54c:	4639      	mov	r1, r7
2400f54e:	204c      	movs	r0, #76	; 0x4c
2400f550:	f001 f927 	bl	240107a2 <mpool_alloc>
2400f554:	4604      	mov	r4, r0
2400f556:	6028      	str	r0, [r5, #0]
    f->mempool = m;
2400f558:	6007      	str	r7, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2400f55a:	687b      	ldr	r3, [r7, #4]
    f->sampleRate = leaf->sampleRate;
2400f55c:	ed93 1a00 	vldr	s2, [r3]
2400f560:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
2400f564:	685b      	ldr	r3, [r3, #4]
2400f566:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2400f568:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2400f56c:	eddf 8a1d 	vldr	s17, [pc, #116]	; 2400f5e4 <tVZFilter_initToPool+0xac>
2400f570:	ee21 1a29 	vmul.f32	s2, s2, s19
2400f574:	eef0 0a49 	vmov.f32	s1, s18
2400f578:	eeb0 0a68 	vmov.f32	s0, s17
2400f57c:	f01f fcb8 	bl	2402eef0 <__LEAF_clip_veneer>
2400f580:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->type = type;
2400f584:	7126      	strb	r6, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
2400f586:	4b18      	ldr	r3, [pc, #96]	; (2400f5e8 <tVZFilter_initToPool+0xb0>)
2400f588:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.0f/ONE_OVER_SQRT2;
2400f58a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 2400f5ec <tVZFilter_initToPool+0xb4>
2400f58e:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->B    = bandWidth;
2400f592:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->m    = 0.0f;
2400f596:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
2400f59a:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
2400f59e:	edc4 8a02 	vstr	s17, [r4, #8]
    f->s2   = 0.0f;
2400f5a2:	edc4 8a03 	vstr	s17, [r4, #12]
    f->R2   = f->invG;
2400f5a6:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
2400f5aa:	edd4 7a04 	vldr	s15, [r4, #16]
2400f5ae:	ee77 7a87 	vadd.f32	s15, s15, s14
2400f5b2:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2400f5b6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2400f5f0 <tVZFilter_initToPool+0xb8>
2400f5ba:	ee20 0a27 	vmul.f32	s0, s0, s15
2400f5be:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
2400f5c2:	ee20 0a27 	vmul.f32	s0, s0, s15
2400f5c6:	f004 fe2b 	bl	24014220 <tanf>
2400f5ca:	ed84 0a04 	vstr	s0, [r4, #16]
    tVZFilter_setBandwidth(vf,f->B);
2400f5ce:	eeb0 0a48 	vmov.f32	s0, s16
2400f5d2:	4628      	mov	r0, r5
2400f5d4:	f7ff ff94 	bl	2400f500 <tVZFilter_setBandwidth>
    tVZFilter_calcCoeffs(vf);
2400f5d8:	4628      	mov	r0, r5
2400f5da:	f7ff fc7f 	bl	2400eedc <tVZFilter_calcCoeffs>
}
2400f5de:	ecbd 8b04 	vpop	{d8-d9}
2400f5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400f5e4:	00000000 	.word	0x00000000
2400f5e8:	3f3504f3 	.word	0x3f3504f3
2400f5ec:	3fb504f3 	.word	0x3fb504f3
2400f5f0:	40490fdb 	.word	0x40490fdb

2400f5f4 <tVZFilter_init>:
{
2400f5f4:	b508      	push	{r3, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
2400f5f6:	3218      	adds	r2, #24
2400f5f8:	f7ff ff9e 	bl	2400f538 <tVZFilter_initToPool>
}
2400f5fc:	bd08      	pop	{r3, pc}

2400f5fe <tVZFilter_setSampleRate>:
    // center-frequencies
    return fastsqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
}

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
2400f5fe:	b508      	push	{r3, lr}
    _tVZFilter* f = *vf;
2400f600:	6803      	ldr	r3, [r0, #0]
    f->sampleRate = sr;
2400f602:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
2400f606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400f60a:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400f60e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    tVZFilter_calcCoeffs(vf);
2400f612:	f7ff fc63 	bl	2400eedc <tVZFilter_calcCoeffs>
}
2400f616:	bd08      	pop	{r3, pc}

2400f618 <tDiodeFilter_initToPool>:
{
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
2400f618:	b570      	push	{r4, r5, r6, lr}
2400f61a:	ed2d 8b02 	vpush	{d8}
2400f61e:	4606      	mov	r6, r0
2400f620:	eef0 8a40 	vmov.f32	s17, s0
2400f624:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
2400f628:	680d      	ldr	r5, [r1, #0]
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
2400f62a:	4629      	mov	r1, r5
2400f62c:	2040      	movs	r0, #64	; 0x40
2400f62e:	f001 f8b8 	bl	240107a2 <mpool_alloc>
2400f632:	4604      	mov	r4, r0
2400f634:	6030      	str	r0, [r6, #0]
    f->mempool = m;
2400f636:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
2400f638:	686b      	ldr	r3, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
2400f63a:	ed93 0a01 	vldr	s0, [r3, #4]
2400f63e:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
    f->cutoff = cutoff;
2400f642:	edc0 8a01 	vstr	s17, [r0, #4]
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
2400f646:	eddf 7a19 	vldr	s15, [pc, #100]	; 2400f6ac <tDiodeFilter_initToPool+0x94>
2400f64a:	ee68 8aa7 	vmul.f32	s17, s17, s15
2400f64e:	ee20 0a28 	vmul.f32	s0, s0, s17
2400f652:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2400f656:	f004 faaf 	bl	24013bb8 <tan>
2400f65a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2400f65e:	ed84 0a02 	vstr	s0, [r4, #8]
    f->r = (7.f * resonance + 0.5f);
2400f662:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
2400f666:	ee28 8a20 	vmul.f32	s16, s16, s1
2400f66a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400f66e:	ee38 8a27 	vadd.f32	s16, s16, s15
2400f672:	ed84 8a03 	vstr	s16, [r4, #12]
    f->Vt = 0.5f;
2400f676:	edc4 7a04 	vstr	s15, [r4, #16]
    f->n = 1.836f;
2400f67a:	4b0d      	ldr	r3, [pc, #52]	; (2400f6b0 <tDiodeFilter_initToPool+0x98>)
2400f67c:	6163      	str	r3, [r4, #20]
    f->zi = 0.0f; //previous input value
2400f67e:	2300      	movs	r3, #0
2400f680:	61e3      	str	r3, [r4, #28]
    f->gamma = f->Vt*f->n;
2400f682:	4b0c      	ldr	r3, [pc, #48]	; (2400f6b4 <tDiodeFilter_initToPool+0x9c>)
2400f684:	61a3      	str	r3, [r4, #24]
    f->s0 = 0.01f;
2400f686:	4b0c      	ldr	r3, [pc, #48]	; (2400f6b8 <tDiodeFilter_initToPool+0xa0>)
2400f688:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s1 = 0.02f;
2400f68a:	4b0c      	ldr	r3, [pc, #48]	; (2400f6bc <tDiodeFilter_initToPool+0xa4>)
2400f68c:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
2400f68e:	4b0c      	ldr	r3, [pc, #48]	; (2400f6c0 <tDiodeFilter_initToPool+0xa8>)
2400f690:	6363      	str	r3, [r4, #52]	; 0x34
    f->s3 = 0.04f;
2400f692:	4b0c      	ldr	r3, [pc, #48]	; (2400f6c4 <tDiodeFilter_initToPool+0xac>)
2400f694:	63a3      	str	r3, [r4, #56]	; 0x38
    f->g0inv = 1.f/(2.f*f->Vt);
2400f696:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400f69a:	6223      	str	r3, [r4, #32]
    f->g1inv = 1.f/(2.f*f->gamma);
2400f69c:	4b0a      	ldr	r3, [pc, #40]	; (2400f6c8 <tDiodeFilter_initToPool+0xb0>)
2400f69e:	6263      	str	r3, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
2400f6a0:	4b0a      	ldr	r3, [pc, #40]	; (2400f6cc <tDiodeFilter_initToPool+0xb4>)
2400f6a2:	62a3      	str	r3, [r4, #40]	; 0x28
}
2400f6a4:	ecbd 8b02 	vpop	{d8}
2400f6a8:	bd70      	pop	{r4, r5, r6, pc}
2400f6aa:	bf00      	nop
2400f6ac:	40490fdb 	.word	0x40490fdb
2400f6b0:	3feb020c 	.word	0x3feb020c
2400f6b4:	3f6b020c 	.word	0x3f6b020c
2400f6b8:	3c23d70a 	.word	0x3c23d70a
2400f6bc:	3ca3d70a 	.word	0x3ca3d70a
2400f6c0:	3cf5c28f 	.word	0x3cf5c28f
2400f6c4:	3d23d70a 	.word	0x3d23d70a
2400f6c8:	3f0b6efd 	.word	0x3f0b6efd
2400f6cc:	3e39e952 	.word	0x3e39e952

2400f6d0 <tDiodeFilter_init>:
{
2400f6d0:	b508      	push	{r3, lr}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
2400f6d2:	3118      	adds	r1, #24
2400f6d4:	f7ff ffa0 	bl	2400f618 <tDiodeFilter_initToPool>
}
2400f6d8:	bd08      	pop	{r3, pc}
	...

2400f6dc <tanhXdX>:
    mpool_free((char*)f, f->mempool);
}

Lfloat tanhXdX(Lfloat x)
{
    Lfloat a = x*x;
2400f6dc:	ee20 7a00 	vmul.f32	s14, s0, s0
        output = testVal;
        
    }
    return ((a + 105.0f)*a + 945.0f) / output;
#endif
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400f6e0:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
2400f6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
2400f6e8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2400f714 <tanhXdX+0x38>
2400f6ec:	ee77 7a80 	vadd.f32	s15, s15, s0
2400f6f0:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f6f4:	eddf 6a08 	vldr	s13, [pc, #32]	; 2400f718 <tanhXdX+0x3c>
2400f6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    return ((a + 105.0f)*a + 945.0f) / testVal;
2400f6fc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 2400f71c <tanhXdX+0x40>
2400f700:	ee37 0a00 	vadd.f32	s0, s14, s0
2400f704:	ee20 0a07 	vmul.f32	s0, s0, s14
2400f708:	ee30 0a26 	vadd.f32	s0, s0, s13
}
2400f70c:	ee80 0a27 	vdiv.f32	s0, s0, s15
2400f710:	4770      	bx	lr
2400f712:	bf00      	nop
2400f714:	43d20000 	.word	0x43d20000
2400f718:	446c4000 	.word	0x446c4000
2400f71c:	42d20000 	.word	0x42d20000

2400f720 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
2400f720:	b510      	push	{r4, lr}
2400f722:	ed2d 8b0c 	vpush	{d8-d13}
2400f726:	eeb0 ca40 	vmov.f32	s24, s0
    _tDiodeFilter* f = *vf;
2400f72a:	6804      	ldr	r4, [r0, #0]
#ifdef SAFE_FILTER
    int errorCheck = 0;
#endif
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
2400f72c:	ed94 0a07 	vldr	s0, [r4, #28]
2400f730:	ee30 0a0c 	vadd.f32	s0, s0, s24
2400f734:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400f738:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400f73c:	ed94 da02 	vldr	s26, [r4, #8]
2400f740:	edd4 ba03 	vldr	s23, [r4, #12]
2400f744:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
2400f748:	ee6b 7aa9 	vmul.f32	s15, s23, s19
2400f74c:	ee30 0a67 	vsub.f32	s0, s0, s15
2400f750:	ed94 aa08 	vldr	s20, [r4, #32]
2400f754:	ee20 0a0a 	vmul.f32	s0, s0, s20
2400f758:	f7ff ffc0 	bl	2400f6dc <tanhXdX>
2400f75c:	ee2d 0a00 	vmul.f32	s0, s26, s0
2400f760:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400f764:	ed94 ba0c 	vldr	s22, [r4, #48]	; 0x30
2400f768:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
2400f76c:	ee3b 0a6c 	vsub.f32	s0, s22, s25
2400f770:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
2400f774:	ee20 0a28 	vmul.f32	s0, s0, s17
2400f778:	f7ff ffb0 	bl	2400f6dc <tanhXdX>
2400f77c:	ee2d 8a00 	vmul.f32	s16, s26, s0
2400f780:	ee28 8a88 	vmul.f32	s16, s17, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2400f784:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
2400f788:	ee3a 0acb 	vsub.f32	s0, s21, s22
2400f78c:	ee28 0a80 	vmul.f32	s0, s17, s0
2400f790:	f7ff ffa4 	bl	2400f6dc <tanhXdX>
2400f794:	ee2d 9a00 	vmul.f32	s18, s26, s0
2400f798:	ee28 9a89 	vmul.f32	s18, s17, s18
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2400f79c:	ee39 0aea 	vsub.f32	s0, s19, s21
2400f7a0:	ee28 0a80 	vmul.f32	s0, s17, s0
2400f7a4:	f7ff ff9a 	bl	2400f6dc <tanhXdX>
2400f7a8:	ee2d 0a00 	vmul.f32	s0, s26, s0
2400f7ac:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2400f7b0:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
2400f7b4:	ee29 0aad 	vmul.f32	s0, s19, s27
2400f7b8:	f7ff ff90 	bl	2400f6dc <tanhXdX>
2400f7bc:	ee2d 7a00 	vmul.f32	s14, s26, s0
2400f7c0:	ee2d 7a87 	vmul.f32	s14, s27, s14
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400f7c4:	ee79 6aaa 	vadd.f32	s13, s19, s21
2400f7c8:	ee7b 7a2a 	vadd.f32	s15, s22, s21
2400f7cc:	ee39 6aa7 	vadd.f32	s12, s19, s15
2400f7d0:	ee7b 7a2c 	vadd.f32	s15, s22, s25
2400f7d4:	ee7a 7aa7 	vadd.f32	s15, s21, s15
2400f7d8:	ee79 7aa7 	vadd.f32	s15, s19, s15
2400f7dc:	ee6c 5a0a 	vmul.f32	s11, s24, s20
2400f7e0:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400f7e4:	ee67 7a88 	vmul.f32	s15, s15, s16
2400f7e8:	ee76 7a27 	vadd.f32	s15, s12, s15
2400f7ec:	ee67 7a89 	vmul.f32	s15, s15, s18
2400f7f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400f7f4:	ee3a 6aaa 	vadd.f32	s12, s21, s21
2400f7f8:	ee79 7aa9 	vadd.f32	s15, s19, s19
2400f7fc:	ee36 6a27 	vadd.f32	s12, s12, s15
2400f800:	ee26 6a08 	vmul.f32	s12, s12, s16
2400f804:	ee76 6a86 	vadd.f32	s13, s13, s12
2400f808:	ee66 6aa8 	vmul.f32	s13, s13, s17
2400f80c:	ee79 6aa6 	vadd.f32	s13, s19, s13
2400f810:	ee27 6a88 	vmul.f32	s12, s15, s16
2400f814:	ee76 6a86 	vadd.f32	s13, s13, s12
2400f818:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
2400f81c:	ee29 6a85 	vmul.f32	s12, s19, s10
2400f820:	ee26 6a08 	vmul.f32	s12, s12, s16
2400f824:	ee77 7a86 	vadd.f32	s15, s15, s12
2400f828:	ee67 7a89 	vmul.f32	s15, s15, s18
2400f82c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400f830:	ee77 5a07 	vadd.f32	s11, s14, s14
2400f834:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
2400f838:	ee75 7aa4 	vadd.f32	s15, s11, s9
2400f83c:	ee67 7a88 	vmul.f32	s15, s15, s16
2400f840:	ee77 7a87 	vadd.f32	s15, s15, s14
2400f844:	ee2b 6a8a 	vmul.f32	s12, s23, s20
2400f848:	ee36 6a07 	vadd.f32	s12, s12, s14
2400f84c:	ee36 6a24 	vadd.f32	s12, s12, s9
2400f850:	ee26 6a08 	vmul.f32	s12, s12, s16
2400f854:	ee36 6a07 	vadd.f32	s12, s12, s14
2400f858:	ee36 6a05 	vadd.f32	s12, s12, s10
2400f85c:	ee26 6a09 	vmul.f32	s12, s12, s18
2400f860:	ee77 7a86 	vadd.f32	s15, s15, s12
2400f864:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
2400f868:	ee77 7aa4 	vadd.f32	s15, s15, s9
2400f86c:	ee67 7aa8 	vmul.f32	s15, s15, s17
2400f870:	ee77 7a87 	vadd.f32	s15, s15, s14
2400f874:	ee35 6aa4 	vadd.f32	s12, s11, s9
2400f878:	ee26 6a08 	vmul.f32	s12, s12, s16
2400f87c:	ee77 7a86 	vadd.f32	s15, s15, s12
2400f880:	ee27 6a05 	vmul.f32	s12, s14, s10
2400f884:	ee36 5a05 	vadd.f32	s10, s12, s10
2400f888:	ee25 5a08 	vmul.f32	s10, s10, s16
2400f88c:	ee75 5a85 	vadd.f32	s11, s11, s10
2400f890:	ee75 5aa4 	vadd.f32	s11, s11, s9
2400f894:	ee65 5a89 	vmul.f32	s11, s11, s18
2400f898:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400f89c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400f8a0:	ee77 7a86 	vadd.f32	s15, s15, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
2400f8a4:	eef5 7a40 	vcmp.f32	s15, #0.0
2400f8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f8ac:	d101      	bne.n	2400f8b2 <tDiodeFilter_tick+0x192>
    {
        tempy3denom = 0.000001f;
2400f8ae:	eddf 7a41 	vldr	s15, [pc, #260]	; 2400f9b4 <tDiodeFilter_tick+0x294>
    }
    y3 = y3 / tempy3denom;
2400f8b2:	eec6 5aa7 	vdiv.f32	s11, s13, s15
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
2400f8b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
2400f8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f8be:	d101      	bne.n	2400f8c4 <tDiodeFilter_tick+0x1a4>
    {
        t1 = 0.000001f;
2400f8c0:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 2400f9b4 <tDiodeFilter_tick+0x294>
    }
    if (t2 == 0.0f)
2400f8c4:	eeb5 9a40 	vcmp.f32	s18, #0.0
2400f8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f8cc:	d101      	bne.n	2400f8d2 <tDiodeFilter_tick+0x1b2>
    {
        t2 = 0.000001f;
2400f8ce:	ed9f 9a39 	vldr	s18, [pc, #228]	; 2400f9b4 <tDiodeFilter_tick+0x294>
    }
    if (t3 == 0.0f)
2400f8d2:	eef5 8a40 	vcmp.f32	s17, #0.0
2400f8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f8da:	d101      	bne.n	2400f8e0 <tDiodeFilter_tick+0x1c0>
    {
        t3 = 0.000001f;
2400f8dc:	eddf 8a35 	vldr	s17, [pc, #212]	; 2400f9b4 <tDiodeFilter_tick+0x294>
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2400f8e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400f8e4:	ee77 6a27 	vadd.f32	s13, s14, s15
2400f8e8:	ee76 6aa8 	vadd.f32	s13, s13, s17
2400f8ec:	ee66 6aa5 	vmul.f32	s13, s13, s11
2400f8f0:	ee79 6ae6 	vsub.f32	s13, s19, s13
2400f8f4:	eef1 6a66 	vneg.f32	s13, s13
2400f8f8:	ee86 5aa8 	vdiv.f32	s10, s13, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2400f8fc:	ee38 6aa7 	vadd.f32	s12, s17, s15
2400f900:	ee36 6a09 	vadd.f32	s12, s12, s18
2400f904:	ee26 6a05 	vmul.f32	s12, s12, s10
2400f908:	ee3a 6ac6 	vsub.f32	s12, s21, s12
2400f90c:	ee68 6aa5 	vmul.f32	s13, s17, s11
2400f910:	ee36 6a26 	vadd.f32	s12, s12, s13
2400f914:	eeb1 6a46 	vneg.f32	s12, s12
2400f918:	eec6 6a09 	vdiv.f32	s13, s12, s18
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2400f91c:	ee79 7a27 	vadd.f32	s15, s18, s15
2400f920:	ee77 7a88 	vadd.f32	s15, s15, s16
2400f924:	ee67 7aa6 	vmul.f32	s15, s15, s13
2400f928:	ee7b 7a67 	vsub.f32	s15, s22, s15
2400f92c:	ee29 6a05 	vmul.f32	s12, s18, s10
2400f930:	ee77 7a86 	vadd.f32	s15, s15, s12
2400f934:	eef1 7a67 	vneg.f32	s15, s15
2400f938:	ee87 6a88 	vdiv.f32	s12, s15, s16
    Lfloat xx = (in - f->r*y3);
2400f93c:	ee2b 0aa5 	vmul.f32	s0, s23, s11
2400f940:	ee7c 7a40 	vsub.f32	s15, s24, s0
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2400f944:	ee2a aa27 	vmul.f32	s20, s20, s15
2400f948:	ee76 7ac6 	vsub.f32	s15, s13, s12
2400f94c:	ee27 8a88 	vmul.f32	s16, s15, s16
2400f950:	ee3a aa08 	vadd.f32	s20, s20, s16
2400f954:	ee3a aa0a 	vadd.f32	s20, s20, s20
2400f958:	ee3c aa8a 	vadd.f32	s20, s25, s20
2400f95c:	ed84 aa0b 	vstr	s20, [r4, #44]	; 0x2c
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400f960:	ee75 6a66 	vsub.f32	s13, s10, s13
2400f964:	ee26 9a89 	vmul.f32	s18, s13, s18
2400f968:	ee39 8a48 	vsub.f32	s16, s18, s16
2400f96c:	ee38 8a08 	vadd.f32	s16, s16, s16
2400f970:	ee3b 8a08 	vadd.f32	s16, s22, s16
2400f974:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400f978:	ee35 5ac5 	vsub.f32	s10, s11, s10
2400f97c:	ee65 8a28 	vmul.f32	s17, s10, s17
2400f980:	ee38 9ac9 	vsub.f32	s18, s17, s18
2400f984:	ee39 9a09 	vadd.f32	s18, s18, s18
2400f988:	ee3a 9a89 	vadd.f32	s18, s21, s18
2400f98c:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2400f990:	ee27 7a65 	vnmul.f32	s14, s14, s11
2400f994:	ee37 7a68 	vsub.f32	s14, s14, s17
2400f998:	ee37 7a07 	vadd.f32	s14, s14, s14
2400f99c:	ee39 7a87 	vadd.f32	s14, s19, s14
2400f9a0:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    
    f->zi = in;
2400f9a4:	ed84 ca07 	vstr	s24, [r4, #28]
    return tanhf(y3*f->r);
2400f9a8:	f004 fc66 	bl	24014278 <tanhf>
}
2400f9ac:	ecbd 8b0c 	vpop	{d8-d13}
2400f9b0:	bd10      	pop	{r4, pc}
2400f9b2:	bf00      	nop
2400f9b4:	358637bd 	.word	0x358637bd

2400f9b8 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
2400f9b8:	b510      	push	{r4, lr}
2400f9ba:	ed2d 8b0c 	vpush	{d8-d13}
2400f9be:	eeb0 ca40 	vmov.f32	s24, s0
    _tDiodeFilter* f = *vf;
2400f9c2:	6804      	ldr	r4, [r0, #0]
#ifdef SAFE_FILTER
    int errorCheck = 0;
#endif
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
2400f9c4:	ed94 0a07 	vldr	s0, [r4, #28]
2400f9c8:	ee30 0a0c 	vadd.f32	s0, s0, s24
2400f9cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400f9d0:	ee20 0a27 	vmul.f32	s0, s0, s15

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400f9d4:	ed94 da02 	vldr	s26, [r4, #8]
2400f9d8:	edd4 ba03 	vldr	s23, [r4, #12]
2400f9dc:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
2400f9e0:	ee6b 7aa9 	vmul.f32	s15, s23, s19
2400f9e4:	ee30 0a67 	vsub.f32	s0, s0, s15
2400f9e8:	ed94 aa08 	vldr	s20, [r4, #32]
2400f9ec:	ee20 0a0a 	vmul.f32	s0, s0, s20
2400f9f0:	f7ff fe74 	bl	2400f6dc <tanhXdX>
2400f9f4:	ee2d 0a00 	vmul.f32	s0, s26, s0
2400f9f8:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400f9fc:	ed94 ba0c 	vldr	s22, [r4, #48]	; 0x30
2400fa00:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
2400fa04:	ee3b 0a6c 	vsub.f32	s0, s22, s25
2400fa08:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
2400fa0c:	ee20 0a28 	vmul.f32	s0, s0, s17
2400fa10:	f7ff fe64 	bl	2400f6dc <tanhXdX>
2400fa14:	ee2d 8a00 	vmul.f32	s16, s26, s0
2400fa18:	ee28 8a88 	vmul.f32	s16, s17, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2400fa1c:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
2400fa20:	ee3a 0acb 	vsub.f32	s0, s21, s22
2400fa24:	ee28 0a80 	vmul.f32	s0, s17, s0
2400fa28:	f7ff fe58 	bl	2400f6dc <tanhXdX>
2400fa2c:	ee2d 9a00 	vmul.f32	s18, s26, s0
2400fa30:	ee28 9a89 	vmul.f32	s18, s17, s18
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2400fa34:	ee39 0aea 	vsub.f32	s0, s19, s21
2400fa38:	ee28 0a80 	vmul.f32	s0, s17, s0
2400fa3c:	f7ff fe4e 	bl	2400f6dc <tanhXdX>
2400fa40:	ee2d 0a00 	vmul.f32	s0, s26, s0
2400fa44:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2400fa48:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
2400fa4c:	ee29 0aad 	vmul.f32	s0, s19, s27
2400fa50:	f7ff fe44 	bl	2400f6dc <tanhXdX>
2400fa54:	ee2d 7a00 	vmul.f32	s14, s26, s0
2400fa58:	ee2d 7a87 	vmul.f32	s14, s27, s14

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400fa5c:	ee79 6aaa 	vadd.f32	s13, s19, s21
2400fa60:	ee7b 7a2a 	vadd.f32	s15, s22, s21
2400fa64:	ee39 6aa7 	vadd.f32	s12, s19, s15
2400fa68:	ee7b 7a2c 	vadd.f32	s15, s22, s25
2400fa6c:	ee7a 7aa7 	vadd.f32	s15, s21, s15
2400fa70:	ee79 7aa7 	vadd.f32	s15, s19, s15
2400fa74:	ee6c 5a0a 	vmul.f32	s11, s24, s20
2400fa78:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400fa7c:	ee67 7a88 	vmul.f32	s15, s15, s16
2400fa80:	ee76 7a27 	vadd.f32	s15, s12, s15
2400fa84:	ee67 7a89 	vmul.f32	s15, s15, s18
2400fa88:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400fa8c:	ee3a 6aaa 	vadd.f32	s12, s21, s21
2400fa90:	ee79 7aa9 	vadd.f32	s15, s19, s19
2400fa94:	ee36 6a27 	vadd.f32	s12, s12, s15
2400fa98:	ee26 6a08 	vmul.f32	s12, s12, s16
2400fa9c:	ee76 6a86 	vadd.f32	s13, s13, s12
2400faa0:	ee66 6aa8 	vmul.f32	s13, s13, s17
2400faa4:	ee79 6aa6 	vadd.f32	s13, s19, s13
2400faa8:	ee27 6a88 	vmul.f32	s12, s15, s16
2400faac:	ee76 6a86 	vadd.f32	s13, s13, s12
2400fab0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
2400fab4:	ee29 6a85 	vmul.f32	s12, s19, s10
2400fab8:	ee26 6a08 	vmul.f32	s12, s12, s16
2400fabc:	ee77 7a86 	vadd.f32	s15, s15, s12
2400fac0:	ee67 7a89 	vmul.f32	s15, s15, s18
2400fac4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400fac8:	ee77 5a07 	vadd.f32	s11, s14, s14
2400facc:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
2400fad0:	ee75 7aa4 	vadd.f32	s15, s11, s9
2400fad4:	ee67 7a88 	vmul.f32	s15, s15, s16
2400fad8:	ee77 7a87 	vadd.f32	s15, s15, s14
2400fadc:	ee2b 6a8a 	vmul.f32	s12, s23, s20
2400fae0:	ee36 6a07 	vadd.f32	s12, s12, s14
2400fae4:	ee36 6a24 	vadd.f32	s12, s12, s9
2400fae8:	ee26 6a08 	vmul.f32	s12, s12, s16
2400faec:	ee36 6a07 	vadd.f32	s12, s12, s14
2400faf0:	ee36 6a05 	vadd.f32	s12, s12, s10
2400faf4:	ee26 6a09 	vmul.f32	s12, s12, s18
2400faf8:	ee77 7a86 	vadd.f32	s15, s15, s12
2400fafc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
2400fb00:	ee77 7aa4 	vadd.f32	s15, s15, s9
2400fb04:	ee67 7aa8 	vmul.f32	s15, s15, s17
2400fb08:	ee77 7a87 	vadd.f32	s15, s15, s14
2400fb0c:	ee35 6aa4 	vadd.f32	s12, s11, s9
2400fb10:	ee26 6a08 	vmul.f32	s12, s12, s16
2400fb14:	ee77 7a86 	vadd.f32	s15, s15, s12
2400fb18:	ee27 6a05 	vmul.f32	s12, s14, s10
2400fb1c:	ee36 5a05 	vadd.f32	s10, s12, s10
2400fb20:	ee25 5a08 	vmul.f32	s10, s10, s16
2400fb24:	ee75 5a85 	vadd.f32	s11, s11, s10
2400fb28:	ee75 5aa4 	vadd.f32	s11, s11, s9
2400fb2c:	ee65 5a89 	vmul.f32	s11, s11, s18
2400fb30:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400fb34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400fb38:	ee77 7a86 	vadd.f32	s15, s15, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
2400fb3c:	eef5 7a40 	vcmp.f32	s15, #0.0
2400fb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fb44:	d101      	bne.n	2400fb4a <tDiodeFilter_tickEfficient+0x192>
    {
        tempy3denom = 0.000001f;
2400fb46:	eddf 7a41 	vldr	s15, [pc, #260]	; 2400fc4c <tDiodeFilter_tickEfficient+0x294>
    }

    y3 = y3 / tempy3denom;
2400fb4a:	eec6 5aa7 	vdiv.f32	s11, s13, s15
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
2400fb4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
2400fb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fb56:	d101      	bne.n	2400fb5c <tDiodeFilter_tickEfficient+0x1a4>
    {
        t1 = 0.000001f;
2400fb58:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 2400fc4c <tDiodeFilter_tickEfficient+0x294>
    }
    if (t2 == 0.0f)
2400fb5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
2400fb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fb64:	d101      	bne.n	2400fb6a <tDiodeFilter_tickEfficient+0x1b2>
    {
        t2 = 0.000001f;
2400fb66:	ed9f 9a39 	vldr	s18, [pc, #228]	; 2400fc4c <tDiodeFilter_tickEfficient+0x294>
    }
    if (t3 == 0.0f)
2400fb6a:	eef5 8a40 	vcmp.f32	s17, #0.0
2400fb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fb72:	d101      	bne.n	2400fb78 <tDiodeFilter_tickEfficient+0x1c0>
    {
        t3 = 0.000001f;
2400fb74:	eddf 8a35 	vldr	s17, [pc, #212]	; 2400fc4c <tDiodeFilter_tickEfficient+0x294>
    }

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2400fb78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400fb7c:	ee77 6a27 	vadd.f32	s13, s14, s15
2400fb80:	ee76 6aa8 	vadd.f32	s13, s13, s17
2400fb84:	ee66 6aa5 	vmul.f32	s13, s13, s11
2400fb88:	ee79 6ae6 	vsub.f32	s13, s19, s13
2400fb8c:	eef1 6a66 	vneg.f32	s13, s13
2400fb90:	ee86 5aa8 	vdiv.f32	s10, s13, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2400fb94:	ee38 6aa7 	vadd.f32	s12, s17, s15
2400fb98:	ee36 6a09 	vadd.f32	s12, s12, s18
2400fb9c:	ee26 6a05 	vmul.f32	s12, s12, s10
2400fba0:	ee3a 6ac6 	vsub.f32	s12, s21, s12
2400fba4:	ee68 6aa5 	vmul.f32	s13, s17, s11
2400fba8:	ee36 6a26 	vadd.f32	s12, s12, s13
2400fbac:	eeb1 6a46 	vneg.f32	s12, s12
2400fbb0:	eec6 6a09 	vdiv.f32	s13, s12, s18
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2400fbb4:	ee79 7a27 	vadd.f32	s15, s18, s15
2400fbb8:	ee77 7a88 	vadd.f32	s15, s15, s16
2400fbbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
2400fbc0:	ee7b 7a67 	vsub.f32	s15, s22, s15
2400fbc4:	ee29 6a05 	vmul.f32	s12, s18, s10
2400fbc8:	ee77 7a86 	vadd.f32	s15, s15, s12
2400fbcc:	eef1 7a67 	vneg.f32	s15, s15
2400fbd0:	ee87 6a88 	vdiv.f32	s12, s15, s16
    Lfloat xx = (in - f->r*y3);
2400fbd4:	ee2b 0aa5 	vmul.f32	s0, s23, s11
2400fbd8:	ee7c 7a40 	vsub.f32	s15, s24, s0

    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2400fbdc:	ee2a aa27 	vmul.f32	s20, s20, s15
2400fbe0:	ee76 7ac6 	vsub.f32	s15, s13, s12
2400fbe4:	ee27 8a88 	vmul.f32	s16, s15, s16
2400fbe8:	ee3a aa08 	vadd.f32	s20, s20, s16
2400fbec:	ee3a aa0a 	vadd.f32	s20, s20, s20
2400fbf0:	ee3c aa8a 	vadd.f32	s20, s25, s20
2400fbf4:	ed84 aa0b 	vstr	s20, [r4, #44]	; 0x2c
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400fbf8:	ee75 6a66 	vsub.f32	s13, s10, s13
2400fbfc:	ee26 9a89 	vmul.f32	s18, s13, s18
2400fc00:	ee39 8a48 	vsub.f32	s16, s18, s16
2400fc04:	ee38 8a08 	vadd.f32	s16, s16, s16
2400fc08:	ee3b 8a08 	vadd.f32	s16, s22, s16
2400fc0c:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400fc10:	ee35 5ac5 	vsub.f32	s10, s11, s10
2400fc14:	ee65 8a28 	vmul.f32	s17, s10, s17
2400fc18:	ee38 9ac9 	vsub.f32	s18, s17, s18
2400fc1c:	ee39 9a09 	vadd.f32	s18, s18, s18
2400fc20:	ee3a 9a89 	vadd.f32	s18, s21, s18
2400fc24:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2400fc28:	ee27 7a65 	vnmul.f32	s14, s14, s11
2400fc2c:	ee37 7a68 	vsub.f32	s14, s14, s17
2400fc30:	ee37 7a07 	vadd.f32	s14, s14, s14
2400fc34:	ee39 7a87 	vadd.f32	s14, s19, s14
2400fc38:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38

    f->zi = in;
2400fc3c:	ed84 ca07 	vstr	s24, [r4, #28]
    return LEAF_tanh(y3*f->r);
2400fc40:	f000 fb4e 	bl	240102e0 <LEAF_tanh>
}
2400fc44:	ecbd 8b0c 	vpop	{d8-d13}
2400fc48:	bd10      	pop	{r4, pc}
2400fc4a:	bf00      	nop
2400fc4c:	358637bd 	.word	0x358637bd

2400fc50 <tDiodeFilter_setFreqFast>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
2400fc50:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
2400fc52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2400fc56:	ee17 3a90 	vmov	r3, s15
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2400fc5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400fc5e:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2400fc62:	4a0b      	ldr	r2, [pc, #44]	; (2400fc90 <tDiodeFilter_setFreqFast+0x40>)
2400fc64:	eb02 0083 	add.w	r0, r2, r3, lsl #2
2400fc68:	edd0 7a00 	vldr	s15, [r0]
2400fc6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400fc70:	ee37 7a40 	vsub.f32	s14, s14, s0
2400fc74:	ee67 7a87 	vmul.f32	s15, s15, s14
2400fc78:	3301      	adds	r3, #1
2400fc7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400fc7e:	ed93 7a00 	vldr	s14, [r3]
2400fc82:	ee27 0a00 	vmul.f32	s0, s14, s0
2400fc86:	ee37 0a80 	vadd.f32	s0, s15, s0
2400fc8a:	ed81 0a02 	vstr	s0, [r1, #8]
}
2400fc8e:	4770      	bx	lr
2400fc90:	24016444 	.word	0x24016444

2400fc94 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
2400fc94:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
2400fc96:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
2400fc98:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
2400fc9c:	ee60 0a20 	vmul.f32	s1, s0, s1
2400fca0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
2400fca4:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
2400fca8:	ee70 0a80 	vadd.f32	s1, s1, s0
2400fcac:	f01f f920 	bl	2402eef0 <__LEAF_clip_veneer>
2400fcb0:	ed84 0a03 	vstr	s0, [r4, #12]
}
2400fcb4:	bd10      	pop	{r4, pc}
	...

2400fcb8 <tLadderFilter_initToPool>:
{
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
2400fcb8:	b570      	push	{r4, r5, r6, lr}
2400fcba:	ed2d 8b02 	vpush	{d8}
2400fcbe:	4606      	mov	r6, r0
2400fcc0:	eeb0 8a40 	vmov.f32	s16, s0
2400fcc4:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
2400fcc8:	680d      	ldr	r5, [r1, #0]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2400fcca:	4629      	mov	r1, r5
2400fccc:	2038      	movs	r0, #56	; 0x38
2400fcce:	f000 fd68 	bl	240107a2 <mpool_alloc>
2400fcd2:	4604      	mov	r4, r0
2400fcd4:	6030      	str	r0, [r6, #0]
    f->mempool = m;
2400fcd6:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
2400fcd8:	686b      	ldr	r3, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
2400fcda:	ed93 0a01 	vldr	s0, [r3, #4]
2400fcde:	ed80 0a02 	vstr	s0, [r0, #8]
    f->cutoff = cutoff;
2400fce2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->oversampling = 1;
2400fce6:	2301      	movs	r3, #1
2400fce8:	60c3      	str	r3, [r0, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
2400fcea:	eddf 7a15 	vldr	s15, [pc, #84]	; 2400fd40 <tLadderFilter_initToPool+0x88>
2400fcee:	ee28 8a27 	vmul.f32	s16, s16, s15
2400fcf2:	ee20 0a08 	vmul.f32	s0, s0, s16
2400fcf6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2400fcfa:	f003 ff5d 	bl	24013bb8 <tan>
2400fcfe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2400fd02:	ed84 0a04 	vstr	s0, [r4, #16]
    f->c2 = 2.0f * f->c;
2400fd06:	ee30 0a00 	vadd.f32	s0, s0, s0
2400fd0a:	ed84 0a06 	vstr	s0, [r4, #24]
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
2400fd0e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
2400fd12:	ee68 8aa0 	vmul.f32	s17, s17, s1
2400fd16:	edc4 8a05 	vstr	s17, [r4, #20]

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
2400fd1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2400fd1e:	61e3      	str	r3, [r4, #28]
    f->s = 0.1f;
2400fd20:	4b08      	ldr	r3, [pc, #32]	; (2400fd44 <tLadderFilter_initToPool+0x8c>)
2400fd22:	6223      	str	r3, [r4, #32]
    f->d = 1.0f;
2400fd24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400fd28:	6263      	str	r3, [r4, #36]	; 0x24
    
    
    f->b[0] = 0.01f;
2400fd2a:	4b07      	ldr	r3, [pc, #28]	; (2400fd48 <tLadderFilter_initToPool+0x90>)
2400fd2c:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.02f;
2400fd2e:	4b07      	ldr	r3, [pc, #28]	; (2400fd4c <tLadderFilter_initToPool+0x94>)
2400fd30:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.03f;
2400fd32:	4b07      	ldr	r3, [pc, #28]	; (2400fd50 <tLadderFilter_initToPool+0x98>)
2400fd34:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.04f;
2400fd36:	4b07      	ldr	r3, [pc, #28]	; (2400fd54 <tLadderFilter_initToPool+0x9c>)
2400fd38:	62a3      	str	r3, [r4, #40]	; 0x28


}
2400fd3a:	ecbd 8b02 	vpop	{d8}
2400fd3e:	bd70      	pop	{r4, r5, r6, pc}
2400fd40:	40490fdb 	.word	0x40490fdb
2400fd44:	3dcccccd 	.word	0x3dcccccd
2400fd48:	3c23d70a 	.word	0x3c23d70a
2400fd4c:	3ca3d70a 	.word	0x3ca3d70a
2400fd50:	3cf5c28f 	.word	0x3cf5c28f
2400fd54:	3d23d70a 	.word	0x3d23d70a

2400fd58 <tLadderFilter_init>:
{
2400fd58:	b508      	push	{r3, lr}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
2400fd5a:	3118      	adds	r1, #24
2400fd5c:	f7ff ffac 	bl	2400fcb8 <tLadderFilter_initToPool>
}
2400fd60:	bd08      	pop	{r3, pc}

2400fd62 <smoothABS>:
    _tLadderFilter* f = *vf;
    mpool_free((char*)f, f->mempool);
}

Lfloat smoothABS ( Lfloat x, const Lfloat y) // y controls 'smoothness' usually between 0.002 -> 0.04
{
2400fd62:	b508      	push	{r3, lr}
2400fd64:	ed2d 8b02 	vpush	{d8}
2400fd68:	eeb0 8a60 	vmov.f32	s16, s1
//		Lfloat output2;
//		arm_sqrt_f32((x * x)  + y, &output1);
//		arm_sqrt_f32(y, &output2);
//		return output1 - output2;
//	#else
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400fd6c:	ee20 0a00 	vmul.f32	s0, s0, s0
2400fd70:	ee30 0a20 	vadd.f32	s0, s0, s1
2400fd74:	f004 fb20 	bl	240143b8 <sqrtf>
2400fd78:	eef0 8a40 	vmov.f32	s17, s0
2400fd7c:	eeb0 0a48 	vmov.f32	s0, s16
2400fd80:	f004 fb1a 	bl	240143b8 <sqrtf>
//	#endif
}
2400fd84:	ee38 0ac0 	vsub.f32	s0, s17, s0
2400fd88:	ecbd 8b02 	vpop	{d8}
2400fd8c:	bd08      	pop	{r3, pc}
	...

2400fd90 <smoothclip>:

Lfloat smoothclip (Lfloat x, const Lfloat a, const Lfloat b) // assuming symmetrical clipping
{
2400fd90:	b508      	push	{r3, lr}
2400fd92:	ed2d 8b06 	vpush	{d8-d10}
2400fd96:	eeb0 9a40 	vmov.f32	s18, s0
2400fd9a:	eeb0 8a60 	vmov.f32	s16, s1
2400fd9e:	eef0 8a41 	vmov.f32	s17, s2
    Lfloat  x1 = smoothABS (x-a, 0.01f);
2400fda2:	ed9f aa0e 	vldr	s20, [pc, #56]	; 2400fddc <smoothclip+0x4c>
2400fda6:	eef0 0a4a 	vmov.f32	s1, s20
2400fdaa:	ee30 0a48 	vsub.f32	s0, s0, s16
2400fdae:	f7ff ffd8 	bl	2400fd62 <smoothABS>
2400fdb2:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2400fdb6:	eef0 0a4a 	vmov.f32	s1, s20
2400fdba:	ee39 0a68 	vsub.f32	s0, s18, s17
2400fdbe:	f7ff ffd0 	bl	2400fd62 <smoothABS>
    x = x1 + (a+b);
2400fdc2:	ee38 8a28 	vadd.f32	s16, s16, s17
2400fdc6:	ee38 8a29 	vadd.f32	s16, s16, s19
    x = x - x2;
2400fdca:	ee38 8a40 	vsub.f32	s16, s16, s0
    x = x * 0.5;
    return (x);
}
2400fdce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
2400fdd2:	ee28 0a00 	vmul.f32	s0, s16, s0
2400fdd6:	ecbd 8b06 	vpop	{d8-d10}
2400fdda:	bd08      	pop	{r3, pc}
2400fddc:	3c23d70a 	.word	0x3c23d70a

2400fde0 <tanhd>:

Lfloat tanhd(const Lfloat x, const Lfloat d, const Lfloat s)
{
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400fde0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400fde4:	ee70 7a87 	vadd.f32	s15, s1, s14
2400fde8:	ee67 7a81 	vmul.f32	s15, s15, s2
2400fdec:	ee67 7a80 	vmul.f32	s15, s15, s0
2400fdf0:	ee67 7a80 	vmul.f32	s15, s15, s0
2400fdf4:	ee20 0a00 	vmul.f32	s0, s0, s0
2400fdf8:	ee70 0a20 	vadd.f32	s1, s0, s1
2400fdfc:	ee87 0aa0 	vdiv.f32	s0, s15, s1
}
2400fe00:	ee37 0a40 	vsub.f32	s0, s14, s0
2400fe04:	4770      	bx	lr
	...

2400fe08 <tLadderFilter_tick>:

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
2400fe08:	b538      	push	{r3, r4, r5, lr}
2400fe0a:	ed2d 8b0e 	vpush	{d8-d14}
    _tLadderFilter* f = *vf;
2400fe0e:	6804      	ldr	r4, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
2400fe10:	eddf 7a8e 	vldr	s15, [pc, #568]	; 2401004c <tLadderFilter_tick+0x244>
2400fe14:	ee70 da27 	vadd.f32	s27, s0, s15
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
2400fe18:	2500      	movs	r5, #0
    Lfloat y3 = 0.0f;
2400fe1a:	ed9f aa8d 	vldr	s20, [pc, #564]	; 24010050 <tLadderFilter_tick+0x248>
    for (int i = 0; i < f->oversampling; i++) {
2400fe1e:	e100      	b.n	24010022 <tLadderFilter_tick+0x21a>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2400fe20:	ed94 ca0a 	vldr	s24, [r4, #40]	; 0x28
2400fe24:	ed94 aa07 	vldr	s20, [r4, #28]
2400fe28:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
2400fe2c:	ed94 ba08 	vldr	s22, [r4, #32]
2400fe30:	eeb0 1a4b 	vmov.f32	s2, s22
2400fe34:	eef0 0a6a 	vmov.f32	s1, s21
2400fe38:	ee3c 0a0a 	vadd.f32	s0, s24, s20
2400fe3c:	f7ff ffd0 	bl	2400fde0 <tanhd>
2400fe40:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
2400fe44:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
2400fe48:	eeb0 1a4b 	vmov.f32	s2, s22
2400fe4c:	eef0 0a6a 	vmov.f32	s1, s21
2400fe50:	ee3a 0a2c 	vadd.f32	s0, s20, s25
2400fe54:	f7ff ffc4 	bl	2400fde0 <tanhd>
2400fe58:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
2400fe5c:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
2400fe60:	eeb0 1a4b 	vmov.f32	s2, s22
2400fe64:	eef0 0a6a 	vmov.f32	s1, s21
2400fe68:	ee3a 0a0e 	vadd.f32	s0, s20, s28
2400fe6c:	f7ff ffb8 	bl	2400fde0 <tanhd>
2400fe70:	eeb0 9a40 	vmov.f32	s18, s0
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
2400fe74:	edd4 9a0d 	vldr	s19, [r4, #52]	; 0x34
2400fe78:	eeb0 1a4b 	vmov.f32	s2, s22
2400fe7c:	eef0 0a6a 	vmov.f32	s1, s21
2400fe80:	ee3a 0a29 	vadd.f32	s0, s20, s19
2400fe84:	f7ff ffac 	bl	2400fde0 <tanhd>
2400fe88:	eeb0 aa40 	vmov.f32	s20, s0
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
2400fe8c:	edd4 7a04 	vldr	s15, [r4, #16]
2400fe90:	ee27 3aa8 	vmul.f32	s6, s15, s17
2400fe94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400fe98:	ee33 5a01 	vadd.f32	s10, s6, s2
2400fe9c:	ee81 da05 	vdiv.f32	s26, s2, s10
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
2400fea0:	ee67 3a88 	vmul.f32	s7, s15, s16
2400fea4:	ee73 5a81 	vadd.f32	s11, s7, s2
2400fea8:	eec1 ba25 	vdiv.f32	s23, s2, s11
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
2400feac:	ee27 4a89 	vmul.f32	s8, s15, s18
2400feb0:	ee34 6a01 	vadd.f32	s12, s8, s2
2400feb4:	ee81 ba06 	vdiv.f32	s22, s2, s12
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
2400feb8:	ee67 4a80 	vmul.f32	s9, s15, s0
2400febc:	ee34 7a81 	vadd.f32	s14, s9, s2
2400fec0:	eec1 aa07 	vdiv.f32	s21, s2, s14
        
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
2400fec4:	eec3 6a05 	vdiv.f32	s13, s6, s10
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
2400fec8:	ee83 5aa5 	vdiv.f32	s10, s7, s11
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
2400fecc:	eec4 5a06 	vdiv.f32	s11, s8, s12
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
2400fed0:	ee84 6a87 	vdiv.f32	s12, s9, s14
        
        Lfloat f3 = f->c       * t2*g3;
2400fed4:	ee24 4a2a 	vmul.f32	s8, s8, s21
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
2400fed8:	ee67 3aa7 	vmul.f32	s7, s15, s15
2400fedc:	ee63 4a88 	vmul.f32	s9, s7, s16
2400fee0:	ee64 4a8b 	vmul.f32	s9, s9, s22
2400fee4:	ee64 4a89 	vmul.f32	s9, s9, s18
2400fee8:	ee64 4aaa 	vmul.f32	s9, s9, s21
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
2400feec:	ee67 3aa3 	vmul.f32	s7, s15, s7
2400fef0:	ee23 7aa8 	vmul.f32	s14, s7, s17
2400fef4:	ee27 7a2b 	vmul.f32	s14, s14, s23
2400fef8:	ee27 7a08 	vmul.f32	s14, s14, s16
2400fefc:	ee27 7a0b 	vmul.f32	s14, s14, s22
2400ff00:	ee27 7a09 	vmul.f32	s14, s14, s18
2400ff04:	ee27 7a2a 	vmul.f32	s14, s14, s21
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
2400ff08:	ee67 7aa3 	vmul.f32	s15, s15, s7
2400ff0c:	ee67 7a8d 	vmul.f32	s15, s15, s26
2400ff10:	ee67 7aa8 	vmul.f32	s15, s15, s17
2400ff14:	ee67 7aab 	vmul.f32	s15, s15, s23
2400ff18:	ee67 7a88 	vmul.f32	s15, s15, s16
2400ff1c:	ee67 7a8b 	vmul.f32	s15, s15, s22
2400ff20:	ee67 7a89 	vmul.f32	s15, s15, s18
2400ff24:	ee67 7aaa 	vmul.f32	s15, s15, s21
        
        Lfloat estimate =
        g3 * f->b[3] +
2400ff28:	ee69 9aaa 	vmul.f32	s19, s19, s21
        f3 * g2 * f->b[2] +
2400ff2c:	ee2b 4a04 	vmul.f32	s8, s22, s8
2400ff30:	ee2e ea04 	vmul.f32	s28, s28, s8
        g3 * f->b[3] +
2400ff34:	ee79 9a8e 	vadd.f32	s19, s19, s28
        f2 * g1 * f->b[1] +
2400ff38:	ee6b 4aa4 	vmul.f32	s9, s23, s9
2400ff3c:	ee6c caa4 	vmul.f32	s25, s25, s9
        f3 * g2 * f->b[2] +
2400ff40:	ee79 caac 	vadd.f32	s25, s19, s25
        f1 * g0 * f->b[0] +
2400ff44:	ee2d 7a07 	vmul.f32	s14, s26, s14
2400ff48:	ee2c ca07 	vmul.f32	s24, s24, s14
        f2 * g1 * f->b[1] +
2400ff4c:	ee3c ca8c 	vadd.f32	s24, s25, s24
        f0 * in;
2400ff50:	ee6d 7aa7 	vmul.f32	s15, s27, s15
        Lfloat estimate =
2400ff54:	ee7c 7a27 	vadd.f32	s15, s24, s15
        
        // feedback gain coefficient, absolutely critical to get this correct
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2400ff58:	ed94 0a05 	vldr	s0, [r4, #20]
2400ff5c:	ee60 6a26 	vmul.f32	s13, s0, s13
2400ff60:	ee26 5a85 	vmul.f32	s10, s13, s10
2400ff64:	ee65 5a25 	vmul.f32	s11, s10, s11
2400ff68:	ee25 6a86 	vmul.f32	s12, s11, s12
2400ff6c:	ee36 6a01 	vadd.f32	s12, s12, s2
2400ff70:	eec1 9a06 	vdiv.f32	s19, s2, s12
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2400ff74:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
2400ff78:	ee20 0a27 	vmul.f32	s0, s0, s15
2400ff7c:	f7ff ff08 	bl	2400fd90 <smoothclip>
2400ff80:	ee60 7a29 	vmul.f32	s15, s0, s19
2400ff84:	ee7d 7ae7 	vsub.f32	s15, s27, s15
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
2400ff88:	ee68 8a8d 	vmul.f32	s17, s17, s26
2400ff8c:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
2400ff90:	ed94 7a04 	vldr	s14, [r4, #16]
2400ff94:	ee27 da27 	vmul.f32	s26, s14, s15
2400ff98:	ee35 da0d 	vadd.f32	s26, s10, s26
2400ff9c:	ee68 8a8d 	vmul.f32	s17, s17, s26
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
2400ffa0:	ee28 8a2b 	vmul.f32	s16, s16, s23
2400ffa4:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
2400ffa8:	ee67 ba28 	vmul.f32	s23, s14, s17
2400ffac:	ee75 baab 	vadd.f32	s23, s11, s23
2400ffb0:	ee28 8a2b 	vmul.f32	s16, s16, s23
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
2400ffb4:	ee29 9a0b 	vmul.f32	s18, s18, s22
2400ffb8:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
2400ffbc:	ee27 ba08 	vmul.f32	s22, s14, s16
2400ffc0:	ee36 ba0b 	vadd.f32	s22, s12, s22
2400ffc4:	ee29 9a0b 	vmul.f32	s18, s18, s22
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2400ffc8:	ee2a aa2a 	vmul.f32	s20, s20, s21
2400ffcc:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
2400ffd0:	ee27 7a09 	vmul.f32	s14, s14, s18
2400ffd4:	ee36 7a87 	vadd.f32	s14, s13, s14
2400ffd8:	ee2a aa07 	vmul.f32	s20, s20, s14
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
2400ffdc:	ed94 7a06 	vldr	s14, [r4, #24]
2400ffe0:	ee77 7ae8 	vsub.f32	s15, s15, s17
2400ffe4:	ee67 7a27 	vmul.f32	s15, s14, s15
2400ffe8:	ee75 7a27 	vadd.f32	s15, s10, s15
2400ffec:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
        f->b[1] += f->c2 * (y0 - y1);
2400fff0:	ee78 8ac8 	vsub.f32	s17, s17, s16
2400fff4:	ee67 8a28 	vmul.f32	s17, s14, s17
2400fff8:	ee75 8aa8 	vadd.f32	s17, s11, s17
2400fffc:	edc4 8a0b 	vstr	s17, [r4, #44]	; 0x2c
        f->b[2] += f->c2 * (y1 - y2);
24010000:	ee38 8a49 	vsub.f32	s16, s16, s18
24010004:	ee27 8a08 	vmul.f32	s16, s14, s16
24010008:	ee36 8a08 	vadd.f32	s16, s12, s16
2401000c:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
        f->b[3] += f->c2 * (y2 - y3);
24010010:	ee39 9a4a 	vsub.f32	s18, s18, s20
24010014:	ee27 9a09 	vmul.f32	s18, s14, s18
24010018:	ee36 9a89 	vadd.f32	s18, s13, s18
2401001c:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    for (int i = 0; i < f->oversampling; i++) {
24010020:	3501      	adds	r5, #1
24010022:	68e3      	ldr	r3, [r4, #12]
24010024:	42ab      	cmp	r3, r5
24010026:	f73f aefb 	bgt.w	2400fe20 <tLadderFilter_tick+0x18>
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2401002a:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
2401002e:	eddf 0a08 	vldr	s1, [pc, #32]	; 24010050 <tLadderFilter_tick+0x248>
24010032:	ed94 0a05 	vldr	s0, [r4, #20]
24010036:	f7ff feab 	bl	2400fd90 <smoothclip>
2401003a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401003e:	ee30 0a27 	vadd.f32	s0, s0, s15
    return y3 * compensation;
}
24010042:	ee2a 0a00 	vmul.f32	s0, s20, s0
24010046:	ecbd 8b0e 	vpop	{d8-d14}
2401004a:	bd38      	pop	{r3, r4, r5, pc}
2401004c:	3c75c28f 	.word	0x3c75c28f
24010050:	00000000 	.word	0x00000000

24010054 <tLadderFilter_setFreqFast>:
    f->c2 = 2.0f * f->c;
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
24010054:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24010056:	eefd 7ac0 	vcvt.s32.f32	s15, s0
2401005a:	ee17 3a90 	vmov	r3, s15
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401005e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010062:	ee30 0a67 	vsub.f32	s0, s0, s15

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010066:	4a0d      	ldr	r2, [pc, #52]	; (2401009c <tLadderFilter_setFreqFast+0x48>)
24010068:	eb02 0083 	add.w	r0, r2, r3, lsl #2
2401006c:	edd0 7a00 	vldr	s15, [r0]
24010070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010074:	ee37 7a40 	vsub.f32	s14, s14, s0
24010078:	ee67 7a87 	vmul.f32	s15, s15, s14
2401007c:	3301      	adds	r3, #1
2401007e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010082:	ed93 7a00 	vldr	s14, [r3]
24010086:	ee27 0a00 	vmul.f32	s0, s14, s0
2401008a:	ee77 7a80 	vadd.f32	s15, s15, s0
2401008e:	edc1 7a04 	vstr	s15, [r1, #16]
    f->c2 = 2.0f * f->c;
24010092:	ee77 7aa7 	vadd.f32	s15, s15, s15
24010096:	edc1 7a06 	vstr	s15, [r1, #24]
}
2401009a:	4770      	bx	lr
2401009c:	24016444 	.word	0x24016444

240100a0 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
240100a0:	b510      	push	{r4, lr}
240100a2:	eef0 0a40 	vmov.f32	s1, s0
    _tLadderFilter* f = *vf;
240100a6:	6804      	ldr	r4, [r0, #0]
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
240100a8:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
240100ac:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240100bc <tLadderFilter_setQ+0x1c>
240100b0:	f01e ff1e 	bl	2402eef0 <__LEAF_clip_veneer>
240100b4:	ed84 0a05 	vstr	s0, [r4, #20]
}
240100b8:	bd10      	pop	{r4, pc}
240100ba:	bf00      	nop
240100bc:	3e4ccccd 	.word	0x3e4ccccd

240100c0 <log2f_approx>:

#define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)

// This is a fast approximation to log2() found on http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html credited to this post https://community.arm.com/developer/tools-software/tools/f/armds-forum/4292/cmsis-dsp-new-functionality-proposal/22621#22621
// Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
Lfloat log2f_approx(Lfloat X) {
240100c0:	b500      	push	{lr}
240100c2:	b083      	sub	sp, #12
    Lfloat Y, F;
    int E;
    F = frexpf(fabsf(X), &E);
240100c4:	a801      	add	r0, sp, #4
240100c6:	eeb0 0ac0 	vabs.f32	s0, s0
240100ca:	f003 facd 	bl	24013668 <frexpf>
    Y = 1.23149591368684f;
    Y *= F;
240100ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24010108 <log2f_approx+0x48>
240100d2:	ee60 7a27 	vmul.f32	s15, s0, s15
    Y += -4.11852516267426f;
240100d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 2401010c <log2f_approx+0x4c>
240100da:	ee77 7ac7 	vsub.f32	s15, s15, s14
    Y *= F;
240100de:	ee60 7a27 	vmul.f32	s15, s0, s15
    Y += 6.02197014179219f;
240100e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24010110 <log2f_approx+0x50>
240100e6:	ee77 7a87 	vadd.f32	s15, s15, s14
    Y *= F;
240100ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    Y += -3.13396450166353f;
240100ee:	eddf 7a09 	vldr	s15, [pc, #36]	; 24010114 <log2f_approx+0x54>
240100f2:	ee30 0a67 	vsub.f32	s0, s0, s15
    Y += E;
240100f6:	eddd 7a01 	vldr	s15, [sp, #4]
240100fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return(Y);
}
240100fe:	ee37 0a80 	vadd.f32	s0, s15, s0
24010102:	b003      	add	sp, #12
24010104:	f85d fb04 	ldr.w	pc, [sp], #4
24010108:	3f9da1a8 	.word	0x3f9da1a8
2401010c:	4083caf5 	.word	0x4083caf5
24010110:	40c0b3fb 	.word	0x40c0b3fb
24010114:	404892e0 	.word	0x404892e0

24010118 <fastertanf>:
    return fResult;
}

Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
24010118:	ee60 7a00 	vmul.f32	s15, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
2401011c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010140 <fastertanf+0x28>
24010120:	ee27 7a87 	vmul.f32	s14, s15, s14
    fResult += 3.1755e-01f;
24010124:	eddf 6a07 	vldr	s13, [pc, #28]	; 24010144 <fastertanf+0x2c>
24010128:	ee37 7a26 	vadd.f32	s14, s14, s13
    fResult *= fASqr;
2401012c:	ee67 7a87 	vmul.f32	s15, s15, s14
    fResult += 1.0f;
24010130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010134:	ee77 7a87 	vadd.f32	s15, s15, s14
    fResult *= fAngle;
    return fResult;
}
24010138:	ee20 0a27 	vmul.f32	s0, s0, s15
2401013c:	4770      	bx	lr
2401013e:	bf00      	nop
24010140:	3e502de0 	.word	0x3e502de0
24010144:	3ea295ea 	.word	0x3ea295ea

24010148 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24010148:	4b10      	ldr	r3, [pc, #64]	; (2401018c <fastsqrtf+0x44>)
2401014a:	ee10 2a10 	vmov	r2, s0
2401014e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24010152:	ee07 3a10 	vmov	s14, r3
24010156:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401015a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401015e:	ee20 0a07 	vmul.f32	s0, s0, s14
24010162:	ee20 0a07 	vmul.f32	s0, s0, s14
24010166:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
2401016a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401016e:	ee67 7a87 	vmul.f32	s15, s15, s14
24010172:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
24010176:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
2401017a:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
2401017e:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24010182:	336e      	adds	r3, #110	; 0x6e
}
24010184:	ee00 3a10 	vmov	s0, r3
24010188:	4770      	bx	lr
2401018a:	bf00      	nop
2401018c:	5f3759df 	.word	0x5f3759df

24010190 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
24010190:	ee10 3a10 	vmov	r3, s0
24010194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24010198:	ee00 3a10 	vmov	s0, r3
}
2401019c:	4770      	bx	lr
	...

240101a0 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
240101a0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 240101d4 <fasterexpf+0x34>
240101a4:	ee20 0a27 	vmul.f32	s0, s0, s15
240101a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240101ac:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
240101b0:	ee20 0a00 	vmul.f32	s0, s0, s0
240101b4:	ee20 0a00 	vmul.f32	s0, s0, s0
240101b8:	ee20 0a00 	vmul.f32	s0, s0, s0
240101bc:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
240101c0:	ee20 0a00 	vmul.f32	s0, s0, s0
240101c4:	ee20 0a00 	vmul.f32	s0, s0, s0
240101c8:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
240101cc:	ee20 0a00 	vmul.f32	s0, s0, s0
240101d0:	4770      	bx	lr
240101d2:	bf00      	nop
240101d4:	3b800000 	.word	0x3b800000

240101d8 <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240101d8:	ee10 3a10 	vmov	r3, s0
240101dc:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
240101e0:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
240101e4:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
240101e8:	330b      	adds	r3, #11
240101ea:	ee07 3a90 	vmov	s15, r3
240101ee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
240101f2:	ee20 0a20 	vmul.f32	s0, s0, s1
240101f6:	eddf 0a03 	vldr	s1, [pc, #12]	; 24010204 <fastPowf+0x2c>
240101fa:	ee30 0a20 	vadd.f32	s0, s0, s1
    return u.d;
240101fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
}
24010202:	4770      	bx	lr
24010204:	4e7de250 	.word	0x4e7de250

24010208 <LEAF_round>:
}

// round input to nearest rnd
Lfloat LEAF_round (Lfloat input, Lfloat rnd)
{
    rnd = fabsf(rnd);
24010208:	eef0 0ae0 	vabs.f32	s1, s1
    
    if (rnd <= 0.0000001f) return input;
2401020c:	eddf 7a08 	vldr	s15, [pc, #32]	; 24010230 <LEAF_round+0x28>
24010210:	eef4 0ae7 	vcmpe.f32	s1, s15
24010214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010218:	d909      	bls.n	2401022e <LEAF_round+0x26>
    
    Lfloat scale = 1.f / rnd;
2401021a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401021e:	eec7 7a20 	vdiv.f32	s15, s14, s1
    
    return roundf(input * scale) * rnd;
24010222:	ee27 0a80 	vmul.f32	s0, s15, s0
24010226:	feb8 0a40 	vrinta.f32	s0, s0
2401022a:	ee20 0a20 	vmul.f32	s0, s0, s1
}
2401022e:	4770      	bx	lr
24010230:	33d6bf95 	.word	0x33d6bf95

24010234 <LEAF_bitwise_xor>:



Lfloat LEAF_bitwise_xor(Lfloat input, uint32_t op)
{
24010234:	b082      	sub	sp, #8
24010236:	ed8d 0a01 	vstr	s0, [sp, #4]
    union unholy_t unholy;
    unholy.f = input;
    unholy.i = (unholy.i ^ op);
2401023a:	9b01      	ldr	r3, [sp, #4]
    
    return unholy.f;
2401023c:	4043      	eors	r3, r0
2401023e:	ee00 3a10 	vmov	s0, r3
}
24010242:	b002      	add	sp, #8
24010244:	4770      	bx	lr
	...

24010248 <LEAF_shaper>:
{
24010248:	b508      	push	{r3, lr}
2401024a:	ed2d 8b02 	vpush	{d8}
2401024e:	eef0 8a60 	vmov.f32	s17, s1
    Lfloat fx = input * 2.0f;    // prescale
24010252:	ee30 8a00 	vadd.f32	s16, s0, s0
    xc = LEAF_clip(-SQRT8, fx, SQRT8);
24010256:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 240102cc <LEAF_shaper+0x84>
2401025a:	eef0 0a48 	vmov.f32	s1, s16
2401025e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 240102d0 <LEAF_shaper+0x88>
24010262:	f01e fe45 	bl	2402eef0 <__LEAF_clip_veneer>
    xc2 = xc*xc;
24010266:	ee60 7a00 	vmul.f32	s15, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
2401026a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
2401026e:	ee28 8a00 	vmul.f32	s16, s16, s0
24010272:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
24010276:	ee37 7a67 	vsub.f32	s14, s14, s15
2401027a:	ee28 8a07 	vmul.f32	s16, s16, s14
    xc4 = xc2 * xc2;
2401027e:	ee67 6aa7 	vmul.f32	s13, s15, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24010282:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
24010286:	ee27 6a87 	vmul.f32	s12, s15, s14
2401028a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401028e:	ee37 7a46 	vsub.f32	s14, s14, s12
24010292:	ed9f 6a10 	vldr	s12, [pc, #64]	; 240102d4 <LEAF_shaper+0x8c>
24010296:	ee66 6a86 	vmul.f32	s13, s13, s12
2401029a:	ee37 7a26 	vadd.f32	s14, s14, s13
2401029e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 240102d8 <LEAF_shaper+0x90>
240102a2:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
240102a6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240102dc <LEAF_shaper+0x94>
240102aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
240102ae:	ee77 7a88 	vadd.f32	s15, s15, s16
240102b2:	ee67 7a87 	vmul.f32	s15, s15, s14
240102b6:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
240102ba:	ee78 8aa0 	vadd.f32	s17, s17, s1
240102be:	ee67 7aa8 	vmul.f32	s15, s15, s17
}
240102c2:	ee27 0a80 	vmul.f32	s0, s15, s0
240102c6:	ecbd 8b02 	vpop	{d8}
240102ca:	bd08      	pop	{r3, pc}
240102cc:	403504f3 	.word	0x403504f3
240102d0:	c03504f3 	.word	0xc03504f3
240102d4:	3c800000 	.word	0x3c800000
240102d8:	3fa72f05 	.word	0x3fa72f05
240102dc:	3d4ccccd 	.word	0x3d4ccccd

240102e0 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
240102e0:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
240102e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240102e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240102ec:	d419      	bmi.n	24010322 <LEAF_tanh+0x42>
        return -1.0f;
    else if( x > 3.0f )
240102ee:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
240102f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
240102f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240102fa:	dc15      	bgt.n	24010328 <LEAF_tanh+0x48>
        return 1.0f;
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
240102fc:	ee20 7a00 	vmul.f32	s14, s0, s0
24010300:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
24010304:	ee37 7a26 	vadd.f32	s14, s14, s13
24010308:	ee27 7a00 	vmul.f32	s14, s14, s0
2401030c:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
24010310:	ee60 7a27 	vmul.f32	s15, s0, s15
24010314:	ee27 0a80 	vmul.f32	s0, s15, s0
24010318:	ee70 7a26 	vadd.f32	s15, s0, s13
2401031c:	ee87 0a27 	vdiv.f32	s0, s14, s15
24010320:	4770      	bx	lr
        return -1.0f;
24010322:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010326:	4770      	bx	lr
        return 1.0f;
24010328:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
2401032c:	4770      	bx	lr

2401032e <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
2401032e:	b570      	push	{r4, r5, r6, lr}
24010330:	ed2d 8b04 	vpush	{d8-d9}
24010334:	4606      	mov	r6, r0
24010336:	eeb0 9a40 	vmov.f32	s18, s0
2401033a:	eeb0 8a60 	vmov.f32	s16, s1
2401033e:	eef0 8a61 	vmov.f32	s17, s3
24010342:	460d      	mov	r5, r1
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24010344:	ee31 1a60 	vsub.f32	s2, s2, s1
24010348:	1e4b      	subs	r3, r1, #1
2401034a:	ee07 3a90 	vmov	s15, r3
2401034e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010352:	eec1 9a27 	vdiv.f32	s19, s2, s15
    Lfloat x = start;
    for (int i = 0; i < size; i++)
24010356:	2400      	movs	r4, #0
24010358:	e00e      	b.n	24010378 <LEAF_generate_exp+0x4a>
    {
        buffer[i] = powf(base, x) + offset;
2401035a:	eef0 0a48 	vmov.f32	s1, s16
2401035e:	eeb0 0a49 	vmov.f32	s0, s18
24010362:	f003 fdfd 	bl	24013f60 <powf>
24010366:	eb06 0384 	add.w	r3, r6, r4, lsl #2
2401036a:	ee30 0a28 	vadd.f32	s0, s0, s17
2401036e:	ed83 0a00 	vstr	s0, [r3]
        x += increment;
24010372:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
24010376:	3401      	adds	r4, #1
24010378:	42ac      	cmp	r4, r5
2401037a:	dbee      	blt.n	2401035a <LEAF_generate_exp+0x2c>
    }
}
2401037c:	ecbd 8b04 	vpop	{d8-d9}
24010380:	bd70      	pop	{r4, r5, r6, pc}
	...

24010384 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
24010384:	b570      	push	{r4, r5, r6, lr}
24010386:	ed2d 8b06 	vpush	{d8-d10}
2401038a:	4606      	mov	r6, r0
2401038c:	eef0 8a40 	vmov.f32	s17, s0
24010390:	460d      	mov	r5, r1
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24010392:	ee31 0a40 	vsub.f32	s0, s2, s0
24010396:	ee30 9ae8 	vsub.f32	s18, s1, s17
2401039a:	ee80 0a09 	vdiv.f32	s0, s0, s18
2401039e:	f003 fcbb 	bl	24013d18 <logf>
240103a2:	eddf 7a14 	vldr	s15, [pc, #80]	; 240103f4 <LEAF_generate_table_skew_non_sym+0x70>
240103a6:	ee87 aa80 	vdiv.f32	s20, s15, s0
    Lfloat increment = 1.0 / (Lfloat)(size-1);
240103aa:	1e6b      	subs	r3, r5, #1
240103ac:	ee07 3a90 	vmov	s15, r3
240103b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240103b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240103b8:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat x = 0.0;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
240103bc:	2400      	movs	r4, #0
    Lfloat x = 0.0;
240103be:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 240103f8 <LEAF_generate_table_skew_non_sym+0x74>
    for (int i = 0; i < size; i++)
240103c2:	e012      	b.n	240103ea <LEAF_generate_table_skew_non_sym+0x66>
    {
        proportion = expf (logf(x) / skew);
240103c4:	eeb0 0a48 	vmov.f32	s0, s16
240103c8:	f003 fca6 	bl	24013d18 <logf>
240103cc:	ee80 0a0a 	vdiv.f32	s0, s0, s20
240103d0:	f003 fc26 	bl	24013c20 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
240103d4:	ee69 7a00 	vmul.f32	s15, s18, s0
240103d8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
240103dc:	ee77 7aa8 	vadd.f32	s15, s15, s17
240103e0:	edc3 7a00 	vstr	s15, [r3]
        x += increment;
240103e4:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
240103e8:	3401      	adds	r4, #1
240103ea:	42ac      	cmp	r4, r5
240103ec:	dbea      	blt.n	240103c4 <LEAF_generate_table_skew_non_sym+0x40>
    }
}
240103ee:	ecbd 8b06 	vpop	{d8-d10}
240103f2:	bd70      	pop	{r4, r5, r6, pc}
240103f4:	bf317218 	.word	0xbf317218
240103f8:	00000000 	.word	0x00000000

240103fc <LEAF_poly_blep>:
// t = phase, dt = inc, assuming 0-1 phase
// assumes discontinuity at 0, so offset inputs as needed
Lfloat LEAF_poly_blep(Lfloat t, Lfloat dt)
{
    // 0 <= t < 1
    if (t < dt) {
240103fc:	eeb4 0ae0 	vcmpe.f32	s0, s1
24010400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010404:	d417      	bmi.n	24010436 <LEAF_poly_blep+0x3a>
        t /= dt;
        return t+t - t*t - 1.0f;
    }
    // -1 < t < 0
    else if (t > 1.0f - dt) {
24010406:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401040a:	ee77 7ae0 	vsub.f32	s15, s15, s1
2401040e:	eef4 7ac0 	vcmpe.f32	s15, s0
24010412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010416:	d51b      	bpl.n	24010450 <LEAF_poly_blep+0x54>
        t = (t - 1.0f) / dt;
24010418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401041c:	ee30 0a47 	vsub.f32	s0, s0, s14
24010420:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t*t + t+t + 1.0f;
24010424:	ee27 0aa7 	vmul.f32	s0, s15, s15
24010428:	ee30 0a27 	vadd.f32	s0, s0, s15
2401042c:	ee30 0a27 	vadd.f32	s0, s0, s15
24010430:	ee30 0a07 	vadd.f32	s0, s0, s14
24010434:	4770      	bx	lr
        t /= dt;
24010436:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t+t - t*t - 1.0f;
2401043a:	ee37 0aa7 	vadd.f32	s0, s15, s15
2401043e:	ee67 7aa7 	vmul.f32	s15, s15, s15
24010442:	ee30 0a67 	vsub.f32	s0, s0, s15
24010446:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401044a:	ee30 0a67 	vsub.f32	s0, s0, s15
2401044e:	4770      	bx	lr
    }
    // 0 otherwise
    else return 0.0f;
24010450:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24010458 <LEAF_poly_blep+0x5c>
//            v *= v;
//            y += 4.0f * v;
//        }
//    }
//    return y / 12.0f;
}
24010454:	4770      	bx	lr
24010456:	bf00      	nop
24010458:	00000000 	.word	0x00000000

2401045c <LEAF_interpolate_hermite_x>:
//grabbed this from Tom Erbe's Delay pd code
Lfloat LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
    Lfloat c1 = 0.5f * (yy2 - yy0);
2401045c:	ee71 6a40 	vsub.f32	s13, s2, s0
24010460:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24010464:	ee66 6a87 	vmul.f32	s13, s13, s14
    Lfloat y0my1 = yy0 - yy1;
24010468:	ee30 0a60 	vsub.f32	s0, s0, s1
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
2401046c:	ee70 7ac1 	vsub.f32	s15, s1, s2
24010470:	ee71 1ac0 	vsub.f32	s3, s3, s0
24010474:	ee71 1ac1 	vsub.f32	s3, s3, s2
24010478:	ee61 1a87 	vmul.f32	s3, s3, s14
2401047c:	ee77 7aa1 	vadd.f32	s15, s15, s3
    Lfloat c2 = y0my1 + c1 - c3;
24010480:	ee36 0a80 	vadd.f32	s0, s13, s0
24010484:	ee30 7a67 	vsub.f32	s14, s0, s15
    
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24010488:	ee67 7a82 	vmul.f32	s15, s15, s4
2401048c:	ee77 7a87 	vadd.f32	s15, s15, s14
24010490:	ee67 7a82 	vmul.f32	s15, s15, s4
24010494:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010498:	ee27 2a82 	vmul.f32	s4, s15, s4
}
2401049c:	ee32 0a20 	vadd.f32	s0, s4, s1
240104a0:	4770      	bx	lr
	...

240104a4 <LEAF_interpolation_linear>:

// alpha, [0.0, 1.0]
Lfloat LEAF_interpolation_linear (Lfloat A, Lfloat B, Lfloat alpha)
{
240104a4:	b508      	push	{r3, lr}
240104a6:	ed2d 8b02 	vpush	{d8}
240104aa:	eef0 8a40 	vmov.f32	s17, s0
240104ae:	eeb0 8a60 	vmov.f32	s16, s1
240104b2:	eef0 0a41 	vmov.f32	s1, s2
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
240104b6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240104ba:	ed9f 0a08 	vldr	s0, [pc, #32]	; 240104dc <LEAF_interpolation_linear+0x38>
240104be:	f01e fd17 	bl	2402eef0 <__LEAF_clip_veneer>
    
    Lfloat omAlpha = 1.0f - alpha;
240104c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240104c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
    
    // First 1/2 of interpolation
    Lfloat out = A * omAlpha;
240104ca:	ee67 7aa8 	vmul.f32	s15, s15, s17
    
    out += B * alpha;
240104ce:	ee20 0a08 	vmul.f32	s0, s0, s16
    
    return out;
}
240104d2:	ee30 0a27 	vadd.f32	s0, s0, s15
240104d6:	ecbd 8b02 	vpop	{d8}
240104da:	bd08      	pop	{r3, pc}
240104dc:	00000000 	.word	0x00000000

240104e0 <mtof>:

#define LOGTEN 2.302585092994

Lfloat mtof(Lfloat f)
{
    if (f <= -1500.0f) return(0);
240104e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 24010524 <mtof+0x44>
240104e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240104e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240104ec:	d917      	bls.n	2401051e <mtof+0x3e>
{
240104ee:	b508      	push	{r3, lr}
    else if (f > 1499.0f) return(mtof(1499.0f));
240104f0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24010528 <mtof+0x48>
240104f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240104f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240104fc:	dd04      	ble.n	24010508 <mtof+0x28>
240104fe:	eeb0 0a67 	vmov.f32	s0, s15
24010502:	f7ff ffed 	bl	240104e0 <mtof>
    else return (8.17579891564f * expf(0.0577622650f * f));
}
24010506:	bd08      	pop	{r3, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24010508:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401052c <mtof+0x4c>
2401050c:	ee20 0a27 	vmul.f32	s0, s0, s15
24010510:	f003 fb86 	bl	24013c20 <expf>
24010514:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010530 <mtof+0x50>
24010518:	ee20 0a27 	vmul.f32	s0, s0, s15
2401051c:	e7f3      	b.n	24010506 <mtof+0x26>
    if (f <= -1500.0f) return(0);
2401051e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24010534 <mtof+0x54>
}
24010522:	4770      	bx	lr
24010524:	c4bb8000 	.word	0xc4bb8000
24010528:	44bb6000 	.word	0x44bb6000
2401052c:	3d6c9820 	.word	0x3d6c9820
24010530:	4102d013 	.word	0x4102d013
24010534:	00000000 	.word	0x00000000

24010538 <LEAF_generate_mtof>:
{
24010538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401053a:	ed2d 8b04 	vpush	{d8-d9}
2401053e:	4607      	mov	r7, r0
24010540:	eef0 8a40 	vmov.f32	s17, s0
24010544:	460e      	mov	r6, r1
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24010546:	1e4b      	subs	r3, r1, #1
24010548:	ee07 3a90 	vmov	s15, r3
2401054c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010554:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24010558:	ee30 9ac0 	vsub.f32	s18, s1, s0
    for (int i = 0; i < size; i++)
2401055c:	2400      	movs	r4, #0
    Lfloat x = 0.0f;
2401055e:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 24010588 <LEAF_generate_mtof+0x50>
    for (int i = 0; i < size; i++)
24010562:	e00c      	b.n	2401057e <LEAF_generate_mtof+0x46>
        Lfloat midiVal = (x * scalar) + startMIDI;
24010564:	ee28 0a09 	vmul.f32	s0, s16, s18
        buffer[i] = mtof(midiVal);
24010568:	eb07 0584 	add.w	r5, r7, r4, lsl #2
2401056c:	ee30 0a28 	vadd.f32	s0, s0, s17
24010570:	f7ff ffb6 	bl	240104e0 <mtof>
24010574:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
24010578:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
2401057c:	3401      	adds	r4, #1
2401057e:	42b4      	cmp	r4, r6
24010580:	dbf0      	blt.n	24010564 <LEAF_generate_mtof+0x2c>
}
24010582:	ecbd 8b04 	vpop	{d8-d9}
24010586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010588:	00000000 	.word	0x00000000

2401058c <faster_mtof>:
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

Lfloat faster_mtof(Lfloat f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
2401058c:	eddf 7a10 	vldr	s15, [pc, #64]	; 240105d0 <faster_mtof+0x44>
24010590:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
24010594:	eddf 7a0f 	vldr	s15, [pc, #60]	; 240105d4 <faster_mtof+0x48>
24010598:	ee20 0a27 	vmul.f32	s0, s0, s15
2401059c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240105a0:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
240105a4:	ee20 0a00 	vmul.f32	s0, s0, s0
240105a8:	ee20 0a00 	vmul.f32	s0, s0, s0
240105ac:	ee20 0a00 	vmul.f32	s0, s0, s0
240105b0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
240105b4:	ee20 0a00 	vmul.f32	s0, s0, s0
240105b8:	ee20 0a00 	vmul.f32	s0, s0, s0
240105bc:	ee20 0a00 	vmul.f32	s0, s0, s0
240105c0:	ee20 0a00 	vmul.f32	s0, s0, s0
}
240105c4:	eddf 7a04 	vldr	s15, [pc, #16]	; 240105d8 <faster_mtof+0x4c>
240105c8:	ee20 0a27 	vmul.f32	s0, s0, s15
240105cc:	4770      	bx	lr
240105ce:	bf00      	nop
240105d0:	3d6c9820 	.word	0x3d6c9820
240105d4:	3b800000 	.word	0x3b800000
240105d8:	4102d013 	.word	0x4102d013

240105dc <ftom>:

Lfloat ftom(Lfloat f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240105dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240105e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240105e4:	dc02      	bgt.n	240105ec <ftom+0x10>
240105e6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24010604 <ftom+0x28>
}
240105ea:	4770      	bx	lr
{
240105ec:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
240105ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010608 <ftom+0x2c>
240105f2:	ee20 0a27 	vmul.f32	s0, s0, s15
240105f6:	f003 fb8f 	bl	24013d18 <logf>
240105fa:	eddf 7a04 	vldr	s15, [pc, #16]	; 2401060c <ftom+0x30>
240105fe:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24010602:	bd08      	pop	{r3, pc}
24010604:	c4bb8000 	.word	0xc4bb8000
24010608:	3dfa7ed2 	.word	0x3dfa7ed2
2401060c:	418a7fac 	.word	0x418a7fac

24010610 <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


Lfloat atodb(Lfloat a)
{
24010610:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
24010612:	f003 fea3 	bl	2401435c <log10f>
}
24010616:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
2401061a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401061e:	bd08      	pop	{r3, pc}

24010620 <LEAF_generate_atodb>:
{
24010620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24010622:	ed2d 8b02 	vpush	{d8}
24010626:	4607      	mov	r7, r0
24010628:	460e      	mov	r6, r1
2401062a:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
2401062e:	ee70 0ac0 	vsub.f32	s1, s1, s0
24010632:	1e4b      	subs	r3, r1, #1
24010634:	ee07 3a90 	vmov	s15, r3
24010638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401063c:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24010640:	2400      	movs	r4, #0
24010642:	e00a      	b.n	2401065a <LEAF_generate_atodb+0x3a>
        buffer[i] = atodb(x);
24010644:	eb07 0584 	add.w	r5, r7, r4, lsl #2
24010648:	eeb0 0a48 	vmov.f32	s0, s16
2401064c:	f7ff ffe0 	bl	24010610 <atodb>
24010650:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
24010654:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
24010658:	3401      	adds	r4, #1
2401065a:	42b4      	cmp	r4, r6
2401065c:	dbf2      	blt.n	24010644 <LEAF_generate_atodb+0x24>
}
2401065e:	ecbd 8b02 	vpop	{d8}
24010662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24010664 <fasteratodb>:
Lfloat fasteratodb(Lfloat a)
{
24010664:	b508      	push	{r3, lr}
	return 20.0f*log10f_fast(a);
24010666:	f7ff fd2b 	bl	240100c0 <log2f_approx>
2401066a:	eddf 7a04 	vldr	s15, [pc, #16]	; 2401067c <fasteratodb+0x18>
2401066e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24010672:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
24010676:	ee20 0a27 	vmul.f32	s0, s0, s15
2401067a:	bd08      	pop	{r3, pc}
2401067c:	3e9a209b 	.word	0x3e9a209b

24010680 <dbtoa>:

Lfloat dbtoa(Lfloat db)
{
24010680:	b508      	push	{r3, lr}
    return powf(10.0f, db * 0.05f);
24010682:	eddf 0a04 	vldr	s1, [pc, #16]	; 24010694 <dbtoa+0x14>
24010686:	ee60 0a20 	vmul.f32	s1, s0, s1
2401068a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
2401068e:	f003 fc67 	bl	24013f60 <powf>
}
24010692:	bd08      	pop	{r3, pc}
24010694:	3d4ccccd 	.word	0x3d4ccccd

24010698 <LEAF_generate_dbtoa>:
{
24010698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401069a:	ed2d 8b02 	vpush	{d8}
2401069e:	4607      	mov	r7, r0
240106a0:	460e      	mov	r6, r1
240106a2:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
240106a6:	ee70 0ac0 	vsub.f32	s1, s1, s0
240106aa:	1e4b      	subs	r3, r1, #1
240106ac:	ee07 3a90 	vmov	s15, r3
240106b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240106b4:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
240106b8:	2400      	movs	r4, #0
240106ba:	e00a      	b.n	240106d2 <LEAF_generate_dbtoa+0x3a>
        buffer[i] = dbtoa(x);
240106bc:	eb07 0584 	add.w	r5, r7, r4, lsl #2
240106c0:	eeb0 0a48 	vmov.f32	s0, s16
240106c4:	f7ff ffdc 	bl	24010680 <dbtoa>
240106c8:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
240106cc:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
240106d0:	3401      	adds	r4, #1
240106d2:	42b4      	cmp	r4, r6
240106d4:	dbf2      	blt.n	240106bc <LEAF_generate_dbtoa+0x24>
}
240106d6:	ecbd 8b02 	vpop	{d8}
240106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240106dc <fastdbtoa>:


Lfloat fastdbtoa(Lfloat db)
{
240106dc:	b508      	push	{r3, lr}
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
240106de:	eddf 7a03 	vldr	s15, [pc, #12]	; 240106ec <fastdbtoa+0x10>
240106e2:	ee20 0a27 	vmul.f32	s0, s0, s15
240106e6:	f003 fa9b 	bl	24013c20 <expf>
}
240106ea:	bd08      	pop	{r3, pc}
240106ec:	3debc8e3 	.word	0x3debc8e3

240106f0 <fasterdbtoa>:

Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
240106f0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2401072c <fasterdbtoa+0x3c>
240106f4:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
240106f8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24010730 <fasterdbtoa+0x40>
240106fc:	ee20 0a27 	vmul.f32	s0, s0, s15
24010700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010704:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
24010708:	ee20 0a00 	vmul.f32	s0, s0, s0
2401070c:	ee20 0a00 	vmul.f32	s0, s0, s0
24010710:	ee20 0a00 	vmul.f32	s0, s0, s0
24010714:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24010718:	ee20 0a00 	vmul.f32	s0, s0, s0
2401071c:	ee20 0a00 	vmul.f32	s0, s0, s0
24010720:	ee20 0a00 	vmul.f32	s0, s0, s0
}
24010724:	ee20 0a00 	vmul.f32	s0, s0, s0
24010728:	4770      	bx	lr
2401072a:	bf00      	nop
2401072c:	3debc8e3 	.word	0x3debc8e3
24010730:	3b800000 	.word	0x3b800000

24010734 <maximum>:


Lfloat maximum (Lfloat num1, Lfloat num2)
{
24010734:	eef0 7a40 	vmov.f32	s15, s0
24010738:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 > num2 ) ? num1 : num2;
2401073c:	eef4 7ae0 	vcmpe.f32	s15, s1
24010740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010744:	dd01      	ble.n	2401074a <maximum+0x16>
24010746:	eeb0 0a67 	vmov.f32	s0, s15
}
2401074a:	4770      	bx	lr

2401074c <minimum>:

Lfloat minimum (Lfloat num1, Lfloat num2)
{
2401074c:	eef0 7a40 	vmov.f32	s15, s0
24010750:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 < num2 ) ? num1 : num2;
24010754:	eef4 7ae0 	vcmpe.f32	s15, s1
24010758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401075c:	d501      	bpl.n	24010762 <minimum+0x16>
2401075e:	eeb0 0a67 	vmov.f32	s0, s15
}
24010762:	4770      	bx	lr

24010764 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
24010764:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24010766:	6853      	ldr	r3, [r2, #4]
24010768:	2410      	movs	r4, #16
2401076a:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
2401076c:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
2401076e:	2400      	movs	r4, #0
24010770:	60d4      	str	r4, [r2, #12]
    pool->msize  = size;
24010772:	6111      	str	r1, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24010774:	6853      	ldr	r3, [r2, #4]
24010776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010778:	1ac9      	subs	r1, r1, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
2401077a:	4403      	add	r3, r0
2401077c:	6003      	str	r3, [r0, #0]
    node->next = next;
2401077e:	6044      	str	r4, [r0, #4]
    node->prev = prev;
24010780:	6084      	str	r4, [r0, #8]
    node->size = size;
24010782:	60c1      	str	r1, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24010784:	6150      	str	r0, [r2, #20]
}
24010786:	f85d 4b04 	ldr.w	r4, [sp], #4
2401078a:	4770      	bx	lr

2401078c <leaf_pool_init>:
{
2401078c:	b538      	push	{r3, r4, r5, lr}
2401078e:	4604      	mov	r4, r0
24010790:	4608      	mov	r0, r1
24010792:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
24010794:	f104 051c 	add.w	r5, r4, #28
24010798:	462a      	mov	r2, r5
2401079a:	f7ff ffe3 	bl	24010764 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
2401079e:	61a5      	str	r5, [r4, #24]
}
240107a0:	bd38      	pop	{r3, r4, r5, pc}

240107a2 <mpool_alloc>:
{
240107a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240107a4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
240107a6:	684a      	ldr	r2, [r1, #4]
240107a8:	6c93      	ldr	r3, [r2, #72]	; 0x48
240107aa:	3301      	adds	r3, #1
240107ac:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
240107ae:	694c      	ldr	r4, [r1, #20]
240107b0:	b1ac      	cbz	r4, 240107de <mpool_alloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
240107b2:	1dc2      	adds	r2, r0, #7
240107b4:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
240107b8:	68e3      	ldr	r3, [r4, #12]
240107ba:	4293      	cmp	r3, r2
240107bc:	d226      	bcs.n	2401080c <mpool_alloc+0x6a>
        node_to_alloc = node_to_alloc->next;
240107be:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
240107c0:	2c00      	cmp	r4, #0
240107c2:	d1f9      	bne.n	240107b8 <mpool_alloc+0x16>
            if ((pool->msize - pool->usize) > asize)
240107c4:	f8dc 3010 	ldr.w	r3, [ip, #16]
240107c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
240107cc:	1a9b      	subs	r3, r3, r2
240107ce:	4283      	cmp	r3, r0
240107d0:	d916      	bls.n	24010800 <mpool_alloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240107d2:	2101      	movs	r1, #1
240107d4:	f8dc 0004 	ldr.w	r0, [ip, #4]
240107d8:	f002 fa96 	bl	24012d08 <LEAF_internalErrorCallback>
240107dc:	e057      	b.n	2401088e <mpool_alloc+0xec>
        if ((pool->msize - pool->usize) > asize)
240107de:	690b      	ldr	r3, [r1, #16]
240107e0:	68ca      	ldr	r2, [r1, #12]
240107e2:	1a9b      	subs	r3, r3, r2
240107e4:	4283      	cmp	r3, r0
240107e6:	d905      	bls.n	240107f4 <mpool_alloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240107e8:	2101      	movs	r1, #1
240107ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
240107ee:	f002 fa8b 	bl	24012d08 <LEAF_internalErrorCallback>
240107f2:	e04c      	b.n	2401088e <mpool_alloc+0xec>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240107f4:	2100      	movs	r1, #0
240107f6:	f8dc 0004 	ldr.w	r0, [ip, #4]
240107fa:	f002 fa85 	bl	24012d08 <LEAF_internalErrorCallback>
        return NULL;
240107fe:	e046      	b.n	2401088e <mpool_alloc+0xec>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24010800:	2100      	movs	r1, #0
24010802:	f8dc 0004 	ldr.w	r0, [ip, #4]
24010806:	f002 fa7f 	bl	24012d08 <LEAF_internalErrorCallback>
            return NULL;
2401080a:	e040      	b.n	2401088e <mpool_alloc+0xec>
    size_t leftover = node_to_alloc->size - size_to_alloc;
2401080c:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
2401080e:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
24010810:	f8dc 1004 	ldr.w	r1, [ip, #4]
24010814:	6b49      	ldr	r1, [r1, #52]	; 0x34
24010816:	4281      	cmp	r1, r0
24010818:	d22c      	bcs.n	24010874 <mpool_alloc+0xd2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401081a:	f8dc 5008 	ldr.w	r5, [ip, #8]
2401081e:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
24010820:	440a      	add	r2, r1
24010822:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
24010824:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
24010826:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
24010828:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
2401082a:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
2401082c:	4419      	add	r1, r3
2401082e:	50a9      	str	r1, [r5, r2]
    node->next = next;
24010830:	605f      	str	r7, [r3, #4]
    node->prev = prev;
24010832:	609e      	str	r6, [r3, #8]
    node->size = size;
24010834:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
24010836:	f8dc 2014 	ldr.w	r2, [ip, #20]
2401083a:	42a2      	cmp	r2, r4
2401083c:	d01d      	beq.n	2401087a <mpool_alloc+0xd8>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
2401083e:	6863      	ldr	r3, [r4, #4]
24010840:	b10b      	cbz	r3, 24010846 <mpool_alloc+0xa4>
    {
        // Close the link
        node->next->prev = node->prev;
24010842:	68a2      	ldr	r2, [r4, #8]
24010844:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24010846:	68a3      	ldr	r3, [r4, #8]
24010848:	b10b      	cbz	r3, 2401084e <mpool_alloc+0xac>
    {
        // Close the link
        node->prev->next = node->next;
2401084a:	6862      	ldr	r2, [r4, #4]
2401084c:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
2401084e:	2300      	movs	r3, #0
24010850:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
24010852:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24010854:	f8dc 1004 	ldr.w	r1, [ip, #4]
24010858:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2401085a:	68e2      	ldr	r2, [r4, #12]
2401085c:	441a      	add	r2, r3
2401085e:	f8dc 300c 	ldr.w	r3, [ip, #12]
24010862:	4413      	add	r3, r2
24010864:	f8cc 300c 	str.w	r3, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24010868:	694b      	ldr	r3, [r1, #20]
2401086a:	2b00      	cmp	r3, #0
2401086c:	dd0e      	ble.n	2401088c <mpool_alloc+0xea>
        char* new_pool = (char*)node_to_alloc->pool;
2401086e:	6821      	ldr	r1, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24010870:	2300      	movs	r3, #0
24010872:	e008      	b.n	24010886 <mpool_alloc+0xe4>
        node_to_alloc->size += leftover;
24010874:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
24010876:	6863      	ldr	r3, [r4, #4]
24010878:	e7dd      	b.n	24010836 <mpool_alloc+0x94>
        pool->head = new_node;
2401087a:	f8cc 3014 	str.w	r3, [ip, #20]
2401087e:	e7de      	b.n	2401083e <mpool_alloc+0x9c>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24010880:	2200      	movs	r2, #0
24010882:	54ca      	strb	r2, [r1, r3]
24010884:	3301      	adds	r3, #1
24010886:	68e2      	ldr	r2, [r4, #12]
24010888:	429a      	cmp	r2, r3
2401088a:	d8f9      	bhi.n	24010880 <mpool_alloc+0xde>
    return node_to_alloc->pool;
2401088c:	6824      	ldr	r4, [r4, #0]
}
2401088e:	4620      	mov	r0, r4
24010890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24010892 <mpool_calloc>:
{
24010892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24010894:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24010896:	684a      	ldr	r2, [r1, #4]
24010898:	6c93      	ldr	r3, [r2, #72]	; 0x48
2401089a:	3301      	adds	r3, #1
2401089c:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
2401089e:	694c      	ldr	r4, [r1, #20]
240108a0:	b1ac      	cbz	r4, 240108ce <mpool_calloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
240108a2:	1dc2      	adds	r2, r0, #7
240108a4:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
240108a8:	68e3      	ldr	r3, [r4, #12]
240108aa:	4293      	cmp	r3, r2
240108ac:	d226      	bcs.n	240108fc <mpool_calloc+0x6a>
        node_to_alloc = node_to_alloc->next;
240108ae:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
240108b0:	2c00      	cmp	r4, #0
240108b2:	d1f9      	bne.n	240108a8 <mpool_calloc+0x16>
            if ((pool->msize - pool->usize) > asize)
240108b4:	f8dc 3010 	ldr.w	r3, [ip, #16]
240108b8:	f8dc 200c 	ldr.w	r2, [ip, #12]
240108bc:	1a9b      	subs	r3, r3, r2
240108be:	4283      	cmp	r3, r0
240108c0:	d916      	bls.n	240108f0 <mpool_calloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240108c2:	2101      	movs	r1, #1
240108c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
240108c8:	f002 fa1e 	bl	24012d08 <LEAF_internalErrorCallback>
240108cc:	e053      	b.n	24010976 <mpool_calloc+0xe4>
        if ((pool->msize - pool->usize) > asize)
240108ce:	690b      	ldr	r3, [r1, #16]
240108d0:	68ca      	ldr	r2, [r1, #12]
240108d2:	1a9b      	subs	r3, r3, r2
240108d4:	4283      	cmp	r3, r0
240108d6:	d905      	bls.n	240108e4 <mpool_calloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240108d8:	2101      	movs	r1, #1
240108da:	f8dc 0004 	ldr.w	r0, [ip, #4]
240108de:	f002 fa13 	bl	24012d08 <LEAF_internalErrorCallback>
240108e2:	e048      	b.n	24010976 <mpool_calloc+0xe4>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240108e4:	2100      	movs	r1, #0
240108e6:	f8dc 0004 	ldr.w	r0, [ip, #4]
240108ea:	f002 fa0d 	bl	24012d08 <LEAF_internalErrorCallback>
        return NULL;
240108ee:	e042      	b.n	24010976 <mpool_calloc+0xe4>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240108f0:	2100      	movs	r1, #0
240108f2:	f8dc 0004 	ldr.w	r0, [ip, #4]
240108f6:	f002 fa07 	bl	24012d08 <LEAF_internalErrorCallback>
            return NULL;
240108fa:	e03c      	b.n	24010976 <mpool_calloc+0xe4>
    size_t leftover = node_to_alloc->size - size_to_alloc;
240108fc:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
240108fe:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
24010900:	f8dc 1004 	ldr.w	r1, [ip, #4]
24010904:	6b49      	ldr	r1, [r1, #52]	; 0x34
24010906:	4281      	cmp	r1, r0
24010908:	d227      	bcs.n	2401095a <mpool_calloc+0xc8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401090a:	f8dc 5008 	ldr.w	r5, [ip, #8]
2401090e:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
24010910:	440a      	add	r2, r1
24010912:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
24010914:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
24010916:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
24010918:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
2401091a:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
2401091c:	4419      	add	r1, r3
2401091e:	50a9      	str	r1, [r5, r2]
    node->next = next;
24010920:	605f      	str	r7, [r3, #4]
    node->prev = prev;
24010922:	609e      	str	r6, [r3, #8]
    node->size = size;
24010924:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
24010926:	f8dc 2014 	ldr.w	r2, [ip, #20]
2401092a:	42a2      	cmp	r2, r4
2401092c:	d018      	beq.n	24010960 <mpool_calloc+0xce>
    if (node->next != NULL)
2401092e:	6863      	ldr	r3, [r4, #4]
24010930:	b10b      	cbz	r3, 24010936 <mpool_calloc+0xa4>
        node->next->prev = node->prev;
24010932:	68a2      	ldr	r2, [r4, #8]
24010934:	609a      	str	r2, [r3, #8]
    if (node->prev != NULL)
24010936:	68a3      	ldr	r3, [r4, #8]
24010938:	b10b      	cbz	r3, 2401093e <mpool_calloc+0xac>
        node->prev->next = node->next;
2401093a:	6862      	ldr	r2, [r4, #4]
2401093c:	605a      	str	r2, [r3, #4]
    node->next = NULL;
2401093e:	2300      	movs	r3, #0
24010940:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
24010942:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24010944:	f8dc 2004 	ldr.w	r2, [ip, #4]
24010948:	6b52      	ldr	r2, [r2, #52]	; 0x34
2401094a:	68e1      	ldr	r1, [r4, #12]
2401094c:	4411      	add	r1, r2
2401094e:	f8dc 200c 	ldr.w	r2, [ip, #12]
24010952:	440a      	add	r2, r1
24010954:	f8cc 200c 	str.w	r2, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24010958:	e009      	b.n	2401096e <mpool_calloc+0xdc>
        node_to_alloc->size += leftover;
2401095a:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
2401095c:	6863      	ldr	r3, [r4, #4]
2401095e:	e7e2      	b.n	24010926 <mpool_calloc+0x94>
        pool->head = new_node;
24010960:	f8cc 3014 	str.w	r3, [ip, #20]
24010964:	e7e3      	b.n	2401092e <mpool_calloc+0x9c>
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24010966:	6822      	ldr	r2, [r4, #0]
24010968:	2100      	movs	r1, #0
2401096a:	54d1      	strb	r1, [r2, r3]
2401096c:	3301      	adds	r3, #1
2401096e:	68e2      	ldr	r2, [r4, #12]
24010970:	429a      	cmp	r2, r3
24010972:	d8f8      	bhi.n	24010966 <mpool_calloc+0xd4>
    return node_to_alloc->pool;
24010974:	6824      	ldr	r4, [r4, #0]
}
24010976:	4620      	mov	r0, r4
24010978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2401097a <mpool_free>:
{
2401097a:	468c      	mov	ip, r1
    pool->leaf->freeCount++;
2401097c:	684a      	ldr	r2, [r1, #4]
2401097e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24010980:	3301      	adds	r3, #1
24010982:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24010984:	684b      	ldr	r3, [r1, #4]
24010986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010988:	1ac0      	subs	r0, r0, r3
    pool->usize -= pool->leaf->header_size + freed_node->size;
2401098a:	68c2      	ldr	r2, [r0, #12]
2401098c:	4413      	add	r3, r2
2401098e:	68ca      	ldr	r2, [r1, #12]
24010990:	1ad3      	subs	r3, r2, r3
24010992:	60cb      	str	r3, [r1, #12]
    mpool_node_t* other_node = pool->head;
24010994:	694b      	ldr	r3, [r1, #20]
    while (other_node != NULL)
24010996:	2b00      	cmp	r3, #0
24010998:	d05c      	beq.n	24010a54 <mpool_free+0xda>
{
2401099a:	b570      	push	{r4, r5, r6, lr}
2401099c:	e01b      	b.n	240109d6 <mpool_free+0x5c>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
2401099e:	2102      	movs	r1, #2
240109a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
240109a4:	f002 f9b0 	bl	24012d08 <LEAF_internalErrorCallback>
}
240109a8:	bd70      	pop	{r4, r5, r6, pc}
            freed_node->size += pool->leaf->header_size + other_node->size;
240109aa:	68dc      	ldr	r4, [r3, #12]
240109ac:	4422      	add	r2, r4
240109ae:	440a      	add	r2, r1
240109b0:	60c2      	str	r2, [r0, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
240109b2:	f8dc 2014 	ldr.w	r2, [ip, #20]
240109b6:	429a      	cmp	r2, r3
240109b8:	d03b      	beq.n	24010a32 <mpool_free+0xb8>
    if (node->next != NULL)
240109ba:	685a      	ldr	r2, [r3, #4]
240109bc:	b10a      	cbz	r2, 240109c2 <mpool_free+0x48>
        node->next->prev = node->prev;
240109be:	6899      	ldr	r1, [r3, #8]
240109c0:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
240109c2:	689a      	ldr	r2, [r3, #8]
240109c4:	b10a      	cbz	r2, 240109ca <mpool_free+0x50>
        node->prev->next = node->next;
240109c6:	6859      	ldr	r1, [r3, #4]
240109c8:	6051      	str	r1, [r2, #4]
    node->next = NULL;
240109ca:	2200      	movs	r2, #0
240109cc:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
240109ce:	609a      	str	r2, [r3, #8]
                freed_node = other_node;
240109d0:	462b      	mov	r3, r5
    while (other_node != NULL)
240109d2:	2d00      	cmp	r5, #0
240109d4:	d036      	beq.n	24010a44 <mpool_free+0xca>
        if ((long) other_node < (long) pool->mpool ||
240109d6:	f8dc 2008 	ldr.w	r2, [ip, #8]
240109da:	429a      	cmp	r2, r3
240109dc:	dcdf      	bgt.n	2401099e <mpool_free+0x24>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
240109de:	f8dc 1010 	ldr.w	r1, [ip, #16]
240109e2:	440a      	add	r2, r1
240109e4:	469e      	mov	lr, r3
        if ((long) other_node < (long) pool->mpool ||
240109e6:	429a      	cmp	r2, r3
240109e8:	d9d9      	bls.n	2401099e <mpool_free+0x24>
        next_node = other_node->next;
240109ea:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240109ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
240109f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
240109f2:	68c1      	ldr	r1, [r0, #12]
240109f4:	1854      	adds	r4, r2, r1
240109f6:	1826      	adds	r6, r4, r0
240109f8:	42b3      	cmp	r3, r6
240109fa:	d0d6      	beq.n	240109aa <mpool_free+0x30>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
240109fc:	68d9      	ldr	r1, [r3, #12]
240109fe:	440a      	add	r2, r1
24010a00:	441a      	add	r2, r3
24010a02:	4290      	cmp	r0, r2
24010a04:	d1e4      	bne.n	240109d0 <mpool_free+0x56>
            other_node->size += pool->leaf->header_size + freed_node->size;
24010a06:	440c      	add	r4, r1
24010a08:	60dc      	str	r4, [r3, #12]
            if (other_node != pool->head)
24010a0a:	f8dc 2014 	ldr.w	r2, [ip, #20]
24010a0e:	429a      	cmp	r2, r3
24010a10:	d013      	beq.n	24010a3a <mpool_free+0xc0>
    if (node->next != NULL)
24010a12:	685a      	ldr	r2, [r3, #4]
24010a14:	b10a      	cbz	r2, 24010a1a <mpool_free+0xa0>
        node->next->prev = node->prev;
24010a16:	6899      	ldr	r1, [r3, #8]
24010a18:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24010a1a:	689a      	ldr	r2, [r3, #8]
24010a1c:	b10a      	cbz	r2, 24010a22 <mpool_free+0xa8>
        node->prev->next = node->next;
24010a1e:	6859      	ldr	r1, [r3, #4]
24010a20:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24010a22:	2200      	movs	r2, #0
24010a24:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
24010a26:	609a      	str	r2, [r3, #8]
                other_node->next = pool->head;
24010a28:	f8dc 2014 	ldr.w	r2, [ip, #20]
24010a2c:	605a      	str	r2, [r3, #4]
                freed_node = other_node;
24010a2e:	4618      	mov	r0, r3
24010a30:	e7ce      	b.n	240109d0 <mpool_free+0x56>
            if (other_node == pool->head) pool->head = pool->head->next;
24010a32:	6852      	ldr	r2, [r2, #4]
24010a34:	f8cc 2014 	str.w	r2, [ip, #20]
24010a38:	e7bf      	b.n	240109ba <mpool_free+0x40>
                pool->head = pool->head->next;
24010a3a:	6852      	ldr	r2, [r2, #4]
24010a3c:	f8cc 2014 	str.w	r2, [ip, #20]
                freed_node = other_node;
24010a40:	4618      	mov	r0, r3
24010a42:	e7c5      	b.n	240109d0 <mpool_free+0x56>
    freed_node->next = pool->head;
24010a44:	f8dc 3014 	ldr.w	r3, [ip, #20]
24010a48:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24010a4a:	b103      	cbz	r3, 24010a4e <mpool_free+0xd4>
24010a4c:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
24010a4e:	f8cc 0014 	str.w	r0, [ip, #20]
24010a52:	e7a9      	b.n	240109a8 <mpool_free+0x2e>
    freed_node->next = pool->head;
24010a54:	694b      	ldr	r3, [r1, #20]
24010a56:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24010a58:	b103      	cbz	r3, 24010a5c <mpool_free+0xe2>
24010a5a:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
24010a5c:	f8cc 0014 	str.w	r0, [ip, #20]
24010a60:	4770      	bx	lr

24010a62 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
24010a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24010a64:	4606      	mov	r6, r0
24010a66:	460c      	mov	r4, r1
24010a68:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
24010a6a:	681f      	ldr	r7, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24010a6c:	4639      	mov	r1, r7
24010a6e:	2018      	movs	r0, #24
24010a70:	f7ff fe97 	bl	240107a2 <mpool_alloc>
24010a74:	4602      	mov	r2, r0
24010a76:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
24010a78:	687b      	ldr	r3, [r7, #4]
24010a7a:	6043      	str	r3, [r0, #4]
    
    mpool_create (memory, size, m);
24010a7c:	4629      	mov	r1, r5
24010a7e:	4620      	mov	r0, r4
24010a80:	f7ff fe70 	bl	24010764 <mpool_create>
}
24010a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24010a86 <tMempool_init>:
{
24010a86:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
24010a88:	3318      	adds	r3, #24
24010a8a:	f7ff ffea 	bl	24010a62 <tMempool_initToPool>
}
24010a8e:	bd08      	pop	{r3, pc}

24010a90 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
24010a90:	b538      	push	{r3, r4, r5, lr}
24010a92:	4605      	mov	r5, r0
    _tMempool* m = *mp;
24010a94:	680c      	ldr	r4, [r1, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24010a96:	4621      	mov	r1, r4
24010a98:	2018      	movs	r0, #24
24010a9a:	f7ff fe82 	bl	240107a2 <mpool_alloc>
24010a9e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24010aa0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24010aa2:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
24010aa4:	2300      	movs	r3, #0
24010aa6:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
24010aa8:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24010aaa:	edd2 7a01 	vldr	s15, [r2, #4]
24010aae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24010ac4 <tCycle_initToPool+0x34>
24010ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
24010ab6:	edc0 7a04 	vstr	s15, [r0, #16]
    c->mask = SINE_TABLE_SIZE - 1;
24010aba:	f240 73ff 	movw	r3, #2047	; 0x7ff
24010abe:	6143      	str	r3, [r0, #20]
}
24010ac0:	bd38      	pop	{r3, r4, r5, pc}
24010ac2:	bf00      	nop
24010ac4:	4f800000 	.word	0x4f800000

24010ac8 <tCycle_init>:
{
24010ac8:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf->mempool);
24010aca:	3118      	adds	r1, #24
24010acc:	f7ff ffe0 	bl	24010a90 <tCycle_initToPool>
}
24010ad0:	bd08      	pop	{r3, pc}
	...

24010ad4 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24010ad4:	6801      	ldr	r1, [r0, #0]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;
    
    // Phasor increment
    c->phase += c->inc;
24010ad6:	688b      	ldr	r3, [r1, #8]
24010ad8:	684a      	ldr	r2, [r1, #4]
24010ada:	4413      	add	r3, r2
24010adc:	604b      	str	r3, [r1, #4]
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
24010ade:	0d5a      	lsrs	r2, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24010ae0:	f3c3 0314 	ubfx	r3, r3, #0, #21
24010ae4:	ee07 3a90 	vmov	s15, r3
    
    samp0 = __leaf_table_sinewave[idx];
24010ae8:	4b0c      	ldr	r3, [pc, #48]	; (24010b1c <tCycle_tick+0x48>)
24010aea:	eb03 0082 	add.w	r0, r3, r2, lsl #2
24010aee:	ed90 0a00 	vldr	s0, [r0]
    idx = (idx + 1) & c->mask;
24010af2:	3201      	adds	r2, #1
24010af4:	6949      	ldr	r1, [r1, #20]
24010af6:	400a      	ands	r2, r1
    samp1 = __leaf_table_sinewave[idx];
24010af8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
24010afc:	ed92 7a00 	vldr	s14, [r2]
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24010b00:	ee37 7a40 	vsub.f32	s14, s14, s0
24010b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010b08:	eddf 6a05 	vldr	s13, [pc, #20]	; 24010b20 <tCycle_tick+0x4c>
24010b0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24010b10:	ee67 7a27 	vmul.f32	s15, s14, s15
}
24010b14:	ee37 0a80 	vadd.f32	s0, s15, s0
24010b18:	4770      	bx	lr
24010b1a:	bf00      	nop
24010b1c:	2401dac4 	.word	0x2401dac4
24010b20:	35000004 	.word	0x35000004

24010b24 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
24010b24:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
24010b26:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24010b2a:	edd3 7a04 	vldr	s15, [r3, #16]
24010b2e:	ee27 0a80 	vmul.f32	s0, s15, s0
24010b32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24010b36:	ed83 0a02 	vstr	s0, [r3, #8]
}
24010b3a:	4770      	bx	lr

24010b3c <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
24010b3c:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
24010b3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24010b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010b46:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24010b4a:	eddf 7a04 	vldr	s15, [pc, #16]	; 24010b5c <tCycle_setPhase+0x20>
24010b4e:	ee20 0a27 	vmul.f32	s0, s0, s15
24010b52:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24010b56:	ed83 0a01 	vstr	s0, [r3, #4]
}
24010b5a:	4770      	bx	lr
24010b5c:	4f800000 	.word	0x4f800000

24010b60 <tPBTriangle_initToPool>:
{
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
24010b60:	b538      	push	{r3, r4, r5, lr}
24010b62:	4605      	mov	r5, r0
    _tMempool* m = *mp;
24010b64:	680c      	ldr	r4, [r1, #0]
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
24010b66:	4621      	mov	r1, r4
24010b68:	201c      	movs	r0, #28
24010b6a:	f7ff fe1a 	bl	240107a2 <mpool_alloc>
24010b6e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24010b70:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24010b72:	6863      	ldr	r3, [r4, #4]

    c->invSampleRate = leaf->invSampleRate;
24010b74:	685b      	ldr	r3, [r3, #4]
24010b76:	6183      	str	r3, [r0, #24]
    c->inc      =  0.0f;
24010b78:	2300      	movs	r3, #0
24010b7a:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
24010b7c:	6043      	str	r3, [r0, #4]
    c->skew     =  0.5f;
24010b7e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
24010b82:	6102      	str	r2, [r0, #16]
    c->lastOut  =  0.0f;
24010b84:	6143      	str	r3, [r0, #20]
}
24010b86:	bd38      	pop	{r3, r4, r5, pc}

24010b88 <tPBTriangle_init>:
{
24010b88:	b508      	push	{r3, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
24010b8a:	3118      	adds	r1, #24
24010b8c:	f7ff ffe8 	bl	24010b60 <tPBTriangle_initToPool>
}
24010b90:	bd08      	pop	{r3, pc}

24010b92 <tPBTriangle_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
{
24010b92:	b510      	push	{r4, lr}
24010b94:	ed2d 8b04 	vpush	{d8-d9}
    _tPBTriangle* c = *osc;
24010b98:	6804      	ldr	r4, [r0, #0]
    
    Lfloat out;
    Lfloat skew;
    
    if (c->phase < c->skew)
24010b9a:	ed94 0a01 	vldr	s0, [r4, #4]
24010b9e:	edd4 7a04 	vldr	s15, [r4, #16]
24010ba2:	eeb4 0ae7 	vcmpe.f32	s0, s15
24010ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010baa:	d54e      	bpl.n	24010c4a <tPBTriangle_tick+0xb8>
    {
        out = 1.0f;
        skew = (1.0f - c->skew) * 2.0f;
24010bac:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24010bb0:	ee78 7ae7 	vsub.f32	s15, s17, s15
24010bb4:	ee37 8aa7 	vadd.f32	s16, s15, s15
    {
        out = -1.0f;
        skew = c->skew * 2.0f;
    }
    
    out += LEAF_poly_blep(c->phase, c->inc);
24010bb8:	edd4 0a02 	vldr	s1, [r4, #8]
24010bbc:	f7ff fc1e 	bl	240103fc <LEAF_poly_blep>
24010bc0:	ee78 8a80 	vadd.f32	s17, s17, s0
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->skew), 1.0f), c->inc);
24010bc4:	ed94 0a01 	vldr	s0, [r4, #4]
24010bc8:	edd4 7a04 	vldr	s15, [r4, #16]
24010bcc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24010bd0:	ee79 7a67 	vsub.f32	s15, s18, s15
24010bd4:	eef0 0a49 	vmov.f32	s1, s18
24010bd8:	ee30 0a27 	vadd.f32	s0, s0, s15
24010bdc:	f003 fb9e 	bl	2401431c <fmodf>
24010be0:	edd4 0a02 	vldr	s1, [r4, #8]
24010be4:	f7ff fc0a 	bl	240103fc <LEAF_poly_blep>
24010be8:	ee78 8ac0 	vsub.f32	s17, s17, s0
    
    out = (skew * c->inc * out) + ((1 - c->inc) * c->lastOut);
24010bec:	ed94 7a02 	vldr	s14, [r4, #8]
24010bf0:	ee27 0a08 	vmul.f32	s0, s14, s16
24010bf4:	ee20 0a28 	vmul.f32	s0, s0, s17
24010bf8:	ee79 7a47 	vsub.f32	s15, s18, s14
24010bfc:	edd4 6a05 	vldr	s13, [r4, #20]
24010c00:	ee67 7aa6 	vmul.f32	s15, s15, s13
24010c04:	ee30 0a27 	vadd.f32	s0, s0, s15
    c->lastOut = out;
24010c08:	ed84 0a05 	vstr	s0, [r4, #20]
    
    c->phase += c->inc - (int)c->inc;
24010c0c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
24010c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010c14:	ee37 7a67 	vsub.f32	s14, s14, s15
24010c18:	edd4 7a01 	vldr	s15, [r4, #4]
24010c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
24010c20:	ed84 7a01 	vstr	s14, [r4, #4]
    if (c->phase >= 1.0f) c->phase -= 1.0f;
24010c24:	eeb4 7ac9 	vcmpe.f32	s14, s18
24010c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010c2c:	db03      	blt.n	24010c36 <tPBTriangle_tick+0xa4>
24010c2e:	ee37 7a49 	vsub.f32	s14, s14, s18
24010c32:	ed84 7a01 	vstr	s14, [r4, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
24010c36:	edd4 7a01 	vldr	s15, [r4, #4]
24010c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010c42:	d407      	bmi.n	24010c54 <tPBTriangle_tick+0xc2>
    
    return out;
}
24010c44:	ecbd 8b04 	vpop	{d8-d9}
24010c48:	bd10      	pop	{r4, pc}
        skew = c->skew * 2.0f;
24010c4a:	ee37 8aa7 	vadd.f32	s16, s15, s15
        out = -1.0f;
24010c4e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
24010c52:	e7b1      	b.n	24010bb8 <tPBTriangle_tick+0x26>
    if (c->phase < 0.0f) c->phase += 1.0f;
24010c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010c58:	ee77 7a87 	vadd.f32	s15, s15, s14
24010c5c:	edc4 7a01 	vstr	s15, [r4, #4]
    return out;
24010c60:	e7f0      	b.n	24010c44 <tPBTriangle_tick+0xb2>

24010c62 <tPBTriangle_setFreq>:

void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
{
    _tPBTriangle* c = *osc;
24010c62:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
24010c64:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
24010c68:	edd3 7a06 	vldr	s15, [r3, #24]
24010c6c:	ee27 0a80 	vmul.f32	s0, s15, s0
24010c70:	ed83 0a02 	vstr	s0, [r3, #8]
}
24010c74:	4770      	bx	lr

24010c76 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat skew)
{
    _tPBTriangle* c = *osc;
24010c76:	6803      	ldr	r3, [r0, #0]
    c->skew = (skew + 1.0f) * 0.5f;
24010c78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010c7c:	ee30 0a27 	vadd.f32	s0, s0, s15
24010c80:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24010c84:	ee20 0a27 	vmul.f32	s0, s0, s15
24010c88:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010c8c:	4770      	bx	lr

24010c8e <tPBPulse_initToPool>:
{
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
24010c8e:	b538      	push	{r3, r4, r5, lr}
24010c90:	4605      	mov	r5, r0
    _tMempool* m = *mp;
24010c92:	680c      	ldr	r4, [r1, #0]
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
24010c94:	4621      	mov	r1, r4
24010c96:	2018      	movs	r0, #24
24010c98:	f7ff fd83 	bl	240107a2 <mpool_alloc>
24010c9c:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24010c9e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24010ca0:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
24010ca2:	685b      	ldr	r3, [r3, #4]
24010ca4:	6143      	str	r3, [r0, #20]
    c->inc      =  0.0f;
24010ca6:	2300      	movs	r3, #0
24010ca8:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
24010caa:	6043      	str	r3, [r0, #4]
    c->width     =  0.5f;
24010cac:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
24010cb0:	6103      	str	r3, [r0, #16]
}
24010cb2:	bd38      	pop	{r3, r4, r5, pc}

24010cb4 <tPBPulse_init>:
{
24010cb4:	b508      	push	{r3, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
24010cb6:	3118      	adds	r1, #24
24010cb8:	f7ff ffe9 	bl	24010c8e <tPBPulse_initToPool>
}
24010cbc:	bd08      	pop	{r3, pc}

24010cbe <tPBPulse_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat   tPBPulse_tick        (tPBPulse* const osc)
{
24010cbe:	b510      	push	{r4, lr}
24010cc0:	ed2d 8b02 	vpush	{d8}
    _tPBPulse* c = *osc;
24010cc4:	6804      	ldr	r4, [r0, #0]
    
    Lfloat out;
    if (c->phase < c->width) out = 1.0f;
24010cc6:	ed94 0a01 	vldr	s0, [r4, #4]
24010cca:	edd4 7a04 	vldr	s15, [r4, #16]
24010cce:	eeb4 0ae7 	vcmpe.f32	s0, s15
24010cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010cd6:	d53c      	bpl.n	24010d52 <tPBPulse_tick+0x94>
24010cd8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    else out = -1.0f;
    out += LEAF_poly_blep(c->phase, c->inc);
24010cdc:	edd4 0a02 	vldr	s1, [r4, #8]
24010ce0:	f7ff fb8c 	bl	240103fc <LEAF_poly_blep>
24010ce4:	ee38 8a00 	vadd.f32	s16, s16, s0
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
24010ce8:	ed94 0a01 	vldr	s0, [r4, #4]
24010cec:	edd4 7a04 	vldr	s15, [r4, #16]
24010cf0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24010cf4:	ee78 7ae7 	vsub.f32	s15, s17, s15
24010cf8:	eef0 0a68 	vmov.f32	s1, s17
24010cfc:	ee30 0a27 	vadd.f32	s0, s0, s15
24010d00:	f003 fb0c 	bl	2401431c <fmodf>
24010d04:	edd4 0a02 	vldr	s1, [r4, #8]
24010d08:	f7ff fb78 	bl	240103fc <LEAF_poly_blep>
24010d0c:	ee38 0a40 	vsub.f32	s0, s16, s0
    
    c->phase += c->inc - (int)c->inc;
24010d10:	edd4 7a02 	vldr	s15, [r4, #8]
24010d14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24010d18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24010d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
24010d20:	ed94 7a01 	vldr	s14, [r4, #4]
24010d24:	ee77 7a87 	vadd.f32	s15, s15, s14
24010d28:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase >= 1.0f) c->phase -= 1.0f;
24010d2c:	eef4 7ae8 	vcmpe.f32	s15, s17
24010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d34:	db03      	blt.n	24010d3e <tPBPulse_tick+0x80>
24010d36:	ee77 7ae8 	vsub.f32	s15, s15, s17
24010d3a:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
24010d3e:	edd4 7a01 	vldr	s15, [r4, #4]
24010d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d4a:	d405      	bmi.n	24010d58 <tPBPulse_tick+0x9a>
    
    return out;
}
24010d4c:	ecbd 8b02 	vpop	{d8}
24010d50:	bd10      	pop	{r4, pc}
    else out = -1.0f;
24010d52:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
24010d56:	e7c1      	b.n	24010cdc <tPBPulse_tick+0x1e>
    if (c->phase < 0.0f) c->phase += 1.0f;
24010d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
24010d60:	edc4 7a01 	vstr	s15, [r4, #4]
    return out;
24010d64:	e7f2      	b.n	24010d4c <tPBPulse_tick+0x8e>

24010d66 <tPBPulse_setFreq>:

void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
{
    _tPBPulse* c = *osc;
24010d66:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
24010d68:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
24010d6c:	edd3 7a05 	vldr	s15, [r3, #20]
24010d70:	ee27 0a80 	vmul.f32	s0, s15, s0
24010d74:	ed83 0a02 	vstr	s0, [r3, #8]
}
24010d78:	4770      	bx	lr

24010d7a <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
24010d7a:	6803      	ldr	r3, [r0, #0]
    c->width = width;
24010d7c:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010d80:	4770      	bx	lr

24010d82 <tPBSaw_initToPool>:
{
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
24010d82:	b538      	push	{r3, r4, r5, lr}
24010d84:	4605      	mov	r5, r0
    _tMempool* m = *mp;
24010d86:	680c      	ldr	r4, [r1, #0]
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24010d88:	4621      	mov	r1, r4
24010d8a:	2014      	movs	r0, #20
24010d8c:	f7ff fd09 	bl	240107a2 <mpool_alloc>
24010d90:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24010d92:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24010d94:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0.0f;
24010d96:	2300      	movs	r3, #0
24010d98:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
24010d9a:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24010d9c:	6853      	ldr	r3, [r2, #4]
24010d9e:	6103      	str	r3, [r0, #16]
}
24010da0:	bd38      	pop	{r3, r4, r5, pc}

24010da2 <tPBSaw_init>:
{
24010da2:	b508      	push	{r3, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
24010da4:	3118      	adds	r1, #24
24010da6:	f7ff ffec 	bl	24010d82 <tPBSaw_initToPool>
}
24010daa:	bd08      	pop	{r3, pc}

24010dac <tPBSaw_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat   tPBSaw_tick          (tPBSaw* const osc)
{
24010dac:	b510      	push	{r4, lr}
24010dae:	ed2d 8b02 	vpush	{d8}
    _tPBSaw* c = *osc;
24010db2:	6804      	ldr	r4, [r0, #0]
    
    Lfloat out = (c->phase * 2.0f) - 1.0f;
24010db4:	ed94 0a01 	vldr	s0, [r4, #4]
24010db8:	ee30 8a00 	vadd.f32	s16, s0, s0
24010dbc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24010dc0:	ee38 8a68 	vsub.f32	s16, s16, s17
    out -= LEAF_poly_blep(c->phase, c->inc);
24010dc4:	edd4 0a02 	vldr	s1, [r4, #8]
24010dc8:	f7ff fb18 	bl	240103fc <LEAF_poly_blep>
24010dcc:	ee38 0a40 	vsub.f32	s0, s16, s0
    
    c->phase += c->inc - (int)c->inc;
24010dd0:	edd4 7a02 	vldr	s15, [r4, #8]
24010dd4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24010dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24010ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
24010de0:	ed94 7a01 	vldr	s14, [r4, #4]
24010de4:	ee77 7a87 	vadd.f32	s15, s15, s14
24010de8:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase >= 1.0f) c->phase -= 1.0f;
24010dec:	eef4 7ae8 	vcmpe.f32	s15, s17
24010df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010df4:	db03      	blt.n	24010dfe <tPBSaw_tick+0x52>
24010df6:	ee77 7ae8 	vsub.f32	s15, s15, s17
24010dfa:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
24010dfe:	edd4 7a01 	vldr	s15, [r4, #4]
24010e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e0a:	d402      	bmi.n	24010e12 <tPBSaw_tick+0x66>
    
    return out;
}
24010e0c:	ecbd 8b02 	vpop	{d8}
24010e10:	bd10      	pop	{r4, pc}
    if (c->phase < 0.0f) c->phase += 1.0f;
24010e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010e16:	ee77 7a87 	vadd.f32	s15, s15, s14
24010e1a:	edc4 7a01 	vstr	s15, [r4, #4]
    return out;
24010e1e:	e7f5      	b.n	24010e0c <tPBSaw_tick+0x60>

24010e20 <tPBSaw_setFreq>:

void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
{
    _tPBSaw* c = *osc;
24010e20:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
24010e22:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
24010e26:	edd3 7a04 	vldr	s15, [r3, #16]
24010e2a:	ee27 0a80 	vmul.f32	s0, s15, s0
24010e2e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24010e32:	4770      	bx	lr

24010e34 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
24010e34:	b570      	push	{r4, r5, r6, lr}
24010e36:	4606      	mov	r6, r0
24010e38:	460c      	mov	r4, r1
    _tMempool* m = *mp;
24010e3a:	6815      	ldr	r5, [r2, #0]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24010e3c:	4629      	mov	r1, r5
24010e3e:	2018      	movs	r0, #24
24010e40:	f7ff fcaf 	bl	240107a2 <mpool_alloc>
24010e44:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24010e46:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24010e48:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
24010e4a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24010e4c:	691b      	ldr	r3, [r3, #16]
24010e4e:	6143      	str	r3, [r0, #20]
}
24010e50:	bd70      	pop	{r4, r5, r6, pc}

24010e52 <tNoise_init>:
{
24010e52:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
24010e54:	3218      	adds	r2, #24
24010e56:	f7ff ffed 	bl	24010e34 <tNoise_initToPool>
}
24010e5a:	bd08      	pop	{r3, pc}

24010e5c <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24010e5c:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24010e5e:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24010e60:	6963      	ldr	r3, [r4, #20]
24010e62:	4798      	blx	r3
24010e64:	ee30 0a00 	vadd.f32	s0, s0, s0
24010e68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010e6c:	ee30 0a67 	vsub.f32	s0, s0, s15
    
    if (n->type == PinkNoise)
24010e70:	7923      	ldrb	r3, [r4, #4]
24010e72:	2b01      	cmp	r3, #1
24010e74:	d000      	beq.n	24010e78 <tNoise_tick+0x1c>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24010e76:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24010e78:	edd4 6a02 	vldr	s13, [r4, #8]
24010e7c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 24010eec <tNoise_tick+0x90>
24010e80:	ee66 6aa7 	vmul.f32	s13, s13, s15
24010e84:	eddf 7a1a 	vldr	s15, [pc, #104]	; 24010ef0 <tNoise_tick+0x94>
24010e88:	ee60 7a27 	vmul.f32	s15, s0, s15
24010e8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
24010e90:	edc4 6a02 	vstr	s13, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24010e94:	ed94 6a03 	vldr	s12, [r4, #12]
24010e98:	eddf 7a16 	vldr	s15, [pc, #88]	; 24010ef4 <tNoise_tick+0x98>
24010e9c:	ee26 6a27 	vmul.f32	s12, s12, s15
24010ea0:	eddf 7a15 	vldr	s15, [pc, #84]	; 24010ef8 <tNoise_tick+0x9c>
24010ea4:	ee60 7a27 	vmul.f32	s15, s0, s15
24010ea8:	ee36 6a27 	vadd.f32	s12, s12, s15
24010eac:	ed84 6a03 	vstr	s12, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24010eb0:	ed94 7a04 	vldr	s14, [r4, #16]
24010eb4:	eddf 7a11 	vldr	s15, [pc, #68]	; 24010efc <tNoise_tick+0xa0>
24010eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
24010ebc:	eddf 7a10 	vldr	s15, [pc, #64]	; 24010f00 <tNoise_tick+0xa4>
24010ec0:	ee60 7a27 	vmul.f32	s15, s0, s15
24010ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
24010ec8:	edc4 7a04 	vstr	s15, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24010ecc:	ee76 6a86 	vadd.f32	s13, s13, s12
24010ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010ed4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24010f04 <tNoise_tick+0xa8>
24010ed8:	ee20 0a07 	vmul.f32	s0, s0, s14
24010edc:	ee77 7a80 	vadd.f32	s15, s15, s0
        return (tmp * 0.05f);
24010ee0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24010f08 <tNoise_tick+0xac>
24010ee4:	ee27 0a80 	vmul.f32	s0, s15, s0
24010ee8:	e7c5      	b.n	24010e76 <tNoise_tick+0x1a>
24010eea:	bf00      	nop
24010eec:	3f7f65fe 	.word	0x3f7f65fe
24010ef0:	3dcad8a1 	.word	0x3dcad8a1
24010ef4:	3f76872b 	.word	0x3f76872b
24010ef8:	3e97d0ff 	.word	0x3e97d0ff
24010efc:	3f11eb85 	.word	0x3f11eb85
24010f00:	3f86be97 	.word	0x3f86be97
24010f04:	3e3d3c36 	.word	0x3e3d3c36
24010f08:	3d4ccccd 	.word	0x3d4ccccd

24010f0c <tMBSineTri_initToPool>:
{
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
24010f0c:	b570      	push	{r4, r5, r6, lr}
24010f0e:	4606      	mov	r6, r0
    _tMempool* m = *pool;
24010f10:	680d      	ldr	r5, [r1, #0]
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24010f12:	4629      	mov	r1, r5
24010f14:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
24010f18:	f7ff fc43 	bl	240107a2 <mpool_alloc>
24010f1c:	4604      	mov	r4, r0
24010f1e:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24010f20:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24010f22:	686b      	ldr	r3, [r5, #4]

    c->invSampleRate = leaf->invSampleRate;
24010f24:	edd3 7a01 	vldr	s15, [r3, #4]
24010f28:	edc0 7afb 	vstr	s15, [r0, #1004]	; 0x3ec
    c->freq = 440.f;
24010f2c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 24010fa8 <tMBSineTri_initToPool+0x9c>
24010f30:	edc0 6a02 	vstr	s13, [r0, #8]
    c->lastsyncin = 0.0f;
24010f34:	2300      	movs	r3, #0
24010f36:	6103      	str	r3, [r0, #16]
    c->sync = 0.0f;
24010f38:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
24010f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010f3e:	ed80 7a06 	vstr	s14, [r0, #24]
    c->softsync = 0;
24010f42:	2500      	movs	r5, #0
24010f44:	61c5      	str	r5, [r0, #28]
    c->waveform = 0.0f;
24010f46:	60c3      	str	r3, [r0, #12]
    c->shape = 0.0f;
24010f48:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
24010f4a:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_j = 0;
24010f4c:	6385      	str	r5, [r0, #56]	; 0x38
    c->_sinPhase = 0.0f;
24010f4e:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.25f;  /* phase [0, 1) */
24010f50:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
24010f54:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24010f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
24010f5a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24010f5e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
24010f62:	6283      	str	r3, [r0, #40]	; 0x28
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24010f64:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->_inv_w = 1.0f / c->_w;
24010f66:	eec7 6a27 	vdiv.f32	s13, s14, s15
24010f6a:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->numBLEPs = 0;
24010f6e:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    c->mostRecentBLEP = 0;
24010f72:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24010f76:	f44f 5390 	mov.w	r3, #4608	; 0x1200
24010f7a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
24010f7e:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
24010f82:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    c->sineMask = 2047;
24010f86:	f240 73ff 	movw	r3, #2047	; 0x7ff
24010f8a:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24010f8e:	2280      	movs	r2, #128	; 0x80
24010f90:	4629      	mov	r1, r5
24010f92:	306c      	adds	r0, #108	; 0x6c
24010f94:	f002 fb60 	bl	24013658 <memset>
    memset (c->_f, 0, 8 * sizeof (Lfloat));
24010f98:	2220      	movs	r2, #32
24010f9a:	4629      	mov	r1, r5
24010f9c:	f104 0044 	add.w	r0, r4, #68	; 0x44
24010fa0:	f002 fb5a 	bl	24013658 <memset>
}
24010fa4:	bd70      	pop	{r4, r5, r6, pc}
24010fa6:	bf00      	nop
24010fa8:	43dc0000 	.word	0x43dc0000

24010fac <tMBSineTri_init>:
{
24010fac:	b508      	push	{r3, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
24010fae:	3118      	adds	r1, #24
24010fb0:	f7ff ffac 	bl	24010f0c <tMBSineTri_initToPool>
}
24010fb4:	bd08      	pop	{r3, pc}
	...

24010fb8 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

Lfloat tMBSineTri_tick(tMBSineTri* const osc)
{
24010fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24010fbc:	ed2d 8b0c 	vpush	{d8-d13}
24010fc0:	b082      	sub	sp, #8
24010fc2:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc;
24010fc4:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    Lfloat  sync;
    Lfloat  b, b1, invB, invB1, p, sinPhase, w, sw, z;
    Lfloat  x = 0.5f;

    sync = c->sync;
24010fc6:	ed94 7a05 	vldr	s14, [r4, #20]

    p = c->_p;  /* phase [0, 1) */
24010fca:	ed94 9a08 	vldr	s18, [r4, #32]
    sinPhase = c->_sinPhase;
24010fce:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
24010fd2:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
24010fd6:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    invB = 1.0f / b;
24010fda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010fde:	eec7 baa6 	vdiv.f32	s23, s15, s13
    z = c->_z;  /* low pass filter state */
24010fe2:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
24010fe6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24010fe8:	6be6      	ldr	r6, [r4, #60]	; 0x3c



    b = 0.5f * (1.0f + c->waveform);
24010fea:	edd4 8a03 	vldr	s17, [r4, #12]
24010fee:	ee78 8aa7 	vadd.f32	s17, s17, s15
24010ff2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24010ff6:	ee68 8aa6 	vmul.f32	s17, s17, s13
    b1 = 1.0f - b;
24010ffa:	ee77 6ae8 	vsub.f32	s13, s15, s17
    invB1 = 1.0f / b1;
24010ffe:	eec7 caa6 	vdiv.f32	s25, s15, s13
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24011002:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
24011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401100a:	dd08      	ble.n	2401101e <tMBSineTri_tick+0x66>
2401100c:	69e3      	ldr	r3, [r4, #28]
2401100e:	2b00      	cmp	r3, #0
24011010:	dd05      	ble.n	2401101e <tMBSineTri_tick+0x66>
24011012:	edd4 7a06 	vldr	s15, [r4, #24]
24011016:	eef1 7a67 	vneg.f32	s15, s15
2401101a:	edc4 7a06 	vstr	s15, [r4, #24]

    sw = w * c->syncdir;
2401101e:	edd4 7a06 	vldr	s15, [r4, #24]
24011022:	ee27 baa9 	vmul.f32	s22, s15, s19
    Lfloat inv_sw = c->_inv_w * c->syncdir;
24011026:	ed94 ca10 	vldr	s24, [r4, #64]	; 0x40
2401102a:	ee27 ca8c 	vmul.f32	s24, s15, s24
    Lfloat inc_amount = sw - (int)sw;
2401102e:	eefd 7acb 	vcvt.s32.f32	s15, s22
24011032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011036:	ee7b 7a67 	vsub.f32	s15, s22, s15
    p += inc_amount;
2401103a:	ee39 9a27 	vadd.f32	s18, s18, s15
    sinPhase += inc_amount;
2401103e:	ee38 8a27 	vadd.f32	s16, s16, s15

    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24011042:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
24011046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401104a:	f340 81f3 	ble.w	24011434 <tMBSineTri_tick+0x47c>
2401104e:	f8d4 801c 	ldr.w	r8, [r4, #28]
24011052:	f1b8 0f00 	cmp.w	r8, #0
24011056:	f040 81ed 	bne.w	24011434 <tMBSineTri_tick+0x47c>
        Lfloat eof_offset = sync * sw;
2401105a:	ee27 da0b 	vmul.f32	s26, s14, s22
        Lfloat p_at_reset = p - eof_offset;
2401105e:	ee79 da4d 	vsub.f32	s27, s18, s26
        if (sw > 0)
24011062:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24011066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401106a:	dd46      	ble.n	240110fa <tMBSineTri_tick+0x142>
        {
        	p = eof_offset + 0.25f;
2401106c:	eeb5 9a00 	vmov.f32	s18, #80	; 0x3e800000  0.250
24011070:	ee3d 9a09 	vadd.f32	s18, s26, s18
        	sinPhase = eof_offset;
24011074:	eeb0 8a4d 	vmov.f32	s16, s26
        	sinPhase = (1.0f - eof_offset);
        }
        //
        /* place any DDs that may have occurred in subsample before reset */

        if (!k) {
24011078:	2e00      	cmp	r6, #0
2401107a:	f040 80c7 	bne.w	2401120c <tMBSineTri_tick+0x254>
            x = -0.5f + p_at_reset * invB;
2401107e:	ee2b 7aad 	vmul.f32	s14, s23, s27
24011082:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011086:	ee77 aa67 	vsub.f32	s21, s14, s15
            if (sw > 0)
2401108a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
2401108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011092:	dd71      	ble.n	24011178 <tMBSineTri_tick+0x1c0>
            {
                if (p_at_reset >= b) {
24011094:	eef4 8aed 	vcmpe.f32	s17, s27
24011098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401109c:	d93b      	bls.n	24011116 <tMBSineTri_tick+0x15e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
2401109e:	4633      	mov	r3, r6
                    x = 0.5f - (p_at_reset - b) * invB1;
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
                    k = 1;
                }
                if (p_at_reset >= 1.0f) {
240110a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240110a4:	eef4 dae7 	vcmpe.f32	s27, s15
240110a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240110ac:	da4d      	bge.n	2401114a <tMBSineTri_tick+0x192>
240110ae:	461e      	mov	r6, r3
                }
            }
        }

        /* now place reset DDs */
        if (sw > 0)
240110b0:	eeb5 bac0 	vcmpe.f32	s22, #0.0
240110b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240110b8:	f340 8167 	ble.w	2401138a <tMBSineTri_tick+0x3d2>
        {
            if (k)
240110bc:	2e00      	cmp	r6, #0
240110be:	f040 813d 	bne.w	2401133c <tMBSineTri_tick+0x384>
            	tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
            tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, 0.0f - x, 0.0f, sw);
240110c2:	eddf 1ada 	vldr	s3, [pc, #872]	; 2401142c <tMBSineTri_tick+0x474>
240110c6:	eeb0 2a4b 	vmov.f32	s4, s22
240110ca:	ee31 1aea 	vsub.f32	s2, s3, s21
240110ce:	eef0 0a4c 	vmov.f32	s1, s24
240110d2:	eeb0 0a49 	vmov.f32	s0, s18
240110d6:	4629      	mov	r1, r5
240110d8:	4638      	mov	r0, r7
240110da:	f01d feed 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
            x = -0.5f + p * invB;
240110de:	ee29 7a2b 	vmul.f32	s14, s18, s23
240110e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240110e6:	ee77 aa67 	vsub.f32	s21, s14, s15
            k = 0;
            if (p >= b) {
240110ea:	eeb4 9ae8 	vcmpe.f32	s18, s17
240110ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240110f2:	f280 8132 	bge.w	2401135a <tMBSineTri_tick+0x3a2>
            k = 0;
240110f6:	4646      	mov	r6, r8
240110f8:	e1b8      	b.n	2401146c <tMBSineTri_tick+0x4b4>
        else if (sw < 0)
240110fa:	eeb5 bac0 	vcmpe.f32	s22, #0.0
240110fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011102:	d5b9      	bpl.n	24011078 <tMBSineTri_tick+0xc0>
        	p = (1.0f - eof_offset) + 0.25f;
24011104:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24011108:	ee38 8a4d 	vsub.f32	s16, s16, s26
2401110c:	eeb5 9a00 	vmov.f32	s18, #80	; 0x3e800000  0.250
24011110:	ee38 9a09 	vadd.f32	s18, s16, s18
        	sinPhase = (1.0f - eof_offset);
24011114:	e7b0      	b.n	24011078 <tMBSineTri_tick+0xc0>
                    x = 0.5f - (p_at_reset - b) * invB1;
24011116:	ee3d 0ae8 	vsub.f32	s0, s27, s17
2401111a:	ee60 7a2c 	vmul.f32	s15, s0, s25
2401111e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011122:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24011126:	eeb1 1a6c 	vneg.f32	s2, s25
2401112a:	eeb0 2a4b 	vmov.f32	s4, s22
2401112e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011132:	ee31 1a6b 	vsub.f32	s2, s2, s23
24011136:	eef0 0a4c 	vmov.f32	s1, s24
2401113a:	ee30 0a0d 	vadd.f32	s0, s0, s26
2401113e:	4629      	mov	r1, r5
24011140:	4638      	mov	r0, r7
24011142:	f01d feb9 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 1;
24011146:	2301      	movs	r3, #1
24011148:	e7aa      	b.n	240110a0 <tMBSineTri_tick+0xe8>
                    p_at_reset -= 1.0f;
2401114a:	eef0 1a67 	vmov.f32	s3, s15
2401114e:	ee3d 0ae7 	vsub.f32	s0, s27, s15
                    x = -0.5f + p_at_reset * invB;
24011152:	ee2b 7a80 	vmul.f32	s14, s23, s0
24011156:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401115a:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401115e:	eeb0 2a4b 	vmov.f32	s4, s22
24011162:	ee3b 1aac 	vadd.f32	s2, s23, s25
24011166:	eef0 0a4c 	vmov.f32	s1, s24
2401116a:	ee3d 0a00 	vadd.f32	s0, s26, s0
2401116e:	4629      	mov	r1, r5
24011170:	4638      	mov	r0, r7
24011172:	f01d fea1 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 0;
24011176:	e79b      	b.n	240110b0 <tMBSineTri_tick+0xf8>
            else if (sw < 0)
24011178:	eeb5 bac0 	vcmpe.f32	s22, #0.0
2401117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011180:	d596      	bpl.n	240110b0 <tMBSineTri_tick+0xf8>
                if (p_at_reset < 0.0f) {
24011182:	eef5 dac0 	vcmpe.f32	s27, #0.0
24011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401118a:	d40a      	bmi.n	240111a2 <tMBSineTri_tick+0x1ea>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
2401118c:	4633      	mov	r3, r6
                if (k && p_at_reset < b) {
2401118e:	2b00      	cmp	r3, #0
24011190:	f000 80d2 	beq.w	24011338 <tMBSineTri_tick+0x380>
24011194:	eef4 dae8 	vcmpe.f32	s27, s17
24011198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401119c:	d41d      	bmi.n	240111da <tMBSineTri_tick+0x222>
2401119e:	461e      	mov	r6, r3
240111a0:	e786      	b.n	240110b0 <tMBSineTri_tick+0xf8>
                    p_at_reset += 1.0f;
240111a2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240111a6:	ee7d daa1 	vadd.f32	s27, s27, s3
                    x = 0.5f - (p_at_reset - b)  * invB1;
240111aa:	ee7d 7ae8 	vsub.f32	s15, s27, s17
240111ae:	ee67 7aac 	vmul.f32	s15, s15, s25
240111b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240111b6:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240111ba:	ee31 0aed 	vsub.f32	s0, s3, s27
240111be:	eeb1 2a4b 	vneg.f32	s4, s22
240111c2:	ee3b 1aac 	vadd.f32	s2, s23, s25
240111c6:	eef1 0a4c 	vneg.f32	s1, s24
240111ca:	ee30 0a4d 	vsub.f32	s0, s0, s26
240111ce:	4629      	mov	r1, r5
240111d0:	4638      	mov	r0, r7
240111d2:	f01d fe71 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 1;
240111d6:	2301      	movs	r3, #1
240111d8:	e7d9      	b.n	2401118e <tMBSineTri_tick+0x1d6>
                    x = -0.5f + p_at_reset * invB;
240111da:	ee2d 7aab 	vmul.f32	s14, s27, s23
240111de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240111e2:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, -invB1 - invB, 1.0f, -sw);
240111e6:	ee38 0aed 	vsub.f32	s0, s17, s27
240111ea:	eeb1 1a6c 	vneg.f32	s2, s25
240111ee:	eeb1 2a4b 	vneg.f32	s4, s22
240111f2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240111f6:	ee31 1a6b 	vsub.f32	s2, s2, s23
240111fa:	eef1 0a4c 	vneg.f32	s1, s24
240111fe:	ee30 0a4d 	vsub.f32	s0, s0, s26
24011202:	4629      	mov	r1, r5
24011204:	4638      	mov	r0, r7
24011206:	f01d fe57 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 0;
2401120a:	e751      	b.n	240110b0 <tMBSineTri_tick+0xf8>
            x = 0.5f - (p_at_reset - b) * invB1;
2401120c:	ee7d aae8 	vsub.f32	s21, s27, s17
24011210:	ee6a 7aac 	vmul.f32	s15, s21, s25
24011214:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011218:	ee77 aa67 	vsub.f32	s21, s14, s15
            if (sw > 0)
2401121c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011224:	dd41      	ble.n	240112aa <tMBSineTri_tick+0x2f2>
                if (p_at_reset >= 1.0f) {
24011226:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401122a:	eef4 dae7 	vcmpe.f32	s27, s15
2401122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011232:	da22      	bge.n	2401127a <tMBSineTri_tick+0x2c2>
                if (!k && p_at_reset >= b) {
24011234:	2e00      	cmp	r6, #0
24011236:	f47f af3b 	bne.w	240110b0 <tMBSineTri_tick+0xf8>
2401123a:	eef4 dae8 	vcmpe.f32	s27, s17
2401123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011242:	f6ff af35 	blt.w	240110b0 <tMBSineTri_tick+0xf8>
                    x = 0.5f - (p_at_reset - b) * invB1;
24011246:	ee3d 0ae8 	vsub.f32	s0, s27, s17
2401124a:	ee60 7a2c 	vmul.f32	s15, s0, s25
2401124e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011252:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24011256:	eeb1 1a6c 	vneg.f32	s2, s25
2401125a:	eeb0 2a4b 	vmov.f32	s4, s22
2401125e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011262:	ee31 1a6b 	vsub.f32	s2, s2, s23
24011266:	eef0 0a4c 	vmov.f32	s1, s24
2401126a:	ee30 0a0d 	vadd.f32	s0, s0, s26
2401126e:	4629      	mov	r1, r5
24011270:	4638      	mov	r0, r7
24011272:	f01d fe21 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 1;
24011276:	2601      	movs	r6, #1
24011278:	e71a      	b.n	240110b0 <tMBSineTri_tick+0xf8>
                    p_at_reset -= 1.0f;
2401127a:	eef0 1a67 	vmov.f32	s3, s15
2401127e:	ee7d dae7 	vsub.f32	s27, s27, s15
                    x = -0.5f + p_at_reset * invB;
24011282:	ee2b 7aad 	vmul.f32	s14, s23, s27
24011286:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401128a:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401128e:	eeb0 2a4b 	vmov.f32	s4, s22
24011292:	ee3b 1aac 	vadd.f32	s2, s23, s25
24011296:	eef0 0a4c 	vmov.f32	s1, s24
2401129a:	ee3d 0a2d 	vadd.f32	s0, s26, s27
2401129e:	4629      	mov	r1, r5
240112a0:	4638      	mov	r0, r7
240112a2:	f01d fe09 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 0;
240112a6:	4646      	mov	r6, r8
240112a8:	e7c4      	b.n	24011234 <tMBSineTri_tick+0x27c>
            else if (sw < 0)
240112aa:	eeb5 bac0 	vcmpe.f32	s22, #0.0
240112ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112b2:	f57f aefd 	bpl.w	240110b0 <tMBSineTri_tick+0xf8>
                if (p_at_reset < b) {
240112b6:	eef4 8aed 	vcmpe.f32	s17, s27
240112ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112be:	dc21      	bgt.n	24011304 <tMBSineTri_tick+0x34c>
                if (p_at_reset < 0.0f) {
240112c0:	eef5 dac0 	vcmpe.f32	s27, #0.0
240112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240112c8:	f57f aef2 	bpl.w	240110b0 <tMBSineTri_tick+0xf8>
                    p_at_reset += 1.0f;
240112cc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240112d0:	ee7d daa1 	vadd.f32	s27, s27, s3
                    x = 0.5f - (p_at_reset - b) * invB1;
240112d4:	ee7d 7ae8 	vsub.f32	s15, s27, s17
240112d8:	ee67 7aac 	vmul.f32	s15, s15, s25
240112dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240112e0:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240112e4:	ee71 daed 	vsub.f32	s27, s3, s27
240112e8:	eeb1 2a4b 	vneg.f32	s4, s22
240112ec:	ee3b 1aac 	vadd.f32	s2, s23, s25
240112f0:	eef1 0a4c 	vneg.f32	s1, s24
240112f4:	ee3d 0acd 	vsub.f32	s0, s27, s26
240112f8:	4629      	mov	r1, r5
240112fa:	4638      	mov	r0, r7
240112fc:	f01d fddc 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 1;
24011300:	2601      	movs	r6, #1
24011302:	e6d5      	b.n	240110b0 <tMBSineTri_tick+0xf8>
                    x = -0.5f + p_at_reset * invB;
24011304:	ee2b 7aad 	vmul.f32	s14, s23, s27
24011308:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401130c:	ee77 aa67 	vsub.f32	s21, s14, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, -invB1 - invB, 1.0f, -sw);
24011310:	ee78 7aed 	vsub.f32	s15, s17, s27
24011314:	eeb1 1a6c 	vneg.f32	s2, s25
24011318:	eeb1 2a4b 	vneg.f32	s4, s22
2401131c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011320:	ee31 1a6b 	vsub.f32	s2, s2, s23
24011324:	eef1 0a4c 	vneg.f32	s1, s24
24011328:	ee37 0acd 	vsub.f32	s0, s15, s26
2401132c:	4629      	mov	r1, r5
2401132e:	4638      	mov	r0, r7
24011330:	f01d fdc2 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                    k = 0;
24011334:	4646      	mov	r6, r8
24011336:	e7c3      	b.n	240112c0 <tMBSineTri_tick+0x308>
24011338:	461e      	mov	r6, r3
2401133a:	e6b9      	b.n	240110b0 <tMBSineTri_tick+0xf8>
            	tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
2401133c:	eeb0 2a4b 	vmov.f32	s4, s22
24011340:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011344:	ee3b 1aac 	vadd.f32	s2, s23, s25
24011348:	eef0 0a4c 	vmov.f32	s1, s24
2401134c:	eeb0 0a49 	vmov.f32	s0, s18
24011350:	4629      	mov	r1, r5
24011352:	4638      	mov	r0, r7
24011354:	f01d fdb0 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
24011358:	e6b3      	b.n	240110c2 <tMBSineTri_tick+0x10a>
                x = 0.5f - (p - b) * invB1;
2401135a:	ee39 0a68 	vsub.f32	s0, s18, s17
2401135e:	ee60 7a2c 	vmul.f32	s15, s0, s25
24011362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011366:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401136a:	eeb1 1a6c 	vneg.f32	s2, s25
2401136e:	eeb0 2a4b 	vmov.f32	s4, s22
24011372:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011376:	ee31 1a6b 	vsub.f32	s2, s2, s23
2401137a:	eef0 0a4c 	vmov.f32	s1, s24
2401137e:	4629      	mov	r1, r5
24011380:	4638      	mov	r0, r7
24011382:	f01d fd99 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 1;
24011386:	2601      	movs	r6, #1
24011388:	e070      	b.n	2401146c <tMBSineTri_tick+0x4b4>
            }
        }
        else if (sw < 0)
2401138a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
2401138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011392:	d56b      	bpl.n	2401146c <tMBSineTri_tick+0x4b4>
        {
            if (!k)
24011394:	b316      	cbz	r6, 240113dc <tMBSineTri_tick+0x424>
            	tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
            tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, 0.0f - x, 0.0f, -sw);
24011396:	eeb1 ca4c 	vneg.f32	s24, s24
2401139a:	eeb1 ba4b 	vneg.f32	s22, s22
2401139e:	eddf 1a23 	vldr	s3, [pc, #140]	; 2401142c <tMBSineTri_tick+0x474>
240113a2:	eeb0 2a4b 	vmov.f32	s4, s22
240113a6:	ee31 1aea 	vsub.f32	s2, s3, s21
240113aa:	eef0 0a4c 	vmov.f32	s1, s24
240113ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240113b2:	ee30 0a49 	vsub.f32	s0, s0, s18
240113b6:	4629      	mov	r1, r5
240113b8:	4638      	mov	r0, r7
240113ba:	f01d fd7d 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
            x = 0.5f - (p - b) * invB1;
240113be:	ee79 7a68 	vsub.f32	s15, s18, s17
240113c2:	ee67 7aac 	vmul.f32	s15, s15, s25
240113c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240113ca:	ee77 aa67 	vsub.f32	s21, s14, s15
            k = 1;
            if (p < b) {
240113ce:	eeb4 9ae8 	vcmpe.f32	s18, s17
240113d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240113d6:	d410      	bmi.n	240113fa <tMBSineTri_tick+0x442>
            k = 1;
240113d8:	2601      	movs	r6, #1
240113da:	e047      	b.n	2401146c <tMBSineTri_tick+0x4b4>
            	tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
240113dc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240113e0:	eeb1 2a4b 	vneg.f32	s4, s22
240113e4:	ee3b 1aac 	vadd.f32	s2, s23, s25
240113e8:	eef1 0a4c 	vneg.f32	s1, s24
240113ec:	ee31 0ac9 	vsub.f32	s0, s3, s18
240113f0:	4629      	mov	r1, r5
240113f2:	4638      	mov	r0, r7
240113f4:	f01d fd60 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
240113f8:	e7cd      	b.n	24011396 <tMBSineTri_tick+0x3de>
                x = -0.5f + p * invB;
240113fa:	ee29 7a2b 	vmul.f32	s14, s18, s23
240113fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011402:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
24011406:	eeb1 1a6c 	vneg.f32	s2, s25
2401140a:	eeb0 2a4b 	vmov.f32	s4, s22
2401140e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011412:	ee31 1a6b 	vsub.f32	s2, s2, s23
24011416:	eef0 0a4c 	vmov.f32	s1, s24
2401141a:	ee38 0ac9 	vsub.f32	s0, s17, s18
2401141e:	4629      	mov	r1, r5
24011420:	4638      	mov	r0, r7
24011422:	f01d fd49 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 0;
24011426:	4646      	mov	r6, r8
24011428:	e020      	b.n	2401146c <tMBSineTri_tick+0x4b4>
2401142a:	bf00      	nop
2401142c:	00000000 	.word	0x00000000
24011430:	45000000 	.word	0x45000000
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
24011434:	2e00      	cmp	r6, #0
24011436:	f040 809c 	bne.w	24011572 <tMBSineTri_tick+0x5ba>

        x = -0.5f + p * invB;
2401143a:	ee2b 7a89 	vmul.f32	s14, s23, s18
2401143e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011442:	ee77 aa67 	vsub.f32	s21, s14, s15
        if (sw > 0)
24011446:	eeb5 bac0 	vcmpe.f32	s22, #0.0
2401144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401144e:	dd4a      	ble.n	240114e6 <tMBSineTri_tick+0x52e>
        {
            if (p >= b) {
24011450:	eef4 8ac9 	vcmpe.f32	s17, s18
24011454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011458:	d916      	bls.n	24011488 <tMBSineTri_tick+0x4d0>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
2401145a:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
2401145c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011460:	eeb4 9ae7 	vcmpe.f32	s18, s15
24011464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011468:	da26      	bge.n	240114b8 <tMBSineTri_tick+0x500>
2401146a:	461e      	mov	r6, r3
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
2401146c:	1d2b      	adds	r3, r5, #4
2401146e:	f003 0307 	and.w	r3, r3, #7

    c->_f[currentSamp] = x * c->shape; //add the triangle
24011472:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
24011476:	ee25 7aaa 	vmul.f32	s14, s11, s21
2401147a:	f103 0210 	add.w	r2, r3, #16
2401147e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24011482:	ed82 7a01 	vstr	s14, [r2, #4]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
24011486:	e10a      	b.n	2401169e <tMBSineTri_tick+0x6e6>
                x = 0.5f - (p - b) * invB1;;
24011488:	ee39 0a68 	vsub.f32	s0, s18, s17
2401148c:	ee60 7a2c 	vmul.f32	s15, s0, s25
24011490:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011494:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24011498:	eeb1 1a6c 	vneg.f32	s2, s25
2401149c:	eeb0 2a4b 	vmov.f32	s4, s22
240114a0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240114a4:	ee31 1a6b 	vsub.f32	s2, s2, s23
240114a8:	eef0 0a4c 	vmov.f32	s1, s24
240114ac:	4629      	mov	r1, r5
240114ae:	4638      	mov	r0, r7
240114b0:	f01d fd02 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 1;
240114b4:	2301      	movs	r3, #1
240114b6:	e7d1      	b.n	2401145c <tMBSineTri_tick+0x4a4>
                p -= 1.0f;
240114b8:	eef0 1a67 	vmov.f32	s3, s15
240114bc:	ee39 9a67 	vsub.f32	s18, s18, s15
                x = -0.5f + p * invB;
240114c0:	ee2b 7a89 	vmul.f32	s14, s23, s18
240114c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240114c8:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240114cc:	eeb0 2a4b 	vmov.f32	s4, s22
240114d0:	ee3b 1aac 	vadd.f32	s2, s23, s25
240114d4:	eef0 0a4c 	vmov.f32	s1, s24
240114d8:	eeb0 0a49 	vmov.f32	s0, s18
240114dc:	4629      	mov	r1, r5
240114de:	4638      	mov	r0, r7
240114e0:	f01d fcea 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 0;
240114e4:	e7c2      	b.n	2401146c <tMBSineTri_tick+0x4b4>
        else if (sw < 0)
240114e6:	eeb5 bac0 	vcmpe.f32	s22, #0.0
240114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240114ee:	d5bd      	bpl.n	2401146c <tMBSineTri_tick+0x4b4>
            if (p < 0.0f) {
240114f0:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
240114f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240114f8:	d40a      	bmi.n	24011510 <tMBSineTri_tick+0x558>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
240114fa:	4633      	mov	r3, r6
            if (k && p < b) {
240114fc:	2b00      	cmp	r3, #0
240114fe:	f000 80c8 	beq.w	24011692 <tMBSineTri_tick+0x6da>
24011502:	eeb4 9ae8 	vcmpe.f32	s18, s17
24011506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401150a:	d41b      	bmi.n	24011544 <tMBSineTri_tick+0x58c>
2401150c:	461e      	mov	r6, r3
2401150e:	e7ad      	b.n	2401146c <tMBSineTri_tick+0x4b4>
                p += 1.0f;
24011510:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011514:	ee39 9a21 	vadd.f32	s18, s18, s3
                x = 0.5f - (p - b) * invB1;
24011518:	ee79 7a68 	vsub.f32	s15, s18, s17
2401151c:	ee67 7aac 	vmul.f32	s15, s15, s25
24011520:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011524:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24011528:	eeb1 2a4b 	vneg.f32	s4, s22
2401152c:	ee3b 1aac 	vadd.f32	s2, s23, s25
24011530:	eef1 0a4c 	vneg.f32	s1, s24
24011534:	ee31 0ac9 	vsub.f32	s0, s3, s18
24011538:	4629      	mov	r1, r5
2401153a:	4638      	mov	r0, r7
2401153c:	f01d fcbc 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 1;
24011540:	2301      	movs	r3, #1
24011542:	e7db      	b.n	240114fc <tMBSineTri_tick+0x544>
                x = -0.5f + p * invB;
24011544:	ee29 7a2b 	vmul.f32	s14, s18, s23
24011548:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401154c:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
24011550:	eeb1 1a6c 	vneg.f32	s2, s25
24011554:	eeb1 2a4b 	vneg.f32	s4, s22
24011558:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
2401155c:	ee31 1a6b 	vsub.f32	s2, s2, s23
24011560:	eef1 0a4c 	vneg.f32	s1, s24
24011564:	ee38 0ac9 	vsub.f32	s0, s17, s18
24011568:	4629      	mov	r1, r5
2401156a:	4638      	mov	r0, r7
2401156c:	f01d fca4 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 0;
24011570:	e77c      	b.n	2401146c <tMBSineTri_tick+0x4b4>
        x = 0.5f - (p - b) * invB1;
24011572:	ee79 aa68 	vsub.f32	s21, s18, s17
24011576:	ee6a 7aac 	vmul.f32	s15, s21, s25
2401157a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
2401157e:	ee77 aa67 	vsub.f32	s21, s14, s15
        if (sw > 0)
24011582:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24011586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401158a:	dd3f      	ble.n	2401160c <tMBSineTri_tick+0x654>
            if (p >= 1.0f) {
2401158c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011590:	eeb4 9ae7 	vcmpe.f32	s18, s15
24011594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011598:	da20      	bge.n	240115dc <tMBSineTri_tick+0x624>
            if (!k && p >= b) {
2401159a:	2e00      	cmp	r6, #0
2401159c:	f47f af66 	bne.w	2401146c <tMBSineTri_tick+0x4b4>
240115a0:	eeb4 9ae8 	vcmpe.f32	s18, s17
240115a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240115a8:	f6ff af60 	blt.w	2401146c <tMBSineTri_tick+0x4b4>
                x = 0.5f - (p - b) * invB1;
240115ac:	ee39 0a68 	vsub.f32	s0, s18, s17
240115b0:	ee60 7a2c 	vmul.f32	s15, s0, s25
240115b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
240115b8:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240115bc:	eeb1 1a6c 	vneg.f32	s2, s25
240115c0:	eeb0 2a4b 	vmov.f32	s4, s22
240115c4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240115c8:	ee31 1a6b 	vsub.f32	s2, s2, s23
240115cc:	eef0 0a4c 	vmov.f32	s1, s24
240115d0:	4629      	mov	r1, r5
240115d2:	4638      	mov	r0, r7
240115d4:	f01d fc70 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 1;
240115d8:	2601      	movs	r6, #1
240115da:	e747      	b.n	2401146c <tMBSineTri_tick+0x4b4>
                p -= 1.0f;
240115dc:	eef0 1a67 	vmov.f32	s3, s15
240115e0:	ee39 9a67 	vsub.f32	s18, s18, s15
                x = -0.5f + p * invB;
240115e4:	ee2b 7a89 	vmul.f32	s14, s23, s18
240115e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240115ec:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240115f0:	eeb0 2a4b 	vmov.f32	s4, s22
240115f4:	ee3b 1aac 	vadd.f32	s2, s23, s25
240115f8:	eef0 0a4c 	vmov.f32	s1, s24
240115fc:	eeb0 0a49 	vmov.f32	s0, s18
24011600:	4629      	mov	r1, r5
24011602:	4638      	mov	r0, r7
24011604:	f01d fc58 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 0;
24011608:	2600      	movs	r6, #0
2401160a:	e7c6      	b.n	2401159a <tMBSineTri_tick+0x5e2>
        else if (sw < 0)
2401160c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24011610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011614:	f57f af2a 	bpl.w	2401146c <tMBSineTri_tick+0x4b4>
            if (p < b) {
24011618:	eef4 8ac9 	vcmpe.f32	s17, s18
2401161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011620:	dc1f      	bgt.n	24011662 <tMBSineTri_tick+0x6aa>
            if (p < 0.0f) {
24011622:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
24011626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401162a:	f57f af1f 	bpl.w	2401146c <tMBSineTri_tick+0x4b4>
                p += 1.0f;
2401162e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011632:	ee39 9a21 	vadd.f32	s18, s18, s3
                x = 0.5f - (p - b) * invB1;
24011636:	ee79 7a68 	vsub.f32	s15, s18, s17
2401163a:	ee67 7aac 	vmul.f32	s15, s15, s25
2401163e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24011642:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24011646:	eeb1 2a4b 	vneg.f32	s4, s22
2401164a:	ee3b 1aac 	vadd.f32	s2, s23, s25
2401164e:	eef1 0a4c 	vneg.f32	s1, s24
24011652:	ee31 0ac9 	vsub.f32	s0, s3, s18
24011656:	4629      	mov	r1, r5
24011658:	4638      	mov	r0, r7
2401165a:	f01d fc2d 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 1;
2401165e:	2601      	movs	r6, #1
24011660:	e704      	b.n	2401146c <tMBSineTri_tick+0x4b4>
                x = -0.5f + p * invB;
24011662:	ee2b 7a89 	vmul.f32	s14, s23, s18
24011666:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401166a:	ee77 aa67 	vsub.f32	s21, s14, s15
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
2401166e:	eeb1 1a6c 	vneg.f32	s2, s25
24011672:	eeb1 2a4b 	vneg.f32	s4, s22
24011676:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
2401167a:	ee31 1a6b 	vsub.f32	s2, s2, s23
2401167e:	eef1 0a4c 	vneg.f32	s1, s24
24011682:	ee38 0ac9 	vsub.f32	s0, s17, s18
24011686:	4629      	mov	r1, r5
24011688:	4638      	mov	r0, r7
2401168a:	f01d fc15 	bl	2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>
                k = 0;
2401168e:	2600      	movs	r6, #0
24011690:	e7c7      	b.n	24011622 <tMBSineTri_tick+0x66a>
24011692:	461e      	mov	r6, r3
24011694:	e6ea      	b.n	2401146c <tMBSineTri_tick+0x4b4>
    {
    	sinPhase -= 1.0f;
24011696:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401169a:	ee38 8a67 	vsub.f32	s16, s16, s15
    while (sinPhase >= 1.0f)
2401169e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240116a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
240116a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240116aa:	daf4      	bge.n	24011696 <tMBSineTri_tick+0x6de>
240116ac:	e003      	b.n	240116b6 <tMBSineTri_tick+0x6fe>
    }

    while (sinPhase < 0.0f)
    {
    	sinPhase += 1.0f;
240116ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240116b2:	ee38 8a27 	vadd.f32	s16, s16, s15
    while (sinPhase < 0.0f)
240116b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240116ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240116be:	d4f6      	bmi.n	240116ae <tMBSineTri_tick+0x6f6>
    }
    Lfloat tempPhase = (sinPhase * 2048.0f);
240116c0:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 24011430 <tMBSineTri_tick+0x478>
240116c4:	ee68 7a27 	vmul.f32	s15, s16, s15
    idx = (uint32_t)tempPhase; //11 bit table
240116c8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
240116cc:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
240116d0:	eef8 6a66 	vcvt.f32.u32	s13, s13
240116d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
    samp0 = __leaf_table_sinewave[idx];
240116d8:	4993      	ldr	r1, [pc, #588]	; (24011928 <tMBSineTri_tick+0x970>)
240116da:	eb01 0082 	add.w	r0, r1, r2, lsl #2
240116de:	ed90 6a00 	vldr	s12, [r0]
    idx = (idx + 1) & c->sineMask;
240116e2:	3201      	adds	r2, #1
240116e4:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
240116e8:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
240116ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
240116ee:	edd2 7a00 	vldr	s15, [r2]

    Lfloat sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
240116f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
240116f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
240116fa:	ee77 7a86 	vadd.f32	s15, s15, s12
240116fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24011702:	ee67 7aa6 	vmul.f32	s15, s15, s13

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24011706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401170a:	ee76 6ae5 	vsub.f32	s13, s13, s11
2401170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
24011712:	3310      	adds	r3, #16
24011714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24011718:	ee37 7a27 	vadd.f32	s14, s14, s15
2401171c:	ed83 7a01 	vstr	s14, [r3, #4]


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24011720:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
24011724:	f88d 3007 	strb.w	r3, [sp, #7]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24011728:	2200      	movs	r2, #0
2401172a:	e062      	b.n	240117f2 <tMBSineTri_tick+0x83a>
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
2401172c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24011730:	b29b      	uxth	r3, r3
24011732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24011736:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401173a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
2401173e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24011742:	b29b      	uxth	r3, r3
24011744:	3334      	adds	r3, #52	; 0x34
24011746:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401174a:	889b      	ldrh	r3, [r3, #4]
2401174c:	4977      	ldr	r1, [pc, #476]	; (2401192c <tMBSineTri_tick+0x974>)
2401174e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24011752:	ed93 7a00 	vldr	s14, [r3]
24011756:	f8bd 3004 	ldrh.w	r3, [sp, #4]
2401175a:	b29b      	uxth	r3, r3
2401175c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24011760:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24011764:	edd3 6a3b 	vldr	s13, [r3, #236]	; 0xec
24011768:	f8bd 3004 	ldrh.w	r3, [sp, #4]
2401176c:	b29b      	uxth	r3, r3
2401176e:	3334      	adds	r3, #52	; 0x34
24011770:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24011774:	889b      	ldrh	r3, [r3, #4]
24011776:	3301      	adds	r3, #1
24011778:	eb01 0383 	add.w	r3, r1, r3, lsl #2
2401177c:	ed93 6a00 	vldr	s12, [r3]
24011780:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24011784:	b29b      	uxth	r3, r3
24011786:	3334      	adds	r3, #52	; 0x34
24011788:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401178c:	889b      	ldrh	r3, [r3, #4]
2401178e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
24011792:	ed91 5a00 	vldr	s10, [r1]
24011796:	ee36 6a45 	vsub.f32	s12, s12, s10
2401179a:	ee66 6a86 	vmul.f32	s13, s13, s12
2401179e:	ee37 7a26 	vadd.f32	s14, s14, s13
240117a2:	ee67 7a87 	vmul.f32	s15, s15, s14
240117a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
240117aa:	f105 0310 	add.w	r3, r5, #16
240117ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240117b2:	ed93 7a01 	vldr	s14, [r3, #4]
240117b6:	ee77 7a27 	vadd.f32	s15, s14, s15
240117ba:	edc3 7a01 	vstr	s15, [r3, #4]
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240117be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
240117c2:	b29b      	uxth	r3, r3
240117c4:	3334      	adds	r3, #52	; 0x34
240117c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240117ca:	8899      	ldrh	r1, [r3, #4]
240117cc:	3140      	adds	r1, #64	; 0x40
240117ce:	8099      	strh	r1, [r3, #4]
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240117d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
240117d4:	b29b      	uxth	r3, r3
240117d6:	3334      	adds	r3, #52	; 0x34
240117d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240117dc:	8899      	ldrh	r1, [r3, #4]
240117de:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
240117e2:	4299      	cmp	r1, r3
240117e4:	d304      	bcc.n	240117f0 <tMBSineTri_tick+0x838>
    		{
    			c->numBLEPs--;
240117e6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
240117ea:	3b01      	subs	r3, #1
240117ec:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240117f0:	3201      	adds	r2, #1
240117f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
240117f6:	b2db      	uxtb	r3, r3
240117f8:	4293      	cmp	r3, r2
240117fa:	dd6f      	ble.n	240118dc <tMBSineTri_tick+0x924>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
240117fc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
24011800:	1a9b      	subs	r3, r3, r2
24011802:	b29b      	uxth	r3, r3
24011804:	f8ad 3004 	strh.w	r3, [sp, #4]
    	whichBLEP &= 63;
24011808:	f8bd 3004 	ldrh.w	r3, [sp, #4]
2401180c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24011810:	f8ad 3004 	strh.w	r3, [sp, #4]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24011814:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24011818:	b29b      	uxth	r3, r3
2401181a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
2401181e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24011822:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
24011826:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011832:	f57f af7b 	bpl.w	2401172c <tMBSineTri_tick+0x774>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24011836:	f8bd 3004 	ldrh.w	r3, [sp, #4]
2401183a:	b29b      	uxth	r3, r3
2401183c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24011840:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24011844:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
24011848:	f8bd 3004 	ldrh.w	r3, [sp, #4]
2401184c:	b29b      	uxth	r3, r3
2401184e:	3334      	adds	r3, #52	; 0x34
24011850:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24011854:	889b      	ldrh	r3, [r3, #4]
24011856:	4936      	ldr	r1, [pc, #216]	; (24011930 <tMBSineTri_tick+0x978>)
24011858:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
2401185c:	ed93 7a00 	vldr	s14, [r3]
24011860:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24011864:	b29b      	uxth	r3, r3
24011866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
2401186a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401186e:	edd3 6a3b 	vldr	s13, [r3, #236]	; 0xec
24011872:	f8bd 3004 	ldrh.w	r3, [sp, #4]
24011876:	b29b      	uxth	r3, r3
24011878:	3334      	adds	r3, #52	; 0x34
2401187a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401187e:	889b      	ldrh	r3, [r3, #4]
24011880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
24011884:	ed91 6a01 	vldr	s12, [r1, #4]
24011888:	ee66 6a86 	vmul.f32	s13, s13, s12
2401188c:	ee37 7a26 	vadd.f32	s14, s14, s13
24011890:	ee27 7a87 	vmul.f32	s14, s15, s14
24011894:	f105 0310 	add.w	r3, r5, #16
24011898:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401189c:	edd3 7a01 	vldr	s15, [r3, #4]
240118a0:	ee77 7a87 	vadd.f32	s15, s15, s14
240118a4:	edc3 7a01 	vstr	s15, [r3, #4]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240118a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
240118ac:	b29b      	uxth	r3, r3
240118ae:	3334      	adds	r3, #52	; 0x34
240118b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240118b4:	8899      	ldrh	r1, [r3, #4]
240118b6:	3140      	adds	r1, #64	; 0x40
240118b8:	8099      	strh	r1, [r3, #4]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240118ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
240118be:	b29b      	uxth	r3, r3
240118c0:	3334      	adds	r3, #52	; 0x34
240118c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240118c6:	8899      	ldrh	r1, [r3, #4]
240118c8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
240118cc:	4299      	cmp	r1, r3
240118ce:	d38f      	bcc.n	240117f0 <tMBSineTri_tick+0x838>
    			c->numBLEPs--;
240118d0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
240118d4:	3b01      	subs	r3, #1
240118d6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
240118da:	e789      	b.n	240117f0 <tMBSineTri_tick+0x838>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
240118dc:	f105 0310 	add.w	r3, r5, #16
240118e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240118e4:	ed93 0a01 	vldr	s0, [r3, #4]
240118e8:	ee30 0a4a 	vsub.f32	s0, s0, s20
240118ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240118f0:	ee20 0a27 	vmul.f32	s0, s0, s15
240118f4:	ee30 0a0a 	vadd.f32	s0, s0, s20
    j = (j+1) & 7;
240118f8:	3501      	adds	r5, #1
240118fa:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
240118fe:	ed84 0a01 	vstr	s0, [r4, #4]
    c->_p = p;
24011902:	ed84 9a08 	vstr	s18, [r4, #32]
    c->_w = w;
24011906:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    c->_b = b;
2401190a:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
    c->_z = z;
2401190e:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    c->_j = j;
24011912:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_k = k;
24011914:	63e6      	str	r6, [r4, #60]	; 0x3c
    c->_sinPhase = sinPhase;
24011916:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30

    return -c->out;
}
2401191a:	eeb1 0a40 	vneg.f32	s0, s0
2401191e:	b002      	add	sp, #8
24011920:	ecbd 8b0c 	vpop	{d8-d13}
24011924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24011928:	2401dac4 	.word	0x2401dac4
2401192c:	2401fb44 	.word	0x2401fb44
24011930:	24024248 	.word	0x24024248

24011934 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, Lfloat f)
{
    _tMBSineTri* c = *osc;
24011934:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
24011936:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401193a:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
2401193e:	ee27 0a80 	vmul.f32	s0, s15, s0
24011942:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24011946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401194a:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401194e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
24011952:	4770      	bx	lr

24011954 <tMBSineTri_sync>:
    c->waveform = w;
}

Lfloat tMBSineTri_sync(tMBSineTri* const osc, Lfloat value)
{
    _tMBSineTri* c = *osc;
24011954:	6803      	ldr	r3, [r0, #0]

    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    Lfloat last = c->lastsyncin;
24011956:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat delta = value - last;
2401195a:	ee70 6a67 	vsub.f32	s13, s0, s15
    Lfloat crossing = -last / delta;
2401195e:	eef1 7a67 	vneg.f32	s15, s15
24011962:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    c->lastsyncin = value;
24011966:	ed83 0a04 	vstr	s0, [r3, #16]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401196a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
2401196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011972:	dd06      	ble.n	24011982 <tMBSineTri_sync+0x2e>
24011974:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011978:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011980:	d902      	bls.n	24011988 <tMBSineTri_sync+0x34>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24011982:	2200      	movs	r2, #0
24011984:	615a      	str	r2, [r3, #20]

    return value;
}
24011986:	4770      	bx	lr
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24011988:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011990:	dbf7      	blt.n	24011982 <tMBSineTri_sync+0x2e>
        c->sync = (1.f - crossing) * delta;
24011992:	ee37 7ac7 	vsub.f32	s14, s15, s14
24011996:	ee67 6a26 	vmul.f32	s13, s14, s13
2401199a:	edc3 6a05 	vstr	s13, [r3, #20]
2401199e:	4770      	bx	lr

240119a0 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, Lfloat shape)
{
    _tMBSineTri* c = *osc;
240119a0:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
240119a2:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
240119a6:	4770      	bx	lr

240119a8 <tIntPhasor_initToPool>:
{
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
240119a8:	b538      	push	{r3, r4, r5, lr}
240119aa:	4605      	mov	r5, r0
    _tMempool* m = *mp;
240119ac:	680c      	ldr	r4, [r1, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240119ae:	4621      	mov	r1, r4
240119b0:	201c      	movs	r0, #28
240119b2:	f7fe fef6 	bl	240107a2 <mpool_alloc>
240119b6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240119b8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240119ba:	6863      	ldr	r3, [r4, #4]
    
    c->phase    =  0;
240119bc:	2200      	movs	r2, #0
240119be:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240119c0:	edd3 7a01 	vldr	s15, [r3, #4]
240119c4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 240119d4 <tIntPhasor_initToPool+0x2c>
240119c8:	ee67 7a87 	vmul.f32	s15, s15, s14
240119cc:	edc0 7a06 	vstr	s15, [r0, #24]
}
240119d0:	bd38      	pop	{r3, r4, r5, pc}
240119d2:	bf00      	nop
240119d4:	4f800000 	.word	0x4f800000

240119d8 <tIntPhasor_init>:
{
240119d8:	b508      	push	{r3, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
240119da:	3118      	adds	r1, #24
240119dc:	f7ff ffe4 	bl	240119a8 <tIntPhasor_initToPool>
}
240119e0:	bd08      	pop	{r3, pc}
	...

240119e4 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
240119e4:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
240119e6:	6853      	ldr	r3, [r2, #4]
240119e8:	6891      	ldr	r1, [r2, #8]
240119ea:	440b      	add	r3, r1
240119ec:	6053      	str	r3, [r2, #4]
    
    return c->phase * INV_TWO_TO_32; 
240119ee:	ee07 3a90 	vmov	s15, r3
240119f2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
240119f6:	eddf 7a02 	vldr	s15, [pc, #8]	; 24011a00 <tIntPhasor_tick+0x1c>
240119fa:	ee20 0a27 	vmul.f32	s0, s0, s15
240119fe:	4770      	bx	lr
24011a00:	2f80000d 	.word	0x2f80000d

24011a04 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24011a04:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
24011a06:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24011a0a:	edd3 7a06 	vldr	s15, [r3, #24]
24011a0e:	ee27 0a80 	vmul.f32	s0, s15, s0
24011a12:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24011a16:	ed83 0a02 	vstr	s0, [r3, #8]
}
24011a1a:	4770      	bx	lr

24011a1c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
24011a1c:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
24011a1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24011a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011a26:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24011a2a:	eddf 7a04 	vldr	s15, [pc, #16]	; 24011a3c <tIntPhasor_setPhase+0x20>
24011a2e:	ee20 0a27 	vmul.f32	s0, s0, s15
24011a32:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24011a36:	ed83 0a01 	vstr	s0, [r3, #4]
}
24011a3a:	4770      	bx	lr
24011a3c:	4f800000 	.word	0x4f800000

24011a40 <tSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tSquareLFO_tick(tSquareLFO* const cy)
{
24011a40:	b510      	push	{r4, lr}
24011a42:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy;
24011a46:	6804      	ldr	r4, [r0, #0]
    // Phasor increment
    Lfloat a = tIntPhasor_tick(&c->phasor);
24011a48:	f104 0008 	add.w	r0, r4, #8
24011a4c:	f7ff ffca 	bl	240119e4 <tIntPhasor_tick>
24011a50:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tIntPhasor_tick(&c->invPhasor);
24011a54:	f104 000c 	add.w	r0, r4, #12
24011a58:	f7ff ffc4 	bl	240119e4 <tIntPhasor_tick>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24011a5c:	ee38 0a40 	vsub.f32	s0, s16, s0
24011a60:	ed94 8a01 	vldr	s16, [r4, #4]
24011a64:	ee30 0a08 	vadd.f32	s0, s0, s16
24011a68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011a6c:	ee30 0a67 	vsub.f32	s0, s0, s15
    return 2 * tmp;
}
24011a70:	ee30 0a00 	vadd.f32	s0, s0, s0
24011a74:	ecbd 8b02 	vpop	{d8}
24011a78:	bd10      	pop	{r4, pc}

24011a7a <tSquareLFO_setFreq>:

void     tSquareLFO_setFreq(tSquareLFO* const cy, Lfloat freq)
{
24011a7a:	b510      	push	{r4, lr}
24011a7c:	ed2d 8b02 	vpush	{d8}
24011a80:	eeb0 8a40 	vmov.f32	s16, s0
    _tSquareLFO* c = *cy;
24011a84:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setFreq(&c->phasor,freq);
24011a86:	f104 0008 	add.w	r0, r4, #8
24011a8a:	f7ff ffbb 	bl	24011a04 <tIntPhasor_setFreq>
    tIntPhasor_setFreq(&c->invPhasor,freq);
24011a8e:	eeb0 0a48 	vmov.f32	s0, s16
24011a92:	f104 000c 	add.w	r0, r4, #12
24011a96:	f7ff ffb5 	bl	24011a04 <tIntPhasor_setFreq>
}
24011a9a:	ecbd 8b02 	vpop	{d8}
24011a9e:	bd10      	pop	{r4, pc}

24011aa0 <tSquareLFO_setPulseWidth>:
    tIntPhasor_setSampleRate(&c->phasor, sr);
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
24011aa0:	b508      	push	{r3, lr}
    _tSquareLFO *c = *cy;
24011aa2:	6800      	ldr	r0, [r0, #0]

    c->pulsewidth = pw;
24011aa4:	ed80 0a01 	vstr	s0, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24011aa8:	6883      	ldr	r3, [r0, #8]
24011aaa:	edd3 7a01 	vldr	s15, [r3, #4]
24011aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011ab2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24011ac8 <tSquareLFO_setPulseWidth+0x28>
24011ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
24011aba:	ee37 0a80 	vadd.f32	s0, s15, s0
24011abe:	300c      	adds	r0, #12
24011ac0:	f7ff ffac 	bl	24011a1c <tIntPhasor_setPhase>
}
24011ac4:	bd08      	pop	{r3, pc}
24011ac6:	bf00      	nop
24011ac8:	2f80000d 	.word	0x2f80000d

24011acc <tSquareLFO_initToPool>:
{
24011acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24011ace:	4606      	mov	r6, r0
24011ad0:	460d      	mov	r5, r1
    _tMempool* m = *mp;
24011ad2:	680f      	ldr	r7, [r1, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24011ad4:	4639      	mov	r1, r7
24011ad6:	2010      	movs	r0, #16
24011ad8:	f7fe fe63 	bl	240107a2 <mpool_alloc>
24011adc:	4604      	mov	r4, r0
24011ade:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24011ae0:	f840 7b08 	str.w	r7, [r0], #8
    tIntPhasor_initToPool(&c->phasor,mp);
24011ae4:	4629      	mov	r1, r5
24011ae6:	f7ff ff5f 	bl	240119a8 <tIntPhasor_initToPool>
    tIntPhasor_initToPool(&c->invPhasor,mp); 
24011aea:	4629      	mov	r1, r5
24011aec:	f104 000c 	add.w	r0, r4, #12
24011af0:	f7ff ff5a 	bl	240119a8 <tIntPhasor_initToPool>
    tSquareLFO_setPulseWidth(cy, 0.5f);
24011af4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
24011af8:	4630      	mov	r0, r6
24011afa:	f7ff ffd1 	bl	24011aa0 <tSquareLFO_setPulseWidth>
}
24011afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24011b00 <tSquareLFO_init>:
{
24011b00:	b508      	push	{r3, lr}
    tSquareLFO_initToPool(cy, &leaf->mempool);
24011b02:	3118      	adds	r1, #24
24011b04:	f7ff ffe2 	bl	24011acc <tSquareLFO_initToPool>
}
24011b08:	bd08      	pop	{r3, pc}
	...

24011b0c <tSquareLFO_setPhase>:

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
24011b0c:	b510      	push	{r4, lr}
    _tSquareLFO *c = *cy;
24011b0e:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
24011b10:	f104 0008 	add.w	r0, r4, #8
24011b14:	f7ff ff82 	bl	24011a1c <tIntPhasor_setPhase>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24011b18:	ed94 0a01 	vldr	s0, [r4, #4]
24011b1c:	68a3      	ldr	r3, [r4, #8]
24011b1e:	edd3 7a01 	vldr	s15, [r3, #4]
24011b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011b26:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24011b3c <tSquareLFO_setPhase+0x30>
24011b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
24011b2e:	ee30 0a27 	vadd.f32	s0, s0, s15
24011b32:	f104 000c 	add.w	r0, r4, #12
24011b36:	f7ff ff71 	bl	24011a1c <tIntPhasor_setPhase>
}
24011b3a:	bd10      	pop	{r4, pc}
24011b3c:	2f80000d 	.word	0x2f80000d

24011b40 <tSawSquareLFO_initToPool>:
    tSawSquareLFO_initToPool(cy, &leaf->mempool);

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
24011b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24011b42:	4606      	mov	r6, r0
24011b44:	460d      	mov	r5, r1
    _tMempool* m = *mp;
24011b46:	680f      	ldr	r7, [r1, #0]
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24011b48:	4639      	mov	r1, r7
24011b4a:	2010      	movs	r0, #16
24011b4c:	f7fe fe29 	bl	240107a2 <mpool_alloc>
24011b50:	4604      	mov	r4, r0
24011b52:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24011b54:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24011b58:	4629      	mov	r1, r5
24011b5a:	f7ff ffb7 	bl	24011acc <tSquareLFO_initToPool>
    tIntPhasor_initToPool(&c->saw,mp); 
24011b5e:	4629      	mov	r1, r5
24011b60:	f104 0008 	add.w	r0, r4, #8
24011b64:	f7ff ff20 	bl	240119a8 <tIntPhasor_initToPool>
}
24011b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24011b6a <tSawSquareLFO_init>:
{
24011b6a:	b508      	push	{r3, lr}
    tSawSquareLFO_initToPool(cy, &leaf->mempool);
24011b6c:	3118      	adds	r1, #24
24011b6e:	f7ff ffe7 	bl	24011b40 <tSawSquareLFO_initToPool>
}
24011b72:	bd08      	pop	{r3, pc}

24011b74 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
24011b74:	b510      	push	{r4, lr}
24011b76:	ed2d 8b02 	vpush	{d8}
    _tSawSquareLFO* c = *cy;
24011b7a:	6804      	ldr	r4, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24011b7c:	f104 0008 	add.w	r0, r4, #8
24011b80:	f7ff ff30 	bl	240119e4 <tIntPhasor_tick>
24011b84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011b88:	ee30 0a67 	vsub.f32	s0, s0, s15
24011b8c:	ee30 8a00 	vadd.f32	s16, s0, s0
    Lfloat b = tSquareLFO_tick(&c->square);
24011b90:	f104 000c 	add.w	r0, r4, #12
24011b94:	f7ff ff54 	bl	24011a40 <tSquareLFO_tick>
    return  (1 - c->shape) * a + c->shape * b; 
24011b98:	ed94 7a01 	vldr	s14, [r4, #4]
24011b9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
24011ba4:	ee27 8a88 	vmul.f32	s16, s15, s16
24011ba8:	ee27 0a00 	vmul.f32	s0, s14, s0
}
24011bac:	ee38 0a00 	vadd.f32	s0, s16, s0
24011bb0:	ecbd 8b02 	vpop	{d8}
24011bb4:	bd10      	pop	{r4, pc}

24011bb6 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
24011bb6:	b510      	push	{r4, lr}
24011bb8:	ed2d 8b02 	vpush	{d8}
24011bbc:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
24011bc0:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setFreq(&c->square, freq);
24011bc2:	f104 000c 	add.w	r0, r4, #12
24011bc6:	f7ff ff58 	bl	24011a7a <tSquareLFO_setFreq>
    tIntPhasor_setFreq(&c->saw, freq);
24011bca:	eeb0 0a48 	vmov.f32	s0, s16
24011bce:	f104 0008 	add.w	r0, r4, #8
24011bd2:	f7ff ff17 	bl	24011a04 <tIntPhasor_setFreq>
}
24011bd6:	ecbd 8b02 	vpop	{d8}
24011bda:	bd10      	pop	{r4, pc}

24011bdc <tSawSquareLFO_setPhase>:
    _tSawSquareLFO* c = *cy;
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
24011bdc:	b510      	push	{r4, lr}
24011bde:	ed2d 8b02 	vpush	{d8}
24011be2:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
24011be6:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setPhase(&c->square, phase);
24011be8:	f104 000c 	add.w	r0, r4, #12
24011bec:	f7ff ff8e 	bl	24011b0c <tSquareLFO_setPhase>
    tIntPhasor_setPhase(&c->saw, phase);
24011bf0:	eeb0 0a48 	vmov.f32	s0, s16
24011bf4:	f104 0008 	add.w	r0, r4, #8
24011bf8:	f7ff ff10 	bl	24011a1c <tIntPhasor_setPhase>
}
24011bfc:	ecbd 8b02 	vpop	{d8}
24011c00:	bd10      	pop	{r4, pc}

24011c02 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
24011c02:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
24011c04:	ed83 0a01 	vstr	s0, [r3, #4]
}
24011c08:	4770      	bx	lr
	...

24011c0c <tTriLFO_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tTriLFO_tick(tTriLFO* const cy)
{
    _tTriLFO* c = *cy;
24011c0c:	6801      	ldr	r1, [r0, #0]
    c->phase += c->inc;
24011c0e:	688a      	ldr	r2, [r1, #8]
24011c10:	684b      	ldr	r3, [r1, #4]
24011c12:	441a      	add	r2, r3
24011c14:	604a      	str	r2, [r1, #4]
    
    //bitmask fun
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24011c16:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    uint32_t mask = shiftedPhase >> 31; //get the sign bit
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24011c1a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24011c1e:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
24011c22:	ee00 3a10 	vmov	s0, r3
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24011c26:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
24011c2a:	eddf 7a05 	vldr	s15, [pc, #20]	; 24011c40 <tTriLFO_tick+0x34>
24011c2e:	ee20 0a27 	vmul.f32	s0, s0, s15
24011c32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011c36:	ee30 0a67 	vsub.f32	s0, s0, s15
    return output;

}
24011c3a:	ee30 0a00 	vadd.f32	s0, s0, s0
24011c3e:	4770      	bx	lr
24011c40:	2ffffff6 	.word	0x2ffffff6

24011c44 <tTriLFO_setFreq>:

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
24011c44:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
24011c46:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24011c4a:	edd3 7a05 	vldr	s15, [r3, #20]
24011c4e:	ee27 0a80 	vmul.f32	s0, s15, s0
24011c52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24011c56:	ed83 0a02 	vstr	s0, [r3, #8]
}
24011c5a:	4770      	bx	lr

24011c5c <tTriLFO_initToPool>:
{
24011c5c:	b538      	push	{r3, r4, r5, lr}
24011c5e:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24011c60:	680d      	ldr	r5, [r1, #0]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24011c62:	4629      	mov	r1, r5
24011c64:	2018      	movs	r0, #24
24011c66:	f7fe fd9c 	bl	240107a2 <mpool_alloc>
24011c6a:	6020      	str	r0, [r4, #0]
    c->mempool = m;
24011c6c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24011c6e:	686a      	ldr	r2, [r5, #4]
    c->inc      =  0;
24011c70:	2300      	movs	r3, #0
24011c72:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
24011c74:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24011c76:	edd2 7a01 	vldr	s15, [r2, #4]
24011c7a:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24011c7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24011c98 <tTriLFO_initToPool+0x3c>
24011c82:	ee67 7a87 	vmul.f32	s15, s15, s14
24011c86:	edc0 7a05 	vstr	s15, [r0, #20]
    tTriLFO_setFreq(cy, 220.0f);
24011c8a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 24011c9c <tTriLFO_initToPool+0x40>
24011c8e:	4620      	mov	r0, r4
24011c90:	f7ff ffd8 	bl	24011c44 <tTriLFO_setFreq>
}
24011c94:	bd38      	pop	{r3, r4, r5, pc}
24011c96:	bf00      	nop
24011c98:	4f800000 	.word	0x4f800000
24011c9c:	435c0000 	.word	0x435c0000

24011ca0 <tTriLFO_init>:
{
24011ca0:	b508      	push	{r3, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
24011ca2:	3118      	adds	r1, #24
24011ca4:	f7ff ffda 	bl	24011c5c <tTriLFO_initToPool>
}
24011ca8:	bd08      	pop	{r3, pc}

24011caa <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
24011caa:	6803      	ldr	r3, [r0, #0]
    int i = phase;
24011cac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24011cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011cb4:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24011cb8:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24011cbc:	ed83 0a01 	vstr	s0, [r3, #4]
}
24011cc0:	4770      	bx	lr

24011cc2 <tSineTriLFO_initToPool>:
{
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
24011cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24011cc4:	4606      	mov	r6, r0
24011cc6:	460d      	mov	r5, r1
    _tMempool* m = *mp;
24011cc8:	680f      	ldr	r7, [r1, #0]
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24011cca:	4639      	mov	r1, r7
24011ccc:	2010      	movs	r0, #16
24011cce:	f7fe fd68 	bl	240107a2 <mpool_alloc>
24011cd2:	4604      	mov	r4, r0
24011cd4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24011cd6:	f840 7b08 	str.w	r7, [r0], #8
    tTriLFO_initToPool(&c->tri,mp);
24011cda:	4629      	mov	r1, r5
24011cdc:	f7ff ffbe 	bl	24011c5c <tTriLFO_initToPool>
    tCycle_initToPool(&c->sine,mp); 
24011ce0:	4629      	mov	r1, r5
24011ce2:	f104 000c 	add.w	r0, r4, #12
24011ce6:	f7fe fed3 	bl	24010a90 <tCycle_initToPool>
   
}
24011cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24011cec <tSineTriLFO_init>:
{
24011cec:	b508      	push	{r3, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
24011cee:	3118      	adds	r1, #24
24011cf0:	f7ff ffe7 	bl	24011cc2 <tSineTriLFO_initToPool>
}
24011cf4:	bd08      	pop	{r3, pc}

24011cf6 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24011cf6:	b510      	push	{r4, lr}
24011cf8:	ed2d 8b02 	vpush	{d8}
    _tSineTriLFO* c = *cy;
24011cfc:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
24011cfe:	f104 000c 	add.w	r0, r4, #12
24011d02:	f7fe fee7 	bl	24010ad4 <tCycle_tick>
24011d06:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tTriLFO_tick(&c->tri);
24011d0a:	f104 0008 	add.w	r0, r4, #8
24011d0e:	f7ff ff7d 	bl	24011c0c <tTriLFO_tick>
    return  (1.0f - c->shape) * a + c->shape * b;
24011d12:	ed94 7a01 	vldr	s14, [r4, #4]
24011d16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
24011d1e:	ee67 7a88 	vmul.f32	s15, s15, s16
24011d22:	ee27 0a00 	vmul.f32	s0, s14, s0
}
24011d26:	ee37 0a80 	vadd.f32	s0, s15, s0
24011d2a:	ecbd 8b02 	vpop	{d8}
24011d2e:	bd10      	pop	{r4, pc}

24011d30 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
24011d30:	b510      	push	{r4, lr}
24011d32:	ed2d 8b02 	vpush	{d8}
24011d36:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
24011d3a:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setFreq(&c->tri, freq);
24011d3c:	f104 0008 	add.w	r0, r4, #8
24011d40:	f7ff ff80 	bl	24011c44 <tTriLFO_setFreq>
    tCycle_setFreq(&c->sine, freq);
24011d44:	eeb0 0a48 	vmov.f32	s0, s16
24011d48:	f104 000c 	add.w	r0, r4, #12
24011d4c:	f7fe feea 	bl	24010b24 <tCycle_setFreq>
}
24011d50:	ecbd 8b02 	vpop	{d8}
24011d54:	bd10      	pop	{r4, pc}

24011d56 <tSineTriLFO_setPhase>:
    _tSineTriLFO* c = *cy;
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
24011d56:	b510      	push	{r4, lr}
24011d58:	ed2d 8b02 	vpush	{d8}
24011d5c:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
24011d60:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setPhase(&c->tri, phase);
24011d62:	f104 0008 	add.w	r0, r4, #8
24011d66:	f7ff ffa0 	bl	24011caa <tTriLFO_setPhase>
    tCycle_setPhase(&c->sine, phase);
24011d6a:	eeb0 0a48 	vmov.f32	s0, s16
24011d6e:	f104 000c 	add.w	r0, r4, #12
24011d72:	f7fe fee3 	bl	24010b3c <tCycle_setPhase>
}
24011d76:	ecbd 8b02 	vpop	{d8}
24011d7a:	bd10      	pop	{r4, pc}

24011d7c <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24011d7c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24011d7e:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24011d82:	4770      	bx	lr

24011d84 <tSimpleLivingString3_free>:


}

void    tSimpleLivingString3_free (tSimpleLivingString3* const pl)
{
24011d84:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24011d86:	6804      	ldr	r4, [r0, #0]
    
    tExpSmooth_free(&p->wlSmooth);
24011d88:	f104 0058 	add.w	r0, r4, #88	; 0x58
24011d8c:	f7fc fde1 	bl	2400e952 <tExpSmooth_free>
    tLinearDelay_free(&p->delayLineU);
24011d90:	f104 0034 	add.w	r0, r4, #52	; 0x34
24011d94:	f7fb fdea 	bl	2400d96c <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineL);
24011d98:	f104 0038 	add.w	r0, r4, #56	; 0x38
24011d9c:	f7fb fde6 	bl	2400d96c <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
24011da0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24011da4:	f7fc fddb 	bl	2400e95e <tOnePole_free>
    tBiQuad_free(&p->bridgeFilter2),
24011da8:	f104 0040 	add.w	r0, r4, #64	; 0x40
24011dac:	f7fc feae 	bl	2400eb0c <tBiQuad_free>
    tHighpass_free(&p->DCblocker);
24011db0:	f104 0050 	add.w	r0, r4, #80	; 0x50
24011db4:	f7fd f81f 	bl	2400edf6 <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLev);
24011db8:	f104 0054 	add.w	r0, r4, #84	; 0x54
24011dbc:	f7fc fa3f 	bl	2400e23e <tFeedbackLeveler_free>
    
    mpool_free((char*)p, p->mempool);
24011dc0:	6821      	ldr	r1, [r4, #0]
24011dc2:	4620      	mov	r0, r4
24011dc4:	f7fe fdd9 	bl	2401097a <mpool_free>
}
24011dc8:	bd10      	pop	{r4, pc}
24011dca:	0000      	movs	r0, r0
24011dcc:	0000      	movs	r0, r0
	...

24011dd0 <tSimpleLivingString3_setFreq>:

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
24011dd0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24011dd2:	6804      	ldr	r4, [r0, #0]
    p->freq = freq;
24011dd4:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24011dd8:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
24011ddc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24011de0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24011de4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 24011e70 <tSimpleLivingString3_setFreq+0xa0>
24011de8:	eeb4 5bc6 	vcmpe.f64	d5, d6
24011dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011df0:	d40d      	bmi.n	24011e0e <tSimpleLivingString3_setFreq+0x3e>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24011df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
24011df4:	005b      	lsls	r3, r3, #1
24011df6:	ee00 3a10 	vmov	s0, r3
24011dfa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
24011dfe:	eeb4 0ae7 	vcmpe.f32	s0, s15
24011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011e06:	d404      	bmi.n	24011e12 <tSimpleLivingString3_setFreq+0x42>
    Lfloat waveLength = (p->sampleRate/freq);
24011e08:	eeb0 0a67 	vmov.f32	s0, s15
24011e0c:	e001      	b.n	24011e12 <tSimpleLivingString3_setFreq+0x42>
    if (waveLength<4.8) waveLength=4.8f;
24011e0e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 24011e80 <tSimpleLivingString3_setFreq+0xb0>
    p->waveLengthInSamples =  waveLength * 0.5f;
24011e12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011e16:	ee20 0a27 	vmul.f32	s0, s0, s15
24011e1a:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24011e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
24011e22:	f01d f875 	bl	2402ef10 <__tExpSmooth_setDest_veneer>
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24011e26:	ed94 7a05 	vldr	s14, [r4, #20]
24011e2a:	eddf 7a16 	vldr	s15, [pc, #88]	; 24011e84 <tSimpleLivingString3_setFreq+0xb4>
24011e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
24011e32:	ee37 7a27 	vadd.f32	s14, s14, s15
24011e36:	eddf 7a14 	vldr	s15, [pc, #80]	; 24011e88 <tSimpleLivingString3_setFreq+0xb8>
24011e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24011e3e:	ed94 6a01 	vldr	s12, [r4, #4]
24011e42:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24011e46:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24011e4a:	ee84 5b06 	vdiv.f64	d5, d4, d6
24011e4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24011e52:	ee85 0b07 	vdiv.f64	d0, d5, d7
24011e56:	ed9f 7b08 	vldr	d7, [pc, #32]	; 24011e78 <tSimpleLivingString3_setFreq+0xa8>
24011e5a:	ee20 0b07 	vmul.f64	d0, d0, d7
24011e5e:	f001 fd43 	bl	240138e8 <exp>
24011e62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24011e66:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24011e6a:	bd10      	pop	{r4, pc}
24011e6c:	f3af 8000 	nop.w
24011e70:	33333333 	.word	0x33333333
24011e74:	40133333 	.word	0x40133333
24011e78:	0a3d70a4 	.word	0x0a3d70a4
24011e7c:	c01ba3d7 	.word	0xc01ba3d7
24011e80:	4099999a 	.word	0x4099999a
24011e84:	3c23d70a 	.word	0x3c23d70a
24011e88:	40dd0cb3 	.word	0x40dd0cb3
24011e8c:	00000000 	.word	0x00000000

24011e90 <tSimpleLivingString3_initToPool>:
{
24011e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24011e94:	ed2d 8b06 	vpush	{d8-d10}
24011e98:	4680      	mov	r8, r0
24011e9a:	460e      	mov	r6, r1
24011e9c:	eef0 8a40 	vmov.f32	s17, s0
24011ea0:	eeb0 8a60 	vmov.f32	s16, s1
24011ea4:	ee11 9a10 	vmov	r9, s2
24011ea8:	eeb0 9a61 	vmov.f32	s18, s3
24011eac:	eef0 9a42 	vmov.f32	s19, s4
24011eb0:	eeb0 aa62 	vmov.f32	s20, s5
24011eb4:	4617      	mov	r7, r2
24011eb6:	461d      	mov	r5, r3
    _tMempool* m = *mp;
24011eb8:	f8d3 a000 	ldr.w	sl, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24011ebc:	4651      	mov	r1, sl
24011ebe:	2064      	movs	r0, #100	; 0x64
24011ec0:	f7fe fc6f 	bl	240107a2 <mpool_alloc>
24011ec4:	4604      	mov	r4, r0
24011ec6:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
24011eca:	f8c0 a000 	str.w	sl, [r0]
    LEAF* leaf = p->mempool->leaf;
24011ece:	f8da 3004 	ldr.w	r3, [sl, #4]
    p->oversampling = oversampling;
24011ed2:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->sampleRate = leaf->sampleRate * oversampling;
24011ed4:	ed93 7a00 	vldr	s14, [r3]
24011ed8:	ee07 6a90 	vmov	s15, r6
24011edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
24011ee4:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    p->curr=0.0f;
24011ee8:	2300      	movs	r3, #0
24011eea:	6243      	str	r3, [r0, #36]	; 0x24
    p->maxLength = 2400 * oversampling;
24011eec:	f44f 6116 	mov.w	r1, #2400	; 0x960
24011ef0:	fb01 f606 	mul.w	r6, r1, r6
24011ef4:	6306      	str	r6, [r0, #48]	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24011ef6:	f100 0658 	add.w	r6, r0, #88	; 0x58
24011efa:	ee87 0aa8 	vdiv.f32	s0, s15, s17
24011efe:	4629      	mov	r1, r5
24011f00:	eddf 0a67 	vldr	s1, [pc, #412]	; 240120a0 <tSimpleLivingString3_initToPool+0x210>
24011f04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011f08:	ee20 0a27 	vmul.f32	s0, s0, s15
24011f0c:	4630      	mov	r0, r6
24011f0e:	f7fc fce7 	bl	2400e8e0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24011f12:	f104 0b34 	add.w	fp, r4, #52	; 0x34
24011f16:	462a      	mov	r2, r5
24011f18:	6b21      	ldr	r1, [r4, #48]	; 0x30
24011f1a:	ed94 0a02 	vldr	s0, [r4, #8]
24011f1e:	4658      	mov	r0, fp
24011f20:	f7fb fe00 	bl	2400db24 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24011f24:	f104 0a38 	add.w	sl, r4, #56	; 0x38
24011f28:	462a      	mov	r2, r5
24011f2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
24011f2c:	ed94 0a02 	vldr	s0, [r4, #8]
24011f30:	4650      	mov	r0, sl
24011f32:	f7fb fdf7 	bl	2400db24 <tLinearDelay_initToPool>
    tSimpleLivingString3_setFreq(pl, freq);
24011f36:	eeb0 0a68 	vmov.f32	s0, s17
24011f3a:	4640      	mov	r0, r8
24011f3c:	f7ff ff48 	bl	24011dd0 <tSimpleLivingString3_setFreq>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24011f40:	ed94 0a02 	vldr	s0, [r4, #8]
24011f44:	4658      	mov	r0, fp
24011f46:	f7fb fdb1 	bl	2400daac <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
24011f4a:	ed94 0a02 	vldr	s0, [r4, #8]
24011f4e:	4650      	mov	r0, sl
24011f50:	f7fb fdac 	bl	2400daac <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24011f54:	4658      	mov	r0, fp
24011f56:	f7fb fd14 	bl	2400d982 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
24011f5a:	4650      	mov	r0, sl
24011f5c:	f7fb fd11 	bl	2400d982 <tLinearDelay_clear>
    p->dampFreq = dampFreq;
24011f60:	ed84 8a03 	vstr	s16, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24011f64:	f104 083c 	add.w	r8, r4, #60	; 0x3c
24011f68:	4629      	mov	r1, r5
24011f6a:	eeb0 0a48 	vmov.f32	s0, s16
24011f6e:	4640      	mov	r0, r8
24011f70:	f7fc fd18 	bl	2400e9a4 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24011f74:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24011f78:	4640      	mov	r0, r8
24011f7a:	f7fc fd49 	bl	2400ea10 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24011f7e:	eeb0 0a48 	vmov.f32	s0, s16
24011f82:	4640      	mov	r0, r8
24011f84:	f7fc fcf2 	bl	2400e96c <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24011f88:	f104 0840 	add.w	r8, r4, #64	; 0x40
24011f8c:	4629      	mov	r1, r5
24011f8e:	4640      	mov	r0, r8
24011f90:	f7fc fda5 	bl	2400eade <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
24011f94:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24011f98:	4640      	mov	r0, r8
24011f9a:	f7fc fdbd 	bl	2400eb18 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24011f9e:	f104 0850 	add.w	r8, r4, #80	; 0x50
24011fa2:	4629      	mov	r1, r5
24011fa4:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24011fa8:	4640      	mov	r0, r8
24011faa:	f7fc fefd 	bl	2400eda8 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24011fae:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24011fb2:	4640      	mov	r0, r8
24011fb4:	f7fc ff48 	bl	2400ee48 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24011fb8:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24011fbc:	4640      	mov	r0, r8
24011fbe:	f7fc ff20 	bl	2400ee02 <tHighpass_setFreq>
    p->userDecay = decay;
24011fc2:	f8c4 9014 	str.w	r9, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24011fc6:	462a      	mov	r2, r5
24011fc8:	4639      	mov	r1, r7
24011fca:	eeb0 1a4a 	vmov.f32	s2, s20
24011fce:	eef0 0a69 	vmov.f32	s1, s19
24011fd2:	eeb0 0a49 	vmov.f32	s0, s18
24011fd6:	f104 0054 	add.w	r0, r4, #84	; 0x54
24011fda:	f7fc f908 	bl	2400e1ee <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
24011fde:	6227      	str	r7, [r4, #32]
    p->changeGainCompensator = 1.0f;
24011fe0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011fe4:	61e3      	str	r3, [r4, #28]
    p->freq = freq;
24011fe6:	edc4 8a01 	vstr	s17, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24011fea:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
24011fee:	eec7 7a28 	vdiv.f32	s15, s14, s17
    if (waveLength<4.8) waveLength=4.8f;
24011ff2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24011ff6:	ed9f 6b26 	vldr	d6, [pc, #152]	; 24012090 <tSimpleLivingString3_initToPool+0x200>
24011ffa:	eeb4 5bc6 	vcmpe.f64	d5, d6
24011ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012002:	d40d      	bmi.n	24012020 <tSimpleLivingString3_initToPool+0x190>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24012004:	6b23      	ldr	r3, [r4, #48]	; 0x30
24012006:	005b      	lsls	r3, r3, #1
24012008:	ee00 3a10 	vmov	s0, r3
2401200c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
24012010:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012018:	d404      	bmi.n	24012024 <tSimpleLivingString3_initToPool+0x194>
    Lfloat waveLength = (p->sampleRate/freq);
2401201a:	eeb0 0a67 	vmov.f32	s0, s15
2401201e:	e001      	b.n	24012024 <tSimpleLivingString3_initToPool+0x194>
    if (waveLength<4.8) waveLength=4.8f;
24012020:	ed9f 0a20 	vldr	s0, [pc, #128]	; 240120a4 <tSimpleLivingString3_initToPool+0x214>
    p->waveLengthInSamples =  waveLength * 0.5f;
24012024:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012028:	ee20 0a27 	vmul.f32	s0, s0, s15
2401202c:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24012030:	4630      	mov	r0, r6
24012032:	f01c ff6d 	bl	2402ef10 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24012036:	ed94 7a05 	vldr	s14, [r4, #20]
2401203a:	eddf 7a19 	vldr	s15, [pc, #100]	; 240120a0 <tSimpleLivingString3_initToPool+0x210>
2401203e:	ee27 7a27 	vmul.f32	s14, s14, s15
24012042:	ee37 7a27 	vadd.f32	s14, s14, s15
24012046:	eddf 7a18 	vldr	s15, [pc, #96]	; 240120a8 <tSimpleLivingString3_initToPool+0x218>
2401204a:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
2401204e:	ed94 6a01 	vldr	s12, [r4, #4]
24012052:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24012056:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
2401205a:	ee84 5b06 	vdiv.f64	d5, d4, d6
2401205e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24012062:	ee85 0b07 	vdiv.f64	d0, d5, d7
24012066:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24012098 <tSimpleLivingString3_initToPool+0x208>
2401206a:	ee20 0b07 	vmul.f64	d0, d0, d7
2401206e:	f001 fc3b 	bl	240138e8 <exp>
24012072:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24012076:	ed84 0a04 	vstr	s0, [r4, #16]
    p->pickupPoint = 0.9f;
2401207a:	4b0c      	ldr	r3, [pc, #48]	; (240120ac <tSimpleLivingString3_initToPool+0x21c>)
2401207c:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->prevDelayLength = p->waveLengthInSamples;
2401207e:	68a3      	ldr	r3, [r4, #8]
24012080:	61a3      	str	r3, [r4, #24]
}
24012082:	ecbd 8b06 	vpop	{d8-d10}
24012086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401208a:	bf00      	nop
2401208c:	f3af 8000 	nop.w
24012090:	33333333 	.word	0x33333333
24012094:	40133333 	.word	0x40133333
24012098:	0a3d70a4 	.word	0x0a3d70a4
2401209c:	c01ba3d7 	.word	0xc01ba3d7
240120a0:	3c23d70a 	.word	0x3c23d70a
240120a4:	4099999a 	.word	0x4099999a
240120a8:	40dd0cb3 	.word	0x40dd0cb3
240120ac:	3f666666 	.word	0x3f666666

240120b0 <tSimpleLivingString3_setDampFreq>:
    p->waveLengthInSamples = waveLength * 0.5f;
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tSimpleLivingString3_setDampFreq(tSimpleLivingString3* const pl, Lfloat dampFreq)
{
240120b0:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
240120b2:	6800      	ldr	r0, [r0, #0]
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
240120b4:	303c      	adds	r0, #60	; 0x3c
240120b6:	f7fc fc59 	bl	2400e96c <tOnePole_setFreq>
}
240120ba:	bd08      	pop	{r3, pc}
240120bc:	0000      	movs	r0, r0
	...

240120c0 <tSimpleLivingString3_setDecay>:

void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
240120c0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
240120c2:	6804      	ldr	r4, [r0, #0]
    p->userDecay = decay;
240120c4:	ed84 0a05 	vstr	s0, [r4, #20]

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
240120c8:	eddf 7a13 	vldr	s15, [pc, #76]	; 24012118 <tSimpleLivingString3_setDecay+0x58>
240120cc:	ee20 7a27 	vmul.f32	s14, s0, s15
240120d0:	ee37 7a27 	vadd.f32	s14, s14, s15
240120d4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 2401211c <tSimpleLivingString3_setDecay+0x5c>
240120d8:	ee27 7a00 	vmul.f32	s14, s14, s0
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
240120dc:	ed94 6a01 	vldr	s12, [r4, #4]
240120e0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
240120e4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
240120e8:	ee84 5b06 	vdiv.f64	d5, d4, d6
240120ec:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240120f0:	ee85 0b07 	vdiv.f64	d0, d5, d7
240120f4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 24012110 <tSimpleLivingString3_setDecay+0x50>
240120f8:	ee20 0b07 	vmul.f64	d0, d0, d7
240120fc:	f001 fbf4 	bl	240138e8 <exp>
24012100:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24012104:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24012108:	bd10      	pop	{r4, pc}
2401210a:	bf00      	nop
2401210c:	f3af 8000 	nop.w
24012110:	52bd3c36 	.word	0x52bd3c36
24012114:	c01ba196 	.word	0xc01ba196
24012118:	3c23d70a 	.word	0x3c23d70a
2401211c:	40dd0cb3 	.word	0x40dd0cb3

24012120 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
24012120:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
24012122:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24012124:	3054      	adds	r0, #84	; 0x54
24012126:	f7fc f8cd 	bl	2400e2c4 <tFeedbackLeveler_setTargetLevel>
}
2401212a:	bd08      	pop	{r3, pc}

2401212c <tSimpleLivingString3_setLevSmoothFactor>:

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
2401212c:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
2401212e:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24012130:	3054      	adds	r0, #84	; 0x54
24012132:	f7fc f893 	bl	2400e25c <tFeedbackLeveler_setFactor>
}
24012136:	bd08      	pop	{r3, pc}

24012138 <tSimpleLivingString3_setLevStrength>:

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
24012138:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
2401213a:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
2401213c:	3054      	adds	r0, #84	; 0x54
2401213e:	f7fc f889 	bl	2400e254 <tFeedbackLeveler_setStrength>
}
24012142:	bd08      	pop	{r3, pc}

24012144 <tSimpleLivingString3_setLevMode>:

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24012144:	b538      	push	{r3, r4, r5, lr}
24012146:	460c      	mov	r4, r1
    _tSimpleLivingString3* p = *pl;
24012148:	6805      	ldr	r5, [r0, #0]
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
2401214a:	f105 0054 	add.w	r0, r5, #84	; 0x54
2401214e:	f7fc f88b 	bl	2400e268 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24012152:	622c      	str	r4, [r5, #32]
}
24012154:	bd38      	pop	{r3, r4, r5, pc}

24012156 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
24012156:	b4f0      	push	{r4, r5, r6, r7}
    _tSimpleLivingString3* p = *pl;
24012158:	6804      	ldr	r4, [r0, #0]
    int length = p->waveLengthInSamples;
2401215a:	edd4 7a02 	vldr	s15, [r4, #8]
2401215e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24012162:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24012166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401216a:	ee67 7aa0 	vmul.f32	s15, s15, s1
2401216e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24012172:	ee17 5a90 	vmov	r5, s15
    if (pluckPoint < 1)
24012176:	2d00      	cmp	r5, #0
24012178:	dd03      	ble.n	24012182 <tSimpleLivingString3_pluck+0x2c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
2401217a:	42a8      	cmp	r0, r5
2401217c:	dc02      	bgt.n	24012184 <tSimpleLivingString3_pluck+0x2e>
    {
    	pluckPoint = length-1;
2401217e:	1e45      	subs	r5, r0, #1
24012180:	e000      	b.n	24012184 <tSimpleLivingString3_pluck+0x2e>
    	pluckPoint = 1;
24012182:	2501      	movs	r5, #1
    }
    int remainder = length-pluckPoint;
24012184:	1b43      	subs	r3, r0, r5
24012186:	ee06 3a10 	vmov	s12, r3
    for (int i = 0; i < length; i++)
2401218a:	2200      	movs	r2, #0
2401218c:	e021      	b.n	240121d2 <tSimpleLivingString3_pluck+0x7c>
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401218e:	ee07 2a90 	vmov	s15, r2
24012192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24012196:	ee07 5a90 	vmov	s15, r5
2401219a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401219e:	ee37 7a67 	vsub.f32	s14, s14, s15
240121a2:	eef8 7ac6 	vcvt.f32.s32	s15, s12
240121a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
240121aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240121ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
240121b2:	ee67 7a80 	vmul.f32	s15, s15, s0
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240121b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
240121b8:	698b      	ldr	r3, [r1, #24]
240121ba:	4413      	add	r3, r2
240121bc:	69ce      	ldr	r6, [r1, #28]
240121be:	fbb3 f7f6 	udiv	r7, r3, r6
240121c2:	fb06 3317 	mls	r3, r6, r7, r3
        p->delayLineU->buff[bufWritePoint] = val;
240121c6:	6889      	ldr	r1, [r1, #8]
240121c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
240121cc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < length; i++)
240121d0:	3201      	adds	r2, #1
240121d2:	4282      	cmp	r2, r0
240121d4:	da0e      	bge.n	240121f4 <tSimpleLivingString3_pluck+0x9e>
        if (i <= pluckPoint)
240121d6:	4295      	cmp	r5, r2
240121d8:	dbd9      	blt.n	2401218e <tSimpleLivingString3_pluck+0x38>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240121da:	ee07 2a90 	vmov	s15, r2
240121de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240121e2:	ee07 5a90 	vmov	s15, r5
240121e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
240121ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
240121ee:	ee67 7a80 	vmul.f32	s15, s15, s0
240121f2:	e7e0      	b.n	240121b6 <tSimpleLivingString3_pluck+0x60>
    }
    for (int i = 0; i < length; i++)
240121f4:	2100      	movs	r1, #0
240121f6:	e019      	b.n	2401222c <tSimpleLivingString3_pluck+0xd6>
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240121f8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
240121fa:	69ab      	ldr	r3, [r5, #24]
240121fc:	440b      	add	r3, r1
240121fe:	69ea      	ldr	r2, [r5, #28]
24012200:	fbb3 f6f2 	udiv	r6, r3, r2
24012204:	fb02 3216 	mls	r2, r2, r6, r3
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24012208:	1a43      	subs	r3, r0, r1
2401220a:	6b66      	ldr	r6, [r4, #52]	; 0x34
2401220c:	69b7      	ldr	r7, [r6, #24]
2401220e:	443b      	add	r3, r7
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24012210:	69f7      	ldr	r7, [r6, #28]
24012212:	fbb3 fcf7 	udiv	ip, r3, r7
24012216:	fb07 331c 	mls	r3, r7, ip, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
2401221a:	68b6      	ldr	r6, [r6, #8]
2401221c:	68ad      	ldr	r5, [r5, #8]
2401221e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24012222:	eb06 0383 	add.w	r3, r6, r3, lsl #2
24012226:	681b      	ldr	r3, [r3, #0]
24012228:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < length; i++)
2401222a:	3101      	adds	r1, #1
2401222c:	4281      	cmp	r1, r0
2401222e:	dbe3      	blt.n	240121f8 <tSimpleLivingString3_pluck+0xa2>
    }
}
24012230:	bcf0      	pop	{r4, r5, r6, r7}
24012232:	4770      	bx	lr

24012234 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24012236:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
2401223a:	6804      	ldr	r4, [r0, #0]

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
2401223c:	f104 0058 	add.w	r0, r4, #88	; 0x58
24012240:	f01c fe52 	bl	2402eee8 <__tExpSmooth_tick_veneer>
24012244:	eeb0 8a40 	vmov.f32	s16, s0
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
24012248:	f104 0734 	add.w	r7, r4, #52	; 0x34
2401224c:	4638      	mov	r0, r7
2401224e:	f7fb fc2d 	bl	2400daac <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24012252:	f104 0638 	add.w	r6, r4, #56	; 0x38
24012256:	eeb0 0a48 	vmov.f32	s0, s16
2401225a:	4630      	mov	r0, r6
2401225c:	f7fb fc26 	bl	2400daac <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
24012260:	2500      	movs	r5, #0
24012262:	e034      	b.n	240122ce <tSimpleLivingString3_tick+0x9a>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24012264:	4638      	mov	r0, r7
24012266:	f7fb fbf0 	bl	2400da4a <tLinearDelay_tickOut>
2401226a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
2401226e:	f7fc fbb8 	bl	2400e9e2 <tOnePole_tick>
24012272:	edd4 7a04 	vldr	s15, [r4, #16]
24012276:	ee20 0a27 	vmul.f32	s0, s0, s15
2401227a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
2401227e:	f104 0054 	add.w	r0, r4, #84	; 0x54
24012282:	f7fb fff5 	bl	2400e270 <tFeedbackLeveler_tick>
24012286:	eef0 0a40 	vmov.f32	s1, s0
2401228a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2401228e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012292:	f01c fe2d 	bl	2402eef0 <__LEAF_clip_veneer>
24012296:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
2401229a:	4630      	mov	r0, r6
2401229c:	f7fb fbd5 	bl	2400da4a <tLinearDelay_tickOut>
240122a0:	eef0 0a40 	vmov.f32	s1, s0
240122a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240122a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240122ac:	f01c fe20 	bl	2402eef0 <__LEAF_clip_veneer>
240122b0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
240122b4:	eeb1 0a40 	vneg.f32	s0, s0
240122b8:	4638      	mov	r0, r7
240122ba:	f7fb fbb1 	bl	2400da20 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
240122be:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
240122c2:	eeb1 0a40 	vneg.f32	s0, s0
240122c6:	4630      	mov	r0, r6
240122c8:	f7fb fbaa 	bl	2400da20 <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
240122cc:	3501      	adds	r5, #1
240122ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240122d0:	42ab      	cmp	r3, r5
240122d2:	dcc7      	bgt.n	24012264 <tSimpleLivingString3_tick+0x30>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
240122d4:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
240122d8:	ee27 6a08 	vmul.f32	s12, s14, s16
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
240122dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240122e0:	ee76 7ac7 	vsub.f32	s15, s13, s14
240122e4:	ee67 7a88 	vmul.f32	s15, s15, s16
    int32_t whichPoint = ((int32_t)roundf(point));
240122e8:	fef8 5a46 	vrinta.f32	s11, s12
240122ec:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    Lfloat LfloatPart = point - whichPoint;
240122f0:	eeb8 7ae5 	vcvt.f32.s32	s14, s11
240122f4:	ee36 7a47 	vsub.f32	s14, s12, s14

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
240122f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
240122fa:	6983      	ldr	r3, [r0, #24]
240122fc:	ee15 2a90 	vmov	r2, s11
24012300:	4413      	add	r3, r2
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24012302:	69c1      	ldr	r1, [r0, #28]
24012304:	fb93 f2f1 	sdiv	r2, r3, r1
24012308:	fb01 3312 	mls	r3, r1, r2, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
2401230c:	1c5a      	adds	r2, r3, #1
2401230e:	fb92 f5f1 	sdiv	r5, r2, r1
24012312:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24012316:	6882      	ldr	r2, [r0, #8]
24012318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401231c:	ed93 0a00 	vldr	s0, [r3]
24012320:	ee36 6ac7 	vsub.f32	s12, s13, s14
24012324:	ee20 0a06 	vmul.f32	s0, s0, s12
24012328:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401232c:	ed92 6a00 	vldr	s12, [r2]
24012330:	ee26 7a07 	vmul.f32	s14, s12, s14
24012334:	ee30 0a07 	vadd.f32	s0, s0, s14


    whichPoint = (int32_t)roundf(reversePoint);
24012338:	feb8 7a67 	vrinta.f32	s14, s15
2401233c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    LfloatPart = reversePoint - whichPoint;
24012340:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
24012344:	ee77 7ac6 	vsub.f32	s15, s15, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24012348:	6ba0      	ldr	r0, [r4, #56]	; 0x38
2401234a:	6983      	ldr	r3, [r0, #24]
2401234c:	ee17 2a10 	vmov	r2, s14
24012350:	4413      	add	r3, r2
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24012352:	69c1      	ldr	r1, [r0, #28]
24012354:	fb93 f2f1 	sdiv	r2, r3, r1
24012358:	fb01 3312 	mls	r3, r1, r2, r3
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
2401235c:	1c5a      	adds	r2, r3, #1
2401235e:	fb92 f5f1 	sdiv	r5, r2, r1
24012362:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24012366:	6882      	ldr	r2, [r0, #8]
24012368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401236c:	ed93 7a00 	vldr	s14, [r3]
24012370:	ee76 6ae7 	vsub.f32	s13, s13, s15
24012374:	ee27 7a26 	vmul.f32	s14, s14, s13
24012378:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401237c:	edd2 6a00 	vldr	s13, [r2]
24012380:	ee66 7aa7 	vmul.f32	s15, s13, s15
24012384:	ee77 7a27 	vadd.f32	s15, s14, s15

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24012388:	ee30 0a27 	vadd.f32	s0, s0, s15
2401238c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012390:	ee20 0a27 	vmul.f32	s0, s0, s15
24012394:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24012398:	68a3      	ldr	r3, [r4, #8]
2401239a:	61a3      	str	r3, [r4, #24]
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
2401239c:	ecbd 8b02 	vpop	{d8}
240123a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

240123a2 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
240123a2:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
240123a4:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
240123a8:	4770      	bx	lr

240123aa <tLivingString2_free>:
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
    p->levMode=levMode;
}

void    tLivingString2_free (tLivingString2* const pl)
{
240123aa:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
240123ac:	6804      	ldr	r4, [r0, #0]

    tExpSmooth_free(&p->wlSmooth);
240123ae:	f104 005c 	add.w	r0, r4, #92	; 0x5c
240123b2:	f7fc face 	bl	2400e952 <tExpSmooth_free>
    tExpSmooth_free(&p->ppSmooth);
240123b6:	f104 0060 	add.w	r0, r4, #96	; 0x60
240123ba:	f7fc faca 	bl	2400e952 <tExpSmooth_free>
    tExpSmooth_free(&p->prpSmooth);
240123be:	f104 0064 	add.w	r0, r4, #100	; 0x64
240123c2:	f7fc fac6 	bl	2400e952 <tExpSmooth_free>
    tExpSmooth_free(&p->puSmooth);
240123c6:	f104 0068 	add.w	r0, r4, #104	; 0x68
240123ca:	f7fc fac2 	bl	2400e952 <tExpSmooth_free>
    tHermiteDelay_free(&p->delLF);
240123ce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
240123d2:	f7fb fbe3 	bl	2400db9c <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUF);
240123d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
240123da:	f7fb fbdf 	bl	2400db9c <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUB);
240123de:	f104 0034 	add.w	r0, r4, #52	; 0x34
240123e2:	f7fb fbdb 	bl	2400db9c <tHermiteDelay_free>
    tHermiteDelay_free(&p->delLB);
240123e6:	f104 0038 	add.w	r0, r4, #56	; 0x38
240123ea:	f7fb fbd7 	bl	2400db9c <tHermiteDelay_free>
    tTwoZero_free(&p->bridgeFilter);
240123ee:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240123f2:	f7fc fb48 	bl	2400ea86 <tTwoZero_free>
    tTwoZero_free(&p->nutFilter);
240123f6:	f104 0040 	add.w	r0, r4, #64	; 0x40
240123fa:	f7fc fb44 	bl	2400ea86 <tTwoZero_free>
    tTwoZero_free(&p->prepFilterU);
240123fe:	f104 0044 	add.w	r0, r4, #68	; 0x44
24012402:	f7fc fb40 	bl	2400ea86 <tTwoZero_free>
    tTwoZero_free(&p->prepFilterL);
24012406:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401240a:	f7fc fb3c 	bl	2400ea86 <tTwoZero_free>
    tHighpass_free(&p->DCblockerU);
2401240e:	f104 0050 	add.w	r0, r4, #80	; 0x50
24012412:	f7fc fcf0 	bl	2400edf6 <tHighpass_free>
    tHighpass_free(&p->DCblockerL);
24012416:	f104 004c 	add.w	r0, r4, #76	; 0x4c
2401241a:	f7fc fcec 	bl	2400edf6 <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLevU);
2401241e:	f104 0054 	add.w	r0, r4, #84	; 0x54
24012422:	f7fb ff0c 	bl	2400e23e <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLevL);
24012426:	f104 0058 	add.w	r0, r4, #88	; 0x58
2401242a:	f7fb ff08 	bl	2400e23e <tFeedbackLeveler_free>

    mpool_free((char*)p, p->mempool);
2401242e:	6821      	ldr	r1, [r4, #0]
24012430:	4620      	mov	r0, r4
24012432:	f7fe faa2 	bl	2401097a <mpool_free>
}
24012436:	bd10      	pop	{r4, pc}

24012438 <tLivingString2_setFreq>:

void     tLivingString2_setFreq(tLivingString2* const pl, Lfloat freq)
{    // NOTE: It is faster to set wavelength in samples directly
24012438:	b508      	push	{r3, lr}
    _tLivingString2* p = *pl;
2401243a:	6800      	ldr	r0, [r0, #0]
    
    if (freq<20.f) freq=20.f;
2401243c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
24012440:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012448:	d409      	bmi.n	2401245e <tLivingString2_setFreq+0x26>
    else if (freq>10000.f) freq=10000.f;
2401244a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24012488 <tLivingString2_setFreq+0x50>
2401244e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012456:	dd04      	ble.n	24012462 <tLivingString2_setFreq+0x2a>
24012458:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24012488 <tLivingString2_setFreq+0x50>
2401245c:	e001      	b.n	24012462 <tLivingString2_setFreq+0x2a>
    if (freq<20.f) freq=20.f;
2401245e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
    freq = freq*2;
24012462:	ee30 0a00 	vadd.f32	s0, s0, s0
    p->freq = freq;
24012466:	ed80 0a01 	vstr	s0, [r0, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401246a:	ed90 7a1b 	vldr	s14, [r0, #108]	; 0x6c
2401246e:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012472:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24012476:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401247a:	ed80 0a02 	vstr	s0, [r0, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401247e:	305c      	adds	r0, #92	; 0x5c
24012480:	f01c fd46 	bl	2402ef10 <__tExpSmooth_setDest_veneer>
}
24012484:	bd08      	pop	{r3, pc}
24012486:	bf00      	nop
24012488:	461c4000 	.word	0x461c4000

2401248c <tLivingString2_setPickPos>:
    p->freq = p->sampleRate / waveLength;
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, Lfloat pickPos)
{    // between 0 and 1
2401248c:	b508      	push	{r3, lr}
    _tLivingString2* p = *pl;
2401248e:	6800      	ldr	r0, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
24012490:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012498:	d409      	bmi.n	240124ae <tLivingString2_setPickPos+0x22>
    else if (pickPos>1.f) pickPos=1.f;
2401249a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401249e:	eeb4 0ae7 	vcmpe.f32	s0, s15
240124a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240124a6:	dd04      	ble.n	240124b2 <tLivingString2_setPickPos+0x26>
240124a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240124ac:	e001      	b.n	240124b2 <tLivingString2_setPickPos+0x26>
    if (pickPos<0.f) pickPos=0.f;
240124ae:	ed9f 0a04 	vldr	s0, [pc, #16]	; 240124c0 <tLivingString2_setPickPos+0x34>
    p->pickPos = pickPos;
240124b2:	ed80 0a03 	vstr	s0, [r0, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
240124b6:	3060      	adds	r0, #96	; 0x60
240124b8:	f01c fd2a 	bl	2402ef10 <__tExpSmooth_setDest_veneer>
}
240124bc:	bd08      	pop	{r3, pc}
240124be:	bf00      	nop
240124c0:	00000000 	.word	0x00000000

240124c4 <tLivingString2_setPrepPos>:

void     tLivingString2_setPrepPos(tLivingString2* const pl, Lfloat prepPos)
{    // between 0 and 1
240124c4:	b508      	push	{r3, lr}
    _tLivingString2* p = *pl;
240124c6:	6800      	ldr	r0, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
240124c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240124cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240124d0:	d409      	bmi.n	240124e6 <tLivingString2_setPrepPos+0x22>
    else if (prepPos>1.f) prepPos=1.f;
240124d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240124d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
240124da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240124de:	dd04      	ble.n	240124ea <tLivingString2_setPrepPos+0x26>
240124e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240124e4:	e001      	b.n	240124ea <tLivingString2_setPrepPos+0x26>
    if (prepPos<0.f) prepPos=0.f;
240124e6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 240124f8 <tLivingString2_setPrepPos+0x34>
    p->prepPos = prepPos;
240124ea:	ed80 0a04 	vstr	s0, [r0, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
240124ee:	3064      	adds	r0, #100	; 0x64
240124f0:	f01c fd0e 	bl	2402ef10 <__tExpSmooth_setDest_veneer>
}
240124f4:	bd08      	pop	{r3, pc}
240124f6:	bf00      	nop
240124f8:	00000000 	.word	0x00000000

240124fc <tLivingString2_setPickupPos>:

void     tLivingString2_setPickupPos(tLivingString2* const pl, Lfloat pickupPos)
{    // between 0 and 1
240124fc:	b508      	push	{r3, lr}
    _tLivingString2* p = *pl;
240124fe:	6800      	ldr	r0, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
24012500:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012508:	d409      	bmi.n	2401251e <tLivingString2_setPickupPos+0x22>
    else if (pickupPos>1.f) pickupPos=1.f;
2401250a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401250e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012516:	dd04      	ble.n	24012522 <tLivingString2_setPickupPos+0x26>
24012518:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401251c:	e001      	b.n	24012522 <tLivingString2_setPickupPos+0x26>
    if (pickupPos<0.f) pickupPos=0.f;
2401251e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 24012530 <tLivingString2_setPickupPos+0x34>
    p->pickupPos = pickupPos;
24012522:	ed80 0a05 	vstr	s0, [r0, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24012526:	3068      	adds	r0, #104	; 0x68
24012528:	f01c fcf2 	bl	2402ef10 <__tExpSmooth_setDest_veneer>
}
2401252c:	bd08      	pop	{r3, pc}
2401252e:	bf00      	nop
24012530:	00000000 	.word	0x00000000

24012534 <tLivingString2_setPrepIndex>:

void     tLivingString2_setPrepIndex(tLivingString2* const pl, Lfloat prepIndex)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24012534:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
24012536:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401253e:	d409      	bmi.n	24012554 <tLivingString2_setPrepIndex+0x20>
    else if (prepIndex>1.f) prepIndex=1.f;
24012540:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012544:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401254c:	dd04      	ble.n	24012558 <tLivingString2_setPrepIndex+0x24>
2401254e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24012552:	e001      	b.n	24012558 <tLivingString2_setPrepIndex+0x24>
    if (prepIndex<0.f) prepIndex=0.f;
24012554:	ed9f 0a02 	vldr	s0, [pc, #8]	; 24012560 <tLivingString2_setPrepIndex+0x2c>
    p->prepIndex = prepIndex;
24012558:	ed83 0a06 	vstr	s0, [r3, #24]
}
2401255c:	4770      	bx	lr
2401255e:	bf00      	nop
24012560:	00000000 	.word	0x00000000

24012564 <tLivingString2_setBrightness>:

void     tLivingString2_setBrightness(tLivingString2* const pl, Lfloat brightness)
{
24012564:	b510      	push	{r4, lr}
24012566:	ed2d 8b02 	vpush	{d8}
    _tLivingString2* p = *pl;
2401256a:	6804      	ldr	r4, [r0, #0]
    Lfloat h0=(1.0 + brightness) * 0.5f;
2401256c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24012570:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24012574:	ee30 6b07 	vadd.f64	d6, d0, d7
24012578:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
2401257c:	ee26 6b05 	vmul.f64	d6, d6, d5
24012580:	eef7 8bc6 	vcvt.f32.f64	s17, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24012584:	ee37 7b40 	vsub.f64	d7, d7, d0
24012588:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250
2401258c:	ee27 7b00 	vmul.f64	d7, d7, d0
24012590:	eeb7 8bc7 	vcvt.f32.f64	s16, d7

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24012594:	eeb0 1a48 	vmov.f32	s2, s16
24012598:	eef0 0a68 	vmov.f32	s1, s17
2401259c:	eeb0 0a48 	vmov.f32	s0, s16
240125a0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240125a4:	f7fc fa93 	bl	2400eace <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
240125a8:	eeb0 1a48 	vmov.f32	s2, s16
240125ac:	eef0 0a68 	vmov.f32	s1, s17
240125b0:	eeb0 0a48 	vmov.f32	s0, s16
240125b4:	f104 0040 	add.w	r0, r4, #64	; 0x40
240125b8:	f7fc fa89 	bl	2400eace <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
240125bc:	eeb0 1a48 	vmov.f32	s2, s16
240125c0:	eef0 0a68 	vmov.f32	s1, s17
240125c4:	eeb0 0a48 	vmov.f32	s0, s16
240125c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
240125cc:	f7fc fa7f 	bl	2400eace <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
240125d0:	eeb0 1a48 	vmov.f32	s2, s16
240125d4:	eef0 0a68 	vmov.f32	s1, s17
240125d8:	eeb0 0a48 	vmov.f32	s0, s16
240125dc:	f104 0048 	add.w	r0, r4, #72	; 0x48
240125e0:	f7fc fa75 	bl	2400eace <tTwoZero_setCoefficients>
}
240125e4:	ecbd 8b02 	vpop	{d8}
240125e8:	bd10      	pop	{r4, pc}
	...

240125ec <tLivingString2_initToPool>:
{
240125ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
240125f0:	ed2d 8b0a 	vpush	{d8-d12}
240125f4:	4606      	mov	r6, r0
240125f6:	eef0 8a40 	vmov.f32	s17, s0
240125fa:	eeb0 ca60 	vmov.f32	s24, s1
240125fe:	eeb0 8a41 	vmov.f32	s16, s2
24012602:	eef0 ba61 	vmov.f32	s23, s3
24012606:	eef0 aa42 	vmov.f32	s21, s4
2401260a:	eeb0 ba62 	vmov.f32	s22, s5
2401260e:	eef0 ca43 	vmov.f32	s25, s6
24012612:	eeb0 9a63 	vmov.f32	s18, s7
24012616:	eef0 9a44 	vmov.f32	s19, s8
2401261a:	eeb0 aa64 	vmov.f32	s20, s9
2401261e:	460f      	mov	r7, r1
24012620:	4615      	mov	r5, r2
    _tMempool* m = *mp;
24012622:	f8d2 8000 	ldr.w	r8, [r2]
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24012626:	4641      	mov	r1, r8
24012628:	2070      	movs	r0, #112	; 0x70
2401262a:	f7fe f8ba 	bl	240107a2 <mpool_alloc>
2401262e:	4604      	mov	r4, r0
24012630:	6030      	str	r0, [r6, #0]
    p->mempool = m;
24012632:	f8c0 8000 	str.w	r8, [r0]
    LEAF* leaf = p->mempool->leaf;
24012636:	f8d8 3004 	ldr.w	r3, [r8, #4]
    p->sampleRate = leaf->sampleRate;
2401263a:	ed93 0a00 	vldr	s0, [r3]
2401263e:	ed80 0a1b 	vstr	s0, [r0, #108]	; 0x6c
    p->curr=0.0f;
24012642:	2300      	movs	r3, #0
24012644:	6283      	str	r3, [r0, #40]	; 0x28
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24012646:	4629      	mov	r1, r5
24012648:	eddf 0a5c 	vldr	s1, [pc, #368]	; 240127bc <tLivingString2_initToPool+0x1d0>
2401264c:	ee80 0a28 	vdiv.f32	s0, s0, s17
24012650:	305c      	adds	r0, #92	; 0x5c
24012652:	f7fc f945 	bl	2400e8e0 <tExpSmooth_initToPool>
    tLivingString2_setFreq(pl, freq);
24012656:	eeb0 0a68 	vmov.f32	s0, s17
2401265a:	4630      	mov	r0, r6
2401265c:	f7ff feec 	bl	24012438 <tLivingString2_setFreq>
    p->freq = freq;
24012660:	edc4 8a01 	vstr	s17, [r4, #4]
    p->prepPos = prepPos;
24012664:	ed84 8a04 	vstr	s16, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24012668:	eddf 8a55 	vldr	s17, [pc, #340]	; 240127c0 <tLivingString2_initToPool+0x1d4>
2401266c:	4629      	mov	r1, r5
2401266e:	eef0 0a68 	vmov.f32	s1, s17
24012672:	eeb0 0a4c 	vmov.f32	s0, s24
24012676:	f104 0060 	add.w	r0, r4, #96	; 0x60
2401267a:	f7fc f931 	bl	2400e8e0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
2401267e:	4629      	mov	r1, r5
24012680:	eef0 0a68 	vmov.f32	s1, s17
24012684:	eeb0 0a48 	vmov.f32	s0, s16
24012688:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401268c:	f7fc f928 	bl	2400e8e0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
24012690:	4629      	mov	r1, r5
24012692:	eef0 0a68 	vmov.f32	s1, s17
24012696:	eeb0 0a6b 	vmov.f32	s0, s23
2401269a:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401269e:	f7fc f91f 	bl	2400e8e0 <tExpSmooth_initToPool>
    tLivingString2_setPickPos(pl, pickPos);
240126a2:	eeb0 0a4c 	vmov.f32	s0, s24
240126a6:	4630      	mov	r0, r6
240126a8:	f7ff fef0 	bl	2401248c <tLivingString2_setPickPos>
    tLivingString2_setPrepPos(pl, prepPos);
240126ac:	eeb0 0a48 	vmov.f32	s0, s16
240126b0:	4630      	mov	r0, r6
240126b2:	f7ff ff07 	bl	240124c4 <tLivingString2_setPrepPos>
    p->prepIndex = prepIndex;
240126b6:	edc4 aa06 	vstr	s21, [r4, #24]
    p->pickupPos = pickupPos;
240126ba:	edc4 ba05 	vstr	s23, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
240126be:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
240126c2:	462a      	mov	r2, r5
240126c4:	f44f 6116 	mov.w	r1, #2400	; 0x960
240126c8:	ed94 0a02 	vldr	s0, [r4, #8]
240126cc:	4658      	mov	r0, fp
240126ce:	f7fb fade 	bl	2400dc8e <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
240126d2:	f104 0a30 	add.w	sl, r4, #48	; 0x30
240126d6:	462a      	mov	r2, r5
240126d8:	f44f 6116 	mov.w	r1, #2400	; 0x960
240126dc:	ed94 0a02 	vldr	s0, [r4, #8]
240126e0:	4650      	mov	r0, sl
240126e2:	f7fb fad4 	bl	2400dc8e <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
240126e6:	f104 0934 	add.w	r9, r4, #52	; 0x34
240126ea:	462a      	mov	r2, r5
240126ec:	f44f 6116 	mov.w	r1, #2400	; 0x960
240126f0:	ed94 0a02 	vldr	s0, [r4, #8]
240126f4:	4648      	mov	r0, r9
240126f6:	f7fb faca 	bl	2400dc8e <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
240126fa:	f104 0838 	add.w	r8, r4, #56	; 0x38
240126fe:	462a      	mov	r2, r5
24012700:	f44f 6116 	mov.w	r1, #2400	; 0x960
24012704:	ed94 0a02 	vldr	s0, [r4, #8]
24012708:	4640      	mov	r0, r8
2401270a:	f7fb fac0 	bl	2400dc8e <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
2401270e:	4658      	mov	r0, fp
24012710:	f7fb fa4f 	bl	2400dbb2 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
24012714:	4650      	mov	r0, sl
24012716:	f7fb fa4c 	bl	2400dbb2 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
2401271a:	4648      	mov	r0, r9
2401271c:	f7fb fa49 	bl	2400dbb2 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
24012720:	4640      	mov	r0, r8
24012722:	f7fb fa46 	bl	2400dbb2 <tHermiteDelay_clear>
    p->brightness = brightness;
24012726:	ed84 ba09 	vstr	s22, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
2401272a:	4629      	mov	r1, r5
2401272c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24012730:	f7fc f996 	bl	2400ea60 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
24012734:	4629      	mov	r1, r5
24012736:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401273a:	f7fc f991 	bl	2400ea60 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
2401273e:	4629      	mov	r1, r5
24012740:	f104 0044 	add.w	r0, r4, #68	; 0x44
24012744:	f7fc f98c 	bl	2400ea60 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
24012748:	4629      	mov	r1, r5
2401274a:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401274e:	f7fc f987 	bl	2400ea60 <tTwoZero_initToPool>
    tLivingString2_setBrightness(pl, brightness);
24012752:	eeb0 0a4b 	vmov.f32	s0, s22
24012756:	4630      	mov	r0, r6
24012758:	f7ff ff04 	bl	24012564 <tLivingString2_setBrightness>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
2401275c:	4629      	mov	r1, r5
2401275e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24012762:	f104 0050 	add.w	r0, r4, #80	; 0x50
24012766:	f7fc fb1f 	bl	2400eda8 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
2401276a:	4629      	mov	r1, r5
2401276c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24012770:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24012774:	f7fc fb18 	bl	2400eda8 <tHighpass_initToPool>
    p->decay=decay;
24012778:	edc4 ca07 	vstr	s25, [r4, #28]
    p->prepIndex = prepIndex;
2401277c:	edc4 aa06 	vstr	s21, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
24012780:	462a      	mov	r2, r5
24012782:	4639      	mov	r1, r7
24012784:	eeb0 1a4a 	vmov.f32	s2, s20
24012788:	eef0 0a69 	vmov.f32	s1, s19
2401278c:	eeb0 0a49 	vmov.f32	s0, s18
24012790:	f104 0054 	add.w	r0, r4, #84	; 0x54
24012794:	f7fb fd2b 	bl	2400e1ee <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
24012798:	462a      	mov	r2, r5
2401279a:	4639      	mov	r1, r7
2401279c:	eeb0 1a4a 	vmov.f32	s2, s20
240127a0:	eef0 0a69 	vmov.f32	s1, s19
240127a4:	eeb0 0a49 	vmov.f32	s0, s18
240127a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
240127ac:	f7fb fd1f 	bl	2400e1ee <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
240127b0:	6227      	str	r7, [r4, #32]
}
240127b2:	ecbd 8b0a 	vpop	{d8-d12}
240127b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
240127ba:	bf00      	nop
240127bc:	3dcccccd 	.word	0x3dcccccd
240127c0:	3c23d70a 	.word	0x3c23d70a

240127c4 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, Lfloat decay)
{
240127c4:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
240127c6:	6804      	ldr	r4, [r0, #0]
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
240127c8:	edd4 0a01 	vldr	s1, [r4, #4]
240127cc:	ee60 0a80 	vmul.f32	s1, s1, s0
240127d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240127d4:	eec7 0aa0 	vdiv.f32	s1, s15, s1
240127d8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240127e8 <tLivingString2_setDecay+0x24>
240127dc:	f001 fbc0 	bl	24013f60 <powf>
240127e0:	ed84 0a07 	vstr	s0, [r4, #28]
}
240127e4:	bd10      	pop	{r4, pc}
240127e6:	bf00      	nop
240127e8:	3a83126f 	.word	0x3a83126f

240127ec <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, Lfloat targetLev)
{
240127ec:	b510      	push	{r4, lr}
240127ee:	ed2d 8b02 	vpush	{d8}
240127f2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
240127f6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
240127f8:	f104 0054 	add.w	r0, r4, #84	; 0x54
240127fc:	f7fb fd62 	bl	2400e2c4 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24012800:	eeb0 0a48 	vmov.f32	s0, s16
24012804:	f104 0058 	add.w	r0, r4, #88	; 0x58
24012808:	f7fb fd5c 	bl	2400e2c4 <tFeedbackLeveler_setTargetLevel>
}
2401280c:	ecbd 8b02 	vpop	{d8}
24012810:	bd10      	pop	{r4, pc}

24012812 <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, Lfloat levSmoothFactor)
{
24012812:	b510      	push	{r4, lr}
24012814:	ed2d 8b02 	vpush	{d8}
24012818:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401281c:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
2401281e:	f104 0054 	add.w	r0, r4, #84	; 0x54
24012822:	f7fb fd1b 	bl	2400e25c <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24012826:	eeb0 0a48 	vmov.f32	s0, s16
2401282a:	f104 0058 	add.w	r0, r4, #88	; 0x58
2401282e:	f7fb fd15 	bl	2400e25c <tFeedbackLeveler_setFactor>
}
24012832:	ecbd 8b02 	vpop	{d8}
24012836:	bd10      	pop	{r4, pc}

24012838 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, Lfloat levStrength)
{
24012838:	b510      	push	{r4, lr}
2401283a:	ed2d 8b02 	vpush	{d8}
2401283e:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24012842:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
24012844:	f104 0054 	add.w	r0, r4, #84	; 0x54
24012848:	f7fb fd04 	bl	2400e254 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
2401284c:	eeb0 0a48 	vmov.f32	s0, s16
24012850:	f104 0058 	add.w	r0, r4, #88	; 0x58
24012854:	f7fb fcfe 	bl	2400e254 <tFeedbackLeveler_setStrength>
}
24012858:	ecbd 8b02 	vpop	{d8}
2401285c:	bd10      	pop	{r4, pc}

2401285e <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
2401285e:	b538      	push	{r3, r4, r5, lr}
24012860:	460c      	mov	r4, r1
    _tLivingString2* p = *pl;
24012862:	6805      	ldr	r5, [r0, #0]
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
24012864:	f105 0054 	add.w	r0, r5, #84	; 0x54
24012868:	f7fb fcfe 	bl	2400e268 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
2401286c:	4621      	mov	r1, r4
2401286e:	f105 0058 	add.w	r0, r5, #88	; 0x58
24012872:	f7fb fcf9 	bl	2400e268 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24012876:	622c      	str	r4, [r5, #32]
}
24012878:	bd38      	pop	{r3, r4, r5, pc}
	...

2401287c <tLivingString2_tick>:

Lfloat   tLivingString2_tick(tLivingString2* const pl, Lfloat input)
{
2401287c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24012880:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
24012884:	6804      	ldr	r4, [r0, #0]

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
24012886:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401288a:	ee60 aa27 	vmul.f32	s21, s0, s15
    // from prepPos upwards=forwards
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
2401288e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
24012892:	f01c fb29 	bl	2402eee8 <__tExpSmooth_tick_veneer>
24012896:	eeb0 9a40 	vmov.f32	s18, s0

    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
2401289a:	f104 0060 	add.w	r0, r4, #96	; 0x60
2401289e:	f01c fb23 	bl	2402eee8 <__tExpSmooth_tick_veneer>
240128a2:	eeb0 8a40 	vmov.f32	s16, s0

    //Lfloat pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
240128a6:	f104 0064 	add.w	r0, r4, #100	; 0x64
240128aa:	f01c fb1d 	bl	2402eee8 <__tExpSmooth_tick_veneer>
240128ae:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat lowLen=prepP*wLen;
240128b2:	ee29 aa00 	vmul.f32	s20, s18, s0
    Lfloat upLen=(1.0f-prepP)*wLen;
240128b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
240128ba:	ee78 8ac0 	vsub.f32	s17, s17, s0
240128be:	ee68 8a89 	vmul.f32	s17, s17, s18
    uint32_t pickPInt;

    if (pickP > prepP)
240128c2:	eeb4 8ac0 	vcmpe.f32	s16, s0
240128c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240128ca:	f340 816c 	ble.w	24012ba6 <tLivingString2_tick+0x32a>
    {
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
240128ce:	ee29 8a08 	vmul.f32	s16, s18, s16
240128d2:	ee38 8a4a 	vsub.f32	s16, s16, s20
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
240128d6:	eebc cac8 	vcvt.u32.f32	s24, s16
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
240128da:	eeb8 ba4c 	vcvt.f32.u32	s22, s24
240128de:	ee38 8a4b 	vsub.f32	s16, s16, s22

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
240128e2:	f104 0530 	add.w	r5, r4, #48	; 0x30
240128e6:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
240128ea:	ee7c bac8 	vsub.f32	s23, s25, s16
240128ee:	ee6b baaa 	vmul.f32	s23, s23, s21
240128f2:	ee1c 1a10 	vmov	r1, s24
240128f6:	eeb0 0a6b 	vmov.f32	s0, s23
240128fa:	4628      	mov	r0, r5
240128fc:	f7fb fa23 	bl	2400dd46 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
24012900:	ee2a 8a88 	vmul.f32	s16, s21, s16
24012904:	ee1c 1a10 	vmov	r1, s24
24012908:	3101      	adds	r1, #1
2401290a:	eeb0 0a48 	vmov.f32	s0, s16
2401290e:	4628      	mov	r0, r5
24012910:	f7fb fa19 	bl	2400dd46 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24012914:	f104 0534 	add.w	r5, r4, #52	; 0x34
24012918:	ee78 aacb 	vsub.f32	s21, s17, s22
2401291c:	eefc 7aea 	vcvt.u32.f32	s15, s21
24012920:	ee17 1a90 	vmov	r1, s15
24012924:	eeb0 0a6b 	vmov.f32	s0, s23
24012928:	4628      	mov	r0, r5
2401292a:	f7fb fa0c 	bl	2400dd46 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPLfloat, (uint32_t) (upLen - pickPInt - 1));
2401292e:	ee7a aaec 	vsub.f32	s21, s21, s25
24012932:	eefc 7aea 	vcvt.u32.f32	s15, s21
24012936:	ee17 1a90 	vmov	r1, s15
2401293a:	eeb0 0a48 	vmov.f32	s0, s16
2401293e:	4628      	mov	r0, r5
24012940:	f7fb fa01 	bl	2400dd46 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
24012944:	f104 062c 	add.w	r6, r4, #44	; 0x2c
24012948:	4630      	mov	r0, r6
2401294a:	f7fb f94c 	bl	2400dbe6 <tHermiteDelay_tickOut>
2401294e:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
24012952:	f104 0830 	add.w	r8, r4, #48	; 0x30
24012956:	4640      	mov	r0, r8
24012958:	f7fb f945 	bl	2400dbe6 <tHermiteDelay_tickOut>
2401295c:	eef0 ba40 	vmov.f32	s23, s0
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
24012960:	f104 0734 	add.w	r7, r4, #52	; 0x34
24012964:	4638      	mov	r0, r7
24012966:	f7fb f93e 	bl	2400dbe6 <tHermiteDelay_tickOut>
2401296a:	eef0 aa40 	vmov.f32	s21, s0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
2401296e:	f104 0538 	add.w	r5, r4, #56	; 0x38
24012972:	4628      	mov	r0, r5
24012974:	f7fb f937 	bl	2400dbe6 <tHermiteDelay_tickOut>
24012978:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401297c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012980:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012984:	f01c fab4 	bl	2402eef0 <__LEAF_clip_veneer>
24012988:	eeb0 ba40 	vmov.f32	s22, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
2401298c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012990:	eef0 0a6a 	vmov.f32	s1, s21
24012994:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012998:	f01c faaa 	bl	2402eef0 <__LEAF_clip_veneer>
2401299c:	eef0 aa40 	vmov.f32	s21, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
240129a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240129a4:	eef0 0a6b 	vmov.f32	s1, s23
240129a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240129ac:	f01c faa0 	bl	2402eef0 <__LEAF_clip_veneer>
240129b0:	eef0 ba40 	vmov.f32	s23, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
240129b4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240129b8:	eef0 0a48 	vmov.f32	s1, s16
240129bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240129c0:	f01c fa96 	bl	2402eef0 <__LEAF_clip_veneer>
240129c4:	eeb0 8a40 	vmov.f32	s16, s0

    // into upper half of string, from bridge, going backwards
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240129c8:	f104 0954 	add.w	r9, r4, #84	; 0x54
240129cc:	6a23      	ldr	r3, [r4, #32]
240129ce:	2b00      	cmp	r3, #0
240129d0:	f040 8123 	bne.w	24012c1a <tLivingString2_tick+0x39e>
240129d4:	ed94 ca07 	vldr	s24, [r4, #28]
240129d8:	eeb0 0a6b 	vmov.f32	s0, s23
240129dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240129e0:	f7fc f857 	bl	2400ea92 <tTwoZero_tick>
240129e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
240129e8:	f7fc fa19 	bl	2400ee1e <tHighpass_tick>
240129ec:	ee20 0a0c 	vmul.f32	s0, s0, s24
240129f0:	4648      	mov	r0, r9
240129f2:	f7fb fc3d 	bl	2400e270 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
240129f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240129fa:	eef1 0a40 	vneg.f32	s1, s0
240129fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012a02:	f01c fa75 	bl	2402eef0 <__LEAF_clip_veneer>
24012a06:	eef0 ba40 	vmov.f32	s23, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24012a0a:	4638      	mov	r0, r7
24012a0c:	f7fb f8de 	bl	2400dbcc <tHermiteDelay_tickIn>
    // into lower half of string, from prepPoint, going backwards
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
24012a10:	eeb0 0a48 	vmov.f32	s0, s16
24012a14:	f104 0048 	add.w	r0, r4, #72	; 0x48
24012a18:	f7fc f83b 	bl	2400ea92 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
24012a1c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012a20:	eef1 0a40 	vneg.f32	s1, s0
24012a24:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012a28:	f01c fa62 	bl	2402eef0 <__LEAF_clip_veneer>
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24012a2c:	ed94 7a06 	vldr	s14, [r4, #24]
24012a30:	ee67 0a00 	vmul.f32	s1, s14, s0
24012a34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012a38:	ee31 7a47 	vsub.f32	s14, s2, s14
24012a3c:	ee27 7a2a 	vmul.f32	s14, s14, s21
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
24012a40:	ee70 0a87 	vadd.f32	s1, s1, s14
24012a44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012a48:	f01c fa52 	bl	2402eef0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
24012a4c:	4628      	mov	r0, r5
24012a4e:	f7fb f8bd 	bl	2400dbcc <tHermiteDelay_tickIn>
    // into lower half of string, from nut
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24012a52:	f104 0958 	add.w	r9, r4, #88	; 0x58
24012a56:	6a23      	ldr	r3, [r4, #32]
24012a58:	2b00      	cmp	r3, #0
24012a5a:	f040 80e1 	bne.w	24012c20 <tLivingString2_tick+0x3a4>
24012a5e:	ed94 ca07 	vldr	s24, [r4, #28]
24012a62:	eeb0 0a4b 	vmov.f32	s0, s22
24012a66:	f104 0040 	add.w	r0, r4, #64	; 0x40
24012a6a:	f7fc f812 	bl	2400ea92 <tTwoZero_tick>
24012a6e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24012a72:	f7fc f9d4 	bl	2400ee1e <tHighpass_tick>
24012a76:	ee20 0a0c 	vmul.f32	s0, s0, s24
24012a7a:	4648      	mov	r0, r9
24012a7c:	f7fb fbf8 	bl	2400e270 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
24012a80:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012a84:	eef1 0a40 	vneg.f32	s1, s0
24012a88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012a8c:	f01c fa30 	bl	2402eef0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
24012a90:	4630      	mov	r0, r6
24012a92:	f7fb f89b 	bl	2400dbcc <tHermiteDelay_tickIn>
    // into upper half of string, from prepPoint, going forwards/upwards
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
24012a96:	eeb0 0a6a 	vmov.f32	s0, s21
24012a9a:	f104 0044 	add.w	r0, r4, #68	; 0x44
24012a9e:	f7fb fff8 	bl	2400ea92 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
24012aa2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012aa6:	eef1 0a40 	vneg.f32	s1, s0
24012aaa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012aae:	f01c fa1f 	bl	2402eef0 <__LEAF_clip_veneer>
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24012ab2:	edd4 7a06 	vldr	s15, [r4, #24]
24012ab6:	ee67 0a80 	vmul.f32	s1, s15, s0
24012aba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24012abe:	ee71 7a67 	vsub.f32	s15, s2, s15
24012ac2:	ee67 7a88 	vmul.f32	s15, s15, s16
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24012ac6:	ee70 0aa7 	vadd.f32	s1, s1, s15
24012aca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012ace:	f01c fa0f 	bl	2402eef0 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
24012ad2:	4640      	mov	r0, r8
24012ad4:	f7fb f87a 	bl	2400dbcc <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
24012ad8:	eeb0 0a4a 	vmov.f32	s0, s20
24012adc:	4630      	mov	r0, r6
24012ade:	f7fb f8ab 	bl	2400dc38 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
24012ae2:	eeb0 0a4a 	vmov.f32	s0, s20
24012ae6:	4628      	mov	r0, r5
24012ae8:	f7fb f8a6 	bl	2400dc38 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
24012aec:	eeb0 0a68 	vmov.f32	s0, s17
24012af0:	4640      	mov	r0, r8
24012af2:	f7fb f8a1 	bl	2400dc38 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
24012af6:	eeb0 0a68 	vmov.f32	s0, s17
24012afa:	4638      	mov	r0, r7
24012afc:	f7fb f89c 	bl	2400dc38 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    Lfloat pickupOut = 0.0f;
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
24012b00:	f104 0068 	add.w	r0, r4, #104	; 0x68
24012b04:	f01c f9f0 	bl	2402eee8 <__tExpSmooth_tick_veneer>
    if (pupos < 0.9999f)
24012b08:	eddf 7a64 	vldr	s15, [pc, #400]	; 24012c9c <tLivingString2_tick+0x420>
24012b0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b14:	f140 80bf 	bpl.w	24012c96 <tLivingString2_tick+0x41a>
    {
        if (pupos > prepP)
24012b18:	eef4 9ac0 	vcmpe.f32	s19, s0
24012b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b20:	f140 8081 	bpl.w	24012c26 <tLivingString2_tick+0x3aa>
        {
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
24012b24:	ee29 0a00 	vmul.f32	s0, s18, s0
24012b28:	ee30 aa4a 	vsub.f32	s20, s0, s20
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24012b2c:	eefc 9aca 	vcvt.u32.f32	s19, s20
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24012b30:	eeb8 ba69 	vcvt.f32.u32	s22, s19
24012b34:	ee3a aa4b 	vsub.f32	s20, s20, s22

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
24012b38:	ee19 1a90 	vmov	r1, s19
24012b3c:	4640      	mov	r0, r8
24012b3e:	f7fb f8f6 	bl	2400dd2e <tHermiteDelay_tapOut>
24012b42:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
24012b46:	ee3a 8aca 	vsub.f32	s16, s21, s20
24012b4a:	ee20 9a08 	vmul.f32	s18, s0, s16
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
24012b4e:	ee19 1a90 	vmov	r1, s19
24012b52:	3101      	adds	r1, #1
24012b54:	4640      	mov	r0, r8
24012b56:	f7fb f8ea 	bl	2400dd2e <tHermiteDelay_tapOut>
24012b5a:	ee20 0a0a 	vmul.f32	s0, s0, s20
24012b5e:	ee39 9a00 	vadd.f32	s18, s18, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
24012b62:	ee78 8acb 	vsub.f32	s17, s17, s22
24012b66:	eefc 7ae8 	vcvt.u32.f32	s15, s17
24012b6a:	ee17 1a90 	vmov	r1, s15
24012b6e:	4638      	mov	r0, r7
24012b70:	f7fb f8dd 	bl	2400dd2e <tHermiteDelay_tapOut>
24012b74:	ee28 8a00 	vmul.f32	s16, s16, s0
24012b78:	ee39 9a08 	vadd.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
24012b7c:	ee78 8aea 	vsub.f32	s17, s17, s21
24012b80:	eefc 7ae8 	vcvt.u32.f32	s15, s17
24012b84:	ee17 1a90 	vmov	r1, s15
24012b88:	4638      	mov	r0, r7
24012b8a:	f7fb f8d0 	bl	2400dd2e <tHermiteDelay_tapOut>
24012b8e:	ee20 aa0a 	vmul.f32	s20, s0, s20
24012b92:	ee39 9a0a 	vadd.f32	s18, s18, s20
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
        }

        p->curr = pickupOut;
24012b96:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
24012b9a:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
24012b9e:	ecbd 8b0a 	vpop	{d8-d12}
24012ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         Lfloat fullPickPoint =  pickP * wLen;
24012ba6:	ee29 8a08 	vmul.f32	s16, s18, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24012baa:	eebc cac8 	vcvt.u32.f32	s24, s16
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24012bae:	eeb8 ba4c 	vcvt.f32.u32	s22, s24
24012bb2:	ee38 8a4b 	vsub.f32	s16, s16, s22
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24012bb6:	f104 052c 	add.w	r5, r4, #44	; 0x2c
24012bba:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
24012bbe:	ee7c bac8 	vsub.f32	s23, s25, s16
24012bc2:	ee6b baaa 	vmul.f32	s23, s23, s21
24012bc6:	ee1c 1a10 	vmov	r1, s24
24012bca:	eeb0 0a6b 	vmov.f32	s0, s23
24012bce:	4628      	mov	r0, r5
24012bd0:	f7fb f8b9 	bl	2400dd46 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
24012bd4:	ee2a 8a88 	vmul.f32	s16, s21, s16
24012bd8:	ee1c 1a10 	vmov	r1, s24
24012bdc:	3101      	adds	r1, #1
24012bde:	eeb0 0a48 	vmov.f32	s0, s16
24012be2:	4628      	mov	r0, r5
24012be4:	f7fb f8af 	bl	2400dd46 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24012be8:	f104 0538 	add.w	r5, r4, #56	; 0x38
24012bec:	ee7a aa4b 	vsub.f32	s21, s20, s22
24012bf0:	eefc 7aea 	vcvt.u32.f32	s15, s21
24012bf4:	ee17 1a90 	vmov	r1, s15
24012bf8:	eeb0 0a6b 	vmov.f32	s0, s23
24012bfc:	4628      	mov	r0, r5
24012bfe:	f7fb f8a2 	bl	2400dd46 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPLfloat, (uint32_t) (lowLen - pickPInt - 1));
24012c02:	ee7a aaec 	vsub.f32	s21, s21, s25
24012c06:	eefc 7aea 	vcvt.u32.f32	s15, s21
24012c0a:	ee17 1a90 	vmov	r1, s15
24012c0e:	eeb0 0a48 	vmov.f32	s0, s16
24012c12:	4628      	mov	r0, r5
24012c14:	f7fb f897 	bl	2400dd46 <tHermiteDelay_addTo>
24012c18:	e694      	b.n	24012944 <tLivingString2_tick+0xc8>
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24012c1a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
24012c1e:	e6db      	b.n	240129d8 <tLivingString2_tick+0x15c>
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24012c20:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
24012c24:	e71d      	b.n	24012a62 <tLivingString2_tick+0x1e6>
             Lfloat fullPUPoint =  pupos * wLen;
24012c26:	ee29 9a00 	vmul.f32	s18, s18, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24012c2a:	eefc 9ac9 	vcvt.u32.f32	s19, s18
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24012c2e:	eeb8 ba69 	vcvt.f32.u32	s22, s19
24012c32:	ee39 9a4b 	vsub.f32	s18, s18, s22
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24012c36:	ee19 1a90 	vmov	r1, s19
24012c3a:	4630      	mov	r0, r6
24012c3c:	f7fb f877 	bl	2400dd2e <tHermiteDelay_tapOut>
24012c40:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
24012c44:	ee7a 8ac9 	vsub.f32	s17, s21, s18
24012c48:	ee20 8a28 	vmul.f32	s16, s0, s17
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24012c4c:	ee19 1a90 	vmov	r1, s19
24012c50:	3101      	adds	r1, #1
24012c52:	4630      	mov	r0, r6
24012c54:	f7fb f86b 	bl	2400dd2e <tHermiteDelay_tapOut>
24012c58:	ee20 0a09 	vmul.f32	s0, s0, s18
24012c5c:	ee38 8a00 	vadd.f32	s16, s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24012c60:	ee3a aa4b 	vsub.f32	s20, s20, s22
24012c64:	eefc 7aca 	vcvt.u32.f32	s15, s20
24012c68:	ee17 1a90 	vmov	r1, s15
24012c6c:	4628      	mov	r0, r5
24012c6e:	f7fb f85e 	bl	2400dd2e <tHermiteDelay_tapOut>
24012c72:	ee68 8a80 	vmul.f32	s17, s17, s0
24012c76:	ee38 8a28 	vadd.f32	s16, s16, s17
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
24012c7a:	ee3a aa6a 	vsub.f32	s20, s20, s21
24012c7e:	eefc 7aca 	vcvt.u32.f32	s15, s20
24012c82:	ee17 1a90 	vmov	r1, s15
24012c86:	4628      	mov	r0, r5
24012c88:	f7fb f851 	bl	2400dd2e <tHermiteDelay_tapOut>
24012c8c:	ee20 9a09 	vmul.f32	s18, s0, s18
24012c90:	ee38 9a09 	vadd.f32	s18, s16, s18
24012c94:	e77f      	b.n	24012b96 <tLivingString2_tick+0x31a>
        p->curr = fromBridge;
24012c96:	edc4 ba0a 	vstr	s23, [r4, #40]	; 0x28
24012c9a:	e77e      	b.n	24012b9a <tLivingString2_tick+0x31e>
24012c9c:	3f7ff972 	.word	0x3f7ff972

24012ca0 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24012ca0:	4770      	bx	lr
	...

24012ca4 <LEAF_init>:
{
24012ca4:	b538      	push	{r3, r4, r5, lr}
24012ca6:	ed2d 8b02 	vpush	{d8}
24012caa:	4604      	mov	r4, r0
24012cac:	eeb0 8a40 	vmov.f32	s16, s0
24012cb0:	461d      	mov	r5, r3
    leaf->_internal_mempool.leaf = leaf;
24012cb2:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
24012cb4:	f7fd fd6a 	bl	2401078c <leaf_pool_init>
    leaf->sampleRate = sr;
24012cb8:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24012cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012cc0:	eec7 7a08 	vdiv.f32	s15, s14, s16
24012cc4:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24012cc8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24012d00 <LEAF_init+0x5c>
24012ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
24012cd0:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
24012cd4:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
24012cd6:	2300      	movs	r3, #0
24012cd8:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24012cda:	4a0a      	ldr	r2, [pc, #40]	; (24012d04 <LEAF_init+0x60>)
24012cdc:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
24012cde:	e006      	b.n	24012cee <LEAF_init+0x4a>
        leaf->errorState[i] = 0;
24012ce0:	f103 020e 	add.w	r2, r3, #14
24012ce4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24012ce8:	2100      	movs	r1, #0
24012cea:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
24012cec:	3301      	adds	r3, #1
24012cee:	2b02      	cmp	r3, #2
24012cf0:	ddf6      	ble.n	24012ce0 <LEAF_init+0x3c>
    leaf->allocCount = 0;
24012cf2:	2300      	movs	r3, #0
24012cf4:	64a3      	str	r3, [r4, #72]	; 0x48
    leaf->freeCount = 0;
24012cf6:	64e3      	str	r3, [r4, #76]	; 0x4c
}
24012cf8:	ecbd 8b02 	vpop	{d8}
24012cfc:	bd38      	pop	{r3, r4, r5, pc}
24012cfe:	bf00      	nop
24012d00:	40c90fdb 	.word	0x40c90fdb
24012d04:	24012ca1 	.word	0x24012ca1

24012d08 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24012d08:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
24012d0a:	f101 030e 	add.w	r3, r1, #14
24012d0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
24012d12:	2401      	movs	r4, #1
24012d14:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
24012d16:	6b83      	ldr	r3, [r0, #56]	; 0x38
24012d18:	4798      	blx	r3
}
24012d1a:	bd10      	pop	{r4, pc}

24012d1c <arm_fir_interpolate_init_f32>:
24012d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24012d1e:	fbb2 f6f1 	udiv	r6, r2, r1
24012d22:	fb01 2416 	mls	r4, r1, r6, r2
24012d26:	9f06      	ldr	r7, [sp, #24]
24012d28:	b984      	cbnz	r4, 24012d4c <arm_fir_interpolate_init_f32+0x30>
24012d2a:	6043      	str	r3, [r0, #4]
24012d2c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
24012d30:	9b07      	ldr	r3, [sp, #28]
24012d32:	4605      	mov	r5, r0
24012d34:	7001      	strb	r1, [r0, #0]
24012d36:	4621      	mov	r1, r4
24012d38:	441a      	add	r2, r3
24012d3a:	8046      	strh	r6, [r0, #2]
24012d3c:	4638      	mov	r0, r7
24012d3e:	4432      	add	r2, r6
24012d40:	0092      	lsls	r2, r2, #2
24012d42:	f000 fc89 	bl	24013658 <memset>
24012d46:	60af      	str	r7, [r5, #8]
24012d48:	4620      	mov	r0, r4
24012d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24012d4c:	f06f 0001 	mvn.w	r0, #1
24012d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24012d52:	bf00      	nop

24012d54 <arm_fir_interpolate_f32>:
24012d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24012d58:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
24012d5c:	b08f      	sub	sp, #60	; 0x3c
24012d5e:	8845      	ldrh	r5, [r0, #2]
24012d60:	9202      	str	r2, [sp, #8]
24012d62:	442c      	add	r4, r5
24012d64:	6882      	ldr	r2, [r0, #8]
24012d66:	930d      	str	r3, [sp, #52]	; 0x34
24012d68:	089b      	lsrs	r3, r3, #2
24012d6a:	eb02 0784 	add.w	r7, r2, r4, lsl #2
24012d6e:	9107      	str	r1, [sp, #28]
24012d70:	950b      	str	r5, [sp, #44]	; 0x2c
24012d72:	4616      	mov	r6, r2
24012d74:	9209      	str	r2, [sp, #36]	; 0x24
24012d76:	f8d0 b004 	ldr.w	fp, [r0, #4]
24012d7a:	970a      	str	r7, [sp, #40]	; 0x28
24012d7c:	930c      	str	r3, [sp, #48]	; 0x30
24012d7e:	f000 811b 	beq.w	24012fb8 <arm_fir_interpolate_f32+0x264>
24012d82:	462a      	mov	r2, r5
24012d84:	468e      	mov	lr, r1
24012d86:	4619      	mov	r1, r3
24012d88:	4635      	mov	r5, r6
24012d8a:	4613      	mov	r3, r2
24012d8c:	ea4f 0892 	mov.w	r8, r2, lsr #2
24012d90:	f106 0c1c 	add.w	ip, r6, #28
24012d94:	f10e 0210 	add.w	r2, lr, #16
24012d98:	ea4f 1608 	mov.w	r6, r8, lsl #4
24012d9c:	f003 0903 	and.w	r9, r3, #3
24012da0:	f107 0310 	add.w	r3, r7, #16
24012da4:	f8cd b020 	str.w	fp, [sp, #32]
24012da8:	4693      	mov	fp, r2
24012daa:	e9cd 3103 	strd	r3, r1, [sp, #12]
24012dae:	f106 030c 	add.w	r3, r6, #12
24012db2:	4466      	add	r6, ip
24012db4:	18eb      	adds	r3, r5, r3
24012db6:	9301      	str	r3, [sp, #4]
24012db8:	f85b 3c10 	ldr.w	r3, [fp, #-16]
24012dbc:	9a03      	ldr	r2, [sp, #12]
24012dbe:	f842 3c10 	str.w	r3, [r2, #-16]
24012dc2:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
24012dc6:	f842 3c0c 	str.w	r3, [r2, #-12]
24012dca:	f85b 3c08 	ldr.w	r3, [fp, #-8]
24012dce:	f842 3c08 	str.w	r3, [r2, #-8]
24012dd2:	f85b 3c04 	ldr.w	r3, [fp, #-4]
24012dd6:	f842 3c04 	str.w	r3, [r2, #-4]
24012dda:	f890 a000 	ldrb.w	sl, [r0]
24012dde:	4653      	mov	r3, sl
24012de0:	f1ba 0f00 	cmp.w	sl, #0
24012de4:	f000 80c5 	beq.w	24012f72 <arm_fir_interpolate_f32+0x21e>
24012de8:	f1ac 0310 	sub.w	r3, ip, #16
24012dec:	f8cd b018 	str.w	fp, [sp, #24]
24012df0:	4655      	mov	r5, sl
24012df2:	9f02      	ldr	r7, [sp, #8]
24012df4:	f04f 0e01 	mov.w	lr, #1
24012df8:	f8dd b020 	ldr.w	fp, [sp, #32]
24012dfc:	9305      	str	r3, [sp, #20]
24012dfe:	eba5 040e 	sub.w	r4, r5, lr
24012e02:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
24012e06:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
24012e0a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
24012e0e:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
24012e12:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 240130f4 <arm_fir_interpolate_f32+0x3a0>
24012e16:	f1b8 0f00 	cmp.w	r8, #0
24012e1a:	f000 8163 	beq.w	240130e4 <arm_fir_interpolate_f32+0x390>
24012e1e:	eef0 5a47 	vmov.f32	s11, s14
24012e22:	00a9      	lsls	r1, r5, #2
24012e24:	eef0 4a47 	vmov.f32	s9, s14
24012e28:	4662      	mov	r2, ip
24012e2a:	eef0 6a47 	vmov.f32	s13, s14
24012e2e:	4623      	mov	r3, r4
24012e30:	ed52 1a04 	vldr	s3, [r2, #-16]
24012e34:	3210      	adds	r2, #16
24012e36:	edd3 7a00 	vldr	s15, [r3]
24012e3a:	440b      	add	r3, r1
24012e3c:	ee27 6a82 	vmul.f32	s12, s15, s4
24012e40:	edd3 3a00 	vldr	s7, [r3]
24012e44:	ee27 4a83 	vmul.f32	s8, s15, s6
24012e48:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
24012e4c:	ee27 5aa2 	vmul.f32	s10, s15, s5
24012e50:	440b      	add	r3, r1
24012e52:	ee61 7aa7 	vmul.f32	s15, s3, s15
24012e56:	ee76 6a26 	vadd.f32	s13, s12, s13
24012e5a:	ed93 6a00 	vldr	s12, [r3]
24012e5e:	ee63 0a83 	vmul.f32	s1, s7, s6
24012e62:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
24012e66:	ee75 5a25 	vadd.f32	s11, s10, s11
24012e6a:	440b      	add	r3, r1
24012e6c:	ee21 1aa3 	vmul.f32	s2, s3, s7
24012e70:	ee74 4a24 	vadd.f32	s9, s8, s9
24012e74:	ed93 5a00 	vldr	s10, [r3]
24012e78:	ee23 4aa2 	vmul.f32	s8, s7, s5
24012e7c:	440b      	add	r3, r1
24012e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
24012e82:	ee63 3a82 	vmul.f32	s7, s7, s4
24012e86:	ee74 4a24 	vadd.f32	s9, s8, s9
24012e8a:	ee70 0aa6 	vadd.f32	s1, s1, s13
24012e8e:	ee21 4a86 	vmul.f32	s8, s3, s12
24012e92:	ee66 6a22 	vmul.f32	s13, s12, s5
24012e96:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
24012e9a:	ee31 1a25 	vadd.f32	s2, s2, s11
24012e9e:	4296      	cmp	r6, r2
24012ea0:	ee73 7a87 	vadd.f32	s15, s7, s14
24012ea4:	ee62 5a06 	vmul.f32	s11, s4, s12
24012ea8:	ee26 7a03 	vmul.f32	s14, s12, s6
24012eac:	ee61 1a85 	vmul.f32	s3, s3, s10
24012eb0:	ee34 4a24 	vadd.f32	s8, s8, s9
24012eb4:	ee35 6a81 	vadd.f32	s12, s11, s2
24012eb8:	ee62 4a05 	vmul.f32	s9, s4, s10
24012ebc:	ee63 5a05 	vmul.f32	s11, s6, s10
24012ec0:	ee76 6aa0 	vadd.f32	s13, s13, s1
24012ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
24012ec8:	ee25 5a22 	vmul.f32	s10, s10, s5
24012ecc:	ee71 6aa6 	vadd.f32	s13, s3, s13
24012ed0:	ee74 4a84 	vadd.f32	s9, s9, s8
24012ed4:	ee75 5a86 	vadd.f32	s11, s11, s12
24012ed8:	ee35 7a07 	vadd.f32	s14, s10, s14
24012edc:	d1a8      	bne.n	24012e30 <arm_fir_interpolate_f32+0xdc>
24012ede:	fb08 f305 	mul.w	r3, r8, r5
24012ee2:	9a01      	ldr	r2, [sp, #4]
24012ee4:	eb04 1403 	add.w	r4, r4, r3, lsl #4
24012ee8:	f1b9 0f00 	cmp.w	r9, #0
24012eec:	d01e      	beq.n	24012f2c <arm_fir_interpolate_f32+0x1d8>
24012eee:	00ad      	lsls	r5, r5, #2
24012ef0:	464b      	mov	r3, r9
24012ef2:	ed94 6a00 	vldr	s12, [r4]
24012ef6:	3b01      	subs	r3, #1
24012ef8:	ecf2 7a01 	vldmia	r2!, {s15}
24012efc:	442c      	add	r4, r5
24012efe:	ee66 3a02 	vmul.f32	s7, s12, s4
24012f02:	ee26 4a03 	vmul.f32	s8, s12, s6
24012f06:	ee26 5a22 	vmul.f32	s10, s12, s5
24012f0a:	eeb0 2a43 	vmov.f32	s4, s6
24012f0e:	eeb0 3a62 	vmov.f32	s6, s5
24012f12:	eef0 2a67 	vmov.f32	s5, s15
24012f16:	ee67 7a86 	vmul.f32	s15, s15, s12
24012f1a:	ee76 6aa3 	vadd.f32	s13, s13, s7
24012f1e:	ee74 4a84 	vadd.f32	s9, s9, s8
24012f22:	ee75 5a85 	vadd.f32	s11, s11, s10
24012f26:	ee37 7a27 	vadd.f32	s14, s14, s15
24012f2a:	d1e2      	bne.n	24012ef2 <arm_fir_interpolate_f32+0x19e>
24012f2c:	edc7 6a00 	vstr	s13, [r7]
24012f30:	45f2      	cmp	sl, lr
24012f32:	7803      	ldrb	r3, [r0, #0]
24012f34:	f10e 0201 	add.w	r2, lr, #1
24012f38:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24012f3c:	edc3 4a00 	vstr	s9, [r3]
24012f40:	7803      	ldrb	r3, [r0, #0]
24012f42:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
24012f46:	edc3 5a00 	vstr	s11, [r3]
24012f4a:	7803      	ldrb	r3, [r0, #0]
24012f4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24012f50:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24012f54:	f107 0704 	add.w	r7, r7, #4
24012f58:	ed83 7a00 	vstr	s14, [r3]
24012f5c:	d002      	beq.n	24012f64 <arm_fir_interpolate_f32+0x210>
24012f5e:	4696      	mov	lr, r2
24012f60:	7805      	ldrb	r5, [r0, #0]
24012f62:	e74c      	b.n	24012dfe <arm_fir_interpolate_f32+0xaa>
24012f64:	9b02      	ldr	r3, [sp, #8]
24012f66:	f8dd b018 	ldr.w	fp, [sp, #24]
24012f6a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24012f6e:	9302      	str	r3, [sp, #8]
24012f70:	7803      	ldrb	r3, [r0, #0]
24012f72:	9a03      	ldr	r2, [sp, #12]
24012f74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24012f78:	f10b 0b10 	add.w	fp, fp, #16
24012f7c:	f10c 0c10 	add.w	ip, ip, #16
24012f80:	3210      	adds	r2, #16
24012f82:	3610      	adds	r6, #16
24012f84:	9203      	str	r2, [sp, #12]
24012f86:	9a01      	ldr	r2, [sp, #4]
24012f88:	3210      	adds	r2, #16
24012f8a:	9201      	str	r2, [sp, #4]
24012f8c:	9a02      	ldr	r2, [sp, #8]
24012f8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24012f92:	9302      	str	r3, [sp, #8]
24012f94:	9b04      	ldr	r3, [sp, #16]
24012f96:	3b01      	subs	r3, #1
24012f98:	9304      	str	r3, [sp, #16]
24012f9a:	f47f af0d 	bne.w	24012db8 <arm_fir_interpolate_f32+0x64>
24012f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24012fa0:	9a07      	ldr	r2, [sp, #28]
24012fa2:	011b      	lsls	r3, r3, #4
24012fa4:	f8dd b020 	ldr.w	fp, [sp, #32]
24012fa8:	441a      	add	r2, r3
24012faa:	9207      	str	r2, [sp, #28]
24012fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24012fae:	441a      	add	r2, r3
24012fb0:	920a      	str	r2, [sp, #40]	; 0x28
24012fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
24012fb4:	441a      	add	r2, r3
24012fb6:	9209      	str	r2, [sp, #36]	; 0x24
24012fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
24012fba:	f013 0303 	ands.w	r3, r3, #3
24012fbe:	f000 80b1 	beq.w	24013124 <arm_fir_interpolate_f32+0x3d0>
24012fc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24012fc4:	009d      	lsls	r5, r3, #2
24012fc6:	990a      	ldr	r1, [sp, #40]	; 0x28
24012fc8:	0894      	lsrs	r4, r2, #2
24012fca:	f002 0a03 	and.w	sl, r2, #3
24012fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
24012fd0:	0123      	lsls	r3, r4, #4
24012fd2:	9106      	str	r1, [sp, #24]
24012fd4:	f102 0110 	add.w	r1, r2, #16
24012fd8:	46a1      	mov	r9, r4
24012fda:	f103 0e10 	add.w	lr, r3, #16
24012fde:	18d3      	adds	r3, r2, r3
24012fe0:	9101      	str	r1, [sp, #4]
24012fe2:	9907      	ldr	r1, [sp, #28]
24012fe4:	4496      	add	lr, r2
24012fe6:	950c      	str	r5, [sp, #48]	; 0x30
24012fe8:	4429      	add	r1, r5
24012fea:	9303      	str	r3, [sp, #12]
24012fec:	f8cd b014 	str.w	fp, [sp, #20]
24012ff0:	910a      	str	r1, [sp, #40]	; 0x28
24012ff2:	9004      	str	r0, [sp, #16]
24012ff4:	9a07      	ldr	r2, [sp, #28]
24012ff6:	f852 3b04 	ldr.w	r3, [r2], #4
24012ffa:	9207      	str	r2, [sp, #28]
24012ffc:	9a01      	ldr	r2, [sp, #4]
24012ffe:	3a10      	subs	r2, #16
24013000:	9208      	str	r2, [sp, #32]
24013002:	9a06      	ldr	r2, [sp, #24]
24013004:	f842 3b04 	str.w	r3, [r2], #4
24013008:	9b04      	ldr	r3, [sp, #16]
2401300a:	9206      	str	r2, [sp, #24]
2401300c:	f893 b000 	ldrb.w	fp, [r3]
24013010:	f1bb 0f00 	cmp.w	fp, #0
24013014:	d074      	beq.n	24013100 <arm_fir_interpolate_f32+0x3ac>
24013016:	465f      	mov	r7, fp
24013018:	f04f 0c01 	mov.w	ip, #1
2401301c:	9b05      	ldr	r3, [sp, #20]
2401301e:	eba7 000c 	sub.w	r0, r7, ip
24013022:	f8dd 8008 	ldr.w	r8, [sp, #8]
24013026:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2401302a:	f1b9 0f00 	cmp.w	r9, #0
2401302e:	d055      	beq.n	240130dc <arm_fir_interpolate_f32+0x388>
24013030:	b23a      	sxth	r2, r7
24013032:	9b01      	ldr	r3, [sp, #4]
24013034:	4601      	mov	r1, r0
24013036:	eddf 7a2f 	vldr	s15, [pc, #188]	; 240130f4 <arm_fir_interpolate_f32+0x3a0>
2401303a:	0094      	lsls	r4, r2, #2
2401303c:	0115      	lsls	r5, r2, #4
2401303e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
24013042:	ed13 7a04 	vldr	s14, [r3, #-16]
24013046:	190e      	adds	r6, r1, r4
24013048:	edd1 6a00 	vldr	s13, [r1]
2401304c:	3310      	adds	r3, #16
2401304e:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
24013052:	4429      	add	r1, r5
24013054:	ee27 7a26 	vmul.f32	s14, s14, s13
24013058:	ed96 6a00 	vldr	s12, [r6]
2401305c:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24013060:	1916      	adds	r6, r2, r4
24013062:	ee26 6a25 	vmul.f32	s12, s12, s11
24013066:	ed92 5a00 	vldr	s10, [r2]
2401306a:	ee77 7a27 	vadd.f32	s15, s14, s15
2401306e:	edd6 5a00 	vldr	s11, [r6]
24013072:	ee26 7a85 	vmul.f32	s14, s13, s10
24013076:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
2401307a:	459e      	cmp	lr, r3
2401307c:	442a      	add	r2, r5
2401307e:	ee76 7a27 	vadd.f32	s15, s12, s15
24013082:	ee65 6aa6 	vmul.f32	s13, s11, s13
24013086:	ee77 7a27 	vadd.f32	s15, s14, s15
2401308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401308e:	d1d8      	bne.n	24013042 <arm_fir_interpolate_f32+0x2ee>
24013090:	fb09 f404 	mul.w	r4, r9, r4
24013094:	9a03      	ldr	r2, [sp, #12]
24013096:	eb00 0084 	add.w	r0, r0, r4, lsl #2
2401309a:	f1ba 0f00 	cmp.w	sl, #0
2401309e:	d00c      	beq.n	240130ba <arm_fir_interpolate_f32+0x366>
240130a0:	00bf      	lsls	r7, r7, #2
240130a2:	4653      	mov	r3, sl
240130a4:	edd0 6a00 	vldr	s13, [r0]
240130a8:	3b01      	subs	r3, #1
240130aa:	ecb2 7a01 	vldmia	r2!, {s14}
240130ae:	4438      	add	r0, r7
240130b0:	ee27 7a26 	vmul.f32	s14, s14, s13
240130b4:	ee77 7a87 	vadd.f32	s15, s15, s14
240130b8:	d1f4      	bne.n	240130a4 <arm_fir_interpolate_f32+0x350>
240130ba:	45e3      	cmp	fp, ip
240130bc:	ece8 7a01 	vstmia	r8!, {s15}
240130c0:	f10c 0301 	add.w	r3, ip, #1
240130c4:	d018      	beq.n	240130f8 <arm_fir_interpolate_f32+0x3a4>
240130c6:	469c      	mov	ip, r3
240130c8:	9b04      	ldr	r3, [sp, #16]
240130ca:	781f      	ldrb	r7, [r3, #0]
240130cc:	9b05      	ldr	r3, [sp, #20]
240130ce:	eba7 000c 	sub.w	r0, r7, ip
240130d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240130d6:	f1b9 0f00 	cmp.w	r9, #0
240130da:	d1a9      	bne.n	24013030 <arm_fir_interpolate_f32+0x2dc>
240130dc:	9a08      	ldr	r2, [sp, #32]
240130de:	eddf 7a05 	vldr	s15, [pc, #20]	; 240130f4 <arm_fir_interpolate_f32+0x3a0>
240130e2:	e7da      	b.n	2401309a <arm_fir_interpolate_f32+0x346>
240130e4:	9a05      	ldr	r2, [sp, #20]
240130e6:	eef0 5a47 	vmov.f32	s11, s14
240130ea:	eef0 4a47 	vmov.f32	s9, s14
240130ee:	eef0 6a47 	vmov.f32	s13, s14
240130f2:	e6f9      	b.n	24012ee8 <arm_fir_interpolate_f32+0x194>
240130f4:	00000000 	.word	0x00000000
240130f8:	9b02      	ldr	r3, [sp, #8]
240130fa:	eb03 038b 	add.w	r3, r3, fp, lsl #2
240130fe:	9302      	str	r3, [sp, #8]
24013100:	9b03      	ldr	r3, [sp, #12]
24013102:	f10e 0e04 	add.w	lr, lr, #4
24013106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24013108:	3304      	adds	r3, #4
2401310a:	9303      	str	r3, [sp, #12]
2401310c:	9b01      	ldr	r3, [sp, #4]
2401310e:	3304      	adds	r3, #4
24013110:	9301      	str	r3, [sp, #4]
24013112:	9b07      	ldr	r3, [sp, #28]
24013114:	4293      	cmp	r3, r2
24013116:	f47f af6d 	bne.w	24012ff4 <arm_fir_interpolate_f32+0x2a0>
2401311a:	9b09      	ldr	r3, [sp, #36]	; 0x24
2401311c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2401311e:	9804      	ldr	r0, [sp, #16]
24013120:	4413      	add	r3, r2
24013122:	9309      	str	r3, [sp, #36]	; 0x24
24013124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24013126:	6885      	ldr	r5, [r0, #8]
24013128:	1e5c      	subs	r4, r3, #1
2401312a:	08a6      	lsrs	r6, r4, #2
2401312c:	d020      	beq.n	24013170 <arm_fir_interpolate_f32+0x41c>
2401312e:	9b09      	ldr	r3, [sp, #36]	; 0x24
24013130:	4631      	mov	r1, r6
24013132:	f103 0210 	add.w	r2, r3, #16
24013136:	f105 0310 	add.w	r3, r5, #16
2401313a:	f852 0c10 	ldr.w	r0, [r2, #-16]
2401313e:	3901      	subs	r1, #1
24013140:	f102 0210 	add.w	r2, r2, #16
24013144:	f103 0310 	add.w	r3, r3, #16
24013148:	f843 0c20 	str.w	r0, [r3, #-32]
2401314c:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24013150:	f843 0c1c 	str.w	r0, [r3, #-28]
24013154:	f852 0c18 	ldr.w	r0, [r2, #-24]
24013158:	f843 0c18 	str.w	r0, [r3, #-24]
2401315c:	f852 0c14 	ldr.w	r0, [r2, #-20]
24013160:	f843 0c14 	str.w	r0, [r3, #-20]
24013164:	d1e9      	bne.n	2401313a <arm_fir_interpolate_f32+0x3e6>
24013166:	0133      	lsls	r3, r6, #4
24013168:	9a09      	ldr	r2, [sp, #36]	; 0x24
2401316a:	441d      	add	r5, r3
2401316c:	441a      	add	r2, r3
2401316e:	9209      	str	r2, [sp, #36]	; 0x24
24013170:	f014 0403 	ands.w	r4, r4, #3
24013174:	d00a      	beq.n	2401318c <arm_fir_interpolate_f32+0x438>
24013176:	9a09      	ldr	r2, [sp, #36]	; 0x24
24013178:	3c01      	subs	r4, #1
2401317a:	6813      	ldr	r3, [r2, #0]
2401317c:	602b      	str	r3, [r5, #0]
2401317e:	d005      	beq.n	2401318c <arm_fir_interpolate_f32+0x438>
24013180:	6853      	ldr	r3, [r2, #4]
24013182:	2c01      	cmp	r4, #1
24013184:	606b      	str	r3, [r5, #4]
24013186:	d001      	beq.n	2401318c <arm_fir_interpolate_f32+0x438>
24013188:	6893      	ldr	r3, [r2, #8]
2401318a:	60ab      	str	r3, [r5, #8]
2401318c:	b00f      	add	sp, #60	; 0x3c
2401318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013192:	bf00      	nop

24013194 <arm_fir_decimate_init_f32>:
24013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24013198:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
2401319c:	fbbc f4f2 	udiv	r4, ip, r2
240131a0:	fb02 c414 	mls	r4, r2, r4, ip
240131a4:	b99c      	cbnz	r4, 240131ce <arm_fir_decimate_init_f32+0x3a>
240131a6:	460f      	mov	r7, r1
240131a8:	4616      	mov	r6, r2
240131aa:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
240131ae:	4605      	mov	r5, r0
240131b0:	443a      	add	r2, r7
240131b2:	8069      	strh	r1, [r5, #2]
240131b4:	6043      	str	r3, [r0, #4]
240131b6:	4621      	mov	r1, r4
240131b8:	4462      	add	r2, ip
240131ba:	4640      	mov	r0, r8
240131bc:	0092      	lsls	r2, r2, #2
240131be:	f000 fa4b 	bl	24013658 <memset>
240131c2:	4620      	mov	r0, r4
240131c4:	f8c5 8008 	str.w	r8, [r5, #8]
240131c8:	702e      	strb	r6, [r5, #0]
240131ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240131ce:	f06f 0001 	mvn.w	r0, #1
240131d2:	e7fa      	b.n	240131ca <arm_fir_decimate_init_f32+0x36>

240131d4 <arm_fir_decimate_f32>:
240131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240131d8:	4605      	mov	r5, r0
240131da:	b08d      	sub	sp, #52	; 0x34
240131dc:	4694      	mov	ip, r2
240131de:	782c      	ldrb	r4, [r5, #0]
240131e0:	886f      	ldrh	r7, [r5, #2]
240131e2:	9001      	str	r0, [sp, #4]
240131e4:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
240131e8:	68ae      	ldr	r6, [r5, #8]
240131ea:	4438      	add	r0, r7
240131ec:	686d      	ldr	r5, [r5, #4]
240131ee:	9207      	str	r2, [sp, #28]
240131f0:	970a      	str	r7, [sp, #40]	; 0x28
240131f2:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
240131f6:	9508      	str	r5, [sp, #32]
240131f8:	fbb3 f3f4 	udiv	r3, r3, r4
240131fc:	930b      	str	r3, [sp, #44]	; 0x2c
240131fe:	089b      	lsrs	r3, r3, #2
24013200:	9309      	str	r3, [sp, #36]	; 0x24
24013202:	f000 80ef 	beq.w	240133e4 <arm_fir_decimate_f32+0x210>
24013206:	08ba      	lsrs	r2, r7, #2
24013208:	462b      	mov	r3, r5
2401320a:	3510      	adds	r5, #16
2401320c:	f007 0703 	and.w	r7, r7, #3
24013210:	9205      	str	r2, [sp, #20]
24013212:	0112      	lsls	r2, r2, #4
24013214:	9809      	ldr	r0, [sp, #36]	; 0x24
24013216:	f10c 0910 	add.w	r9, ip, #16
2401321a:	4413      	add	r3, r2
2401321c:	9100      	str	r1, [sp, #0]
2401321e:	eb05 0e02 	add.w	lr, r5, r2
24013222:	4611      	mov	r1, r2
24013224:	9503      	str	r5, [sp, #12]
24013226:	9704      	str	r7, [sp, #16]
24013228:	9002      	str	r0, [sp, #8]
2401322a:	9306      	str	r3, [sp, #24]
2401322c:	00a4      	lsls	r4, r4, #2
2401322e:	4658      	mov	r0, fp
24013230:	9a00      	ldr	r2, [sp, #0]
24013232:	4623      	mov	r3, r4
24013234:	f852 5b04 	ldr.w	r5, [r2], #4
24013238:	3b01      	subs	r3, #1
2401323a:	f840 5b04 	str.w	r5, [r0], #4
2401323e:	d1f9      	bne.n	24013234 <arm_fir_decimate_f32+0x60>
24013240:	9b01      	ldr	r3, [sp, #4]
24013242:	00a4      	lsls	r4, r4, #2
24013244:	eddf 0abe 	vldr	s1, [pc, #760]	; 24013540 <arm_fir_decimate_f32+0x36c>
24013248:	f893 8000 	ldrb.w	r8, [r3]
2401324c:	44a3      	add	fp, r4
2401324e:	9b00      	ldr	r3, [sp, #0]
24013250:	ea4f 0888 	mov.w	r8, r8, lsl #2
24013254:	4423      	add	r3, r4
24013256:	eb06 0708 	add.w	r7, r6, r8
2401325a:	9300      	str	r3, [sp, #0]
2401325c:	eb07 0c08 	add.w	ip, r7, r8
24013260:	9b05      	ldr	r3, [sp, #20]
24013262:	eb0c 0a08 	add.w	sl, ip, r8
24013266:	2b00      	cmp	r3, #0
24013268:	f000 815c 	beq.w	24013524 <arm_fir_decimate_f32+0x350>
2401326c:	eef0 4a60 	vmov.f32	s9, s1
24013270:	9b03      	ldr	r3, [sp, #12]
24013272:	eef0 7a60 	vmov.f32	s15, s1
24013276:	f106 0510 	add.w	r5, r6, #16
2401327a:	eeb0 7a60 	vmov.f32	s14, s1
2401327e:	f107 0410 	add.w	r4, r7, #16
24013282:	f10c 0010 	add.w	r0, ip, #16
24013286:	f10a 0210 	add.w	r2, sl, #16
2401328a:	ed53 5a04 	vldr	s11, [r3, #-16]
2401328e:	3310      	adds	r3, #16
24013290:	ed12 5a04 	vldr	s10, [r2, #-16]
24013294:	3510      	adds	r5, #16
24013296:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
2401329a:	3410      	adds	r4, #16
2401329c:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
240132a0:	3010      	adds	r0, #16
240132a2:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
240132a6:	ee65 6aa6 	vmul.f32	s13, s11, s13
240132aa:	ee25 1a81 	vmul.f32	s2, s11, s2
240132ae:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
240132b2:	ee65 3aa3 	vmul.f32	s7, s11, s7
240132b6:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
240132ba:	ee65 5a85 	vmul.f32	s11, s11, s10
240132be:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
240132c2:	ed12 5a03 	vldr	s10, [r2, #-12]
240132c6:	ee36 7a87 	vadd.f32	s14, s13, s14
240132ca:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
240132ce:	ee73 1aa4 	vadd.f32	s3, s7, s9
240132d2:	ee26 2a02 	vmul.f32	s4, s12, s4
240132d6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
240132da:	ee31 1a27 	vadd.f32	s2, s2, s15
240132de:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
240132e2:	ee66 7a22 	vmul.f32	s15, s12, s5
240132e6:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
240132ea:	ee26 3a03 	vmul.f32	s6, s12, s6
240132ee:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
240132f2:	ee75 5aa0 	vadd.f32	s11, s11, s1
240132f6:	ed52 0a02 	vldr	s1, [r2, #-8]
240132fa:	ee26 6a05 	vmul.f32	s12, s12, s10
240132fe:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
24013302:	ee72 2a07 	vadd.f32	s5, s4, s14
24013306:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
2401330a:	ee77 7a81 	vadd.f32	s15, s15, s2
2401330e:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
24013312:	ee33 3a21 	vadd.f32	s6, s6, s3
24013316:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
2401331a:	ee66 3aa3 	vmul.f32	s7, s13, s7
2401331e:	ed52 1a01 	vldr	s3, [r2, #-4]
24013322:	ee26 4a84 	vmul.f32	s8, s13, s8
24013326:	459e      	cmp	lr, r3
24013328:	ee66 4aa4 	vmul.f32	s9, s13, s9
2401332c:	f102 0210 	add.w	r2, r2, #16
24013330:	ee66 6aa0 	vmul.f32	s13, s13, s1
24013334:	ee36 6a25 	vadd.f32	s12, s12, s11
24013338:	ee25 7a07 	vmul.f32	s14, s10, s14
2401333c:	ee34 4a27 	vadd.f32	s8, s8, s15
24013340:	ee74 4a83 	vadd.f32	s9, s9, s6
24013344:	ee65 7a01 	vmul.f32	s15, s10, s2
24013348:	ee25 3a02 	vmul.f32	s6, s10, s4
2401334c:	ee73 3aa2 	vadd.f32	s7, s7, s5
24013350:	ee76 6a86 	vadd.f32	s13, s13, s12
24013354:	ee25 5a21 	vmul.f32	s10, s10, s3
24013358:	ee37 7a23 	vadd.f32	s14, s14, s7
2401335c:	ee77 7a84 	vadd.f32	s15, s15, s8
24013360:	ee73 4a24 	vadd.f32	s9, s6, s9
24013364:	ee75 0a26 	vadd.f32	s1, s10, s13
24013368:	d18f      	bne.n	2401328a <arm_fir_decimate_f32+0xb6>
2401336a:	440e      	add	r6, r1
2401336c:	440f      	add	r7, r1
2401336e:	448c      	add	ip, r1
24013370:	eb0a 0001 	add.w	r0, sl, r1
24013374:	9a06      	ldr	r2, [sp, #24]
24013376:	9b04      	ldr	r3, [sp, #16]
24013378:	b1db      	cbz	r3, 240133b2 <arm_fir_decimate_f32+0x1de>
2401337a:	ecb2 5a01 	vldmia	r2!, {s10}
2401337e:	3b01      	subs	r3, #1
24013380:	ecf6 2a01 	vldmia	r6!, {s5}
24013384:	ecf7 3a01 	vldmia	r7!, {s7}
24013388:	ecbc 4a01 	vldmia	ip!, {s8}
2401338c:	ee65 2a22 	vmul.f32	s5, s10, s5
24013390:	ecf0 6a01 	vldmia	r0!, {s13}
24013394:	ee65 3a23 	vmul.f32	s7, s10, s7
24013398:	ee25 4a04 	vmul.f32	s8, s10, s8
2401339c:	ee25 5a26 	vmul.f32	s10, s10, s13
240133a0:	ee37 7a22 	vadd.f32	s14, s14, s5
240133a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
240133a8:	ee74 4a84 	vadd.f32	s9, s9, s8
240133ac:	ee70 0a85 	vadd.f32	s1, s1, s10
240133b0:	d1e3      	bne.n	2401337a <arm_fir_decimate_f32+0x1a6>
240133b2:	9b02      	ldr	r3, [sp, #8]
240133b4:	eb0a 0608 	add.w	r6, sl, r8
240133b8:	ed09 7a04 	vstr	s14, [r9, #-16]
240133bc:	f109 0910 	add.w	r9, r9, #16
240133c0:	3b01      	subs	r3, #1
240133c2:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
240133c6:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
240133ca:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
240133ce:	9302      	str	r3, [sp, #8]
240133d0:	d002      	beq.n	240133d8 <arm_fir_decimate_f32+0x204>
240133d2:	9b01      	ldr	r3, [sp, #4]
240133d4:	781c      	ldrb	r4, [r3, #0]
240133d6:	e729      	b.n	2401322c <arm_fir_decimate_f32+0x58>
240133d8:	9b07      	ldr	r3, [sp, #28]
240133da:	9a09      	ldr	r2, [sp, #36]	; 0x24
240133dc:	9900      	ldr	r1, [sp, #0]
240133de:	eb03 1302 	add.w	r3, r3, r2, lsl #4
240133e2:	9307      	str	r3, [sp, #28]
240133e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
240133e6:	f013 0803 	ands.w	r8, r3, #3
240133ea:	d067      	beq.n	240134bc <arm_fir_decimate_f32+0x2e8>
240133ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240133ee:	9808      	ldr	r0, [sp, #32]
240133f0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
240133f4:	9d07      	ldr	r5, [sp, #28]
240133f6:	4602      	mov	r2, r0
240133f8:	f003 0703 	and.w	r7, r3, #3
240133fc:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
24013400:	f8cd e000 	str.w	lr, [sp]
24013404:	3210      	adds	r2, #16
24013406:	eb05 0888 	add.w	r8, r5, r8, lsl #2
2401340a:	eb00 090c 	add.w	r9, r0, ip
2401340e:	f8dd e004 	ldr.w	lr, [sp, #4]
24013412:	eb02 040c 	add.w	r4, r2, ip
24013416:	46aa      	mov	sl, r5
24013418:	9203      	str	r2, [sp, #12]
2401341a:	f89e 5000 	ldrb.w	r5, [lr]
2401341e:	4658      	mov	r0, fp
24013420:	460a      	mov	r2, r1
24013422:	462b      	mov	r3, r5
24013424:	ecf2 7a01 	vldmia	r2!, {s15}
24013428:	3b01      	subs	r3, #1
2401342a:	ece0 7a01 	vstmia	r0!, {s15}
2401342e:	d1f9      	bne.n	24013424 <arm_fir_decimate_f32+0x250>
24013430:	00ad      	lsls	r5, r5, #2
24013432:	9b00      	ldr	r3, [sp, #0]
24013434:	4429      	add	r1, r5
24013436:	44ab      	add	fp, r5
24013438:	2b00      	cmp	r3, #0
2401343a:	d07c      	beq.n	24013536 <arm_fir_decimate_f32+0x362>
2401343c:	9b03      	ldr	r3, [sp, #12]
2401343e:	f106 0210 	add.w	r2, r6, #16
24013442:	eddf 7a3f 	vldr	s15, [pc, #252]	; 24013540 <arm_fir_decimate_f32+0x36c>
24013446:	ed13 7a04 	vldr	s14, [r3, #-16]
2401344a:	3310      	adds	r3, #16
2401344c:	ed52 6a04 	vldr	s13, [r2, #-16]
24013450:	3210      	adds	r2, #16
24013452:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
24013456:	ee27 7a26 	vmul.f32	s14, s14, s13
2401345a:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
2401345e:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24013462:	ee26 6a25 	vmul.f32	s12, s12, s11
24013466:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
2401346a:	ee77 7a27 	vadd.f32	s15, s14, s15
2401346e:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
24013472:	ee26 7a85 	vmul.f32	s14, s13, s10
24013476:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
2401347a:	429c      	cmp	r4, r3
2401347c:	ee76 7a27 	vadd.f32	s15, s12, s15
24013480:	ee65 6aa6 	vmul.f32	s13, s11, s13
24013484:	ee77 7a27 	vadd.f32	s15, s14, s15
24013488:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401348c:	d1db      	bne.n	24013446 <arm_fir_decimate_f32+0x272>
2401348e:	eb06 000c 	add.w	r0, r6, ip
24013492:	464a      	mov	r2, r9
24013494:	b157      	cbz	r7, 240134ac <arm_fir_decimate_f32+0x2d8>
24013496:	463b      	mov	r3, r7
24013498:	ecb2 7a01 	vldmia	r2!, {s14}
2401349c:	3b01      	subs	r3, #1
2401349e:	ecf0 6a01 	vldmia	r0!, {s13}
240134a2:	ee27 7a26 	vmul.f32	s14, s14, s13
240134a6:	ee77 7a87 	vadd.f32	s15, s15, s14
240134aa:	d1f5      	bne.n	24013498 <arm_fir_decimate_f32+0x2c4>
240134ac:	f89e 3000 	ldrb.w	r3, [lr]
240134b0:	ecea 7a01 	vstmia	sl!, {s15}
240134b4:	45c2      	cmp	sl, r8
240134b6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
240134ba:	d1ae      	bne.n	2401341a <arm_fir_decimate_f32+0x246>
240134bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
240134be:	1e5c      	subs	r4, r3, #1
240134c0:	9b01      	ldr	r3, [sp, #4]
240134c2:	08a5      	lsrs	r5, r4, #2
240134c4:	689f      	ldr	r7, [r3, #8]
240134c6:	d01d      	beq.n	24013504 <arm_fir_decimate_f32+0x330>
240134c8:	f106 0210 	add.w	r2, r6, #16
240134cc:	f107 0310 	add.w	r3, r7, #16
240134d0:	4629      	mov	r1, r5
240134d2:	f852 0c10 	ldr.w	r0, [r2, #-16]
240134d6:	3901      	subs	r1, #1
240134d8:	f102 0210 	add.w	r2, r2, #16
240134dc:	f103 0310 	add.w	r3, r3, #16
240134e0:	f843 0c20 	str.w	r0, [r3, #-32]
240134e4:	f852 0c1c 	ldr.w	r0, [r2, #-28]
240134e8:	f843 0c1c 	str.w	r0, [r3, #-28]
240134ec:	f852 0c18 	ldr.w	r0, [r2, #-24]
240134f0:	f843 0c18 	str.w	r0, [r3, #-24]
240134f4:	f852 0c14 	ldr.w	r0, [r2, #-20]
240134f8:	f843 0c14 	str.w	r0, [r3, #-20]
240134fc:	d1e9      	bne.n	240134d2 <arm_fir_decimate_f32+0x2fe>
240134fe:	012d      	lsls	r5, r5, #4
24013500:	442e      	add	r6, r5
24013502:	442f      	add	r7, r5
24013504:	f014 0403 	ands.w	r4, r4, #3
24013508:	d009      	beq.n	2401351e <arm_fir_decimate_f32+0x34a>
2401350a:	6833      	ldr	r3, [r6, #0]
2401350c:	3c01      	subs	r4, #1
2401350e:	603b      	str	r3, [r7, #0]
24013510:	d005      	beq.n	2401351e <arm_fir_decimate_f32+0x34a>
24013512:	6873      	ldr	r3, [r6, #4]
24013514:	2c01      	cmp	r4, #1
24013516:	607b      	str	r3, [r7, #4]
24013518:	d001      	beq.n	2401351e <arm_fir_decimate_f32+0x34a>
2401351a:	68b3      	ldr	r3, [r6, #8]
2401351c:	60bb      	str	r3, [r7, #8]
2401351e:	b00d      	add	sp, #52	; 0x34
24013520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013524:	4650      	mov	r0, sl
24013526:	9a08      	ldr	r2, [sp, #32]
24013528:	eef0 4a60 	vmov.f32	s9, s1
2401352c:	eef0 7a60 	vmov.f32	s15, s1
24013530:	eeb0 7a60 	vmov.f32	s14, s1
24013534:	e71f      	b.n	24013376 <arm_fir_decimate_f32+0x1a2>
24013536:	9a08      	ldr	r2, [sp, #32]
24013538:	4630      	mov	r0, r6
2401353a:	eddf 7a01 	vldr	s15, [pc, #4]	; 24013540 <arm_fir_decimate_f32+0x36c>
2401353e:	e7a9      	b.n	24013494 <arm_fir_decimate_f32+0x2c0>
24013540:	00000000 	.word	0x00000000

24013544 <arm_sin_f32>:
24013544:	eddf 7a1f 	vldr	s15, [pc, #124]	; 240135c4 <arm_sin_f32+0x80>
24013548:	ee20 0a27 	vmul.f32	s0, s0, s15
2401354c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013550:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24013554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013558:	d504      	bpl.n	24013564 <arm_sin_f32+0x20>
2401355a:	ee17 3a90 	vmov	r3, s15
2401355e:	3b01      	subs	r3, #1
24013560:	ee07 3a90 	vmov	s15, r3
24013564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013568:	eddf 6a17 	vldr	s13, [pc, #92]	; 240135c8 <arm_sin_f32+0x84>
2401356c:	ee70 7a67 	vsub.f32	s15, s0, s15
24013570:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013574:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24013578:	ee17 3a10 	vmov	r3, s14
2401357c:	b29b      	uxth	r3, r3
2401357e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24013582:	d21a      	bcs.n	240135ba <arm_sin_f32+0x76>
24013584:	ee07 3a10 	vmov	s14, r3
24013588:	1c59      	adds	r1, r3, #1
2401358a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
2401358e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24013592:	4a0e      	ldr	r2, [pc, #56]	; (240135cc <arm_sin_f32+0x88>)
24013594:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24013598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401359c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240135a0:	ee30 0a67 	vsub.f32	s0, s0, s15
240135a4:	edd3 6a00 	vldr	s13, [r3]
240135a8:	ed92 7a00 	vldr	s14, [r2]
240135ac:	ee20 0a26 	vmul.f32	s0, s0, s13
240135b0:	ee67 7a87 	vmul.f32	s15, s15, s14
240135b4:	ee30 0a27 	vadd.f32	s0, s0, s15
240135b8:	4770      	bx	lr
240135ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
240135be:	2101      	movs	r1, #1
240135c0:	2300      	movs	r3, #0
240135c2:	e7e6      	b.n	24013592 <arm_sin_f32+0x4e>
240135c4:	3e22f983 	.word	0x3e22f983
240135c8:	44000000 	.word	0x44000000
240135cc:	2402d250 	.word	0x2402d250

240135d0 <__errno>:
240135d0:	4b01      	ldr	r3, [pc, #4]	; (240135d8 <__errno+0x8>)
240135d2:	6818      	ldr	r0, [r3, #0]
240135d4:	4770      	bx	lr
240135d6:	bf00      	nop
240135d8:	200007e4 	.word	0x200007e4

240135dc <__libc_init_array>:
240135dc:	b570      	push	{r4, r5, r6, lr}
240135de:	4d0d      	ldr	r5, [pc, #52]	; (24013614 <__libc_init_array+0x38>)
240135e0:	4c0d      	ldr	r4, [pc, #52]	; (24013618 <__libc_init_array+0x3c>)
240135e2:	1b64      	subs	r4, r4, r5
240135e4:	10a4      	asrs	r4, r4, #2
240135e6:	2600      	movs	r6, #0
240135e8:	42a6      	cmp	r6, r4
240135ea:	d109      	bne.n	24013600 <__libc_init_array+0x24>
240135ec:	4d0b      	ldr	r5, [pc, #44]	; (2401361c <__libc_init_array+0x40>)
240135ee:	4c0c      	ldr	r4, [pc, #48]	; (24013620 <__libc_init_array+0x44>)
240135f0:	f01b fc52 	bl	2402ee98 <_init>
240135f4:	1b64      	subs	r4, r4, r5
240135f6:	10a4      	asrs	r4, r4, #2
240135f8:	2600      	movs	r6, #0
240135fa:	42a6      	cmp	r6, r4
240135fc:	d105      	bne.n	2401360a <__libc_init_array+0x2e>
240135fe:	bd70      	pop	{r4, r5, r6, pc}
24013600:	f855 3b04 	ldr.w	r3, [r5], #4
24013604:	4798      	blx	r3
24013606:	3601      	adds	r6, #1
24013608:	e7ee      	b.n	240135e8 <__libc_init_array+0xc>
2401360a:	f855 3b04 	ldr.w	r3, [r5], #4
2401360e:	4798      	blx	r3
24013610:	3601      	adds	r6, #1
24013612:	e7f2      	b.n	240135fa <__libc_init_array+0x1e>
24013614:	2402ef30 	.word	0x2402ef30
24013618:	2402ef30 	.word	0x2402ef30
2401361c:	2402ef30 	.word	0x2402ef30
24013620:	2402ef34 	.word	0x2402ef34

24013624 <__itoa>:
24013624:	1e93      	subs	r3, r2, #2
24013626:	2b22      	cmp	r3, #34	; 0x22
24013628:	b510      	push	{r4, lr}
2401362a:	460c      	mov	r4, r1
2401362c:	d904      	bls.n	24013638 <__itoa+0x14>
2401362e:	2300      	movs	r3, #0
24013630:	700b      	strb	r3, [r1, #0]
24013632:	461c      	mov	r4, r3
24013634:	4620      	mov	r0, r4
24013636:	bd10      	pop	{r4, pc}
24013638:	2a0a      	cmp	r2, #10
2401363a:	d109      	bne.n	24013650 <__itoa+0x2c>
2401363c:	2800      	cmp	r0, #0
2401363e:	da07      	bge.n	24013650 <__itoa+0x2c>
24013640:	232d      	movs	r3, #45	; 0x2d
24013642:	700b      	strb	r3, [r1, #0]
24013644:	4240      	negs	r0, r0
24013646:	2101      	movs	r1, #1
24013648:	4421      	add	r1, r4
2401364a:	f000 f83b 	bl	240136c4 <__utoa>
2401364e:	e7f1      	b.n	24013634 <__itoa+0x10>
24013650:	2100      	movs	r1, #0
24013652:	e7f9      	b.n	24013648 <__itoa+0x24>

24013654 <itoa>:
24013654:	f7ff bfe6 	b.w	24013624 <__itoa>

24013658 <memset>:
24013658:	4402      	add	r2, r0
2401365a:	4603      	mov	r3, r0
2401365c:	4293      	cmp	r3, r2
2401365e:	d100      	bne.n	24013662 <memset+0xa>
24013660:	4770      	bx	lr
24013662:	f803 1b01 	strb.w	r1, [r3], #1
24013666:	e7f9      	b.n	2401365c <memset+0x4>

24013668 <frexpf>:
24013668:	ee10 3a10 	vmov	r3, s0
2401366c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24013670:	2100      	movs	r1, #0
24013672:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24013676:	6001      	str	r1, [r0, #0]
24013678:	da19      	bge.n	240136ae <frexpf+0x46>
2401367a:	b1c2      	cbz	r2, 240136ae <frexpf+0x46>
2401367c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24013680:	d10a      	bne.n	24013698 <frexpf+0x30>
24013682:	eddf 7a0b 	vldr	s15, [pc, #44]	; 240136b0 <frexpf+0x48>
24013686:	ee60 7a27 	vmul.f32	s15, s0, s15
2401368a:	f06f 0118 	mvn.w	r1, #24
2401368e:	ee17 3a90 	vmov	r3, s15
24013692:	6001      	str	r1, [r0, #0]
24013694:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24013698:	6801      	ldr	r1, [r0, #0]
2401369a:	15d2      	asrs	r2, r2, #23
2401369c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
240136a0:	3a7e      	subs	r2, #126	; 0x7e
240136a2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
240136a6:	440a      	add	r2, r1
240136a8:	ee00 3a10 	vmov	s0, r3
240136ac:	6002      	str	r2, [r0, #0]
240136ae:	4770      	bx	lr
240136b0:	4c000000 	.word	0x4c000000

240136b4 <strcpy>:
240136b4:	4603      	mov	r3, r0
240136b6:	f811 2b01 	ldrb.w	r2, [r1], #1
240136ba:	f803 2b01 	strb.w	r2, [r3], #1
240136be:	2a00      	cmp	r2, #0
240136c0:	d1f9      	bne.n	240136b6 <strcpy+0x2>
240136c2:	4770      	bx	lr

240136c4 <__utoa>:
240136c4:	b5f0      	push	{r4, r5, r6, r7, lr}
240136c6:	4c1f      	ldr	r4, [pc, #124]	; (24013744 <__utoa+0x80>)
240136c8:	b08b      	sub	sp, #44	; 0x2c
240136ca:	4605      	mov	r5, r0
240136cc:	460b      	mov	r3, r1
240136ce:	466e      	mov	r6, sp
240136d0:	f104 0c20 	add.w	ip, r4, #32
240136d4:	6820      	ldr	r0, [r4, #0]
240136d6:	6861      	ldr	r1, [r4, #4]
240136d8:	4637      	mov	r7, r6
240136da:	c703      	stmia	r7!, {r0, r1}
240136dc:	3408      	adds	r4, #8
240136de:	4564      	cmp	r4, ip
240136e0:	463e      	mov	r6, r7
240136e2:	d1f7      	bne.n	240136d4 <__utoa+0x10>
240136e4:	7921      	ldrb	r1, [r4, #4]
240136e6:	7139      	strb	r1, [r7, #4]
240136e8:	1e91      	subs	r1, r2, #2
240136ea:	6820      	ldr	r0, [r4, #0]
240136ec:	6038      	str	r0, [r7, #0]
240136ee:	2922      	cmp	r1, #34	; 0x22
240136f0:	f04f 0100 	mov.w	r1, #0
240136f4:	d904      	bls.n	24013700 <__utoa+0x3c>
240136f6:	7019      	strb	r1, [r3, #0]
240136f8:	460b      	mov	r3, r1
240136fa:	4618      	mov	r0, r3
240136fc:	b00b      	add	sp, #44	; 0x2c
240136fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
24013700:	1e58      	subs	r0, r3, #1
24013702:	4684      	mov	ip, r0
24013704:	fbb5 f7f2 	udiv	r7, r5, r2
24013708:	fb02 5617 	mls	r6, r2, r7, r5
2401370c:	3628      	adds	r6, #40	; 0x28
2401370e:	446e      	add	r6, sp
24013710:	460c      	mov	r4, r1
24013712:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24013716:	f80c 6f01 	strb.w	r6, [ip, #1]!
2401371a:	462e      	mov	r6, r5
2401371c:	42b2      	cmp	r2, r6
2401371e:	f101 0101 	add.w	r1, r1, #1
24013722:	463d      	mov	r5, r7
24013724:	d9ee      	bls.n	24013704 <__utoa+0x40>
24013726:	2200      	movs	r2, #0
24013728:	545a      	strb	r2, [r3, r1]
2401372a:	1919      	adds	r1, r3, r4
2401372c:	1aa5      	subs	r5, r4, r2
2401372e:	42aa      	cmp	r2, r5
24013730:	dae3      	bge.n	240136fa <__utoa+0x36>
24013732:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24013736:	780e      	ldrb	r6, [r1, #0]
24013738:	7006      	strb	r6, [r0, #0]
2401373a:	3201      	adds	r2, #1
2401373c:	f801 5901 	strb.w	r5, [r1], #-1
24013740:	e7f4      	b.n	2401372c <__utoa+0x68>
24013742:	bf00      	nop
24013744:	2402da54 	.word	0x2402da54

24013748 <sinf_poly>:
24013748:	07cb      	lsls	r3, r1, #31
2401374a:	d412      	bmi.n	24013772 <sinf_poly+0x2a>
2401374c:	ee21 5b00 	vmul.f64	d5, d1, d0
24013750:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
24013754:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
24013758:	eea6 7b01 	vfma.f64	d7, d6, d1
2401375c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
24013760:	ee21 1b05 	vmul.f64	d1, d1, d5
24013764:	eea6 0b05 	vfma.f64	d0, d6, d5
24013768:	eea7 0b01 	vfma.f64	d0, d7, d1
2401376c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013770:	4770      	bx	lr
24013772:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
24013776:	ee21 5b01 	vmul.f64	d5, d1, d1
2401377a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
2401377e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
24013782:	eea1 7b06 	vfma.f64	d7, d1, d6
24013786:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
2401378a:	eea1 0b06 	vfma.f64	d0, d1, d6
2401378e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
24013792:	ee21 1b05 	vmul.f64	d1, d1, d5
24013796:	eea5 0b06 	vfma.f64	d0, d5, d6
2401379a:	e7e5      	b.n	24013768 <sinf_poly+0x20>
2401379c:	0000      	movs	r0, r0
	...

240137a0 <cosf>:
240137a0:	b538      	push	{r3, r4, r5, lr}
240137a2:	ee10 4a10 	vmov	r4, s0
240137a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
240137aa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
240137ae:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
240137b2:	d21f      	bcs.n	240137f4 <cosf+0x54>
240137b4:	ee27 0b07 	vmul.f64	d0, d7, d7
240137b8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
240137bc:	f0c0 8088 	bcc.w	240138d0 <cosf+0x130>
240137c0:	ee20 4b00 	vmul.f64	d4, d0, d0
240137c4:	4b46      	ldr	r3, [pc, #280]	; (240138e0 <cosf+0x140>)
240137c6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
240137ca:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
240137ce:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
240137d2:	eea0 6b05 	vfma.f64	d6, d0, d5
240137d6:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
240137da:	eea0 7b05 	vfma.f64	d7, d0, d5
240137de:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
240137e2:	ee20 0b04 	vmul.f64	d0, d0, d4
240137e6:	eea4 7b05 	vfma.f64	d7, d4, d5
240137ea:	eea6 7b00 	vfma.f64	d7, d6, d0
240137ee:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
240137f2:	bd38      	pop	{r3, r4, r5, pc}
240137f4:	f240 422e 	movw	r2, #1070	; 0x42e
240137f8:	4293      	cmp	r3, r2
240137fa:	d82b      	bhi.n	24013854 <cosf+0xb4>
240137fc:	4b38      	ldr	r3, [pc, #224]	; (240138e0 <cosf+0x140>)
240137fe:	ed93 6b08 	vldr	d6, [r3, #32]
24013802:	ee27 6b06 	vmul.f64	d6, d7, d6
24013806:	eefd 6bc6 	vcvt.s32.f64	s13, d6
2401380a:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401380e:	ee16 1a90 	vmov	r1, s13
24013812:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
24013816:	1609      	asrs	r1, r1, #24
24013818:	ee06 1a90 	vmov	s13, r1
2401381c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
24013820:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
24013824:	f001 0203 	and.w	r2, r1, #3
24013828:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401382c:	eea5 7b46 	vfms.f64	d7, d5, d6
24013830:	eeb0 0b47 	vmov.f64	d0, d7
24013834:	ed92 7b00 	vldr	d7, [r2]
24013838:	ee20 1b00 	vmul.f64	d1, d0, d0
2401383c:	f011 0f02 	tst.w	r1, #2
24013840:	bf08      	it	eq
24013842:	4618      	moveq	r0, r3
24013844:	f081 0101 	eor.w	r1, r1, #1
24013848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401384c:	ee20 0b07 	vmul.f64	d0, d0, d7
24013850:	f7ff bf7a 	b.w	24013748 <sinf_poly>
24013854:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24013858:	d236      	bcs.n	240138c8 <cosf+0x128>
2401385a:	4a22      	ldr	r2, [pc, #136]	; (240138e4 <cosf+0x144>)
2401385c:	f3c4 6183 	ubfx	r1, r4, #26, #4
24013860:	eb02 0581 	add.w	r5, r2, r1, lsl #2
24013864:	f3c4 0316 	ubfx	r3, r4, #0, #23
24013868:	f3c4 50c2 	ubfx	r0, r4, #23, #3
2401386c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24013870:	4083      	lsls	r3, r0
24013872:	6a28      	ldr	r0, [r5, #32]
24013874:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
24013878:	fba3 1000 	umull	r1, r0, r3, r0
2401387c:	6929      	ldr	r1, [r5, #16]
2401387e:	435a      	muls	r2, r3
24013880:	fbe3 0201 	umlal	r0, r2, r3, r1
24013884:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
24013888:	0f8d      	lsrs	r5, r1, #30
2401388a:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
2401388e:	1a51      	subs	r1, r2, r1
24013890:	f7ec feb8 	bl	24000604 <__aeabi_l2d>
24013894:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
24013898:	4b11      	ldr	r3, [pc, #68]	; (240138e0 <cosf+0x140>)
2401389a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 240138d8 <cosf+0x138>
2401389e:	ec41 0b16 	vmov	d6, r0, r1
240138a2:	f004 0203 	and.w	r2, r4, #3
240138a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
240138aa:	f014 0f02 	tst.w	r4, #2
240138ae:	f103 0070 	add.w	r0, r3, #112	; 0x70
240138b2:	ee26 7b07 	vmul.f64	d7, d6, d7
240138b6:	ed92 0b00 	vldr	d0, [r2]
240138ba:	ee27 1b07 	vmul.f64	d1, d7, d7
240138be:	f085 0101 	eor.w	r1, r5, #1
240138c2:	bf08      	it	eq
240138c4:	4618      	moveq	r0, r3
240138c6:	e7bf      	b.n	24013848 <cosf+0xa8>
240138c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240138cc:	f000 b964 	b.w	24013b98 <__math_invalidf>
240138d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240138d4:	e78d      	b.n	240137f2 <cosf+0x52>
240138d6:	bf00      	nop
240138d8:	54442d18 	.word	0x54442d18
240138dc:	3c1921fb 	.word	0x3c1921fb
240138e0:	2402e808 	.word	0x2402e808
240138e4:	2402e7a8 	.word	0x2402e7a8

240138e8 <exp>:
240138e8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
240138ea:	ee10 3a90 	vmov	r3, s1
240138ee:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
240138f2:	f3c3 540a 	ubfx	r4, r3, #20, #11
240138f6:	18a2      	adds	r2, r4, r2
240138f8:	2a3e      	cmp	r2, #62	; 0x3e
240138fa:	ee10 1a10 	vmov	r1, s0
240138fe:	d922      	bls.n	24013946 <exp+0x5e>
24013900:	2a00      	cmp	r2, #0
24013902:	da06      	bge.n	24013912 <exp+0x2a>
24013904:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24013908:	ee30 0b07 	vadd.f64	d0, d0, d7
2401390c:	b004      	add	sp, #16
2401390e:	bcf0      	pop	{r4, r5, r6, r7}
24013910:	4770      	bx	lr
24013912:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24013916:	f04f 0000 	mov.w	r0, #0
2401391a:	d913      	bls.n	24013944 <exp+0x5c>
2401391c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24013920:	bf08      	it	eq
24013922:	4281      	cmpeq	r1, r0
24013924:	f000 80a0 	beq.w	24013a68 <exp+0x180>
24013928:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401392c:	4294      	cmp	r4, r2
2401392e:	d0e9      	beq.n	24013904 <exp+0x1c>
24013930:	4283      	cmp	r3, r0
24013932:	da03      	bge.n	2401393c <exp+0x54>
24013934:	b004      	add	sp, #16
24013936:	bcf0      	pop	{r4, r5, r6, r7}
24013938:	f000 b8c6 	b.w	24013ac8 <__math_uflow>
2401393c:	b004      	add	sp, #16
2401393e:	bcf0      	pop	{r4, r5, r6, r7}
24013940:	f000 b8ca 	b.w	24013ad8 <__math_oflow>
24013944:	4604      	mov	r4, r0
24013946:	4950      	ldr	r1, [pc, #320]	; (24013a88 <exp+0x1a0>)
24013948:	ed91 6b02 	vldr	d6, [r1, #8]
2401394c:	ed91 5b00 	vldr	d5, [r1]
24013950:	eeb0 7b46 	vmov.f64	d7, d6
24013954:	eea5 7b00 	vfma.f64	d7, d5, d0
24013958:	ee17 5a10 	vmov	r5, s14
2401395c:	ee37 7b46 	vsub.f64	d7, d7, d6
24013960:	ed91 6b04 	vldr	d6, [r1, #16]
24013964:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24013968:	eea6 0b07 	vfma.f64	d0, d6, d7
2401396c:	ed91 6b06 	vldr	d6, [r1, #24]
24013970:	18d8      	adds	r0, r3, r3
24013972:	f100 030f 	add.w	r3, r0, #15
24013976:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
2401397a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401397e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
24013982:	ee20 7b00 	vmul.f64	d7, d0, d0
24013986:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
2401398a:	ed91 5b08 	vldr	d5, [r1, #32]
2401398e:	ee30 6b06 	vadd.f64	d6, d0, d6
24013992:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
24013996:	eea4 5b00 	vfma.f64	d5, d4, d0
2401399a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
2401399e:	eea5 6b07 	vfma.f64	d6, d5, d7
240139a2:	ee27 7b07 	vmul.f64	d7, d7, d7
240139a6:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
240139aa:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
240139ae:	f8d2 c004 	ldr.w	ip, [r2, #4]
240139b2:	eea4 5b00 	vfma.f64	d5, d4, d0
240139b6:	2600      	movs	r6, #0
240139b8:	19f2      	adds	r2, r6, r7
240139ba:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
240139be:	eea7 6b05 	vfma.f64	d6, d7, d5
240139c2:	2c00      	cmp	r4, #0
240139c4:	d14b      	bne.n	24013a5e <exp+0x176>
240139c6:	42b5      	cmp	r5, r6
240139c8:	db10      	blt.n	240139ec <exp+0x104>
240139ca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
240139ce:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24013a70 <exp+0x188>
240139d2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
240139d6:	4610      	mov	r0, r2
240139d8:	ec41 0b10 	vmov	d0, r0, r1
240139dc:	eea6 0b00 	vfma.f64	d0, d6, d0
240139e0:	ee20 0b07 	vmul.f64	d0, d0, d7
240139e4:	b004      	add	sp, #16
240139e6:	bcf0      	pop	{r4, r5, r6, r7}
240139e8:	f000 b88a 	b.w	24013b00 <__math_check_oflow>
240139ec:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
240139f0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
240139f4:	4610      	mov	r0, r2
240139f6:	ec41 0b17 	vmov	d7, r0, r1
240139fa:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
240139fe:	ee26 6b07 	vmul.f64	d6, d6, d7
24013a02:	ee37 5b06 	vadd.f64	d5, d7, d6
24013a06:	eeb4 5bc4 	vcmpe.f64	d5, d4
24013a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013a0e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24013a78 <exp+0x190>
24013a12:	d51e      	bpl.n	24013a52 <exp+0x16a>
24013a14:	ee35 3b04 	vadd.f64	d3, d5, d4
24013a18:	ee37 7b45 	vsub.f64	d7, d7, d5
24013a1c:	ee37 7b06 	vadd.f64	d7, d7, d6
24013a20:	ee34 6b43 	vsub.f64	d6, d4, d3
24013a24:	ee36 5b05 	vadd.f64	d5, d6, d5
24013a28:	ee35 5b07 	vadd.f64	d5, d5, d7
24013a2c:	ee35 5b03 	vadd.f64	d5, d5, d3
24013a30:	ee35 5b44 	vsub.f64	d5, d5, d4
24013a34:	eeb5 5b40 	vcmp.f64	d5, #0.0
24013a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013a3c:	d101      	bne.n	24013a42 <exp+0x15a>
24013a3e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24013a80 <exp+0x198>
24013a42:	ed8d 0b00 	vstr	d0, [sp]
24013a46:	ed9d 7b00 	vldr	d7, [sp]
24013a4a:	ee27 7b00 	vmul.f64	d7, d7, d0
24013a4e:	ed8d 7b02 	vstr	d7, [sp, #8]
24013a52:	ee25 0b00 	vmul.f64	d0, d5, d0
24013a56:	b004      	add	sp, #16
24013a58:	bcf0      	pop	{r4, r5, r6, r7}
24013a5a:	f000 b845 	b.w	24013ae8 <__math_check_uflow>
24013a5e:	ec43 2b10 	vmov	d0, r2, r3
24013a62:	eea6 0b00 	vfma.f64	d0, d6, d0
24013a66:	e751      	b.n	2401390c <exp+0x24>
24013a68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24013a80 <exp+0x198>
24013a6c:	e74e      	b.n	2401390c <exp+0x24>
24013a6e:	bf00      	nop
24013a70:	00000000 	.word	0x00000000
24013a74:	7f000000 	.word	0x7f000000
24013a78:	00000000 	.word	0x00000000
24013a7c:	00100000 	.word	0x00100000
	...
24013a88:	2402da80 	.word	0x2402da80

24013a8c <with_errno>:
24013a8c:	b513      	push	{r0, r1, r4, lr}
24013a8e:	4604      	mov	r4, r0
24013a90:	ed8d 0b00 	vstr	d0, [sp]
24013a94:	f7ff fd9c 	bl	240135d0 <__errno>
24013a98:	ed9d 0b00 	vldr	d0, [sp]
24013a9c:	6004      	str	r4, [r0, #0]
24013a9e:	b002      	add	sp, #8
24013aa0:	bd10      	pop	{r4, pc}

24013aa2 <xflow>:
24013aa2:	b082      	sub	sp, #8
24013aa4:	b158      	cbz	r0, 24013abe <xflow+0x1c>
24013aa6:	eeb1 7b40 	vneg.f64	d7, d0
24013aaa:	ed8d 7b00 	vstr	d7, [sp]
24013aae:	ed9d 7b00 	vldr	d7, [sp]
24013ab2:	2022      	movs	r0, #34	; 0x22
24013ab4:	ee20 0b07 	vmul.f64	d0, d0, d7
24013ab8:	b002      	add	sp, #8
24013aba:	f7ff bfe7 	b.w	24013a8c <with_errno>
24013abe:	eeb0 7b40 	vmov.f64	d7, d0
24013ac2:	e7f2      	b.n	24013aaa <xflow+0x8>
24013ac4:	0000      	movs	r0, r0
	...

24013ac8 <__math_uflow>:
24013ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24013ad0 <__math_uflow+0x8>
24013acc:	f7ff bfe9 	b.w	24013aa2 <xflow>
24013ad0:	00000000 	.word	0x00000000
24013ad4:	10000000 	.word	0x10000000

24013ad8 <__math_oflow>:
24013ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24013ae0 <__math_oflow+0x8>
24013adc:	f7ff bfe1 	b.w	24013aa2 <xflow>
24013ae0:	00000000 	.word	0x00000000
24013ae4:	70000000 	.word	0x70000000

24013ae8 <__math_check_uflow>:
24013ae8:	eeb5 0b40 	vcmp.f64	d0, #0.0
24013aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013af0:	d102      	bne.n	24013af8 <__math_check_uflow+0x10>
24013af2:	2022      	movs	r0, #34	; 0x22
24013af4:	f7ff bfca 	b.w	24013a8c <with_errno>
24013af8:	4770      	bx	lr
24013afa:	0000      	movs	r0, r0
24013afc:	0000      	movs	r0, r0
	...

24013b00 <__math_check_oflow>:
24013b00:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24013b20 <__math_check_oflow+0x20>
24013b04:	eeb0 7bc0 	vabs.f64	d7, d0
24013b08:	eeb4 7b46 	vcmp.f64	d7, d6
24013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013b10:	dd02      	ble.n	24013b18 <__math_check_oflow+0x18>
24013b12:	2022      	movs	r0, #34	; 0x22
24013b14:	f7ff bfba 	b.w	24013a8c <with_errno>
24013b18:	4770      	bx	lr
24013b1a:	bf00      	nop
24013b1c:	f3af 8000 	nop.w
24013b20:	ffffffff 	.word	0xffffffff
24013b24:	7fefffff 	.word	0x7fefffff

24013b28 <with_errnof>:
24013b28:	b513      	push	{r0, r1, r4, lr}
24013b2a:	4604      	mov	r4, r0
24013b2c:	ed8d 0a01 	vstr	s0, [sp, #4]
24013b30:	f7ff fd4e 	bl	240135d0 <__errno>
24013b34:	ed9d 0a01 	vldr	s0, [sp, #4]
24013b38:	6004      	str	r4, [r0, #0]
24013b3a:	b002      	add	sp, #8
24013b3c:	bd10      	pop	{r4, pc}

24013b3e <xflowf>:
24013b3e:	b130      	cbz	r0, 24013b4e <xflowf+0x10>
24013b40:	eef1 7a40 	vneg.f32	s15, s0
24013b44:	ee27 0a80 	vmul.f32	s0, s15, s0
24013b48:	2022      	movs	r0, #34	; 0x22
24013b4a:	f7ff bfed 	b.w	24013b28 <with_errnof>
24013b4e:	eef0 7a40 	vmov.f32	s15, s0
24013b52:	e7f7      	b.n	24013b44 <xflowf+0x6>

24013b54 <__math_uflowf>:
24013b54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24013b5c <__math_uflowf+0x8>
24013b58:	f7ff bff1 	b.w	24013b3e <xflowf>
24013b5c:	10000000 	.word	0x10000000

24013b60 <__math_may_uflowf>:
24013b60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24013b68 <__math_may_uflowf+0x8>
24013b64:	f7ff bfeb 	b.w	24013b3e <xflowf>
24013b68:	1a200000 	.word	0x1a200000

24013b6c <__math_oflowf>:
24013b6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24013b74 <__math_oflowf+0x8>
24013b70:	f7ff bfe5 	b.w	24013b3e <xflowf>
24013b74:	70000000 	.word	0x70000000

24013b78 <__math_divzerof>:
24013b78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24013b7c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24013b80:	2800      	cmp	r0, #0
24013b82:	fe40 7a27 	vseleq.f32	s15, s0, s15
24013b86:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24013b94 <__math_divzerof+0x1c>
24013b8a:	2022      	movs	r0, #34	; 0x22
24013b8c:	ee87 0a80 	vdiv.f32	s0, s15, s0
24013b90:	f7ff bfca 	b.w	24013b28 <with_errnof>
24013b94:	00000000 	.word	0x00000000

24013b98 <__math_invalidf>:
24013b98:	eef0 7a40 	vmov.f32	s15, s0
24013b9c:	ee30 7a40 	vsub.f32	s14, s0, s0
24013ba0:	eef4 7a67 	vcmp.f32	s15, s15
24013ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013ba8:	ee87 0a07 	vdiv.f32	s0, s14, s14
24013bac:	d602      	bvs.n	24013bb4 <__math_invalidf+0x1c>
24013bae:	2021      	movs	r0, #33	; 0x21
24013bb0:	f7ff bfba 	b.w	24013b28 <with_errnof>
24013bb4:	4770      	bx	lr
	...

24013bb8 <tan>:
24013bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
24013bba:	eeb0 7b40 	vmov.f64	d7, d0
24013bbe:	ee17 3a90 	vmov	r3, s15
24013bc2:	4a15      	ldr	r2, [pc, #84]	; (24013c18 <tan+0x60>)
24013bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24013bc8:	4293      	cmp	r3, r2
24013bca:	dc07      	bgt.n	24013bdc <tan+0x24>
24013bcc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 24013c10 <tan+0x58>
24013bd0:	2001      	movs	r0, #1
24013bd2:	b005      	add	sp, #20
24013bd4:	f85d eb04 	ldr.w	lr, [sp], #4
24013bd8:	f001 ba06 	b.w	24014fe8 <__kernel_tan>
24013bdc:	4a0f      	ldr	r2, [pc, #60]	; (24013c1c <tan+0x64>)
24013bde:	4293      	cmp	r3, r2
24013be0:	dd04      	ble.n	24013bec <tan+0x34>
24013be2:	ee30 0b40 	vsub.f64	d0, d0, d0
24013be6:	b005      	add	sp, #20
24013be8:	f85d fb04 	ldr.w	pc, [sp], #4
24013bec:	4668      	mov	r0, sp
24013bee:	f000 fc03 	bl	240143f8 <__ieee754_rem_pio2>
24013bf2:	0040      	lsls	r0, r0, #1
24013bf4:	f000 0002 	and.w	r0, r0, #2
24013bf8:	ed9d 1b02 	vldr	d1, [sp, #8]
24013bfc:	ed9d 0b00 	vldr	d0, [sp]
24013c00:	f1c0 0001 	rsb	r0, r0, #1
24013c04:	f001 f9f0 	bl	24014fe8 <__kernel_tan>
24013c08:	e7ed      	b.n	24013be6 <tan+0x2e>
24013c0a:	bf00      	nop
24013c0c:	f3af 8000 	nop.w
	...
24013c18:	3fe921fb 	.word	0x3fe921fb
24013c1c:	7fefffff 	.word	0x7fefffff

24013c20 <expf>:
24013c20:	ee10 2a10 	vmov	r2, s0
24013c24:	f240 412a 	movw	r1, #1066	; 0x42a
24013c28:	f3c2 530a 	ubfx	r3, r2, #20, #11
24013c2c:	428b      	cmp	r3, r1
24013c2e:	b430      	push	{r4, r5}
24013c30:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24013c34:	d92a      	bls.n	24013c8c <expf+0x6c>
24013c36:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24013c3a:	d058      	beq.n	24013cee <expf+0xce>
24013c3c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24013c40:	d303      	bcc.n	24013c4a <expf+0x2a>
24013c42:	ee30 0a00 	vadd.f32	s0, s0, s0
24013c46:	bc30      	pop	{r4, r5}
24013c48:	4770      	bx	lr
24013c4a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24013cf4 <expf+0xd4>
24013c4e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c56:	dd03      	ble.n	24013c60 <expf+0x40>
24013c58:	bc30      	pop	{r4, r5}
24013c5a:	2000      	movs	r0, #0
24013c5c:	f7ff bf86 	b.w	24013b6c <__math_oflowf>
24013c60:	eddf 7a25 	vldr	s15, [pc, #148]	; 24013cf8 <expf+0xd8>
24013c64:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c6c:	d503      	bpl.n	24013c76 <expf+0x56>
24013c6e:	bc30      	pop	{r4, r5}
24013c70:	2000      	movs	r0, #0
24013c72:	f7ff bf6f 	b.w	24013b54 <__math_uflowf>
24013c76:	eddf 7a21 	vldr	s15, [pc, #132]	; 24013cfc <expf+0xdc>
24013c7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24013c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013c82:	d503      	bpl.n	24013c8c <expf+0x6c>
24013c84:	bc30      	pop	{r4, r5}
24013c86:	2000      	movs	r0, #0
24013c88:	f7ff bf6a 	b.w	24013b60 <__math_may_uflowf>
24013c8c:	4b1c      	ldr	r3, [pc, #112]	; (24013d00 <expf+0xe0>)
24013c8e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24013c92:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24013c96:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24013c9a:	eeb0 7b44 	vmov.f64	d7, d4
24013c9e:	eea5 7b06 	vfma.f64	d7, d5, d6
24013ca2:	ee17 0a10 	vmov	r0, s14
24013ca6:	ee37 7b44 	vsub.f64	d7, d7, d4
24013caa:	f000 021f 	and.w	r2, r0, #31
24013cae:	ee95 7b06 	vfnms.f64	d7, d5, d6
24013cb2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24013cb6:	ee27 4b07 	vmul.f64	d4, d7, d7
24013cba:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24013cbe:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24013cc2:	eea5 6b07 	vfma.f64	d6, d5, d7
24013cc6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24013cca:	684d      	ldr	r5, [r1, #4]
24013ccc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24013cd0:	2100      	movs	r1, #0
24013cd2:	190a      	adds	r2, r1, r4
24013cd4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24013cd8:	eea5 0b07 	vfma.f64	d0, d5, d7
24013cdc:	ec43 2b17 	vmov	d7, r2, r3
24013ce0:	eea6 0b04 	vfma.f64	d0, d6, d4
24013ce4:	ee20 0b07 	vmul.f64	d0, d0, d7
24013ce8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013cec:	e7ab      	b.n	24013c46 <expf+0x26>
24013cee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24013d04 <expf+0xe4>
24013cf2:	e7a8      	b.n	24013c46 <expf+0x26>
24013cf4:	42b17217 	.word	0x42b17217
24013cf8:	c2cff1b4 	.word	0xc2cff1b4
24013cfc:	c2ce8ecf 	.word	0xc2ce8ecf
24013d00:	2402e2f0 	.word	0x2402e2f0
24013d04:	00000000 	.word	0x00000000

24013d08 <fabsf>:
24013d08:	ee10 3a10 	vmov	r3, s0
24013d0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24013d10:	ee00 3a10 	vmov	s0, r3
24013d14:	4770      	bx	lr
	...

24013d18 <logf>:
24013d18:	ee10 3a10 	vmov	r3, s0
24013d1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24013d20:	b410      	push	{r4}
24013d22:	d055      	beq.n	24013dd0 <logf+0xb8>
24013d24:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24013d28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24013d2c:	d31a      	bcc.n	24013d64 <logf+0x4c>
24013d2e:	005a      	lsls	r2, r3, #1
24013d30:	d104      	bne.n	24013d3c <logf+0x24>
24013d32:	f85d 4b04 	ldr.w	r4, [sp], #4
24013d36:	2001      	movs	r0, #1
24013d38:	f7ff bf1e 	b.w	24013b78 <__math_divzerof>
24013d3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24013d40:	d043      	beq.n	24013dca <logf+0xb2>
24013d42:	2b00      	cmp	r3, #0
24013d44:	db02      	blt.n	24013d4c <logf+0x34>
24013d46:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24013d4a:	d303      	bcc.n	24013d54 <logf+0x3c>
24013d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
24013d50:	f7ff bf22 	b.w	24013b98 <__math_invalidf>
24013d54:	eddf 7a20 	vldr	s15, [pc, #128]	; 24013dd8 <logf+0xc0>
24013d58:	ee20 0a27 	vmul.f32	s0, s0, s15
24013d5c:	ee10 3a10 	vmov	r3, s0
24013d60:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24013d64:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24013d68:	491c      	ldr	r1, [pc, #112]	; (24013ddc <logf+0xc4>)
24013d6a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24013d6e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24013d72:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24013d76:	0dd4      	lsrs	r4, r2, #23
24013d78:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24013d7c:	05e4      	lsls	r4, r4, #23
24013d7e:	ed90 6b00 	vldr	d6, [r0]
24013d82:	1b1b      	subs	r3, r3, r4
24013d84:	ee07 3a90 	vmov	s15, r3
24013d88:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24013d8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24013d90:	15d2      	asrs	r2, r2, #23
24013d92:	eea6 0b07 	vfma.f64	d0, d6, d7
24013d96:	ed90 6b02 	vldr	d6, [r0, #8]
24013d9a:	ee20 4b00 	vmul.f64	d4, d0, d0
24013d9e:	ee07 2a90 	vmov	s15, r2
24013da2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24013da6:	eea7 6b05 	vfma.f64	d6, d7, d5
24013daa:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24013dae:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24013db2:	eea5 7b00 	vfma.f64	d7, d5, d0
24013db6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24013dba:	ee30 0b06 	vadd.f64	d0, d0, d6
24013dbe:	eea5 7b04 	vfma.f64	d7, d5, d4
24013dc2:	eea4 0b07 	vfma.f64	d0, d4, d7
24013dc6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013dca:	f85d 4b04 	ldr.w	r4, [sp], #4
24013dce:	4770      	bx	lr
24013dd0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24013de0 <logf+0xc8>
24013dd4:	e7f9      	b.n	24013dca <logf+0xb2>
24013dd6:	bf00      	nop
24013dd8:	4b000000 	.word	0x4b000000
24013ddc:	2402e558 	.word	0x2402e558
24013de0:	00000000 	.word	0x00000000

24013de4 <log2f>:
24013de4:	ee10 2a10 	vmov	r2, s0
24013de8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
24013dec:	b410      	push	{r4}
24013dee:	d055      	beq.n	24013e9c <log2f+0xb8>
24013df0:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
24013df4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24013df8:	d31a      	bcc.n	24013e30 <log2f+0x4c>
24013dfa:	0053      	lsls	r3, r2, #1
24013dfc:	d104      	bne.n	24013e08 <log2f+0x24>
24013dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
24013e02:	2001      	movs	r0, #1
24013e04:	f7ff beb8 	b.w	24013b78 <__math_divzerof>
24013e08:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24013e0c:	d043      	beq.n	24013e96 <log2f+0xb2>
24013e0e:	2a00      	cmp	r2, #0
24013e10:	db02      	blt.n	24013e18 <log2f+0x34>
24013e12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
24013e16:	d303      	bcc.n	24013e20 <log2f+0x3c>
24013e18:	f85d 4b04 	ldr.w	r4, [sp], #4
24013e1c:	f7ff bebc 	b.w	24013b98 <__math_invalidf>
24013e20:	eddf 7a20 	vldr	s15, [pc, #128]	; 24013ea4 <log2f+0xc0>
24013e24:	ee20 0a27 	vmul.f32	s0, s0, s15
24013e28:	ee10 3a10 	vmov	r3, s0
24013e2c:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
24013e30:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
24013e34:	491c      	ldr	r1, [pc, #112]	; (24013ea8 <log2f+0xc4>)
24013e36:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
24013e3a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
24013e3e:	f3c3 40c3 	ubfx	r0, r3, #19, #4
24013e42:	0ddc      	lsrs	r4, r3, #23
24013e44:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24013e48:	05e4      	lsls	r4, r4, #23
24013e4a:	ed90 5b00 	vldr	d5, [r0]
24013e4e:	1b12      	subs	r2, r2, r4
24013e50:	ee07 2a90 	vmov	s15, r2
24013e54:	15db      	asrs	r3, r3, #23
24013e56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24013e5a:	eea5 6b07 	vfma.f64	d6, d5, d7
24013e5e:	ed90 7b02 	vldr	d7, [r0, #8]
24013e62:	ee26 4b06 	vmul.f64	d4, d6, d6
24013e66:	ee00 3a10 	vmov	s0, r3
24013e6a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24013e6e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
24013e72:	ee30 0b07 	vadd.f64	d0, d0, d7
24013e76:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
24013e7a:	eea5 7b06 	vfma.f64	d7, d5, d6
24013e7e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24013e82:	eea5 7b04 	vfma.f64	d7, d5, d4
24013e86:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
24013e8a:	eea5 0b06 	vfma.f64	d0, d5, d6
24013e8e:	eea4 0b07 	vfma.f64	d0, d4, d7
24013e92:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013e96:	f85d 4b04 	ldr.w	r4, [sp], #4
24013e9a:	4770      	bx	lr
24013e9c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24013eac <log2f+0xc8>
24013ea0:	e7f9      	b.n	24013e96 <log2f+0xb2>
24013ea2:	bf00      	nop
24013ea4:	4b000000 	.word	0x4b000000
24013ea8:	2402e438 	.word	0x2402e438
24013eac:	00000000 	.word	0x00000000

24013eb0 <lrintf>:
24013eb0:	ee10 3a10 	vmov	r3, s0
24013eb4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24013eb8:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
24013ebc:	281e      	cmp	r0, #30
24013ebe:	b082      	sub	sp, #8
24013ec0:	dc2e      	bgt.n	24013f20 <lrintf+0x70>
24013ec2:	1c41      	adds	r1, r0, #1
24013ec4:	da02      	bge.n	24013ecc <lrintf+0x1c>
24013ec6:	2000      	movs	r0, #0
24013ec8:	b002      	add	sp, #8
24013eca:	4770      	bx	lr
24013ecc:	2816      	cmp	r0, #22
24013ece:	ea4f 71d3 	mov.w	r1, r3, lsr #31
24013ed2:	dd09      	ble.n	24013ee8 <lrintf+0x38>
24013ed4:	f3c3 0016 	ubfx	r0, r3, #0, #23
24013ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24013edc:	3a96      	subs	r2, #150	; 0x96
24013ede:	4090      	lsls	r0, r2
24013ee0:	2900      	cmp	r1, #0
24013ee2:	d0f1      	beq.n	24013ec8 <lrintf+0x18>
24013ee4:	4240      	negs	r0, r0
24013ee6:	e7ef      	b.n	24013ec8 <lrintf+0x18>
24013ee8:	4b10      	ldr	r3, [pc, #64]	; (24013f2c <lrintf+0x7c>)
24013eea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24013eee:	ed93 7a00 	vldr	s14, [r3]
24013ef2:	ee37 0a00 	vadd.f32	s0, s14, s0
24013ef6:	ed8d 0a01 	vstr	s0, [sp, #4]
24013efa:	eddd 7a01 	vldr	s15, [sp, #4]
24013efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013f02:	ee17 3a90 	vmov	r3, s15
24013f06:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24013f0a:	d0dc      	beq.n	24013ec6 <lrintf+0x16>
24013f0c:	f3c3 0016 	ubfx	r0, r3, #0, #23
24013f10:	f3c3 53c7 	ubfx	r3, r3, #23, #8
24013f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24013f18:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24013f1c:	40d8      	lsrs	r0, r3
24013f1e:	e7df      	b.n	24013ee0 <lrintf+0x30>
24013f20:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24013f24:	ee17 0a90 	vmov	r0, s15
24013f28:	e7ce      	b.n	24013ec8 <lrintf+0x18>
24013f2a:	bf00      	nop
24013f2c:	2402e678 	.word	0x2402e678

24013f30 <checkint>:
24013f30:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24013f34:	2b7e      	cmp	r3, #126	; 0x7e
24013f36:	dd10      	ble.n	24013f5a <checkint+0x2a>
24013f38:	2b96      	cmp	r3, #150	; 0x96
24013f3a:	dc0c      	bgt.n	24013f56 <checkint+0x26>
24013f3c:	2201      	movs	r2, #1
24013f3e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24013f42:	fa02 f303 	lsl.w	r3, r2, r3
24013f46:	1e5a      	subs	r2, r3, #1
24013f48:	4202      	tst	r2, r0
24013f4a:	d106      	bne.n	24013f5a <checkint+0x2a>
24013f4c:	4203      	tst	r3, r0
24013f4e:	bf0c      	ite	eq
24013f50:	2002      	moveq	r0, #2
24013f52:	2001      	movne	r0, #1
24013f54:	4770      	bx	lr
24013f56:	2002      	movs	r0, #2
24013f58:	4770      	bx	lr
24013f5a:	2000      	movs	r0, #0
24013f5c:	4770      	bx	lr
	...

24013f60 <powf>:
24013f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
24013f62:	ee10 1a10 	vmov	r1, s0
24013f66:	ee10 4a90 	vmov	r4, s1
24013f6a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24013f6e:	0062      	lsls	r2, r4, #1
24013f70:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24013f74:	eef0 7a40 	vmov.f32	s15, s0
24013f78:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24013f7c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24013f80:	d252      	bcs.n	24014028 <powf+0xc8>
24013f82:	4298      	cmp	r0, r3
24013f84:	d252      	bcs.n	2401402c <powf+0xcc>
24013f86:	2000      	movs	r0, #0
24013f88:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
24013f8c:	4ca0      	ldr	r4, [pc, #640]	; (24014210 <powf+0x2b0>)
24013f8e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
24013f92:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24013f96:	f3c2 45c3 	ubfx	r5, r2, #19, #4
24013f9a:	0dd2      	lsrs	r2, r2, #23
24013f9c:	05d2      	lsls	r2, r2, #23
24013f9e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
24013fa2:	1a8b      	subs	r3, r1, r2
24013fa4:	ed95 6b00 	vldr	d6, [r5]
24013fa8:	ee07 3a90 	vmov	s15, r3
24013fac:	15d2      	asrs	r2, r2, #23
24013fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24013fb2:	eea6 5b07 	vfma.f64	d5, d6, d7
24013fb6:	ed95 6b02 	vldr	d6, [r5, #8]
24013fba:	ee25 2b05 	vmul.f64	d2, d5, d5
24013fbe:	ee22 1b02 	vmul.f64	d1, d2, d2
24013fc2:	ee07 2a90 	vmov	s15, r2
24013fc6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
24013fca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24013fce:	ee37 7b06 	vadd.f64	d7, d7, d6
24013fd2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
24013fd6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
24013fda:	eea5 3b06 	vfma.f64	d3, d5, d6
24013fde:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
24013fe2:	eea5 6b04 	vfma.f64	d6, d5, d4
24013fe6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
24013fea:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
24013fee:	eea5 7b04 	vfma.f64	d7, d5, d4
24013ff2:	eea2 7b06 	vfma.f64	d7, d2, d6
24013ff6:	eea3 7b01 	vfma.f64	d7, d3, d1
24013ffa:	ee20 0b07 	vmul.f64	d0, d0, d7
24013ffe:	ee10 3a90 	vmov	r3, s1
24014002:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24014006:	f248 03bf 	movw	r3, #32959	; 0x80bf
2401400a:	429a      	cmp	r2, r3
2401400c:	f0c0 80b1 	bcc.w	24014172 <powf+0x212>
24014010:	ed9f 7b77 	vldr	d7, [pc, #476]	; 240141f0 <powf+0x290>
24014014:	eeb4 0bc7 	vcmpe.f64	d0, d7
24014018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401401c:	dd79      	ble.n	24014112 <powf+0x1b2>
2401401e:	b003      	add	sp, #12
24014020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24014024:	f7ff bda2 	b.w	24013b6c <__math_oflowf>
24014028:	4298      	cmp	r0, r3
2401402a:	d32d      	bcc.n	24014088 <powf+0x128>
2401402c:	b952      	cbnz	r2, 24014044 <powf+0xe4>
2401402e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
24014032:	005b      	lsls	r3, r3, #1
24014034:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
24014038:	f240 80c9 	bls.w	240141ce <powf+0x26e>
2401403c:	ee37 0aa0 	vadd.f32	s0, s15, s1
24014040:	b003      	add	sp, #12
24014042:	bd30      	pop	{r4, r5, pc}
24014044:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24014048:	d105      	bne.n	24014056 <powf+0xf6>
2401404a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
2401404e:	0064      	lsls	r4, r4, #1
24014050:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24014054:	e7f0      	b.n	24014038 <powf+0xd8>
24014056:	004b      	lsls	r3, r1, #1
24014058:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
2401405c:	d8ee      	bhi.n	2401403c <powf+0xdc>
2401405e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24014062:	d1eb      	bne.n	2401403c <powf+0xdc>
24014064:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24014068:	f000 80b1 	beq.w	240141ce <powf+0x26e>
2401406c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24014070:	ea6f 0404 	mvn.w	r4, r4
24014074:	bf34      	ite	cc
24014076:	2300      	movcc	r3, #0
24014078:	2301      	movcs	r3, #1
2401407a:	0fe4      	lsrs	r4, r4, #31
2401407c:	42a3      	cmp	r3, r4
2401407e:	f040 80a9 	bne.w	240141d4 <powf+0x274>
24014082:	ee20 0aa0 	vmul.f32	s0, s1, s1
24014086:	e7db      	b.n	24014040 <powf+0xe0>
24014088:	004d      	lsls	r5, r1, #1
2401408a:	1e6a      	subs	r2, r5, #1
2401408c:	429a      	cmp	r2, r3
2401408e:	d31c      	bcc.n	240140ca <powf+0x16a>
24014090:	2900      	cmp	r1, #0
24014092:	ee20 0a00 	vmul.f32	s0, s0, s0
24014096:	da0f      	bge.n	240140b8 <powf+0x158>
24014098:	ee10 0a90 	vmov	r0, s1
2401409c:	f7ff ff48 	bl	24013f30 <checkint>
240140a0:	2801      	cmp	r0, #1
240140a2:	d109      	bne.n	240140b8 <powf+0x158>
240140a4:	eeb1 0a40 	vneg.f32	s0, s0
240140a8:	b945      	cbnz	r5, 240140bc <powf+0x15c>
240140aa:	2c00      	cmp	r4, #0
240140ac:	dac8      	bge.n	24014040 <powf+0xe0>
240140ae:	b003      	add	sp, #12
240140b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240140b4:	f7ff bd60 	b.w	24013b78 <__math_divzerof>
240140b8:	2000      	movs	r0, #0
240140ba:	e7f5      	b.n	240140a8 <powf+0x148>
240140bc:	2c00      	cmp	r4, #0
240140be:	dabf      	bge.n	24014040 <powf+0xe0>
240140c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240140c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
240140c8:	e7ba      	b.n	24014040 <powf+0xe0>
240140ca:	2900      	cmp	r1, #0
240140cc:	da1f      	bge.n	2401410e <powf+0x1ae>
240140ce:	ee10 0a90 	vmov	r0, s1
240140d2:	f7ff ff2d 	bl	24013f30 <checkint>
240140d6:	b920      	cbnz	r0, 240140e2 <powf+0x182>
240140d8:	b003      	add	sp, #12
240140da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240140de:	f7ff bd5b 	b.w	24013b98 <__math_invalidf>
240140e2:	2801      	cmp	r0, #1
240140e4:	bf14      	ite	ne
240140e6:	2000      	movne	r0, #0
240140e8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
240140ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240140f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
240140f4:	f4bf af48 	bcs.w	24013f88 <powf+0x28>
240140f8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 24014214 <powf+0x2b4>
240140fc:	ee27 0a80 	vmul.f32	s0, s15, s0
24014100:	ee10 3a10 	vmov	r3, s0
24014104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24014108:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
2401410c:	e73c      	b.n	24013f88 <powf+0x28>
2401410e:	2000      	movs	r0, #0
24014110:	e7ee      	b.n	240140f0 <powf+0x190>
24014112:	ed9f 7b39 	vldr	d7, [pc, #228]	; 240141f8 <powf+0x298>
24014116:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401411e:	dd10      	ble.n	24014142 <powf+0x1e2>
24014120:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
24014124:	2800      	cmp	r0, #0
24014126:	d158      	bne.n	240141da <powf+0x27a>
24014128:	9300      	str	r3, [sp, #0]
2401412a:	eddd 7a00 	vldr	s15, [sp]
2401412e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014132:	ee77 7a87 	vadd.f32	s15, s15, s14
24014136:	eef4 7a47 	vcmp.f32	s15, s14
2401413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401413e:	f47f af6e 	bne.w	2401401e <powf+0xbe>
24014142:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24014200 <powf+0x2a0>
24014146:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401414e:	d804      	bhi.n	2401415a <powf+0x1fa>
24014150:	b003      	add	sp, #12
24014152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24014156:	f7ff bcfd 	b.w	24013b54 <__math_uflowf>
2401415a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24014208 <powf+0x2a8>
2401415e:	eeb4 0bc7 	vcmpe.f64	d0, d7
24014162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014166:	d504      	bpl.n	24014172 <powf+0x212>
24014168:	b003      	add	sp, #12
2401416a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401416e:	f7ff bcf7 	b.w	24013b60 <__math_may_uflowf>
24014172:	4b29      	ldr	r3, [pc, #164]	; (24014218 <powf+0x2b8>)
24014174:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
24014178:	ee30 6b07 	vadd.f64	d6, d0, d7
2401417c:	ee16 2a10 	vmov	r2, s12
24014180:	ee36 7b47 	vsub.f64	d7, d6, d7
24014184:	f002 011f 	and.w	r1, r2, #31
24014188:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
2401418c:	ee30 7b47 	vsub.f64	d7, d0, d7
24014190:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24014194:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24014198:	ee27 4b07 	vmul.f64	d4, d7, d7
2401419c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
240141a0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
240141a4:	eea7 6b05 	vfma.f64	d6, d7, d5
240141a8:	686d      	ldr	r5, [r5, #4]
240141aa:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
240141ae:	1882      	adds	r2, r0, r2
240141b0:	2300      	movs	r3, #0
240141b2:	1918      	adds	r0, r3, r4
240141b4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
240141b8:	eea7 0b05 	vfma.f64	d0, d7, d5
240141bc:	ec41 0b17 	vmov	d7, r0, r1
240141c0:	eea6 0b04 	vfma.f64	d0, d6, d4
240141c4:	ee20 0b07 	vmul.f64	d0, d0, d7
240141c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240141cc:	e738      	b.n	24014040 <powf+0xe0>
240141ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240141d2:	e735      	b.n	24014040 <powf+0xe0>
240141d4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 2401421c <powf+0x2bc>
240141d8:	e732      	b.n	24014040 <powf+0xe0>
240141da:	9301      	str	r3, [sp, #4]
240141dc:	eddd 7a01 	vldr	s15, [sp, #4]
240141e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240141e4:	ee77 7a67 	vsub.f32	s15, s14, s15
240141e8:	e7a5      	b.n	24014136 <powf+0x1d6>
240141ea:	bf00      	nop
240141ec:	f3af 8000 	nop.w
240141f0:	ffd1d571 	.word	0xffd1d571
240141f4:	405fffff 	.word	0x405fffff
240141f8:	ffa3aae2 	.word	0xffa3aae2
240141fc:	405fffff 	.word	0x405fffff
24014200:	00000000 	.word	0x00000000
24014204:	c062c000 	.word	0xc062c000
24014208:	00000000 	.word	0x00000000
2401420c:	c062a000 	.word	0xc062a000
24014210:	2402e680 	.word	0x2402e680
24014214:	4b000000 	.word	0x4b000000
24014218:	2402e2f0 	.word	0x2402e2f0
2401421c:	00000000 	.word	0x00000000

24014220 <tanf>:
24014220:	ee10 3a10 	vmov	r3, s0
24014224:	b507      	push	{r0, r1, r2, lr}
24014226:	4a12      	ldr	r2, [pc, #72]	; (24014270 <tanf+0x50>)
24014228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401422c:	4293      	cmp	r3, r2
2401422e:	dc07      	bgt.n	24014240 <tanf+0x20>
24014230:	eddf 0a10 	vldr	s1, [pc, #64]	; 24014274 <tanf+0x54>
24014234:	2001      	movs	r0, #1
24014236:	b003      	add	sp, #12
24014238:	f85d eb04 	ldr.w	lr, [sp], #4
2401423c:	f001 ba62 	b.w	24015704 <__kernel_tanf>
24014240:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24014244:	db04      	blt.n	24014250 <tanf+0x30>
24014246:	ee30 0a40 	vsub.f32	s0, s0, s0
2401424a:	b003      	add	sp, #12
2401424c:	f85d fb04 	ldr.w	pc, [sp], #4
24014250:	4668      	mov	r0, sp
24014252:	f000 faef 	bl	24014834 <__ieee754_rem_pio2f>
24014256:	0040      	lsls	r0, r0, #1
24014258:	f000 0002 	and.w	r0, r0, #2
2401425c:	eddd 0a01 	vldr	s1, [sp, #4]
24014260:	ed9d 0a00 	vldr	s0, [sp]
24014264:	f1c0 0001 	rsb	r0, r0, #1
24014268:	f001 fa4c 	bl	24015704 <__kernel_tanf>
2401426c:	e7ed      	b.n	2401424a <tanf+0x2a>
2401426e:	bf00      	nop
24014270:	3f490fda 	.word	0x3f490fda
24014274:	00000000 	.word	0x00000000

24014278 <tanhf>:
24014278:	b510      	push	{r4, lr}
2401427a:	ee10 4a10 	vmov	r4, s0
2401427e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
24014282:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24014286:	ed2d 8b02 	vpush	{d8}
2401428a:	eeb0 7a40 	vmov.f32	s14, s0
2401428e:	db0c      	blt.n	240142aa <tanhf+0x32>
24014290:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24014294:	eec0 7a07 	vdiv.f32	s15, s0, s14
24014298:	2c00      	cmp	r4, #0
2401429a:	bfac      	ite	ge
2401429c:	ee37 0a80 	vaddge.f32	s0, s15, s0
240142a0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
240142a4:	ecbd 8b02 	vpop	{d8}
240142a8:	bd10      	pop	{r4, pc}
240142aa:	4a1b      	ldr	r2, [pc, #108]	; (24014318 <tanhf+0xa0>)
240142ac:	4293      	cmp	r3, r2
240142ae:	dc30      	bgt.n	24014312 <tanhf+0x9a>
240142b0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
240142b4:	da06      	bge.n	240142c4 <tanhf+0x4c>
240142b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240142ba:	ee70 7a27 	vadd.f32	s15, s0, s15
240142be:	ee27 0a80 	vmul.f32	s0, s15, s0
240142c2:	e7ef      	b.n	240142a4 <tanhf+0x2c>
240142c4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
240142c8:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
240142cc:	db12      	blt.n	240142f4 <tanhf+0x7c>
240142ce:	f7ff fd1b 	bl	24013d08 <fabsf>
240142d2:	ee30 0a00 	vadd.f32	s0, s0, s0
240142d6:	f001 fbfd 	bl	24015ad4 <expm1f>
240142da:	ee30 0a08 	vadd.f32	s0, s0, s16
240142de:	eec8 7a00 	vdiv.f32	s15, s16, s0
240142e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240142e6:	ee30 0a67 	vsub.f32	s0, s0, s15
240142ea:	2c00      	cmp	r4, #0
240142ec:	bfb8      	it	lt
240142ee:	eeb1 0a40 	vneglt.f32	s0, s0
240142f2:	e7d7      	b.n	240142a4 <tanhf+0x2c>
240142f4:	f7ff fd08 	bl	24013d08 <fabsf>
240142f8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
240142fc:	ee20 0a27 	vmul.f32	s0, s0, s15
24014300:	f001 fbe8 	bl	24015ad4 <expm1f>
24014304:	ee70 7a08 	vadd.f32	s15, s0, s16
24014308:	eeb1 7a40 	vneg.f32	s14, s0
2401430c:	ee87 0a27 	vdiv.f32	s0, s14, s15
24014310:	e7eb      	b.n	240142ea <tanhf+0x72>
24014312:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24014316:	e7e8      	b.n	240142ea <tanhf+0x72>
24014318:	41afffff 	.word	0x41afffff

2401431c <fmodf>:
2401431c:	b508      	push	{r3, lr}
2401431e:	ed2d 8b02 	vpush	{d8}
24014322:	eef0 8a40 	vmov.f32	s17, s0
24014326:	eeb0 8a60 	vmov.f32	s16, s1
2401432a:	f000 f9a9 	bl	24014680 <__ieee754_fmodf>
2401432e:	eef4 8a48 	vcmp.f32	s17, s16
24014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014336:	d60c      	bvs.n	24014352 <fmodf+0x36>
24014338:	eddf 8a07 	vldr	s17, [pc, #28]	; 24014358 <fmodf+0x3c>
2401433c:	eeb4 8a68 	vcmp.f32	s16, s17
24014340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014344:	d105      	bne.n	24014352 <fmodf+0x36>
24014346:	f7ff f943 	bl	240135d0 <__errno>
2401434a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
2401434e:	2321      	movs	r3, #33	; 0x21
24014350:	6003      	str	r3, [r0, #0]
24014352:	ecbd 8b02 	vpop	{d8}
24014356:	bd08      	pop	{r3, pc}
24014358:	00000000 	.word	0x00000000

2401435c <log10f>:
2401435c:	b508      	push	{r3, lr}
2401435e:	ed2d 8b02 	vpush	{d8}
24014362:	eeb0 8a40 	vmov.f32	s16, s0
24014366:	f000 fa0d 	bl	24014784 <__ieee754_log10f>
2401436a:	eeb4 8a48 	vcmp.f32	s16, s16
2401436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014372:	d60f      	bvs.n	24014394 <log10f+0x38>
24014374:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24014378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401437c:	d80a      	bhi.n	24014394 <log10f+0x38>
2401437e:	eeb5 8a40 	vcmp.f32	s16, #0.0
24014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014386:	d108      	bne.n	2401439a <log10f+0x3e>
24014388:	f7ff f922 	bl	240135d0 <__errno>
2401438c:	2322      	movs	r3, #34	; 0x22
2401438e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 240143b0 <log10f+0x54>
24014392:	6003      	str	r3, [r0, #0]
24014394:	ecbd 8b02 	vpop	{d8}
24014398:	bd08      	pop	{r3, pc}
2401439a:	f7ff f919 	bl	240135d0 <__errno>
2401439e:	ecbd 8b02 	vpop	{d8}
240143a2:	2321      	movs	r3, #33	; 0x21
240143a4:	6003      	str	r3, [r0, #0]
240143a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
240143aa:	4802      	ldr	r0, [pc, #8]	; (240143b4 <log10f+0x58>)
240143ac:	f001 bcee 	b.w	24015d8c <nanf>
240143b0:	ff800000 	.word	0xff800000
240143b4:	2402da78 	.word	0x2402da78

240143b8 <sqrtf>:
240143b8:	b508      	push	{r3, lr}
240143ba:	ed2d 8b02 	vpush	{d8}
240143be:	eeb0 8a40 	vmov.f32	s16, s0
240143c2:	f000 fb73 	bl	24014aac <__ieee754_sqrtf>
240143c6:	eeb4 8a48 	vcmp.f32	s16, s16
240143ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240143ce:	d60c      	bvs.n	240143ea <sqrtf+0x32>
240143d0:	eddf 8a07 	vldr	s17, [pc, #28]	; 240143f0 <sqrtf+0x38>
240143d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
240143d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240143dc:	d505      	bpl.n	240143ea <sqrtf+0x32>
240143de:	f7ff f8f7 	bl	240135d0 <__errno>
240143e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
240143e6:	2321      	movs	r3, #33	; 0x21
240143e8:	6003      	str	r3, [r0, #0]
240143ea:	ecbd 8b02 	vpop	{d8}
240143ee:	bd08      	pop	{r3, pc}
	...

240143f8 <__ieee754_rem_pio2>:
240143f8:	b570      	push	{r4, r5, r6, lr}
240143fa:	eeb0 7b40 	vmov.f64	d7, d0
240143fe:	ee17 5a90 	vmov	r5, s15
24014402:	4b99      	ldr	r3, [pc, #612]	; (24014668 <__ieee754_rem_pio2+0x270>)
24014404:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
24014408:	429e      	cmp	r6, r3
2401440a:	b088      	sub	sp, #32
2401440c:	4604      	mov	r4, r0
2401440e:	dc07      	bgt.n	24014420 <__ieee754_rem_pio2+0x28>
24014410:	2200      	movs	r2, #0
24014412:	2300      	movs	r3, #0
24014414:	ed84 0b00 	vstr	d0, [r4]
24014418:	e9c0 2302 	strd	r2, r3, [r0, #8]
2401441c:	2000      	movs	r0, #0
2401441e:	e01b      	b.n	24014458 <__ieee754_rem_pio2+0x60>
24014420:	4b92      	ldr	r3, [pc, #584]	; (2401466c <__ieee754_rem_pio2+0x274>)
24014422:	429e      	cmp	r6, r3
24014424:	dc3b      	bgt.n	2401449e <__ieee754_rem_pio2+0xa6>
24014426:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
2401442a:	2d00      	cmp	r5, #0
2401442c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 24014628 <__ieee754_rem_pio2+0x230>
24014430:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
24014434:	dd19      	ble.n	2401446a <__ieee754_rem_pio2+0x72>
24014436:	ee30 7b46 	vsub.f64	d7, d0, d6
2401443a:	429e      	cmp	r6, r3
2401443c:	d00e      	beq.n	2401445c <__ieee754_rem_pio2+0x64>
2401443e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 24014630 <__ieee754_rem_pio2+0x238>
24014442:	ee37 5b46 	vsub.f64	d5, d7, d6
24014446:	ee37 7b45 	vsub.f64	d7, d7, d5
2401444a:	ed84 5b00 	vstr	d5, [r4]
2401444e:	ee37 7b46 	vsub.f64	d7, d7, d6
24014452:	ed84 7b02 	vstr	d7, [r4, #8]
24014456:	2001      	movs	r0, #1
24014458:	b008      	add	sp, #32
2401445a:	bd70      	pop	{r4, r5, r6, pc}
2401445c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24014638 <__ieee754_rem_pio2+0x240>
24014460:	ee37 7b46 	vsub.f64	d7, d7, d6
24014464:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24014640 <__ieee754_rem_pio2+0x248>
24014468:	e7eb      	b.n	24014442 <__ieee754_rem_pio2+0x4a>
2401446a:	429e      	cmp	r6, r3
2401446c:	ee30 7b06 	vadd.f64	d7, d0, d6
24014470:	d00e      	beq.n	24014490 <__ieee754_rem_pio2+0x98>
24014472:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 24014630 <__ieee754_rem_pio2+0x238>
24014476:	ee37 5b06 	vadd.f64	d5, d7, d6
2401447a:	ee37 7b45 	vsub.f64	d7, d7, d5
2401447e:	ed84 5b00 	vstr	d5, [r4]
24014482:	ee37 7b06 	vadd.f64	d7, d7, d6
24014486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401448a:	ed84 7b02 	vstr	d7, [r4, #8]
2401448e:	e7e3      	b.n	24014458 <__ieee754_rem_pio2+0x60>
24014490:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24014638 <__ieee754_rem_pio2+0x240>
24014494:	ee37 7b06 	vadd.f64	d7, d7, d6
24014498:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24014640 <__ieee754_rem_pio2+0x248>
2401449c:	e7eb      	b.n	24014476 <__ieee754_rem_pio2+0x7e>
2401449e:	4b74      	ldr	r3, [pc, #464]	; (24014670 <__ieee754_rem_pio2+0x278>)
240144a0:	429e      	cmp	r6, r3
240144a2:	dc70      	bgt.n	24014586 <__ieee754_rem_pio2+0x18e>
240144a4:	f001 fa0e 	bl	240158c4 <fabs>
240144a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
240144ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 24014648 <__ieee754_rem_pio2+0x250>
240144b0:	eea0 7b06 	vfma.f64	d7, d0, d6
240144b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
240144b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
240144bc:	ee17 0a90 	vmov	r0, s15
240144c0:	eeb1 4b45 	vneg.f64	d4, d5
240144c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24014628 <__ieee754_rem_pio2+0x230>
240144c8:	eea5 0b47 	vfms.f64	d0, d5, d7
240144cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24014630 <__ieee754_rem_pio2+0x238>
240144d0:	281f      	cmp	r0, #31
240144d2:	ee25 7b07 	vmul.f64	d7, d5, d7
240144d6:	ee30 6b47 	vsub.f64	d6, d0, d7
240144da:	dc08      	bgt.n	240144ee <__ieee754_rem_pio2+0xf6>
240144dc:	4b65      	ldr	r3, [pc, #404]	; (24014674 <__ieee754_rem_pio2+0x27c>)
240144de:	1e42      	subs	r2, r0, #1
240144e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
240144e4:	42b3      	cmp	r3, r6
240144e6:	d002      	beq.n	240144ee <__ieee754_rem_pio2+0xf6>
240144e8:	ed84 6b00 	vstr	d6, [r4]
240144ec:	e026      	b.n	2401453c <__ieee754_rem_pio2+0x144>
240144ee:	ee16 3a90 	vmov	r3, s13
240144f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
240144f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
240144fa:	2b10      	cmp	r3, #16
240144fc:	ea4f 5226 	mov.w	r2, r6, asr #20
24014500:	ddf2      	ble.n	240144e8 <__ieee754_rem_pio2+0xf0>
24014502:	eeb0 6b40 	vmov.f64	d6, d0
24014506:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 24014638 <__ieee754_rem_pio2+0x240>
2401450a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 24014640 <__ieee754_rem_pio2+0x248>
2401450e:	eea4 6b07 	vfma.f64	d6, d4, d7
24014512:	ee30 0b46 	vsub.f64	d0, d0, d6
24014516:	eea4 0b07 	vfma.f64	d0, d4, d7
2401451a:	eeb0 7b40 	vmov.f64	d7, d0
2401451e:	ee95 7b03 	vfnms.f64	d7, d5, d3
24014522:	ee36 3b47 	vsub.f64	d3, d6, d7
24014526:	ee13 3a90 	vmov	r3, s7
2401452a:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401452e:	1ad3      	subs	r3, r2, r3
24014530:	2b31      	cmp	r3, #49	; 0x31
24014532:	dc17      	bgt.n	24014564 <__ieee754_rem_pio2+0x16c>
24014534:	eeb0 0b46 	vmov.f64	d0, d6
24014538:	ed84 3b00 	vstr	d3, [r4]
2401453c:	ed94 6b00 	vldr	d6, [r4]
24014540:	2d00      	cmp	r5, #0
24014542:	ee30 0b46 	vsub.f64	d0, d0, d6
24014546:	ee30 0b47 	vsub.f64	d0, d0, d7
2401454a:	ed84 0b02 	vstr	d0, [r4, #8]
2401454e:	da83      	bge.n	24014458 <__ieee754_rem_pio2+0x60>
24014550:	eeb1 6b46 	vneg.f64	d6, d6
24014554:	eeb1 0b40 	vneg.f64	d0, d0
24014558:	ed84 6b00 	vstr	d6, [r4]
2401455c:	ed84 0b02 	vstr	d0, [r4, #8]
24014560:	4240      	negs	r0, r0
24014562:	e779      	b.n	24014458 <__ieee754_rem_pio2+0x60>
24014564:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 24014650 <__ieee754_rem_pio2+0x258>
24014568:	eeb0 0b46 	vmov.f64	d0, d6
2401456c:	eea4 0b03 	vfma.f64	d0, d4, d3
24014570:	ee36 7b40 	vsub.f64	d7, d6, d0
24014574:	ed9f 6b38 	vldr	d6, [pc, #224]	; 24014658 <__ieee754_rem_pio2+0x260>
24014578:	eea4 7b03 	vfma.f64	d7, d4, d3
2401457c:	ee95 7b06 	vfnms.f64	d7, d5, d6
24014580:	ee30 6b47 	vsub.f64	d6, d0, d7
24014584:	e7b0      	b.n	240144e8 <__ieee754_rem_pio2+0xf0>
24014586:	4b3c      	ldr	r3, [pc, #240]	; (24014678 <__ieee754_rem_pio2+0x280>)
24014588:	429e      	cmp	r6, r3
2401458a:	dd06      	ble.n	2401459a <__ieee754_rem_pio2+0x1a2>
2401458c:	ee30 7b40 	vsub.f64	d7, d0, d0
24014590:	ed80 7b02 	vstr	d7, [r0, #8]
24014594:	ed80 7b00 	vstr	d7, [r0]
24014598:	e740      	b.n	2401441c <__ieee754_rem_pio2+0x24>
2401459a:	1532      	asrs	r2, r6, #20
2401459c:	ee10 0a10 	vmov	r0, s0
240145a0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
240145a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
240145a8:	ec41 0b17 	vmov	d7, r0, r1
240145ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
240145b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 24014660 <__ieee754_rem_pio2+0x268>
240145b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
240145b8:	ee37 7b46 	vsub.f64	d7, d7, d6
240145bc:	ed8d 6b02 	vstr	d6, [sp, #8]
240145c0:	ee27 7b05 	vmul.f64	d7, d7, d5
240145c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
240145c8:	a902      	add	r1, sp, #8
240145ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
240145ce:	ee37 7b46 	vsub.f64	d7, d7, d6
240145d2:	ed8d 6b04 	vstr	d6, [sp, #16]
240145d6:	ee27 7b05 	vmul.f64	d7, d7, d5
240145da:	ed8d 7b06 	vstr	d7, [sp, #24]
240145de:	2603      	movs	r6, #3
240145e0:	4608      	mov	r0, r1
240145e2:	ed91 7b04 	vldr	d7, [r1, #16]
240145e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
240145ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240145ee:	4633      	mov	r3, r6
240145f0:	f1a1 0108 	sub.w	r1, r1, #8
240145f4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
240145f8:	d0f3      	beq.n	240145e2 <__ieee754_rem_pio2+0x1ea>
240145fa:	4920      	ldr	r1, [pc, #128]	; (2401467c <__ieee754_rem_pio2+0x284>)
240145fc:	9101      	str	r1, [sp, #4]
240145fe:	2102      	movs	r1, #2
24014600:	9100      	str	r1, [sp, #0]
24014602:	4621      	mov	r1, r4
24014604:	f000 fa58 	bl	24014ab8 <__kernel_rem_pio2>
24014608:	2d00      	cmp	r5, #0
2401460a:	f6bf af25 	bge.w	24014458 <__ieee754_rem_pio2+0x60>
2401460e:	ed94 7b00 	vldr	d7, [r4]
24014612:	eeb1 7b47 	vneg.f64	d7, d7
24014616:	ed84 7b00 	vstr	d7, [r4]
2401461a:	ed94 7b02 	vldr	d7, [r4, #8]
2401461e:	eeb1 7b47 	vneg.f64	d7, d7
24014622:	ed84 7b02 	vstr	d7, [r4, #8]
24014626:	e79b      	b.n	24014560 <__ieee754_rem_pio2+0x168>
24014628:	54400000 	.word	0x54400000
2401462c:	3ff921fb 	.word	0x3ff921fb
24014630:	1a626331 	.word	0x1a626331
24014634:	3dd0b461 	.word	0x3dd0b461
24014638:	1a600000 	.word	0x1a600000
2401463c:	3dd0b461 	.word	0x3dd0b461
24014640:	2e037073 	.word	0x2e037073
24014644:	3ba3198a 	.word	0x3ba3198a
24014648:	6dc9c883 	.word	0x6dc9c883
2401464c:	3fe45f30 	.word	0x3fe45f30
24014650:	2e000000 	.word	0x2e000000
24014654:	3ba3198a 	.word	0x3ba3198a
24014658:	252049c1 	.word	0x252049c1
2401465c:	397b839a 	.word	0x397b839a
24014660:	00000000 	.word	0x00000000
24014664:	41700000 	.word	0x41700000
24014668:	3fe921fb 	.word	0x3fe921fb
2401466c:	4002d97b 	.word	0x4002d97b
24014670:	413921fb 	.word	0x413921fb
24014674:	2402e8e8 	.word	0x2402e8e8
24014678:	7fefffff 	.word	0x7fefffff
2401467c:	2402e968 	.word	0x2402e968

24014680 <__ieee754_fmodf>:
24014680:	b5f0      	push	{r4, r5, r6, r7, lr}
24014682:	ee10 5a90 	vmov	r5, s1
24014686:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
2401468a:	d009      	beq.n	240146a0 <__ieee754_fmodf+0x20>
2401468c:	ee10 2a10 	vmov	r2, s0
24014690:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24014694:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24014698:	da02      	bge.n	240146a0 <__ieee754_fmodf+0x20>
2401469a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
2401469e:	dd04      	ble.n	240146aa <__ieee754_fmodf+0x2a>
240146a0:	ee60 0a20 	vmul.f32	s1, s0, s1
240146a4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
240146a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
240146aa:	42a3      	cmp	r3, r4
240146ac:	dbfc      	blt.n	240146a8 <__ieee754_fmodf+0x28>
240146ae:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
240146b2:	d105      	bne.n	240146c0 <__ieee754_fmodf+0x40>
240146b4:	4b32      	ldr	r3, [pc, #200]	; (24014780 <__ieee754_fmodf+0x100>)
240146b6:	eb03 7356 	add.w	r3, r3, r6, lsr #29
240146ba:	ed93 0a00 	vldr	s0, [r3]
240146be:	e7f3      	b.n	240146a8 <__ieee754_fmodf+0x28>
240146c0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
240146c4:	d13f      	bne.n	24014746 <__ieee754_fmodf+0xc6>
240146c6:	0219      	lsls	r1, r3, #8
240146c8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
240146cc:	2900      	cmp	r1, #0
240146ce:	dc37      	bgt.n	24014740 <__ieee754_fmodf+0xc0>
240146d0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
240146d4:	d13d      	bne.n	24014752 <__ieee754_fmodf+0xd2>
240146d6:	0227      	lsls	r7, r4, #8
240146d8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
240146dc:	2f00      	cmp	r7, #0
240146de:	da35      	bge.n	2401474c <__ieee754_fmodf+0xcc>
240146e0:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
240146e4:	bfbb      	ittet	lt
240146e6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
240146ea:	1a12      	sublt	r2, r2, r0
240146ec:	f3c2 0316 	ubfxge	r3, r2, #0, #23
240146f0:	4093      	lsllt	r3, r2
240146f2:	bfa8      	it	ge
240146f4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
240146f8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
240146fc:	bfb5      	itete	lt
240146fe:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
24014702:	f3c5 0416 	ubfxge	r4, r5, #0, #23
24014706:	1a52      	sublt	r2, r2, r1
24014708:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
2401470c:	bfb8      	it	lt
2401470e:	4094      	lsllt	r4, r2
24014710:	1a40      	subs	r0, r0, r1
24014712:	1b1a      	subs	r2, r3, r4
24014714:	bb00      	cbnz	r0, 24014758 <__ieee754_fmodf+0xd8>
24014716:	ea13 0322 	ands.w	r3, r3, r2, asr #32
2401471a:	bf38      	it	cc
2401471c:	4613      	movcc	r3, r2
2401471e:	2b00      	cmp	r3, #0
24014720:	d0c8      	beq.n	240146b4 <__ieee754_fmodf+0x34>
24014722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24014726:	db1f      	blt.n	24014768 <__ieee754_fmodf+0xe8>
24014728:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
2401472c:	db1f      	blt.n	2401476e <__ieee754_fmodf+0xee>
2401472e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
24014732:	317f      	adds	r1, #127	; 0x7f
24014734:	4333      	orrs	r3, r6
24014736:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
2401473a:	ee00 3a10 	vmov	s0, r3
2401473e:	e7b3      	b.n	240146a8 <__ieee754_fmodf+0x28>
24014740:	3801      	subs	r0, #1
24014742:	0049      	lsls	r1, r1, #1
24014744:	e7c2      	b.n	240146cc <__ieee754_fmodf+0x4c>
24014746:	15d8      	asrs	r0, r3, #23
24014748:	387f      	subs	r0, #127	; 0x7f
2401474a:	e7c1      	b.n	240146d0 <__ieee754_fmodf+0x50>
2401474c:	3901      	subs	r1, #1
2401474e:	007f      	lsls	r7, r7, #1
24014750:	e7c4      	b.n	240146dc <__ieee754_fmodf+0x5c>
24014752:	15e1      	asrs	r1, r4, #23
24014754:	397f      	subs	r1, #127	; 0x7f
24014756:	e7c3      	b.n	240146e0 <__ieee754_fmodf+0x60>
24014758:	2a00      	cmp	r2, #0
2401475a:	da02      	bge.n	24014762 <__ieee754_fmodf+0xe2>
2401475c:	005b      	lsls	r3, r3, #1
2401475e:	3801      	subs	r0, #1
24014760:	e7d7      	b.n	24014712 <__ieee754_fmodf+0x92>
24014762:	d0a7      	beq.n	240146b4 <__ieee754_fmodf+0x34>
24014764:	0053      	lsls	r3, r2, #1
24014766:	e7fa      	b.n	2401475e <__ieee754_fmodf+0xde>
24014768:	005b      	lsls	r3, r3, #1
2401476a:	3901      	subs	r1, #1
2401476c:	e7d9      	b.n	24014722 <__ieee754_fmodf+0xa2>
2401476e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
24014772:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
24014776:	3182      	adds	r1, #130	; 0x82
24014778:	410b      	asrs	r3, r1
2401477a:	4333      	orrs	r3, r6
2401477c:	e7dd      	b.n	2401473a <__ieee754_fmodf+0xba>
2401477e:	bf00      	nop
24014780:	2402ea70 	.word	0x2402ea70

24014784 <__ieee754_log10f>:
24014784:	b508      	push	{r3, lr}
24014786:	ee10 2a10 	vmov	r2, s0
2401478a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
2401478e:	ed2d 8b02 	vpush	{d8}
24014792:	d108      	bne.n	240147a6 <__ieee754_log10f+0x22>
24014794:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2401481c <__ieee754_log10f+0x98>
24014798:	eddf 7a21 	vldr	s15, [pc, #132]	; 24014820 <__ieee754_log10f+0x9c>
2401479c:	ee87 0a27 	vdiv.f32	s0, s14, s15
240147a0:	ecbd 8b02 	vpop	{d8}
240147a4:	bd08      	pop	{r3, pc}
240147a6:	2a00      	cmp	r2, #0
240147a8:	da02      	bge.n	240147b0 <__ieee754_log10f+0x2c>
240147aa:	ee30 7a40 	vsub.f32	s14, s0, s0
240147ae:	e7f3      	b.n	24014798 <__ieee754_log10f+0x14>
240147b0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
240147b4:	db02      	blt.n	240147bc <__ieee754_log10f+0x38>
240147b6:	ee30 0a00 	vadd.f32	s0, s0, s0
240147ba:	e7f1      	b.n	240147a0 <__ieee754_log10f+0x1c>
240147bc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
240147c0:	bfbf      	itttt	lt
240147c2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 24014824 <__ieee754_log10f+0xa0>
240147c6:	ee60 7a27 	vmullt.f32	s15, s0, s15
240147ca:	f06f 0118 	mvnlt.w	r1, #24
240147ce:	ee17 2a90 	vmovlt	r2, s15
240147d2:	ea4f 53e2 	mov.w	r3, r2, asr #23
240147d6:	bfa8      	it	ge
240147d8:	2100      	movge	r1, #0
240147da:	3b7f      	subs	r3, #127	; 0x7f
240147dc:	440b      	add	r3, r1
240147de:	0fd9      	lsrs	r1, r3, #31
240147e0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
240147e4:	ee07 3a90 	vmov	s15, r3
240147e8:	f3c2 0216 	ubfx	r2, r2, #0, #23
240147ec:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
240147f0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
240147f4:	ee00 3a10 	vmov	s0, r3
240147f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
240147fc:	f7ff fa8c 	bl	24013d18 <logf>
24014800:	eddf 7a09 	vldr	s15, [pc, #36]	; 24014828 <__ieee754_log10f+0xa4>
24014804:	ee20 0a27 	vmul.f32	s0, s0, s15
24014808:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401482c <__ieee754_log10f+0xa8>
2401480c:	eea8 0a27 	vfma.f32	s0, s16, s15
24014810:	eddf 7a07 	vldr	s15, [pc, #28]	; 24014830 <__ieee754_log10f+0xac>
24014814:	eea8 0a27 	vfma.f32	s0, s16, s15
24014818:	e7c2      	b.n	240147a0 <__ieee754_log10f+0x1c>
2401481a:	bf00      	nop
2401481c:	cc000000 	.word	0xcc000000
24014820:	00000000 	.word	0x00000000
24014824:	4c000000 	.word	0x4c000000
24014828:	3ede5bd9 	.word	0x3ede5bd9
2401482c:	355427db 	.word	0x355427db
24014830:	3e9a2080 	.word	0x3e9a2080

24014834 <__ieee754_rem_pio2f>:
24014834:	b5f0      	push	{r4, r5, r6, r7, lr}
24014836:	ee10 6a10 	vmov	r6, s0
2401483a:	4b8e      	ldr	r3, [pc, #568]	; (24014a74 <__ieee754_rem_pio2f+0x240>)
2401483c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
24014840:	429d      	cmp	r5, r3
24014842:	b087      	sub	sp, #28
24014844:	eef0 7a40 	vmov.f32	s15, s0
24014848:	4604      	mov	r4, r0
2401484a:	dc05      	bgt.n	24014858 <__ieee754_rem_pio2f+0x24>
2401484c:	2300      	movs	r3, #0
2401484e:	ed80 0a00 	vstr	s0, [r0]
24014852:	6043      	str	r3, [r0, #4]
24014854:	2000      	movs	r0, #0
24014856:	e01a      	b.n	2401488e <__ieee754_rem_pio2f+0x5a>
24014858:	4b87      	ldr	r3, [pc, #540]	; (24014a78 <__ieee754_rem_pio2f+0x244>)
2401485a:	429d      	cmp	r5, r3
2401485c:	dc46      	bgt.n	240148ec <__ieee754_rem_pio2f+0xb8>
2401485e:	2e00      	cmp	r6, #0
24014860:	ed9f 0a86 	vldr	s0, [pc, #536]	; 24014a7c <__ieee754_rem_pio2f+0x248>
24014864:	4b86      	ldr	r3, [pc, #536]	; (24014a80 <__ieee754_rem_pio2f+0x24c>)
24014866:	f025 050f 	bic.w	r5, r5, #15
2401486a:	dd1f      	ble.n	240148ac <__ieee754_rem_pio2f+0x78>
2401486c:	429d      	cmp	r5, r3
2401486e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24014872:	d00e      	beq.n	24014892 <__ieee754_rem_pio2f+0x5e>
24014874:	ed9f 7a83 	vldr	s14, [pc, #524]	; 24014a84 <__ieee754_rem_pio2f+0x250>
24014878:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401487c:	ee77 7ac0 	vsub.f32	s15, s15, s0
24014880:	ed80 0a00 	vstr	s0, [r0]
24014884:	ee77 7ac7 	vsub.f32	s15, s15, s14
24014888:	2001      	movs	r0, #1
2401488a:	edc4 7a01 	vstr	s15, [r4, #4]
2401488e:	b007      	add	sp, #28
24014890:	bdf0      	pop	{r4, r5, r6, r7, pc}
24014892:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24014a88 <__ieee754_rem_pio2f+0x254>
24014896:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 24014a8c <__ieee754_rem_pio2f+0x258>
2401489a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401489e:	ee77 6ac7 	vsub.f32	s13, s15, s14
240148a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240148a6:	edc0 6a00 	vstr	s13, [r0]
240148aa:	e7eb      	b.n	24014884 <__ieee754_rem_pio2f+0x50>
240148ac:	429d      	cmp	r5, r3
240148ae:	ee77 7a80 	vadd.f32	s15, s15, s0
240148b2:	d00e      	beq.n	240148d2 <__ieee754_rem_pio2f+0x9e>
240148b4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 24014a84 <__ieee754_rem_pio2f+0x250>
240148b8:	ee37 0a87 	vadd.f32	s0, s15, s14
240148bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
240148c0:	ed80 0a00 	vstr	s0, [r0]
240148c4:	ee77 7a87 	vadd.f32	s15, s15, s14
240148c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240148cc:	edc4 7a01 	vstr	s15, [r4, #4]
240148d0:	e7dd      	b.n	2401488e <__ieee754_rem_pio2f+0x5a>
240148d2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24014a88 <__ieee754_rem_pio2f+0x254>
240148d6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 24014a8c <__ieee754_rem_pio2f+0x258>
240148da:	ee77 7a80 	vadd.f32	s15, s15, s0
240148de:	ee77 6a87 	vadd.f32	s13, s15, s14
240148e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240148e6:	edc0 6a00 	vstr	s13, [r0]
240148ea:	e7eb      	b.n	240148c4 <__ieee754_rem_pio2f+0x90>
240148ec:	4b68      	ldr	r3, [pc, #416]	; (24014a90 <__ieee754_rem_pio2f+0x25c>)
240148ee:	429d      	cmp	r5, r3
240148f0:	dc72      	bgt.n	240149d8 <__ieee754_rem_pio2f+0x1a4>
240148f2:	f7ff fa09 	bl	24013d08 <fabsf>
240148f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24014a94 <__ieee754_rem_pio2f+0x260>
240148fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240148fe:	eee0 7a07 	vfma.f32	s15, s0, s14
24014902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24014906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401490a:	ee17 0a90 	vmov	r0, s15
2401490e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24014a7c <__ieee754_rem_pio2f+0x248>
24014912:	eea7 0a67 	vfms.f32	s0, s14, s15
24014916:	281f      	cmp	r0, #31
24014918:	eddf 7a5a 	vldr	s15, [pc, #360]	; 24014a84 <__ieee754_rem_pio2f+0x250>
2401491c:	ee67 7a27 	vmul.f32	s15, s14, s15
24014920:	eeb1 6a47 	vneg.f32	s12, s14
24014924:	ee70 6a67 	vsub.f32	s13, s0, s15
24014928:	ee16 2a90 	vmov	r2, s13
2401492c:	dc1c      	bgt.n	24014968 <__ieee754_rem_pio2f+0x134>
2401492e:	495a      	ldr	r1, [pc, #360]	; (24014a98 <__ieee754_rem_pio2f+0x264>)
24014930:	1e47      	subs	r7, r0, #1
24014932:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
24014936:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401493a:	428b      	cmp	r3, r1
2401493c:	d014      	beq.n	24014968 <__ieee754_rem_pio2f+0x134>
2401493e:	6022      	str	r2, [r4, #0]
24014940:	ed94 7a00 	vldr	s14, [r4]
24014944:	ee30 0a47 	vsub.f32	s0, s0, s14
24014948:	2e00      	cmp	r6, #0
2401494a:	ee30 0a67 	vsub.f32	s0, s0, s15
2401494e:	ed84 0a01 	vstr	s0, [r4, #4]
24014952:	da9c      	bge.n	2401488e <__ieee754_rem_pio2f+0x5a>
24014954:	eeb1 7a47 	vneg.f32	s14, s14
24014958:	eeb1 0a40 	vneg.f32	s0, s0
2401495c:	ed84 7a00 	vstr	s14, [r4]
24014960:	ed84 0a01 	vstr	s0, [r4, #4]
24014964:	4240      	negs	r0, r0
24014966:	e792      	b.n	2401488e <__ieee754_rem_pio2f+0x5a>
24014968:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401496c:	15eb      	asrs	r3, r5, #23
2401496e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
24014972:	2d08      	cmp	r5, #8
24014974:	dde3      	ble.n	2401493e <__ieee754_rem_pio2f+0x10a>
24014976:	eddf 7a44 	vldr	s15, [pc, #272]	; 24014a88 <__ieee754_rem_pio2f+0x254>
2401497a:	eddf 5a44 	vldr	s11, [pc, #272]	; 24014a8c <__ieee754_rem_pio2f+0x258>
2401497e:	eef0 6a40 	vmov.f32	s13, s0
24014982:	eee6 6a27 	vfma.f32	s13, s12, s15
24014986:	ee30 0a66 	vsub.f32	s0, s0, s13
2401498a:	eea6 0a27 	vfma.f32	s0, s12, s15
2401498e:	eef0 7a40 	vmov.f32	s15, s0
24014992:	eed7 7a25 	vfnms.f32	s15, s14, s11
24014996:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401499a:	ee15 2a90 	vmov	r2, s11
2401499e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
240149a2:	1a5b      	subs	r3, r3, r1
240149a4:	2b19      	cmp	r3, #25
240149a6:	dc04      	bgt.n	240149b2 <__ieee754_rem_pio2f+0x17e>
240149a8:	edc4 5a00 	vstr	s11, [r4]
240149ac:	eeb0 0a66 	vmov.f32	s0, s13
240149b0:	e7c6      	b.n	24014940 <__ieee754_rem_pio2f+0x10c>
240149b2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24014a9c <__ieee754_rem_pio2f+0x268>
240149b6:	eeb0 0a66 	vmov.f32	s0, s13
240149ba:	eea6 0a25 	vfma.f32	s0, s12, s11
240149be:	ee76 7ac0 	vsub.f32	s15, s13, s0
240149c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 24014aa0 <__ieee754_rem_pio2f+0x26c>
240149c6:	eee6 7a25 	vfma.f32	s15, s12, s11
240149ca:	eed7 7a26 	vfnms.f32	s15, s14, s13
240149ce:	ee30 7a67 	vsub.f32	s14, s0, s15
240149d2:	ed84 7a00 	vstr	s14, [r4]
240149d6:	e7b3      	b.n	24014940 <__ieee754_rem_pio2f+0x10c>
240149d8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
240149dc:	db06      	blt.n	240149ec <__ieee754_rem_pio2f+0x1b8>
240149de:	ee70 7a40 	vsub.f32	s15, s0, s0
240149e2:	edc0 7a01 	vstr	s15, [r0, #4]
240149e6:	edc0 7a00 	vstr	s15, [r0]
240149ea:	e733      	b.n	24014854 <__ieee754_rem_pio2f+0x20>
240149ec:	15ea      	asrs	r2, r5, #23
240149ee:	3a86      	subs	r2, #134	; 0x86
240149f0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
240149f4:	ee07 3a90 	vmov	s15, r3
240149f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240149fc:	eddf 6a29 	vldr	s13, [pc, #164]	; 24014aa4 <__ieee754_rem_pio2f+0x270>
24014a00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24014a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
24014a08:	ed8d 7a03 	vstr	s14, [sp, #12]
24014a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24014a10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24014a14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24014a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
24014a1c:	ed8d 7a04 	vstr	s14, [sp, #16]
24014a20:	ee67 7aa6 	vmul.f32	s15, s15, s13
24014a24:	eef5 7a40 	vcmp.f32	s15, #0.0
24014a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014a2c:	edcd 7a05 	vstr	s15, [sp, #20]
24014a30:	d11e      	bne.n	24014a70 <__ieee754_rem_pio2f+0x23c>
24014a32:	eeb5 7a40 	vcmp.f32	s14, #0.0
24014a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014a3a:	bf14      	ite	ne
24014a3c:	2302      	movne	r3, #2
24014a3e:	2301      	moveq	r3, #1
24014a40:	4919      	ldr	r1, [pc, #100]	; (24014aa8 <__ieee754_rem_pio2f+0x274>)
24014a42:	9101      	str	r1, [sp, #4]
24014a44:	2102      	movs	r1, #2
24014a46:	9100      	str	r1, [sp, #0]
24014a48:	a803      	add	r0, sp, #12
24014a4a:	4621      	mov	r1, r4
24014a4c:	f000 fbe4 	bl	24015218 <__kernel_rem_pio2f>
24014a50:	2e00      	cmp	r6, #0
24014a52:	f6bf af1c 	bge.w	2401488e <__ieee754_rem_pio2f+0x5a>
24014a56:	edd4 7a00 	vldr	s15, [r4]
24014a5a:	eef1 7a67 	vneg.f32	s15, s15
24014a5e:	edc4 7a00 	vstr	s15, [r4]
24014a62:	edd4 7a01 	vldr	s15, [r4, #4]
24014a66:	eef1 7a67 	vneg.f32	s15, s15
24014a6a:	edc4 7a01 	vstr	s15, [r4, #4]
24014a6e:	e779      	b.n	24014964 <__ieee754_rem_pio2f+0x130>
24014a70:	2303      	movs	r3, #3
24014a72:	e7e5      	b.n	24014a40 <__ieee754_rem_pio2f+0x20c>
24014a74:	3f490fd8 	.word	0x3f490fd8
24014a78:	4016cbe3 	.word	0x4016cbe3
24014a7c:	3fc90f80 	.word	0x3fc90f80
24014a80:	3fc90fd0 	.word	0x3fc90fd0
24014a84:	37354443 	.word	0x37354443
24014a88:	37354400 	.word	0x37354400
24014a8c:	2e85a308 	.word	0x2e85a308
24014a90:	43490f80 	.word	0x43490f80
24014a94:	3f22f984 	.word	0x3f22f984
24014a98:	2402ea78 	.word	0x2402ea78
24014a9c:	2e85a300 	.word	0x2e85a300
24014aa0:	248d3132 	.word	0x248d3132
24014aa4:	43800000 	.word	0x43800000
24014aa8:	2402eaf8 	.word	0x2402eaf8

24014aac <__ieee754_sqrtf>:
24014aac:	eeb1 0ac0 	vsqrt.f32	s0, s0
24014ab0:	4770      	bx	lr
24014ab2:	0000      	movs	r0, r0
24014ab4:	0000      	movs	r0, r0
	...

24014ab8 <__kernel_rem_pio2>:
24014ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24014abc:	ed2d 8b06 	vpush	{d8-d10}
24014ac0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
24014ac4:	460f      	mov	r7, r1
24014ac6:	9002      	str	r0, [sp, #8]
24014ac8:	49c5      	ldr	r1, [pc, #788]	; (24014de0 <__kernel_rem_pio2+0x328>)
24014aca:	98a2      	ldr	r0, [sp, #648]	; 0x288
24014acc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
24014ad0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
24014ad4:	9301      	str	r3, [sp, #4]
24014ad6:	f112 0f14 	cmn.w	r2, #20
24014ada:	bfa8      	it	ge
24014adc:	2018      	movge	r0, #24
24014ade:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
24014ae2:	bfb8      	it	lt
24014ae4:	2000      	movlt	r0, #0
24014ae6:	f06f 0417 	mvn.w	r4, #23
24014aea:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 24014dc8 <__kernel_rem_pio2+0x310>
24014aee:	bfa4      	itt	ge
24014af0:	f1a2 0a03 	subge.w	sl, r2, #3
24014af4:	fb9a f0f0 	sdivge	r0, sl, r0
24014af8:	fb00 4404 	mla	r4, r0, r4, r4
24014afc:	1a46      	subs	r6, r0, r1
24014afe:	4414      	add	r4, r2
24014b00:	eb09 0c01 	add.w	ip, r9, r1
24014b04:	ad1a      	add	r5, sp, #104	; 0x68
24014b06:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
24014b0a:	2200      	movs	r2, #0
24014b0c:	4562      	cmp	r2, ip
24014b0e:	dd10      	ble.n	24014b32 <__kernel_rem_pio2+0x7a>
24014b10:	9a01      	ldr	r2, [sp, #4]
24014b12:	ab1a      	add	r3, sp, #104	; 0x68
24014b14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24014b18:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
24014b1c:	f04f 0c00 	mov.w	ip, #0
24014b20:	45cc      	cmp	ip, r9
24014b22:	dc26      	bgt.n	24014b72 <__kernel_rem_pio2+0xba>
24014b24:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 24014dc8 <__kernel_rem_pio2+0x310>
24014b28:	f8dd 8008 	ldr.w	r8, [sp, #8]
24014b2c:	4616      	mov	r6, r2
24014b2e:	2500      	movs	r5, #0
24014b30:	e015      	b.n	24014b5e <__kernel_rem_pio2+0xa6>
24014b32:	42d6      	cmn	r6, r2
24014b34:	d409      	bmi.n	24014b4a <__kernel_rem_pio2+0x92>
24014b36:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
24014b3a:	ee07 3a90 	vmov	s15, r3
24014b3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24014b42:	eca5 7b02 	vstmia	r5!, {d7}
24014b46:	3201      	adds	r2, #1
24014b48:	e7e0      	b.n	24014b0c <__kernel_rem_pio2+0x54>
24014b4a:	eeb0 7b46 	vmov.f64	d7, d6
24014b4e:	e7f8      	b.n	24014b42 <__kernel_rem_pio2+0x8a>
24014b50:	ecb8 5b02 	vldmia	r8!, {d5}
24014b54:	ed96 6b00 	vldr	d6, [r6]
24014b58:	3501      	adds	r5, #1
24014b5a:	eea5 7b06 	vfma.f64	d7, d5, d6
24014b5e:	428d      	cmp	r5, r1
24014b60:	f1a6 0608 	sub.w	r6, r6, #8
24014b64:	ddf4      	ble.n	24014b50 <__kernel_rem_pio2+0x98>
24014b66:	ecaa 7b02 	vstmia	sl!, {d7}
24014b6a:	f10c 0c01 	add.w	ip, ip, #1
24014b6e:	3208      	adds	r2, #8
24014b70:	e7d6      	b.n	24014b20 <__kernel_rem_pio2+0x68>
24014b72:	ab06      	add	r3, sp, #24
24014b74:	ed9f 9b96 	vldr	d9, [pc, #600]	; 24014dd0 <__kernel_rem_pio2+0x318>
24014b78:	ed9f ab97 	vldr	d10, [pc, #604]	; 24014dd8 <__kernel_rem_pio2+0x320>
24014b7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
24014b80:	9303      	str	r3, [sp, #12]
24014b82:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
24014b86:	464d      	mov	r5, r9
24014b88:	00eb      	lsls	r3, r5, #3
24014b8a:	9304      	str	r3, [sp, #16]
24014b8c:	ab92      	add	r3, sp, #584	; 0x248
24014b8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24014b92:	f10d 0b18 	add.w	fp, sp, #24
24014b96:	ab6a      	add	r3, sp, #424	; 0x1a8
24014b98:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
24014b9c:	465e      	mov	r6, fp
24014b9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24014ba2:	4628      	mov	r0, r5
24014ba4:	2800      	cmp	r0, #0
24014ba6:	f1a2 0208 	sub.w	r2, r2, #8
24014baa:	dc4c      	bgt.n	24014c46 <__kernel_rem_pio2+0x18e>
24014bac:	4620      	mov	r0, r4
24014bae:	9105      	str	r1, [sp, #20]
24014bb0:	f000 ff06 	bl	240159c0 <scalbn>
24014bb4:	eeb0 8b40 	vmov.f64	d8, d0
24014bb8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
24014bbc:	ee28 0b00 	vmul.f64	d0, d8, d0
24014bc0:	f000 fe8a 	bl	240158d8 <floor>
24014bc4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
24014bc8:	eea0 8b47 	vfms.f64	d8, d0, d7
24014bcc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
24014bd0:	2c00      	cmp	r4, #0
24014bd2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
24014bd6:	ee17 8a90 	vmov	r8, s15
24014bda:	ee38 8b40 	vsub.f64	d8, d8, d0
24014bde:	9905      	ldr	r1, [sp, #20]
24014be0:	dd43      	ble.n	24014c6a <__kernel_rem_pio2+0x1b2>
24014be2:	1e68      	subs	r0, r5, #1
24014be4:	ab06      	add	r3, sp, #24
24014be6:	f1c4 0c18 	rsb	ip, r4, #24
24014bea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
24014bee:	fa46 f20c 	asr.w	r2, r6, ip
24014bf2:	4490      	add	r8, r2
24014bf4:	fa02 f20c 	lsl.w	r2, r2, ip
24014bf8:	1ab6      	subs	r6, r6, r2
24014bfa:	f1c4 0217 	rsb	r2, r4, #23
24014bfe:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
24014c02:	4116      	asrs	r6, r2
24014c04:	2e00      	cmp	r6, #0
24014c06:	dd3f      	ble.n	24014c88 <__kernel_rem_pio2+0x1d0>
24014c08:	f04f 0c00 	mov.w	ip, #0
24014c0c:	f108 0801 	add.w	r8, r8, #1
24014c10:	4660      	mov	r0, ip
24014c12:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
24014c16:	4565      	cmp	r5, ip
24014c18:	dc6e      	bgt.n	24014cf8 <__kernel_rem_pio2+0x240>
24014c1a:	2c00      	cmp	r4, #0
24014c1c:	dd04      	ble.n	24014c28 <__kernel_rem_pio2+0x170>
24014c1e:	2c01      	cmp	r4, #1
24014c20:	d07f      	beq.n	24014d22 <__kernel_rem_pio2+0x26a>
24014c22:	2c02      	cmp	r4, #2
24014c24:	f000 8087 	beq.w	24014d36 <__kernel_rem_pio2+0x27e>
24014c28:	2e02      	cmp	r6, #2
24014c2a:	d12d      	bne.n	24014c88 <__kernel_rem_pio2+0x1d0>
24014c2c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24014c30:	ee30 8b48 	vsub.f64	d8, d0, d8
24014c34:	b340      	cbz	r0, 24014c88 <__kernel_rem_pio2+0x1d0>
24014c36:	4620      	mov	r0, r4
24014c38:	9105      	str	r1, [sp, #20]
24014c3a:	f000 fec1 	bl	240159c0 <scalbn>
24014c3e:	9905      	ldr	r1, [sp, #20]
24014c40:	ee38 8b40 	vsub.f64	d8, d8, d0
24014c44:	e020      	b.n	24014c88 <__kernel_rem_pio2+0x1d0>
24014c46:	ee20 7b09 	vmul.f64	d7, d0, d9
24014c4a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24014c4e:	3801      	subs	r0, #1
24014c50:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24014c54:	eea7 0b4a 	vfms.f64	d0, d7, d10
24014c58:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24014c5c:	eca6 0a01 	vstmia	r6!, {s0}
24014c60:	ed92 0b00 	vldr	d0, [r2]
24014c64:	ee37 0b00 	vadd.f64	d0, d7, d0
24014c68:	e79c      	b.n	24014ba4 <__kernel_rem_pio2+0xec>
24014c6a:	d105      	bne.n	24014c78 <__kernel_rem_pio2+0x1c0>
24014c6c:	1e6a      	subs	r2, r5, #1
24014c6e:	ab06      	add	r3, sp, #24
24014c70:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
24014c74:	15f6      	asrs	r6, r6, #23
24014c76:	e7c5      	b.n	24014c04 <__kernel_rem_pio2+0x14c>
24014c78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24014c7c:	eeb4 8bc7 	vcmpe.f64	d8, d7
24014c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c84:	da36      	bge.n	24014cf4 <__kernel_rem_pio2+0x23c>
24014c86:	2600      	movs	r6, #0
24014c88:	eeb5 8b40 	vcmp.f64	d8, #0.0
24014c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c90:	f040 80aa 	bne.w	24014de8 <__kernel_rem_pio2+0x330>
24014c94:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24014c98:	4658      	mov	r0, fp
24014c9a:	2200      	movs	r2, #0
24014c9c:	4548      	cmp	r0, r9
24014c9e:	da52      	bge.n	24014d46 <__kernel_rem_pio2+0x28e>
24014ca0:	2a00      	cmp	r2, #0
24014ca2:	f000 8081 	beq.w	24014da8 <__kernel_rem_pio2+0x2f0>
24014ca6:	ab06      	add	r3, sp, #24
24014ca8:	3c18      	subs	r4, #24
24014caa:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
24014cae:	2b00      	cmp	r3, #0
24014cb0:	f000 8087 	beq.w	24014dc2 <__kernel_rem_pio2+0x30a>
24014cb4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24014cb8:	4620      	mov	r0, r4
24014cba:	f000 fe81 	bl	240159c0 <scalbn>
24014cbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
24014cc2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 24014dd0 <__kernel_rem_pio2+0x318>
24014cc6:	a96a      	add	r1, sp, #424	; 0x1a8
24014cc8:	f103 0208 	add.w	r2, r3, #8
24014ccc:	1888      	adds	r0, r1, r2
24014cce:	4659      	mov	r1, fp
24014cd0:	2900      	cmp	r1, #0
24014cd2:	f280 80b7 	bge.w	24014e44 <__kernel_rem_pio2+0x38c>
24014cd6:	4659      	mov	r1, fp
24014cd8:	2900      	cmp	r1, #0
24014cda:	f2c0 80d5 	blt.w	24014e88 <__kernel_rem_pio2+0x3d0>
24014cde:	a86a      	add	r0, sp, #424	; 0x1a8
24014ce0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
24014ce4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 24014dc8 <__kernel_rem_pio2+0x310>
24014ce8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 24014de4 <__kernel_rem_pio2+0x32c>
24014cec:	2400      	movs	r4, #0
24014cee:	ebab 0001 	sub.w	r0, fp, r1
24014cf2:	e0be      	b.n	24014e72 <__kernel_rem_pio2+0x3ba>
24014cf4:	2602      	movs	r6, #2
24014cf6:	e787      	b.n	24014c08 <__kernel_rem_pio2+0x150>
24014cf8:	f8db 2000 	ldr.w	r2, [fp]
24014cfc:	b958      	cbnz	r0, 24014d16 <__kernel_rem_pio2+0x25e>
24014cfe:	b122      	cbz	r2, 24014d0a <__kernel_rem_pio2+0x252>
24014d00:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
24014d04:	f8cb 2000 	str.w	r2, [fp]
24014d08:	2201      	movs	r2, #1
24014d0a:	f10c 0c01 	add.w	ip, ip, #1
24014d0e:	f10b 0b04 	add.w	fp, fp, #4
24014d12:	4610      	mov	r0, r2
24014d14:	e77f      	b.n	24014c16 <__kernel_rem_pio2+0x15e>
24014d16:	ebae 0202 	sub.w	r2, lr, r2
24014d1a:	f8cb 2000 	str.w	r2, [fp]
24014d1e:	4602      	mov	r2, r0
24014d20:	e7f3      	b.n	24014d0a <__kernel_rem_pio2+0x252>
24014d22:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24014d26:	ab06      	add	r3, sp, #24
24014d28:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24014d2c:	f3c2 0216 	ubfx	r2, r2, #0, #23
24014d30:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
24014d34:	e778      	b.n	24014c28 <__kernel_rem_pio2+0x170>
24014d36:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24014d3a:	ab06      	add	r3, sp, #24
24014d3c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24014d40:	f3c2 0215 	ubfx	r2, r2, #0, #22
24014d44:	e7f4      	b.n	24014d30 <__kernel_rem_pio2+0x278>
24014d46:	ab06      	add	r3, sp, #24
24014d48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
24014d4c:	3801      	subs	r0, #1
24014d4e:	431a      	orrs	r2, r3
24014d50:	e7a4      	b.n	24014c9c <__kernel_rem_pio2+0x1e4>
24014d52:	f10c 0c01 	add.w	ip, ip, #1
24014d56:	f852 0d04 	ldr.w	r0, [r2, #-4]!
24014d5a:	2800      	cmp	r0, #0
24014d5c:	d0f9      	beq.n	24014d52 <__kernel_rem_pio2+0x29a>
24014d5e:	9b04      	ldr	r3, [sp, #16]
24014d60:	f503 7312 	add.w	r3, r3, #584	; 0x248
24014d64:	eb0d 0203 	add.w	r2, sp, r3
24014d68:	9b01      	ldr	r3, [sp, #4]
24014d6a:	18e8      	adds	r0, r5, r3
24014d6c:	ab1a      	add	r3, sp, #104	; 0x68
24014d6e:	1c6e      	adds	r6, r5, #1
24014d70:	3a98      	subs	r2, #152	; 0x98
24014d72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
24014d76:	4465      	add	r5, ip
24014d78:	42b5      	cmp	r5, r6
24014d7a:	f6ff af05 	blt.w	24014b88 <__kernel_rem_pio2+0xd0>
24014d7e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
24014d82:	f8dd e008 	ldr.w	lr, [sp, #8]
24014d86:	ee07 3a90 	vmov	s15, r3
24014d8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24014d8e:	f04f 0c00 	mov.w	ip, #0
24014d92:	eca0 7b02 	vstmia	r0!, {d7}
24014d96:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24014dc8 <__kernel_rem_pio2+0x310>
24014d9a:	4680      	mov	r8, r0
24014d9c:	458c      	cmp	ip, r1
24014d9e:	dd07      	ble.n	24014db0 <__kernel_rem_pio2+0x2f8>
24014da0:	eca2 7b02 	vstmia	r2!, {d7}
24014da4:	3601      	adds	r6, #1
24014da6:	e7e7      	b.n	24014d78 <__kernel_rem_pio2+0x2c0>
24014da8:	9a03      	ldr	r2, [sp, #12]
24014daa:	f04f 0c01 	mov.w	ip, #1
24014dae:	e7d2      	b.n	24014d56 <__kernel_rem_pio2+0x29e>
24014db0:	ecbe 5b02 	vldmia	lr!, {d5}
24014db4:	ed38 6b02 	vldmdb	r8!, {d6}
24014db8:	f10c 0c01 	add.w	ip, ip, #1
24014dbc:	eea5 7b06 	vfma.f64	d7, d5, d6
24014dc0:	e7ec      	b.n	24014d9c <__kernel_rem_pio2+0x2e4>
24014dc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24014dc6:	e76e      	b.n	24014ca6 <__kernel_rem_pio2+0x1ee>
	...
24014dd4:	3e700000 	.word	0x3e700000
24014dd8:	00000000 	.word	0x00000000
24014ddc:	41700000 	.word	0x41700000
24014de0:	2402ee50 	.word	0x2402ee50
24014de4:	2402ee10 	.word	0x2402ee10
24014de8:	4260      	negs	r0, r4
24014dea:	eeb0 0b48 	vmov.f64	d0, d8
24014dee:	f000 fde7 	bl	240159c0 <scalbn>
24014df2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 24014fd0 <__kernel_rem_pio2+0x518>
24014df6:	eeb4 0bc6 	vcmpe.f64	d0, d6
24014dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014dfe:	db18      	blt.n	24014e32 <__kernel_rem_pio2+0x37a>
24014e00:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24014fd8 <__kernel_rem_pio2+0x520>
24014e04:	ee20 7b07 	vmul.f64	d7, d0, d7
24014e08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24014e0c:	aa06      	add	r2, sp, #24
24014e0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
24014e12:	eea5 0b46 	vfms.f64	d0, d5, d6
24014e16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24014e1a:	f105 0b01 	add.w	fp, r5, #1
24014e1e:	ee10 3a10 	vmov	r3, s0
24014e22:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24014e26:	ee17 3a10 	vmov	r3, s14
24014e2a:	3418      	adds	r4, #24
24014e2c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
24014e30:	e740      	b.n	24014cb4 <__kernel_rem_pio2+0x1fc>
24014e32:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24014e36:	aa06      	add	r2, sp, #24
24014e38:	ee10 3a10 	vmov	r3, s0
24014e3c:	46ab      	mov	fp, r5
24014e3e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24014e42:	e737      	b.n	24014cb4 <__kernel_rem_pio2+0x1fc>
24014e44:	ac06      	add	r4, sp, #24
24014e46:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
24014e4a:	9401      	str	r4, [sp, #4]
24014e4c:	ee07 4a90 	vmov	s15, r4
24014e50:	3901      	subs	r1, #1
24014e52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24014e56:	ee27 7b00 	vmul.f64	d7, d7, d0
24014e5a:	ee20 0b06 	vmul.f64	d0, d0, d6
24014e5e:	ed20 7b02 	vstmdb	r0!, {d7}
24014e62:	e735      	b.n	24014cd0 <__kernel_rem_pio2+0x218>
24014e64:	ecbc 5b02 	vldmia	ip!, {d5}
24014e68:	ecb5 6b02 	vldmia	r5!, {d6}
24014e6c:	3401      	adds	r4, #1
24014e6e:	eea5 7b06 	vfma.f64	d7, d5, d6
24014e72:	454c      	cmp	r4, r9
24014e74:	dc01      	bgt.n	24014e7a <__kernel_rem_pio2+0x3c2>
24014e76:	4284      	cmp	r4, r0
24014e78:	ddf4      	ble.n	24014e64 <__kernel_rem_pio2+0x3ac>
24014e7a:	ac42      	add	r4, sp, #264	; 0x108
24014e7c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24014e80:	ed80 7b00 	vstr	d7, [r0]
24014e84:	3901      	subs	r1, #1
24014e86:	e727      	b.n	24014cd8 <__kernel_rem_pio2+0x220>
24014e88:	99a2      	ldr	r1, [sp, #648]	; 0x288
24014e8a:	2902      	cmp	r1, #2
24014e8c:	dc0a      	bgt.n	24014ea4 <__kernel_rem_pio2+0x3ec>
24014e8e:	2900      	cmp	r1, #0
24014e90:	dc2c      	bgt.n	24014eec <__kernel_rem_pio2+0x434>
24014e92:	d045      	beq.n	24014f20 <__kernel_rem_pio2+0x468>
24014e94:	f008 0007 	and.w	r0, r8, #7
24014e98:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
24014e9c:	ecbd 8b06 	vpop	{d8-d10}
24014ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014ea4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
24014ea6:	2a03      	cmp	r2, #3
24014ea8:	d1f4      	bne.n	24014e94 <__kernel_rem_pio2+0x3dc>
24014eaa:	aa42      	add	r2, sp, #264	; 0x108
24014eac:	4413      	add	r3, r2
24014eae:	461a      	mov	r2, r3
24014eb0:	4619      	mov	r1, r3
24014eb2:	4658      	mov	r0, fp
24014eb4:	2800      	cmp	r0, #0
24014eb6:	f1a1 0108 	sub.w	r1, r1, #8
24014eba:	dc54      	bgt.n	24014f66 <__kernel_rem_pio2+0x4ae>
24014ebc:	4659      	mov	r1, fp
24014ebe:	2901      	cmp	r1, #1
24014ec0:	f1a2 0208 	sub.w	r2, r2, #8
24014ec4:	dc5f      	bgt.n	24014f86 <__kernel_rem_pio2+0x4ce>
24014ec6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 24014fe0 <__kernel_rem_pio2+0x528>
24014eca:	3308      	adds	r3, #8
24014ecc:	f1bb 0f01 	cmp.w	fp, #1
24014ed0:	dc69      	bgt.n	24014fa6 <__kernel_rem_pio2+0x4ee>
24014ed2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
24014ed6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
24014eda:	2e00      	cmp	r6, #0
24014edc:	d16a      	bne.n	24014fb4 <__kernel_rem_pio2+0x4fc>
24014ede:	ed87 5b00 	vstr	d5, [r7]
24014ee2:	ed87 6b02 	vstr	d6, [r7, #8]
24014ee6:	ed87 7b04 	vstr	d7, [r7, #16]
24014eea:	e7d3      	b.n	24014e94 <__kernel_rem_pio2+0x3dc>
24014eec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 24014fe0 <__kernel_rem_pio2+0x528>
24014ef0:	ab42      	add	r3, sp, #264	; 0x108
24014ef2:	441a      	add	r2, r3
24014ef4:	465b      	mov	r3, fp
24014ef6:	2b00      	cmp	r3, #0
24014ef8:	da26      	bge.n	24014f48 <__kernel_rem_pio2+0x490>
24014efa:	b35e      	cbz	r6, 24014f54 <__kernel_rem_pio2+0x49c>
24014efc:	eeb1 7b46 	vneg.f64	d7, d6
24014f00:	ed87 7b00 	vstr	d7, [r7]
24014f04:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
24014f08:	aa44      	add	r2, sp, #272	; 0x110
24014f0a:	2301      	movs	r3, #1
24014f0c:	ee37 7b46 	vsub.f64	d7, d7, d6
24014f10:	459b      	cmp	fp, r3
24014f12:	da22      	bge.n	24014f5a <__kernel_rem_pio2+0x4a2>
24014f14:	b10e      	cbz	r6, 24014f1a <__kernel_rem_pio2+0x462>
24014f16:	eeb1 7b47 	vneg.f64	d7, d7
24014f1a:	ed87 7b02 	vstr	d7, [r7, #8]
24014f1e:	e7b9      	b.n	24014e94 <__kernel_rem_pio2+0x3dc>
24014f20:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24014fe0 <__kernel_rem_pio2+0x528>
24014f24:	ab42      	add	r3, sp, #264	; 0x108
24014f26:	441a      	add	r2, r3
24014f28:	f1bb 0f00 	cmp.w	fp, #0
24014f2c:	da05      	bge.n	24014f3a <__kernel_rem_pio2+0x482>
24014f2e:	b10e      	cbz	r6, 24014f34 <__kernel_rem_pio2+0x47c>
24014f30:	eeb1 7b47 	vneg.f64	d7, d7
24014f34:	ed87 7b00 	vstr	d7, [r7]
24014f38:	e7ac      	b.n	24014e94 <__kernel_rem_pio2+0x3dc>
24014f3a:	ed32 6b02 	vldmdb	r2!, {d6}
24014f3e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24014f42:	ee37 7b06 	vadd.f64	d7, d7, d6
24014f46:	e7ef      	b.n	24014f28 <__kernel_rem_pio2+0x470>
24014f48:	ed32 7b02 	vldmdb	r2!, {d7}
24014f4c:	3b01      	subs	r3, #1
24014f4e:	ee36 6b07 	vadd.f64	d6, d6, d7
24014f52:	e7d0      	b.n	24014ef6 <__kernel_rem_pio2+0x43e>
24014f54:	eeb0 7b46 	vmov.f64	d7, d6
24014f58:	e7d2      	b.n	24014f00 <__kernel_rem_pio2+0x448>
24014f5a:	ecb2 6b02 	vldmia	r2!, {d6}
24014f5e:	3301      	adds	r3, #1
24014f60:	ee37 7b06 	vadd.f64	d7, d7, d6
24014f64:	e7d4      	b.n	24014f10 <__kernel_rem_pio2+0x458>
24014f66:	ed91 7b00 	vldr	d7, [r1]
24014f6a:	ed91 5b02 	vldr	d5, [r1, #8]
24014f6e:	3801      	subs	r0, #1
24014f70:	ee37 6b05 	vadd.f64	d6, d7, d5
24014f74:	ee37 7b46 	vsub.f64	d7, d7, d6
24014f78:	ed81 6b00 	vstr	d6, [r1]
24014f7c:	ee37 7b05 	vadd.f64	d7, d7, d5
24014f80:	ed81 7b02 	vstr	d7, [r1, #8]
24014f84:	e796      	b.n	24014eb4 <__kernel_rem_pio2+0x3fc>
24014f86:	ed92 7b00 	vldr	d7, [r2]
24014f8a:	ed92 5b02 	vldr	d5, [r2, #8]
24014f8e:	3901      	subs	r1, #1
24014f90:	ee37 6b05 	vadd.f64	d6, d7, d5
24014f94:	ee37 7b46 	vsub.f64	d7, d7, d6
24014f98:	ed82 6b00 	vstr	d6, [r2]
24014f9c:	ee37 7b05 	vadd.f64	d7, d7, d5
24014fa0:	ed82 7b02 	vstr	d7, [r2, #8]
24014fa4:	e78b      	b.n	24014ebe <__kernel_rem_pio2+0x406>
24014fa6:	ed33 6b02 	vldmdb	r3!, {d6}
24014faa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24014fae:	ee37 7b06 	vadd.f64	d7, d7, d6
24014fb2:	e78b      	b.n	24014ecc <__kernel_rem_pio2+0x414>
24014fb4:	eeb1 5b45 	vneg.f64	d5, d5
24014fb8:	eeb1 6b46 	vneg.f64	d6, d6
24014fbc:	ed87 5b00 	vstr	d5, [r7]
24014fc0:	eeb1 7b47 	vneg.f64	d7, d7
24014fc4:	ed87 6b02 	vstr	d6, [r7, #8]
24014fc8:	e78d      	b.n	24014ee6 <__kernel_rem_pio2+0x42e>
24014fca:	bf00      	nop
24014fcc:	f3af 8000 	nop.w
24014fd0:	00000000 	.word	0x00000000
24014fd4:	41700000 	.word	0x41700000
24014fd8:	00000000 	.word	0x00000000
24014fdc:	3e700000 	.word	0x3e700000
	...

24014fe8 <__kernel_tan>:
24014fe8:	eeb0 7b40 	vmov.f64	d7, d0
24014fec:	ee17 3a90 	vmov	r3, s15
24014ff0:	4987      	ldr	r1, [pc, #540]	; (24015210 <__kernel_tan+0x228>)
24014ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24014ff6:	428a      	cmp	r2, r1
24014ff8:	b510      	push	{r4, lr}
24014ffa:	dc33      	bgt.n	24015064 <__kernel_tan+0x7c>
24014ffc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
24015000:	ee16 1a90 	vmov	r1, s13
24015004:	2900      	cmp	r1, #0
24015006:	d143      	bne.n	24015090 <__kernel_tan+0xa8>
24015008:	ee10 4a10 	vmov	r4, s0
2401500c:	1c43      	adds	r3, r0, #1
2401500e:	4323      	orrs	r3, r4
24015010:	4313      	orrs	r3, r2
24015012:	d108      	bne.n	24015026 <__kernel_tan+0x3e>
24015014:	f000 fc56 	bl	240158c4 <fabs>
24015018:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401501c:	ee86 7b00 	vdiv.f64	d7, d6, d0
24015020:	eeb0 0b47 	vmov.f64	d0, d7
24015024:	bd10      	pop	{r4, pc}
24015026:	2801      	cmp	r0, #1
24015028:	d0fa      	beq.n	24015020 <__kernel_tan+0x38>
2401502a:	ee30 6b01 	vadd.f64	d6, d0, d1
2401502e:	ec53 2b16 	vmov	r2, r3, d6
24015032:	460a      	mov	r2, r1
24015034:	ec43 2b15 	vmov	d5, r2, r3
24015038:	ee35 7b40 	vsub.f64	d7, d5, d0
2401503c:	ee31 1b47 	vsub.f64	d1, d1, d7
24015040:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
24015044:	ee87 4b06 	vdiv.f64	d4, d7, d6
24015048:	ec53 2b14 	vmov	r2, r3, d4
2401504c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24015050:	460a      	mov	r2, r1
24015052:	ec43 2b17 	vmov	d7, r2, r3
24015056:	eea5 6b07 	vfma.f64	d6, d5, d7
2401505a:	eea1 6b07 	vfma.f64	d6, d1, d7
2401505e:	eea6 7b04 	vfma.f64	d7, d6, d4
24015062:	e7dd      	b.n	24015020 <__kernel_tan+0x38>
24015064:	496b      	ldr	r1, [pc, #428]	; (24015214 <__kernel_tan+0x22c>)
24015066:	428a      	cmp	r2, r1
24015068:	dd12      	ble.n	24015090 <__kernel_tan+0xa8>
2401506a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 24015190 <__kernel_tan+0x1a8>
2401506e:	2b00      	cmp	r3, #0
24015070:	bfb8      	it	lt
24015072:	eeb1 7b40 	vneglt.f64	d7, d0
24015076:	ee36 7b47 	vsub.f64	d7, d6, d7
2401507a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 24015198 <__kernel_tan+0x1b0>
2401507e:	bfb8      	it	lt
24015080:	eeb1 1b41 	vneglt.f64	d1, d1
24015084:	ee36 1b41 	vsub.f64	d1, d6, d1
24015088:	ee31 7b07 	vadd.f64	d7, d1, d7
2401508c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 240151a0 <__kernel_tan+0x1b8>
24015090:	ee27 5b07 	vmul.f64	d5, d7, d7
24015094:	ee25 6b05 	vmul.f64	d6, d5, d5
24015098:	ed9f 3b43 	vldr	d3, [pc, #268]	; 240151a8 <__kernel_tan+0x1c0>
2401509c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 240151b0 <__kernel_tan+0x1c8>
240150a0:	eea6 4b03 	vfma.f64	d4, d6, d3
240150a4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 240151b8 <__kernel_tan+0x1d0>
240150a8:	eea4 3b06 	vfma.f64	d3, d4, d6
240150ac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 240151c0 <__kernel_tan+0x1d8>
240150b0:	eea3 4b06 	vfma.f64	d4, d3, d6
240150b4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 240151c8 <__kernel_tan+0x1e0>
240150b8:	eea4 3b06 	vfma.f64	d3, d4, d6
240150bc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 240151d0 <__kernel_tan+0x1e8>
240150c0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240151d8 <__kernel_tan+0x1f0>
240150c4:	eea3 4b06 	vfma.f64	d4, d3, d6
240150c8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240151e0 <__kernel_tan+0x1f8>
240150cc:	eea6 3b02 	vfma.f64	d3, d6, d2
240150d0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240151e8 <__kernel_tan+0x200>
240150d4:	eea3 2b06 	vfma.f64	d2, d3, d6
240150d8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240151f0 <__kernel_tan+0x208>
240150dc:	eea2 3b06 	vfma.f64	d3, d2, d6
240150e0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240151f8 <__kernel_tan+0x210>
240150e4:	eea3 2b06 	vfma.f64	d2, d3, d6
240150e8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 24015200 <__kernel_tan+0x218>
240150ec:	4949      	ldr	r1, [pc, #292]	; (24015214 <__kernel_tan+0x22c>)
240150ee:	eea2 3b06 	vfma.f64	d3, d2, d6
240150f2:	ee27 2b05 	vmul.f64	d2, d7, d5
240150f6:	eeb0 6b44 	vmov.f64	d6, d4
240150fa:	eeb0 4b41 	vmov.f64	d4, d1
240150fe:	eea3 6b05 	vfma.f64	d6, d3, d5
24015102:	eea6 4b02 	vfma.f64	d4, d6, d2
24015106:	ed9f 6b40 	vldr	d6, [pc, #256]	; 24015208 <__kernel_tan+0x220>
2401510a:	eea4 1b05 	vfma.f64	d1, d4, d5
2401510e:	428a      	cmp	r2, r1
24015110:	eea2 1b06 	vfma.f64	d1, d2, d6
24015114:	ee37 5b01 	vadd.f64	d5, d7, d1
24015118:	dd1d      	ble.n	24015156 <__kernel_tan+0x16e>
2401511a:	ee25 3b05 	vmul.f64	d3, d5, d5
2401511e:	179b      	asrs	r3, r3, #30
24015120:	ee06 0a90 	vmov	s13, r0
24015124:	f003 0302 	and.w	r3, r3, #2
24015128:	f1c3 0301 	rsb	r3, r3, #1
2401512c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
24015130:	ee35 5b06 	vadd.f64	d5, d5, d6
24015134:	ee83 4b05 	vdiv.f64	d4, d3, d5
24015138:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
2401513c:	ee34 1b41 	vsub.f64	d1, d4, d1
24015140:	ee37 7b41 	vsub.f64	d7, d7, d1
24015144:	eea7 6b45 	vfms.f64	d6, d7, d5
24015148:	ee07 3a10 	vmov	s14, r3
2401514c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24015150:	ee27 7b06 	vmul.f64	d7, d7, d6
24015154:	e764      	b.n	24015020 <__kernel_tan+0x38>
24015156:	2801      	cmp	r0, #1
24015158:	d016      	beq.n	24015188 <__kernel_tan+0x1a0>
2401515a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401515e:	ec51 0b15 	vmov	r0, r1, d5
24015162:	2000      	movs	r0, #0
24015164:	ec41 0b13 	vmov	d3, r0, r1
24015168:	ee33 7b47 	vsub.f64	d7, d3, d7
2401516c:	ee31 1b47 	vsub.f64	d1, d1, d7
24015170:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
24015174:	ee87 4b05 	vdiv.f64	d4, d7, d5
24015178:	ec53 2b14 	vmov	r2, r3, d4
2401517c:	4602      	mov	r2, r0
2401517e:	ec43 2b17 	vmov	d7, r2, r3
24015182:	eea3 6b07 	vfma.f64	d6, d3, d7
24015186:	e768      	b.n	2401505a <__kernel_tan+0x72>
24015188:	eeb0 7b45 	vmov.f64	d7, d5
2401518c:	e748      	b.n	24015020 <__kernel_tan+0x38>
2401518e:	bf00      	nop
24015190:	54442d18 	.word	0x54442d18
24015194:	3fe921fb 	.word	0x3fe921fb
24015198:	33145c07 	.word	0x33145c07
2401519c:	3c81a626 	.word	0x3c81a626
	...
240151a8:	db605373 	.word	0xdb605373
240151ac:	bef375cb 	.word	0xbef375cb
240151b0:	a03792a6 	.word	0xa03792a6
240151b4:	3f147e88 	.word	0x3f147e88
240151b8:	f2f26501 	.word	0xf2f26501
240151bc:	3f4344d8 	.word	0x3f4344d8
240151c0:	c9560328 	.word	0xc9560328
240151c4:	3f6d6d22 	.word	0x3f6d6d22
240151c8:	8406d637 	.word	0x8406d637
240151cc:	3f9664f4 	.word	0x3f9664f4
240151d0:	1110fe7a 	.word	0x1110fe7a
240151d4:	3fc11111 	.word	0x3fc11111
240151d8:	74bf7ad4 	.word	0x74bf7ad4
240151dc:	3efb2a70 	.word	0x3efb2a70
240151e0:	32f0a7e9 	.word	0x32f0a7e9
240151e4:	3f12b80f 	.word	0x3f12b80f
240151e8:	1a8d1068 	.word	0x1a8d1068
240151ec:	3f3026f7 	.word	0x3f3026f7
240151f0:	fee08315 	.word	0xfee08315
240151f4:	3f57dbc8 	.word	0x3f57dbc8
240151f8:	e96e8493 	.word	0xe96e8493
240151fc:	3f8226e3 	.word	0x3f8226e3
24015200:	1bb341fe 	.word	0x1bb341fe
24015204:	3faba1ba 	.word	0x3faba1ba
24015208:	55555563 	.word	0x55555563
2401520c:	3fd55555 	.word	0x3fd55555
24015210:	3e2fffff 	.word	0x3e2fffff
24015214:	3fe59427 	.word	0x3fe59427

24015218 <__kernel_rem_pio2f>:
24015218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401521c:	ed2d 8b04 	vpush	{d8-d9}
24015220:	b0d9      	sub	sp, #356	; 0x164
24015222:	4688      	mov	r8, r1
24015224:	9002      	str	r0, [sp, #8]
24015226:	49bb      	ldr	r1, [pc, #748]	; (24015514 <__kernel_rem_pio2f+0x2fc>)
24015228:	9866      	ldr	r0, [sp, #408]	; 0x198
2401522a:	9301      	str	r3, [sp, #4]
2401522c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
24015230:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
24015234:	1e59      	subs	r1, r3, #1
24015236:	1d13      	adds	r3, r2, #4
24015238:	db27      	blt.n	2401528a <__kernel_rem_pio2f+0x72>
2401523a:	f1b2 0b03 	subs.w	fp, r2, #3
2401523e:	bf48      	it	mi
24015240:	f102 0b04 	addmi.w	fp, r2, #4
24015244:	ea4f 00eb 	mov.w	r0, fp, asr #3
24015248:	1c45      	adds	r5, r0, #1
2401524a:	00ec      	lsls	r4, r5, #3
2401524c:	1a47      	subs	r7, r0, r1
2401524e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 24015524 <__kernel_rem_pio2f+0x30c>
24015252:	9403      	str	r4, [sp, #12]
24015254:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
24015258:	eb0a 0c01 	add.w	ip, sl, r1
2401525c:	ae1c      	add	r6, sp, #112	; 0x70
2401525e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
24015262:	2400      	movs	r4, #0
24015264:	4564      	cmp	r4, ip
24015266:	dd12      	ble.n	2401528e <__kernel_rem_pio2f+0x76>
24015268:	9b01      	ldr	r3, [sp, #4]
2401526a:	ac1c      	add	r4, sp, #112	; 0x70
2401526c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24015270:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
24015274:	f04f 0c00 	mov.w	ip, #0
24015278:	45d4      	cmp	ip, sl
2401527a:	dc27      	bgt.n	240152cc <__kernel_rem_pio2f+0xb4>
2401527c:	f8dd 9008 	ldr.w	r9, [sp, #8]
24015280:	eddf 7aa8 	vldr	s15, [pc, #672]	; 24015524 <__kernel_rem_pio2f+0x30c>
24015284:	4627      	mov	r7, r4
24015286:	2600      	movs	r6, #0
24015288:	e016      	b.n	240152b8 <__kernel_rem_pio2f+0xa0>
2401528a:	2000      	movs	r0, #0
2401528c:	e7dc      	b.n	24015248 <__kernel_rem_pio2f+0x30>
2401528e:	42e7      	cmn	r7, r4
24015290:	bf5d      	ittte	pl
24015292:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
24015296:	ee07 3a90 	vmovpl	s15, r3
2401529a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401529e:	eef0 7a47 	vmovmi.f32	s15, s14
240152a2:	ece6 7a01 	vstmia	r6!, {s15}
240152a6:	3401      	adds	r4, #1
240152a8:	e7dc      	b.n	24015264 <__kernel_rem_pio2f+0x4c>
240152aa:	ecf9 6a01 	vldmia	r9!, {s13}
240152ae:	ed97 7a00 	vldr	s14, [r7]
240152b2:	eee6 7a87 	vfma.f32	s15, s13, s14
240152b6:	3601      	adds	r6, #1
240152b8:	428e      	cmp	r6, r1
240152ba:	f1a7 0704 	sub.w	r7, r7, #4
240152be:	ddf4      	ble.n	240152aa <__kernel_rem_pio2f+0x92>
240152c0:	eceb 7a01 	vstmia	fp!, {s15}
240152c4:	f10c 0c01 	add.w	ip, ip, #1
240152c8:	3404      	adds	r4, #4
240152ca:	e7d5      	b.n	24015278 <__kernel_rem_pio2f+0x60>
240152cc:	ab08      	add	r3, sp, #32
240152ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
240152d2:	eddf 8a93 	vldr	s17, [pc, #588]	; 24015520 <__kernel_rem_pio2f+0x308>
240152d6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 2401551c <__kernel_rem_pio2f+0x304>
240152da:	9304      	str	r3, [sp, #16]
240152dc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
240152e0:	4656      	mov	r6, sl
240152e2:	00b3      	lsls	r3, r6, #2
240152e4:	9305      	str	r3, [sp, #20]
240152e6:	ab58      	add	r3, sp, #352	; 0x160
240152e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
240152ec:	ac08      	add	r4, sp, #32
240152ee:	ab44      	add	r3, sp, #272	; 0x110
240152f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
240152f4:	46a4      	mov	ip, r4
240152f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
240152fa:	4637      	mov	r7, r6
240152fc:	2f00      	cmp	r7, #0
240152fe:	f1a0 0004 	sub.w	r0, r0, #4
24015302:	dc4f      	bgt.n	240153a4 <__kernel_rem_pio2f+0x18c>
24015304:	4628      	mov	r0, r5
24015306:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401530a:	f000 fd45 	bl	24015d98 <scalbnf>
2401530e:	eeb0 8a40 	vmov.f32	s16, s0
24015312:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
24015316:	ee28 0a00 	vmul.f32	s0, s16, s0
2401531a:	f000 fcf5 	bl	24015d08 <floorf>
2401531e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
24015322:	eea0 8a67 	vfms.f32	s16, s0, s15
24015326:	2d00      	cmp	r5, #0
24015328:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401532c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
24015330:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
24015334:	ee17 9a90 	vmov	r9, s15
24015338:	ee38 8a40 	vsub.f32	s16, s16, s0
2401533c:	dd44      	ble.n	240153c8 <__kernel_rem_pio2f+0x1b0>
2401533e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
24015342:	ab08      	add	r3, sp, #32
24015344:	f1c5 0e08 	rsb	lr, r5, #8
24015348:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
2401534c:	fa47 f00e 	asr.w	r0, r7, lr
24015350:	4481      	add	r9, r0
24015352:	fa00 f00e 	lsl.w	r0, r0, lr
24015356:	1a3f      	subs	r7, r7, r0
24015358:	f1c5 0007 	rsb	r0, r5, #7
2401535c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
24015360:	4107      	asrs	r7, r0
24015362:	2f00      	cmp	r7, #0
24015364:	dd3f      	ble.n	240153e6 <__kernel_rem_pio2f+0x1ce>
24015366:	f04f 0e00 	mov.w	lr, #0
2401536a:	f109 0901 	add.w	r9, r9, #1
2401536e:	4673      	mov	r3, lr
24015370:	4576      	cmp	r6, lr
24015372:	dc6b      	bgt.n	2401544c <__kernel_rem_pio2f+0x234>
24015374:	2d00      	cmp	r5, #0
24015376:	dd04      	ble.n	24015382 <__kernel_rem_pio2f+0x16a>
24015378:	2d01      	cmp	r5, #1
2401537a:	d078      	beq.n	2401546e <__kernel_rem_pio2f+0x256>
2401537c:	2d02      	cmp	r5, #2
2401537e:	f000 8081 	beq.w	24015484 <__kernel_rem_pio2f+0x26c>
24015382:	2f02      	cmp	r7, #2
24015384:	d12f      	bne.n	240153e6 <__kernel_rem_pio2f+0x1ce>
24015386:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401538a:	ee30 8a48 	vsub.f32	s16, s0, s16
2401538e:	b353      	cbz	r3, 240153e6 <__kernel_rem_pio2f+0x1ce>
24015390:	4628      	mov	r0, r5
24015392:	e9cd 1206 	strd	r1, r2, [sp, #24]
24015396:	f000 fcff 	bl	24015d98 <scalbnf>
2401539a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
2401539e:	ee38 8a40 	vsub.f32	s16, s16, s0
240153a2:	e020      	b.n	240153e6 <__kernel_rem_pio2f+0x1ce>
240153a4:	ee60 7a28 	vmul.f32	s15, s0, s17
240153a8:	3f01      	subs	r7, #1
240153aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240153ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240153b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
240153b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240153ba:	ecac 0a01 	vstmia	ip!, {s0}
240153be:	ed90 0a00 	vldr	s0, [r0]
240153c2:	ee37 0a80 	vadd.f32	s0, s15, s0
240153c6:	e799      	b.n	240152fc <__kernel_rem_pio2f+0xe4>
240153c8:	d105      	bne.n	240153d6 <__kernel_rem_pio2f+0x1be>
240153ca:	1e70      	subs	r0, r6, #1
240153cc:	ab08      	add	r3, sp, #32
240153ce:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
240153d2:	11ff      	asrs	r7, r7, #7
240153d4:	e7c5      	b.n	24015362 <__kernel_rem_pio2f+0x14a>
240153d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240153da:	eeb4 8ae7 	vcmpe.f32	s16, s15
240153de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240153e2:	da31      	bge.n	24015448 <__kernel_rem_pio2f+0x230>
240153e4:	2700      	movs	r7, #0
240153e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
240153ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240153ee:	f040 809b 	bne.w	24015528 <__kernel_rem_pio2f+0x310>
240153f2:	1e74      	subs	r4, r6, #1
240153f4:	46a4      	mov	ip, r4
240153f6:	2000      	movs	r0, #0
240153f8:	45d4      	cmp	ip, sl
240153fa:	da4a      	bge.n	24015492 <__kernel_rem_pio2f+0x27a>
240153fc:	2800      	cmp	r0, #0
240153fe:	d07a      	beq.n	240154f6 <__kernel_rem_pio2f+0x2de>
24015400:	ab08      	add	r3, sp, #32
24015402:	3d08      	subs	r5, #8
24015404:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24015408:	2b00      	cmp	r3, #0
2401540a:	f000 8081 	beq.w	24015510 <__kernel_rem_pio2f+0x2f8>
2401540e:	4628      	mov	r0, r5
24015410:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015414:	00a5      	lsls	r5, r4, #2
24015416:	f000 fcbf 	bl	24015d98 <scalbnf>
2401541a:	aa44      	add	r2, sp, #272	; 0x110
2401541c:	1d2b      	adds	r3, r5, #4
2401541e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 24015520 <__kernel_rem_pio2f+0x308>
24015422:	18d1      	adds	r1, r2, r3
24015424:	4622      	mov	r2, r4
24015426:	2a00      	cmp	r2, #0
24015428:	f280 80ae 	bge.w	24015588 <__kernel_rem_pio2f+0x370>
2401542c:	4622      	mov	r2, r4
2401542e:	2a00      	cmp	r2, #0
24015430:	f2c0 80cc 	blt.w	240155cc <__kernel_rem_pio2f+0x3b4>
24015434:	a944      	add	r1, sp, #272	; 0x110
24015436:	eb01 0682 	add.w	r6, r1, r2, lsl #2
2401543a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 24015518 <__kernel_rem_pio2f+0x300>
2401543e:	eddf 7a39 	vldr	s15, [pc, #228]	; 24015524 <__kernel_rem_pio2f+0x30c>
24015442:	2000      	movs	r0, #0
24015444:	1aa1      	subs	r1, r4, r2
24015446:	e0b6      	b.n	240155b6 <__kernel_rem_pio2f+0x39e>
24015448:	2702      	movs	r7, #2
2401544a:	e78c      	b.n	24015366 <__kernel_rem_pio2f+0x14e>
2401544c:	6820      	ldr	r0, [r4, #0]
2401544e:	b94b      	cbnz	r3, 24015464 <__kernel_rem_pio2f+0x24c>
24015450:	b118      	cbz	r0, 2401545a <__kernel_rem_pio2f+0x242>
24015452:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
24015456:	6020      	str	r0, [r4, #0]
24015458:	2001      	movs	r0, #1
2401545a:	f10e 0e01 	add.w	lr, lr, #1
2401545e:	3404      	adds	r4, #4
24015460:	4603      	mov	r3, r0
24015462:	e785      	b.n	24015370 <__kernel_rem_pio2f+0x158>
24015464:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
24015468:	6020      	str	r0, [r4, #0]
2401546a:	4618      	mov	r0, r3
2401546c:	e7f5      	b.n	2401545a <__kernel_rem_pio2f+0x242>
2401546e:	1e74      	subs	r4, r6, #1
24015470:	a808      	add	r0, sp, #32
24015472:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
24015476:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2401547a:	f10d 0c20 	add.w	ip, sp, #32
2401547e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
24015482:	e77e      	b.n	24015382 <__kernel_rem_pio2f+0x16a>
24015484:	1e74      	subs	r4, r6, #1
24015486:	a808      	add	r0, sp, #32
24015488:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
2401548c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24015490:	e7f3      	b.n	2401547a <__kernel_rem_pio2f+0x262>
24015492:	ab08      	add	r3, sp, #32
24015494:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24015498:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401549c:	4318      	orrs	r0, r3
2401549e:	e7ab      	b.n	240153f8 <__kernel_rem_pio2f+0x1e0>
240154a0:	f10c 0c01 	add.w	ip, ip, #1
240154a4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
240154a8:	2c00      	cmp	r4, #0
240154aa:	d0f9      	beq.n	240154a0 <__kernel_rem_pio2f+0x288>
240154ac:	9b05      	ldr	r3, [sp, #20]
240154ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
240154b2:	eb0d 0003 	add.w	r0, sp, r3
240154b6:	9b01      	ldr	r3, [sp, #4]
240154b8:	18f4      	adds	r4, r6, r3
240154ba:	ab1c      	add	r3, sp, #112	; 0x70
240154bc:	1c77      	adds	r7, r6, #1
240154be:	384c      	subs	r0, #76	; 0x4c
240154c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
240154c4:	4466      	add	r6, ip
240154c6:	42be      	cmp	r6, r7
240154c8:	f6ff af0b 	blt.w	240152e2 <__kernel_rem_pio2f+0xca>
240154cc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
240154d0:	f8dd e008 	ldr.w	lr, [sp, #8]
240154d4:	ee07 3a90 	vmov	s15, r3
240154d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240154dc:	f04f 0c00 	mov.w	ip, #0
240154e0:	ece4 7a01 	vstmia	r4!, {s15}
240154e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24015524 <__kernel_rem_pio2f+0x30c>
240154e8:	46a1      	mov	r9, r4
240154ea:	458c      	cmp	ip, r1
240154ec:	dd07      	ble.n	240154fe <__kernel_rem_pio2f+0x2e6>
240154ee:	ece0 7a01 	vstmia	r0!, {s15}
240154f2:	3701      	adds	r7, #1
240154f4:	e7e7      	b.n	240154c6 <__kernel_rem_pio2f+0x2ae>
240154f6:	9804      	ldr	r0, [sp, #16]
240154f8:	f04f 0c01 	mov.w	ip, #1
240154fc:	e7d2      	b.n	240154a4 <__kernel_rem_pio2f+0x28c>
240154fe:	ecfe 6a01 	vldmia	lr!, {s13}
24015502:	ed39 7a01 	vldmdb	r9!, {s14}
24015506:	f10c 0c01 	add.w	ip, ip, #1
2401550a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401550e:	e7ec      	b.n	240154ea <__kernel_rem_pio2f+0x2d2>
24015510:	3c01      	subs	r4, #1
24015512:	e775      	b.n	24015400 <__kernel_rem_pio2f+0x1e8>
24015514:	2402ee8c 	.word	0x2402ee8c
24015518:	2402ee60 	.word	0x2402ee60
2401551c:	43800000 	.word	0x43800000
24015520:	3b800000 	.word	0x3b800000
24015524:	00000000 	.word	0x00000000
24015528:	9b03      	ldr	r3, [sp, #12]
2401552a:	eeb0 0a48 	vmov.f32	s0, s16
2401552e:	1a98      	subs	r0, r3, r2
24015530:	f000 fc32 	bl	24015d98 <scalbnf>
24015534:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401551c <__kernel_rem_pio2f+0x304>
24015538:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015540:	db19      	blt.n	24015576 <__kernel_rem_pio2f+0x35e>
24015542:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24015520 <__kernel_rem_pio2f+0x308>
24015546:	ee60 7a27 	vmul.f32	s15, s0, s15
2401554a:	aa08      	add	r2, sp, #32
2401554c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015550:	1c74      	adds	r4, r6, #1
24015552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015556:	3508      	adds	r5, #8
24015558:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401555c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015560:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015564:	ee10 3a10 	vmov	r3, s0
24015568:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401556c:	ee17 3a90 	vmov	r3, s15
24015570:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
24015574:	e74b      	b.n	2401540e <__kernel_rem_pio2f+0x1f6>
24015576:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401557a:	aa08      	add	r2, sp, #32
2401557c:	ee10 3a10 	vmov	r3, s0
24015580:	4634      	mov	r4, r6
24015582:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24015586:	e742      	b.n	2401540e <__kernel_rem_pio2f+0x1f6>
24015588:	a808      	add	r0, sp, #32
2401558a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
2401558e:	9001      	str	r0, [sp, #4]
24015590:	ee07 0a90 	vmov	s15, r0
24015594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015598:	3a01      	subs	r2, #1
2401559a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401559e:	ee20 0a07 	vmul.f32	s0, s0, s14
240155a2:	ed61 7a01 	vstmdb	r1!, {s15}
240155a6:	e73e      	b.n	24015426 <__kernel_rem_pio2f+0x20e>
240155a8:	ecfc 6a01 	vldmia	ip!, {s13}
240155ac:	ecb6 7a01 	vldmia	r6!, {s14}
240155b0:	eee6 7a87 	vfma.f32	s15, s13, s14
240155b4:	3001      	adds	r0, #1
240155b6:	4550      	cmp	r0, sl
240155b8:	dc01      	bgt.n	240155be <__kernel_rem_pio2f+0x3a6>
240155ba:	4288      	cmp	r0, r1
240155bc:	ddf4      	ble.n	240155a8 <__kernel_rem_pio2f+0x390>
240155be:	a858      	add	r0, sp, #352	; 0x160
240155c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
240155c4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
240155c8:	3a01      	subs	r2, #1
240155ca:	e730      	b.n	2401542e <__kernel_rem_pio2f+0x216>
240155cc:	9a66      	ldr	r2, [sp, #408]	; 0x198
240155ce:	2a02      	cmp	r2, #2
240155d0:	dc09      	bgt.n	240155e6 <__kernel_rem_pio2f+0x3ce>
240155d2:	2a00      	cmp	r2, #0
240155d4:	dc2a      	bgt.n	2401562c <__kernel_rem_pio2f+0x414>
240155d6:	d043      	beq.n	24015660 <__kernel_rem_pio2f+0x448>
240155d8:	f009 0007 	and.w	r0, r9, #7
240155dc:	b059      	add	sp, #356	; 0x164
240155de:	ecbd 8b04 	vpop	{d8-d9}
240155e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240155e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
240155e8:	2b03      	cmp	r3, #3
240155ea:	d1f5      	bne.n	240155d8 <__kernel_rem_pio2f+0x3c0>
240155ec:	ab30      	add	r3, sp, #192	; 0xc0
240155ee:	442b      	add	r3, r5
240155f0:	461a      	mov	r2, r3
240155f2:	4619      	mov	r1, r3
240155f4:	4620      	mov	r0, r4
240155f6:	2800      	cmp	r0, #0
240155f8:	f1a1 0104 	sub.w	r1, r1, #4
240155fc:	dc51      	bgt.n	240156a2 <__kernel_rem_pio2f+0x48a>
240155fe:	4621      	mov	r1, r4
24015600:	2901      	cmp	r1, #1
24015602:	f1a2 0204 	sub.w	r2, r2, #4
24015606:	dc5c      	bgt.n	240156c2 <__kernel_rem_pio2f+0x4aa>
24015608:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 24015524 <__kernel_rem_pio2f+0x30c>
2401560c:	3304      	adds	r3, #4
2401560e:	2c01      	cmp	r4, #1
24015610:	dc67      	bgt.n	240156e2 <__kernel_rem_pio2f+0x4ca>
24015612:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
24015616:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401561a:	2f00      	cmp	r7, #0
2401561c:	d167      	bne.n	240156ee <__kernel_rem_pio2f+0x4d6>
2401561e:	edc8 6a00 	vstr	s13, [r8]
24015622:	ed88 7a01 	vstr	s14, [r8, #4]
24015626:	edc8 7a02 	vstr	s15, [r8, #8]
2401562a:	e7d5      	b.n	240155d8 <__kernel_rem_pio2f+0x3c0>
2401562c:	aa30      	add	r2, sp, #192	; 0xc0
2401562e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 24015524 <__kernel_rem_pio2f+0x30c>
24015632:	4413      	add	r3, r2
24015634:	4622      	mov	r2, r4
24015636:	2a00      	cmp	r2, #0
24015638:	da24      	bge.n	24015684 <__kernel_rem_pio2f+0x46c>
2401563a:	b34f      	cbz	r7, 24015690 <__kernel_rem_pio2f+0x478>
2401563c:	eef1 7a47 	vneg.f32	s15, s14
24015640:	edc8 7a00 	vstr	s15, [r8]
24015644:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
24015648:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401564c:	aa31      	add	r2, sp, #196	; 0xc4
2401564e:	2301      	movs	r3, #1
24015650:	429c      	cmp	r4, r3
24015652:	da20      	bge.n	24015696 <__kernel_rem_pio2f+0x47e>
24015654:	b10f      	cbz	r7, 2401565a <__kernel_rem_pio2f+0x442>
24015656:	eef1 7a67 	vneg.f32	s15, s15
2401565a:	edc8 7a01 	vstr	s15, [r8, #4]
2401565e:	e7bb      	b.n	240155d8 <__kernel_rem_pio2f+0x3c0>
24015660:	aa30      	add	r2, sp, #192	; 0xc0
24015662:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 24015524 <__kernel_rem_pio2f+0x30c>
24015666:	4413      	add	r3, r2
24015668:	2c00      	cmp	r4, #0
2401566a:	da05      	bge.n	24015678 <__kernel_rem_pio2f+0x460>
2401566c:	b10f      	cbz	r7, 24015672 <__kernel_rem_pio2f+0x45a>
2401566e:	eef1 7a67 	vneg.f32	s15, s15
24015672:	edc8 7a00 	vstr	s15, [r8]
24015676:	e7af      	b.n	240155d8 <__kernel_rem_pio2f+0x3c0>
24015678:	ed33 7a01 	vldmdb	r3!, {s14}
2401567c:	3c01      	subs	r4, #1
2401567e:	ee77 7a87 	vadd.f32	s15, s15, s14
24015682:	e7f1      	b.n	24015668 <__kernel_rem_pio2f+0x450>
24015684:	ed73 7a01 	vldmdb	r3!, {s15}
24015688:	3a01      	subs	r2, #1
2401568a:	ee37 7a27 	vadd.f32	s14, s14, s15
2401568e:	e7d2      	b.n	24015636 <__kernel_rem_pio2f+0x41e>
24015690:	eef0 7a47 	vmov.f32	s15, s14
24015694:	e7d4      	b.n	24015640 <__kernel_rem_pio2f+0x428>
24015696:	ecb2 7a01 	vldmia	r2!, {s14}
2401569a:	3301      	adds	r3, #1
2401569c:	ee77 7a87 	vadd.f32	s15, s15, s14
240156a0:	e7d6      	b.n	24015650 <__kernel_rem_pio2f+0x438>
240156a2:	edd1 7a00 	vldr	s15, [r1]
240156a6:	edd1 6a01 	vldr	s13, [r1, #4]
240156aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
240156ae:	3801      	subs	r0, #1
240156b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
240156b4:	ed81 7a00 	vstr	s14, [r1]
240156b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
240156bc:	edc1 7a01 	vstr	s15, [r1, #4]
240156c0:	e799      	b.n	240155f6 <__kernel_rem_pio2f+0x3de>
240156c2:	edd2 7a00 	vldr	s15, [r2]
240156c6:	edd2 6a01 	vldr	s13, [r2, #4]
240156ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
240156ce:	3901      	subs	r1, #1
240156d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
240156d4:	ed82 7a00 	vstr	s14, [r2]
240156d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
240156dc:	edc2 7a01 	vstr	s15, [r2, #4]
240156e0:	e78e      	b.n	24015600 <__kernel_rem_pio2f+0x3e8>
240156e2:	ed33 7a01 	vldmdb	r3!, {s14}
240156e6:	3c01      	subs	r4, #1
240156e8:	ee77 7a87 	vadd.f32	s15, s15, s14
240156ec:	e78f      	b.n	2401560e <__kernel_rem_pio2f+0x3f6>
240156ee:	eef1 6a66 	vneg.f32	s13, s13
240156f2:	eeb1 7a47 	vneg.f32	s14, s14
240156f6:	edc8 6a00 	vstr	s13, [r8]
240156fa:	ed88 7a01 	vstr	s14, [r8, #4]
240156fe:	eef1 7a67 	vneg.f32	s15, s15
24015702:	e790      	b.n	24015626 <__kernel_rem_pio2f+0x40e>

24015704 <__kernel_tanf>:
24015704:	b508      	push	{r3, lr}
24015706:	ee10 3a10 	vmov	r3, s0
2401570a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401570e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
24015712:	eef0 7a40 	vmov.f32	s15, s0
24015716:	da17      	bge.n	24015748 <__kernel_tanf+0x44>
24015718:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401571c:	ee17 1a10 	vmov	r1, s14
24015720:	bb41      	cbnz	r1, 24015774 <__kernel_tanf+0x70>
24015722:	1c43      	adds	r3, r0, #1
24015724:	4313      	orrs	r3, r2
24015726:	d108      	bne.n	2401573a <__kernel_tanf+0x36>
24015728:	f7fe faee 	bl	24013d08 <fabsf>
2401572c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015730:	eec7 7a00 	vdiv.f32	s15, s14, s0
24015734:	eeb0 0a67 	vmov.f32	s0, s15
24015738:	bd08      	pop	{r3, pc}
2401573a:	2801      	cmp	r0, #1
2401573c:	d0fa      	beq.n	24015734 <__kernel_tanf+0x30>
2401573e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24015742:	eec7 7a00 	vdiv.f32	s15, s14, s0
24015746:	e7f5      	b.n	24015734 <__kernel_tanf+0x30>
24015748:	494c      	ldr	r1, [pc, #304]	; (2401587c <__kernel_tanf+0x178>)
2401574a:	428a      	cmp	r2, r1
2401574c:	db12      	blt.n	24015774 <__kernel_tanf+0x70>
2401574e:	2b00      	cmp	r3, #0
24015750:	bfb8      	it	lt
24015752:	eef1 7a40 	vneglt.f32	s15, s0
24015756:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 24015880 <__kernel_tanf+0x17c>
2401575a:	ee70 7a67 	vsub.f32	s15, s0, s15
2401575e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 24015884 <__kernel_tanf+0x180>
24015762:	bfb8      	it	lt
24015764:	eef1 0a60 	vneglt.f32	s1, s1
24015768:	ee70 0a60 	vsub.f32	s1, s0, s1
2401576c:	ee70 7aa7 	vadd.f32	s15, s1, s15
24015770:	eddf 0a45 	vldr	s1, [pc, #276]	; 24015888 <__kernel_tanf+0x184>
24015774:	eddf 5a45 	vldr	s11, [pc, #276]	; 2401588c <__kernel_tanf+0x188>
24015778:	ed9f 6a45 	vldr	s12, [pc, #276]	; 24015890 <__kernel_tanf+0x18c>
2401577c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 24015894 <__kernel_tanf+0x190>
24015780:	493e      	ldr	r1, [pc, #248]	; (2401587c <__kernel_tanf+0x178>)
24015782:	ee67 6aa7 	vmul.f32	s13, s15, s15
24015786:	428a      	cmp	r2, r1
24015788:	ee26 7aa6 	vmul.f32	s14, s13, s13
2401578c:	eea7 6a25 	vfma.f32	s12, s14, s11
24015790:	eddf 5a41 	vldr	s11, [pc, #260]	; 24015898 <__kernel_tanf+0x194>
24015794:	eee6 5a07 	vfma.f32	s11, s12, s14
24015798:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401589c <__kernel_tanf+0x198>
2401579c:	eea5 6a87 	vfma.f32	s12, s11, s14
240157a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 240158a0 <__kernel_tanf+0x19c>
240157a4:	eee6 5a07 	vfma.f32	s11, s12, s14
240157a8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 240158a4 <__kernel_tanf+0x1a0>
240157ac:	eea5 6a87 	vfma.f32	s12, s11, s14
240157b0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 240158a8 <__kernel_tanf+0x1a4>
240157b4:	eee7 5a05 	vfma.f32	s11, s14, s10
240157b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 240158ac <__kernel_tanf+0x1a8>
240157bc:	eea5 5a87 	vfma.f32	s10, s11, s14
240157c0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 240158b0 <__kernel_tanf+0x1ac>
240157c4:	eee5 5a07 	vfma.f32	s11, s10, s14
240157c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 240158b4 <__kernel_tanf+0x1b0>
240157cc:	eea5 5a87 	vfma.f32	s10, s11, s14
240157d0:	eddf 5a39 	vldr	s11, [pc, #228]	; 240158b8 <__kernel_tanf+0x1b4>
240157d4:	eee5 5a07 	vfma.f32	s11, s10, s14
240157d8:	eeb0 7a46 	vmov.f32	s14, s12
240157dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
240157e0:	ee27 5aa6 	vmul.f32	s10, s15, s13
240157e4:	eeb0 6a60 	vmov.f32	s12, s1
240157e8:	eea7 6a05 	vfma.f32	s12, s14, s10
240157ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 240158bc <__kernel_tanf+0x1b8>
240157f0:	eee6 0a26 	vfma.f32	s1, s12, s13
240157f4:	eee5 0a07 	vfma.f32	s1, s10, s14
240157f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
240157fc:	db1d      	blt.n	2401583a <__kernel_tanf+0x136>
240157fe:	ee06 0a90 	vmov	s13, r0
24015802:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
24015806:	ee27 6a07 	vmul.f32	s12, s14, s14
2401580a:	ee37 7a00 	vadd.f32	s14, s14, s0
2401580e:	179b      	asrs	r3, r3, #30
24015810:	eec6 6a07 	vdiv.f32	s13, s12, s14
24015814:	f003 0302 	and.w	r3, r3, #2
24015818:	f1c3 0301 	rsb	r3, r3, #1
2401581c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24015820:	ee76 0ae0 	vsub.f32	s1, s13, s1
24015824:	ee77 7ae0 	vsub.f32	s15, s15, s1
24015828:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401582c:	ee07 3a90 	vmov	s15, r3
24015830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015834:	ee67 7a80 	vmul.f32	s15, s15, s0
24015838:	e77c      	b.n	24015734 <__kernel_tanf+0x30>
2401583a:	2801      	cmp	r0, #1
2401583c:	d01b      	beq.n	24015876 <__kernel_tanf+0x172>
2401583e:	4b20      	ldr	r3, [pc, #128]	; (240158c0 <__kernel_tanf+0x1bc>)
24015840:	ee17 2a10 	vmov	r2, s14
24015844:	401a      	ands	r2, r3
24015846:	ee06 2a10 	vmov	s12, r2
2401584a:	ee76 7a67 	vsub.f32	s15, s12, s15
2401584e:	ee70 0ae7 	vsub.f32	s1, s1, s15
24015852:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24015856:	eec7 6a87 	vdiv.f32	s13, s15, s14
2401585a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401585e:	ee16 2a90 	vmov	r2, s13
24015862:	4013      	ands	r3, r2
24015864:	ee07 3a90 	vmov	s15, r3
24015868:	eea6 7a27 	vfma.f32	s14, s12, s15
2401586c:	eea0 7aa7 	vfma.f32	s14, s1, s15
24015870:	eee7 7a26 	vfma.f32	s15, s14, s13
24015874:	e75e      	b.n	24015734 <__kernel_tanf+0x30>
24015876:	eef0 7a47 	vmov.f32	s15, s14
2401587a:	e75b      	b.n	24015734 <__kernel_tanf+0x30>
2401587c:	3f2ca140 	.word	0x3f2ca140
24015880:	3f490fda 	.word	0x3f490fda
24015884:	33222168 	.word	0x33222168
24015888:	00000000 	.word	0x00000000
2401588c:	b79bae5f 	.word	0xb79bae5f
24015890:	38a3f445 	.word	0x38a3f445
24015894:	37d95384 	.word	0x37d95384
24015898:	3a1a26c8 	.word	0x3a1a26c8
2401589c:	3b6b6916 	.word	0x3b6b6916
240158a0:	3cb327a4 	.word	0x3cb327a4
240158a4:	3e088889 	.word	0x3e088889
240158a8:	3895c07a 	.word	0x3895c07a
240158ac:	398137b9 	.word	0x398137b9
240158b0:	3abede48 	.word	0x3abede48
240158b4:	3c11371f 	.word	0x3c11371f
240158b8:	3d5d0dd1 	.word	0x3d5d0dd1
240158bc:	3eaaaaab 	.word	0x3eaaaaab
240158c0:	fffff000 	.word	0xfffff000

240158c4 <fabs>:
240158c4:	ec51 0b10 	vmov	r0, r1, d0
240158c8:	ee10 2a10 	vmov	r2, s0
240158cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
240158d0:	ec43 2b10 	vmov	d0, r2, r3
240158d4:	4770      	bx	lr
	...

240158d8 <floor>:
240158d8:	ee10 1a90 	vmov	r1, s1
240158dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
240158e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
240158e4:	2b13      	cmp	r3, #19
240158e6:	b530      	push	{r4, r5, lr}
240158e8:	ee10 0a10 	vmov	r0, s0
240158ec:	ee10 5a10 	vmov	r5, s0
240158f0:	dc31      	bgt.n	24015956 <floor+0x7e>
240158f2:	2b00      	cmp	r3, #0
240158f4:	da15      	bge.n	24015922 <floor+0x4a>
240158f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 240159b0 <floor+0xd8>
240158fa:	ee30 0b07 	vadd.f64	d0, d0, d7
240158fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24015902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015906:	dd07      	ble.n	24015918 <floor+0x40>
24015908:	2900      	cmp	r1, #0
2401590a:	da4e      	bge.n	240159aa <floor+0xd2>
2401590c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
24015910:	4318      	orrs	r0, r3
24015912:	d001      	beq.n	24015918 <floor+0x40>
24015914:	4928      	ldr	r1, [pc, #160]	; (240159b8 <floor+0xe0>)
24015916:	2000      	movs	r0, #0
24015918:	460b      	mov	r3, r1
2401591a:	4602      	mov	r2, r0
2401591c:	ec43 2b10 	vmov	d0, r2, r3
24015920:	e020      	b.n	24015964 <floor+0x8c>
24015922:	4a26      	ldr	r2, [pc, #152]	; (240159bc <floor+0xe4>)
24015924:	411a      	asrs	r2, r3
24015926:	ea01 0402 	and.w	r4, r1, r2
2401592a:	4304      	orrs	r4, r0
2401592c:	d01a      	beq.n	24015964 <floor+0x8c>
2401592e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 240159b0 <floor+0xd8>
24015932:	ee30 0b07 	vadd.f64	d0, d0, d7
24015936:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401593a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401593e:	ddeb      	ble.n	24015918 <floor+0x40>
24015940:	2900      	cmp	r1, #0
24015942:	bfbe      	ittt	lt
24015944:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
24015948:	fa40 f303 	asrlt.w	r3, r0, r3
2401594c:	18c9      	addlt	r1, r1, r3
2401594e:	ea21 0102 	bic.w	r1, r1, r2
24015952:	2000      	movs	r0, #0
24015954:	e7e0      	b.n	24015918 <floor+0x40>
24015956:	2b33      	cmp	r3, #51	; 0x33
24015958:	dd05      	ble.n	24015966 <floor+0x8e>
2401595a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401595e:	d101      	bne.n	24015964 <floor+0x8c>
24015960:	ee30 0b00 	vadd.f64	d0, d0, d0
24015964:	bd30      	pop	{r4, r5, pc}
24015966:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401596a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401596e:	40e2      	lsrs	r2, r4
24015970:	4202      	tst	r2, r0
24015972:	d0f7      	beq.n	24015964 <floor+0x8c>
24015974:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 240159b0 <floor+0xd8>
24015978:	ee30 0b07 	vadd.f64	d0, d0, d7
2401597c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24015980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015984:	ddc8      	ble.n	24015918 <floor+0x40>
24015986:	2900      	cmp	r1, #0
24015988:	da02      	bge.n	24015990 <floor+0xb8>
2401598a:	2b14      	cmp	r3, #20
2401598c:	d103      	bne.n	24015996 <floor+0xbe>
2401598e:	3101      	adds	r1, #1
24015990:	ea20 0002 	bic.w	r0, r0, r2
24015994:	e7c0      	b.n	24015918 <floor+0x40>
24015996:	2401      	movs	r4, #1
24015998:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401599c:	fa04 f303 	lsl.w	r3, r4, r3
240159a0:	4418      	add	r0, r3
240159a2:	42a8      	cmp	r0, r5
240159a4:	bf38      	it	cc
240159a6:	1909      	addcc	r1, r1, r4
240159a8:	e7f2      	b.n	24015990 <floor+0xb8>
240159aa:	2000      	movs	r0, #0
240159ac:	4601      	mov	r1, r0
240159ae:	e7b3      	b.n	24015918 <floor+0x40>
240159b0:	8800759c 	.word	0x8800759c
240159b4:	7e37e43c 	.word	0x7e37e43c
240159b8:	bff00000 	.word	0xbff00000
240159bc:	000fffff 	.word	0x000fffff

240159c0 <scalbn>:
240159c0:	ee10 1a90 	vmov	r1, s1
240159c4:	b510      	push	{r4, lr}
240159c6:	f3c1 540a 	ubfx	r4, r1, #20, #11
240159ca:	b98c      	cbnz	r4, 240159f0 <scalbn+0x30>
240159cc:	ee10 3a10 	vmov	r3, s0
240159d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240159d4:	430b      	orrs	r3, r1
240159d6:	d011      	beq.n	240159fc <scalbn+0x3c>
240159d8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 24015aa0 <scalbn+0xe0>
240159dc:	4b3c      	ldr	r3, [pc, #240]	; (24015ad0 <scalbn+0x110>)
240159de:	ee20 0b07 	vmul.f64	d0, d0, d7
240159e2:	4298      	cmp	r0, r3
240159e4:	da0b      	bge.n	240159fe <scalbn+0x3e>
240159e6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 24015aa8 <scalbn+0xe8>
240159ea:	ee20 0b07 	vmul.f64	d0, d0, d7
240159ee:	e005      	b.n	240159fc <scalbn+0x3c>
240159f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
240159f4:	429c      	cmp	r4, r3
240159f6:	d107      	bne.n	24015a08 <scalbn+0x48>
240159f8:	ee30 0b00 	vadd.f64	d0, d0, d0
240159fc:	bd10      	pop	{r4, pc}
240159fe:	ee10 1a90 	vmov	r1, s1
24015a02:	f3c1 540a 	ubfx	r4, r1, #20, #11
24015a06:	3c36      	subs	r4, #54	; 0x36
24015a08:	4404      	add	r4, r0
24015a0a:	f240 73fe 	movw	r3, #2046	; 0x7fe
24015a0e:	429c      	cmp	r4, r3
24015a10:	dd0d      	ble.n	24015a2e <scalbn+0x6e>
24015a12:	ed9f 7b27 	vldr	d7, [pc, #156]	; 24015ab0 <scalbn+0xf0>
24015a16:	ed9f 5b28 	vldr	d5, [pc, #160]	; 24015ab8 <scalbn+0xf8>
24015a1a:	eeb0 6b47 	vmov.f64	d6, d7
24015a1e:	ee10 3a90 	vmov	r3, s1
24015a22:	2b00      	cmp	r3, #0
24015a24:	fe27 7b05 	vselge.f64	d7, d7, d5
24015a28:	ee27 0b06 	vmul.f64	d0, d7, d6
24015a2c:	e7e6      	b.n	240159fc <scalbn+0x3c>
24015a2e:	2c00      	cmp	r4, #0
24015a30:	dd0a      	ble.n	24015a48 <scalbn+0x88>
24015a32:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24015a36:	ec53 2b10 	vmov	r2, r3, d0
24015a3a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24015a3e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
24015a42:	ec43 2b10 	vmov	d0, r2, r3
24015a46:	e7d9      	b.n	240159fc <scalbn+0x3c>
24015a48:	f114 0f35 	cmn.w	r4, #53	; 0x35
24015a4c:	da19      	bge.n	24015a82 <scalbn+0xc2>
24015a4e:	f24c 3350 	movw	r3, #50000	; 0xc350
24015a52:	4298      	cmp	r0, r3
24015a54:	ee10 3a90 	vmov	r3, s1
24015a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24015a5c:	dd09      	ble.n	24015a72 <scalbn+0xb2>
24015a5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 24015ab0 <scalbn+0xf0>
24015a62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 24015ab8 <scalbn+0xf8>
24015a66:	eeb0 7b40 	vmov.f64	d7, d0
24015a6a:	2b00      	cmp	r3, #0
24015a6c:	fe00 0b06 	vseleq.f64	d0, d0, d6
24015a70:	e7bb      	b.n	240159ea <scalbn+0x2a>
24015a72:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 24015aa8 <scalbn+0xe8>
24015a76:	ed9f 6b12 	vldr	d6, [pc, #72]	; 24015ac0 <scalbn+0x100>
24015a7a:	eeb0 7b40 	vmov.f64	d7, d0
24015a7e:	2b00      	cmp	r3, #0
24015a80:	e7f4      	b.n	24015a6c <scalbn+0xac>
24015a82:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24015a86:	ec53 2b10 	vmov	r2, r3, d0
24015a8a:	3436      	adds	r4, #54	; 0x36
24015a8c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24015a90:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
24015a94:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24015ac8 <scalbn+0x108>
24015a98:	ec43 2b10 	vmov	d0, r2, r3
24015a9c:	e7a5      	b.n	240159ea <scalbn+0x2a>
24015a9e:	bf00      	nop
24015aa0:	00000000 	.word	0x00000000
24015aa4:	43500000 	.word	0x43500000
24015aa8:	c2f8f359 	.word	0xc2f8f359
24015aac:	01a56e1f 	.word	0x01a56e1f
24015ab0:	8800759c 	.word	0x8800759c
24015ab4:	7e37e43c 	.word	0x7e37e43c
24015ab8:	8800759c 	.word	0x8800759c
24015abc:	fe37e43c 	.word	0xfe37e43c
24015ac0:	c2f8f359 	.word	0xc2f8f359
24015ac4:	81a56e1f 	.word	0x81a56e1f
24015ac8:	00000000 	.word	0x00000000
24015acc:	3c900000 	.word	0x3c900000
24015ad0:	ffff3cb0 	.word	0xffff3cb0

24015ad4 <expm1f>:
24015ad4:	ee10 2a10 	vmov	r2, s0
24015ad8:	497c      	ldr	r1, [pc, #496]	; (24015ccc <expm1f+0x1f8>)
24015ada:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24015ade:	428b      	cmp	r3, r1
24015ae0:	d920      	bls.n	24015b24 <expm1f+0x50>
24015ae2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015ae6:	d902      	bls.n	24015aee <expm1f+0x1a>
24015ae8:	ee30 0a00 	vadd.f32	s0, s0, s0
24015aec:	4770      	bx	lr
24015aee:	d105      	bne.n	24015afc <expm1f+0x28>
24015af0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24015af4:	2a00      	cmp	r2, #0
24015af6:	fe20 0a27 	vselge.f32	s0, s0, s15
24015afa:	4770      	bx	lr
24015afc:	2a00      	cmp	r2, #0
24015afe:	db05      	blt.n	24015b0c <expm1f+0x38>
24015b00:	4973      	ldr	r1, [pc, #460]	; (24015cd0 <expm1f+0x1fc>)
24015b02:	428b      	cmp	r3, r1
24015b04:	d95c      	bls.n	24015bc0 <expm1f+0xec>
24015b06:	2000      	movs	r0, #0
24015b08:	f7fe b830 	b.w	24013b6c <__math_oflowf>
24015b0c:	eddf 7a71 	vldr	s15, [pc, #452]	; 24015cd4 <expm1f+0x200>
24015b10:	ee70 7a27 	vadd.f32	s15, s0, s15
24015b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24015b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015b1c:	d550      	bpl.n	24015bc0 <expm1f+0xec>
24015b1e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24015b22:	4770      	bx	lr
24015b24:	496c      	ldr	r1, [pc, #432]	; (24015cd8 <expm1f+0x204>)
24015b26:	428b      	cmp	r3, r1
24015b28:	d966      	bls.n	24015bf8 <expm1f+0x124>
24015b2a:	496c      	ldr	r1, [pc, #432]	; (24015cdc <expm1f+0x208>)
24015b2c:	428b      	cmp	r3, r1
24015b2e:	d847      	bhi.n	24015bc0 <expm1f+0xec>
24015b30:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 24015ce0 <expm1f+0x20c>
24015b34:	2a00      	cmp	r2, #0
24015b36:	bfa7      	ittee	ge
24015b38:	ee30 7a47 	vsubge.f32	s14, s0, s14
24015b3c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 24015ce4 <expm1f+0x210>
24015b40:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 24015ce8 <expm1f+0x214>
24015b44:	ee30 7a07 	vaddlt.f32	s14, s0, s14
24015b48:	bfac      	ite	ge
24015b4a:	2301      	movge	r3, #1
24015b4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
24015b50:	ee37 0a67 	vsub.f32	s0, s14, s15
24015b54:	ee37 7a40 	vsub.f32	s14, s14, s0
24015b58:	ee77 7a67 	vsub.f32	s15, s14, s15
24015b5c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
24015b60:	ee20 4a25 	vmul.f32	s8, s0, s11
24015b64:	ed9f 6a61 	vldr	s12, [pc, #388]	; 24015cec <expm1f+0x218>
24015b68:	eddf 6a61 	vldr	s13, [pc, #388]	; 24015cf0 <expm1f+0x21c>
24015b6c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 24015cf4 <expm1f+0x220>
24015b70:	ee20 7a04 	vmul.f32	s14, s0, s8
24015b74:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
24015b78:	eee7 6a06 	vfma.f32	s13, s14, s12
24015b7c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 24015cf8 <expm1f+0x224>
24015b80:	eea6 6a87 	vfma.f32	s12, s13, s14
24015b84:	eddf 6a5d 	vldr	s13, [pc, #372]	; 24015cfc <expm1f+0x228>
24015b88:	eee6 6a07 	vfma.f32	s13, s12, s14
24015b8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24015b90:	eea6 5a87 	vfma.f32	s10, s13, s14
24015b94:	eef0 6a46 	vmov.f32	s13, s12
24015b98:	eee5 6a07 	vfma.f32	s13, s10, s14
24015b9c:	eee4 4a66 	vfms.f32	s9, s8, s13
24015ba0:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
24015ba4:	eea0 4a64 	vfms.f32	s8, s0, s9
24015ba8:	ee36 5ae4 	vsub.f32	s10, s13, s9
24015bac:	eec5 6a04 	vdiv.f32	s13, s10, s8
24015bb0:	ee66 6a87 	vmul.f32	s13, s13, s14
24015bb4:	bb73      	cbnz	r3, 24015c14 <expm1f+0x140>
24015bb6:	eef0 7a47 	vmov.f32	s15, s14
24015bba:	eed0 7a26 	vfnms.f32	s15, s0, s13
24015bbe:	e024      	b.n	24015c0a <expm1f+0x136>
24015bc0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
24015bc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24015bc8:	2a00      	cmp	r2, #0
24015bca:	fe67 7a87 	vselge.f32	s15, s15, s14
24015bce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 24015d00 <expm1f+0x22c>
24015bd2:	eddf 6a43 	vldr	s13, [pc, #268]	; 24015ce0 <expm1f+0x20c>
24015bd6:	ee40 7a07 	vmla.f32	s15, s0, s14
24015bda:	eeb0 7a40 	vmov.f32	s14, s0
24015bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015be2:	ee17 3a90 	vmov	r3, s15
24015be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015bea:	eea7 7ae6 	vfms.f32	s14, s15, s13
24015bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24015ce4 <expm1f+0x210>
24015bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
24015bf6:	e7ab      	b.n	24015b50 <expm1f+0x7c>
24015bf8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
24015bfc:	d208      	bcs.n	24015c10 <expm1f+0x13c>
24015bfe:	eddf 7a41 	vldr	s15, [pc, #260]	; 24015d04 <expm1f+0x230>
24015c02:	ee70 7a27 	vadd.f32	s15, s0, s15
24015c06:	ee77 7ae7 	vsub.f32	s15, s15, s15
24015c0a:	ee30 0a67 	vsub.f32	s0, s0, s15
24015c0e:	4770      	bx	lr
24015c10:	2300      	movs	r3, #0
24015c12:	e7a3      	b.n	24015b5c <expm1f+0x88>
24015c14:	ee76 6ae7 	vsub.f32	s13, s13, s15
24015c18:	1c5a      	adds	r2, r3, #1
24015c1a:	eed6 7a80 	vfnms.f32	s15, s13, s0
24015c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015c22:	d106      	bne.n	24015c32 <expm1f+0x15e>
24015c24:	ee70 7a67 	vsub.f32	s15, s0, s15
24015c28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015c2c:	eea7 0aa5 	vfma.f32	s0, s15, s11
24015c30:	4770      	bx	lr
24015c32:	2b01      	cmp	r3, #1
24015c34:	d118      	bne.n	24015c68 <expm1f+0x194>
24015c36:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
24015c3a:	eeb4 0ac7 	vcmpe.f32	s0, s14
24015c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015c42:	bf5b      	ittet	pl
24015c44:	ee70 7a67 	vsubpl.f32	s15, s0, s15
24015c48:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
24015c4c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
24015c50:	eea7 6a87 	vfmapl.f32	s12, s15, s14
24015c54:	bf43      	ittte	mi
24015c56:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
24015c5a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
24015c5e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
24015c62:	eeb0 0a46 	vmovpl.f32	s0, s12
24015c66:	4770      	bx	lr
24015c68:	1c5a      	adds	r2, r3, #1
24015c6a:	2a39      	cmp	r2, #57	; 0x39
24015c6c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
24015c70:	d90b      	bls.n	24015c8a <expm1f+0x1b6>
24015c72:	ee37 0ac0 	vsub.f32	s0, s15, s0
24015c76:	ee36 0a40 	vsub.f32	s0, s12, s0
24015c7a:	ee10 3a10 	vmov	r3, s0
24015c7e:	440b      	add	r3, r1
24015c80:	ee00 3a10 	vmov	s0, r3
24015c84:	ee30 0a46 	vsub.f32	s0, s0, s12
24015c88:	4770      	bx	lr
24015c8a:	2b16      	cmp	r3, #22
24015c8c:	dc11      	bgt.n	24015cb2 <expm1f+0x1de>
24015c8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24015c92:	fa42 f303 	asr.w	r3, r2, r3
24015c96:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
24015c9a:	ee37 0ac0 	vsub.f32	s0, s15, s0
24015c9e:	ee07 3a90 	vmov	s15, r3
24015ca2:	ee37 0ac0 	vsub.f32	s0, s15, s0
24015ca6:	ee10 3a10 	vmov	r3, s0
24015caa:	440b      	add	r3, r1
24015cac:	ee00 3a10 	vmov	s0, r3
24015cb0:	4770      	bx	lr
24015cb2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
24015cb6:	05db      	lsls	r3, r3, #23
24015cb8:	ee07 3a10 	vmov	s14, r3
24015cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
24015cc0:	ee70 7a67 	vsub.f32	s15, s0, s15
24015cc4:	ee37 0a86 	vadd.f32	s0, s15, s12
24015cc8:	e7ed      	b.n	24015ca6 <expm1f+0x1d2>
24015cca:	bf00      	nop
24015ccc:	4195b843 	.word	0x4195b843
24015cd0:	42b17217 	.word	0x42b17217
24015cd4:	0da24260 	.word	0x0da24260
24015cd8:	3eb17218 	.word	0x3eb17218
24015cdc:	3f851591 	.word	0x3f851591
24015ce0:	3f317180 	.word	0x3f317180
24015ce4:	3717f7d1 	.word	0x3717f7d1
24015ce8:	b717f7d1 	.word	0xb717f7d1
24015cec:	b457edbb 	.word	0xb457edbb
24015cf0:	36867e54 	.word	0x36867e54
24015cf4:	bd088889 	.word	0xbd088889
24015cf8:	b8a670cd 	.word	0xb8a670cd
24015cfc:	3ad00d01 	.word	0x3ad00d01
24015d00:	3fb8aa3b 	.word	0x3fb8aa3b
24015d04:	7149f2ca 	.word	0x7149f2ca

24015d08 <floorf>:
24015d08:	ee10 3a10 	vmov	r3, s0
24015d0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24015d10:	3a7f      	subs	r2, #127	; 0x7f
24015d12:	2a16      	cmp	r2, #22
24015d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24015d18:	dc2a      	bgt.n	24015d70 <floorf+0x68>
24015d1a:	2a00      	cmp	r2, #0
24015d1c:	da11      	bge.n	24015d42 <floorf+0x3a>
24015d1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 24015d80 <floorf+0x78>
24015d22:	ee30 0a27 	vadd.f32	s0, s0, s15
24015d26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24015d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015d2e:	dd05      	ble.n	24015d3c <floorf+0x34>
24015d30:	2b00      	cmp	r3, #0
24015d32:	da23      	bge.n	24015d7c <floorf+0x74>
24015d34:	4a13      	ldr	r2, [pc, #76]	; (24015d84 <floorf+0x7c>)
24015d36:	2900      	cmp	r1, #0
24015d38:	bf18      	it	ne
24015d3a:	4613      	movne	r3, r2
24015d3c:	ee00 3a10 	vmov	s0, r3
24015d40:	4770      	bx	lr
24015d42:	4911      	ldr	r1, [pc, #68]	; (24015d88 <floorf+0x80>)
24015d44:	4111      	asrs	r1, r2
24015d46:	420b      	tst	r3, r1
24015d48:	d0fa      	beq.n	24015d40 <floorf+0x38>
24015d4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24015d80 <floorf+0x78>
24015d4e:	ee30 0a27 	vadd.f32	s0, s0, s15
24015d52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24015d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015d5a:	ddef      	ble.n	24015d3c <floorf+0x34>
24015d5c:	2b00      	cmp	r3, #0
24015d5e:	bfbe      	ittt	lt
24015d60:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
24015d64:	fa40 f202 	asrlt.w	r2, r0, r2
24015d68:	189b      	addlt	r3, r3, r2
24015d6a:	ea23 0301 	bic.w	r3, r3, r1
24015d6e:	e7e5      	b.n	24015d3c <floorf+0x34>
24015d70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
24015d74:	d3e4      	bcc.n	24015d40 <floorf+0x38>
24015d76:	ee30 0a00 	vadd.f32	s0, s0, s0
24015d7a:	4770      	bx	lr
24015d7c:	2300      	movs	r3, #0
24015d7e:	e7dd      	b.n	24015d3c <floorf+0x34>
24015d80:	7149f2ca 	.word	0x7149f2ca
24015d84:	bf800000 	.word	0xbf800000
24015d88:	007fffff 	.word	0x007fffff

24015d8c <nanf>:
24015d8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24015d94 <nanf+0x8>
24015d90:	4770      	bx	lr
24015d92:	bf00      	nop
24015d94:	7fc00000 	.word	0x7fc00000

24015d98 <scalbnf>:
24015d98:	ee10 3a10 	vmov	r3, s0
24015d9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24015da0:	d024      	beq.n	24015dec <scalbnf+0x54>
24015da2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24015da6:	d302      	bcc.n	24015dae <scalbnf+0x16>
24015da8:	ee30 0a00 	vadd.f32	s0, s0, s0
24015dac:	4770      	bx	lr
24015dae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24015db2:	d121      	bne.n	24015df8 <scalbnf+0x60>
24015db4:	4b29      	ldr	r3, [pc, #164]	; (24015e5c <scalbnf+0xc4>)
24015db6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24015e60 <scalbnf+0xc8>
24015dba:	4298      	cmp	r0, r3
24015dbc:	ee20 0a27 	vmul.f32	s0, s0, s15
24015dc0:	db15      	blt.n	24015dee <scalbnf+0x56>
24015dc2:	ee10 3a10 	vmov	r3, s0
24015dc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24015dca:	3a19      	subs	r2, #25
24015dcc:	4402      	add	r2, r0
24015dce:	2afe      	cmp	r2, #254	; 0xfe
24015dd0:	dd14      	ble.n	24015dfc <scalbnf+0x64>
24015dd2:	eddf 7a24 	vldr	s15, [pc, #144]	; 24015e64 <scalbnf+0xcc>
24015dd6:	eddf 6a24 	vldr	s13, [pc, #144]	; 24015e68 <scalbnf+0xd0>
24015dda:	ee10 3a10 	vmov	r3, s0
24015dde:	eeb0 7a67 	vmov.f32	s14, s15
24015de2:	2b00      	cmp	r3, #0
24015de4:	fe67 7aa6 	vselge.f32	s15, s15, s13
24015de8:	ee27 0a27 	vmul.f32	s0, s14, s15
24015dec:	4770      	bx	lr
24015dee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24015e6c <scalbnf+0xd4>
24015df2:	ee20 0a27 	vmul.f32	s0, s0, s15
24015df6:	4770      	bx	lr
24015df8:	0dd2      	lsrs	r2, r2, #23
24015dfa:	e7e7      	b.n	24015dcc <scalbnf+0x34>
24015dfc:	2a00      	cmp	r2, #0
24015dfe:	dd06      	ble.n	24015e0e <scalbnf+0x76>
24015e00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24015e04:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
24015e08:	ee00 3a10 	vmov	s0, r3
24015e0c:	4770      	bx	lr
24015e0e:	f112 0f16 	cmn.w	r2, #22
24015e12:	da19      	bge.n	24015e48 <scalbnf+0xb0>
24015e14:	f24c 3350 	movw	r3, #50000	; 0xc350
24015e18:	4298      	cmp	r0, r3
24015e1a:	ee10 3a10 	vmov	r3, s0
24015e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24015e22:	dd09      	ble.n	24015e38 <scalbnf+0xa0>
24015e24:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 24015e64 <scalbnf+0xcc>
24015e28:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24015e68 <scalbnf+0xd0>
24015e2c:	eef0 7a40 	vmov.f32	s15, s0
24015e30:	2b00      	cmp	r3, #0
24015e32:	fe00 0a07 	vseleq.f32	s0, s0, s14
24015e36:	e7dc      	b.n	24015df2 <scalbnf+0x5a>
24015e38:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24015e6c <scalbnf+0xd4>
24015e3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24015e70 <scalbnf+0xd8>
24015e40:	eef0 7a40 	vmov.f32	s15, s0
24015e44:	2b00      	cmp	r3, #0
24015e46:	e7f4      	b.n	24015e32 <scalbnf+0x9a>
24015e48:	3219      	adds	r2, #25
24015e4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24015e4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
24015e52:	eddf 7a08 	vldr	s15, [pc, #32]	; 24015e74 <scalbnf+0xdc>
24015e56:	ee07 3a10 	vmov	s14, r3
24015e5a:	e7c5      	b.n	24015de8 <scalbnf+0x50>
24015e5c:	ffff3cb0 	.word	0xffff3cb0
24015e60:	4c000000 	.word	0x4c000000
24015e64:	7149f2ca 	.word	0x7149f2ca
24015e68:	f149f2ca 	.word	0xf149f2ca
24015e6c:	0da24260 	.word	0x0da24260
24015e70:	8da24260 	.word	0x8da24260
24015e74:	33000000 	.word	0x33000000

24015e78 <syncMap>:
24015e78:	00000002 00000000 00000001 62652e2a     ............*.eb
24015e88:	00000070 7062652e 00000000 53594850     p....ebp....PHYS
24015e98:	52545320 20202031 00002020 67726154      STR1     ..Targ
24015ea8:	654c7465 20202076 00002020 5376654c     etLev     ..LevS
24015eb8:	746f6f6d 20202068 00002020 5376654c     mooth     ..LevS
24015ec8:	6e657274 20207467 00002020 4d76654c     trengt    ..LevM
24015ed8:	2065646f 20202020 00002020 20202020     ode       ..    
24015ee8:	20202020 20202020 00002020 53594850               ..PHYS
24015ef8:	52545320 20202032 00002020 654c4246      STR2     ..FBLe
24015f08:	6e4f2076 20202020 00002020 6b636950     v On      ..Pick
24015f18:	20736f50 20202020 00002020 61636544     Pos       ..Deca
24015f28:	20202079 20202020 00002020 63756f54     y         ..Touc
24015f38:	20202068 20202020 00002020 73696f4e     h         ..Nois
24015f48:	20203165 20202020 00002020 73696f4e     e1        ..Nois
24015f58:	20203265 20202020 00002020 49444441     e2        ..ADDI
24015f68:	45564954 20202020 00002020 656e6f54     TIVE      ..Tone
24015f78:	20202020 20202020 00002020 65727453               ..Stre
24015f88:	20686374 20202020 00002020 646e6152     tch       ..Rand
24015f98:	79636544 20202020 00002020 646e6152     Decy      ..Rand
24015fa8:	6e696147 20202020 00002020 73696f4e     Gain      ..Nois
24015fb8:	6c6f5665 20202020 00002020              eVol      ..

24015fc4 <D1CorePrescTable>:
24015fc4:	00000000 04030201 04030201 09080706     ................

24015fd4 <flagBitshiftOffset.0>:
24015fd4:	16100600 16100600                       ........

24015fdc <SD_Driver>:
24015fdc:	2400b751 2400b779 2400b781 2400b7a5     Q..$y..$...$...$
24015fec:	2400b7c9 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
24015ffc:	3d3b2c2b 00005d5b                       +,;=[]..

24016004 <ExCvt>:
24016004:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
24016014:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
24016024:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
24016034:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
24016044:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
24016054:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
24016064:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
24016074:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

24016084 <LfnOfs>:
24016084:	07050301 12100e09 1c181614 0000001e     ................

24016094 <Tbl>:
24016094:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
240160a4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
240160b4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
240160c4:	00d600ff 00f800dc 00d800a3 019200d7     ................
240160d4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
240160e4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
240160f4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
24016104:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
24016114:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
24016124:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
24016134:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
24016144:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
24016154:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
24016164:	00da00de 00d900db 00dd00fd 00b400af     ................
24016174:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
24016184:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

24016194 <cvt1.1>:
24016194:	031a0061 031700e0 030700f8 000100ff     a...............
240161a4:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
240161b4:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
240161c4:	01840182 01860184 01870187 018a0189     ................
240161d4:	018b018b 018e018d 0190018f 01910191     ................
240161e4:	01940193 019601f6 01980197 023d0198     ..............=.
240161f4:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
24016204:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
24016214:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
24016224:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
24016234:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
24016244:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
24016254:	01ca01cb 011001cd 000101dd 01de018e     ................
24016264:	01f30112 01f10003 01f401f4 012801f8     ..............(.
24016274:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
24016284:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
24016294:	01810040 02550186 018a0189 018f0258     @.....U.....X...
240162a4:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
240162b4:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
240162c4:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
240162d4:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
240162e4:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
240162f4:	01a90282 02850284 02870286 024401ae     ..............D.
24016304:	01b201b1 028d0245 028f028e 02910290     ....E...........
24016314:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
24016324:	03880386 038a0389 031103b1 000203c2     ................
24016334:	03a303a3 030803c4 000303cc 038e038c     ................
24016344:	03d8038f 03f20118 03f9000a 03f403f3     ................
24016354:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
24016364:	04500320 04600710 048a0122 04c10136      .P...`."...6...
24016374:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
24016384:	00000000                                ....

24016388 <cvt2.0>:
24016388:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
24016398:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
240163a8:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
240163b8:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
240163c8:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
240163d8:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
240163e8:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
240163f8:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
24016408:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
24016418:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
24016428:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
24016438:	2d000164 ff410826 0000031a              d..-&.A.....

24016444 <__leaf_table_filtertan>:
24016444:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
24016454:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
24016464:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
24016474:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
24016484:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
24016494:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
240164a4:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
240164b4:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
240164c4:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
240164d4:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
240164e4:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
240164f4:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
24016504:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
24016514:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
24016524:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
24016534:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
24016544:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
24016554:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
24016564:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
24016574:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
24016584:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
24016594:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
240165a4:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
240165b4:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
240165c4:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
240165d4:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
240165e4:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
240165f4:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
24016604:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
24016614:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
24016624:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
24016634:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
24016644:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
24016654:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
24016664:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
24016674:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
24016684:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
24016694:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
240166a4:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
240166b4:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
240166c4:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
240166d4:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
240166e4:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
240166f4:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
24016704:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
24016714:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
24016724:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
24016734:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
24016744:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
24016754:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
24016764:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
24016774:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
24016784:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
24016794:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
240167a4:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
240167b4:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
240167c4:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
240167d4:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
240167e4:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
240167f4:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
24016804:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
24016814:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
24016824:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
24016834:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
24016844:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
24016854:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
24016864:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
24016874:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
24016884:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
24016894:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
240168a4:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
240168b4:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
240168c4:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
240168d4:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
240168e4:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
240168f4:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
24016904:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
24016914:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
24016924:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
24016934:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
24016944:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
24016954:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
24016964:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
24016974:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
24016984:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
24016994:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
240169a4:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
240169b4:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
240169c4:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
240169d4:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
240169e4:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
240169f4:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
24016a04:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
24016a14:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
24016a24:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
24016a34:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
24016a44:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
24016a54:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
24016a64:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
24016a74:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
24016a84:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
24016a94:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
24016aa4:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
24016ab4:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
24016ac4:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
24016ad4:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
24016ae4:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
24016af4:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
24016b04:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
24016b14:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
24016b24:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
24016b34:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
24016b44:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
24016b54:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
24016b64:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
24016b74:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
24016b84:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
24016b94:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
24016ba4:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
24016bb4:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
24016bc4:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
24016bd4:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
24016be4:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
24016bf4:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
24016c04:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
24016c14:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
24016c24:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
24016c34:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
24016c44:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
24016c54:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
24016c64:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
24016c74:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
24016c84:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
24016c94:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
24016ca4:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
24016cb4:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
24016cc4:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
24016cd4:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
24016ce4:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
24016cf4:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
24016d04:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
24016d14:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
24016d24:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
24016d34:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
24016d44:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
24016d54:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
24016d64:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
24016d74:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
24016d84:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
24016d94:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
24016da4:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
24016db4:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
24016dc4:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
24016dd4:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
24016de4:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
24016df4:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
24016e04:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
24016e14:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
24016e24:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
24016e34:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
24016e44:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
24016e54:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
24016e64:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
24016e74:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
24016e84:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
24016e94:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
24016ea4:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
24016eb4:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
24016ec4:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
24016ed4:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
24016ee4:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
24016ef4:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
24016f04:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
24016f14:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
24016f24:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
24016f34:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
24016f44:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
24016f54:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
24016f64:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
24016f74:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
24016f84:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
24016f94:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
24016fa4:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
24016fb4:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
24016fc4:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
24016fd4:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
24016fe4:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
24016ff4:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
24017004:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
24017014:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
24017024:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
24017034:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
24017044:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
24017054:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
24017064:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
24017074:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
24017084:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
24017094:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
240170a4:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
240170b4:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
240170c4:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
240170d4:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
240170e4:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
240170f4:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
24017104:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
24017114:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
24017124:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
24017134:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
24017144:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
24017154:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
24017164:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
24017174:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
24017184:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
24017194:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
240171a4:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
240171b4:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
240171c4:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
240171d4:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
240171e4:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
240171f4:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
24017204:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
24017214:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
24017224:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
24017234:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
24017244:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
24017254:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
24017264:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
24017274:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
24017284:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
24017294:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
240172a4:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
240172b4:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
240172c4:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
240172d4:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
240172e4:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
240172f4:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
24017304:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
24017314:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
24017324:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
24017334:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
24017344:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
24017354:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
24017364:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
24017374:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
24017384:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
24017394:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
240173a4:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
240173b4:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
240173c4:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
240173d4:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
240173e4:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
240173f4:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
24017404:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
24017414:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
24017424:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
24017434:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
24017444:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
24017454:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
24017464:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
24017474:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
24017484:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
24017494:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
240174a4:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
240174b4:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
240174c4:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
240174d4:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
240174e4:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
240174f4:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
24017504:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
24017514:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
24017524:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
24017534:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
24017544:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
24017554:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
24017564:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
24017574:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
24017584:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
24017594:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
240175a4:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
240175b4:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
240175c4:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
240175d4:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
240175e4:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
240175f4:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
24017604:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
24017614:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
24017624:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
24017634:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
24017644:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
24017654:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
24017664:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
24017674:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
24017684:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
24017694:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
240176a4:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
240176b4:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
240176c4:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
240176d4:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
240176e4:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
240176f4:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
24017704:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
24017714:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
24017724:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
24017734:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
24017744:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
24017754:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
24017764:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
24017774:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
24017784:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
24017794:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
240177a4:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
240177b4:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
240177c4:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
240177d4:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
240177e4:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
240177f4:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
24017804:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
24017814:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
24017824:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
24017834:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
24017844:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
24017854:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
24017864:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
24017874:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
24017884:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
24017894:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
240178a4:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
240178b4:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
240178c4:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
240178d4:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
240178e4:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
240178f4:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
24017904:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
24017914:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
24017924:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
24017934:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
24017944:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
24017954:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
24017964:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
24017974:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
24017984:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
24017994:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
240179a4:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
240179b4:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
240179c4:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
240179d4:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
240179e4:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
240179f4:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
24017a04:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
24017a14:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
24017a24:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
24017a34:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
24017a44:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
24017a54:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
24017a64:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
24017a74:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
24017a84:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
24017a94:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
24017aa4:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
24017ab4:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
24017ac4:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
24017ad4:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
24017ae4:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
24017af4:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
24017b04:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
24017b14:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
24017b24:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
24017b34:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
24017b44:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
24017b54:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
24017b64:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
24017b74:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
24017b84:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
24017b94:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
24017ba4:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
24017bb4:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
24017bc4:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
24017bd4:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
24017be4:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
24017bf4:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
24017c04:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
24017c14:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
24017c24:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
24017c34:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
24017c44:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
24017c54:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
24017c64:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
24017c74:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
24017c84:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
24017c94:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
24017ca4:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
24017cb4:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
24017cc4:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
24017cd4:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
24017ce4:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
24017cf4:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
24017d04:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
24017d14:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
24017d24:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
24017d34:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
24017d44:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
24017d54:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
24017d64:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
24017d74:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
24017d84:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
24017d94:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
24017da4:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
24017db4:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
24017dc4:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
24017dd4:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
24017de4:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
24017df4:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
24017e04:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
24017e14:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
24017e24:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
24017e34:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
24017e44:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
24017e54:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
24017e64:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
24017e74:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
24017e84:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
24017e94:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
24017ea4:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
24017eb4:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
24017ec4:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
24017ed4:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
24017ee4:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
24017ef4:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
24017f04:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
24017f14:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
24017f24:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
24017f34:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
24017f44:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
24017f54:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
24017f64:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
24017f74:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
24017f84:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
24017f94:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
24017fa4:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
24017fb4:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
24017fc4:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
24017fd4:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
24017fe4:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
24017ff4:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
24018004:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
24018014:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
24018024:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
24018034:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
24018044:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
24018054:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
24018064:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
24018074:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
24018084:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
24018094:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
240180a4:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
240180b4:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
240180c4:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
240180d4:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
240180e4:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
240180f4:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
24018104:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
24018114:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
24018124:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
24018134:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
24018144:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
24018154:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
24018164:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
24018174:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
24018184:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
24018194:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
240181a4:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
240181b4:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
240181c4:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
240181d4:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
240181e4:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
240181f4:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
24018204:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
24018214:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
24018224:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
24018234:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
24018244:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
24018254:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
24018264:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
24018274:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
24018284:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
24018294:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
240182a4:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
240182b4:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
240182c4:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
240182d4:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
240182e4:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
240182f4:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
24018304:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
24018314:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
24018324:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
24018334:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
24018344:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
24018354:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
24018364:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
24018374:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
24018384:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
24018394:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
240183a4:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
240183b4:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
240183c4:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
240183d4:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
240183e4:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
240183f4:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
24018404:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
24018414:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
24018424:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
24018434:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
24018444:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
24018454:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
24018464:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
24018474:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
24018484:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
24018494:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
240184a4:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
240184b4:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
240184c4:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
240184d4:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
240184e4:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
240184f4:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
24018504:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
24018514:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
24018524:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
24018534:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
24018544:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
24018554:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
24018564:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
24018574:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
24018584:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
24018594:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
240185a4:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
240185b4:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
240185c4:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
240185d4:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
240185e4:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
240185f4:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
24018604:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
24018614:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
24018624:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
24018634:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
24018644:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
24018654:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
24018664:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
24018674:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
24018684:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
24018694:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
240186a4:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
240186b4:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
240186c4:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
240186d4:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
240186e4:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
240186f4:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
24018704:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
24018714:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
24018724:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
24018734:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
24018744:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
24018754:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
24018764:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
24018774:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
24018784:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
24018794:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
240187a4:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
240187b4:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
240187c4:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
240187d4:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
240187e4:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
240187f4:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
24018804:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
24018814:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
24018824:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
24018834:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
24018844:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
24018854:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
24018864:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
24018874:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
24018884:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
24018894:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
240188a4:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
240188b4:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
240188c4:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
240188d4:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
240188e4:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
240188f4:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
24018904:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
24018914:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
24018924:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
24018934:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
24018944:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
24018954:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
24018964:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
24018974:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
24018984:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
24018994:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
240189a4:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
240189b4:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
240189c4:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
240189d4:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
240189e4:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
240189f4:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
24018a04:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
24018a14:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
24018a24:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
24018a34:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
24018a44:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
24018a54:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
24018a64:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
24018a74:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
24018a84:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
24018a94:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
24018aa4:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
24018ab4:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
24018ac4:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
24018ad4:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
24018ae4:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
24018af4:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
24018b04:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
24018b14:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
24018b24:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
24018b34:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
24018b44:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
24018b54:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
24018b64:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
24018b74:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
24018b84:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
24018b94:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
24018ba4:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
24018bb4:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
24018bc4:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
24018bd4:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
24018be4:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
24018bf4:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
24018c04:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
24018c14:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
24018c24:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
24018c34:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
24018c44:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
24018c54:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
24018c64:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
24018c74:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
24018c84:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
24018c94:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
24018ca4:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
24018cb4:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
24018cc4:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
24018cd4:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
24018ce4:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
24018cf4:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
24018d04:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
24018d14:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
24018d24:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
24018d34:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
24018d44:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
24018d54:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
24018d64:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
24018d74:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
24018d84:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
24018d94:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
24018da4:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
24018db4:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
24018dc4:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
24018dd4:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
24018de4:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
24018df4:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
24018e04:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
24018e14:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
24018e24:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
24018e34:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
24018e44:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
24018e54:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
24018e64:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
24018e74:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
24018e84:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
24018e94:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
24018ea4:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
24018eb4:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
24018ec4:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
24018ed4:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
24018ee4:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
24018ef4:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
24018f04:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
24018f14:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
24018f24:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
24018f34:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
24018f44:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
24018f54:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
24018f64:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
24018f74:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
24018f84:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
24018f94:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
24018fa4:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
24018fb4:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
24018fc4:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
24018fd4:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
24018fe4:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
24018ff4:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
24019004:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
24019014:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
24019024:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
24019034:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
24019044:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
24019054:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
24019064:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
24019074:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
24019084:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
24019094:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
240190a4:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
240190b4:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
240190c4:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
240190d4:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
240190e4:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
240190f4:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
24019104:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
24019114:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
24019124:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
24019134:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
24019144:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
24019154:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
24019164:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
24019174:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
24019184:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
24019194:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
240191a4:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
240191b4:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
240191c4:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
240191d4:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
240191e4:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
240191f4:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
24019204:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
24019214:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
24019224:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
24019234:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
24019244:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
24019254:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
24019264:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
24019274:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
24019284:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
24019294:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
240192a4:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
240192b4:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
240192c4:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
240192d4:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
240192e4:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
240192f4:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
24019304:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
24019314:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
24019324:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
24019334:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
24019344:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
24019354:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
24019364:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
24019374:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
24019384:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
24019394:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
240193a4:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
240193b4:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
240193c4:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
240193d4:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
240193e4:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
240193f4:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
24019404:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
24019414:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
24019424:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
24019434:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
24019444:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
24019454:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
24019464:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
24019474:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
24019484:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
24019494:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
240194a4:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
240194b4:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
240194c4:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
240194d4:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
240194e4:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
240194f4:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
24019504:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
24019514:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
24019524:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
24019534:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
24019544:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
24019554:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
24019564:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
24019574:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
24019584:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
24019594:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
240195a4:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
240195b4:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
240195c4:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
240195d4:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
240195e4:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
240195f4:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
24019604:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
24019614:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
24019624:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
24019634:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
24019644:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
24019654:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
24019664:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
24019674:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
24019684:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
24019694:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
240196a4:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
240196b4:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
240196c4:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
240196d4:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
240196e4:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
240196f4:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
24019704:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
24019714:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
24019724:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
24019734:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
24019744:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
24019754:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
24019764:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
24019774:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
24019784:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
24019794:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
240197a4:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
240197b4:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
240197c4:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
240197d4:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
240197e4:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
240197f4:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
24019804:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
24019814:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
24019824:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
24019834:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
24019844:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
24019854:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
24019864:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
24019874:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
24019884:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
24019894:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
240198a4:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
240198b4:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
240198c4:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
240198d4:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
240198e4:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
240198f4:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
24019904:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
24019914:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
24019924:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
24019934:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
24019944:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
24019954:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
24019964:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
24019974:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
24019984:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
24019994:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
240199a4:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
240199b4:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
240199c4:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
240199d4:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
240199e4:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
240199f4:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
24019a04:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
24019a14:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
24019a24:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
24019a34:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
24019a44:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
24019a54:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
24019a64:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
24019a74:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
24019a84:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
24019a94:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
24019aa4:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
24019ab4:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
24019ac4:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
24019ad4:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
24019ae4:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
24019af4:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
24019b04:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
24019b14:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
24019b24:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
24019b34:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
24019b44:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
24019b54:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
24019b64:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
24019b74:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
24019b84:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
24019b94:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
24019ba4:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
24019bb4:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
24019bc4:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
24019bd4:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
24019be4:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
24019bf4:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
24019c04:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
24019c14:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
24019c24:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
24019c34:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
24019c44:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
24019c54:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
24019c64:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
24019c74:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
24019c84:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
24019c94:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
24019ca4:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
24019cb4:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
24019cc4:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
24019cd4:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
24019ce4:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
24019cf4:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
24019d04:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
24019d14:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
24019d24:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
24019d34:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
24019d44:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
24019d54:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
24019d64:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
24019d74:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
24019d84:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
24019d94:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
24019da4:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
24019db4:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
24019dc4:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
24019dd4:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
24019de4:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
24019df4:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
24019e04:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
24019e14:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
24019e24:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
24019e34:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
24019e44:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
24019e54:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
24019e64:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
24019e74:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
24019e84:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
24019e94:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
24019ea4:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
24019eb4:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
24019ec4:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
24019ed4:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
24019ee4:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
24019ef4:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
24019f04:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
24019f14:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
24019f24:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
24019f34:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
24019f44:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
24019f54:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
24019f64:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
24019f74:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
24019f84:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
24019f94:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
24019fa4:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
24019fb4:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
24019fc4:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
24019fd4:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
24019fe4:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
24019ff4:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
2401a004:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
2401a014:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
2401a024:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
2401a034:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2401a044:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2401a054:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2401a064:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2401a074:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2401a084:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2401a094:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2401a0a4:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2401a0b4:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2401a0c4:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2401a0d4:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
2401a0e4:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
2401a0f4:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
2401a104:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
2401a114:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
2401a124:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
2401a134:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2401a144:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2401a154:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2401a164:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2401a174:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2401a184:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2401a194:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2401a1a4:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2401a1b4:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2401a1c4:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2401a1d4:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
2401a1e4:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
2401a1f4:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
2401a204:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
2401a214:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
2401a224:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
2401a234:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2401a244:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2401a254:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2401a264:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2401a274:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2401a284:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2401a294:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2401a2a4:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2401a2b4:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2401a2c4:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2401a2d4:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
2401a2e4:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
2401a2f4:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
2401a304:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
2401a314:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
2401a324:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
2401a334:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2401a344:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2401a354:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2401a364:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2401a374:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2401a384:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2401a394:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2401a3a4:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2401a3b4:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2401a3c4:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2401a3d4:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
2401a3e4:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
2401a3f4:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
2401a404:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
2401a414:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
2401a424:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
2401a434:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2401a444 <__leaf_table_fir16XHigh>:
2401a444:	b828803b b8075a7f b83afe5a b8793f7f     ;.(..Z..Z.:..?y.
2401a454:	b8a16efe b8cc365a b8fd2336 b91a20a8     .n..Z6..6#... ..
2401a464:	b938ba83 b95a3b88 b97e67f6 b992750e     ..8..;Z..g~..u..
2401a474:	b9a6a877 b9bb87a7 b9d0bdfd b9e5e912     w...............
2401a484:	b9fa9967 ba0729c3 ba1048b6 ba18624b     g....)...H..Kb..
2401a494:	ba1f2c3d ba245a6f ba27a0a6 ba28b3e0     =,..oZ$...'...(.
2401a4a4:	ba274cb9 ba23287f ba1c0c0f ba11c4db     .L'..(#.........
2401a4b4:	ba042b83 b9e64ab2 b9bd4b9e b98d60b9     .+...J...K...`..
2401a4c4:	b92d64dd b84c66a3 38a67ca9 39647818     .d-..fL..|.8.xd9
2401a4d4:	39bf8fbd 3a085e5c 3a326265 3a5d460b     ...9\^.:eb2:.F]:
2401a4e4:	3a84372e 3a999afc 3aae7804 3ac27598     .7.:...:.x.:.u.:
2401a4f4:	3ad53a80 3ae66ee9 3af5be2c 3b016c61     .:.:.n.:,..:al.;
2401a504:	3b06bb0f 3b0aab52 3b0d22ab 3b0e0cb8     ...;R..;.".;...;
2401a514:	3b0d5bef 3b0b0a2e 3b071928 3b01929b     .[.;...;(..;...;
2401a524:	3af51105 3ae429e8 3ad0b3b2 3abb010e     ...:.).:...:...:
2401a534:	3aa3723f 3a8a736f 3a60f53f 3a2c0adb     ?r.:os.:?.`:..,:
2401a544:	39ee59cd 3986ca10 388dddf8 b8e66ce8     .Y.9...9...8.l..
2401a554:	b98e8577 b9d98431 ba0c8324 ba25db46     w...1...$...F.%.
2401a564:	ba3842aa ba43581c ba46e3ab ba42d973     .B8..XC...F.s.B.
2401a574:	ba375a72 ba24b587 ba0b664f b9d8266e     rZ7...$.Of..n&..
2401a584:	b98f138d b8f5d376 3854c47d 396d8cbd     ....v...}.T8..m9
2401a594:	39d4a213 3a18d2a0 3a45a363 3a6f8528     ...9...:c.E:(.o:
2401a5a4:	3a8aa371 3a9ae616 3aa80b5d 3ab1a776     q..:...:]..:v..:
2401a5b4:	3ab763e9 3ab900d4 3ab658e8 3aaf6527     .c.:...:.X.:'e.:
2401a5c4:	3aa43966 3a95034d 3a82142e 3a579f82     f9.:M..:...:..W:
2401a5d4:	3a257140 39dd8fe4 3953d6da b7d2e403     @q%:...9..S9....
2401a5e4:	b984b7e5 b9f99775 ba345946 ba67819f     ....u...FY4...g.
2401a5f4:	ba8a6b42 ba9d8446 baac7869 bab6ccdb     Bk..F...ix......
2401a604:	babc2344 babc3cf7 bab6fd6d baac6bd8     D#...<..m....k..
2401a614:	ba9cb3d4 ba88252c ba5e6529 ba24df29     ....,%..)e^.).$.
2401a624:	b9ca34ba b902b206 391aae0d 39de1e16     .4.........9...9
2401a634:	3a368d63 3a7b2f1f 3a9d822d 3aba1904     c.6:./{:-..:...:
2401a644:	3ad27f56 3ae5eff2 3af3c2d2 3afb724c     V..:...:...:Lr.:
2401a654:	3afc9fd3 3af7175f 3aead1d4 3ad7f692     ...:_..:...:...:
2401a664:	3abedb9b 3aa00455 3a783e8f 3a280548     ...:U..:.>x:H.(:
2401a674:	39a29dc6 b81b87d2 b9cd6f70 ba4337de     ...9....po...7C.
2401a684:	ba8e5a31 bab8562a bade59a9 baff418a     1Z..*V...Y...A..
2401a694:	bb0d0305 bb16e154 bb1cde9c bb1eb608     ....T...........
2401a6a4:	bb1c3daa bb15683c bb0a4651 baf60d63     .=..<h..QF..c...
2401a6b4:	bacfec00 baa2fb00 ba60843e b9e3e2da     ........>.`.....
2401a6c4:	3740a839 39f6af20 3a73df43 3ab4a93e     9.@7 ..9C.s:>..:
2401a6d4:	3aec3344 3b0f78fc 3b25af57 3b380968     D3.:.x.;W.%;h.8;
2401a6e4:	3b45e946 3b4ecb32 3b5249f5 3b5022a0     F.E;2.N;.IR;."P;
2401a6f4:	3b483745 3b3a90fe 3b2760b8 3b0eff3c     E7H;..:;.`';<..;
2401a704:	3ae3d81a 3aa1968b 3a3188d8 38b2657b     ...:...:..1:{e.8
2401a714:	ba0a9e4b ba968343 bae6465e bb19302a     K...C...^F..*0..
2401a724:	bb3c4f88 bb5b72bc bb759d71 bb84f680     .O<..r[.q.u.....
2401a734:	bb8bcf7f bb8f0bb9 bb8e7358 bb89e6dd     ........Xs......
2401a744:	bb81608b bb69eba2 bb49af5b bb22a3ba     .`....i.[.I...".
2401a754:	baeb2b01 ba8702c3 b9590bba 3a2bb5f2     .+........Y...+:
2401a764:	3ac916fb 3b1dc539 3b550973 3b8461d3     ...:9..;s.U;.a.;
2401a774:	3b9bb323 3bafbaa0 3bbfc836 3bcb3ed7     #..;...;6..;.>.;
2401a784:	3bd19942 3bd26e62 3bcd7525 3bc287b4     B..;bn.;%u.;...;
2401a794:	3bb1a5ee 3b9af70a 3b7d94cc 3b3b2ecb     ...;...;..};..;;
2401a7a4:	3adff149 39ebc642 ba6a1a86 bb15ff09     I..:B..9..j.....
2401a7b4:	bb72b761 bba72719 bbd32336 bbfc09ef     a.r..'..6#......
2401a7c4:	bc104a54 bc1fc1bc bc2bd21b bc33ecd9     TJ........+...3.
2401a7d4:	bc37914f bc364ff3 bc2fcd54 bc23c4b5     O.7..O6.T./...#.
2401a7e4:	bc120a39 bbf5191a bbbaac4e bb6a3781     9.......N....7j.
2401a7f4:	ba93b7d9 3ad47b19 3b9816a4 3c0169df     .....{.:...;.i.<
2401a804:	3c3a0151 3c7513ef 3c98e998 3cb7b1af     Q.:<..u<...<...<
2401a814:	3cd66fc2 3cf4aed0 3d08fcbc 3d16ee17     .o.<...<...=...=
2401a824:	3d23f3b9 3d2fd8f2 3d3a6d2a 3d4384d1     ..#=../=*m:=..C=
2401a834:	3d4afa37 3d50ae49 3d54892a 3d567ab0     7.J=I.P=*.T=.zV=
2401a844:	3d567ab0 3d54892a 3d50ae49 3d4afa37     .zV=*.T=I.P=7.J=
2401a854:	3d4384d1 3d3a6d2a 3d2fd8f2 3d23f3b9     ..C=*m:=../=..#=
2401a864:	3d16ee17 3d08fcbc 3cf4aed0 3cd66fc2     ...=...=...<.o.<
2401a874:	3cb7b1af 3c98e998 3c7513ef 3c3a0151     ...<...<..u<Q.:<
2401a884:	3c0169df 3b9816a4 3ad47b19 ba93b7d9     .i.<...;.{.:....
2401a894:	bb6a3781 bbbaac4e bbf5191a bc120a39     .7j.N.......9...
2401a8a4:	bc23c4b5 bc2fcd54 bc364ff3 bc37914f     ..#.T./..O6.O.7.
2401a8b4:	bc33ecd9 bc2bd21b bc1fc1bc bc104a54     ..3...+.....TJ..
2401a8c4:	bbfc09ef bbd32336 bba72719 bb72b761     ....6#...'..a.r.
2401a8d4:	bb15ff09 ba6a1a86 39ebc642 3adff149     ......j.B..9I..:
2401a8e4:	3b3b2ecb 3b7d94cc 3b9af70a 3bb1a5ee     ..;;..};...;...;
2401a8f4:	3bc287b4 3bcd7525 3bd26e62 3bd19942     ...;%u.;bn.;B..;
2401a904:	3bcb3ed7 3bbfc836 3bafbaa0 3b9bb323     .>.;6..;...;#..;
2401a914:	3b8461d3 3b550973 3b1dc539 3ac916fb     .a.;s.U;9..;...:
2401a924:	3a2bb5f2 b9590bba ba8702c3 baeb2b01     ..+:..Y......+..
2401a934:	bb22a3ba bb49af5b bb69eba2 bb81608b     ..".[.I...i..`..
2401a944:	bb89e6dd bb8e7358 bb8f0bb9 bb8bcf7f     ....Xs..........
2401a954:	bb84f680 bb759d71 bb5b72bc bb3c4f88     ....q.u..r[..O<.
2401a964:	bb19302a bae6465e ba968343 ba0a9e4b     *0..^F..C...K...
2401a974:	38b2657b 3a3188d8 3aa1968b 3ae3d81a     {e.8..1:...:...:
2401a984:	3b0eff3c 3b2760b8 3b3a90fe 3b483745     <..;.`';..:;E7H;
2401a994:	3b5022a0 3b5249f5 3b4ecb32 3b45e946     ."P;.IR;2.N;F.E;
2401a9a4:	3b380968 3b25af57 3b0f78fc 3aec3344     h.8;W.%;.x.;D3.:
2401a9b4:	3ab4a93e 3a73df43 39f6af20 3740a839     >..:C.s: ..99.@7
2401a9c4:	b9e3e2da ba60843e baa2fb00 bacfec00     ....>.`.........
2401a9d4:	baf60d63 bb0a4651 bb15683c bb1c3daa     c...QF..<h...=..
2401a9e4:	bb1eb608 bb1cde9c bb16e154 bb0d0305     ........T.......
2401a9f4:	baff418a bade59a9 bab8562a ba8e5a31     .A...Y..*V..1Z..
2401aa04:	ba4337de b9cd6f70 b81b87d2 39a29dc6     .7C.po.........9
2401aa14:	3a280548 3a783e8f 3aa00455 3abedb9b     H.(:.>x:U..:...:
2401aa24:	3ad7f692 3aead1d4 3af7175f 3afc9fd3     ...:...:_..:...:
2401aa34:	3afb724c 3af3c2d2 3ae5eff2 3ad27f56     Lr.:...:...:V..:
2401aa44:	3aba1904 3a9d822d 3a7b2f1f 3a368d63     ...:-..:./{:c.6:
2401aa54:	39de1e16 391aae0d b902b206 b9ca34ba     ...9...9.....4..
2401aa64:	ba24df29 ba5e6529 ba88252c ba9cb3d4     ).$.)e^.,%......
2401aa74:	baac6bd8 bab6fd6d babc3cf7 babc2344     .k..m....<..D#..
2401aa84:	bab6ccdb baac7869 ba9d8446 ba8a6b42     ....ix..F...Bk..
2401aa94:	ba67819f ba345946 b9f99775 b984b7e5     ..g.FY4.u.......
2401aaa4:	b7d2e403 3953d6da 39dd8fe4 3a257140     ......S9...9@q%:
2401aab4:	3a579f82 3a82142e 3a95034d 3aa43966     ..W:...:M..:f9.:
2401aac4:	3aaf6527 3ab658e8 3ab900d4 3ab763e9     'e.:.X.:...:.c.:
2401aad4:	3ab1a776 3aa80b5d 3a9ae616 3a8aa371     v..:]..:...:q..:
2401aae4:	3a6f8528 3a45a363 3a18d2a0 39d4a213     (.o:c.E:...:...9
2401aaf4:	396d8cbd 3854c47d b8f5d376 b98f138d     ..m9}.T8v.......
2401ab04:	b9d8266e ba0b664f ba24b587 ba375a72     n&..Of....$.rZ7.
2401ab14:	ba42d973 ba46e3ab ba43581c ba3842aa     s.B...F..XC..B8.
2401ab24:	ba25db46 ba0c8324 b9d98431 b98e8577     F.%.$...1...w...
2401ab34:	b8e66ce8 388dddf8 3986ca10 39ee59cd     .l.....8...9.Y.9
2401ab44:	3a2c0adb 3a60f53f 3a8a736f 3aa3723f     ..,:?.`:os.:?r.:
2401ab54:	3abb010e 3ad0b3b2 3ae429e8 3af51105     ...:...:.).:...:
2401ab64:	3b01929b 3b071928 3b0b0a2e 3b0d5bef     ...;(..;...;.[.;
2401ab74:	3b0e0cb8 3b0d22ab 3b0aab52 3b06bb0f     ...;.".;R..;...;
2401ab84:	3b016c61 3af5be2c 3ae66ee9 3ad53a80     al.;,..:.n.:.:.:
2401ab94:	3ac27598 3aae7804 3a999afc 3a84372e     .u.:.x.:...:.7.:
2401aba4:	3a5d460b 3a326265 3a085e5c 39bf8fbd     .F]:eb2:\^.:...9
2401abb4:	39647818 38a67ca9 b84c66a3 b92d64dd     .xd9.|.8.fL..d-.
2401abc4:	b98d60b9 b9bd4b9e b9e64ab2 ba042b83     .`...K...J...+..
2401abd4:	ba11c4db ba1c0c0f ba23287f ba274cb9     .........(#..L'.
2401abe4:	ba28b3e0 ba27a0a6 ba245a6f ba1f2c3d     ..(...'.oZ$.=,..
2401abf4:	ba18624b ba1048b6 ba0729c3 b9fa9967     Kb...H...)..g...
2401ac04:	b9e5e912 b9d0bdfd b9bb87a7 b9a6a877     ............w...
2401ac14:	b992750e b97e67f6 b95a3b88 b938ba83     .u...g~..;Z...8.
2401ac24:	b91a20a8 b8fd2336 b8cc365a b8a16efe     . ..6#..Z6...n..
2401ac34:	b8793f7f b83afe5a b8075a7f b828803b     .?y.Z.:..Z..;.(.

2401ac44 <__leaf_table_fir16XLow>:
2401ac44:	3b972596 3b1e7b86 3b4480c1 3b6dc089     .%.;.{.;..D;..m;
2401ac54:	3b8cd267 3ba3b759 3bbb2b1d 3bd2b96e     g..;Y..;.+.;n..;
2401ac64:	3be9d0a6 3bffde9f 3c0a28c2 3c13401d     ...;...;.(.<.@.<
2401ac74:	3c1aea38 3c20d2d4 3c24b1bf 3c264050     8..<.. <..$<P@&<
2401ac84:	3c254231 3c2184e5 3c1ae23a 3c1144ac     1B%<..!<:..<.D.<
2401ac94:	3c04a852 3bea35b8 3bc57a82 3b9b844f     R..<.5.;.z.;O..;
2401aca4:	3b59b9e7 3ae8df31 390d9a9e bace02ab     ..Y;1..:...9....
2401acb4:	bb58e2ab bba52c90 bbdc6792 bc086799     ..X..,...g...g..
2401acc4:	bc2082fc bc35d33f bc47ad66 bc556159     .. .?.5.f.G.YaU.
2401acd4:	bc5e636d bc6220c2 bc6039b8 bc5849be     mc^.. b..9`..IX.
2401ace4:	bc49fc99 bc35332e bc19f920 bbf0d07c     ..I..35. ...|...
2401acf4:	bba13d88 bb0be039 3a7d5bdc 3b8f0681     .=..9....[}:...;
2401ad04:	3c032156 3c41f940 3c818cfc 3ca2c966     V!.<@.A<...<f..<
2401ad14:	3cc430a8 3ce53b50 3d02b0cd 3d120e4c     .0.<P;.<...=L..=
2401ad24:	3d2074a4 3d2da6ca 3d396ad2 3d438d97     .t =..-=.j9=..C=
2401ad34:	3d4be1b8 3d524230 3d56927e 3d58bf65     ..K=0BR=~.V=e.X=
2401ad44:	3d58bf65 3d56927e 3d524230 3d4be1b8     e.X=~.V=0BR=..K=
2401ad54:	3d438d97 3d396ad2 3d2da6ca 3d2074a4     ..C=.j9=..-=.t =
2401ad64:	3d120e4c 3d02b0cd 3ce53b50 3cc430a8     L..=...=P;.<.0.<
2401ad74:	3ca2c966 3c818cfc 3c41f940 3c032156     f..<...<@.A<V!.<
2401ad84:	3b8f0681 3a7d5bdc bb0be039 bba13d88     ...;.[}:9....=..
2401ad94:	bbf0d07c bc19f920 bc35332e bc49fc99     |... ....35...I.
2401ada4:	bc5849be bc6039b8 bc6220c2 bc5e636d     .IX..9`.. b.mc^.
2401adb4:	bc556159 bc47ad66 bc35d33f bc2082fc     YaU.f.G.?.5... .
2401adc4:	bc086799 bbdc6792 bba52c90 bb58e2ab     .g...g...,....X.
2401add4:	bace02ab 390d9a9e 3ae8df31 3b59b9e7     .......91..:..Y;
2401ade4:	3b9b844f 3bc57a82 3bea35b8 3c04a852     O..;.z.;.5.;R..<
2401adf4:	3c1144ac 3c1ae23a 3c2184e5 3c254231     .D.<:..<..!<1B%<
2401ae04:	3c264050 3c24b1bf 3c20d2d4 3c1aea38     P@&<..$<.. <8..<
2401ae14:	3c13401d 3c0a28c2 3bffde9f 3be9d0a6     .@.<.(.<...;...;
2401ae24:	3bd2b96e 3bbb2b1d 3ba3b759 3b8cd267     n..;.+.;Y..;g..;
2401ae34:	3b6dc089 3b4480c1 3b1e7b86 3b972596     ..m;..D;.{.;.%.;

2401ae44 <__leaf_table_fir2XHigh>:
2401ae44:	b49880da b5b7cebc b60f0421 351be46f     ........!...o..5
2401ae54:	36afcfc0 35ef7588 b7438162 b75168b6     ...6.u.5b.C..hQ.
2401ae64:	37767f8a 3801affb b7433a4b b88142ed     ..v7...8K:C..B..
2401ae74:	b73b9f94 38c99e8c 387f25ef b904a096     ..;....8.%.8....
2401ae84:	b91dc7b6 3905bb34 399182b0 b89cbb8a     ....4..9...9....
2401ae94:	b9e3c624 b88f49b6 3a19ad36 39aa3647     $....I..6..:G6.9
2401aea4:	ba3395ca ba3a0853 3a2bc34d 3a9d6afd     ..3.S.:.M.+:.j.:
2401aeb4:	b9dbcb4d bae4abaa b8d9f028 3b122fc8     M.......(..../.;
2401aec4:	3a7b840d bb24ade3 bb0ce216 3b1d89b6     ..{:..$........;
2401aed4:	3b6b7aa4 bae1214d bba7efa8 399667ea     .zk;M!.......g.9
2401aee4:	3bd42c70 3b019df0 bbef08c4 bba5eaab     p,.;...;........
2401aef4:	3bead4ee 3c103482 bbb96ff7 bc52bcad     ...;.4.<.o....R.
2401af04:	3b1a42fc 3c8906e5 3b4b8157 bca165a1     .B.;...<W.K;.e..
2401af14:	bc34b078 3cab1123 3cb21f27 bc9c27ca     x.4.#..<'..<.'..
2401af24:	bd13065e 3c4965b1 3d62c939 3b7d04ce     ^....eI<9.b=..};
2401af34:	bdb30635 bd4002cd 3e3996fd 3ed30014     5.....@...9>...>
2401af44:	3ed30014 3e3996fd bd4002cd bdb30635     ...>..9>..@.5...
2401af54:	3b7d04ce 3d62c939 3c4965b1 bd13065e     ..};9.b=.eI<^...
2401af64:	bc9c27ca 3cb21f27 3cab1123 bc34b078     .'..'..<#..<x.4.
2401af74:	bca165a1 3b4b8157 3c8906e5 3b1a42fc     .e..W.K;...<.B.;
2401af84:	bc52bcad bbb96ff7 3c103482 3bead4ee     ..R..o...4.<...;
2401af94:	bba5eaab bbef08c4 3b019df0 3bd42c70     ...........;p,.;
2401afa4:	399667ea bba7efa8 bae1214d 3b6b7aa4     .g.9....M!...zk;
2401afb4:	3b1d89b6 bb0ce216 bb24ade3 3a7b840d     ...;......$...{:
2401afc4:	3b122fc8 b8d9f028 bae4abaa b9dbcb4d     ./.;(.......M...
2401afd4:	3a9d6afd 3a2bc34d ba3a0853 ba3395ca     .j.:M.+:S.:...3.
2401afe4:	39aa3647 3a19ad36 b88f49b6 b9e3c624     G6.96..:.I..$...
2401aff4:	b89cbb8a 399182b0 3905bb34 b91dc7b6     .......94..9....
2401b004:	b904a096 387f25ef 38c99e8c b73b9f94     .....%.8...8..;.
2401b014:	b88142ed b7433a4b 3801affb 37767f8a     .B..K:C....8..v7
2401b024:	b75168b6 b7438162 35ef7588 36afcfc0     .hQ.b.C..u.5...6
2401b034:	351be46f b60f0421 b5b7cebc b49880da     o..5!...........

2401b044 <__leaf_table_fir2XLow>:
2401b044:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2401b054:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2401b064:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2401b074:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2401b084:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2401b094:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2401b0a4:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2401b0b4:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2401b0c4 <__leaf_table_fir32XHigh>:
2401b0c4:	378e3f75 3700c5e1 371d33b6 373d3b4e     u?.7...7.3.7N;=7
2401b0d4:	37611473 37847a8c 379a88b4 37b2cd08     s.a7.z.7...7...7
2401b0e4:	37cd5dd4 37ea4e7d 3804d820 3815c901     .].7}N.7 ..8...8
2401b0f4:	3827ff7f 383b7f0e 385048f6 38665c17     ..'8..;8.HP8.\f8
2401b104:	387db4fb 388b26f1 38980eb6 38a58bc7     ..}8.&.8...8...8
2401b114:	38b3963b 38c22506 38d12cdc 38e0a0ea     ;..8.%.8.,.8...8
2401b124:	38f07210 390047dc 390873a9 3910b1f1     .r.8.G.9.s.9...9
2401b134:	3918f72d 39213708 39296412 39316fd0     -..9.7!9.d)9.o19
2401b144:	39394aa4 3940e410 39482acb 394f0c66     .J99..@9.*H9f.O9
2401b154:	39557593 395b5287 39608eab 39651479     .uU9.R[9..`9y.e9
2401b164:	3968ce3b 396ba5b4 396d83e8 396e5212     ;.h9..k9..m9.Rn9
2401b174:	396df933 396c61c5 39697544 39651c4d     3.m9.al9Dui9M.e9
2401b184:	395f40df 3957ccd4 394eab18 3943c748     .@_9..W9..N9H.C9
2401b194:	39370e41 39286e00 3917d5d4 3905369c     A.79.n(9...9.6.9
2401b1a4:	38e105ed 38b35ec6 388164bf 38161265     ...8.^.8.d.8e..8
2401b1b4:	370212d7 b7bbd1b2 b8653559 b8baa9fe     ...7....Y5e.....
2401b1c4:	b9038b35 b92be653 b9565a81 b9816b8d     5...S.+..ZV..k..
2401b1d4:	b998a4fe b9b0cdf5 b9c9d98e b9e3b93b     ............;...
2401b1e4:	b9fe5c44 ba0cd837 ba1ad0e7 ba290d34     D\..7.......4.).
2401b1f4:	ba37814f ba4620a9 ba54ddd7 ba63aa9a     O.7.. F...T...c.
2401b204:	ba727810 ba809b59 ba87eb28 ba8f230a     .xr.Y...(....#..
2401b214:	ba963a50 ba9d2813 baa3e336 baaa626d     P:...(..6...mb..
2401b224:	bab09c57 bab6878d babc1aa3 bac14c35     W...........5L..
2401b234:	bac612e3 baca656b bace3aae bad189cf     ....ke...:......
2401b244:	bad44a3b bad673c9 bad7feb8 bad8e3b4     ;J...s..........
2401b254:	bad91bd2 bad8a0a1 bad76c55 bad579f5     ........Ul...y..
2401b264:	bad2c562 bacf4b22 bacb0835 bac5fa63     b..."K..5...c...
2401b274:	bac020dd bab97c33 bab20ce9 baa9d398     . ..3|..........
2401b284:	baa0d598 ba9714b8 ba8c9720 ba81627a     ........ ...zb..
2401b294:	ba6afc11 ba51e414 ba378fa3 ba1c1385     ..j...Q...7.....
2401b2a4:	b9ff0d36 b9c403b6 b9874074 b911fa83     6.......t@......
2401b2b4:	b7977a12 38dc3d92 3970a6d7 39ba0cf7     .z...=.8..p9...9
2401b2c4:	39fbf1c1 3a1eda75 3a3f83aa 3a5fcbeb     ...9u..:..?:.._:
2401b2d4:	3a7f89ee 3a8f49dd 3a9e5f80 3aacf08e     ...:.I.:._.:...:
2401b2e4:	3abae7ba 3ac82fcf 3ad4b3ca 3ae05ef6     ...:./.:...:.^.:
2401b2f4:	3aeb1d0f 3af4da5a 3afd83c8 3b028384     ...:Z..:...:...;
2401b304:	3b05a958 3b082b2b 3b0a0157 3b0b24d0     X..;++.;W..;.$.;
2401b314:	3b0b8f36 3b0b3ae3 3b0a22ee 3b084345     6..;.:.;.".;EC.;
2401b324:	3b0598ad 3b0220d1 3afbb4a1 3af18984     ...;. .;...:...:
2401b334:	3ae5c178 3ad85fca 3ac969cb 3ab8e70b     x..:._.:.i.:...:
2401b344:	3aa6e135 3a936431 3a7cfc27 3a507e56     5..:1d.:'.|:V~P:
2401b354:	3a2173f0 39e00c98 39718c0c 37d77bf0     .s!:...9..q9.{.7
2401b364:	b942e4f6 b9d3850d ba242269 ba5f97b7     ..B.....i"$..._.
2401b374:	ba8deee8 baac5673 bacadd15 bae95c17     ....sV.......\..
2401b384:	bb03d5ba bb12d120 bb218b2f bb2feeae     .... .../.!.../.
2401b394:	bb3de5df bb4b5af5 bb583801 bb6466f8     ..=..ZK..8X..fd.
2401b3a4:	bb6fd1f5 bb7a6344 bb8202b3 bb86519e     ..o.Dcz......Q..
2401b3b4:	bb8a1414 bb8d400e bb8fcbd2 bb91ae0b     .....@..........
2401b3c4:	bb92ddd2 bb9352bb bb9304df bb91ece2     .....R..........
2401b3d4:	bb900408 bb8d4438 bb89a809 bb852aca     ....8D.......*..
2401b3e4:	bb7f9117 bb72fc4f bb649293 bb5450e1     ....O.r...d..PT.
2401b3f4:	bb4235ed bb2e422d bb1877e5 bb00db2a     .5B.-B...w..*...
2401b404:	bacee3bd ba988766 ba3d68ae b986053f     ....f....h=.?...
2401b414:	3977ba7e 3a452f57 3aa93e79 3af2c6f4     ~.w9W/E:y>.:...:
2401b424:	3b1f8474 3b46ec81 3b6f8484 3b8c99eb     t..;..F;..o;...;
2401b434:	3ba1f023 3bb7b744 3bcde112 3be45e8f     #..;D..;...;.^.;
2401b444:	3bfb2081 3c090b7d 3c1498e7 3c203031     . .;}..<...<10 <
2401b454:	3c2bc8ef 3c375a96 3c42dc87 3c4e4617     ..+<.Z7<..B<.FN<
2401b464:	3c598e98 3c64ad5f 3c6f99cf 3c7a4b5f     ..Y<_.d<..o<_Kz<
2401b474:	3c825cd4 3c876e32 3c8c55c1 3c910f90     .\.<2n.<.U.<...<
2401b484:	3c9597d0 3c99ead5 3c9e051a 3ca1e342     ...<...<...<B..<
2401b494:	3ca58222 3ca8debd 3cabf64d 3caec63f     "..<...<M..<?..<
2401b4a4:	3cb14c3f 3cb38632 3cb5723b 3cb70ec0     ?L.<2..<;r.<...<
2401b4b4:	3cb85a66 3cb95417 3cb9fb02 3cba4e9b     fZ.<.T.<...<.N.<
2401b4c4:	3cba4e9b 3cb9fb02 3cb95417 3cb85a66     .N.<...<.T.<fZ.<
2401b4d4:	3cb70ec0 3cb5723b 3cb38632 3cb14c3f     ...<;r.<2..<?L.<
2401b4e4:	3caec63f 3cabf64d 3ca8debd 3ca58222     ?..<M..<...<"..<
2401b4f4:	3ca1e342 3c9e051a 3c99ead5 3c9597d0     B..<...<...<...<
2401b504:	3c910f90 3c8c55c1 3c876e32 3c825cd4     ...<.U.<2n.<.\.<
2401b514:	3c7a4b5f 3c6f99cf 3c64ad5f 3c598e98     _Kz<..o<_.d<..Y<
2401b524:	3c4e4617 3c42dc87 3c375a96 3c2bc8ef     .FN<..B<.Z7<..+<
2401b534:	3c203031 3c1498e7 3c090b7d 3bfb2081     10 <...<}..<. .;
2401b544:	3be45e8f 3bcde112 3bb7b744 3ba1f023     .^.;...;D..;#..;
2401b554:	3b8c99eb 3b6f8484 3b46ec81 3b1f8474     ...;..o;..F;t..;
2401b564:	3af2c6f4 3aa93e79 3a452f57 3977ba7e     ...:y>.:W/E:~.w9
2401b574:	b986053f ba3d68ae ba988766 bacee3bd     ?....h=.f.......
2401b584:	bb00db2a bb1877e5 bb2e422d bb4235ed     *....w..-B...5B.
2401b594:	bb5450e1 bb649293 bb72fc4f bb7f9117     .PT...d.O.r.....
2401b5a4:	bb852aca bb89a809 bb8d4438 bb900408     .*......8D......
2401b5b4:	bb91ece2 bb9304df bb9352bb bb92ddd2     .........R......
2401b5c4:	bb91ae0b bb8fcbd2 bb8d400e bb8a1414     .........@......
2401b5d4:	bb86519e bb8202b3 bb7a6344 bb6fd1f5     .Q......Dcz...o.
2401b5e4:	bb6466f8 bb583801 bb4b5af5 bb3de5df     .fd..8X..ZK...=.
2401b5f4:	bb2feeae bb218b2f bb12d120 bb03d5ba     .././.!. .......
2401b604:	bae95c17 bacadd15 baac5673 ba8deee8     .\......sV......
2401b614:	ba5f97b7 ba242269 b9d3850d b942e4f6     .._.i"$.......B.
2401b624:	37d77bf0 39718c0c 39e00c98 3a2173f0     .{.7..q9...9.s!:
2401b634:	3a507e56 3a7cfc27 3a936431 3aa6e135     V~P:'.|:1d.:5..:
2401b644:	3ab8e70b 3ac969cb 3ad85fca 3ae5c178     ...:.i.:._.:x..:
2401b654:	3af18984 3afbb4a1 3b0220d1 3b0598ad     ...:...:. .;...;
2401b664:	3b084345 3b0a22ee 3b0b3ae3 3b0b8f36     EC.;.".;.:.;6..;
2401b674:	3b0b24d0 3b0a0157 3b082b2b 3b05a958     .$.;W..;++.;X..;
2401b684:	3b028384 3afd83c8 3af4da5a 3aeb1d0f     ...;...:Z..:...:
2401b694:	3ae05ef6 3ad4b3ca 3ac82fcf 3abae7ba     .^.:...:./.:...:
2401b6a4:	3aacf08e 3a9e5f80 3a8f49dd 3a7f89ee     ...:._.:.I.:...:
2401b6b4:	3a5fcbeb 3a3f83aa 3a1eda75 39fbf1c1     .._:..?:u..:...9
2401b6c4:	39ba0cf7 3970a6d7 38dc3d92 b7977a12     ...9..p9.=.8.z..
2401b6d4:	b911fa83 b9874074 b9c403b6 b9ff0d36     ....t@......6...
2401b6e4:	ba1c1385 ba378fa3 ba51e414 ba6afc11     ......7...Q...j.
2401b6f4:	ba81627a ba8c9720 ba9714b8 baa0d598     zb.. ...........
2401b704:	baa9d398 bab20ce9 bab97c33 bac020dd     ........3|... ..
2401b714:	bac5fa63 bacb0835 bacf4b22 bad2c562     c...5..."K..b...
2401b724:	bad579f5 bad76c55 bad8a0a1 bad91bd2     .y..Ul..........
2401b734:	bad8e3b4 bad7feb8 bad673c9 bad44a3b     .........s..;J..
2401b744:	bad189cf bace3aae baca656b bac612e3     .....:..ke......
2401b754:	bac14c35 babc1aa3 bab6878d bab09c57     5L..........W...
2401b764:	baaa626d baa3e336 ba9d2813 ba963a50     mb..6....(..P:..
2401b774:	ba8f230a ba87eb28 ba809b59 ba727810     .#..(...Y....xr.
2401b784:	ba63aa9a ba54ddd7 ba4620a9 ba37814f     ..c...T.. F.O.7.
2401b794:	ba290d34 ba1ad0e7 ba0cd837 b9fe5c44     4.).....7...D\..
2401b7a4:	b9e3b93b b9c9d98e b9b0cdf5 b998a4fe     ;...............
2401b7b4:	b9816b8d b9565a81 b92be653 b9038b35     .k...ZV.S.+.5...
2401b7c4:	b8baa9fe b8653559 b7bbd1b2 370212d7     ....Y5e........7
2401b7d4:	38161265 388164bf 38b35ec6 38e105ed     e..8.d.8.^.8...8
2401b7e4:	3905369c 3917d5d4 39286e00 39370e41     .6.9...9.n(9A.79
2401b7f4:	3943c748 394eab18 3957ccd4 395f40df     H.C9..N9..W9.@_9
2401b804:	39651c4d 39697544 396c61c5 396df933     M.e9Dui9.al93.m9
2401b814:	396e5212 396d83e8 396ba5b4 3968ce3b     .Rn9..m9..k9;.h9
2401b824:	39651479 39608eab 395b5287 39557593     y.e9..`9.R[9.uU9
2401b834:	394f0c66 39482acb 3940e410 39394aa4     f.O9.*H9..@9.J99
2401b844:	39316fd0 39296412 39213708 3918f72d     .o19.d)9.7!9-..9
2401b854:	3910b1f1 390873a9 390047dc 38f07210     ...9.s.9.G.9.r.8
2401b864:	38e0a0ea 38d12cdc 38c22506 38b3963b     ...8.,.8.%.8;..8
2401b874:	38a58bc7 38980eb6 388b26f1 387db4fb     ...8...8.&.8..}8
2401b884:	38665c17 385048f6 383b7f0e 3827ff7f     .\f8.HP8..;8..'8
2401b894:	3815c901 3804d820 37ea4e7d 37cd5dd4     ...8 ..8}N.7.].7
2401b8a4:	37b2cd08 379a88b4 37847a8c 37611473     ...7...7.z.7s.a7
2401b8b4:	373d3b4e 371d33b6 3700c5e1 378e3f75     N;=7.3.7...7u?.7

2401b8c4 <__leaf_table_fir32XLow>:
2401b8c4:	3b4d823f 3a55cf8c 3a706768 3a862154     ?.M;..U:hgp:T!.:
2401b8d4:	3a94a66d 3aa3bb15 3ab34fb9 3ac34e76     m..:...:.O.:vN.:
2401b8e4:	3ad3a680 3ae44a48 3af51ddb 3b03044e     ...:HJ.:...:N..;
2401b8f4:	3b0b7dd5 3b13e618 3b1c3764 3b24600c     .}.;...;d7.;.`$;
2401b904:	3b2c53cc 3b340320 3b3b5eab 3b425663     .S,; .4;.^;;cVB;
2401b914:	3b48d99d 3b4ed8d5 3b5442af 3b5905bf     ..H;..N;.BT;..Y;
2401b924:	3b5d122c 3b605670 3b62c4a8 3b644ecf     ,.];pV`;..b;.Nd;
2401b934:	3b64e873 3b648692 3b631c8a 3b60a16c     s.d;..d;..c;l.`;
2401b944:	3b5d0942 3b584b18 3b525ee2 3b4b3c43     B.];.KX;.^R;C<K;
2401b954:	3b42dec7 3b39449f 3b2e6f08 3b226389     ..B;.D9;.o.;.c";
2401b964:	3b152695 3b06c368 3aee657c 3acd0b17     .&.;h..;|e.:...:
2401b974:	3aa96cdc 3a83abbe 3a37fed3 39ca654b     .l.:...:..7:Ke.9
2401b984:	38755daf b992c8e5 ba250bc7 ba81b2f1     .]u8......%.....
2401b994:	bab18f78 bae162bb bb09638c bb21c289     x....b...c....!.
2401b9a4:	bb3a3c2f bb528115 bb6a7228 bb80f569     /<:...R.(rj.i...
2401b9b4:	bb8c63e6 bb977162 bba209ef bbac1b4f     .c..bq......O...
2401b9c4:	bbb59193 bbbe58cf bbc66170 bbcd96b4     .....X..pa......
2401b9d4:	bbd3e8d0 bbd9453b bbdd9b53 bbe0daf0     ....;E..S.......
2401b9e4:	bbe2f508 bbe3dbe7 bbe38246 bbe1dcc3     ........F.......
2401b9f4:	bbdee124 bbda8646 bbd4c572 bbcd9860     $...F...r...`...
2401ba04:	bbc4fa9c bbbae8e0 bbaf612b bba264d0     ........+a...d..
2401ba14:	bb93f53a bb841897 bb65a92c bb406171     :.......,.e.qa@.
2401ba24:	bb186d28 badbc095 ba81a933 b98b4d61     (m......3...aM..
2401ba34:	3a00f888 3aa7f811 3b09b08f 3b41247c     ...:...:...;|$A;
2401ba44:	3b7a4676 3b9a65a0 3bb844d9 3bd6a786     vFz;.e.;.D.;...;
2401ba54:	3bf56f48 3c0a420f 3c19e611 3c2991e9     Ho.;.B.<...<..)<
2401ba64:	3c39348f 3c48c41c 3c5832ea 3c676665     .49<..H<.2X<efg<
2401ba74:	3c765f76 3c8280f8 3c89a26d 3c908c1b     v_v<...<m..<...<
2401ba84:	3c97372d 3c9d9ca9 3ca3b5ec 3ca97c87     -7.<...<...<.|.<
2401ba94:	3caeea30 3cb3f976 3cb8a527 3cbce7e7     0..<v..<'..<...<
2401baa4:	3cc0bd91 3cc42181 3cc71049 3cc986bb     ...<.!.<I..<...<
2401bab4:	3ccb8252 3ccd0101 3cce0113 3cce8175     R..<...<...<u..<
2401bac4:	3cce8175 3cce0113 3ccd0101 3ccb8252     u..<...<...<R..<
2401bad4:	3cc986bb 3cc71049 3cc42181 3cc0bd91     ...<I..<.!.<...<
2401bae4:	3cbce7e7 3cb8a527 3cb3f976 3caeea30     ...<'..<v..<0..<
2401baf4:	3ca97c87 3ca3b5ec 3c9d9ca9 3c97372d     .|.<...<...<-7.<
2401bb04:	3c908c1b 3c89a26d 3c8280f8 3c765f76     ...<m..<...<v_v<
2401bb14:	3c676665 3c5832ea 3c48c41c 3c39348f     efg<.2X<..H<.49<
2401bb24:	3c2991e9 3c19e611 3c0a420f 3bf56f48     ..)<...<.B.<Ho.;
2401bb34:	3bd6a786 3bb844d9 3b9a65a0 3b7a4676     ...;.D.;.e.;vFz;
2401bb44:	3b41247c 3b09b08f 3aa7f811 3a00f888     |$A;...;...:...:
2401bb54:	b98b4d61 ba81a933 badbc095 bb186d28     aM..3.......(m..
2401bb64:	bb406171 bb65a92c bb841897 bb93f53a     qa@.,.e.....:...
2401bb74:	bba264d0 bbaf612b bbbae8e0 bbc4fa9c     .d..+a..........
2401bb84:	bbcd9860 bbd4c572 bbda8646 bbdee124     `...r...F...$...
2401bb94:	bbe1dcc3 bbe38246 bbe3dbe7 bbe2f508     ....F...........
2401bba4:	bbe0daf0 bbdd9b53 bbd9453b bbd3e8d0     ....S...;E......
2401bbb4:	bbcd96b4 bbc66170 bbbe58cf bbb59193     ....pa...X......
2401bbc4:	bbac1b4f bba209ef bb977162 bb8c63e6     O.......bq...c..
2401bbd4:	bb80f569 bb6a7228 bb528115 bb3a3c2f     i...(rj...R./<:.
2401bbe4:	bb21c289 bb09638c bae162bb bab18f78     ..!..c...b..x...
2401bbf4:	ba81b2f1 ba250bc7 b992c8e5 38755daf     ......%......]u8
2401bc04:	39ca654b 3a37fed3 3a83abbe 3aa96cdc     Ke.9..7:...:.l.:
2401bc14:	3acd0b17 3aee657c 3b06c368 3b152695     ...:|e.:h..;.&.;
2401bc24:	3b226389 3b2e6f08 3b39449f 3b42dec7     .c";.o.;.D9;..B;
2401bc34:	3b4b3c43 3b525ee2 3b584b18 3b5d0942     C<K;.^R;.KX;B.];
2401bc44:	3b60a16c 3b631c8a 3b648692 3b64e873     l.`;..c;..d;s.d;
2401bc54:	3b644ecf 3b62c4a8 3b605670 3b5d122c     .Nd;..b;pV`;,.];
2401bc64:	3b5905bf 3b5442af 3b4ed8d5 3b48d99d     ..Y;.BT;..N;..H;
2401bc74:	3b425663 3b3b5eab 3b340320 3b2c53cc     cVB;.^;; .4;.S,;
2401bc84:	3b24600c 3b1c3764 3b13e618 3b0b7dd5     .`$;d7.;...;.}.;
2401bc94:	3b03044e 3af51ddb 3ae44a48 3ad3a680     N..;...:HJ.:...:
2401bca4:	3ac34e76 3ab34fb9 3aa3bb15 3a94a66d     vN.:.O.:...:m..:
2401bcb4:	3a862154 3a706768 3a55cf8c 3b4d823f     T!.:hgp:..U:?.M;

2401bcc4 <__leaf_table_fir4XHigh>:
2401bcc4:	b6a7f358 b72fedf5 b7aaa2cd b7ed6056     X...../.....V`..
2401bcd4:	b80ec5da b80cc44b b7efbf3c b7b64219     ....K...<....B..
2401bce4:	b79ecb73 b7d1317d b82dfbcd b8883541     s...}1....-.A5..
2401bcf4:	b8b68ada b8cde484 b8c1173f b893894b     ........?...K...
2401bd04:	b8353635 b7dcf20b b80bfc6d b88ff4fe     565.....m.......
2401bd14:	b900045b b934aad9 b94be12c b9364a21     [.....4.,.K.!J6.
2401bd24:	b8f04abf b831eb28 36c491b7 b5f4edc1     .J..(.1....6....
2401bd34:	b89ab241 b944211f b999503c b9b07a4e     A....!D.<P..Nz..
2401bd44:	b996e536 b9250469 3481383c 38dfe43d     6...i.%.<8.4=..8
2401bd54:	38cdf035 b82e1383 b989e0e3 b9f554e8     5..8.........T..
2401bd64:	ba105b84 b9ed29c3 b94e6a44 38e23c24     .[...)..DjN.$<.8
2401bd74:	39a493d2 399e1aee 383ff92f b9bc63ae     ...9...9/.?8.c..
2401bd84:	ba3f76fb ba65dc1d ba3657f3 b976fdb8     .v?...e..W6...v.
2401bd94:	39a16ee2 3a3018e5 3a2a84cf 3957cc7e     .n.9..0:..*:~.W9
2401bda4:	ba00f89c ba937638 bab36c76 ba8a594d     ....8v..vl..MY..
2401bdb4:	b99076c9 3a26ac5f 3aa26bd3 3a9d0a9f     .v.._.&:.k.:...:
2401bdc4:	39f14ea8 ba33a7ab bae09378 bb0998a4     .N.9..3.x.......
2401bdd4:	bacf420a b9a6d731 3a95c0ce 3b096af6     .B..1......:.j.;
2401bde4:	3b0441c3 3a5b75cd ba7f6db0 bb295330     .A.;.u[:.m..0S).
2401bdf4:	bb4fe177 bb19972a b9befeff 3af95ea0     w.O.*........^.:
2401be04:	3b5c85f0 3b52fc8c 3ab4b41d bab979d4     ..\;..R;...:.y..
2401be14:	bb7deacf bb9badd1 bb626b25 b9d83d30     ..}.....%kb.0=..
2401be24:	3b47a285 3bac2bfb 3ba3cf81 3b0dd391     ..G;.+.;...;...;
2401be34:	bb09fa80 bbbf7826 bbea488d bba8466e     ....&x...H..nF..
2401be44:	b9f05478 3b9eaea3 3c069182 3bff3007     xT.....;...<.0.;
2401be54:	3b5d4aa6 bb55e210 bc14e98e bc36455d     .J];..U.....]E6.
2401be64:	bc0203b4 ba02b937 3c030c90 3c5ca432     ....7......<2.\<
2401be74:	3c51e3bd 3bb65f23 bbb59a53 bc7e1f98     ..Q<#_.;S.....~.
2401be84:	bc9d3c27 bc61dfd6 ba0abc68 3c7a1b04     '<....a.h.....z<
2401be94:	3cd5e46d 3cd14f59 3c3b02df bc4a2cd8     m..<YO.<..;<.,J.
2401bea4:	bd141ca5 bd443969 bd190353 ba0f1a80     ....i9D.S.......
2401beb4:	3d6cd273 3dfff00c 3e3c22ac 3e5f30ad     s.l=...=."<>.0_>
2401bec4:	3e5f30ad 3e3c22ac 3dfff00c 3d6cd273     .0_>."<>...=s.l=
2401bed4:	ba0f1a80 bd190353 bd443969 bd141ca5     ....S...i9D.....
2401bee4:	bc4a2cd8 3c3b02df 3cd14f59 3cd5e46d     .,J...;<YO.<m..<
2401bef4:	3c7a1b04 ba0abc68 bc61dfd6 bc9d3c27     ..z<h.....a.'<..
2401bf04:	bc7e1f98 bbb59a53 3bb65f23 3c51e3bd     ..~.S...#_.;..Q<
2401bf14:	3c5ca432 3c030c90 ba02b937 bc0203b4     2.\<...<7.......
2401bf24:	bc36455d bc14e98e bb55e210 3b5d4aa6     ]E6.......U..J];
2401bf34:	3bff3007 3c069182 3b9eaea3 b9f05478     .0.;...<...;xT..
2401bf44:	bba8466e bbea488d bbbf7826 bb09fa80     nF...H..&x......
2401bf54:	3b0dd391 3ba3cf81 3bac2bfb 3b47a285     ...;...;.+.;..G;
2401bf64:	b9d83d30 bb626b25 bb9badd1 bb7deacf     0=..%kb.......}.
2401bf74:	bab979d4 3ab4b41d 3b52fc8c 3b5c85f0     .y.....:..R;..\;
2401bf84:	3af95ea0 b9befeff bb19972a bb4fe177     .^.:....*...w.O.
2401bf94:	bb295330 ba7f6db0 3a5b75cd 3b0441c3     0S)..m...u[:.A.;
2401bfa4:	3b096af6 3a95c0ce b9a6d731 bacf420a     .j.;...:1....B..
2401bfb4:	bb0998a4 bae09378 ba33a7ab 39f14ea8     ....x.....3..N.9
2401bfc4:	3a9d0a9f 3aa26bd3 3a26ac5f b99076c9     ...:.k.:_.&:.v..
2401bfd4:	ba8a594d bab36c76 ba937638 ba00f89c     MY..vl..8v......
2401bfe4:	3957cc7e 3a2a84cf 3a3018e5 39a16ee2     ~.W9..*:..0:.n.9
2401bff4:	b976fdb8 ba3657f3 ba65dc1d ba3f76fb     ..v..W6...e..v?.
2401c004:	b9bc63ae 383ff92f 399e1aee 39a493d2     .c../.?8...9...9
2401c014:	38e23c24 b94e6a44 b9ed29c3 ba105b84     $<.8DjN..)...[..
2401c024:	b9f554e8 b989e0e3 b82e1383 38cdf035     .T..........5..8
2401c034:	38dfe43d 3481383c b9250469 b996e536     =..8<8.4i.%.6...
2401c044:	b9b07a4e b999503c b944211f b89ab241     Nz..<P...!D.A...
2401c054:	b5f4edc1 36c491b7 b831eb28 b8f04abf     .......6(.1..J..
2401c064:	b9364a21 b94be12c b934aad9 b900045b     !J6.,.K...4.[...
2401c074:	b88ff4fe b80bfc6d b7dcf20b b8353635     ....m.......565.
2401c084:	b893894b b8c1173f b8cde484 b8b68ada     K...?...........
2401c094:	b8883541 b82dfbcd b7d1317d b79ecb73     A5....-.}1..s...
2401c0a4:	b7b64219 b7efbf3c b80cc44b b80ec5da     .B..<...K.......
2401c0b4:	b7ed6056 b7aaa2cd b72fedf5 b6a7f358     V`......../.X...

2401c0c4 <__leaf_table_fir4XLow>:
2401c0c4:	3a364090 bb0d9324 bba560cf bc143329     .@6:$....`..)3..
2401c0d4:	bc538b8e bc77a919 bc6a6237 bc230d1e     ..S...w.7bj...#.
2401c0e4:	bb3931b1 3ba3d1cc 3c3023d4 3c44cae5     .19....;.#0<..D<
2401c0f4:	3c008e54 ba032f44 bc201e77 bc8184bc     T..<D/..w. .....
2401c104:	bc79e9d3 bbecc8ca 3bbf3a91 3c990052     ..y......:.;R..<
2401c114:	3ccd8bf1 3ca8719f 3b98a2e0 bc927492     ...<.q.<...;.t..
2401c124:	bd1bae49 bd390efa bcff2783 3bd6bce9     I.....9..'.....;
2401c134:	3d80a944 3e00cf9b 3e3864cf 3e5887a9     D..=...>.d8>..X>
2401c144:	3e5887a9 3e3864cf 3e00cf9b 3d80a944     ..X>.d8>...>D..=
2401c154:	3bd6bce9 bcff2783 bd390efa bd1bae49     ...;.'....9.I...
2401c164:	bc927492 3b98a2e0 3ca8719f 3ccd8bf1     .t.....;.q.<...<
2401c174:	3c990052 3bbf3a91 bbecc8ca bc79e9d3     R..<.:.;......y.
2401c184:	bc8184bc bc201e77 ba032f44 3c008e54     ....w. .D/..T..<
2401c194:	3c44cae5 3c3023d4 3ba3d1cc bb3931b1     ..D<.#0<...;.19.
2401c1a4:	bc230d1e bc6a6237 bc77a919 bc538b8e     ..#.7bj...w...S.
2401c1b4:	bc143329 bba560cf bb0d9324 3a364090     )3...`..$....@6:

2401c1c4 <__leaf_table_fir64XHigh>:
2401c1c4:	37c035ea 36b40ce5 36c8e77c 36df33f6     .5.7...6|..6.3.6
2401c1d4:	36f6fd4d 37082b0d 3715a2f7 3723f0eb     M..6.+.7...7..#7
2401c1e4:	37331958 374323a1 3754181b 3765fad3     X.37.#C7..T7..e7
2401c1f4:	3778d427 37865585 3790c240 379bb3e5     '.x7.U.7@..7...7
2401c204:	37a72dba 37b332b4 37bfc58a 37cce962     .-.7.2.7...7b..7
2401c214:	37daa169 37e8efd2 37f7d758 3803ad78     i..7...7X..7x..8
2401c224:	380bbe60 38141f5b 381cd170 3825d5b4     `..8[..8p..8..%8
2401c234:	382f2cf6 3838d7c2 3842d6ae 384d2a36     .,/8..88..B86*M8
2401c244:	3857d2c3 3862d090 386e2394 3879cbc6     ..W8..b8.#n8..y8
2401c254:	3882e48a 38890da3 388f60f1 3895de2d     ...8...8.`.8-..8
2401c264:	389c8514 38a3554e 38aa4e5e 38b16fb1     ...8NU.8^N.8.o.8
2401c274:	38b8b8a6 38c0288d 38c7be9a 38cf79e3     ...8.(.8...8.y.8
2401c284:	38d75959 38df5bd4 38e78018 38efc4d6     YY.8.[.8...8...8
2401c294:	38f8289e 390054ef 3904a378 3908ff10     .(.8.T.9x..9...9
2401c2a4:	390d66d8 3911d9e6 39165740 391adddd     .f.9...9@W.9...9
2401c2b4:	391f6caa 39240289 39289e4a 392d3ea2     .l.9..$9J.(9.>-9
2401c2c4:	3931e237 393687a3 393b2d70 393fd210     7.19..69p-;9..?9
2401c2d4:	394473ef 39491174 394da90a 3952390d     .sD9t.I9..M9.9R9
2401c2e4:	3956bfd6 395b3bb2 395faaea 39640bbc     ..V9.;[9.._9..d9
2401c2f4:	39685c41 396c9a75 3970c441 3974d784     A\h9u.l9A.p9..t9
2401c304:	3978d20a 397cb19c 39803a10 39820bca     ..x9..|9.:.9...9
2401c314:	3983ccf8 39857c9b 398719ad 3988a30b     ...9.|.9...9...9
2401c324:	398a176f 398b757f 398cbbe5 398de954     o..9.u.9...9T..9
2401c334:	398efcbc 398ff55f 3990d26c 399192e7     ...9_..9l..9...9
2401c344:	39923536 3992b71a 399316cd 39935425     65.9...9...9%T.9
2401c354:	399370f5 39936c11 39933937 3992e777     .p.9.l.979.9w..9
2401c364:	39926ac3 3991c606 3990f779 398ffe03     .j.9...9y..9...9
2401c374:	398ed8c1 398d8690 398c068f 398a57cc     ...9...9...9.W.9
2401c384:	39887945 39866a35 398429b6 3981b6ed     Ey.95j.9.).9...9
2401c394:	397e2244 39786f2a 39725322 396bccdc     D"~9*ox9"Sr9..k9
2401c3a4:	3964db36 395d7d14 3955b161 394d774c     6.d9.}]9a.U9LwM9
2401c3b4:	3944ce19 393bb50d 39322b95 39283147     ..D9..;9.+29G1(9
2401c3c4:	391dc5de 3912e921 39079af6 38f7b6de     ...9!..9...9...8
2401c3d4:	38df557b 38c61279 38abeec6 3890eb94     {U.8y..8...8...8
2401c3e4:	386a14f6 38309ad5 37eada32 37624235     ..j8..082..75Bb7
2401c3f4:	b5bea9e6 b78c3c69 b807e35a b84b3d71     ....i<..Z...q=K.
2401c404:	b888124a b8ab4818 b8cf3b7b b8f3e774     J....H..{;..t...
2401c414:	b90ca359 b91fa9ce b9330420 b946af27     Y....... .3.'.F.
2401c424:	b95aa790 b96ee9e0 b981b93f b98c1ed7     ..Z...n.?.......
2401c434:	b996a3c3 b9a145fd b9ac0365 b9b6d9ce     .....E..e.......
2401c444:	b9c1c6f5 b9ccc87e b9d7dbfd b9e2fef3     ....~...........
2401c454:	b9ee2ed6 b9f9690a ba025571 ba07f8d4     .....i..qU......
2401c464:	ba0d9d4c ba134171 ba18e3cc ba1e82e1     L...qA..........
2401c474:	ba241d2a ba29b11f ba2f3d33 ba34bfd4     *.$...).3=/...4.
2401c484:	ba3a376e ba3fa26d ba44ff39 ba4a4c31     n7:.m.?.9.D.1LJ.
2401c494:	ba4f87ab ba54affe ba59c37d ba5ec077     ..O...T.}.Y.w.^.
2401c4a4:	ba63a547 ba68704d ba6d1fe4 ba71b265     G.c.Mph...m.e.q.
2401c4b4:	ba76261e ba7a795d ba7eaa6f ba815bda     .&v.]yz.o.~..[..
2401c4c4:	ba834fd3 ba85305e ba86fcad ba88b3ed     .O..^0..........
2401c4d4:	ba8a5544 ba8bdffb ba8d5370 ba8eaef4     DU......pS......
2401c4e4:	ba8ff1aa ba911ab3 ba9229ac ba931e2f     .........)../...
2401c4f4:	ba93f6b4 ba94b396 ba9553a2 ba95d682     .........S......
2401c504:	ba963ba1 ba968274 ba96aa8a ba96b362     .;..t.......b...
2401c514:	ba969c95 ba9665bd ba960e75 ba95966e     .....e..u...n...
2401c524:	ba94fd59 ba9442ef ba9366f6 ba92693d     Y....B...f..=i..
2401c534:	ba91499b ba9007f0 ba8ea429 ba8d1e3d     .I......)...=...
2401c544:	ba8b7629 ba89abf5 ba87bfba ba85b195     )v..............
2401c554:	ba8381b0 ba81303f ba7d7b05 ba78538e     ....?0...{}..Sx.
2401c564:	ba72eac4 ba6d416a ba675859 ba613086     ..r.jAm.YXg..0a.
2401c574:	ba5acafb ba5428d4 ba4d4b43 ba463396     ..Z..(T.CKM..3F.
2401c584:	ba3ee32f ba375b89 ba2f9e30 ba27acca     /.>..[7.0./...'.
2401c594:	ba1f8912 ba1734dd ba0eb215 ba0602b5     .....4..........
2401c5a4:	b9fa519e b9e84d0e b9d5fc2c b9c36398     .Q...M..,....c..
2401c5b4:	b9b0880f b99d6e79 b98a1be0 b96d2aee     ....yn.......*m.
2401c5c4:	b945c126 b91e0553 b8ec0532 b89b88a6     &.E.S...2.......
2401c5d4:	b8155869 364f10e4 382f9b1d 38a93a72     iX....O6../8r:.8
2401c5e4:	38faa655 3925fbff 394e8b00 3976f35b     U..8..%9..N9[.v9
2401c5f4:	398f940f 39a38e1b 39b76141 39cb06e3     ...9...9Aa.9...9
2401c604:	39de785b 39f1aef5 3a0251fe 3a0ba85c     [x.9...9.Q.:\..:
2401c614:	3a14d73d 3a1ddb4e 3a26b13b 3a2f55b3     =..:N..:;.&:.U/:
2401c624:	3a37c569 3a3ffd11 3a47f966 3a4fb731     i.7:..?:f.G:1.O:
2401c634:	3a57334a 3a5e6a91 3a6559ed 3a6bfe51     J3W:.j^:.Ye:Q.k:
2401c644:	3a7254b5 3a785a26 3a7e0bca 3a81b370     .Tr:&Zx:..~:p..:
2401c654:	3a84345a 3a868749 3a88aaef 3a8a9e0c     Z4.:I..:...:...:
2401c664:	3a8c5f74 3a8dee0e 3a8f48b6 3a906e4f     t_.:...:.H.:On.:
2401c674:	3a915dde 3a921688 3a92976c 3a92df8e     .].:...:l..:...:
2401c684:	3a92ee3e 3a92c2ff 3a925cc5 3a91bb60     >..:...:.\.:`..:
2401c694:	3a90de14 3a8fc48a 3a8e6e63 3a8cdb4b     ...:...:cn.:K..:
2401c6a4:	3a8b0b1a 3a88fd9c 3a86b2c9 3a842aa6     ...:...:...:.*.:
2401c6b4:	3a816542 3a7cc59c 3a764716 3a6f4f93     Be.:..|:.Gv:.Oo:
2401c6c4:	3a67dfe9 3a5ff919 3a579c4c 3a4ecaca     ..g:.._:L.W:..N:
2401c6d4:	3a458612 3a3bcfd3 3a31a9db 3a271623     ..E:..;:..1:#.':
2401c6e4:	3a1c16d5 3a10ae47 3a04def9 39f1571b     ...:G..:...:.W.9
2401c6f4:	39d82dad 39be47a0 39a3ab44 39885f35     .-.9.G.9D..95_.9
2401c704:	3958d4b1 391fa7d1 38ca8dec 3827077a     ..X9...9...8z.'8
2401c714:	b796b95b b8a0e6a0 b90f011b b94e6e89     [............nN.
2401c724:	b9875484 b9a7cec0 b9c89c2e b9e9b2c3     .T..............
2401c734:	ba05841a ba1648fc ba2722a6 ba380b9f     .....H..."'...8.
2401c744:	ba48fe55 ba59f51d ba6aea33 ba7bd7bf     U.H...Y.3.j...{.
2401c754:	ba865be8 ba8ec234 ba971bba ba9f6568     .[..4.......he..
2401c764:	baa79c28 baafbcdd bab7c463 babfaf94     (.......c.......
2401c774:	bac77b42 bacf2442 bad6a762 bade0171     B{..B$..b...q...
2401c784:	bae52f3f baec2d9b baf2f959 baf98f4d     ?/...-..Y...M...
2401c794:	baffec4f bb03069d bb05f778 bb08c72d     O.......x...-...
2401c7a4:	bb0b7435 bb0dfd0b bb106032 bb129c30     5t......2`..0...
2401c7b4:	bb14af90 bb1698e3 bb1856c1 bb19e7ca     .........V......
2401c7c4:	bb1b4aa8 bb1c7e07 bb1d809f bb1e512f     .J...~....../Q..
2401c7d4:	bb1eee7f bb1f5765 bb1f8abf bb1f8775     ....eW......u...
2401c7e4:	bb1f4c77 bb1ed8c2 bb1e2b62 bb1d436e     wL......b+..nC..
2401c7f4:	bb1c200a bb1ac063 bb1923b0 bb174943     . ..c....#..CI..
2401c804:	bb153074 bb12d8a8 bb10414c bb0d69eb     t0......LA...i..
2401c814:	bb0a521d bb06f976 bb035fa9 baff0915     .R..v...._......
2401c824:	baf6cf98 baee12d3 bae4d288 badb0ec4     ................
2401c834:	bad0c7b3 bac5fd88 babab0c2 baaee1d7     ................
2401c844:	baa29177 ba95c079 ba886fbc ba7540b1     w...y....o...@u.
2401c854:	ba58a70c ba3b1529 ba1c8df1 b9fa293c     ..X.).;.....<)..
2401c864:	b9b95958 b96d6728 b8c8ff58 381fcabf     XY..(gm.X......8
2401c874:	3937ddf1 39a59799 39f0e946 3a1eecc3     ..79...9F..9...:
2401c884:	3a462ead 3a6e34a9 3a8b7c64 3aa03a71     ..F:.4n:d|.:q:.:
2401c894:	3ab55148 3acabd97 3ae07bf4 3af688dc     HQ.:...:.{.:...:
2401c8a4:	3b067058 3b11bfdd 3b1d3112 3b28c204     Xp.;...;.1.;..(;
2401c8b4:	3b3470b4 3b403b18 3b4c1f1c 3b581aa2     .p4;.;@;..L;..X;
2401c8c4:	3b642b82 3b704f8a 3b7c8482 3b846414     .+d;.Op;..|;.d.;
2401c8d4:	3b8a8c1b 3b90b92e 3b96ea22 3b9d1dca     ...;...;"..;...;
2401c8e4:	3ba352f6 3ba98873 3bafbd0e 3bb5ef90     .R.;s..;...;...;
2401c8f4:	3bbc1ec2 3bc2496d 3bc86e56 3bce8c44     ...;mI.;Vn.;D..;
2401c904:	3bd4a1ff 3bdaae4c 3be0aff2 3be6a5ba     ...;L..;...;...;
2401c914:	3bec8e6c 3bf268d3 3bf833ba 3bfdedf1     l..;.h.;.3.;...;
2401c924:	3c01cb24 3c0495c8 3c075651 3c0a0c2b     $..<...<QV.<+..<
2401c934:	3c0cb6c5 3c0f5590 3c11e7fd 3c146d81     ...<.U.<...<.m.<
2401c944:	3c16e594 3c194faf 3c1bab4e 3c1df7f2     ...<.O.<N..<...<
2401c954:	3c20351b 3c22624f 3c247f16 3c268afa     .5 <Ob"<..$<..&<
2401c964:	3c28858d 3c2a6e60 3c2c4509 3c2e0921     ..(<`n*<.E,<!..<
2401c974:	3c2fba48 3c31581e 3c32e24a 3c345876     H./<.X1<J.2<vX4<
2401c984:	3c35ba50 3c37078a 3c383fdc 3c396301     P.5<..7<.?8<.c9<
2401c994:	3c3a70ba 3c3b68cb 3c3c4afe 3c3d1721     .p:<.h;<.J<<!.=<
2401c9a4:	3c3dcd07 3c3e6c88 3c3ef582 3c3f67d6     ..=<.l><..><.g?<
2401c9b4:	3c3fc369 3c40082b 3c403609 3c404cfb     i.?<+.@<.6@<.L@<
2401c9c4:	3c404cfb 3c403609 3c40082b 3c3fc369     .L@<.6@<+.@<i.?<
2401c9d4:	3c3f67d6 3c3ef582 3c3e6c88 3c3dcd07     .g?<..><.l><..=<
2401c9e4:	3c3d1721 3c3c4afe 3c3b68cb 3c3a70ba     !.=<.J<<.h;<.p:<
2401c9f4:	3c396301 3c383fdc 3c37078a 3c35ba50     .c9<.?8<..7<P.5<
2401ca04:	3c345876 3c32e24a 3c31581e 3c2fba48     vX4<J.2<.X1<H./<
2401ca14:	3c2e0921 3c2c4509 3c2a6e60 3c28858d     !..<.E,<`n*<..(<
2401ca24:	3c268afa 3c247f16 3c22624f 3c20351b     ..&<..$<Ob"<.5 <
2401ca34:	3c1df7f2 3c1bab4e 3c194faf 3c16e594     ...<N..<.O.<...<
2401ca44:	3c146d81 3c11e7fd 3c0f5590 3c0cb6c5     .m.<...<.U.<...<
2401ca54:	3c0a0c2b 3c075651 3c0495c8 3c01cb24     +..<QV.<...<$..<
2401ca64:	3bfdedf1 3bf833ba 3bf268d3 3bec8e6c     ...;.3.;.h.;l..;
2401ca74:	3be6a5ba 3be0aff2 3bdaae4c 3bd4a1ff     ...;...;L..;...;
2401ca84:	3bce8c44 3bc86e56 3bc2496d 3bbc1ec2     D..;Vn.;mI.;...;
2401ca94:	3bb5ef90 3bafbd0e 3ba98873 3ba352f6     ...;...;s..;.R.;
2401caa4:	3b9d1dca 3b96ea22 3b90b92e 3b8a8c1b     ...;"..;...;...;
2401cab4:	3b846414 3b7c8482 3b704f8a 3b642b82     .d.;..|;.Op;.+d;
2401cac4:	3b581aa2 3b4c1f1c 3b403b18 3b3470b4     ..X;..L;.;@;.p4;
2401cad4:	3b28c204 3b1d3112 3b11bfdd 3b067058     ..(;.1.;...;Xp.;
2401cae4:	3af688dc 3ae07bf4 3acabd97 3ab55148     ...:.{.:...:HQ.:
2401caf4:	3aa03a71 3a8b7c64 3a6e34a9 3a462ead     q:.:d|.:.4n:..F:
2401cb04:	3a1eecc3 39f0e946 39a59799 3937ddf1     ...:F..9...9..79
2401cb14:	381fcabf b8c8ff58 b96d6728 b9b95958     ...8X...(gm.XY..
2401cb24:	b9fa293c ba1c8df1 ba3b1529 ba58a70c     <)......).;...X.
2401cb34:	ba7540b1 ba886fbc ba95c079 baa29177     .@u..o..y...w...
2401cb44:	baaee1d7 babab0c2 bac5fd88 bad0c7b3     ................
2401cb54:	badb0ec4 bae4d288 baee12d3 baf6cf98     ................
2401cb64:	baff0915 bb035fa9 bb06f976 bb0a521d     ....._..v....R..
2401cb74:	bb0d69eb bb10414c bb12d8a8 bb153074     .i..LA......t0..
2401cb84:	bb174943 bb1923b0 bb1ac063 bb1c200a     CI...#..c.... ..
2401cb94:	bb1d436e bb1e2b62 bb1ed8c2 bb1f4c77     nC..b+......wL..
2401cba4:	bb1f8775 bb1f8abf bb1f5765 bb1eee7f     u.......eW......
2401cbb4:	bb1e512f bb1d809f bb1c7e07 bb1b4aa8     /Q.......~...J..
2401cbc4:	bb19e7ca bb1856c1 bb1698e3 bb14af90     .....V..........
2401cbd4:	bb129c30 bb106032 bb0dfd0b bb0b7435     0...2`......5t..
2401cbe4:	bb08c72d bb05f778 bb03069d baffec4f     -...x.......O...
2401cbf4:	baf98f4d baf2f959 baec2d9b bae52f3f     M...Y....-..?/..
2401cc04:	bade0171 bad6a762 bacf2442 bac77b42     q...b...B$..B{..
2401cc14:	babfaf94 bab7c463 baafbcdd baa79c28     ....c.......(...
2401cc24:	ba9f6568 ba971bba ba8ec234 ba865be8     he......4....[..
2401cc34:	ba7bd7bf ba6aea33 ba59f51d ba48fe55     ..{.3.j...Y.U.H.
2401cc44:	ba380b9f ba2722a6 ba1648fc ba05841a     ..8.."'..H......
2401cc54:	b9e9b2c3 b9c89c2e b9a7cec0 b9875484     .............T..
2401cc64:	b94e6e89 b90f011b b8a0e6a0 b796b95b     .nN.........[...
2401cc74:	3827077a 38ca8dec 391fa7d1 3958d4b1     z.'8...8...9..X9
2401cc84:	39885f35 39a3ab44 39be47a0 39d82dad     5_.9D..9.G.9.-.9
2401cc94:	39f1571b 3a04def9 3a10ae47 3a1c16d5     .W.9...:G..:...:
2401cca4:	3a271623 3a31a9db 3a3bcfd3 3a458612     #.':..1:..;:..E:
2401ccb4:	3a4ecaca 3a579c4c 3a5ff919 3a67dfe9     ..N:L.W:.._:..g:
2401ccc4:	3a6f4f93 3a764716 3a7cc59c 3a816542     .Oo:.Gv:..|:Be.:
2401ccd4:	3a842aa6 3a86b2c9 3a88fd9c 3a8b0b1a     .*.:...:...:...:
2401cce4:	3a8cdb4b 3a8e6e63 3a8fc48a 3a90de14     K..:cn.:...:...:
2401ccf4:	3a91bb60 3a925cc5 3a92c2ff 3a92ee3e     `..:.\.:...:>..:
2401cd04:	3a92df8e 3a92976c 3a921688 3a915dde     ...:l..:...:.].:
2401cd14:	3a906e4f 3a8f48b6 3a8dee0e 3a8c5f74     On.:.H.:...:t_.:
2401cd24:	3a8a9e0c 3a88aaef 3a868749 3a84345a     ...:...:I..:Z4.:
2401cd34:	3a81b370 3a7e0bca 3a785a26 3a7254b5     p..:..~:&Zx:.Tr:
2401cd44:	3a6bfe51 3a6559ed 3a5e6a91 3a57334a     Q.k:.Ye:.j^:J3W:
2401cd54:	3a4fb731 3a47f966 3a3ffd11 3a37c569     1.O:f.G:..?:i.7:
2401cd64:	3a2f55b3 3a26b13b 3a1ddb4e 3a14d73d     .U/:;.&:N..:=..:
2401cd74:	3a0ba85c 3a0251fe 39f1aef5 39de785b     \..:.Q.:...9[x.9
2401cd84:	39cb06e3 39b76141 39a38e1b 398f940f     ...9Aa.9...9...9
2401cd94:	3976f35b 394e8b00 3925fbff 38faa655     [.v9..N9..%9U..8
2401cda4:	38a93a72 382f9b1d 364f10e4 b8155869     r:.8../8..O6iX..
2401cdb4:	b89b88a6 b8ec0532 b91e0553 b945c126     ....2...S...&.E.
2401cdc4:	b96d2aee b98a1be0 b99d6e79 b9b0880f     .*m.....yn......
2401cdd4:	b9c36398 b9d5fc2c b9e84d0e b9fa519e     .c..,....M...Q..
2401cde4:	ba0602b5 ba0eb215 ba1734dd ba1f8912     .........4......
2401cdf4:	ba27acca ba2f9e30 ba375b89 ba3ee32f     ..'.0./..[7./.>.
2401ce04:	ba463396 ba4d4b43 ba5428d4 ba5acafb     .3F.CKM..(T...Z.
2401ce14:	ba613086 ba675859 ba6d416a ba72eac4     .0a.YXg.jAm...r.
2401ce24:	ba78538e ba7d7b05 ba81303f ba8381b0     .Sx..{}.?0......
2401ce34:	ba85b195 ba87bfba ba89abf5 ba8b7629     ............)v..
2401ce44:	ba8d1e3d ba8ea429 ba9007f0 ba91499b     =...)........I..
2401ce54:	ba92693d ba9366f6 ba9442ef ba94fd59     =i...f...B..Y...
2401ce64:	ba95966e ba960e75 ba9665bd ba969c95     n...u....e......
2401ce74:	ba96b362 ba96aa8a ba968274 ba963ba1     b.......t....;..
2401ce84:	ba95d682 ba9553a2 ba94b396 ba93f6b4     .....S..........
2401ce94:	ba931e2f ba9229ac ba911ab3 ba8ff1aa     /....)..........
2401cea4:	ba8eaef4 ba8d5370 ba8bdffb ba8a5544     ....pS......DU..
2401ceb4:	ba88b3ed ba86fcad ba85305e ba834fd3     ........^0...O..
2401cec4:	ba815bda ba7eaa6f ba7a795d ba76261e     .[..o.~.]yz..&v.
2401ced4:	ba71b265 ba6d1fe4 ba68704d ba63a547     e.q...m.Mph.G.c.
2401cee4:	ba5ec077 ba59c37d ba54affe ba4f87ab     w.^.}.Y...T...O.
2401cef4:	ba4a4c31 ba44ff39 ba3fa26d ba3a376e     1LJ.9.D.m.?.n7:.
2401cf04:	ba34bfd4 ba2f3d33 ba29b11f ba241d2a     ..4.3=/...).*.$.
2401cf14:	ba1e82e1 ba18e3cc ba134171 ba0d9d4c     ........qA..L...
2401cf24:	ba07f8d4 ba025571 b9f9690a b9ee2ed6     ....qU...i......
2401cf34:	b9e2fef3 b9d7dbfd b9ccc87e b9c1c6f5     ........~.......
2401cf44:	b9b6d9ce b9ac0365 b9a145fd b996a3c3     ....e....E......
2401cf54:	b98c1ed7 b981b93f b96ee9e0 b95aa790     ....?.....n...Z.
2401cf64:	b946af27 b9330420 b91fa9ce b90ca359     '.F. .3.....Y...
2401cf74:	b8f3e774 b8cf3b7b b8ab4818 b888124a     t...{;...H..J...
2401cf84:	b84b3d71 b807e35a b78c3c69 b5bea9e6     q=K.Z...i<......
2401cf94:	37624235 37eada32 38309ad5 386a14f6     5Bb72..7..08..j8
2401cfa4:	3890eb94 38abeec6 38c61279 38df557b     ...8...8y..8{U.8
2401cfb4:	38f7b6de 39079af6 3912e921 391dc5de     ...8...9!..9...9
2401cfc4:	39283147 39322b95 393bb50d 3944ce19     G1(9.+29..;9..D9
2401cfd4:	394d774c 3955b161 395d7d14 3964db36     LwM9a.U9.}]96.d9
2401cfe4:	396bccdc 39725322 39786f2a 397e2244     ..k9"Sr9*ox9D"~9
2401cff4:	3981b6ed 398429b6 39866a35 39887945     ...9.).95j.9Ey.9
2401d004:	398a57cc 398c068f 398d8690 398ed8c1     .W.9...9...9...9
2401d014:	398ffe03 3990f779 3991c606 39926ac3     ...9y..9...9.j.9
2401d024:	3992e777 39933937 39936c11 399370f5     w..979.9.l.9.p.9
2401d034:	39935425 399316cd 3992b71a 39923536     %T.9...9...965.9
2401d044:	399192e7 3990d26c 398ff55f 398efcbc     ...9l..9_..9...9
2401d054:	398de954 398cbbe5 398b757f 398a176f     T..9...9.u.9o..9
2401d064:	3988a30b 398719ad 39857c9b 3983ccf8     ...9...9.|.9...9
2401d074:	39820bca 39803a10 397cb19c 3978d20a     ...9.:.9..|9..x9
2401d084:	3974d784 3970c441 396c9a75 39685c41     ..t9A.p9u.l9A\h9
2401d094:	39640bbc 395faaea 395b3bb2 3956bfd6     ..d9.._9.;[9..V9
2401d0a4:	3952390d 394da90a 39491174 394473ef     .9R9..M9t.I9.sD9
2401d0b4:	393fd210 393b2d70 393687a3 3931e237     ..?9p-;9..697.19
2401d0c4:	392d3ea2 39289e4a 39240289 391f6caa     .>-9J.(9..$9.l.9
2401d0d4:	391adddd 39165740 3911d9e6 390d66d8     ...9@W.9...9.f.9
2401d0e4:	3908ff10 3904a378 390054ef 38f8289e     ...9x..9.T.9.(.8
2401d0f4:	38efc4d6 38e78018 38df5bd4 38d75959     ...8...8.[.8YY.8
2401d104:	38cf79e3 38c7be9a 38c0288d 38b8b8a6     .y.8...8.(.8...8
2401d114:	38b16fb1 38aa4e5e 38a3554e 389c8514     .o.8^N.8NU.8...8
2401d124:	3895de2d 388f60f1 38890da3 3882e48a     -..8.`.8...8...8
2401d134:	3879cbc6 386e2394 3862d090 3857d2c3     ..y8.#n8..b8..W8
2401d144:	384d2a36 3842d6ae 3838d7c2 382f2cf6     6*M8..B8..88.,/8
2401d154:	3825d5b4 381cd170 38141f5b 380bbe60     ..%8p..8[..8`..8
2401d164:	3803ad78 37f7d758 37e8efd2 37daa169     x..8X..7...7i..7
2401d174:	37cce962 37bfc58a 37b332b4 37a72dba     b..7...7.2.7.-.7
2401d184:	379bb3e5 3790c240 37865585 3778d427     ...7@..7.U.7'.x7
2401d194:	3765fad3 3754181b 374323a1 37331958     ..e7..T7.#C7X.37
2401d1a4:	3723f0eb 3715a2f7 37082b0d 36f6fd4d     ..#7...7.+.7M..6
2401d1b4:	36df33f6 36c8e77c 36b40ce5 37c035ea     .3.6|..6...6.5.7

2401d1c4 <__leaf_table_fir64XLow>:
2401d1c4:	bbf82708 397c7d50 397e6c70 39821da2     .'..P}|9pl~9...9
2401d1d4:	3986c984 398d8650 3995ccce 399fe675     ...9P..9...9u..9
2401d1e4:	39abcbc5 39b9757a 39c8b92b 39d9ac19     ...9zu.9+..9...9
2401d1f4:	39ec4a34 3a0048b9 3a0b3c31 3a170525     4J.9.H.:1<.:%..:
2401d204:	3a23a076 3a310957 3a3f3cb9 3a4e3d10     v.#:W.1:.<?:.=N:
2401d214:	3a5e0aa7 3a6ea2f3 3a800486 3a89201e     ..^:..n:...:. .:
2401d224:	3a92a4b3 3a9c8db9 3aa6dcb0 3ab190da     ...:...:...:...:
2401d234:	3abcaa5e 3ac8227c 3ad40480 3ae04f82     ^..:|".:...:.O.:
2401d244:	3aed0218 3afa0204 3b03bdbb 3b0aa866     ...:...:...;f..;
2401d254:	3b11d12d 3b185204 3b20de8e 3b287a73     -..;.R.;.. ;sz(;
2401d264:	3b3034bf 3b381c0e 3b403ba5 3b488642     .40;..8;.;@;B.H;
2401d274:	3b5102f0 3b59af6c 3b628976 3b6b8b43     ..Q;l.Y;v.b;C.k;
2401d284:	3b74b663 3b7e0948 3b83c13b 3b888fd1     c.t;H.~;;..;...;
2401d294:	3b8d7074 3b926230 3b9763de 3b9c74a9     tp.;0b.;.c.;.t.;
2401d2a4:	3ba19460 3ba6c287 3babfe16 3bb146bd     `..;...;...;.F.;
2401d2b4:	3bb69c05 3bbbfd1d 3bc167c8 3bc6dbb8     ...;...;.g.;...;
2401d2c4:	3bcc57fe 3bd1dc09 3bd7653c 3bdcf668     .W.;...;<e.;h..;
2401d2d4:	3be28e26 3be82ad8 3bedc269 3bf364ce     &..;.*.;i..;.d.;
2401d2e4:	3bf904ba 3bfea800 3c0217a8 3c04f8e6     ...;...;...<...<
2401d2f4:	3c07c2f8 3c0a89e5 3c0d4f27 3c101408     ...<...<'O.<...<
2401d304:	3c12d514 3c15931a 3c184d03 3c1b01df     ...<...<.M.<...<
2401d314:	3c1db021 3c2057f0 3c22f8b9 3c2591ed     !..<.W <.."<..%<
2401d324:	3c2822d7 3c2aab4e 3c2d2aba 3c2fa068     ."(<N.*<.*-<h./<
2401d334:	3c320bd9 3c346cd3 3c36c2f9 3c390d92     ..2<.l4<..6<..9<
2401d344:	3c3b4c4e 3c3d7ebe 3c3fa451 3c41bbc0     NL;<.~=<Q.?<..A<
2401d354:	3c43c500 3c45bfb2 3c47abb9 3c4987c1     ..C<..E<..G<..I<
2401d364:	3c4b55a6 3c4d1478 3c4ec32a 3c505abc     .UK<x.M<*.N<.ZP<
2401d374:	3c51e854 3c53614b 3c54c99c 3c5619ee     T.Q<KaS<..T<..V<
2401d384:	3c576516 3c5892d6 3c59ad78 3c5ab5e6     .eW<..X<x.Y<..Z<
2401d394:	3c5bacef 3c5c8fb8 3c5d5f13 3c5e1a55     ..[<..\<._]<U.^<
2401d3a4:	3c5ec111 3c5f5276 3c5fcf2f 3c60373b     ..^<vR_</._<;7`<
2401d3b4:	3c608a88 3c60c8e6 3c60f2a0 3c61079b     ..`<..`<..`<..a<
2401d3c4:	3c61079b 3c60f2a0 3c60c8e6 3c608a88     ..a<..`<..`<..`<
2401d3d4:	3c60373b 3c5fcf2f 3c5f5276 3c5ec111     ;7`</._<vR_<..^<
2401d3e4:	3c5e1a55 3c5d5f13 3c5c8fb8 3c5bacef     U.^<._]<..\<..[<
2401d3f4:	3c5ab5e6 3c59ad78 3c5892d6 3c576516     ..Z<x.Y<..X<.eW<
2401d404:	3c5619ee 3c54c99c 3c53614b 3c51e854     ..V<..T<KaS<T.Q<
2401d414:	3c505abc 3c4ec32a 3c4d1478 3c4b55a6     .ZP<*.N<x.M<.UK<
2401d424:	3c4987c1 3c47abb9 3c45bfb2 3c43c500     ..I<..G<..E<..C<
2401d434:	3c41bbc0 3c3fa451 3c3d7ebe 3c3b4c4e     ..A<Q.?<.~=<NL;<
2401d444:	3c390d92 3c36c2f9 3c346cd3 3c320bd9     ..9<..6<.l4<..2<
2401d454:	3c2fa068 3c2d2aba 3c2aab4e 3c2822d7     h./<.*-<N.*<."(<
2401d464:	3c2591ed 3c22f8b9 3c2057f0 3c1db021     ..%<.."<.W <!..<
2401d474:	3c1b01df 3c184d03 3c15931a 3c12d514     ...<.M.<...<...<
2401d484:	3c101408 3c0d4f27 3c0a89e5 3c07c2f8     ...<'O.<...<...<
2401d494:	3c04f8e6 3c0217a8 3bfea800 3bf904ba     ...<...<...;...;
2401d4a4:	3bf364ce 3bedc269 3be82ad8 3be28e26     .d.;i..;.*.;&..;
2401d4b4:	3bdcf668 3bd7653c 3bd1dc09 3bcc57fe     h..;<e.;...;.W.;
2401d4c4:	3bc6dbb8 3bc167c8 3bbbfd1d 3bb69c05     ...;.g.;...;...;
2401d4d4:	3bb146bd 3babfe16 3ba6c287 3ba19460     .F.;...;...;`..;
2401d4e4:	3b9c74a9 3b9763de 3b926230 3b8d7074     .t.;.c.;0b.;tp.;
2401d4f4:	3b888fd1 3b83c13b 3b7e0948 3b74b663     ...;;..;H.~;c.t;
2401d504:	3b6b8b43 3b628976 3b59af6c 3b5102f0     C.k;v.b;l.Y;..Q;
2401d514:	3b488642 3b403ba5 3b381c0e 3b3034bf     B.H;.;@;..8;.40;
2401d524:	3b287a73 3b20de8e 3b185204 3b11d12d     sz(;.. ;.R.;-..;
2401d534:	3b0aa866 3b03bdbb 3afa0204 3aed0218     f..;...;...:...:
2401d544:	3ae04f82 3ad40480 3ac8227c 3abcaa5e     .O.:...:|".:^..:
2401d554:	3ab190da 3aa6dcb0 3a9c8db9 3a92a4b3     ...:...:...:...:
2401d564:	3a89201e 3a800486 3a6ea2f3 3a5e0aa7     . .:...:..n:..^:
2401d574:	3a4e3d10 3a3f3cb9 3a310957 3a23a076     .=N:.<?:W.1:v.#:
2401d584:	3a170525 3a0b3c31 3a0048b9 39ec4a34     %..:1<.:.H.:4J.9
2401d594:	39d9ac19 39c8b92b 39b9757a 39abcbc5     ...9+..9zu.9...9
2401d5a4:	399fe675 3995ccce 398d8650 3986c984     u..9...9P..9...9
2401d5b4:	39821da2 397e6c70 397c7d50 bbf82708     ...9pl~9P}|9.'..

2401d5c4 <__leaf_table_fir8XHigh>:
2401d5c4:	38043205 38cf1c59 38faaa28 39502274     .2.8Y..8(..8t"P9
2401d5d4:	398d5f9c 39bbe8f8 39e9f72f 3a0b70f1     ._.9...9/..9.p.:
2401d5e4:	3a1e7233 3a2bff54 3a31c175 3a2df84d     3r.:T.+:u.1:M.-:
2401d5f4:	3a1f75c7 3a05fc36 39c4b74f 395a2706     .u.:6..:O..9.'Z9
2401d604:	37b26be8 b932489c b9b6b90c ba021894     .k.7.H2.........
2401d614:	ba1c6a77 ba26d408 ba1f31f5 ba051ded     wj....&..1......
2401d624:	b9b44f6d b90772e3 38f3710c 39c017cf     mO...r...q.8...9
2401d634:	3a1b996e 3a49c705 3a6432ac 3a6639d5     n..:..I:.2d:.9f:
2401d644:	3a4da99f 3a1b3a55 39a56eee b7a5bb05     ..M:U:.:.n.9....
2401d654:	b9c6d29f ba3d72ee ba8432b8 ba9d2087     .....r=..2... ..
2401d664:	baa596a0 ba9b4b0c ba7bf990 ba1f4b27     .....K....{.'K..
2401d674:	b9235e83 39b6c31f 3a5ecfa2 3aa8edc0     .^#....9..^:...:
2401d684:	3ad2d6d2 3ae70241 3ae16cd5 3ac0d776     ...:A..:.l.:v..:
2401d694:	3a871f93 39e513b7 b983d9b1 ba7b8759     ...:...9....Y.{.
2401d6a4:	bad2514b bb09fe4d bb1cd0fa bb1e6411     KQ..M........d..
2401d6b4:	bb0d4f5c bad4907d ba60d76d 38805058     \O..}...m.`.XP.8
2401d6c4:	3a87d9c6 3b003110 3b3162d6 3b50e287     ...:.1.;.b1;..P;
2401d6d4:	3b59b787 3b4942b3 3b1fbb94 3ac0b15b     ..Y;.BI;...;[..:
2401d6e4:	398929bb ba8b0d76 bb19dbdd bb61a3c7     .).9v.........a.
2401d6f4:	bb89b991 bb93ea15 bb8d276c bb6a23d6     ........l'...#j.
2401d704:	bb1aa680 ba4c7f6c 3a8391ff 3b371438     ....l.L....:8.7;
2401d714:	3b8f65dc 3bb5cb9d 3bc92e21 3bc5dbfd     .e.;...;!..;...;
2401d724:	3baa9053 3b718e01 3ad308d9 ba560b09     S..;..q;...:..V.
2401d734:	bb5a4feb bbb8d634 bbf43d0a bc0b7caa     .OZ.4....=...|..
2401d744:	bc0d72e3 bbfcfe4b bbbdfa3a bb450835     .r..K...:...5.E.
2401d754:	39cfdbde 3b850f86 3bf82e53 3c2c16c8     ...9...;S..;..,<
2401d764:	3c4be14d 3c560d28 3c47244e 3c1e35e4     M.K<(.V<N$G<.5.<
2401d774:	3bba5f46 3a0f0c69 bbaddea1 bc38a554     F_.;i..:....T.8.
2401d784:	bc887cde bcaa214b bcbbbcb3 bcb8aa28     .|..K!......(...
2401d794:	bc9da361 bc524e75 bb5de0b7 3c0ff417     a...uNR...]....<
2401d7a4:	3cbd53d3 3d1ef81c 3d61142c 3d90690b     .S.<...=,.a=.i.=
2401d7b4:	3dad00dd 3dc462cf 3dd4f248 3ddd8745     ...=.b.=H..=E..=
2401d7c4:	3ddd8745 3dd4f248 3dc462cf 3dad00dd     E..=H..=.b.=...=
2401d7d4:	3d90690b 3d61142c 3d1ef81c 3cbd53d3     .i.=,.a=...=.S.<
2401d7e4:	3c0ff417 bb5de0b7 bc524e75 bc9da361     ...<..].uNR.a...
2401d7f4:	bcb8aa28 bcbbbcb3 bcaa214b bc887cde     (.......K!...|..
2401d804:	bc38a554 bbaddea1 3a0f0c69 3bba5f46     T.8.....i..:F_.;
2401d814:	3c1e35e4 3c47244e 3c560d28 3c4be14d     .5.<N$G<(.V<M.K<
2401d824:	3c2c16c8 3bf82e53 3b850f86 39cfdbde     ..,<S..;...;...9
2401d834:	bb450835 bbbdfa3a bbfcfe4b bc0d72e3     5.E.:...K....r..
2401d844:	bc0b7caa bbf43d0a bbb8d634 bb5a4feb     .|...=..4....OZ.
2401d854:	ba560b09 3ad308d9 3b718e01 3baa9053     ..V....:..q;S..;
2401d864:	3bc5dbfd 3bc92e21 3bb5cb9d 3b8f65dc     ...;!..;...;.e.;
2401d874:	3b371438 3a8391ff ba4c7f6c bb1aa680     8.7;...:l.L.....
2401d884:	bb6a23d6 bb8d276c bb93ea15 bb89b991     .#j.l'..........
2401d894:	bb61a3c7 bb19dbdd ba8b0d76 398929bb     ..a.....v....).9
2401d8a4:	3ac0b15b 3b1fbb94 3b4942b3 3b59b787     [..:...;.BI;..Y;
2401d8b4:	3b50e287 3b3162d6 3b003110 3a87d9c6     ..P;.b1;.1.;...:
2401d8c4:	38805058 ba60d76d bad4907d bb0d4f5c     XP.8m.`.}...\O..
2401d8d4:	bb1e6411 bb1cd0fa bb09fe4d bad2514b     .d......M...KQ..
2401d8e4:	ba7b8759 b983d9b1 39e513b7 3a871f93     Y.{........9...:
2401d8f4:	3ac0d776 3ae16cd5 3ae70241 3ad2d6d2     v..:.l.:A..:...:
2401d904:	3aa8edc0 3a5ecfa2 39b6c31f b9235e83     ...:..^:...9.^#.
2401d914:	ba1f4b27 ba7bf990 ba9b4b0c baa596a0     'K....{..K......
2401d924:	ba9d2087 ba8432b8 ba3d72ee b9c6d29f     . ...2...r=.....
2401d934:	b7a5bb05 39a56eee 3a1b3a55 3a4da99f     .....n.9U:.:..M:
2401d944:	3a6639d5 3a6432ac 3a49c705 3a1b996e     .9f:.2d:..I:n..:
2401d954:	39c017cf 38f3710c b90772e3 b9b44f6d     ...9.q.8.r..mO..
2401d964:	ba051ded ba1f31f5 ba26d408 ba1c6a77     .....1....&.wj..
2401d974:	ba021894 b9b6b90c b932489c 37b26be8     .........H2..k.7
2401d984:	395a2706 39c4b74f 3a05fc36 3a1f75c7     .'Z9O..96..:.u.:
2401d994:	3a2df84d 3a31c175 3a2bff54 3a1e7233     M.-:u.1:T.+:3r.:
2401d9a4:	3a0b70f1 39e9f72f 39bbe8f8 398d5f9c     .p.:/..9...9._.9
2401d9b4:	39502274 38faaa28 38cf1c59 38043205     t"P9(..8Y..8.2.8

2401d9c4 <__leaf_table_fir8XLow>:
2401d9c4:	3a3113b2 3991b987 392d5280 b909bab8     ..1:...9.R-9....
2401d9d4:	ba3015e8 bac60f1a bb30678a bb8ab640     ..0......g0.@...
2401d9e4:	bbc8a16f bc082551 bc2f506a bc5784fa     o...Q%..jP/...W.
2401d9f4:	bc7dbc3f bc8f3286 bc9aba48 bc9f63cf     ?.}..2..H....c..
2401da04:	bc9b2dc4 bc8c56d2 bc6310bb bc13feff     .-...V....c.....
2401da14:	bb2d6747 3baacfd0 3c6b27bb 3cc898a3     Gg-....;.'k<...<
2401da24:	3d10599f 3d3d22c8 3d68ac6c 3d8875f5     .Y.=."==l.h=.u.=
2401da34:	3d99f4c7 3da7f0c9 3db1b147 3db6b35e     ...=...=G..=^..=
2401da44:	3db6b35e 3db1b147 3da7f0c9 3d99f4c7     ^..=G..=...=...=
2401da54:	3d8875f5 3d68ac6c 3d3d22c8 3d10599f     .u.=l.h=."==.Y.=
2401da64:	3cc898a3 3c6b27bb 3baacfd0 bb2d6747     ...<.'k<...;Gg-.
2401da74:	bc13feff bc6310bb bc8c56d2 bc9b2dc4     ......c..V...-..
2401da84:	bc9f63cf bc9aba48 bc8f3286 bc7dbc3f     .c..H....2..?.}.
2401da94:	bc5784fa bc2f506a bc082551 bbc8a16f     ..W.jP/.Q%..o...
2401daa4:	bb8ab640 bb30678a bac60f1a ba3015e8     @....g0.......0.
2401dab4:	b909bab8 392d5280 3991b987 3a3113b2     .....R-9...9..1:

2401dac4 <__leaf_table_sinewave>:
2401dac4:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
2401dad4:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
2401dae4:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
2401daf4:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
2401db04:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
2401db14:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
2401db24:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
2401db34:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
2401db44:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
2401db54:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
2401db64:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
2401db74:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
2401db84:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
2401db94:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
2401dba4:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
2401dbb4:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
2401dbc4:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
2401dbd4:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
2401dbe4:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
2401dbf4:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
2401dc04:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
2401dc14:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
2401dc24:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
2401dc34:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
2401dc44:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
2401dc54:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
2401dc64:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
2401dc74:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
2401dc84:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
2401dc94:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
2401dca4:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
2401dcb4:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
2401dcc4:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
2401dcd4:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
2401dce4:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
2401dcf4:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
2401dd04:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
2401dd14:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
2401dd24:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
2401dd34:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
2401dd44:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
2401dd54:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
2401dd64:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
2401dd74:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
2401dd84:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
2401dd94:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
2401dda4:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
2401ddb4:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
2401ddc4:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
2401ddd4:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
2401dde4:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
2401ddf4:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
2401de04:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
2401de14:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
2401de24:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
2401de34:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
2401de44:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
2401de54:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
2401de64:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
2401de74:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
2401de84:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
2401de94:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
2401dea4:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
2401deb4:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
2401dec4:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
2401ded4:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
2401dee4:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
2401def4:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
2401df04:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
2401df14:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
2401df24:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
2401df34:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
2401df44:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
2401df54:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
2401df64:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
2401df74:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
2401df84:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2401df94:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2401dfa4:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2401dfb4:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2401dfc4:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2401dfd4:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
2401dfe4:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
2401dff4:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
2401e004:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
2401e014:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
2401e024:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
2401e034:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
2401e044:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
2401e054:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
2401e064:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
2401e074:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
2401e084:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2401e094:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2401e0a4:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2401e0b4:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2401e0c4:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2401e0d4:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
2401e0e4:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
2401e0f4:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
2401e104:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
2401e114:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
2401e124:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
2401e134:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
2401e144:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
2401e154:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
2401e164:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
2401e174:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
2401e184:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2401e194:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2401e1a4:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2401e1b4:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2401e1c4:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2401e1d4:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
2401e1e4:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
2401e1f4:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
2401e204:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
2401e214:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
2401e224:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
2401e234:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
2401e244:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
2401e254:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
2401e264:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
2401e274:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
2401e284:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2401e294:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2401e2a4:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2401e2b4:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2401e2c4:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2401e2d4:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
2401e2e4:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
2401e2f4:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
2401e304:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
2401e314:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
2401e324:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
2401e334:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
2401e344:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
2401e354:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
2401e364:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
2401e374:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
2401e384:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
2401e394:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
2401e3a4:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
2401e3b4:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
2401e3c4:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
2401e3d4:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
2401e3e4:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
2401e3f4:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
2401e404:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
2401e414:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
2401e424:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
2401e434:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
2401e444:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
2401e454:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
2401e464:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
2401e474:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
2401e484:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
2401e494:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
2401e4a4:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
2401e4b4:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
2401e4c4:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
2401e4d4:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
2401e4e4:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
2401e4f4:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
2401e504:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
2401e514:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
2401e524:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
2401e534:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
2401e544:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
2401e554:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
2401e564:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
2401e574:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
2401e584:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
2401e594:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
2401e5a4:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
2401e5b4:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
2401e5c4:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
2401e5d4:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
2401e5e4:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
2401e5f4:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
2401e604:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
2401e614:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
2401e624:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
2401e634:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
2401e644:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
2401e654:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
2401e664:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
2401e674:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
2401e684:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
2401e694:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
2401e6a4:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
2401e6b4:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
2401e6c4:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
2401e6d4:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
2401e6e4:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
2401e6f4:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
2401e704:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
2401e714:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
2401e724:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
2401e734:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
2401e744:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
2401e754:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
2401e764:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
2401e774:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
2401e784:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
2401e794:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
2401e7a4:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
2401e7b4:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
2401e7c4:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
2401e7d4:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
2401e7e4:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
2401e7f4:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
2401e804:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
2401e814:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
2401e824:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
2401e834:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
2401e844:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
2401e854:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
2401e864:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
2401e874:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
2401e884:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
2401e894:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
2401e8a4:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
2401e8b4:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
2401e8c4:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
2401e8d4:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
2401e8e4:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
2401e8f4:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
2401e904:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
2401e914:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
2401e924:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
2401e934:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
2401e944:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
2401e954:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
2401e964:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
2401e974:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
2401e984:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
2401e994:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
2401e9a4:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
2401e9b4:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
2401e9c4:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
2401e9d4:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
2401e9e4:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
2401e9f4:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
2401ea04:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
2401ea14:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
2401ea24:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
2401ea34:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
2401ea44:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
2401ea54:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
2401ea64:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
2401ea74:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
2401ea84:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
2401ea94:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
2401eaa4:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
2401eab4:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
2401eac4:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
2401ead4:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
2401eae4:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
2401eaf4:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
2401eb04:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
2401eb14:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
2401eb24:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
2401eb34:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
2401eb44:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
2401eb54:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
2401eb64:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
2401eb74:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
2401eb84:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
2401eb94:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
2401eba4:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
2401ebb4:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
2401ebc4:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
2401ebd4:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
2401ebe4:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
2401ebf4:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
2401ec04:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
2401ec14:	be827fa2 be84039b be858794 be870b8d     ................
2401ec24:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
2401ec34:	be8e9b7c be901b86 be919f80 be931f8a     |...............
2401ec44:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
2401ec54:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
2401ec64:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
2401ec74:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
2401ec84:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
2401ec94:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
2401eca4:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
2401ecb4:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
2401ecc4:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
2401ecd4:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
2401ece4:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
2401ecf4:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
2401ed04:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
2401ed14:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
2401ed24:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
2401ed34:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
2401ed44:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
2401ed54:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
2401ed64:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
2401ed74:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
2401ed84:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
2401ed94:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
2401eda4:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
2401edb4:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
2401edc4:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
2401edd4:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
2401ede4:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
2401edf4:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
2401ee04:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
2401ee14:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
2401ee24:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
2401ee34:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
2401ee44:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
2401ee54:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
2401ee64:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
2401ee74:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
2401ee84:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
2401ee94:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
2401eea4:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
2401eeb4:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
2401eec4:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
2401eed4:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
2401eee4:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
2401eef4:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
2401ef04:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
2401ef14:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
2401ef24:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
2401ef34:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
2401ef44:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
2401ef54:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
2401ef64:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
2401ef74:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
2401ef84:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2401ef94:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2401efa4:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2401efb4:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2401efc4:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2401efd4:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
2401efe4:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
2401eff4:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
2401f004:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
2401f014:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
2401f024:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
2401f034:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
2401f044:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
2401f054:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
2401f064:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
2401f074:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
2401f084:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2401f094:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2401f0a4:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2401f0b4:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2401f0c4:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2401f0d4:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
2401f0e4:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
2401f0f4:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
2401f104:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
2401f114:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
2401f124:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
2401f134:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
2401f144:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
2401f154:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
2401f164:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
2401f174:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
2401f184:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2401f194:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2401f1a4:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2401f1b4:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2401f1c4:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2401f1d4:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
2401f1e4:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
2401f1f4:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
2401f204:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
2401f214:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
2401f224:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
2401f234:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
2401f244:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
2401f254:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
2401f264:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
2401f274:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
2401f284:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2401f294:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2401f2a4:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2401f2b4:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2401f2c4:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2401f2d4:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
2401f2e4:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
2401f2f4:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
2401f304:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
2401f314:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
2401f324:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
2401f334:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
2401f344:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
2401f354:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
2401f364:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
2401f374:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
2401f384:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
2401f394:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
2401f3a4:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
2401f3b4:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
2401f3c4:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
2401f3d4:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
2401f3e4:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
2401f3f4:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
2401f404:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
2401f414:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
2401f424:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
2401f434:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
2401f444:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
2401f454:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
2401f464:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
2401f474:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
2401f484:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
2401f494:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
2401f4a4:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
2401f4b4:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
2401f4c4:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
2401f4d4:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
2401f4e4:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
2401f4f4:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
2401f504:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
2401f514:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
2401f524:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
2401f534:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2401f544:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2401f554:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2401f564:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2401f574:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2401f584:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2401f594:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2401f5a4:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2401f5b4:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2401f5c4:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2401f5d4:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
2401f5e4:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
2401f5f4:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
2401f604:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
2401f614:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
2401f624:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
2401f634:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2401f644:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2401f654:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2401f664:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2401f674:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2401f684:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2401f694:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2401f6a4:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2401f6b4:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2401f6c4:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2401f6d4:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
2401f6e4:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
2401f6f4:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
2401f704:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
2401f714:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
2401f724:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
2401f734:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2401f744:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2401f754:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2401f764:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2401f774:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2401f784:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2401f794:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2401f7a4:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2401f7b4:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2401f7c4:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2401f7d4:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2401f7e4:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2401f7f4:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2401f804:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2401f814:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2401f824:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2401f834:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2401f844:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2401f854:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2401f864:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2401f874:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2401f884:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2401f894:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2401f8a4:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2401f8b4:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2401f8c4:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2401f8d4:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2401f8e4:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2401f8f4:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2401f904:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2401f914:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2401f924:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2401f934:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2401f944:	be949f95 be931f8a be919f80 be901b86     ................
2401f954:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2401f964:	be888f86 be870b8d be858794 be84039b     ................
2401f974:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2401f984:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2401f994:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2401f9a4:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2401f9b4:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2401f9c4:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2401f9d4:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2401f9e4:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2401f9f4:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2401fa04:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2401fa14:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2401fa24:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2401fa34:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2401fa44:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2401fa54:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2401fa64:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2401fa74:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2401fa84:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2401fa94:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2401faa4:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2401fab4:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2401fac4 <__leaf_tablesize_firNumTaps>:
2401fac4:	42000000 42800000 42800000 43000000     ...B...B...B...C
2401fad4:	43800000 43800000 43000000 43800000     ...C...C...C...C
2401fae4:	43800000 44000000 44000000 44800000     ...C...D...D...D
	...

2401fb44 <slope_dd_table>:
	...
2401fbe0:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
2401fbf0:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
2401fc00:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
2401fc10:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
2401fc20:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
2401fc30:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
2401fc40:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
2401fc50:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
2401fc60:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
2401fc70:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
2401fc80:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
2401fc90:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
2401fca0:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
2401fcb0:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
2401fcc0:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
2401fcd0:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
2401fce0:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
2401fcf0:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
2401fd00:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
2401fd10:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
2401fd20:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
2401fd30:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
2401fd40:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
2401fd50:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
2401fd60:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
2401fd70:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
2401fd80:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
2401fd90:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
2401fda0:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
2401fdb0:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
2401fdc0:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
2401fdd0:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
2401fde0:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
2401fdf0:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
2401fe00:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
2401fe10:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
2401fe20:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
2401fe30:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
2401fe40:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
2401fe50:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
2401fe60:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
2401fe70:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
2401fe80:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
2401fe90:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
2401fea0:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
2401feb0:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
2401fec0:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
2401fed0:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
2401fee0:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
2401fef0:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
2401ff00:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
2401ff10:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
2401ff20:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
2401ff30:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
2401ff40:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
2401ff50:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
2401ff60:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
2401ff70:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
2401ff80:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
2401ff90:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
2401ffa0:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
2401ffb0:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
2401ffc0:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
2401ffd0:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
2401ffe0:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
2401fff0:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
24020000:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
24020010:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
24020020:	be0eae12 be10148d be1152be be1268fb     .........R...h..
24020030:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
24020040:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
24020050:	be15718f be15109e be148cff be13e73e     .q..........>...
24020060:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
24020070:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
24020080:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
24020090:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
240200a0:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
240200b0:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
240200c0:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
240200d0:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
240200e0:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
240200f0:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
24020100:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
24020110:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
24020120:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
24020130:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
24020140:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
24020150:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
24020160:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
24020170:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
24020180:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
24020190:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
240201a0:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
240201b0:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
240201c0:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
240201d0:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
240201e0:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
240201f0:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
24020200:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
24020210:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
24020220:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
24020230:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
24020240:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
24020250:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
24020260:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
24020270:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
24020280:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
24020290:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
240202a0:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
240202b0:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
240202c0:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
240202d0:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
240202e0:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
240202f0:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
24020300:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
24020310:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
24020320:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
24020330:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
24020340:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
24020350:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
24020360:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
24020370:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
24020380:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
24020390:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
240203a0:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
240203b0:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
240203c0:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
240203d0:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
240203e0:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
240203f0:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
24020400:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
24020410:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
24020420:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
24020430:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
24020440:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
24020450:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
24020460:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
24020470:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
24020480:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
24020490:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
240204a0:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
240204b0:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
240204c0:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
240204d0:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
240204e0:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
240204f0:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
24020500:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
24020510:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
24020520:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
24020530:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
24020540:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
24020550:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
24020560:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
24020570:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
24020580:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
24020590:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
240205a0:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
240205b0:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
240205c0:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
240205d0:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
240205e0:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
240205f0:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
24020600:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
24020610:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
24020620:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
24020630:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
24020640:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
24020650:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
24020660:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
24020670:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
24020680:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
24020690:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
240206a0:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
240206b0:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
240206c0:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
240206d0:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
240206e0:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
240206f0:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
24020700:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
24020710:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
24020720:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
24020730:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
24020740:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
24020750:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
24020760:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
24020770:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
24020780:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
24020790:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
240207a0:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
240207b0:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
240207c0:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
240207d0:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
240207e0:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
240207f0:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
24020800:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
24020810:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
24020820:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
24020830:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
24020840:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
24020850:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
24020860:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
24020870:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
24020880:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
24020890:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
240208a0:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
240208b0:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
240208c0:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
240208d0:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
240208e0:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
240208f0:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
24020900:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
24020910:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
24020920:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
24020930:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
24020940:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
24020950:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
24020960:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
24020970:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
24020980:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
24020990:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
240209a0:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
240209b0:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
240209c0:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
240209d0:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
240209e0:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
240209f0:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
24020a00:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
24020a10:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
24020a20:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
24020a30:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
24020a40:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
24020a50:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
24020a60:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
24020a70:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
24020a80:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
24020a90:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
24020aa0:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
24020ab0:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
24020ac0:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
24020ad0:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
24020ae0:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
24020af0:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
24020b00:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
24020b10:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
24020b20:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
24020b30:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
24020b40:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
24020b50:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
24020b60:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
24020b70:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
24020b80:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
24020b90:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
24020ba0:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
24020bb0:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
24020bc0:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
24020bd0:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
24020be0:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
24020bf0:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
24020c00:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
24020c10:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
24020c20:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
24020c30:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
24020c40:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
24020c50:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
24020c60:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
24020c70:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
24020c80:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
24020c90:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
24020ca0:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
24020cb0:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
24020cc0:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
24020cd0:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
24020ce0:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
24020cf0:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
24020d00:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
24020d10:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
24020d20:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
24020d30:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
24020d40:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
24020d50:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
24020d60:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
24020d70:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
24020d80:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
24020d90:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
24020da0:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
24020db0:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
24020dc0:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
24020dd0:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
24020de0:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
24020df0:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
24020e00:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
24020e10:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
24020e20:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
24020e30:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
24020e40:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
24020e50:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
24020e60:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
24020e70:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
24020e80:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
24020e90:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
24020ea0:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
24020eb0:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
24020ec0:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
24020ed0:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
24020ee0:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
24020ef0:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
24020f00:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
24020f10:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
24020f20:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
24020f30:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
24020f40:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
24020f50:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
24020f60:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
24020f70:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
24020f80:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
24020f90:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
24020fa0:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
24020fb0:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
24020fc0:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
24020fd0:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
24020fe0:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
24020ff0:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
24021000:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
24021010:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
24021020:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
24021030:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
24021040:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
24021050:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
24021060:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
24021070:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
24021080:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
24021090:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
240210a0:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
240210b0:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
240210c0:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
240210d0:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
240210e0:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
240210f0:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
24021100:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
24021110:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
24021120:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
24021130:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
24021140:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
24021150:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
24021160:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
24021170:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
24021180:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
24021190:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
240211a0:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
240211b0:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
240211c0:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
240211d0:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
240211e0:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
240211f0:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
24021200:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
24021210:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
24021220:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
24021230:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
24021240:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
24021250:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
24021260:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
24021270:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
24021280:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
24021290:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
240212a0:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
240212b0:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
240212c0:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
240212d0:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
240212e0:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
240212f0:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
24021300:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
24021310:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
24021320:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
24021330:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
24021340:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
24021350:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
24021360:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
24021370:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
24021380:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
24021390:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
240213a0:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
240213b0:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
240213c0:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
240213d0:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
240213e0:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
240213f0:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
24021400:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
24021410:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
24021420:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
24021430:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
24021440:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
24021450:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
24021460:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
24021470:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
24021480:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
24021490:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
240214a0:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
240214b0:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
240214c0:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
240214d0:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
240214e0:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
240214f0:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
24021500:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
24021510:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
24021520:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
24021530:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
24021540:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
24021550:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
24021560:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
24021570:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
24021580:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
24021590:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
240215a0:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
240215b0:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
240215c0:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
240215d0:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
240215e0:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
240215f0:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
24021600:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
24021610:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
24021620:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
24021630:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
24021640:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
24021650:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
24021660:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
24021670:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
24021680:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
24021690:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
240216a0:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
240216b0:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
240216c0:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
240216d0:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
240216e0:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
240216f0:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
24021700:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
24021710:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
24021720:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
24021730:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
24021740:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
24021750:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
24021760:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
24021770:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
24021780:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
24021790:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
240217a0:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
240217b0:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
240217c0:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
240217d0:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
240217e0:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
240217f0:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
24021800:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
24021810:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
24021820:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
24021830:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
24021840:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
24021850:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
24021860:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
24021870:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
24021880:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
24021890:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
240218a0:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
240218b0:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
240218c0:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
240218d0:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
240218e0:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
240218f0:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
24021900:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
24021910:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
24021920:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
24021930:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
24021940:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
24021950:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
24021960:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
24021970:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
24021980:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
24021990:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
240219a0:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
240219b0:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
240219c0:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
240219d0:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
240219e0:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
240219f0:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
24021a00:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
24021a10:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
24021a20:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
24021a30:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
24021a40:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
24021a50:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
24021a60:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
24021a70:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
24021a80:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
24021a90:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
24021aa0:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
24021ab0:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
24021ac0:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
24021ad0:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
24021ae0:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
24021af0:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
24021b00:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
24021b10:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
24021b20:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
24021b30:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
24021b40:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
24021b50:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
24021b60:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
24021b70:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
24021b80:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
24021b90:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
24021ba0:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
24021bb0:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
24021bc0:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
24021bd0:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
24021be0:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
24021bf0:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
24021c00:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
24021c10:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
24021c20:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
24021c30:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
24021c40:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
24021c50:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
24021c60:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
24021c70:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
24021c80:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
24021c90:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
24021ca0:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
24021cb0:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
24021cc0:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
24021cd0:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
24021ce0:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
24021cf0:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
24021d00:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
24021d10:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
24021d20:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
24021d30:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
24021d40:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
24021d50:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
24021d60:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
24021d70:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
24021d80:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
24021d90:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
24021da0:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
24021db0:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
24021dc0:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
24021dd0:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
24021de0:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
24021df0:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
24021e00:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
24021e10:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
24021e20:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
24021e30:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
24021e40:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
24021e50:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
24021e60:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
24021e70:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
24021e80:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
24021e90:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
24021ea0:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
24021eb0:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
24021ec0:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
24021ed0:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
24021ee0:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
24021ef0:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
24021f00:	babf16bd babb96cd bab7bd01 bab38bab     ................
24021f10:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
24021f20:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
24021f30:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
24021f40:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
24021f50:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
24021f60:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
24021f70:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
24021f80:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
24021f90:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
24021fa0:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
24021fb0:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
24021fc0:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
24021fd0:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
24021fe0:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
24021ff0:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
24022000:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
24022010:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
24022020:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
24022030:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
24022040:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
24022050:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
24022060:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
24022070:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
24022080:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
24022090:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
240220a0:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
240220b0:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
240220c0:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
240220d0:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
240220e0:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
240220f0:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
24022100:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
24022110:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
24022120:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
24022130:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
24022140:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
24022150:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
24022160:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
24022170:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
24022180:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
24022190:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
240221a0:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
240221b0:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
240221c0:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
240221d0:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
240221e0:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
240221f0:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
24022200:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
24022210:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
24022220:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
24022230:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
24022240:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
24022250:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
24022260:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
24022270:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
24022280:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
24022290:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
240222a0:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
240222b0:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
240222c0:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
240222d0:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
240222e0:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
240222f0:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
24022300:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
24022310:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
24022320:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
24022330:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
24022340:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
24022350:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
24022360:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
24022370:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
24022380:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
24022390:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
240223a0:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
240223b0:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
240223c0:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
240223d0:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
240223e0:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
240223f0:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
24022400:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
24022410:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
24022420:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
24022430:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
24022440:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
24022450:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
24022460:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
24022470:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
24022480:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
24022490:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
240224a0:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
240224b0:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
240224c0:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
240224d0:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
240224e0:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
240224f0:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
24022500:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
24022510:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
24022520:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
24022530:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
24022540:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
24022550:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
24022560:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
24022570:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
24022580:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
24022590:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
240225a0:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
240225b0:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
240225c0:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
240225d0:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
240225e0:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
240225f0:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
24022600:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
24022610:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
24022620:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
24022630:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
24022640:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
24022650:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
24022660:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
24022670:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
24022680:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
24022690:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
240226a0:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
240226b0:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
240226c0:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
240226d0:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
240226e0:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
240226f0:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
24022700:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
24022710:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
24022720:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
24022730:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
24022740:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
24022750:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
24022760:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
24022770:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
24022780:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
24022790:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
240227a0:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
240227b0:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
240227c0:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
240227d0:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
240227e0:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
240227f0:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
24022800:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
24022810:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
24022820:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
24022830:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
24022840:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
24022850:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
24022860:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
24022870:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
24022880:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
24022890:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
240228a0:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
240228b0:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
240228c0:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
240228d0:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
240228e0:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
240228f0:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
24022900:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
24022910:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
24022920:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
24022930:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
24022940:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
24022950:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
24022960:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
24022970:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
24022980:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
24022990:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
240229a0:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
240229b0:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
240229c0:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
240229d0:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
240229e0:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
240229f0:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
24022a00:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
24022a10:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
24022a20:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
24022a30:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
24022a40:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
24022a50:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
24022a60:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
24022a70:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
24022a80:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
24022a90:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
24022aa0:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
24022ab0:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
24022ac0:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
24022ad0:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
24022ae0:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
24022af0:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
24022b00:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
24022b10:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
24022b20:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
24022b30:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
24022b40:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
24022b50:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
24022b60:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
24022b70:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
24022b80:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
24022b90:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
24022ba0:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
24022bb0:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
24022bc0:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
24022bd0:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
24022be0:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
24022bf0:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24022c00:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24022c10:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24022c20:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
24022c30:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
24022c40:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
24022c50:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
24022c60:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
24022c70:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
24022c80:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
24022c90:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
24022ca0:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
24022cb0:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
24022cc0:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
24022cd0:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
24022ce0:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
24022cf0:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24022d00:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24022d10:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24022d20:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
24022d30:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
24022d40:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
24022d50:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
24022d60:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
24022d70:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
24022d80:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
24022d90:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
24022da0:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
24022db0:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
24022dc0:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
24022dd0:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
24022de0:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
24022df0:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24022e00:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24022e10:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24022e20:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
24022e30:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
24022e40:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
24022e50:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
24022e60:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
24022e70:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
24022e80:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
24022e90:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
24022ea0:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
24022eb0:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
24022ec0:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
24022ed0:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
24022ee0:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
24022ef0:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24022f00:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24022f10:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24022f20:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
24022f30:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
24022f40:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
24022f50:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
24022f60:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
24022f70:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
24022f80:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
24022f90:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
24022fa0:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
24022fb0:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
24022fc0:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
24022fd0:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
24022fe0:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
24022ff0:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
24023000:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
24023010:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
24023020:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
24023030:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
24023040:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
24023050:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
24023060:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
24023070:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
24023080:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
24023090:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
240230a0:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
240230b0:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
240230c0:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
240230d0:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
240230e0:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
240230f0:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
24023100:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24023110:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24023120:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
24023130:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
24023140:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
24023150:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
24023160:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
24023170:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
24023180:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
24023190:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
240231a0:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
240231b0:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
240231c0:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
240231d0:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
240231e0:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
240231f0:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
24023200:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
24023210:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
24023220:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
24023230:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
24023240:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
24023250:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
24023260:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
24023270:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
24023280:	b808d82b b80a8abf b80befed b80d078a     +...............
24023290:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
240232a0:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
240232b0:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
240232c0:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
240232d0:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
240232e0:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
240232f0:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
24023300:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
24023310:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
24023320:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
24023330:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
24023340:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
24023350:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
24023360:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
24023370:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
24023380:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
24023390:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
240233a0:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
240233b0:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
240233c0:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
240233d0:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
240233e0:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
240233f0:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
24023400:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
24023410:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
24023420:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
24023430:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
24023440:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
24023450:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
24023460:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
24023470:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
24023480:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
24023490:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
240234a0:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
240234b0:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
240234c0:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
240234d0:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
240234e0:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
240234f0:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
24023500:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
24023510:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
24023520:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
24023530:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
24023540:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
24023550:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
24023560:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
24023570:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
24023580:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
24023590:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
240235a0:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
240235b0:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
240235c0:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
240235d0:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
240235e0:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
240235f0:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
24023600:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
24023610:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
24023620:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
24023630:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
24023640:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
24023650:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
24023660:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
24023670:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
24023680:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
24023690:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
240236a0:	b7087574 b70df990 b713221d b717ed03     tu......."......
240236b0:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
240236c0:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
240236d0:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
240236e0:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
240236f0:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
24023700:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
24023710:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
24023720:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
24023730:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
24023740:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
24023750:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
24023760:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
24023770:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
24023780:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
24023790:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
240237a0:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
240237b0:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
240237c0:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
240237d0:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
240237e0:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
240237f0:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
24023800:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
24023810:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
24023820:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
24023830:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
24023840:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
24023850:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
24023860:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
24023870:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
24023880:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
24023890:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
240238a0:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
240238b0:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
240238c0:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
240238d0:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
240238e0:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
240238f0:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
24023900:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
24023910:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
24023920:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
24023930:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
24023940:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
24023950:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
24023960:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
24023970:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
24023980:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
24023990:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
240239a0:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
240239b0:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
240239c0:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
240239d0:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
240239e0:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
240239f0:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
24023a00:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
24023a10:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
24023a20:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
24023a30:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
24023a40:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
24023a50:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
24023a60:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
24023a70:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
24023a80:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
24023a90:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
24023aa0:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
24023ab0:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
24023ac0:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
24023ad0:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
24023ae0:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
24023af0:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
24023b00:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
24023b10:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
24023b20:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
24023b30:	b610f5d3 b60be886 b60694c9 b600fec9     ................
24023b40:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
24023b50:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
24023b60:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
24023b70:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
24023b80:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
24023b90:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
24023ba0:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
24023bb0:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
24023bc0:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
24023bd0:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
24023be0:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
24023bf0:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
24023c00:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
24023c10:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
24023c20:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
24023c30:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
24023c40:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
24023c50:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
24023c60:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
24023c70:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
24023c80:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
24023c90:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
24023ca0:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
24023cb0:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
24023cc0:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
24023cd0:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
24023ce0:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
24023cf0:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
24023d00:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
24023d10:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
24023d20:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
24023d30:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
24023d40:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
24023d50:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
24023d60:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
24023d70:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
24023d80:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
24023d90:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
24023da0:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
24023db0:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
24023dc0:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
24023dd0:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
24023de0:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
24023df0:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
24023e00:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
24023e10:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
24023e20:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
24023e30:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
24023e40:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
24023e50:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
24023e60:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
24023e70:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
24023e80:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
24023e90:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
24023ea0:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
24023eb0:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
24023ec0:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
24023ed0:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
24023ee0:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
24023ef0:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
24023f00:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
24023f10:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
24023f20:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
24023f30:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
24023f40:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
24023f50:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
24023f60:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
24023f70:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
24023f80:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
24023f90:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
24023fa0:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
24023fb0:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
24023fc0:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
24023fd0:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
24023fe0:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
24023ff0:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
24024000:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
24024010:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
24024020:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
24024030:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
24024040:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
24024050:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
24024060:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
24024070:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
24024080:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
24024090:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
240240a0:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
240240b0:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
240240c0:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
240240d0:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
240240e0:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
240240f0:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
24024100:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24024110:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24024120:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
24024130:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
24024140:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
24024150:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
24024160:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
24024170:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
24024180:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
24024190:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
240241a0:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
240241b0:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
240241c0:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

24024248 <step_dd_table>:
	...
2402437c:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
2402438c:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
2402439c:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
240243ac:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
240243bc:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
240243cc:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
240243dc:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
240243ec:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
240243fc:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
2402440c:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
2402441c:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
2402442c:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
2402443c:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
2402444c:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
2402445c:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
2402446c:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
2402447c:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
2402448c:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
2402449c:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
240244ac:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
240244bc:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
240244cc:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
240244dc:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
240244ec:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
240244fc:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
2402450c:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
2402451c:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
2402452c:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
2402453c:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
2402454c:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
2402455c:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
2402456c:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
2402457c:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
2402458c:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
2402459c:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
240245ac:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
240245bc:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
240245cc:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
240245dc:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
240245ec:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
240245fc:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
2402460c:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
2402461c:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
2402462c:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
2402463c:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
2402464c:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
2402465c:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
2402466c:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
2402467c:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
2402468c:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
2402469c:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
240246ac:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
240246bc:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
240246cc:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
240246dc:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
240246ec:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
240246fc:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
2402470c:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
2402471c:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
2402472c:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
2402473c:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
2402474c:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
2402475c:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
2402476c:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
2402477c:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
2402478c:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
2402479c:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
240247ac:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
240247bc:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
240247cc:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
240247dc:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
240247ec:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
240247fc:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
2402480c:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
2402481c:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
2402482c:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
2402483c:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
2402484c:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
2402485c:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
2402486c:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
2402487c:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
2402488c:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
2402489c:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
240248ac:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
240248bc:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
240248cc:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
240248dc:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
240248ec:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
240248fc:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
2402490c:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
2402491c:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
2402492c:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
2402493c:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
2402494c:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
2402495c:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
2402496c:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
2402497c:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
2402498c:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
2402499c:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
240249ac:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
240249bc:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
240249cc:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
240249dc:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
240249ec:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
240249fc:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
24024a0c:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
24024a1c:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
24024a2c:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
24024a3c:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
24024a4c:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
24024a5c:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
24024a6c:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
24024a7c:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
24024a8c:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
24024a9c:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
24024aac:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
24024abc:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
24024acc:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
24024adc:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
24024aec:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
24024afc:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
24024b0c:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
24024b1c:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
24024b2c:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
24024b3c:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
24024b4c:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
24024b5c:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
24024b6c:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
24024b7c:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
24024b8c:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
24024b9c:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
24024bac:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
24024bbc:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
24024bcc:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
24024bdc:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
24024bec:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
24024bfc:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24024c0c:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24024c1c:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
24024c2c:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
24024c3c:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
24024c4c:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
24024c5c:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
24024c6c:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
24024c7c:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
24024c8c:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
24024c9c:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
24024cac:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
24024cbc:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
24024ccc:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
24024cdc:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
24024cec:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
24024cfc:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24024d0c:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24024d1c:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
24024d2c:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
24024d3c:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
24024d4c:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
24024d5c:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
24024d6c:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
24024d7c:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
24024d8c:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
24024d9c:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
24024dac:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
24024dbc:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
24024dcc:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
24024ddc:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
24024dec:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
24024dfc:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24024e0c:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24024e1c:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
24024e2c:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
24024e3c:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
24024e4c:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
24024e5c:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
24024e6c:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
24024e7c:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
24024e8c:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
24024e9c:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
24024eac:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
24024ebc:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
24024ecc:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
24024edc:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
24024eec:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
24024efc:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24024f0c:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24024f1c:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
24024f2c:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
24024f3c:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
24024f4c:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
24024f5c:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
24024f6c:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
24024f7c:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
24024f8c:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24024f9c:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
24024fac:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
24024fbc:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
24024fcc:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
24024fdc:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
24024fec:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
24024ffc:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
2402500c:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
2402501c:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
2402502c:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
2402503c:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
2402504c:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
2402505c:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
2402506c:	bae718f6 be02f380 bad0894d be049492     ........M.......
2402507c:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
2402508c:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
2402509c:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
240250ac:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
240250bc:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
240250cc:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
240250dc:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
240250ec:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
240250fc:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
2402510c:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
2402511c:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
2402512c:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
2402513c:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
2402514c:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
2402515c:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
2402516c:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
2402517c:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
2402518c:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
2402519c:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
240251ac:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
240251bc:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
240251cc:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
240251dc:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
240251ec:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
240251fc:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
2402520c:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
2402521c:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
2402522c:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
2402523c:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
2402524c:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
2402525c:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
2402526c:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
2402527c:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
2402528c:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
2402529c:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
240252ac:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
240252bc:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
240252cc:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
240252dc:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
240252ec:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
240252fc:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
2402530c:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
2402531c:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
2402532c:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
2402533c:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
2402534c:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
2402535c:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
2402536c:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
2402537c:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
2402538c:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
2402539c:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
240253ac:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
240253bc:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
240253cc:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
240253dc:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
240253ec:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
240253fc:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
2402540c:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
2402541c:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
2402542c:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
2402543c:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
2402544c:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
2402545c:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
2402546c:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
2402547c:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
2402548c:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
2402549c:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
240254ac:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
240254bc:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
240254cc:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
240254dc:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
240254ec:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
240254fc:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
2402550c:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
2402551c:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
2402552c:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
2402553c:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
2402554c:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
2402555c:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
2402556c:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
2402557c:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
2402558c:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
2402559c:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
240255ac:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
240255bc:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
240255cc:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
240255dc:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
240255ec:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
240255fc:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
2402560c:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
2402561c:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
2402562c:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
2402563c:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
2402564c:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
2402565c:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
2402566c:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
2402567c:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
2402568c:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
2402569c:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
240256ac:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
240256bc:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
240256cc:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
240256dc:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
240256ec:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
240256fc:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
2402570c:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
2402571c:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
2402572c:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
2402573c:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
2402574c:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
2402575c:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
2402576c:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
2402577c:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
2402578c:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
2402579c:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
240257ac:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
240257bc:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
240257cc:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
240257dc:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
240257ec:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
240257fc:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
2402580c:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
2402581c:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
2402582c:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
2402583c:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
2402584c:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
2402585c:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
2402586c:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
2402587c:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
2402588c:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
2402589c:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
240258ac:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
240258bc:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
240258cc:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
240258dc:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
240258ec:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
240258fc:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
2402590c:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
2402591c:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
2402592c:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
2402593c:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
2402594c:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
2402595c:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
2402596c:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
2402597c:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
2402598c:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
2402599c:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
240259ac:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
240259bc:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
240259cc:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
240259dc:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
240259ec:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
240259fc:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
24025a0c:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
24025a1c:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
24025a2c:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
24025a3c:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
24025a4c:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
24025a5c:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
24025a6c:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
24025a7c:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
24025a8c:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
24025a9c:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
24025aac:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
24025abc:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
24025acc:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
24025adc:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
24025aec:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
24025afc:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
24025b0c:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
24025b1c:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
24025b2c:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
24025b3c:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
24025b4c:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
24025b5c:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
24025b6c:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
24025b7c:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
24025b8c:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
24025b9c:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
24025bac:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
24025bbc:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
24025bcc:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
24025bdc:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
24025bec:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
24025bfc:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
24025c0c:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
24025c1c:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
24025c2c:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
24025c3c:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
24025c4c:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
24025c5c:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
24025c6c:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
24025c7c:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
24025c8c:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
24025c9c:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
24025cac:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
24025cbc:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
24025ccc:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
24025cdc:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
24025cec:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
24025cfc:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
24025d0c:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
24025d1c:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
24025d2c:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
24025d3c:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
24025d4c:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
24025d5c:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
24025d6c:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
24025d7c:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
24025d8c:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
24025d9c:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
24025dac:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
24025dbc:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
24025dcc:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
24025ddc:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
24025dec:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
24025dfc:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
24025e0c:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
24025e1c:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
24025e2c:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
24025e3c:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
24025e4c:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
24025e5c:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
24025e6c:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
24025e7c:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
24025e8c:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
24025e9c:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
24025eac:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
24025ebc:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
24025ecc:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
24025edc:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
24025eec:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
24025efc:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
24025f0c:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
24025f1c:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
24025f2c:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
24025f3c:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
24025f4c:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
24025f5c:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
24025f6c:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
24025f7c:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
24025f8c:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
24025f9c:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
24025fac:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
24025fbc:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
24025fcc:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
24025fdc:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
24025fec:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
24025ffc:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
2402600c:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
2402601c:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
2402602c:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
2402603c:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
2402604c:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
2402605c:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
2402606c:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
2402607c:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
2402608c:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
2402609c:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
240260ac:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
240260bc:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
240260cc:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
240260dc:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
240260ec:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
240260fc:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
2402610c:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
2402611c:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
2402612c:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
2402613c:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
2402614c:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
2402615c:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
2402616c:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
2402617c:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
2402618c:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
2402619c:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
240261ac:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
240261bc:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
240261cc:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
240261dc:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
240261ec:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
240261fc:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
2402620c:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
2402621c:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
2402622c:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
2402623c:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
2402624c:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
2402625c:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
2402626c:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
2402627c:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
2402628c:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
2402629c:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
240262ac:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
240262bc:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
240262cc:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
240262dc:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
240262ec:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
240262fc:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
2402630c:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
2402631c:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
2402632c:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
2402633c:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
2402634c:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
2402635c:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
2402636c:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
2402637c:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
2402638c:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
2402639c:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
240263ac:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
240263bc:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
240263cc:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
240263dc:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
240263ec:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
240263fc:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
2402640c:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
2402641c:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
2402642c:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
2402643c:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
2402644c:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
2402645c:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
2402646c:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
2402647c:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
2402648c:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
2402649c:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
240264ac:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
240264bc:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
240264cc:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
240264dc:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
240264ec:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
240264fc:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
2402650c:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
2402651c:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
2402652c:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
2402653c:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
2402654c:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
2402655c:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
2402656c:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
2402657c:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
2402658c:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
2402659c:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
240265ac:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
240265bc:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
240265cc:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
240265dc:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
240265ec:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
240265fc:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
2402660c:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
2402661c:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
2402662c:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
2402663c:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
2402664c:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
2402665c:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
2402666c:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
2402667c:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
2402668c:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
2402669c:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
240266ac:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
240266bc:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
240266cc:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
240266dc:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
240266ec:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
240266fc:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
2402670c:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
2402671c:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
2402672c:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
2402673c:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
2402674c:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
2402675c:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
2402676c:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
2402677c:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
2402678c:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
2402679c:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
240267ac:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
240267bc:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
240267cc:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
240267dc:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
240267ec:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
240267fc:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
2402680c:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
2402681c:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
2402682c:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
2402683c:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
2402684c:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
2402685c:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
2402686c:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
2402687c:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
2402688c:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
2402689c:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
240268ac:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
240268bc:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
240268cc:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
240268dc:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
240268ec:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
240268fc:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
2402690c:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
2402691c:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
2402692c:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
2402693c:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
2402694c:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
2402695c:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
2402696c:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
2402697c:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
2402698c:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
2402699c:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
240269ac:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
240269bc:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
240269cc:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
240269dc:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
240269ec:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
240269fc:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
24026a0c:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
24026a1c:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
24026a2c:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
24026a3c:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
24026a4c:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
24026a5c:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
24026a6c:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
24026a7c:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
24026a8c:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
24026a9c:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
24026aac:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
24026abc:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
24026acc:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
24026adc:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
24026aec:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
24026afc:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
24026b0c:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
24026b1c:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
24026b2c:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
24026b3c:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
24026b4c:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
24026b5c:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
24026b6c:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
24026b7c:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
24026b8c:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
24026b9c:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
24026bac:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
24026bbc:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
24026bcc:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
24026bdc:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
24026bec:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
24026bfc:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
24026c0c:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
24026c1c:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
24026c2c:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
24026c3c:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
24026c4c:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
24026c5c:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
24026c6c:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
24026c7c:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
24026c8c:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
24026c9c:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
24026cac:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
24026cbc:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
24026ccc:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
24026cdc:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
24026cec:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
24026cfc:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
24026d0c:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
24026d1c:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
24026d2c:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
24026d3c:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
24026d4c:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
24026d5c:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
24026d6c:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
24026d7c:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
24026d8c:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
24026d9c:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
24026dac:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
24026dbc:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
24026dcc:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
24026ddc:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
24026dec:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
24026dfc:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
24026e0c:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
24026e1c:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
24026e2c:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
24026e3c:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
24026e4c:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
24026e5c:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
24026e6c:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
24026e7c:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
24026e8c:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
24026e9c:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
24026eac:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
24026ebc:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
24026ecc:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
24026edc:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
24026eec:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
24026efc:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
24026f0c:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
24026f1c:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
24026f2c:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
24026f3c:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
24026f4c:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
24026f5c:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
24026f6c:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
24026f7c:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
24026f8c:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
24026f9c:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
24026fac:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
24026fbc:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
24026fcc:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
24026fdc:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
24026fec:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
24026ffc:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
2402700c:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
2402701c:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
2402702c:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
2402703c:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
2402704c:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
2402705c:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
2402706c:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
2402707c:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
2402708c:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
2402709c:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
240270ac:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
240270bc:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
240270cc:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
240270dc:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
240270ec:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
240270fc:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
2402710c:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
2402711c:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
2402712c:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
2402713c:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
2402714c:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
2402715c:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
2402716c:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
2402717c:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
2402718c:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
2402719c:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
240271ac:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
240271bc:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
240271cc:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
240271dc:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
240271ec:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
240271fc:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
2402720c:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
2402721c:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
2402722c:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
2402723c:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
2402724c:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
2402725c:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
2402726c:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
2402727c:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
2402728c:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
2402729c:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
240272ac:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
240272bc:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
240272cc:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
240272dc:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
240272ec:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
240272fc:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
2402730c:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
2402731c:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
2402732c:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
2402733c:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
2402734c:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
2402735c:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
2402736c:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
2402737c:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
2402738c:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
2402739c:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
240273ac:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
240273bc:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
240273cc:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
240273dc:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
240273ec:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
240273fc:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
2402740c:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
2402741c:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
2402742c:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
2402743c:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
2402744c:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
2402745c:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
2402746c:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
2402747c:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
2402748c:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
2402749c:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
240274ac:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
240274bc:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
240274cc:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
240274dc:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
240274ec:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
240274fc:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
2402750c:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
2402751c:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
2402752c:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
2402753c:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
2402754c:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
2402755c:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
2402756c:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
2402757c:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
2402758c:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
2402759c:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
240275ac:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
240275bc:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
240275cc:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
240275dc:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
240275ec:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
240275fc:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
2402760c:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
2402761c:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
2402762c:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
2402763c:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
2402764c:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
2402765c:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
2402766c:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
2402767c:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
2402768c:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
2402769c:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
240276ac:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
240276bc:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
240276cc:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
240276dc:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
240276ec:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
240276fc:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
2402770c:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
2402771c:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
2402772c:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
2402773c:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
2402774c:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
2402775c:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
2402776c:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
2402777c:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
2402778c:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
2402779c:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
240277ac:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
240277bc:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
240277cc:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
240277dc:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
240277ec:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
240277fc:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
2402780c:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
2402781c:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
2402782c:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
2402783c:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
2402784c:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
2402785c:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
2402786c:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
2402787c:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
2402788c:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
2402789c:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
240278ac:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
240278bc:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
240278cc:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
240278dc:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
240278ec:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
240278fc:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
2402790c:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
2402791c:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
2402792c:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
2402793c:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
2402794c:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
2402795c:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
2402796c:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
2402797c:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
2402798c:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
2402799c:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
240279ac:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
240279bc:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
240279cc:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
240279dc:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
240279ec:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
240279fc:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
24027a0c:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
24027a1c:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
24027a2c:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
24027a3c:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
24027a4c:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
24027a5c:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
24027a6c:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
24027a7c:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
24027a8c:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
24027a9c:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
24027aac:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
24027abc:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
24027acc:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
24027adc:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
24027aec:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
24027afc:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
24027b0c:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
24027b1c:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
24027b2c:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
24027b3c:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
24027b4c:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
24027b5c:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
24027b6c:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
24027b7c:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
24027b8c:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
24027b9c:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
24027bac:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
24027bbc:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
24027bcc:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
24027bdc:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
24027bec:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
24027bfc:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
24027c0c:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
24027c1c:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
24027c2c:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
24027c3c:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
24027c4c:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
24027c5c:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
24027c6c:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
24027c7c:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
24027c8c:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
24027c9c:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
24027cac:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
24027cbc:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
24027ccc:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
24027cdc:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
24027cec:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
24027cfc:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
24027d0c:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
24027d1c:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
24027d2c:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
24027d3c:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
24027d4c:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
24027d5c:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
24027d6c:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
24027d7c:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
24027d8c:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
24027d9c:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
24027dac:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
24027dbc:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
24027dcc:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
24027ddc:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
24027dec:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
24027dfc:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
24027e0c:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
24027e1c:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
24027e2c:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
24027e3c:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
24027e4c:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
24027e5c:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
24027e6c:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
24027e7c:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
24027e8c:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
24027e9c:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
24027eac:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
24027ebc:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
24027ecc:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
24027edc:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
24027eec:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
24027efc:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
24027f0c:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
24027f1c:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
24027f2c:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
24027f3c:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
24027f4c:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
24027f5c:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
24027f6c:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
24027f7c:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
24027f8c:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
24027f9c:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
24027fac:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
24027fbc:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
24027fcc:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
24027fdc:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
24027fec:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
24027ffc:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
2402800c:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
2402801c:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
2402802c:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
2402803c:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
2402804c:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
2402805c:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
2402806c:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
2402807c:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
2402808c:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
2402809c:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
240280ac:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
240280bc:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
240280cc:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
240280dc:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
240280ec:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
240280fc:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
2402810c:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
2402811c:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
2402812c:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
2402813c:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
2402814c:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
2402815c:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
2402816c:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
2402817c:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
2402818c:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
2402819c:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
240281ac:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
240281bc:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
240281cc:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
240281dc:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
240281ec:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
240281fc:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
2402820c:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
2402821c:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
2402822c:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
2402823c:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
2402824c:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
2402825c:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
2402826c:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
2402827c:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
2402828c:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
2402829c:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
240282ac:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
240282bc:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
240282cc:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
240282dc:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
240282ec:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
240282fc:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
2402830c:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
2402831c:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
2402832c:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
2402833c:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
2402834c:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
2402835c:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
2402836c:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
2402837c:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
2402838c:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
2402839c:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
240283ac:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
240283bc:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
240283cc:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
240283dc:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
240283ec:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
240283fc:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
2402840c:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
2402841c:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
2402842c:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
2402843c:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
2402844c:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
2402845c:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
2402846c:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
2402847c:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
2402848c:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
2402849c:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
240284ac:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
240284bc:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
240284cc:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
240284dc:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
240284ec:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
240284fc:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
2402850c:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
2402851c:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
2402852c:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
2402853c:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
2402854c:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
2402855c:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
2402856c:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
2402857c:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
2402858c:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
2402859c:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
240285ac:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
240285bc:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
240285cc:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
240285dc:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
240285ec:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
240285fc:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
2402860c:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
2402861c:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
2402862c:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
2402863c:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
2402864c:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
2402865c:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
2402866c:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
2402867c:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
2402868c:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
2402869c:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
240286ac:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
240286bc:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
240286cc:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
240286dc:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
240286ec:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
240286fc:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
2402870c:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
2402871c:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
2402872c:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
2402873c:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
2402874c:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
2402875c:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
2402876c:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
2402877c:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
2402878c:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
2402879c:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
240287ac:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
240287bc:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
240287cc:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
240287dc:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
240287ec:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
240287fc:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
2402880c:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
2402881c:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
2402882c:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
2402883c:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
2402884c:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
2402885c:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
2402886c:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
2402887c:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
2402888c:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
2402889c:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
240288ac:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
240288bc:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
240288cc:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
240288dc:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
240288ec:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
240288fc:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
2402890c:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
2402891c:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
2402892c:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
2402893c:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
2402894c:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
2402895c:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
2402896c:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
2402897c:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
2402898c:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
2402899c:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
240289ac:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
240289bc:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
240289cc:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
240289dc:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
240289ec:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
240289fc:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
24028a0c:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
24028a1c:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
24028a2c:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
24028a3c:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
24028a4c:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
24028a5c:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
24028a6c:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
24028a7c:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
24028a8c:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
24028a9c:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
24028aac:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
24028abc:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
24028acc:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
24028adc:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
24028aec:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
24028afc:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
24028b0c:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
24028b1c:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
24028b2c:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
24028b3c:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
24028b4c:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
24028b5c:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
24028b6c:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
24028b7c:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
24028b8c:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
24028b9c:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
24028bac:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
24028bbc:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
24028bcc:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
24028bdc:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
24028bec:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
24028bfc:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
24028c0c:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
24028c1c:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
24028c2c:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
24028c3c:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
24028c4c:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
24028c5c:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
24028c6c:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
24028c7c:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
24028c8c:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
24028c9c:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
24028cac:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
24028cbc:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
24028ccc:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
24028cdc:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
24028cec:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
24028cfc:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
24028d0c:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
24028d1c:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
24028d2c:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
24028d3c:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
24028d4c:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
24028d5c:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
24028d6c:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
24028d7c:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
24028d8c:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
24028d9c:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
24028dac:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
24028dbc:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
24028dcc:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
24028ddc:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
24028dec:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
24028dfc:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
24028e0c:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
24028e1c:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
24028e2c:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
24028e3c:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
24028e4c:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
24028e5c:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
24028e6c:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
24028e7c:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
24028e8c:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
24028e9c:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
24028eac:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
24028ebc:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
24028ecc:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
24028edc:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
24028eec:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
24028efc:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
24028f0c:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
24028f1c:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
24028f2c:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
24028f3c:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
24028f4c:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
24028f5c:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
24028f6c:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
24028f7c:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
24028f8c:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
24028f9c:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
24028fac:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
24028fbc:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
24028fcc:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
24028fdc:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
24028fec:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
24028ffc:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
2402900c:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
2402901c:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
2402902c:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
2402903c:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
2402904c:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
2402905c:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
2402906c:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
2402907c:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
2402908c:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
2402909c:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
240290ac:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
240290bc:	b89cc6ac bafe109a b89407ce bb03a88e     ................
240290cc:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
240290dc:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
240290ec:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
240290fc:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
2402910c:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
2402911c:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
2402912c:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
2402913c:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
2402914c:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
2402915c:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
2402916c:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
2402917c:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
2402918c:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
2402919c:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
240291ac:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
240291bc:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
240291cc:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
240291dc:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
240291ec:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
240291fc:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
2402920c:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
2402921c:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
2402922c:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
2402923c:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
2402924c:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
2402925c:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
2402926c:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
2402927c:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
2402928c:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
2402929c:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
240292ac:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
240292bc:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
240292cc:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
240292dc:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
240292ec:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
240292fc:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
2402930c:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
2402931c:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
2402932c:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
2402933c:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
2402934c:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
2402935c:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
2402936c:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
2402937c:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
2402938c:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
2402939c:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
240293ac:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
240293bc:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
240293cc:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
240293dc:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
240293ec:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
240293fc:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
2402940c:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
2402941c:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
2402942c:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
2402943c:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
2402944c:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
2402945c:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
2402946c:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
2402947c:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
2402948c:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
2402949c:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
240294ac:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
240294bc:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
240294cc:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
240294dc:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
240294ec:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
240294fc:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
2402950c:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
2402951c:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
2402952c:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
2402953c:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
2402954c:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
2402955c:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
2402956c:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
2402957c:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
2402958c:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
2402959c:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
240295ac:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
240295bc:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
240295cc:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
240295dc:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
240295ec:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
240295fc:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
2402960c:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
2402961c:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
2402962c:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
2402963c:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
2402964c:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
2402965c:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
2402966c:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
2402967c:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
2402968c:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
2402969c:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
240296ac:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
240296bc:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
240296cc:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
240296dc:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
240296ec:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
240296fc:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
2402970c:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
2402971c:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
2402972c:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
2402973c:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
2402974c:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
2402975c:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
2402976c:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
2402977c:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
2402978c:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
2402979c:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
240297ac:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
240297bc:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
240297cc:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
240297dc:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
240297ec:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
240297fc:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
2402980c:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
2402981c:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
2402982c:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
2402983c:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
2402984c:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
2402985c:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
2402986c:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
2402987c:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
2402988c:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
2402989c:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
240298ac:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
240298bc:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
240298cc:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
240298dc:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
240298ec:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
240298fc:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
2402990c:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
2402991c:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
2402992c:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
2402993c:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
2402994c:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
2402995c:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
2402996c:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
2402997c:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
2402998c:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
2402999c:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
240299ac:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
240299bc:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
240299cc:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
240299dc:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
240299ec:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
240299fc:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
24029a0c:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
24029a1c:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
24029a2c:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
24029a3c:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
24029a4c:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
24029a5c:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
24029a6c:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
24029a7c:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
24029a8c:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
24029a9c:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
24029aac:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
24029abc:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
24029acc:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
24029adc:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
24029aec:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
24029afc:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
24029b0c:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
24029b1c:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
24029b2c:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
24029b3c:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
24029b4c:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
24029b5c:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
24029b6c:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
24029b7c:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
24029b8c:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
24029b9c:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
24029bac:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
24029bbc:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
24029bcc:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
24029bdc:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
24029bec:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
24029bfc:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
24029c0c:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
24029c1c:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
24029c2c:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
24029c3c:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
24029c4c:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
24029c5c:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
24029c6c:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
24029c7c:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
24029c8c:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
24029c9c:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
24029cac:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
24029cbc:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
24029ccc:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
24029cdc:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
24029cec:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
24029cfc:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
24029d0c:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
24029d1c:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
24029d2c:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
24029d3c:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
24029d4c:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
24029d5c:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
24029d6c:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
24029d7c:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
24029d8c:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
24029d9c:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
24029dac:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
24029dbc:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
24029dcc:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
24029ddc:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
24029dec:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
24029dfc:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
24029e0c:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
24029e1c:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
24029e2c:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
24029e3c:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
24029e4c:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
24029e5c:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
24029e6c:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
24029e7c:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
24029e8c:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
24029e9c:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
24029eac:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
24029ebc:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
24029ecc:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
24029edc:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
24029eec:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
24029efc:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
24029f0c:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
24029f1c:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
24029f2c:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
24029f3c:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
24029f4c:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
24029f5c:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
24029f6c:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
24029f7c:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
24029f8c:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
24029f9c:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
24029fac:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
24029fbc:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
24029fcc:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
24029fdc:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
24029fec:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
24029ffc:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
2402a00c:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
2402a01c:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
2402a02c:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
2402a03c:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
2402a04c:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
2402a05c:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
2402a06c:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
2402a07c:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
2402a08c:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
2402a09c:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
2402a0ac:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
2402a0bc:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
2402a0cc:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
2402a0dc:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
2402a0ec:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
2402a0fc:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
2402a10c:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
2402a11c:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
2402a12c:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
2402a13c:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
2402a14c:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
2402a15c:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
2402a16c:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
2402a17c:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
2402a18c:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
2402a19c:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
2402a1ac:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
2402a1bc:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
2402a1cc:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
2402a1dc:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
2402a1ec:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
2402a1fc:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
2402a20c:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
2402a21c:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
2402a22c:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
2402a23c:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
2402a24c:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
2402a25c:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
2402a26c:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
2402a27c:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
2402a28c:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
2402a29c:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
2402a2ac:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
2402a2bc:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
2402a2cc:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
2402a2dc:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
2402a2ec:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
2402a2fc:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
2402a30c:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
2402a31c:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
2402a32c:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
2402a33c:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
2402a34c:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
2402a35c:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
2402a36c:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
2402a37c:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
2402a38c:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
2402a39c:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
2402a3ac:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
2402a3bc:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
2402a3cc:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
2402a3dc:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
2402a3ec:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
2402a3fc:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
2402a40c:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
2402a41c:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
2402a42c:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
2402a43c:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
2402a44c:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
2402a45c:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
2402a46c:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
2402a47c:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
2402a48c:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
2402a49c:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
2402a4ac:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
2402a4bc:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
2402a4cc:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
2402a4dc:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
2402a4ec:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
2402a4fc:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
2402a50c:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
2402a51c:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
2402a52c:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
2402a53c:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
2402a54c:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
2402a55c:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
2402a56c:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
2402a57c:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
2402a58c:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
2402a59c:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
2402a5ac:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
2402a5bc:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
2402a5cc:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
2402a5dc:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
2402a5ec:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
2402a5fc:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
2402a60c:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
2402a61c:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
2402a62c:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
2402a63c:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
2402a64c:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
2402a65c:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
2402a66c:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
2402a67c:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
2402a68c:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
2402a69c:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
2402a6ac:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
2402a6bc:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
2402a6cc:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
2402a6dc:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
2402a6ec:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
2402a6fc:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
2402a70c:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
2402a71c:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
2402a72c:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
2402a73c:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
2402a74c:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
2402a75c:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
2402a76c:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
2402a77c:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
2402a78c:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
2402a79c:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
2402a7ac:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
2402a7bc:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
2402a7cc:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
2402a7dc:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
2402a7ec:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
2402a7fc:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
2402a80c:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
2402a81c:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
2402a82c:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
2402a83c:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
2402a84c:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
2402a85c:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
2402a86c:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
2402a87c:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
2402a88c:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
2402a89c:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
2402a8ac:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
2402a8bc:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
2402a8cc:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
2402a8dc:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
2402a8ec:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
2402a8fc:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
2402a90c:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
2402a91c:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
2402a92c:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
2402a93c:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
2402a94c:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
2402a95c:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
2402a96c:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
2402a97c:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
2402a98c:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
2402a99c:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
2402a9ac:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
2402a9bc:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
2402a9cc:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
2402a9dc:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
2402a9ec:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
2402a9fc:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
2402aa0c:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
2402aa1c:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
2402aa2c:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
2402aa3c:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
2402aa4c:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
2402aa5c:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
2402aa6c:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
2402aa7c:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
2402aa8c:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
2402aa9c:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
2402aaac:	b7168bbf b8839904 b7135056 b896030f     ........VP......
2402aabc:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
2402aacc:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
2402aadc:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
2402aaec:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
2402aafc:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
2402ab0c:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
2402ab1c:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
2402ab2c:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
2402ab3c:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
2402ab4c:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
2402ab5c:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
2402ab6c:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
2402ab7c:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
2402ab8c:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
2402ab9c:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
2402abac:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
2402abbc:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
2402abcc:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
2402abdc:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
2402abec:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
2402abfc:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
2402ac0c:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
2402ac1c:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
2402ac2c:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
2402ac3c:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
2402ac4c:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
2402ac5c:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
2402ac6c:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
2402ac7c:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
2402ac8c:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
2402ac9c:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
2402acac:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
2402acbc:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
2402accc:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
2402acdc:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
2402acec:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
2402acfc:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
2402ad0c:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
2402ad1c:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
2402ad2c:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
2402ad3c:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
2402ad4c:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
2402ad5c:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
2402ad6c:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
2402ad7c:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
2402ad8c:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
2402ad9c:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
2402adac:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
2402adbc:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
2402adcc:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
2402addc:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
2402adec:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
2402adfc:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
2402ae0c:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
2402ae1c:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
2402ae2c:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
2402ae3c:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
2402ae4c:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
2402ae5c:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
2402ae6c:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
2402ae7c:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
2402ae8c:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
2402ae9c:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
2402aeac:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
2402aebc:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
2402aecc:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
2402aedc:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
2402aeec:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
2402aefc:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
2402af0c:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
2402af1c:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
2402af2c:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
2402af3c:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
2402af4c:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
2402af5c:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
2402af6c:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
2402af7c:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
2402af8c:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
2402af9c:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
2402afac:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
2402afbc:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
2402afcc:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
2402afdc:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
2402afec:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
2402affc:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
2402b00c:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
2402b01c:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
2402b02c:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
2402b03c:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
2402b04c:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
2402b05c:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
2402b06c:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
2402b07c:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
2402b08c:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
2402b09c:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
2402b0ac:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
2402b0bc:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
2402b0cc:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
2402b0dc:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
2402b0ec:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
2402b0fc:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
2402b10c:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
2402b11c:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
2402b12c:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
2402b13c:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
2402b14c:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
2402b15c:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
2402b16c:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
2402b17c:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
2402b18c:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
2402b19c:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
2402b1ac:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
2402b1bc:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
2402b1cc:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
2402b1dc:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
2402b1ec:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
2402b1fc:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
2402b20c:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
2402b21c:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
2402b22c:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
2402b23c:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
2402b24c:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
2402b25c:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
2402b26c:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
2402b27c:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
2402b28c:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
2402b29c:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
2402b2ac:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
2402b2bc:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
2402b2cc:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
2402b2dc:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
2402b2ec:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
2402b2fc:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
2402b30c:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
2402b31c:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
2402b32c:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
2402b33c:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
2402b34c:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
2402b35c:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
2402b36c:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
2402b37c:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
2402b38c:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
2402b39c:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
2402b3ac:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
2402b3bc:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
2402b3cc:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
2402b3dc:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
2402b3ec:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
2402b3fc:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
2402b40c:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
2402b41c:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
2402b42c:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
2402b43c:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
2402b44c:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
2402b45c:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
2402b46c:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
2402b47c:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
2402b48c:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
2402b49c:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
2402b4ac:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
2402b4bc:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
2402b4cc:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
2402b4dc:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
2402b4ec:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
2402b4fc:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
2402b50c:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
2402b51c:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
2402b52c:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
2402b53c:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
2402b54c:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
2402b55c:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
2402b56c:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
2402b57c:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
2402b58c:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
2402b59c:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
2402b5ac:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
2402b5bc:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
2402b5cc:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
2402b5dc:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
2402b5ec:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
2402b5fc:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
2402b60c:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
2402b61c:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
2402b62c:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
2402b63c:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
2402b64c:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
2402b65c:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
2402b66c:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
2402b67c:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
2402b68c:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
2402b69c:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
2402b6ac:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
2402b6bc:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
2402b6cc:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
2402b6dc:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
2402b6ec:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
2402b6fc:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
2402b70c:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
2402b71c:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
2402b72c:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
2402b73c:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
2402b74c:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
2402b75c:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
2402b76c:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
2402b77c:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
2402b78c:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
2402b79c:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
2402b7ac:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
2402b7bc:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
2402b7cc:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
2402b7dc:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
2402b7ec:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
2402b7fc:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
2402b80c:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
2402b81c:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
2402b82c:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
2402b83c:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
2402b84c:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
2402b85c:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
2402b86c:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
2402b87c:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
2402b88c:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
2402b89c:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
2402b8ac:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
2402b8bc:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
2402b8cc:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
2402b8dc:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
2402b8ec:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
2402b8fc:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
2402b90c:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
2402b91c:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
2402b92c:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
2402b93c:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
2402b94c:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
2402b95c:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
2402b96c:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
2402b97c:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
2402b98c:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
2402b99c:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
2402b9ac:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
2402b9bc:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
2402b9cc:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
2402b9dc:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
2402b9ec:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
2402b9fc:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
2402ba0c:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
2402ba1c:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
2402ba2c:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
2402ba3c:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
2402ba4c:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
2402ba5c:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
2402ba6c:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
2402ba7c:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
2402ba8c:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
2402ba9c:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
2402baac:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
2402babc:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
2402bacc:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
2402badc:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
2402baec:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
2402bafc:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
2402bb0c:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
2402bb1c:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
2402bb2c:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
2402bb3c:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
2402bb4c:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
2402bb5c:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
2402bb6c:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
2402bb7c:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
2402bb8c:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
2402bb9c:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
2402bbac:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
2402bbbc:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
2402bbcc:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
2402bbdc:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
2402bbec:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
2402bbfc:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
2402bc0c:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
2402bc1c:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
2402bc2c:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
2402bc3c:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
2402bc4c:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
2402bc5c:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
2402bc6c:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
2402bc7c:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
2402bc8c:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
2402bc9c:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
2402bcac:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
2402bcbc:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
2402bccc:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
2402bcdc:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
2402bcec:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
2402bcfc:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
2402bd0c:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
2402bd1c:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
2402bd2c:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
2402bd3c:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
2402bd4c:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
2402bd5c:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
2402bd6c:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
2402bd7c:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
2402bd8c:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
2402bd9c:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
2402bdac:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
2402bdbc:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
2402bdcc:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
2402bddc:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
2402bdec:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
2402bdfc:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
2402be0c:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
2402be1c:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
2402be2c:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
2402be3c:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
2402be4c:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
2402be5c:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
2402be6c:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
2402be7c:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
2402be8c:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
2402be9c:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
2402beac:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
2402bebc:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
2402becc:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
2402bedc:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
2402beec:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
2402befc:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
2402bf0c:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
2402bf1c:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
2402bf2c:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
2402bf3c:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
2402bf4c:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
2402bf5c:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
2402bf6c:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
2402bf7c:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
2402bf8c:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
2402bf9c:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
2402bfac:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
2402bfbc:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
2402bfcc:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
2402bfdc:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
2402bfec:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
2402bffc:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
2402c00c:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
2402c01c:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
2402c02c:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
2402c03c:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
2402c04c:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
2402c05c:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
2402c06c:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
2402c07c:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
2402c08c:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
2402c09c:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
2402c0ac:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
2402c0bc:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
2402c0cc:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
2402c0dc:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
2402c0ec:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
2402c0fc:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
2402c10c:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
2402c11c:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
2402c12c:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
2402c13c:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
2402c14c:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
2402c15c:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
2402c16c:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
2402c17c:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
2402c18c:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
2402c19c:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
2402c1ac:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
2402c1bc:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
2402c1cc:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
2402c1dc:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
2402c1ec:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
2402c1fc:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
2402c20c:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
2402c21c:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
2402c22c:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
2402c23c:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
2402c24c:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
2402c25c:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
2402c26c:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
2402c27c:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
2402c28c:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
2402c29c:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
2402c2ac:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
2402c2bc:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
2402c2cc:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
2402c2dc:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
2402c2ec:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
2402c2fc:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
2402c30c:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
2402c31c:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
2402c32c:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
2402c33c:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
2402c34c:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
2402c35c:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
2402c36c:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
2402c37c:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
2402c38c:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
2402c39c:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
2402c3ac:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
2402c3bc:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
2402c3cc:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
2402c3dc:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
2402c3ec:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
2402c3fc:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
2402c40c:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
2402c41c:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
2402c42c:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
2402c43c:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
2402c44c:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
2402c45c:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
2402c46c:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
2402c47c:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
2402c48c:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
2402c49c:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
2402c4ac:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
2402c4bc:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
2402c4cc:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
2402c4dc:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
2402c4ec:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
2402c4fc:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
2402c50c:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
2402c51c:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
2402c52c:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
2402c53c:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
2402c54c:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
2402c55c:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
2402c56c:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
2402c57c:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
2402c58c:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
2402c59c:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
2402c5ac:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
2402c5bc:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
2402c5cc:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
2402c5dc:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
2402c5ec:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
2402c5fc:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
2402c60c:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
2402c61c:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
2402c62c:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
2402c63c:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
2402c64c:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
2402c65c:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
2402c66c:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
2402c67c:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
2402c68c:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
2402c69c:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
2402c6ac:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
2402c6bc:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
2402c6cc:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
2402c6dc:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
2402c6ec:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
2402c6fc:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
2402c70c:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
2402c71c:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
2402c72c:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
2402c73c:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
2402c74c:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
2402c75c:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
2402c76c:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
2402c77c:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
2402c78c:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
2402c79c:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
2402c7ac:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
2402c7bc:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
2402c7cc:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
2402c7dc:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
2402c7ec:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
2402c7fc:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
2402c80c:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
2402c81c:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
2402c82c:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
2402c83c:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
2402c84c:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
2402c85c:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
2402c86c:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
2402c87c:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
2402c88c:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
2402c89c:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
2402c8ac:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
2402c8bc:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
2402c8cc:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
2402c8dc:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
2402c8ec:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
2402c8fc:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
2402c90c:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
2402c91c:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
2402c92c:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
2402c93c:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
2402c94c:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
2402c95c:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
2402c96c:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
2402c97c:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
2402c98c:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
2402c99c:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
2402c9ac:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
2402c9bc:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
2402c9cc:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
2402c9dc:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
2402c9ec:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
2402c9fc:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
2402ca0c:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
2402ca1c:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
2402ca2c:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
2402ca3c:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
2402ca4c:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
2402ca5c:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
2402ca6c:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
2402ca7c:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
2402ca8c:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
2402ca9c:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
2402caac:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
2402cabc:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
2402cacc:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
2402cadc:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
2402caec:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
2402cafc:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
2402cb0c:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
2402cb1c:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
2402cb2c:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
2402cb3c:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
2402cb4c:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
2402cb5c:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
2402cb6c:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
2402cb7c:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
2402cb8c:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
2402cb9c:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
2402cbac:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
2402cbbc:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
2402cbcc:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
2402cbdc:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
2402cbec:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
2402cbfc:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
2402cc0c:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
2402cc1c:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
2402cc2c:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
2402cc3c:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
2402cc4c:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
2402cc5c:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
2402cc6c:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
2402cc7c:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
2402cc8c:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
2402cc9c:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
2402ccac:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
2402ccbc:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
2402cccc:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
2402ccdc:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
2402ccec:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
2402ccfc:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
2402cd0c:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
2402cd1c:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
2402cd2c:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
2402cd3c:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
2402cd4c:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
2402cd5c:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
2402cd6c:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
2402cd7c:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
2402cd8c:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
2402cd9c:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
2402cdac:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
2402cdbc:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
2402cdcc:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
2402cddc:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
2402cdec:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
2402cdfc:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
2402ce0c:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
2402ce1c:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
2402ce2c:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
2402ce3c:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
2402ce4c:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
2402ce5c:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
2402ce6c:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
2402ce7c:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
2402ce8c:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
2402ce9c:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
2402ceac:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
2402cebc:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
2402cecc:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
2402cedc:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
2402ceec:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
2402cefc:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
2402cf0c:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
2402cf1c:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
2402cf2c:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
2402cf3c:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
2402cf4c:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
2402cf5c:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
2402cf6c:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
2402cf7c:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
2402cf8c:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
2402cf9c:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
2402cfac:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
2402cfbc:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
2402cfcc:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
2402cfdc:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
2402cfec:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
2402cffc:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
2402d00c:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
2402d01c:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
2402d02c:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
2402d03c:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
2402d04c:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
2402d05c:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
2402d06c:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
2402d07c:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
2402d08c:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
2402d09c:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
2402d0ac:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
2402d0bc:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
2402d0cc:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
2402d0dc:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
2402d0ec:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
2402d0fc:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
2402d10c:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
2402d11c:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
2402d12c:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
2402d13c:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
2402d14c:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
2402d15c:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
2402d16c:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
2402d17c:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
2402d18c:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
2402d19c:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
2402d1ac:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
2402d1bc:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
2402d1cc:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
2402d1dc:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
2402d1ec:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
2402d1fc:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
2402d20c:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
2402d21c:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
2402d22c:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

2402d250 <sinTable_f32>:
2402d250:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2402d260:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2402d270:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2402d280:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2402d290:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2402d2a0:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2402d2b0:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2402d2c0:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2402d2d0:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2402d2e0:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2402d2f0:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2402d300:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2402d310:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2402d320:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2402d330:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2402d340:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2402d350:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2402d360:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2402d370:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2402d380:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2402d390:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2402d3a0:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2402d3b0:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2402d3c0:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2402d3d0:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2402d3e0:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2402d3f0:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2402d400:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2402d410:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2402d420:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2402d430:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2402d440:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2402d450:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2402d460:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2402d470:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2402d480:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2402d490:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2402d4a0:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2402d4b0:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2402d4c0:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2402d4d0:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2402d4e0:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2402d4f0:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2402d500:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2402d510:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2402d520:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2402d530:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2402d540:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2402d550:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2402d560:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2402d570:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2402d580:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2402d590:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2402d5a0:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2402d5b0:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2402d5c0:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2402d5d0:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2402d5e0:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2402d5f0:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2402d600:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2402d610:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2402d620:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2402d630:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2402d640:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2402d650:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2402d660:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2402d670:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2402d680:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2402d690:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2402d6a0:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2402d6b0:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2402d6c0:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2402d6d0:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2402d6e0:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2402d6f0:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2402d700:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2402d710:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2402d720:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2402d730:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2402d740:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2402d750:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2402d760:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2402d770:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2402d780:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2402d790:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2402d7a0:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2402d7b0:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2402d7c0:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2402d7d0:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2402d7e0:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2402d7f0:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2402d800:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2402d810:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2402d820:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2402d830:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2402d840:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2402d850:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2402d860:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2402d870:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2402d880:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2402d890:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2402d8a0:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2402d8b0:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2402d8c0:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2402d8d0:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2402d8e0:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2402d8f0:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2402d900:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2402d910:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2402d920:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2402d930:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2402d940:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2402d950:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2402d960:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2402d970:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2402d980:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2402d990:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2402d9a0:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2402d9b0:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2402d9c0:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2402d9d0:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2402d9e0:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2402d9f0:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2402da00:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2402da10:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2402da20:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2402da30:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2402da40:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2402da50:	80000000 33323130 37363534 62613938     ....0123456789ab
2402da60:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
2402da70:	76757473 7a797877 00000000 00000000     stuvwxyz........

2402da80 <__exp_data>:
2402da80:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
2402da90:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
2402daa0:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
2402dab0:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
2402dac0:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
2402dad0:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
2402dae0:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
2402dafc:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
2402db0c:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
2402db1c:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
2402db2c:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
2402db3c:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
2402db4c:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
2402db5c:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
2402db6c:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
2402db7c:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
2402db8c:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
2402db9c:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
2402dbac:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
2402dbbc:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
2402dbcc:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
2402dbdc:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
2402dbec:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
2402dbfc:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
2402dc0c:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
2402dc1c:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
2402dc2c:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
2402dc3c:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
2402dc4c:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
2402dc5c:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
2402dc6c:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
2402dc7c:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
2402dc8c:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
2402dc9c:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
2402dcac:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
2402dcbc:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
2402dccc:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
2402dcdc:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
2402dcec:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
2402dcfc:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
2402dd0c:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
2402dd1c:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
2402dd2c:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
2402dd3c:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
2402dd4c:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
2402dd5c:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
2402dd6c:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
2402dd7c:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
2402dd8c:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
2402dd9c:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
2402ddac:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
2402ddbc:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
2402ddcc:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
2402dddc:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
2402ddec:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
2402ddfc:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
2402de0c:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
2402de1c:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
2402de2c:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
2402de3c:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
2402de4c:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
2402de5c:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
2402de6c:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
2402de7c:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
2402de8c:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
2402de9c:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
2402deac:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
2402debc:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
2402decc:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
2402dedc:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
2402deec:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
2402defc:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
2402df0c:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
2402df1c:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
2402df2c:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
2402df3c:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
2402df4c:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
2402df5c:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
2402df6c:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
2402df7c:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
2402df8c:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
2402df9c:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
2402dfac:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
2402dfbc:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
2402dfcc:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
2402dfdc:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
2402dfec:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
2402dffc:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
2402e00c:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
2402e01c:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
2402e02c:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
2402e03c:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
2402e04c:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
2402e05c:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
2402e06c:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
2402e07c:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
2402e08c:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
2402e09c:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
2402e0ac:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
2402e0bc:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
2402e0cc:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
2402e0dc:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
2402e0ec:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
2402e0fc:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
2402e10c:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
2402e11c:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
2402e12c:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
2402e13c:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
2402e14c:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
2402e15c:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
2402e16c:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
2402e17c:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
2402e18c:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
2402e19c:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
2402e1ac:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
2402e1bc:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
2402e1cc:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
2402e1dc:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
2402e1ec:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
2402e1fc:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
2402e20c:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
2402e21c:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
2402e22c:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
2402e23c:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
2402e24c:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
2402e25c:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
2402e26c:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
2402e27c:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
2402e28c:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
2402e29c:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
2402e2ac:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
2402e2bc:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
2402e2cc:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
2402e2dc:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
2402e2ec:	3feff3c2                                ...?

2402e2f0 <__exp2f_data>:
2402e2f0:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
2402e300:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
2402e310:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
2402e320:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
2402e330:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
2402e340:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
2402e350:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
2402e360:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
2402e370:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
2402e380:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
2402e390:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
2402e3a0:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
2402e3b0:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
2402e3c0:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
2402e3d0:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
2402e3e0:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
2402e3f0:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
2402e400:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
2402e410:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
2402e420:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
2402e430:	ff0c52d6 3f962e42                       .R..B..?

2402e438 <__log2f_data>:
2402e438:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402e448:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402e458:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402e468:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402e478:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402e488:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402e498:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402e4a8:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402e4b8:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402e4c8:	00000000 3ff00000 00000000 00000000     .......?........
2402e4d8:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402e4e8:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402e4f8:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402e508:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402e518:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402e528:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402e538:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
2402e548:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

2402e558 <__logf_data>:
2402e558:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
2402e568:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
2402e578:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
2402e588:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
2402e598:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
2402e5a8:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
2402e5b8:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
2402e5c8:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
2402e5d8:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
2402e5e8:	00000000 3ff00000 00000000 00000000     .......?........
2402e5f8:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
2402e608:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
2402e618:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
2402e628:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
2402e638:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
2402e648:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
2402e658:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
2402e668:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

2402e678 <TWO23>:
2402e678:	4b000000 cb000000                       ...K....

2402e680 <__powf_log2_data>:
2402e680:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402e690:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402e6a0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402e6b0:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402e6c0:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402e6d0:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402e6e0:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402e6f0:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402e700:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402e710:	00000000 3ff00000 00000000 00000000     .......?........
2402e720:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402e730:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402e740:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402e750:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402e760:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402e770:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402e780:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
2402e790:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
2402e7a0:	652ab82b 3ff71547                       +.*eG..?

2402e7a8 <__inv_pio4>:
2402e7a8:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
2402e7b8:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
2402e7c8:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
2402e7d8:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
2402e7e8:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
2402e7f8:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

2402e808 <__sincosf_table>:
2402e808:	00000000 3ff00000 00000000 bff00000     .......?........
2402e818:	00000000 bff00000 00000000 3ff00000     ...............?
2402e828:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402e838:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
2402e848:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
2402e858:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
2402e868:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
2402e878:	00000000 3ff00000 00000000 bff00000     .......?........
2402e888:	00000000 bff00000 00000000 3ff00000     ...............?
2402e898:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402e8a8:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
2402e8b8:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
2402e8c8:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
2402e8d8:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

2402e8e8 <npio2_hw>:
2402e8e8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
2402e8f8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
2402e908:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
2402e918:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
2402e928:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
2402e938:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
2402e948:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
2402e958:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

2402e968 <two_over_pi>:
2402e968:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
2402e978:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
2402e988:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
2402e998:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
2402e9a8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
2402e9b8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
2402e9c8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
2402e9d8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
2402e9e8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
2402e9f8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
2402ea08:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
2402ea18:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
2402ea28:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
2402ea38:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
2402ea48:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
2402ea58:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
2402ea68:	0060e27b 00c08c6b                       {.`.k...

2402ea70 <Zero>:
2402ea70:	00000000 80000000                       ........

2402ea78 <npio2_hw>:
2402ea78:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
2402ea88:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
2402ea98:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
2402eaa8:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
2402eab8:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
2402eac8:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
2402ead8:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
2402eae8:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

2402eaf8 <two_over_pi>:
2402eaf8:	000000a2 000000f9 00000083 0000006e     ............n...
2402eb08:	0000004e 00000044 00000015 00000029     N...D.......)...
2402eb18:	000000fc 00000027 00000057 000000d1     ....'...W.......
2402eb28:	000000f5 00000034 000000dd 000000c0     ....4...........
2402eb38:	000000db 00000062 00000095 00000099     ....b...........
2402eb48:	0000003c 00000043 00000090 00000041     <...C.......A...
2402eb58:	000000fe 00000051 00000063 000000ab     ....Q...c.......
2402eb68:	000000de 000000bb 000000c5 00000061     ............a...
2402eb78:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
2402eb88:	00000042 0000004d 000000d2 000000e0     B...M...........
2402eb98:	00000006 00000049 0000002e 000000ea     ....I...........
2402eba8:	00000009 000000d1 00000092 0000001c     ................
2402ebb8:	000000fe 0000001d 000000eb 0000001c     ................
2402ebc8:	000000b1 00000029 000000a7 0000003e     ....).......>...
2402ebd8:	000000e8 00000082 00000035 000000f5     ........5.......
2402ebe8:	0000002e 000000bb 00000044 00000084     ........D.......
2402ebf8:	000000e9 0000009c 00000070 00000026     ........p...&...
2402ec08:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
2402ec18:	00000039 00000091 000000d6 00000039     9...........9...
2402ec28:	00000083 00000053 00000039 000000f4     ....S...9.......
2402ec38:	0000009c 00000084 0000005f 0000008b     ........_.......
2402ec48:	000000bd 000000f9 00000028 0000003b     ........(...;...
2402ec58:	0000001f 000000f8 00000097 000000ff     ................
2402ec68:	000000de 00000005 00000098 0000000f     ................
2402ec78:	000000ef 0000002f 00000011 0000008b     ..../...........
2402ec88:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
2402ec98:	0000006d 00000036 0000007e 000000cf     m...6...~.......
2402eca8:	00000027 000000cb 00000009 000000b7     '...............
2402ecb8:	0000004f 00000046 0000003f 00000066     O...F...?...f...
2402ecc8:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
2402ecd8:	00000075 00000027 000000ba 000000c7     u...'...........
2402ece8:	000000eb 000000e5 000000f1 0000007b     ............{...
2402ecf8:	0000003d 00000007 00000039 000000f7     =.......9.......
2402ed08:	0000008a 00000052 00000092 000000ea     ....R...........
2402ed18:	0000006b 000000fb 0000005f 000000b1     k......._.......
2402ed28:	0000001f 0000008d 0000005d 00000008     ........].......
2402ed38:	00000056 00000003 00000030 00000046     V.......0...F...
2402ed48:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
2402ed58:	000000f0 000000cf 000000bc 00000020     ............ ...
2402ed68:	0000009a 000000f4 00000036 0000001d     ........6.......
2402ed78:	000000a9 000000e3 00000091 00000061     ............a...
2402ed88:	0000005e 000000e6 0000001b 00000008     ^...............
2402ed98:	00000065 00000099 00000085 0000005f     e..........._...
2402eda8:	00000014 000000a0 00000068 00000040     ........h...@...
2402edb8:	0000008d 000000ff 000000d8 00000080     ................
2402edc8:	0000004d 00000073 00000027 00000031     M...s...'...1...
2402edd8:	00000006 00000006 00000015 00000056     ............V...
2402ede8:	000000ca 00000073 000000a8 000000c9     ....s...........
2402edf8:	00000060 000000e2 0000007b 000000c0     `.......{.......
2402ee08:	0000008c 0000006b                       ....k...

2402ee10 <PIo2>:
2402ee10:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
2402ee20:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
2402ee30:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
2402ee40:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

2402ee50 <init_jk>:
2402ee50:	00000002 00000003 00000004 00000006     ................

2402ee60 <PIo2>:
2402ee60:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
2402ee70:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
2402ee80:	1fc40000 1bc60000 17440000              ..........D.

2402ee8c <init_jk>:
2402ee8c:	00000004 00000007 00000009              ............

2402ee98 <_init>:
2402ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402ee9a:	bf00      	nop
2402ee9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402ee9e:	bc08      	pop	{r3}
2402eea0:	469e      	mov	lr, r3
2402eea2:	4770      	bx	lr

2402eea4 <_fini>:
2402eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402eea6:	bf00      	nop
2402eea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402eeaa:	bc08      	pop	{r3}
2402eeac:	469e      	mov	lr, r3
2402eeae:	4770      	bx	lr

2402eeb0 <__parsePreset_veneer>:
2402eeb0:	f85f f000 	ldr.w	pc, [pc]	; 2402eeb4 <__parsePreset_veneer+0x4>
2402eeb4:	00005d61 	.word	0x00005d61

2402eeb8 <__tMBSineTri_place_dd_noBuffer_veneer>:
2402eeb8:	f85f f000 	ldr.w	pc, [pc]	; 2402eebc <__tMBSineTri_place_dd_noBuffer_veneer+0x4>
2402eebc:	00006ca1 	.word	0x00006ca1

2402eec0 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
2402eec0:	f85f f000 	ldr.w	pc, [pc]	; 2402eec4 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402eec4:	00006921 	.word	0x00006921

2402eec8 <__HAL_SAI_ErrorCallback_veneer>:
2402eec8:	f85f f000 	ldr.w	pc, [pc]	; 2402eecc <__HAL_SAI_ErrorCallback_veneer+0x4>
2402eecc:	00004d81 	.word	0x00004d81

2402eed0 <__HAL_I2C_MasterTxCpltCallback_veneer>:
2402eed0:	f85f f000 	ldr.w	pc, [pc]	; 2402eed4 <__HAL_I2C_MasterTxCpltCallback_veneer+0x4>
2402eed4:	00006961 	.word	0x00006961

2402eed8 <__HAL_SPI_RxCpltCallback_veneer>:
2402eed8:	f85f f000 	ldr.w	pc, [pc]	; 2402eedc <__HAL_SPI_RxCpltCallback_veneer+0x4>
2402eedc:	00004a41 	.word	0x00004a41

2402eee0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
2402eee0:	f85f f000 	ldr.w	pc, [pc]	; 2402eee4 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
2402eee4:	00004c61 	.word	0x00004c61

2402eee8 <__tExpSmooth_tick_veneer>:
2402eee8:	f85f f000 	ldr.w	pc, [pc]	; 2402eeec <__tExpSmooth_tick_veneer+0x4>
2402eeec:	000069c1 	.word	0x000069c1

2402eef0 <__LEAF_clip_veneer>:
2402eef0:	f85f f000 	ldr.w	pc, [pc]	; 2402eef4 <__LEAF_clip_veneer+0x4>
2402eef4:	00006b41 	.word	0x00006b41

2402eef8 <__HAL_SAI_TxCpltCallback_veneer>:
2402eef8:	f85f f000 	ldr.w	pc, [pc]	; 2402eefc <__HAL_SAI_TxCpltCallback_veneer+0x4>
2402eefc:	00004d01 	.word	0x00004d01

2402ef00 <__HAL_SPI_TxRxCpltCallback_veneer>:
2402ef00:	f85f f000 	ldr.w	pc, [pc]	; 2402ef04 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402ef04:	00004bc1 	.word	0x00004bc1

2402ef08 <__HAL_I2C_ErrorCallback_veneer>:
2402ef08:	f85f f000 	ldr.w	pc, [pc]	; 2402ef0c <__HAL_I2C_ErrorCallback_veneer+0x4>
2402ef0c:	00006981 	.word	0x00006981

2402ef10 <__tExpSmooth_setDest_veneer>:
2402ef10:	f85f f000 	ldr.w	pc, [pc]	; 2402ef14 <__tExpSmooth_setDest_veneer+0x4>
2402ef14:	00006a01 	.word	0x00006a01

2402ef18 <__HAL_SPI_RxHalfCpltCallback_veneer>:
2402ef18:	f85f f000 	ldr.w	pc, [pc]	; 2402ef1c <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
2402ef1c:	00004b01 	.word	0x00004b01

2402ef20 <__HAL_SAI_TxHalfCpltCallback_veneer>:
2402ef20:	f85f f000 	ldr.w	pc, [pc]	; 2402ef24 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2402ef24:	00004d41 	.word	0x00004d41

2402ef28 <__randomNumber_veneer>:
2402ef28:	f85f f000 	ldr.w	pc, [pc]	; 2402ef2c <__randomNumber_veneer+0x4>
2402ef2c:	000050e1 	.word	0x000050e1

Disassembly of section .itcmram:

00000400 <updateStateFromSPIMessage>:
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     400:	b510      	push	{r4, lr}
     402:	f100 0318 	add.w	r3, r0, #24
     406:	4a51      	ldr	r2, [pc, #324]	; (54c <updateStateFromSPIMessage+0x14c>)
     408:	5cd3      	ldrb	r3, [r2, r3]
     40a:	f3c3 1480 	ubfx	r4, r3, #6, #1
     40e:	4950      	ldr	r1, [pc, #320]	; (550 <updateStateFromSPIMessage+0x150>)
     410:	600c      	str	r4, [r1, #0]
     412:	f3c3 1440 	ubfx	r4, r3, #5, #1
     416:	494f      	ldr	r1, [pc, #316]	; (554 <updateStateFromSPIMessage+0x154>)
     418:	600c      	str	r4, [r1, #0]
     41a:	f3c3 1400 	ubfx	r4, r3, #4, #1
     41e:	494e      	ldr	r1, [pc, #312]	; (558 <updateStateFromSPIMessage+0x158>)
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     420:	600c      	str	r4, [r1, #0]
     422:	f100 0119 	add.w	r1, r0, #25
     426:	5c51      	ldrb	r1, [r2, r1]
     428:	4a4c      	ldr	r2, [pc, #304]	; (55c <updateStateFromSPIMessage+0x15c>)
     42a:	6011      	str	r1, [r2, #0]
     42c:	6811      	ldr	r1, [r2, #0]
  return status;
     42e:	4a4c      	ldr	r2, [pc, #304]	; (560 <updateStateFromSPIMessage+0x160>)
     430:	6812      	ldr	r2, [r2, #0]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     432:	4291      	cmp	r1, r2
     434:	d021      	beq.n	47a <updateStateFromSPIMessage+0x7a>
     436:	4a49      	ldr	r2, [pc, #292]	; (55c <updateStateFromSPIMessage+0x15c>)
     438:	6812      	ldr	r2, [r2, #0]
     43a:	2a3f      	cmp	r2, #63	; 0x3f
     43c:	d010      	beq.n	460 <updateStateFromSPIMessage+0x60>
     43e:	4a47      	ldr	r2, [pc, #284]	; (55c <updateStateFromSPIMessage+0x15c>)
  return status;
     440:	6812      	ldr	r2, [r2, #0]
     442:	2a3e      	cmp	r2, #62	; 0x3e
    return HAL_ERROR;
     444:	d00c      	beq.n	460 <updateStateFromSPIMessage+0x60>
     446:	4a45      	ldr	r2, [pc, #276]	; (55c <updateStateFromSPIMessage+0x15c>)
     448:	6812      	ldr	r2, [r2, #0]
     44a:	2a3d      	cmp	r2, #61	; 0x3d
     44c:	d008      	beq.n	460 <updateStateFromSPIMessage+0x60>
     44e:	4a45      	ldr	r2, [pc, #276]	; (564 <updateStateFromSPIMessage+0x164>)
    collector->_first_period = 0.01f;
}

static inline Lfloat sub_collector_period_of(_sub_collector* collector, _auto_correlation_info info)
{
    tZeroCrossingInfo first = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i1);
     450:	2101      	movs	r1, #1
     452:	6011      	str	r1, [r2, #0]
     454:	4a41      	ldr	r2, [pc, #260]	; (55c <updateStateFromSPIMessage+0x15c>)
     456:	6812      	ldr	r2, [r2, #0]
    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i2);
     458:	b2d2      	uxtb	r2, r2
     45a:	4943      	ldr	r1, [pc, #268]	; (568 <updateStateFromSPIMessage+0x168>)
     45c:	700a      	strb	r2, [r1, #0]
     45e:	e00c      	b.n	47a <updateStateFromSPIMessage+0x7a>
     460:	4a3f      	ldr	r2, [pc, #252]	; (560 <updateStateFromSPIMessage+0x160>)
    return tZeroCrossingInfo_fractionalPeriod(&first, &next);
     462:	6812      	ldr	r2, [r2, #0]
     464:	2a3f      	cmp	r2, #63	; 0x3f
     466:	d057      	beq.n	518 <updateStateFromSPIMessage+0x118>
     468:	4a3d      	ldr	r2, [pc, #244]	; (560 <updateStateFromSPIMessage+0x160>)

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     46a:	6812      	ldr	r2, [r2, #0]
     46c:	2a3e      	cmp	r2, #62	; 0x3e
     46e:	d05b      	beq.n	528 <updateStateFromSPIMessage+0x128>
        for (int i = 0; i != n - 1; ++i)
     470:	4a3a      	ldr	r2, [pc, #232]	; (55c <updateStateFromSPIMessage+0x15c>)
     472:	6812      	ldr	r2, [r2, #0]
     474:	b2d2      	uxtb	r2, r2
     476:	493d      	ldr	r1, [pc, #244]	; (56c <updateStateFromSPIMessage+0x16c>)
     478:	700a      	strb	r2, [r1, #0]
     47a:	4a38      	ldr	r2, [pc, #224]	; (55c <updateStateFromSPIMessage+0x15c>)
     47c:	6811      	ldr	r1, [r2, #0]
     47e:	4a38      	ldr	r2, [pc, #224]	; (560 <updateStateFromSPIMessage+0x160>)
     480:	6011      	str	r1, [r2, #0]
            tZeroCrossingInfo curr = tZeroCrossingCollector_getCrossing(&p->_zc, i);
     482:	f003 030f 	and.w	r3, r3, #15
     486:	3b05      	subs	r3, #5
     488:	ee07 3a90 	vmov	s15, r3
            if (curr->_peak >= threshold)
     48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     490:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
     494:	ee67 7a87 	vmul.f32	s15, s15, s14
     498:	4b35      	ldr	r3, [pc, #212]	; (570 <updateStateFromSPIMessage+0x170>)
                for (int j = i + 1; j != n; ++j)
     49a:	edc3 7a00 	vstr	s15, [r3]
     49e:	f100 031a 	add.w	r3, r0, #26
        result->period = sub_collector_period_of(collector, info) / info._harmonic;
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
     4a2:	4a2a      	ldr	r2, [pc, #168]	; (54c <updateStateFromSPIMessage+0x14c>)
        result->period = 0.0f;
     4a4:	5cd1      	ldrb	r1, [r2, r3]
     4a6:	f100 031b 	add.w	r3, r0, #27
     4aa:	5cd3      	ldrb	r3, [r2, r3]
     4ac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
     4b0:	b29b      	uxth	r3, r3
     4b2:	4930      	ldr	r1, [pc, #192]	; (574 <updateStateFromSPIMessage+0x174>)
     4b4:	800b      	strh	r3, [r1, #0]
     4b6:	880b      	ldrh	r3, [r1, #0]
     4b8:	b29b      	uxth	r3, r3
     4ba:	ee07 3a90 	vmov	s15, r3
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
     4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     4c2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 578 <updateStateFromSPIMessage+0x178>
     4c6:	ee67 7a87 	vmul.f32	s15, s15, s14
			st_word(buf + BS_55AA, 0xAA55);
     4ca:	4b2c      	ldr	r3, [pc, #176]	; (57c <updateStateFromSPIMessage+0x17c>)
     4cc:	edc3 7a00 	vstr	s15, [r3]
     4d0:	f100 031c 	add.w	r3, r0, #28
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     4d4:	f812 c003 	ldrb.w	ip, [r2, r3]
     4d8:	301d      	adds	r0, #29
     4da:	5c11      	ldrb	r1, [r2, r0]
     4dc:	4b28      	ldr	r3, [pc, #160]	; (580 <updateStateFromSPIMessage+0x180>)
     4de:	781a      	ldrb	r2, [r3, #0]
     4e0:	b2d2      	uxtb	r2, r2
     4e2:	eb01 210c 	add.w	r1, r1, ip, lsl #8
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     4e6:	4827      	ldr	r0, [pc, #156]	; (584 <updateStateFromSPIMessage+0x184>)
     4e8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     4ec:	781a      	ldrb	r2, [r3, #0]
     4ee:	b2d2      	uxtb	r2, r2
     4f0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	b2db      	uxtb	r3, r3
     4f8:	4923      	ldr	r1, [pc, #140]	; (588 <updateStateFromSPIMessage+0x188>)
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     4fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     4fe:	429a      	cmp	r2, r3
     500:	d11a      	bne.n	538 <updateStateFromSPIMessage+0x138>
     502:	4b20      	ldr	r3, [pc, #128]	; (584 <updateStateFromSPIMessage+0x184>)
     504:	681a      	ldr	r2, [r3, #0]
     506:	4b20      	ldr	r3, [pc, #128]	; (588 <updateStateFromSPIMessage+0x188>)
     508:	601a      	str	r2, [r3, #0]
     50a:	4b1c      	ldr	r3, [pc, #112]	; (57c <updateStateFromSPIMessage+0x17c>)
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
     50c:	ed93 0a00 	vldr	s0, [r3]
     510:	481e      	ldr	r0, [pc, #120]	; (58c <updateStateFromSPIMessage+0x18c>)
     512:	f006 fa75 	bl	6a00 <tExpSmooth_setDest>
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     516:	bd10      	pop	{r4, pc}
     518:	4a10      	ldr	r2, [pc, #64]	; (55c <updateStateFromSPIMessage+0x15c>)
     51a:	6812      	ldr	r2, [r2, #0]
     51c:	2a3e      	cmp	r2, #62	; 0x3e
     51e:	d1a3      	bne.n	468 <updateStateFromSPIMessage+0x68>
     520:	4a1b      	ldr	r2, [pc, #108]	; (590 <updateStateFromSPIMessage+0x190>)
     522:	2101      	movs	r1, #1
     524:	6011      	str	r1, [r2, #0]
				mem_set(buf, 0, ss);
     526:	e7a8      	b.n	47a <updateStateFromSPIMessage+0x7a>
     528:	4a0c      	ldr	r2, [pc, #48]	; (55c <updateStateFromSPIMessage+0x15c>)
     52a:	6812      	ldr	r2, [r2, #0]
     52c:	2a3f      	cmp	r2, #63	; 0x3f
     52e:	d19f      	bne.n	470 <updateStateFromSPIMessage+0x70>
     530:	4a17      	ldr	r2, [pc, #92]	; (590 <updateStateFromSPIMessage+0x190>)
				sect += n; nsect -= n;
     532:	2102      	movs	r1, #2
			} while (nsect);
     534:	6011      	str	r1, [r2, #0]
     536:	e7a0      	b.n	47a <updateStateFromSPIMessage+0x7a>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
     538:	2201      	movs	r2, #1
     53a:	f44f 6100 	mov.w	r1, #2048	; 0x800
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
     53e:	4815      	ldr	r0, [pc, #84]	; (594 <updateStateFromSPIMessage+0x194>)
     540:	f007 f89e 	bl	7680 <__HAL_GPIO_WritePin_veneer>
     544:	4b14      	ldr	r3, [pc, #80]	; (598 <updateStateFromSPIMessage+0x198>)
     546:	2201      	movs	r2, #1
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
     548:	601a      	str	r2, [r3, #0]
     54a:	e7da      	b.n	502 <updateStateFromSPIMessage+0x102>
     54c:	30000140 	.word	0x30000140
     550:	2000563c 	.word	0x2000563c
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
     554:	20005148 	.word	0x20005148
     558:	2000514c 	.word	0x2000514c
     55c:	200149fc 	.word	0x200149fc
     560:	20005850 	.word	0x20005850
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     564:	2001a8b8 	.word	0x2001a8b8
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
     568:	2000074c 	.word	0x2000074c
     56c:	20014c08 	.word	0x20014c08
     570:	20005678 	.word	0x20005678
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     574:	20014a08 	.word	0x20014a08
     578:	39800801 	.word	0x39800801
     57c:	20014a04 	.word	0x20014a04
     580:	20014a30 	.word	0x20014a30
     584:	2001495c 	.word	0x2001495c
     588:	2001496c 	.word	0x2001496c
     58c:	20014a0c 	.word	0x20014a0c
			sys = 0x0C;		/* FAT32X */
     590:	20014984 	.word	0x20014984
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     594:	58020c00 	.word	0x58020c00
			mem_set(buf, 0, ss);
     598:	20005640 	.word	0x20005640
     59c:	f3af 8000 	nop.w

000005a0 <switchStringModel>:
     5a0:	b538      	push	{r3, r4, r5, lr}
     5a2:	ed2d 8b02 	vpush	{d8}
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
     5a6:	2801      	cmp	r0, #1
     5a8:	d015      	beq.n	5d6 <switchStringModel+0x36>
     5aa:	2802      	cmp	r0, #2
     5ac:	d05e      	beq.n	66c <switchStringModel+0xcc>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
     5ae:	4b3d      	ldr	r3, [pc, #244]	; (6a4 <switchStringModel+0x104>)
     5b0:	681b      	ldr	r3, [r3, #0]
     5b2:	b2db      	uxtb	r3, r3
     5b4:	4a3c      	ldr	r2, [pc, #240]	; (6a8 <switchStringModel+0x108>)
			pte[PTE_StHead] = 1;				/* Start head */
     5b6:	7013      	strb	r3, [r2, #0]
     5b8:	ecbd 8b02 	vpop	{d8}
			pte[PTE_StSec] = 1;					/* Start sector */
     5bc:	bd38      	pop	{r3, r4, r5, pc}
     5be:	483b      	ldr	r0, [pc, #236]	; (6ac <switchStringModel+0x10c>)
			pte[PTE_StCyl] = 0;					/* Start cylinder */
     5c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
			pte[PTE_System] = sys;				/* System type */
     5c4:	f007 f87c 	bl	76c0 <__tSimpleLivingString3_free_veneer>
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     5c8:	3401      	adds	r4, #1
     5ca:	4b39      	ldr	r3, [pc, #228]	; (6b0 <switchStringModel+0x110>)
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	42a3      	cmp	r3, r4
     5d0:	dcf5      	bgt.n	5be <switchStringModel+0x1e>
     5d2:	2500      	movs	r5, #0
			pte[PTE_EdHead] = 254;				/* End head */
     5d4:	e039      	b.n	64a <switchStringModel+0xaa>
     5d6:	2400      	movs	r4, #0
     5d8:	e7f7      	b.n	5ca <switchStringModel+0x2a>
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     5da:	4c36      	ldr	r4, [pc, #216]	; (6b4 <switchStringModel+0x114>)
     5dc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
     5e0:	ed9f 4a35 	vldr	s8, [pc, #212]	; 6b8 <switchStringModel+0x118>
     5e4:	ed9f 8a35 	vldr	s16, [pc, #212]	; 6bc <switchStringModel+0x11c>
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     5e8:	eddf 2a35 	vldr	s5, [pc, #212]	; 6c0 <switchStringModel+0x120>
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
     5ec:	4a35      	ldr	r2, [pc, #212]	; (6c4 <switchStringModel+0x124>)
     5ee:	2101      	movs	r1, #1
     5f0:	eef0 4a44 	vmov.f32	s9, s8
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
     5f4:	eef0 3a48 	vmov.f32	s7, s16
     5f8:	eeb0 3a62 	vmov.f32	s6, s5
     5fc:	eeb0 2a48 	vmov.f32	s4, s16
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     600:	eddf 1a31 	vldr	s3, [pc, #196]	; 6c8 <switchStringModel+0x128>
     604:	ed9f 1a31 	vldr	s2, [pc, #196]	; 6cc <switchStringModel+0x12c>
     608:	eddf 0a31 	vldr	s1, [pc, #196]	; 6d0 <switchStringModel+0x130>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     60c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 6d4 <switchStringModel+0x134>
     610:	4620      	mov	r0, r4
     612:	f007 f801 	bl	7618 <__tLivingString2_initToPool_veneer>
     616:	ed9f 0a30 	vldr	s0, [pc, #192]	; 6d8 <switchStringModel+0x138>
     61a:	4620      	mov	r0, r4
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     61c:	f007 f840 	bl	76a0 <__tLivingString2_setBrightness_veneer>
	if (vol < 0) return FR_INVALID_DRIVE;
     620:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
	if (stat & STA_NOINIT) return FR_NOT_READY;
     624:	4620      	mov	r0, r4
     626:	f007 f8fb 	bl	7820 <__tLivingString2_setPickPos_veneer>

	return FR_OK;
}
     62a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 6dc <switchStringModel+0x13c>
     62e:	4620      	mov	r0, r4
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
     630:	f007 f946 	bl	78c0 <__tLivingString2_setPrepPos_veneer>
     634:	eeb0 0a48 	vmov.f32	s0, s16
     638:	4620      	mov	r0, r4
     63a:	f007 f851 	bl	76e0 <__tLivingString2_setPrepIndex_veneer>
	if (!szb_buf) return FR_MKFS_ABORTED;
     63e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
     642:	4620      	mov	r0, r4
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
     644:	f007 f808 	bl	7658 <__tLivingString2_setPickupPos_veneer>
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
     648:	3501      	adds	r5, #1
     64a:	4b19      	ldr	r3, [pc, #100]	; (6b0 <switchStringModel+0x110>)
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
     64c:	781b      	ldrb	r3, [r3, #0]
     64e:	42ab      	cmp	r3, r5
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
     650:	dcc3      	bgt.n	5da <switchStringModel+0x3a>
     652:	e7ac      	b.n	5ae <switchStringModel+0xe>
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
     654:	4817      	ldr	r0, [pc, #92]	; (6b4 <switchStringModel+0x114>)
     656:	eb00 0084 	add.w	r0, r0, r4, lsl #2
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
     65a:	f006 fff1 	bl	7640 <__tLivingString2_free_veneer>
					return FR_MKFS_ABORTED;
     65e:	3401      	adds	r4, #1
					return FR_MKFS_ABORTED;
     660:	4b13      	ldr	r3, [pc, #76]	; (6b0 <switchStringModel+0x110>)
     662:	781b      	ldrb	r3, [r3, #0]
					return FR_MKFS_ABORTED;
     664:	42a3      	cmp	r3, r4
     666:	dcf5      	bgt.n	654 <switchStringModel+0xb4>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
     668:	2400      	movs	r4, #0
     66a:	e016      	b.n	69a <switchStringModel+0xfa>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     66c:	2400      	movs	r4, #0
     66e:	e7f7      	b.n	660 <switchStringModel+0xc0>
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     670:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 6e0 <switchStringModel+0x140>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     674:	4b13      	ldr	r3, [pc, #76]	; (6c4 <switchStringModel+0x124>)
     676:	2200      	movs	r2, #0
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     678:	eef0 2a42 	vmov.f32	s5, s4
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     67c:	eddf 1a0f 	vldr	s3, [pc, #60]	; 6bc <switchStringModel+0x11c>
     680:	ed9f 1a18 	vldr	s2, [pc, #96]	; 6e4 <switchStringModel+0x144>
     684:	eddf 0a18 	vldr	s1, [pc, #96]	; 6e8 <switchStringModel+0x148>
     688:	ed9f 0a18 	vldr	s0, [pc, #96]	; 6ec <switchStringModel+0x14c>
                k = 1;
     68c:	2104      	movs	r1, #4
                x = -0.5f + p * invB;
     68e:	4807      	ldr	r0, [pc, #28]	; (6ac <switchStringModel+0x10c>)
     690:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     694:	f007 f8b8 	bl	7808 <__tSimpleLivingString3_initToPool_veneer>
     698:	3401      	adds	r4, #1
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <switchStringModel+0x110>)
     69c:	781b      	ldrb	r3, [r3, #0]
     69e:	42a3      	cmp	r3, r4
     6a0:	dce6      	bgt.n	670 <switchStringModel+0xd0>
     6a2:	e784      	b.n	5ae <switchStringModel+0xe>
     6a4:	200149fc 	.word	0x200149fc
     6a8:	20014c08 	.word	0x20014c08
     6ac:	200054d8 	.word	0x200054d8
     6b0:	20000052 	.word	0x20000052
     6b4:	2001497c 	.word	0x2001497c
     6b8:	3d4ccccd 	.word	0x3d4ccccd
                k = 0;
     6bc:	00000000 	.word	0x00000000
     6c0:	3f7ff972 	.word	0x3f7ff972
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
     6c4:	200055f4 	.word	0x200055f4
     6c8:	3f666666 	.word	0x3f666666
     6cc:	3e99999a 	.word	0x3e99999a
     6d0:	3f19999a 	.word	0x3f19999a
     6d4:	42c80000 	.word	0x42c80000
     6d8:	3f7d70a4 	.word	0x3f7d70a4
     6dc:	3ecccccd 	.word	0x3ecccccd
     6e0:	3c23d70a 	.word	0x3c23d70a
     6e4:	3f7fff58 	.word	0x3f7fff58
     6e8:	4684d000 	.word	0x4684d000
     6ec:	435c0000 	.word	0x435c0000
     6f0:	f3af 8000 	nop.w
     6f4:	f3af 8000 	nop.w
     6f8:	f3af 8000 	nop.w
     6fc:	f3af 8000 	nop.w

00000700 <oscillator_tick>:
     700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     704:	ed2d 8b06 	vpush	{d8-d10}
     708:	b087      	sub	sp, #28
     70a:	eeb0 9a40 	vmov.f32	s18, s0
     70e:	4606      	mov	r6, r0
     710:	2300      	movs	r3, #0
     712:	4a6d      	ldr	r2, [pc, #436]	; (8c8 <oscillator_tick+0x1c8>)
     714:	7013      	strb	r3, [r2, #0]
     716:	4a6d      	ldr	r2, [pc, #436]	; (8cc <oscillator_tick+0x1cc>)
     718:	6852      	ldr	r2, [r2, #4]
     71a:	9203      	str	r2, [sp, #12]
     71c:	e00b      	b.n	736 <oscillator_tick+0x36>
     71e:	4a6c      	ldr	r2, [pc, #432]	; (8d0 <oscillator_tick+0x1d0>)
     720:	eb06 0143 	add.w	r1, r6, r3, lsl #1
     724:	eb02 0481 	add.w	r4, r2, r1, lsl #2
     728:	2000      	movs	r0, #0
     72a:	6020      	str	r0, [r4, #0]
     72c:	3106      	adds	r1, #6
     72e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     732:	6010      	str	r0, [r2, #0]
     734:	3301      	adds	r3, #1
     736:	2b02      	cmp	r3, #2
     738:	ddf1      	ble.n	71e <oscillator_tick+0x1e>
     73a:	2400      	movs	r4, #0
     73c:	e0b4      	b.n	8a8 <oscillator_tick+0x1a8>
     73e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
     742:	eb04 0585 	add.w	r5, r4, r5, lsl #2
     746:	3518      	adds	r5, #24
     748:	00eb      	lsls	r3, r5, #3
     74a:	9302      	str	r3, [sp, #8]
     74c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     750:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 90c <oscillator_tick+0x20c>
     754:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
     758:	1cb2      	adds	r2, r6, #2
     75a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     75e:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
     762:	edd3 9a15 	vldr	s19, [r3, #84]	; 0x54
     766:	ed93 aa1c 	vldr	s20, [r3, #112]	; 0x70
     76a:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
     76e:	edd3 8a54 	vldr	s17, [r3, #336]	; 0x150
     772:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
     776:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    			c->numBLEPs--;
     77a:	eeb4 7ae7 	vcmpe.f32	s14, s15
     77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     782:	bfcc      	ite	gt
     784:	2201      	movgt	r2, #1
     786:	2200      	movle	r2, #0
     788:	9200      	str	r2, [sp, #0]
     78a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8d4 <oscillator_tick+0x1d4>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
     78e:	ee20 0a27 	vmul.f32	s0, s0, s15
     792:	eb06 0744 	add.w	r7, r6, r4, lsl #1
     796:	ea4f 0887 	mov.w	r8, r7, lsl #2
    	whichBLEP &= 63;
     79a:	4b4f      	ldr	r3, [pc, #316]	; (8d8 <oscillator_tick+0x1d8>)
     79c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
     7a0:	ee30 0a09 	vadd.f32	s0, s0, s18
     7a4:	4648      	mov	r0, r9
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
     7a6:	f006 f92b 	bl	6a00 <tExpSmooth_setDest>
     7aa:	f8df a120 	ldr.w	sl, [pc, #288]	; 8cc <oscillator_tick+0x1cc>
     7ae:	f8da 1004 	ldr.w	r1, [sl, #4]
     7b2:	9101      	str	r1, [sp, #4]
     7b4:	4648      	mov	r0, r9
     7b6:	f006 f903 	bl	69c0 <tExpSmooth_tick>
     7ba:	eef0 0a40 	vmov.f32	s1, s0
     7be:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8dc <oscillator_tick+0x1dc>
     7c2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8e0 <oscillator_tick+0x1e0>
     7c6:	f006 f9bb 	bl	6b40 <LEAF_clip>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
     7ca:	eddf 7a46 	vldr	s15, [pc, #280]	; 8e4 <oscillator_tick+0x1e4>
     7ce:	ee60 7a27 	vmul.f32	s15, s0, s15
     7d2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8e8 <oscillator_tick+0x1e8>
     7d6:	ee77 7a80 	vadd.f32	s15, s15, s0
     7da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
     7de:	ee17 3a10 	vmov	r3, s14
     7e2:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
     7e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
     7ea:	f3c3 010e 	ubfx	r1, r3, #0, #15
     7ee:	4a3f      	ldr	r2, [pc, #252]	; (8ec <oscillator_tick+0x1ec>)
     7f0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
     7f4:	edd1 6a00 	vldr	s13, [r1]
     7f8:	3301      	adds	r3, #1
     7fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
     7fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     802:	ed93 7a00 	vldr	s14, [r3]
     806:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
     80a:	ee3a 0ae7 	vsub.f32	s0, s21, s15
     80e:	ee20 0a26 	vmul.f32	s0, s0, s13
     812:	ee67 7a87 	vmul.f32	s15, s15, s14
     816:	ee30 0a27 	vadd.f32	s0, s0, s15
     81a:	f8da 3004 	ldr.w	r3, [sl, #4]
     81e:	9901      	ldr	r1, [sp, #4]
     820:	1a5b      	subs	r3, r3, r1
     822:	4a33      	ldr	r2, [pc, #204]	; (8f0 <oscillator_tick+0x1f0>)
     824:	6013      	str	r3, [r2, #0]
     826:	4b33      	ldr	r3, [pc, #204]	; (8f4 <oscillator_tick+0x1f4>)
     828:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     82c:	edd3 7a00 	vldr	s15, [r3]
     830:	ee67 7a80 	vmul.f32	s15, s15, s0
     834:	4b30      	ldr	r3, [pc, #192]	; (8f8 <oscillator_tick+0x1f8>)
     836:	4443      	add	r3, r8
     838:	ed93 0a00 	vldr	s0, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     83c:	ee27 0a80 	vmul.f32	s0, s15, s0
     840:	2300      	movs	r3, #0
     842:	9305      	str	r3, [sp, #20]
     844:	4b2d      	ldr	r3, [pc, #180]	; (8fc <oscillator_tick+0x1fc>)
     846:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
     84a:	4633      	mov	r3, r6
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
     84c:	9a00      	ldr	r2, [sp, #0]
     84e:	eef0 0a4a 	vmov.f32	s1, s20
     852:	ee30 0a29 	vadd.f32	s0, s0, s19
     856:	4621      	mov	r1, r4
     858:	a805      	add	r0, sp, #20
     85a:	47c8      	blx	r9
     85c:	eddd 7a05 	vldr	s15, [sp, #20]
     860:	ee68 7a27 	vmul.f32	s15, s16, s15
    			c->numBLEPs--;
     864:	edcd 7a05 	vstr	s15, [sp, #20]
     868:	4b25      	ldr	r3, [pc, #148]	; (900 <oscillator_tick+0x200>)
     86a:	4443      	add	r3, r8
     86c:	edc3 7a00 	vstr	s15, [r3]
    z += 0.5f * (c->_f[j] - z);
     870:	ee67 6aa8 	vmul.f32	s13, s15, s17
     874:	9b02      	ldr	r3, [sp, #8]
     876:	1b5d      	subs	r5, r3, r5
     878:	4435      	add	r5, r6
     87a:	3502      	adds	r5, #2
     87c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
     880:	ed95 7a00 	vldr	s14, [r5]
     884:	ee66 6a87 	vmul.f32	s13, s13, s14
     888:	4b11      	ldr	r3, [pc, #68]	; (8d0 <oscillator_tick+0x1d0>)
    c->out = z;
     88a:	4498      	add	r8, r3
     88c:	edc8 6a00 	vstr	s13, [r8]
    j = (j+1) & 7;
     890:	ee7a 8ae8 	vsub.f32	s17, s21, s17
    c->_p = p;
     894:	ee67 7aa8 	vmul.f32	s15, s15, s17
    c->_w = w;
     898:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = b;
     89c:	3706      	adds	r7, #6
     89e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    c->_z = z;
     8a2:	edc7 7a00 	vstr	s15, [r7]
    c->_k = k;
     8a6:	3401      	adds	r4, #1
}
     8a8:	4b16      	ldr	r3, [pc, #88]	; (904 <oscillator_tick+0x204>)
     8aa:	781b      	ldrb	r3, [r3, #0]
     8ac:	42a3      	cmp	r3, r4
     8ae:	f73f af46 	bgt.w	73e <oscillator_tick+0x3e>
     8b2:	4b06      	ldr	r3, [pc, #24]	; (8cc <oscillator_tick+0x1cc>)
     8b4:	685b      	ldr	r3, [r3, #4]
     8b6:	9a03      	ldr	r2, [sp, #12]
     8b8:	1a9b      	subs	r3, r3, r2
     8ba:	4a13      	ldr	r2, [pc, #76]	; (908 <oscillator_tick+0x208>)
     8bc:	6013      	str	r3, [r2, #0]
     8be:	b007      	add	sp, #28
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
	}

	timeOsc = DWT->CYCCNT - tempCount1;
}
     8c0:	ecbd 8b06 	vpop	{d8-d10}
     8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8c8:	20016dc5 	.word	0x20016dc5
     8cc:	e0001000 	.word	0xe0001000
     8d0:	200056b4 	.word	0x200056b4
     8d4:	3c23d70a 	.word	0x3c23d70a
     8d8:	2000582c 	.word	0x2000582c
     8dc:	4323d666 	.word	0x4323d666
     8e0:	c323d666 	.word	0xc323d666
     8e4:	42c80000 	.word	0x42c80000
     8e8:	46800000 	.word	0x46800000
     8ec:	3001a000 	.word	0x3001a000
     8f0:	2001498c 	.word	0x2001498c
     8f4:	20005300 	.word	0x20005300
     8f8:	200051c8 	.word	0x200051c8
     8fc:	20005ce0 	.word	0x20005ce0
     900:	200147bc 	.word	0x200147bc
     904:	20000068 	.word	0x20000068
     908:	200149a4 	.word	0x200149a4
     90c:	20019798 	.word	0x20019798
     910:	f3af 8000 	nop.w
     914:	f3af 8000 	nop.w
     918:	f3af 8000 	nop.w
     91c:	f3af 8000 	nop.w

00000920 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
     920:	b538      	push	{r3, r4, r5, lr}
     922:	4604      	mov	r4, r0
	tPBSaw_setFreq(&sawPaired[v][string], freq);
     924:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     928:	4d08      	ldr	r5, [pc, #32]	; (94c <sawSquareTick+0x2c>)
     92a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     92e:	4628      	mov	r0, r5
     930:	f006 febe 	bl	76b0 <__tPBSaw_setFreq_veneer>
    //if (sync)
    {
    	//tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tPBSaw_tick(&sawPaired[v][string]) * 2.f;
     934:	4628      	mov	r0, r5
     936:	f006 ff0b 	bl	7750 <__tPBSaw_tick_veneer>
     93a:	ee30 0a00 	vadd.f32	s0, s0, s0
     93e:	edd4 7a00 	vldr	s15, [r4]
     942:	ee37 0a80 	vadd.f32	s0, s15, s0
     946:	ed84 0a00 	vstr	s0, [r4]
}
     94a:	bd38      	pop	{r3, r4, r5, pc}
     94c:	20005c88 	.word	0x20005c88
     950:	f3af 8000 	nop.w
     954:	f3af 8000 	nop.w
     958:	f3af 8000 	nop.w
     95c:	f3af 8000 	nop.w

00000960 <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
     960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     964:	ed2d 8b02 	vpush	{d8}
     968:	4607      	mov	r7, r0
     96a:	4688      	mov	r8, r1
     96c:	eeb0 8a60 	vmov.f32	s16, s1
     970:	4616      	mov	r6, r2
     972:	461d      	mov	r5, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
     974:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     978:	4c14      	ldr	r4, [pc, #80]	; (9cc <sineTriTick+0x6c>)
     97a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     97e:	4620      	mov	r0, r4
     980:	f006 fe32 	bl	75e8 <__tMBSineTri_setFreq_veneer>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
     984:	eeb0 0a48 	vmov.f32	s0, s16
     988:	4620      	mov	r0, r4
     98a:	f006 fe75 	bl	7678 <__tMBSineTri_setShape_veneer>
    if (sync)
     98e:	b976      	cbnz	r6, 9ae <sineTriTick+0x4e>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
     990:	4620      	mov	r0, r4
     992:	f006 fee1 	bl	7758 <__tMBSineTri_tick_veneer>
     996:	ee30 0a00 	vadd.f32	s0, s0, s0
     99a:	edd7 7a00 	vldr	s15, [r7]
     99e:	ee37 0a80 	vadd.f32	s0, s15, s0
     9a2:	ed87 0a00 	vstr	s0, [r7]
}
     9a6:	ecbd 8b02 	vpop	{d8}
     9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     9ae:	4b08      	ldr	r3, [pc, #32]	; (9d0 <sineTriTick+0x70>)
     9b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
     9b4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <sineTriTick+0x74>)
     9ba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     9be:	ed95 0a00 	vldr	s0, [r5]
     9c2:	4620      	mov	r0, r4
     9c4:	f006 fe14 	bl	75f0 <__tMBSineTri_sync_veneer>
     9c8:	e7e2      	b.n	990 <sineTriTick+0x30>
     9ca:	bf00      	nop
     9cc:	20005d44 	.word	0x20005d44
     9d0:	24015e78 	.word	0x24015e78
     9d4:	200147bc 	.word	0x200147bc
     9d8:	f3af 8000 	nop.w
     9dc:	f3af 8000 	nop.w

000009e0 <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
     9e0:	b538      	push	{r3, r4, r5, lr}
     9e2:	4604      	mov	r4, r0
    tPBSaw_setFreq(&saw[v][string], freq);
     9e4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     9e8:	4d08      	ldr	r5, [pc, #32]	; (a0c <sawTick+0x2c>)
     9ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     9ee:	4628      	mov	r0, r5
     9f0:	f006 fe5e 	bl	76b0 <__tPBSaw_setFreq_veneer>
    //if (sync)
	//{
	//	tPBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	//}
    *sample += tPBSaw_tick(&saw[v][string]) * 2.f;;
     9f4:	4628      	mov	r0, r5
     9f6:	f006 feab 	bl	7750 <__tPBSaw_tick_veneer>
     9fa:	ee30 0a00 	vadd.f32	s0, s0, s0
     9fe:	edd4 7a00 	vldr	s15, [r4]
     a02:	ee37 0a80 	vadd.f32	s0, s15, s0
     a06:	ed84 0a00 	vstr	s0, [r4]
}
     a0a:	bd38      	pop	{r3, r4, r5, pc}
     a0c:	20005c70 	.word	0x20005c70
     a10:	f3af 8000 	nop.w
     a14:	f3af 8000 	nop.w
     a18:	f3af 8000 	nop.w
     a1c:	f3af 8000 	nop.w

00000a20 <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
     a20:	b538      	push	{r3, r4, r5, lr}
     a22:	ed2d 8b02 	vpush	{d8}
     a26:	4605      	mov	r5, r0
     a28:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
     a2c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     a30:	4c0c      	ldr	r4, [pc, #48]	; (a64 <pulseTick+0x44>)
     a32:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     a36:	4620      	mov	r0, r4
     a38:	f006 fed2 	bl	77e0 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
     a3c:	eeb0 0a48 	vmov.f32	s0, s16
     a40:	4620      	mov	r0, r4
     a42:	f006 fd91 	bl	7568 <__tPBPulse_setWidth_veneer>
    //if (sync)
	//{
	//	tPBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	//}
    *sample += tPBPulse_tick(&pulse[v][string]) * 2.f;;
     a46:	4620      	mov	r0, r4
     a48:	f006 fdba 	bl	75c0 <__tPBPulse_tick_veneer>
     a4c:	ee30 0a00 	vadd.f32	s0, s0, s0
     a50:	edd5 7a00 	vldr	s15, [r5]
     a54:	ee37 0a80 	vadd.f32	s0, s15, s0
     a58:	ed85 0a00 	vstr	s0, [r5]
}
     a5c:	ecbd 8b02 	vpop	{d8}
     a60:	bd38      	pop	{r3, r4, r5, pc}
     a62:	bf00      	nop
     a64:	20005854 	.word	0x20005854
     a68:	f3af 8000 	nop.w
     a6c:	f3af 8000 	nop.w
     a70:	f3af 8000 	nop.w
     a74:	f3af 8000 	nop.w
     a78:	f3af 8000 	nop.w
     a7c:	f3af 8000 	nop.w

00000a80 <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
     a80:	b538      	push	{r3, r4, r5, lr}
     a82:	4604      	mov	r4, r0
    tCycle_setFreq(&sine[v][string], freq);
     a84:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     a88:	4d07      	ldr	r5, [pc, #28]	; (aa8 <sineTick+0x28>)
     a8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     a8e:	4628      	mov	r0, r5
     a90:	f006 febe 	bl	7810 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
     a94:	4628      	mov	r0, r5
     a96:	f006 feef 	bl	7878 <__tCycle_tick_veneer>
     a9a:	edd4 7a00 	vldr	s15, [r4]
     a9e:	ee77 7a80 	vadd.f32	s15, s15, s0
     aa2:	edc4 7a00 	vstr	s15, [r4]
}
     aa6:	bd38      	pop	{r3, r4, r5, pc}
     aa8:	20005d2c 	.word	0x20005d2c
     aac:	f3af 8000 	nop.w
     ab0:	f3af 8000 	nop.w
     ab4:	f3af 8000 	nop.w
     ab8:	f3af 8000 	nop.w
     abc:	f3af 8000 	nop.w

00000ac0 <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
     ac0:	b538      	push	{r3, r4, r5, lr}
     ac2:	ed2d 8b02 	vpush	{d8}
     ac6:	4605      	mov	r5, r0
     ac8:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
     acc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     ad0:	4c0c      	ldr	r4, [pc, #48]	; (b04 <triTick+0x44>)
     ad2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     ad6:	4620      	mov	r0, r4
     ad8:	f006 fe0a 	bl	76f0 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
     adc:	eeb0 0a48 	vmov.f32	s0, s16
     ae0:	4620      	mov	r0, r4
     ae2:	f006 fd59 	bl	7598 <__tPBTriangle_setSkew_veneer>
    //if (sync)
	//{
	//	tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	//}
    *sample += tPBTriangle_tick(&tri[v][string]) * 2.0f;;
     ae6:	4620      	mov	r0, r4
     ae8:	f006 fda6 	bl	7638 <__tPBTriangle_tick_veneer>
     aec:	ee30 0a00 	vadd.f32	s0, s0, s0
     af0:	edd5 7a00 	vldr	s15, [r5]
     af4:	ee37 0a80 	vadd.f32	s0, s15, s0
     af8:	ed85 0a00 	vstr	s0, [r5]
}
     afc:	ecbd 8b02 	vpop	{d8}
     b00:	bd38      	pop	{r3, r4, r5, pc}
     b02:	bf00      	nop
     b04:	200149e4 	.word	0x200149e4
     b08:	f3af 8000 	nop.w
     b0c:	f3af 8000 	nop.w
     b10:	f3af 8000 	nop.w
     b14:	f3af 8000 	nop.w
     b18:	f3af 8000 	nop.w
     b1c:	f3af 8000 	nop.w

00000b20 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
     b20:	4770      	bx	lr
     b22:	bf00      	nop
     b24:	f3af 8000 	nop.w
     b28:	f3af 8000 	nop.w
     b2c:	f3af 8000 	nop.w
     b30:	f3af 8000 	nop.w
     b34:	f3af 8000 	nop.w
     b38:	f3af 8000 	nop.w
     b3c:	f3af 8000 	nop.w

00000b40 <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
     b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     b44:	ed2d 8b02 	vpush	{d8}
     b48:	b085      	sub	sp, #20
     b4a:	4606      	mov	r6, r0
     b4c:	eeb0 8a40 	vmov.f32	s16, s0
     b50:	460d      	mov	r5, r1
	interruptChecker = 0;
     b52:	2400      	movs	r4, #0
     b54:	4b52      	ldr	r3, [pc, #328]	; (ca0 <filter_tick+0x160>)
     b56:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
     b58:	4b52      	ldr	r3, [pc, #328]	; (ca4 <filter_tick+0x164>)
     b5a:	685f      	ldr	r7, [r3, #4]
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
     b5c:	f8ad 4004 	strh.w	r4, [sp, #4]
	for (int f = 0; f < filterToTick; f++)
     b60:	e02d      	b.n	bbe <filter_tick+0x7e>
		if (isnan(note))
		{
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     b62:	4b51      	ldr	r3, [pc, #324]	; (ca8 <filter_tick+0x168>)
     b64:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     b68:	edd3 0a00 	vldr	s1, [r3]
     b6c:	ee70 0a88 	vadd.f32	s1, s1, s16
     b70:	ee60 0a87 	vmul.f32	s1, s1, s14
     b74:	ee70 0aa7 	vadd.f32	s1, s1, s15
     b78:	ab04      	add	r3, sp, #16
     b7a:	eb03 0984 	add.w	r9, r3, r4, lsl #2
     b7e:	ed49 0a02 	vstr	s1, [r9, #-8]

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     b82:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
     b86:	ee70 0ae7 	vsub.f32	s1, s1, s15
     b8a:	ed9f 1a48 	vldr	s2, [pc, #288]	; cac <filter_tick+0x16c>
     b8e:	eddf 7a48 	vldr	s15, [pc, #288]	; cb0 <filter_tick+0x170>
     b92:	ee60 0aa7 	vmul.f32	s1, s1, s15
     b96:	ed9f 0a47 	vldr	s0, [pc, #284]	; cb4 <filter_tick+0x174>
     b9a:	f005 ffd1 	bl	6b40 <LEAF_clip>
     b9e:	ed09 0a02 	vstr	s0, [r9, #-8]
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     ba2:	eb05 0844 	add.w	r8, r5, r4, lsl #1
     ba6:	4b44      	ldr	r3, [pc, #272]	; (cb8 <filter_tick+0x178>)
     ba8:	eb03 0888 	add.w	r8, r3, r8, lsl #2
     bac:	4640      	mov	r0, r8
     bae:	f005 ff27 	bl	6a00 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     bb2:	4640      	mov	r0, r8
     bb4:	f005 ff04 	bl	69c0 <tExpSmooth_tick>
     bb8:	ed09 0a02 	vstr	s0, [r9, #-8]
	for (int f = 0; f < filterToTick; f++)
     bbc:	3401      	adds	r4, #1
     bbe:	4b3f      	ldr	r3, [pc, #252]	; (cbc <filter_tick+0x17c>)
     bc0:	781b      	ldrb	r3, [r3, #0]
     bc2:	42a3      	cmp	r3, r4
     bc4:	dd2f      	ble.n	c26 <filter_tick+0xe6>
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
     bc6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     bca:	005b      	lsls	r3, r3, #1
     bcc:	335f      	adds	r3, #95	; 0x5f
     bce:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
     bd2:	493b      	ldr	r1, [pc, #236]	; (cc0 <filter_tick+0x180>)
     bd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float enabled = filtParams[FilterEnabled].realVal[string];
     bd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
     bdc:	442b      	add	r3, r5
     bde:	3302      	adds	r3, #2
     be0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     be4:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
     be8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
     bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bf4:	bfcc      	ite	gt
     bf6:	2301      	movgt	r3, #1
     bf8:	2300      	movle	r3, #0
     bfa:	f104 0110 	add.w	r1, r4, #16
     bfe:	4469      	add	r1, sp
     c00:	f801 3c0c 	strb.w	r3, [r1, #-12]
		if (!enabledFilt[f]) continue;
     c04:	2b00      	cmp	r3, #0
     c06:	d0d9      	beq.n	bbc <filter_tick+0x7c>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     c08:	1cab      	adds	r3, r5, #2
     c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c0e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
     c12:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
		if (isnan(note))
     c16:	eeb4 8a48 	vcmp.f32	s16, s16
     c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c1e:	d7a0      	bvc.n	b62 <filter_tick+0x22>
			note = 0.0f; //is this necessary?
     c20:	ed9f 8a24 	vldr	s16, [pc, #144]	; cb4 <filter_tick+0x174>
     c24:	e79d      	b.n	b62 <filter_tick+0x22>
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];
     c26:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
     c2a:	4a25      	ldr	r2, [pc, #148]	; (cc0 <filter_tick+0x180>)
     c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c30:	ed93 8a00 	vldr	s16, [r3]

	if (enabledFilt[0])
     c34:	f89d 3004 	ldrb.w	r3, [sp, #4]
     c38:	b13b      	cbz	r3, c4a <filter_tick+0x10a>
	{
		filterTick[0](&samples[0], 0, cutoff[0], string);
     c3a:	4b22      	ldr	r3, [pc, #136]	; (cc4 <filter_tick+0x184>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	462a      	mov	r2, r5
     c40:	ed9d 0a02 	vldr	s0, [sp, #8]
     c44:	2100      	movs	r1, #0
     c46:	4630      	mov	r0, r6
     c48:	4798      	blx	r3
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
     c4a:	edd6 7a00 	vldr	s15, [r6]
     c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     c52:	ee37 7a48 	vsub.f32	s14, s14, s16
     c56:	ee27 7a87 	vmul.f32	s14, s15, s14
	samples[1] += sendToFilter2;
     c5a:	edd6 7a01 	vldr	s15, [r6, #4]
     c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
     c62:	edc6 7a01 	vstr	s15, [r6, #4]
	//compute what gets sent to the second filter
	if (enabledFilt[1])
     c66:	f89d 3005 	ldrb.w	r3, [sp, #5]
     c6a:	b13b      	cbz	r3, c7c <filter_tick+0x13c>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
     c6c:	4b15      	ldr	r3, [pc, #84]	; (cc4 <filter_tick+0x184>)
     c6e:	685b      	ldr	r3, [r3, #4]
     c70:	462a      	mov	r2, r5
     c72:	ed9d 0a03 	vldr	s0, [sp, #12]
     c76:	2101      	movs	r1, #1
     c78:	1d30      	adds	r0, r6, #4
     c7a:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
     c7c:	4b09      	ldr	r3, [pc, #36]	; (ca4 <filter_tick+0x164>)
     c7e:	685b      	ldr	r3, [r3, #4]
     c80:	1bdf      	subs	r7, r3, r7
     c82:	4b11      	ldr	r3, [pc, #68]	; (cc8 <filter_tick+0x188>)
     c84:	601f      	str	r7, [r3, #0]
	return samples[1] + (samples[0] * sp);
     c86:	ed96 0a01 	vldr	s0, [r6, #4]
     c8a:	edd6 7a00 	vldr	s15, [r6]
     c8e:	ee67 7a88 	vmul.f32	s15, s15, s16
}
     c92:	ee30 0a27 	vadd.f32	s0, s0, s15
     c96:	b005      	add	sp, #20
     c98:	ecbd 8b02 	vpop	{d8}
     c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     ca0:	20016dc5 	.word	0x20016dc5
     ca4:	e0001000 	.word	0xe0001000
     ca8:	20000b0c 	.word	0x20000b0c
     cac:	457ff000 	.word	0x457ff000
     cb0:	420fb824 	.word	0x420fb824
     cb4:	00000000 	.word	0x00000000
     cb8:	20005188 	.word	0x20005188
     cbc:	20000004 	.word	0x20000004
     cc0:	20019798 	.word	0x20019798
     cc4:	200051a8 	.word	0x200051a8
     cc8:	20014994 	.word	0x20014994
     ccc:	f3af 8000 	nop.w
     cd0:	f3af 8000 	nop.w
     cd4:	f3af 8000 	nop.w
     cd8:	f3af 8000 	nop.w
     cdc:	f3af 8000 	nop.w

00000ce0 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
     ce0:	b570      	push	{r4, r5, r6, lr}
     ce2:	4604      	mov	r4, r0
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     ce4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ce8:	0096      	lsls	r6, r2, #2
     cea:	4d0b      	ldr	r5, [pc, #44]	; (d18 <lowpassTick+0x38>)
     cec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     cf0:	4628      	mov	r0, r5
     cf2:	f006 fda9 	bl	7848 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     cf6:	ed94 0a00 	vldr	s0, [r4]
     cfa:	4628      	mov	r0, r5
     cfc:	f006 fd98 	bl	7830 <__tSVF_tick_veneer>
     d00:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
     d04:	4b05      	ldr	r3, [pc, #20]	; (d1c <lowpassTick+0x3c>)
     d06:	4433      	add	r3, r6
     d08:	edd3 7a00 	vldr	s15, [r3]
     d0c:	ee20 0a27 	vmul.f32	s0, s0, s15
     d10:	ed84 0a00 	vstr	s0, [r4]
}
     d14:	bd70      	pop	{r4, r5, r6, pc}
     d16:	bf00      	nop
     d18:	200054e0 	.word	0x200054e0
     d1c:	20005198 	.word	0x20005198

00000d20 <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
     d20:	b570      	push	{r4, r5, r6, lr}
     d22:	4604      	mov	r4, r0
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     d24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     d28:	0096      	lsls	r6, r2, #2
     d2a:	4d0b      	ldr	r5, [pc, #44]	; (d58 <highpassTick+0x38>)
     d2c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     d30:	4628      	mov	r0, r5
     d32:	f006 fd89 	bl	7848 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
     d36:	ed94 0a00 	vldr	s0, [r4]
     d3a:	4628      	mov	r0, r5
     d3c:	f006 fd78 	bl	7830 <__tSVF_tick_veneer>
     d40:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
     d44:	4b05      	ldr	r3, [pc, #20]	; (d5c <highpassTick+0x3c>)
     d46:	4433      	add	r3, r6
     d48:	edd3 7a00 	vldr	s15, [r3]
     d4c:	ee20 0a27 	vmul.f32	s0, s0, s15
     d50:	ed84 0a00 	vstr	s0, [r4]
}
     d54:	bd70      	pop	{r4, r5, r6, pc}
     d56:	bf00      	nop
     d58:	2000524c 	.word	0x2000524c
     d5c:	20005198 	.word	0x20005198

00000d60 <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
     d60:	b570      	push	{r4, r5, r6, lr}
     d62:	4604      	mov	r4, r0
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     d64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     d68:	0096      	lsls	r6, r2, #2
     d6a:	4d0b      	ldr	r5, [pc, #44]	; (d98 <bandpassTick+0x38>)
     d6c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     d70:	4628      	mov	r0, r5
     d72:	f006 fd69 	bl	7848 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     d76:	ed94 0a00 	vldr	s0, [r4]
     d7a:	4628      	mov	r0, r5
     d7c:	f006 fd58 	bl	7830 <__tSVF_tick_veneer>
     d80:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
     d84:	4b05      	ldr	r3, [pc, #20]	; (d9c <bandpassTick+0x3c>)
     d86:	4433      	add	r3, r6
     d88:	edd3 7a00 	vldr	s15, [r3]
     d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
     d90:	ed84 0a00 	vstr	s0, [r4]
}
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	bf00      	nop
     d98:	20000afc 	.word	0x20000afc
     d9c:	20005198 	.word	0x20005198

00000da0 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	4604      	mov	r4, r0
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     da4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     da8:	0096      	lsls	r6, r2, #2
     daa:	4d0b      	ldr	r5, [pc, #44]	; (dd8 <diodeLowpassTick+0x38>)
     dac:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     db0:	4628      	mov	r0, r5
     db2:	f006 fcd9 	bl	7768 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     db6:	ed94 0a00 	vldr	s0, [r4]
     dba:	4628      	mov	r0, r5
     dbc:	f006 fd64 	bl	7888 <__tDiodeFilter_tickEfficient_veneer>
     dc0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
     dc4:	4b05      	ldr	r3, [pc, #20]	; (ddc <diodeLowpassTick+0x3c>)
     dc6:	4433      	add	r3, r6
     dc8:	edd3 7a00 	vldr	s15, [r3]
     dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
     dd0:	ed84 0a00 	vstr	s0, [r4]
}
     dd4:	bd70      	pop	{r4, r5, r6, pc}
     dd6:	bf00      	nop
     dd8:	20005138 	.word	0x20005138
     ddc:	20005198 	.word	0x20005198

00000de0 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
     de0:	b538      	push	{r3, r4, r5, lr}
     de2:	4604      	mov	r4, r0
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     de4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     de8:	4d06      	ldr	r5, [pc, #24]	; (e04 <VZpeakTick+0x24>)
     dea:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     dee:	4628      	mov	r0, r5
     df0:	f006 fcce 	bl	7790 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
     df4:	ed94 0a00 	vldr	s0, [r4]
     df8:	4628      	mov	r0, r5
     dfa:	f006 fc6d 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
     dfe:	ed84 0a00 	vstr	s0, [r4]
}
     e02:	bd38      	pop	{r3, r4, r5, pc}
     e04:	200009c4 	.word	0x200009c4
     e08:	f3af 8000 	nop.w
     e0c:	f3af 8000 	nop.w
     e10:	f3af 8000 	nop.w
     e14:	f3af 8000 	nop.w
     e18:	f3af 8000 	nop.w
     e1c:	f3af 8000 	nop.w

00000e20 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
     e20:	b538      	push	{r3, r4, r5, lr}
     e22:	4604      	mov	r4, r0
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     e24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     e28:	4d06      	ldr	r5, [pc, #24]	; (e44 <VZlowshelfTick+0x24>)
     e2a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     e2e:	4628      	mov	r0, r5
     e30:	f006 fcae 	bl	7790 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
     e34:	ed94 0a00 	vldr	s0, [r4]
     e38:	4628      	mov	r0, r5
     e3a:	f006 fc4d 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
     e3e:	ed84 0a00 	vstr	s0, [r4]
}
     e42:	bd38      	pop	{r3, r4, r5, pc}
     e44:	200009b4 	.word	0x200009b4
     e48:	f3af 8000 	nop.w
     e4c:	f3af 8000 	nop.w
     e50:	f3af 8000 	nop.w
     e54:	f3af 8000 	nop.w
     e58:	f3af 8000 	nop.w
     e5c:	f3af 8000 	nop.w

00000e60 <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
     e60:	b538      	push	{r3, r4, r5, lr}
     e62:	4604      	mov	r4, r0
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     e64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     e68:	4d06      	ldr	r5, [pc, #24]	; (e84 <VZhighshelfTick+0x24>)
     e6a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     e6e:	4628      	mov	r0, r5
     e70:	f006 fc8e 	bl	7790 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
     e74:	ed94 0a00 	vldr	s0, [r4]
     e78:	4628      	mov	r0, r5
     e7a:	f006 fc2d 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
     e7e:	ed84 0a00 	vstr	s0, [r4]
}
     e82:	bd38      	pop	{r3, r4, r5, pc}
     e84:	200009a4 	.word	0x200009a4
     e88:	f3af 8000 	nop.w
     e8c:	f3af 8000 	nop.w
     e90:	f3af 8000 	nop.w
     e94:	f3af 8000 	nop.w
     e98:	f3af 8000 	nop.w
     e9c:	f3af 8000 	nop.w

00000ea0 <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     ea4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ea8:	0096      	lsls	r6, r2, #2
     eaa:	4d0b      	ldr	r5, [pc, #44]	; (ed8 <VZbandrejectTick+0x38>)
     eac:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     eb0:	4628      	mov	r0, r5
     eb2:	f006 fc6d 	bl	7790 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     eb6:	ed94 0a00 	vldr	s0, [r4]
     eba:	4628      	mov	r0, r5
     ebc:	f006 fc0c 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
     ec0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
     ec4:	4b05      	ldr	r3, [pc, #20]	; (edc <VZbandrejectTick+0x3c>)
     ec6:	4433      	add	r3, r6
     ec8:	edd3 7a00 	vldr	s15, [r3]
     ecc:	ee20 0a27 	vmul.f32	s0, s0, s15
     ed0:	ed84 0a00 	vstr	s0, [r4]
}
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	bf00      	nop
     ed8:	20000994 	.word	0x20000994
     edc:	20005198 	.word	0x20005198

00000ee0 <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	4604      	mov	r4, r0
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     ee4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ee8:	0096      	lsls	r6, r2, #2
     eea:	4d0b      	ldr	r5, [pc, #44]	; (f18 <LadderLowpassTick+0x38>)
     eec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
     ef0:	4628      	mov	r0, r5
     ef2:	f006 fbd1 	bl	7698 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     ef6:	ed94 0a00 	vldr	s0, [r4]
     efa:	4628      	mov	r0, r5
     efc:	f006 fc5c 	bl	77b8 <__tLadderFilter_tick_veneer>
     f00:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
     f04:	4b05      	ldr	r3, [pc, #20]	; (f1c <LadderLowpassTick+0x3c>)
     f06:	4433      	add	r3, r6
     f08:	edd3 7a00 	vldr	s15, [r3]
     f0c:	ee20 0a27 	vmul.f32	s0, s0, s15
     f10:	ed84 0a00 	vstr	s0, [r4]
}
     f14:	bd70      	pop	{r4, r5, r6, pc}
     f16:	bf00      	nop
     f18:	20000984 	.word	0x20000984
     f1c:	20005198 	.word	0x20005198

00000f20 <setFreqMultPitch>:




void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
     f20:	b538      	push	{r3, r4, r5, lr}
     f22:	eef0 0a40 	vmov.f32	s1, s0
     f26:	4605      	mov	r5, r0
     f28:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     f2a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     f2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     f32:	3320      	adds	r3, #32
     f34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
     f38:	440b      	add	r3, r1
     f3a:	3302      	adds	r3, #2
     f3c:	4a0c      	ldr	r2, [pc, #48]	; (f70 <setFreqMultPitch+0x50>)
     f3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f42:	ed93 7a00 	vldr	s14, [r3]
     f46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
     f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f52:	dd01      	ble.n	f58 <setFreqMultPitch+0x38>
	{
		pitch = roundf(pitch);
     f54:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
     f58:	ed9f 0a06 	vldr	s0, [pc, #24]	; f74 <setFreqMultPitch+0x54>
     f5c:	f006 fca0 	bl	78a0 <__powf_veneer>
     f60:	eb04 0445 	add.w	r4, r4, r5, lsl #1
     f64:	4904      	ldr	r1, [pc, #16]	; (f78 <setFreqMultPitch+0x58>)
     f66:	eb01 0484 	add.w	r4, r1, r4, lsl #2
     f6a:	ed84 0a00 	vstr	s0, [r4]

}
     f6e:	bd38      	pop	{r3, r4, r5, pc}
     f70:	20019798 	.word	0x20019798
     f74:	3f879c7d 	.word	0x3f879c7d
     f78:	200051c8 	.word	0x200051c8
     f7c:	f3af 8000 	nop.w

00000f80 <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     f80:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     f84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     f88:	3320      	adds	r3, #32
     f8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
     f8e:	440b      	add	r3, r1
     f90:	3302      	adds	r3, #2
     f92:	4a17      	ldr	r2, [pc, #92]	; (ff0 <setFreqMultHarm+0x70>)
     f94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f98:	ed93 7a00 	vldr	s14, [r3]
     f9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
     fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fa8:	dd01      	ble.n	fae <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
     faa:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
     fae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
     fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fb6:	db0b      	blt.n	fd0 <setFreqMultHarm+0x50>
	{
		freqMult[osc][string] = (harm + 1);
     fb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     fbc:	ee30 0a27 	vadd.f32	s0, s0, s15
     fc0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
     fc4:	480b      	ldr	r0, [pc, #44]	; (ff4 <setFreqMultHarm+0x74>)
     fc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     fca:	ed81 0a00 	vstr	s0, [r1]
     fce:	4770      	bx	lr
	}
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
     fd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     fd4:	ee30 0a67 	vsub.f32	s0, s0, s15
     fd8:	eeb0 0ac0 	vabs.f32	s0, s0
     fdc:	ee87 7a80 	vdiv.f32	s14, s15, s0
     fe0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
     fe4:	4803      	ldr	r0, [pc, #12]	; (ff4 <setFreqMultHarm+0x74>)
     fe6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     fea:	ed81 7a00 	vstr	s14, [r1]
	}

}
     fee:	4770      	bx	lr
     ff0:	20019798 	.word	0x20019798
     ff4:	200051c8 	.word	0x200051c8
     ff8:	f3af 8000 	nop.w
     ffc:	f3af 8000 	nop.w

00001000 <lowpassSetQ>:




void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    1000:	b508      	push	{r3, lr}
    tSVF_setQ(&lowpass[v][string], q);
    1002:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1006:	4803      	ldr	r0, [pc, #12]	; (1014 <lowpassSetQ+0x14>)
    1008:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    100c:	f006 fc50 	bl	78b0 <__tSVF_setQ_veneer>
}
    1010:	bd08      	pop	{r3, pc}
    1012:	bf00      	nop
    1014:	200054e0 	.word	0x200054e0
    1018:	f3af 8000 	nop.w
    101c:	f3af 8000 	nop.w

00001020 <highpassSetQ>:

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    1020:	b508      	push	{r3, lr}
    tSVF_setQ(&highpass[v][string], q);
    1022:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1026:	4803      	ldr	r0, [pc, #12]	; (1034 <highpassSetQ+0x14>)
    1028:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    102c:	f006 fc40 	bl	78b0 <__tSVF_setQ_veneer>
}
    1030:	bd08      	pop	{r3, pc}
    1032:	bf00      	nop
    1034:	2000524c 	.word	0x2000524c
    1038:	f3af 8000 	nop.w
    103c:	f3af 8000 	nop.w

00001040 <bandpassSetQ>:

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    1040:	b508      	push	{r3, lr}
    tSVF_setQ(&bandpass[v][string], q);
    1042:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1046:	4803      	ldr	r0, [pc, #12]	; (1054 <bandpassSetQ+0x14>)
    1048:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    104c:	f006 fc30 	bl	78b0 <__tSVF_setQ_veneer>
}
    1050:	bd08      	pop	{r3, pc}
    1052:	bf00      	nop
    1054:	20000afc 	.word	0x20000afc
    1058:	f3af 8000 	nop.w
    105c:	f3af 8000 	nop.w

00001060 <diodeLowpassSetQ>:

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
    1060:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    1062:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1066:	4803      	ldr	r0, [pc, #12]	; (1074 <diodeLowpassSetQ+0x14>)
    1068:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    106c:	f006 fbc8 	bl	7800 <__tDiodeFilter_setQ_veneer>
}
    1070:	bd08      	pop	{r3, pc}
    1072:	bf00      	nop
    1074:	20005138 	.word	0x20005138
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <VZpeakSetQ>:

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
    1080:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
    1082:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1086:	4803      	ldr	r0, [pc, #12]	; (1094 <VZpeakSetQ+0x14>)
    1088:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    108c:	f006 fadc 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    1090:	bd08      	pop	{r3, pc}
    1092:	bf00      	nop
    1094:	200009c4 	.word	0x200009c4
    1098:	f3af 8000 	nop.w
    109c:	f3af 8000 	nop.w

000010a0 <VZlowshelfSetQ>:

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
    10a0:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
    10a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    10a6:	4803      	ldr	r0, [pc, #12]	; (10b4 <VZlowshelfSetQ+0x14>)
    10a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    10ac:	f006 facc 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    10b0:	bd08      	pop	{r3, pc}
    10b2:	bf00      	nop
    10b4:	200009b4 	.word	0x200009b4
    10b8:	f3af 8000 	nop.w
    10bc:	f3af 8000 	nop.w

000010c0 <VZhighshelfSetQ>:

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
    10c0:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
    10c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    10c6:	4803      	ldr	r0, [pc, #12]	; (10d4 <VZhighshelfSetQ+0x14>)
    10c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    10cc:	f006 fabc 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    10d0:	bd08      	pop	{r3, pc}
    10d2:	bf00      	nop
    10d4:	200009a4 	.word	0x200009a4
    10d8:	f3af 8000 	nop.w
    10dc:	f3af 8000 	nop.w

000010e0 <VZbandrejectSetQ>:

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
    10e0:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    10e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    10e6:	4803      	ldr	r0, [pc, #12]	; (10f4 <VZbandrejectSetQ+0x14>)
    10e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    10ec:	f006 faac 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    10f0:	bd08      	pop	{r3, pc}
    10f2:	bf00      	nop
    10f4:	20000994 	.word	0x20000994
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <LadderLowpassSetQ>:

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
    1100:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    1102:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1106:	4803      	ldr	r0, [pc, #12]	; (1114 <LadderLowpassSetQ+0x14>)
    1108:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    110c:	f006 fa3c 	bl	7588 <__tLadderFilter_setQ_veneer>
}
    1110:	bd08      	pop	{r3, pc}
    1112:	bf00      	nop
    1114:	20000984 	.word	0x20000984
    1118:	f3af 8000 	nop.w
    111c:	f3af 8000 	nop.w

00001120 <lowpassSetGain>:

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    1120:	b538      	push	{r3, r4, r5, lr}
    1122:	4605      	mov	r5, r0
    1124:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1126:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    112a:	ee20 0a27 	vmul.f32	s0, s0, s15
    112e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    1132:	ee30 0a67 	vsub.f32	s0, s0, s15
    1136:	f006 fb4f 	bl	77d8 <__fasterdbtoa_veneer>
    113a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    113e:	4903      	ldr	r1, [pc, #12]	; (114c <lowpassSetGain+0x2c>)
    1140:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1144:	ed84 0a00 	vstr	s0, [r4]
}
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop
    114c:	20005198 	.word	0x20005198
    1150:	f3af 8000 	nop.w
    1154:	f3af 8000 	nop.w
    1158:	f3af 8000 	nop.w
    115c:	f3af 8000 	nop.w

00001160 <highpassSetGain>:

void __ATTR_ITCMRAM  highpassSetGain(float gain, int v, int string)
{
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4605      	mov	r5, r0
    1164:	460c      	mov	r4, r1
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1166:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    116a:	ee20 0a27 	vmul.f32	s0, s0, s15
    116e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    1172:	ee30 0a67 	vsub.f32	s0, s0, s15
    1176:	f006 fb2f 	bl	77d8 <__fasterdbtoa_veneer>
    117a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    117e:	4903      	ldr	r1, [pc, #12]	; (118c <highpassSetGain+0x2c>)
    1180:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1184:	ed84 0a00 	vstr	s0, [r4]
}
    1188:	bd38      	pop	{r3, r4, r5, pc}
    118a:	bf00      	nop
    118c:	20005198 	.word	0x20005198
    1190:	f3af 8000 	nop.w
    1194:	f3af 8000 	nop.w
    1198:	f3af 8000 	nop.w
    119c:	f3af 8000 	nop.w

000011a0 <bandpassSetGain>:

void __ATTR_ITCMRAM  bandpassSetGain(float gain, int v, int string)
{
    11a0:	b538      	push	{r3, r4, r5, lr}
    11a2:	4605      	mov	r5, r0
    11a4:	460c      	mov	r4, r1
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    11a6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    11aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    11ae:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    11b2:	ee30 0a67 	vsub.f32	s0, s0, s15
    11b6:	f006 fb0f 	bl	77d8 <__fasterdbtoa_veneer>
    11ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11be:	4903      	ldr	r1, [pc, #12]	; (11cc <bandpassSetGain+0x2c>)
    11c0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    11c4:	ed84 0a00 	vstr	s0, [r4]
}
    11c8:	bd38      	pop	{r3, r4, r5, pc}
    11ca:	bf00      	nop
    11cc:	20005198 	.word	0x20005198
    11d0:	f3af 8000 	nop.w
    11d4:	f3af 8000 	nop.w
    11d8:	f3af 8000 	nop.w
    11dc:	f3af 8000 	nop.w

000011e0 <diodeLowpassSetGain>:

void __ATTR_ITCMRAM  diodeLowpassSetGain(float gain, int v, int string)
{
    11e0:	b538      	push	{r3, r4, r5, lr}
    11e2:	4605      	mov	r5, r0
    11e4:	460c      	mov	r4, r1
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    11e6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    11ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    11ee:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    11f2:	ee30 0a67 	vsub.f32	s0, s0, s15
    11f6:	f006 faef 	bl	77d8 <__fasterdbtoa_veneer>
    11fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11fe:	4903      	ldr	r1, [pc, #12]	; (120c <diodeLowpassSetGain+0x2c>)
    1200:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1204:	ed84 0a00 	vstr	s0, [r4]
}
    1208:	bd38      	pop	{r3, r4, r5, pc}
    120a:	bf00      	nop
    120c:	20005198 	.word	0x20005198
    1210:	f3af 8000 	nop.w
    1214:	f3af 8000 	nop.w
    1218:	f3af 8000 	nop.w
    121c:	f3af 8000 	nop.w

00001220 <VZpeakSetGain>:

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
    1220:	b510      	push	{r4, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1222:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1226:	4c08      	ldr	r4, [pc, #32]	; (1248 <VZpeakSetGain+0x28>)
    1228:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    122c:	eddf 7a07 	vldr	s15, [pc, #28]	; 124c <VZpeakSetGain+0x2c>
    1230:	ee20 0a27 	vmul.f32	s0, s0, s15
    1234:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    1238:	ee30 0a67 	vsub.f32	s0, s0, s15
    123c:	f006 facc 	bl	77d8 <__fasterdbtoa_veneer>
    1240:	4620      	mov	r0, r4
    1242:	f006 fad1 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    1246:	bd10      	pop	{r4, pc}
    1248:	200009c4 	.word	0x200009c4
    124c:	42480000 	.word	0x42480000
    1250:	f3af 8000 	nop.w
    1254:	f3af 8000 	nop.w
    1258:	f3af 8000 	nop.w
    125c:	f3af 8000 	nop.w

00001260 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
    1260:	b510      	push	{r4, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1262:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1266:	4c08      	ldr	r4, [pc, #32]	; (1288 <VZlowshelfSetGain+0x28>)
    1268:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    126c:	eddf 7a07 	vldr	s15, [pc, #28]	; 128c <VZlowshelfSetGain+0x2c>
    1270:	ee20 0a27 	vmul.f32	s0, s0, s15
    1274:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    1278:	ee30 0a67 	vsub.f32	s0, s0, s15
    127c:	f006 faac 	bl	77d8 <__fasterdbtoa_veneer>
    1280:	4620      	mov	r0, r4
    1282:	f006 fab1 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    1286:	bd10      	pop	{r4, pc}
    1288:	200009b4 	.word	0x200009b4
    128c:	42480000 	.word	0x42480000
    1290:	f3af 8000 	nop.w
    1294:	f3af 8000 	nop.w
    1298:	f3af 8000 	nop.w
    129c:	f3af 8000 	nop.w

000012a0 <VZhighshelfSetGain>:

void __ATTR_ITCMRAM  VZhighshelfSetGain(float gain, int v, int string)
{
    12a0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    12a6:	4c08      	ldr	r4, [pc, #32]	; (12c8 <VZhighshelfSetGain+0x28>)
    12a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    12ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 12cc <VZhighshelfSetGain+0x2c>
    12b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    12b4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    12b8:	ee30 0a67 	vsub.f32	s0, s0, s15
    12bc:	f006 fa8c 	bl	77d8 <__fasterdbtoa_veneer>
    12c0:	4620      	mov	r0, r4
    12c2:	f006 fa91 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    12c6:	bd10      	pop	{r4, pc}
    12c8:	200009b4 	.word	0x200009b4
    12cc:	42480000 	.word	0x42480000
    12d0:	f3af 8000 	nop.w
    12d4:	f3af 8000 	nop.w
    12d8:	f3af 8000 	nop.w
    12dc:	f3af 8000 	nop.w

000012e0 <VZbandrejectSetGain>:

void  __ATTR_ITCMRAM VZbandrejectSetGain(float gain, int v, int string)
{
    12e0:	b538      	push	{r3, r4, r5, lr}
    12e2:	4605      	mov	r5, r0
    12e4:	460c      	mov	r4, r1
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    12e6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    12ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    12ee:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    12f2:	ee30 0a67 	vsub.f32	s0, s0, s15
    12f6:	f006 fa6f 	bl	77d8 <__fasterdbtoa_veneer>
    12fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    12fe:	4903      	ldr	r1, [pc, #12]	; (130c <VZbandrejectSetGain+0x2c>)
    1300:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1304:	ed84 0a00 	vstr	s0, [r4]
}
    1308:	bd38      	pop	{r3, r4, r5, pc}
    130a:	bf00      	nop
    130c:	20005198 	.word	0x20005198
    1310:	f3af 8000 	nop.w
    1314:	f3af 8000 	nop.w
    1318:	f3af 8000 	nop.w
    131c:	f3af 8000 	nop.w

00001320 <LadderLowpassSetGain>:

void  __ATTR_ITCMRAM  LadderLowpassSetGain(float gain, int v, int string)
{
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4605      	mov	r5, r0
    1324:	460c      	mov	r4, r1
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1326:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    132a:	ee20 0a27 	vmul.f32	s0, s0, s15
    132e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    1332:	ee30 0a67 	vsub.f32	s0, s0, s15
    1336:	f006 fa4f 	bl	77d8 <__fasterdbtoa_veneer>
    133a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    133e:	4903      	ldr	r1, [pc, #12]	; (134c <LadderLowpassSetGain+0x2c>)
    1340:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    1344:	ed84 0a00 	vstr	s0, [r4]
}
    1348:	bd38      	pop	{r3, r4, r5, pc}
    134a:	bf00      	nop
    134c:	20005198 	.word	0x20005198
    1350:	f3af 8000 	nop.w
    1354:	f3af 8000 	nop.w
    1358:	f3af 8000 	nop.w
    135c:	f3af 8000 	nop.w

00001360 <envelope_tick>:

uint32_t timeEnv = 0;
void __ATTR_ITCMRAM envelope_tick(int string)
{
    1360:	b570      	push	{r4, r5, r6, lr}
    1362:	4605      	mov	r5, r0
	interruptChecker = 0;
    1364:	2400      	movs	r4, #0
    1366:	4b0f      	ldr	r3, [pc, #60]	; (13a4 <envelope_tick+0x44>)
    1368:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    136a:	4b0f      	ldr	r3, [pc, #60]	; (13a8 <envelope_tick+0x48>)
    136c:	685e      	ldr	r6, [r3, #4]

	for (int v = 0; v < NUM_ENV; v++)
    136e:	e010      	b.n	1392 <envelope_tick+0x32>
	{
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
    1370:	eb05 0044 	add.w	r0, r5, r4, lsl #1
    1374:	4b0d      	ldr	r3, [pc, #52]	; (13ac <envelope_tick+0x4c>)
    1376:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    137a:	f006 fa71 	bl	7860 <__tADSRT_tickNoInterp_veneer>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    137e:	f104 0314 	add.w	r3, r4, #20
    1382:	eb05 0243 	add.w	r2, r5, r3, lsl #1
    1386:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <envelope_tick+0x50>)
    1388:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    138c:	ed83 0a00 	vstr	s0, [r3]
	for (int v = 0; v < NUM_ENV; v++)
    1390:	3401      	adds	r4, #1
    1392:	2c03      	cmp	r4, #3
    1394:	ddec      	ble.n	1370 <envelope_tick+0x10>
	}
	timeEnv = DWT->CYCCNT - tempCount1;
    1396:	4b04      	ldr	r3, [pc, #16]	; (13a8 <envelope_tick+0x48>)
    1398:	685b      	ldr	r3, [r3, #4]
    139a:	1b9e      	subs	r6, r3, r6
    139c:	4b05      	ldr	r3, [pc, #20]	; (13b4 <envelope_tick+0x54>)
    139e:	601e      	str	r6, [r3, #0]
}
    13a0:	bd70      	pop	{r4, r5, r6, pc}
    13a2:	bf00      	nop
    13a4:	20016dc5 	.word	0x20016dc5
    13a8:	e0001000 	.word	0xe0001000
    13ac:	20005160 	.word	0x20005160
    13b0:	200147bc 	.word	0x200147bc
    13b4:	20014990 	.word	0x20014990
    13b8:	f3af 8000 	nop.w
    13bc:	f3af 8000 	nop.w

000013c0 <lfo_tick>:

uint32_t timeLFO = 0;
void __ATTR_ITCMRAM lfo_tick(int string)
{
    13c0:	b570      	push	{r4, r5, r6, lr}
    13c2:	b082      	sub	sp, #8
    13c4:	4605      	mov	r5, r0
	interruptChecker = 0;
    13c6:	2400      	movs	r4, #0
    13c8:	4b12      	ldr	r3, [pc, #72]	; (1414 <lfo_tick+0x54>)
    13ca:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    13cc:	4b12      	ldr	r3, [pc, #72]	; (1418 <lfo_tick+0x58>)
    13ce:	685e      	ldr	r6, [r3, #4]
	for (int i = 0; i < NUM_LFOS; i++)
    13d0:	e009      	b.n	13e6 <lfo_tick+0x26>
		float sample = 0.0f;
		if (lfoOn[i])
		{
			lfoShapeTick[i](&sample,i, string);
		}
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    13d2:	f104 0318 	add.w	r3, r4, #24
    13d6:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    13da:	4b10      	ldr	r3, [pc, #64]	; (141c <lfo_tick+0x5c>)
    13dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    13e0:	9a01      	ldr	r2, [sp, #4]
    13e2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_LFOS; i++)
    13e4:	3401      	adds	r4, #1
    13e6:	2c03      	cmp	r4, #3
    13e8:	dc0d      	bgt.n	1406 <lfo_tick+0x46>
		float sample = 0.0f;
    13ea:	2300      	movs	r3, #0
    13ec:	9301      	str	r3, [sp, #4]
		if (lfoOn[i])
    13ee:	4b0c      	ldr	r3, [pc, #48]	; (1420 <lfo_tick+0x60>)
    13f0:	5d1b      	ldrb	r3, [r3, r4]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d0ed      	beq.n	13d2 <lfo_tick+0x12>
			lfoShapeTick[i](&sample,i, string);
    13f6:	4b0b      	ldr	r3, [pc, #44]	; (1424 <lfo_tick+0x64>)
    13f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    13fc:	462a      	mov	r2, r5
    13fe:	4621      	mov	r1, r4
    1400:	a801      	add	r0, sp, #4
    1402:	4798      	blx	r3
    1404:	e7e5      	b.n	13d2 <lfo_tick+0x12>
	}
	timeLFO = DWT->CYCCNT - tempCount1;
    1406:	4b04      	ldr	r3, [pc, #16]	; (1418 <lfo_tick+0x58>)
    1408:	685b      	ldr	r3, [r3, #4]
    140a:	1b9e      	subs	r6, r3, r6
    140c:	4b06      	ldr	r3, [pc, #24]	; (1428 <lfo_tick+0x68>)
    140e:	601e      	str	r6, [r3, #0]
}
    1410:	b002      	add	sp, #8
    1412:	bd70      	pop	{r4, r5, r6, pc}
    1414:	20016dc5 	.word	0x20016dc5
    1418:	e0001000 	.word	0xe0001000
    141c:	200147bc 	.word	0x200147bc
    1420:	20005404 	.word	0x20005404
    1424:	20005468 	.word	0x20005468
    1428:	2001499c 	.word	0x2001499c
    142c:	f3af 8000 	nop.w
    1430:	f3af 8000 	nop.w
    1434:	f3af 8000 	nop.w
    1438:	f3af 8000 	nop.w
    143c:	f3af 8000 	nop.w

00001440 <setEnvelopeAttack>:


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
    1440:	b508      	push	{r3, lr}
	a = a + 0.01f;
	tADSRT_setAttack(&envs[v][string], a);
    1442:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1446:	eddf 7a05 	vldr	s15, [pc, #20]	; 145c <setEnvelopeAttack+0x1c>
    144a:	ee30 0a27 	vadd.f32	s0, s0, s15
    144e:	4804      	ldr	r0, [pc, #16]	; (1460 <setEnvelopeAttack+0x20>)
    1450:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1454:	f006 f9a8 	bl	77a8 <__tADSRT_setAttack_veneer>
}
    1458:	bd08      	pop	{r3, pc}
    145a:	bf00      	nop
    145c:	3c23d70a 	.word	0x3c23d70a
    1460:	20005160 	.word	0x20005160
    1464:	f3af 8000 	nop.w
    1468:	f3af 8000 	nop.w
    146c:	f3af 8000 	nop.w
    1470:	f3af 8000 	nop.w
    1474:	f3af 8000 	nop.w
    1478:	f3af 8000 	nop.w
    147c:	f3af 8000 	nop.w

00001480 <setEnvelopeDecay>:

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
    1480:	b508      	push	{r3, lr}
	d = d + 0.01f;
	tADSRT_setDecay(&envs[v][string], d);
    1482:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1486:	eddf 7a05 	vldr	s15, [pc, #20]	; 149c <setEnvelopeDecay+0x1c>
    148a:	ee30 0a27 	vadd.f32	s0, s0, s15
    148e:	4804      	ldr	r0, [pc, #16]	; (14a0 <setEnvelopeDecay+0x20>)
    1490:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1494:	f006 f9dc 	bl	7850 <__tADSRT_setDecay_veneer>
}
    1498:	bd08      	pop	{r3, pc}
    149a:	bf00      	nop
    149c:	3c23d70a 	.word	0x3c23d70a
    14a0:	20005160 	.word	0x20005160
    14a4:	f3af 8000 	nop.w
    14a8:	f3af 8000 	nop.w
    14ac:	f3af 8000 	nop.w
    14b0:	f3af 8000 	nop.w
    14b4:	f3af 8000 	nop.w
    14b8:	f3af 8000 	nop.w
    14bc:	f3af 8000 	nop.w

000014c0 <setEnvelopeSustain>:

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
    14c0:	b508      	push	{r3, lr}
	tADSRT_setSustain(&envs[v][string], s);
    14c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    14c6:	4803      	ldr	r0, [pc, #12]	; (14d4 <setEnvelopeSustain+0x14>)
    14c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    14cc:	f006 f9d8 	bl	7880 <__tADSRT_setSustain_veneer>
}
    14d0:	bd08      	pop	{r3, pc}
    14d2:	bf00      	nop
    14d4:	20005160 	.word	0x20005160
    14d8:	f3af 8000 	nop.w
    14dc:	f3af 8000 	nop.w

000014e0 <setEnvelopeRelease>:

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
    14e0:	b508      	push	{r3, lr}
	r = r + 0.01f;
	tADSRT_setRelease(&envs[v][string], r);
    14e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    14e6:	eddf 7a05 	vldr	s15, [pc, #20]	; 14fc <setEnvelopeRelease+0x1c>
    14ea:	ee30 0a27 	vadd.f32	s0, s0, s15
    14ee:	4804      	ldr	r0, [pc, #16]	; (1500 <setEnvelopeRelease+0x20>)
    14f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    14f4:	f006 f8cc 	bl	7690 <__tADSRT_setRelease_veneer>
}
    14f8:	bd08      	pop	{r3, pc}
    14fa:	bf00      	nop
    14fc:	3c23d70a 	.word	0x3c23d70a
    1500:	20005160 	.word	0x20005160
    1504:	f3af 8000 	nop.w
    1508:	f3af 8000 	nop.w
    150c:	f3af 8000 	nop.w
    1510:	f3af 8000 	nop.w
    1514:	f3af 8000 	nop.w
    1518:	f3af 8000 	nop.w
    151c:	f3af 8000 	nop.w

00001520 <setEnvelopeLeak>:

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
    1520:	b508      	push	{r3, lr}
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    1522:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1526:	ee77 7ac0 	vsub.f32	s15, s15, s0
    152a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 154c <setEnvelopeLeak+0x2c>
    152e:	ee67 7a80 	vmul.f32	s15, s15, s0
    1532:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1536:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1550 <setEnvelopeLeak+0x30>
    153a:	ee37 0a80 	vadd.f32	s0, s15, s0
    153e:	4805      	ldr	r0, [pc, #20]	; (1554 <setEnvelopeLeak+0x34>)
    1540:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1544:	f006 f824 	bl	7590 <__tADSRT_setLeakFactor_veneer>
}
    1548:	bd08      	pop	{r3, pc}
    154a:	bf00      	nop
    154c:	3851b717 	.word	0x3851b717
    1550:	3f7ffcb9 	.word	0x3f7ffcb9
    1554:	20005160 	.word	0x20005160
    1558:	f3af 8000 	nop.w
    155c:	f3af 8000 	nop.w

00001560 <setAmp>:

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
    1560:	4b02      	ldr	r3, [pc, #8]	; (156c <setAmp+0xc>)
    1562:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1566:	ed83 0a00 	vstr	s0, [r3]
}
    156a:	4770      	bx	lr
    156c:	20000af4 	.word	0x20000af4
    1570:	f3af 8000 	nop.w
    1574:	f3af 8000 	nop.w
    1578:	f3af 8000 	nop.w
    157c:	f3af 8000 	nop.w

00001580 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
    1580:	4b02      	ldr	r3, [pc, #8]	; (158c <setMaster+0xc>)
    1582:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1586:	ed83 0a00 	vstr	s0, [r3]
}
    158a:	4770      	bx	lr
    158c:	200051b8 	.word	0x200051b8
    1590:	f3af 8000 	nop.w
    1594:	f3af 8000 	nop.w
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
    15a0:	4b01      	ldr	r3, [pc, #4]	; (15a8 <setTranspose+0x8>)
    15a2:	ed83 0a00 	vstr	s0, [r3]
}
    15a6:	4770      	bx	lr
    15a8:	200149e0 	.word	0x200149e0
    15ac:	f3af 8000 	nop.w
    15b0:	f3af 8000 	nop.w
    15b4:	f3af 8000 	nop.w
    15b8:	f3af 8000 	nop.w
    15bc:	f3af 8000 	nop.w

000015c0 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    15c0:	ee30 0a00 	vadd.f32	s0, s0, s0
    15c4:	eddf 7a05 	vldr	s15, [pc, #20]	; 15dc <setPitchBendRange+0x1c>
    15c8:	ee87 7a80 	vdiv.f32	s14, s15, s0
    15cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    15d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    15d4:	4b02      	ldr	r3, [pc, #8]	; (15e0 <setPitchBendRange+0x20>)
    15d6:	edc3 7a00 	vstr	s15, [r3]
}
    15da:	4770      	bx	lr
    15dc:	467ffc00 	.word	0x467ffc00
    15e0:	20000000 	.word	0x20000000
    15e4:	f3af 8000 	nop.w
    15e8:	f3af 8000 	nop.w
    15ec:	f3af 8000 	nop.w
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
    1600:	b510      	push	{r4, lr}
    1602:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1604:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    1608:	ee30 0a60 	vsub.f32	s0, s0, s1
    160c:	ed9f 1a07 	vldr	s2, [pc, #28]	; 162c <setFinalLowpass+0x2c>
    1610:	eddf 0a07 	vldr	s1, [pc, #28]	; 1630 <setFinalLowpass+0x30>
    1614:	ee60 0a20 	vmul.f32	s1, s0, s1
    1618:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1634 <setFinalLowpass+0x34>
    161c:	f005 fa90 	bl	6b40 <LEAF_clip>
    1620:	4805      	ldr	r0, [pc, #20]	; (1638 <setFinalLowpass+0x38>)
    1622:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1626:	f006 f90f 	bl	7848 <__tSVF_setFreqFast_veneer>
}
    162a:	bd10      	pop	{r4, pc}
    162c:	457ff000 	.word	0x457ff000
    1630:	420fb824 	.word	0x420fb824
    1634:	00000000 	.word	0x00000000
    1638:	200051b0 	.word	0x200051b0
    163c:	f3af 8000 	nop.w

00001640 <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
    1640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1644:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    1648:	2400      	movs	r4, #0
    164a:	4b40      	ldr	r3, [pc, #256]	; (174c <tickMappings+0x10c>)
    164c:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    164e:	4b40      	ldr	r3, [pc, #256]	; (1750 <tickMappings+0x110>)
    1650:	f8d3 9004 	ldr.w	r9, [r3, #4]
	for (int i = 0; i < numMappings; i++)
    1654:	e06a      	b.n	172c <tickMappings+0xec>
					{
						smoothedValue += sum;
					}
					else
					{
						unsmoothedValue += sum;
    1656:	ee38 8a27 	vadd.f32	s16, s16, s15
			for (int j = 0; j < 3; j++)
    165a:	3301      	adds	r3, #1
    165c:	2b02      	cmp	r3, #2
    165e:	dc30      	bgt.n	16c2 <tickMappings+0x82>
				if (mappings[i].hookActive[j])
    1660:	4a3c      	ldr	r2, [pc, #240]	; (1754 <tickMappings+0x114>)
    1662:	214c      	movs	r1, #76	; 0x4c
    1664:	fb01 2204 	mla	r2, r1, r4, r2
    1668:	441a      	add	r2, r3
    166a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    166e:	2a00      	cmp	r2, #0
    1670:	d0f3      	beq.n	165a <tickMappings+0x1a>
					float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1672:	4938      	ldr	r1, [pc, #224]	; (1754 <tickMappings+0x114>)
    1674:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    1678:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    167c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    1680:	4428      	add	r0, r5
    1682:	1c87      	adds	r7, r0, #2
    1684:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
    1688:	edd7 7a00 	vldr	s15, [r7]
    168c:	441a      	add	r2, r3
    168e:	320e      	adds	r2, #14
    1690:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1694:	edd2 6a01 	vldr	s13, [r2, #4]
    1698:	ee67 7aa6 	vmul.f32	s15, s15, s13
    169c:	3008      	adds	r0, #8
    169e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    16a2:	6842      	ldr	r2, [r0, #4]
    16a4:	edd2 6a00 	vldr	s13, [r2]
    16a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
					if (mappings[i].sourceSmoothed[j])
    16ac:	224c      	movs	r2, #76	; 0x4c
    16ae:	fb02 1104 	mla	r1, r2, r4, r1
    16b2:	4419      	add	r1, r3
    16b4:	f891 2020 	ldrb.w	r2, [r1, #32]
    16b8:	2a00      	cmp	r2, #0
    16ba:	d0cc      	beq.n	1656 <tickMappings+0x16>
						smoothedValue += sum;
    16bc:	ee37 7a27 	vadd.f32	s14, s14, s15
    16c0:	e7cb      	b.n	165a <tickMappings+0x1a>
					}
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    16c2:	4f24      	ldr	r7, [pc, #144]	; (1754 <tickMappings+0x114>)
    16c4:	234c      	movs	r3, #76	; 0x4c
    16c6:	fb03 7704 	mla	r7, r3, r4, r7
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    16d0:	ed93 0a00 	vldr	s0, [r3]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    16d4:	eb05 0844 	add.w	r8, r5, r4, lsl #1
    16d8:	4b1f      	ldr	r3, [pc, #124]	; (1758 <tickMappings+0x118>)
    16da:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    16de:	ee30 0a07 	vadd.f32	s0, s0, s14
    16e2:	4640      	mov	r0, r8
    16e4:	f005 f98c 	bl	6a00 <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    16e8:	4640      	mov	r0, r8
    16ea:	f005 f969 	bl	69c0 <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    16ee:	687e      	ldr	r6, [r7, #4]
    16f0:	6933      	ldr	r3, [r6, #16]
    16f2:	ee38 0a00 	vadd.f32	s0, s16, s0
    16f6:	4798      	blx	r3
    16f8:	1cab      	adds	r3, r5, #2
    16fa:	eb06 0883 	add.w	r8, r6, r3, lsl #2
    16fe:	ed88 0a00 	vstr	s0, [r8]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    1702:	687a      	ldr	r2, [r7, #4]
    1704:	6957      	ldr	r7, [r2, #20]
    1706:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    170a:	4629      	mov	r1, r5
    170c:	7e10      	ldrb	r0, [r2, #24]
    170e:	ed93 0a00 	vldr	s0, [r3]
    1712:	47b8      	blx	r7
		for (int v = 0; v < numStringsThisBoard; v++)
    1714:	3501      	adds	r5, #1
    1716:	4b11      	ldr	r3, [pc, #68]	; (175c <tickMappings+0x11c>)
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	42ab      	cmp	r3, r5
    171c:	dd05      	ble.n	172a <tickMappings+0xea>
			for (int j = 0; j < 3; j++)
    171e:	2300      	movs	r3, #0
			float smoothedValue = 0.0f;
    1720:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1760 <tickMappings+0x120>
			float unsmoothedValue = 0.0f;
    1724:	eeb0 8a47 	vmov.f32	s16, s14
    1728:	e798      	b.n	165c <tickMappings+0x1c>
	for (int i = 0; i < numMappings; i++)
    172a:	3401      	adds	r4, #1
    172c:	4b0d      	ldr	r3, [pc, #52]	; (1764 <tickMappings+0x124>)
    172e:	781b      	ldrb	r3, [r3, #0]
    1730:	42a3      	cmp	r3, r4
    1732:	dd01      	ble.n	1738 <tickMappings+0xf8>
		for (int v = 0; v < numStringsThisBoard; v++)
    1734:	2500      	movs	r5, #0
    1736:	e7ee      	b.n	1716 <tickMappings+0xd6>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
    1738:	4b05      	ldr	r3, [pc, #20]	; (1750 <tickMappings+0x110>)
    173a:	685b      	ldr	r3, [r3, #4]
    173c:	eba3 0609 	sub.w	r6, r3, r9
    1740:	4b09      	ldr	r3, [pc, #36]	; (1768 <tickMappings+0x128>)
    1742:	601e      	str	r6, [r3, #0]

}
    1744:	ecbd 8b02 	vpop	{d8}
    1748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    174c:	20016dc5 	.word	0x20016dc5
    1750:	e0001000 	.word	0xe0001000
    1754:	20018dfc 	.word	0x20018dfc
    1758:	200054f4 	.word	0x200054f4
    175c:	20000052 	.word	0x20000052
    1760:	00000000 	.word	0x00000000
    1764:	20019788 	.word	0x20019788
    1768:	200149a0 	.word	0x200149a0
    176c:	f3af 8000 	nop.w
    1770:	f3af 8000 	nop.w
    1774:	f3af 8000 	nop.w
    1778:	f3af 8000 	nop.w
    177c:	f3af 8000 	nop.w

00001780 <audioTickString>:




float __ATTR_ITCMRAM audioTickString(void)
{
    1780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1784:	ed2d 8b06 	vpush	{d8-d10}
    1788:	af00      	add	r7, sp, #0
	float temp = 0.0f;
	float note[numStringsThisBoard];
    178a:	4b74      	ldr	r3, [pc, #464]	; (195c <audioTickString+0x1dc>)
    178c:	781b      	ldrb	r3, [r3, #0]
    178e:	009b      	lsls	r3, r3, #2
    1790:	3307      	adds	r3, #7
    1792:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    1796:	ebad 0d03 	sub.w	sp, sp, r3
    179a:	466e      	mov	r6, sp

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    179c:	4870      	ldr	r0, [pc, #448]	; (1960 <audioTickString+0x1e0>)
    179e:	f005 f90f 	bl	69c0 <tExpSmooth_tick>
    17a2:	eeb0 aa40 	vmov.f32	s20, s0

	for (int i = 0; i < 12; i++)
    17a6:	2400      	movs	r4, #0
    17a8:	e00a      	b.n	17c0 <audioTickString+0x40>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    17aa:	00a5      	lsls	r5, r4, #2
    17ac:	486d      	ldr	r0, [pc, #436]	; (1964 <audioTickString+0x1e4>)
    17ae:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    17b2:	f005 f905 	bl	69c0 <tExpSmooth_tick>
    17b6:	4b6c      	ldr	r3, [pc, #432]	; (1968 <audioTickString+0x1e8>)
    17b8:	442b      	add	r3, r5
    17ba:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    17be:	3401      	adds	r4, #1
    17c0:	2c0b      	cmp	r4, #11
    17c2:	ddf2      	ble.n	17aa <audioTickString+0x2a>
	}
	pluckPos = knobScaled[9];
    17c4:	4b68      	ldr	r3, [pc, #416]	; (1968 <audioTickString+0x1e8>)
    17c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17c8:	4b68      	ldr	r3, [pc, #416]	; (196c <audioTickString+0x1ec>)
    17ca:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < numStringsThisBoard; i++)
    17cc:	2500      	movs	r5, #0
	float temp = 0.0f;
    17ce:	eddf 9a68 	vldr	s19, [pc, #416]	; 1970 <audioTickString+0x1f0>
	for (int i = 0; i < numStringsThisBoard; i++)
    17d2:	e048      	b.n	1866 <audioTickString+0xe6>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
		{
			note[i] = 0.0f;
    17d4:	2200      	movs	r2, #0
    17d6:	601a      	str	r2, [r3, #0]
    17d8:	e05e      	b.n	1898 <audioTickString+0x118>
		}

		float finalFreq = mtof(note[i]) * invMapping[i] ;
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
    17da:	ed9f 9a66 	vldr	s18, [pc, #408]	; 1974 <audioTickString+0x1f4>
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    17de:	4c66      	ldr	r4, [pc, #408]	; (1978 <audioTickString+0x1f8>)
    17e0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    17e4:	f8df 8180 	ldr.w	r8, [pc, #384]	; 1968 <audioTickString+0x1e8>
    17e8:	ed98 0a08 	vldr	s0, [r8, #32]
    17ec:	4620      	mov	r0, r4
    17ee:	f006 f83f 	bl	7870 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    17f2:	eeb0 0a49 	vmov.f32	s0, s18
    17f6:	4620      	mov	r0, r4
    17f8:	f005 ffbe 	bl	7778 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    17fc:	eeb0 0a68 	vmov.f32	s0, s17
    1800:	4620      	mov	r0, r4
    1802:	f005 ff71 	bl	76e8 <__tSimpleLivingString3_setDampFreq_veneer>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
    1806:	ed98 0a00 	vldr	s0, [r8]
    180a:	4620      	mov	r0, r4
    180c:	f005 ff3c 	bl	7688 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
    1810:	ed98 0a01 	vldr	s0, [r8, #4]
    1814:	eddf 8a57 	vldr	s17, [pc, #348]	; 1974 <audioTickString+0x1f4>
    1818:	ee20 0a28 	vmul.f32	s0, s0, s17
    181c:	4620      	mov	r0, r4
    181e:	f005 feff 	bl	7620 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
    1822:	ed98 0a02 	vldr	s0, [r8, #8]
    1826:	ee20 0a28 	vmul.f32	s0, s0, s17
    182a:	4620      	mov	r0, r4
    182c:	f005 fed4 	bl	75d8 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
    1830:	ed98 7a03 	vldr	s14, [r8, #12]
    1834:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1838:	eeb4 7ae7 	vcmpe.f32	s14, s15
    183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1840:	bfcc      	ite	gt
    1842:	2101      	movgt	r1, #1
    1844:	2100      	movle	r1, #0
    1846:	4620      	mov	r0, r4
    1848:	f006 f83e 	bl	78c8 <__tSimpleLivingString3_setLevMode_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    184c:	eeb0 0a48 	vmov.f32	s0, s16
    1850:	4620      	mov	r0, r4
    1852:	f005 fe8d 	bl	7570 <__tSimpleLivingString3_setFreq_veneer>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
    1856:	ed9f 0a46 	vldr	s0, [pc, #280]	; 1970 <audioTickString+0x1f0>
    185a:	4620      	mov	r0, r4
    185c:	f005 ff68 	bl	7730 <__tSimpleLivingString3_tick_veneer>
    1860:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    1864:	3501      	adds	r5, #1
    1866:	4b3d      	ldr	r3, [pc, #244]	; (195c <audioTickString+0x1dc>)
    1868:	781b      	ldrb	r3, [r3, #0]
    186a:	429d      	cmp	r5, r3
    186c:	da40      	bge.n	18f0 <audioTickString+0x170>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    186e:	4b43      	ldr	r3, [pc, #268]	; (197c <audioTickString+0x1fc>)
    1870:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1874:	edd3 7a00 	vldr	s15, [r3]
    1878:	4b41      	ldr	r3, [pc, #260]	; (1980 <audioTickString+0x200>)
    187a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    187e:	ed93 7a00 	vldr	s14, [r3]
    1882:	ee77 7a87 	vadd.f32	s15, s15, s14
    1886:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    188a:	edc3 7a00 	vstr	s15, [r3]
		if (note[i] < 0.0f)
    188e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1896:	d49d      	bmi.n	17d4 <audioTickString+0x54>
		float finalFreq = mtof(note[i]) * invMapping[i] ;
    1898:	00ac      	lsls	r4, r5, #2
    189a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    189e:	ed93 0a00 	vldr	s0, [r3]
    18a2:	f005 ff35 	bl	7710 <__mtof_veneer>
    18a6:	4b37      	ldr	r3, [pc, #220]	; (1984 <audioTickString+0x204>)
    18a8:	4423      	add	r3, r4
    18aa:	edd3 7a00 	vldr	s15, [r3]
    18ae:	ee20 8a27 	vmul.f32	s16, s0, s15
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    18b2:	4b2d      	ldr	r3, [pc, #180]	; (1968 <audioTickString+0x1e8>)
    18b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    18b8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 1988 <audioTickString+0x208>
    18bc:	ee67 7a80 	vmul.f32	s15, s15, s0
    18c0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 198c <audioTickString+0x20c>
    18c4:	ee37 0a80 	vadd.f32	s0, s15, s0
    18c8:	f005 ffb6 	bl	7838 <__faster_mtof_veneer>
    18cc:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
    18d0:	4b2f      	ldr	r3, [pc, #188]	; (1990 <audioTickString+0x210>)
    18d2:	5d5b      	ldrb	r3, [r3, r5]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d080      	beq.n	17da <audioTickString+0x5a>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    18d8:	4b23      	ldr	r3, [pc, #140]	; (1968 <audioTickString+0x1e8>)
    18da:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
    18de:	eddf 7a2d 	vldr	s15, [pc, #180]	; 1994 <audioTickString+0x214>
    18e2:	ee29 9a27 	vmul.f32	s18, s18, s15
    18e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    18ea:	ee39 9a27 	vadd.f32	s18, s18, s15
    18ee:	e776      	b.n	17de <audioTickString+0x5e>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    18f0:	eddf 0a29 	vldr	s1, [pc, #164]	; 1998 <audioTickString+0x218>
    18f4:	ee6a 0a20 	vmul.f32	s1, s20, s1
    18f8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 199c <audioTickString+0x21c>
    18fc:	ed9f 1a28 	vldr	s2, [pc, #160]	; 19a0 <audioTickString+0x220>
    1900:	ee70 0a80 	vadd.f32	s1, s1, s0
    1904:	f005 f91c 	bl	6b40 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    1908:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    190c:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    1910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1914:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1918:	1c5a      	adds	r2, r3, #1
    191a:	f002 017f 	and.w	r1, r2, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    191e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1922:	ee37 7a67 	vsub.f32	s14, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1926:	4a1f      	ldr	r2, [pc, #124]	; (19a4 <audioTickString+0x224>)
    1928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    192c:	ed93 0a00 	vldr	s0, [r3]
    1930:	ee20 7a07 	vmul.f32	s14, s0, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1934:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1938:	ed92 0a00 	vldr	s0, [r2]
    193c:	ee20 0a27 	vmul.f32	s0, s0, s15
    1940:	ee30 0a07 	vadd.f32	s0, s0, s14

	temp *= outVol * 0.5f;
    1944:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1948:	ee20 0a27 	vmul.f32	s0, s0, s15

	return temp;
}
    194c:	ee29 0a80 	vmul.f32	s0, s19, s0
    1950:	46bd      	mov	sp, r7
    1952:	ecbd 8b06 	vpop	{d8-d10}
    1956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    195a:	bf00      	nop
    195c:	20000052 	.word	0x20000052
    1960:	20014a0c 	.word	0x20014a0c
    1964:	20005380 	.word	0x20005380
    1968:	2000530c 	.word	0x2000530c
    196c:	2000018c 	.word	0x2000018c
    1970:	00000000 	.word	0x00000000
    1974:	3dcccccd 	.word	0x3dcccccd
    1978:	200054d8 	.word	0x200054d8
    197c:	2001494c 	.word	0x2001494c
    1980:	20014954 	.word	0x20014954
    1984:	20005300 	.word	0x20005300
    1988:	430c0000 	.word	0x430c0000
    198c:	42700000 	.word	0x42700000
    1990:	200054f0 	.word	0x200054f0
    1994:	44480000 	.word	0x44480000
    1998:	42a00000 	.word	0x42a00000
    199c:	423c0000 	.word	0x423c0000
    19a0:	42fe0000 	.word	0x42fe0000
    19a4:	20000544 	.word	0x20000544
    19a8:	f3af 8000 	nop.w
    19ac:	f3af 8000 	nop.w
    19b0:	f3af 8000 	nop.w
    19b4:	f3af 8000 	nop.w
    19b8:	f3af 8000 	nop.w
    19bc:	f3af 8000 	nop.w

000019c0 <audioTickString2>:



float  __ATTR_ITCMRAM audioTickString2(void)
{
    19c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19c4:	ed2d 8b06 	vpush	{d8-d10}
    19c8:	af00      	add	r7, sp, #0
	float temp = 0.0f;
	float note[numStringsThisBoard];
    19ca:	4ba7      	ldr	r3, [pc, #668]	; (1c68 <audioTickString2+0x2a8>)
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	009b      	lsls	r3, r3, #2
    19d0:	3307      	adds	r3, #7
    19d2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    19d6:	ebad 0d03 	sub.w	sp, sp, r3
    19da:	466e      	mov	r6, sp

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    19dc:	48a3      	ldr	r0, [pc, #652]	; (1c6c <audioTickString2+0x2ac>)
    19de:	f004 ffef 	bl	69c0 <tExpSmooth_tick>
    19e2:	eeb0 8a40 	vmov.f32	s16, s0

	for (int i = 0; i < 12; i++)
    19e6:	2400      	movs	r4, #0
    19e8:	e00a      	b.n	1a00 <audioTickString2+0x40>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    19ea:	00a5      	lsls	r5, r4, #2
    19ec:	48a0      	ldr	r0, [pc, #640]	; (1c70 <audioTickString2+0x2b0>)
    19ee:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    19f2:	f004 ffe5 	bl	69c0 <tExpSmooth_tick>
    19f6:	4b9f      	ldr	r3, [pc, #636]	; (1c74 <audioTickString2+0x2b4>)
    19f8:	442b      	add	r3, r5
    19fa:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    19fe:	3401      	adds	r4, #1
    1a00:	2c0b      	cmp	r4, #11
    1a02:	ddf2      	ble.n	19ea <audioTickString2+0x2a>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
    1a04:	2400      	movs	r4, #0
	float temp = 0.0f;
    1a06:	eddf 8a9c 	vldr	s17, [pc, #624]	; 1c78 <audioTickString2+0x2b8>
    1a0a:	e01d      	b.n	1a48 <audioTickString2+0x88>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
		{
			note[i] = 0.0f;
    1a0c:	2200      	movs	r2, #0
    1a0e:	601a      	str	r2, [r3, #0]
    1a10:	e034      	b.n	1a7c <audioTickString2+0xbc>
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
    1a12:	4b98      	ldr	r3, [pc, #608]	; (1c74 <audioTickString2+0x2b4>)
    1a14:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
    1a18:	4628      	mov	r0, r5
    1a1a:	f005 fe61 	bl	76e0 <__tLivingString2_setPrepIndex_veneer>
    1a1e:	e0d9      	b.n	1bd4 <audioTickString2+0x214>
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
		prevSamp[i] = 0.0f;
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
    1a20:	3301      	adds	r3, #1
    1a22:	2b01      	cmp	r3, #1
    1a24:	dc0d      	bgt.n	1a42 <audioTickString2+0x82>
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
    1a26:	42a3      	cmp	r3, r4
    1a28:	d0fa      	beq.n	1a20 <audioTickString2+0x60>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
    1a2a:	ee68 7a00 	vmul.f32	s15, s16, s0
    1a2e:	4a93      	ldr	r2, [pc, #588]	; (1c7c <audioTickString2+0x2bc>)
    1a30:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1a34:	ed92 7a00 	vldr	s14, [r2]
    1a38:	ee77 7a27 	vadd.f32	s15, s14, s15
    1a3c:	edc2 7a00 	vstr	s15, [r2]
    1a40:	e7ee      	b.n	1a20 <audioTickString2+0x60>
			}
		}


		temp += tempSamp;
    1a42:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    1a46:	3401      	adds	r4, #1
    1a48:	4b87      	ldr	r3, [pc, #540]	; (1c68 <audioTickString2+0x2a8>)
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	429c      	cmp	r4, r3
    1a4e:	f280 80cd 	bge.w	1bec <audioTickString2+0x22c>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1a52:	4b8b      	ldr	r3, [pc, #556]	; (1c80 <audioTickString2+0x2c0>)
    1a54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1a58:	edd3 7a00 	vldr	s15, [r3]
    1a5c:	4b89      	ldr	r3, [pc, #548]	; (1c84 <audioTickString2+0x2c4>)
    1a5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1a62:	ed93 7a00 	vldr	s14, [r3]
    1a66:	ee77 7a87 	vadd.f32	s15, s15, s14
    1a6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    1a6e:	edc3 7a00 	vstr	s15, [r3]
		if (note[i] < 0.0f)
    1a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a7a:	d4c7      	bmi.n	1a0c <audioTickString2+0x4c>
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1a7c:	4d82      	ldr	r5, [pc, #520]	; (1c88 <audioTickString2+0x2c8>)
    1a7e:	4628      	mov	r0, r5
    1a80:	f005 fe12 	bl	76a8 <__tNoise_tick_veneer>
    1a84:	f8df b248 	ldr.w	fp, [pc, #584]	; 1cd0 <audioTickString2+0x310>
    1a88:	4658      	mov	r0, fp
    1a8a:	f005 fe25 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    1a8e:	eeb0 9a40 	vmov.f32	s18, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1a92:	4628      	mov	r0, r5
    1a94:	f005 fe08 	bl	76a8 <__tNoise_tick_veneer>
    1a98:	f8df a238 	ldr.w	sl, [pc, #568]	; 1cd4 <audioTickString2+0x314>
    1a9c:	4650      	mov	r0, sl
    1a9e:	f005 fe1b 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    1aa2:	ee39 9a00 	vadd.f32	s18, s18, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1aa6:	ea4f 0984 	mov.w	r9, r4, lsl #2
    1aaa:	4878      	ldr	r0, [pc, #480]	; (1c8c <audioTickString2+0x2cc>)
    1aac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1ab0:	f005 fe4a 	bl	7748 <__tADSRT_tick_veneer>
    1ab4:	eef0 9a40 	vmov.f32	s19, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1ab8:	4d75      	ldr	r5, [pc, #468]	; (1c90 <audioTickString2+0x2d0>)
    1aba:	444d      	add	r5, r9
    1abc:	ed9f 0a75 	vldr	s0, [pc, #468]	; 1c94 <audioTickString2+0x2d4>
    1ac0:	4628      	mov	r0, r5
    1ac2:	f005 fdc9 	bl	7658 <__tLivingString2_setPickupPos_veneer>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
    1ac6:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1c74 <audioTickString2+0x2b4>
    1aca:	ed98 0a05 	vldr	s0, [r8, #20]
    1ace:	ed9f aa72 	vldr	s20, [pc, #456]	; 1c98 <audioTickString2+0x2d8>
    1ad2:	ee20 0a0a 	vmul.f32	s0, s0, s20
    1ad6:	f005 feaf 	bl	7838 <__faster_mtof_veneer>
    1ada:	4658      	mov	r0, fp
    1adc:	f005 fd8c 	bl	75f8 <__tVZFilter_setFreq_veneer>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
    1ae0:	ed98 0a06 	vldr	s0, [r8, #24]
    1ae4:	ee20 0a0a 	vmul.f32	s0, s0, s20
    1ae8:	f005 fea6 	bl	7838 <__faster_mtof_veneer>
    1aec:	4650      	mov	r0, sl
    1aee:	f005 fd83 	bl	75f8 <__tVZFilter_setFreq_veneer>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
    1af2:	ed98 0a07 	vldr	s0, [r8, #28]
    1af6:	ed9f aa69 	vldr	s20, [pc, #420]	; 1c9c <audioTickString2+0x2dc>
    1afa:	ee20 0a0a 	vmul.f32	s0, s0, s20
    1afe:	4628      	mov	r0, r5
    1b00:	f005 fe4a 	bl	7798 <__tLivingString2_setLevSmoothFactor_veneer>
		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
    1b04:	ed98 0a08 	vldr	s0, [r8, #32]
    1b08:	ee20 0a0a 	vmul.f32	s0, s0, s20
    1b0c:	4628      	mov	r0, r5
    1b0e:	f005 fdaf 	bl	7670 <__tLivingString2_setLevStrength_veneer>
		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
    1b12:	ed98 0a09 	vldr	s0, [r8, #36]	; 0x24
    1b16:	4628      	mov	r0, r5
    1b18:	f005 fdc2 	bl	76a0 <__tLivingString2_setBrightness_veneer>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
    1b1c:	ed98 0a02 	vldr	s0, [r8, #8]
    1b20:	4628      	mov	r0, r5
    1b22:	f005 fe7d 	bl	7820 <__tLivingString2_setPickPos_veneer>
		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
    1b26:	ed98 0a0b 	vldr	s0, [r8, #44]	; 0x2c
    1b2a:	eddf 7a5d 	vldr	s15, [pc, #372]	; 1ca0 <audioTickString2+0x2e0>
    1b2e:	ee20 0a27 	vmul.f32	s0, s0, s15
    1b32:	ee30 0a0a 	vadd.f32	s0, s0, s20
    1b36:	4628      	mov	r0, r5
    1b38:	f005 fec2 	bl	78c0 <__tLivingString2_setPrepPos_veneer>
		float tempMIDI = note[i];
    1b3c:	eb06 0309 	add.w	r3, r6, r9
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
    1b40:	ed9f 1a58 	vldr	s2, [pc, #352]	; 1ca4 <audioTickString2+0x2e4>
    1b44:	edd3 0a00 	vldr	s1, [r3]
    1b48:	ed9f 0a57 	vldr	s0, [pc, #348]	; 1ca8 <audioTickString2+0x2e8>
    1b4c:	f004 fff8 	bl	6b40 <LEAF_clip>
    1b50:	eddf 7a56 	vldr	s15, [pc, #344]	; 1cac <audioTickString2+0x2ec>
    1b54:	ee60 7a27 	vmul.f32	s15, s0, s15
    1b58:	ed9f 0a55 	vldr	s0, [pc, #340]	; 1cb0 <audioTickString2+0x2f0>
    1b5c:	ee77 7a80 	vadd.f32	s15, s15, s0
		int tempIndexI = (int)tempIndexF;
    1b60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    1b64:	ee17 3a10 	vmov	r3, s14
		tempIndexF = tempIndexF -tempIndexI;
    1b68:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
    1b6c:	ee77 7ac0 	vsub.f32	s15, s15, s0
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1b70:	f3c3 010e 	ubfx	r1, r3, #0, #15
    1b74:	4a4f      	ldr	r2, [pc, #316]	; (1cb4 <audioTickString2+0x2f4>)
    1b76:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    1b7a:	edd1 6a00 	vldr	s13, [r1]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1b7e:	3301      	adds	r3, #1
    1b80:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b88:	ed93 0a00 	vldr	s0, [r3]
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b90:	ee37 7a67 	vsub.f32	s14, s14, s15
    1b94:	ee27 7a26 	vmul.f32	s14, s14, s13
    1b98:	ee67 7a80 	vmul.f32	s15, s15, s0
    1b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
		float finalFreq = freqToSmooth * invMapping[i] ;
    1ba0:	4b45      	ldr	r3, [pc, #276]	; (1cb8 <audioTickString2+0x2f8>)
    1ba2:	4499      	add	r9, r3
    1ba4:	ed99 0a00 	vldr	s0, [r9]
		tLivingString2_setFreq(&strings[i], finalFreq);
    1ba8:	ee20 0a27 	vmul.f32	s0, s0, s15
    1bac:	4628      	mov	r0, r5
    1bae:	f005 fdeb 	bl	7788 <__tLivingString2_setFreq_veneer>
		if (knobScaled[4] > 0.5f)
    1bb2:	ed98 7a04 	vldr	s14, [r8, #16]
    1bb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1bc2:	f77f af26 	ble.w	1a12 <audioTickString2+0x52>
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
    1bc6:	ed98 0a0a 	vldr	s0, [r8, #40]	; 0x28
    1bca:	ee20 0a29 	vmul.f32	s0, s0, s19
    1bce:	4628      	mov	r0, r5
    1bd0:	f005 fd86 	bl	76e0 <__tLivingString2_setPrepIndex_veneer>
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1bd4:	ee29 0a29 	vmul.f32	s0, s18, s19
    1bd8:	4628      	mov	r0, r5
    1bda:	f005 fe45 	bl	7868 <__tLivingString2_tick_veneer>
		prevSamp[i] = 0.0f;
    1bde:	4b27      	ldr	r3, [pc, #156]	; (1c7c <audioTickString2+0x2bc>)
    1be0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1be4:	2200      	movs	r2, #0
    1be6:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
    1be8:	2300      	movs	r3, #0
    1bea:	e71a      	b.n	1a22 <audioTickString2+0x62>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    1bec:	eddf 0a33 	vldr	s1, [pc, #204]	; 1cbc <audioTickString2+0x2fc>
    1bf0:	ee68 0a20 	vmul.f32	s1, s16, s1
    1bf4:	ed9f 0a32 	vldr	s0, [pc, #200]	; 1cc0 <audioTickString2+0x300>
    1bf8:	ed9f 1a32 	vldr	s2, [pc, #200]	; 1cc4 <audioTickString2+0x304>
    1bfc:	ee70 0a80 	vadd.f32	s1, s1, s0
    1c00:	f004 ff9e 	bl	6b40 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    1c04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    1c08:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    1c0c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    1c10:	ee30 0a60 	vsub.f32	s0, s0, s1
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1c14:	1c5a      	adds	r2, r3, #1
    1c16:	f002 017f 	and.w	r1, r2, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    1c1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1c1e:	ee71 7a40 	vsub.f32	s15, s2, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1c22:	4a29      	ldr	r2, [pc, #164]	; (1cc8 <audioTickString2+0x308>)
    1c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c28:	edd3 0a00 	vldr	s1, [r3]
    1c2c:	ee60 7aa7 	vmul.f32	s15, s1, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1c30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1c34:	edd2 0a00 	vldr	s1, [r2]
    1c38:	ee60 0a80 	vmul.f32	s1, s1, s0
    1c3c:	ee70 0aa7 	vadd.f32	s1, s1, s15

	//temp *= outVol;
	temp *= outVol * 0.5f;
    1c40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1c44:	ee60 0aa7 	vmul.f32	s1, s1, s15
    1c48:	ee68 8aa0 	vmul.f32	s17, s17, s1

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    1c4c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 1ccc <audioTickString2+0x30c>
    1c50:	ee68 0aa0 	vmul.f32	s1, s17, s1
    1c54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    1c58:	f004 ff72 	bl	6b40 <LEAF_clip>
}
    1c5c:	46bd      	mov	sp, r7
    1c5e:	ecbd 8b06 	vpop	{d8-d10}
    1c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c66:	bf00      	nop
    1c68:	20000052 	.word	0x20000052
    1c6c:	20014a0c 	.word	0x20014a0c
    1c70:	20005380 	.word	0x20005380
    1c74:	2000530c 	.word	0x2000530c
    1c78:	00000000 	.word	0x00000000
    1c7c:	20005848 	.word	0x20005848
    1c80:	2001494c 	.word	0x2001494c
    1c84:	20014954 	.word	0x20014954
    1c88:	20005638 	.word	0x20005638
    1c8c:	20005180 	.word	0x20005180
    1c90:	2001497c 	.word	0x2001497c
    1c94:	3f7ff972 	.word	0x3f7ff972
    1c98:	43000000 	.word	0x43000000
    1c9c:	3dcccccd 	.word	0x3dcccccd
    1ca0:	3f4ccccd 	.word	0x3f4ccccd
    1ca4:	43480000 	.word	0x43480000
    1ca8:	c3480000 	.word	0xc3480000
    1cac:	42c80000 	.word	0x42c80000
    1cb0:	46800000 	.word	0x46800000
    1cb4:	3001a000 	.word	0x3001a000
    1cb8:	20005300 	.word	0x20005300
    1cbc:	42a00000 	.word	0x42a00000
    1cc0:	423c0000 	.word	0x423c0000
    1cc4:	42fe0000 	.word	0x42fe0000
    1cc8:	20000544 	.word	0x20000544
    1ccc:	3f7ae148 	.word	0x3f7ae148
    1cd0:	20005650 	.word	0x20005650
    1cd4:	20005654 	.word	0x20005654
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <lfoSawSquareTick>:



void __ATTR_ITCMRAM lfoSawSquareTick(float* sample, int v, int string)
{
    1ce0:	b510      	push	{r4, lr}
    1ce2:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    1ce4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1ce8:	4803      	ldr	r0, [pc, #12]	; (1cf8 <lfoSawSquareTick+0x18>)
    1cea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1cee:	f005 fdcf 	bl	7890 <__tSawSquareLFO_tick_veneer>
    1cf2:	ed84 0a00 	vstr	s0, [r4]
}
    1cf6:	bd10      	pop	{r4, pc}
    1cf8:	20005448 	.word	0x20005448
    1cfc:	f3af 8000 	nop.w

00001d00 <lfoSineTriTick>:

void __ATTR_ITCMRAM lfoSineTriTick(float* sample, int v, int string)
{
    1d00:	b510      	push	{r4, lr}
    1d02:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    1d04:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1d08:	4803      	ldr	r0, [pc, #12]	; (1d18 <lfoSineTriTick+0x18>)
    1d0a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1d0e:	f005 fd57 	bl	77c0 <__tSineTriLFO_tick_veneer>
    1d12:	ed84 0a00 	vstr	s0, [r4]
}
    1d16:	bd10      	pop	{r4, pc}
    1d18:	20005498 	.word	0x20005498
    1d1c:	f3af 8000 	nop.w

00001d20 <lfoSineTick>:

void __ATTR_ITCMRAM lfoSineTick(float* sample, int v, int string)
{
    1d20:	b510      	push	{r4, lr}
    1d22:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    1d24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1d28:	4803      	ldr	r0, [pc, #12]	; (1d38 <lfoSineTick+0x18>)
    1d2a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1d2e:	f005 fda3 	bl	7878 <__tCycle_tick_veneer>
    1d32:	ed84 0a00 	vstr	s0, [r4]
}
    1d36:	bd10      	pop	{r4, pc}
    1d38:	20005478 	.word	0x20005478
    1d3c:	f3af 8000 	nop.w

00001d40 <lfoTriTick>:

void __ATTR_ITCMRAM lfoTriTick(float* sample, int v, int string)
{
    1d40:	b510      	push	{r4, lr}
    1d42:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    1d44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1d48:	4803      	ldr	r0, [pc, #12]	; (1d58 <lfoTriTick+0x18>)
    1d4a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1d4e:	f005 fd07 	bl	7760 <__tTriLFO_tick_veneer>
    1d52:	ed84 0a00 	vstr	s0, [r4]
}
    1d56:	bd10      	pop	{r4, pc}
    1d58:	200054b8 	.word	0x200054b8
    1d5c:	f3af 8000 	nop.w

00001d60 <lfoSawTick>:
void __ATTR_ITCMRAM lfoSawTick(float* sample, int v, int string)
{
    1d60:	b510      	push	{r4, lr}
    1d62:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    1d64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1d68:	4806      	ldr	r0, [pc, #24]	; (1d84 <lfoSawTick+0x24>)
    1d6a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1d6e:	f005 fc37 	bl	75e0 <__tIntPhasor_tick_veneer>
    1d72:	ee30 0a00 	vadd.f32	s0, s0, s0
    1d76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
    1d7e:	ed84 0a00 	vstr	s0, [r4]
}
    1d82:	bd10      	pop	{r4, pc}
    1d84:	20005428 	.word	0x20005428
    1d88:	f3af 8000 	nop.w
    1d8c:	f3af 8000 	nop.w
    1d90:	f3af 8000 	nop.w
    1d94:	f3af 8000 	nop.w
    1d98:	f3af 8000 	nop.w
    1d9c:	f3af 8000 	nop.w

00001da0 <lfoPulseTick>:

void __ATTR_ITCMRAM lfoPulseTick(float* sample, int v, int string)
{
    1da0:	b510      	push	{r4, lr}
    1da2:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    1da4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1da8:	4803      	ldr	r0, [pc, #12]	; (1db8 <lfoPulseTick+0x18>)
    1daa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1dae:	f005 fc57 	bl	7660 <__tSquareLFO_tick_veneer>
    1db2:	ed84 0a00 	vstr	s0, [r4]
}
    1db6:	bd10      	pop	{r4, pc}
    1db8:	20005408 	.word	0x20005408
    1dbc:	f3af 8000 	nop.w

00001dc0 <lfoSawSquareSetRate>:

void __ATTR_ITCMRAM lfoSawSquareSetRate(float r, int v, int string)
{
    1dc0:	b508      	push	{r3, lr}
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    1dc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1dc6:	4803      	ldr	r0, [pc, #12]	; (1dd4 <lfoSawSquareSetRate+0x14>)
    1dc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1dcc:	f005 fbe8 	bl	75a0 <__tSawSquareLFO_setFreq_veneer>
}
    1dd0:	bd08      	pop	{r3, pc}
    1dd2:	bf00      	nop
    1dd4:	20005448 	.word	0x20005448
    1dd8:	f3af 8000 	nop.w
    1ddc:	f3af 8000 	nop.w

00001de0 <lfoSineTriSetRate>:

void __ATTR_ITCMRAM lfoSineTriSetRate(float r, int v, int string)
{
    1de0:	b508      	push	{r3, lr}
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    1de2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1de6:	4803      	ldr	r0, [pc, #12]	; (1df4 <lfoSineTriSetRate+0x14>)
    1de8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1dec:	f005 fbb8 	bl	7560 <__tSineTriLFO_setFreq_veneer>
}
    1df0:	bd08      	pop	{r3, pc}
    1df2:	bf00      	nop
    1df4:	20005498 	.word	0x20005498
    1df8:	f3af 8000 	nop.w
    1dfc:	f3af 8000 	nop.w

00001e00 <lfoSineSetRate>:
void __ATTR_ITCMRAM lfoSineSetRate(float r, int v, int string)
{
    1e00:	b508      	push	{r3, lr}
	tCycle_setFreq(&lfoSine[v][string], r);
    1e02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1e06:	4803      	ldr	r0, [pc, #12]	; (1e14 <lfoSineSetRate+0x14>)
    1e08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1e0c:	f005 fd00 	bl	7810 <__tCycle_setFreq_veneer>
}
    1e10:	bd08      	pop	{r3, pc}
    1e12:	bf00      	nop
    1e14:	20005478 	.word	0x20005478
    1e18:	f3af 8000 	nop.w
    1e1c:	f3af 8000 	nop.w

00001e20 <lfoTriSetRate>:
void __ATTR_ITCMRAM lfoTriSetRate(float r, int v, int string)
{
    1e20:	b508      	push	{r3, lr}
	tTriLFO_setFreq(&lfoTri[v][string], r);
    1e22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1e26:	4803      	ldr	r0, [pc, #12]	; (1e34 <lfoTriSetRate+0x14>)
    1e28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1e2c:	f005 fbf0 	bl	7610 <__tTriLFO_setFreq_veneer>
}
    1e30:	bd08      	pop	{r3, pc}
    1e32:	bf00      	nop
    1e34:	200054b8 	.word	0x200054b8
    1e38:	f3af 8000 	nop.w
    1e3c:	f3af 8000 	nop.w

00001e40 <lfoSawSetRate>:
void __ATTR_ITCMRAM lfoSawSetRate(float r, int v, int string)
{
    1e40:	b508      	push	{r3, lr}
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    1e42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1e46:	4803      	ldr	r0, [pc, #12]	; (1e54 <lfoSawSetRate+0x14>)
    1e48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1e4c:	f005 fd04 	bl	7858 <__tIntPhasor_setFreq_veneer>
}
    1e50:	bd08      	pop	{r3, pc}
    1e52:	bf00      	nop
    1e54:	20005428 	.word	0x20005428
    1e58:	f3af 8000 	nop.w
    1e5c:	f3af 8000 	nop.w

00001e60 <lfoPulseSetRate>:
void __ATTR_ITCMRAM lfoPulseSetRate(float r, int v, int string)
{
    1e60:	b508      	push	{r3, lr}
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    1e62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1e66:	4803      	ldr	r0, [pc, #12]	; (1e74 <lfoPulseSetRate+0x14>)
    1e68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1e6c:	f005 fbac 	bl	75c8 <__tSquareLFO_setFreq_veneer>
}
    1e70:	bd08      	pop	{r3, pc}
    1e72:	bf00      	nop
    1e74:	20005408 	.word	0x20005408
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <lfoSawSquareSetPhase>:


void __ATTR_ITCMRAM lfoSawSquareSetPhase(float p, int v, int string)
{
    1e80:	b508      	push	{r3, lr}
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    1e82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1e86:	4803      	ldr	r0, [pc, #12]	; (1e94 <lfoSawSquareSetPhase+0x14>)
    1e88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1e8c:	f005 fc48 	bl	7720 <__tSawSquareLFO_setPhase_veneer>
}
    1e90:	bd08      	pop	{r3, pc}
    1e92:	bf00      	nop
    1e94:	20005448 	.word	0x20005448
    1e98:	f3af 8000 	nop.w
    1e9c:	f3af 8000 	nop.w

00001ea0 <lfoSineTriSetPhase>:
void __ATTR_ITCMRAM lfoSineTriSetPhase(float p, int v, int string)
{
    1ea0:	b508      	push	{r3, lr}
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    1ea2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1ea6:	4803      	ldr	r0, [pc, #12]	; (1eb4 <lfoSineTriSetPhase+0x14>)
    1ea8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1eac:	f005 fc04 	bl	76b8 <__tSineTriLFO_setPhase_veneer>
}
    1eb0:	bd08      	pop	{r3, pc}
    1eb2:	bf00      	nop
    1eb4:	20005498 	.word	0x20005498
    1eb8:	f3af 8000 	nop.w
    1ebc:	f3af 8000 	nop.w

00001ec0 <lfoSineSetPhase>:
void __ATTR_ITCMRAM lfoSineSetPhase(float p, int v, int string)
{
    1ec0:	b508      	push	{r3, lr}
	tCycle_setPhase(&lfoSine[v][string],p);
    1ec2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1ec6:	4803      	ldr	r0, [pc, #12]	; (1ed4 <lfoSineSetPhase+0x14>)
    1ec8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1ecc:	f005 fb44 	bl	7558 <__tCycle_setPhase_veneer>
}
    1ed0:	bd08      	pop	{r3, pc}
    1ed2:	bf00      	nop
    1ed4:	20005478 	.word	0x20005478
    1ed8:	f3af 8000 	nop.w
    1edc:	f3af 8000 	nop.w

00001ee0 <lfoTriSetPhase>:
void __ATTR_ITCMRAM lfoTriSetPhase(float p, int v, int string)
{
    1ee0:	b508      	push	{r3, lr}
	tTriLFO_setPhase(&lfoTri[v][string],p);
    1ee2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1ee6:	4803      	ldr	r0, [pc, #12]	; (1ef4 <lfoTriSetPhase+0x14>)
    1ee8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1eec:	f005 fc28 	bl	7740 <__tTriLFO_setPhase_veneer>
}
    1ef0:	bd08      	pop	{r3, pc}
    1ef2:	bf00      	nop
    1ef4:	200054b8 	.word	0x200054b8
    1ef8:	f3af 8000 	nop.w
    1efc:	f3af 8000 	nop.w

00001f00 <lfoSawSetPhase>:
void __ATTR_ITCMRAM lfoSawSetPhase(float p, int v, int string)
{
    1f00:	b508      	push	{r3, lr}
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    1f02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1f06:	4803      	ldr	r0, [pc, #12]	; (1f14 <lfoSawSetPhase+0x14>)
    1f08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1f0c:	f005 fc48 	bl	77a0 <__tIntPhasor_setPhase_veneer>
}
    1f10:	bd08      	pop	{r3, pc}
    1f12:	bf00      	nop
    1f14:	20005428 	.word	0x20005428
    1f18:	f3af 8000 	nop.w
    1f1c:	f3af 8000 	nop.w

00001f20 <lfoPulseSetPhase>:
void __ATTR_ITCMRAM lfoPulseSetPhase(float p, int v, int string)
{
    1f20:	b508      	push	{r3, lr}
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    1f22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1f26:	4803      	ldr	r0, [pc, #12]	; (1f34 <lfoPulseSetPhase+0x14>)
    1f28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1f2c:	f005 fcbc 	bl	78a8 <__tSquareLFO_setPhase_veneer>
}
    1f30:	bd08      	pop	{r3, pc}
    1f32:	bf00      	nop
    1f34:	20005408 	.word	0x20005408
    1f38:	f3af 8000 	nop.w
    1f3c:	f3af 8000 	nop.w

00001f40 <lfoSawSquareSetShape>:


void __ATTR_ITCMRAM lfoSawSquareSetShape(float s, int v, int string)
{
    1f40:	b508      	push	{r3, lr}
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    1f42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1f46:	4803      	ldr	r0, [pc, #12]	; (1f54 <lfoSawSquareSetShape+0x14>)
    1f48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1f4c:	f005 fb14 	bl	7578 <__tSawSquareLFO_setShape_veneer>
}
    1f50:	bd08      	pop	{r3, pc}
    1f52:	bf00      	nop
    1f54:	20005448 	.word	0x20005448
    1f58:	f3af 8000 	nop.w
    1f5c:	f3af 8000 	nop.w

00001f60 <lfoSineTriSetShape>:
void __ATTR_ITCMRAM lfoSineTriSetShape(float s, int v, int string)
{
    1f60:	b508      	push	{r3, lr}
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    1f62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1f66:	4803      	ldr	r0, [pc, #12]	; (1f74 <lfoSineTriSetShape+0x14>)
    1f68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1f6c:	f005 fc68 	bl	7840 <__tSineTriLFO_setShape_veneer>
}
    1f70:	bd08      	pop	{r3, pc}
    1f72:	bf00      	nop
    1f74:	20005498 	.word	0x20005498
    1f78:	f3af 8000 	nop.w
    1f7c:	f3af 8000 	nop.w

00001f80 <lfoSineSetShape>:
void __ATTR_ITCMRAM lfoSineSetShape(float s, int v, int string)
{
	//none
}
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop
    1f84:	f3af 8000 	nop.w
    1f88:	f3af 8000 	nop.w
    1f8c:	f3af 8000 	nop.w
    1f90:	f3af 8000 	nop.w
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <lfoTriSetShape>:
void __ATTR_ITCMRAM lfoTriSetShape(float s, int v, int string)
{
	//none
}
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop
    1fa4:	f3af 8000 	nop.w
    1fa8:	f3af 8000 	nop.w
    1fac:	f3af 8000 	nop.w
    1fb0:	f3af 8000 	nop.w
    1fb4:	f3af 8000 	nop.w
    1fb8:	f3af 8000 	nop.w
    1fbc:	f3af 8000 	nop.w

00001fc0 <lfoSawSetShape>:
void __ATTR_ITCMRAM lfoSawSetShape(float s, int v, int string)
{
	//none
}
    1fc0:	4770      	bx	lr
    1fc2:	bf00      	nop
    1fc4:	f3af 8000 	nop.w
    1fc8:	f3af 8000 	nop.w
    1fcc:	f3af 8000 	nop.w
    1fd0:	f3af 8000 	nop.w
    1fd4:	f3af 8000 	nop.w
    1fd8:	f3af 8000 	nop.w
    1fdc:	f3af 8000 	nop.w

00001fe0 <lfoPulseSetShape>:
void __ATTR_ITCMRAM lfoPulseSetShape(float s, int v, int string)
{
    1fe0:	b508      	push	{r3, lr}
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    1fe2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1fe6:	4803      	ldr	r0, [pc, #12]	; (1ff4 <lfoPulseSetShape+0x14>)
    1fe8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1fec:	f005 fc78 	bl	78e0 <__tSquareLFO_setPulseWidth_veneer>
}
    1ff0:	bd08      	pop	{r3, pc}
    1ff2:	bf00      	nop
    1ff4:	20005408 	.word	0x20005408
    1ff8:	f3af 8000 	nop.w
    1ffc:	f3af 8000 	nop.w

00002000 <clipperGainSet>:
float shapeDividerH[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
    2000:	b538      	push	{r3, r4, r5, lr}
    2002:	4605      	mov	r5, r0
    2004:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    2006:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    200a:	ee20 0a27 	vmul.f32	s0, s0, s15
    200e:	f005 fbe3 	bl	77d8 <__fasterdbtoa_veneer>
    2012:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2016:	4903      	ldr	r1, [pc, #12]	; (2024 <clipperGainSet+0x24>)
    2018:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    201c:	ed84 0a00 	vstr	s0, [r4]
}
    2020:	bd38      	pop	{r3, r4, r5, pc}
    2022:	bf00      	nop
    2024:	200056f0 	.word	0x200056f0
    2028:	f3af 8000 	nop.w
    202c:	f3af 8000 	nop.w
    2030:	f3af 8000 	nop.w
    2034:	f3af 8000 	nop.w
    2038:	f3af 8000 	nop.w
    203c:	f3af 8000 	nop.w

00002040 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
    2040:	b538      	push	{r3, r4, r5, lr}
    2042:	4605      	mov	r5, r0
    2044:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    2046:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    204a:	ee20 0a27 	vmul.f32	s0, s0, s15
    204e:	f005 fbc3 	bl	77d8 <__fasterdbtoa_veneer>
    2052:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2056:	4903      	ldr	r1, [pc, #12]	; (2064 <wavefolderParam1+0x24>)
    2058:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    205c:	ed84 0a00 	vstr	s0, [r4]
}
    2060:	bd38      	pop	{r3, r4, r5, pc}
    2062:	bf00      	nop
    2064:	200056f0 	.word	0x200056f0
    2068:	f3af 8000 	nop.w
    206c:	f3af 8000 	nop.w
    2070:	f3af 8000 	nop.w
    2074:	f3af 8000 	nop.w
    2078:	f3af 8000 	nop.w
    207c:	f3af 8000 	nop.w

00002080 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
    2080:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2084:	ee70 6a27 	vadd.f32	s13, s0, s15
    2088:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    208c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2090:	4b05      	ldr	r3, [pc, #20]	; (20a8 <wavefolderParam3+0x28>)
    2092:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2096:	ed83 7a00 	vstr	s14, [r3]
	param3[v][string] = value;
    209a:	4804      	ldr	r0, [pc, #16]	; (20ac <wavefolderParam3+0x2c>)
    209c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    20a0:	ed81 0a00 	vstr	s0, [r1]
}
    20a4:	4770      	bx	lr
    20a6:	bf00      	nop
    20a8:	200052e0 	.word	0x200052e0
    20ac:	20005730 	.word	0x20005730
    20b0:	f3af 8000 	nop.w
    20b4:	f3af 8000 	nop.w
    20b8:	f3af 8000 	nop.w
    20bc:	f3af 8000 	nop.w

000020c0 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    20c6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    20ca:	008e      	lsls	r6, r1, #2
    20cc:	4d0e      	ldr	r5, [pc, #56]	; (2108 <tiltParam1+0x48>)
    20ce:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    20d2:	eeb3 8a0e 	vmov.f32	s16, #62	; 0x41f00000  30.0
    20d6:	ee20 8a08 	vmul.f32	s16, s0, s16
    20da:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    20de:	ee38 8a40 	vsub.f32	s16, s16, s0
    20e2:	eeb1 0a48 	vneg.f32	s0, s16
    20e6:	f005 fb77 	bl	77d8 <__fasterdbtoa_veneer>
    20ea:	4628      	mov	r0, r5
    20ec:	f005 fb7c 	bl	77e8 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    20f0:	4c06      	ldr	r4, [pc, #24]	; (210c <tiltParam1+0x4c>)
    20f2:	4434      	add	r4, r6
    20f4:	eeb0 0a48 	vmov.f32	s0, s16
    20f8:	f005 fb6e 	bl	77d8 <__fasterdbtoa_veneer>
    20fc:	4620      	mov	r0, r4
    20fe:	f005 fb73 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    2102:	ecbd 8b02 	vpop	{d8}
    2106:	bd70      	pop	{r4, r5, r6, pc}
    2108:	20005cec 	.word	0x20005cec
    210c:	20005d0c 	.word	0x20005d0c
    2110:	f3af 8000 	nop.w
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
    2120:	b538      	push	{r3, r4, r5, lr}
    2122:	4605      	mov	r5, r0
    2124:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2126:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2164 <tiltParam2+0x44>
    212a:	ee20 0a20 	vmul.f32	s0, s0, s1
    212e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2168 <tiltParam2+0x48>
    2132:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2136:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    213a:	ee30 0a60 	vsub.f32	s0, s0, s1
    213e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 216c <tiltParam2+0x4c>
    2142:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2170 <tiltParam2+0x50>
    2146:	ee60 0a20 	vmul.f32	s1, s0, s1
    214a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2174 <tiltParam2+0x54>
    214e:	f004 fcf7 	bl	6b40 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    2152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2156:	4808      	ldr	r0, [pc, #32]	; (2178 <tiltParam2+0x58>)
    2158:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    215c:	f005 fb18 	bl	7790 <__tVZFilter_setFreqFast_veneer>
}
    2160:	bd38      	pop	{r3, r4, r5, pc}
    2162:	bf00      	nop
    2164:	429a0000 	.word	0x429a0000
    2168:	42280000 	.word	0x42280000
    216c:	457ff000 	.word	0x457ff000
    2170:	420fb824 	.word	0x420fb824
    2174:	00000000 	.word	0x00000000
    2178:	20000b34 	.word	0x20000b34
    217c:	f3af 8000 	nop.w

00002180 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
    2180:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    2182:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2186:	ee30 0a27 	vadd.f32	s0, s0, s15
    218a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    218e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    2192:	ee20 0a27 	vmul.f32	s0, s0, s15
    2196:	4803      	ldr	r0, [pc, #12]	; (21a4 <tiltParam3+0x24>)
    2198:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    219c:	f005 fa54 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    21a0:	bd08      	pop	{r3, pc}
    21a2:	bf00      	nop
    21a4:	20000b34 	.word	0x20000b34
    21a8:	f3af 8000 	nop.w
    21ac:	f3af 8000 	nop.w
    21b0:	f3af 8000 	nop.w
    21b4:	f3af 8000 	nop.w
    21b8:	f3af 8000 	nop.w
    21bc:	f3af 8000 	nop.w

000021c0 <tiltParam4>:
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
    21c0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    21c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    21c6:	4c08      	ldr	r4, [pc, #32]	; (21e8 <tiltParam4+0x28>)
    21c8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    21cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 21ec <tiltParam4+0x2c>
    21d0:	ee20 0a27 	vmul.f32	s0, s0, s15
    21d4:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    21d8:	ee30 0a67 	vsub.f32	s0, s0, s15
    21dc:	f005 fb6c 	bl	78b8 <__fastdbtoa_veneer>
    21e0:	4620      	mov	r0, r4
    21e2:	f005 fb01 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    21e6:	bd10      	pop	{r4, pc}
    21e8:	20000b34 	.word	0x20000b34
    21ec:	42080000 	.word	0x42080000
    21f0:	f3af 8000 	nop.w
    21f4:	f3af 8000 	nop.w
    21f8:	f3af 8000 	nop.w
    21fc:	f3af 8000 	nop.w

00002200 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
    2200:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2204:	4b04      	ldr	r3, [pc, #16]	; (2218 <compressorParam1+0x18>)
    2206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    220a:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    220e:	ee20 0a27 	vmul.f32	s0, s0, s15
    2212:	ed83 0a03 	vstr	s0, [r3, #12]
}
    2216:	4770      	bx	lr
    2218:	20000b54 	.word	0x20000b54
    221c:	f3af 8000 	nop.w

00002220 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
    2220:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    2224:	ee20 0a27 	vmul.f32	s0, s0, s15
    2228:	4b09      	ldr	r3, [pc, #36]	; (2250 <compressorParam2+0x30>)
    222a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    222e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    2232:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2236:	ee30 0a27 	vadd.f32	s0, s0, s15
    223a:	ed82 0a04 	vstr	s0, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    223e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    2242:	edd3 6a04 	vldr	s13, [r3, #16]
    2246:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    224a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    224e:	4770      	bx	lr
    2250:	20000b54 	.word	0x20000b54
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
    2260:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2264:	4b04      	ldr	r3, [pc, #16]	; (2278 <compressorParam3+0x18>)
    2266:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    226a:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    226e:	ee20 0a27 	vmul.f32	s0, s0, s15
    2272:	ed83 0a06 	vstr	s0, [r3, #24]
}
    2276:	4770      	bx	lr
    2278:	20000b54 	.word	0x20000b54
    227c:	f3af 8000 	nop.w

00002280 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
    2280:	b510      	push	{r4, lr}
	value = (value +  0.001f);
    2282:	eddf 7a0b 	vldr	s15, [pc, #44]	; 22b0 <compressorParam4+0x30>
    2286:	ee70 7a27 	vadd.f32	s15, s0, s15
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    228a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    228e:	4b09      	ldr	r3, [pc, #36]	; (22b4 <compressorParam4+0x34>)
    2290:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    2294:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
    2298:	ee20 0a27 	vmul.f32	s0, s0, s15
    229c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    22a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    22a4:	f005 fa64 	bl	7770 <__fasterexpf_veneer>
    22a8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    22ac:	bd10      	pop	{r4, pc}
    22ae:	bf00      	nop
    22b0:	3a83126f 	.word	0x3a83126f
    22b4:	20000b54 	.word	0x20000b54
    22b8:	f3af 8000 	nop.w
    22bc:	f3af 8000 	nop.w

000022c0 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
    22c0:	b510      	push	{r4, lr}
	value = (value + 0.001f);
    22c2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 22f0 <compressorParam5+0x30>
    22c6:	ee70 7a27 	vadd.f32	s15, s0, s15
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    22ca:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    22ce:	4b09      	ldr	r3, [pc, #36]	; (22f4 <compressorParam5+0x34>)
    22d0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    22d4:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
    22d8:	ee20 0a27 	vmul.f32	s0, s0, s15
    22dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    22e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    22e4:	f005 fa44 	bl	7770 <__fasterexpf_veneer>
    22e8:	ed84 0a02 	vstr	s0, [r4, #8]
}
    22ec:	bd10      	pop	{r4, pc}
    22ee:	bf00      	nop
    22f0:	3a83126f 	.word	0x3a83126f
    22f4:	20000b54 	.word	0x20000b54
    22f8:	f3af 8000 	nop.w
    22fc:	f3af 8000 	nop.w

00002300 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
    2300:	ee30 0a00 	vadd.f32	s0, s0, s0
    2304:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2308:	ee30 0a67 	vsub.f32	s0, s0, s15
    230c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2310:	4902      	ldr	r1, [pc, #8]	; (231c <offsetParam2+0x1c>)
    2312:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2316:	ed81 0a00 	vstr	s0, [r1]
}
    231a:	4770      	bx	lr
    231c:	20005710 	.word	0x20005710

00002320 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
    2320:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2324:	4902      	ldr	r1, [pc, #8]	; (2330 <param2Linear+0x10>)
    2326:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    232a:	ed81 0a00 	vstr	s0, [r1]
}
    232e:	4770      	bx	lr
    2330:	20005710 	.word	0x20005710
    2334:	f3af 8000 	nop.w
    2338:	f3af 8000 	nop.w
    233c:	f3af 8000 	nop.w

00002340 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
    2340:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2344:	4902      	ldr	r1, [pc, #8]	; (2350 <param3Linear+0x10>)
    2346:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    234a:	ed81 0a00 	vstr	s0, [r1]
}
    234e:	4770      	bx	lr
    2350:	20005730 	.word	0x20005730
    2354:	f3af 8000 	nop.w
    2358:	f3af 8000 	nop.w
    235c:	f3af 8000 	nop.w

00002360 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
    2360:	eddf 7a11 	vldr	s15, [pc, #68]	; 23a8 <param3Soft+0x48>
    2364:	ee20 0a27 	vmul.f32	s0, s0, s15
    2368:	eddf 7a10 	vldr	s15, [pc, #64]	; 23ac <param3Soft+0x4c>
    236c:	ee30 0a27 	vadd.f32	s0, s0, s15
    2370:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2374:	4b0e      	ldr	r3, [pc, #56]	; (23b0 <param3Soft+0x50>)
    2376:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    237a:	ed83 0a00 	vstr	s0, [r3]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    237e:	ee60 7a00 	vmul.f32	s15, s0, s0
    2382:	ee60 7a27 	vmul.f32	s15, s0, s15
    2386:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23b4 <param3Soft+0x54>
    238a:	ee67 7a87 	vmul.f32	s15, s15, s14
    238e:	ee30 0a67 	vsub.f32	s0, s0, s15
    2392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2396:	eec7 7a00 	vdiv.f32	s15, s14, s0
    239a:	4807      	ldr	r0, [pc, #28]	; (23b8 <param3Soft+0x58>)
    239c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    23a0:	edc1 7a00 	vstr	s15, [r1]
}
    23a4:	4770      	bx	lr
    23a6:	bf00      	nop
    23a8:	3f7d70a4 	.word	0x3f7d70a4
    23ac:	3c23d70a 	.word	0x3c23d70a
    23b0:	20005730 	.word	0x20005730
    23b4:	3eaaaaaa 	.word	0x3eaaaaaa
    23b8:	20005cc0 	.word	0x20005cc0
    23bc:	f3af 8000 	nop.w

000023c0 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
    23c0:	b538      	push	{r3, r4, r5, lr}
    23c2:	4605      	mov	r5, r0
    23c4:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    23c6:	eddf 7a14 	vldr	s15, [pc, #80]	; 2418 <param3Hard+0x58>
    23ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    23ce:	eddf 7a13 	vldr	s15, [pc, #76]	; 241c <param3Hard+0x5c>
    23d2:	ee30 0a27 	vadd.f32	s0, s0, s15
    23d6:	eddf 7a12 	vldr	s15, [pc, #72]	; 2420 <param3Hard+0x60>
    23da:	ee20 0a27 	vmul.f32	s0, s0, s15
    23de:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    23e2:	4b10      	ldr	r3, [pc, #64]	; (2424 <param3Hard+0x64>)
    23e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    23e8:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    23ec:	f005 f9f0 	bl	77d0 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    23f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    23f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    23f8:	d101      	bne.n	23fe <param3Hard+0x3e>
	{
		tempDiv = 0.001f;
    23fa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2428 <param3Hard+0x68>
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    23fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2402:	eec7 7a00 	vdiv.f32	s15, s14, s0
    2406:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    240a:	4908      	ldr	r1, [pc, #32]	; (242c <param3Hard+0x6c>)
    240c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    2410:	edc4 7a00 	vstr	s15, [r4]
}
    2414:	bd38      	pop	{r3, r4, r5, pc}
    2416:	bf00      	nop
    2418:	3f7d70a4 	.word	0x3f7d70a4
    241c:	3c23d70a 	.word	0x3c23d70a
    2420:	3fc90fdb 	.word	0x3fc90fdb
    2424:	20005730 	.word	0x20005730
    2428:	3a83126f 	.word	0x3a83126f
    242c:	20005ca0 	.word	0x20005ca0
    2430:	f3af 8000 	nop.w
    2434:	f3af 8000 	nop.w
    2438:	f3af 8000 	nop.w
    243c:	f3af 8000 	nop.w

00002440 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
    2440:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2444:	4902      	ldr	r1, [pc, #8]	; (2450 <param4Linear+0x10>)
    2446:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    244a:	ed81 0a00 	vstr	s0, [r1]
}
    244e:	4770      	bx	lr
    2450:	20005750 	.word	0x20005750
    2454:	f3af 8000 	nop.w
    2458:	f3af 8000 	nop.w
    245c:	f3af 8000 	nop.w

00002460 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
    2460:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2464:	4902      	ldr	r1, [pc, #8]	; (2470 <param5Linear+0x10>)
    2466:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    246a:	ed81 0a00 	vstr	s0, [r1]
}
    246e:	4770      	bx	lr
    2470:	20005770 	.word	0x20005770
    2474:	f3af 8000 	nop.w
    2478:	f3af 8000 	nop.w
    247c:	f3af 8000 	nop.w

00002480 <param2BC>:
void __ATTR_ITCMRAM param2BC(float value, int v, int string)
{
    2480:	b508      	push	{r3, lr}
	tCrusher_setQuality (&bc[v][string],value);
    2482:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2486:	4803      	ldr	r0, [pc, #12]	; (2494 <param2BC+0x14>)
    2488:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    248c:	f005 f944 	bl	7718 <__tCrusher_setQuality_veneer>
}
    2490:	bd08      	pop	{r3, pc}
    2492:	bf00      	nop
    2494:	20000b14 	.word	0x20000b14
    2498:	f3af 8000 	nop.w
    249c:	f3af 8000 	nop.w

000024a0 <param3BC>:
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
    24a0:	b508      	push	{r3, lr}
	value = (value * inv_oversample) + 0.01f;
    24a2:	4b08      	ldr	r3, [pc, #32]	; (24c4 <param3BC+0x24>)
    24a4:	edd3 7a00 	vldr	s15, [r3]
    24a8:	ee20 0a27 	vmul.f32	s0, s0, s15
	tCrusher_setSamplingRatio (&bc[v][string], value);
    24ac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    24b0:	eddf 7a05 	vldr	s15, [pc, #20]	; 24c8 <param3BC+0x28>
    24b4:	ee30 0a27 	vadd.f32	s0, s0, s15
    24b8:	4804      	ldr	r0, [pc, #16]	; (24cc <param3BC+0x2c>)
    24ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    24be:	f005 f923 	bl	7708 <__tCrusher_setSamplingRatio_veneer>
}
    24c2:	bd08      	pop	{r3, pc}
    24c4:	20000048 	.word	0x20000048
    24c8:	3c23d70a 	.word	0x3c23d70a
    24cc:	20000b14 	.word	0x20000b14
    24d0:	f3af 8000 	nop.w
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <param4BC>:
void __ATTR_ITCMRAM param4BC(float value, int v, int string)
{
    24e0:	b508      	push	{r3, lr}
	tCrusher_setRound(&bc[v][string], value);
    24e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    24e6:	4803      	ldr	r0, [pc, #12]	; (24f4 <param4BC+0x14>)
    24e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    24ec:	f005 f864 	bl	75b8 <__tCrusher_setRound_veneer>
}
    24f0:	bd08      	pop	{r3, pc}
    24f2:	bf00      	nop
    24f4:	20000b14 	.word	0x20000b14
    24f8:	f3af 8000 	nop.w
    24fc:	f3af 8000 	nop.w

00002500 <param5BC>:
void __ATTR_ITCMRAM param5BC(float value, int v, int string)
{
    2500:	b508      	push	{r3, lr}
	tCrusher_setOperation(&bc[v][string], value);
    2502:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2506:	4803      	ldr	r0, [pc, #12]	; (2514 <param5BC+0x14>)
    2508:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    250c:	f005 f938 	bl	7780 <__tCrusher_setOperation_veneer>
}
    2510:	bd08      	pop	{r3, pc}
    2512:	bf00      	nop
    2514:	20000b14 	.word	0x20000b14
    2518:	f3af 8000 	nop.w
    251c:	f3af 8000 	nop.w

00002520 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
    2520:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2524:	4902      	ldr	r1, [pc, #8]	; (2530 <fxMixSet+0x10>)
    2526:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    252a:	ed81 0a00 	vstr	s0, [r1]
}
    252e:	4770      	bx	lr
    2530:	200051e0 	.word	0x200051e0
    2534:	f3af 8000 	nop.w
    2538:	f3af 8000 	nop.w
    253c:	f3af 8000 	nop.w

00002540 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
    2540:	b538      	push	{r3, r4, r5, lr}
    2542:	4605      	mov	r5, r0
    2544:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    2546:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    254a:	ee20 0a27 	vmul.f32	s0, s0, s15
    254e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    2552:	ee30 0a67 	vsub.f32	s0, s0, s15
    2556:	f005 f93f 	bl	77d8 <__fasterdbtoa_veneer>
    255a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    255e:	4903      	ldr	r1, [pc, #12]	; (256c <fxPostGainSet+0x2c>)
    2560:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    2564:	ed84 0a00 	vstr	s0, [r4]
}
    2568:	bd38      	pop	{r3, r4, r5, pc}
    256a:	bf00      	nop
    256c:	20005200 	.word	0x20005200
    2570:	f3af 8000 	nop.w
    2574:	f3af 8000 	nop.w
    2578:	f3af 8000 	nop.w
    257c:	f3af 8000 	nop.w

00002580 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
    2580:	b510      	push	{r4, lr}
    2582:	ed2d 8b02 	vpush	{d8}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2586:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    258a:	4a4b      	ldr	r2, [pc, #300]	; (26b8 <wavefolderTick+0x138>)
    258c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2590:	ed92 7a00 	vldr	s14, [r2]
    2594:	ee27 0a00 	vmul.f32	s0, s14, s0
    2598:	4a48      	ldr	r2, [pc, #288]	; (26bc <wavefolderTick+0x13c>)
    259a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    259e:	edd2 7a00 	vldr	s15, [r2]
    25a2:	ee27 7a27 	vmul.f32	s14, s14, s15
    25a6:	ee30 7a07 	vadd.f32	s14, s0, s14
    float curFB = param3[v][string];
    25aa:	4a45      	ldr	r2, [pc, #276]	; (26c0 <wavefolderTick+0x140>)
    25ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    25b0:	ed92 6a00 	vldr	s12, [r2]
    float curFF = param4[v][string];
    25b4:	4a43      	ldr	r2, [pc, #268]	; (26c4 <wavefolderTick+0x144>)
    25b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25ba:	edd3 6a00 	vldr	s13, [r3]

    //softclip approx for tanh saturation in original code
    float ffSample = sample;
    if (ffSample <= -1.0f)
    25be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    25c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    25c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25ca:	d90c      	bls.n	25e6 <wavefolderTick+0x66>
    {
    	ffSample = -1.0f;
    } else if (ffSample >= 1.0f)
    25cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    25d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    25d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25d8:	db02      	blt.n	25e0 <wavefolderTick+0x60>
    {
    	ffSample = 1.0f;
    25da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    25de:	e004      	b.n	25ea <wavefolderTick+0x6a>
    float ffSample = sample;
    25e0:	eef0 7a47 	vmov.f32	s15, s14
    25e4:	e001      	b.n	25ea <wavefolderTick+0x6a>
    	ffSample = -1.0f;
    25e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    25ea:	ee27 8aa7 	vmul.f32	s16, s15, s15
    25ee:	ee28 8a27 	vmul.f32	s16, s16, s15
    25f2:	eddf 5a35 	vldr	s11, [pc, #212]	; 26c8 <wavefolderTick+0x148>
    25f6:	ee28 8a25 	vmul.f32	s16, s16, s11
    25fa:	ee37 8ac8 	vsub.f32	s16, s15, s16
    ffSample *= 1.499999f;
    25fe:	eddf 7a33 	vldr	s15, [pc, #204]	; 26cc <wavefolderTick+0x14c>
    2602:	ee28 8a27 	vmul.f32	s16, s16, s15
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    2606:	ee26 8a88 	vmul.f32	s16, s13, s16
    260a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    260e:	ee30 0a66 	vsub.f32	s0, s0, s13
    2612:	ee20 0a07 	vmul.f32	s0, s0, s14
    2616:	ee38 8a00 	vadd.f32	s16, s16, s0

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
    261a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    261e:	4a2c      	ldr	r2, [pc, #176]	; (26d0 <wavefolderTick+0x150>)
    2620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2624:	edd3 7a00 	vldr	s15, [r3]
    if (fbSample <= -1.0f)
    2628:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    262c:	eef4 7ae6 	vcmpe.f32	s15, s13
    2630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2634:	d909      	bls.n	264a <wavefolderTick+0xca>
    {
    	fbSample = -1.0f;
    } else if (fbSample >= 1.0f)
    2636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    263a:	eef4 7ae6 	vcmpe.f32	s15, s13
    263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2642:	db04      	blt.n	264e <wavefolderTick+0xce>
    {
    	fbSample = 1.0f;
    2644:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2648:	e001      	b.n	264e <wavefolderTick+0xce>
    	fbSample = -1.0f;
    264a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    264e:	ee67 6aa7 	vmul.f32	s13, s15, s15
    2652:	ee66 6aa7 	vmul.f32	s13, s13, s15
    2656:	eddf 5a1c 	vldr	s11, [pc, #112]	; 26c8 <wavefolderTick+0x148>
    265a:	ee66 6aa5 	vmul.f32	s13, s13, s11
    265e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    fbSample *= 1.499999f;
    2662:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 26cc <wavefolderTick+0x14c>
    2666:	ee67 7a80 	vmul.f32	s15, s15, s0
    float fb = curFB * fbSample;
    266a:	ee26 0a27 	vmul.f32	s0, s12, s15

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    266e:	ee38 8a00 	vadd.f32	s16, s16, s0
    2672:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2676:	008c      	lsls	r4, r1, #2
    2678:	4816      	ldr	r0, [pc, #88]	; (26d4 <wavefolderTick+0x154>)
    267a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    267e:	edd1 8a00 	vldr	s17, [r1]
    2682:	ed9f 0a15 	vldr	s0, [pc, #84]	; 26d8 <wavefolderTick+0x158>
    2686:	ee27 0a00 	vmul.f32	s0, s14, s0
    268a:	f005 f8a1 	bl	77d0 <__arm_sin_f32_veneer>
    268e:	ee28 0a80 	vmul.f32	s0, s17, s0
    2692:	ee38 0a40 	vsub.f32	s0, s16, s0
    2696:	4b0e      	ldr	r3, [pc, #56]	; (26d0 <wavefolderTick+0x150>)
    2698:	4423      	add	r3, r4
    269a:	ed83 0a00 	vstr	s0, [r3]
    sample = wfState[v][string] * invCurFB[v][string];
    269e:	4b0f      	ldr	r3, [pc, #60]	; (26dc <wavefolderTick+0x15c>)
    26a0:	4423      	add	r3, r4
    26a2:	edd3 7a00 	vldr	s15, [r3]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    26aa:	480d      	ldr	r0, [pc, #52]	; (26e0 <wavefolderTick+0x160>)
    26ac:	4420      	add	r0, r4
    26ae:	f004 ff7b 	bl	75a8 <__tHighpass_tick_veneer>
    return sample;
}
    26b2:	ecbd 8b02 	vpop	{d8}
    26b6:	bd10      	pop	{r4, pc}
    26b8:	200056f0 	.word	0x200056f0
    26bc:	20005710 	.word	0x20005710
    26c0:	20005730 	.word	0x20005730
    26c4:	20005750 	.word	0x20005750
    26c8:	3eaaaaaa 	.word	0x3eaaaaaa
    26cc:	3fbffff8 	.word	0x3fbffff8
    26d0:	20014a10 	.word	0x20014a10
    26d4:	20005770 	.word	0x20005770
    26d8:	40c90fdb 	.word	0x40c90fdb
    26dc:	200052e0 	.word	0x200052e0
    26e0:	20000ed4 	.word	0x20000ed4
    26e4:	f3af 8000 	nop.w
    26e8:	f3af 8000 	nop.w
    26ec:	f3af 8000 	nop.w
    26f0:	f3af 8000 	nop.w
    26f4:	f3af 8000 	nop.w
    26f8:	f3af 8000 	nop.w
    26fc:	f3af 8000 	nop.w

00002700 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
    2700:	eddf 7a07 	vldr	s15, [pc, #28]	; 2720 <chorusParam1+0x20>
    2704:	ee20 0a27 	vmul.f32	s0, s0, s15
    2708:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    270c:	ee30 0a27 	vadd.f32	s0, s0, s15
    2710:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2714:	4903      	ldr	r1, [pc, #12]	; (2724 <chorusParam1+0x24>)
    2716:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    271a:	ed81 0a00 	vstr	s0, [r1]
}
    271e:	4770      	bx	lr
    2720:	45b4a000 	.word	0x45b4a000
    2724:	200056f0 	.word	0x200056f0
    2728:	f3af 8000 	nop.w
    272c:	f3af 8000 	nop.w
    2730:	f3af 8000 	nop.w
    2734:	f3af 8000 	nop.w
    2738:	f3af 8000 	nop.w
    273c:	f3af 8000 	nop.w

00002740 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
    2740:	eddf 7a05 	vldr	s15, [pc, #20]	; 2758 <chorusParam2+0x18>
    2744:	ee20 0a27 	vmul.f32	s0, s0, s15
    2748:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    274c:	4903      	ldr	r1, [pc, #12]	; (275c <chorusParam2+0x1c>)
    274e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2752:	ed81 0a00 	vstr	s0, [r1]
}
    2756:	4770      	bx	lr
    2758:	3dcccccd 	.word	0x3dcccccd
    275c:	20005710 	.word	0x20005710

00002760 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    2760:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    2762:	eddf 7a08 	vldr	s15, [pc, #32]	; 2784 <chorusParam3+0x24>
    2766:	ee20 0a27 	vmul.f32	s0, s0, s15
    276a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    276e:	eddf 7a06 	vldr	s15, [pc, #24]	; 2788 <chorusParam3+0x28>
    2772:	ee30 0a27 	vadd.f32	s0, s0, s15
    2776:	4805      	ldr	r0, [pc, #20]	; (278c <chorusParam3+0x2c>)
    2778:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    277c:	f005 f848 	bl	7810 <__tCycle_setFreq_veneer>
}
    2780:	bd08      	pop	{r3, pc}
    2782:	bf00      	nop
    2784:	3ecccccd 	.word	0x3ecccccd
    2788:	3c23d70a 	.word	0x3c23d70a
    278c:	200055f8 	.word	0x200055f8
    2790:	f3af 8000 	nop.w
    2794:	f3af 8000 	nop.w
    2798:	f3af 8000 	nop.w
    279c:	f3af 8000 	nop.w

000027a0 <chorusParam4>:

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    27a0:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    27a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 27c4 <chorusParam4+0x24>
    27a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    27aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    27ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 27c8 <chorusParam4+0x28>
    27b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    27b6:	4805      	ldr	r0, [pc, #20]	; (27cc <chorusParam4+0x2c>)
    27b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    27bc:	f005 f828 	bl	7810 <__tCycle_setFreq_veneer>
}
    27c0:	bd08      	pop	{r3, pc}
    27c2:	bf00      	nop
    27c4:	3ee38e37 	.word	0x3ee38e37
    27c8:	3c343958 	.word	0x3c343958
    27cc:	20005618 	.word	0x20005618
    27d0:	f3af 8000 	nop.w
    27d4:	f3af 8000 	nop.w
    27d8:	f3af 8000 	nop.w
    27dc:	f3af 8000 	nop.w

000027e0 <chorusTick>:


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    27e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27e4:	ed2d 8b04 	vpush	{d8-d9}
    27e8:	eeb0 8a40 	vmov.f32	s16, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    27ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    27f0:	ea4f 0881 	mov.w	r8, r1, lsl #2
    27f4:	4d28      	ldr	r5, [pc, #160]	; (2898 <chorusTick+0xb8>)
    27f6:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    27fa:	4f28      	ldr	r7, [pc, #160]	; (289c <chorusTick+0xbc>)
    27fc:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    2800:	ed97 9a00 	vldr	s18, [r7]
    2804:	eddf 7a26 	vldr	s15, [pc, #152]	; 28a0 <chorusTick+0xc0>
    2808:	ee29 9a27 	vmul.f32	s18, s18, s15
    280c:	4e25      	ldr	r6, [pc, #148]	; (28a4 <chorusTick+0xc4>)
    280e:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    2812:	edd6 8a00 	vldr	s17, [r6]
    2816:	4824      	ldr	r0, [pc, #144]	; (28a8 <chorusTick+0xc8>)
    2818:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    281c:	f005 f82c 	bl	7878 <__tCycle_tick_veneer>
    2820:	ee28 0a80 	vmul.f32	s0, s17, s0
    2824:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    2828:	ee30 0a28 	vadd.f32	s0, s0, s17
    282c:	ee29 0a00 	vmul.f32	s0, s18, s0
    2830:	4628      	mov	r0, r5
    2832:	f004 fea5 	bl	7580 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    2836:	4c1d      	ldr	r4, [pc, #116]	; (28ac <chorusTick+0xcc>)
    2838:	4444      	add	r4, r8
    283a:	ed97 9a00 	vldr	s18, [r7]
    283e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2842:	ee29 9a27 	vmul.f32	s18, s18, s15
    2846:	edd6 9a00 	vldr	s19, [r6]
    284a:	4819      	ldr	r0, [pc, #100]	; (28b0 <chorusTick+0xd0>)
    284c:	4440      	add	r0, r8
    284e:	f005 f813 	bl	7878 <__tCycle_tick_veneer>
    2852:	ee29 0a80 	vmul.f32	s0, s19, s0
    2856:	ee38 0ac0 	vsub.f32	s0, s17, s0
    285a:	ee29 0a00 	vmul.f32	s0, s18, s0
    285e:	4620      	mov	r0, r4
    2860:	f004 fe8e 	bl	7580 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    2864:	eeb0 0a48 	vmov.f32	s0, s16
    2868:	4628      	mov	r0, r5
    286a:	f004 ff2d 	bl	76c8 <__tLinearDelay_tick_veneer>
    286e:	ee70 8a48 	vsub.f32	s17, s0, s16
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    2872:	eeb0 0a48 	vmov.f32	s0, s16
    2876:	4620      	mov	r0, r4
    2878:	f004 ff26 	bl	76c8 <__tLinearDelay_tick_veneer>
    287c:	ee30 0a48 	vsub.f32	s0, s0, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2880:	ee38 0a80 	vadd.f32	s0, s17, s0
    2884:	480b      	ldr	r0, [pc, #44]	; (28b4 <chorusTick+0xd4>)
    2886:	4440      	add	r0, r8
    2888:	f004 fe8e 	bl	75a8 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    288c:	eeb1 0a40 	vneg.f32	s0, s0
    2890:	ecbd 8b04 	vpop	{d8-d9}
    2894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2898:	200050f8 	.word	0x200050f8
    289c:	200056f0 	.word	0x200056f0
    28a0:	3f34fdf4 	.word	0x3f34fdf4
    28a4:	20005710 	.word	0x20005710
    28a8:	200055f8 	.word	0x200055f8
    28ac:	20005118 	.word	0x20005118
    28b0:	20005618 	.word	0x20005618
    28b4:	20000ed4 	.word	0x20000ed4
    28b8:	f3af 8000 	nop.w
    28bc:	f3af 8000 	nop.w

000028c0 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    28c0:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    28c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    28c6:	008c      	lsls	r4, r1, #2
    28c8:	4b0d      	ldr	r3, [pc, #52]	; (2900 <shaperTick+0x40>)
    28ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    28ce:	edd3 7a00 	vldr	s15, [r3]
    28d2:	ee27 0a80 	vmul.f32	s0, s15, s0
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    28d6:	4b0b      	ldr	r3, [pc, #44]	; (2904 <shaperTick+0x44>)
    28d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    28dc:	ed93 7a00 	vldr	s14, [r3]
    28e0:	ee67 7a87 	vmul.f32	s15, s15, s14
    28e4:	4808      	ldr	r0, [pc, #32]	; (2908 <shaperTick+0x48>)
    28e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    28ea:	edd1 0a00 	vldr	s1, [r1]
    28ee:	ee37 0a80 	vadd.f32	s0, s15, s0
    28f2:	f004 ff5d 	bl	77b0 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    28f6:	4805      	ldr	r0, [pc, #20]	; (290c <shaperTick+0x4c>)
    28f8:	4420      	add	r0, r4
    28fa:	f004 fe55 	bl	75a8 <__tHighpass_tick_veneer>
    return temp;
}
    28fe:	bd10      	pop	{r4, pc}
    2900:	200056f0 	.word	0x200056f0
    2904:	20005710 	.word	0x20005710
    2908:	20005730 	.word	0x20005730
    290c:	20000ed4 	.word	0x20000ed4
    2910:	f3af 8000 	nop.w
    2914:	f3af 8000 	nop.w
    2918:	f3af 8000 	nop.w
    291c:	f3af 8000 	nop.w

00002920 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    2920:	4770      	bx	lr
    2922:	bf00      	nop
    2924:	f3af 8000 	nop.w
    2928:	f3af 8000 	nop.w
    292c:	f3af 8000 	nop.w
    2930:	f3af 8000 	nop.w
    2934:	f3af 8000 	nop.w
    2938:	f3af 8000 	nop.w
    293c:	f3af 8000 	nop.w

00002940 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    2940:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    2942:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2946:	008c      	lsls	r4, r1, #2
    2948:	4806      	ldr	r0, [pc, #24]	; (2964 <tiltFilterTick+0x24>)
    294a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    294e:	f004 fec3 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    2952:	4805      	ldr	r0, [pc, #20]	; (2968 <tiltFilterTick+0x28>)
    2954:	4420      	add	r0, r4
    2956:	f004 febf 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    295a:	4804      	ldr	r0, [pc, #16]	; (296c <tiltFilterTick+0x2c>)
    295c:	4420      	add	r0, r4
    295e:	f004 febb 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    return sample;
}
    2962:	bd10      	pop	{r4, pc}
    2964:	20005cec 	.word	0x20005cec
    2968:	20005d0c 	.word	0x20005d0c
    296c:	20000b34 	.word	0x20000b34
    2970:	f3af 8000 	nop.w
    2974:	f3af 8000 	nop.w
    2978:	f3af 8000 	nop.w
    297c:	f3af 8000 	nop.w

00002980 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    2980:	b510      	push	{r4, lr}
    float gain = param1[v][string];
    2982:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2986:	008c      	lsls	r4, r1, #2
    2988:	4b11      	ldr	r3, [pc, #68]	; (29d0 <tanhTick+0x50>)
    298a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    298e:	edd3 7a00 	vldr	s15, [r3]
	sample = sample * gain;
    2992:	ee27 0a80 	vmul.f32	s0, s15, s0
    gain = gain * 0.5f;
    2996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    299a:	ee67 7a87 	vmul.f32	s15, s15, s14
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    299e:	480d      	ldr	r0, [pc, #52]	; (29d4 <tanhTick+0x54>)
    29a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    29a4:	ed91 7a00 	vldr	s14, [r1]
    29a8:	ee67 7a27 	vmul.f32	s15, s14, s15
    29ac:	ee37 0a80 	vadd.f32	s0, s15, s0
    29b0:	f004 fec2 	bl	7738 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    29b4:	4808      	ldr	r0, [pc, #32]	; (29d8 <tanhTick+0x58>)
    29b6:	4420      	add	r0, r4
    29b8:	f004 fdf6 	bl	75a8 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    29bc:	4b07      	ldr	r3, [pc, #28]	; (29dc <tanhTick+0x5c>)
    29be:	4423      	add	r3, r4
    29c0:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    29c4:	ee27 0a80 	vmul.f32	s0, s15, s0
    29c8:	f004 feb6 	bl	7738 <__tanhf_veneer>
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    29cc:	bd10      	pop	{r4, pc}
    29ce:	bf00      	nop
    29d0:	200056f0 	.word	0x200056f0
    29d4:	20005710 	.word	0x20005710
    29d8:	20000ed4 	.word	0x20000ed4
    29dc:	20005750 	.word	0x20005750

000029e0 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    29e0:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    29e2:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    29e6:	4b21      	ldr	r3, [pc, #132]	; (2a6c <softClipTick+0x8c>)
    29e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29ec:	edd3 7a00 	vldr	s15, [r3]
    29f0:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    29f4:	4b1e      	ldr	r3, [pc, #120]	; (2a70 <softClipTick+0x90>)
    29f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29fa:	ed93 0a00 	vldr	s0, [r3]
    29fe:	ee30 0a27 	vadd.f32	s0, s0, s15
    float shape = param3[v][string];
    2a02:	4b1c      	ldr	r3, [pc, #112]	; (2a74 <softClipTick+0x94>)
    2a04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a08:	edd3 6a00 	vldr	s13, [r3]
    if (sample <= -1.0f)
    2a0c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    2a10:	eeb4 0ae7 	vcmpe.f32	s0, s15
    2a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a18:	d909      	bls.n	2a2e <softClipTick+0x4e>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    2a1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2a1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    2a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a26:	db04      	blt.n	2a32 <softClipTick+0x52>
    {
        sample = 1.0f;
    2a28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2a2c:	e001      	b.n	2a32 <softClipTick+0x52>
        sample = -1.0f;
    2a2e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    2a32:	ee20 7a26 	vmul.f32	s14, s0, s13
    2a36:	ee60 7a00 	vmul.f32	s15, s0, s0
    2a3a:	ee27 0a80 	vmul.f32	s0, s15, s0
    2a3e:	ee20 0a26 	vmul.f32	s0, s0, s13
    2a42:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2a78 <softClipTick+0x98>
    2a46:	ee20 0a27 	vmul.f32	s0, s0, s15
    2a4a:	ee37 0a40 	vsub.f32	s0, s14, s0
        sample = sample * shapeDividerS[v][string];
    2a4e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2a52:	4b0a      	ldr	r3, [pc, #40]	; (2a7c <softClipTick+0x9c>)
    2a54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2a58:	edd3 7a00 	vldr	s15, [r3]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2a5c:	ee27 0a80 	vmul.f32	s0, s15, s0
    2a60:	4807      	ldr	r0, [pc, #28]	; (2a80 <softClipTick+0xa0>)
    2a62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2a66:	f004 fd9f 	bl	75a8 <__tHighpass_tick_veneer>
    return sample;
}
    2a6a:	bd08      	pop	{r3, pc}
    2a6c:	200056f0 	.word	0x200056f0
    2a70:	20005710 	.word	0x20005710
    2a74:	20005730 	.word	0x20005730
    2a78:	3eaaaaaa 	.word	0x3eaaaaaa
    2a7c:	20005cc0 	.word	0x20005cc0
    2a80:	20000ed4 	.word	0x20000ed4
    2a84:	f3af 8000 	nop.w
    2a88:	f3af 8000 	nop.w
    2a8c:	f3af 8000 	nop.w
    2a90:	f3af 8000 	nop.w
    2a94:	f3af 8000 	nop.w
    2a98:	f3af 8000 	nop.w
    2a9c:	f3af 8000 	nop.w

00002aa0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{
    2aa0:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    2aa2:	eb01 0440 	add.w	r4, r1, r0, lsl #1
    2aa6:	4a21      	ldr	r2, [pc, #132]	; (2b2c <hardClipTick+0x8c>)
    2aa8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    2aac:	edd2 7a00 	vldr	s15, [r2]
    2ab0:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    2ab4:	4b1e      	ldr	r3, [pc, #120]	; (2b30 <hardClipTick+0x90>)
    2ab6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2aba:	ed93 0a00 	vldr	s0, [r3]
    2abe:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (sample <= -1.0f)
    2ac2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    2ac6:	eeb4 0ae7 	vcmpe.f32	s0, s15
    2aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ace:	d909      	bls.n	2ae4 <hardClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    2ad0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2ad4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    2ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2adc:	db04      	blt.n	2ae8 <hardClipTick+0x48>
    {
        sample = 1.0f;
    2ade:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2ae2:	e001      	b.n	2ae8 <hardClipTick+0x48>
        sample = -1.0f;
    2ae4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2ae8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2aec:	008e      	lsls	r6, r1, #2
    2aee:	4d11      	ldr	r5, [pc, #68]	; (2b34 <hardClipTick+0x94>)
    2af0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    2af4:	edd5 7a00 	vldr	s15, [r5]
    2af8:	ee27 0a80 	vmul.f32	s0, s15, s0
    2afc:	f004 fe68 	bl	77d0 <__arm_sin_f32_veneer>
    2b00:	4c0d      	ldr	r4, [pc, #52]	; (2b38 <hardClipTick+0x98>)
    2b02:	4434      	add	r4, r6
    2b04:	edd4 7a00 	vldr	s15, [r4]
    2b08:	ee20 0a27 	vmul.f32	s0, s0, s15
    2b0c:	edd5 7a00 	vldr	s15, [r5]
    2b10:	ee20 0a27 	vmul.f32	s0, s0, s15
    2b14:	f004 fe5c 	bl	77d0 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    2b18:	edd4 7a00 	vldr	s15, [r4]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2b1c:	ee27 0a80 	vmul.f32	s0, s15, s0
    2b20:	4806      	ldr	r0, [pc, #24]	; (2b3c <hardClipTick+0x9c>)
    2b22:	4430      	add	r0, r6
    2b24:	f004 fd40 	bl	75a8 <__tHighpass_tick_veneer>
    return sample;
}
    2b28:	bd70      	pop	{r4, r5, r6, pc}
    2b2a:	bf00      	nop
    2b2c:	200056f0 	.word	0x200056f0
    2b30:	20005710 	.word	0x20005710
    2b34:	20005730 	.word	0x20005730
    2b38:	20005ca0 	.word	0x20005ca0
    2b3c:	20000ed4 	.word	0x20000ed4

00002b40 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    2b40:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    2b42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2b46:	008c      	lsls	r4, r1, #2
    2b48:	4b15      	ldr	r3, [pc, #84]	; (2ba0 <satTick+0x60>)
    2b4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2b4e:	ed93 6a00 	vldr	s12, [r3]
    2b52:	ee26 0a00 	vmul.f32	s0, s12, s0
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b56:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <satTick+0x64>)
    2b58:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2b5c:	ed93 7a00 	vldr	s14, [r3]
    2b60:	ee26 6a07 	vmul.f32	s12, s12, s14
    2b64:	ee36 6a00 	vadd.f32	s12, s12, s0
    2b68:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2b6c:	ee37 7a00 	vadd.f32	s14, s14, s0
    2b70:	eeb0 7ac7 	vabs.f32	s14, s14
    2b74:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2b78:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    2b7c:	ee37 7b05 	vadd.f64	d7, d7, d5
    2b80:	ee86 0b07 	vdiv.f64	d0, d6, d7
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2b84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2b88:	4807      	ldr	r0, [pc, #28]	; (2ba8 <satTick+0x68>)
    2b8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2b8e:	f004 fd0b 	bl	75a8 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    2b92:	4806      	ldr	r0, [pc, #24]	; (2bac <satTick+0x6c>)
    2b94:	4420      	add	r0, r4
    2b96:	f004 fd07 	bl	75a8 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    2b9a:	f004 fdb1 	bl	7700 <__LEAF_tanh_veneer>
    return temp;
}
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	200056f0 	.word	0x200056f0
    2ba4:	20005710 	.word	0x20005710
    2ba8:	20000ed4 	.word	0x20000ed4
    2bac:	20000ef4 	.word	0x20000ef4
    2bb0:	f3af 8000 	nop.w
    2bb4:	f3af 8000 	nop.w
    2bb8:	f3af 8000 	nop.w
    2bbc:	f3af 8000 	nop.w

00002bc0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    2bc0:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    2bc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2bc6:	4b06      	ldr	r3, [pc, #24]	; (2be0 <bcTick+0x20>)
    2bc8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2bcc:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    2bd0:	ee27 0a80 	vmul.f32	s0, s15, s0
    2bd4:	4803      	ldr	r0, [pc, #12]	; (2be4 <bcTick+0x24>)
    2bd6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2bda:	f004 fd8d 	bl	76f8 <__tCrusher_tick_veneer>
}
    2bde:	bd08      	pop	{r3, pc}
    2be0:	200056f0 	.word	0x200056f0
    2be4:	20000b14 	.word	0x20000b14
    2be8:	f3af 8000 	nop.w
    2bec:	f3af 8000 	nop.w
    2bf0:	f3af 8000 	nop.w
    2bf4:	f3af 8000 	nop.w
    2bf8:	f3af 8000 	nop.w
    2bfc:	f3af 8000 	nop.w

00002c00 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    2c00:	b508      	push	{r3, lr}
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    2c02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2c06:	4803      	ldr	r0, [pc, #12]	; (2c14 <compressorTick+0x14>)
    2c08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c0c:	f004 fd10 	bl	7630 <__tCompressor_tick_veneer>
}
    2c10:	bd08      	pop	{r3, pc}
    2c12:	bf00      	nop
    2c14:	20000b54 	.word	0x20000b54
    2c18:	f3af 8000 	nop.w
    2c1c:	f3af 8000 	nop.w

00002c20 <FXlowpassTick>:

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
    2c20:	b508      	push	{r3, lr}
	return tSVF_tick(&FXlowpass[v][string], sample);
    2c22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2c26:	4803      	ldr	r0, [pc, #12]	; (2c34 <FXlowpassTick+0x14>)
    2c28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c2c:	f004 fe00 	bl	7830 <__tSVF_tick_veneer>
}
    2c30:	bd08      	pop	{r3, pc}
    2c32:	bf00      	nop
    2c34:	20000964 	.word	0x20000964
    2c38:	f3af 8000 	nop.w
    2c3c:	f3af 8000 	nop.w

00002c40 <FXhighpassTick>:

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
    2c40:	b508      	push	{r3, lr}
	return tSVF_tick(&FXhighpass[v][string], sample);
    2c42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2c46:	4803      	ldr	r0, [pc, #12]	; (2c54 <FXhighpassTick+0x14>)
    2c48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c4c:	f004 fdf0 	bl	7830 <__tSVF_tick_veneer>
}
    2c50:	bd08      	pop	{r3, pc}
    2c52:	bf00      	nop
    2c54:	20000944 	.word	0x20000944
    2c58:	f3af 8000 	nop.w
    2c5c:	f3af 8000 	nop.w

00002c60 <FXbandpassTick>:

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
    2c60:	b508      	push	{r3, lr}
	return tSVF_tick(&FXbandpass[v][string], sample);
    2c62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2c66:	4803      	ldr	r0, [pc, #12]	; (2c74 <FXbandpassTick+0x14>)
    2c68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c6c:	f004 fde0 	bl	7830 <__tSVF_tick_veneer>
}
    2c70:	bd08      	pop	{r3, pc}
    2c72:	bf00      	nop
    2c74:	20000904 	.word	0x20000904
    2c78:	f3af 8000 	nop.w
    2c7c:	f3af 8000 	nop.w

00002c80 <FXdiodeLowpassTick>:

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
    2c80:	b508      	push	{r3, lr}
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    2c82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2c86:	4803      	ldr	r0, [pc, #12]	; (2c94 <FXdiodeLowpassTick+0x14>)
    2c88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c8c:	f004 fccc 	bl	7628 <__tDiodeFilter_tick_veneer>
}
    2c90:	bd08      	pop	{r3, pc}
    2c92:	bf00      	nop
    2c94:	20000924 	.word	0x20000924
    2c98:	f3af 8000 	nop.w
    2c9c:	f3af 8000 	nop.w

00002ca0 <FXVZpeakTick>:

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
    2ca0:	b508      	push	{r3, lr}
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    2ca2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2ca6:	4803      	ldr	r0, [pc, #12]	; (2cb4 <FXVZpeakTick+0x14>)
    2ca8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2cac:	f004 fd14 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
}
    2cb0:	bd08      	pop	{r3, pc}
    2cb2:	bf00      	nop
    2cb4:	200008e4 	.word	0x200008e4
    2cb8:	f3af 8000 	nop.w
    2cbc:	f3af 8000 	nop.w

00002cc0 <FXVZlowshelfTick>:

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
    2cc0:	b508      	push	{r3, lr}
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    2cc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2cc6:	4803      	ldr	r0, [pc, #12]	; (2cd4 <FXVZlowshelfTick+0x14>)
    2cc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2ccc:	f004 fd04 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
}
    2cd0:	bd08      	pop	{r3, pc}
    2cd2:	bf00      	nop
    2cd4:	200008c4 	.word	0x200008c4
    2cd8:	f3af 8000 	nop.w
    2cdc:	f3af 8000 	nop.w

00002ce0 <FXVZhighshelfTick>:
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
    2ce0:	b508      	push	{r3, lr}
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    2ce2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2ce6:	4803      	ldr	r0, [pc, #12]	; (2cf4 <FXVZhighshelfTick+0x14>)
    2ce8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2cec:	f004 fcf4 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
}
    2cf0:	bd08      	pop	{r3, pc}
    2cf2:	bf00      	nop
    2cf4:	200008a4 	.word	0x200008a4
    2cf8:	f3af 8000 	nop.w
    2cfc:	f3af 8000 	nop.w

00002d00 <FXVZbandrejectTick>:
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
    2d00:	b508      	push	{r3, lr}
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    2d02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2d06:	4803      	ldr	r0, [pc, #12]	; (2d14 <FXVZbandrejectTick+0x14>)
    2d08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2d0c:	f004 fce4 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
}
    2d10:	bd08      	pop	{r3, pc}
    2d12:	bf00      	nop
    2d14:	20000884 	.word	0x20000884
    2d18:	f3af 8000 	nop.w
    2d1c:	f3af 8000 	nop.w

00002d20 <FXLadderLowpassTick>:

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
    2d20:	b508      	push	{r3, lr}
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    2d22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2d26:	4803      	ldr	r0, [pc, #12]	; (2d34 <FXLadderLowpassTick+0x14>)
    2d28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2d2c:	f004 fd44 	bl	77b8 <__tLadderFilter_tick_veneer>
}
    2d30:	bd08      	pop	{r3, pc}
    2d32:	bf00      	nop
    2d34:	20000864 	.word	0x20000864
    2d38:	f3af 8000 	nop.w
    2d3c:	f3af 8000 	nop.w

00002d40 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
    2d40:	b538      	push	{r3, r4, r5, lr}
    2d42:	4605      	mov	r5, r0
    2d44:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2d46:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2d84 <FXLowpassParam1+0x44>
    2d4a:	ee20 0a20 	vmul.f32	s0, s0, s1
    2d4e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2d88 <FXLowpassParam1+0x48>
    2d52:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d56:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2d5a:	ee30 0a60 	vsub.f32	s0, s0, s1
    2d5e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2d8c <FXLowpassParam1+0x4c>
    2d62:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2d90 <FXLowpassParam1+0x50>
    2d66:	ee60 0a20 	vmul.f32	s1, s0, s1
    2d6a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2d94 <FXLowpassParam1+0x54>
    2d6e:	f003 fee7 	bl	6b40 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d72:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2d76:	4808      	ldr	r0, [pc, #32]	; (2d98 <FXLowpassParam1+0x58>)
    2d78:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2d7c:	f004 fd64 	bl	7848 <__tSVF_setFreqFast_veneer>
}
    2d80:	bd38      	pop	{r3, r4, r5, pc}
    2d82:	bf00      	nop
    2d84:	429a0000 	.word	0x429a0000
    2d88:	42280000 	.word	0x42280000
    2d8c:	457ff000 	.word	0x457ff000
    2d90:	420fb824 	.word	0x420fb824
    2d94:	00000000 	.word	0x00000000
    2d98:	20000964 	.word	0x20000964
    2d9c:	f3af 8000 	nop.w

00002da0 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
    2da0:	b538      	push	{r3, r4, r5, lr}
    2da2:	4605      	mov	r5, r0
    2da4:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2da6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2de4 <FXHighpassParam1+0x44>
    2daa:	ee20 0a20 	vmul.f32	s0, s0, s1
    2dae:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2de8 <FXHighpassParam1+0x48>
    2db2:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2db6:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2dba:	ee30 0a60 	vsub.f32	s0, s0, s1
    2dbe:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2dec <FXHighpassParam1+0x4c>
    2dc2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2df0 <FXHighpassParam1+0x50>
    2dc6:	ee60 0a20 	vmul.f32	s1, s0, s1
    2dca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2df4 <FXHighpassParam1+0x54>
    2dce:	f003 feb7 	bl	6b40 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2dd2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2dd6:	4808      	ldr	r0, [pc, #32]	; (2df8 <FXHighpassParam1+0x58>)
    2dd8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2ddc:	f004 fd34 	bl	7848 <__tSVF_setFreqFast_veneer>
}
    2de0:	bd38      	pop	{r3, r4, r5, pc}
    2de2:	bf00      	nop
    2de4:	429a0000 	.word	0x429a0000
    2de8:	42280000 	.word	0x42280000
    2dec:	457ff000 	.word	0x457ff000
    2df0:	420fb824 	.word	0x420fb824
    2df4:	00000000 	.word	0x00000000
    2df8:	20000944 	.word	0x20000944
    2dfc:	f3af 8000 	nop.w

00002e00 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
    2e00:	b538      	push	{r3, r4, r5, lr}
    2e02:	4605      	mov	r5, r0
    2e04:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2e06:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2e44 <FXBandpassParam1+0x44>
    2e0a:	ee20 0a20 	vmul.f32	s0, s0, s1
    2e0e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2e48 <FXBandpassParam1+0x48>
    2e12:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e16:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2e1a:	ee30 0a60 	vsub.f32	s0, s0, s1
    2e1e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2e4c <FXBandpassParam1+0x4c>
    2e22:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2e50 <FXBandpassParam1+0x50>
    2e26:	ee60 0a20 	vmul.f32	s1, s0, s1
    2e2a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2e54 <FXBandpassParam1+0x54>
    2e2e:	f003 fe87 	bl	6b40 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e32:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2e36:	4808      	ldr	r0, [pc, #32]	; (2e58 <FXBandpassParam1+0x58>)
    2e38:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2e3c:	f004 fd04 	bl	7848 <__tSVF_setFreqFast_veneer>
}
    2e40:	bd38      	pop	{r3, r4, r5, pc}
    2e42:	bf00      	nop
    2e44:	429a0000 	.word	0x429a0000
    2e48:	42280000 	.word	0x42280000
    2e4c:	457ff000 	.word	0x457ff000
    2e50:	420fb824 	.word	0x420fb824
    2e54:	00000000 	.word	0x00000000
    2e58:	20000904 	.word	0x20000904
    2e5c:	f3af 8000 	nop.w

00002e60 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
    2e60:	b538      	push	{r3, r4, r5, lr}
    2e62:	4605      	mov	r5, r0
    2e64:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2e66:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2ea4 <FXDiodeParam1+0x44>
    2e6a:	ee20 0a20 	vmul.f32	s0, s0, s1
    2e6e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2ea8 <FXDiodeParam1+0x48>
    2e72:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e76:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2e7a:	ee30 0a60 	vsub.f32	s0, s0, s1
    2e7e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2eac <FXDiodeParam1+0x4c>
    2e82:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2eb0 <FXDiodeParam1+0x50>
    2e86:	ee60 0a20 	vmul.f32	s1, s0, s1
    2e8a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2eb4 <FXDiodeParam1+0x54>
    2e8e:	f003 fe57 	bl	6b40 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2e92:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2e96:	4808      	ldr	r0, [pc, #32]	; (2eb8 <FXDiodeParam1+0x58>)
    2e98:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2e9c:	f004 fc64 	bl	7768 <__tDiodeFilter_setFreqFast_veneer>
}
    2ea0:	bd38      	pop	{r3, r4, r5, pc}
    2ea2:	bf00      	nop
    2ea4:	429a0000 	.word	0x429a0000
    2ea8:	42280000 	.word	0x42280000
    2eac:	457ff000 	.word	0x457ff000
    2eb0:	420fb824 	.word	0x420fb824
    2eb4:	00000000 	.word	0x00000000
    2eb8:	20000924 	.word	0x20000924
    2ebc:	f3af 8000 	nop.w

00002ec0 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
    2ec0:	b538      	push	{r3, r4, r5, lr}
    2ec2:	4605      	mov	r5, r0
    2ec4:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2ec6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2f04 <FXPeakParam1+0x44>
    2eca:	ee20 0a20 	vmul.f32	s0, s0, s1
    2ece:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2f08 <FXPeakParam1+0x48>
    2ed2:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ed6:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2eda:	ee30 0a60 	vsub.f32	s0, s0, s1
    2ede:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2f0c <FXPeakParam1+0x4c>
    2ee2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2f10 <FXPeakParam1+0x50>
    2ee6:	ee60 0a20 	vmul.f32	s1, s0, s1
    2eea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2f14 <FXPeakParam1+0x54>
    2eee:	f003 fe27 	bl	6b40 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2ef2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2ef6:	4808      	ldr	r0, [pc, #32]	; (2f18 <FXPeakParam1+0x58>)
    2ef8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2efc:	f004 fc48 	bl	7790 <__tVZFilter_setFreqFast_veneer>
}
    2f00:	bd38      	pop	{r3, r4, r5, pc}
    2f02:	bf00      	nop
    2f04:	429a0000 	.word	0x429a0000
    2f08:	42280000 	.word	0x42280000
    2f0c:	457ff000 	.word	0x457ff000
    2f10:	420fb824 	.word	0x420fb824
    2f14:	00000000 	.word	0x00000000
    2f18:	200008e4 	.word	0x200008e4
    2f1c:	f3af 8000 	nop.w

00002f20 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
    2f20:	b538      	push	{r3, r4, r5, lr}
    2f22:	4605      	mov	r5, r0
    2f24:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2f26:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2f64 <FXLowShelfParam1+0x44>
    2f2a:	ee20 0a20 	vmul.f32	s0, s0, s1
    2f2e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2f68 <FXLowShelfParam1+0x48>
    2f32:	ee30 0a20 	vadd.f32	s0, s0, s1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f36:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2f3a:	ee30 0a60 	vsub.f32	s0, s0, s1
    2f3e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2f6c <FXLowShelfParam1+0x4c>
    2f42:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2f70 <FXLowShelfParam1+0x50>
    2f46:	ee60 0a20 	vmul.f32	s1, s0, s1
    2f4a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2f74 <FXLowShelfParam1+0x54>
    2f4e:	f003 fdf7 	bl	6b40 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f52:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2f56:	4808      	ldr	r0, [pc, #32]	; (2f78 <FXLowShelfParam1+0x58>)
    2f58:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2f5c:	f004 fc18 	bl	7790 <__tVZFilter_setFreqFast_veneer>
}
    2f60:	bd38      	pop	{r3, r4, r5, pc}
    2f62:	bf00      	nop
    2f64:	429a0000 	.word	0x429a0000
    2f68:	42280000 	.word	0x42280000
    2f6c:	457ff000 	.word	0x457ff000
    2f70:	420fb824 	.word	0x420fb824
    2f74:	00000000 	.word	0x00000000
    2f78:	200008c4 	.word	0x200008c4
    2f7c:	f3af 8000 	nop.w

00002f80 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
    2f80:	b538      	push	{r3, r4, r5, lr}
    2f82:	4605      	mov	r5, r0
    2f84:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2f86:	eddf 0a0f 	vldr	s1, [pc, #60]	; 2fc4 <FXHighShelfParam1+0x44>
    2f8a:	ee20 0a20 	vmul.f32	s0, s0, s1
    2f8e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 2fc8 <FXHighShelfParam1+0x48>
    2f92:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f96:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2f9a:	ee30 0a60 	vsub.f32	s0, s0, s1
    2f9e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 2fcc <FXHighShelfParam1+0x4c>
    2fa2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2fd0 <FXHighShelfParam1+0x50>
    2fa6:	ee60 0a20 	vmul.f32	s1, s0, s1
    2faa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2fd4 <FXHighShelfParam1+0x54>
    2fae:	f003 fdc7 	bl	6b40 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2fb2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2fb6:	4808      	ldr	r0, [pc, #32]	; (2fd8 <FXHighShelfParam1+0x58>)
    2fb8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2fbc:	f004 fbe8 	bl	7790 <__tVZFilter_setFreqFast_veneer>
}
    2fc0:	bd38      	pop	{r3, r4, r5, pc}
    2fc2:	bf00      	nop
    2fc4:	429a0000 	.word	0x429a0000
    2fc8:	42280000 	.word	0x42280000
    2fcc:	457ff000 	.word	0x457ff000
    2fd0:	420fb824 	.word	0x420fb824
    2fd4:	00000000 	.word	0x00000000
    2fd8:	200008a4 	.word	0x200008a4
    2fdc:	f3af 8000 	nop.w

00002fe0 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
    2fe0:	b538      	push	{r3, r4, r5, lr}
    2fe2:	4605      	mov	r5, r0
    2fe4:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    2fe6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 3024 <FXNotchParam1+0x44>
    2fea:	ee20 0a20 	vmul.f32	s0, s0, s1
    2fee:	eddf 0a0e 	vldr	s1, [pc, #56]	; 3028 <FXNotchParam1+0x48>
    2ff2:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ff6:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    2ffa:	ee30 0a60 	vsub.f32	s0, s0, s1
    2ffe:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 302c <FXNotchParam1+0x4c>
    3002:	eddf 0a0b 	vldr	s1, [pc, #44]	; 3030 <FXNotchParam1+0x50>
    3006:	ee60 0a20 	vmul.f32	s1, s0, s1
    300a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 3034 <FXNotchParam1+0x54>
    300e:	f003 fd97 	bl	6b40 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    3012:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3016:	4808      	ldr	r0, [pc, #32]	; (3038 <FXNotchParam1+0x58>)
    3018:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    301c:	f004 fbb8 	bl	7790 <__tVZFilter_setFreqFast_veneer>
}
    3020:	bd38      	pop	{r3, r4, r5, pc}
    3022:	bf00      	nop
    3024:	429a0000 	.word	0x429a0000
    3028:	42280000 	.word	0x42280000
    302c:	457ff000 	.word	0x457ff000
    3030:	420fb824 	.word	0x420fb824
    3034:	00000000 	.word	0x00000000
    3038:	20000884 	.word	0x20000884
    303c:	f3af 8000 	nop.w

00003040 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
    3040:	b538      	push	{r3, r4, r5, lr}
    3042:	4605      	mov	r5, r0
    3044:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    3046:	eddf 0a0f 	vldr	s1, [pc, #60]	; 3084 <FXLadderParam1+0x44>
    304a:	ee20 0a20 	vmul.f32	s0, s0, s1
    304e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 3088 <FXLadderParam1+0x48>
    3052:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3056:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    305a:	ee30 0a60 	vsub.f32	s0, s0, s1
    305e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 308c <FXLadderParam1+0x4c>
    3062:	eddf 0a0b 	vldr	s1, [pc, #44]	; 3090 <FXLadderParam1+0x50>
    3066:	ee60 0a20 	vmul.f32	s1, s0, s1
    306a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 3094 <FXLadderParam1+0x54>
    306e:	f003 fd67 	bl	6b40 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    3072:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3076:	4808      	ldr	r0, [pc, #32]	; (3098 <FXLadderParam1+0x58>)
    3078:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    307c:	f004 fb0c 	bl	7698 <__tLadderFilter_setFreqFast_veneer>
}
    3080:	bd38      	pop	{r3, r4, r5, pc}
    3082:	bf00      	nop
    3084:	429a0000 	.word	0x429a0000
    3088:	42280000 	.word	0x42280000
    308c:	457ff000 	.word	0x457ff000
    3090:	420fb824 	.word	0x420fb824
    3094:	00000000 	.word	0x00000000
    3098:	20000864 	.word	0x20000864
    309c:	f3af 8000 	nop.w

000030a0 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
    30a0:	b510      	push	{r4, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    30a6:	4c08      	ldr	r4, [pc, #32]	; (30c8 <FXPeakParam2+0x28>)
    30a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    30ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 30cc <FXPeakParam2+0x2c>
    30b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    30b4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    30b8:	ee30 0a67 	vsub.f32	s0, s0, s15
    30bc:	f004 fb8c 	bl	77d8 <__fasterdbtoa_veneer>
    30c0:	4620      	mov	r0, r4
    30c2:	f004 fb91 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    30c6:	bd10      	pop	{r4, pc}
    30c8:	200008e4 	.word	0x200008e4
    30cc:	42480000 	.word	0x42480000
    30d0:	f3af 8000 	nop.w
    30d4:	f3af 8000 	nop.w
    30d8:	f3af 8000 	nop.w
    30dc:	f3af 8000 	nop.w

000030e0 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
    30e0:	b510      	push	{r4, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    30e6:	4c08      	ldr	r4, [pc, #32]	; (3108 <FXLowShelfParam2+0x28>)
    30e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    30ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 310c <FXLowShelfParam2+0x2c>
    30f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    30f4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    30f8:	ee30 0a67 	vsub.f32	s0, s0, s15
    30fc:	f004 fb6c 	bl	77d8 <__fasterdbtoa_veneer>
    3100:	4620      	mov	r0, r4
    3102:	f004 fb71 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    3106:	bd10      	pop	{r4, pc}
    3108:	200008c4 	.word	0x200008c4
    310c:	42480000 	.word	0x42480000
    3110:	f3af 8000 	nop.w
    3114:	f3af 8000 	nop.w
    3118:	f3af 8000 	nop.w
    311c:	f3af 8000 	nop.w

00003120 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
    3120:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3122:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3126:	4c08      	ldr	r4, [pc, #32]	; (3148 <FXHighShelfParam2+0x28>)
    3128:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    312c:	eddf 7a07 	vldr	s15, [pc, #28]	; 314c <FXHighShelfParam2+0x2c>
    3130:	ee20 0a27 	vmul.f32	s0, s0, s15
    3134:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    3138:	ee30 0a67 	vsub.f32	s0, s0, s15
    313c:	f004 fb4c 	bl	77d8 <__fasterdbtoa_veneer>
    3140:	4620      	mov	r0, r4
    3142:	f004 fb51 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    3146:	bd10      	pop	{r4, pc}
    3148:	200008a4 	.word	0x200008a4
    314c:	42480000 	.word	0x42480000
    3150:	f3af 8000 	nop.w
    3154:	f3af 8000 	nop.w
    3158:	f3af 8000 	nop.w
    315c:	f3af 8000 	nop.w

00003160 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
    3160:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3162:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3166:	4c08      	ldr	r4, [pc, #32]	; (3188 <FXNotchParam2+0x28>)
    3168:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    316c:	eddf 7a07 	vldr	s15, [pc, #28]	; 318c <FXNotchParam2+0x2c>
    3170:	ee20 0a27 	vmul.f32	s0, s0, s15
    3174:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    3178:	ee30 0a67 	vsub.f32	s0, s0, s15
    317c:	f004 fb2c 	bl	77d8 <__fasterdbtoa_veneer>
    3180:	4620      	mov	r0, r4
    3182:	f004 fb31 	bl	77e8 <__tVZFilter_setGain_veneer>

}
    3186:	bd10      	pop	{r4, pc}
    3188:	20000884 	.word	0x20000884
    318c:	42480000 	.word	0x42480000
    3190:	f3af 8000 	nop.w
    3194:	f3af 8000 	nop.w
    3198:	f3af 8000 	nop.w
    319c:	f3af 8000 	nop.w

000031a0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
    31a0:	b508      	push	{r3, lr}
	tSVF_setQ(&FXlowpass[v][string], value);
    31a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    31a6:	4803      	ldr	r0, [pc, #12]	; (31b4 <FXLowpassParam3+0x14>)
    31a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    31ac:	f004 fb80 	bl	78b0 <__tSVF_setQ_veneer>
}
    31b0:	bd08      	pop	{r3, pc}
    31b2:	bf00      	nop
    31b4:	20000964 	.word	0x20000964
    31b8:	f3af 8000 	nop.w
    31bc:	f3af 8000 	nop.w

000031c0 <FXHighpassParam3>:

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    31c0:	b508      	push	{r3, lr}
    tSVF_setQ(&FXhighpass[v][string], value);
    31c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    31c6:	4803      	ldr	r0, [pc, #12]	; (31d4 <FXHighpassParam3+0x14>)
    31c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    31cc:	f004 fb70 	bl	78b0 <__tSVF_setQ_veneer>
}
    31d0:	bd08      	pop	{r3, pc}
    31d2:	bf00      	nop
    31d4:	20000944 	.word	0x20000944
    31d8:	f3af 8000 	nop.w
    31dc:	f3af 8000 	nop.w

000031e0 <FXBandpassParam3>:

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    31e0:	b508      	push	{r3, lr}
    tSVF_setQ(&FXbandpass[v][string], value);
    31e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    31e6:	4803      	ldr	r0, [pc, #12]	; (31f4 <FXBandpassParam3+0x14>)
    31e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    31ec:	f004 fb60 	bl	78b0 <__tSVF_setQ_veneer>
}
    31f0:	bd08      	pop	{r3, pc}
    31f2:	bf00      	nop
    31f4:	20000904 	.word	0x20000904
    31f8:	f3af 8000 	nop.w
    31fc:	f3af 8000 	nop.w

00003200 <FXDiodeParam3>:

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
    3200:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    3202:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3206:	4803      	ldr	r0, [pc, #12]	; (3214 <FXDiodeParam3+0x14>)
    3208:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    320c:	f004 faf8 	bl	7800 <__tDiodeFilter_setQ_veneer>
}
    3210:	bd08      	pop	{r3, pc}
    3212:	bf00      	nop
    3214:	20000924 	.word	0x20000924
    3218:	f3af 8000 	nop.w
    321c:	f3af 8000 	nop.w

00003220 <FXPeakParam3>:


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
    3220:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
    3222:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3226:	4803      	ldr	r0, [pc, #12]	; (3234 <FXPeakParam3+0x14>)
    3228:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    322c:	f004 fa0c 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    3230:	bd08      	pop	{r3, pc}
    3232:	bf00      	nop
    3234:	200008e4 	.word	0x200008e4
    3238:	f3af 8000 	nop.w
    323c:	f3af 8000 	nop.w

00003240 <FXLowShelfParam3>:


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
    3240:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
    3242:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3246:	4803      	ldr	r0, [pc, #12]	; (3254 <FXLowShelfParam3+0x14>)
    3248:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    324c:	f004 f9fc 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    3250:	bd08      	pop	{r3, pc}
    3252:	bf00      	nop
    3254:	200008c4 	.word	0x200008c4
    3258:	f3af 8000 	nop.w
    325c:	f3af 8000 	nop.w

00003260 <FXHighShelfParam3>:


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
    3260:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
    3262:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3266:	4803      	ldr	r0, [pc, #12]	; (3274 <FXHighShelfParam3+0x14>)
    3268:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    326c:	f004 f9ec 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    3270:	bd08      	pop	{r3, pc}
    3272:	bf00      	nop
    3274:	200008a4 	.word	0x200008a4
    3278:	f3af 8000 	nop.w
    327c:	f3af 8000 	nop.w

00003280 <FXNotchParam3>:


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
    3280:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    3282:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3286:	4803      	ldr	r0, [pc, #12]	; (3294 <FXNotchParam3+0x14>)
    3288:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    328c:	f004 f9dc 	bl	7648 <__tVZFilter_setResonance_veneer>
}
    3290:	bd08      	pop	{r3, pc}
    3292:	bf00      	nop
    3294:	20000884 	.word	0x20000884
    3298:	f3af 8000 	nop.w
    329c:	f3af 8000 	nop.w

000032a0 <FXLadderParam3>:


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
    32a0:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    32a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    32a6:	4803      	ldr	r0, [pc, #12]	; (32b4 <FXLadderParam3+0x14>)
    32a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    32ac:	f004 f96c 	bl	7588 <__tLadderFilter_setQ_veneer>
}
    32b0:	bd08      	pop	{r3, pc}
    32b2:	bf00      	nop
    32b4:	20000864 	.word	0x20000864
    32b8:	f3af 8000 	nop.w
    32bc:	f3af 8000 	nop.w

000032c0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    32c0:	b538      	push	{r3, r4, r5, lr}
    32c2:	ed2d 8b02 	vpush	{d8}
    32c6:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32c8:	eeb3 8a0e 	vmov.f32	s16, #62	; 0x41f00000  30.0
    32cc:	ee20 8a08 	vmul.f32	s16, s0, s16
    32d0:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    32d4:	ee38 8a40 	vsub.f32	s16, s16, s0
    32d8:	eeb1 0a48 	vneg.f32	s0, s16
    32dc:	f004 faec 	bl	78b8 <__fastdbtoa_veneer>
    32e0:	00a5      	lsls	r5, r4, #2
    32e2:	4808      	ldr	r0, [pc, #32]	; (3304 <noiseSetTilt+0x44>)
    32e4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    32e8:	f004 fa7e 	bl	77e8 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    32ec:	eeb0 0a48 	vmov.f32	s0, s16
    32f0:	f004 fae2 	bl	78b8 <__fastdbtoa_veneer>
    32f4:	4804      	ldr	r0, [pc, #16]	; (3308 <noiseSetTilt+0x48>)
    32f6:	4428      	add	r0, r5
    32f8:	f004 fa76 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    32fc:	ecbd 8b02 	vpop	{d8}
    3300:	bd38      	pop	{r3, r4, r5, pc}
    3302:	bf00      	nop
    3304:	20005668 	.word	0x20005668
    3308:	20005670 	.word	0x20005670
    330c:	f3af 8000 	nop.w
    3310:	f3af 8000 	nop.w
    3314:	f3af 8000 	nop.w
    3318:	f3af 8000 	nop.w
    331c:	f3af 8000 	nop.w

00003320 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
    3320:	b510      	push	{r4, lr}
    3322:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3324:	eddf 7a07 	vldr	s15, [pc, #28]	; 3344 <noiseSetGain+0x24>
    3328:	ee20 0a27 	vmul.f32	s0, s0, s15
    332c:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    3330:	ee30 0a67 	vsub.f32	s0, s0, s15
    3334:	f004 fac0 	bl	78b8 <__fastdbtoa_veneer>
    3338:	4803      	ldr	r0, [pc, #12]	; (3348 <noiseSetGain+0x28>)
    333a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    333e:	f004 fa53 	bl	77e8 <__tVZFilter_setGain_veneer>
}
    3342:	bd10      	pop	{r4, pc}
    3344:	42080000 	.word	0x42080000
    3348:	20005648 	.word	0x20005648
    334c:	f3af 8000 	nop.w
    3350:	f3af 8000 	nop.w
    3354:	f3af 8000 	nop.w
    3358:	f3af 8000 	nop.w
    335c:	f3af 8000 	nop.w

00003360 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
    3360:	b510      	push	{r4, lr}
    3362:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    3364:	eddf 0a0d 	vldr	s1, [pc, #52]	; 339c <noiseSetFreq+0x3c>
    3368:	ee20 0a20 	vmul.f32	s0, s0, s1
    336c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 33a0 <noiseSetFreq+0x40>
    3370:	ee30 0a20 	vadd.f32	s0, s0, s1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3374:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
    3378:	ee30 0a60 	vsub.f32	s0, s0, s1
    337c:	ed9f 1a09 	vldr	s2, [pc, #36]	; 33a4 <noiseSetFreq+0x44>
    3380:	eddf 0a09 	vldr	s1, [pc, #36]	; 33a8 <noiseSetFreq+0x48>
    3384:	ee60 0a20 	vmul.f32	s1, s0, s1
    3388:	ed9f 0a08 	vldr	s0, [pc, #32]	; 33ac <noiseSetFreq+0x4c>
    338c:	f003 fbd8 	bl	6b40 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    3390:	4807      	ldr	r0, [pc, #28]	; (33b0 <noiseSetFreq+0x50>)
    3392:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3396:	f004 f9fb 	bl	7790 <__tVZFilter_setFreqFast_veneer>
}
    339a:	bd10      	pop	{r4, pc}
    339c:	429a0000 	.word	0x429a0000
    33a0:	42280000 	.word	0x42280000
    33a4:	457ff000 	.word	0x457ff000
    33a8:	420fb824 	.word	0x420fb824
    33ac:	00000000 	.word	0x00000000
    33b0:	20005648 	.word	0x20005648
    33b4:	f3af 8000 	nop.w
    33b8:	f3af 8000 	nop.w
    33bc:	f3af 8000 	nop.w

000033c0 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;


void __ATTR_ITCMRAM noise_tick(int string)
{
    33c0:	b570      	push	{r4, r5, r6, lr}
    33c2:	ed2d 8b04 	vpush	{d8-d9}
    33c6:	4604      	mov	r4, r0
	uint32_t tempCount9 = DWT->CYCCNT;
    33c8:	4b2f      	ldr	r3, [pc, #188]	; (3488 <noise_tick+0xc8>)
    33ca:	685e      	ldr	r6, [r3, #4]
	float enabled = params[Noise].realVal[string];
    33cc:	4b2f      	ldr	r3, [pc, #188]	; (348c <noise_tick+0xcc>)
    33ce:	f100 0280 	add.w	r2, r0, #128	; 0x80
    33d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    33d6:	edd2 8a00 	vldr	s17, [r2]
	float amp = params[NoiseAmp].realVal[string];
    33da:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    33de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    33e2:	ed92 8a00 	vldr	s16, [r2]
	float filterSend = params[NoiseFilterSend].realVal[string];
    33e6:	f100 02a3 	add.w	r2, r0, #163	; 0xa3
    33ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    33ee:	ed93 9a00 	vldr	s18, [r3]
	amp = amp < 0.f ? 0.f : amp;
    33f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    33f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33fa:	d441      	bmi.n	3480 <noise_tick+0xc0>
	float sample = random_values[randomValPointer++];
    33fc:	4b24      	ldr	r3, [pc, #144]	; (3490 <noise_tick+0xd0>)
    33fe:	781a      	ldrb	r2, [r3, #0]
    3400:	1c51      	adds	r1, r2, #1
    3402:	7019      	strb	r1, [r3, #0]
    3404:	4b23      	ldr	r3, [pc, #140]	; (3494 <noise_tick+0xd4>)
    3406:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    340a:	00a5      	lsls	r5, r4, #2
    340c:	ed93 0a00 	vldr	s0, [r3]
    3410:	4821      	ldr	r0, [pc, #132]	; (3498 <noise_tick+0xd8>)
    3412:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3416:	f004 f95f 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    341a:	4820      	ldr	r0, [pc, #128]	; (349c <noise_tick+0xdc>)
    341c:	4428      	add	r0, r5
    341e:	f004 f95b 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    3422:	481f      	ldr	r0, [pc, #124]	; (34a0 <noise_tick+0xe0>)
    3424:	4428      	add	r0, r5
    3426:	f004 f957 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
	sample = sample * amp;
    342a:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    342e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3432:	ee30 7a27 	vadd.f32	s14, s0, s15
    3436:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    343a:	ee27 7a26 	vmul.f32	s14, s14, s13
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    343e:	1da2      	adds	r2, r4, #6
    3440:	4b18      	ldr	r3, [pc, #96]	; (34a4 <noise_tick+0xe4>)
    3442:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3446:	ed83 7a00 	vstr	s14, [r3]
	noiseOuts[0][string] = sample * filterSend *  enabled;
    344a:	ee29 7a00 	vmul.f32	s14, s18, s0
    344e:	ee27 7a28 	vmul.f32	s14, s14, s17
    3452:	4b15      	ldr	r3, [pc, #84]	; (34a8 <noise_tick+0xe8>)
    3454:	441d      	add	r5, r3
    3456:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    345a:	ee77 7ac9 	vsub.f32	s15, s15, s18
    345e:	ee67 7a80 	vmul.f32	s15, s15, s0
    3462:	ee67 7aa8 	vmul.f32	s15, s15, s17
    3466:	3402      	adds	r4, #2
    3468:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    346c:	edc4 7a00 	vstr	s15, [r4]

	uint32_t tempCount10 = DWT->CYCCNT;
    3470:	4b05      	ldr	r3, [pc, #20]	; (3488 <noise_tick+0xc8>)
    3472:	685b      	ldr	r3, [r3, #4]
	timeRandom = tempCount10-tempCount9;
    3474:	1b9e      	subs	r6, r3, r6
    3476:	4b0d      	ldr	r3, [pc, #52]	; (34ac <noise_tick+0xec>)
    3478:	601e      	str	r6, [r3, #0]
}
    347a:	ecbd 8b04 	vpop	{d8-d9}
    347e:	bd70      	pop	{r4, r5, r6, pc}
	amp = amp < 0.f ? 0.f : amp;
    3480:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 34b0 <noise_tick+0xf0>
    3484:	e7ba      	b.n	33fc <noise_tick+0x3c>
    3486:	bf00      	nop
    3488:	e0001000 	.word	0xe0001000
    348c:	20019798 	.word	0x20019798
    3490:	20005c6c 	.word	0x20005c6c
    3494:	2001a8c4 	.word	0x2001a8c4
    3498:	20005668 	.word	0x20005668
    349c:	20005670 	.word	0x20005670
    34a0:	20005648 	.word	0x20005648
    34a4:	200147bc 	.word	0x200147bc
    34a8:	20005658 	.word	0x20005658
    34ac:	200149a8 	.word	0x200149a8
    34b0:	00000000 	.word	0x00000000
    34b4:	f3af 8000 	nop.w
    34b8:	f3af 8000 	nop.w
    34bc:	f3af 8000 	nop.w

000034c0 <audioTickL>:
{
    34c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34c4:	ed2d 8b04 	vpush	{d8-d9}
    34c8:	b085      	sub	sp, #20
    34ca:	af00      	add	r7, sp, #0
	interrupted = 0;
    34cc:	2500      	movs	r5, #0
    34ce:	4b89      	ldr	r3, [pc, #548]	; (36f4 <audioTickL+0x234>)
    34d0:	701d      	strb	r5, [r3, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
    34d2:	4b89      	ldr	r3, [pc, #548]	; (36f8 <audioTickL+0x238>)
    34d4:	685c      	ldr	r4, [r3, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
    34d6:	4b89      	ldr	r3, [pc, #548]	; (36fc <audioTickL+0x23c>)
    34d8:	ed93 8a38 	vldr	s16, [r3, #224]	; 0xe0
	tickMappings();
    34dc:	f7fe f8b0 	bl	1640 <tickMappings>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    34e0:	4887      	ldr	r0, [pc, #540]	; (3700 <audioTickL+0x240>)
    34e2:	f003 fa6d 	bl	69c0 <tExpSmooth_tick>
    34e6:	eef0 8a40 	vmov.f32	s17, s0
	for (int i = 0; i < 12; i++)
    34ea:	e00d      	b.n	3508 <audioTickL+0x48>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    34ec:	1d2a      	adds	r2, r5, #4
    34ee:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    34f2:	4a84      	ldr	r2, [pc, #528]	; (3704 <audioTickL+0x244>)
    34f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    34f8:	ed82 0a00 	vstr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    34fc:	3301      	adds	r3, #1
    34fe:	4a82      	ldr	r2, [pc, #520]	; (3708 <audioTickL+0x248>)
    3500:	7812      	ldrb	r2, [r2, #0]
    3502:	429a      	cmp	r2, r3
    3504:	dcf2      	bgt.n	34ec <audioTickL+0x2c>
	for (int i = 0; i < 12; i++)
    3506:	3501      	adds	r5, #1
    3508:	2d0b      	cmp	r5, #11
    350a:	dc0b      	bgt.n	3524 <audioTickL+0x64>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    350c:	00ae      	lsls	r6, r5, #2
    350e:	487f      	ldr	r0, [pc, #508]	; (370c <audioTickL+0x24c>)
    3510:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3514:	f003 fa54 	bl	69c0 <tExpSmooth_tick>
    3518:	4b7d      	ldr	r3, [pc, #500]	; (3710 <audioTickL+0x250>)
    351a:	4433      	add	r3, r6
    351c:	ed83 0a00 	vstr	s0, [r3]
		for (int v = 0; v < numStringsThisBoard; v++)
    3520:	2300      	movs	r3, #0
    3522:	e7ec      	b.n	34fe <audioTickL+0x3e>
	for (int i = 0; i < 10; i++)
    3524:	2500      	movs	r5, #0
    3526:	e00e      	b.n	3546 <audioTickL+0x86>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    3528:	f105 021c 	add.w	r2, r5, #28
    352c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    3530:	4a74      	ldr	r2, [pc, #464]	; (3704 <audioTickL+0x244>)
    3532:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3536:	ed82 0a00 	vstr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    353a:	3301      	adds	r3, #1
    353c:	4a72      	ldr	r2, [pc, #456]	; (3708 <audioTickL+0x248>)
    353e:	7812      	ldrb	r2, [r2, #0]
    3540:	429a      	cmp	r2, r3
    3542:	dcf1      	bgt.n	3528 <audioTickL+0x68>
	for (int i = 0; i < 10; i++)
    3544:	3501      	adds	r5, #1
    3546:	2d09      	cmp	r5, #9
    3548:	dc0b      	bgt.n	3562 <audioTickL+0xa2>
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    354a:	00ae      	lsls	r6, r5, #2
    354c:	4871      	ldr	r0, [pc, #452]	; (3714 <audioTickL+0x254>)
    354e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3552:	f003 fa35 	bl	69c0 <tExpSmooth_tick>
    3556:	4b70      	ldr	r3, [pc, #448]	; (3718 <audioTickL+0x258>)
    3558:	4433      	add	r3, r6
    355a:	ed83 0a00 	vstr	s0, [r3]
		for (int v = 0; v < numStringsThisBoard; v++)
    355e:	2300      	movs	r3, #0
    3560:	e7ec      	b.n	353c <audioTickL+0x7c>
	float note[numStringsThisBoard];
    3562:	4b69      	ldr	r3, [pc, #420]	; (3708 <audioTickL+0x248>)
    3564:	781b      	ldrb	r3, [r3, #0]
    3566:	009b      	lsls	r3, r3, #2
    3568:	3307      	adds	r3, #7
    356a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    356e:	ebad 0d03 	sub.w	sp, sp, r3
    3572:	46e8      	mov	r8, sp
	for (int v = 0; v < numStringsThisBoard; v++)
    3574:	2500      	movs	r5, #0
	float masterSample = 0.0f;
    3576:	ed9f 9a69 	vldr	s18, [pc, #420]	; 371c <audioTickL+0x25c>
	for (int v = 0; v < numStringsThisBoard; v++)
    357a:	e177      	b.n	386c <audioTickL+0x3ac>
			note[v] = 0.0f;
    357c:	2200      	movs	r2, #0
    357e:	600a      	str	r2, [r1, #0]
    3580:	e1a3      	b.n	38ca <audioTickL+0x40a>
			filterSamps[0] += oscOuts[0][i][v];
    3582:	4b67      	ldr	r3, [pc, #412]	; (3720 <audioTickL+0x260>)
    3584:	eb05 0241 	add.w	r2, r5, r1, lsl #1
    3588:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    358c:	ed90 7a00 	vldr	s14, [r0]
    3590:	edd7 7a02 	vldr	s15, [r7, #8]
    3594:	ee77 7a87 	vadd.f32	s15, s15, s14
    3598:	edc7 7a02 	vstr	s15, [r7, #8]
			filterSamps[1] += oscOuts[1][i][v];
    359c:	3206      	adds	r2, #6
    359e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    35a2:	ed93 7a00 	vldr	s14, [r3]
    35a6:	edd7 7a03 	vldr	s15, [r7, #12]
    35aa:	ee77 7a87 	vadd.f32	s15, s15, s14
    35ae:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < oscToTick; i++)
    35b2:	3101      	adds	r1, #1
    35b4:	4b5b      	ldr	r3, [pc, #364]	; (3724 <audioTickL+0x264>)
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	428b      	cmp	r3, r1
    35ba:	dce2      	bgt.n	3582 <audioTickL+0xc2>
		filterSamps[0] += noiseOuts[0][v];
    35bc:	4b5a      	ldr	r3, [pc, #360]	; (3728 <audioTickL+0x268>)
    35be:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    35c2:	ed92 7a00 	vldr	s14, [r2]
    35c6:	edd7 7a02 	vldr	s15, [r7, #8]
    35ca:	ee77 7a87 	vadd.f32	s15, s15, s14
    35ce:	edc7 7a02 	vstr	s15, [r7, #8]
		filterSamps[1] += noiseOuts[1][v];
    35d2:	1caa      	adds	r2, r5, #2
    35d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    35d8:	ed93 7a00 	vldr	s14, [r3]
    35dc:	edd7 7a03 	vldr	s15, [r7, #12]
    35e0:	ee77 7a87 	vadd.f32	s15, s15, s14
    35e4:	edc7 7a03 	vstr	s15, [r7, #12]
		sample = filter_tick(&filterSamps[0], note[v], v);
    35e8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    35ec:	4629      	mov	r1, r5
    35ee:	ed93 0a00 	vldr	s0, [r3]
    35f2:	f107 0008 	add.w	r0, r7, #8
    35f6:	f7fd faa3 	bl	b40 <filter_tick>
    35fa:	ed87 0a01 	vstr	s0, [r7, #4]
		if (fxPre)
    35fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3602:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    360a:	dd08      	ble.n	361e <audioTickL+0x15e>
			sample *= amplitude[v];
    360c:	4b47      	ldr	r3, [pc, #284]	; (372c <audioTickL+0x26c>)
    360e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3612:	edd3 7a00 	vldr	s15, [r3]
    3616:	ee20 0a27 	vmul.f32	s0, s0, s15
    361a:	ed87 0a01 	vstr	s0, [r7, #4]
		uint32_t tempCount1 = DWT->CYCCNT;
    361e:	4b36      	ldr	r3, [pc, #216]	; (36f8 <audioTickL+0x238>)
    3620:	f8d3 9004 	ldr.w	r9, [r3, #4]
		if (overSampled)
    3624:	4b42      	ldr	r3, [pc, #264]	; (3730 <audioTickL+0x270>)
    3626:	781b      	ldrb	r3, [r3, #0]
    3628:	b90b      	cbnz	r3, 362e <audioTickL+0x16e>
			for (int i = 0; i < numEffectToTick; i++)
    362a:	2600      	movs	r6, #0
    362c:	e0b9      	b.n	37a2 <audioTickL+0x2e2>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    362e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    3632:	2301      	movs	r3, #1
    3634:	4a3f      	ldr	r2, [pc, #252]	; (3734 <audioTickL+0x274>)
    3636:	1d39      	adds	r1, r7, #4
    3638:	4e3f      	ldr	r6, [pc, #252]	; (3738 <audioTickL+0x278>)
    363a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    363e:	f003 ffb7 	bl	75b0 <__arm_fir_interpolate_f32_veneer>
			for (int i = 0; i < 4; i++)
    3642:	2600      	movs	r6, #0
    3644:	e000      	b.n	3648 <audioTickL+0x188>
    3646:	3601      	adds	r6, #1
    3648:	2e03      	cmp	r6, #3
    364a:	dc36      	bgt.n	36ba <audioTickL+0x1fa>
				if (effectsActive[i] == 1)
    364c:	4b3b      	ldr	r3, [pc, #236]	; (373c <audioTickL+0x27c>)
    364e:	5d9b      	ldrb	r3, [r3, r6]
    3650:	2b01      	cmp	r3, #1
    3652:	d1f8      	bne.n	3646 <audioTickL+0x186>
					for (int j = 0; j < OVERSAMPLE; j++)
    3654:	f04f 0b00 	mov.w	fp, #0
    3658:	f1bb 0f01 	cmp.w	fp, #1
    365c:	dcf3      	bgt.n	3646 <audioTickL+0x186>
						float dry = oversamplerArray[j]; //store the dry value to mix later
    365e:	4b35      	ldr	r3, [pc, #212]	; (3734 <audioTickL+0x274>)
    3660:	eb03 0a8b 	add.w	sl, r3, fp, lsl #2
    3664:	edda 9a00 	vldr	s19, [sl]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    3668:	4b35      	ldr	r3, [pc, #212]	; (3740 <audioTickL+0x280>)
    366a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    366e:	4629      	mov	r1, r5
    3670:	4630      	mov	r0, r6
    3672:	eeb0 0a69 	vmov.f32	s0, s19
    3676:	4798      	blx	r3
    3678:	ed8a 0a00 	vstr	s0, [sl]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    367c:	eb05 0346 	add.w	r3, r5, r6, lsl #1
    3680:	4a30      	ldr	r2, [pc, #192]	; (3744 <audioTickL+0x284>)
    3682:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3686:	ed92 7a00 	vldr	s14, [r2]
    368a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    368e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3692:	ee67 7aa9 	vmul.f32	s15, s15, s19
    3696:	ee20 0a07 	vmul.f32	s0, s0, s14
    369a:	ee77 7a80 	vadd.f32	s15, s15, s0
    369e:	edca 7a00 	vstr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    36a2:	4a29      	ldr	r2, [pc, #164]	; (3748 <audioTickL+0x288>)
    36a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    36a8:	ed93 7a00 	vldr	s14, [r3]
    36ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    36b0:	edca 7a00 	vstr	s15, [sl]
					for (int j = 0; j < OVERSAMPLE; j++)
    36b4:	f10b 0b01 	add.w	fp, fp, #1
    36b8:	e7ce      	b.n	3658 <audioTickL+0x198>
			for (int i = 0; i < (OVERSAMPLE); i++)
    36ba:	2600      	movs	r6, #0
    36bc:	e00d      	b.n	36da <audioTickL+0x21a>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
    36be:	4b1d      	ldr	r3, [pc, #116]	; (3734 <audioTickL+0x274>)
    36c0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
    36c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    36c8:	edda 0a00 	vldr	s1, [sl]
    36cc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    36d0:	f003 fa36 	bl	6b40 <LEAF_clip>
    36d4:	ed8a 0a00 	vstr	s0, [sl]
			for (int i = 0; i < (OVERSAMPLE); i++)
    36d8:	3601      	adds	r6, #1
    36da:	2e01      	cmp	r6, #1
    36dc:	ddef      	ble.n	36be <audioTickL+0x1fe>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    36de:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    36e2:	2302      	movs	r3, #2
    36e4:	1d3a      	adds	r2, r7, #4
    36e6:	4913      	ldr	r1, [pc, #76]	; (3734 <audioTickL+0x274>)
    36e8:	4e18      	ldr	r6, [pc, #96]	; (374c <audioTickL+0x28c>)
    36ea:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    36ee:	f004 f8f3 	bl	78d8 <__arm_fir_decimate_f32_veneer>
    36f2:	e05a      	b.n	37aa <audioTickL+0x2ea>
    36f4:	200052dc 	.word	0x200052dc
    36f8:	e0001000 	.word	0xe0001000
    36fc:	2001a798 	.word	0x2001a798
    3700:	20014a0c 	.word	0x20014a0c
    3704:	200147bc 	.word	0x200147bc
    3708:	20000052 	.word	0x20000052
    370c:	20005380 	.word	0x20005380
    3710:	2000530c 	.word	0x2000530c
    3714:	20005804 	.word	0x20005804
    3718:	20005790 	.word	0x20005790
    371c:	00000000 	.word	0x00000000
    3720:	200056b4 	.word	0x200056b4
    3724:	20000068 	.word	0x20000068
    3728:	20005658 	.word	0x20005658
    372c:	20000af4 	.word	0x20000af4
    3730:	20000069 	.word	0x20000069
    3734:	200056e8 	.word	0x200056e8
    3738:	2000569c 	.word	0x2000569c
    373c:	20014c98 	.word	0x20014c98
    3740:	20005150 	.word	0x20005150
    3744:	200051e0 	.word	0x200051e0
    3748:	20005200 	.word	0x20005200
    374c:	20005684 	.word	0x20005684
				float dry = sample;
    3750:	edd7 9a01 	vldr	s19, [r7, #4]
				sample = effectTick[i](sample, i, v); //run the effect
    3754:	4b80      	ldr	r3, [pc, #512]	; (3958 <audioTickL+0x498>)
    3756:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    375a:	4629      	mov	r1, r5
    375c:	4630      	mov	r0, r6
    375e:	eeb0 0a69 	vmov.f32	s0, s19
    3762:	4798      	blx	r3
    3764:	ed87 0a01 	vstr	s0, [r7, #4]
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    3768:	eb05 0146 	add.w	r1, r5, r6, lsl #1
    376c:	4a7b      	ldr	r2, [pc, #492]	; (395c <audioTickL+0x49c>)
    376e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3772:	ed92 7a00 	vldr	s14, [r2]
    3776:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    377a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    377e:	ee67 7aa9 	vmul.f32	s15, s15, s19
    3782:	ee20 0a07 	vmul.f32	s0, s0, s14
    3786:	ee77 7a80 	vadd.f32	s15, s15, s0
    378a:	edc7 7a01 	vstr	s15, [r7, #4]
				sample *= fxPostGain[i][v];
    378e:	4b74      	ldr	r3, [pc, #464]	; (3960 <audioTickL+0x4a0>)
    3790:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3794:	ed93 7a00 	vldr	s14, [r3]
    3798:	ee67 7a87 	vmul.f32	s15, s15, s14
    379c:	edc7 7a01 	vstr	s15, [r7, #4]
			for (int i = 0; i < numEffectToTick; i++)
    37a0:	3601      	adds	r6, #1
    37a2:	4b70      	ldr	r3, [pc, #448]	; (3964 <audioTickL+0x4a4>)
    37a4:	781b      	ldrb	r3, [r3, #0]
    37a6:	42b3      	cmp	r3, r6
    37a8:	dcd2      	bgt.n	3750 <audioTickL+0x290>
		uint32_t tempCount2 = DWT->CYCCNT;
    37aa:	4b6f      	ldr	r3, [pc, #444]	; (3968 <audioTickL+0x4a8>)
    37ac:	685b      	ldr	r3, [r3, #4]
		oversampleCount = tempCount2-tempCount1;
    37ae:	eba3 0309 	sub.w	r3, r3, r9
    37b2:	4a6e      	ldr	r2, [pc, #440]	; (396c <audioTickL+0x4ac>)
    37b4:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    37b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    37ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
    37be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    37c2:	dc0a      	bgt.n	37da <audioTickL+0x31a>
			sample *= amplitude[v];
    37c4:	4b6a      	ldr	r3, [pc, #424]	; (3970 <audioTickL+0x4b0>)
    37c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    37ca:	ed93 7a00 	vldr	s14, [r3]
    37ce:	edd7 7a01 	vldr	s15, [r7, #4]
    37d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    37d6:	edc7 7a01 	vstr	s15, [r7, #4]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
    37da:	00ae      	lsls	r6, r5, #2
    37dc:	ed97 0a01 	vldr	s0, [r7, #4]
    37e0:	4864      	ldr	r0, [pc, #400]	; (3974 <audioTickL+0x4b4>)
    37e2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    37e6:	f004 f823 	bl	7830 <__tSVF_tick_veneer>
    37ea:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    37ee:	ee20 0a27 	vmul.f32	s0, s0, s15
    37f2:	ed87 0a01 	vstr	s0, [r7, #4]
		masterSample += sample;
    37f6:	ee39 9a00 	vadd.f32	s18, s18, s0
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    37fa:	eddf 0a5f 	vldr	s1, [pc, #380]	; 3978 <audioTickL+0x4b8>
    37fe:	ee68 0aa0 	vmul.f32	s1, s17, s1
    3802:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 397c <audioTickL+0x4bc>
    3806:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 3980 <audioTickL+0x4c0>
    380a:	ee70 0a80 	vadd.f32	s1, s1, s0
    380e:	f003 f997 	bl	6b40 <LEAF_clip>
		int volIdxInt = (int) volIdx;
    3812:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    3816:	ee17 3a90 	vmov	r3, s15
		float alpha = volIdx-volIdxInt;
    381a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    381e:	ee70 7a67 	vsub.f32	s15, s0, s15
		int volIdxIntPlus = (volIdxInt + 1) & 127;
    3822:	1c5a      	adds	r2, r3, #1
    3824:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
    3828:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    382c:	ee31 7a67 	vsub.f32	s14, s2, s15
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
    3830:	4a54      	ldr	r2, [pc, #336]	; (3984 <audioTickL+0x4c4>)
    3832:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3836:	edd3 0a00 	vldr	s1, [r3]
    383a:	ee60 0a87 	vmul.f32	s1, s1, s14
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
    383e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3842:	ed92 7a00 	vldr	s14, [r2]
    3846:	ee67 7a27 	vmul.f32	s15, s14, s15
    384a:	ee77 7aa0 	vadd.f32	s15, s15, s1
		masterSample *= outVol;
    384e:	ee29 9a27 	vmul.f32	s18, s18, s15
		masterSample *= finalMaster[v] ;
    3852:	4b4d      	ldr	r3, [pc, #308]	; (3988 <audioTickL+0x4c8>)
    3854:	441e      	add	r6, r3
    3856:	edd6 0a00 	vldr	s1, [r6]
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
    385a:	ee60 0a89 	vmul.f32	s1, s1, s18
    385e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    3862:	f003 f96d 	bl	6b40 <LEAF_clip>
    3866:	eeb0 9a40 	vmov.f32	s18, s0
	for (int v = 0; v < numStringsThisBoard; v++)
    386a:	3501      	adds	r5, #1
    386c:	4b47      	ldr	r3, [pc, #284]	; (398c <audioTickL+0x4cc>)
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	42ab      	cmp	r3, r5
    3872:	dd3f      	ble.n	38f4 <audioTickL+0x434>
		float sample = 0.0f;
    3874:	2300      	movs	r3, #0
    3876:	607b      	str	r3, [r7, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    3878:	4b45      	ldr	r3, [pc, #276]	; (3990 <audioTickL+0x4d0>)
    387a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    387e:	edd3 7a00 	vldr	s15, [r3]
    3882:	4b44      	ldr	r3, [pc, #272]	; (3994 <audioTickL+0x4d4>)
    3884:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3888:	ed93 7a00 	vldr	s14, [r3]
    388c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3890:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    3894:	edc1 7a00 	vstr	s15, [r1]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    3898:	4b3f      	ldr	r3, [pc, #252]	; (3998 <audioTickL+0x4d8>)
    389a:	ed93 7a00 	vldr	s14, [r3]
    389e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    38a2:	4b3e      	ldr	r3, [pc, #248]	; (399c <audioTickL+0x4dc>)
    38a4:	ed93 7a00 	vldr	s14, [r3]
    38a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    38ac:	f105 0322 	add.w	r3, r5, #34	; 0x22
    38b0:	4a3b      	ldr	r2, [pc, #236]	; (39a0 <audioTickL+0x4e0>)
    38b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    38b6:	edc3 7a00 	vstr	s15, [r3]
		if (note[v] < 0.0f)
    38ba:	edd1 7a00 	vldr	s15, [r1]
    38be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    38c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38c6:	f53f ae59 	bmi.w	357c <audioTickL+0xbc>
		envelope_tick(v);
    38ca:	4628      	mov	r0, r5
    38cc:	f7fd fd48 	bl	1360 <envelope_tick>
		lfo_tick(v);
    38d0:	4628      	mov	r0, r5
    38d2:	f7fd fd75 	bl	13c0 <lfo_tick>
		oscillator_tick(note[v], v);
    38d6:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    38da:	4628      	mov	r0, r5
    38dc:	ed93 0a00 	vldr	s0, [r3]
    38e0:	f7fc ff0e 	bl	700 <oscillator_tick>
		noise_tick(v);
    38e4:	4628      	mov	r0, r5
    38e6:	f7ff fd6b 	bl	33c0 <noise_tick>
		float filterSamps[2] = {0.0f, 0.0f};
    38ea:	2300      	movs	r3, #0
    38ec:	60bb      	str	r3, [r7, #8]
    38ee:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < oscToTick; i++)
    38f0:	2100      	movs	r1, #0
    38f2:	e65f      	b.n	35b4 <audioTickL+0xf4>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
    38f4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    38f8:	eef0 0a49 	vmov.f32	s1, s18
    38fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    3900:	f003 f91e 	bl	6b40 <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
    3904:	4b18      	ldr	r3, [pc, #96]	; (3968 <audioTickL+0x4a8>)
    3906:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
    3908:	1b1c      	subs	r4, r3, r4
    390a:	4b26      	ldr	r3, [pc, #152]	; (39a4 <audioTickL+0x4e4>)
    390c:	601c      	str	r4, [r3, #0]
	if ((timeTick > 10000) && (!interrupted))
    390e:	f242 7310 	movw	r3, #10000	; 0x2710
    3912:	429c      	cmp	r4, r3
    3914:	d908      	bls.n	3928 <audioTickL+0x468>
    3916:	4b24      	ldr	r3, [pc, #144]	; (39a8 <audioTickL+0x4e8>)
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	b92b      	cbnz	r3, 3928 <audioTickL+0x468>
		if (overSampled)
    391c:	4b23      	ldr	r3, [pc, #140]	; (39ac <audioTickL+0x4ec>)
    391e:	781b      	ldrb	r3, [r3, #0]
    3920:	b18b      	cbz	r3, 3946 <audioTickL+0x486>
			overSampled = 0;
    3922:	4b22      	ldr	r3, [pc, #136]	; (39ac <audioTickL+0x4ec>)
    3924:	2200      	movs	r2, #0
    3926:	701a      	strb	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    3928:	4b21      	ldr	r3, [pc, #132]	; (39b0 <audioTickL+0x4f0>)
    392a:	edd3 7a00 	vldr	s15, [r3]
    392e:	ee67 7a80 	vmul.f32	s15, s15, s0
}
    3932:	ed9f 0a20 	vldr	s0, [pc, #128]	; 39b4 <audioTickL+0x4f4>
    3936:	ee27 0a80 	vmul.f32	s0, s15, s0
    393a:	3714      	adds	r7, #20
    393c:	46bd      	mov	sp, r7
    393e:	ecbd 8b04 	vpop	{d8-d9}
    3942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (oscToTick > 1)
    3946:	4b1c      	ldr	r3, [pc, #112]	; (39b8 <audioTickL+0x4f8>)
    3948:	781b      	ldrb	r3, [r3, #0]
    394a:	2b01      	cmp	r3, #1
    394c:	d9ec      	bls.n	3928 <audioTickL+0x468>
			oscToTick--;
    394e:	3b01      	subs	r3, #1
    3950:	4a19      	ldr	r2, [pc, #100]	; (39b8 <audioTickL+0x4f8>)
    3952:	7013      	strb	r3, [r2, #0]
    3954:	e7e8      	b.n	3928 <audioTickL+0x468>
    3956:	bf00      	nop
    3958:	20005150 	.word	0x20005150
    395c:	200051e0 	.word	0x200051e0
    3960:	20005200 	.word	0x20005200
    3964:	20000050 	.word	0x20000050
    3968:	e0001000 	.word	0xe0001000
    396c:	200056e4 	.word	0x200056e4
    3970:	20000af4 	.word	0x20000af4
    3974:	200051b0 	.word	0x200051b0
    3978:	42a00000 	.word	0x42a00000
    397c:	423c0000 	.word	0x423c0000
    3980:	42fe0000 	.word	0x42fe0000
    3984:	20000544 	.word	0x20000544
    3988:	200051b8 	.word	0x200051b8
    398c:	20000052 	.word	0x20000052
    3990:	2001494c 	.word	0x2001494c
    3994:	20014954 	.word	0x20014954
    3998:	20019780 	.word	0x20019780
    399c:	2001977c 	.word	0x2001977c
    39a0:	200147bc 	.word	0x200147bc
    39a4:	200149ac 	.word	0x200149ac
    39a8:	200052dc 	.word	0x200052dc
    39ac:	20000069 	.word	0x20000069
    39b0:	20000744 	.word	0x20000744
    39b4:	3f7ae148 	.word	0x3f7ae148
    39b8:	20000068 	.word	0x20000068
    39bc:	f3af 8000 	nop.w

000039c0 <audioFrame>:
{
    39c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39c4:	ed2d 8b08 	vpush	{d8-d11}
    39c8:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    39ca:	2201      	movs	r2, #1
    39cc:	2108      	movs	r1, #8
    39ce:	48bf      	ldr	r0, [pc, #764]	; (3ccc <audioFrame+0x30c>)
    39d0:	f003 fe56 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    39d4:	4bbe      	ldr	r3, [pc, #760]	; (3cd0 <audioFrame+0x310>)
    39d6:	f8d3 8004 	ldr.w	r8, [r3, #4]
	if (switchStrings)
    39da:	4bbe      	ldr	r3, [pc, #760]	; (3cd4 <audioFrame+0x314>)
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	bb23      	cbnz	r3, 3a2a <audioFrame+0x6a>
	switchStrings = 0;
    39e0:	4bbc      	ldr	r3, [pc, #752]	; (3cd4 <audioFrame+0x314>)
    39e2:	2200      	movs	r2, #0
    39e4:	601a      	str	r2, [r3, #0]
	if (newBar)
    39e6:	4bbc      	ldr	r3, [pc, #752]	; (3cd8 <audioFrame+0x318>)
    39e8:	681b      	ldr	r3, [r3, #0]
    39ea:	bb1b      	cbnz	r3, 3a34 <audioFrame+0x74>
	if (newPluck)
    39ec:	4bbb      	ldr	r3, [pc, #748]	; (3cdc <audioFrame+0x31c>)
    39ee:	681b      	ldr	r3, [r3, #0]
    39f0:	2b00      	cmp	r3, #0
    39f2:	f040 8651 	bne.w	4698 <_Min_Heap_Size+0x698>
	if (presetReady)
    39f6:	4bba      	ldr	r3, [pc, #744]	; (3ce0 <audioFrame+0x320>)
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	2b00      	cmp	r3, #0
    39fc:	f000 87c7 	beq.w	498e <_Min_Heap_Size+0x98e>
		if (currentActivePreset == 63)
    3a00:	4bb8      	ldr	r3, [pc, #736]	; (3ce4 <audioFrame+0x324>)
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	b2db      	uxtb	r3, r3
    3a06:	2b3f      	cmp	r3, #63	; 0x3f
    3a08:	f000 864e 	beq.w	46a8 <_Min_Heap_Size+0x6a8>
		else if (currentActivePreset == 62)
    3a0c:	4bb5      	ldr	r3, [pc, #724]	; (3ce4 <audioFrame+0x324>)
    3a0e:	781b      	ldrb	r3, [r3, #0]
    3a10:	b2db      	uxtb	r3, r3
    3a12:	2b3e      	cmp	r3, #62	; 0x3e
    3a14:	f000 8678 	beq.w	4708 <_Min_Heap_Size+0x708>
		else if (currentActivePreset == 61)
    3a18:	4bb2      	ldr	r3, [pc, #712]	; (3ce4 <audioFrame+0x324>)
    3a1a:	781b      	ldrb	r3, [r3, #0]
    3a1c:	b2db      	uxtb	r3, r3
    3a1e:	2b3d      	cmp	r3, #61	; 0x3d
    3a20:	f000 879d 	beq.w	495e <_Min_Heap_Size+0x95e>
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3a24:	2400      	movs	r4, #0
    3a26:	f000 bfb0 	b.w	498a <_Min_Heap_Size+0x98a>
		switchStringModel(switchStrings);
    3a2a:	4baa      	ldr	r3, [pc, #680]	; (3cd4 <audioFrame+0x314>)
    3a2c:	6818      	ldr	r0, [r3, #0]
    3a2e:	f7fc fdb7 	bl	5a0 <switchStringModel>
    3a32:	e7d5      	b.n	39e0 <audioFrame+0x20>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
    3a34:	2201      	movs	r2, #1
    3a36:	2102      	movs	r1, #2
    3a38:	48ab      	ldr	r0, [pc, #684]	; (3ce8 <audioFrame+0x328>)
    3a3a:	f003 fe21 	bl	7680 <__HAL_GPIO_WritePin_veneer>
		for (int j = 0; j < 2; j++)
    3a3e:	2400      	movs	r4, #0
    3a40:	e006      	b.n	3a50 <audioFrame+0x90>
				stringMappedPositions[j] = 1.0f;
    3a42:	4baa      	ldr	r3, [pc, #680]	; (3cec <audioFrame+0x32c>)
    3a44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3a48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    3a4c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 2; j++)
    3a4e:	3401      	adds	r4, #1
    3a50:	2c01      	cmp	r4, #1
    3a52:	f300 80d3 	bgt.w	3bfc <audioFrame+0x23c>
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
    3a56:	4ba6      	ldr	r3, [pc, #664]	; (3cf0 <audioFrame+0x330>)
    3a58:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    3a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3a60:	429a      	cmp	r2, r3
    3a62:	d0ee      	beq.n	3a42 <audioFrame+0x82>
    3a64:	4ba2      	ldr	r3, [pc, #648]	; (3cf0 <audioFrame+0x330>)
    3a66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3a6a:	edd3 7a00 	vldr	s15, [r3]
    3a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3a72:	4ba0      	ldr	r3, [pc, #640]	; (3cf4 <audioFrame+0x334>)
    3a74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3a78:	edd3 0a00 	vldr	s1, [r3]
    3a7c:	eef4 7ae0 	vcmpe.f32	s15, s1
    3a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a84:	dcdd      	bgt.n	3a42 <audioFrame+0x82>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
    3a86:	4b9a      	ldr	r3, [pc, #616]	; (3cf0 <audioFrame+0x330>)
    3a88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3a8c:	edd3 7a00 	vldr	s15, [r3]
    3a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3a94:	1ca3      	adds	r3, r4, #2
    3a96:	4a97      	ldr	r2, [pc, #604]	; (3cf4 <audioFrame+0x334>)
    3a98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a9c:	ed93 7a00 	vldr	s14, [r3]
    3aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
    3aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3aa8:	db21      	blt.n	3aee <audioFrame+0x12e>
    3aaa:	4b91      	ldr	r3, [pc, #580]	; (3cf0 <audioFrame+0x330>)
    3aac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3ab0:	edd3 7a00 	vldr	s15, [r3]
    3ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ab8:	eef4 0ae7 	vcmpe.f32	s1, s15
    3abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ac0:	db15      	blt.n	3aee <audioFrame+0x12e>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    3ac2:	4b8b      	ldr	r3, [pc, #556]	; (3cf0 <audioFrame+0x330>)
    3ac4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3ac8:	ed93 0a00 	vldr	s0, [r3]
    3acc:	4b8a      	ldr	r3, [pc, #552]	; (3cf8 <audioFrame+0x338>)
    3ace:	ed93 2a01 	vldr	s4, [r3, #4]
    3ad2:	edd3 1a00 	vldr	s3, [r3]
    3ad6:	eeb0 1a47 	vmov.f32	s2, s14
    3ada:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3ade:	f003 fdf7 	bl	76d0 <__map_veneer>
    3ae2:	4b82      	ldr	r3, [pc, #520]	; (3cec <audioFrame+0x32c>)
    3ae4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3ae8:	ed83 0a00 	vstr	s0, [r3]
    3aec:	e7af      	b.n	3a4e <audioFrame+0x8e>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
    3aee:	4b80      	ldr	r3, [pc, #512]	; (3cf0 <audioFrame+0x330>)
    3af0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3af4:	edd3 7a00 	vldr	s15, [r3]
    3af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3afc:	1d23      	adds	r3, r4, #4
    3afe:	4a7d      	ldr	r2, [pc, #500]	; (3cf4 <audioFrame+0x334>)
    3b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b04:	edd3 6a00 	vldr	s13, [r3]
    3b08:	eef4 7ae6 	vcmpe.f32	s15, s13
    3b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b10:	db23      	blt.n	3b5a <audioFrame+0x19a>
    3b12:	4b77      	ldr	r3, [pc, #476]	; (3cf0 <audioFrame+0x330>)
    3b14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3b18:	edd3 7a00 	vldr	s15, [r3]
    3b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b28:	dd17      	ble.n	3b5a <audioFrame+0x19a>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    3b2a:	4b71      	ldr	r3, [pc, #452]	; (3cf0 <audioFrame+0x330>)
    3b2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3b30:	ed93 0a00 	vldr	s0, [r3]
    3b34:	4b70      	ldr	r3, [pc, #448]	; (3cf8 <audioFrame+0x338>)
    3b36:	ed93 2a02 	vldr	s4, [r3, #8]
    3b3a:	edd3 1a01 	vldr	s3, [r3, #4]
    3b3e:	eeb0 1a66 	vmov.f32	s2, s13
    3b42:	eef0 0a47 	vmov.f32	s1, s14
    3b46:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3b4a:	f003 fdc1 	bl	76d0 <__map_veneer>
    3b4e:	4b67      	ldr	r3, [pc, #412]	; (3cec <audioFrame+0x32c>)
    3b50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3b54:	ed83 0a00 	vstr	s0, [r3]
    3b58:	e779      	b.n	3a4e <audioFrame+0x8e>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
    3b5a:	4b65      	ldr	r3, [pc, #404]	; (3cf0 <audioFrame+0x330>)
    3b5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3b60:	edd3 7a00 	vldr	s15, [r3]
    3b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b68:	1da2      	adds	r2, r4, #6
    3b6a:	4b62      	ldr	r3, [pc, #392]	; (3cf4 <audioFrame+0x334>)
    3b6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b70:	edd3 0a00 	vldr	s1, [r3]
    3b74:	eef4 7ae0 	vcmpe.f32	s15, s1
    3b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b7c:	db23      	blt.n	3bc6 <audioFrame+0x206>
    3b7e:	4b5c      	ldr	r3, [pc, #368]	; (3cf0 <audioFrame+0x330>)
    3b80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3b84:	edd3 7a00 	vldr	s15, [r3]
    3b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b8c:	eef4 6ae7 	vcmpe.f32	s13, s15
    3b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b94:	db17      	blt.n	3bc6 <audioFrame+0x206>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    3b96:	4b56      	ldr	r3, [pc, #344]	; (3cf0 <audioFrame+0x330>)
    3b98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3b9c:	ed93 0a00 	vldr	s0, [r3]
    3ba0:	4b55      	ldr	r3, [pc, #340]	; (3cf8 <audioFrame+0x338>)
    3ba2:	ed93 2a03 	vldr	s4, [r3, #12]
    3ba6:	edd3 1a02 	vldr	s3, [r3, #8]
    3baa:	eeb0 1a60 	vmov.f32	s2, s1
    3bae:	eef0 0a66 	vmov.f32	s1, s13
    3bb2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3bb6:	f003 fd8b 	bl	76d0 <__map_veneer>
    3bba:	4b4c      	ldr	r3, [pc, #304]	; (3cec <audioFrame+0x32c>)
    3bbc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3bc0:	ed83 0a00 	vstr	s0, [r3]
    3bc4:	e743      	b.n	3a4e <audioFrame+0x8e>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    3bc6:	4b4a      	ldr	r3, [pc, #296]	; (3cf0 <audioFrame+0x330>)
    3bc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3bcc:	ed93 0a00 	vldr	s0, [r3]
    3bd0:	4949      	ldr	r1, [pc, #292]	; (3cf8 <audioFrame+0x338>)
    3bd2:	f104 0208 	add.w	r2, r4, #8
    3bd6:	4b47      	ldr	r3, [pc, #284]	; (3cf4 <audioFrame+0x334>)
    3bd8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3bdc:	ed91 2a04 	vldr	s4, [r1, #16]
    3be0:	edd1 1a03 	vldr	s3, [r1, #12]
    3be4:	ed93 1a00 	vldr	s2, [r3]
    3be8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3bec:	f003 fd70 	bl	76d0 <__map_veneer>
    3bf0:	4b3e      	ldr	r3, [pc, #248]	; (3cec <audioFrame+0x32c>)
    3bf2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3bf6:	ed83 0a00 	vstr	s0, [r3]
    3bfa:	e728      	b.n	3a4e <audioFrame+0x8e>
		for (int i = 0; i < numStringsThisBoard; i++)
    3bfc:	2400      	movs	r4, #0
    3bfe:	e034      	b.n	3c6a <audioFrame+0x2aa>
					stringMappedPositions[0] = stringMappedPositions[1];
    3c00:	ed83 7a00 	vstr	s14, [r3]
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
    3c04:	4b3d      	ldr	r3, [pc, #244]	; (3cfc <audioFrame+0x33c>)
    3c06:	681b      	ldr	r3, [r3, #0]
    3c08:	4423      	add	r3, r4
    3c0a:	ee07 3a90 	vmov	s15, r3
    3c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3c12:	4b36      	ldr	r3, [pc, #216]	; (3cec <audioFrame+0x32c>)
    3c14:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 3d00 <audioFrame+0x340>
    3c18:	ee27 1a81 	vmul.f32	s2, s15, s2
    3c1c:	edd3 0a01 	vldr	s1, [r3, #4]
    3c20:	ed93 0a00 	vldr	s0, [r3]
    3c24:	f003 fdf8 	bl	7818 <__LEAF_interpolation_linear_veneer>
			invMapping[i] = (1.0f / myMappedPos);
    3c28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3c2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    3c30:	4b34      	ldr	r3, [pc, #208]	; (3d04 <audioFrame+0x344>)
    3c32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3c36:	edc3 7a00 	vstr	s15, [r3]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
    3c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3c3e:	4b32      	ldr	r3, [pc, #200]	; (3d08 <audioFrame+0x348>)
    3c40:	ed93 7a00 	vldr	s14, [r3]
    3c44:	ee67 7a87 	vmul.f32	s15, s15, s14
    3c48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    3c54:	4b2d      	ldr	r3, [pc, #180]	; (3d0c <audioFrame+0x34c>)
    3c56:	ee17 2a90 	vmov	r2, s15
    3c5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3c5e:	681a      	ldr	r2, [r3, #0]
    3c60:	4b2b      	ldr	r3, [pc, #172]	; (3d10 <audioFrame+0x350>)
    3c62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3c66:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    3c68:	3401      	adds	r4, #1
    3c6a:	4b2a      	ldr	r3, [pc, #168]	; (3d14 <audioFrame+0x354>)
    3c6c:	781b      	ldrb	r3, [r3, #0]
    3c6e:	42a3      	cmp	r3, r4
    3c70:	dd54      	ble.n	3d1c <audioFrame+0x35c>
			if (dualSlider)
    3c72:	4b29      	ldr	r3, [pc, #164]	; (3d18 <audioFrame+0x358>)
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	b323      	cbz	r3, 3cc2 <audioFrame+0x302>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
    3c78:	4b1c      	ldr	r3, [pc, #112]	; (3cec <audioFrame+0x32c>)
    3c7a:	edd3 7a00 	vldr	s15, [r3]
    3c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3c82:	eef4 7a47 	vcmp.f32	s15, s14
    3c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c8a:	d108      	bne.n	3c9e <audioFrame+0x2de>
    3c8c:	ed93 7a01 	vldr	s14, [r3, #4]
    3c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3c94:	eeb4 7ae6 	vcmpe.f32	s14, s13
    3c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c9c:	d4b0      	bmi.n	3c00 <audioFrame+0x240>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
    3c9e:	4b13      	ldr	r3, [pc, #76]	; (3cec <audioFrame+0x32c>)
    3ca0:	edd3 6a01 	vldr	s13, [r3, #4]
    3ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3ca8:	eef4 6a47 	vcmp.f32	s13, s14
    3cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cb0:	d1a8      	bne.n	3c04 <audioFrame+0x244>
    3cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
    3cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cba:	d5a3      	bpl.n	3c04 <audioFrame+0x244>
					stringMappedPositions[1] = stringMappedPositions[0];
    3cbc:	edc3 7a01 	vstr	s15, [r3, #4]
    3cc0:	e7a0      	b.n	3c04 <audioFrame+0x244>
				myMappedPos =  stringMappedPositions[0];
    3cc2:	4b0a      	ldr	r3, [pc, #40]	; (3cec <audioFrame+0x32c>)
    3cc4:	ed93 0a00 	vldr	s0, [r3]
    3cc8:	e7ae      	b.n	3c28 <audioFrame+0x268>
    3cca:	bf00      	nop
    3ccc:	58020000 	.word	0x58020000
    3cd0:	e0001000 	.word	0xe0001000
    3cd4:	20014984 	.word	0x20014984
    3cd8:	20005640 	.word	0x20005640
    3cdc:	20005644 	.word	0x20005644
    3ce0:	20005844 	.word	0x20005844
    3ce4:	20014c08 	.word	0x20014c08
    3ce8:	58020400 	.word	0x58020400
    3cec:	20000364 	.word	0x20000364
    3cf0:	2001495c 	.word	0x2001495c
    3cf4:	2000000c 	.word	0x2000000c
    3cf8:	20000034 	.word	0x20000034
    3cfc:	200051c0 	.word	0x200051c0
    3d00:	3dcccccd 	.word	0x3dcccccd
    3d04:	20005300 	.word	0x20005300
    3d08:	2000004c 	.word	0x2000004c
    3d0c:	30012000 	.word	0x30012000
    3d10:	20000b0c 	.word	0x20000b0c
    3d14:	20000052 	.word	0x20000052
    3d18:	20005148 	.word	0x20005148
		newBar = 0;
    3d1c:	2200      	movs	r2, #0
    3d1e:	4bc9      	ldr	r3, [pc, #804]	; (4044 <_Min_Heap_Size+0x44>)
    3d20:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
    3d22:	2102      	movs	r1, #2
    3d24:	48c8      	ldr	r0, [pc, #800]	; (4048 <_Min_Heap_Size+0x48>)
    3d26:	f003 fcab 	bl	7680 <__HAL_GPIO_WritePin_veneer>
    3d2a:	e65f      	b.n	39ec <audioFrame+0x2c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3d2c:	ee07 3a90 	vmov	s15, r3
    3d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    3d34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3d38:	eddf 0ac4 	vldr	s1, [pc, #784]	; 404c <_Min_Heap_Size+0x4c>
    3d3c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    3d40:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 4050 <_Min_Heap_Size+0x50>
    3d44:	f002 fefc 	bl	6b40 <LEAF_clip>
    3d48:	eeb0 8a40 	vmov.f32	s16, s0
				stringOctave[i] = octave;
    3d4c:	4bc1      	ldr	r3, [pc, #772]	; (4054 <_Min_Heap_Size+0x54>)
    3d4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3d52:	4ac1      	ldr	r2, [pc, #772]	; (4058 <_Min_Heap_Size+0x58>)
    3d54:	6812      	ldr	r2, [r2, #0]
    3d56:	601a      	str	r2, [r3, #0]
				if (currentActivePreset < 60)
    3d58:	4bc0      	ldr	r3, [pc, #768]	; (405c <_Min_Heap_Size+0x5c>)
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	b2db      	uxtb	r3, r3
    3d5e:	2b3b      	cmp	r3, #59	; 0x3b
    3d60:	d96f      	bls.n	3e42 <audioFrame+0x482>
				else if (currentActivePreset == 63)
    3d62:	4bbe      	ldr	r3, [pc, #760]	; (405c <_Min_Heap_Size+0x5c>)
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	b2db      	uxtb	r3, r3
    3d68:	2b3f      	cmp	r3, #63	; 0x3f
    3d6a:	f000 80aa 	beq.w	3ec2 <audioFrame+0x502>
				else if (currentActivePreset == 62)
    3d6e:	4bbb      	ldr	r3, [pc, #748]	; (405c <_Min_Heap_Size+0x5c>)
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	b2db      	uxtb	r3, r3
    3d74:	2b3e      	cmp	r3, #62	; 0x3e
    3d76:	f000 80b0 	beq.w	3eda <audioFrame+0x51a>
				else if (currentActivePreset == 61)
    3d7a:	4bb8      	ldr	r3, [pc, #736]	; (405c <_Min_Heap_Size+0x5c>)
    3d7c:	781b      	ldrb	r3, [r3, #0]
    3d7e:	b2db      	uxtb	r3, r3
    3d80:	2b3d      	cmp	r3, #61	; 0x3d
    3d82:	f000 818d 	beq.w	40a0 <_Min_Heap_Size+0xa0>
			previousStringInputs[i] = stringInputs[i];
    3d86:	4bb6      	ldr	r3, [pc, #728]	; (4060 <_Min_Heap_Size+0x60>)
    3d88:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    3d8c:	4bb5      	ldr	r3, [pc, #724]	; (4064 <_Min_Heap_Size+0x64>)
    3d8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
    3d92:	3401      	adds	r4, #1
    3d94:	4bb4      	ldr	r3, [pc, #720]	; (4068 <_Min_Heap_Size+0x68>)
    3d96:	781b      	ldrb	r3, [r3, #0]
    3d98:	42a3      	cmp	r3, r4
    3d9a:	f340 8480 	ble.w	469e <_Min_Heap_Size+0x69e>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    3d9e:	4bb1      	ldr	r3, [pc, #708]	; (4064 <_Min_Heap_Size+0x64>)
    3da0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    3da4:	b925      	cbnz	r5, 3db0 <audioFrame+0x3f0>
    3da6:	4bae      	ldr	r3, [pc, #696]	; (4060 <_Min_Heap_Size+0x60>)
    3da8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d1bd      	bne.n	3d2c <audioFrame+0x36c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    3db0:	4bac      	ldr	r3, [pc, #688]	; (4064 <_Min_Heap_Size+0x64>)
    3db2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    3db6:	2b00      	cmp	r3, #0
    3db8:	dde5      	ble.n	3d86 <audioFrame+0x3c6>
    3dba:	4ba9      	ldr	r3, [pc, #676]	; (4060 <_Min_Heap_Size+0x60>)
    3dbc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d1e0      	bne.n	3d86 <audioFrame+0x3c6>
				if (currentActivePreset < 60)
    3dc4:	4ba5      	ldr	r3, [pc, #660]	; (405c <_Min_Heap_Size+0x5c>)
    3dc6:	781b      	ldrb	r3, [r3, #0]
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	2b3b      	cmp	r3, #59	; 0x3b
    3dcc:	f240 8432 	bls.w	4634 <_Min_Heap_Size+0x634>
				else if (currentActivePreset == 63)
    3dd0:	4ba2      	ldr	r3, [pc, #648]	; (405c <_Min_Heap_Size+0x5c>)
    3dd2:	781b      	ldrb	r3, [r3, #0]
    3dd4:	b2db      	uxtb	r3, r3
    3dd6:	2b3f      	cmp	r3, #63	; 0x3f
    3dd8:	f000 842e 	beq.w	4638 <_Min_Heap_Size+0x638>
				else if (currentActivePreset == 62)
    3ddc:	4b9f      	ldr	r3, [pc, #636]	; (405c <_Min_Heap_Size+0x5c>)
    3dde:	781b      	ldrb	r3, [r3, #0]
    3de0:	b2db      	uxtb	r3, r3
    3de2:	2b3e      	cmp	r3, #62	; 0x3e
    3de4:	f000 842d 	beq.w	4642 <_Min_Heap_Size+0x642>
				else if (currentActivePreset == 61)
    3de8:	4b9c      	ldr	r3, [pc, #624]	; (405c <_Min_Heap_Size+0x5c>)
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	b2db      	uxtb	r3, r3
    3dee:	2b3d      	cmp	r3, #61	; 0x3d
    3df0:	d1c9      	bne.n	3d86 <audioFrame+0x3c6>
					for (int j = 0; j < NUM_OVERTONES; j++)
    3df2:	2500      	movs	r5, #0
    3df4:	f000 bc47 	b.w	4686 <_Min_Heap_Size+0x686>
						if (useVelocity == 0) envVel = 1.f;
    3df8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
						tADSRT_on(&envs[v][i], envVel);
    3dfc:	eb04 0047 	add.w	r0, r4, r7, lsl #1
    3e00:	4b9a      	ldr	r3, [pc, #616]	; (406c <_Min_Heap_Size+0x6c>)
    3e02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e06:	f003 fbff 	bl	7608 <__tADSRT_on_veneer>
						voiceSounding = 1;
    3e0a:	4b99      	ldr	r3, [pc, #612]	; (4070 <_Min_Heap_Size+0x70>)
    3e0c:	2201      	movs	r2, #1
    3e0e:	701a      	strb	r2, [r3, #0]
					for (int v = 0; v < NUM_ENV; v++)
    3e10:	4417      	add	r7, r2
    3e12:	2f03      	cmp	r7, #3
    3e14:	dc18      	bgt.n	3e48 <audioFrame+0x488>
						param* envParams = &params[ENVELOPE_PARAMS_OFFSET + v * EnvelopeParamsNum];
    3e16:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3e1a:	005b      	lsls	r3, r3, #1
    3e1c:	336c      	adds	r3, #108	; 0x6c
    3e1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3e22:	4a94      	ldr	r2, [pc, #592]	; (4074 <_Min_Heap_Size+0x74>)
    3e24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float useVelocity = envParams[EnvelopeVelocity].realVal[i];
    3e28:	1ca2      	adds	r2, r4, #2
    3e2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e2e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
						if (useVelocity == 0) envVel = 1.f;
    3e32:	eef5 7a40 	vcmp.f32	s15, #0.0
    3e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e3a:	d0dd      	beq.n	3df8 <audioFrame+0x438>
						float envVel = amplitz;
    3e3c:	eeb0 0a48 	vmov.f32	s0, s16
    3e40:	e7dc      	b.n	3dfc <audioFrame+0x43c>
					for (int v = 0; v < NUM_ENV; v++)
    3e42:	462f      	mov	r7, r5
    3e44:	e7e5      	b.n	3e12 <audioFrame+0x452>
					for (int v = 0; v < NUM_LFOS; v++)
    3e46:	3501      	adds	r5, #1
    3e48:	2d03      	cmp	r5, #3
    3e4a:	dc1d      	bgt.n	3e88 <audioFrame+0x4c8>
						param* lfoParams = &params[LFO_PARAMS_OFFSET + v * LFOParamsNum];
    3e4c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3e50:	3384      	adds	r3, #132	; 0x84
    3e52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3e56:	4a87      	ldr	r2, [pc, #540]	; (4074 <_Min_Heap_Size+0x74>)
    3e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float noteOnSync = lfoParams[LFOSync].realVal[i];
    3e5c:	1ca2      	adds	r2, r4, #2
    3e5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3e62:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
						if (noteOnSync > 0.5f)
    3e66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e72:	dde8      	ble.n	3e46 <audioFrame+0x486>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    3e74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3e76:	1ca1      	adds	r1, r4, #2
    3e78:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3e7c:	4621      	mov	r1, r4
    3e7e:	4628      	mov	r0, r5
    3e80:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
    3e84:	4790      	blx	r2
    3e86:	e7de      	b.n	3e46 <audioFrame+0x486>
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    3e88:	4b7b      	ldr	r3, [pc, #492]	; (4078 <_Min_Heap_Size+0x78>)
    3e8a:	781a      	ldrb	r2, [r3, #0]
    3e8c:	1c51      	adds	r1, r2, #1
    3e8e:	7019      	strb	r1, [r3, #0]
    3e90:	4b7a      	ldr	r3, [pc, #488]	; (407c <_Min_Heap_Size+0x7c>)
    3e92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e96:	edd3 7a00 	vldr	s15, [r3]
    3e9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
    3ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
    3ea6:	4b76      	ldr	r3, [pc, #472]	; (4080 <_Min_Heap_Size+0x80>)
    3ea8:	f104 0226 	add.w	r2, r4, #38	; 0x26
    3eac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3eb0:	edc2 7a00 	vstr	s15, [r2]
					sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    3eb4:	f104 0224 	add.w	r2, r4, #36	; 0x24
    3eb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3ebc:	ed83 8a00 	vstr	s16, [r3]
    3ec0:	e761      	b.n	3d86 <audioFrame+0x3c6>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
    3ec2:	4b70      	ldr	r3, [pc, #448]	; (4084 <_Min_Heap_Size+0x84>)
    3ec4:	edd3 0a00 	vldr	s1, [r3]
    3ec8:	486f      	ldr	r0, [pc, #444]	; (4088 <_Min_Heap_Size+0x88>)
    3eca:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3ece:	f003 fcab 	bl	7828 <__tSimpleLivingString3_pluck_veneer>
					lsDecay[i] = 1;
    3ed2:	4b6e      	ldr	r3, [pc, #440]	; (408c <_Min_Heap_Size+0x8c>)
    3ed4:	2201      	movs	r2, #1
    3ed6:	551a      	strb	r2, [r3, r4]
    3ed8:	e755      	b.n	3d86 <audioFrame+0x3c6>
					tADSRT_on(&fenvelopes[i], amplitz);
    3eda:	00a7      	lsls	r7, r4, #2
    3edc:	486c      	ldr	r0, [pc, #432]	; (4090 <_Min_Heap_Size+0x90>)
    3ede:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3ee2:	f003 fb91 	bl	7608 <__tADSRT_on_veneer>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    3ee6:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 409c <_Min_Heap_Size+0x9c>
    3eea:	4457      	add	r7, sl
    3eec:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 4094 <_Min_Heap_Size+0x94>
    3ef0:	ed99 7a00 	vldr	s14, [r9]
    3ef4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f00:	bfcc      	ite	gt
    3f02:	2101      	movgt	r1, #1
    3f04:	2100      	movle	r1, #0
    3f06:	4638      	mov	r0, r7
    3f08:	f003 fc72 	bl	77f0 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
    3f0c:	ed99 0a01 	vldr	s0, [r9, #4]
    3f10:	4638      	mov	r0, r7
    3f12:	f003 fba9 	bl	7668 <__tLivingString2_setTargetLev_veneer>
					int delayLength = (int)strings[i]->waveLengthInSamples;
    3f16:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
    3f1a:	edd3 7a02 	vldr	s15, [r3, #8]
    3f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3f22:	ee17 2a90 	vmov	r2, s15
					int beforeLength = (delayLength * knobScaled[2]);
    3f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f2a:	edd9 6a02 	vldr	s13, [r9, #8]
    3f2e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    3f32:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    3f36:	ee17 3a10 	vmov	r3, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    3f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3f3e:	ee37 7a66 	vsub.f32	s14, s14, s13
    3f42:	ee67 7a87 	vmul.f32	s15, s15, s14
    3f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					float pluckAmp = amplitz * 2.0f; //was 4
    3f4a:	ee38 8a08 	vadd.f32	s16, s16, s16
					if (beforeLength > 0)
    3f4e:	2b00      	cmp	r3, #0
    3f50:	dd10      	ble.n	3f74 <audioFrame+0x5b4>
						beforePickIncrement = pluckAmp / beforeLength;
    3f52:	ee07 3a10 	vmov	s14, r3
    3f56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3f5a:	eec8 6a07 	vdiv.f32	s13, s16, s14
					if (afterLength > 0)
    3f5e:	ee17 1a90 	vmov	r1, s15
    3f62:	2900      	cmp	r1, #0
    3f64:	dd03      	ble.n	3f6e <audioFrame+0x5ae>
						afterPickIncrement = pluckAmp / afterLength;
    3f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f6a:	ee88 8a27 	vdiv.f32	s16, s16, s15
					float value = 0.0f;
    3f6e:	eddf 7a38 	vldr	s15, [pc, #224]	; 4050 <_Min_Heap_Size+0x50>
					for (int j = 0; j < delayLength; j++)
    3f72:	e02d      	b.n	3fd0 <audioFrame+0x610>
						beforePickIncrement = pluckAmp;
    3f74:	eef0 6a48 	vmov.f32	s13, s16
    3f78:	e7f1      	b.n	3f5e <audioFrame+0x59e>
							value -= afterPickIncrement;
    3f7a:	ee77 7ac8 	vsub.f32	s15, s15, s16
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    3f7e:	f8df e11c 	ldr.w	lr, [pc, #284]	; 409c <_Min_Heap_Size+0x9c>
    3f82:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
    3f86:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
    3f8a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3f8e:	f8dc 1018 	ldr.w	r1, [ip, #24]
    3f92:	4429      	add	r1, r5
    3f94:	f8dc c008 	ldr.w	ip, [ip, #8]
    3f98:	ea01 010c 	and.w	r1, r1, ip
    3f9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3fa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3fa4:	ee27 7a87 	vmul.f32	s14, s15, s14
    3fa8:	ed81 7a00 	vstr	s14, [r1]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    3fac:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
    3fb0:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
    3fb4:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3fb8:	f8dc 1018 	ldr.w	r1, [ip, #24]
    3fbc:	4429      	add	r1, r5
    3fbe:	f8dc c008 	ldr.w	ip, [ip, #8]
    3fc2:	ea01 010c 	and.w	r1, r1, ip
    3fc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3fca:	ed81 7a00 	vstr	s14, [r1]
					for (int j = 0; j < delayLength; j++)
    3fce:	3501      	adds	r5, #1
    3fd0:	4295      	cmp	r5, r2
    3fd2:	da2c      	bge.n	402e <_Min_Heap_Size+0x2e>
						if (j < beforeLength)
    3fd4:	429d      	cmp	r5, r3
    3fd6:	dad0      	bge.n	3f7a <audioFrame+0x5ba>
							value += beforePickIncrement;
    3fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    3fdc:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 409c <_Min_Heap_Size+0x9c>
    3fe0:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
    3fe4:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
    3fe8:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3fec:	f8dc 1018 	ldr.w	r1, [ip, #24]
    3ff0:	4429      	add	r1, r5
    3ff2:	f8dc c008 	ldr.w	ip, [ip, #8]
    3ff6:	ea01 010c 	and.w	r1, r1, ip
    3ffa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3ffe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4002:	ee27 7a87 	vmul.f32	s14, s15, s14
    4006:	ed81 7a00 	vstr	s14, [r1]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
    400a:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
    400e:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
    4012:	f8dc 0004 	ldr.w	r0, [ip, #4]
    4016:	f8dc 1018 	ldr.w	r1, [ip, #24]
    401a:	4429      	add	r1, r5
    401c:	f8dc c008 	ldr.w	ip, [ip, #8]
    4020:	ea01 010c 	and.w	r1, r1, ip
    4024:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4028:	ed81 7a00 	vstr	s14, [r1]
    402c:	e7cf      	b.n	3fce <audioFrame+0x60e>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
    402e:	4b19      	ldr	r3, [pc, #100]	; (4094 <_Min_Heap_Size+0x94>)
    4030:	ed93 0a03 	vldr	s0, [r3, #12]
    4034:	eddf 7a18 	vldr	s15, [pc, #96]	; 4098 <_Min_Heap_Size+0x98>
    4038:	ee20 0a27 	vmul.f32	s0, s0, s15
    403c:	4638      	mov	r0, r7
    403e:	f003 fb07 	bl	7650 <__tLivingString2_setDecay_veneer>
    4042:	e6a0      	b.n	3d86 <audioFrame+0x3c6>
    4044:	20005640 	.word	0x20005640
    4048:	58020400 	.word	0x58020400
    404c:	37800080 	.word	0x37800080
    4050:	00000000 	.word	0x00000000
    4054:	20014954 	.word	0x20014954
    4058:	20005678 	.word	0x20005678
    405c:	20014c08 	.word	0x20014c08
    4060:	2001491c 	.word	0x2001491c
    4064:	30000000 	.word	0x30000000
    4068:	20000052 	.word	0x20000052
    406c:	20005160 	.word	0x20005160
    4070:	20014a00 	.word	0x20014a00
    4074:	20019798 	.word	0x20019798
    4078:	20005c6c 	.word	0x20005c6c
    407c:	2001a8c4 	.word	0x2001a8c4
    4080:	200147bc 	.word	0x200147bc
    4084:	2000018c 	.word	0x2000018c
    4088:	200054d8 	.word	0x200054d8
    408c:	200054f0 	.word	0x200054f0
    4090:	20005180 	.word	0x20005180
    4094:	2000530c 	.word	0x2000530c
    4098:	43fa0000 	.word	0x43fa0000
    409c:	2001497c 	.word	0x2001497c
					tADSRT_on(&fenvelopes[i], amplitz);
    40a0:	00a7      	lsls	r7, r4, #2
    40a2:	48c2      	ldr	r0, [pc, #776]	; (43ac <_Min_Heap_Size+0x3ac>)
    40a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    40a8:	f003 faae 	bl	7608 <__tADSRT_on_veneer>
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]) * invMapping[i];
    40ac:	4bc0      	ldr	r3, [pc, #768]	; (43b0 <_Min_Heap_Size+0x3b0>)
    40ae:	443b      	add	r3, r7
    40b0:	ed93 0a00 	vldr	s0, [r3]
    40b4:	4bbf      	ldr	r3, [pc, #764]	; (43b4 <_Min_Heap_Size+0x3b4>)
    40b6:	443b      	add	r3, r7
    40b8:	edd3 7a00 	vldr	s15, [r3]
    40bc:	ee30 0a27 	vadd.f32	s0, s0, s15
    40c0:	f003 fb26 	bl	7710 <__mtof_veneer>
    40c4:	4bbc      	ldr	r3, [pc, #752]	; (43b8 <_Min_Heap_Size+0x3b8>)
    40c6:	443b      	add	r3, r7
    40c8:	edd3 7a00 	vldr	s15, [r3]
    40cc:	ee60 7a27 	vmul.f32	s15, s0, s15
    40d0:	4bba      	ldr	r3, [pc, #744]	; (43bc <_Min_Heap_Size+0x3bc>)
    40d2:	441f      	add	r7, r3
    40d4:	edc7 7a00 	vstr	s15, [r7]
					for (int j = 0; j < NUM_OVERTONES; j++)
    40d8:	e076      	b.n	41c8 <_Min_Heap_Size+0x1c8>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    40da:	f105 0230 	add.w	r2, r5, #48	; 0x30
    40de:	0097      	lsls	r7, r2, #2
    40e0:	4bb7      	ldr	r3, [pc, #732]	; (43c0 <_Min_Heap_Size+0x3c0>)
    40e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    40e6:	edd3 aa00 	vldr	s21, [r3]
    40ea:	4bb6      	ldr	r3, [pc, #728]	; (43c4 <_Min_Heap_Size+0x3c4>)
    40ec:	ed93 1a07 	vldr	s2, [r3, #28]
    40f0:	eef0 0a68 	vmov.f32	s1, s17
    40f4:	ed93 0a06 	vldr	s0, [r3, #24]
    40f8:	f002 fd22 	bl	6b40 <LEAF_clip>
    40fc:	ee6a 7a80 	vmul.f32	s15, s21, s0
    4100:	4bb1      	ldr	r3, [pc, #708]	; (43c8 <_Min_Heap_Size+0x3c8>)
    4102:	443b      	add	r3, r7
    4104:	ed93 7a00 	vldr	s14, [r3]
    4108:	ee77 7a87 	vadd.f32	s15, s15, s14
    410c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4110:	eec7 aa27 	vdiv.f32	s21, s14, s15
    4114:	e124      	b.n	4360 <_Min_Heap_Size+0x360>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    4116:	f105 0218 	add.w	r2, r5, #24
    411a:	0097      	lsls	r7, r2, #2
    411c:	4ba8      	ldr	r3, [pc, #672]	; (43c0 <_Min_Heap_Size+0x3c0>)
    411e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4122:	ed93 aa00 	vldr	s20, [r3]
    4126:	4ba7      	ldr	r3, [pc, #668]	; (43c4 <_Min_Heap_Size+0x3c4>)
    4128:	ed93 1a04 	vldr	s2, [r3, #16]
    412c:	eef0 0a68 	vmov.f32	s1, s17
    4130:	ed93 0a03 	vldr	s0, [r3, #12]
    4134:	f002 fd04 	bl	6b40 <LEAF_clip>
    4138:	ee2a 7a00 	vmul.f32	s14, s20, s0
    413c:	4ba2      	ldr	r3, [pc, #648]	; (43c8 <_Min_Heap_Size+0x3c8>)
    413e:	443b      	add	r3, r7
    4140:	edd3 7a00 	vldr	s15, [r3]
    4144:	ee37 7a27 	vadd.f32	s14, s14, s15
    4148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    414c:	eec6 7a87 	vdiv.f32	s15, s13, s14
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    4150:	ee67 7a89 	vmul.f32	s15, s15, s18
    4154:	ee2b 7a2a 	vmul.f32	s14, s22, s21
    4158:	ee37 7a87 	vadd.f32	s14, s15, s14
						thisDecay *= 2000.0f * knobScaled[3];
    415c:	f8df b27c 	ldr.w	fp, [pc, #636]	; 43dc <_Min_Heap_Size+0x3dc>
    4160:	eddb 7a03 	vldr	s15, [fp, #12]
    4164:	eddf 6a99 	vldr	s13, [pc, #612]	; 43cc <_Min_Heap_Size+0x3cc>
    4168:	ee67 7aa6 	vmul.f32	s15, s15, s13
    416c:	ee67 7a87 	vmul.f32	s15, s15, s14
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5]));// * randomFactors[currentRandom]);
    4170:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    4174:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    4178:	4a95      	ldr	r2, [pc, #596]	; (43d0 <_Min_Heap_Size+0x3d0>)
    417a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
    417e:	f8df a268 	ldr.w	sl, [pc, #616]	; 43e8 <_Min_Heap_Size+0x3e8>
    4182:	4f94      	ldr	r7, [pc, #592]	; (43d4 <_Min_Heap_Size+0x3d4>)
    4184:	783b      	ldrb	r3, [r7, #0]
    4186:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    418a:	ed93 0a00 	vldr	s0, [r3]
    418e:	ed9b 7a05 	vldr	s14, [fp, #20]
    4192:	ee20 0a07 	vmul.f32	s0, s0, s14
    4196:	ee30 0a27 	vadd.f32	s0, s0, s15
    419a:	4648      	mov	r0, r9
    419c:	f003 fb58 	bl	7850 <__tADSRT_setDecay_veneer>
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6])));
    41a0:	783b      	ldrb	r3, [r7, #0]
    41a2:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
    41a6:	ed9a 0a00 	vldr	s0, [sl]
    41aa:	eddb 7a06 	vldr	s15, [fp, #24]
    41ae:	ee20 0a27 	vmul.f32	s0, s0, s15
    41b2:	ee30 0a29 	vadd.f32	s0, s0, s19
    41b6:	ee20 0a08 	vmul.f32	s0, s0, s16
    41ba:	4648      	mov	r0, r9
    41bc:	f003 fa24 	bl	7608 <__tADSRT_on_veneer>
						currentRandom++;
    41c0:	783b      	ldrb	r3, [r7, #0]
    41c2:	3301      	adds	r3, #1
    41c4:	703b      	strb	r3, [r7, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    41c6:	3501      	adds	r5, #1
    41c8:	2d0b      	cmp	r5, #11
    41ca:	f73f addc 	bgt.w	3d86 <audioFrame+0x3c6>
						int thisString = i + firstString;
    41ce:	4b82      	ldr	r3, [pc, #520]	; (43d8 <_Min_Heap_Size+0x3d8>)
    41d0:	681b      	ldr	r3, [r3, #0]
    41d2:	4423      	add	r3, r4
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    41d4:	4a79      	ldr	r2, [pc, #484]	; (43bc <_Min_Heap_Size+0x3bc>)
    41d6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    41da:	edd2 8a00 	vldr	s17, [r2]
    41de:	4a7f      	ldr	r2, [pc, #508]	; (43dc <_Min_Heap_Size+0x3dc>)
    41e0:	edd2 7a02 	vldr	s15, [r2, #8]
    41e4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
    41e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    41ec:	ee68 8aa7 	vmul.f32	s17, s17, s15
						if (thisString < 6)
    41f0:	2b05      	cmp	r3, #5
    41f2:	f300 80ff 	bgt.w	43f4 <_Min_Heap_Size+0x3f4>
							stringFade = (float)thisString * 0.2f;
    41f6:	ee07 3a90 	vmov	s15, r3
    41fa:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    41fe:	eddf 7a7b 	vldr	s15, [pc, #492]	; 43ec <_Min_Heap_Size+0x3ec>
    4202:	ee29 9a27 	vmul.f32	s18, s18, s15
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    4206:	eddf 9a7a 	vldr	s19, [pc, #488]	; 43f0 <_Min_Heap_Size+0x3f0>
    420a:	4f6e      	ldr	r7, [pc, #440]	; (43c4 <_Min_Heap_Size+0x3c4>)
    420c:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    4210:	eef0 1a69 	vmov.f32	s3, s19
    4214:	ed97 1a08 	vldr	s2, [r7, #32]
    4218:	edd7 0a06 	vldr	s1, [r7, #24]
    421c:	eeb0 0a68 	vmov.f32	s0, s17
    4220:	f003 fa56 	bl	76d0 <__map_veneer>
    4224:	eef0 0a40 	vmov.f32	s1, s0
    4228:	ed9f aa6d 	vldr	s20, [pc, #436]	; 43e0 <_Min_Heap_Size+0x3e0>
    422c:	eeb0 1a4a 	vmov.f32	s2, s20
    4230:	eeb0 0a69 	vmov.f32	s0, s19
    4234:	f002 fc84 	bl	6b40 <LEAF_clip>
    4238:	eef0 aa40 	vmov.f32	s21, s0
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    423c:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    4240:	eef0 1a69 	vmov.f32	s3, s19
    4244:	ed97 1a05 	vldr	s2, [r7, #20]
    4248:	edd7 0a03 	vldr	s1, [r7, #12]
    424c:	eeb0 0a68 	vmov.f32	s0, s17
    4250:	f003 fa3e 	bl	76d0 <__map_veneer>
    4254:	eef0 0a40 	vmov.f32	s1, s0
    4258:	eeb0 1a4a 	vmov.f32	s2, s20
    425c:	eeb0 0a69 	vmov.f32	s0, s19
    4260:	f002 fc6e 	bl	6b40 <LEAF_clip>
    4264:	eeb0 aa40 	vmov.f32	s20, s0
							int height1Int = floor(height1);
    4268:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    426c:	febb 7b47 	vrintm.f64	d7, d7
    4270:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    4274:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
    4278:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    427c:	ee30 6a46 	vsub.f32	s12, s0, s12
							int height2Int = floor(height2);
    4280:	eeb7 7aea 	vcvt.f64.f32	d7, s21
    4284:	febb 7b47 	vrintm.f64	d7, d7
    4288:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    428c:	ee17 2a90 	vmov	r2, s15
							float height2Float = height2 - height2Int;
    4290:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    4294:	ee7a 6ae6 	vsub.f32	s13, s21, s13
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4298:	4952      	ldr	r1, [pc, #328]	; (43e4 <_Min_Heap_Size+0x3e4>)
    429a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    429e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    42a2:	3024      	adds	r0, #36	; 0x24
    42a4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    42a8:	edd0 9a00 	vldr	s19, [r0]
    42ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    42b0:	ee77 7a46 	vsub.f32	s15, s14, s12
    42b4:	ee69 9aa7 	vmul.f32	s19, s19, s15
    42b8:	3301      	adds	r3, #1
    42ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    42be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    42c2:	3324      	adds	r3, #36	; 0x24
    42c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    42c8:	edd3 7a00 	vldr	s15, [r3]
    42cc:	ee27 6a86 	vmul.f32	s12, s15, s12
    42d0:	ee79 9a86 	vadd.f32	s19, s19, s12
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    42d4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    42d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    42dc:	3348      	adds	r3, #72	; 0x48
    42de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    42e2:	edd3 7a00 	vldr	s15, [r3]
    42e6:	ee37 6a66 	vsub.f32	s12, s14, s13
    42ea:	ee67 7a86 	vmul.f32	s15, s15, s12
    42ee:	3201      	adds	r2, #1
    42f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    42f4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
    42f8:	3348      	adds	r3, #72	; 0x48
    42fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    42fe:	ed93 6a00 	vldr	s12, [r3]
    4302:	ee66 6a26 	vmul.f32	s13, s12, s13
    4306:	ee77 7aa6 	vadd.f32	s15, s15, s13
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    430a:	ee69 9a29 	vmul.f32	s19, s18, s19
    430e:	ee37 ba49 	vsub.f32	s22, s14, s18
    4312:	ee6b 7a27 	vmul.f32	s15, s22, s15
    4316:	ee79 9aa7 	vadd.f32	s19, s19, s15
							if (height2 < 1.0f)
    431a:	eef4 aac7 	vcmpe.f32	s21, s14
    431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4322:	f53f aeda 	bmi.w	40da <_Min_Heap_Size+0xda>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    4326:	f105 023c 	add.w	r2, r5, #60	; 0x3c
    432a:	0097      	lsls	r7, r2, #2
    432c:	4b24      	ldr	r3, [pc, #144]	; (43c0 <_Min_Heap_Size+0x3c0>)
    432e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4332:	edd3 aa00 	vldr	s21, [r3]
    4336:	4b23      	ldr	r3, [pc, #140]	; (43c4 <_Min_Heap_Size+0x3c4>)
    4338:	ed93 1a08 	vldr	s2, [r3, #32]
    433c:	eef0 0a68 	vmov.f32	s1, s17
    4340:	ed93 0a07 	vldr	s0, [r3, #28]
    4344:	f002 fbfc 	bl	6b40 <LEAF_clip>
    4348:	ee6a 7a80 	vmul.f32	s15, s21, s0
    434c:	4b1e      	ldr	r3, [pc, #120]	; (43c8 <_Min_Heap_Size+0x3c8>)
    434e:	443b      	add	r3, r7
    4350:	ed93 7a00 	vldr	s14, [r3]
    4354:	ee77 7a87 	vadd.f32	s15, s15, s14
    4358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    435c:	eec7 aa27 	vdiv.f32	s21, s14, s15
							if (height1 < 1.0f)
    4360:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4364:	eeb4 aae7 	vcmpe.f32	s20, s15
    4368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    436c:	f53f aed3 	bmi.w	4116 <_Min_Heap_Size+0x116>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    4370:	f105 0224 	add.w	r2, r5, #36	; 0x24
    4374:	0097      	lsls	r7, r2, #2
    4376:	4b12      	ldr	r3, [pc, #72]	; (43c0 <_Min_Heap_Size+0x3c0>)
    4378:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    437c:	ed93 aa00 	vldr	s20, [r3]
    4380:	4b10      	ldr	r3, [pc, #64]	; (43c4 <_Min_Heap_Size+0x3c4>)
    4382:	ed93 1a05 	vldr	s2, [r3, #20]
    4386:	eef0 0a68 	vmov.f32	s1, s17
    438a:	ed93 0a04 	vldr	s0, [r3, #16]
    438e:	f002 fbd7 	bl	6b40 <LEAF_clip>
    4392:	ee2a 7a00 	vmul.f32	s14, s20, s0
    4396:	4b0c      	ldr	r3, [pc, #48]	; (43c8 <_Min_Heap_Size+0x3c8>)
    4398:	443b      	add	r3, r7
    439a:	edd3 7a00 	vldr	s15, [r3]
    439e:	ee37 7a27 	vadd.f32	s14, s14, s15
    43a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    43a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    43aa:	e6d1      	b.n	4150 <_Min_Heap_Size+0x150>
    43ac:	20005180 	.word	0x20005180
    43b0:	2001494c 	.word	0x2001494c
    43b4:	20014954 	.word	0x20014954
    43b8:	20005300 	.word	0x20005300
    43bc:	200148ec 	.word	0x200148ec
    43c0:	20000c94 	.word	0x20000c94
    43c4:	20000340 	.word	0x20000340
    43c8:	20000db4 	.word	0x20000db4
    43cc:	44fa0000 	.word	0x44fa0000
    43d0:	20000a64 	.word	0x20000a64
    43d4:	20014c09 	.word	0x20014c09
    43d8:	200051c0 	.word	0x200051c0
    43dc:	2000530c 	.word	0x2000530c
    43e0:	3ffeb852 	.word	0x3ffeb852
    43e4:	20000394 	.word	0x20000394
    43e8:	2000586c 	.word	0x2000586c
    43ec:	3e4ccccd 	.word	0x3e4ccccd
    43f0:	00000000 	.word	0x00000000
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    43f4:	ee07 3a90 	vmov	s15, r3
    43f8:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    43fc:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    4400:	ee39 9a67 	vsub.f32	s18, s18, s15
    4404:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 43ec <_Min_Heap_Size+0x3ec>
    4408:	ee29 9a27 	vmul.f32	s18, s18, s15
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    440c:	ed5f 9a08 	vldr	s19, [pc, #-32]	; 43f0 <_Min_Heap_Size+0x3f0>
    4410:	4fcc      	ldr	r7, [pc, #816]	; (4744 <_Min_Heap_Size+0x744>)
    4412:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    4416:	eef0 1a69 	vmov.f32	s3, s19
    441a:	ed97 1a05 	vldr	s2, [r7, #20]
    441e:	edd7 0a03 	vldr	s1, [r7, #12]
    4422:	eeb0 0a68 	vmov.f32	s0, s17
    4426:	f003 f953 	bl	76d0 <__map_veneer>
    442a:	eef0 0a40 	vmov.f32	s1, s0
    442e:	ed9f aac6 	vldr	s20, [pc, #792]	; 4748 <_Min_Heap_Size+0x748>
    4432:	eeb0 1a4a 	vmov.f32	s2, s20
    4436:	eeb0 0a69 	vmov.f32	s0, s19
    443a:	f002 fb81 	bl	6b40 <LEAF_clip>
    443e:	eef0 aa40 	vmov.f32	s21, s0
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    4442:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    4446:	eef0 1a69 	vmov.f32	s3, s19
    444a:	ed97 1a02 	vldr	s2, [r7, #8]
    444e:	edd7 0a00 	vldr	s1, [r7]
    4452:	eeb0 0a68 	vmov.f32	s0, s17
    4456:	f003 f93b 	bl	76d0 <__map_veneer>
    445a:	eef0 0a40 	vmov.f32	s1, s0
    445e:	eeb0 1a4a 	vmov.f32	s2, s20
    4462:	eeb0 0a69 	vmov.f32	s0, s19
    4466:	f002 fb6b 	bl	6b40 <LEAF_clip>
    446a:	eeb0 aa40 	vmov.f32	s20, s0
							int height1Int = floor(height1);
    446e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    4472:	febb 7b47 	vrintm.f64	d7, d7
    4476:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    447a:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
    447e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4482:	ee30 6a67 	vsub.f32	s12, s0, s15
							int height2Int = floor(height2);
    4486:	eeb7 7aea 	vcvt.f64.f32	d7, s21
    448a:	febb 7b47 	vrintm.f64	d7, d7
    448e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    4492:	ee17 2a90 	vmov	r2, s15
							float height2Float = height2 - height2Int;
    4496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    449a:	ee7a 6ac7 	vsub.f32	s13, s21, s14
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    449e:	49ab      	ldr	r1, [pc, #684]	; (474c <_Min_Heap_Size+0x74c>)
    44a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    44a4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    44a8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    44ac:	edd0 9a00 	vldr	s19, [r0]
    44b0:	3301      	adds	r3, #1
    44b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    44b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    44ba:	3324      	adds	r3, #36	; 0x24
    44bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    44c0:	edd3 7a00 	vldr	s15, [r3]
    44c4:	ee67 7a86 	vmul.f32	s15, s15, s12
    44c8:	ee79 9aa7 	vadd.f32	s19, s19, s15
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    44cc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    44d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    44d4:	3324      	adds	r3, #36	; 0x24
    44d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    44da:	edd3 7a00 	vldr	s15, [r3]
    44de:	3201      	adds	r2, #1
    44e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    44e4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
    44e8:	3348      	adds	r3, #72	; 0x48
    44ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    44ee:	ed93 7a00 	vldr	s14, [r3]
    44f2:	ee27 7a26 	vmul.f32	s14, s14, s13
    44f6:	ee77 7a87 	vadd.f32	s15, s15, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    44fa:	ee69 9a29 	vmul.f32	s19, s18, s19
    44fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4502:	ee37 ba49 	vsub.f32	s22, s14, s18
    4506:	ee6b 7a27 	vmul.f32	s15, s22, s15
    450a:	ee79 9aa7 	vadd.f32	s19, s19, s15
							if (height2 < 1.0f)
    450e:	eef4 aac7 	vcmpe.f32	s21, s14
    4512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4516:	d447      	bmi.n	45a8 <_Min_Heap_Size+0x5a8>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    4518:	f105 0224 	add.w	r2, r5, #36	; 0x24
    451c:	0097      	lsls	r7, r2, #2
    451e:	4b8c      	ldr	r3, [pc, #560]	; (4750 <_Min_Heap_Size+0x750>)
    4520:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4524:	edd3 aa00 	vldr	s21, [r3]
    4528:	4b86      	ldr	r3, [pc, #536]	; (4744 <_Min_Heap_Size+0x744>)
    452a:	ed93 1a05 	vldr	s2, [r3, #20]
    452e:	eef0 0a68 	vmov.f32	s1, s17
    4532:	ed93 0a04 	vldr	s0, [r3, #16]
    4536:	f002 fb03 	bl	6b40 <LEAF_clip>
    453a:	ee6a 7a80 	vmul.f32	s15, s21, s0
    453e:	4b85      	ldr	r3, [pc, #532]	; (4754 <_Min_Heap_Size+0x754>)
    4540:	443b      	add	r3, r7
    4542:	ed93 7a00 	vldr	s14, [r3]
    4546:	ee77 7a87 	vadd.f32	s15, s15, s14
    454a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    454e:	eec7 aa27 	vdiv.f32	s21, s14, s15
							if (height1 < 1.0f)
    4552:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4556:	eeb4 aae7 	vcmpe.f32	s20, s15
    455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    455e:	d441      	bmi.n	45e4 <_Min_Heap_Size+0x5e4>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    4560:	f105 020c 	add.w	r2, r5, #12
    4564:	0097      	lsls	r7, r2, #2
    4566:	4b7a      	ldr	r3, [pc, #488]	; (4750 <_Min_Heap_Size+0x750>)
    4568:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    456c:	ed93 aa00 	vldr	s20, [r3]
    4570:	4b74      	ldr	r3, [pc, #464]	; (4744 <_Min_Heap_Size+0x744>)
    4572:	ed93 1a02 	vldr	s2, [r3, #8]
    4576:	eef0 0a68 	vmov.f32	s1, s17
    457a:	ed93 0a01 	vldr	s0, [r3, #4]
    457e:	f002 fadf 	bl	6b40 <LEAF_clip>
    4582:	ee2a 7a00 	vmul.f32	s14, s20, s0
    4586:	4b73      	ldr	r3, [pc, #460]	; (4754 <_Min_Heap_Size+0x754>)
    4588:	443b      	add	r3, r7
    458a:	edd3 7a00 	vldr	s15, [r3]
    458e:	ee37 7a27 	vadd.f32	s14, s14, s15
    4592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4596:	eec6 7a87 	vdiv.f32	s15, s13, s14
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    459a:	ee67 7a89 	vmul.f32	s15, s15, s18
    459e:	ee2b 7a2a 	vmul.f32	s14, s22, s21
    45a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    45a6:	e5d9      	b.n	415c <_Min_Heap_Size+0x15c>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    45a8:	f105 0218 	add.w	r2, r5, #24
    45ac:	0097      	lsls	r7, r2, #2
    45ae:	4b68      	ldr	r3, [pc, #416]	; (4750 <_Min_Heap_Size+0x750>)
    45b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    45b4:	edd3 aa00 	vldr	s21, [r3]
    45b8:	4b62      	ldr	r3, [pc, #392]	; (4744 <_Min_Heap_Size+0x744>)
    45ba:	ed93 1a04 	vldr	s2, [r3, #16]
    45be:	eef0 0a68 	vmov.f32	s1, s17
    45c2:	ed93 0a03 	vldr	s0, [r3, #12]
    45c6:	f002 fabb 	bl	6b40 <LEAF_clip>
    45ca:	ee6a 7a80 	vmul.f32	s15, s21, s0
    45ce:	4b61      	ldr	r3, [pc, #388]	; (4754 <_Min_Heap_Size+0x754>)
    45d0:	443b      	add	r3, r7
    45d2:	ed93 7a00 	vldr	s14, [r3]
    45d6:	ee77 7a87 	vadd.f32	s15, s15, s14
    45da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    45de:	eec7 aa27 	vdiv.f32	s21, s14, s15
    45e2:	e7b6      	b.n	4552 <_Min_Heap_Size+0x552>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    45e4:	00af      	lsls	r7, r5, #2
    45e6:	4b5a      	ldr	r3, [pc, #360]	; (4750 <_Min_Heap_Size+0x750>)
    45e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    45ec:	ed93 aa00 	vldr	s20, [r3]
    45f0:	4b54      	ldr	r3, [pc, #336]	; (4744 <_Min_Heap_Size+0x744>)
    45f2:	ed93 1a01 	vldr	s2, [r3, #4]
    45f6:	eef0 0a68 	vmov.f32	s1, s17
    45fa:	ed93 0a00 	vldr	s0, [r3]
    45fe:	f002 fa9f 	bl	6b40 <LEAF_clip>
    4602:	ee2a 7a00 	vmul.f32	s14, s20, s0
    4606:	4b53      	ldr	r3, [pc, #332]	; (4754 <_Min_Heap_Size+0x754>)
    4608:	443b      	add	r3, r7
    460a:	edd3 7a00 	vldr	s15, [r3]
    460e:	ee37 7a27 	vadd.f32	s14, s14, s15
    4612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4616:	eec6 7a87 	vdiv.f32	s15, s13, s14
    461a:	e7be      	b.n	459a <_Min_Heap_Size+0x59a>
						tADSRT_off(&envs[v][i]);
    461c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    4620:	4b4d      	ldr	r3, [pc, #308]	; (4758 <_Min_Heap_Size+0x758>)
    4622:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4626:	f003 f937 	bl	7898 <__tADSRT_off_veneer>
					for (int v = 0; v < NUM_ENV; v++)
    462a:	3501      	adds	r5, #1
    462c:	2d03      	cmp	r5, #3
    462e:	ddf5      	ble.n	461c <_Min_Heap_Size+0x61c>
    4630:	f7ff bba9 	b.w	3d86 <audioFrame+0x3c6>
    4634:	2500      	movs	r5, #0
    4636:	e7f9      	b.n	462c <_Min_Heap_Size+0x62c>
					lsDecay[i] = 0;
    4638:	4b48      	ldr	r3, [pc, #288]	; (475c <_Min_Heap_Size+0x75c>)
    463a:	2200      	movs	r2, #0
    463c:	551a      	strb	r2, [r3, r4]
    463e:	f7ff bba2 	b.w	3d86 <audioFrame+0x3c6>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    4642:	00a7      	lsls	r7, r4, #2
    4644:	4d46      	ldr	r5, [pc, #280]	; (4760 <_Min_Heap_Size+0x760>)
    4646:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    464a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 4764 <_Min_Heap_Size+0x764>
    464e:	4628      	mov	r0, r5
    4650:	f003 f80a 	bl	7668 <__tLivingString2_setTargetLev_veneer>
					tLivingString2_setLevMode(&strings[i], 0);
    4654:	2100      	movs	r1, #0
    4656:	4628      	mov	r0, r5
    4658:	f003 f8ca 	bl	77f0 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setDecay(&strings[i], 0.2f);
    465c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 4768 <_Min_Heap_Size+0x768>
    4660:	4628      	mov	r0, r5
    4662:	f002 fff5 	bl	7650 <__tLivingString2_setDecay_veneer>
					tADSRT_off(&fenvelopes[i]);
    4666:	4841      	ldr	r0, [pc, #260]	; (476c <_Min_Heap_Size+0x76c>)
    4668:	4438      	add	r0, r7
    466a:	f003 f915 	bl	7898 <__tADSRT_off_veneer>
    466e:	f7ff bb8a 	b.w	3d86 <audioFrame+0x3c6>
						tADSRT_off(&additiveEnv[i][j]);
    4672:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    4676:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    467a:	483d      	ldr	r0, [pc, #244]	; (4770 <_Min_Heap_Size+0x770>)
    467c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4680:	f003 f90a 	bl	7898 <__tADSRT_off_veneer>
					for (int j = 0; j < NUM_OVERTONES; j++)
    4684:	3501      	adds	r5, #1
    4686:	2d0b      	cmp	r5, #11
    4688:	ddf3      	ble.n	4672 <_Min_Heap_Size+0x672>
					tADSRT_off(&fenvelopes[i]);
    468a:	4838      	ldr	r0, [pc, #224]	; (476c <_Min_Heap_Size+0x76c>)
    468c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4690:	f003 f902 	bl	7898 <__tADSRT_off_veneer>
    4694:	f7ff bb77 	b.w	3d86 <audioFrame+0x3c6>
		for (int i = 0; i < numStringsThisBoard; i++)
    4698:	2400      	movs	r4, #0
    469a:	f7ff bb7b 	b.w	3d94 <audioFrame+0x3d4>
		newPluck = 0;
    469e:	4b35      	ldr	r3, [pc, #212]	; (4774 <_Min_Heap_Size+0x774>)
    46a0:	2200      	movs	r2, #0
    46a2:	601a      	str	r2, [r3, #0]
    46a4:	f7ff b9a7 	b.w	39f6 <audioFrame+0x36>
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    46a8:	2400      	movs	r4, #0
    46aa:	2c0f      	cmp	r4, #15
    46ac:	f300 816f 	bgt.w	498e <_Min_Heap_Size+0x98e>
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    46b0:	f7fd f866 	bl	1780 <audioTickString>
    46b4:	eddf 7a30 	vldr	s15, [pc, #192]	; 4778 <_Min_Heap_Size+0x778>
    46b8:	ee20 0a27 	vmul.f32	s0, s0, s15
    46bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
				audioOutBuffer[buffer_offset + i] = current_sample;
    46c0:	1931      	adds	r1, r6, r4
    46c2:	4a2e      	ldr	r2, [pc, #184]	; (477c <_Min_Heap_Size+0x77c>)
    46c4:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    46c8:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    46cc:	3101      	adds	r1, #1
    46ce:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    46d2:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    46d6:	3402      	adds	r4, #2
    46d8:	e7e7      	b.n	46aa <_Min_Heap_Size+0x6aa>
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    46da:	f7fd f971 	bl	19c0 <audioTickString2>
    46de:	eddf 7a26 	vldr	s15, [pc, #152]	; 4778 <_Min_Heap_Size+0x778>
    46e2:	ee20 0a27 	vmul.f32	s0, s0, s15
    46e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
				audioOutBuffer[buffer_offset + i] = current_sample;
    46ea:	1931      	adds	r1, r6, r4
    46ec:	4a23      	ldr	r2, [pc, #140]	; (477c <_Min_Heap_Size+0x77c>)
    46ee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    46f2:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    46f6:	3101      	adds	r1, #1
    46f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    46fc:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4700:	3402      	adds	r4, #2
    4702:	2c0f      	cmp	r4, #15
    4704:	dde9      	ble.n	46da <_Min_Heap_Size+0x6da>
    4706:	e142      	b.n	498e <_Min_Heap_Size+0x98e>
    4708:	2400      	movs	r4, #0
    470a:	e7fa      	b.n	4702 <_Min_Heap_Size+0x702>
						sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    470c:	1d22      	adds	r2, r4, #4
    470e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    4712:	4a1b      	ldr	r2, [pc, #108]	; (4780 <_Min_Heap_Size+0x780>)
    4714:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4718:	ed82 0a00 	vstr	s0, [r2]
					for (int v = 0; v < numStringsThisBoard; v++)
    471c:	3301      	adds	r3, #1
    471e:	4a19      	ldr	r2, [pc, #100]	; (4784 <_Min_Heap_Size+0x784>)
    4720:	7812      	ldrb	r2, [r2, #0]
    4722:	429a      	cmp	r2, r3
    4724:	dcf2      	bgt.n	470c <_Min_Heap_Size+0x70c>
				for (int i = 0; i < 12; i++)
    4726:	3401      	adds	r4, #1
    4728:	2c0b      	cmp	r4, #11
    472a:	dc31      	bgt.n	4790 <_Min_Heap_Size+0x790>
					knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    472c:	00a5      	lsls	r5, r4, #2
    472e:	4816      	ldr	r0, [pc, #88]	; (4788 <_Min_Heap_Size+0x788>)
    4730:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4734:	f002 f944 	bl	69c0 <tExpSmooth_tick>
    4738:	4b14      	ldr	r3, [pc, #80]	; (478c <_Min_Heap_Size+0x78c>)
    473a:	442b      	add	r3, r5
    473c:	ed83 0a00 	vstr	s0, [r3]
					for (int v = 0; v < numStringsThisBoard; v++)
    4740:	2300      	movs	r3, #0
    4742:	e7ec      	b.n	471e <_Min_Heap_Size+0x71e>
    4744:	20000340 	.word	0x20000340
    4748:	3ffeb852 	.word	0x3ffeb852
    474c:	20000394 	.word	0x20000394
    4750:	20000c94 	.word	0x20000c94
    4754:	20000db4 	.word	0x20000db4
    4758:	20005160 	.word	0x20005160
    475c:	200054f0 	.word	0x200054f0
    4760:	2001497c 	.word	0x2001497c
    4764:	00000000 	.word	0x00000000
    4768:	3e4ccccd 	.word	0x3e4ccccd
    476c:	20005180 	.word	0x20005180
    4770:	20000a64 	.word	0x20000a64
    4774:	20005644 	.word	0x20005644
    4778:	4b000000 	.word	0x4b000000
    477c:	30000000 	.word	0x30000000
    4780:	200147bc 	.word	0x200147bc
    4784:	20000052 	.word	0x20000052
    4788:	20005380 	.word	0x20005380
    478c:	2000530c 	.word	0x2000530c
				float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    4790:	4c8c      	ldr	r4, [pc, #560]	; (49c4 <_Min_Heap_Size+0x9c4>)
    4792:	4620      	mov	r0, r4
    4794:	f002 ff88 	bl	76a8 <__tNoise_tick_veneer>
    4798:	f8df 9294 	ldr.w	r9, [pc, #660]	; 4a30 <_Min_Heap_Size+0xa30>
    479c:	4648      	mov	r0, r9
    479e:	f002 ff9b 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    47a2:	eef0 8a40 	vmov.f32	s17, s0
				filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    47a6:	4620      	mov	r0, r4
    47a8:	f002 ff7e 	bl	76a8 <__tNoise_tick_veneer>
    47ac:	4c86      	ldr	r4, [pc, #536]	; (49c8 <_Min_Heap_Size+0x9c8>)
    47ae:	4620      	mov	r0, r4
    47b0:	f002 ff92 	bl	76d8 <__tVZFilter_tickEfficient_veneer>
    47b4:	ee78 8a80 	vadd.f32	s17, s17, s0
				tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    47b8:	4d84      	ldr	r5, [pc, #528]	; (49cc <_Min_Heap_Size+0x9cc>)
    47ba:	ed95 0a00 	vldr	s0, [r5]
    47be:	ed9f 8a84 	vldr	s16, [pc, #528]	; 49d0 <_Min_Heap_Size+0x9d0>
    47c2:	ee20 0a08 	vmul.f32	s0, s0, s16
    47c6:	f003 f837 	bl	7838 <__faster_mtof_veneer>
    47ca:	4648      	mov	r0, r9
    47cc:	f002 ff14 	bl	75f8 <__tVZFilter_setFreq_veneer>
				tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[1] * 128.0f));
    47d0:	ed95 0a01 	vldr	s0, [r5, #4]
    47d4:	ee20 0a08 	vmul.f32	s0, s0, s16
    47d8:	f003 f82e 	bl	7838 <__faster_mtof_veneer>
    47dc:	4620      	mov	r0, r4
    47de:	f002 ff0b 	bl	75f8 <__tVZFilter_setFreq_veneer>
				float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    47e2:	487c      	ldr	r0, [pc, #496]	; (49d4 <_Min_Heap_Size+0x9d4>)
    47e4:	f002 f8ec 	bl	69c0 <tExpSmooth_tick>
    47e8:	eeb0 9a40 	vmov.f32	s18, s0
				for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    47ec:	2500      	movs	r5, #0
				float tempSamp = 0.0f;
    47ee:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 49d8 <_Min_Heap_Size+0x9d8>
				for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    47f2:	e047      	b.n	4884 <_Min_Heap_Size+0x884>
				for (int i = 0; i < 12; i++)
    47f4:	464c      	mov	r4, r9
					for (int j = 0; j < NUM_OVERTONES; j++)
    47f6:	2c0b      	cmp	r4, #11
    47f8:	dc43      	bgt.n	4882 <_Min_Heap_Size+0x882>
						float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    47fa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    47fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    4802:	4876      	ldr	r0, [pc, #472]	; (49dc <_Min_Heap_Size+0x9dc>)
    4804:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4808:	f003 f82a 	bl	7860 <__tADSRT_tickNoInterp_veneer>
    480c:	eef0 9a40 	vmov.f32	s19, s0
						float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    4810:	4b73      	ldr	r3, [pc, #460]	; (49e0 <_Min_Heap_Size+0x9e0>)
    4812:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4816:	ed93 7a00 	vldr	s14, [r3]
    481a:	f104 0901 	add.w	r9, r4, #1
    481e:	ee07 9a90 	vmov	s15, r9
    4822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4826:	ee67 7a87 	vmul.f32	s15, s15, s14
    482a:	4b68      	ldr	r3, [pc, #416]	; (49cc <_Min_Heap_Size+0x9cc>)
    482c:	ed93 7a04 	vldr	s14, [r3, #16]
    4830:	eddf 6a6c 	vldr	s13, [pc, #432]	; 49e4 <_Min_Heap_Size+0x9e4>
    4834:	ee67 6a26 	vmul.f32	s13, s14, s13
    4838:	ee07 4a10 	vmov	s14, r4
    483c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    4840:	ee27 7a26 	vmul.f32	s14, s14, s13
    4844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4848:	ee37 7a26 	vadd.f32	s14, s14, s13
    484c:	ee27 0a87 	vmul.f32	s0, s15, s14
						if (tempFreq < 18000.0f)
    4850:	eddf 7a65 	vldr	s15, [pc, #404]	; 49e8 <_Min_Heap_Size+0x9e8>
    4854:	eeb4 0ae7 	vcmpe.f32	s0, s15
    4858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    485c:	d5ca      	bpl.n	47f4 <_Min_Heap_Size+0x7f4>
							tCycle_setFreq(&additive[i][j], tempFreq);
    485e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    4862:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    4866:	4c61      	ldr	r4, [pc, #388]	; (49ec <_Min_Heap_Size+0x9ec>)
    4868:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    486c:	4620      	mov	r0, r4
    486e:	f002 ffcf 	bl	7810 <__tCycle_setFreq_veneer>
							tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    4872:	4620      	mov	r0, r4
    4874:	f003 f800 	bl	7878 <__tCycle_tick_veneer>
    4878:	ee20 0a29 	vmul.f32	s0, s0, s19
    487c:	ee38 8a00 	vadd.f32	s16, s16, s0
    4880:	e7b8      	b.n	47f4 <_Min_Heap_Size+0x7f4>
				for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    4882:	3501      	adds	r5, #1
    4884:	2d01      	cmp	r5, #1
    4886:	dc26      	bgt.n	48d6 <_Min_Heap_Size+0x8d6>
					float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    4888:	00ac      	lsls	r4, r5, #2
    488a:	4859      	ldr	r0, [pc, #356]	; (49f0 <_Min_Heap_Size+0x9f0>)
    488c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4890:	f002 ff5a 	bl	7748 <__tADSRT_tick_veneer>
					tempSamp += filtNoise * noiseEnv * knobScaled[7];
    4894:	ee68 7a80 	vmul.f32	s15, s17, s0
    4898:	4b4c      	ldr	r3, [pc, #304]	; (49cc <_Min_Heap_Size+0x9cc>)
    489a:	ed93 7a07 	vldr	s14, [r3, #28]
    489e:	ee67 7a87 	vmul.f32	s15, s15, s14
    48a2:	ee38 8a27 	vadd.f32	s16, s16, s15
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]) * invMapping[i];
    48a6:	4b53      	ldr	r3, [pc, #332]	; (49f4 <_Min_Heap_Size+0x9f4>)
    48a8:	4423      	add	r3, r4
    48aa:	ed93 0a00 	vldr	s0, [r3]
    48ae:	4b52      	ldr	r3, [pc, #328]	; (49f8 <_Min_Heap_Size+0x9f8>)
    48b0:	4423      	add	r3, r4
    48b2:	edd3 7a00 	vldr	s15, [r3]
    48b6:	ee30 0a27 	vadd.f32	s0, s0, s15
    48ba:	f002 ff29 	bl	7710 <__mtof_veneer>
    48be:	4b4f      	ldr	r3, [pc, #316]	; (49fc <_Min_Heap_Size+0x9fc>)
    48c0:	4423      	add	r3, r4
    48c2:	edd3 7a00 	vldr	s15, [r3]
    48c6:	ee20 0a27 	vmul.f32	s0, s0, s15
    48ca:	4b45      	ldr	r3, [pc, #276]	; (49e0 <_Min_Heap_Size+0x9e0>)
    48cc:	441c      	add	r4, r3
    48ce:	ed84 0a00 	vstr	s0, [r4]
					for (int j = 0; j < NUM_OVERTONES; j++)
    48d2:	2400      	movs	r4, #0
    48d4:	e78f      	b.n	47f6 <_Min_Heap_Size+0x7f6>
				float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    48d6:	eddf 0a4a 	vldr	s1, [pc, #296]	; 4a00 <_Min_Heap_Size+0xa00>
    48da:	ee69 0a20 	vmul.f32	s1, s18, s1
    48de:	ed9f 0a49 	vldr	s0, [pc, #292]	; 4a04 <_Min_Heap_Size+0xa04>
    48e2:	ed9f 1a49 	vldr	s2, [pc, #292]	; 4a08 <_Min_Heap_Size+0xa08>
    48e6:	ee70 0a80 	vadd.f32	s1, s1, s0
    48ea:	f002 f929 	bl	6b40 <LEAF_clip>
				int volIdxInt = (int) volIdx;
    48ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    48f2:	ee17 3a90 	vmov	r3, s15
				float alpha = volIdx-volIdxInt;
    48f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    48fa:	ee70 7a67 	vsub.f32	s15, s0, s15
				int volIdxIntPlus = (volIdxInt + 1) & 127;
    48fe:	1c5a      	adds	r2, r3, #1
    4900:	f002 017f 	and.w	r1, r2, #127	; 0x7f
				float omAlpha = 1.0f - alpha;
    4904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4908:	ee36 7ae7 	vsub.f32	s14, s13, s15
				float outVol = volumeAmps128[volIdxInt] * omAlpha;
    490c:	4a3f      	ldr	r2, [pc, #252]	; (4a0c <_Min_Heap_Size+0xa0c>)
    490e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4912:	edd3 6a00 	vldr	s13, [r3]
    4916:	ee66 6a87 	vmul.f32	s13, s13, s14
				outVol += volumeAmps128[volIdxIntPlus] * alpha;
    491a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    491e:	ed92 7a00 	vldr	s14, [r2]
    4922:	ee67 7a27 	vmul.f32	s15, s14, s15
    4926:	ee77 7aa6 	vadd.f32	s15, s15, s13
				tempSamp *= outVol;
    492a:	ee28 8a27 	vmul.f32	s16, s16, s15
				tempSamp *= 0.4f;
    492e:	eddf 7a38 	vldr	s15, [pc, #224]	; 4a10 <_Min_Heap_Size+0xa10>
    4932:	ee28 8a27 	vmul.f32	s16, s16, s15
				current_sample = (int32_t)(tempSamp * TWO_TO_23);
    4936:	eef0 7a48 	vmov.f32	s15, s16
    493a:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
				audioOutBuffer[buffer_offset + i] = current_sample;
    493e:	19f1      	adds	r1, r6, r7
    4940:	4a34      	ldr	r2, [pc, #208]	; (4a14 <_Min_Heap_Size+0xa14>)
    4942:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    4946:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    494a:	3101      	adds	r1, #1
    494c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4950:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4954:	3702      	adds	r7, #2
    4956:	2f0f      	cmp	r7, #15
    4958:	dc19      	bgt.n	498e <_Min_Heap_Size+0x98e>
				for (int i = 0; i < 12; i++)
    495a:	2400      	movs	r4, #0
    495c:	e6e4      	b.n	4728 <_Min_Heap_Size+0x728>
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    495e:	2700      	movs	r7, #0
    4960:	e7f9      	b.n	4956 <_Min_Heap_Size+0x956>
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    4962:	f7fe fdad 	bl	34c0 <audioTickL>
    4966:	eddf 7a2c 	vldr	s15, [pc, #176]	; 4a18 <_Min_Heap_Size+0xa18>
    496a:	ee20 0a27 	vmul.f32	s0, s0, s15
    496e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
				audioOutBuffer[buffer_offset + i] = current_sample;
    4972:	1931      	adds	r1, r6, r4
    4974:	4a27      	ldr	r2, [pc, #156]	; (4a14 <_Min_Heap_Size+0xa14>)
    4976:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    497a:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    497e:	3101      	adds	r1, #1
    4980:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4984:	edc2 7a10 	vstr	s15, [r2, #64]	; 0x40
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4988:	3402      	adds	r4, #2
    498a:	2c0f      	cmp	r4, #15
    498c:	dde9      	ble.n	4962 <_Min_Heap_Size+0x962>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    498e:	4b23      	ldr	r3, [pc, #140]	; (4a1c <_Min_Heap_Size+0xa1c>)
    4990:	685b      	ldr	r3, [r3, #4]
    4992:	eba3 0308 	sub.w	r3, r3, r8
    4996:	4a22      	ldr	r2, [pc, #136]	; (4a20 <_Min_Heap_Size+0xa20>)
    4998:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    499a:	ee07 3a90 	vmov	s15, r3
    499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    49a2:	4b20      	ldr	r3, [pc, #128]	; (4a24 <_Min_Heap_Size+0xa24>)
    49a4:	ed93 7a00 	vldr	s14, [r3]
    49a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    49ac:	4b1e      	ldr	r3, [pc, #120]	; (4a28 <_Min_Heap_Size+0xa28>)
    49ae:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    49b2:	2200      	movs	r2, #0
    49b4:	2108      	movs	r1, #8
    49b6:	481d      	ldr	r0, [pc, #116]	; (4a2c <_Min_Heap_Size+0xa2c>)
    49b8:	f002 fe62 	bl	7680 <__HAL_GPIO_WritePin_veneer>
}
    49bc:	ecbd 8b08 	vpop	{d8-d11}
    49c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49c4:	20005638 	.word	0x20005638
    49c8:	20005654 	.word	0x20005654
    49cc:	2000530c 	.word	0x2000530c
    49d0:	43000000 	.word	0x43000000
    49d4:	20014a0c 	.word	0x20014a0c
    49d8:	00000000 	.word	0x00000000
    49dc:	20000a64 	.word	0x20000a64
    49e0:	200148ec 	.word	0x200148ec
    49e4:	3b449ba6 	.word	0x3b449ba6
    49e8:	468ca000 	.word	0x468ca000
    49ec:	200009d4 	.word	0x200009d4
    49f0:	20005180 	.word	0x20005180
    49f4:	2001494c 	.word	0x2001494c
    49f8:	20014954 	.word	0x20014954
    49fc:	20005300 	.word	0x20005300
    4a00:	42a00000 	.word	0x42a00000
    4a04:	423c0000 	.word	0x423c0000
    4a08:	42fe0000 	.word	0x42fe0000
    4a0c:	20000544 	.word	0x20000544
    4a10:	3ecccccd 	.word	0x3ecccccd
    4a14:	30000000 	.word	0x30000000
    4a18:	4b000000 	.word	0x4b000000
    4a1c:	e0001000 	.word	0xe0001000
    4a20:	20014998 	.word	0x20014998
    4a24:	20000008 	.word	0x20000008
    4a28:	200051c4 	.word	0x200051c4
    4a2c:	58020000 	.word	0x58020000
    4a30:	20005650 	.word	0x20005650
    4a34:	f3af 8000 	nop.w
    4a38:	f3af 8000 	nop.w
    4a3c:	f3af 8000 	nop.w

00004a40 <HAL_SPI_RxCpltCallback>:



void __ATTR_ITCMRAM HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    4a40:	b508      	push	{r3, lr}
	interrupted = 1;
    4a42:	2201      	movs	r2, #1
    4a44:	4b20      	ldr	r3, [pc, #128]	; (4ac8 <HAL_SPI_RxCpltCallback+0x88>)
    4a46:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    4a48:	2102      	movs	r1, #2
    4a4a:	4820      	ldr	r0, [pc, #128]	; (4acc <HAL_SPI_RxCpltCallback+0x8c>)
    4a4c:	f002 fe18 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4a50:	4b1f      	ldr	r3, [pc, #124]	; (4ad0 <HAL_SPI_RxCpltCallback+0x90>)
    4a52:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4a56:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4a5a:	2254      	movs	r2, #84	; 0x54
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4a5c:	491d      	ldr	r1, [pc, #116]	; (4ad4 <HAL_SPI_RxCpltCallback+0x94>)
    4a5e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4a62:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4a64:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    4a66:	2a00      	cmp	r2, #0
    4a68:	dcf8      	bgt.n	4a5c <HAL_SPI_RxCpltCallback+0x1c>
    4a6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a6e:	f3bf 8f6f 	isb	sy
	if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    4a72:	4b17      	ldr	r3, [pc, #92]	; (4ad0 <HAL_SPI_RxCpltCallback+0x90>)
    4a74:	7e9b      	ldrb	r3, [r3, #26]
    4a76:	2bfe      	cmp	r3, #254	; 0xfe
    4a78:	d008      	beq.n	4a8c <HAL_SPI_RxCpltCallback+0x4c>
		{

			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
		}
	}
	newPluck = 1;
    4a7a:	4b17      	ldr	r3, [pc, #92]	; (4ad8 <HAL_SPI_RxCpltCallback+0x98>)
    4a7c:	2201      	movs	r2, #1
    4a7e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4a80:	2200      	movs	r2, #0
    4a82:	2102      	movs	r1, #2
    4a84:	4811      	ldr	r0, [pc, #68]	; (4acc <HAL_SPI_RxCpltCallback+0x8c>)
    4a86:	f002 fdfb 	bl	7680 <__HAL_GPIO_WritePin_veneer>
}
    4a8a:	bd08      	pop	{r3, pc}
	if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    4a8c:	4b10      	ldr	r3, [pc, #64]	; (4ad0 <HAL_SPI_RxCpltCallback+0x90>)
    4a8e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    4a92:	2bfd      	cmp	r3, #253	; 0xfd
    4a94:	d1f1      	bne.n	4a7a <HAL_SPI_RxCpltCallback+0x3a>
		for (int i = 0; i < numStringsThisBoard; i++)
    4a96:	2200      	movs	r2, #0
    4a98:	4b10      	ldr	r3, [pc, #64]	; (4adc <HAL_SPI_RxCpltCallback+0x9c>)
    4a9a:	781b      	ldrb	r3, [r3, #0]
    4a9c:	4293      	cmp	r3, r2
    4a9e:	ddec      	ble.n	4a7a <HAL_SPI_RxCpltCallback+0x3a>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4aa0:	480f      	ldr	r0, [pc, #60]	; (4ae0 <HAL_SPI_RxCpltCallback+0xa0>)
    4aa2:	6803      	ldr	r3, [r0, #0]
    4aa4:	4413      	add	r3, r2
    4aa6:	005b      	lsls	r3, r3, #1
    4aa8:	331b      	adds	r3, #27
    4aaa:	4909      	ldr	r1, [pc, #36]	; (4ad0 <HAL_SPI_RxCpltCallback+0x90>)
    4aac:	f811 c003 	ldrb.w	ip, [r1, r3]
    4ab0:	6803      	ldr	r3, [r0, #0]
    4ab2:	4413      	add	r3, r2
    4ab4:	330e      	adds	r3, #14
    4ab6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
    4aba:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    4abe:	4909      	ldr	r1, [pc, #36]	; (4ae4 <HAL_SPI_RxCpltCallback+0xa4>)
    4ac0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ac4:	3201      	adds	r2, #1
    4ac6:	e7e7      	b.n	4a98 <HAL_SPI_RxCpltCallback+0x58>
    4ac8:	200052dc 	.word	0x200052dc
    4acc:	58020800 	.word	0x58020800
    4ad0:	38000000 	.word	0x38000000
    4ad4:	e000ed00 	.word	0xe000ed00
    4ad8:	20005644 	.word	0x20005644
    4adc:	20000052 	.word	0x20000052
    4ae0:	200051c0 	.word	0x200051c0
    4ae4:	2001491c 	.word	0x2001491c
    4ae8:	f3af 8000 	nop.w
    4aec:	f3af 8000 	nop.w
    4af0:	f3af 8000 	nop.w
    4af4:	f3af 8000 	nop.w
    4af8:	f3af 8000 	nop.w
    4afc:	f3af 8000 	nop.w

00004b00 <HAL_SPI_RxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    4b00:	b508      	push	{r3, lr}
	interrupted = 1;
    4b02:	4b21      	ldr	r3, [pc, #132]	; (4b88 <HAL_SPI_RxHalfCpltCallback+0x88>)
    4b04:	2201      	movs	r2, #1
    4b06:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4b08:	4b20      	ldr	r3, [pc, #128]	; (4b8c <HAL_SPI_RxHalfCpltCallback+0x8c>)
    4b0a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4b0e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4b12:	2254      	movs	r2, #84	; 0x54
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4b14:	491e      	ldr	r1, [pc, #120]	; (4b90 <HAL_SPI_RxHalfCpltCallback+0x90>)
    4b16:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4b1a:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4b1c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    4b1e:	2a00      	cmp	r2, #0
    4b20:	dcf8      	bgt.n	4b14 <HAL_SPI_RxHalfCpltCallback+0x14>
    4b22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b26:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    4b2a:	2201      	movs	r2, #1
    4b2c:	2102      	movs	r1, #2
    4b2e:	4819      	ldr	r0, [pc, #100]	; (4b94 <HAL_SPI_RxHalfCpltCallback+0x94>)
    4b30:	f002 fda6 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    4b34:	4b15      	ldr	r3, [pc, #84]	; (4b8c <HAL_SPI_RxHalfCpltCallback+0x8c>)
    4b36:	781b      	ldrb	r3, [r3, #0]
    4b38:	2bfe      	cmp	r3, #254	; 0xfe
    4b3a:	d008      	beq.n	4b4e <HAL_SPI_RxHalfCpltCallback+0x4e>
		{

			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
		}
	}
	newPluck = 1;
    4b3c:	4b16      	ldr	r3, [pc, #88]	; (4b98 <HAL_SPI_RxHalfCpltCallback+0x98>)
    4b3e:	2201      	movs	r2, #1
    4b40:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4b42:	2200      	movs	r2, #0
    4b44:	2102      	movs	r1, #2
    4b46:	4813      	ldr	r0, [pc, #76]	; (4b94 <HAL_SPI_RxHalfCpltCallback+0x94>)
    4b48:	f002 fd9a 	bl	7680 <__HAL_GPIO_WritePin_veneer>
}
    4b4c:	bd08      	pop	{r3, pc}
	if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    4b4e:	4b0f      	ldr	r3, [pc, #60]	; (4b8c <HAL_SPI_RxHalfCpltCallback+0x8c>)
    4b50:	7e5b      	ldrb	r3, [r3, #25]
    4b52:	2bfd      	cmp	r3, #253	; 0xfd
    4b54:	d1f2      	bne.n	4b3c <HAL_SPI_RxHalfCpltCallback+0x3c>
		for (int i = 0; i < numStringsThisBoard; i++)
    4b56:	2200      	movs	r2, #0
    4b58:	4b10      	ldr	r3, [pc, #64]	; (4b9c <HAL_SPI_RxHalfCpltCallback+0x9c>)
    4b5a:	781b      	ldrb	r3, [r3, #0]
    4b5c:	4293      	cmp	r3, r2
    4b5e:	dded      	ble.n	4b3c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4b60:	480f      	ldr	r0, [pc, #60]	; (4ba0 <HAL_SPI_RxHalfCpltCallback+0xa0>)
    4b62:	6803      	ldr	r3, [r0, #0]
    4b64:	4413      	add	r3, r2
    4b66:	005b      	lsls	r3, r3, #1
    4b68:	3301      	adds	r3, #1
    4b6a:	4908      	ldr	r1, [pc, #32]	; (4b8c <HAL_SPI_RxHalfCpltCallback+0x8c>)
    4b6c:	f811 c003 	ldrb.w	ip, [r1, r3]
    4b70:	6803      	ldr	r3, [r0, #0]
    4b72:	4413      	add	r3, r2
    4b74:	3301      	adds	r3, #1
    4b76:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
    4b7a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    4b7e:	4909      	ldr	r1, [pc, #36]	; (4ba4 <HAL_SPI_RxHalfCpltCallback+0xa4>)
    4b80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
    4b84:	3201      	adds	r2, #1
    4b86:	e7e7      	b.n	4b58 <HAL_SPI_RxHalfCpltCallback+0x58>
    4b88:	200052dc 	.word	0x200052dc
    4b8c:	38000000 	.word	0x38000000
    4b90:	e000ed00 	.word	0xe000ed00
    4b94:	58020800 	.word	0x58020800
    4b98:	20005644 	.word	0x20005644
    4b9c:	20000052 	.word	0x20000052
    4ba0:	200051c0 	.word	0x200051c0
    4ba4:	2001491c 	.word	0x2001491c
    4ba8:	f3af 8000 	nop.w
    4bac:	f3af 8000 	nop.w
    4bb0:	f3af 8000 	nop.w
    4bb4:	f3af 8000 	nop.w
    4bb8:	f3af 8000 	nop.w
    4bbc:	f3af 8000 	nop.w

00004bc0 <HAL_SPI_TxRxCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
    4bc0:	b510      	push	{r4, lr}
	interrupted = 1;
    4bc2:	4b1e      	ldr	r3, [pc, #120]	; (4c3c <HAL_SPI_TxRxCpltCallback+0x7c>)
    4bc4:	2201      	movs	r2, #1
    4bc6:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4bc8:	4c1d      	ldr	r4, [pc, #116]	; (4c40 <HAL_SPI_TxRxCpltCallback+0x80>)
    4bca:	f024 041f 	bic.w	r4, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4bce:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    4bd2:	4622      	mov	r2, r4
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4bd4:	2360      	movs	r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4bd6:	491b      	ldr	r1, [pc, #108]	; (4c44 <HAL_SPI_TxRxCpltCallback+0x84>)
    4bd8:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4bdc:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4bde:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    4be0:	2b00      	cmp	r3, #0
    4be2:	dcf8      	bgt.n	4bd6 <HAL_SPI_TxRxCpltCallback+0x16>
    4be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4be8:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    4bec:	2201      	movs	r2, #1
    4bee:	2110      	movs	r1, #16
    4bf0:	4815      	ldr	r0, [pc, #84]	; (4c48 <HAL_SPI_TxRxCpltCallback+0x88>)
    4bf2:	f002 fd45 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    4bf6:	4b12      	ldr	r3, [pc, #72]	; (4c40 <HAL_SPI_TxRxCpltCallback+0x80>)
    4bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    4bfc:	2bfe      	cmp	r3, #254	; 0xfe
    4bfe:	d013      	beq.n	4c28 <HAL_SPI_TxRxCpltCallback+0x68>
  __ASM volatile ("dsb 0xF":::"memory");
    4c00:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4c04:	2360      	movs	r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c06:	4a0f      	ldr	r2, [pc, #60]	; (4c44 <HAL_SPI_TxRxCpltCallback+0x84>)
    4c08:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4c0c:	3420      	adds	r4, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4c0e:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    4c10:	2b00      	cmp	r3, #0
    4c12:	dcf8      	bgt.n	4c06 <HAL_SPI_TxRxCpltCallback+0x46>
    4c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c18:	f3bf 8f6f 	isb	sy
	{
		handleSPI(LEVER_BUFFER_SIZE);
	}
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4c1c:	2200      	movs	r2, #0
    4c1e:	2110      	movs	r1, #16
    4c20:	4809      	ldr	r0, [pc, #36]	; (4c48 <HAL_SPI_TxRxCpltCallback+0x88>)
    4c22:	f002 fd2d 	bl	7680 <__HAL_GPIO_WritePin_veneer>
}
    4c26:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    4c28:	4b05      	ldr	r3, [pc, #20]	; (4c40 <HAL_SPI_TxRxCpltCallback+0x80>)
    4c2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    4c2e:	2bfd      	cmp	r3, #253	; 0xfd
    4c30:	d1e6      	bne.n	4c00 <HAL_SPI_TxRxCpltCallback+0x40>
		handleSPI(LEVER_BUFFER_SIZE);
    4c32:	2020      	movs	r0, #32
    4c34:	f000 fa84 	bl	5140 <handleSPI>
    4c38:	e7e2      	b.n	4c00 <HAL_SPI_TxRxCpltCallback+0x40>
    4c3a:	bf00      	nop
    4c3c:	200052dc 	.word	0x200052dc
    4c40:	30000140 	.word	0x30000140
    4c44:	e000ed00 	.word	0xe000ed00
    4c48:	58020800 	.word	0x58020800
    4c4c:	f3af 8000 	nop.w
    4c50:	f3af 8000 	nop.w
    4c54:	f3af 8000 	nop.w
    4c58:	f3af 8000 	nop.w
    4c5c:	f3af 8000 	nop.w

00004c60 <HAL_SPI_TxRxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    4c60:	b510      	push	{r4, lr}
	interrupted = 1;
    4c62:	4b1d      	ldr	r3, [pc, #116]	; (4cd8 <HAL_SPI_TxRxHalfCpltCallback+0x78>)
    4c64:	2201      	movs	r2, #1
    4c66:	701a      	strb	r2, [r3, #0]
	//SCB_InvalidateDCache();
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4c68:	4c1c      	ldr	r4, [pc, #112]	; (4cdc <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
    4c6a:	f024 041f 	bic.w	r4, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4c6e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    4c72:	4622      	mov	r2, r4
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4c74:	2360      	movs	r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c76:	491a      	ldr	r1, [pc, #104]	; (4ce0 <HAL_SPI_TxRxHalfCpltCallback+0x80>)
    4c78:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4c7c:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4c7e:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    4c80:	2b00      	cmp	r3, #0
    4c82:	dcf8      	bgt.n	4c76 <HAL_SPI_TxRxHalfCpltCallback+0x16>
    4c84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c88:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    4c8c:	2201      	movs	r2, #1
    4c8e:	2110      	movs	r1, #16
    4c90:	4814      	ldr	r0, [pc, #80]	; (4ce4 <HAL_SPI_TxRxHalfCpltCallback+0x84>)
    4c92:	f002 fcf5 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    4c96:	4b11      	ldr	r3, [pc, #68]	; (4cdc <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
    4c98:	7f9b      	ldrb	r3, [r3, #30]
    4c9a:	2bfe      	cmp	r3, #254	; 0xfe
    4c9c:	d013      	beq.n	4cc6 <HAL_SPI_TxRxHalfCpltCallback+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
    4c9e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4ca2:	2360      	movs	r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4ca4:	4a0e      	ldr	r2, [pc, #56]	; (4ce0 <HAL_SPI_TxRxHalfCpltCallback+0x80>)
    4ca6:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4caa:	3420      	adds	r4, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4cac:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    4cae:	2b00      	cmp	r3, #0
    4cb0:	dcf8      	bgt.n	4ca4 <HAL_SPI_TxRxHalfCpltCallback+0x44>
    4cb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4cb6:	f3bf 8f6f 	isb	sy
	{
		handleSPI(0);
	}
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4cba:	2200      	movs	r2, #0
    4cbc:	2110      	movs	r1, #16
    4cbe:	4809      	ldr	r0, [pc, #36]	; (4ce4 <HAL_SPI_TxRxHalfCpltCallback+0x84>)
    4cc0:	f002 fcde 	bl	7680 <__HAL_GPIO_WritePin_veneer>
}
    4cc4:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    4cc6:	4b05      	ldr	r3, [pc, #20]	; (4cdc <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
    4cc8:	7fdb      	ldrb	r3, [r3, #31]
    4cca:	2bfd      	cmp	r3, #253	; 0xfd
    4ccc:	d1e7      	bne.n	4c9e <HAL_SPI_TxRxHalfCpltCallback+0x3e>
		handleSPI(0);
    4cce:	2000      	movs	r0, #0
    4cd0:	f000 fa36 	bl	5140 <handleSPI>
    4cd4:	e7e3      	b.n	4c9e <HAL_SPI_TxRxHalfCpltCallback+0x3e>
    4cd6:	bf00      	nop
    4cd8:	200052dc 	.word	0x200052dc
    4cdc:	30000140 	.word	0x30000140
    4ce0:	e000ed00 	.word	0xe000ed00
    4ce4:	58020800 	.word	0x58020800
    4ce8:	f3af 8000 	nop.w
    4cec:	f3af 8000 	nop.w
    4cf0:	f3af 8000 	nop.w
    4cf4:	f3af 8000 	nop.w
    4cf8:	f3af 8000 	nop.w
    4cfc:	f3af 8000 	nop.w

00004d00 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    4d00:	b508      	push	{r3, lr}
	if (!diskBusy)
    4d02:	4b0c      	ldr	r3, [pc, #48]	; (4d34 <HAL_SAI_TxCpltCallback+0x34>)
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	b18b      	cbz	r3, 4d2c <HAL_SAI_TxCpltCallback+0x2c>
		//SCB_InvalidateDCache();
	audioFrame(HALF_BUFFER_SIZE);
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4d08:	4b0b      	ldr	r3, [pc, #44]	; (4d38 <HAL_SAI_TxCpltCallback+0x38>)
    4d0a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4d0e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4d12:	2240      	movs	r2, #64	; 0x40
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4d14:	4909      	ldr	r1, [pc, #36]	; (4d3c <HAL_SAI_TxCpltCallback+0x3c>)
    4d16:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4d1a:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4d1c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    4d1e:	2a00      	cmp	r2, #0
    4d20:	dcf8      	bgt.n	4d14 <HAL_SAI_TxCpltCallback+0x14>
    4d22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d26:	f3bf 8f6f 	isb	sy
}
    4d2a:	bd08      	pop	{r3, pc}
	audioFrame(HALF_BUFFER_SIZE);
    4d2c:	2010      	movs	r0, #16
    4d2e:	f7fe fe47 	bl	39c0 <audioFrame>
    4d32:	e7e9      	b.n	4d08 <HAL_SAI_TxCpltCallback+0x8>
    4d34:	20014c44 	.word	0x20014c44
    4d38:	30000040 	.word	0x30000040
    4d3c:	e000ed00 	.word	0xe000ed00

00004d40 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    4d40:	b508      	push	{r3, lr}
	if (!diskBusy)
    4d42:	4b0c      	ldr	r3, [pc, #48]	; (4d74 <HAL_SAI_TxHalfCpltCallback+0x34>)
    4d44:	781b      	ldrb	r3, [r3, #0]
    4d46:	b18b      	cbz	r3, 4d6c <HAL_SAI_TxHalfCpltCallback+0x2c>
		//SCB_InvalidateDCache();
	audioFrame(0);
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4d48:	4b0b      	ldr	r3, [pc, #44]	; (4d78 <HAL_SAI_TxHalfCpltCallback+0x38>)
    4d4a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4d4e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4d52:	2240      	movs	r2, #64	; 0x40
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4d54:	4909      	ldr	r1, [pc, #36]	; (4d7c <HAL_SAI_TxHalfCpltCallback+0x3c>)
    4d56:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4d5a:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    4d5c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    4d5e:	2a00      	cmp	r2, #0
    4d60:	dcf8      	bgt.n	4d54 <HAL_SAI_TxHalfCpltCallback+0x14>
    4d62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d66:	f3bf 8f6f 	isb	sy
}
    4d6a:	bd08      	pop	{r3, pc}
	audioFrame(0);
    4d6c:	2000      	movs	r0, #0
    4d6e:	f7fe fe27 	bl	39c0 <audioFrame>
    4d72:	e7e9      	b.n	4d48 <HAL_SAI_TxHalfCpltCallback+0x8>
    4d74:	20014c44 	.word	0x20014c44
    4d78:	30000040 	.word	0x30000040
    4d7c:	e000ed00 	.word	0xe000ed00

00004d80 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop
	...

00004da0 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    4da0:	eddf 7a04 	vldr	s15, [pc, #16]	; 4db4 <scaleOscPitch+0x14>
    4da4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    4da8:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    4dac:	ee30 0a67 	vsub.f32	s0, s0, s15
    4db0:	4770      	bx	lr
    4db2:	bf00      	nop
    4db4:	42400000 	.word	0x42400000
    4db8:	f3af 8000 	nop.w
    4dbc:	f3af 8000 	nop.w

00004dc0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    4dc0:	eddf 7a04 	vldr	s15, [pc, #16]	; 4dd4 <scaleOscFine+0x14>
    4dc4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    4dc8:	eddf 7a03 	vldr	s15, [pc, #12]	; 4dd8 <scaleOscFine+0x18>
    4dcc:	ee30 0a67 	vsub.f32	s0, s0, s15
    4dd0:	4770      	bx	lr
    4dd2:	bf00      	nop
    4dd4:	43480000 	.word	0x43480000
    4dd8:	42c80000 	.word	0x42c80000
    4ddc:	f3af 8000 	nop.w

00004de0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    4de0:	eddf 7a04 	vldr	s15, [pc, #16]	; 4df4 <scaleOscFreq+0x14>
    4de4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    4de8:	eddf 7a03 	vldr	s15, [pc, #12]	; 4df8 <scaleOscFreq+0x18>
    4dec:	ee30 0a67 	vsub.f32	s0, s0, s15
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	457a0000 	.word	0x457a0000
    4df8:	44fa0000 	.word	0x44fa0000
    4dfc:	f3af 8000 	nop.w

00004e00 <scaleFilterCutoff>:
}
    4e00:	eddf 7a02 	vldr	s15, [pc, #8]	; 4e0c <scaleFilterCutoff+0xc>
    4e04:	ee20 0a27 	vmul.f32	s0, s0, s15
    4e08:	4770      	bx	lr
    4e0a:	bf00      	nop
    4e0c:	42fe0000 	.word	0x42fe0000
    4e10:	f3af 8000 	nop.w
    4e14:	f3af 8000 	nop.w
    4e18:	f3af 8000 	nop.w
    4e1c:	f3af 8000 	nop.w

00004e20 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    4e20:	eddf 7a04 	vldr	s15, [pc, #16]	; 4e34 <scaleFinalLowpass+0x14>
    4e24:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    4e28:	eddf 7a03 	vldr	s15, [pc, #12]	; 4e38 <scaleFinalLowpass+0x18>
    4e2c:	ee30 0a27 	vadd.f32	s0, s0, s15
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop
    4e34:	428c0000 	.word	0x428c0000
    4e38:	42680000 	.word	0x42680000
    4e3c:	f3af 8000 	nop.w

00004e40 <blankFunction>:
}
    4e40:	4770      	bx	lr
    4e42:	bf00      	nop
    4e44:	f3af 8000 	nop.w
    4e48:	f3af 8000 	nop.w
    4e4c:	f3af 8000 	nop.w
    4e50:	f3af 8000 	nop.w
    4e54:	f3af 8000 	nop.w
    4e58:	f3af 8000 	nop.w
    4e5c:	f3af 8000 	nop.w

00004e60 <scaleDefault>:
{
    4e60:	b508      	push	{r3, lr}
    4e62:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    4e66:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4e6a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 4e74 <scaleDefault+0x14>
    4e6e:	f001 fe67 	bl	6b40 <LEAF_clip>
}
    4e72:	bd08      	pop	{r3, pc}
    4e74:	00000000 	.word	0x00000000
    4e78:	f3af 8000 	nop.w
    4e7c:	f3af 8000 	nop.w

00004e80 <scaleTranspose>:
{
    4e80:	b508      	push	{r3, lr}
    4e82:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    4e86:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4e8a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 4ea4 <scaleTranspose+0x24>
    4e8e:	f001 fe57 	bl	6b40 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    4e92:	eddf 7a05 	vldr	s15, [pc, #20]	; 4ea8 <scaleTranspose+0x28>
    4e96:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    4e9a:	eddf 7a04 	vldr	s15, [pc, #16]	; 4eac <scaleTranspose+0x2c>
    4e9e:	ee30 0a67 	vsub.f32	s0, s0, s15
    4ea2:	bd08      	pop	{r3, pc}
    4ea4:	00000000 	.word	0x00000000
    4ea8:	42c00000 	.word	0x42c00000
    4eac:	42400000 	.word	0x42400000
    4eb0:	f3af 8000 	nop.w
    4eb4:	f3af 8000 	nop.w
    4eb8:	f3af 8000 	nop.w
    4ebc:	f3af 8000 	nop.w

00004ec0 <scalePitchBend>:
{
    4ec0:	b508      	push	{r3, lr}
    4ec2:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    4ec6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4eca:	ed9f 0a04 	vldr	s0, [pc, #16]	; 4edc <scalePitchBend+0x1c>
    4ece:	f001 fe37 	bl	6b40 <LEAF_clip>
}
    4ed2:	eddf 7a03 	vldr	s15, [pc, #12]	; 4ee0 <scalePitchBend+0x20>
    4ed6:	ee20 0a27 	vmul.f32	s0, s0, s15
    4eda:	bd08      	pop	{r3, pc}
    4edc:	00000000 	.word	0x00000000
    4ee0:	42400000 	.word	0x42400000
    4ee4:	f3af 8000 	nop.w
    4ee8:	f3af 8000 	nop.w
    4eec:	f3af 8000 	nop.w
    4ef0:	f3af 8000 	nop.w
    4ef4:	f3af 8000 	nop.w
    4ef8:	f3af 8000 	nop.w
    4efc:	f3af 8000 	nop.w

00004f00 <scaleFilterResonance>:
{
    4f00:	b510      	push	{r4, lr}
    4f02:	ed2d 8b02 	vpush	{d8}
    4f06:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    4f0a:	eddf 8a1e 	vldr	s17, [pc, #120]	; 4f84 <scaleFilterResonance+0x84>
    4f0e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4f12:	eeb0 0a68 	vmov.f32	s0, s17
    4f16:	f001 fe13 	bl	6b40 <LEAF_clip>
	input *= 2047.0f;
    4f1a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 4f88 <scaleFilterResonance+0x88>
    4f1e:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    4f22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4f26:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    4f2a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    4f2e:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4f32:	1c63      	adds	r3, r4, #1
    4f34:	ee00 3a90 	vmov	s1, r3
    4f38:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    4f3c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 4f8c <scaleFilterResonance+0x8c>
    4f40:	f001 fdfe 	bl	6b40 <LEAF_clip>
    4f44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4f48:	4b11      	ldr	r3, [pc, #68]	; (4f90 <scaleFilterResonance+0x90>)
    4f4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4f4e:	edd4 0a00 	vldr	s1, [r4]
    4f52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4f56:	ee77 7ac8 	vsub.f32	s15, s15, s16
    4f5a:	ee60 0aa7 	vmul.f32	s1, s1, s15
    4f5e:	ee10 2a10 	vmov	r2, s0
    4f62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4f66:	ed93 0a00 	vldr	s0, [r3]
    4f6a:	ee20 8a08 	vmul.f32	s16, s0, s16
    4f6e:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    4f72:	ee70 0a88 	vadd.f32	s1, s1, s16
    4f76:	eeb0 0a68 	vmov.f32	s0, s17
    4f7a:	f001 fde1 	bl	6b40 <LEAF_clip>
}
    4f7e:	ecbd 8b02 	vpop	{d8}
    4f82:	bd10      	pop	{r4, pc}
    4f84:	3dcccccd 	.word	0x3dcccccd
    4f88:	44ffe000 	.word	0x44ffe000
    4f8c:	00000000 	.word	0x00000000
    4f90:	2001acc8 	.word	0x2001acc8
    4f94:	f3af 8000 	nop.w
    4f98:	f3af 8000 	nop.w
    4f9c:	f3af 8000 	nop.w

00004fa0 <scaleEnvTimes>:
{
    4fa0:	b510      	push	{r4, lr}
    4fa2:	ed2d 8b02 	vpush	{d8}
    4fa6:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    4faa:	eddf 8a1b 	vldr	s17, [pc, #108]	; 5018 <scaleEnvTimes+0x78>
    4fae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4fb2:	eeb0 0a68 	vmov.f32	s0, s17
    4fb6:	f001 fdc3 	bl	6b40 <LEAF_clip>
	input *= 2047.0f;
    4fba:	ed9f 1a18 	vldr	s2, [pc, #96]	; 501c <scaleEnvTimes+0x7c>
    4fbe:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    4fc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4fc6:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    4fca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    4fce:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4fd2:	1c63      	adds	r3, r4, #1
    4fd4:	ee00 3a90 	vmov	s1, r3
    4fd8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    4fdc:	eeb0 0a68 	vmov.f32	s0, s17
    4fe0:	f001 fdae 	bl	6b40 <LEAF_clip>
    4fe4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4fe8:	ee17 2a90 	vmov	r2, s15
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    4fec:	4b0c      	ldr	r3, [pc, #48]	; (5020 <scaleEnvTimes+0x80>)
    4fee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4ff2:	ed94 0a00 	vldr	s0, [r4]
    4ff6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4ffa:	ee77 7ac8 	vsub.f32	s15, s15, s16
    4ffe:	ee20 0a27 	vmul.f32	s0, s0, s15
    5002:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5006:	edd3 7a00 	vldr	s15, [r3]
    500a:	ee27 8a88 	vmul.f32	s16, s15, s16
}
    500e:	ee30 0a08 	vadd.f32	s0, s0, s16
    5012:	ecbd 8b02 	vpop	{d8}
    5016:	bd10      	pop	{r4, pc}
    5018:	00000000 	.word	0x00000000
    501c:	44ffe000 	.word	0x44ffe000
    5020:	20014c9c 	.word	0x20014c9c
    5024:	f3af 8000 	nop.w
    5028:	f3af 8000 	nop.w
    502c:	f3af 8000 	nop.w
    5030:	f3af 8000 	nop.w
    5034:	f3af 8000 	nop.w
    5038:	f3af 8000 	nop.w
    503c:	f3af 8000 	nop.w

00005040 <scaleLFORates>:
{
    5040:	b510      	push	{r4, lr}
    5042:	ed2d 8b02 	vpush	{d8}
    5046:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    504a:	eddf 8a1b 	vldr	s17, [pc, #108]	; 50b8 <scaleLFORates+0x78>
    504e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    5052:	eeb0 0a68 	vmov.f32	s0, s17
    5056:	f001 fd73 	bl	6b40 <LEAF_clip>
	input *= 2047.0f;
    505a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 50bc <scaleLFORates+0x7c>
    505e:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    5062:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5066:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    506a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    506e:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5072:	1c63      	adds	r3, r4, #1
    5074:	ee00 3a90 	vmov	s1, r3
    5078:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    507c:	eeb0 0a68 	vmov.f32	s0, s17
    5080:	f001 fd5e 	bl	6b40 <LEAF_clip>
    5084:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5088:	ee17 2a90 	vmov	r2, s15
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    508c:	4b0c      	ldr	r3, [pc, #48]	; (50c0 <scaleLFORates+0x80>)
    508e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5092:	ed94 0a00 	vldr	s0, [r4]
    5096:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    509a:	ee77 7ac8 	vsub.f32	s15, s15, s16
    509e:	ee20 0a27 	vmul.f32	s0, s0, s15
    50a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    50a6:	edd3 7a00 	vldr	s15, [r3]
    50aa:	ee27 8a88 	vmul.f32	s16, s15, s16
}
    50ae:	ee30 0a08 	vadd.f32	s0, s0, s16
    50b2:	ecbd 8b02 	vpop	{d8}
    50b6:	bd10      	pop	{r4, pc}
    50b8:	00000000 	.word	0x00000000
    50bc:	44ffe000 	.word	0x44ffe000
    50c0:	20016dc8 	.word	0x20016dc8
    50c4:	f3af 8000 	nop.w
    50c8:	f3af 8000 	nop.w
    50cc:	f3af 8000 	nop.w
    50d0:	f3af 8000 	nop.w
    50d4:	f3af 8000 	nop.w
    50d8:	f3af 8000 	nop.w
    50dc:	f3af 8000 	nop.w

000050e0 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    50e0:	b500      	push	{lr}
    50e2:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    50e4:	a901      	add	r1, sp, #4
    50e6:	4807      	ldr	r0, [pc, #28]	; (5104 <randomNumber+0x24>)
    50e8:	f002 fb86 	bl	77f8 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    50ec:	eddd 7a01 	vldr	s15, [sp, #4]
    50f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    50f4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 5108 <randomNumber+0x28>
    50f8:	ee27 0a80 	vmul.f32	s0, s15, s0
    50fc:	b003      	add	sp, #12
    50fe:	f85d fb04 	ldr.w	pc, [sp], #4
    5102:	bf00      	nop
    5104:	2001cd38 	.word	0x2001cd38
    5108:	2f80000d 	.word	0x2f80000d
    510c:	f3af 8000 	nop.w
    5110:	f3af 8000 	nop.w
    5114:	f3af 8000 	nop.w
    5118:	f3af 8000 	nop.w
    511c:	f3af 8000 	nop.w

00005120 <scaleTwo>:
{
    5120:	b508      	push	{r3, lr}
    5122:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    5126:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    512a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 5138 <scaleTwo+0x18>
    512e:	f001 fd07 	bl	6b40 <LEAF_clip>
}
    5132:	ee30 0a00 	vadd.f32	s0, s0, s0
    5136:	bd08      	pop	{r3, pc}
    5138:	00000000 	.word	0x00000000
    513c:	f3af 8000 	nop.w

00005140 <handleSPI>:
{
    5140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5144:	b082      	sub	sp, #8
    5146:	4604      	mov	r4, r0
	interruptChecker = 1;
    5148:	4b35      	ldr	r3, [pc, #212]	; (5220 <handleSPI+0xe0>)
    514a:	2201      	movs	r2, #1
    514c:	701a      	strb	r2, [r3, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
    514e:	4b35      	ldr	r3, [pc, #212]	; (5224 <handleSPI+0xe4>)
    5150:	5c1b      	ldrb	r3, [r3, r0]
    5152:	4293      	cmp	r3, r2
    5154:	d02d      	beq.n	51b2 <handleSPI+0x72>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
    5156:	2b02      	cmp	r3, #2
    5158:	f000 824f 	beq.w	55fa <handleSPI+0x4ba>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
    515c:	2b03      	cmp	r3, #3
    515e:	f000 8283 	beq.w	5668 <handleSPI+0x528>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
    5162:	2bfd      	cmp	r3, #253	; 0xfd
    5164:	f000 82c3 	beq.w	56ee <handleSPI+0x5ae>
	else if (SPI_LEVERS[offset] == ReceivingSingleParamChange)
    5168:	2b06      	cmp	r3, #6
    516a:	f000 82d8 	beq.w	571e <handleSPI+0x5de>
	else if (SPI_LEVERS[offset] == ReceivingMappingChange)
    516e:	2b07      	cmp	r3, #7
    5170:	d179      	bne.n	5266 <handleSPI+0x126>
		if (presetReady)
    5172:	4b2d      	ldr	r3, [pc, #180]	; (5228 <handleSPI+0xe8>)
    5174:	681b      	ldr	r3, [r3, #0]
    5176:	2b00      	cmp	r3, #0
    5178:	d075      	beq.n	5266 <handleSPI+0x126>
			uint8_t currentByte = offset+1;
    517a:	1c43      	adds	r3, r0, #1
    517c:	b2db      	uxtb	r3, r3
			uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    517e:	4a29      	ldr	r2, [pc, #164]	; (5224 <handleSPI+0xe4>)
    5180:	5cd1      	ldrb	r1, [r2, r3]
    5182:	1c58      	adds	r0, r3, #1
    5184:	5c10      	ldrb	r0, [r2, r0]
    5186:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    518a:	b280      	uxth	r0, r0
			uint8_t whichSlot = (SPI_LEVERS[currentByte+2]);
    518c:	1c99      	adds	r1, r3, #2
    518e:	f812 c001 	ldrb.w	ip, [r2, r1]
			uint8_t mappingChangeType = (SPI_LEVERS[currentByte+3]);
    5192:	1cd9      	adds	r1, r3, #3
    5194:	f812 e001 	ldrb.w	lr, [r2, r1]
			int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    5198:	1d19      	adds	r1, r3, #4
    519a:	5c51      	ldrb	r1, [r2, r1]
    519c:	3305      	adds	r3, #5
    519e:	5cd7      	ldrb	r7, [r2, r3]
    51a0:	eb07 2701 	add.w	r7, r7, r1, lsl #8
    51a4:	b23f      	sxth	r7, r7
			for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    51a6:	2300      	movs	r3, #0
			uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    51a8:	2520      	movs	r5, #32
			uint8_t foundOne = 0;
    51aa:	4698      	mov	r8, r3
			uint8_t whichMapping = 0;
    51ac:	461e      	mov	r6, r3
			for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    51ae:	f000 bcd3 	b.w	5b58 <handleSPI+0xa18>
		 uint8_t currentByte = offset+1;
    51b2:	1881      	adds	r1, r0, r2
    51b4:	b2c9      	uxtb	r1, r1
		 for (int i = 0; i < numStringsThisBoard; i++)
    51b6:	2200      	movs	r2, #0
    51b8:	e000      	b.n	51bc <handleSPI+0x7c>
    51ba:	3201      	adds	r2, #1
    51bc:	4b1b      	ldr	r3, [pc, #108]	; (522c <handleSPI+0xec>)
    51be:	781b      	ldrb	r3, [r3, #0]
    51c0:	4293      	cmp	r3, r2
    51c2:	dd3d      	ble.n	5240 <handleSPI+0x100>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    51c4:	4d1a      	ldr	r5, [pc, #104]	; (5230 <handleSPI+0xf0>)
    51c6:	682b      	ldr	r3, [r5, #0]
    51c8:	4413      	add	r3, r2
    51ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    51ce:	4815      	ldr	r0, [pc, #84]	; (5224 <handleSPI+0xe4>)
    51d0:	5cc3      	ldrb	r3, [r0, r3]
    51d2:	021b      	lsls	r3, r3, #8
    51d4:	ee07 3a90 	vmov	s15, r3
    51d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    51dc:	682b      	ldr	r3, [r5, #0]
    51de:	4413      	add	r3, r2
    51e0:	005b      	lsls	r3, r3, #1
    51e2:	3301      	adds	r3, #1
    51e4:	440b      	add	r3, r1
    51e6:	5cc3      	ldrb	r3, [r0, r3]
    51e8:	ee07 3a90 	vmov	s15, r3
    51ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    51f0:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    51f4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 5234 <handleSPI+0xf4>
    51f8:	ee67 7a87 	vmul.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    51fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5204:	ddd9      	ble.n	51ba <handleSPI+0x7a>
    5206:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 5238 <handleSPI+0xf8>
    520a:	eef4 7ac7 	vcmpe.f32	s15, s14
    520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5212:	d5d2      	bpl.n	51ba <handleSPI+0x7a>
				stringMIDIPitches[i] = myPitch;
    5214:	4b09      	ldr	r3, [pc, #36]	; (523c <handleSPI+0xfc>)
    5216:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    521a:	edc3 7a00 	vstr	s15, [r3]
    521e:	e7cc      	b.n	51ba <handleSPI+0x7a>
    5220:	20016dc5 	.word	0x20016dc5
    5224:	30000140 	.word	0x30000140
    5228:	20005844 	.word	0x20005844
    522c:	20000052 	.word	0x20000052
    5230:	200051c0 	.word	0x200051c0
    5234:	3b000080 	.word	0x3b000080
    5238:	430c0000 	.word	0x430c0000
    523c:	2001494c 	.word	0x2001494c
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    5240:	4ddf      	ldr	r5, [pc, #892]	; (55c0 <handleSPI+0x480>)
    5242:	2201      	movs	r2, #1
    5244:	f44f 7100 	mov.w	r1, #512	; 0x200
    5248:	4628      	mov	r0, r5
    524a:	f002 fa19 	bl	7680 <__HAL_GPIO_WritePin_veneer>
		 whichBar = 0;
    524e:	2600      	movs	r6, #0
    5250:	4bdc      	ldr	r3, [pc, #880]	; (55c4 <handleSPI+0x484>)
    5252:	701e      	strb	r6, [r3, #0]
		 updateStateFromSPIMessage(offset);
    5254:	4620      	mov	r0, r4
    5256:	f7fb f8d3 	bl	400 <updateStateFromSPIMessage>
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    525a:	4632      	mov	r2, r6
    525c:	f44f 7100 	mov.w	r1, #512	; 0x200
    5260:	4628      	mov	r0, r5
    5262:	f002 fa0d 	bl	7680 <__HAL_GPIO_WritePin_veneer>
		if (boardNumber == 0)
    5266:	4bd8      	ldr	r3, [pc, #864]	; (55c8 <handleSPI+0x488>)
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	2b00      	cmp	r3, #0
    526c:	f040 81bc 	bne.w	55e8 <handleSPI+0x4a8>
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    5270:	4ad6      	ldr	r2, [pc, #856]	; (55cc <handleSPI+0x48c>)
    5272:	1913      	adds	r3, r2, r4
    5274:	21fd      	movs	r1, #253	; 0xfd
    5276:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    527a:	1c63      	adds	r3, r4, #1
    527c:	49d4      	ldr	r1, [pc, #848]	; (55d0 <handleSPI+0x490>)
    527e:	7808      	ldrb	r0, [r1, #0]
    5280:	4413      	add	r3, r2
    5282:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    5286:	7808      	ldrb	r0, [r1, #0]
    5288:	1ca5      	adds	r5, r4, #2
    528a:	4bd2      	ldr	r3, [pc, #840]	; (55d4 <handleSPI+0x494>)
    528c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5290:	0040      	lsls	r0, r0, #1
    5292:	5c1e      	ldrb	r6, [r3, r0]
    5294:	1950      	adds	r0, r2, r5
    5296:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    529a:	7808      	ldrb	r0, [r1, #0]
    529c:	1ce5      	adds	r5, r4, #3
    529e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    52a2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    52a6:	7846      	ldrb	r6, [r0, #1]
    52a8:	1950      	adds	r0, r2, r5
    52aa:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    52ae:	7808      	ldrb	r0, [r1, #0]
    52b0:	1d25      	adds	r5, r4, #4
    52b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    52b6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    52ba:	7886      	ldrb	r6, [r0, #2]
    52bc:	1950      	adds	r0, r2, r5
    52be:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    52c2:	7808      	ldrb	r0, [r1, #0]
    52c4:	1d65      	adds	r5, r4, #5
    52c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    52ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    52ce:	78c6      	ldrb	r6, [r0, #3]
    52d0:	1950      	adds	r0, r2, r5
    52d2:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    52d6:	7808      	ldrb	r0, [r1, #0]
    52d8:	1da5      	adds	r5, r4, #6
    52da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    52de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    52e2:	7906      	ldrb	r6, [r0, #4]
    52e4:	1950      	adds	r0, r2, r5
    52e6:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    52ea:	7808      	ldrb	r0, [r1, #0]
    52ec:	1de5      	adds	r5, r4, #7
    52ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    52f2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    52f6:	7946      	ldrb	r6, [r0, #5]
    52f8:	1950      	adds	r0, r2, r5
    52fa:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    52fe:	7808      	ldrb	r0, [r1, #0]
    5300:	f104 0508 	add.w	r5, r4, #8
    5304:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5308:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    530c:	7986      	ldrb	r6, [r0, #6]
    530e:	1950      	adds	r0, r2, r5
    5310:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    5314:	7808      	ldrb	r0, [r1, #0]
    5316:	f104 0509 	add.w	r5, r4, #9
    531a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    531e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5322:	79c6      	ldrb	r6, [r0, #7]
    5324:	1950      	adds	r0, r2, r5
    5326:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    532a:	7808      	ldrb	r0, [r1, #0]
    532c:	f104 050a 	add.w	r5, r4, #10
    5330:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5334:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5338:	7a06      	ldrb	r6, [r0, #8]
    533a:	1950      	adds	r0, r2, r5
    533c:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    5340:	7808      	ldrb	r0, [r1, #0]
    5342:	f104 050b 	add.w	r5, r4, #11
    5346:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    534a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    534e:	7a46      	ldrb	r6, [r0, #9]
    5350:	1950      	adds	r0, r2, r5
    5352:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    5356:	7808      	ldrb	r0, [r1, #0]
    5358:	f104 050c 	add.w	r5, r4, #12
    535c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5360:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5364:	7a86      	ldrb	r6, [r0, #10]
    5366:	1950      	adds	r0, r2, r5
    5368:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    536c:	7808      	ldrb	r0, [r1, #0]
    536e:	f104 050d 	add.w	r5, r4, #13
    5372:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5376:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    537a:	7ac6      	ldrb	r6, [r0, #11]
    537c:	1950      	adds	r0, r2, r5
    537e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    5382:	7808      	ldrb	r0, [r1, #0]
    5384:	f104 050e 	add.w	r5, r4, #14
    5388:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    538c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5390:	7b06      	ldrb	r6, [r0, #12]
    5392:	1950      	adds	r0, r2, r5
    5394:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    5398:	7808      	ldrb	r0, [r1, #0]
    539a:	f104 050f 	add.w	r5, r4, #15
    539e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    53a2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    53a6:	7b58      	ldrb	r0, [r3, #13]
    53a8:	1953      	adds	r3, r2, r5
    53aa:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    53ae:	f104 0010 	add.w	r0, r4, #16
    53b2:	4e89      	ldr	r6, [pc, #548]	; (55d8 <handleSPI+0x498>)
    53b4:	7833      	ldrb	r3, [r6, #0]
    53b6:	4410      	add	r0, r2
    53b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    53bc:	780d      	ldrb	r5, [r1, #0]
    53be:	f104 0c11 	add.w	ip, r4, #17
    53c2:	4886      	ldr	r0, [pc, #536]	; (55dc <handleSPI+0x49c>)
    53c4:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    53c8:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    53cc:	012d      	lsls	r5, r5, #4
    53ce:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    53d2:	f810 e005 	ldrb.w	lr, [r0, r5]
    53d6:	eb02 050c 	add.w	r5, r2, ip
    53da:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    53de:	780d      	ldrb	r5, [r1, #0]
    53e0:	f104 0c12 	add.w	ip, r4, #18
    53e4:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    53e8:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    53ec:	012d      	lsls	r5, r5, #4
    53ee:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    53f2:	4405      	add	r5, r0
    53f4:	f895 e001 	ldrb.w	lr, [r5, #1]
    53f8:	eb02 050c 	add.w	r5, r2, ip
    53fc:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    5400:	780d      	ldrb	r5, [r1, #0]
    5402:	f104 0c13 	add.w	ip, r4, #19
    5406:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    540a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    540e:	012d      	lsls	r5, r5, #4
    5410:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5414:	4405      	add	r5, r0
    5416:	f895 e002 	ldrb.w	lr, [r5, #2]
    541a:	eb02 050c 	add.w	r5, r2, ip
    541e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    5422:	780d      	ldrb	r5, [r1, #0]
    5424:	f104 0c14 	add.w	ip, r4, #20
    5428:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    542c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    5430:	012d      	lsls	r5, r5, #4
    5432:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5436:	4405      	add	r5, r0
    5438:	f895 e003 	ldrb.w	lr, [r5, #3]
    543c:	eb02 050c 	add.w	r5, r2, ip
    5440:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    5444:	780d      	ldrb	r5, [r1, #0]
    5446:	f104 0c15 	add.w	ip, r4, #21
    544a:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    544e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    5452:	012d      	lsls	r5, r5, #4
    5454:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5458:	4405      	add	r5, r0
    545a:	f895 e004 	ldrb.w	lr, [r5, #4]
    545e:	eb02 050c 	add.w	r5, r2, ip
    5462:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    5466:	780d      	ldrb	r5, [r1, #0]
    5468:	f104 0c16 	add.w	ip, r4, #22
    546c:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    5470:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    5474:	012d      	lsls	r5, r5, #4
    5476:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    547a:	4405      	add	r5, r0
    547c:	f895 e005 	ldrb.w	lr, [r5, #5]
    5480:	eb02 050c 	add.w	r5, r2, ip
    5484:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    5488:	780d      	ldrb	r5, [r1, #0]
    548a:	f104 0c17 	add.w	ip, r4, #23
    548e:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    5492:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    5496:	012d      	lsls	r5, r5, #4
    5498:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    549c:	4405      	add	r5, r0
    549e:	f895 e006 	ldrb.w	lr, [r5, #6]
    54a2:	eb02 050c 	add.w	r5, r2, ip
    54a6:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    54aa:	780d      	ldrb	r5, [r1, #0]
    54ac:	f104 0c18 	add.w	ip, r4, #24
    54b0:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    54b4:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    54b8:	012d      	lsls	r5, r5, #4
    54ba:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    54be:	4405      	add	r5, r0
    54c0:	f895 e007 	ldrb.w	lr, [r5, #7]
    54c4:	eb02 050c 	add.w	r5, r2, ip
    54c8:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    54cc:	780d      	ldrb	r5, [r1, #0]
    54ce:	f104 0c19 	add.w	ip, r4, #25
    54d2:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    54d6:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    54da:	012d      	lsls	r5, r5, #4
    54dc:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    54e0:	4405      	add	r5, r0
    54e2:	f895 e008 	ldrb.w	lr, [r5, #8]
    54e6:	eb02 050c 	add.w	r5, r2, ip
    54ea:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    54ee:	780d      	ldrb	r5, [r1, #0]
    54f0:	f104 0c1a 	add.w	ip, r4, #26
    54f4:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    54f8:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    54fc:	012d      	lsls	r5, r5, #4
    54fe:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5502:	4405      	add	r5, r0
    5504:	f895 e009 	ldrb.w	lr, [r5, #9]
    5508:	eb02 050c 	add.w	r5, r2, ip
    550c:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
    5510:	780d      	ldrb	r5, [r1, #0]
    5512:	f104 0c1b 	add.w	ip, r4, #27
    5516:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    551a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    551e:	012d      	lsls	r5, r5, #4
    5520:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5524:	4405      	add	r5, r0
    5526:	f895 e00a 	ldrb.w	lr, [r5, #10]
    552a:	eb02 050c 	add.w	r5, r2, ip
    552e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
    5532:	780d      	ldrb	r5, [r1, #0]
    5534:	f104 0c1c 	add.w	ip, r4, #28
    5538:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    553c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    5540:	012d      	lsls	r5, r5, #4
    5542:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5546:	4405      	add	r5, r0
    5548:	f895 e00b 	ldrb.w	lr, [r5, #11]
    554c:	eb02 050c 	add.w	r5, r2, ip
    5550:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    5554:	780d      	ldrb	r5, [r1, #0]
    5556:	f104 0c1d 	add.w	ip, r4, #29
    555a:	ebc3 0ec3 	rsb	lr, r3, r3, lsl #3
    555e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    5562:	012d      	lsls	r5, r5, #4
    5564:	eb05 054e 	add.w	r5, r5, lr, lsl #1
    5568:	4405      	add	r5, r0
    556a:	f895 e00c 	ldrb.w	lr, [r5, #12]
    556e:	eb02 050c 	add.w	r5, r2, ip
    5572:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    5576:	7809      	ldrb	r1, [r1, #0]
    5578:	f104 051e 	add.w	r5, r4, #30
    557c:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
    5580:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    5584:	0109      	lsls	r1, r1, #4
    5586:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    558a:	4408      	add	r0, r1
    558c:	7b40      	ldrb	r0, [r0, #13]
    558e:	1951      	adds	r1, r2, r5
    5590:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
			SPI_LEVERS_TX[offset+31] = 254;
    5594:	341f      	adds	r4, #31
    5596:	4414      	add	r4, r2
    5598:	22fe      	movs	r2, #254	; 0xfe
    559a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			whichMacroToSendName = (whichMacroToSendName + 1);
    559e:	3301      	adds	r3, #1
    55a0:	b2db      	uxtb	r3, r3
    55a2:	7033      	strb	r3, [r6, #0]
			if (whichMacroToSendName >= 8)
    55a4:	2b07      	cmp	r3, #7
    55a6:	d91f      	bls.n	55e8 <handleSPI+0x4a8>
				whichMacroToSendName = 0;
    55a8:	2200      	movs	r2, #0
    55aa:	7032      	strb	r2, [r6, #0]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    55ac:	4908      	ldr	r1, [pc, #32]	; (55d0 <handleSPI+0x490>)
    55ae:	780b      	ldrb	r3, [r1, #0]
    55b0:	3301      	adds	r3, #1
    55b2:	1ad2      	subs	r2, r2, r3
    55b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    55b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    55bc:	e010      	b.n	55e0 <handleSPI+0x4a0>
    55be:	bf00      	nop
    55c0:	58021800 	.word	0x58021800
    55c4:	20014a30 	.word	0x20014a30
    55c8:	20014c05 	.word	0x20014c05
    55cc:	30000140 	.word	0x30000140
    55d0:	2001cd35 	.word	0x2001cd35
    55d4:	3003a000 	.word	0x3003a000
    55d8:	2001cd34 	.word	0x2001cd34
    55dc:	3003a380 	.word	0x3003a380
    55e0:	bf58      	it	pl
    55e2:	4253      	negpl	r3, r2
    55e4:	b2db      	uxtb	r3, r3
    55e6:	700b      	strb	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    55e8:	2200      	movs	r2, #0
    55ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
    55ee:	48bb      	ldr	r0, [pc, #748]	; (58dc <handleSPI+0x79c>)
    55f0:	f002 f846 	bl	7680 <__HAL_GPIO_WritePin_veneer>
}
    55f4:	b002      	add	sp, #8
    55f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 if (writingState != ReceivingPreset)
    55fa:	4bb9      	ldr	r3, [pc, #740]	; (58e0 <handleSPI+0x7a0>)
    55fc:	781b      	ldrb	r3, [r3, #0]
    55fe:	b2db      	uxtb	r3, r3
    5600:	2b02      	cmp	r3, #2
    5602:	d017      	beq.n	5634 <handleSPI+0x4f4>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    5604:	4bb6      	ldr	r3, [pc, #728]	; (58e0 <handleSPI+0x7a0>)
    5606:	2202      	movs	r2, #2
    5608:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    560a:	2300      	movs	r3, #0
    560c:	e007      	b.n	561e <handleSPI+0x4de>
					audioOutBuffer[i] = 0;
    560e:	4ab5      	ldr	r2, [pc, #724]	; (58e4 <handleSPI+0x7a4>)
    5610:	2100      	movs	r1, #0
    5612:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					audioOutBuffer[i + 1] = 0;
    5616:	1c58      	adds	r0, r3, #1
    5618:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    561c:	3302      	adds	r3, #2
    561e:	2b1f      	cmp	r3, #31
    5620:	ddf5      	ble.n	560e <handleSPI+0x4ce>
			 diskBusy = 1;
    5622:	4bb1      	ldr	r3, [pc, #708]	; (58e8 <handleSPI+0x7a8>)
    5624:	2201      	movs	r2, #1
    5626:	701a      	strb	r2, [r3, #0]
			 audioMasterLevel = 0.0f;
    5628:	4bb0      	ldr	r3, [pc, #704]	; (58ec <handleSPI+0x7ac>)
    562a:	2200      	movs	r2, #0
    562c:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
    562e:	4bb0      	ldr	r3, [pc, #704]	; (58f0 <handleSPI+0x7b0>)
    5630:	2200      	movs	r2, #0
    5632:	801a      	strh	r2, [r3, #0]
		 presetNumberToSave = SPI_LEVERS[offset + 1];
    5634:	1c63      	adds	r3, r4, #1
    5636:	4aaf      	ldr	r2, [pc, #700]	; (58f4 <handleSPI+0x7b4>)
    5638:	5cd2      	ldrb	r2, [r2, r3]
    563a:	4baf      	ldr	r3, [pc, #700]	; (58f8 <handleSPI+0x7b8>)
    563c:	701a      	strb	r2, [r3, #0]
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    563e:	1ca5      	adds	r5, r4, #2
    5640:	b2ed      	uxtb	r5, r5
		 for (int i = 0; i < 28; i++)
    5642:	2200      	movs	r2, #0
    5644:	e00d      	b.n	5662 <handleSPI+0x522>
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    5646:	eb05 0c02 	add.w	ip, r5, r2
    564a:	48a9      	ldr	r0, [pc, #676]	; (58f0 <handleSPI+0x7b0>)
    564c:	8803      	ldrh	r3, [r0, #0]
    564e:	b29b      	uxth	r3, r3
    5650:	1c59      	adds	r1, r3, #1
    5652:	b289      	uxth	r1, r1
    5654:	8001      	strh	r1, [r0, #0]
    5656:	49a7      	ldr	r1, [pc, #668]	; (58f4 <handleSPI+0x7b4>)
    5658:	f811 000c 	ldrb.w	r0, [r1, ip]
    565c:	49a7      	ldr	r1, [pc, #668]	; (58fc <handleSPI+0x7bc>)
    565e:	54c8      	strb	r0, [r1, r3]
		 for (int i = 0; i < 28; i++)
    5660:	3201      	adds	r2, #1
    5662:	2a1b      	cmp	r2, #27
    5664:	ddef      	ble.n	5646 <handleSPI+0x506>
    5666:	e5fe      	b.n	5266 <handleSPI+0x126>
		 uint8_t currentByte = offset+1;
    5668:	1c46      	adds	r6, r0, #1
    566a:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 12; i++)
    566c:	2500      	movs	r5, #0
    566e:	e010      	b.n	5692 <handleSPI+0x552>
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5670:	1973      	adds	r3, r6, r5
    5672:	4aa0      	ldr	r2, [pc, #640]	; (58f4 <handleSPI+0x7b4>)
    5674:	5cd3      	ldrb	r3, [r2, r3]
    5676:	ee07 3a90 	vmov	s15, r3
    567a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    567e:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 5900 <handleSPI+0x7c0>
    5682:	ee27 0a80 	vmul.f32	s0, s15, s0
    5686:	489f      	ldr	r0, [pc, #636]	; (5904 <handleSPI+0x7c4>)
    5688:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    568c:	f001 f9b8 	bl	6a00 <tExpSmooth_setDest>
			for (int i = 0; i < 12; i++)
    5690:	3501      	adds	r5, #1
    5692:	2d0b      	cmp	r5, #11
    5694:	ddec      	ble.n	5670 <handleSPI+0x530>
			currentByte += 12;
    5696:	f104 060d 	add.w	r6, r4, #13
    569a:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 10; i++)
    569c:	2500      	movs	r5, #0
    569e:	e010      	b.n	56c2 <handleSPI+0x582>
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    56a0:	1973      	adds	r3, r6, r5
    56a2:	4a94      	ldr	r2, [pc, #592]	; (58f4 <handleSPI+0x7b4>)
    56a4:	5cd3      	ldrb	r3, [r2, r3]
    56a6:	ee07 3a90 	vmov	s15, r3
    56aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    56ae:	ed9f 0a94 	vldr	s0, [pc, #592]	; 5900 <handleSPI+0x7c0>
    56b2:	ee27 0a80 	vmul.f32	s0, s15, s0
    56b6:	4894      	ldr	r0, [pc, #592]	; (5908 <handleSPI+0x7c8>)
    56b8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    56bc:	f001 f9a0 	bl	6a00 <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
    56c0:	3501      	adds	r5, #1
    56c2:	2d09      	cmp	r5, #9
    56c4:	ddec      	ble.n	56a0 <handleSPI+0x560>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    56c6:	4d91      	ldr	r5, [pc, #580]	; (590c <handleSPI+0x7cc>)
    56c8:	2201      	movs	r2, #1
    56ca:	f44f 7100 	mov.w	r1, #512	; 0x200
    56ce:	4628      	mov	r0, r5
    56d0:	f001 ffd6 	bl	7680 <__HAL_GPIO_WritePin_veneer>
			whichBar = 1;
    56d4:	4b8e      	ldr	r3, [pc, #568]	; (5910 <handleSPI+0x7d0>)
    56d6:	2201      	movs	r2, #1
    56d8:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    56da:	4620      	mov	r0, r4
    56dc:	f7fa fe90 	bl	400 <updateStateFromSPIMessage>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    56e0:	2200      	movs	r2, #0
    56e2:	f44f 7100 	mov.w	r1, #512	; 0x200
    56e6:	4628      	mov	r0, r5
    56e8:	f001 ffca 	bl	7680 <__HAL_GPIO_WritePin_veneer>
    56ec:	e5bb      	b.n	5266 <handleSPI+0x126>
		if(writingState == ReceivingPreset)
    56ee:	4b7c      	ldr	r3, [pc, #496]	; (58e0 <handleSPI+0x7a0>)
    56f0:	781b      	ldrb	r3, [r3, #0]
    56f2:	b2db      	uxtb	r3, r3
    56f4:	2b02      	cmp	r3, #2
    56f6:	f47f adb6 	bne.w	5266 <handleSPI+0x126>
			 writingState = 0;
    56fa:	4b79      	ldr	r3, [pc, #484]	; (58e0 <handleSPI+0x7a0>)
    56fc:	2200      	movs	r2, #0
    56fe:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
    5700:	4b7d      	ldr	r3, [pc, #500]	; (58f8 <handleSPI+0x7b8>)
    5702:	781b      	ldrb	r3, [r3, #0]
    5704:	b2db      	uxtb	r3, r3
    5706:	4a83      	ldr	r2, [pc, #524]	; (5914 <handleSPI+0x7d4>)
    5708:	7013      	strb	r3, [r2, #0]
			 presetWaitingToParse = bufferPos;
    570a:	4a79      	ldr	r2, [pc, #484]	; (58f0 <handleSPI+0x7b0>)
    570c:	8813      	ldrh	r3, [r2, #0]
    570e:	b29b      	uxth	r3, r3
    5710:	4981      	ldr	r1, [pc, #516]	; (5918 <handleSPI+0x7d8>)
    5712:	600b      	str	r3, [r1, #0]
			 presetWaitingToWrite = bufferPos;
    5714:	8813      	ldrh	r3, [r2, #0]
    5716:	b29b      	uxth	r3, r3
    5718:	4a80      	ldr	r2, [pc, #512]	; (591c <handleSPI+0x7dc>)
    571a:	6013      	str	r3, [r2, #0]
    571c:	e5a3      	b.n	5266 <handleSPI+0x126>
		if (presetReady)
    571e:	4b80      	ldr	r3, [pc, #512]	; (5920 <handleSPI+0x7e0>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	2b00      	cmp	r3, #0
    5724:	f43f ad9f 	beq.w	5266 <handleSPI+0x126>
			uint8_t currentByte = offset+1;
    5728:	1c43      	adds	r3, r0, #1
    572a:	b2db      	uxtb	r3, r3
			uint16_t whichParam = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    572c:	4a71      	ldr	r2, [pc, #452]	; (58f4 <handleSPI+0x7b4>)
    572e:	5cd1      	ldrb	r1, [r2, r3]
    5730:	3301      	adds	r3, #1
    5732:	5cd5      	ldrb	r5, [r2, r3]
    5734:	eb05 2501 	add.w	r5, r5, r1, lsl #8
    5738:	b2ad      	uxth	r5, r5
			currentByte = currentByte + 2;
    573a:	3003      	adds	r0, #3
    573c:	b2c0      	uxtb	r0, r0
			for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    573e:	2200      	movs	r2, #0
    5740:	e016      	b.n	5770 <handleSPI+0x630>
				params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    5742:	4b6c      	ldr	r3, [pc, #432]	; (58f4 <handleSPI+0x7b4>)
    5744:	5c19      	ldrb	r1, [r3, r0]
    5746:	1c46      	adds	r6, r0, #1
    5748:	5d9b      	ldrb	r3, [r3, r6]
    574a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    574e:	ee07 3a90 	vmov	s15, r3
    5752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5756:	ed9f 7a73 	vldr	s14, [pc, #460]	; 5924 <handleSPI+0x7e4>
    575a:	ee67 7a87 	vmul.f32	s15, s15, s14
    575e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    5762:	1899      	adds	r1, r3, r2
    5764:	4b70      	ldr	r3, [pc, #448]	; (5928 <handleSPI+0x7e8>)
    5766:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    576a:	edc3 7a00 	vstr	s15, [r3]
			for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    576e:	3201      	adds	r2, #1
    5770:	2a01      	cmp	r2, #1
    5772:	dde6      	ble.n	5742 <handleSPI+0x602>
			if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    5774:	2d47      	cmp	r5, #71	; 0x47
    5776:	bf18      	it	ne
    5778:	2d3f      	cmpne	r5, #63	; 0x3f
    577a:	d007      	beq.n	578c <handleSPI+0x64c>
    577c:	2d57      	cmp	r5, #87	; 0x57
    577e:	bf14      	ite	ne
    5780:	2300      	movne	r3, #0
    5782:	2301      	moveq	r3, #1
    5784:	2d4f      	cmp	r5, #79	; 0x4f
    5786:	d001      	beq.n	578c <handleSPI+0x64c>
    5788:	2b00      	cmp	r3, #0
    578a:	d03b      	beq.n	5804 <handleSPI+0x6c4>
				uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    578c:	f1b5 033f 	subs.w	r3, r5, #63	; 0x3f
    5790:	d43a      	bmi.n	5808 <handleSPI+0x6c8>
    5792:	10db      	asrs	r3, r3, #3
				FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5794:	4f64      	ldr	r7, [pc, #400]	; (5928 <handleSPI+0x7e8>)
    5796:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    579a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    579e:	edd2 7a00 	vldr	s15, [r2]
    57a2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    57a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    57aa:	fef8 7a67 	vrinta.f32	s15, s15
    57ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    57b2:	edcd 7a01 	vstr	s15, [sp, #4]
    57b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
				param *FXAlias = &params[whichParam + 1];
    57ba:	f105 0801 	add.w	r8, r5, #1
    57be:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    57c2:	eb07 0782 	add.w	r7, r7, r2, lsl #2
				if (effectType > FXLowpass)
    57c6:	280b      	cmp	r0, #11
    57c8:	d901      	bls.n	57ce <handleSPI+0x68e>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    57ca:	4a58      	ldr	r2, [pc, #352]	; (592c <handleSPI+0x7ec>)
    57cc:	64ba      	str	r2, [r7, #72]	; 0x48
				setEffectsFunctions(effectType, whichEffect);
    57ce:	b2de      	uxtb	r6, r3
    57d0:	4631      	mov	r1, r6
    57d2:	f001 fff9 	bl	77c8 <__setEffectsFunctions_veneer>
				FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    57d6:	4a56      	ldr	r2, [pc, #344]	; (5930 <handleSPI+0x7f0>)
    57d8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    57dc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    57e0:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
    57e4:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    57e8:	484f      	ldr	r0, [pc, #316]	; (5928 <handleSPI+0x7e8>)
    57ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    57ee:	f8c3 c014 	str.w	ip, [r3, #20]
				FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    57f2:	684b      	ldr	r3, [r1, #4]
    57f4:	633b      	str	r3, [r7, #48]	; 0x30
				FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    57f6:	688b      	ldr	r3, [r1, #8]
    57f8:	64fb      	str	r3, [r7, #76]	; 0x4c
				FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    57fa:	68cb      	ldr	r3, [r1, #12]
    57fc:	66bb      	str	r3, [r7, #104]	; 0x68
				FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    57fe:	690b      	ldr	r3, [r1, #16]
    5800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5804:	2700      	movs	r7, #0
    5806:	e01d      	b.n	5844 <handleSPI+0x704>
				uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    5808:	3307      	adds	r3, #7
    580a:	e7c2      	b.n	5792 <handleSPI+0x652>
				params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    580c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 5928 <handleSPI+0x7e8>
    5810:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
    5814:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    5818:	f8d8 3010 	ldr.w	r3, [r8, #16]
    581c:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
    5820:	443e      	add	r6, r7
    5822:	eb09 0286 	add.w	r2, r9, r6, lsl #2
    5826:	ed92 0a00 	vldr	s0, [r2]
    582a:	4798      	blx	r3
    582c:	3602      	adds	r6, #2
    582e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    5832:	ed86 0a00 	vstr	s0, [r6]
				params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    5836:	f8d8 3014 	ldr.w	r3, [r8, #20]
    583a:	4639      	mov	r1, r7
    583c:	f898 0018 	ldrb.w	r0, [r8, #24]
    5840:	4798      	blx	r3
			for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5842:	3701      	adds	r7, #1
    5844:	2f01      	cmp	r7, #1
    5846:	dde1      	ble.n	580c <handleSPI+0x6cc>
			if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    5848:	2d30      	cmp	r5, #48	; 0x30
    584a:	bf18      	it	ne
    584c:	2d23      	cmpne	r5, #35	; 0x23
    584e:	d001      	beq.n	5854 <handleSPI+0x714>
    5850:	2d3d      	cmp	r5, #61	; 0x3d
    5852:	d11a      	bne.n	588a <handleSPI+0x74a>
				int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5854:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    5858:	4936      	ldr	r1, [pc, #216]	; (5934 <handleSPI+0x7f4>)
    585a:	fb81 2103 	smull	r2, r1, r1, r3
    585e:	17db      	asrs	r3, r3, #31
				int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5860:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    5864:	4a30      	ldr	r2, [pc, #192]	; (5928 <handleSPI+0x7e8>)
    5866:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    586a:	edd2 7a02 	vldr	s15, [r2, #8]
    586e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    5872:	ee67 7a87 	vmul.f32	s15, s15, s14
    5876:	fef8 7a67 	vrinta.f32	s15, s15
				setOscilllatorShapes(oscshape, whichOsc);
    587a:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
    587e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5882:	ee17 0a90 	vmov	r0, s15
    5886:	f001 febb 	bl	7600 <__setOscilllatorShapes_veneer>
			if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    588a:	2d25      	cmp	r5, #37	; 0x25
    588c:	bf18      	it	ne
    588e:	2d18      	cmpne	r5, #24
    5890:	d001      	beq.n	5896 <handleSPI+0x756>
    5892:	2d32      	cmp	r5, #50	; 0x32
    5894:	d15f      	bne.n	5956 <handleSPI+0x816>
				int whichOsc = (whichParam - Osc1) / OscParamsNum;
    5896:	f1a5 0318 	sub.w	r3, r5, #24
    589a:	4a26      	ldr	r2, [pc, #152]	; (5934 <handleSPI+0x7f4>)
    589c:	fb82 1203 	smull	r1, r2, r2, r3
    58a0:	17db      	asrs	r3, r3, #31
    58a2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
				if (params[whichParam].realVal[0]  > 0.5f)
    58a6:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    58aa:	4a1f      	ldr	r2, [pc, #124]	; (5928 <handleSPI+0x7e8>)
    58ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    58b0:	ed92 7a02 	vldr	s14, [r2, #8]
    58b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    58b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    58bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58c0:	dd06      	ble.n	58d0 <handleSPI+0x790>
					oscsEnabled[whichOsc] = 1;
    58c2:	4a1d      	ldr	r2, [pc, #116]	; (5938 <handleSPI+0x7f8>)
    58c4:	2101      	movs	r1, #1
    58c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int j = 0; j < 3; j++)
    58ca:	2300      	movs	r3, #0
				int enabledCount = 0;
    58cc:	461a      	mov	r2, r3
				for (int j = 0; j < 3; j++)
    58ce:	e03a      	b.n	5946 <handleSPI+0x806>
					oscsEnabled[whichOsc] = 0;
    58d0:	4a19      	ldr	r2, [pc, #100]	; (5938 <handleSPI+0x7f8>)
    58d2:	2100      	movs	r1, #0
    58d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    58d8:	e7f7      	b.n	58ca <handleSPI+0x78a>
    58da:	bf00      	nop
    58dc:	58020c00 	.word	0x58020c00
    58e0:	2001cd36 	.word	0x2001cd36
    58e4:	30000040 	.word	0x30000040
    58e8:	20014c44 	.word	0x20014c44
    58ec:	20000744 	.word	0x20000744
    58f0:	20014c06 	.word	0x20014c06
    58f4:	30000140 	.word	0x30000140
    58f8:	2001a8b6 	.word	0x2001a8b6
    58fc:	300001c0 	.word	0x300001c0
    5900:	3b808081 	.word	0x3b808081
    5904:	20005380 	.word	0x20005380
    5908:	20005804 	.word	0x20005804
    590c:	58021800 	.word	0x58021800
    5910:	20014a30 	.word	0x20014a30
    5914:	2000074c 	.word	0x2000074c
    5918:	2001a8bc 	.word	0x2001a8bc
    591c:	2001a8c0 	.word	0x2001a8c0
    5920:	20005844 	.word	0x20005844
    5924:	377ffff6 	.word	0x377ffff6
    5928:	20019798 	.word	0x20019798
    592c:	00004f01 	.word	0x00004f01
    5930:	20014c48 	.word	0x20014c48
    5934:	4ec4ec4f 	.word	0x4ec4ec4f
    5938:	2001978c 	.word	0x2001978c
					enabledCount += oscsEnabled[j];
    593c:	49ca      	ldr	r1, [pc, #808]	; (5c68 <handleSPI+0xb28>)
    593e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    5942:	440a      	add	r2, r1
				for (int j = 0; j < 3; j++)
    5944:	3301      	adds	r3, #1
    5946:	2b02      	cmp	r3, #2
    5948:	ddf8      	ble.n	593c <handleSPI+0x7fc>
				oscAmpMult = oscAmpMultArray[enabledCount];
    594a:	4bc8      	ldr	r3, [pc, #800]	; (5c6c <handleSPI+0xb2c>)
    594c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5950:	6812      	ldr	r2, [r2, #0]
    5952:	4bc7      	ldr	r3, [pc, #796]	; (5c70 <handleSPI+0xb30>)
    5954:	601a      	str	r2, [r3, #0]
			if ((whichParam == Filter1Type) || (whichParam == Filter1Type))
    5956:	2d60      	cmp	r5, #96	; 0x60
    5958:	d04e      	beq.n	59f8 <handleSPI+0x8b8>
			if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    595a:	2d8c      	cmp	r5, #140	; 0x8c
    595c:	bf18      	it	ne
    595e:	2d87      	cmpne	r5, #135	; 0x87
    5960:	d008      	beq.n	5974 <handleSPI+0x834>
    5962:	2d96      	cmp	r5, #150	; 0x96
    5964:	bf14      	ite	ne
    5966:	2300      	movne	r3, #0
    5968:	2301      	moveq	r3, #1
    596a:	2d91      	cmp	r5, #145	; 0x91
    596c:	d002      	beq.n	5974 <handleSPI+0x834>
    596e:	2b00      	cmp	r3, #0
    5970:	f000 80d1 	beq.w	5b16 <handleSPI+0x9d6>
				int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5974:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
    5978:	4ebe      	ldr	r6, [pc, #760]	; (5c74 <handleSPI+0xb34>)
    597a:	fb86 2603 	smull	r2, r6, r6, r3
    597e:	17db      	asrs	r3, r3, #31
    5980:	ebc3 0666 	rsb	r6, r3, r6, asr #1
				int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5984:	4fbc      	ldr	r7, [pc, #752]	; (5c78 <handleSPI+0xb38>)
    5986:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    598a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    598e:	edd3 7a02 	vldr	s15, [r3, #8]
    5992:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    5996:	ee67 7a87 	vmul.f32	s15, s15, s14
    599a:	fef8 7a67 	vrinta.f32	s15, s15
				setLFOShapes(LFOShape, whichLFO);
    599e:	4631      	mov	r1, r6
    59a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    59a4:	ee17 0a90 	vmov	r0, s15
    59a8:	f001 ff92 	bl	78d0 <__setLFOShapes_veneer>
				int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    59ac:	eb06 0886 	add.w	r8, r6, r6, lsl #2
    59b0:	f108 0a84 	add.w	sl, r8, #132	; 0x84
				int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    59b4:	f108 0985 	add.w	r9, r8, #133	; 0x85
				int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    59b8:	f108 0886 	add.w	r8, r8, #134	; 0x86
				params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    59bc:	4baf      	ldr	r3, [pc, #700]	; (5c7c <handleSPI+0xb3c>)
    59be:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    59c2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    59c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    59ca:	ebca 02ca 	rsb	r2, sl, sl, lsl #3
    59ce:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    59d2:	6150      	str	r0, [r2, #20]
				params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    59d4:	6849      	ldr	r1, [r1, #4]
    59d6:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
    59da:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    59de:	6151      	str	r1, [r2, #20]
				params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    59e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    59e4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    59e8:	68b3      	ldr	r3, [r6, #8]
    59ea:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    59ee:	eb07 0782 	add.w	r7, r7, r2, lsl #2
    59f2:	617b      	str	r3, [r7, #20]
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    59f4:	2600      	movs	r6, #0
    59f6:	e08c      	b.n	5b12 <handleSPI+0x9d2>
				int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    59f8:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    59fc:	4ea0      	ldr	r6, [pc, #640]	; (5c80 <handleSPI+0xb40>)
    59fe:	fb86 2603 	smull	r2, r6, r6, r3
    5a02:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
				int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5a06:	f8df 8270 	ldr.w	r8, [pc, #624]	; 5c78 <handleSPI+0xb38>
    5a0a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    5a0e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    5a12:	edd3 7a02 	vldr	s15, [r3, #8]
    5a16:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    5a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
    5a1e:	fef8 7a67 	vrinta.f32	s15, s15
				setFilterTypes(filterType, whichFilter);
    5a22:	4631      	mov	r1, r6
    5a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5a28:	ee17 0a90 	vmov	r0, s15
    5a2c:	f001 fd90 	bl	7550 <__setFilterTypes_veneer>
				int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5a30:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    5a34:	007f      	lsls	r7, r7, #1
    5a36:	f107 0963 	add.w	r9, r7, #99	; 0x63
				int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    5a3a:	3762      	adds	r7, #98	; 0x62
				params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5a3c:	4b91      	ldr	r3, [pc, #580]	; (5c84 <handleSPI+0xb44>)
    5a3e:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
    5a42:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
    5a46:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    5a4a:	6151      	str	r1, [r2, #20]
				params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5a4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    5a50:	685b      	ldr	r3, [r3, #4]
    5a52:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    5a56:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    5a5a:	f8c8 3014 	str.w	r3, [r8, #20]
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5a5e:	2600      	movs	r6, #0
    5a60:	e022      	b.n	5aa8 <handleSPI+0x968>
					params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    5a62:	f8df 8214 	ldr.w	r8, [pc, #532]	; 5c78 <handleSPI+0xb38>
    5a66:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
    5a6a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5a6e:	6942      	ldr	r2, [r0, #20]
    5a70:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
    5a74:	4433      	add	r3, r6
    5a76:	3302      	adds	r3, #2
    5a78:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    5a7c:	4631      	mov	r1, r6
    5a7e:	7e00      	ldrb	r0, [r0, #24]
    5a80:	ed93 0a00 	vldr	s0, [r3]
    5a84:	4790      	blx	r2
					params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    5a86:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    5a8a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5a8e:	6942      	ldr	r2, [r0, #20]
    5a90:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    5a94:	4433      	add	r3, r6
    5a96:	3302      	adds	r3, #2
    5a98:	eb08 0883 	add.w	r8, r8, r3, lsl #2
    5a9c:	4631      	mov	r1, r6
    5a9e:	7e00      	ldrb	r0, [r0, #24]
    5aa0:	ed98 0a00 	vldr	s0, [r8]
    5aa4:	4790      	blx	r2
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5aa6:	3601      	adds	r6, #1
    5aa8:	2e01      	cmp	r6, #1
    5aaa:	ddda      	ble.n	5a62 <handleSPI+0x922>
    5aac:	e755      	b.n	595a <handleSPI+0x81a>
					params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    5aae:	4f72      	ldr	r7, [pc, #456]	; (5c78 <handleSPI+0xb38>)
    5ab0:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    5ab4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5ab8:	6942      	ldr	r2, [r0, #20]
    5aba:	ebca 03ca 	rsb	r3, sl, sl, lsl #3
    5abe:	4433      	add	r3, r6
    5ac0:	3302      	adds	r3, #2
    5ac2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5ac6:	4631      	mov	r1, r6
    5ac8:	7e00      	ldrb	r0, [r0, #24]
    5aca:	ed93 0a00 	vldr	s0, [r3]
    5ace:	4790      	blx	r2
					params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    5ad0:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
    5ad4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5ad8:	6942      	ldr	r2, [r0, #20]
    5ada:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
    5ade:	4433      	add	r3, r6
    5ae0:	3302      	adds	r3, #2
    5ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5ae6:	4631      	mov	r1, r6
    5ae8:	7e00      	ldrb	r0, [r0, #24]
    5aea:	ed93 0a00 	vldr	s0, [r3]
    5aee:	4790      	blx	r2
					params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    5af0:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    5af4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5af8:	6942      	ldr	r2, [r0, #20]
    5afa:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    5afe:	4433      	add	r3, r6
    5b00:	3302      	adds	r3, #2
    5b02:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    5b06:	4631      	mov	r1, r6
    5b08:	7e00      	ldrb	r0, [r0, #24]
    5b0a:	ed97 0a00 	vldr	s0, [r7]
    5b0e:	4790      	blx	r2
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5b10:	3601      	adds	r6, #1
    5b12:	2e01      	cmp	r6, #1
    5b14:	ddcb      	ble.n	5aae <handleSPI+0x96e>
			if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    5b16:	2d01      	cmp	r5, #1
    5b18:	f63f aba5 	bhi.w	5266 <handleSPI+0x126>
				midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5b1c:	4b56      	ldr	r3, [pc, #344]	; (5c78 <handleSPI+0xb38>)
    5b1e:	edd3 7a02 	vldr	s15, [r3, #8]
    5b22:	eddf 6a59 	vldr	s13, [pc, #356]	; 5c88 <handleSPI+0xb48>
    5b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5b2a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    5b2e:	ee27 7a26 	vmul.f32	s14, s14, s13
    5b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5b36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    5b3a:	eec6 6a27 	vdiv.f32	s13, s12, s15
    5b3e:	4b53      	ldr	r3, [pc, #332]	; (5c8c <handleSPI+0xb4c>)
    5b40:	edc3 6a00 	vstr	s13, [r3]
				midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5b44:	4b52      	ldr	r3, [pc, #328]	; (5c90 <handleSPI+0xb50>)
    5b46:	ed83 7a00 	vstr	s14, [r3]
    5b4a:	f7ff bb8c 	b.w	5266 <handleSPI+0x126>
					whichMapping = j;
    5b4e:	b2de      	uxtb	r6, r3
					foundOne = 1;
    5b50:	f04f 0801 	mov.w	r8, #1
    5b54:	e00a      	b.n	5b6c <handleSPI+0xa2c>
			for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5b56:	3301      	adds	r3, #1
    5b58:	2b1f      	cmp	r3, #31
    5b5a:	dc0d      	bgt.n	5b78 <handleSPI+0xa38>
				if (mappings[j].destNumber == destNumber)
    5b5c:	224c      	movs	r2, #76	; 0x4c
    5b5e:	fb03 f202 	mul.w	r2, r3, r2
    5b62:	494c      	ldr	r1, [pc, #304]	; (5c94 <handleSPI+0xb54>)
    5b64:	5c8a      	ldrb	r2, [r1, r2]
    5b66:	b291      	uxth	r1, r2
    5b68:	4281      	cmp	r1, r0
    5b6a:	d0f0      	beq.n	5b4e <handleSPI+0xa0e>
				if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    5b6c:	2aff      	cmp	r2, #255	; 0xff
    5b6e:	d1f2      	bne.n	5b56 <handleSPI+0xa16>
    5b70:	429d      	cmp	r5, r3
    5b72:	ddf0      	ble.n	5b56 <handleSPI+0xa16>
					lowestEmptyMapping = j;
    5b74:	b2dd      	uxtb	r5, r3
    5b76:	e7ee      	b.n	5b56 <handleSPI+0xa16>
			if (foundOne == 0)
    5b78:	f1b8 0f00 	cmp.w	r8, #0
    5b7c:	d110      	bne.n	5ba0 <handleSPI+0xa60>
				numMappings++;
    5b7e:	4a46      	ldr	r2, [pc, #280]	; (5c98 <handleSPI+0xb58>)
    5b80:	7813      	ldrb	r3, [r2, #0]
    5b82:	3301      	adds	r3, #1
    5b84:	7013      	strb	r3, [r2, #0]
				mappings[whichMapping].destNumber = destNumber;
    5b86:	4a43      	ldr	r2, [pc, #268]	; (5c94 <handleSPI+0xb54>)
    5b88:	234c      	movs	r3, #76	; 0x4c
    5b8a:	fb05 f303 	mul.w	r3, r5, r3
    5b8e:	18d1      	adds	r1, r2, r3
    5b90:	54d0      	strb	r0, [r2, r3]
				mappings[whichMapping].dest = &params[destNumber];
    5b92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5b96:	4b38      	ldr	r3, [pc, #224]	; (5c78 <handleSPI+0xb38>)
    5b98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5b9c:	6048      	str	r0, [r1, #4]
				whichMapping = lowestEmptyMapping;
    5b9e:	462e      	mov	r6, r5
			if (mappingChangeType == SourceID)
    5ba0:	f1be 0f00 	cmp.w	lr, #0
    5ba4:	f040 8082 	bne.w	5cac <handleSPI+0xb6c>
				mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5ba8:	4632      	mov	r2, r6
    5baa:	4b3a      	ldr	r3, [pc, #232]	; (5c94 <handleSPI+0xb54>)
    5bac:	214c      	movs	r1, #76	; 0x4c
    5bae:	fb01 3306 	mla	r3, r1, r6, r3
    5bb2:	4463      	add	r3, ip
    5bb4:	2101      	movs	r1, #1
    5bb6:	f883 1020 	strb.w	r1, [r3, #32]
				if (source == 255)
    5bba:	2fff      	cmp	r7, #255	; 0xff
    5bbc:	d009      	beq.n	5bd2 <handleSPI+0xa92>
					mappings[whichMapping].hookActive[whichSlot] = 1;
    5bbe:	4b35      	ldr	r3, [pc, #212]	; (5c94 <handleSPI+0xb54>)
    5bc0:	214c      	movs	r1, #76	; 0x4c
    5bc2:	fb01 3306 	mla	r3, r1, r6, r3
    5bc6:	4463      	add	r3, ip
    5bc8:	2101      	movs	r1, #1
    5bca:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5bce:	2100      	movs	r1, #0
    5bd0:	e029      	b.n	5c26 <handleSPI+0xae6>
					mappings[whichMapping].hookActive[whichSlot] = 0;
    5bd2:	4b30      	ldr	r3, [pc, #192]	; (5c94 <handleSPI+0xb54>)
    5bd4:	214c      	movs	r1, #76	; 0x4c
    5bd6:	fb01 3606 	mla	r6, r1, r6, r3
    5bda:	44b4      	add	ip, r6
    5bdc:	2300      	movs	r3, #0
    5bde:	f88c 3048 	strb.w	r3, [ip, #72]	; 0x48
					for (int i = 0; i < 3; i++)
    5be2:	e006      	b.n	5bf2 <handleSPI+0xab2>
							mappings[whichMapping].destNumber = 255;
    5be4:	214c      	movs	r1, #76	; 0x4c
    5be6:	fb02 f101 	mul.w	r1, r2, r1
    5bea:	482a      	ldr	r0, [pc, #168]	; (5c94 <handleSPI+0xb54>)
    5bec:	25ff      	movs	r5, #255	; 0xff
    5bee:	5445      	strb	r5, [r0, r1]
					for (int i = 0; i < 3; i++)
    5bf0:	3301      	adds	r3, #1
    5bf2:	2b02      	cmp	r3, #2
    5bf4:	ddf6      	ble.n	5be4 <handleSPI+0xaa4>
    5bf6:	f7ff bb36 	b.w	5266 <handleSPI+0x126>
						mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5bfa:	eb01 0347 	add.w	r3, r1, r7, lsl #1
    5bfe:	4d27      	ldr	r5, [pc, #156]	; (5c9c <handleSPI+0xb5c>)
    5c00:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5c04:	4823      	ldr	r0, [pc, #140]	; (5c94 <handleSPI+0xb54>)
    5c06:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    5c0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5c0e:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    5c12:	440b      	add	r3, r1
    5c14:	1c9e      	adds	r6, r3, #2
    5c16:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
						mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    5c1a:	3308      	adds	r3, #8
    5c1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    5c20:	481f      	ldr	r0, [pc, #124]	; (5ca0 <handleSPI+0xb60>)
    5c22:	6058      	str	r0, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5c24:	3101      	adds	r1, #1
    5c26:	2901      	cmp	r1, #1
    5c28:	dde7      	ble.n	5bfa <handleSPI+0xaba>
					if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5c2a:	2f03      	cmp	r7, #3
    5c2c:	dc07      	bgt.n	5c3e <handleSPI+0xafe>
						mappings[whichMapping].sourceSmoothed[whichSlot] = 0;
    5c2e:	4b19      	ldr	r3, [pc, #100]	; (5c94 <handleSPI+0xb54>)
    5c30:	214c      	movs	r1, #76	; 0x4c
    5c32:	fb01 3302 	mla	r3, r1, r2, r3
    5c36:	4463      	add	r3, ip
    5c38:	2100      	movs	r1, #0
    5c3a:	f883 1020 	strb.w	r1, [r3, #32]
					if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5c3e:	f1a7 0318 	sub.w	r3, r7, #24
    5c42:	2b03      	cmp	r3, #3
    5c44:	d803      	bhi.n	5c4e <handleSPI+0xb0e>
						lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    5c46:	461f      	mov	r7, r3
    5c48:	4b16      	ldr	r3, [pc, #88]	; (5ca4 <handleSPI+0xb64>)
    5c4a:	2101      	movs	r1, #1
    5c4c:	55d9      	strb	r1, [r3, r7]
					mappings[whichMapping].amount[whichSlot] = 0.0f;
    5c4e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    5c52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5c56:	4463      	add	r3, ip
    5c58:	330e      	adds	r3, #14
    5c5a:	4a0e      	ldr	r2, [pc, #56]	; (5c94 <handleSPI+0xb54>)
    5c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5c60:	2200      	movs	r2, #0
    5c62:	605a      	str	r2, [r3, #4]
    5c64:	f7ff baff 	b.w	5266 <handleSPI+0x126>
    5c68:	2001978c 	.word	0x2001978c
    5c6c:	20000058 	.word	0x20000058
    5c70:	20000054 	.word	0x20000054
    5c74:	66666667 	.word	0x66666667
    5c78:	20019798 	.word	0x20019798
    5c7c:	20018dc8 	.word	0x20018dc8
    5c80:	2aaaaaab 	.word	0x2aaaaaab
    5c84:	20016c9c 	.word	0x20016c9c
    5c88:	42fe0000 	.word	0x42fe0000
    5c8c:	2001977c 	.word	0x2001977c
    5c90:	20019780 	.word	0x20019780
    5c94:	20018dfc 	.word	0x20018dfc
    5c98:	20019788 	.word	0x20019788
    5c9c:	200147bc 	.word	0x200147bc
    5ca0:	20000748 	.word	0x20000748
    5ca4:	20005404 	.word	0x20005404
    5ca8:	37fffffc 	.word	0x37fffffc
			else if (mappingChangeType == Amount)
    5cac:	f1be 0f01 	cmp.w	lr, #1
    5cb0:	d005      	beq.n	5cbe <handleSPI+0xb7e>
			else if (mappingChangeType == ScalarID)
    5cb2:	f1be 0f02 	cmp.w	lr, #2
    5cb6:	f47f aad6 	bne.w	5266 <handleSPI+0x126>
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5cba:	2200      	movs	r2, #0
    5cbc:	e022      	b.n	5d04 <handleSPI+0xbc4>
				mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    5cbe:	ee07 7a90 	vmov	s15, r7
    5cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5cc6:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 5ca8 <handleSPI+0xb68>
    5cca:	ee67 7a87 	vmul.f32	s15, s15, s14
    5cce:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    5cd2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    5cd6:	4463      	add	r3, ip
    5cd8:	330e      	adds	r3, #14
    5cda:	4a19      	ldr	r2, [pc, #100]	; (5d40 <handleSPI+0xc00>)
    5cdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5ce0:	edc3 7a01 	vstr	s15, [r3, #4]
    5ce4:	f7ff babf 	b.w	5266 <handleSPI+0x126>
						mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    5ce8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    5cec:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    5cf0:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    5cf4:	4413      	add	r3, r2
    5cf6:	3308      	adds	r3, #8
    5cf8:	4911      	ldr	r1, [pc, #68]	; (5d40 <handleSPI+0xc00>)
    5cfa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5cfe:	4911      	ldr	r1, [pc, #68]	; (5d44 <handleSPI+0xc04>)
    5d00:	6059      	str	r1, [r3, #4]
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5d02:	3201      	adds	r2, #1
    5d04:	2a01      	cmp	r2, #1
    5d06:	f73f aaae 	bgt.w	5266 <handleSPI+0x126>
					if (scalar == 0xff)
    5d0a:	2fff      	cmp	r7, #255	; 0xff
    5d0c:	d0ec      	beq.n	5ce8 <handleSPI+0xba8>
						mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5d0e:	eb02 0347 	add.w	r3, r2, r7, lsl #1
    5d12:	480d      	ldr	r0, [pc, #52]	; (5d48 <handleSPI+0xc08>)
    5d14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5d18:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    5d1c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    5d20:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    5d24:	4413      	add	r3, r2
    5d26:	3308      	adds	r3, #8
    5d28:	4905      	ldr	r1, [pc, #20]	; (5d40 <handleSPI+0xc00>)
    5d2a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5d2e:	6058      	str	r0, [r3, #4]
						if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5d30:	f1a7 0318 	sub.w	r3, r7, #24
    5d34:	2b03      	cmp	r3, #3
    5d36:	d8e4      	bhi.n	5d02 <handleSPI+0xbc2>
							lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5d38:	4904      	ldr	r1, [pc, #16]	; (5d4c <handleSPI+0xc0c>)
    5d3a:	2001      	movs	r0, #1
    5d3c:	54c8      	strb	r0, [r1, r3]
    5d3e:	e7e0      	b.n	5d02 <handleSPI+0xbc2>
    5d40:	20018dfc 	.word	0x20018dfc
    5d44:	20000748 	.word	0x20000748
    5d48:	200147bc 	.word	0x200147bc
    5d4c:	20005404 	.word	0x20005404
    5d50:	f3af 8000 	nop.w
    5d54:	f3af 8000 	nop.w
    5d58:	f3af 8000 	nop.w
    5d5c:	f3af 8000 	nop.w

00005d60 <parsePreset>:
{
    5d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d64:	b083      	sub	sp, #12
    5d66:	4604      	mov	r4, r0
    5d68:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    5d6a:	2200      	movs	r2, #0
    5d6c:	2101      	movs	r1, #1
    5d6e:	48b5      	ldr	r0, [pc, #724]	; (6044 <parsePreset+0x2e4>)
    5d70:	f001 fc86 	bl	7680 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    5d74:	b672      	cpsid	i
	 presetReady = 0;
    5d76:	2300      	movs	r3, #0
    5d78:	4ab3      	ldr	r2, [pc, #716]	; (6048 <parsePreset+0x2e8>)
    5d7a:	6013      	str	r3, [r2, #0]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    5d7c:	e004      	b.n	5d88 <parsePreset+0x28>
		 audioOutBuffer[i] = 0;
    5d7e:	4ab3      	ldr	r2, [pc, #716]	; (604c <parsePreset+0x2ec>)
    5d80:	2100      	movs	r1, #0
    5d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    5d86:	3301      	adds	r3, #1
    5d88:	2b1f      	cmp	r3, #31
    5d8a:	ddf8      	ble.n	5d7e <parsePreset+0x1e>
	audioMasterLevel = 0.0f;
    5d8c:	4bb0      	ldr	r3, [pc, #704]	; (6050 <parsePreset+0x2f0>)
    5d8e:	2200      	movs	r2, #0
    5d90:	601a      	str	r2, [r3, #0]
	if (buffer[bufferIndex] == 17)
    5d92:	4bb0      	ldr	r3, [pc, #704]	; (6054 <parsePreset+0x2f4>)
    5d94:	781b      	ldrb	r3, [r3, #0]
    5d96:	2b11      	cmp	r3, #17
    5d98:	d003      	beq.n	5da2 <parsePreset+0x42>
	uint16_t bufferIndex = 0;
    5d9a:	2100      	movs	r1, #0
	uint16_t presetVersionNumber = 0;
    5d9c:	460e      	mov	r6, r1
	for (int i = 0; i < 14; i++)
    5d9e:	2300      	movs	r3, #0
    5da0:	e01b      	b.n	5dda <parsePreset+0x7a>
		if (buffer[bufferIndex + 1] == 18)
    5da2:	4bac      	ldr	r3, [pc, #688]	; (6054 <parsePreset+0x2f4>)
    5da4:	785b      	ldrb	r3, [r3, #1]
    5da6:	2b12      	cmp	r3, #18
    5da8:	d002      	beq.n	5db0 <parsePreset+0x50>
		bufferIndex = 4;
    5daa:	2104      	movs	r1, #4
	uint16_t presetVersionNumber = 0;
    5dac:	2600      	movs	r6, #0
    5dae:	e7f6      	b.n	5d9e <parsePreset+0x3e>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    5db0:	4ba8      	ldr	r3, [pc, #672]	; (6054 <parsePreset+0x2f4>)
    5db2:	789a      	ldrb	r2, [r3, #2]
    5db4:	78de      	ldrb	r6, [r3, #3]
    5db6:	eb06 2602 	add.w	r6, r6, r2, lsl #8
    5dba:	b2b6      	uxth	r6, r6
		bufferIndex = 4;
    5dbc:	2104      	movs	r1, #4
    5dbe:	e7ee      	b.n	5d9e <parsePreset+0x3e>
		presetName[i] = buffer[bufferIndex];
    5dc0:	4aa4      	ldr	r2, [pc, #656]	; (6054 <parsePreset+0x2f4>)
    5dc2:	5c57      	ldrb	r7, [r2, r1]
    5dc4:	4aa4      	ldr	r2, [pc, #656]	; (6058 <parsePreset+0x2f8>)
    5dc6:	54d7      	strb	r7, [r2, r3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5dc8:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    5dcc:	48a3      	ldr	r0, [pc, #652]	; (605c <parsePreset+0x2fc>)
    5dce:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    5dd2:	54d7      	strb	r7, [r2, r3]
		bufferIndex++;
    5dd4:	3101      	adds	r1, #1
    5dd6:	b289      	uxth	r1, r1
	for (int i = 0; i < 14; i++)
    5dd8:	3301      	adds	r3, #1
    5dda:	2b0d      	cmp	r3, #13
    5ddc:	ddf0      	ble.n	5dc0 <parsePreset+0x60>
	for (int j = 0; j < 8; j++)
    5dde:	2700      	movs	r7, #0
    5de0:	e013      	b.n	5e0a <parsePreset+0xaa>
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5de2:	4b9c      	ldr	r3, [pc, #624]	; (6054 <parsePreset+0x2f4>)
    5de4:	f813 c001 	ldrb.w	ip, [r3, r1]
    5de8:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    5dec:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    5df0:	0112      	lsls	r2, r2, #4
    5df2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5df6:	4a9a      	ldr	r2, [pc, #616]	; (6060 <parsePreset+0x300>)
    5df8:	4413      	add	r3, r2
    5dfa:	f803 c000 	strb.w	ip, [r3, r0]
			bufferIndex++;
    5dfe:	3101      	adds	r1, #1
    5e00:	b289      	uxth	r1, r1
		for (int k = 0; k < 14; k++)
    5e02:	3001      	adds	r0, #1
    5e04:	280d      	cmp	r0, #13
    5e06:	ddec      	ble.n	5de2 <parsePreset+0x82>
	for (int j = 0; j < 8; j++)
    5e08:	3701      	adds	r7, #1
    5e0a:	2f07      	cmp	r7, #7
    5e0c:	dc01      	bgt.n	5e12 <parsePreset+0xb2>
		for (int k = 0; k < 14; k++)
    5e0e:	2000      	movs	r0, #0
    5e10:	e7f8      	b.n	5e04 <parsePreset+0xa4>
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5e12:	4b90      	ldr	r3, [pc, #576]	; (6054 <parsePreset+0x2f4>)
    5e14:	5c5a      	ldrb	r2, [r3, r1]
    5e16:	1c48      	adds	r0, r1, #1
    5e18:	5c1b      	ldrb	r3, [r3, r0]
    5e1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5e1e:	b29b      	uxth	r3, r3
	if (paramCount > size)
    5e20:	461a      	mov	r2, r3
    5e22:	42a3      	cmp	r3, r4
    5e24:	dc1d      	bgt.n	5e62 <parsePreset+0x102>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    5e26:	eb01 0743 	add.w	r7, r1, r3, lsl #1
    5e2a:	f107 0c02 	add.w	ip, r7, #2
    5e2e:	4889      	ldr	r0, [pc, #548]	; (6054 <parsePreset+0x2f4>)
    5e30:	f810 c00c 	ldrb.w	ip, [r0, ip]
    5e34:	f107 0e03 	add.w	lr, r7, #3
    5e38:	f810 000e 	ldrb.w	r0, [r0, lr]
    5e3c:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    5e40:	b280      	uxth	r0, r0
	if (paramEndCheck != 0xefef)
    5e42:	f64e 7cef 	movw	ip, #61423	; 0xefef
    5e46:	4560      	cmp	r0, ip
    5e48:	d019      	beq.n	5e7e <parsePreset+0x11e>
		audioMasterLevel = 1.0f;
    5e4a:	4b81      	ldr	r3, [pc, #516]	; (6050 <parsePreset+0x2f0>)
    5e4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    5e50:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    5e52:	4b84      	ldr	r3, [pc, #528]	; (6064 <parsePreset+0x304>)
    5e54:	2200      	movs	r2, #0
    5e56:	601a      	str	r2, [r3, #0]
		 presetReady = 1;
    5e58:	4b7b      	ldr	r3, [pc, #492]	; (6048 <parsePreset+0x2e8>)
    5e5a:	2201      	movs	r2, #1
    5e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    5e5e:	b662      	cpsie	i
		return;
    5e60:	e00a      	b.n	5e78 <parsePreset+0x118>
		audioMasterLevel = 1.0f;
    5e62:	4b7b      	ldr	r3, [pc, #492]	; (6050 <parsePreset+0x2f0>)
    5e64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    5e68:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    5e6a:	4b7e      	ldr	r3, [pc, #504]	; (6064 <parsePreset+0x304>)
    5e6c:	2200      	movs	r2, #0
    5e6e:	601a      	str	r2, [r3, #0]
		 presetReady = 1;
    5e70:	4b75      	ldr	r3, [pc, #468]	; (6048 <parsePreset+0x2e8>)
    5e72:	2201      	movs	r2, #1
    5e74:	601a      	str	r2, [r3, #0]
    5e76:	b662      	cpsie	i
}
    5e78:	b003      	add	sp, #12
    5e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    5e7e:	f107 0c04 	add.w	ip, r7, #4
    5e82:	4874      	ldr	r0, [pc, #464]	; (6054 <parsePreset+0x2f4>)
    5e84:	f810 c00c 	ldrb.w	ip, [r0, ip]
    5e88:	3705      	adds	r7, #5
    5e8a:	5dc7      	ldrb	r7, [r0, r7]
    5e8c:	eb07 270c 	add.w	r7, r7, ip, lsl #8
    5e90:	b2b8      	uxth	r0, r7
    5e92:	9001      	str	r0, [sp, #4]
	if (presetVersionNumber == 0)
    5e94:	bb0e      	cbnz	r6, 5eda <parsePreset+0x17a>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    5e96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e9a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    5e9e:	fa11 f383 	uxtah	r3, r1, r3
    5ea2:	b29b      	uxth	r3, r3
    5ea4:	3306      	adds	r3, #6
    5ea6:	b29b      	uxth	r3, r3
	if (mappingEndLocation > size)
    5ea8:	42a3      	cmp	r3, r4
    5eaa:	dc20      	bgt.n	5eee <parsePreset+0x18e>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    5eac:	4869      	ldr	r0, [pc, #420]	; (6054 <parsePreset+0x2f4>)
    5eae:	5cc4      	ldrb	r4, [r0, r3]
    5eb0:	3301      	adds	r3, #1
    5eb2:	5cc3      	ldrb	r3, [r0, r3]
    5eb4:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    5eb8:	b29b      	uxth	r3, r3
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    5eba:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    5ebe:	4283      	cmp	r3, r0
    5ec0:	d021      	beq.n	5f06 <parsePreset+0x1a6>
		audioMasterLevel = 1.0f;
    5ec2:	4b63      	ldr	r3, [pc, #396]	; (6050 <parsePreset+0x2f0>)
    5ec4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    5ec8:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    5eca:	4b66      	ldr	r3, [pc, #408]	; (6064 <parsePreset+0x304>)
    5ecc:	2200      	movs	r2, #0
    5ece:	601a      	str	r2, [r3, #0]
		 presetReady = 1;
    5ed0:	4b5d      	ldr	r3, [pc, #372]	; (6048 <parsePreset+0x2e8>)
    5ed2:	2201      	movs	r2, #1
    5ed4:	601a      	str	r2, [r3, #0]
    5ed6:	b662      	cpsie	i
		return;
    5ed8:	e7ce      	b.n	5e78 <parsePreset+0x118>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    5eda:	9801      	ldr	r0, [sp, #4]
    5edc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5ee0:	4403      	add	r3, r0
    5ee2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    5ee6:	b29b      	uxth	r3, r3
    5ee8:	3306      	adds	r3, #6
    5eea:	b29b      	uxth	r3, r3
    5eec:	e7dc      	b.n	5ea8 <parsePreset+0x148>
		audioMasterLevel = 1.0f;
    5eee:	4b58      	ldr	r3, [pc, #352]	; (6050 <parsePreset+0x2f0>)
    5ef0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    5ef4:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    5ef6:	4b5b      	ldr	r3, [pc, #364]	; (6064 <parsePreset+0x304>)
    5ef8:	2200      	movs	r2, #0
    5efa:	601a      	str	r2, [r3, #0]
		 presetReady = 1;
    5efc:	4b52      	ldr	r3, [pc, #328]	; (6048 <parsePreset+0x2e8>)
    5efe:	2201      	movs	r2, #1
    5f00:	601a      	str	r2, [r3, #0]
    5f02:	b662      	cpsie	i
		return;
    5f04:	e7b8      	b.n	5e78 <parsePreset+0x118>
	bufferIndex = bufferIndex + 2;
    5f06:	3102      	adds	r1, #2
    5f08:	b28c      	uxth	r4, r1
	for (int i = 0; i < paramCount; i++)
    5f0a:	2000      	movs	r0, #0
    5f0c:	e028      	b.n	5f60 <parsePreset+0x200>
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5f0e:	4b51      	ldr	r3, [pc, #324]	; (6054 <parsePreset+0x2f4>)
    5f10:	f813 c004 	ldrb.w	ip, [r3, r4]
    5f14:	f104 0e01 	add.w	lr, r4, #1
    5f18:	f813 300e 	ldrb.w	r3, [r3, lr]
    5f1c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    5f20:	ee07 3a90 	vmov	s15, r3
    5f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5f28:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 6068 <parsePreset+0x308>
    5f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
    5f30:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    5f34:	eb03 0c01 	add.w	ip, r3, r1
    5f38:	4b4c      	ldr	r3, [pc, #304]	; (606c <parsePreset+0x30c>)
    5f3a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    5f3e:	edc3 7a00 	vstr	s15, [r3]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5f42:	3101      	adds	r1, #1
    5f44:	2901      	cmp	r1, #1
    5f46:	dde2      	ble.n	5f0e <parsePreset+0x1ae>
		params[i].scaleFunc = &scaleDefault;
    5f48:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    5f4c:	4b47      	ldr	r3, [pc, #284]	; (606c <parsePreset+0x30c>)
    5f4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5f52:	4947      	ldr	r1, [pc, #284]	; (6070 <parsePreset+0x310>)
    5f54:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    5f56:	4947      	ldr	r1, [pc, #284]	; (6074 <parsePreset+0x314>)
    5f58:	6159      	str	r1, [r3, #20]
		bufferIndex += 2;
    5f5a:	3402      	adds	r4, #2
    5f5c:	b2a4      	uxth	r4, r4
	for (int i = 0; i < paramCount; i++)
    5f5e:	3001      	adds	r0, #1
    5f60:	4282      	cmp	r2, r0
    5f62:	dd16      	ble.n	5f92 <parsePreset+0x232>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5f64:	2100      	movs	r1, #0
    5f66:	e7ed      	b.n	5f44 <parsePreset+0x1e4>
			params[i].zeroToOneVal[v] = 0.0f;
    5f68:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
    5f6c:	18c8      	adds	r0, r1, r3
    5f6e:	493f      	ldr	r1, [pc, #252]	; (606c <parsePreset+0x30c>)
    5f70:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    5f74:	2000      	movs	r0, #0
    5f76:	6008      	str	r0, [r1, #0]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5f78:	3301      	adds	r3, #1
    5f7a:	2b01      	cmp	r3, #1
    5f7c:	ddf4      	ble.n	5f68 <parsePreset+0x208>
		params[i].scaleFunc = &scaleDefault;
    5f7e:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
    5f82:	4b3a      	ldr	r3, [pc, #232]	; (606c <parsePreset+0x30c>)
    5f84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5f88:	4939      	ldr	r1, [pc, #228]	; (6070 <parsePreset+0x310>)
    5f8a:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    5f8c:	4939      	ldr	r1, [pc, #228]	; (6074 <parsePreset+0x314>)
    5f8e:	6159      	str	r1, [r3, #20]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    5f90:	3201      	adds	r2, #1
    5f92:	2a9b      	cmp	r2, #155	; 0x9b
    5f94:	dc01      	bgt.n	5f9a <parsePreset+0x23a>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5f96:	2300      	movs	r3, #0
    5f98:	e7ef      	b.n	5f7a <parsePreset+0x21a>
	params[Transpose].scaleFunc = &scaleTranspose;
    5f9a:	4b34      	ldr	r3, [pc, #208]	; (606c <parsePreset+0x30c>)
    5f9c:	4a36      	ldr	r2, [pc, #216]	; (6078 <parsePreset+0x318>)
    5f9e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    5fa2:	4a36      	ldr	r2, [pc, #216]	; (607c <parsePreset+0x31c>)
    5fa4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    5fa8:	4a35      	ldr	r2, [pc, #212]	; (6080 <parsePreset+0x320>)
    5faa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    5fae:	4835      	ldr	r0, [pc, #212]	; (6084 <parsePreset+0x324>)
    5fb0:	f8c3 02e8 	str.w	r0, [r3, #744]	; 0x2e8
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    5fb4:	4934      	ldr	r1, [pc, #208]	; (6088 <parsePreset+0x328>)
    5fb6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    5fba:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    5fbe:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    5fc2:	f8c3 0454 	str.w	r0, [r3, #1108]	; 0x454
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    5fc6:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    5fca:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    5fce:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    5fd2:	f8c3 05c0 	str.w	r0, [r3, #1472]	; 0x5c0
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    5fd6:	f8c3 15dc 	str.w	r1, [r3, #1500]	; 0x5dc
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    5fda:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    5fde:	492b      	ldr	r1, [pc, #172]	; (608c <parsePreset+0x32c>)
    5fe0:	f8c3 1aac 	str.w	r1, [r3, #2732]	; 0xaac
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    5fe4:	4a2a      	ldr	r2, [pc, #168]	; (6090 <parsePreset+0x330>)
    5fe6:	f8c3 2ae4 	str.w	r2, [r3, #2788]	; 0xae4
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    5fea:	f8c3 1b54 	str.w	r1, [r3, #2900]	; 0xb54
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    5fee:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    5ff2:	4a28      	ldr	r2, [pc, #160]	; (6094 <parsePreset+0x334>)
    5ff4:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    5ff8:	f8c3 2bfc 	str.w	r2, [r3, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    5ffc:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    6000:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    6004:	f8c3 2ca4 	str.w	r2, [r3, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    6008:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    600c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    6010:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    6014:	f8c3 2d84 	str.w	r2, [r3, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    6018:	f8c3 2dd8 	str.w	r2, [r3, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    601c:	f8c3 2df4 	str.w	r2, [r3, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    6020:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    6024:	4a1c      	ldr	r2, [pc, #112]	; (6098 <parsePreset+0x338>)
    6026:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    602a:	f8c3 2f0c 	str.w	r2, [r3, #3852]	; 0xf0c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    602e:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    6032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    6036:	625a      	str	r2, [r3, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    6038:	4a18      	ldr	r2, [pc, #96]	; (609c <parsePreset+0x33c>)
    603a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	for (int i = 0; i < NUM_EFFECT; i++)
    603e:	f04f 0900 	mov.w	r9, #0
    6042:	e05a      	b.n	60fa <parsePreset+0x39a>
    6044:	58020000 	.word	0x58020000
    6048:	20005844 	.word	0x20005844
    604c:	30000040 	.word	0x30000040
    6050:	20000744 	.word	0x20000744
    6054:	300001c0 	.word	0x300001c0
    6058:	2001a8a8 	.word	0x2001a8a8
    605c:	3003a000 	.word	0x3003a000
    6060:	3003a380 	.word	0x3003a380
    6064:	2001a8bc 	.word	0x2001a8bc
    6068:	377ffff6 	.word	0x377ffff6
    606c:	20019798 	.word	0x20019798
    6070:	00004e61 	.word	0x00004e61
    6074:	00004e41 	.word	0x00004e41
    6078:	00004e81 	.word	0x00004e81
    607c:	00004ec1 	.word	0x00004ec1
    6080:	00004da1 	.word	0x00004da1
    6084:	00004dc1 	.word	0x00004dc1
    6088:	00004de1 	.word	0x00004de1
    608c:	00004e01 	.word	0x00004e01
    6090:	00004f01 	.word	0x00004f01
    6094:	00004fa1 	.word	0x00004fa1
    6098:	00005041 	.word	0x00005041
    609c:	00004e21 	.word	0x00004e21
			setEffectsFunctions(effectType, i);
    60a0:	4649      	mov	r1, r9
    60a2:	f001 fb91 	bl	77c8 <__setEffectsFunctions_veneer>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    60a6:	f108 0801 	add.w	r8, r8, #1
    60aa:	f1b8 0f01 	cmp.w	r8, #1
    60ae:	dc22      	bgt.n	60f6 <parsePreset+0x396>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    60b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
    60b4:	333f      	adds	r3, #63	; 0x3f
    60b6:	4a5a      	ldr	r2, [pc, #360]	; (6220 <parsePreset+0x4c0>)
    60b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    60bc:	4443      	add	r3, r8
    60be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    60c2:	edd3 7a00 	vldr	s15, [r3]
    60c6:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    60ca:	ee67 7a87 	vmul.f32	s15, s15, s14
    60ce:	fef8 7a67 	vrinta.f32	s15, s15
    60d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    60d6:	edcd 7a00 	vstr	s15, [sp]
    60da:	f89d 0000 	ldrb.w	r0, [sp]
			param *FXAlias = &params[Effect1Param1 + (EffectParamsNum*i)];
    60de:	f109 0108 	add.w	r1, r9, #8
    60e2:	018b      	lsls	r3, r1, #6
    60e4:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
    60e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			if (effectType > FXLowpass) // this assumes filters are the last effects
    60ec:	280b      	cmp	r0, #11
    60ee:	d9d7      	bls.n	60a0 <parsePreset+0x340>
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    60f0:	4b4c      	ldr	r3, [pc, #304]	; (6224 <parsePreset+0x4c4>)
    60f2:	6493      	str	r3, [r2, #72]	; 0x48
    60f4:	e7d4      	b.n	60a0 <parsePreset+0x340>
	for (int i = 0; i < NUM_EFFECT; i++)
    60f6:	f109 0901 	add.w	r9, r9, #1
    60fa:	f1b9 0f03 	cmp.w	r9, #3
    60fe:	dc02      	bgt.n	6106 <parsePreset+0x3a6>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6100:	f04f 0800 	mov.w	r8, #0
    6104:	e7d1      	b.n	60aa <parsePreset+0x34a>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6106:	f04f 0b00 	mov.w	fp, #0
    610a:	e01a      	b.n	6142 <parsePreset+0x3e2>
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    610c:	4f44      	ldr	r7, [pc, #272]	; (6220 <parsePreset+0x4c0>)
    610e:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    6112:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6116:	691b      	ldr	r3, [r3, #16]
    6118:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
    611c:	44d9      	add	r9, fp
    611e:	eb07 0289 	add.w	r2, r7, r9, lsl #2
    6122:	ed92 0a00 	vldr	s0, [r2]
    6126:	4798      	blx	r3
    6128:	f109 0902 	add.w	r9, r9, #2
    612c:	eb07 0a89 	add.w	sl, r7, r9, lsl #2
    6130:	ed8a 0a00 	vstr	s0, [sl]
		for (int i = 0; i < NUM_PARAMS; i++)
    6134:	f108 0801 	add.w	r8, r8, #1
    6138:	f1b8 0f9b 	cmp.w	r8, #155	; 0x9b
    613c:	dde6      	ble.n	610c <parsePreset+0x3ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    613e:	f10b 0b01 	add.w	fp, fp, #1
    6142:	f1bb 0f01 	cmp.w	fp, #1
    6146:	dc02      	bgt.n	614e <parsePreset+0x3ee>
		for (int i = 0; i < NUM_PARAMS; i++)
    6148:	f04f 0800 	mov.w	r8, #0
    614c:	e7f4      	b.n	6138 <parsePreset+0x3d8>
	for (int i = 0; i < NUM_OSC; i++)
    614e:	f04f 0900 	mov.w	r9, #0
	uint8_t enabledCount = 0;
    6152:	46cb      	mov	fp, r9
    6154:	e005      	b.n	6162 <parsePreset+0x402>
			oscsEnabled[i] = 0;
    6156:	4b34      	ldr	r3, [pc, #208]	; (6228 <parsePreset+0x4c8>)
    6158:	2200      	movs	r2, #0
    615a:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
	for (int i = 0; i < NUM_OSC; i++)
    615e:	f109 0901 	add.w	r9, r9, #1
    6162:	f1b9 0f02 	cmp.w	r9, #2
    6166:	dc31      	bgt.n	61cc <parsePreset+0x46c>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    6168:	eb09 0849 	add.w	r8, r9, r9, lsl #1
    616c:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    6170:	f108 0323 	add.w	r3, r8, #35	; 0x23
    6174:	4f2a      	ldr	r7, [pc, #168]	; (6220 <parsePreset+0x4c0>)
    6176:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    617a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    617e:	edd3 7a02 	vldr	s15, [r3, #8]
    6182:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    6186:	ee67 7a87 	vmul.f32	s15, s15, s14
    618a:	fef8 7a67 	vrinta.f32	s15, s15
		setOscilllatorShapes(oscshape, i);
    618e:	4649      	mov	r1, r9
    6190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6194:	ee17 0a90 	vmov	r0, s15
    6198:	f001 fa32 	bl	7600 <__setOscilllatorShapes_veneer>
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    619c:	f108 0818 	add.w	r8, r8, #24
    61a0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    61a4:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    61a8:	ed98 7a02 	vldr	s14, [r8, #8]
    61ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    61b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    61b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61b8:	ddcd      	ble.n	6156 <parsePreset+0x3f6>
			enabledCount++;
    61ba:	f10b 0b01 	add.w	fp, fp, #1
    61be:	fa5f fb8b 	uxtb.w	fp, fp
			oscsEnabled[i] = 1;
    61c2:	4b19      	ldr	r3, [pc, #100]	; (6228 <parsePreset+0x4c8>)
    61c4:	2201      	movs	r2, #1
    61c6:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
    61ca:	e7c8      	b.n	615e <parsePreset+0x3fe>
	oscAmpMult = oscAmpMultArray[enabledCount];
    61cc:	4b17      	ldr	r3, [pc, #92]	; (622c <parsePreset+0x4cc>)
    61ce:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
    61d2:	f8db 2000 	ldr.w	r2, [fp]
    61d6:	4b16      	ldr	r3, [pc, #88]	; (6230 <parsePreset+0x4d0>)
    61d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_FILT; i++)
    61da:	f04f 0800 	mov.w	r8, #0
    61de:	e019      	b.n	6214 <parsePreset+0x4b4>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    61e0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    61e4:	005b      	lsls	r3, r3, #1
    61e6:	3360      	adds	r3, #96	; 0x60
    61e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    61ec:	4a0c      	ldr	r2, [pc, #48]	; (6220 <parsePreset+0x4c0>)
    61ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    61f2:	edd3 7a02 	vldr	s15, [r3, #8]
    61f6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    61fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    61fe:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    6202:	4641      	mov	r1, r8
    6204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6208:	ee17 0a90 	vmov	r0, s15
    620c:	f001 f9a0 	bl	7550 <__setFilterTypes_veneer>
	for (int i = 0; i < NUM_FILT; i++)
    6210:	f108 0801 	add.w	r8, r8, #1
    6214:	f1b8 0f01 	cmp.w	r8, #1
    6218:	dde2      	ble.n	61e0 <parsePreset+0x480>
	for (int i = 0; i < NUM_LFOS; i++)
    621a:	f04f 0800 	mov.w	r8, #0
    621e:	e022      	b.n	6266 <parsePreset+0x506>
    6220:	20019798 	.word	0x20019798
    6224:	00004f01 	.word	0x00004f01
    6228:	2001978c 	.word	0x2001978c
    622c:	20000058 	.word	0x20000058
    6230:	20000054 	.word	0x20000054
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    6234:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    6238:	3387      	adds	r3, #135	; 0x87
    623a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    623e:	4aa2      	ldr	r2, [pc, #648]	; (64c8 <parsePreset+0x768>)
    6240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6244:	edd3 7a02 	vldr	s15, [r3, #8]
    6248:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    624c:	ee67 7a87 	vmul.f32	s15, s15, s14
    6250:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    6254:	4641      	mov	r1, r8
    6256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    625a:	ee17 0a90 	vmov	r0, s15
    625e:	f001 fb37 	bl	78d0 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    6262:	f108 0801 	add.w	r8, r8, #1
    6266:	f1b8 0f03 	cmp.w	r8, #3
    626a:	dde3      	ble.n	6234 <parsePreset+0x4d4>
	params[NoiseTilt].setParam = &noiseSetTilt;
    626c:	4b96      	ldr	r3, [pc, #600]	; (64c8 <parsePreset+0x768>)
    626e:	4a97      	ldr	r2, [pc, #604]	; (64cc <parsePreset+0x76c>)
    6270:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    6274:	4a96      	ldr	r2, [pc, #600]	; (64d0 <parsePreset+0x770>)
    6276:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    627a:	4a96      	ldr	r2, [pc, #600]	; (64d4 <parsePreset+0x774>)
    627c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	params[Master].setParam = &setMaster;
    6280:	4a95      	ldr	r2, [pc, #596]	; (64d8 <parsePreset+0x778>)
    6282:	64da      	str	r2, [r3, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    6284:	4a95      	ldr	r2, [pc, #596]	; (64dc <parsePreset+0x77c>)
    6286:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    628a:	4a95      	ldr	r2, [pc, #596]	; (64e0 <parsePreset+0x780>)
    628c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    6290:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
    6294:	4a93      	ldr	r2, [pc, #588]	; (64e4 <parsePreset+0x784>)
    6296:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    629a:	4a93      	ldr	r2, [pc, #588]	; (64e8 <parsePreset+0x788>)
    629c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    62a0:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    62a4:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    62a8:	4a90      	ldr	r2, [pc, #576]	; (64ec <parsePreset+0x78c>)
    62aa:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    62ae:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    62b2:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    62b6:	4a8e      	ldr	r2, [pc, #568]	; (64f0 <parsePreset+0x790>)
    62b8:	6810      	ldr	r0, [r2, #0]
    62ba:	f8c3 0714 	str.w	r0, [r3, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    62be:	6850      	ldr	r0, [r2, #4]
    62c0:	f8c3 0730 	str.w	r0, [r3, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    62c4:	6890      	ldr	r0, [r2, #8]
    62c6:	f8c3 074c 	str.w	r0, [r3, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    62ca:	68d0      	ldr	r0, [r2, #12]
    62cc:	f8c3 0768 	str.w	r0, [r3, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    62d0:	6910      	ldr	r0, [r2, #16]
    62d2:	f8c3 0784 	str.w	r0, [r3, #1924]	; 0x784
	params[Effect1Mix].setParam = &fxMixSet;
    62d6:	f8df e234 	ldr.w	lr, [pc, #564]	; 650c <parsePreset+0x7ac>
    62da:	f8c3 e7a0 	str.w	lr, [r3, #1952]	; 0x7a0
	params[Effect1PostGain].setParam = &fxPostGainSet;
    62de:	4885      	ldr	r0, [pc, #532]	; (64f4 <parsePreset+0x794>)
    62e0:	f8c3 07bc 	str.w	r0, [r3, #1980]	; 0x7bc
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    62e4:	6957      	ldr	r7, [r2, #20]
    62e6:	f8c3 77f4 	str.w	r7, [r3, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    62ea:	6997      	ldr	r7, [r2, #24]
    62ec:	f8c3 7810 	str.w	r7, [r3, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    62f0:	69d7      	ldr	r7, [r2, #28]
    62f2:	f8c3 782c 	str.w	r7, [r3, #2092]	; 0x82c
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    62f6:	6a17      	ldr	r7, [r2, #32]
    62f8:	f8c3 7848 	str.w	r7, [r3, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    62fc:	6a57      	ldr	r7, [r2, #36]	; 0x24
    62fe:	f8c3 7864 	str.w	r7, [r3, #2148]	; 0x864
	params[Effect2Mix].setParam = &fxMixSet;
    6302:	f8c3 e880 	str.w	lr, [r3, #2176]	; 0x880
	params[Effect2PostGain].setParam = &fxPostGainSet;
    6306:	f8c3 089c 	str.w	r0, [r3, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    630a:	6a97      	ldr	r7, [r2, #40]	; 0x28
    630c:	f8c3 78d4 	str.w	r7, [r3, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    6310:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
    6312:	f8c3 78f0 	str.w	r7, [r3, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    6316:	6b17      	ldr	r7, [r2, #48]	; 0x30
    6318:	f8c3 790c 	str.w	r7, [r3, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    631c:	6b57      	ldr	r7, [r2, #52]	; 0x34
    631e:	f8c3 7928 	str.w	r7, [r3, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    6322:	6b97      	ldr	r7, [r2, #56]	; 0x38
    6324:	f8c3 7944 	str.w	r7, [r3, #2372]	; 0x944
	params[Effect3Mix].setParam = &fxMixSet;
    6328:	f8c3 e960 	str.w	lr, [r3, #2400]	; 0x960
	params[Effect3PostGain].setParam = &fxPostGainSet;
    632c:	f8c3 097c 	str.w	r0, [r3, #2428]	; 0x97c
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    6330:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
    6332:	f8c3 79b4 	str.w	r7, [r3, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    6336:	6c17      	ldr	r7, [r2, #64]	; 0x40
    6338:	f8c3 79d0 	str.w	r7, [r3, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    633c:	6c57      	ldr	r7, [r2, #68]	; 0x44
    633e:	f8c3 79ec 	str.w	r7, [r3, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    6342:	6c97      	ldr	r7, [r2, #72]	; 0x48
    6344:	f8c3 7a08 	str.w	r7, [r3, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    6348:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    634a:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	params[Effect4Mix].setParam = &fxMixSet;
    634e:	f8c3 ea40 	str.w	lr, [r3, #2624]	; 0xa40
	params[Effect4PostGain].setParam = &fxPostGainSet;
    6352:	f8c3 0a5c 	str.w	r0, [r3, #2652]	; 0xa5c
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    6356:	4a68      	ldr	r2, [pc, #416]	; (64f8 <parsePreset+0x798>)
    6358:	6810      	ldr	r0, [r2, #0]
    635a:	f8c3 0ae8 	str.w	r0, [r3, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    635e:	6850      	ldr	r0, [r2, #4]
    6360:	f8c3 0acc 	str.w	r0, [r3, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    6364:	6890      	ldr	r0, [r2, #8]
    6366:	f8c3 0b90 	str.w	r0, [r3, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    636a:	68d2      	ldr	r2, [r2, #12]
    636c:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    6370:	f8df 819c 	ldr.w	r8, [pc, #412]	; 6510 <parsePreset+0x7b0>
    6374:	f8c3 8be4 	str.w	r8, [r3, #3044]	; 0xbe4
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    6378:	f8df e198 	ldr.w	lr, [pc, #408]	; 6514 <parsePreset+0x7b4>
    637c:	f8c3 ec00 	str.w	lr, [r3, #3072]	; 0xc00
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    6380:	f8df c194 	ldr.w	ip, [pc, #404]	; 6518 <parsePreset+0x7b8>
    6384:	f8c3 cc1c 	str.w	ip, [r3, #3100]	; 0xc1c
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    6388:	485c      	ldr	r0, [pc, #368]	; (64fc <parsePreset+0x79c>)
    638a:	f8c3 0c38 	str.w	r0, [r3, #3128]	; 0xc38
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    638e:	4a5c      	ldr	r2, [pc, #368]	; (6500 <parsePreset+0x7a0>)
    6390:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    6394:	f8c3 8c8c 	str.w	r8, [r3, #3212]	; 0xc8c
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    6398:	f8c3 eca8 	str.w	lr, [r3, #3240]	; 0xca8
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    639c:	f8c3 ccc4 	str.w	ip, [r3, #3268]	; 0xcc4
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    63a0:	f8c3 0ce0 	str.w	r0, [r3, #3296]	; 0xce0
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    63a4:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    63a8:	f8c3 8d34 	str.w	r8, [r3, #3380]	; 0xd34
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    63ac:	f8c3 ed50 	str.w	lr, [r3, #3408]	; 0xd50
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    63b0:	f8c3 cd6c 	str.w	ip, [r3, #3436]	; 0xd6c
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    63b4:	f8c3 0d88 	str.w	r0, [r3, #3464]	; 0xd88
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    63b8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    63bc:	f8c3 8ddc 	str.w	r8, [r3, #3548]	; 0xddc
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    63c0:	f8c3 edf8 	str.w	lr, [r3, #3576]	; 0xdf8
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    63c4:	f8c3 ce14 	str.w	ip, [r3, #3604]	; 0xe14
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    63c8:	f8c3 0e30 	str.w	r0, [r3, #3632]	; 0xe30
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    63cc:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    63d0:	4a4c      	ldr	r2, [pc, #304]	; (6504 <parsePreset+0x7a4>)
    63d2:	6810      	ldr	r0, [r2, #0]
    63d4:	f8c3 0e84 	str.w	r0, [r3, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    63d8:	68d0      	ldr	r0, [r2, #12]
    63da:	f8c3 0f10 	str.w	r0, [r3, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    63de:	6990      	ldr	r0, [r2, #24]
    63e0:	f8c3 0f9c 	str.w	r0, [r3, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    63e4:	6a50      	ldr	r0, [r2, #36]	; 0x24
    63e6:	6288      	str	r0, [r1, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    63e8:	6850      	ldr	r0, [r2, #4]
    63ea:	f8c3 0ea0 	str.w	r0, [r3, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    63ee:	6910      	ldr	r0, [r2, #16]
    63f0:	f8c3 0f2c 	str.w	r0, [r3, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    63f4:	69d0      	ldr	r0, [r2, #28]
    63f6:	f8c3 0fb8 	str.w	r0, [r3, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    63fa:	6a90      	ldr	r0, [r2, #40]	; 0x28
    63fc:	6448      	str	r0, [r1, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    63fe:	6890      	ldr	r0, [r2, #8]
    6400:	f8c3 0ebc 	str.w	r0, [r3, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    6404:	6950      	ldr	r0, [r2, #20]
    6406:	f8c3 0f48 	str.w	r0, [r3, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    640a:	6a10      	ldr	r0, [r2, #32]
    640c:	f8c3 0fd4 	str.w	r0, [r3, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    6410:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6412:	660b      	str	r3, [r1, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    6414:	4b3c      	ldr	r3, [pc, #240]	; (6508 <parsePreset+0x7a8>)
    6416:	f8c1 30b4 	str.w	r3, [r1, #180]	; 0xb4
	for (int i = 0; i < NUM_PARAMS; i++)
    641a:	f04f 0800 	mov.w	r8, #0
    641e:	e095      	b.n	654c <parsePreset+0x7ec>
			params[i].objectNumber = 1;
    6420:	4b29      	ldr	r3, [pc, #164]	; (64c8 <parsePreset+0x768>)
    6422:	221c      	movs	r2, #28
    6424:	fb02 3308 	mla	r3, r2, r8, r3
    6428:	2201      	movs	r2, #1
    642a:	761a      	strb	r2, [r3, #24]
    642c:	e0e8      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 2;
    642e:	4b26      	ldr	r3, [pc, #152]	; (64c8 <parsePreset+0x768>)
    6430:	221c      	movs	r2, #28
    6432:	fb02 3308 	mla	r3, r2, r8, r3
    6436:	2202      	movs	r2, #2
    6438:	761a      	strb	r2, [r3, #24]
    643a:	e0e1      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 1;
    643c:	4b22      	ldr	r3, [pc, #136]	; (64c8 <parsePreset+0x768>)
    643e:	221c      	movs	r2, #28
    6440:	fb02 3308 	mla	r3, r2, r8, r3
    6444:	2201      	movs	r2, #1
    6446:	761a      	strb	r2, [r3, #24]
    6448:	e0da      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 1;
    644a:	4b1f      	ldr	r3, [pc, #124]	; (64c8 <parsePreset+0x768>)
    644c:	221c      	movs	r2, #28
    644e:	fb02 3308 	mla	r3, r2, r8, r3
    6452:	2201      	movs	r2, #1
    6454:	761a      	strb	r2, [r3, #24]
    6456:	e0d3      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 2;
    6458:	4b1b      	ldr	r3, [pc, #108]	; (64c8 <parsePreset+0x768>)
    645a:	221c      	movs	r2, #28
    645c:	fb02 3308 	mla	r3, r2, r8, r3
    6460:	2202      	movs	r2, #2
    6462:	761a      	strb	r2, [r3, #24]
    6464:	e0cc      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 3;
    6466:	4b18      	ldr	r3, [pc, #96]	; (64c8 <parsePreset+0x768>)
    6468:	221c      	movs	r2, #28
    646a:	fb02 3308 	mla	r3, r2, r8, r3
    646e:	2203      	movs	r2, #3
    6470:	761a      	strb	r2, [r3, #24]
    6472:	e0c5      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 1;
    6474:	4b14      	ldr	r3, [pc, #80]	; (64c8 <parsePreset+0x768>)
    6476:	221c      	movs	r2, #28
    6478:	fb02 3308 	mla	r3, r2, r8, r3
    647c:	2201      	movs	r2, #1
    647e:	761a      	strb	r2, [r3, #24]
    6480:	e0be      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 2;
    6482:	4b11      	ldr	r3, [pc, #68]	; (64c8 <parsePreset+0x768>)
    6484:	221c      	movs	r2, #28
    6486:	fb02 3308 	mla	r3, r2, r8, r3
    648a:	2202      	movs	r2, #2
    648c:	761a      	strb	r2, [r3, #24]
    648e:	e0b7      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 3;
    6490:	4b0d      	ldr	r3, [pc, #52]	; (64c8 <parsePreset+0x768>)
    6492:	221c      	movs	r2, #28
    6494:	fb02 3308 	mla	r3, r2, r8, r3
    6498:	2203      	movs	r2, #3
    649a:	761a      	strb	r2, [r3, #24]
    649c:	e0b0      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 1;
    649e:	4b0a      	ldr	r3, [pc, #40]	; (64c8 <parsePreset+0x768>)
    64a0:	221c      	movs	r2, #28
    64a2:	fb02 3308 	mla	r3, r2, r8, r3
    64a6:	2201      	movs	r2, #1
    64a8:	761a      	strb	r2, [r3, #24]
    64aa:	e0a9      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 2;
    64ac:	4b06      	ldr	r3, [pc, #24]	; (64c8 <parsePreset+0x768>)
    64ae:	221c      	movs	r2, #28
    64b0:	fb02 3308 	mla	r3, r2, r8, r3
    64b4:	2202      	movs	r2, #2
    64b6:	761a      	strb	r2, [r3, #24]
    64b8:	e0a2      	b.n	6600 <parsePreset+0x8a0>
			params[i].objectNumber = 3;
    64ba:	4b03      	ldr	r3, [pc, #12]	; (64c8 <parsePreset+0x768>)
    64bc:	221c      	movs	r2, #28
    64be:	fb02 3308 	mla	r3, r2, r8, r3
    64c2:	2203      	movs	r2, #3
    64c4:	761a      	strb	r2, [r3, #24]
    64c6:	e09b      	b.n	6600 <parsePreset+0x8a0>
    64c8:	20019798 	.word	0x20019798
    64cc:	000032c1 	.word	0x000032c1
    64d0:	00003361 	.word	0x00003361
    64d4:	00003321 	.word	0x00003321
    64d8:	00001581 	.word	0x00001581
    64dc:	000015a1 	.word	0x000015a1
    64e0:	000015c1 	.word	0x000015c1
    64e4:	00001601 	.word	0x00001601
    64e8:	00000f21 	.word	0x00000f21
    64ec:	00000f81 	.word	0x00000f81
    64f0:	20014c48 	.word	0x20014c48
    64f4:	00002541 	.word	0x00002541
    64f8:	20016c9c 	.word	0x20016c9c
    64fc:	000014e1 	.word	0x000014e1
    6500:	00001521 	.word	0x00001521
    6504:	20018dc8 	.word	0x20018dc8
    6508:	00001561 	.word	0x00001561
    650c:	00002521 	.word	0x00002521
    6510:	00001441 	.word	0x00001441
    6514:	00001481 	.word	0x00001481
    6518:	000014c1 	.word	0x000014c1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    651c:	49c8      	ldr	r1, [pc, #800]	; (6840 <parsePreset+0xae0>)
    651e:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    6522:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    6526:	6942      	ldr	r2, [r0, #20]
    6528:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    652c:	444b      	add	r3, r9
    652e:	3302      	adds	r3, #2
    6530:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6534:	4649      	mov	r1, r9
    6536:	7e00      	ldrb	r0, [r0, #24]
    6538:	ed93 0a00 	vldr	s0, [r3]
    653c:	4790      	blx	r2
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    653e:	f109 0901 	add.w	r9, r9, #1
    6542:	f1b9 0f01 	cmp.w	r9, #1
    6546:	dde9      	ble.n	651c <parsePreset+0x7bc>
	for (int i = 0; i < NUM_PARAMS; i++)
    6548:	f108 0801 	add.w	r8, r8, #1
    654c:	f1b8 0f9b 	cmp.w	r8, #155	; 0x9b
    6550:	dc59      	bgt.n	6606 <parsePreset+0x8a6>
		params[i].objectNumber = 0;
    6552:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    6556:	4aba      	ldr	r2, [pc, #744]	; (6840 <parsePreset+0xae0>)
    6558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    655c:	2200      	movs	r2, #0
    655e:	761a      	strb	r2, [r3, #24]
		if ((i >= Osc1) && (i < Osc2))
    6560:	f1a8 0218 	sub.w	r2, r8, #24
    6564:	2a0c      	cmp	r2, #12
    6566:	d94b      	bls.n	6600 <parsePreset+0x8a0>
		else if ((i >= Osc2) && (i < Osc3))
    6568:	f1a8 0225 	sub.w	r2, r8, #37	; 0x25
    656c:	2a0c      	cmp	r2, #12
    656e:	f67f af57 	bls.w	6420 <parsePreset+0x6c0>
		else if ((i >= Osc3) && (i < Effect1FXType))
    6572:	f1a8 0232 	sub.w	r2, r8, #50	; 0x32
    6576:	2a0c      	cmp	r2, #12
    6578:	f67f af59 	bls.w	642e <parsePreset+0x6ce>
		else if ((i >= Filter1) && (i < Filter2))
    657c:	f1a8 025f 	sub.w	r2, r8, #95	; 0x5f
    6580:	2a05      	cmp	r2, #5
    6582:	d93d      	bls.n	6600 <parsePreset+0x8a0>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    6584:	f1a8 0265 	sub.w	r2, r8, #101	; 0x65
    6588:	2a06      	cmp	r2, #6
    658a:	f67f af57 	bls.w	643c <parsePreset+0x6dc>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    658e:	f1a8 026c 	sub.w	r2, r8, #108	; 0x6c
    6592:	2a05      	cmp	r2, #5
    6594:	d934      	bls.n	6600 <parsePreset+0x8a0>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    6596:	f1a8 0272 	sub.w	r2, r8, #114	; 0x72
    659a:	2a05      	cmp	r2, #5
    659c:	f67f af55 	bls.w	644a <parsePreset+0x6ea>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    65a0:	f1a8 0278 	sub.w	r2, r8, #120	; 0x78
    65a4:	2a05      	cmp	r2, #5
    65a6:	f67f af57 	bls.w	6458 <parsePreset+0x6f8>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    65aa:	f1a8 027e 	sub.w	r2, r8, #126	; 0x7e
    65ae:	2a05      	cmp	r2, #5
    65b0:	f67f af59 	bls.w	6466 <parsePreset+0x706>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    65b4:	f1a8 0284 	sub.w	r2, r8, #132	; 0x84
    65b8:	2a04      	cmp	r2, #4
    65ba:	d921      	bls.n	6600 <parsePreset+0x8a0>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    65bc:	f1a8 0289 	sub.w	r2, r8, #137	; 0x89
    65c0:	2a04      	cmp	r2, #4
    65c2:	f67f af57 	bls.w	6474 <parsePreset+0x714>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    65c6:	f1a8 028e 	sub.w	r2, r8, #142	; 0x8e
    65ca:	2a04      	cmp	r2, #4
    65cc:	f67f af59 	bls.w	6482 <parsePreset+0x722>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    65d0:	f1a8 0293 	sub.w	r2, r8, #147	; 0x93
    65d4:	2a04      	cmp	r2, #4
    65d6:	f67f af5b 	bls.w	6490 <parsePreset+0x730>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    65da:	f1a8 023f 	sub.w	r2, r8, #63	; 0x3f
    65de:	2a07      	cmp	r2, #7
    65e0:	d90e      	bls.n	6600 <parsePreset+0x8a0>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    65e2:	f1a8 0247 	sub.w	r2, r8, #71	; 0x47
    65e6:	2a07      	cmp	r2, #7
    65e8:	f67f af59 	bls.w	649e <parsePreset+0x73e>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    65ec:	f1a8 024f 	sub.w	r2, r8, #79	; 0x4f
    65f0:	2a07      	cmp	r2, #7
    65f2:	f67f af5b 	bls.w	64ac <parsePreset+0x74c>
		else if ((i >= Effect4FXType) && (i < Filter1))
    65f6:	f1a8 0357 	sub.w	r3, r8, #87	; 0x57
    65fa:	2b07      	cmp	r3, #7
    65fc:	f67f af5d 	bls.w	64ba <parsePreset+0x75a>
	for (int i = 0; i < NUM_LFOS; i++)
    6600:	f04f 0900 	mov.w	r9, #0
    6604:	e79d      	b.n	6542 <parsePreset+0x7e2>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6606:	4b8e      	ldr	r3, [pc, #568]	; (6840 <parsePreset+0xae0>)
    6608:	edd3 7a02 	vldr	s15, [r3, #8]
    660c:	eddf 6a8d 	vldr	s13, [pc, #564]	; 6844 <parsePreset+0xae4>
    6610:	ee67 7aa6 	vmul.f32	s15, s15, s13
    6614:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    6618:	ee27 7a26 	vmul.f32	s14, s14, s13
    661c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    6620:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    6624:	eec6 6a27 	vdiv.f32	s13, s12, s15
    6628:	4b87      	ldr	r3, [pc, #540]	; (6848 <parsePreset+0xae8>)
    662a:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    662e:	4b87      	ldr	r3, [pc, #540]	; (684c <parsePreset+0xaec>)
    6630:	ed83 7a00 	vstr	s14, [r3]
	bufferIndex += 2;
    6634:	3404      	adds	r4, #4
    6636:	fa1f fc84 	uxth.w	ip, r4
	numMappings = 0;
    663a:	2300      	movs	r3, #0
    663c:	4a84      	ldr	r2, [pc, #528]	; (6850 <parsePreset+0xaf0>)
    663e:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < NUM_LFOS; i++)
    6640:	e003      	b.n	664a <parsePreset+0x8ea>
		lfoOn[i] = 0;
    6642:	4a84      	ldr	r2, [pc, #528]	; (6854 <parsePreset+0xaf4>)
    6644:	2100      	movs	r1, #0
    6646:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_LFOS; i++)
    6648:	3301      	adds	r3, #1
    664a:	2b03      	cmp	r3, #3
    664c:	ddf9      	ble.n	6642 <parsePreset+0x8e2>
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    664e:	2100      	movs	r1, #0
    6650:	e010      	b.n	6674 <parsePreset+0x914>
		mappings[i].destNumber = 255;
    6652:	4881      	ldr	r0, [pc, #516]	; (6858 <parsePreset+0xaf8>)
    6654:	224c      	movs	r2, #76	; 0x4c
    6656:	fb01 f202 	mul.w	r2, r1, r2
    665a:	1883      	adds	r3, r0, r2
    665c:	24ff      	movs	r4, #255	; 0xff
    665e:	5484      	strb	r4, [r0, r2]
		mappings[i].hookActive[0] = 0;
    6660:	2200      	movs	r2, #0
    6662:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		mappings[i].hookActive[1] = 0;
    6666:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		mappings[i].hookActive[2] = 0;
    666a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		mappings[i].numHooks = 0;
    666e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    6672:	3101      	adds	r1, #1
    6674:	291f      	cmp	r1, #31
    6676:	ddec      	ble.n	6652 <parsePreset+0x8f2>
	for (int i = 0; i < mappingCount; i++)
    6678:	f04f 0900 	mov.w	r9, #0
    667c:	e0cc      	b.n	6818 <parsePreset+0xab8>
				foundOne = 1;
    667e:	2401      	movs	r4, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    6680:	3201      	adds	r2, #1
    6682:	2a1f      	cmp	r2, #31
    6684:	dc13      	bgt.n	66ae <parsePreset+0x94e>
			if (mappings[j].destNumber == destNumber)
    6686:	234c      	movs	r3, #76	; 0x4c
    6688:	fb02 f303 	mul.w	r3, r2, r3
    668c:	4f72      	ldr	r7, [pc, #456]	; (6858 <parsePreset+0xaf8>)
    668e:	5cfb      	ldrb	r3, [r7, r3]
    6690:	428b      	cmp	r3, r1
    6692:	d1f5      	bne.n	6680 <parsePreset+0x920>
				whichMapping = j;
    6694:	b2d0      	uxtb	r0, r2
				if (presetVersionNumber == 0)
    6696:	2e00      	cmp	r6, #0
    6698:	d1f1      	bne.n	667e <parsePreset+0x91e>
					whichHook = mappings[j].numHooks;
    669a:	244c      	movs	r4, #76	; 0x4c
    669c:	fb04 7302 	mla	r3, r4, r2, r7
    66a0:	f893 e04b 	ldrb.w	lr, [r3, #75]	; 0x4b
				foundOne = 1;
    66a4:	2401      	movs	r4, #1
    66a6:	e7eb      	b.n	6680 <parsePreset+0x920>
		uint8_t whichHook = 0;
    66a8:	f04f 0e00 	mov.w	lr, #0
    66ac:	e0c3      	b.n	6836 <parsePreset+0xad6>
		if (foundOne == 0)
    66ae:	b98c      	cbnz	r4, 66d4 <parsePreset+0x974>
			whichMapping = numMappings;
    66b0:	4b67      	ldr	r3, [pc, #412]	; (6850 <parsePreset+0xaf0>)
    66b2:	7818      	ldrb	r0, [r3, #0]
			numMappings++;
    66b4:	1c42      	adds	r2, r0, #1
    66b6:	701a      	strb	r2, [r3, #0]
			if (presetVersionNumber == 0)
    66b8:	b906      	cbnz	r6, 66bc <parsePreset+0x95c>
				whichHook = 0;
    66ba:	46a6      	mov	lr, r4
			mappings[whichMapping].destNumber = destNumber;
    66bc:	4c66      	ldr	r4, [pc, #408]	; (6858 <parsePreset+0xaf8>)
    66be:	234c      	movs	r3, #76	; 0x4c
    66c0:	fb00 f303 	mul.w	r3, r0, r3
    66c4:	18e2      	adds	r2, r4, r3
    66c6:	54e1      	strb	r1, [r4, r3]
			mappings[whichMapping].dest = &params[destNumber];
    66c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    66cc:	4b5c      	ldr	r3, [pc, #368]	; (6840 <parsePreset+0xae0>)
    66ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    66d2:	6051      	str	r1, [r2, #4]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    66d4:	4602      	mov	r2, r0
    66d6:	4674      	mov	r4, lr
    66d8:	4b5f      	ldr	r3, [pc, #380]	; (6858 <parsePreset+0xaf8>)
    66da:	214c      	movs	r1, #76	; 0x4c
    66dc:	fb01 3000 	mla	r0, r1, r0, r3
    66e0:	4486      	add	lr, r0
    66e2:	2301      	movs	r3, #1
    66e4:	f88e 3020 	strb.w	r3, [lr, #32]
		int source = buffer[bufferIndex];
    66e8:	4b5c      	ldr	r3, [pc, #368]	; (685c <parsePreset+0xafc>)
    66ea:	f813 e008 	ldrb.w	lr, [r3, r8]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    66ee:	2100      	movs	r1, #0
    66f0:	e011      	b.n	6716 <parsePreset+0x9b6>
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    66f2:	eb01 034e 	add.w	r3, r1, lr, lsl #1
    66f6:	485a      	ldr	r0, [pc, #360]	; (6860 <parsePreset+0xb00>)
    66f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    66fc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    6700:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6704:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    6708:	440b      	add	r3, r1
    670a:	3302      	adds	r3, #2
    670c:	f8df a148 	ldr.w	sl, [pc, #328]	; 6858 <parsePreset+0xaf8>
    6710:	f84a 0023 	str.w	r0, [sl, r3, lsl #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6714:	3101      	adds	r1, #1
    6716:	2901      	cmp	r1, #1
    6718:	ddeb      	ble.n	66f2 <parsePreset+0x992>
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    671a:	f1be 0f03 	cmp.w	lr, #3
    671e:	dc07      	bgt.n	6730 <parsePreset+0x9d0>
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    6720:	4b4d      	ldr	r3, [pc, #308]	; (6858 <parsePreset+0xaf8>)
    6722:	214c      	movs	r1, #76	; 0x4c
    6724:	fb01 3302 	mla	r3, r1, r2, r3
    6728:	4423      	add	r3, r4
    672a:	2100      	movs	r1, #0
    672c:	f883 1020 	strb.w	r1, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6730:	f1ae 0318 	sub.w	r3, lr, #24
    6734:	2b03      	cmp	r3, #3
    6736:	d804      	bhi.n	6742 <parsePreset+0x9e2>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    6738:	469e      	mov	lr, r3
    673a:	4b46      	ldr	r3, [pc, #280]	; (6854 <parsePreset+0xaf4>)
    673c:	2101      	movs	r1, #1
    673e:	f803 100e 	strb.w	r1, [r3, lr]
		int scalar = buffer[bufferIndex+2];
    6742:	f108 0302 	add.w	r3, r8, #2
    6746:	4945      	ldr	r1, [pc, #276]	; (685c <parsePreset+0xafc>)
    6748:	5cc8      	ldrb	r0, [r1, r3]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    674a:	2100      	movs	r1, #0
    674c:	e010      	b.n	6770 <parsePreset+0xa10>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    674e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    6752:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6756:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    675a:	440b      	add	r3, r1
    675c:	3308      	adds	r3, #8
    675e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 6858 <parsePreset+0xaf8>
    6762:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
    6766:	f8df e100 	ldr.w	lr, [pc, #256]	; 6868 <parsePreset+0xb08>
    676a:	f8c3 e004 	str.w	lr, [r3, #4]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    676e:	3101      	adds	r1, #1
    6770:	2901      	cmp	r1, #1
    6772:	dc20      	bgt.n	67b6 <parsePreset+0xa56>
			if (scalar == 0xff)
    6774:	28ff      	cmp	r0, #255	; 0xff
    6776:	d0ea      	beq.n	674e <parsePreset+0x9ee>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    6778:	eb01 0e40 	add.w	lr, r1, r0, lsl #1
    677c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 6860 <parsePreset+0xb00>
    6780:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
    6784:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    6788:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    678c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    6790:	440b      	add	r3, r1
    6792:	3308      	adds	r3, #8
    6794:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6858 <parsePreset+0xaf8>
    6798:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    679c:	f8c3 e004 	str.w	lr, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    67a0:	f1a0 0318 	sub.w	r3, r0, #24
    67a4:	2b03      	cmp	r3, #3
    67a6:	d8e2      	bhi.n	676e <parsePreset+0xa0e>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    67a8:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 6854 <parsePreset+0xaf4>
    67ac:	f04f 0a01 	mov.w	sl, #1
    67b0:	f80e a003 	strb.w	sl, [lr, r3]
    67b4:	e7db      	b.n	676e <parsePreset+0xa0e>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    67b6:	f108 0103 	add.w	r1, r8, #3
    67ba:	4b28      	ldr	r3, [pc, #160]	; (685c <parsePreset+0xafc>)
    67bc:	5c59      	ldrb	r1, [r3, r1]
    67be:	f108 0804 	add.w	r8, r8, #4
    67c2:	f813 3008 	ldrb.w	r3, [r3, r8]
    67c6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    67ca:	b21b      	sxth	r3, r3
    67cc:	ee07 3a90 	vmov	s15, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    67d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    67d4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 6864 <parsePreset+0xb04>
    67d8:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    67dc:	491e      	ldr	r1, [pc, #120]	; (6858 <parsePreset+0xaf8>)
    67de:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    67e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    67e6:	4423      	add	r3, r4
    67e8:	330e      	adds	r3, #14
    67ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    67ee:	edc3 7a01 	vstr	s15, [r3, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    67f2:	234c      	movs	r3, #76	; 0x4c
    67f4:	fb03 1202 	mla	r2, r3, r2, r1
    67f8:	4414      	add	r4, r2
    67fa:	2301      	movs	r3, #1
    67fc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		mappings[whichMapping].numHooks++;
    6800:	f892 304b 	ldrb.w	r3, [r2, #75]	; 0x4b
    6804:	3301      	adds	r3, #1
    6806:	f882 304b 	strb.w	r3, [r2, #75]	; 0x4b
		if (presetVersionNumber > 0)
    680a:	b37e      	cbz	r6, 686c <parsePreset+0xb0c>
			bufferIndex += 6;
    680c:	f10c 0c06 	add.w	ip, ip, #6
    6810:	fa1f fc8c 	uxth.w	ip, ip
	for (int i = 0; i < mappingCount; i++)
    6814:	f109 0901 	add.w	r9, r9, #1
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	454b      	cmp	r3, r9
    681c:	dd2b      	ble.n	6876 <parsePreset+0xb16>
		uint8_t destNumber = buffer[bufferIndex+1];
    681e:	46e0      	mov	r8, ip
    6820:	f10c 0301 	add.w	r3, ip, #1
    6824:	4a0d      	ldr	r2, [pc, #52]	; (685c <parsePreset+0xafc>)
    6826:	5cd1      	ldrb	r1, [r2, r3]
		if (presetVersionNumber > 0)
    6828:	2e00      	cmp	r6, #0
    682a:	f43f af3d 	beq.w	66a8 <parsePreset+0x948>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    682e:	f10c 0305 	add.w	r3, ip, #5
    6832:	f812 e003 	ldrb.w	lr, [r2, r3]
		uint8_t whichHook = 0;
    6836:	2200      	movs	r2, #0
    6838:	4614      	mov	r4, r2
    683a:	4610      	mov	r0, r2
    683c:	e721      	b.n	6682 <parsePreset+0x922>
    683e:	bf00      	nop
    6840:	20019798 	.word	0x20019798
    6844:	42fe0000 	.word	0x42fe0000
    6848:	2001977c 	.word	0x2001977c
    684c:	20019780 	.word	0x20019780
    6850:	20019788 	.word	0x20019788
    6854:	20005404 	.word	0x20005404
    6858:	20018dfc 	.word	0x20018dfc
    685c:	300001c0 	.word	0x300001c0
    6860:	200147bc 	.word	0x200147bc
    6864:	37fffffc 	.word	0x37fffffc
    6868:	20000748 	.word	0x20000748
			bufferIndex += 5;
    686c:	f10c 0c05 	add.w	ip, ip, #5
    6870:	fa1f fc8c 	uxth.w	ip, ip
    6874:	e7ce      	b.n	6814 <parsePreset+0xab4>
	if (params[Filter1].zeroToOneVal[0])
    6876:	4b1a      	ldr	r3, [pc, #104]	; (68e0 <parsePreset+0xb80>)
    6878:	edd3 7a00 	vldr	s15, [r3]
    687c:	eef5 7a40 	vcmp.f32	s15, #0.0
    6880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6884:	d129      	bne.n	68da <parsePreset+0xb7a>
	uint8_t totalFilters = 0;
    6886:	2300      	movs	r3, #0
	if (params[Filter2].zeroToOneVal[0])
    6888:	4a16      	ldr	r2, [pc, #88]	; (68e4 <parsePreset+0xb84>)
    688a:	edd2 7a00 	vldr	s15, [r2]
    688e:	eef5 7a40 	vcmp.f32	s15, #0.0
    6892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6896:	d001      	beq.n	689c <parsePreset+0xb3c>
		totalFilters++;
    6898:	3301      	adds	r3, #1
    689a:	b2db      	uxtb	r3, r3
	presetWaitingToParse = 0;
    689c:	2400      	movs	r4, #0
    689e:	4a12      	ldr	r2, [pc, #72]	; (68e8 <parsePreset+0xb88>)
    68a0:	6014      	str	r4, [r2, #0]
	currentActivePreset = presetNumber;
    68a2:	b2ed      	uxtb	r5, r5
    68a4:	4a11      	ldr	r2, [pc, #68]	; (68ec <parsePreset+0xb8c>)
    68a6:	7015      	strb	r5, [r2, #0]
	audioMasterLevel = 1.0f;
    68a8:	4a11      	ldr	r2, [pc, #68]	; (68f0 <parsePreset+0xb90>)
    68aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    68ae:	6011      	str	r1, [r2, #0]
	oscToTick = NUM_OSC;
    68b0:	4a10      	ldr	r2, [pc, #64]	; (68f4 <parsePreset+0xb94>)
    68b2:	2103      	movs	r1, #3
    68b4:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
    68b6:	2101      	movs	r1, #1
    68b8:	4a0f      	ldr	r2, [pc, #60]	; (68f8 <parsePreset+0xb98>)
    68ba:	7011      	strb	r1, [r2, #0]
	filterToTick = totalFilters;
    68bc:	4a0f      	ldr	r2, [pc, #60]	; (68fc <parsePreset+0xb9c>)
    68be:	7013      	strb	r3, [r2, #0]
    68c0:	b662      	cpsie	i
	presetReady = 1;
    68c2:	4b0f      	ldr	r3, [pc, #60]	; (6900 <parsePreset+0xba0>)
    68c4:	6019      	str	r1, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    68c6:	460a      	mov	r2, r1
    68c8:	480e      	ldr	r0, [pc, #56]	; (6904 <parsePreset+0xba4>)
    68ca:	f000 fed9 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    68ce:	4b0e      	ldr	r3, [pc, #56]	; (6908 <parsePreset+0xba8>)
    68d0:	701c      	strb	r4, [r3, #0]
	receivingI2C = 0;
    68d2:	4b0e      	ldr	r3, [pc, #56]	; (690c <parsePreset+0xbac>)
    68d4:	701c      	strb	r4, [r3, #0]
    68d6:	f7ff bacf 	b.w	5e78 <parsePreset+0x118>
		totalFilters++;
    68da:	2301      	movs	r3, #1
    68dc:	e7d4      	b.n	6888 <parsePreset+0xb28>
    68de:	bf00      	nop
    68e0:	2001a1fc 	.word	0x2001a1fc
    68e4:	2001a2a4 	.word	0x2001a2a4
    68e8:	2001a8bc 	.word	0x2001a8bc
    68ec:	20014c08 	.word	0x20014c08
    68f0:	20000744 	.word	0x20000744
    68f4:	20000068 	.word	0x20000068
    68f8:	20000069 	.word	0x20000069
    68fc:	20000004 	.word	0x20000004
    6900:	20005844 	.word	0x20005844
    6904:	58020000 	.word	0x58020000
    6908:	20014c44 	.word	0x20014c44
    690c:	2001acc4 	.word	0x2001acc4
    6910:	f3af 8000 	nop.w
    6914:	f3af 8000 	nop.w
    6918:	f3af 8000 	nop.w
    691c:	f3af 8000 	nop.w

00006920 <HAL_I2C_SlaveRxCpltCallback>:
{
    6920:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    6922:	2200      	movs	r2, #0
    6924:	2140      	movs	r1, #64	; 0x40
    6926:	4806      	ldr	r0, [pc, #24]	; (6940 <HAL_I2C_SlaveRxCpltCallback+0x20>)
    6928:	f000 feaa 	bl	7680 <__HAL_GPIO_WritePin_veneer>
	presetWaitingToParse = 4096;
    692c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6930:	4b04      	ldr	r3, [pc, #16]	; (6944 <HAL_I2C_SlaveRxCpltCallback+0x24>)
    6932:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    6934:	4904      	ldr	r1, [pc, #16]	; (6948 <HAL_I2C_SlaveRxCpltCallback+0x28>)
    6936:	4805      	ldr	r0, [pc, #20]	; (694c <HAL_I2C_SlaveRxCpltCallback+0x2c>)
    6938:	f000 fe4a 	bl	75d0 <__HAL_I2C_Slave_Receive_IT_veneer>
}
    693c:	bd08      	pop	{r3, pc}
    693e:	bf00      	nop
    6940:	58020000 	.word	0x58020000
    6944:	2001a8bc 	.word	0x2001a8bc
    6948:	300001c0 	.word	0x300001c0
    694c:	20014b5c 	.word	0x20014b5c
    6950:	f3af 8000 	nop.w
    6954:	f3af 8000 	nop.w
    6958:	f3af 8000 	nop.w
    695c:	f3af 8000 	nop.w

00006960 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    6960:	4b01      	ldr	r3, [pc, #4]	; (6968 <HAL_I2C_MasterTxCpltCallback+0x8>)
    6962:	2200      	movs	r2, #0
    6964:	701a      	strb	r2, [r3, #0]
}
    6966:	4770      	bx	lr
    6968:	20016dc4 	.word	0x20016dc4
    696c:	f3af 8000 	nop.w
    6970:	f3af 8000 	nop.w
    6974:	f3af 8000 	nop.w
    6978:	f3af 8000 	nop.w
    697c:	f3af 8000 	nop.w

00006980 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    6980:	2300      	movs	r3, #0
    6982:	4a05      	ldr	r2, [pc, #20]	; (6998 <HAL_I2C_ErrorCallback+0x18>)
    6984:	7013      	strb	r3, [r2, #0]
	receivingI2C = 0;
    6986:	4a05      	ldr	r2, [pc, #20]	; (699c <HAL_I2C_ErrorCallback+0x1c>)
    6988:	7013      	strb	r3, [r2, #0]
	I2CErrors++;
    698a:	4a05      	ldr	r2, [pc, #20]	; (69a0 <HAL_I2C_ErrorCallback+0x20>)
    698c:	7813      	ldrb	r3, [r2, #0]
    698e:	3301      	adds	r3, #1
    6990:	b2db      	uxtb	r3, r3
    6992:	7013      	strb	r3, [r2, #0]
}
    6994:	4770      	bx	lr
    6996:	bf00      	nop
    6998:	20016dc4 	.word	0x20016dc4
    699c:	2001acc4 	.word	0x2001acc4
    69a0:	20014c04 	.word	0x20014c04
	...

000069c0 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
    69c0:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
    69c2:	ed93 0a02 	vldr	s0, [r3, #8]
    69c6:	edd3 7a05 	vldr	s15, [r3, #20]
    69ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    69ce:	edd3 7a03 	vldr	s15, [r3, #12]
    69d2:	ed93 7a04 	vldr	s14, [r3, #16]
    69d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    69da:	ee30 0a27 	vadd.f32	s0, s0, s15
    69de:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
    69e2:	4770      	bx	lr
    69e4:	f3af 8000 	nop.w
    69e8:	f3af 8000 	nop.w
    69ec:	f3af 8000 	nop.w
    69f0:	f3af 8000 	nop.w
    69f4:	f3af 8000 	nop.w
    69f8:	f3af 8000 	nop.w
    69fc:	f3af 8000 	nop.w

00006a00 <tExpSmooth_setDest>:
    _tExpSmooth* smooth = *expsmooth;
    6a00:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
    6a02:	ed83 0a05 	vstr	s0, [r3, #20]
}
    6a06:	4770      	bx	lr
	...

00006a20 <place_step_dd>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) place_step_dd(Lfloat *buffer, int index, Lfloat phase, Lfloat w, Lfloat scale)
#else
void place_step_dd(Lfloat *buffer, int index, Lfloat phase, Lfloat w, Lfloat scale)
#endif
{
    6a20:	b538      	push	{r3, r4, r5, lr}
    6a22:	ed2d 8b02 	vpush	{d8}
    6a26:	4605      	mov	r5, r0
    6a28:	460c      	mov	r4, r1
    6a2a:	eef0 8a41 	vmov.f32	s17, s2
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    6a2e:	eddf 7a19 	vldr	s15, [pc, #100]	; 6a94 <place_step_dd+0x74>
    6a32:	ee20 0a27 	vmul.f32	s0, s0, s15
    6a36:	ee80 8a20 	vdiv.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
    6a3a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6a3e:	ee38 0a40 	vsub.f32	s0, s16, s0
    6a42:	f000 fe71 	bl	7728 <__lrintf_veneer>
	r -= (Lfloat)i;
    6a46:	ee07 0a90 	vmov	s15, r0
    6a4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    6a4e:	ee78 6a66 	vsub.f32	s13, s16, s13
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6a52:	f000 023f 	and.w	r2, r0, #63	; 0x3f

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    6a56:	e016      	b.n	6a86 <place_step_dd+0x66>
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    6a58:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    6a5c:	4b0e      	ldr	r3, [pc, #56]	; (6a98 <place_step_dd+0x78>)
    6a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6a62:	edd3 7a00 	vldr	s15, [r3]
    6a66:	ed93 7a01 	vldr	s14, [r3, #4]
    6a6a:	ee27 7a26 	vmul.f32	s14, s14, s13
    6a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
    6a72:	ee67 7aa8 	vmul.f32	s15, s15, s17
    6a76:	ed91 7a00 	vldr	s14, [r1]
    6a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
    6a7e:	edc1 7a00 	vstr	s15, [r1]
		i += MINBLEP_PHASES;
    6a82:	3240      	adds	r2, #64	; 0x40
		index++;
    6a84:	3401      	adds	r4, #1
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    6a86:	f5b2 5f90 	cmp.w	r2, #4608	; 0x1200
    6a8a:	dbe5      	blt.n	6a58 <place_step_dd+0x38>
	}
}
    6a8c:	ecbd 8b02 	vpop	{d8}
    6a90:	bd38      	pop	{r3, r4, r5, pc}
    6a92:	bf00      	nop
    6a94:	42800000 	.word	0x42800000
    6a98:	24024248 	.word	0x24024248
    6a9c:	f3af 8000 	nop.w

00006aa0 <place_slope_dd>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) place_slope_dd(Lfloat *buffer, int index, Lfloat phase, Lfloat w, Lfloat slope_delta)
#else
void place_slope_dd(Lfloat *buffer, int index, Lfloat phase, Lfloat w, Lfloat slope_delta)
#endif
{
    6aa0:	b538      	push	{r3, r4, r5, lr}
    6aa2:	ed2d 8b04 	vpush	{d8-d9}
    6aa6:	4605      	mov	r5, r0
    6aa8:	460c      	mov	r4, r1
    6aaa:	eeb0 8a60 	vmov.f32	s16, s1
    6aae:	eeb0 9a41 	vmov.f32	s18, s2
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    6ab2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 6b24 <place_slope_dd+0x84>
    6ab6:	ee20 0a27 	vmul.f32	s0, s0, s15
    6aba:	eec0 8a20 	vdiv.f32	s17, s0, s1
	i = lrintf(r - 0.5f);
    6abe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6ac2:	ee38 0ac0 	vsub.f32	s0, s17, s0
    6ac6:	f000 fe2f 	bl	7728 <__lrintf_veneer>
	r -= (Lfloat)i;
    6aca:	ee07 0a90 	vmov	s15, r0
    6ace:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    6ad2:	ee78 6ae6 	vsub.f32	s13, s17, s13
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6ad6:	f000 033f 	and.w	r3, r0, #63	; 0x3f

	slope_delta *= w;
    6ada:	ee28 1a09 	vmul.f32	s2, s16, s18

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    6ade:	e01b      	b.n	6b18 <place_slope_dd+0x78>
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    6ae0:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    6ae4:	4a10      	ldr	r2, [pc, #64]	; (6b28 <place_slope_dd+0x88>)
    6ae6:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    6aea:	edd0 7a00 	vldr	s15, [r0]
    6aee:	1c58      	adds	r0, r3, #1
    6af0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    6af4:	ed92 7a00 	vldr	s14, [r2]
    6af8:	ee37 7a67 	vsub.f32	s14, s14, s15
    6afc:	ee27 7a26 	vmul.f32	s14, s14, s13
    6b00:	ee77 7a87 	vadd.f32	s15, s15, s14
    6b04:	ee67 7a81 	vmul.f32	s15, s15, s2
    6b08:	ed91 7a00 	vldr	s14, [r1]
    6b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
    6b10:	edc1 7a00 	vstr	s15, [r1]
		i += MINBLEP_PHASES;
    6b14:	3340      	adds	r3, #64	; 0x40
		index++;
    6b16:	3401      	adds	r4, #1
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    6b18:	f5b3 5f8e 	cmp.w	r3, #4544	; 0x11c0
    6b1c:	dbe0      	blt.n	6ae0 <place_slope_dd+0x40>
	}
}
    6b1e:	ecbd 8b04 	vpop	{d8-d9}
    6b22:	bd38      	pop	{r3, r4, r5, pc}
    6b24:	42800000 	.word	0x42800000
    6b28:	2401fb44 	.word	0x2401fb44
    6b2c:	f3af 8000 	nop.w
    6b30:	f3af 8000 	nop.w
    6b34:	f3af 8000 	nop.w
    6b38:	f3af 8000 	nop.w
    6b3c:	f3af 8000 	nop.w

00006b40 <LEAF_clip>:
    if (min > max)
    6b40:	eeb4 0ac1 	vcmpe.f32	s0, s2
    6b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b48:	dc05      	bgt.n	6b56 <LEAF_clip+0x16>
    6b4a:	ee11 3a10 	vmov	r3, s2
    Lfloat tempmin = min;
    6b4e:	eeb0 1a40 	vmov.f32	s2, s0
    Lfloat tempmax = max;
    6b52:	ee00 3a10 	vmov	s0, r3
    if (val < tempmin)
    6b56:	eeb4 1ae0 	vcmpe.f32	s2, s1
    6b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b5e:	dc05      	bgt.n	6b6c <LEAF_clip+0x2c>
    else if (val > tempmax)
    6b60:	eeb4 0ae0 	vcmpe.f32	s0, s1
    6b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b68:	d503      	bpl.n	6b72 <LEAF_clip+0x32>
    6b6a:	4770      	bx	lr
        return tempmin;
    6b6c:	eeb0 0a41 	vmov.f32	s0, s2
    6b70:	4770      	bx	lr
        return val;
    6b72:	eeb0 0a60 	vmov.f32	s0, s1
}
    6b76:	4770      	bx	lr
	...

00006b80 <tMBPulse_place_step_dd_noBuffer>:
{
    6b80:	b538      	push	{r3, r4, r5, lr}
    6b82:	ed2d 8b02 	vpush	{d8}
    6b86:	ee11 5a10 	vmov	r5, s2
	_tMBPulse* c = *osc;
    6b8a:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    6b8c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 6bf4 <tMBPulse_place_step_dd_noBuffer+0x74>
    6b90:	ee20 0a08 	vmul.f32	s0, s0, s16
    6b94:	ee20 8a20 	vmul.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
    6b98:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6b9c:	ee38 0a40 	vsub.f32	s0, s16, s0
    6ba0:	f000 fdc2 	bl	7728 <__lrintf_veneer>
	r -= (Lfloat)i;
    6ba4:	ee07 0a90 	vmov	s15, r0
    6ba8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    6bac:	ee38 8a60 	vsub.f32	s16, s16, s1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6bb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6bb4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    6bb8:	3301      	adds	r3, #1
    6bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bbe:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    6bc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
    6bc6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6bca:	80d0      	strh	r0, [r2, #6]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6bcc:	f103 021d 	add.w	r2, r3, #29
    6bd0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    6bd4:	ed82 8a00 	vstr	s16, [r2]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6bd8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    6bdc:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    6be0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    6be4:	3301      	adds	r3, #1
    6be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bea:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    6bee:	ecbd 8b02 	vpop	{d8}
    6bf2:	bd38      	pop	{r3, r4, r5, pc}
    6bf4:	42800000 	.word	0x42800000
    6bf8:	f3af 8000 	nop.w
    6bfc:	f3af 8000 	nop.w

00006c00 <tMBTriangle_place_dd_noBuffer>:
{
    6c00:	b538      	push	{r3, r4, r5, lr}
    6c02:	ed2d 8b04 	vpush	{d8-d9}
    6c06:	eef0 8a41 	vmov.f32	s17, s2
    6c0a:	ee11 5a90 	vmov	r5, s3
    6c0e:	eeb0 9a42 	vmov.f32	s18, s4
	_tMBTriangle* c = *osc;
    6c12:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    6c14:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 6c80 <tMBTriangle_place_dd_noBuffer+0x80>
    6c18:	ee20 0a08 	vmul.f32	s0, s0, s16
    6c1c:	ee20 8a20 	vmul.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
    6c20:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6c24:	ee38 0a40 	vsub.f32	s0, s16, s0
    6c28:	f000 fd7e 	bl	7728 <__lrintf_veneer>
	r -= (Lfloat)i;
    6c2c:	ee07 0a90 	vmov	s15, r0
    6c30:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    6c34:	ee38 8a60 	vsub.f32	s16, s16, s1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6c38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	scale *= w;
    6c3c:	ee68 8a89 	vmul.f32	s17, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6c40:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6c44:	3301      	adds	r3, #1
    6c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c4a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    6c4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    6c52:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6c56:	8090      	strh	r0, [r2, #4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6c58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6c5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    6c60:	ed82 8a3b 	vstr	s16, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6c64:	edc2 8a3c 	vstr	s17, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    6c68:	f8c2 50f4 	str.w	r5, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    6c6c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    6c70:	3301      	adds	r3, #1
    6c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c76:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    6c7a:	ecbd 8b04 	vpop	{d8-d9}
    6c7e:	bd38      	pop	{r3, r4, r5, pc}
    6c80:	42800000 	.word	0x42800000
    6c84:	f3af 8000 	nop.w
    6c88:	f3af 8000 	nop.w
    6c8c:	f3af 8000 	nop.w
    6c90:	f3af 8000 	nop.w
    6c94:	f3af 8000 	nop.w
    6c98:	f3af 8000 	nop.w
    6c9c:	f3af 8000 	nop.w

00006ca0 <tMBSineTri_place_dd_noBuffer>:
{
    6ca0:	b538      	push	{r3, r4, r5, lr}
    6ca2:	ed2d 8b04 	vpush	{d8-d9}
    6ca6:	eef0 8a41 	vmov.f32	s17, s2
    6caa:	ee11 5a90 	vmov	r5, s3
    6cae:	eeb0 9a42 	vmov.f32	s18, s4
	_tMBSineTri* c = *osc;
    6cb2:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    6cb4:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 6d20 <tMBSineTri_place_dd_noBuffer+0x80>
    6cb8:	ee20 0a08 	vmul.f32	s0, s0, s16
    6cbc:	ee20 8a20 	vmul.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
    6cc0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6cc4:	ee38 0a40 	vsub.f32	s0, s16, s0
    6cc8:	f000 fd2e 	bl	7728 <__lrintf_veneer>
	r -= (Lfloat)i;
    6ccc:	ee07 0a90 	vmov	s15, r0
    6cd0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    6cd4:	ee38 8a60 	vsub.f32	s16, s16, s1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6cd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	scale *= w;
    6cdc:	ee68 8a89 	vmul.f32	s17, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6ce0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6ce4:	3301      	adds	r3, #1
    6ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cea:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    6cee:	f103 0234 	add.w	r2, r3, #52	; 0x34
    6cf2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6cf6:	8090      	strh	r0, [r2, #4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6cf8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6cfc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    6d00:	ed82 8a3b 	vstr	s16, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6d04:	edc2 8a3c 	vstr	s17, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    6d08:	f8c2 50f4 	str.w	r5, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    6d0c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    6d10:	3301      	adds	r3, #1
    6d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d16:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    6d1a:	ecbd 8b04 	vpop	{d8-d9}
    6d1e:	bd38      	pop	{r3, r4, r5, pc}
    6d20:	42800000 	.word	0x42800000
    6d24:	f3af 8000 	nop.w
    6d28:	f3af 8000 	nop.w
    6d2c:	f3af 8000 	nop.w
    6d30:	f3af 8000 	nop.w
    6d34:	f3af 8000 	nop.w
    6d38:	f3af 8000 	nop.w
    6d3c:	f3af 8000 	nop.w

00006d40 <tMBSaw_place_step_dd_noBuffer>:
{
    6d40:	b538      	push	{r3, r4, r5, lr}
    6d42:	ed2d 8b02 	vpush	{d8}
    6d46:	ee11 5a10 	vmov	r5, s2
	_tMBSaw* c = *osc;
    6d4a:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    6d4c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 6db4 <tMBSaw_place_step_dd_noBuffer+0x74>
    6d50:	ee20 0a08 	vmul.f32	s0, s0, s16
    6d54:	ee20 8a20 	vmul.f32	s16, s0, s1
	i = lrintf(r - 0.5f);
    6d58:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6d5c:	ee38 0a40 	vsub.f32	s0, s16, s0
    6d60:	f000 fce2 	bl	7728 <__lrintf_veneer>
	r -= (Lfloat)i;
    6d64:	ee07 0a90 	vmov	s15, r0
    6d68:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    6d6c:	ee38 8a60 	vsub.f32	s16, s16, s1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6d70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d74:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    6d78:	3301      	adds	r3, #1
    6d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d7e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    6d82:	f103 0228 	add.w	r2, r3, #40	; 0x28
    6d86:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6d8a:	80d0      	strh	r0, [r2, #6]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6d8c:	f103 021b 	add.w	r2, r3, #27
    6d90:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    6d94:	ed82 8a00 	vstr	s16, [r2]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6d98:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    6d9c:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    6da0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    6da4:	3301      	adds	r3, #1
    6da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6daa:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
    6dae:	ecbd 8b02 	vpop	{d8}
    6db2:	bd38      	pop	{r3, r4, r5, pc}
    6db4:	42800000 	.word	0x42800000
    6db8:	f3af 8000 	nop.w
    6dbc:	f3af 8000 	nop.w

00006dc0 <tMBSawPulse_place_step_dd_noBuffer>:
{
    6dc0:	b538      	push	{r3, r4, r5, lr}
    6dc2:	ed2d 8b02 	vpush	{d8}
    _tMBSawPulse* c = *osc;
    6dc6:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    6dc8:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    6dcc:	b913      	cbnz	r3, 6dd4 <tMBSawPulse_place_step_dd_noBuffer+0x14>
}
    6dce:	ecbd 8b02 	vpop	{d8}
    6dd2:	bd38      	pop	{r3, r4, r5, pc}
    6dd4:	ee11 5a10 	vmov	r5, s2
		r = MINBLEP_PHASES * phase * inv_w;
    6dd8:	ed9f 8a18 	vldr	s16, [pc, #96]	; 6e3c <tMBSawPulse_place_step_dd_noBuffer+0x7c>
    6ddc:	ee20 0a08 	vmul.f32	s0, s0, s16
    6de0:	ee20 8a20 	vmul.f32	s16, s0, s1
		i = lrintf(r - 0.5f);
    6de4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    6de8:	ee38 0a40 	vsub.f32	s0, s16, s0
    6dec:	f000 fc9c 	bl	7728 <__lrintf_veneer>
		r -= (Lfloat)i;
    6df0:	ee07 0a90 	vmov	s15, r0
    6df4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    6df8:	ee38 8a40 	vsub.f32	s16, s16, s0
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6dfc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6e00:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    6e04:	3301      	adds	r3, #1
    6e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e0a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6e0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    6e12:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6e16:	80d0      	strh	r0, [r2, #6]
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6e18:	f103 021e 	add.w	r2, r3, #30
    6e1c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    6e20:	ed82 8a00 	vstr	s16, [r2]
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6e24:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    6e28:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6e2c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    6e30:	3301      	adds	r3, #1
    6e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e36:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    6e3a:	e7c8      	b.n	6dce <tMBSawPulse_place_step_dd_noBuffer+0xe>
    6e3c:	42800000 	.word	0x42800000

00006e40 <tMBSawPulse_tick>:
{
    6e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e42:	ed2d 8b0c 	vpush	{d8-d13}
    6e46:	b083      	sub	sp, #12
    6e48:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc;
    6e4a:	6804      	ldr	r4, [r0, #0]
    Lfloat shape = c->shape;
    6e4c:	edd4 ba11 	vldr	s23, [r4, #68]	; 0x44
    Lfloat sawShape = 1.0f - c->shape;
    6e50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6e54:	ee37 caeb 	vsub.f32	s24, s15, s23
    sync = c->sync;
    6e58:	edd4 7a04 	vldr	s15, [r4, #16]
    p = c->_p;  /* phase [0, 1) */
    6e5c:	edd4 6a08 	vldr	s13, [r4, #32]
    w = c->_w;  /* phase increment */
    6e60:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
    6e64:	ed94 aa0a 	vldr	s20, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    6e68:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    6e6c:	edd4 aa0c 	vldr	s21, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    6e70:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    6e72:	edd4 8a0d 	vldr	s17, [r4, #52]	; 0x34
    6e76:	eefd 8ae8 	vcvt.s32.f32	s17, s17
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    6e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e82:	dd08      	ble.n	6e96 <tMBSawPulse_tick+0x56>
    6e84:	69a3      	ldr	r3, [r4, #24]
    6e86:	2b00      	cmp	r3, #0
    6e88:	dd05      	ble.n	6e96 <tMBSawPulse_tick+0x56>
    6e8a:	ed94 7a05 	vldr	s14, [r4, #20]
    6e8e:	eeb1 7a47 	vneg.f32	s14, s14
    6e92:	ed84 7a05 	vstr	s14, [r4, #20]
    sw = w * c->syncdir;
    6e96:	ed94 7a05 	vldr	s14, [r4, #20]
    6e9a:	ee27 ba29 	vmul.f32	s22, s14, s19
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    6e9e:	edd4 ca0f 	vldr	s25, [r4, #60]	; 0x3c
    6ea2:	ee67 ca2c 	vmul.f32	s25, s14, s25
    p += sw - (int)sw;
    6ea6:	eebd 8acb 	vcvt.s32.f32	s16, s22
    6eaa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    6eae:	ee3b 8a48 	vsub.f32	s16, s22, s16
    6eb2:	ee38 8a26 	vadd.f32	s16, s16, s13
    if (sync > 0.0f && c->softsync == 0)
    6eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ebe:	f340 8185 	ble.w	71cc <tMBSawPulse_tick+0x38c>
    6ec2:	69a7      	ldr	r7, [r4, #24]
    6ec4:	2f00      	cmp	r7, #0
    6ec6:	f040 8181 	bne.w	71cc <tMBSawPulse_tick+0x38c>
        Lfloat eof_offset = sync * sw;
    6eca:	ee27 da8b 	vmul.f32	s26, s15, s22
        Lfloat p_at_reset = p - eof_offset;
    6ece:	ee78 da4d 	vsub.f32	s27, s16, s26
        if (sw > 0) p = eof_offset;
    6ed2:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    6ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6eda:	dd3f      	ble.n	6f5c <tMBSawPulse_tick+0x11c>
    6edc:	eeb0 8a4d 	vmov.f32	s16, s26
		 if (!k)
    6ee0:	ee18 3a90 	vmov	r3, s17
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	f040 8096 	bne.w	7016 <tMBSawPulse_tick+0x1d6>
			 if (sw > 0)
    6eea:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    6eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ef2:	dd58      	ble.n	6fa6 <tMBSawPulse_tick+0x166>
				 if (p_at_reset >= b)
    6ef4:	eeb4 aaed 	vcmpe.f32	s20, s27
    6ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6efc:	d934      	bls.n	6f68 <tMBSawPulse_tick+0x128>
				 if (p_at_reset >= 1.0f)
    6efe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6f02:	eef4 dae7 	vcmpe.f32	s27, s15
    6f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f0a:	da3d      	bge.n	6f88 <tMBSawPulse_tick+0x148>
    6f0c:	ee08 3a90 	vmov	s17, r3
		if (sw > 0)
    6f10:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    6f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f18:	f300 80f0 	bgt.w	70fc <tMBSawPulse_tick+0x2bc>
		else if (sw < 0)
    6f1c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    6f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f24:	f100 811b 	bmi.w	715e <tMBSawPulse_tick+0x31e>
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    6f28:	1d2b      	adds	r3, r5, #4
    6f2a:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    6f2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6f32:	ee77 7ac8 	vsub.f32	s15, s15, s16
    6f36:	ee67 7a8c 	vmul.f32	s15, s15, s24
    6f3a:	3312      	adds	r3, #18
    6f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    6f40:	edc3 7a00 	vstr	s15, [r3]
    c->_f[currentSamp] += (x * shape);//pulse
    6f44:	ee69 ba2b 	vmul.f32	s23, s18, s23
    6f48:	ee77 7aab 	vadd.f32	s15, s15, s23
    6f4c:	edc3 7a00 	vstr	s15, [r3]
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    6f50:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6f54:	f88d 3007 	strb.w	r3, [sp, #7]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    6f58:	2200      	movs	r2, #0
    6f5a:	e214      	b.n	7386 <tMBSawPulse_tick+0x546>
        else if (sw < 0) p = 1.0f - eof_offset;
    6f5c:	d5c0      	bpl.n	6ee0 <tMBSawPulse_tick+0xa0>
    6f5e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    6f62:	ee38 8a4d 	vsub.f32	s16, s16, s26
    6f66:	e7bb      	b.n	6ee0 <tMBSawPulse_tick+0xa0>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    6f68:	ee3d 0aca 	vsub.f32	s0, s27, s20
    6f6c:	eeb1 1a6b 	vneg.f32	s2, s23
    6f70:	eef0 0a6c 	vmov.f32	s1, s25
    6f74:	ee30 0a0d 	vadd.f32	s0, s0, s26
    6f78:	4629      	mov	r1, r5
    6f7a:	4630      	mov	r0, r6
    6f7c:	f7ff ff20 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 x = -0.5f;
    6f80:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
					 k = 1;
    6f84:	2301      	movs	r3, #1
    6f86:	e7ba      	b.n	6efe <tMBSawPulse_tick+0xbe>
					 p_at_reset -= 1.0f;
    6f88:	eeb0 1a67 	vmov.f32	s2, s15
    6f8c:	ee7d dae7 	vsub.f32	s27, s27, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    6f90:	eef0 0a6c 	vmov.f32	s1, s25
    6f94:	ee3d 0a2d 	vadd.f32	s0, s26, s27
    6f98:	4629      	mov	r1, r5
    6f9a:	4630      	mov	r0, r6
    6f9c:	f7ff ff10 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 x = 0.5f;
    6fa0:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    6fa4:	e7b4      	b.n	6f10 <tMBSawPulse_tick+0xd0>
			 else if (sw < 0)
    6fa6:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    6faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fae:	d5af      	bpl.n	6f10 <tMBSawPulse_tick+0xd0>
				 if (p_at_reset < 0.0f)
    6fb0:	eef5 dac0 	vcmpe.f32	s27, #0.0
    6fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fb8:	d40a      	bmi.n	6fd0 <tMBSawPulse_tick+0x190>
				 if (k && p_at_reset < b)
    6fba:	2b00      	cmp	r3, #0
    6fbc:	f000 809b 	beq.w	70f6 <tMBSawPulse_tick+0x2b6>
    6fc0:	eef4 daca 	vcmpe.f32	s27, s20
    6fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fc8:	d416      	bmi.n	6ff8 <tMBSawPulse_tick+0x1b8>
    6fca:	ee08 3a90 	vmov	s17, r3
    6fce:	e79f      	b.n	6f10 <tMBSawPulse_tick+0xd0>
					 p_at_reset += 1.0f;
    6fd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6fd4:	ee7d daa7 	vadd.f32	s27, s27, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, -1.0f);
    6fd8:	ee77 7aed 	vsub.f32	s15, s15, s27
    6fdc:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
    6fe0:	eef1 0a6c 	vneg.f32	s1, s25
    6fe4:	ee37 0acd 	vsub.f32	s0, s15, s26
    6fe8:	4629      	mov	r1, r5
    6fea:	4630      	mov	r0, r6
    6fec:	f7ff fee8 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 x = -0.5f;
    6ff0:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
					 k = 1;
    6ff4:	2301      	movs	r3, #1
    6ff6:	e7e0      	b.n	6fba <tMBSawPulse_tick+0x17a>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, 1.0f * shape);
    6ff8:	ee3a 0a6d 	vsub.f32	s0, s20, s27
    6ffc:	eeb0 1a6b 	vmov.f32	s2, s23
    7000:	eef1 0a6c 	vneg.f32	s1, s25
    7004:	ee30 0a4d 	vsub.f32	s0, s0, s26
    7008:	4629      	mov	r1, r5
    700a:	4630      	mov	r0, r6
    700c:	f7ff fed8 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 x = 0.5f;
    7010:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    7014:	e77c      	b.n	6f10 <tMBSawPulse_tick+0xd0>
			 if (sw > 0)
    7016:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    701a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    701e:	dd33      	ble.n	7088 <tMBSawPulse_tick+0x248>
				 if (p_at_reset >= 1.0f)
    7020:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7024:	eef4 dae7 	vcmpe.f32	s27, s15
    7028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    702c:	da1b      	bge.n	7066 <tMBSawPulse_tick+0x226>
				 if (!k && p_at_reset >= b)
    702e:	ee18 3a90 	vmov	r3, s17
    7032:	2b00      	cmp	r3, #0
    7034:	f47f af6c 	bne.w	6f10 <tMBSawPulse_tick+0xd0>
    7038:	eef4 daca 	vcmpe.f32	s27, s20
    703c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7040:	f6ff af66 	blt.w	6f10 <tMBSawPulse_tick+0xd0>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    7044:	ee3d 0aca 	vsub.f32	s0, s27, s20
    7048:	eeb1 1a6b 	vneg.f32	s2, s23
    704c:	eef0 0a6c 	vmov.f32	s1, s25
    7050:	ee30 0a0d 	vadd.f32	s0, s0, s26
    7054:	4629      	mov	r1, r5
    7056:	4630      	mov	r0, r6
    7058:	f7ff feb2 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 x = -0.5f;
    705c:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
					 k = 1;
    7060:	eddf 8ac6 	vldr	s17, [pc, #792]	; 737c <tMBSawPulse_tick+0x53c>
    7064:	e754      	b.n	6f10 <tMBSawPulse_tick+0xd0>
					 p_at_reset -= 1.0f;
    7066:	eeb0 1a67 	vmov.f32	s2, s15
    706a:	ee7d dae7 	vsub.f32	s27, s27, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    706e:	eef0 0a6c 	vmov.f32	s1, s25
    7072:	ee3d 0a2d 	vadd.f32	s0, s26, s27
    7076:	4629      	mov	r1, r5
    7078:	4630      	mov	r0, r6
    707a:	f7ff fea1 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 k = 0;
    707e:	ee08 7a90 	vmov	s17, r7
					 x = 0.5f;
    7082:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    7086:	e7d2      	b.n	702e <tMBSawPulse_tick+0x1ee>
			 else if (sw < 0)
    7088:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7090:	f57f af3e 	bpl.w	6f10 <tMBSawPulse_tick+0xd0>
				 if (p_at_reset < b)
    7094:	eeb4 aaed 	vcmpe.f32	s20, s27
    7098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    709c:	dc1a      	bgt.n	70d4 <tMBSawPulse_tick+0x294>
				 if (p_at_reset < 0.0f)
    709e:	eef5 dac0 	vcmpe.f32	s27, #0.0
    70a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70a6:	f57f af33 	bpl.w	6f10 <tMBSawPulse_tick+0xd0>
					 p_at_reset += 1.0f;
    70aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    70ae:	ee7d daa7 	vadd.f32	s27, s27, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, -1.0f);
    70b2:	ee77 7aed 	vsub.f32	s15, s15, s27
    70b6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
    70ba:	eef1 0a6c 	vneg.f32	s1, s25
    70be:	ee37 0acd 	vsub.f32	s0, s15, s26
    70c2:	4629      	mov	r1, r5
    70c4:	4630      	mov	r0, r6
    70c6:	f7ff fe7b 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 x = -0.5f;
    70ca:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
					 k = 1;
    70ce:	eddf 8aab 	vldr	s17, [pc, #684]	; 737c <tMBSawPulse_tick+0x53c>
    70d2:	e71d      	b.n	6f10 <tMBSawPulse_tick+0xd0>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, 1.0f * shape);
    70d4:	ee3a 0a6d 	vsub.f32	s0, s20, s27
    70d8:	eeb0 1a6b 	vmov.f32	s2, s23
    70dc:	eef1 0a6c 	vneg.f32	s1, s25
    70e0:	ee30 0a4d 	vsub.f32	s0, s0, s26
    70e4:	4629      	mov	r1, r5
    70e6:	4630      	mov	r0, r6
    70e8:	f7ff fe6a 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
					 k = 0;
    70ec:	ee08 7a90 	vmov	s17, r7
					 x = 0.5f;
    70f0:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    70f4:	e7d3      	b.n	709e <tMBSawPulse_tick+0x25e>
    70f6:	ee08 3a90 	vmov	s17, r3
    70fa:	e709      	b.n	6f10 <tMBSawPulse_tick+0xd0>
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    70fc:	ee2d 1a8c 	vmul.f32	s2, s27, s24
    7100:	eef0 0a6c 	vmov.f32	s1, s25
    7104:	eeb0 0a48 	vmov.f32	s0, s16
    7108:	4629      	mov	r1, r5
    710a:	4630      	mov	r0, r6
    710c:	f7ff fe58 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
            if (k) {
    7110:	ee18 3a90 	vmov	r3, s17
    7114:	b9a3      	cbnz	r3, 7140 <tMBSawPulse_tick+0x300>
			if (p >= b) {
    7116:	eeb4 8aca 	vcmpe.f32	s16, s20
    711a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    711e:	f6ff af03 	blt.w	6f28 <tMBSawPulse_tick+0xe8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    7122:	eeb1 1a6b 	vneg.f32	s2, s23
    7126:	eef0 0a6c 	vmov.f32	s1, s25
    712a:	ee38 0a4a 	vsub.f32	s0, s16, s20
    712e:	4629      	mov	r1, r5
    7130:	4630      	mov	r0, r6
    7132:	f7ff fe45 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = -0.5f;
    7136:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
				k = 1;
    713a:	eddf 8a90 	vldr	s17, [pc, #576]	; 737c <tMBSawPulse_tick+0x53c>
    713e:	e6f3      	b.n	6f28 <tMBSawPulse_tick+0xe8>
            	tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f * shape);
    7140:	eeb0 1a6b 	vmov.f32	s2, s23
    7144:	eef0 0a6c 	vmov.f32	s1, s25
    7148:	eeb0 0a48 	vmov.f32	s0, s16
    714c:	4629      	mov	r1, r5
    714e:	4630      	mov	r0, r6
    7150:	f7ff fe36 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				k = 0;
    7154:	ee08 7a90 	vmov	s17, r7
				x = 0.5f;
    7158:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    715c:	e7db      	b.n	7116 <tMBSawPulse_tick+0x2d6>
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    715e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    7162:	ee3b ba48 	vsub.f32	s22, s22, s16
    7166:	eef1 ca6c 	vneg.f32	s25, s25
    716a:	ee2d 1acc 	vnmul.f32	s2, s27, s24
    716e:	eef0 0a6c 	vmov.f32	s1, s25
    7172:	eeb0 0a4b 	vmov.f32	s0, s22
    7176:	4629      	mov	r1, r5
    7178:	4630      	mov	r0, r6
    717a:	f7ff fe21 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
			if (!k) {
    717e:	ee18 3a90 	vmov	r3, s17
    7182:	b1a3      	cbz	r3, 71ae <tMBSawPulse_tick+0x36e>
			if (p < b) {
    7184:	eeb4 8aca 	vcmpe.f32	s16, s20
    7188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    718c:	f57f aecc 	bpl.w	6f28 <tMBSawPulse_tick+0xe8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, b - p, -inv_sw, 1.0f * shape);
    7190:	eeb0 1a6b 	vmov.f32	s2, s23
    7194:	eef0 0a6c 	vmov.f32	s1, s25
    7198:	ee3a 0a48 	vsub.f32	s0, s20, s16
    719c:	4629      	mov	r1, r5
    719e:	4630      	mov	r0, r6
    71a0:	f7ff fe0e 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				k = 0;
    71a4:	ee08 7a90 	vmov	s17, r7
				x = 0.5f;
    71a8:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    71ac:	e6bc      	b.n	6f28 <tMBSawPulse_tick+0xe8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    71ae:	eeb1 1a6b 	vneg.f32	s2, s23
    71b2:	eef0 0a6c 	vmov.f32	s1, s25
    71b6:	eeb0 0a4b 	vmov.f32	s0, s22
    71ba:	4629      	mov	r1, r5
    71bc:	4630      	mov	r0, r6
    71be:	f7ff fdff 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = -0.5f;
    71c2:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
				k = 1;
    71c6:	eddf 8a6d 	vldr	s17, [pc, #436]	; 737c <tMBSawPulse_tick+0x53c>
    71ca:	e7db      	b.n	7184 <tMBSawPulse_tick+0x344>
    else if (!k)
    71cc:	ee18 3a90 	vmov	r3, s17
    71d0:	2b00      	cmp	r3, #0
    71d2:	d165      	bne.n	72a0 <tMBSawPulse_tick+0x460>
		if (sw > 0)
    71d4:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    71d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71dc:	dd2b      	ble.n	7236 <tMBSawPulse_tick+0x3f6>
			if (p >= b) {
    71de:	eeb4 aac8 	vcmpe.f32	s20, s16
    71e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71e6:	d909      	bls.n	71fc <tMBSawPulse_tick+0x3bc>
			if (p >= 1.0f) {
    71e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    71ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
    71f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71f4:	da10      	bge.n	7218 <tMBSawPulse_tick+0x3d8>
    71f6:	ee08 3a90 	vmov	s17, r3
    71fa:	e695      	b.n	6f28 <tMBSawPulse_tick+0xe8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    71fc:	eeb1 1a6b 	vneg.f32	s2, s23
    7200:	eef0 0a6c 	vmov.f32	s1, s25
    7204:	ee38 0a4a 	vsub.f32	s0, s16, s20
    7208:	4629      	mov	r1, r5
    720a:	4630      	mov	r0, r6
    720c:	f7ff fdd8 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = -0.5f;
    7210:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
				k = 1;
    7214:	2301      	movs	r3, #1
    7216:	e7e7      	b.n	71e8 <tMBSawPulse_tick+0x3a8>
				p -= 1.0f;
    7218:	eeb0 1a67 	vmov.f32	s2, s15
    721c:	ee38 8a67 	vsub.f32	s16, s16, s15
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
    7220:	eef0 0a6c 	vmov.f32	s1, s25
    7224:	eeb0 0a48 	vmov.f32	s0, s16
    7228:	4629      	mov	r1, r5
    722a:	4630      	mov	r0, r6
    722c:	f7ff fdc8 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = 0.5f;
    7230:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    7234:	e678      	b.n	6f28 <tMBSawPulse_tick+0xe8>
		else if (sw < 0)
    7236:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    723e:	f57f ae73 	bpl.w	6f28 <tMBSawPulse_tick+0xe8>
			if (p < 0.0f) {
    7242:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    7246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    724a:	d40a      	bmi.n	7262 <tMBSawPulse_tick+0x422>
			if (k && p < b) {
    724c:	2b00      	cmp	r3, #0
    724e:	f000 8091 	beq.w	7374 <tMBSawPulse_tick+0x534>
    7252:	eeb4 8aca 	vcmpe.f32	s16, s20
    7256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    725a:	d414      	bmi.n	7286 <tMBSawPulse_tick+0x446>
    725c:	ee08 3a90 	vmov	s17, r3
    7260:	e662      	b.n	6f28 <tMBSawPulse_tick+0xe8>
				p += 1.0f;
    7262:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    7266:	ee38 8a00 	vadd.f32	s16, s16, s0
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f);
    726a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
    726e:	eef1 0a6c 	vneg.f32	s1, s25
    7272:	ee30 0a48 	vsub.f32	s0, s0, s16
    7276:	4629      	mov	r1, r5
    7278:	4630      	mov	r0, r6
    727a:	f7ff fda1 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = -0.5f;
    727e:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
				k = 1;
    7282:	2301      	movs	r3, #1
    7284:	e7e2      	b.n	724c <tMBSawPulse_tick+0x40c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, b - p, -inv_sw, 1.0f * shape);
    7286:	eeb0 1a6b 	vmov.f32	s2, s23
    728a:	eef1 0a6c 	vneg.f32	s1, s25
    728e:	ee3a 0a48 	vsub.f32	s0, s20, s16
    7292:	4629      	mov	r1, r5
    7294:	4630      	mov	r0, r6
    7296:	f7ff fd93 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = 0.5f;
    729a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    729e:	e643      	b.n	6f28 <tMBSawPulse_tick+0xe8>
		if (sw > 0)
    72a0:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    72a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72a8:	dd31      	ble.n	730e <tMBSawPulse_tick+0x4ce>
			if (p >= 1.0f) {
    72aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    72ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
    72b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72b6:	da19      	bge.n	72ec <tMBSawPulse_tick+0x4ac>
			if (!k && p >= b) {
    72b8:	ee18 3a90 	vmov	r3, s17
    72bc:	2b00      	cmp	r3, #0
    72be:	f47f ae33 	bne.w	6f28 <tMBSawPulse_tick+0xe8>
    72c2:	eeb4 8aca 	vcmpe.f32	s16, s20
    72c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72ca:	f6ff ae2d 	blt.w	6f28 <tMBSawPulse_tick+0xe8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    72ce:	eeb1 1a6b 	vneg.f32	s2, s23
    72d2:	eef0 0a6c 	vmov.f32	s1, s25
    72d6:	ee38 0a4a 	vsub.f32	s0, s16, s20
    72da:	4629      	mov	r1, r5
    72dc:	4630      	mov	r0, r6
    72de:	f7ff fd6f 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = -0.5f;
    72e2:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
				k = 1;
    72e6:	eddf 8a25 	vldr	s17, [pc, #148]	; 737c <tMBSawPulse_tick+0x53c>
    72ea:	e61d      	b.n	6f28 <tMBSawPulse_tick+0xe8>
				p -= 1.0f;
    72ec:	eeb0 1a67 	vmov.f32	s2, s15
    72f0:	ee38 8a67 	vsub.f32	s16, s16, s15
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
    72f4:	eef0 0a6c 	vmov.f32	s1, s25
    72f8:	eeb0 0a48 	vmov.f32	s0, s16
    72fc:	4629      	mov	r1, r5
    72fe:	4630      	mov	r0, r6
    7300:	f7ff fd5e 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = 0.5f;
    7304:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				k = 0;
    7308:	eddf 8a1d 	vldr	s17, [pc, #116]	; 7380 <tMBSawPulse_tick+0x540>
    730c:	e7d4      	b.n	72b8 <tMBSawPulse_tick+0x478>
		else if (sw < 0)
    730e:	eeb5 bac0 	vcmpe.f32	s22, #0.0
    7312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7316:	f57f ae07 	bpl.w	6f28 <tMBSawPulse_tick+0xe8>
			if (p < b) {
    731a:	eeb4 aac8 	vcmpe.f32	s20, s16
    731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7322:	dc18      	bgt.n	7356 <tMBSawPulse_tick+0x516>
			if (p < 0.0f) {
    7324:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    7328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    732c:	f57f adfc 	bpl.w	6f28 <tMBSawPulse_tick+0xe8>
				p += 1.0f;
    7330:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    7334:	ee38 8a00 	vadd.f32	s16, s16, s0
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f);
    7338:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
    733c:	eef1 0a6c 	vneg.f32	s1, s25
    7340:	ee30 0a48 	vsub.f32	s0, s0, s16
    7344:	4629      	mov	r1, r5
    7346:	4630      	mov	r0, r6
    7348:	f7ff fd3a 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = -0.5f;
    734c:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
				k = 1;
    7350:	eddf 8a0a 	vldr	s17, [pc, #40]	; 737c <tMBSawPulse_tick+0x53c>
    7354:	e5e8      	b.n	6f28 <tMBSawPulse_tick+0xe8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, b - p, -inv_sw, 1.0f * shape);
    7356:	eeb0 1a6b 	vmov.f32	s2, s23
    735a:	eef1 0a6c 	vneg.f32	s1, s25
    735e:	ee3a 0a48 	vsub.f32	s0, s20, s16
    7362:	4629      	mov	r1, r5
    7364:	4630      	mov	r0, r6
    7366:	f7ff fd2b 	bl	6dc0 <tMBSawPulse_place_step_dd_noBuffer>
				x = 0.5f;
    736a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				k = 0;
    736e:	eddf 8a04 	vldr	s17, [pc, #16]	; 7380 <tMBSawPulse_tick+0x540>
    7372:	e7d7      	b.n	7324 <tMBSawPulse_tick+0x4e4>
    7374:	ee08 3a90 	vmov	s17, r3
    7378:	e5d6      	b.n	6f28 <tMBSawPulse_tick+0xe8>
    737a:	bf00      	nop
    737c:	00000001 	.word	0x00000001
    7380:	00000000 	.word	0x00000000
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7384:	3201      	adds	r2, #1
    7386:	f89d 3007 	ldrb.w	r3, [sp, #7]
    738a:	b2db      	uxtb	r3, r3
    738c:	4293      	cmp	r3, r2
    738e:	dd5b      	ble.n	7448 <tMBSawPulse_tick+0x608>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    7390:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    7394:	1a9b      	subs	r3, r3, r2
    7396:	b29b      	uxth	r3, r3
    7398:	f8ad 3004 	strh.w	r3, [sp, #4]
    	whichBLEP &= 63;
    739c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    73a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    73a4:	f8ad 3004 	strh.w	r3, [sp, #4]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    73a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    73ac:	b29b      	uxth	r3, r3
    73ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    73b2:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
    73b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    73ba:	b29b      	uxth	r3, r3
    73bc:	3334      	adds	r3, #52	; 0x34
    73be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    73c2:	88db      	ldrh	r3, [r3, #6]
    73c4:	4935      	ldr	r1, [pc, #212]	; (749c <tMBSawPulse_tick+0x65c>)
    73c6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    73ca:	ed93 7a00 	vldr	s14, [r3]
    73ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    73d2:	b29b      	uxth	r3, r3
    73d4:	331e      	adds	r3, #30
    73d6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    73da:	edd3 6a00 	vldr	s13, [r3]
    73de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    73e2:	b29b      	uxth	r3, r3
    73e4:	3334      	adds	r3, #52	; 0x34
    73e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    73ea:	88db      	ldrh	r3, [r3, #6]
    73ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    73f0:	ed91 6a01 	vldr	s12, [r1, #4]
    73f4:	ee66 6a86 	vmul.f32	s13, s13, s12
    73f8:	ee37 7a26 	vadd.f32	s14, s14, s13
    73fc:	ee27 7a87 	vmul.f32	s14, s15, s14
    7400:	f105 0312 	add.w	r3, r5, #18
    7404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    7408:	edd3 7a00 	vldr	s15, [r3]
    740c:	ee77 7a87 	vadd.f32	s15, s15, s14
    7410:	edc3 7a00 	vstr	s15, [r3]
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7414:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7418:	b29b      	uxth	r3, r3
    741a:	3334      	adds	r3, #52	; 0x34
    741c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    7420:	88d9      	ldrh	r1, [r3, #6]
    7422:	3140      	adds	r1, #64	; 0x40
    7424:	80d9      	strh	r1, [r3, #6]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7426:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    742a:	b29b      	uxth	r3, r3
    742c:	3334      	adds	r3, #52	; 0x34
    742e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    7432:	88d9      	ldrh	r1, [r3, #6]
    7434:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    7438:	4299      	cmp	r1, r3
    743a:	d3a3      	bcc.n	7384 <tMBSawPulse_tick+0x544>
			c->numBLEPs--;
    743c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    7440:	3b01      	subs	r3, #1
    7442:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    7446:	e79d      	b.n	7384 <tMBSawPulse_tick+0x544>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    7448:	f105 0312 	add.w	r3, r5, #18
    744c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    7450:	edd3 7a00 	vldr	s15, [r3]
    7454:	ee77 7aea 	vsub.f32	s15, s15, s21
    7458:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    745c:	ee67 7a80 	vmul.f32	s15, s15, s0
    7460:	ee77 7aaa 	vadd.f32	s15, s15, s21
    c->out = z;
    7464:	edc4 7a01 	vstr	s15, [r4, #4]
    j = (j+1) & 7;
    7468:	3501      	adds	r5, #1
    746a:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
    746e:	ed84 8a08 	vstr	s16, [r4, #32]
    c->_w = w;
    7472:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    c->_b = b;
    7476:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
    c->_x = x;
    747a:	ed84 9a0b 	vstr	s18, [r4, #44]	; 0x2c
    c->_z = z;
    747e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    c->_j = j;
    7482:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_k = k;
    7484:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    7488:	edc4 8a0d 	vstr	s17, [r4, #52]	; 0x34
    return -c->out * c->gain;
    748c:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
}
    7490:	ee27 0ac0 	vnmul.f32	s0, s15, s0
    7494:	b003      	add	sp, #12
    7496:	ecbd 8b0c 	vpop	{d8-d13}
    749a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    749c:	24024248 	.word	0x24024248

000074a0 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    74a0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    74a2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    74a6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    74aa:	ee67 7a80 	vmul.f32	s15, s15, s0
    74ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    74b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    74b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    74ba:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    74be:	eddf 7a0e 	vldr	s15, [pc, #56]	; 74f8 <tMBSawPulse_setFreq+0x58>
    74c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
    74c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74ca:	dc06      	bgt.n	74da <tMBSawPulse_setFreq+0x3a>
    74cc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 74fc <tMBSawPulse_setFreq+0x5c>
    74d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
    74d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74d8:	d506      	bpl.n	74e8 <tMBSawPulse_setFreq+0x48>
    	c->active = 0;
    74da:	2200      	movs	r2, #0
    74dc:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 0.0f;
    74e0:	2200      	movs	r2, #0
    74e2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
    74e6:	4770      	bx	lr
    	c->active = 1;
    74e8:	2201      	movs	r2, #1
    74ea:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    74ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    74f2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
}
    74f6:	4770      	bx	lr
    74f8:	45bb8000 	.word	0x45bb8000
    74fc:	c5bb8000 	.word	0xc5bb8000

00007500 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    7500:	6803      	ldr	r3, [r0, #0]
    Lfloat last = c->lastsyncin;
    7502:	edd3 7a03 	vldr	s15, [r3, #12]
    Lfloat delta = value - last;
    7506:	ee70 6a67 	vsub.f32	s13, s0, s15
    Lfloat crossing = -last / delta;
    750a:	eef1 7a67 	vneg.f32	s15, s15
    750e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    c->lastsyncin = value;
    7512:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    7516:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    751e:	dd06      	ble.n	752e <tMBSawPulse_sync+0x2e>
    7520:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7524:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    752c:	d902      	bls.n	7534 <tMBSawPulse_sync+0x34>
    else c->sync = 0.f;
    752e:	2200      	movs	r2, #0
    7530:	611a      	str	r2, [r3, #16]
}
    7532:	4770      	bx	lr
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    7534:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    7538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    753c:	dbf7      	blt.n	752e <tMBSawPulse_sync+0x2e>
        c->sync = (1.f - crossing) * delta;
    753e:	ee37 7ac7 	vsub.f32	s14, s15, s14
    7542:	ee67 6a26 	vmul.f32	s13, s14, s13
    7546:	edc3 6a04 	vstr	s13, [r3, #16]
    754a:	4770      	bx	lr
    754c:	0000      	movs	r0, r0
	...

00007550 <__setFilterTypes_veneer>:
    7550:	f85f f000 	ldr.w	pc, [pc]	; 7554 <__setFilterTypes_veneer+0x4>
    7554:	240027ed 	.word	0x240027ed

00007558 <__tCycle_setPhase_veneer>:
    7558:	f85f f000 	ldr.w	pc, [pc]	; 755c <__tCycle_setPhase_veneer+0x4>
    755c:	24010b3d 	.word	0x24010b3d

00007560 <__tSineTriLFO_setFreq_veneer>:
    7560:	f85f f000 	ldr.w	pc, [pc]	; 7564 <__tSineTriLFO_setFreq_veneer+0x4>
    7564:	24011d31 	.word	0x24011d31

00007568 <__tPBPulse_setWidth_veneer>:
    7568:	f85f f000 	ldr.w	pc, [pc]	; 756c <__tPBPulse_setWidth_veneer+0x4>
    756c:	24010d7b 	.word	0x24010d7b

00007570 <__tSimpleLivingString3_setFreq_veneer>:
    7570:	f85f f000 	ldr.w	pc, [pc]	; 7574 <__tSimpleLivingString3_setFreq_veneer+0x4>
    7574:	24011dd1 	.word	0x24011dd1

00007578 <__tSawSquareLFO_setShape_veneer>:
    7578:	f85f f000 	ldr.w	pc, [pc]	; 757c <__tSawSquareLFO_setShape_veneer+0x4>
    757c:	24011c03 	.word	0x24011c03

00007580 <__tLinearDelay_setDelay_veneer>:
    7580:	f85f f000 	ldr.w	pc, [pc]	; 7584 <__tLinearDelay_setDelay_veneer+0x4>
    7584:	2400daad 	.word	0x2400daad

00007588 <__tLadderFilter_setQ_veneer>:
    7588:	f85f f000 	ldr.w	pc, [pc]	; 758c <__tLadderFilter_setQ_veneer+0x4>
    758c:	240100a1 	.word	0x240100a1

00007590 <__tADSRT_setLeakFactor_veneer>:
    7590:	f85f f000 	ldr.w	pc, [pc]	; 7594 <__tADSRT_setLeakFactor_veneer+0x4>
    7594:	2400e479 	.word	0x2400e479

00007598 <__tPBTriangle_setSkew_veneer>:
    7598:	f85f f000 	ldr.w	pc, [pc]	; 759c <__tPBTriangle_setSkew_veneer+0x4>
    759c:	24010c77 	.word	0x24010c77

000075a0 <__tSawSquareLFO_setFreq_veneer>:
    75a0:	f85f f000 	ldr.w	pc, [pc]	; 75a4 <__tSawSquareLFO_setFreq_veneer+0x4>
    75a4:	24011bb7 	.word	0x24011bb7

000075a8 <__tHighpass_tick_veneer>:
    75a8:	f85f f000 	ldr.w	pc, [pc]	; 75ac <__tHighpass_tick_veneer+0x4>
    75ac:	2400ee1f 	.word	0x2400ee1f

000075b0 <__arm_fir_interpolate_f32_veneer>:
    75b0:	f85f f000 	ldr.w	pc, [pc]	; 75b4 <__arm_fir_interpolate_f32_veneer+0x4>
    75b4:	24012d55 	.word	0x24012d55

000075b8 <__tCrusher_setRound_veneer>:
    75b8:	f85f f000 	ldr.w	pc, [pc]	; 75bc <__tCrusher_setRound_veneer+0x4>
    75bc:	2400dfdd 	.word	0x2400dfdd

000075c0 <__tPBPulse_tick_veneer>:
    75c0:	f85f f000 	ldr.w	pc, [pc]	; 75c4 <__tPBPulse_tick_veneer+0x4>
    75c4:	24010cbf 	.word	0x24010cbf

000075c8 <__tSquareLFO_setFreq_veneer>:
    75c8:	f85f f000 	ldr.w	pc, [pc]	; 75cc <__tSquareLFO_setFreq_veneer+0x4>
    75cc:	24011a7b 	.word	0x24011a7b

000075d0 <__HAL_I2C_Slave_Receive_IT_veneer>:
    75d0:	f85f f000 	ldr.w	pc, [pc]	; 75d4 <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    75d4:	2400584d 	.word	0x2400584d

000075d8 <__tSimpleLivingString3_setLevStrength_veneer>:
    75d8:	f85f f000 	ldr.w	pc, [pc]	; 75dc <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    75dc:	24012139 	.word	0x24012139

000075e0 <__tIntPhasor_tick_veneer>:
    75e0:	f85f f000 	ldr.w	pc, [pc]	; 75e4 <__tIntPhasor_tick_veneer+0x4>
    75e4:	240119e5 	.word	0x240119e5

000075e8 <__tMBSineTri_setFreq_veneer>:
    75e8:	f85f f000 	ldr.w	pc, [pc]	; 75ec <__tMBSineTri_setFreq_veneer+0x4>
    75ec:	24011935 	.word	0x24011935

000075f0 <__tMBSineTri_sync_veneer>:
    75f0:	f85f f000 	ldr.w	pc, [pc]	; 75f4 <__tMBSineTri_sync_veneer+0x4>
    75f4:	24011955 	.word	0x24011955

000075f8 <__tVZFilter_setFreq_veneer>:
    75f8:	f85f f000 	ldr.w	pc, [pc]	; 75fc <__tVZFilter_setFreq_veneer+0x4>
    75fc:	2400f155 	.word	0x2400f155

00007600 <__setOscilllatorShapes_veneer>:
    7600:	f85f f000 	ldr.w	pc, [pc]	; 7604 <__setOscilllatorShapes_veneer+0x4>
    7604:	24002775 	.word	0x24002775

00007608 <__tADSRT_on_veneer>:
    7608:	f85f f000 	ldr.w	pc, [pc]	; 760c <__tADSRT_on_veneer+0x4>
    760c:	2400e49d 	.word	0x2400e49d

00007610 <__tTriLFO_setFreq_veneer>:
    7610:	f85f f000 	ldr.w	pc, [pc]	; 7614 <__tTriLFO_setFreq_veneer+0x4>
    7614:	24011c45 	.word	0x24011c45

00007618 <__tLivingString2_initToPool_veneer>:
    7618:	f85f f000 	ldr.w	pc, [pc]	; 761c <__tLivingString2_initToPool_veneer+0x4>
    761c:	240125ed 	.word	0x240125ed

00007620 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    7620:	f85f f000 	ldr.w	pc, [pc]	; 7624 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    7624:	2401212d 	.word	0x2401212d

00007628 <__tDiodeFilter_tick_veneer>:
    7628:	f85f f000 	ldr.w	pc, [pc]	; 762c <__tDiodeFilter_tick_veneer+0x4>
    762c:	2400f721 	.word	0x2400f721

00007630 <__tCompressor_tick_veneer>:
    7630:	f85f f000 	ldr.w	pc, [pc]	; 7634 <__tCompressor_tick_veneer+0x4>
    7634:	2400e09d 	.word	0x2400e09d

00007638 <__tPBTriangle_tick_veneer>:
    7638:	f85f f000 	ldr.w	pc, [pc]	; 763c <__tPBTriangle_tick_veneer+0x4>
    763c:	24010b93 	.word	0x24010b93

00007640 <__tLivingString2_free_veneer>:
    7640:	f85f f000 	ldr.w	pc, [pc]	; 7644 <__tLivingString2_free_veneer+0x4>
    7644:	240123ab 	.word	0x240123ab

00007648 <__tVZFilter_setResonance_veneer>:
    7648:	f85f f000 	ldr.w	pc, [pc]	; 764c <__tVZFilter_setResonance_veneer+0x4>
    764c:	2400f45d 	.word	0x2400f45d

00007650 <__tLivingString2_setDecay_veneer>:
    7650:	f85f f000 	ldr.w	pc, [pc]	; 7654 <__tLivingString2_setDecay_veneer+0x4>
    7654:	240127c5 	.word	0x240127c5

00007658 <__tLivingString2_setPickupPos_veneer>:
    7658:	f85f f000 	ldr.w	pc, [pc]	; 765c <__tLivingString2_setPickupPos_veneer+0x4>
    765c:	240124fd 	.word	0x240124fd

00007660 <__tSquareLFO_tick_veneer>:
    7660:	f85f f000 	ldr.w	pc, [pc]	; 7664 <__tSquareLFO_tick_veneer+0x4>
    7664:	24011a41 	.word	0x24011a41

00007668 <__tLivingString2_setTargetLev_veneer>:
    7668:	f85f f000 	ldr.w	pc, [pc]	; 766c <__tLivingString2_setTargetLev_veneer+0x4>
    766c:	240127ed 	.word	0x240127ed

00007670 <__tLivingString2_setLevStrength_veneer>:
    7670:	f85f f000 	ldr.w	pc, [pc]	; 7674 <__tLivingString2_setLevStrength_veneer+0x4>
    7674:	24012839 	.word	0x24012839

00007678 <__tMBSineTri_setShape_veneer>:
    7678:	f85f f000 	ldr.w	pc, [pc]	; 767c <__tMBSineTri_setShape_veneer+0x4>
    767c:	240119a1 	.word	0x240119a1

00007680 <__HAL_GPIO_WritePin_veneer>:
    7680:	f85f f000 	ldr.w	pc, [pc]	; 7684 <__HAL_GPIO_WritePin_veneer+0x4>
    7684:	24005277 	.word	0x24005277

00007688 <__tSimpleLivingString3_setTargetLev_veneer>:
    7688:	f85f f000 	ldr.w	pc, [pc]	; 768c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    768c:	24012121 	.word	0x24012121

00007690 <__tADSRT_setRelease_veneer>:
    7690:	f85f f000 	ldr.w	pc, [pc]	; 7694 <__tADSRT_setRelease_veneer+0x4>
    7694:	2400e451 	.word	0x2400e451

00007698 <__tLadderFilter_setFreqFast_veneer>:
    7698:	f85f f000 	ldr.w	pc, [pc]	; 769c <__tLadderFilter_setFreqFast_veneer+0x4>
    769c:	24010055 	.word	0x24010055

000076a0 <__tLivingString2_setBrightness_veneer>:
    76a0:	f85f f000 	ldr.w	pc, [pc]	; 76a4 <__tLivingString2_setBrightness_veneer+0x4>
    76a4:	24012565 	.word	0x24012565

000076a8 <__tNoise_tick_veneer>:
    76a8:	f85f f000 	ldr.w	pc, [pc]	; 76ac <__tNoise_tick_veneer+0x4>
    76ac:	24010e5d 	.word	0x24010e5d

000076b0 <__tPBSaw_setFreq_veneer>:
    76b0:	f85f f000 	ldr.w	pc, [pc]	; 76b4 <__tPBSaw_setFreq_veneer+0x4>
    76b4:	24010e21 	.word	0x24010e21

000076b8 <__tSineTriLFO_setPhase_veneer>:
    76b8:	f85f f000 	ldr.w	pc, [pc]	; 76bc <__tSineTriLFO_setPhase_veneer+0x4>
    76bc:	24011d57 	.word	0x24011d57

000076c0 <__tSimpleLivingString3_free_veneer>:
    76c0:	f85f f000 	ldr.w	pc, [pc]	; 76c4 <__tSimpleLivingString3_free_veneer+0x4>
    76c4:	24011d85 	.word	0x24011d85

000076c8 <__tLinearDelay_tick_veneer>:
    76c8:	f85f f000 	ldr.w	pc, [pc]	; 76cc <__tLinearDelay_tick_veneer+0x4>
    76cc:	2400d99d 	.word	0x2400d99d

000076d0 <__map_veneer>:
    76d0:	f85f f000 	ldr.w	pc, [pc]	; 76d4 <__map_veneer+0x4>
    76d4:	24000661 	.word	0x24000661

000076d8 <__tVZFilter_tickEfficient_veneer>:
    76d8:	f85f f000 	ldr.w	pc, [pc]	; 76dc <__tVZFilter_tickEfficient_veneer+0x4>
    76dc:	2400ee75 	.word	0x2400ee75

000076e0 <__tLivingString2_setPrepIndex_veneer>:
    76e0:	f85f f000 	ldr.w	pc, [pc]	; 76e4 <__tLivingString2_setPrepIndex_veneer+0x4>
    76e4:	24012535 	.word	0x24012535

000076e8 <__tSimpleLivingString3_setDampFreq_veneer>:
    76e8:	f85f f000 	ldr.w	pc, [pc]	; 76ec <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    76ec:	240120b1 	.word	0x240120b1

000076f0 <__tPBTriangle_setFreq_veneer>:
    76f0:	f85f f000 	ldr.w	pc, [pc]	; 76f4 <__tPBTriangle_setFreq_veneer+0x4>
    76f4:	24010c63 	.word	0x24010c63

000076f8 <__tCrusher_tick_veneer>:
    76f8:	f85f f000 	ldr.w	pc, [pc]	; 76fc <__tCrusher_tick_veneer+0x4>
    76fc:	2400df15 	.word	0x2400df15

00007700 <__LEAF_tanh_veneer>:
    7700:	f85f f000 	ldr.w	pc, [pc]	; 7704 <__LEAF_tanh_veneer+0x4>
    7704:	240102e1 	.word	0x240102e1

00007708 <__tCrusher_setSamplingRatio_veneer>:
    7708:	f85f f000 	ldr.w	pc, [pc]	; 770c <__tCrusher_setSamplingRatio_veneer+0x4>
    770c:	2400dfe5 	.word	0x2400dfe5

00007710 <__mtof_veneer>:
    7710:	f85f f000 	ldr.w	pc, [pc]	; 7714 <__mtof_veneer+0x4>
    7714:	240104e1 	.word	0x240104e1

00007718 <__tCrusher_setQuality_veneer>:
    7718:	f85f f000 	ldr.w	pc, [pc]	; 771c <__tCrusher_setQuality_veneer+0x4>
    771c:	2400df7d 	.word	0x2400df7d

00007720 <__tSawSquareLFO_setPhase_veneer>:
    7720:	f85f f000 	ldr.w	pc, [pc]	; 7724 <__tSawSquareLFO_setPhase_veneer+0x4>
    7724:	24011bdd 	.word	0x24011bdd

00007728 <__lrintf_veneer>:
    7728:	f85f f000 	ldr.w	pc, [pc]	; 772c <__lrintf_veneer+0x4>
    772c:	24013eb1 	.word	0x24013eb1

00007730 <__tSimpleLivingString3_tick_veneer>:
    7730:	f85f f000 	ldr.w	pc, [pc]	; 7734 <__tSimpleLivingString3_tick_veneer+0x4>
    7734:	24012235 	.word	0x24012235

00007738 <__tanhf_veneer>:
    7738:	f85f f000 	ldr.w	pc, [pc]	; 773c <__tanhf_veneer+0x4>
    773c:	24014279 	.word	0x24014279

00007740 <__tTriLFO_setPhase_veneer>:
    7740:	f85f f000 	ldr.w	pc, [pc]	; 7744 <__tTriLFO_setPhase_veneer+0x4>
    7744:	24011cab 	.word	0x24011cab

00007748 <__tADSRT_tick_veneer>:
    7748:	f85f f000 	ldr.w	pc, [pc]	; 774c <__tADSRT_tick_veneer+0x4>
    774c:	2400e4d5 	.word	0x2400e4d5

00007750 <__tPBSaw_tick_veneer>:
    7750:	f85f f000 	ldr.w	pc, [pc]	; 7754 <__tPBSaw_tick_veneer+0x4>
    7754:	24010dad 	.word	0x24010dad

00007758 <__tMBSineTri_tick_veneer>:
    7758:	f85f f000 	ldr.w	pc, [pc]	; 775c <__tMBSineTri_tick_veneer+0x4>
    775c:	24010fb9 	.word	0x24010fb9

00007760 <__tTriLFO_tick_veneer>:
    7760:	f85f f000 	ldr.w	pc, [pc]	; 7764 <__tTriLFO_tick_veneer+0x4>
    7764:	24011c0d 	.word	0x24011c0d

00007768 <__tDiodeFilter_setFreqFast_veneer>:
    7768:	f85f f000 	ldr.w	pc, [pc]	; 776c <__tDiodeFilter_setFreqFast_veneer+0x4>
    776c:	2400fc51 	.word	0x2400fc51

00007770 <__fasterexpf_veneer>:
    7770:	f85f f000 	ldr.w	pc, [pc]	; 7774 <__fasterexpf_veneer+0x4>
    7774:	240101a1 	.word	0x240101a1

00007778 <__tSimpleLivingString3_setDecay_veneer>:
    7778:	f85f f000 	ldr.w	pc, [pc]	; 777c <__tSimpleLivingString3_setDecay_veneer+0x4>
    777c:	240120c1 	.word	0x240120c1

00007780 <__tCrusher_setOperation_veneer>:
    7780:	f85f f000 	ldr.w	pc, [pc]	; 7784 <__tCrusher_setOperation_veneer+0x4>
    7784:	2400df69 	.word	0x2400df69

00007788 <__tLivingString2_setFreq_veneer>:
    7788:	f85f f000 	ldr.w	pc, [pc]	; 778c <__tLivingString2_setFreq_veneer+0x4>
    778c:	24012439 	.word	0x24012439

00007790 <__tVZFilter_setFreqFast_veneer>:
    7790:	f85f f000 	ldr.w	pc, [pc]	; 7794 <__tVZFilter_setFreqFast_veneer+0x4>
    7794:	2400f185 	.word	0x2400f185

00007798 <__tLivingString2_setLevSmoothFactor_veneer>:
    7798:	f85f f000 	ldr.w	pc, [pc]	; 779c <__tLivingString2_setLevSmoothFactor_veneer+0x4>
    779c:	24012813 	.word	0x24012813

000077a0 <__tIntPhasor_setPhase_veneer>:
    77a0:	f85f f000 	ldr.w	pc, [pc]	; 77a4 <__tIntPhasor_setPhase_veneer+0x4>
    77a4:	24011a1d 	.word	0x24011a1d

000077a8 <__tADSRT_setAttack_veneer>:
    77a8:	f85f f000 	ldr.w	pc, [pc]	; 77ac <__tADSRT_setAttack_veneer+0x4>
    77ac:	2400e3d5 	.word	0x2400e3d5

000077b0 <__LEAF_shaper_veneer>:
    77b0:	f85f f000 	ldr.w	pc, [pc]	; 77b4 <__LEAF_shaper_veneer+0x4>
    77b4:	24010249 	.word	0x24010249

000077b8 <__tLadderFilter_tick_veneer>:
    77b8:	f85f f000 	ldr.w	pc, [pc]	; 77bc <__tLadderFilter_tick_veneer+0x4>
    77bc:	2400fe09 	.word	0x2400fe09

000077c0 <__tSineTriLFO_tick_veneer>:
    77c0:	f85f f000 	ldr.w	pc, [pc]	; 77c4 <__tSineTriLFO_tick_veneer+0x4>
    77c4:	24011cf7 	.word	0x24011cf7

000077c8 <__setEffectsFunctions_veneer>:
    77c8:	f85f f000 	ldr.w	pc, [pc]	; 77cc <__setEffectsFunctions_veneer+0x4>
    77cc:	240022d5 	.word	0x240022d5

000077d0 <__arm_sin_f32_veneer>:
    77d0:	f85f f000 	ldr.w	pc, [pc]	; 77d4 <__arm_sin_f32_veneer+0x4>
    77d4:	24013545 	.word	0x24013545

000077d8 <__fasterdbtoa_veneer>:
    77d8:	f85f f000 	ldr.w	pc, [pc]	; 77dc <__fasterdbtoa_veneer+0x4>
    77dc:	240106f1 	.word	0x240106f1

000077e0 <__tPBPulse_setFreq_veneer>:
    77e0:	f85f f000 	ldr.w	pc, [pc]	; 77e4 <__tPBPulse_setFreq_veneer+0x4>
    77e4:	24010d67 	.word	0x24010d67

000077e8 <__tVZFilter_setGain_veneer>:
    77e8:	f85f f000 	ldr.w	pc, [pc]	; 77ec <__tVZFilter_setGain_veneer+0x4>
    77ec:	2400f425 	.word	0x2400f425

000077f0 <__tLivingString2_setLevMode_veneer>:
    77f0:	f85f f000 	ldr.w	pc, [pc]	; 77f4 <__tLivingString2_setLevMode_veneer+0x4>
    77f4:	2401285f 	.word	0x2401285f

000077f8 <__HAL_RNG_GenerateRandomNumber_veneer>:
    77f8:	f85f f000 	ldr.w	pc, [pc]	; 77fc <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    77fc:	24008b95 	.word	0x24008b95

00007800 <__tDiodeFilter_setQ_veneer>:
    7800:	f85f f000 	ldr.w	pc, [pc]	; 7804 <__tDiodeFilter_setQ_veneer+0x4>
    7804:	2400fc95 	.word	0x2400fc95

00007808 <__tSimpleLivingString3_initToPool_veneer>:
    7808:	f85f f000 	ldr.w	pc, [pc]	; 780c <__tSimpleLivingString3_initToPool_veneer+0x4>
    780c:	24011e91 	.word	0x24011e91

00007810 <__tCycle_setFreq_veneer>:
    7810:	f85f f000 	ldr.w	pc, [pc]	; 7814 <__tCycle_setFreq_veneer+0x4>
    7814:	24010b25 	.word	0x24010b25

00007818 <__LEAF_interpolation_linear_veneer>:
    7818:	f85f f000 	ldr.w	pc, [pc]	; 781c <__LEAF_interpolation_linear_veneer+0x4>
    781c:	240104a5 	.word	0x240104a5

00007820 <__tLivingString2_setPickPos_veneer>:
    7820:	f85f f000 	ldr.w	pc, [pc]	; 7824 <__tLivingString2_setPickPos_veneer+0x4>
    7824:	2401248d 	.word	0x2401248d

00007828 <__tSimpleLivingString3_pluck_veneer>:
    7828:	f85f f000 	ldr.w	pc, [pc]	; 782c <__tSimpleLivingString3_pluck_veneer+0x4>
    782c:	24012157 	.word	0x24012157

00007830 <__tSVF_tick_veneer>:
    7830:	f85f f000 	ldr.w	pc, [pc]	; 7834 <__tSVF_tick_veneer+0x4>
    7834:	2400ec7b 	.word	0x2400ec7b

00007838 <__faster_mtof_veneer>:
    7838:	f85f f000 	ldr.w	pc, [pc]	; 783c <__faster_mtof_veneer+0x4>
    783c:	2401058d 	.word	0x2401058d

00007840 <__tSineTriLFO_setShape_veneer>:
    7840:	f85f f000 	ldr.w	pc, [pc]	; 7844 <__tSineTriLFO_setShape_veneer+0x4>
    7844:	24011d7d 	.word	0x24011d7d

00007848 <__tSVF_setFreqFast_veneer>:
    7848:	f85f f000 	ldr.w	pc, [pc]	; 784c <__tSVF_setFreqFast_veneer+0x4>
    784c:	2400ed01 	.word	0x2400ed01

00007850 <__tADSRT_setDecay_veneer>:
    7850:	f85f f000 	ldr.w	pc, [pc]	; 7854 <__tADSRT_setDecay_veneer+0x4>
    7854:	2400e3fd 	.word	0x2400e3fd

00007858 <__tIntPhasor_setFreq_veneer>:
    7858:	f85f f000 	ldr.w	pc, [pc]	; 785c <__tIntPhasor_setFreq_veneer+0x4>
    785c:	24011a05 	.word	0x24011a05

00007860 <__tADSRT_tickNoInterp_veneer>:
    7860:	f85f f000 	ldr.w	pc, [pc]	; 7864 <__tADSRT_tickNoInterp_veneer+0x4>
    7864:	2400e755 	.word	0x2400e755

00007868 <__tLivingString2_tick_veneer>:
    7868:	f85f f000 	ldr.w	pc, [pc]	; 786c <__tLivingString2_tick_veneer+0x4>
    786c:	2401287d 	.word	0x2401287d

00007870 <__tSimpleLivingString3_setPickupPoint_veneer>:
    7870:	f85f f000 	ldr.w	pc, [pc]	; 7874 <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    7874:	240123a3 	.word	0x240123a3

00007878 <__tCycle_tick_veneer>:
    7878:	f85f f000 	ldr.w	pc, [pc]	; 787c <__tCycle_tick_veneer+0x4>
    787c:	24010ad5 	.word	0x24010ad5

00007880 <__tADSRT_setSustain_veneer>:
    7880:	f85f f000 	ldr.w	pc, [pc]	; 7884 <__tADSRT_setSustain_veneer+0x4>
    7884:	2400e425 	.word	0x2400e425

00007888 <__tDiodeFilter_tickEfficient_veneer>:
    7888:	f85f f000 	ldr.w	pc, [pc]	; 788c <__tDiodeFilter_tickEfficient_veneer+0x4>
    788c:	2400f9b9 	.word	0x2400f9b9

00007890 <__tSawSquareLFO_tick_veneer>:
    7890:	f85f f000 	ldr.w	pc, [pc]	; 7894 <__tSawSquareLFO_tick_veneer+0x4>
    7894:	24011b75 	.word	0x24011b75

00007898 <__tADSRT_off_veneer>:
    7898:	f85f f000 	ldr.w	pc, [pc]	; 789c <__tADSRT_off_veneer+0x4>
    789c:	2400e4c3 	.word	0x2400e4c3

000078a0 <__powf_veneer>:
    78a0:	f85f f000 	ldr.w	pc, [pc]	; 78a4 <__powf_veneer+0x4>
    78a4:	24013f61 	.word	0x24013f61

000078a8 <__tSquareLFO_setPhase_veneer>:
    78a8:	f85f f000 	ldr.w	pc, [pc]	; 78ac <__tSquareLFO_setPhase_veneer+0x4>
    78ac:	24011b0d 	.word	0x24011b0d

000078b0 <__tSVF_setQ_veneer>:
    78b0:	f85f f000 	ldr.w	pc, [pc]	; 78b4 <__tSVF_setQ_veneer+0x4>
    78b4:	2400ed6d 	.word	0x2400ed6d

000078b8 <__fastdbtoa_veneer>:
    78b8:	f85f f000 	ldr.w	pc, [pc]	; 78bc <__fastdbtoa_veneer+0x4>
    78bc:	240106dd 	.word	0x240106dd

000078c0 <__tLivingString2_setPrepPos_veneer>:
    78c0:	f85f f000 	ldr.w	pc, [pc]	; 78c4 <__tLivingString2_setPrepPos_veneer+0x4>
    78c4:	240124c5 	.word	0x240124c5

000078c8 <__tSimpleLivingString3_setLevMode_veneer>:
    78c8:	f85f f000 	ldr.w	pc, [pc]	; 78cc <__tSimpleLivingString3_setLevMode_veneer+0x4>
    78cc:	24012145 	.word	0x24012145

000078d0 <__setLFOShapes_veneer>:
    78d0:	f85f f000 	ldr.w	pc, [pc]	; 78d4 <__setLFOShapes_veneer+0x4>
    78d4:	2400295d 	.word	0x2400295d

000078d8 <__arm_fir_decimate_f32_veneer>:
    78d8:	f85f f000 	ldr.w	pc, [pc]	; 78dc <__arm_fir_decimate_f32_veneer+0x4>
    78dc:	240131d5 	.word	0x240131d5

000078e0 <__tSquareLFO_setPulseWidth_veneer>:
    78e0:	f85f f000 	ldr.w	pc, [pc]	; 78e4 <__tSquareLFO_setPulseWidth_veneer+0x4>
    78e4:	24011aa1 	.word	0x24011aa1
